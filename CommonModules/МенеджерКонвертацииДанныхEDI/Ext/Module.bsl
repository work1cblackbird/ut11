#Область СлужебныйПрограммныйИнтерфейс

#Область ПредставлениеПрикладногоОбъекта

Процедура ЗаполнитьПредставлениеВерсииЗаказаПоставщику(Результат, Знач Ссылка, ЕстьОшибки = Ложь, ТекстОшибки = "") Экспорт
	
	ОбъектФормата = ЗаказПоставщикуСсылкаВОбъектФормата(Ссылка, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Дата = ОбъектФормата.КлючевыеСвойства.Дата;
	Результат.Сумма = ОбъектФормата.Сумма;
	Результат.ПредставлениеВалюты = ЗначениеСвойстваXDTO(ОбъектФормата,
		"Валюта/ДанныеКлассификатора/Наименование");
	Результат.ПредставлениеМенеджера = ЗначениеСвойстваXDTO(ОбъектФормата,
		"Ответственный/Наименование");
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеВерсииЗаказаКлиента(Результат, Знач Ссылка, ЕстьОшибки = Ложь, ТекстОшибки = "") Экспорт
	
	ОбъектФормата = ЗаказКлиентаСсылкаВОбъектФормата(Ссылка, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Дата = ОбъектФормата.КлючевыеСвойства.Дата;
	Результат.Сумма = ОбъектФормата.Сумма;
	Результат.ПредставлениеВалюты = ЗначениеСвойстваXDTO(ОбъектФормата,
		"Валюта/ДанныеКлассификатора/Наименование");
	Результат.ПредставлениеМенеджера = ЗначениеСвойстваXDTO(ОбъектФормата,
		"Ответственный/Наименование");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССопоставлениемНоменклатуры

#Область ЗаказEDI

Функция ТоварныеПозицииЗаказа(Знач ТипДокумента, Знач МодельЗаказа, Знач ТаблицаСопоставления = Неопределено,
	СтороныУчастники = Неопределено) Экспорт
	
	Результат = НовыйТоварныеПозицииЗаказа();
	
	Если СтороныУчастники = Неопределено Тогда
		СтороныУчастники = СтороныУчастники(ТипДокумента, МодельЗаказа, Результат.ЕстьОшибки, Результат.ТекстОшибки);
		
		Если Результат.ЕстьОшибки Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяОперации = НСтр("ru='Получение таблицы сопоставления товарных позиций.'");
	
	ВариантУказанияНоменклатуры = ВариантУказанияНоменклатурыВЗаказе(ТипДокумента, МодельЗаказа,
		Результат.ЕстьОшибки, Результат.ТекстОшибки);
		
	Если Результат.ЕстьОшибки = Истина Тогда
		Возврат Результат
	КонецЕсли;
	
	Если ВариантУказанияНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураКонтрагента() Тогда
		Владелец = СопоставлениеНоменклатурыКонтрагентовСлужебный.ВладелецНоменклатурыКонтрагента(СтороныУчастники.Контрагент);
	Иначе
		Владелец = СтороныУчастники.Организация;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МодельЗаказа.itemLines) Тогда
		Результат.ВсеСтрокиСопоставлены = Ложь;
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = СтрШаблон(НСтр("ru='В документе %1 с идентификатором %2 не заполнена табличная часть'"),
			Строка(ТипДокумента), ИдентификаторВСервисе(МодельЗаказа));
		
		ЗафиксироватьОшибку(ИмяОперации, Результат.ТекстОшибки);
		
		Возврат Результат;
	КонецЕсли;
		
	ИдентификаторыПоСтрокам = Новый Массив;
	ТоварныеПозиции = Новый Массив;
	Для Каждого СтрокаЗаказа Из МодельЗаказа.itemLines Цикл
		ТоварнаяПозиция = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.НоваяНоменклатураКонтрагента();
		ТоварнаяПозиция.Владелец = Владелец;
		ТоварнаяПозиция.ВариантУказанияНоменклатуры = ВариантУказанияНоменклатуры;
		ТоварнаяПозиция.Наименование = СтрокаЗаказа.description;
		ТоварнаяПозиция.Характеристика = СтрокаЗаказа.extendedDescription;
		ТоварнаяПозиция.Артикул = СтрокаЗаказа.partNumber;
		ТоварнаяПозиция.ЕдиницаИзмерения = СтрокаЗаказа.unit.name;
		ТоварнаяПозиция.ЕдиницаИзмеренияКод = СтрокаЗаказа.unit.okei;

		Если Не ПустаяСтрока(СтрокаЗаказа.package.description) Тогда
			ТоварнаяПозиция.НаименованиеУпаковки = СтрокаЗаказа.package.description;
			ТоварнаяПозиция.ШтрихкодКомбинации = СтрокаЗаказа.package.gtin;
			ТоварнаяПозиция.Вставить("ШтрихкодыНоменклатуры", СтрокаЗаказа.unit.gtin);
			СвойстваУпаковки = ЧислительЗнаменательУпаковки(СтрокаЗаказа.package.size);
			ТоварнаяПозиция.КоличествоБазовойЕдиницыИзмерения = СвойстваУпаковки.Числитель;
			ТоварнаяПозиция.КоличествоУпаковок = СвойстваУпаковки.Знаменатель;
		Иначе
			ТоварнаяПозиция.Вставить("НаименованиеУпаковки", СтрокаЗаказа.unit.name);
			ТоварнаяПозиция.Вставить("ШтрихкодКомбинации", СтрокаЗаказа.unit.gtin);
			СвойстваУпаковки = ЧислительЗнаменательУпаковки(1);
			ТоварнаяПозиция.КоличествоБазовойЕдиницыИзмерения = СвойстваУпаковки.Числитель;
			ТоварнаяПозиция.КоличествоУпаковок = СвойстваУпаковки.Знаменатель;
		КонецЕсли;
		
		Если Не ПустаяСтрока(СтрокаЗаказа.ref1CNomenclature.id) Тогда
			ТоварнаяПозиция.Вставить("ИдентификаторНоменклатурыСервиса", СтрокаЗаказа.ref1CNomenclature.id);
			ТоварнаяПозиция.Вставить("ИдентификаторХарактеристикиСервиса",
				СтрокаЗаказа.ref1CNomenclature.characteristicId);
		КонецЕсли;
		
		ТоварнаяПозиция.Идентификатор = СуррогатныйКлючТоварнойПозиции(СтрокаЗаказа, МодельЗаказа);
		
		ЗаполнитьИдентификаторыДляПоискаТоварнойПозиции(ТоварнаяПозиция);

		ИдентификаторыПоСтрокам.Добавить(ТоварнаяПозиция.Идентификатор);
		
		ТоварныеПозиции.Добавить(ТоварнаяПозиция);
	КонецЦикла;
	
	Попытка
		РезультатПоиска = СопоставлениеНоменклатурыКонтрагентовСлужебный.СопоставленнаяНоменклатураСНоменклатуройИБ(ТоварныеПозиции);
		Если ТаблицаСопоставления <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСопоставления, РезультатПоиска);
			
			СвернутьРезультатПоиска(РезультатПоиска);
		КонецЕсли;
		
		РезультатПоиска.Индексы.Добавить("Идентификатор");
		
		Результат.ВсеСтрокиСопоставлены = Истина;
		Для Каждого ТоварнаяПозиция Из ТоварныеПозиции Цикл
			Если РезультатПоиска.Найти(ТоварнаяПозиция.Идентификатор, "Идентификатор") = Неопределено Тогда
				Результат.ВсеСтрокиСопоставлены = Ложь;
				Результат.НеСопоставленныеТоварныеПозиции.Добавить(ТоварнаяПозиция);
			КонецЕсли;
		КонецЦикла;
		Результат.ВариантУказанияНоменклатуры = ВариантУказанияНоменклатуры;
		Результат.ТаблицаСопоставления = РезультатПоиска;
	Исключение
		Результат.ВсеСтрокиСопоставлены = Ложь;
		Результат.ЕстьОшибки = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗафиксироватьОшибку(ИмяОперации, Результат.ТекстОшибки);
	КонецПопытки;
	
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонвертацияИзВнутреннегоФорматаEDIВОбъектФормата

#Область ЗаказEDI

Функция НовыйПараметрыКонвертацииЗаказаEDIВОбъектФормата() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("Контрагент");
	Результат.Вставить("СопоставлениеНоменклатуры");
	Результат.Вставить("ПрикладнойОбъект");
	Результат.Вставить("Ответственный");
	Результат.Вставить("Склад");
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектФорматаЗаказПоставщикуИзЗаказаEDI(Знач МодельЗаказа, Знач ПараметрыКонвертации, ЕстьОшибки, ТекстОшибки = "",
	ОбъектыФорматаПоСсылкам = Неопределено) Экспорт
	
	ОбъектыПоСсылкам = Новый Соответствие;
		
	Если ОбъектыФорматаПоСсылкам = Неопределено Тогда
		ОбъектыФорматаПоСсылкам = Новый Массив;
	КонецЕсли;
	
	// Инициализируем словарь. Нужен для перевода предопределенных значений сервиса в значения информационной базы
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	// Создаем объект xdto под данные заказа
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата("Документ.ЗаказПоставщику");
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("КлючевыеСвойства",
		КлючевыеСвойстваЗаказаПоставщикуXDTO(МодельЗаказа, ПараметрыКонвертации));
	ЗначенияСвойств.Вставить("Ответственный",
		КлючевыеСвойстваПользователяXDTO(МодельЗаказа.parties.buyer.contactPerson));
	ЗначенияСвойств.Вставить("Склад",
		КлючевыеСвойстваСкладXDTO(МодельЗаказа.delivery.point, ПараметрыКонвертации));
	ЗначенияСвойств.Вставить("Валюта",
		КлючевыеСвойстваВалютыXDTO(МодельЗаказа.termsAndConditions.currency.code, МодельЗаказа.termsAndConditions.currency.name));
	ЗначенияСвойств.Вставить("Сумма", МодельЗаказа.summary.totalAmount);
	ЗначенияСвойств.Вставить("ДанныеВзаиморасчетов",
		ОбщиеСвойстваДанныеВзаиморасчетовXDTO(МодельЗаказа.termsAndConditions.currency));
		
	Если Не ЗначениеЗаполнено(МодельЗаказа.delivery.point.addressInfo) Тогда
		ЗначенияСвойств.Вставить("АдресДоставки", МодельЗаказа.delivery.point.name);
	Иначе
		ЗначенияСвойств.Вставить("АдресДоставки", МодельЗаказа.delivery.point.addressInfo);
	КонецЕсли;
	
	ЗначенияСвойств.Вставить("СуммаВключаетНДС", МодельЗаказа.termsAndConditions.priceTaxIncluded);
	ЗначенияСвойств.Вставить("БанковскийСчетКонтрагента",
		КлючевыеСвойстваБанковскогоСчетаКонтрагентаXDTO(МодельЗаказа.parties.seller, МодельЗаказа.parties.seller.bankAccount,
		ПараметрыКонвертации));
	ЗначенияСвойств.Вставить("Товары",
		ТоварыЗаказаПоставщикуXDTO(ПараметрыКонвертации, МодельЗаказа, ОбъектыПоСсылкам));
	ЗначенияСвойств.Вставить("ЭтапыОплаты", ЭтапыОплатыЗаказаПоставщикуXDTO(МодельЗаказа));
	ЗначенияСвойств.Вставить("КонтактноеЛицоКонтрагента",
		КлючевыеСвойстваФизЛицаXDTO(МодельЗаказа.parties.seller.contactPerson));
	ЗначенияСвойств.Вставить("СпособДоставки", 
		ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.ФормыДоставкиЗаказаПоставщику, МодельЗаказа.delivery.form));
	ЗначенияСвойств.Вставить("НалогообложениеНДСПродавца",
		ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.НалогообложениеНДС, МодельЗаказа.termsAndConditions.taxed));
	ЗначенияСвойств.Вставить("ОжидаемаяДатаПоставки", МодельЗаказа.termsAndConditions.expectedDeliveryDate);
	ЗначенияСвойств.Вставить("ОтгружатьЗаказЦеликом", МодельЗаказа.termsAndConditions.wholeOrderDeliveryOnly);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Для Каждого КлючЗначение Из ОбъектыПоСсылкам Цикл
		ОбъектыФорматаПоСсылкам.Добавить(КлючЗначение.Значение);
	КонецЦикла;
		
	Возврат ОбъектФормата;
	
КонецФункции

Функция ОбъектФорматаЗаказКлиентаИзЗаказаEDI(Знач МодельЗаказа, Знач ПараметрыКонвертации, ЕстьОшибки, ТекстОшибки = "", 
		ОбъектыФорматаПоСсылкам = Неопределено) Экспорт

	// Инициализируем словарь. Нужен для перевода предопределенных значений сервиса в значения информационной базы
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	Если ОбъектыФорматаПоСсылкам = Неопределено Тогда
		ОбъектыФорматаПоСсылкам = Новый Массив;
	КонецЕсли;
	
	ОбъектыПоСсылкам = Новый Соответствие;
	
	// Создаем объект xdto под данные заказа
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата("Документ.ЗаказКлиента");
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("КлючевыеСвойства",
		КлючевыеСвойстваЗаказаКлиентаXDTO(МодельЗаказа, ПараметрыКонвертации));
	ЗначенияСвойств.Вставить("Ответственный",
		КлючевыеСвойстваПользователяXDTO(МодельЗаказа.parties.seller.contactPerson));
	ЗначенияСвойств.Вставить("Склад",
		КлючевыеСвойстваСкладXDTO(МодельЗаказа.delivery.point, ПараметрыКонвертации));
	ЗначенияСвойств.Вставить("Контрагент",
		КлючевыеСвойстваКонтрагентаXDTO(МодельЗаказа.parties.buyer, ПараметрыКонвертации));
	ЗначенияСвойств.Вставить("Валюта",
		КлючевыеСвойстваВалютыXDTO(МодельЗаказа.termsAndConditions.currency.code,
		МодельЗаказа.termsAndConditions.currency.name));
	ЗначенияСвойств.Вставить("Сумма", МодельЗаказа.summary.totalAmount);
	ЗначенияСвойств.Вставить("ДанныеВзаиморасчетов",
		ОбщиеСвойстваДанныеВзаиморасчетовXDTO(МодельЗаказа.termsAndConditions.currency));
		
	Если Не ЗначениеЗаполнено(МодельЗаказа.delivery.point.addressInfo) Тогда
		ЗначенияСвойств.Вставить("АдресДоставки", МодельЗаказа.delivery.point.name);
	Иначе
		ЗначенияСвойств.Вставить("АдресДоставки", МодельЗаказа.delivery.point.addressInfo);
	КонецЕсли;
		
	ЗначенияСвойств.Вставить("СуммаВключаетНДС", МодельЗаказа.termsAndConditions.priceTaxIncluded);
	ЗначенияСвойств.Вставить("БанковскийСчетОрганизации", КлючевыеСвойстваБанковскогоСчетаОрганизацииXDTO(
		МодельЗаказа.parties.seller, МодельЗаказа.parties.seller.bankAccount, ПараметрыКонвертации));
	ЗначенияСвойств.Вставить("Товары",
		ТоварыЗаказаКлиентаXDTO(ПараметрыКонвертации, МодельЗаказа, ОбъектыПоСсылкам));
	ЗначенияСвойств.Вставить("ЭтапыОплаты", ЭтапыОплатыЗаказаКлиентаXDTO(МодельЗаказа));
	ЗначенияСвойств.Вставить("КонтактноеЛицоКонтрагента",
		КлючевыеСвойстваФизЛицаXDTO(МодельЗаказа.parties.buyer.contactPerson));
	ЗначенияСвойств.Вставить("СпособДоставки", 
		ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.ФормыДоставкиЗаказаКлиента, МодельЗаказа.delivery.form));
	ЗначенияСвойств.Вставить("НалогообложениеНДСПродавца",
		ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.НалогообложениеНДС, МодельЗаказа.termsAndConditions.taxed));
	ЗначенияСвойств.Вставить("ОжидаемаяДатаПоставки", МодельЗаказа.termsAndConditions.expectedDeliveryDate);
	ЗначенияСвойств.Вставить("ОтгружатьЗаказЦеликом", МодельЗаказа.termsAndConditions.wholeOrderDeliveryOnly);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Для Каждого КлючЗначение Из ОбъектыПоСсылкам Цикл
		ОбъектыФорматаПоСсылкам.Добавить(КлючЗначение.Значение);
	КонецЦикла;
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция СтороныУчастники(Знач ТипДокумента, Знач МодельЗаказа, ЕстьОшибки, ТекстОшибки = "") Экспорт
	
	Результат = Новый Структура("Организация, Контрагент");
	
	Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		Результат.Организация = ИнтеграцияССервисомEDIСлужебный.ОрганизацияБизнесСети(
			ИдентификаторПокупателя(МодельЗаказа), ЕстьОшибки, ТекстОшибки);
		
		Результат.Контрагент = ИнтеграцияССервисомEDIСлужебный.КонтрагентБизнесСети(
			ИдентификаторПоставщика(МодельЗаказа), ЕстьОшибки, ТекстОшибки);
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		Результат.Организация = ИнтеграцияССервисомEDIСлужебный.ОрганизацияБизнесСети(
			ИдентификаторПоставщика(МодельЗаказа), ЕстьОшибки, ТекстОшибки);
			
		Результат.Контрагент = ИнтеграцияССервисомEDIСлужебный.КонтрагентБизнесСети(
			ИдентификаторПокупателя(МодельЗаказа), ЕстьОшибки, ТекстОшибки);
	Иначе
		ЕстьОшибки = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru='Неизвестный тип документа EDI: %1'"), ТипДокумента);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Справочники

Функция ОбъектФорматаПользовательИзСотрудникаEDI(Знач МодельСотрудника, ЕстьОшибки, ТекстОшибки = "") Экспорт
	
	// Создаем объект xdto под данные заказа
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата("Справочник.Пользователи");
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);

	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("КлючевыеСвойства", КлючевыеСвойстваПользователяXDTO(МодельСотрудника));
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
		
	Возврат ОбъектФормата;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонвертацияИзОбъектаФорматаВоВнутреннийФорматEDI

#Область ЗаказEDI

Функция ЗаказEDIИзОбъектаФорматаЗаказаПоставщику(Знач ПараметрыКонвертации, Знач ОбъектФормата, ЕстьОшибки, ТекстОшибки) Экспорт
	
	ОписаниеСтруктурыДанныхЗаказа = ИнтеграцияССервисомEDIСлужебный.ОписаниеСтруктурыДанныхЗаказа();
	СхемаЗаказа  = ОписаниеСтруктурыДанныхЗаказа.Схема;
	МодельЗаказа = ИнтеграцияССервисомEDIСлужебный.ПустаяМодельПоСхеме(СхемаЗаказа);
	
	ЗаполнитьУчастниковЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата);
	
	ЗаполнитьКонтактноеЛицоОрганизацииЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	
	ЗаполнитьКонтактноеЛицоКонтрагентаЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	
	ЗаполнитьУсловияДоставкиЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	
	ЗаполнитьУсловияИСоглашенияЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата);
	
	ЗаполнитьТаблицуТоваровЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата);
	
	ЗаполнитьТаблицуГрафикаОплатЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
		
	Если ПараметрыКонвертации.ПередаватьНомерДокумента Тогда
		ЗаполнитьДатуНомерЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	КонецЕсли;
	
	ИнтеграцияССервисомEDIСлужебный.НормализоватьДанныеПоСхеме(МодельЗаказа,
		ОписаниеСтруктурыДанныхЗаказа, Ложь);
		
	Возврат МодельЗаказа;
	
КонецФункции

Функция ЗаказEDIИзОбъектаФорматаЗаказаКлиента(Знач ПараметрыКонвертации, Знач ОбъектФормата, ЕстьОшибки, ТекстОшибки) Экспорт
	
	СхемаЗаказа  = ИнтеграцияССервисомEDIСлужебный.ОписаниеСтруктурыДанныхЗаказа().Схема;
	МодельЗаказа = ИнтеграцияССервисомEDIСлужебный.ПустаяМодельПоСхеме(СхемаЗаказа);

	ЗаполнитьУчастниковЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата);
	
	ЗаполнитьУсловияДоставкиЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	
	ЗаполнитьКонтактноеЛицоОрганизацииЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	
	ЗаполнитьКонтактноеЛицоКонтрагентаЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	
	ЗаполнитьУсловияИСоглашенияЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата);
	
	ЗаполнитьТаблицуТоваровЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата);
	
	ЗаполнитьТаблицуГрафикаОплатЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	
	Если ПараметрыКонвертации.ПередаватьНомерДокумента Тогда
		ЗаполнитьДатуНомерЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата);
	КонецЕсли;
	
	ИнтеграцияССервисомEDIСлужебный.НормализоватьДанныеПоСхеме(МодельЗаказа,
		ИнтеграцияССервисомEDIСлужебный.ОписаниеСтруктурыДанныхЗаказа(), Ложь);
	
	Возврат МодельЗаказа;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонвертацияОбъектаИнформационнойБазыВОбъектФормата

#Область ЗаказEDI

Функция ЗаказПоставщикуСсылкаВОбъектФормата(Знач Ссылка, ЕстьОшибки = Ложь, ТекстОшибки = "") Экспорт
	
	ИмяОбъектаФормата = ОбъектФорматаЗаказПоставщику();
	
	// Получение заполненного объекта формата по данным информационной базы
	РезультатыКонвертации = ПреобразованиеДанныхEDIСлужебный.ОбъектыФорматаПоСсылке(Ссылка, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// В результате конвертации может выгрузиться несколько объектов XDTO.
	// Требуется вернуть только объект указанного типа
	РезультатКонвертации = РезультатыКонвертации.Найти(ИмяОбъектаФормата, "ОбъектФормата");
	Если РезультатКонвертации = Неопределено Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='При конвертации %1 не найден объект формата ""Документ.ЗаказПоставщику""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(Ссылка));
		
		Возврат Неопределено;
	КонецЕсли;

	Возврат РезультатКонвертации.ОбъектXDTO;
	
КонецФункции

Функция ЗаказКлиентаСсылкаВОбъектФормата(Знач Ссылка, ЕстьОшибки = Ложь, ТекстОшибки = "") Экспорт
	
	ИмяОбъектаФормата = ОбъектФорматаЗаказКлиента();
	
	// Получение заполненного объекта формата по данным информационной базы
	РезультатыКонвертации = ПреобразованиеДанныхEDIСлужебный.ОбъектыФорматаПоСсылке(Ссылка, ЕстьОшибки, ТекстОшибки);
	Если ЕстьОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// В результате конвертации может выгрузиться несколько объектов XDTO.
	// Требуется вернуть только объект указанного типа
	РезультатКонвертации = РезультатыКонвертации.Найти(ИмяОбъектаФормата, "ОбъектФормата");
	Если РезультатКонвертации = Неопределено Тогда
		ЕстьОшибки = Истина;
		ТекстОшибки = НСтр("ru='При конвертации %1 не найден объект формата ""Документ.ЗаказКлиента""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Строка(Ссылка));
		
		Возврат Неопределено;
	КонецЕсли;

	Возврат РезультатКонвертации.ОбъектXDTO;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонвертацияИзДанныхБизнесСетиВОбъектФормата

Функция ОбъектФорматаКонтрагентПоДаннымБизнесСети(Знач ДанныеБизнесСети) Экспорт
	
	// Создаем объект xdto под данные заказа
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата("Справочник.Контрагенты");
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
	
	ДанныеКонтрагента = Новый Соответствие;
	ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо",
		?(СтрДлина(ДанныеБизнесСети.КПП) < 9,"ФизическоеЛицо", "ЮридическоеЛицо"));
	ДанныеКонтрагента.Вставить("Наименование", ДанныеБизнесСети.Наименование);
	ДанныеКонтрагента.Вставить("ИНН", ДанныеБизнесСети.ИНН);
	ДанныеКонтрагента.Вставить("КПП", ДанныеБизнесСети.КПП);
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("КлючевыеСвойства", НовыйКлючевыеСвойстваКонтрагентаXDTO(ДанныеКонтрагента));
	ЗначенияСвойств.Вставить("ДополнительнаяИнформация", ДанныеБизнесСети.Описание);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонвертацияИзВнутреннегоФорматаEDIВОбъектФормата

#Область ЗаказПоставщику

Функция КлючевыеСвойстваЗаказаПоставщикуXDTO(Знач МодельЗаказа, Знач ПараметрыКонвертации)
	
	ПрикладнойОбъект = ПараметрыКонвертации.ПрикладнойОбъект;
	
	// Если передан прикладной объект - ссылку / номер / дату берется из него.
	// Иначе в качестве ссылки используется идентификатор документа сервиса
	ИмяОбъектаФормата = "КлючевыеСвойстваЗаказПоставщику";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("Дата", МодельЗаказа.documentHeader.buyerNumberDate.date);
	ЗначенияСвойств.Вставить("Номер", МодельЗаказа.documentHeader.buyerNumberDate.number);
	ЗначенияСвойств.Вставить("Организация", КлючевыеСвойстваОрганизацииXDTO(ИдентификаторПокупателя(МодельЗаказа), ПараметрыКонвертации));
	ЗначенияСвойств.Вставить("Контрагент", КлючевыеСвойстваКонтрагентаXDTO(МодельЗаказа.parties.seller, ПараметрыКонвертации));
	
	Если ПрикладнойОбъект = Неопределено Тогда
		ЗначенияСвойств.Вставить("Ссылка", МодельЗаказа.documentHeader.id);
	Иначе
		ЗначенияСвойств.Вставить("Ссылка", XMLСтрока(ПрикладнойОбъект.УникальныйИдентификатор()));
	КонецЕсли;
	
	Если КоллекцияСодержитДанные(МодельЗаказа.documentHeader.sellerNumberDate) Тогда
		ЗначенияСвойств.Вставить("ДанныеВходящегоДокумента", 
			ОбщиеСвойстваДанныеВходящегоДокументаXDTO(
				МодельЗаказа.documentHeader.sellerNumberDate.number,
				МодельЗаказа.documentHeader.sellerNumberDate.date));
	КонецЕсли;
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);

	Возврат ОбъектФормата;
	
КонецФункции

Функция ТоварыЗаказаПоставщикуXDTO(Знач ПараметрыКонвертации, Знач МодельЗаказа, ОбъектыФорматаПоСсылкам)
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();

	ИмяОбъектаФормата = "Документ.ЗаказПоставщику.Товары";
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);

	ТипСтрокиXDTO = ТипОбъектаФормата.Свойства[0].Тип;
	ИмяСвойстваСтроки = ТипОбъектаФормата.Свойства[0].Имя;

	СопоставлениеНоменклатуры = ПараметрыКонвертации.СопоставлениеНоменклатуры;
	
	СписокXDTO = ОбъектФормата[ИмяСвойстваСтроки];
	Для Каждого СтрокаЗаказа Из МодельЗаказа.itemLines Цикл
		СтрокаXDTO = ФабрикаXDTO.Создать(ТипСтрокиXDTO);
		
		КоэффициентПересчета = ?(Не ЗначениеЗаполнено(СтрокаЗаказа.package.size), 1, СтрокаЗаказа.package.size);
		
		ЗначенияСвойств = Новый Соответствие;
		ЗначенияСвойств.Вставить("ДанныеНоменклатуры",
			ОбщиеСвойстваДанныеНоменклатурыXDTO(СтрокаЗаказа, МодельЗаказа, СопоставлениеНоменклатуры, ОбъектыФорматаПоСсылкам));
		ЗначенияСвойств.Вставить("ЕдиницаИзмерения", КлючевыеСвойстваЕдиницыИзмеренияXDTO(СтрокаЗаказа.unit));
		ЗначенияСвойств.Вставить("Количество", СтрокаЗаказа.quantity * КоэффициентПересчета);
		ЗначенияСвойств.Вставить("Сумма", СтрокаЗаказа.amount);
		ЗначенияСвойств.Вставить("Цена", 
			?(СтрокаЗаказа.quantity = 0, 0, Окр(СтрокаЗаказа.amount / (СтрокаЗаказа.quantity * КоэффициентПересчета), 2, 1)));
		ЗначенияСвойств.Вставить("ЦенаЗаУпаковку", СтрокаЗаказа.price);
		ЗначенияСвойств.Вставить("КоличествоУпаковок", СтрокаЗаказа.quantity);
		ЗначенияСвойств.Вставить("СтавкаНДС",
			ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.СтавкиНДС, СтрокаЗаказа.taxRate));
		ЗначенияСвойств.Вставить("ТипЗапасов", "СобственныеТовары");
		ЗначенияСвойств.Вставить("СуммаНДС", СтрокаЗаказа.taxAmount);
		ЗначенияСвойств.Вставить("ОжидаемаяДатаПоставки", СтрокаЗаказа.expectedDeliveryDate);
	
		Если НоменклатураВТерминахПоставщика(МодельЗаказа) Тогда
			ЗначенияСвойств.Вставить("SKUКонтрагента",
				КлючевыеСвойстваSKUКонтрагентаXDTO(СтрокаЗаказа, МодельЗаказа,
				ПараметрыКонвертации, МодельЗаказа.parties.seller));
		КонецЕсли;
		
		ЗаполнитьОбъектXDTO(СтрокаXDTO, ЗначенияСвойств);
		
		СписокXDTO.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат ОбъектФормата
	
КонецФункции

Функция ЭтапыОплатыЗаказаПоставщикуXDTO(МодельЗаказа)
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	ИмяОбъектаФормата = "Документ.ЗаказПоставщику.ЭтапыОплаты";
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
	
	ТипСтрокиXDTO = ТипОбъектаФормата.Свойства[0].Тип;
	ИмяСвойстваСтроки = ТипОбъектаФормата.Свойства[0].Имя;
	
	СписокXDTO = ОбъектФормата[ИмяСвойстваСтроки];
	Для Каждого СтрокаЗаказа Из МодельЗаказа.paymentSchedule Цикл
		СтрокаXDTO = ФабрикаXDTO.Создать(ТипСтрокиXDTO);
		
		ЗначенияСвойств = Новый Соответствие;
		ЗначенияСвойств.Вставить("ВариантОплаты",
			ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.ВариантыОплаты, СтрокаЗаказа.option));
		ЗначенияСвойств.Вставить("ФормаОплаты",
			ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.ФормыОплаты, СтрокаЗаказа.kind));
		ЗначенияСвойств.Вставить("ДатаПлатежа", СтрокаЗаказа.date);
		ЗначенияСвойств.Вставить("ПроцентПлатежа", СтрокаЗаказа.percent);
		ЗначенияСвойств.Вставить("СуммаПлатежа", СтрокаЗаказа.amount);
		ЗначенияСвойств.Вставить("КоличествоДнейОтсрочки", СтрокаЗаказа.delay);
	
		ЗаполнитьОбъектXDTO(СтрокаXDTO, ЗначенияСвойств);
		
		СписокXDTO.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат ОбъектФормата
	
КонецФункции

#КонецОбласти

#Область ЗаказКлиента

Функция КлючевыеСвойстваЗаказаКлиентаXDTO(Знач МодельСервиса, Знач ПараметрыКонвертации)
	
	ПрикладнойОбъект = ПараметрыКонвертации.ПрикладнойОбъект;
	
	// Если передан прикладной объект - ссылку / номер / дату берется из него.
	// Иначе в качестве ссылки используется идентификатор документа сервиса
	ИмяОбъектаФормата = "КлючевыеСвойстваЗаказКлиента";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("Дата", МодельСервиса.documentHeader.sellerNumberDate.date);
	ЗначенияСвойств.Вставить("Номер", МодельСервиса.documentHeader.sellerNumberDate.number);
	ЗначенияСвойств.Вставить("Организация", КлючевыеСвойстваОрганизацииXDTO(ИдентификаторПоставщика(МодельСервиса),
		ПараметрыКонвертации));
	
	Если ПрикладнойОбъект = Неопределено Тогда
		ЗначенияСвойств.Вставить("Ссылка", МодельСервиса.documentHeader.id);
	Иначе
		ЗначенияСвойств.Вставить("Ссылка", XMLСтрока(ПрикладнойОбъект.УникальныйИдентификатор()));
	КонецЕсли;
	
	Если КоллекцияСодержитДанные(МодельСервиса.documentHeader.buyerNumberDate) Тогда
		ЗначенияСвойств.Вставить("ДанныеВходящегоДокумента", 
			ОбщиеСвойстваДанныеВходящегоДокументаXDTO(
				МодельСервиса.documentHeader.buyerNumberDate.number,
				МодельСервиса.documentHeader.buyerNumberDate.date));
	КонецЕсли;
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);

	Возврат ОбъектФормата;
	
КонецФункции

Функция ТоварыЗаказаКлиентаXDTO(Знач ПараметрыКонвертации, Знач МодельЗаказа, ОбъектыФорматаПоСсылкам)
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();

	ИмяОбъектаФормата = "Документ.ЗаказКлиента.Товары";
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);

	ТипСтрокиXDTO = ТипОбъектаФормата.Свойства[0].Тип;
	ИмяСвойстваСтроки = ТипОбъектаФормата.Свойства[0].Имя;
	
	СопоставлениеНоменклатуры = ПараметрыКонвертации.СопоставлениеНоменклатуры;
	
	СписокXDTO = ОбъектФормата[ИмяСвойстваСтроки];
	Для Каждого СтрокаЗаказа Из МодельЗаказа.itemLines Цикл
		СтрокаXDTO = ФабрикаXDTO.Создать(ТипСтрокиXDTO);
		
		КоэффициентПересчета = ?(Не ЗначениеЗаполнено(СтрокаЗаказа.package.size), 1, СтрокаЗаказа.package.size);
		
		ЗначенияСвойств = Новый Соответствие;
		ЗначенияСвойств.Вставить("ДанныеНоменклатуры",
			ОбщиеСвойстваДанныеНоменклатурыXDTO(СтрокаЗаказа, МодельЗаказа, СопоставлениеНоменклатуры, ОбъектыФорматаПоСсылкам));
		ЗначенияСвойств.Вставить("ЕдиницаИзмерения", КлючевыеСвойстваЕдиницыИзмеренияXDTO(СтрокаЗаказа.unit));
		ЗначенияСвойств.Вставить("Количество", СтрокаЗаказа.quantity * КоэффициентПересчета);
		ЗначенияСвойств.Вставить("Сумма", СтрокаЗаказа.amount);
		ЗначенияСвойств.Вставить("Цена", 
			?(СтрокаЗаказа.quantity = 0, 0, Окр(СтрокаЗаказа.amount / (СтрокаЗаказа.quantity * КоэффициентПересчета), 2, 1)));
		ЗначенияСвойств.Вставить("ЦенаЗаУпаковку", СтрокаЗаказа.price);
		ЗначенияСвойств.Вставить("КоличествоУпаковок", СтрокаЗаказа.quantity);
		ЗначенияСвойств.Вставить("СтавкаНДС",
			ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.СтавкиНДС, СтрокаЗаказа.taxRate));
		ЗначенияСвойств.Вставить("ТипЗапасов", "СобственныеТовары");
		ЗначенияСвойств.Вставить("СуммаНДС", СтрокаЗаказа.taxAmount);
		ЗначенияСвойств.Вставить("ОжидаемаяДатаПоставки", СтрокаЗаказа.expectedDeliveryDate);
	
		Если НоменклатураВТерминахПокупателя(МодельЗаказа) Тогда
			ЗначенияСвойств.Вставить("SKUКонтрагента", КлючевыеСвойстваSKUКонтрагентаXDTO(СтрокаЗаказа, МодельЗаказа,
				ПараметрыКонвертации, МодельЗаказа.parties.buyer));
		КонецЕсли;
			
		ЗаполнитьОбъектXDTO(СтрокаXDTO, ЗначенияСвойств);
		
		СписокXDTO.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат ОбъектФормата
	
КонецФункции

Функция ЭтапыОплатыЗаказаКлиентаXDTO(МодельЗаказа)
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	ИмяОбъектаФормата = "Документ.ЗаказКлиента.ЭтапыОплаты";
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
	
	ТипСтрокиXDTO = ТипОбъектаФормата.Свойства[0].Тип;
	ИмяСвойстваСтроки = ТипОбъектаФормата.Свойства[0].Имя;
	
	СписокXDTO = ОбъектФормата[ИмяСвойстваСтроки];
	Для Каждого СтрокаЗаказа Из МодельЗаказа.paymentSchedule Цикл
		СтрокаXDTO = ФабрикаXDTO.Создать(ТипСтрокиXDTO);
		
		ЗначенияСвойств = Новый Соответствие;
		ЗначенияСвойств.Вставить("ВариантОплаты",
			ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.ВариантыОплаты, СтрокаЗаказа.option));
		ЗначенияСвойств.Вставить("ФормаОплаты",
			ИнтеграцияССервисомEDIСлужебный.ЗначениеТермина(Словарь.ФормыОплаты, СтрокаЗаказа.kind));
		ЗначенияСвойств.Вставить("ДатаПлатежа", СтрокаЗаказа.date);
		ЗначенияСвойств.Вставить("ПроцентПлатежа", СтрокаЗаказа.percent);
		ЗначенияСвойств.Вставить("СуммаПлатежа", СтрокаЗаказа.amount);
		ЗначенияСвойств.Вставить("КоличествоДнейОтсрочки", СтрокаЗаказа.delay);
	
		ЗаполнитьОбъектXDTO(СтрокаXDTO, ЗначенияСвойств);
		
		СписокXDTO.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат ОбъектФормата
	
КонецФункции

#КонецОбласти

#Область Справочники

Функция СправочникНоменклатурыXDTO(Знач ДанныеСтроки)
		
	Если ПустаяСтрока(ДанныеСтроки.description) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяОбъектаФормата = "Справочник.Номенклатура";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
		
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("КлючевыеСвойства", НовыйКлючевыеСвойстваНоменклатурыXDTO(ДанныеСтроки));
	ЗначенияСвойств.Вставить("ТипНоменклатуры", "Товар");
	ЗначенияСвойств.Вставить("ЕдиницаИзмерения", КлючевыеСвойстваЕдиницыИзмеренияXDTO(ДанныеСтроки.unit));
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
		
	Возврат ОбъектФормата;
	
КонецФункции

Функция НовыйКлючевыеСвойстваНоменклатурыXDTO(Знач ДанныеСтроки)
	
	Если ПустаяСтрока(ДанныеСтроки.description) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбъектаФормата = "КлючевыеСвойстваНоменклатура";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("НаименованиеПолное", ДанныеСтроки.description);
	ЗначенияСвойств.Вставить("Артикул", ДанныеСтроки.partNumber);
	ЗначенияСвойств.Вставить("Наименование", ДанныеСтроки.description);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваНоменклатурыXDTO(Знач ДанныеСтроки, Знач МодельЗаказа, Знач СопоставлениеНоменклатуры,
	ОбъектыФорматаПоСсылкам = Неопределено)
	
	КлючТоварнойПозиции = СуррогатныйКлючТоварнойПозиции(ДанныеСтроки, МодельЗаказа);
	
	Ссылка = СопоставлениеНоменклатуры.Найти(КлючТоварнойПозиции, "Идентификатор");
	Если Ссылка <> Неопределено Тогда
		Ссылка = Ссылка.НоменклатураИБ;
	КонецЕсли;
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	Если Ссылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		ОбъектФормата = ПреобразованиеДанныхEDIСлужебный.КлючевыеСвойстваОбъектаФорматаПоСсылке(
			Ссылка, "Справочник.Номенклатура", ЕстьОшибки, ТекстОшибки);
		
		Если ЕстьОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		ОбъектФормата = НовыйКлючевыеСвойстваНоменклатурыXDTO(ДанныеСтроки);
		
		ТипыНоменклатура = Метаданные.ОпределяемыеТипы.НоменклатураEDI.Тип.Типы();
		Если ТипыНоменклатура.Количество() <> 1 Тогда
			ВызватьИсключение
				НСтр("ru='Встраивание подсистемы СервисEDI выполнено не корректно.
					|Определяемый тип НоменклатураEDI должен ссылаться только на один объект конфигурации.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		ОбъектКонфигурации = Метаданные.НайтиПоТипу(ТипыНоменклатура[0]);
		Если ОбъектыФорматаПоСсылкам <> Неопределено Тогда
			ОбъектыФорматаПоСсылкам.Вставить(
				КлючОбъектаXDTO(ОбъектФормата),
				НовыйСопутствующаяСсылка(СправочникНоменклатурыXDTO(ДанныеСтроки), ОбъектКонфигурации));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваХарактеристикиXDTO(Знач ДанныеСтроки, Знач МодельЗаказа, Знач СопоставлениеНоменклатуры,
	ОбъектыФорматаПоСсылкам)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";

	ИмяОбъектаФормата = "КлючевыеСвойстваХарактеристикаНоменклатуры";
	КлючТоварнойПозиции = СуррогатныйКлючТоварнойПозиции(ДанныеСтроки, МодельЗаказа);
	
	Ссылка = СопоставлениеНоменклатуры.Найти(КлючТоварнойПозиции, "Идентификатор");
	Если Ссылка <> Неопределено Тогда
		Ссылка = Ссылка.ХарактеристикаИБ;
	КонецЕсли;
	
	Если Ссылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		ОбъектФормата = ПреобразованиеДанныхEDIСлужебный.КлючевыеСвойстваОбъектаФорматаПоСсылке(
			Ссылка, "Справочник.ХарактеристикиНоменклатуры", ЕстьОшибки, ТекстОшибки);
			
		Если ОбъектФормата = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		Если ЕстьОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		ТипОбъектаФормата = ОбъектФормата.Тип();
	Иначе
		Если ПустаяСтрока(ДанныеСтроки.extendedDescription) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
		ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
		
		// Заполнение основного объекта
		ЗначенияСвойств = Новый Соответствие;
		ЗначенияСвойств.Вставить("ВладелецХарактеристики",
			ОбщиеСвойстваВладелецХарактеристикиXDTO(ДанныеСтроки, МодельЗаказа, СопоставлениеНоменклатуры,
			ОбъектыФорматаПоСсылкам));
		ЗначенияСвойств.Вставить("НаименованиеПолное", ДанныеСтроки.extendedDescription);

		ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	КонецЕсли;
		
		
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваУпаковкиXDTO(Знач ДанныеСтроки, Знач МодельЗаказа, Знач СопоставлениеНоменклатуры,
	ОбъектыФорматаПоСсылкам)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";

	ИмяОбъектаФормата = "КлючевыеСвойстваУпаковка";
	КлючТоварнойПозиции = СуррогатныйКлючТоварнойПозиции(ДанныеСтроки, МодельЗаказа);
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	// Заполнение основного объекта
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("Номенклатура",
		КлючевыеСвойстваНоменклатурыXDTO(ДанныеСтроки, МодельЗаказа, СопоставлениеНоменклатуры, ОбъектыФорматаПоСсылкам));
	ЗначенияСвойств.Вставить("ЕдиницаИзмерения", КлючевыеСвойстваЕдиницыИзмеренияXDTO(ДанныеСтроки.unit));
	
	Ссылка = СопоставлениеНоменклатуры.Найти(КлючТоварнойПозиции, "Идентификатор");
	Если Ссылка <> Неопределено Тогда
		Ссылка = Ссылка.УпаковкаИБ;
	КонецЕсли;
	
	Если Ссылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		ДанныеБазы = ПреобразованиеДанныхEDIСлужебный.КлючевыеСвойстваОбъектаФорматаПоСсылке(
			Ссылка, "Справочник.Упаковки", ЕстьОшибки, ТекстОшибки);
			
		Если ДанныеБазы = Неопределено Или ДанныеБазы.Коэффициент = Неопределено Или ОбъектФормата.Коэффициент = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		СкопироватьНепустыеЗначенияСвойств(ДанныеБазы, ЗначенияСвойств);
	Иначе
		Если ПустаяСтрока(ДанныеСтроки.package.description) Или ДанныеСтроки.package.size = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЗначенияСвойств.Вставить("Коэффициент", ДанныеСтроки.package.size);
		ЗначенияСвойств.Вставить("Наименование", ДанныеСтроки.package.description);
	КонецЕсли;

	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств, Ложь);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваУпаковкиКонтрагентаXDTO(Знач ДанныеСтроки, Знач МодельЗаказа, Знач СопоставлениеНоменклатуры)
	
	ИмяОбъектаФормата = "КлючевыеСвойстваУпаковка";
	
	Если ПустаяСтрока(ДанныеСтроки.package.description) Или ДанныеСтроки.package.size = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
		
	// Заполнение основного объекта
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("Номенклатура",
		КлючевыеСвойстваНоменклатурыXDTO(ДанныеСтроки, МодельЗаказа, СопоставлениеНоменклатуры));
	ЗначенияСвойств.Вставить("ЕдиницаИзмерения", КлючевыеСвойстваЕдиницыИзмеренияXDTO(ДанныеСтроки.unit));
	ЗначенияСвойств.Вставить("Коэффициент", ДанныеСтроки.package.size);
	ЗначенияСвойств.Вставить("Наименование", ДанныеСтроки.package.description);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
		
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваSKUКонтрагентаXDTO(Знач ДанныеСтроки, Знач МодельЗаказа, Знач ПараметрыКонвертации,
	Знач ДанныеКонтрагента)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";

	ИмяОбъектаФормата = "КлючевыеСвойстваSKUКонтрагента";
	КлючТоварнойПозиции = СуррогатныйКлючТоварнойПозиции(ДанныеСтроки, МодельЗаказа);
	
	СопоставлениеНоменклатуры = ПараметрыКонвертации.СопоставлениеНоменклатуры;
	
	Ссылка = СопоставлениеНоменклатуры.Найти(КлючТоварнойПозиции, "Идентификатор");
	Если Ссылка <> Неопределено Тогда
		Ссылка = Ссылка.НоменклатураКонтрагента;
	КонецЕсли;
	
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	ЗначенияСвойств = Новый Соответствие;
	
	Если Ссылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		КлючевыеСвойства = ПреобразованиеДанныхEDIСлужебный.КлючевыеСвойстваОбъектаФорматаПоСсылке(
			Ссылка, "Справочник.SKUКонтрагента", ЕстьОшибки, ТекстОшибки);
		
		Если ЕстьОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Для Каждого СвойствоXDTO Из КлючевыеСвойства.Свойства() Цикл
			ЗначениеXDTO = КлючевыеСвойства.Получить(СвойствоXDTO);
			Если ЗначениеXDTO = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначенияСвойств.Вставить(СвойствоXDTO.Имя, ЗначениеXDTO);
		КонецЦикла;
	Иначе
		// Заполнение основного объекта
		ЗначенияСвойств.Вставить("Наименование", ДанныеСтроки.description);
		ЗначенияСвойств.Вставить("Артикул", ДанныеСтроки.partNumber);
		ЗначенияСвойств.Вставить("Идентификатор",
			?(НоменклатураВТерминахПоставщика(МодельЗаказа), ДанныеСтроки.internalSellerCode, ДанныеСтроки.internalBuyerCode));
		ЗначенияСвойств.Вставить("Штрихкод",
			?(ПустаяСтрока(ДанныеСтроки.package.gtin), ДанныеСтроки.unit.gtin, ДанныеСтроки.package.gtin));
		ЗначенияСвойств.Вставить("Владелец", КлючевыеСвойстваКонтрагентаXDTO(ДанныеКонтрагента, ПараметрыКонвертации));
		ЗначенияСвойств.Вставить("УпаковкаНоменклатуры",
			КлючевыеСвойстваУпаковкиКонтрагентаXDTO(ДанныеСтроки, МодельЗаказа, СопоставлениеНоменклатуры));
	КонецЕсли;
	
	Если ЗначенияСвойств.Получить("Владелец") = Неопределено Тогда
		ЗначенияСвойств.Вставить("Владелец", КлючевыеСвойстваКонтрагентаXDTO(ДанныеКонтрагента, ПараметрыКонвертации));
	КонецЕсли;
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваЕдиницыИзмеренияXDTO(Знач ДанныеЕдиницыИзмерения)
	
	Если ПустаяСтрока(ДанныеЕдиницыИзмерения.name) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбъектаФормата = "КлючевыеСвойстваЕдиницаИзмерения";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	// Заполнение основного объекта
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("ДанныеКлассификатора",
		ОбщиеСвойстваДанныеКлассификатораXDTO(СокрЛП(ДанныеЕдиницыИзмерения.OKEI), ДанныеЕдиницыИзмерения.name));
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваБанковскогоСчетаКонтрагентаXDTO(Знач ДанныеВладельца, Знач ДанныеБанковскогоСчета, Знач ПараметрыКонвертации)
	
	Если ПустаяСтрока(ДанныеБанковскогоСчета.number) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяОбъектаФормата = "КлючевыеСвойстваБанковскийСчет";
	
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);

	// Заполнение составного свойства. Тип владельца определяется заполнением соответствующего свойства объекта формата
	СвойствоВладелецXDTO = ТипОбъектаФормата.Свойства.Получить("Владелец");
	ТипВладелецXDTO = СвойствоВладелецXDTO.Тип;
	ВладелецXDTO = ФабрикаXDTO.Создать(ТипВладелецXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ВладелецXDTO, ТипВладелецXDTO, "КонтрагентыСсылка",
		КлючевыеСвойстваКонтрагентаXDTO(ДанныеВладельца, ПараметрыКонвертации));
		
	// Заполнение основного объекта
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("НомерСчета", ДанныеБанковскогоСчета.number);
	ЗначенияСвойств.Вставить("Банк", КлючевыеСвойстваБанкаXDTO(ДанныеБанковскогоСчета.bik));
	ЗначенияСвойств.Вставить("Владелец", ВладелецXDTO);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваБанковскогоСчетаОрганизацииXDTO(Знач ДанныеВладельца, Знач ДанныеБанковскогоСчета, Знач ПараметрыКонвертации)
	
	Если ПустаяСтрока(ДанныеБанковскогоСчета.number) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяОбъектаФормата = "КлючевыеСвойстваБанковскийСчет";
	
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);

	// Заполнение составного свойства. Тип владельца определяется заполнением соответствующего свойства объекта формата
	СвойствоВладелецXDTO = ТипОбъектаФормата.Свойства.Получить("Владелец");
	ТипВладелецXDTO = СвойствоВладелецXDTO.Тип;
	ВладелецXDTO = ФабрикаXDTO.Создать(ТипВладелецXDTO);
	
	УстановитьЗначениеСвойстваXDTO(ВладелецXDTO, ТипВладелецXDTO, "ОрганизацииСсылка",
		КлючевыеСвойстваОрганизацииXDTO(ДанныеВладельца.bNetInternalId, ПараметрыКонвертации));

	// Заполнение основного объекта
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("НомерСчета", ДанныеБанковскогоСчета.number);
	ЗначенияСвойств.Вставить("Банк", КлючевыеСвойстваБанкаXDTO(ДанныеБанковскогоСчета.bik));
	ЗначенияСвойств.Вставить("Владелец", ВладелецXDTO);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваБанкаXDTO(Знач Бик)
	
	Если ПустаяСтрока(Бик) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбъектаФормата = "КлючевыеСвойстваБанк";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("ДанныеКлассификатораБанков", ОбщиеСвойстваДанныеКлассификатораБанковXDTO(Бик));
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваВалютыXDTO(Знач КодВалюты, Знач НаименованиеВалюты = Неопределено)
	
	Если ПустаяСтрока(КодВалюты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбъектаФормата = "КлючевыеСвойстваВалюта";
	
	Ссылка = ИнтеграцияССервисомEDIСлужебныйПовтИсп.ВалютаПоКоду(КодВалюты);
	Если Ссылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		ЕстьОшибки = Ложь;
		ТекстОшибки = "";
		ОбъектФормата = ПреобразованиеДанныхEDIСлужебный.КлючевыеСвойстваОбъектаФорматаПоСсылке(
			Ссылка, "Справочник.Валюты", ЕстьОшибки, ТекстОшибки);
		
		Если ЕстьОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	Иначе
		ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
		
		ЗначенияСвойств = Новый Соответствие;
		ЗначенияСвойств.Вставить("ДанныеКлассификатора",
			ОбщиеСвойстваДанныеКлассификатораXDTO(КодВалюты, НаименованиеВалюты));
	
		ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);

	КонецЕсли;
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваОрганизацииXDTO(Знач ИдентификаторБизнесСети, Знач ПараметрыКонвертации)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";

	Ссылка = Неопределено;
	Если Не ПараметрыКонвертации.Свойство("Организация", Ссылка) Или Ссылка = Неопределено Тогда
		Ссылка = ИнтеграцияССервисомEDIСлужебный.ОрганизацияБизнесСети(ИдентификаторБизнесСети, ЕстьОшибки, ТекстОшибки);
		Если ЕстьОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектФормата = ПреобразованиеДанныхEDIСлужебный.КлючевыеСвойстваОбъектаФорматаПоСсылке(
		Ссылка, "Справочник.Организации", ЕстьОшибки, ТекстОшибки);
		
	Если ЕстьОшибки Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;

	Возврат ОбъектФормата;
	
КонецФункции

Функция НовыйКлючевыеСвойстваКонтрагентаXDTO(Знач ДанныеКонтрагента)
	
	ИмяОбъектаФормата = "КлючевыеСвойстваКонтрагент";
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ДанныеКонтрагента, Истина);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваКонтрагентаXDTO(Знач ДанныеУчастника, Знач ПараметрыКонвертации)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ОбъектФормата = Неопределено;
	
	Ссылка = Неопределено;
	Если Не ПараметрыКонвертации.Свойство("Контрагент", Ссылка) Или Ссылка = Неопределено Тогда
		Ссылка = ИнтеграцияССервисомEDIСлужебный.КонтрагентБизнесСети(ДанныеУчастника.bNetInternalId, ЕстьОшибки, ТекстОшибки);
		
		Если ЕстьОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;
		
	Если Ссылка <> Неопределено И ОбщегоНазначения.СсылкаСуществует(Ссылка) Тогда
		ОбъектФормата = ПреобразованиеДанныхEDIСлужебный.КлючевыеСвойстваОбъектаФорматаПоСсылке(
			Ссылка, "Справочник.Контрагенты", ЕстьОшибки, ТекстОшибки);
	Иначе
		ДанныеКонтрагента = Новый Соответствие;
		Если ЗначениеЗаполнено(ДанныеУчастника.organization.name) Тогда
			ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
			ДанныеКонтрагента.Вставить("Наименование", ДанныеУчастника.organization.name);
			ДанныеКонтрагента.Вставить("ИНН", ДанныеУчастника.organization.inn);
			ДанныеКонтрагента.Вставить("КПП", ДанныеУчастника.organization.kpp);
		ИначеЕсли ЗначениеЗаполнено(ДанныеУчастника.selfEmployed.name) Тогда
			ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", "ФизическоеЛицо");
			ДанныеКонтрагента.Вставить("Наименование", ДанныеУчастника.selfEmployed.name);
			ДанныеКонтрагента.Вставить("ИНН", ДанныеУчастника.selfEmployed.inn);
		ИначеЕсли ЗначениеЗаполнено(ДанныеУчастника.foreignOrganization.name) Тогда
			ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
			ДанныеКонтрагента.Вставить("Наименование", ДанныеУчастника.foreignOrganization.name);
			ДанныеКонтрагента.Вставить("ИНН", ДанныеУчастника.foreignOrganization.tin);
		Иначе
			ЕстьОшибки = Истина;
			ТекстОшибки = НСтр("ru='Невозможно идентифицировать контрагента.'");
		КонецЕсли;
		
		ОбъектФормата = НовыйКлючевыеСвойстваКонтрагентаXDTO(ДанныеКонтрагента);
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
		
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваПользователяXDTO(Знач КонтактноеЛицо)
	
	Если ПустаяСтрока(КонтактноеЛицо.name) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяОбъектаФормата = "КлючевыеСвойстваПользователь";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("Наименование", КонтактноеЛицо.name);
	ЗначенияСвойств.Вставить("ФизическоеЛицо", КлючевыеСвойстваФизЛицаXDTO(КонтактноеЛицо));
	
	Если КонтактноеЛицо.Свойство("id") И ЗначениеЗаполнено(КонтактноеЛицо.id) Тогда
		ЗначенияСвойств.Вставить("Ссылка", СокрЛП(КонтактноеЛицо.id));
	КонецЕсли;
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции

Функция КлючевыеСвойстваФизЛицаXDTO(Знач КонтактноеЛицо)
	
	Если ПустаяСтрока(КонтактноеЛицо.name) Тогда
		Возврат Неопределено;
	КонецЕсли;

	ИмяОбъектаФормата = "КлючевыеСвойстваФизическоеЛицо";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("ФИО", КонтактноеЛицо.name);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата;
	
КонецФункции
	
Функция КлючевыеСвойстваСкладXDTO(Знач ДанныеСклада, Знач ПараметрыКонвертации)
	
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	ОбъектФормата = Неопределено;
	
	Если ПараметрыКонвертации.Свойство("Склад") И ПараметрыКонвертации.Склад <> Неопределено Тогда
		ОбъектФормата = ПреобразованиеДанныхEDIСлужебный.КлючевыеСвойстваОбъектаФорматаПоСсылке(
			ПараметрыКонвертации.Склад, "Справочник.Склады", ЕстьОшибки, ТекстОшибки);
			
		Если ОбъектФормата = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		Если ЕстьОшибки Тогда
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
	КонецЕсли;

	Возврат ОбъектФормата;
	
КонецФункции
	
#КонецОбласти

#Область ОбщиеСвойства

Функция ОбщиеСвойстваДанныеНоменклатурыXDTO(Знач СтрокаЗаказа, Знач МодельЗаказа, Знач СопоставлениеНоменклатуры,
	ОбъектыФорматаПоСсылкам)
	
	ИмяОбъектаФормата = "ОбщиеСвойстваДанныеНоменклатуры";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("Номенклатура", КлючевыеСвойстваНоменклатурыXDTO(СтрокаЗаказа, МодельЗаказа,
		СопоставлениеНоменклатуры, ОбъектыФорматаПоСсылкам));
	ЗначенияСвойств.Вставить("Характеристика", КлючевыеСвойстваХарактеристикиXDTO(СтрокаЗаказа, МодельЗаказа,
		СопоставлениеНоменклатуры, ОбъектыФорматаПоСсылкам));
	ЗначенияСвойств.Вставить("Упаковка", КлючевыеСвойстваУпаковкиXDTO(СтрокаЗаказа, МодельЗаказа,
		СопоставлениеНоменклатуры, ОбъектыФорматаПоСсылкам));
	ЗначенияСвойств.Вставить("Штрихкод", ?(ПустаяСтрока(СтрокаЗаказа.package.gtin), СтрокаЗаказа.unit.gtin,
		СтрокаЗаказа.package.gtin));
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
		
	Возврат ОбъектФормата;
	
КонецФункции

Функция ОбщиеСвойстваВладелецХарактеристикиXDTO(Знач ДанныеСтроки, Знач МодельЗаказа, Знач СопоставлениеНоменклатуры, ОбъектыФорматаПоСсылкам)
	
	ИмяОбъектаФормата = "ОбщиеСвойстваВладелецХарактеристики";
	ТипОбъектаФормата = ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата);
	ОбъектФормата = ФабрикаXDTO.Создать(ТипОбъектаФормата);
		
	УстановитьЗначениеСвойстваXDTO(ОбъектФормата, ТипОбъектаФормата, "Номенклатура",
		КлючевыеСвойстваНоменклатурыXDTO(ДанныеСтроки, МодельЗаказа, СопоставлениеНоменклатуры, ОбъектыФорматаПоСсылкам));
		
	Возврат ОбъектФормата;
		
КонецФункции

Функция ОбщиеСвойстваДанныеКлассификатораXDTO(Знач Код, Знач Наименование)
	
	ИмяОбъектаФормата = "ОбщиеСвойстваДанныеКлассификатора";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("Код", Код);
	ЗначенияСвойств.Вставить("Наименование", Наименование);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата
	
КонецФункции

Функция ОбщиеСвойстваДанныеКлассификатораБанковXDTO(Знач БИК, Знач Наименование = Неопределено)
	
	ИмяОбъектаФормата = "ОбщиеСвойстваДанныеКлассификатораБанков";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("БИК", Бик);
	ЗначенияСвойств.Вставить("Наименование", Наименование);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата
	
КонецФункции

Функция ОбщиеСвойстваДанныеВходящегоДокументаXDTO(Знач Номер, Знач Дата, Знач ИмяДокумента = Неопределено)
	
	Если Не ЗначениеЗаполнено(Номер) Или Не ЗначениеЗаполнено(Дата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяОбъектаФормата = "ОбщиеСвойстваДанныеВходящегоДокумента";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));
	
	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("НомерВходящегоДокумента", Номер);
	ЗначенияСвойств.Вставить("ДатаВходящегоДокумента", Дата);
	ЗначенияСвойств.Вставить("НаименованиеВходящегоДокумента", ИмяДокумента);
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);
	
	Возврат ОбъектФормата
	
КонецФункции

Функция ОбщиеСвойстваДанныеВзаиморасчетовXDTO(Знач ДанныеВалюты)
	
	ИмяОбъектаФормата = "ОбщиеСвойстваДанныеВзаиморасчетов";
	ОбъектФормата = ФабрикаXDTO.Создать(ПреобразованиеДанныхEDIСлужебный.ТипОбъектаФормата(ИмяОбъектаФормата));

	ЗначенияСвойств = Новый Соответствие;
	ЗначенияСвойств.Вставить("ВалютаВзаиморасчетов", КлючевыеСвойстваВалютыXDTO(ДанныеВалюты.code, ДанныеВалюты.name));
	
	ЗаполнитьОбъектXDTO(ОбъектФормата, ЗначенияСвойств);

	Возврат ОбъектФормата
	
КонецФункции

#КонецОбласти

#Область СопутствующиеСсылки

Функция НовыйСопутствующаяСсылка(ОбъектФормата, ОбъектКонфигурации)
	
	Возврат Новый Структура("ОбъектФормата, ОбъектКонфигурации", ОбъектФормата, ОбъектКонфигурации);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонвертацияИзОбъектаФорматаВоВнутреннийФорматEDI

#Область ЗаказПоставщику

Процедура ЗаполнитьУчастниковЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата)
	
	// Покупатель
	Покупатель = МодельЗаказа.parties.buyer;
	СхемаПокупателя = СхемаЗаказа.parties.Схема.buyer.Схема;
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "bNetInternalId",
		ПараметрыКонвертации.ИдентификаторОрганизации);
	
	ДанныеОрганизации = ЗначениеСвойстваXDTO(ОбъектФормата, "КлючевыеСвойства/Организация");
	Если ДанныеОрганизации <> Неопределено Тогда
		ОрганизационноПравоваяФорма = ЗначениеСвойстваXDTO(ДанныеОрганизации, "ЮридическоеФизическоеЛицо");
		Если ОрганизационноПравоваяФорма = "ФизическоеЛицо" Тогда
			Покупатель = Покупатель.selfEmployed;
			СхемаПокупателя = СхемаПокупателя.selfEmployed.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "name",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "inn",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "ИНН"));
		Иначе
			Покупатель = Покупатель.organization;
			СхемаПокупателя = СхемаПокупателя.organization.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "name",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "inn",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "ИНН"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "kpp",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "КПП"));
		КонецЕсли;
	КонецЕсли;
	
	
	// Поставщик
	Поставщик = МодельЗаказа.parties.seller;
	СхемаПоставщика = СхемаЗаказа.parties.Схема.seller.Схема;

	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "bNetInternalId", ПараметрыКонвертации.ИдентификаторКонтрагента);

	ДанныеКонтрагента = ЗначениеСвойстваXDTO(ОбъектФормата, "КлючевыеСвойства/Контрагент");
	Если ДанныеКонтрагента <> Неопределено Тогда
		ОрганизационноПравоваяФорма = ЗначениеСвойстваXDTO(ДанныеКонтрагента, "ЮридическоеФизическоеЛицо");
		КодСтраныРегистрации = ЗначениеСвойстваXDTO(ДанныеКонтрагента, "СтранаРегистрации/ДанныеКлассификатора/Код");
		
		Если ЗначениеЗаполнено(КодСтраныРегистрации) И КодСтраныРегистрации <> КодСтраныРоссия() Тогда
			Поставщик = Поставщик.foreignOrganization;
			СхемаПоставщика = СхемаПоставщика.foreignOrganization.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "name",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "tin",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "ИНН"));
		ИначеЕсли ОрганизационноПравоваяФорма = "ФизическоеЛицо" Тогда
			Поставщик = Поставщик.selfEmployed;
			СхемаПоставщика = СхемаПоставщика.selfEmployed.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "name",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "inn",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "ИНН"));
		Иначе
			Поставщик = Поставщик.organization;
			СхемаПоставщика = СхемаПоставщика.organization.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "name",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "inn",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "ИНН"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "kpp",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "КПП"));
		КонецЕсли;
	КонецЕсли;
	
	
	// Банковский счет контрагента
	ДанныеБанковскогоСчета = ЗначениеСвойстваXDTO(ОбъектФормата, "БанковскийСчетКонтрагента");
	Если ДанныеБанковскогоСчета <> Неопределено Тогда
		БанковскийСчет = МодельЗаказа.parties.seller.bankAccount;
		СхемаБанковскогоСчета = СхемаЗаказа.parties.Схема.seller.Схема.bankAccount.Схема;
		
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(БанковскийСчет, СхемаБанковскогоСчета, "number",
			ЗначениеСвойстваXDTO(ДанныеБанковскогоСчета, "НомерСчета"));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(БанковскийСчет, СхемаБанковскогоСчета, "bik",
			ЗначениеСвойстваXDTO(ДанныеБанковскогоСчета, "Банк/ДанныеКлассификатораБанков/БИК"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияИСоглашенияЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата)
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	УсловияИСоглашения = МодельЗаказа.termsAndConditions;
	Валюта = МодельЗаказа.termsAndConditions.currency;
	
	Схема = СхемаЗаказа.termsAndConditions.Схема;
	СхемаВалюты = СхемаЗаказа.termsAndConditions.Схема.currency.Схема;

	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Валюта, СхемаВалюты, "code",
		ЗначениеСвойстваXDTO(ОбъектФормата, "Валюта/ДанныеКлассификатора/Код"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Валюта, СхемаВалюты, "name",
		ЗначениеСвойстваXDTO(ОбъектФормата, "Валюта/ДанныеКлассификатора/Наименование"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "expectedDeliveryDate",
		ЗначениеСвойстваXDTO(ОбъектФормата, "ОжидаемаяДатаПоставки"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "wholeOrderDeliveryOnly",
		ЗначениеСвойстваXDTO(ОбъектФормата, "ОтгружатьЗаказЦеликом"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "priceTaxIncluded",
		ЗначениеСвойстваXDTO(ОбъектФормата, "СуммаВключаетНДС"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "taxed",
		ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.НалогообложениеНДС,
		ЗначениеСвойстваXDTO(ОбъектФормата, "НалогообложениеНДСПродавца")));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "itemsInTermsOf",
		ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(СловарьСервиса.ВариантыУказанияНоменклатурыПокупателя,
		ПараметрыКонвертации.ВариантУказанияНоменклатуры));

КонецПроцедуры

Процедура ЗаполнитьУсловияДоставкиЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)

	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	УсловияДоставки = МодельЗаказа.delivery;
	Схема = СхемаЗаказа.delivery.Схема;
	
	ТочкаПоставки = МодельЗаказа.delivery.point;
	СхемаТочкиПоставки = СхемаЗаказа.delivery.Схема.point.Схема;
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияДоставки, Схема, "form",
		ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.ФормыДоставкиЗаказаПоставщику, ЗначениеСвойстваXDTO(ОбъектФормата, "СпособДоставки")));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(ТочкаПоставки, СхемаТочкиПоставки, "name",
		ЗначениеСвойстваXDTO(ОбъектФормата, "АдресДоставки"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(ТочкаПоставки, СхемаТочкиПоставки, "addressInfo",
		ЗначениеСвойстваXDTO(ОбъектФормата, "АдресДоставки"));

КонецПроцедуры

Процедура ЗаполнитьТаблицуТоваровЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата)
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	Итоги = МодельЗаказа.summary;
	СхемаИтогов = СхемаЗаказа.summary.Схема;
	
	Товары = МодельЗаказа.itemLines;
	СхемаСтроки = СхемаЗаказа.itemLines.Схема;
	СхемаЕдиницыИзмерения = СхемаЗаказа.itemLines.Схема.unit.Схема;
	СхемаУпаковки = СхемаЗаказа.itemLines.Схема.package.Схема;
	
	СуммаВключаетНДС = МодельЗаказа.termsAndConditions.priceTaxIncluded;
	КоличествоСтрок = 0;
	СуммаДокумента = 0;
	СуммаНДСДокумента = 0;
	
	ТабличнаяЧастьТоваров = ЗначениеСвойстваXDTO(ОбъектФормата, "Товары/Строка");
	Если ТабличнаяЧастьТоваров <> Неопределено Тогда
		
		ДанныеИнформационнойБазы = Неопределено;
		Если ПараметрыКонвертации.ВариантУказанияНоменклатуры <> СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
			ДанныеИнформационнойБазы = ДанныеНоменклатурыКонтрагента(ТабличнаяЧастьТоваров);
		КонецЕсли;
		
		Для Каждого СтрокаТоваров Из ТабличнаяЧастьТоваров Цикл
			МодельСтроки = ИнтеграцияССервисомEDIСлужебный.ПустаяМодельПоСхеме(СхемаСтроки);
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "itemType",
				ТипТовараСервисаТовар());
			
			УпаковкаЗадана = Ложь;
			Если ПараметрыКонвертации.ВариантУказанияНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Номенклатура/Наименование"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "extendedDescription",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Характеристика/НаименованиеПолное"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "partNumber",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Номенклатура/Артикул"));
				
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ЕдиницаИзмерения/ДанныеКлассификатора/Наименование"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ЕдиницаИзмерения/ДанныеКлассификатора/Код"));
				
				УпаковкаXDTO = ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Упаковка");
				Если УпаковкаXDTO <> Неопределено Тогда
					УпаковкаЗадана = Истина;
					
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "description",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "size",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "Коэффициент"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "gtin",
						ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Штрихкод"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "gtin",
						ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Штрихкод"));
				КонецЕсли;
				
			Иначе
				ДанныеSKU = ?(ДанныеИнформационнойБазы = Неопределено, Неопределено,
					ДанныеИнформационнойБазы.Найти(ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Ссылка"), "КлючЗаписи"));
					
				Если Не ЗначениеЗаполнено(ДанныеSKU) Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
						ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Наименование"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
						ДанныеSKU.НаименованиеНоменклатуры);
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "extendedDescription",
						ДанныеSKU.НаименованиеХарактеристики);
				КонецЕсли;
				
				УпаковкаЗадана = ЗначениеСвойстваXDTO(СтрокаТоваров, "КоличествоУпаковок") <> Неопределено;
				
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "partNumber",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Артикул"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "internalSellerCode",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Идентификатор"));
					
				УпаковкаXDTO = ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/УпаковкаНоменклатуры");
				Если УпаковкаXDTO <> Неопределено Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Код"));
					
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "description",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "size",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "Коэффициент"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name", "шт");
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei", "796");
				КонецЕсли;

				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "gtin",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Штрихкод"));
			КонецЕсли;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "internalBuyerCode",
				СоставнойИдентификаторТоварнойПозиции(
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Номенклатура/Ссылка"),
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Характеристика/Ссылка"),
					?(ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Упаковка/Ссылка") = Неопределено,
						ЗначениеСвойстваXDTO(СтрокаТоваров, "ЕдиницаИзмерения/Ссылка"),
						ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Упаковка/Ссылка"))));
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "quantity",
				ЗначениеСвойстваXDTO(СтрокаТоваров, ?(УпаковкаЗадана, "КоличествоУпаковок", "Количество")));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "price",
				ЗначениеСвойстваXDTO(СтрокаТоваров, ?(УпаковкаЗадана, "ЦенаЗаУпаковку", "Цена")));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "amount",
				ЗначениеСвойстваXDTO(СтрокаТоваров, "Сумма"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "taxAmount",
				ЗначениеСвойстваXDTO(СтрокаТоваров, "СуммаНДС"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "taxRate",
				ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.СтавкиНДС,
				ЗначениеСвойстваXDTO(СтрокаТоваров, "СтавкаНДС")));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "expectedDeliveryDate",
				ЗначениеСвойстваXDTO(СтрокаТоваров, "ОжидаемаяДатаПоставки"));
			
			Товары.Добавить(МодельСтроки);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			СуммаДокумента = СуммаДокумента + МодельСтроки.amount;
			СуммаНДСДокумента = СуммаНДСДокумента + МодельСтроки.taxAmount;
		КонецЦикла;
	КонецЕсли;
	
	ТабличнаяЧастьУслуги = ЗначениеСвойстваXDTO(ОбъектФормата, "Услуги/Строка");
	Если ТабличнаяЧастьУслуги <> Неопределено Тогда
		
		ДанныеИнформационнойБазы = Неопределено;
		Если ПараметрыКонвертации.ВариантУказанияНоменклатуры <> СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
			ДанныеИнформационнойБазы = ДанныеНоменклатурыКонтрагента(ТабличнаяЧастьУслуги);
		КонецЕсли;
				
		Для Каждого СтрокаУслуг Из ТабличнаяЧастьУслуги Цикл
			МодельСтроки = ИнтеграцияССервисомEDIСлужебный.ПустаяМодельПоСхеме(СхемаСтроки);
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "itemType",
				ТипТовараСервисаУслуга());
			
			Если ПараметрыКонвертации.ВариантУказанияНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "Номенклатура/Наименование"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "partNumber",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "Номенклатура/Артикул"));
				
				ДанныеНоменклатурыXDTO = ПреобразованиеДанныхEDIСлужебный.ОбъектФорматаПоКлючевымСвойствам(
					ЗначениеСвойстваXDTO(СтрокаУслуг, "Номенклатура"),
					"Справочник.Номенклатура",
					ПреобразованиеДанныхEDIСлужебныйПовтИсп.СправочникКонфигурации("Номенклатура"));

				Если ДанныеНоменклатурыXDTO = Неопределено Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name", "шт");
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei", "796");
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name",
						ЗначениеСвойстваXDTO(ДанныеНоменклатурыXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei",
						ЗначениеСвойстваXDTO(ДанныеНоменклатурыXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Код"));
				КонецЕсли;
			Иначе
				ДанныеSKU = ?(ДанныеИнформационнойБазы = Неопределено, Неопределено,
					ДанныеИнформационнойБазы.Найти(ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Ссылка"), "КлючЗаписи"));
					
				Если ДанныеSKU = Неопределено Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
						ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Наименование"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
						ДанныеSKU.НаименованиеНоменклатуры);
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "extendedDescription",
						ДанныеSKU.НаименованиеХарактеристики);
				КонецЕсли;
				
				УпаковкаXDTO = ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/УпаковкаНоменклатуры");
				Если УпаковкаXDTO <> Неопределено Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Код"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name", "шт");
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei", "796");
				КонецЕсли;
				
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "partNumber",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Артикул"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "internalSellerCode",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Идентификатор"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "gtin",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Штрихкод"));
			КонецЕсли;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "taxRate",
				ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.СтавкиНДС,
				ЗначениеСвойстваXDTO(СтрокаУслуг, "СтавкаНДС")));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "quantity",
				Макс(ЗначениеСвойстваXDTO(СтрокаУслуг, "Количество"), 1));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "price",
				ЗначениеСвойстваXDTO(СтрокаУслуг, "Цена"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "amount",
				ЗначениеСвойстваXDTO(СтрокаУслуг, "Сумма"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "taxAmount",
				ЗначениеСвойстваXDTO(СтрокаУслуг, "СуммаНДС"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "expectedDeliveryDate",
				ЗначениеСвойстваXDTO(СтрокаУслуг, "ОжидаемаяДатаПоставки"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "internalBuyerCode",
				СоставнойИдентификаторТоварнойПозиции(ЗначениеСвойстваXDTO(СтрокаУслуг, "Номенклатура/Ссылка"),,
				ЗначениеСвойстваXDTO(СтрокаУслуг, "ЕдиницаИзмерения/Ссылка")));
						
			Товары.Добавить(МодельСтроки);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			СуммаДокумента = СуммаДокумента + МодельСтроки.amount;
			СуммаНДСДокумента = СуммаНДСДокумента + МодельСтроки.taxAmount;
		КонецЦикла;
	КонецЕсли;
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Итоги, СхемаИтогов, "totalAmount",
		СуммаДокумента + ?(СуммаВключаетНДС, 0, СуммаНДСДокумента));
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Итоги, СхемаИтогов, "totalLines", КоличествоСтрок);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуГрафикаОплатЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)
	
	ТабличнаяЧастьЭтапыОплаты = ЗначениеСвойстваXDTO(ОбъектФормата, "ЭтапыОплаты/Строка");
	Если ТабличнаяЧастьЭтапыОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	ГрафикОплат = МодельЗаказа.paymentSchedule;
	СхемаСтроки = СхемаЗаказа.paymentSchedule.Схема;
	
	Для Каждого ЭтапОплаты Из ТабличнаяЧастьЭтапыОплаты Цикл
		МодельСтроки = ИнтеграцияССервисомEDIСлужебный.ПустаяМодельПоСхеме(СхемаСтроки);
		
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "option",
			ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.ВариантыОплаты, ЗначениеСвойстваXDTO(ЭтапОплаты, "ВариантОплаты")));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "kind",
			ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.ФормыОплаты, ЗначениеСвойстваXDTO(ЭтапОплаты, "ФормаОплаты")));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "date",
			ЗначениеСвойстваXDTO(ЭтапОплаты, "ДатаПлатежа"));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "percent",
			ЗначениеСвойстваXDTO(ЭтапОплаты, "ПроцентПлатежа"));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "amount",
			ЗначениеСвойстваXDTO(ЭтапОплаты, "СуммаПлатежа"));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "delay",
			ЗначениеСвойстваXDTO(ЭтапОплаты, "КоличествоДнейОтсрочки"));
			
		ГрафикОплат.Добавить(МодельСтроки);
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьДатуНомерЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельЗаказа.buyerNumberDate,
		СхемаЗаказа.buyerNumberDate.Схема, "number",
		ЗначениеСвойстваXDTO(ОбъектФормата, "КлючевыеСвойства/Номер"));
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельЗаказа.buyerNumberDate,
		СхемаЗаказа.buyerNumberDate.Схема, "date",
		ЗначениеСвойстваXDTO(ОбъектФормата, "КлючевыеСвойства/Дата"));
	
КонецПроцедуры

Процедура ЗаполнитьКонтактноеЛицоОрганизацииЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)
	
	СхемаПокупателя = СхемаЗаказа.parties.Схема.buyer.Схема;
	
	КонтактноеЛицо = МодельЗаказа.parties.buyer.contactPerson;
	СхемаКонтактногоЛица = СхемаПокупателя.contactPerson.Схема;
	
	Имя = ЗначениеСвойстваXDTO(ОбъектФормата, "Ответственный/ФизическоеЛицо/ФИО");
	Если Не ЗначениеЗаполнено(Имя) Тогда
		Имя = ЗначениеСвойстваXDTO(ОбъектФормата, "Ответственный/Наименование");
	КонецЕсли;
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(КонтактноеЛицо, СхемаКонтактногоЛица, "name", Имя);
	
КонецПроцедуры

Процедура ЗаполнитьКонтактноеЛицоКонтрагентаЗаказаПоставщикуEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)
	
	СхемаПокупателя = СхемаЗаказа.parties.Схема.seller.Схема;
	
	КонтактноеЛицо = МодельЗаказа.parties.seller.contactPerson;
	СхемаКонтактногоЛица = СхемаПокупателя.contactPerson.Схема;
	
	Имя = ЗначениеСвойстваXDTO(ОбъектФормата, "КонтактноеЛицоКонтрагента/ФИО");
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(КонтактноеЛицо, СхемаКонтактногоЛица, "name", Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказКлиента

Процедура ЗаполнитьУчастниковЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата)
	
	// Поставщик
	Поставщик = МодельЗаказа.parties.seller;
	СхемаПоставщика = СхемаЗаказа.parties.Схема.seller.Схема;
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "bNetInternalId",
		ПараметрыКонвертации.ИдентификаторОрганизации);
	
	ДанныеОрганизации = ЗначениеСвойстваXDTO(ОбъектФормата, "КлючевыеСвойства/Организация");
	Если ДанныеОрганизации <> Неопределено Тогда
		ОрганизационноПравоваяФорма = ЗначениеСвойстваXDTO(ДанныеОрганизации, "ЮридическоеФизическоеЛицо");
		Если ОрганизационноПравоваяФорма = "ФизическоеЛицо" Тогда
			Поставщик = Поставщик.selfEmployed;
			СхемаПоставщика = СхемаПоставщика.selfEmployed.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "name",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "inn",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "ИНН"));
		Иначе
			Поставщик = Поставщик.organization;
			СхемаПоставщика = СхемаПоставщика.organization.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "name",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "inn",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "ИНН"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Поставщик, СхемаПоставщика, "kpp",
				ЗначениеСвойстваXDTO(ДанныеОрганизации, "КПП"));
		КонецЕсли;
	КонецЕсли;
	
	
	// Банковский счет контрагента
	ДанныеБанковскогоСчета = ЗначениеСвойстваXDTO(ОбъектФормата, "БанковскийСчетОрганизации");
	Если ДанныеБанковскогоСчета <> Неопределено Тогда
		БанковскийСчет = МодельЗаказа.parties.seller.bankAccount;
		СхемаБанковскогоСчета = СхемаЗаказа.parties.Схема.seller.Схема.bankAccount.Схема;
		
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(БанковскийСчет, СхемаБанковскогоСчета, "number",
			ЗначениеСвойстваXDTO(ДанныеБанковскогоСчета, "НомерСчета"));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(БанковскийСчет, СхемаБанковскогоСчета, "bik",
			ЗначениеСвойстваXDTO(ДанныеБанковскогоСчета, "Банк/ДанныеКлассификатораБанков/БИК"));
	КонецЕсли;
	
	
	// Покупатель
	Покупатель = МодельЗаказа.parties.buyer;
	СхемаПокупателя = СхемаЗаказа.parties.Схема.buyer.Схема;
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "bNetInternalId",
		ПараметрыКонвертации.ИдентификаторКонтрагента);
		
	ДанныеКонтрагента = ЗначениеСвойстваXDTO(ОбъектФормата, "Контрагент");
	Если ДанныеКонтрагента <> Неопределено Тогда
		ОрганизационноПравоваяФорма = ЗначениеСвойстваXDTO(ДанныеКонтрагента, "ЮридическоеФизическоеЛицо");
		КодСтраныРегистрации = ЗначениеСвойстваXDTO(ДанныеКонтрагента, "СтранаРегистрации/ДанныеКлассификатора/Код");
		
		Если ЗначениеЗаполнено(КодСтраныРегистрации) И КодСтраныРегистрации <> КодСтраныРоссия() Тогда
			Покупатель = Покупатель.foreignOrganization;
			СхемаПокупателя = СхемаПокупателя.foreignOrganization.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "name",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "tin",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "ИНН"));
		ИначеЕсли ОрганизационноПравоваяФорма = "ФизическоеЛицо" Тогда
			Покупатель = Покупатель.selfEmployed;
			СхемаПокупателя = СхемаПокупателя.selfEmployed.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "name",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "inn",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "ИНН"));
		Иначе
			Покупатель = Покупатель.organization;
			СхемаПокупателя = СхемаПокупателя.organization.Схема;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "name",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "НаименованиеПолное"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "inn",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "ИНН"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Покупатель, СхемаПокупателя, "kpp",
				ЗначениеСвойстваXDTO(ДанныеКонтрагента, "КПП"));
		КонецЕсли;
	КонецЕсли;
	
	// Плательщик
	МодельЗаказа.parties.invoicee = ОбщегоНазначения.СкопироватьРекурсивно(МодельЗаказа.parties.buyer);
		
КонецПроцедуры

Процедура ЗаполнитьУсловияИСоглашенияЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата)
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	СловарьСервиса = ИнтеграцияССервисомEDIСлужебныйПовтИсп.СловарьСервиса();
	
	УсловияИСоглашения = МодельЗаказа.termsAndConditions;
	Валюта = МодельЗаказа.termsAndConditions.currency;
	
	Схема = СхемаЗаказа.termsAndConditions.Схема;
	СхемаВалюты = СхемаЗаказа.termsAndConditions.Схема.currency.Схема;

	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Валюта, СхемаВалюты, "code",
		ЗначениеСвойстваXDTO(ОбъектФормата, "Валюта/ДанныеКлассификатора/Код"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Валюта, СхемаВалюты, "name",
		ЗначениеСвойстваXDTO(ОбъектФормата, "Валюта/ДанныеКлассификатора/Наименование"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "expectedDeliveryDate",
		ЗначениеСвойстваXDTO(ОбъектФормата, "ОжидаемаяДатаПоставки"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "wholeOrderDeliveryOnly",
		ЗначениеСвойстваXDTO(ОбъектФормата, "ОтгружатьЗаказЦеликом"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "priceTaxIncluded",
		ЗначениеСвойстваXDTO(ОбъектФормата, "СуммаВключаетНДС"));
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "taxed",
		ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.НалогообложениеНДС,
		ЗначениеСвойстваXDTO(ОбъектФормата, "НалогообложениеНДСПродавца")));

		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияИСоглашения, Схема, "itemsInTermsOf",
		ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(СловарьСервиса.ВариантыУказанияНоменклатурыПоставщика,
		ПараметрыКонвертации.ВариантУказанияНоменклатуры));
	
КонецПроцедуры

Процедура ЗаполнитьУсловияДоставкиЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)

	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	УсловияДоставки = МодельЗаказа.delivery;
	Схема = СхемаЗаказа.delivery.Схема;
	
	ТочкаПоставки = МодельЗаказа.delivery.point;
	СхемаТочкиПоставки = СхемаЗаказа.delivery.Схема.point.Схема;
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(УсловияДоставки, Схема, "form",
		ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.ФормыДоставкиЗаказаКлиента,
		ЗначениеСвойстваXDTO(ОбъектФормата, "СпособДоставки")));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(ТочкаПоставки, СхемаТочкиПоставки, "name",
		ЗначениеСвойстваXDTO(ОбъектФормата, "АдресДоставки"));
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(ТочкаПоставки, СхемаТочкиПоставки, "addressInfo",
		ЗначениеСвойстваXDTO(ОбъектФормата, "АдресДоставки"));

КонецПроцедуры

Процедура ЗаполнитьТаблицуТоваровЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ПараметрыКонвертации, ОбъектФормата)
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	Итоги = МодельЗаказа.summary;
	СхемаИтогов = СхемаЗаказа.summary.Схема;
	
	Товары = МодельЗаказа.itemLines;
	СхемаСтроки = СхемаЗаказа.itemLines.Схема;
	СхемаЕдиницыИзмерения = СхемаЗаказа.itemLines.Схема.unit.Схема;
	СхемаУпаковки = СхемаЗаказа.itemLines.Схема.package.Схема;
	
	СуммаВключаетНДС = МодельЗаказа.termsAndConditions.priceTaxIncluded;
	КоличествоСтрок = 0;
	СуммаДокумента = 0;
	СуммаНДСДокумента = 0;
	
	ТабличнаяЧастьТоваров = ЗначениеСвойстваXDTO(ОбъектФормата, "Товары/Строка");
	Если ТабличнаяЧастьТоваров <> Неопределено Тогда
		
		ДанныеSKUТабличнойЧасти = Неопределено;
		Если ПараметрыКонвертации.ВариантУказанияНоменклатуры <> СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
			ДанныеSKUТабличнойЧасти = ДанныеНоменклатурыКонтрагента(ТабличнаяЧастьТоваров);
		КонецЕсли;
		
		Для Каждого СтрокаТоваров Из ТабличнаяЧастьТоваров Цикл
			МодельСтроки = ИнтеграцияССервисомEDIСлужебный.ПустаяМодельПоСхеме(СхемаСтроки);
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "itemType",
				ТипТовараСервисаТовар());
						
			УпаковкаЗадана = Ложь;
			Если ПараметрыКонвертации.ВариантУказанияНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Номенклатура/Наименование"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "extendedDescription",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Характеристика/НаименованиеПолное"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "partNumber",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Номенклатура/Артикул"));
					
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ЕдиницаИзмерения/ДанныеКлассификатора/Наименование"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ЕдиницаИзмерения/ДанныеКлассификатора/Код"));
					
				УпаковкаXDTO = ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Упаковка");
				Если УпаковкаXDTO <> Неопределено Тогда
					УпаковкаЗадана = Истина;
					
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "description",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "size",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "Коэффициент"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "gtin",
						ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Штрихкод"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "gtin",
						ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Штрихкод"));
				КонецЕсли;
				
			Иначе
				ДанныеSKU = ?(ДанныеSKUТабличнойЧасти = Неопределено, Неопределено,
					ДанныеSKUТабличнойЧасти.Найти(ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Ссылка"), "КлючЗаписи"));
					
				Если Не ЗначениеЗаполнено(ДанныеSKU) Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
						ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Наименование"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
						ДанныеSKU.НаименованиеНоменклатуры);
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "extendedDescription",
						ДанныеSKU.НаименованиеХарактеристики);
				КонецЕсли;
				
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "partNumber",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Артикул"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "internalBuyerCode",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Идентификатор"));
				
				УпаковкаЗадана = ЗначениеСвойстваXDTO(СтрокаТоваров, "КоличествоУпаковок") <> Неопределено;
					
				УпаковкаXDTO = ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/УпаковкаНоменклатуры");
				Если УпаковкаXDTO <> Неопределено Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Код"));
					
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "description",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.package, СхемаУпаковки, "size",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "Коэффициент"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name", "шт");
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei", "796");
				КонецЕсли;

				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "gtin",
					ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Штрихкод"));
			КонецЕсли;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "internalSellerCode",
				СоставнойИдентификаторТоварнойПозиции(
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Номенклатура/Ссылка"),
					ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Характеристика/Ссылка"),
					?(ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Упаковка/Ссылка") = Неопределено,
						ЗначениеСвойстваXDTO(СтрокаТоваров, "ЕдиницаИзмерения/Ссылка"),
						ЗначениеСвойстваXDTO(СтрокаТоваров, "ДанныеНоменклатуры/Упаковка/Ссылка"))));
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "quantity",
				ЗначениеСвойстваXDTO(СтрокаТоваров, ?(УпаковкаЗадана, "КоличествоУпаковок", "Количество")));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "price",
				ЗначениеСвойстваXDTO(СтрокаТоваров, ?(УпаковкаЗадана, "ЦенаЗаУпаковку", "Цена")));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "amount",
				ЗначениеСвойстваXDTO(СтрокаТоваров, "Сумма"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "taxAmount",
				ЗначениеСвойстваXDTO(СтрокаТоваров, "СуммаНДС"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "taxRate",
				ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.СтавкиНДС, ЗначениеСвойстваXDTO(СтрокаТоваров, "СтавкаНДС")));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "expectedDeliveryDate",
				ЗначениеСвойстваXDTO(СтрокаТоваров, "ОжидаемаяДатаПоставки"));
				
			Товары.Добавить(МодельСтроки);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			СуммаДокумента = СуммаДокумента + МодельСтроки.amount;
			СуммаНДСДокумента = СуммаНДСДокумента + МодельСтроки.taxAmount;
		КонецЦикла;
	КонецЕсли;
	
	ТабличнаяЧастьУслуги = ЗначениеСвойстваXDTO(ОбъектФормата, "Услуги/Строка");
	Если ТабличнаяЧастьУслуги <> Неопределено Тогда
		
		ДанныеSKUТабличнойЧасти = Неопределено;
		Если ПараметрыКонвертации.ВариантУказанияНоменклатуры <> СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
			ДанныеSKUТабличнойЧасти = ДанныеНоменклатурыКонтрагента(ТабличнаяЧастьУслуги);
		КонецЕсли;
		
		Для Каждого СтрокаУслуг Из ТабличнаяЧастьУслуги Цикл
			МодельСтроки = ИнтеграцияССервисомEDIСлужебный.ПустаяМодельПоСхеме(СхемаСтроки);
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "itemType",
				ТипТовараСервисаУслуга());
			
			Если ПараметрыКонвертации.ВариантУказанияНоменклатуры = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации() Тогда
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "ДанныеНоменклатуры/Номенклатура/Наименование"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "extendedDescription",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "ДанныеНоменклатуры/Характеристика/НаименованиеПолное"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "partNumber",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "ДанныеНоменклатуры/Номенклатура/Артикул"));
				
				ДанныеНоменклатурыXDTO = ПреобразованиеДанныхEDIСлужебный.ОбъектФорматаПоКлючевымСвойствам(
					ЗначениеСвойстваXDTO(СтрокаУслуг, "ДанныеНоменклатуры/Номенклатура"),
					"Справочник.Номенклатура",
					ПреобразованиеДанныхEDIСлужебныйПовтИсп.СправочникКонфигурации("Номенклатура"));
					
				Если ДанныеНоменклатурыXDTO = Неопределено Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name", "шт");
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei", "796");
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name",
						ЗначениеСвойстваXDTO(ДанныеНоменклатурыXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei",
						ЗначениеСвойстваXDTO(ДанныеНоменклатурыXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Код"));
				КонецЕсли;
			Иначе
				ДанныеSKU = ?(ДанныеSKUТабличнойЧасти = Неопределено, Неопределено,
					ДанныеSKUТабличнойЧасти.Найти(ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Ссылка"), "КлючЗаписи"));
					
				Если ДанныеSKU = Неопределено Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
						ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Наименование"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "description",
						ДанныеSKU.НаименованиеНоменклатуры);
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "extendedDescription",
						ДанныеSKU.НаименованиеХарактеристики);
				КонецЕсли;
				
				УпаковкаXDTO = ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/УпаковкаНоменклатуры");
				Если УпаковкаXDTO <> Неопределено Тогда
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Наименование"));
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei",
						ЗначениеСвойстваXDTO(УпаковкаXDTO, "ЕдиницаИзмерения/ДанныеКлассификатора/Код"));
				Иначе
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name", "шт");
					ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei", "796");
				КонецЕсли;
				
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "partNumber",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Артикул"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "internalBuyerCode",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Идентификатор"));
				ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "gtin",
					ЗначениеСвойстваXDTO(СтрокаУслуг, "SKUКонтрагента/Штрихкод"));
			КонецЕсли;
			
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "name", "шт");
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки.unit, СхемаЕдиницыИзмерения, "okei", "796");
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "taxRate",
				ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.СтавкиНДС,
				ЗначениеСвойстваXDTO(СтрокаУслуг, "СтавкаНДС")));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "quantity",
				Макс(ЗначениеСвойстваXDTO(СтрокаУслуг, "Количество"), 1));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "price",
				ЗначениеСвойстваXDTO(СтрокаУслуг, "Цена"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "amount",
				ЗначениеСвойстваXDTO(СтрокаУслуг, "Сумма"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "taxAmount",
				ЗначениеСвойстваXDTO(СтрокаУслуг, "СуммаНДС"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "expectedDeliveryDate",
				ЗначениеСвойстваXDTO(СтрокаУслуг, "ОжидаемаяДатаПоставки"));
			ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "internalSellerCode",
				СоставнойИдентификаторТоварнойПозиции(ЗначениеСвойстваXDTO(СтрокаУслуг, "Номенклатура/Ссылка"),,
				ЗначениеСвойстваXDTO(СтрокаУслуг, "ЕдиницаИзмерения/Ссылка")));
			
			Товары.Добавить(МодельСтроки);
			
			КоличествоСтрок = КоличествоСтрок + 1;
			СуммаДокумента = СуммаДокумента + МодельСтроки.amount;
			СуммаНДСДокумента = СуммаНДСДокумента + МодельСтроки.taxAmount;
		КонецЦикла;
	КонецЕсли;
		
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Итоги, СхемаИтогов, "totalAmount",
		СуммаДокумента + ?(СуммаВключаетНДС, 0, СуммаНДСДокумента));
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(Итоги, СхемаИтогов, "totalLines", КоличествоСтрок);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуГрафикаОплатЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)
	
	ТабличнаяЧастьЭтапыОплаты = ЗначениеСвойстваXDTO(ОбъектФормата, "ЭтапыОплаты/Строка");
	Если ТабличнаяЧастьЭтапыОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Словарь = МенеджерКонвертацииДанныхEDIПовтИсп.СловарьКонвертации();
	
	ГрафикОплат = МодельЗаказа.paymentSchedule;
	СхемаСтроки = СхемаЗаказа.paymentSchedule.Схема;
	
	Для Каждого ЭтапОплаты Из ТабличнаяЧастьЭтапыОплаты Цикл
		МодельСтроки = ИнтеграцияССервисомEDIСлужебный.ПустаяМодельПоСхеме(СхемаСтроки);
		
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "option",
			ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.ВариантыОплаты, ЗначениеСвойстваXDTO(ЭтапОплаты, "ВариантОплаты")));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "kind",
			ИнтеграцияССервисомEDIСлужебный.ТерминСервиса(Словарь.ФормыОплаты, ЗначениеСвойстваXDTO(ЭтапОплаты, "ФормаОплаты")));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "date",
			ЗначениеСвойстваXDTO(ЭтапОплаты, "ДатаПлатежа"));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "percent",
			ЗначениеСвойстваXDTO(ЭтапОплаты, "ПроцентПлатежа"));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "amount",
			ЗначениеСвойстваXDTO(ЭтапОплаты, "СуммаПлатежа"));
		ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельСтроки, СхемаСтроки, "delay",
			ЗначениеСвойстваXDTO(ЭтапОплаты, "КоличествоДнейОтсрочки"));
			
		ГрафикОплат.Добавить(МодельСтроки);
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьДатуНомерЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельЗаказа.sellerNumberDate,
		СхемаЗаказа.sellerNumberDate.Схема, "number",
		ЗначениеСвойстваXDTO(ОбъектФормата, "КлючевыеСвойства/Номер"));
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(МодельЗаказа.sellerNumberDate,
		СхемаЗаказа.sellerNumberDate.Схема, "date",
		ЗначениеСвойстваXDTO(ОбъектФормата, "КлючевыеСвойства/Дата"));
		
КонецПроцедуры

Процедура ЗаполнитьКонтактноеЛицоОрганизацииЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)
	
	СхемаПродавца = СхемаЗаказа.parties.Схема.seller.Схема;
	
	КонтактноеЛицо = МодельЗаказа.parties.seller.contactPerson;
	СхемаКонтактногоЛица = СхемаПродавца.contactPerson.Схема;
	
	Имя = ЗначениеСвойстваXDTO(ОбъектФормата, "Ответственный/ФизическоеЛицо/ФИО");
	Если Не ЗначениеЗаполнено(Имя) Тогда
		Имя = ЗначениеСвойстваXDTO(ОбъектФормата, "Ответственный/Наименование");
	КонецЕсли;
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(КонтактноеЛицо, СхемаКонтактногоЛица, "name", Имя);
	
КонецПроцедуры

Процедура ЗаполнитьКонтактноеЛицоКонтрагентаЗаказаКлиентаEDI(МодельЗаказа, СхемаЗаказа, ОбъектФормата)
	
	СхемаПокупателя = СхемаЗаказа.parties.Схема.buyer.Схема;
	
	КонтактноеЛицо = МодельЗаказа.parties.buyer.contactPerson;
	СхемаКонтактногоЛица = СхемаПокупателя.contactPerson.Схема;
	
	Имя = ЗначениеСвойстваXDTO(ОбъектФормата, "КонтактноеЛицоКонтрагента/ФИО");
	
	ИнтеграцияССервисомEDIСлужебный.УстановитьЗначениеВМодели(КонтактноеЛицо, СхемаКонтактногоЛица, "name", Имя);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСДаннымиМоделиЗаказа

Функция НоменклатураВТерминахПоставщика(Знач МодельЗаказа)
	
	Возврат МодельЗаказа.termsAndConditions.itemsInTermsOf = 2
	
КонецФункции

Функция НоменклатураВТерминахПокупателя(Знач МодельЗаказа)
	
	Возврат МодельЗаказа.termsAndConditions.itemsInTermsOf = 1
	
КонецФункции

Функция ИдентификаторПокупателя(Знач МодельЗаказа)
	
	Возврат МодельЗаказа.parties.buyer.bNetInternalId;
	
КонецФункции

Функция ИдентификаторПоставщика(Знач МодельЗаказа)
	
	Возврат МодельЗаказа.parties.seller.bNetInternalId;
	
КонецФункции

Функция ИдентификаторВСервисе(Знач МодельЗаказа)
	
	Возврат МодельЗаказа.documentHeader.id;
	
КонецФункции

#КонецОбласти

#Область РаботаССопоставлениемНоменклатуры

Функция ДанныеНоменклатурыКонтрагента(Знач ТабличнаяЧастьXDTO)
	
	ИдентификаторыSKU = Новый Массив;
	Для Каждого СтрокаТоваров Из ТабличнаяЧастьXDTO Цикл
		Если ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Ссылка") <> Неопределено Тогда
			ИдентификаторыSKU.Добавить(ЗначениеСвойстваXDTO(СтрокаТоваров, "SKUКонтрагента/Ссылка"));
		КонецЕсли;
	КонецЦикла;
	ДанныеSKU = СопоставлениеНоменклатурыКонтрагентов.ДанныеНоменклатурыКонтрагентовПоВнутреннимИдентификаторам(ИдентификаторыSKU);
	
	Возврат ДанныеSKU;
	
КонецФункции

Функция НОД(Знач Аргумент1, Знач Аргумент2)
	
	Пока Аргумент1 <> Аргумент2 Цикл
		Если Аргумент1 > Аргумент2 Тогда
			Аргумент1 = Аргумент1 - Аргумент2;
		Иначе
			Аргумент2 = Аргумент2 - Аргумент1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Аргумент1;
	
КонецФункции

Функция ЧислительЗнаменательУпаковки(Знач Коэффициент)
	
	Результат = Новый Структура("Числитель, Знаменатель", 1, 1);
	Если Не ЗначениеЗаполнено(Коэффициент) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Коэффициент >=1 Тогда
		Результат.Числитель = Коэффициент;
	Иначе
		Знаменатель = Коэффициент;
		Числитель = 1;
		Пока Знаменатель % 1 Цикл
			Знаменатель = Знаменатель * 10;
			Числитель = Числитель * 10;
		КонецЦикла;
		
		НОД = НОД(Числитель, Знаменатель);
		
		Результат.Числитель = Числитель / НОД;
		Результат.Знаменатель = Знаменатель / НОД;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Процедура СвернутьРезультатПоиска(РезультатПоиска)
	
	СтрокаСвертки = Новый Массив;
	Для Каждого Колонка Из РезультатПоиска.Колонки Цикл
		СтрокаСвертки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	РезультатПоиска.Свернуть(СтрСоединить(СтрокаСвертки, ","));
	
КонецПроцедуры

Функция НовыйТоварныеПозицииЗаказа()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ТаблицаСопоставления");
	Результат.Вставить("НеСопоставленныеТоварныеПозиции", Новый Массив);
	Результат.Вставить("ВариантУказанияНоменклатуры", Перечисления.ВариантыУказанияНоменклатурыБЭД.ПустаяСсылка());
	Результат.Вставить("ВсеСтрокиСопоставлены", Истина);
	
	Возврат Результат
	
КонецФункции

Процедура ЗаполнитьИдентификаторыДляПоискаТоварнойПозиции(ТоварнаяПозиция)
	
	СопоставлениеНоменклатурыКонтрагентовКлиентСервер.РазделитьИдентификаторНаЧасти(ТоварнаяПозиция.Идентификатор,
		ТоварнаяПозиция);
	
КонецПроцедуры

Функция СоставнойИдентификаторТоварнойПозиции(Знач ИдентификаторНоменклатуры, Знач ИдентификаторХарактеристики = Неопределено, Знач ИдентификаторУпаковки = Неопределено)
		
	Если Не ЗначениеЗаполнено(ИдентификаторНоменклатуры) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторНоменклатуры) Тогда
		Результат = Справочники.НоменклатураКонтрагентов.ИдентификаторНоменклатурыКонтрагента(
			ИдентификаторНоменклатуры, ИдентификаторХарактеристики, ИдентификаторУпаковки);
	Иначе
		Результат = Справочники.НоменклатураКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНаименованию(
			ИдентификаторНоменклатуры, ИдентификаторХарактеристики, ИдентификаторУпаковки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СуррогатныйКлючТоварнойПозиции(Знач СтрокаЗаказа, Знач МодельЗаказа)
	
	Результат = "";
	Если НоменклатураВТерминахПоставщика(МодельЗаказа) Тогда
		Результат = СтрокаЗаказа.internalSellerCode;
	Иначе
		Результат = СтрокаЗаказа.internalBuyerCode;
	КонецЕсли;

	Если Не ПустаяСтрока(Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторНоменклатуры = СтрокаЗаказа.description;
	ИдентификаторХарактеристики = СтрокаЗаказа.extendedDescription;
	ИдентификаторУпаковки = ?(ПустаяСтрока(СтрокаЗаказа.package.description), СтрокаЗаказа.unit.name, СтрокаЗаказа.package.description);
	
	Результат = Справочники.НоменклатураКонтрагентов.ИдентификаторНоменклатурыКонтрагентаПоНаименованию(
			ИдентификаторНоменклатуры, ИдентификаторХарактеристики, ИдентификаторУпаковки);
	
	Возврат Результат;
	
КонецФункции

Функция ВариантУказанияНоменклатурыВЗаказе(Знач ТипДокумента, Знач МодельЗаказа, ЕстьОшибки, ТекстОшибки = "")
	
	Результат = Неопределено;
	Если ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику Тогда
		Если НоменклатураВТерминахПокупателя(МодельЗаказа) Тогда
			Результат = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации();
		Иначе
			Результат = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураКонтрагента();
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента Тогда
		Если НоменклатураВТерминахПоставщика(МодельЗаказа) Тогда
			Результат = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураОрганизации();
		Иначе
			Результат = СопоставлениеНоменклатурыКонтрагентовКлиентСервер.ВариантУказанияНоменклатураКонтрагента();
		КонецЕсли;
	Иначе
		ЕстьОшибки = Истина;
		ТекстОшибки = СтрШаблон(НСтр("ru='Неизвестный тип документа EDI: %1'"), ТипДокумента);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСОбъектомXDTO

Функция КлючОбъектаXDTO(Знач ОбъектXDTO)
	
	СоставКлюча = Новый Массив;
	Для Каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
		ЗначениеXDTO = ОбъектXDTO.Получить(СвойствоXDTO);
		Если ЗначениеXDTO <> Неопределено И (ТипЗнч(ЗначениеXDTO) = Тип("Строка") Или ТипЗнч(ЗначениеXDTO) = Тип("Число")) Тогда
			СоставКлюча.Добавить(ЗначениеXDTO);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(СоставКлюча, "");
	
КонецФункции

Процедура СкопироватьНепустыеЗначенияСвойств(Знач ОбъектXDTO, ЗначенияСвойств)
	
	Для Каждого СвойствоXDTO Из ОбъектXDTO.Свойства() Цикл
		ЗначениеXDTO = ОбъектXDTO.Получить(СвойствоXDTO);
		Если ЗначениеXDTO <> Неопределено Тогда
			ЗначенияСвойств.Вставить(СвойствоXDTO.Имя, ЗначениеXDTO);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОбъектXDTO(ОбъектXDTO, Знач ЗначенияСвойств, Знач Замещать = Истина)
	
	ТипОбъектаXDTO = ОбъектXDTO.Тип();
	Для Каждого СвойствоXDTO Из ТипОбъектаXDTO.Свойства Цикл
		ЗначениеXDTO = ЗначенияСвойств.Получить(СвойствоXDTO.Имя);
		Если ЗначениеXDTO <> Неопределено Тогда
			УстановитьЗначениеСвойстваXDTO(ОбъектXDTO, ТипОбъектаXDTO, СвойствоXDTO.Имя, ЗначениеXDTO, Замещать);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначениеСвойстваXDTO(ОбъектXDTO, Знач ТипОбъектаXDTO, Знач ИмяСвойства, Знач Значение,
	Знач Замещать = Истина)
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СвойствоXDTO = ТипОбъектаXDTO.Свойства.Получить(ИмяСвойства);
	Если СвойствоXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Замещать И ОбъектXDTO.Получить(СвойствоXDTO) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СвойствоXDTO.Тип) = Тип("ТипОбъектаXDTO") Тогда
		ОбъектXDTO.Установить(СвойствоXDTO, Значение);
	Иначе
		Если СвойствоXDTO.Тип.Фасеты <> Неопределено И СвойствоXDTO.Тип.Фасеты.Количество() = 0 Тогда
			ОбъектXDTO.Установить(СвойствоXDTO, Значение);
		Иначе
			ОбъектXDTO.Установить(СвойствоXDTO, ФабрикаXDTO.Создать(СвойствоXDTO.Тип, Значение));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗначениеСвойстваXDTO(Знач ОбъектXDTO, Знач Путь)
	
	Если ПустаяСтрока(Путь) Или ОбъектXDTO = Неопределено Тогда
		Возврат ОбъектXDTO;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ОкончаниеПути = СтрНайти(Путь, "/", НаправлениеПоиска.СНачала);
	Если ОкончаниеПути = 0 Тогда
		Результат = СвойствоXDTO(ОбъектXDTO, Путь);
		
		Возврат Результат;
	Иначе
		ЭлементПути = Лев(Путь,ОкончаниеПути-1);
		
		МеткаИндекса = СтрНайти(ЭлементПути, "[");
		ИндексСписка = Неопределено;
		Если МеткаИндекса <> 0 Тогда
			ИндексСписка = Сред(ЭлементПути, МеткаИндекса + 1);
			ИндексСписка = Число(Лев(ИндексСписка, СтрДлина(ИндексСписка) - 1));
			
			ЭлементПути = Лев(ЭлементПути, МеткаИндекса - 1);
		КонецЕсли;
		
		НовыйПуть = Сред(Путь, ОкончаниеПути + 1);
		
		Если МеткаИндекса <> 0 Тогда
			Результат = СвойствоXDTO(ОбъектXDTO, ЭлементПути);
			Если Результат = Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
			
			Результат = СвойствоXDTO(Результат, ИндексСписка);
		Иначе
			Результат = СвойствоXDTO(ОбъектXDTO, ЭлементПути);
		КонецЕсли;
		
		Если ПустаяСтрока(НовыйПуть) Или Результат = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;

		Результат = ЗначениеСвойстваXDTO(Результат, НовыйПуть);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СвойствоXDTO(Знач ОбъектXDTO, Знач КлючСвойства)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		Если ОбъектXDTO.Количество() < КлючСвойства + 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		КлючСвойства = ОбъектXDTO.Свойства().Получить(КлючСвойства);
		Если КлючСвойства = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если КлючСвойства.ВерхняяГраница < 0 Тогда
			Возврат ОбъектXDTO.ПолучитьСписок(КлючСвойства);
		КонецЕсли;
	КонецЕсли;
		
	Возврат ОбъектXDTO.Получить(КлючСвойства);
	
КонецФункции

#КонецОбласти

#Область РаботаСКоллекцией

Функция КоллекцияСодержитДанные(Знач Коллекция)
	
	Результат = Ложь;
	Для Каждого ЭлементКоллекции Из Коллекция Цикл
		Если ЗначениеЗаполнено(ЭлементКоллекции.Значение) Тогда
			Результат = Истина;
			
			Прервать;
		ИначеЕсли ТипЗнч(ЭлементКоллекции.Значение) = Тип("Структура") Тогда
			Результат = КоллекцияСодержитДанные(ЭлементКоллекции.Значение);
			
			Если Результат = Истина Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ФормализацияЗначений

Функция КодСтраныРоссия()
	
	Возврат "643";
	
КонецФункции

Функция ОбъектФорматаЗаказПоставщику()
	
	Возврат "Документ.ЗаказПоставщику"
	
КонецФункции

Функция ОбъектФорматаЗаказКлиента()
	
	Возврат "Документ.ЗаказКлиента"
	
КонецФункции

Функция ТипТовараСервисаТовар()
	
	Возврат "goods"
	
КонецФункции

Функция ТипТовараСервисаУслуга()
	
	Возврат "service"
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибок

Процедура ЗафиксироватьОшибку(Знач ИмяОперации, Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка конвертации данных сервиса 1С:EDI'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Операция: %1.'"), ИмяОперации));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ЗаписьЖурналаРегистрации(
		СтрШаблон(НСтр("ru='%1: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		ИнтеграцияССервисомEDIСлужебный.СобытиеЖурналаРегистрацииСервисEDI(), ИмяОперации),
		УровеньЖурналаРегистрации.Ошибка,,, СтрСоединить(ПредставлениеОшибки, Символы.ПС));

КонецПроцедуры

#КонецОбласти

#КонецОбласти