
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийОбъекта

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Объект.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика плана видов характеристик
//
// Параметры:
//  Объект - ПланВидовХарактеристикОбъект.СтатьиРасходов - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область МетодыМодуляМенеджера

// Дополняет массив блокируемых реквизитов объекта (см. ПланыВидовХарактеристик.СтатьиРасходов.ПолучитьБлокируемыеРеквизитыОбъекта).
//
// Параметры:
// 	БлокируемыеРеквизиты - Массив - Блокируемые реквизиты объекта
// 	БезЭлементовФорм - Булево - Добавлять в массив только реквизиты, без управляющих элементов форм.
//
Процедура ДополнитьБлокируемыеРеквизитыОбъекта(БлокируемыеРеквизиты, БезЭлементовФорм = Ложь) Экспорт
	//++ Локализация
	БлокируемыеРеквизиты.Добавить("ВидАктива");
	БлокируемыеРеквизиты.Добавить("ПринятиеКНалоговомуУчету");
	БлокируемыеРеквизиты.Добавить("ВидРасходов");
	БлокируемыеРеквизиты.Добавить("ВидПрочихДоходовИРасходов");
	БлокируемыеРеквизиты.Добавить("ВидРБП");
	БлокируемыеРеквизиты.Добавить("ПризнаватьРасходамиПриУСН");
	БлокируемыеРеквизиты.Добавить("ВидДеятельностиДляНалоговогоУчетаЗатрат");
	//-- Локализация
КонецПроцедуры

// Дополняет список недоступных для выбора предопределенных статей расходов
//
// Параметры:
// 	ЗаблокированныеСтатьи - Массив Из ПланВидовХарактеристикСсылка.СтатьиРасходов - Ссылки на недоступные статьи расходов 
//
Процедура ДополнитьСписокЗаблокированныхСтатей(ЗаблокированныеСтатьи) Экспорт

КонецПроцедуры

// Заполняет реквизиты параметров настройки счетов учета расходов, которые влияют на настройку,
// 	соответствующими им именам реквизитов аналитики учета.
//
// Параметры:
// 	СоответствиеИмен - Соответствие - ключом выступает имя реквизита, используемое в настройке счетов учета,
// 		значением является соответствующее имя реквизита аналитики учета.
// 
Процедура ЗаполнитьСоответствиеРеквизитовНастройкиСчетовУчета(СоответствиеИмен) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

Процедура ПриНачальномЗаполненииЭлемента(Элемент) Экспорт
	
	//++ Локализация
	
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Вызывается из соответствующего обработчика формы плана видов характеристик
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	//++ Локализация
	Объект = Форма.Объект;
	ЗаполнитьСписокВыбораКорСчета(Форма);
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

Процедура ВидДеятельностиРасходовПриИзменении(Форма) Экспорт
	//++ Локализация
	ЗаполнитьСписокВыбораКорСчета(Форма);
	//-- Локализация
КонецПроцедуры

Процедура ТипЗначенияПриИзмененииСервер(Форма) Экспорт
	//++ Локализация
	ИзмененныеРеквизиты = Новый СписокЗначений;
	//-- Локализация
КонецПроцедуры

Процедура ВариантРаспределенияРасходовРеглПриИзмененииСервер(Форма) Экспорт
	//++ Локализация
	ИзмененныеРеквизиты = Новый СписокЗначений;
	ЗаполнитьВариантРаздельногоУчетаНДС(ИзмененныеРеквизиты, Форма);

	//-- Локализация
КонецПроцедуры

Процедура ВариантРаспределенияРасходовРеглПриИзменении(Форма) Экспорт
	//++ Локализация
	ВариантРаспределенияРасходовРеглПриИзмененииСервер(Форма);
	УправлениеЭлементамиФормы(Форма);
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика формы объекта
//
// Параметры:
// 	ИмяЭлемента - Строка - Имя элемента управления
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ПриИзмененииРеквизита(ИмяЭлемента, Форма) Экспорт
	//++ Локализация

	
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика формы объекта
//
// Параметры:
// 	ИмяКоманды - Строка - Имя команды
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ВыполнитьКоманду(ИмяКоманды, Форма) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Дополняет список типов аналитик описанием объектов производства 2.1
//
// Параметры:
// 	СписокТипов - СписокЗначений - Список типов аналитик:
// 		* Значение - Строка - Строковое описание типа (Например, "ДокументСсылка.ЗаказНаПроизводство")
// 		* Представление - Строка - Представление типа для отображения на форме.
//
Процедура ДополнитьСписокТиповАналитикамиПроизводством21(СписокТипов) Экспорт
	//++ Локализация


	//-- Локализация
КонецПроцедуры

// Дополняет список типов аналитик описанием учета зарплаты
//
// Параметры:
// 	СписокТипов - СписокЗначений - Список типов аналитик:
// 		* Значение - Строка - Строковое описание типа (Например, "ПеречислениеСсылка.ВидыОперацийПоЗарплате")
// 		* Представление - Строка - Представление типа для отображения на форме.
//
Процедура ДополнитьСписокТиповАналитикамиУчетаЗарплаты(СписокТипов) Экспорт
	//++ Локализация


	//-- Локализация
КонецПроцедуры


#КонецОбласти

#КонецОбласти

//++ Локализация

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

Процедура ЗаполнитьВариантРаздельногоУчетаНДС(ИзмененныеРеквизиты, Форма)
	
	Объект = Форма.Объект;
	ВариантРаздельногоУчетаНДС = Неопределено;
	Если Объект.ВариантРаспределенияРасходовРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров Тогда
		ВариантРаздельногоУчетаНДС = Перечисления.ВариантыРаздельногоУчетаНДС.ИзДокумента;
	КонецЕсли;
	
	Если ВариантРаздельногоУчетаНДС <> Неопределено
		 И Объект.ВариантРаздельногоУчетаНДС <> ВариантРаздельногоУчетаНДС Тогда
		Объект.ВариантРаздельногоУчетаНДС = ВариантРаздельногоУчетаНДС;
		ИзмененныеРеквизиты.Добавить("ВариантРаздельногоУчетаНДС");
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область НастройкаСчетовРеглУчета

Процедура ЗаполнитьСписокВыбораКорСчета(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	СписокВыбора = Элементы.КорреспондирующийСчет.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяДеятельность
		 ИЛИ Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность Тогда
		СписокВыбора.Добавить("20", НСтр("ru='Основное производство (20)'"));
		СписокВыбора.Добавить("23", НСтр("ru='Вспомогательные производства (23)'"));
		СписокВыбора.Добавить("25", НСтр("ru='Общепроизводственные расходы (25)'"));
		СписокВыбора.Добавить("26", НСтр("ru='Общехозяйственные расходы (26)'"));
		СписокВыбора.Добавить("44.01", НСтр("ru='Издержки обращения (44.01)'"));
		СписокВыбора.Добавить("44.02", НСтр("ru='Коммерческие расходы (44.02)'"));
	КонецЕсли;
	Если Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ПрочаяДеятельность
		 ИЛИ Объект.ВидДеятельностиРасходов = Перечисления.ВидыДеятельностиРасходов.ОсновнаяИПрочаяДеятельность Тогда
		СписокВыбора.Добавить("91.02", НСтр("ru='Прочие расходы (91.02)'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура УправлениеЭлементамиФормы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ВариантРаспределенияРегл = Объект.ВариантРаспределенияРасходовРегл;
	ВариантРаспределенияНУ = Объект.ВариантРаспределенияРасходовНУ;
	НаПрочиеАктивы = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаПрочиеАктивы);
	НаВнеоборотныеАктивы = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
	НаСебестоимостьТоваровРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров);
	НаНаправленияДеятельностиРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	НаРасходыБудущихПериодовРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	НаРасходыБудущихПериодовНУ = (ВариантРаспределенияНУ = Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	НаПроизводственныеЗатратыРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	НаПроизводственныеЗатратыНУ = (ВариантРаспределенияНУ = Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	НеРаспределятьРегл = (ВариантРаспределенияРегл = Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	
	Если Форма.ПолныеВозможности Тогда
		ВидимостьДоступностьНастроекРаспределения(Форма);
	Иначе
		// Косвенные затраты в упрощенном режиме просмотра 
		Элементы.ЛокализацияГруппаИндикаторКосвенныхЗатрат.Видимость = Ложь;
	КонецЕсли;
	
	
КонецПроцедуры

Функция ДоступнаНастройкаВариантаРаспределенияНУ(ТипРасходов, ВариантРаспределенияРасходовРегл)
	Возврат ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.Производственные")
			ИЛИ ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ПрочиеРасходы")
			ИЛИ ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ПроизводствоПродукции")
			ИЛИ ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ВозникновениеЗатратНаОбъектах")
			ИЛИ ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА")
			ИЛИ ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров")
			ИЛИ ВариантРаспределенияРасходовРегл = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности")
				И (ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.ЗакупкаТоваров")
					ИЛИ ТипРасходов = ПредопределенноеЗначение("Перечисление.ТипыРасходов.СкладскоеХранение"));
					
КонецФункции

Процедура ВидимостьДоступностьНастроекРаспределения(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ДоступнаНастройкаВариантаРаспределенияНУ = ДоступнаНастройкаВариантаРаспределенияНУ(Объект.ТипРасходов, Объект.ВариантРаспределенияРасходовРегл);
	Элементы.ВариантРаспределенияРасходовНУПолные.Доступность = ДоступнаНастройкаВариантаРаспределенияНУ;

	Элементы.ПравилоРаспределенияРасходовНУПолные.Видимость = 
		Перечисления.ВариантыРаспределенияРасходов.ВариантИспользуетПравилоРаспределенияНУ(Объект.ВариантРаспределенияРасходовНУ)
		И (НЕ Объект.ВариантРаспределенияРасходовРегл = Объект.ВариантРаспределенияРасходовНУ
			ИЛИ Объект.ВариантРаспределенияРасходовНУ = ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности"));

	Элементы.НадписьНеТребуетРаспределенияНУ.Видимость = 
		НЕ Объект.ВариантРаспределенияРасходовНУ.Пустая() 
			И Перечисления.ВариантыРаспределенияРасходов.ВариантБезРаспределенияНУ(Объект.ВариантРаспределенияРасходовНУ);
			
	Элементы.НадписьПравилоРаспределенияНУКакРегл.Видимость = 
		НЕ Объект.ВариантРаспределенияРасходовНУ.Пустая()
		И Объект.ВариантРаспределенияРасходовНУ = Объект.ВариантРаспределенияРасходовРегл
		И НЕ Перечисления.ВариантыРаспределенияРасходов.ВариантБезРаспределенияНУ(Объект.ВариантРаспределенияРасходовНУ)
		И Перечисления.ВариантыРаспределенияРасходов.ВариантИспользуетПравилоРаспределенияНУ(Объект.ВариантРаспределенияРасходовНУ)
		И ДоступнаНастройкаВариантаРаспределенияНУ;

	Элементы.ЛокализацияГруппаПолныеНастройкиНУ.Видимость = 
		ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");

КонецПроцедуры


#КонецОбласти

#КонецОбласти

//-- Локализация
