#Область ПрограммныйИнтерфейс

// Отражает текущий статус на форме демонстрационного сценария
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой отображается статус
//
Процедура ОтразитьТекущийСтатусНаФорме(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ФормаУстановитьСтатусВРаботе.Пометка       = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДемонстрационныхСценариев.ВРаботе"));
	Элементы.ФормаУстановитьСтатусНаПроверке.Пометка    = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДемонстрационныхСценариев.НаПроверке"));
	Элементы.ФормаУстановитьСтатусЕстьЗамечания.Пометка = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДемонстрационныхСценариев.ЕстьЗамечания"));
	Элементы.ФормаУстановитьСтатусПроверено.Пометка     = (Форма.Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДемонстрационныхСценариев.Проверено"));
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Статус) Тогда
		ЗаголовокПодменю = НСтр("ru = 'Статус не указан'");
	Иначе
		ЗаголовокПодменю = Строка(Форма.Объект.Статус);
	КонецЕсли; 
	
	Элементы.ПодменюСтатус.Заголовок = ЗаголовокПодменю;
	
КонецПроцедуры

// Получает код языка из имени команды
//
// Параметры:
//  ИмяКоманды - Строка - имя команды, из которого получается код языка
//  ПрефиксКоманды - Строка - имя команды без кода языка
//  
//  Возвращаемое значение:
//    Строка - код языка, полученный из имени команды
//
Функция КодЯзыкаИзИмениКоманды(ИмяКоманды, ПрефиксКоманды) Экспорт

	Возврат Прав(ИмяКоманды, СтрДлина(ИмяКоманды) - СтрДлина(ПрефиксКоманды)); 

КонецФункции

// Получает код языка из имени присоединенного файла
//
// Параметры:
//  ИмяФайла - Строка - имя файла, из которого получается код языка
//  
//  Возвращаемое значение:
//    Строка - код языка, полученный из имени файла
//
Функция КодЯзыкаИзИмениФайла(ИмяФайла) Экспорт
	
	КодЯзыка = "";
	
	ПоложениеРазделителя = СтрНайти(ИмяФайла, "_", НаправлениеПоиска.СКонца);
	
	Если ПоложениеРазделителя <> 0 Тогда
		
		КодЯзыка = Прав(ИмяФайла, СтрДлина(ИмяФайла) - ПоложениеРазделителя);
		
	КонецЕсли;
	
	Возврат КодЯзыка;
	
КонецФункции

// Отражает текущие языки на форме демонстрационного сценария
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения  - Форма, для которой отображаются языки
//  ИмяРеквизитаКодЯзыкаЧтение          - Строка - имя реквизита формы который содержит код языка просмотра
//  ИмяРеквизитаКодЯзыкаРедактирование  - Строка - имя реквизита формы который содержит код языка редактирования
//
Процедура ОтразитьТекущиеЯзыкиНаФорме(Форма, ИмяРеквизитаКодЯзыкаЧтение, ИмяРеквизитаКодЯзыкаРедактирование) Экспорт
	
	ОтразитьЯзыкВПодменю(Форма, ИмяРеквизитаКодЯзыкаРедактирование, "ПодменюЯзыкРедактирования", "ПереключитьНаЯзыкРедактирования_");
	ОтразитьЯзыкВПодменю(Форма, ИмяРеквизитаКодЯзыкаЧтение, "ПодменюЯзыкПросмотра", "ПереключитьНаЯзыкПросмотра_");
	
КонецПроцедуры 

// Формирует заголовок команды перевода на форме
//
// Параметры:
//  ИсходныйЯзык - Строка - язык, с которого выполняется перевод
//  ЯзыкПеревода - Строка - язык, на который выполняется перевод
//  ЭлементФормы - КнопкаФормы - кнопка команды перевода
//
Процедура СформироватьЗаголовокКомандыПеревода(ИсходныйЯзык, ЯзыкПеревода, ЭлементФормы) Экспорт
	
	ЭлементФормы.Заголовок = СтрШаблон("%1 -> %2", ИсходныйЯзык, ЯзыкПеревода);
	ЭлементФормы.Доступность =  ЗначениеЗаполнено(ИсходныйЯзык)
	                            И ЗначениеЗаполнено(ЯзыкПеревода)
	                            И (ИсходныйЯзык <> ЯзыкПеревода);
	
КонецПроцедуры

// Устанавливает флаг текущего варианта отображения формы в подменю
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, устанавливается флаг
//
Процедура УстановитьПометкуКомандПереключенияВариантаОтображенияФормы(Форма) Экспорт
	
	Элементы                = Форма.Элементы;
	ВариантОтображенияФормы = Форма.ВариантОтображенияФормы;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаУстановитьРежимПросмотра", "Пометка", ВариантОтображенияФормы = "Просмотр");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаУстановитьРежимРедактирования", "Пометка", ВариантОтображенияФормы = "Редактирование");
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаУстановитьВариантПеревод", "Пометка", ВариантОтображенияФормы = "Перевод");
	
КонецПроцедуры

// Конструктор параметров переключения варианта отображения формы
//
// Возвращаемое значение:
//   Структура   - содержит:
//    *Форма                          - ФормаКлиентскогоПриложения, Неопределено - форма, в которой выполняется переключение
//    *НовыйВариант                   - Строка - вариант, на который выполняется переключение
//    *ПрошлыйВариант                 - Строка - предыдущий вариант отображения
//    *ИмяРеквизитаЯзыкЧтение         - Строка - имя реквизита формы где находится текст просмотра
//    *ИмяРеквизитаЯзыкРедактирование - Строка - имя реквизита формы где находится текст редактирования
//    *ВыполненоПереключениеЯзыка     - Булево - признак того, что при переключении режима формы, был переключен и язык
//    *ИмяРеквизитаПереключенЯзык     - Строка - имя реквизита формы текста, для которого был переключен язык
//    *ПереключеноНаЯзык              - Строка - код языка, на который было выполнено переключение
//    *ЯзыкиКонфигурации              - СписокЗначений из Строка - кэшированные языки конфигурации
//
Функция НовыйПараметрыПереключенияВариантаОтображения() Экспорт
	
	ПараметрыПереключения = Новый Структура;
	
	ПараметрыПереключения.Вставить("Форма",                          Неопределено);
	ПараметрыПереключения.Вставить("НовыйВариант",                   "");
	ПараметрыПереключения.Вставить("ПрошлыйВариант",                 "");
	ПараметрыПереключения.Вставить("ИмяРеквизитаЯзыкЧтение",         "");
	ПараметрыПереключения.Вставить("ИмяРеквизитаЯзыкРедактирование", "");
	ПараметрыПереключения.Вставить("ВыполненоПереключениеЯзыка",     Ложь);
	ПараметрыПереключения.Вставить("ИмяРеквизитаПереключенЯзык",     "");
	ПараметрыПереключения.Вставить("ПереключеноНаЯзык",              "");
	ПараметрыПереключения.Вставить("ЯзыкиКонфигурации",              Новый СписокЗначений);
	
	Возврат ПараметрыПереключения;
	
КонецФункции

// Переключает вариант отображения в форме
//
// Параметры:
//  ПараметрыПереключения -  см. НовыйПараметрыПереключенияВариантаОтображения 
//
Процедура ПереключитьВариантОтображения(ПараметрыПереключения) Экспорт

	Если Не ЗначениеЗаполнено(ПараметрыПереключения.НовыйВариант) Тогда
		ПараметрыПереключения.НовыйВариант = "Просмотр";
	КонецЕсли;
	
	ПараметрыПереключения.ПрошлыйВариант = ПараметрыПереключения.Форма.ВариантОтображенияФормы;
	ПараметрыПереключения.Форма.ВариантОтображенияФормы = ПараметрыПереключения.НовыйВариант;
	
	Если ПараметрыПереключения.НовыйВариант = "Редактирование" Тогда 
		
		ПараметрыПереключения.Форма.Элементы.ПодменюРежимПросмотраРедактирования.Заголовок = НСтр("ru = 'Редактирование'");
		
	ИначеЕсли ПараметрыПереключения.НовыйВариант = "Просмотр" Тогда
		
		ПараметрыПереключения.Форма.Элементы.ПодменюРежимПросмотраРедактирования.Заголовок = НСтр("ru = 'Просмотр'");
		
	ИначеЕсли ПараметрыПереключения.НовыйВариант = "Перевод" Тогда
		
		ПараметрыПереключения.Форма.Элементы.ПодменюРежимПросмотраРедактирования.Заголовок = НСтр("ru = 'Перевод'");
		
	КонецЕсли;
	
	ИзменитьЯзыкиПослеИзмененияВариантаОтображения(ПараметрыПереключения);
	
	ДемонстрационныеСценарииВызовСервера.СохранитьНастройкуРежимаОтображенияФормы(ПараметрыПереключения.НовыйВариант);
	
КонецПроцедуры

// Получает текст HTML из табличной части реквизита формы по коду языка
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма, для которой выполняется действие
//  КодЯзыка          - Строка - код языка, для которого нужно получить текст
//  ИмяТабличнойЧасти - Строка - имя табличной части формы
//  ИмяРеквизита      - Строка - имя реквизита табличной части
//
// Возвращаемое значение:
//   Строка   - текст HTML по коду языка
//
Функция ТекстHTMLПоКодуЯзыка(Форма, КодЯзыка, ИмяТабличнойЧасти, ИмяРеквизита) Экспорт
	
	НайденныйТекст = "";
	СтруктураПоиска = Новый Структура("КодЯзыка", КодЯзыка);
	
	НайденныеСтроки = Форма[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйТекст = НайденныеСтроки[0][ИмяРеквизита];
	КонецЕсли;
	
	Если ПустаяСтрока(НайденныйТекст) Тогда
		Возврат ПустойТекстHTML();
	Иначе
		Возврат НайденныйТекст;
	КонецЕсли;
	
КонецФункции

// Получает присоединенный файл сценария по по коду языка
//
// Параметры:
//  Форма    - ФормаКлиентскогоПриложения - форма, для которой выполняется действие
//  КодЯзыка - Строка - код языка, для которого нужно получить присоединенный файл
//
// Возвращаемое значение:
//   СправочникСсылка.ДемонстрационныеСценарииПрисоединенныеФайлы - присоединенный файл сценария
//
Функция ПрисоединенныйФайлСценария(Форма, КодЯзыка) Экспорт
	
	ПрисоединенныйФайл = Неопределено;
	СтруктураПоиска = Новый Структура("КодЯзыка", КодЯзыка);
	
	НайденныеСтроки = Форма.Объект.ОписанияСценария.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ПрисоединенныйФайл =   НайденныеСтроки[0].ПрисоединенныйФайл;
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

// Проверяет, создан ли присоединенный файл сценария
//
// Параметры:
//  Форма    - ФормаКлиентскогоПриложения - форма, для которой выполняется действие
//  КодЯзыка - Строка - код языка, для которого нужно проверить создание присоединенного файла
//
// Возвращаемое значение:
//   Булево - Истина если создан, ложь если нет.
//
Функция ПрисоединенныйФайлПоСценариюСоздан(Форма, КодЯзыка) Экспорт 
	
	ФайлСоздан = Ложь;
	СтруктураПоиска = Новый Структура("КодЯзыка", КодЯзыка); 
	
	НайденныеСтроки = Форма.ОписанияСценария.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ФайлСоздан = ЗначениеЗаполнено(НайденныеСтроки[0].ДатаМодификации);
	КонецЕсли;
	
	Возврат ФайлСоздан;
	
КонецФункции

// Получает данные сценария на требуемом языке
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, для которой выполняется действие
//  КодЯзыка - Строка - код языка, для которого нужно получить данные языка
//  ИмяТабличнойЧасти - Строка - имя табличной части реквизита формы, в котором содержатся данные
//
// Возвращаемое значение:
//   Структура - Содержит:
//    *ТекстHTML                                         - Строка - текст, ранее полученный из файла
//    *ТекущийСценарийДоступенДляРедактирования          - Булево - доступен ли файл для редактирования
//    *ТекущийСценарийРедактируетсяТекущимПользователем  - Булево - редактируется ли файл уже текущим пользователем
//    *ПредставлениеСостоянияРедактирования              - Строка - используется для вывода в форму у команд редактирования
//
Функция ДанныеСценарияНаЯзыке(Форма, КодЯзыка, ИмяТабличнойЧасти) Экспорт
	
	ДанныеСценарияНаЯзыке = Новый Структура;
	ДанныеСценарияНаЯзыке.Вставить("ТекстHTML",                                        "");
	ДанныеСценарияНаЯзыке.Вставить("ТекущийСценарийДоступенДляРедактирования",         Ложь);
	ДанныеСценарияНаЯзыке.Вставить("ТекущийСценарийРедактируетсяТекущимПользователем", Ложь);
	ДанныеСценарияНаЯзыке.Вставить("ПредставлениеСостоянияРедактирования",             "");
	
	СтруктураПоиска = Новый Структура("КодЯзыка", КодЯзыка);
	НайденныеСтроки = Форма[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеСценарияНаЯзыке.ТекстHTML = НайденныеСтроки[0].ТекстHTML;
		ДанныеСценарияНаЯзыке.ПредставлениеСостоянияРедактирования = ПредставлениеСостоянияРедактирования(Форма, НайденныеСтроки[0]);
		ДанныеСценарияНаЯзыке.ТекущийСценарийРедактируетсяТекущимПользователем = (НайденныеСтроки[0].Редактирует = Форма.ТекущийПользователь);
		ДанныеСценарияНаЯзыке.ТекущийСценарийДоступенДляРедактирования = (Не НайденныеСтроки[0].Редактируется) 
		                                                                  Или (НайденныеСтроки[0].Редактирует = Форма.ТекущийПользователь);
		
	Иначе
		
		НоваяСтрока = Форма[ИмяТабличнойЧасти].Добавить();
		НоваяСтрока.КодЯзыка  = КодЯзыка;
		НоваяСтрока.ТекстHTML = ПустойТекстHTML();
		
		ДанныеСценарияНаЯзыке.ТекстHTML = НоваяСтрока.ТекстHTML;
		ДанныеСценарияНаЯзыке.ПредставлениеСостоянияРедактирования = ПредставлениеСостоянияРедактирования(Форма, НоваяСтрока);
		ДанныеСценарияНаЯзыке.ТекущийСценарийДоступенДляРедактирования = Истина;
	
	КонецЕсли;
	
	Возврат ДанныеСценарияНаЯзыке;
	
	
КонецФункции

// Формирует пустой текст HTML
//
// Возвращаемое значение:
//   Строка - пустой текст HTML с необходимыми тегами.
//
Функция ПустойТекстHTML() Экспорт 

	ТекстHTML = "";
	ДобавитьТегиТелаЕслиНеобходимо(ТекстHTML);
	
	Возврат ТекстHTML; 
	
КонецФункции 

// Добавляет теги документа HTML к тексту если они отсутствуют
//
// Параметры:
//  ТекстКОбработке - Строка - обрабатываемый текст
//
Процедура ДобавитьТегиТелаЕслиНеобходимо(ТекстКОбработке) Экспорт
	
	НетТела = (СтрЧислоВхождений(НРег(ТекстКОбработке), "<body") = 0);
	НетЗаголовка = (СтрЧислоВхождений(НРег(ТекстКОбработке), "<html") = 0);
	Если НетТела И НетЗаголовка Тогда
		ТекстКОбработке = "<body>" + ТекстКОбработке + "</body>"
	КонецЕсли;
	Если НетЗаголовка Тогда
		ТекстКОбработке = "<html><meta charset=""""UTF-8"""">" + ТекстКОбработке + "</html>"
	КонецЕсли;
	
КонецПроцедуры

// Формирует полный текст строкой для формирования наименования присоединенного файла
// 
// Параметры:
//  ПолныйКод - Строка - полный код справочника
//
// Возвращаемое значение:
//   Строка - пустой текст HTML с необходимыми тегами.
//
Функция ПолныйКодСтрокойДляИмениФайла(ПолныйКод) Экспорт

	Возврат СтрЗаменить(ПолныйКод, ".", "_");

КонецФункции

// Возвращает имя файла описания сценария
//
// Возвращаемое значение:
//   Строка - 
//
Функция ИмяФайлаОписанияСценария(ПолныйКод, КодЯзыка) Экспорт
	
	Возврат СтрШаблон("%1_%2_%3",
	                  "ОписаниеСценария_" ,
	                   ПолныйКодСтрокойДляИмениФайла(ПолныйКод), 
	                   КодЯзыка);
	
КонецФункции

// Выполняет поиск в тексте и возвращает позиции найденного
// 
// Параметры:
//  ГдеИщем          - Строка - текст, в котором выполняется поиск
//  ПараметрыСобытия - Структура - параметры события поиска
//
// Возвращаемое значение:
//   Массив из Число - позиции найденного в тексте.
//
Функция ПозицииНайденногоВТексте(ГдеИщем, ПараметрыСобытия) Экспорт
	
	ПозицииНайденного = Новый Массив;
	
	ЧтоИщем          = ПараметрыСобытия.ЧтоМеняем;
	НачальнаяПозиция = 1;
	ДлинаЧтоИщем     = СтрДлина(ЧтоИщем);
	
	НайденнаяПозиция = СтрНайти(ГдеИщем, ЧтоИщем, НаправлениеПоиска.СНачала, НачальнаяПозиция);
	
	Пока НайденнаяПозиция <> 0 Цикл
		
		СоответствуетТребованиям = НайденноеСоответствуетТребованиям(ГдеИщем, ЧтоИщем,  НайденнаяПозиция, ПараметрыСобытия);
		
		Если СоответствуетТребованиям Тогда
			ПозицииНайденного.Добавить(НайденнаяПозиция);
		КонецЕсли;
		
		НачальнаяПозиция = НайденнаяПозиция + ДлинаЧтоИщем;
		НайденнаяПозиция = СтрНайти(ГдеИщем, ЧтоИщем, НаправлениеПоиска.СНачала, НачальнаяПозиция);
		
	КонецЦикла;
	
	Возврат ПозицииНайденного;
	
КонецФункции

// Получает текст HTML из форматированного документа
// 
// Параметры:
//  ФорматированныйДокумент - ФорматированныйДокумент - из которого извлекается текст HTML
//
// Возвращаемое значение:
//   Строка - извлеченный текст HTML.
//
Функция ТекстHTMLИзФорматированногоДокумента(ФорматированныйДокумент) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("HTML", "");
	СтруктураВозврата.Вставить("Вложения", Новый Структура);
	
	ФорматированныйДокумент.ПолучитьHTML(СтруктураВозврата.HTML, СтруктураВозврата.Вложения);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает форматированный документ из текста HTML
// 
// Параметры:
//  ТекстHTML - Строка - текст HTML из которого формируется форматированный документ
//  Вложения  - Структура - картинки, размещенные в тексте HTML
//
// Возвращаемое значение:
//   Строка - извлеченный текст HTML.
//
Функция ФорматированныйДокументИзДанныхHTML(ТекстHTML, Вложения) Экспорт
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Вложения);
	
	Возврат ФорматированныйДокумент;
	
КонецФункции

// Проверяет соответствует ли найденное в тексте требованиям
// 
// Параметры:
//  ГдеИщем         - Строка - текст, в котором выполняется поиска
//  ЧтоИщем          - Строка - текст, который ищем
//  НайденнаяПозиция - Число - позиция найденного в тексте
//  ПараметрыСобытия - Структура - параметры поиска
//
// Возвращаемое значение:
//   Булево - Истина, если удовлетворяет условию.
//
Функция НайденноеСоответствуетТребованиям(ГдеИщем, ЧтоИщем, НайденнаяПозиция, ПараметрыСобытия) Экспорт
	
	ДлинаЧтоИщем     = СтрДлина(ЧтоИщем);
	ДлинаТекста      = СтрДлина(ГдеИщем);
	
	СоответствуетТребованиям = Истина;
	
	Если ПараметрыСобытия.УчитыватьРегистр Тогда
		
		НайденнаяСтрока = Сред(ГдеИщем, НайденнаяПозиция, ДлинаЧтоИщем);
		Если НайденнаяСтрока <> ЧтоИщем Тогда
			СоответствуетТребованиям = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыСобытия.ИскатьСловоЦеликом
		И СоответствуетТребованиям Тогда
		
		Если НайденнаяПозиция = 1 Тогда
			ПредыдущийСимвол = "";
		Иначе
			ПредыдущийСимвол = Сред(ГдеИщем, НайденнаяПозиция - 1, 1);
		КонецЕсли;
		
		Если ЭтоНеИсключаемый(ПредыдущийСимвол) Тогда
			СоответствуетТребованиям = Ложь;
		КонецЕсли;
		
		Если СоответствуетТребованиям Тогда
			Если НайденнаяПозиция = ДлинаТекста - ДлинаЧтоИщем Тогда
				ПоследующийСимвол = "";
			Иначе
				ПоследующийСимвол = Сред(ГдеИщем, НайденнаяПозиция + ДлинаЧтоИщем, 1);
			КонецЕсли;
			
			Если ЭтоНеИсключаемый(ПоследующийСимвол) Тогда
				СоответствуетТребованиям = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоответствуетТребованиям Тогда
		СоответствуетТребованиям = ТекстСоответствуетУсловиюПоискаВГиперссылке(
			ГдеИщем, ЧтоИщем, НайденнаяПозиция, ПараметрыСобытия.КакИскатьВГиперссылках);
	КонецЕсли;
		
	Возврат СоответствуетТребованиям;
	
КонецФункции

// Возвращает текст сообщения пользователю при некорретных параметрах открытия печатной формы "Альбом процессов"
//
// Возвращаемое значение:
//   Строка - текст сообщения
//
Функция ТекстСообщенияНекорректныеПараметрыАльбомПроцессов() Экспорт
	
	Возврат НСтр("ru = 'Не выбрано ни одной группы демонстрационных сценариев для формирования альбома процессов'");
	
КонецФункции

// Преобразовывает уникальный идентификатор в строку
// 
// Параметры:
//  УникальныйИдентификатор - УникальныйИдентификатор - который будет преобразован в строку
// 
// Возвращаемое значение:
//   Строка - 
//
Функция УникальныйИдентификаторСтрокой(УникальныйИдентификатор) Экспорт
	
	Возврат СтрЗаменить(Строка(УникальныйИдентификатор), "-", "_");
	
КонецФункции

// Возвращает имя каталога выгрузки описаний процессов
//
// Возвращаемое значение:
//   Строка - 
//
Функция ИмяКаталогаВыгрузкиОписанияПроцессов() Экспорт
	
	Возврат "DescriptionOfTheProcess";
	
КонецФункции

// Возвращает имя каталога выгрузки описаний процессов
//
// Возвращаемое значение:
//   Строка - 
//
Функция ИмяКаталогаГлоссария() Экспорт
	
	Возврат "Glossary";
	
КонецФункции

// Возвращает имя каталога выгрузки скриншотов
//
// Возвращаемое значение:
//   Строка - 
//
Функция ИмяКаталогаВыгрузкиСкриншоты() Экспорт
	
	Возврат "ScreenShots";
	
КонецФункции

// Возвращает имя файла описания выгрузки
//
// Возвращаемое значение:
//   Строка - 
//
Функция ИмяФайлаОписаниеВыгрузки() Экспорт
	
	Возврат "Description.json";
	
КонецФункции

// Формирует текст описания поставки
// 
// Параметры:
//  ОписаниеКонфигурации   - Строка - переданная строка
//  Поставщик              - Строка - 
//
// Возвращаемое значение:
//   Строка  -
//
Функция ТекстОписанияПоставки(ОписаниеКонфигурации, Поставщик) Экспорт
	
	Возврат  СтрШаблон(НСтр("ru = '%1, поставщик - %2'"), ОписаниеКонфигурации, Поставщик);
	
КонецФункции

// Возвращает идентификатор внешней компоненты для получения скриншотов
// 
// Возвращаемое значение:
//   Строка  - 
//
Функция ИдентификаторВнешнейКомпонентыПолученияСкриншотов() Экспорт
	
	Возврат "WindowsControl"; 
	
КонецФункции

// Извлекает код языка и идентификатор сценария из имени файла
// 
// Параметры:
//  ИмяФайла   - Строка -
//
// Возвращаемое значение:
//   Структура  - содержит:
//     * КодЯзыка  - Строка - признак успешности выполнения операции
//     * Данные        - Соответствие -
//
Функция КодЯзыкаИдентификаторИзИмениФайлаОписания(ИмяФайла) Экспорт
	
	ДанныеФайла = Новый Структура;
	ДанныеФайла.Вставить("КодЯзыка",              Лев(ИмяФайла, 2));
	ДанныеФайла.Вставить("ИдентификаторСценария", Новый УникальныйИдентификатор(СтрЗаменить(Прав(ИмяФайла, СтрДлина(ИмяФайла)-3), "_", "-")));
	
	Возврат ДанныеФайла;
	
КонецФункции

// Извлекает идентификатор из имени файла, содержащего реквизиты справочника
// 
// Параметры:
//  ИмяФайла   - Строка -
//
// Возвращаемое значение:
//   УникальныйИдентификатор - 
//
Функция ИдентификаторИзИмениФайлаРеквизиты(ИмяФайла) Экспорт
	
	Возврат Новый УникальныйИдентификатор(СтрЗаменить(Прав(ИмяФайла, СтрДлина(ИмяФайла)-11), "_", "-"))
	
КонецФункции

// Возвращает префикс навигационной ссылки справочника "ДемонстрационныеСценарииПрисоединенныеФайлы"
//
// Возвращаемое значение:
//   УникальныйИдентификатор - 
//
Функция ПрефиксСсылкиПрисоединенныйФайл() Экспорт
	
	Возврат "e1cib/data/Справочник.ДемонстрационныеСценарииПрисоединенныеФайлы?";
	
КонецФункции

// Проверяет, существует ли каталог на диске
//
// Параметры:
//  ПроверяемыйКаталог - Строка - проверяемый каталог
//
// Возвращаемое значение:
//   Булево - Истина, если каталог существует
//
Функция КаталогНаДискеСуществует(ПроверяемыйКаталог) Экспорт

	КаталогНаДиске = Новый Файл(ПроверяемыйКаталог);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Формирует заголовок части навигатора по помощникам загрузки и выгрузки
//
// Параметры:
//  ЗаголовокЧасти       - Строка - заголовок части навигатора
//  КомандаНавигации     - Строка - команда, которая будет содержаться в гиперссылке
//  Доступность          - Булево - признак доступности команды 
//  ЭтоТекущая           - Булево - признак доступности команды
//
// Возвращаемое значение:
//   Строка - сформированная часть заголовка
//
Функция ЗаголовокЧастиНавигатораПомощника(ЗаголовокЧасти, КомандаНавигации, Доступность, ЭтоТекущая) Экспорт

	Если Доступность И Не ЭтоТекущая Тогда
		
		Возврат ФорматированнаяСтрокаСГиперссылкой( ЗаголовокЧасти, КомандаНавигации);
		
	ИначеЕсли ЭтоТекущая Тогда
		
		Возврат ФорматированнаяСтрокаСГиперссылкой(ЗаголовокЧасти, "", Ложь, , Истина);
		
	Иначе
		
		Возврат ЗаголовокЧасти;
		
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ФорматированнаяСтрокаСГиперссылкой(ТекстСтроки, ТекстГиперссылки, ВыводитьГиперссылку = Истина, ЦветТекста = Неопределено, Жирный = Ложь)
	
	Если Жирный Тогда
		Шрифт = Новый Шрифт(,,Истина);
	Иначе
		Шрифт = Неопределено;
	КонецЕсли;
	
	Если ВыводитьГиперссылку Тогда
		
		СформированнаяСтрока =  Новый ФорматированнаяСтрока(ТекстСтроки,
		                                                    Шрифт,
		                                                    ЦветТекста,
		                                                    ,
		                                                    ТекстГиперссылки);
	Иначе
		
		СформированнаяСтрока = Новый ФорматированнаяСтрока(ТекстСтроки, Шрифт, ЦветТекста);
		
	КонецЕсли;

	Возврат СформированнаяСтрока;
	
КонецФункции

Процедура ИзменитьЯзыкиПослеИзмененияВариантаОтображения(ПараметрыПереключения)
	
	Если ПустаяСтрока(ПараметрыПереключения.ИмяРеквизитаЯзыкЧтение)
		Или ПустаяСтрока(ПараметрыПереключения.ИмяРеквизитаЯзыкРедактирование) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыПереключения.ПрошлыйВариант = "Редактирование" 
		И ПараметрыПереключения.НовыйВариант = "Просмотр" Тогда 
		
		ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкЧтение] = 
			ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкРедактирование];
		ПараметрыПереключения.ВыполненоПереключениеЯзыка = Истина;
		ПараметрыПереключения.ИмяРеквизитаПереключенЯзык = ПараметрыПереключения.ИмяРеквизитаЯзыкЧтение;
		ПараметрыПереключения.ПереключеноНаЯзык          = ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкРедактирование];
		
		
	ИначеЕсли ПараметрыПереключения.ПрошлыйВариант = "Просмотр" 
		И ПараметрыПереключения.НовыйВариант = "Редактирование" Тогда 
		
		ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкРедактирование] =
			ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкЧтение];
		ПараметрыПереключения.ВыполненоПереключениеЯзыка = Истина;
		ПараметрыПереключения.ИмяРеквизитаПереключенЯзык = ПараметрыПереключения.ИмяРеквизитаЯзыкРедактирование;
		ПараметрыПереключения.ПереключеноНаЯзык          = ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкЧтение];
		
	ИначеЕсли ПараметрыПереключения.НовыйВариант = "Перевод"
		И ПараметрыПереключения.ЯзыкиКонфигурации.Количество() = 2 Тогда
		
		Если ПараметрыПереключения.ПрошлыйВариант = "Просмотр" Тогда
			
			ИсходныйЯзык =  ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкЧтение];
			ЦелевойЯзык =  ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкРедактирование];
			ПараметрыПереключения.ИмяРеквизитаПереключенЯзык = ПараметрыПереключения.ИмяРеквизитаЯзыкРедактирование;
			
		ИначеЕсли ПараметрыПереключения.ПрошлыйВариант = "Редактирование" Тогда
			
			ИсходныйЯзык =  ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкРедактирование];
			ЦелевойЯзык =  ПараметрыПереключения.Форма[ПараметрыПереключения.ИмяРеквизитаЯзыкЧтение];
			ПараметрыПереключения.ИмяРеквизитаПереключенЯзык = ПараметрыПереключения.ИмяРеквизитаЯзыкЧтение;
			
		КонецЕсли;
		
		Если ИсходныйЯзык = ЦелевойЯзык Тогда
			
			ЭлементСписка = ПараметрыПереключения.ЯзыкиКонфигурации.НайтиПоЗначению(ИсходныйЯзык);
			ИндексЭлемента = ПараметрыПереключения.ЯзыкиКонфигурации.Индекс(ЭлементСписка); 
			ПараметрыПереключения.ВыполненоПереключениеЯзыка = Истина;
			
			Если ИндексЭлемента = 0 Тогда
				ПараметрыПереключения.ПереключеноНаЯзык = ПараметрыПереключения.ЯзыкиКонфигурации[1].Значение;
			ИначеЕсли ИндексЭлемента = 1 Тогда 
				ПараметрыПереключения.ПереключеноНаЯзык = ПараметрыПереключения.ЯзыкиКонфигурации[0].Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПредставлениеСостоянияРедактирования(Форма, ДанныеФайла)
	
	Если Не ЗначениеЗаполнено(ДанныеФайла.ДатаМодификации)
		И Не ЗначениеЗаполнено(ДанныеФайла.Изменил) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	ТекстИзменен = СтрШаблон(НСтр("ru = 'Изменен %1 (%2)'"), Формат(ДанныеФайла.ДатаМодификации, "ДЛФ=DT"), Строка(ДанныеФайла.Изменил));
	ТекстЗахвачен = "";
	
	Если ДанныеФайла.Редактируется Тогда
		
		ТекстЗахвачен = СтрШаблон(НСтр("ru = 'Редактируется %1, захвачен %2'"), ДанныеФайла.Редактирует, Формат(ДанныеФайла.ДатаЗахвата, "ДЛФ=DT"));
		
		Если Форма.ТекущийПользователь <> ДанныеФайла.Редактирует Тогда
			ЦветЗахвачен = Форма.ЦветЗахваченДругимПользователем;
		Иначе
			ЦветЗахвачен = Форма.ЦветЗахваченТекущимПользователем;
		КонецЕсли;
		
		ТекстЗахвачен = Новый ФорматированнаяСтрока(ТекстЗахвачен,,ЦветЗахвачен);
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстИзменен, ". ", ТекстЗахвачен);
	
КонецФункции 

Процедура ОтразитьЯзыкВПодменю(Форма, ИмяРеквизитаКодЯзыка, ИмяЭлементаПодменю, ПрефиксКоманды)

	Элементы = Форма.Элементы;
	
	ЗаголовокПодменю = НСтр("ru = 'Язык не выбран'"); 
	
	Для Каждого ЭлементЯзыкРедактирования Из Форма.Элементы[ИмяЭлементаПодменю].ПодчиненныеЭлементы Цикл
		
		КодЯзыка = КодЯзыкаИзИмениКоманды(ЭлементЯзыкРедактирования.ИмяКоманды, ПрефиксКоманды);
		Если КодЯзыка = Форма[ИмяРеквизитаКодЯзыка] Тогда
			ЭлементЯзыкРедактирования.Пометка = Истина;
			ЗаголовокПодменю = КодЯзыка; 
		Иначе
			ЭлементЯзыкРедактирования.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Элементы[ИмяЭлементаПодменю].Заголовок = ЗаголовокПодменю;

КонецПроцедуры 

Функция ЭтоНеИсключаемый(Символ)
	
	Если СтрДлина(Символ) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивСимволовКИсключению = Новый Массив;
	МассивСимволовКИсключению.Добавить(".");
	МассивСимволовКИсключению.Добавить(",");
	МассивСимволовКИсключению.Добавить(" ");
	МассивСимволовКИсключению.Добавить(";");
	МассивСимволовКИсключению.Добавить(":");
	МассивСимволовКИсключению.Добавить(" ");
	МассивСимволовКИсключению.Добавить("]");
	МассивСимволовКИсключению.Добавить("[");
	МассивСимволовКИсключению.Добавить("(");
	МассивСимволовКИсключению.Добавить(")");
	МассивСимволовКИсключению.Добавить("!");
	МассивСимволовКИсключению.Добавить("@");
	МассивСимволовКИсключению.Добавить("#");
	МассивСимволовКИсключению.Добавить("№");
	МассивСимволовКИсключению.Добавить("^");
	МассивСимволовКИсключению.Добавить("*");
	МассивСимволовКИсключению.Добавить("-");
	МассивСимволовКИсключению.Добавить("_");
	МассивСимволовКИсключению.Добавить("+");
	МассивСимволовКИсключению.Добавить("=");
	МассивСимволовКИсключению.Добавить("?");
	МассивСимволовКИсключению.Добавить(">");
	МассивСимволовКИсключению.Добавить("<");
	МассивСимволовКИсключению.Добавить("%");
	МассивСимволовКИсключению.Добавить("$");
	МассивСимволовКИсключению.Добавить("&");
	МассивСимволовКИсключению.Добавить(" ");
	МассивСимволовКИсключению.Добавить("\"); 
	МассивСимволовКИсключению.Добавить("|");
	МассивСимволовКИсключению.Добавить("/");
	МассивСимволовКИсключению.Добавить(Символы.ВК);
	МассивСимволовКИсключению.Добавить(Символы.ВТаб);
	МассивСимволовКИсключению.Добавить(Символы.НПП);
	МассивСимволовКИсключению.Добавить(Символы.ПС);
	МассивСимволовКИсключению.Добавить(Символы.ПФ);
	МассивСимволовКИсключению.Добавить(Символы.Таб);
	
	Если МассивСимволовКИсключению.Найти(Символ) = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет соответствует ли найденный в гиперссылке текст условия поиска
// 
// Параметры:
//  ГдеИщем                   - Строка - текст, в котором выполняется поиска
//  ЧтоИщем                   - Строка - текст, который ищем
//  ПозицияНайденного         - Число - позиция найденного в тексте
//  ВариантПоискаВГиперссылке - Строка - может принимать значения "Игнорировать" или "ТолькоСсылкаЦеликом"
//
// Возвращаемое значение:
//   Булево - Истина, если удовлетворяет условию.
//
Функция ТекстСоответствуетУсловиюПоискаВГиперссылке(ГдеИщем, ЧтоИщем, ПозицияНайденного, ВариантПоискаВГиперссылке)
	
	ПозицияТегаГиперссылки = СтрНайти(ГдеИщем, "<a", НаправлениеПоиска.СКонца, ПозицияНайденного);
	Если ПозицияТегаГиперссылки = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ГдеИщемЗакрывающийТег = Сред(ГдеИщем, ПозицияТегаГиперссылки, ПозицияНайденного - ПозицияТегаГиперссылки);
	НайденнаяПозицияЗакрывающийТег =  СтрНайти(ГдеИщемЗакрывающийТег, ">", НаправлениеПоиска.СНачала, 1);
	Если НайденнаяПозицияЗакрывающийТег <> 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ВариантПоискаВГиперссылке = "Игнорировать" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПозицияКавычкиСсылки = СтрНайти(ГдеИщемЗакрывающийТег, """", НаправлениеПоиска.СНачала, 1);
	ПредшествующийТекстБезКавычки = Прав(ГдеИщемЗакрывающийТег, СтрДлина(ГдеИщемЗакрывающийТег) - ПозицияКавычкиСсылки); 
	
	Если Не ПустаяСтрока(ПредшествующийТекстБезКавычки)
		И ВариантПоискаВГиперссылке = "ТолькоСсылкаЦеликом" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДлинаЧтоИщем = СтрДлина(ЧтоИщем);
	НачальнаяПозиция = ПозицияНайденного + ДлинаЧтоИщем;
	
	ПозицияЗакрывающегоТегаГиперссылки = СтрНайти(ГдеИщем, ">", НаправлениеПоиска.СНачала, НачальнаяПозиция);
	ПоследующийТекстГиперссылки = Сред(ГдеИщем, НачальнаяПозиция, ПозицияЗакрывающегоТегаГиперссылки - НачальнаяПозиция - 1);
	
	Если Не ПустаяСтрока(ПоследующийТекстГиперссылки)
		И ВариантПоискаВГиперссылке = "ТолькоСсылкаЦеликом" Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти