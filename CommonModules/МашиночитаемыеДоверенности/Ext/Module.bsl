#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные к обновлению в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолныеИменаОбъектов = Новый Массив;
	ПолныеИменаРегистров = Новый Массив;
	
	МетаданныеОбъекта = Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	МетаданныеОбъекта = Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);

	МетаданныеОбъекта = Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаРегистров.Добавить(ПолноеИмяРегистра);
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ПолныеИменаОбъектов, ",");
	ПараметрыВыборки.ПолныеИменаРегистров = СтрСоединить(ПолныеИменаРегистров, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка КАК Ссылка,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки КАК ПравилоПроверки
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ПО (ПравилаПроверкиПолномочийПоМЧД.Доверенность = МашиночитаемыеДоверенностиКонтрагентов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиКонтрагентов.Представители КАК МашиночитаемыеДоверенностиКонтрагентовПредставители
	|		ПО МашиночитаемыеДоверенностиКонтрагентов.Ссылка = МашиночитаемыеДоверенностиКонтрагентовПредставители.Ссылка
	|ГДЕ
	|	(МашиночитаемыеДоверенностиКонтрагентов.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МашиночитаемыеДоверенностиКонтрагентов.ПолномочияОграничены
	|				И ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки ЕСТЬ NULL
	|			ИЛИ (МашиночитаемыеДоверенностиКонтрагентовПредставители.Ссылка ЕСТЬ NULL
	|				И НЕ МашиночитаемыеДоверенностиКонтрагентов.УдалитьПредставительИНН = """"
	|				И МашиночитаемыеДоверенностиКонтрагентов.Подписана)
	|			ИЛИ МашиночитаемыеДоверенностиКонтрагентов.ВариантЗаполненияПолномочий = 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.ПустаяСсылка)
	|			ИЛИ МашиночитаемыеДоверенностиКонтрагентов.ВариантЗаполненияПолномочий = 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.Классификатор)
	|			ИЛИ (МашиночитаемыеДоверенностиКонтрагентов.ХешФайла = """" И МашиночитаемыеДоверенностиКонтрагентов.Подписана))
	|	И МашиночитаемыеДоверенностиКонтрагентов.Ссылка > &МЧДКонтрагентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки КАК ПравилоПроверки
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ПО (ПравилаПроверкиПолномочийПоМЧД.Доверенность = МашиночитаемыеДоверенностиОрганизаций.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиОрганизаций.Представители КАК МашиночитаемыеДоверенностиОрганизацийПредставители
	|		ПО МашиночитаемыеДоверенностиОрганизаций.Ссылка = МашиночитаемыеДоверенностиОрганизацийПредставители.Ссылка
	|ГДЕ
	|	(МашиночитаемыеДоверенностиОрганизаций.ДатаСоздания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ МашиночитаемыеДоверенностиОрганизаций.ПолномочияОграничены
	|				И ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки ЕСТЬ NULL
	|			ИЛИ (МашиночитаемыеДоверенностиОрганизацийПредставители.Ссылка ЕСТЬ NULL
	|				И (НЕ МашиночитаемыеДоверенностиОрганизаций.УдалитьПредставительФЛ_ИНН = """"
	|					ИЛИ НЕ МашиночитаемыеДоверенностиОрганизаций.УдалитьПредставительЮЛ_ИНН = """")
	|				И МашиночитаемыеДоверенностиОрганизаций.Подписана)
	|			ИЛИ МашиночитаемыеДоверенностиОрганизаций.ВариантЗаполненияПолномочий = 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.ПустаяСсылка)
	|			ИЛИ МашиночитаемыеДоверенностиОрганизаций.ВариантЗаполненияПолномочий = 
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.Классификатор)
	|			ИЛИ (МашиночитаемыеДоверенностиОрганизаций.ХешФайла = """" И МашиночитаемыеДоверенностиОрганизаций.Подписана))
	|	И МашиночитаемыеДоверенностиОрганизаций.Ссылка > &МЧДОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ОтработаныВсеДанныеМЧДКонтрагентов = Ложь;
	ОтработаныВсеДанныеМЧДОрганизаций = Ложь;
	
	МЧДКонтрагентов = Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка();
	МЧДОрганизаций = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка();
	
	Пока Не ОтработаныВсеДанныеМЧДКонтрагентов Или Не ОтработаныВсеДанныеМЧДОрганизаций Цикл
		
		Запрос.УстановитьПараметр("МЧДКонтрагентов", МЧДКонтрагентов);
		Запрос.УстановитьПараметр("МЧДОрганизаций", МЧДОрганизаций);
		
		ДанныеМЧДКонтрагентов = Запрос.ВыполнитьПакет()[0].Выгрузить();
		ДанныеМЧДОрганизаций = Запрос.ВыполнитьПакет()[1].Выгрузить();
		
		КоличествоСтрокМЧДКонтрагентов = ДанныеМЧДКонтрагентов.Количество();
		КоличествоСтрокМЧДОрганизаций = ДанныеМЧДОрганизаций.Количество();
		
		Если КоличествоСтрокМЧДКонтрагентов < 500 Тогда
			ОтработаныВсеДанныеМЧДКонтрагентов = Истина;
		КонецЕсли;
		Если КоличествоСтрокМЧДОрганизаций < 500 Тогда
			ОтработаныВсеДанныеМЧДОрганизаций = Истина;
		КонецЕсли;
		
		Если КоличествоСтрокМЧДКонтрагентов > 0 Тогда
			МЧДКонтрагентов = ДанныеМЧДКонтрагентов[КоличествоСтрокМЧДКонтрагентов - 1].Ссылка;
		КонецЕсли;
		Если КоличествоСтрокМЧДОрганизаций > 0 Тогда
			МЧДОрганизаций = ДанныеМЧДОрганизаций[КоличествоСтрокМЧДОрганизаций - 1].Ссылка;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМЧДКонтрагентов.ВыгрузитьКолонку("Ссылка"));
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМЧДОрганизаций.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает данные, зарегистрированные в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъектаМЧДКонтрагентов = Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	ПолноеИмяОбъектаМЧДКонтрагентов = МетаданныеОбъектаМЧДКонтрагентов.ПолноеИмя();
	
	МетаданныеОбъектаМЧДОрганизаций = Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций;
	ПолноеИмяОбъектаМЧДОрганизаций = МетаданныеОбъектаМЧДОрганизаций.ПолноеИмя();
	
	ИменаМетаданных = Новый Массив;
	ИменаМетаданных.Добавить(ПолноеИмяОбъектаМЧДКонтрагентов);
	ИменаМетаданных.Добавить(ПолноеИмяОбъектаМЧДОрганизаций);
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, 
		"РегистрСведений.СертификатыУчетныхЗаписейЭДО") Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	НаборСсылок = ВыбранныеДанные.ВыгрузитьКолонку("Ссылка");
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаНаОбъект);
			Удалить = Ложь;
			Записать = Ложь;
			
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДатаСоздания")) Тогда
					
					ОбработатьДанные_УдалитьЗаписиРегистраРезультатыПроверкиМЧДОператором(СсылкаНаОбъект);
					ОбработатьДанные_УдалитьЗаписиРегистраМашиночитаемыеДоверенностиЭД(СсылкаНаОбъект);
					ОбработатьДанные_УдалитьЗаписиРегистраЭлектронныеПодписиПоМЧД(СсылкаНаОбъект);
					ОбработатьДанные_ПроверитьНеобходимостьУдаленияДоверенности(Объект, Удалить);
					
				КонецЕсли;
				
				ОбработатьДанные_ЗаполнитьВариантУказанияПолномочий(Объект, Записать);
				
				ОбработатьДанные_СоздатьПравилоПроверкиПолномочий(СсылкаНаОбъект);
				
				ВозможноВыполнитьОбработкуМЧД = ОбработатьДанные_ВозможноВыполнитьОбработкуМЧД(Объект);
				
				Если Не ЗначениеЗаполнено(Объект.Представители)
					И Не Удалить
					И ВозможноВыполнитьОбработкуМЧД Тогда
					ОбработатьДанные_ЗаполнитьТаблицуПредставителей(Объект, Записать);
				КонецЕсли;
				
				Если Не Удалить И Не ЗначениеЗаполнено(Объект.ХешФайла)
					И ВозможноВыполнитьОбработкуМЧД Тогда
					ОбработатьДанные_ЗаполнитьХешФайла(Объект, Записать);
				КонецЕсли;
				
				Если Не Удалить И ЗначениеЗаполнено(Объект.ХешФайла) 
					И ВозможноВыполнитьОбработкуМЧД Тогда
					ОбработатьДанные_ЗаписатьВЖурналМЧД(Объект);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Удалить Тогда
				ОбновлениеИнформационнойБазы.УдалитьДанные(Объект);
			ИначеЕсли Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать машиночитаемую доверенность ЭДО: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые машиночитаемые доверенности ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция машиночитаемых доверенностей ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ИменаМетаданных);
	
КонецПроцедуры

// Включает использование реестра доверенностей ФНС ЭДО.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
//
Процедура ВключитьИспользованиеРеестраДоверенностейФНСЭДО(Параметры) Экспорт
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
	
	МетаданныеОбъекта = Метаданные.Константы.ИспользоватьРеестрДоверенностейФНСЭДО;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Записать = Ложь;
		
		МенеджерЗначения = Константы.ИспользоватьРеестрДоверенностейФНСЭДО.СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		
		Если Не МенеджерЗначения.Значение Тогда
			МенеджерЗначения.Значение = Истина;
			Записать = Истина;
		КонецЕсли;
		
		Если Записать Тогда
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		Иначе
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(МенеджерЗначения, ПараметрыОтметкиВыполнения);
		КонецЕсли;
		
		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		ТекстСообщения =
			НСтр("ru = 'Не удалось обработать константу ""Использовать реестр доверенностей ФНС ЭДО"" по причине:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, МетаданныеОбъекта, , ТекстСообщения);
		
	КонецПопытки;
		
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Использовать реестр доверенностей ФНС ЭДО"".'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Обработана константа ""Использовать реестр доверенностей ФНС ЭДО"".'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, МетаданныеОбъекта, , ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОчередиЗапросовВРеестрМЧДЭДО;
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьОбменЭД;
	НоваяСтрока.Параметризуется = Истина;
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	НоваяСтрока.ДоступноВМоделиСервиса = Истина;
	НоваяСтрока.ВключатьПриВключенииФункциональнойОпции = Ложь;
	
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ОбработкаОчередиЗапросовВРеестрМЧДЭДО.ИмяМетода);
	
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриПолученииСпискаШаблонов 
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(
		МашиночитаемыеДоверенностиКлиентСервер.ИмяРегламентногоЗаданияОбработкаОчередиЗапросовВРеестрМЧДЭДО());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область События

// Параметры:
//  ВидФормы - Строка
//  Параметры - Структура
//  ВыбраннаяФорма - Строка, ОбъектМетаданныхФорма -
//  ДополнительнаяИнформация - Структура:
//  * ПовторноеИспользование - Булево
//  СтандартнаяОбработка - Булево
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Ключ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "Ключ"); // ОпределяемыйТип.МашиночитаемаяДоверенность
		ВыбраннаяФорма = Неопределено;
		
		Если ЭтоЧерновикМЧД003(Ключ) Тогда
			Если ЭтоПередоверие(Ключ) Тогда
				ВыбраннаяФорма = Метаданные.Справочники.МЧД003.Формы.ЧерновикПередоверияМЧД;
			Иначе
				ВыбраннаяФорма = Метаданные.Справочники.МЧД003.Формы.ЧерновикМЧД;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		МетаданныеМЧД = Метаданные.НайтиПоТипу(ТипЗнч(Ключ)); // ОбъектМетаданныхСправочник
		Если МетаданныеМЧД <> Неопределено И ОбщегоНазначения.ЭтоСправочник(МетаданныеМЧД) Тогда
			ВыбраннаяФорма = МетаданныеМЧД.Формы.Найти("ФормаПросмотра");
			Если ЭтоМЧДКонтрагента(Ключ) Тогда
				ВыбраннаяФорма = МетаданныеМЧД.Формы.Найти("ФормаЭлемента");
			КонецЕсли;
		КонецЕсли;
		Если ВыбраннаяФорма = Неопределено Тогда
			ВыбраннаяФорма = Метаданные.Справочники.МЧД003.Формы.ЧерновикМЧД;
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Или ВидФормы = "ФормаВыбора" Тогда
		ВыбраннаяФорма = Метаданные.РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.Формы.ФормаСписка;
		ТекущаяСтрока = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТекущаяСтрока"); // ОпределяемыйТип.МашиночитаемаяДоверенность
		Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ЗначениеКлюча = Новый Структура("Хеш", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "ХешФайла"));
			Параметры.Вставить("ТекущаяСтрока", РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.СоздатьКлючЗаписи(ЗначениеКлюча));
		КонецЕсли;
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;

КонецПроцедуры

// Параметры:
//  ДанныеВыбора - СписокЗначений Из ОпределяемыйТип.МашиночитаемаяДоверенность
//  Параметры - Структура:
//  * СтрокаПоиска - Строка, Неопределено -
//  * Отбор - Структура
//  * ВыборГруппИЭлементов - ИспользованиеГруппИЭлементов
//  * СпособПоискаСтроки - СпособПоискаСтрокиПриВводеПоСтроке
//  * ПолнотекстовыйПоиск - ПолнотекстовыйПоискПриВводеПоСтроке
//  * РежимПолученияДанныхВыбора - РежимПолученияДанныхВыбораПриВводеПоСтроке
//  СтандартнаяОбработка - Булево
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 20
	|	Доверенность,
	|	Доверенность.Представление КАК ПредставлениеДоверенности,
	|	Номер
	|ИЗ
	|	РегистрСведений.ЖурналМашиночитаемыхДоверенностей
	|ГДЕ
	|	НЕ ПометкаУдаления
	|	И &УсловиеПоиска
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи";
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		ПараметрыПодстановки = Новый Структура;
		ПараметрыПодстановки.Вставить("ЭкранированнаяСтрока", ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(
			Параметры.СтрокаПоиска));
		Если Параметры.СпособПоискаСтроки = СпособПоискаСтрокиПриВводеПоСтроке.Начало Тогда
			СтрокаПоиска = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("[ЭкранированнаяСтрока]%",
				ПараметрыПодстановки);
		Иначе
			СтрокаПоиска = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку("%[ЭкранированнаяСтрока]%",
				ПараметрыПодстановки);
		КонецЕсли;
		Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
		УсловиеПоиска = "Номер ПОДОБНО &СтрокаПоиска СПЕЦСИМВОЛ ""~""";
	Иначе
		УсловиеПоиска = "Истина";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоиска", УсловиеПоиска);
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеВыбора = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(
			Выборка.Доверенность, СтроковыеФункции.ФорматированнаяСтрока(
				НСтр("ru='%1 <span style=""color: НедоступныйДляВыбораЭлементБЭД"">[%2]</span>';"),
			Выборка.ПредставлениеДоверенности, Выборка.Номер));
	КонецЦикла;
КонецПроцедуры

// См. МашиночитаемыеДоверенностиВызовСервера.ДанныеВыбораСубъекта
Функция ДанныеВыбораСубъекта(СтрокаПоиска, ТипыСубъектов) Экспорт
	Лимит = 10;
	ПараметрыПодбора = Новый Структура("СтрокаПоиска, СпособПоискаСтроки", СтрокаПоиска,
		СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть);
	ИтоговыйСписок = Новый СписокЗначений;
	Индекс = 1;
	Для Каждого ЭлементСписка Из ТипыСубъектов Цикл
		ТекущийТип = ЭлементСписка.Значение;
		МетаданныеИсточника = Метаданные.НайтиПоТипу(ТекущийТип);
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника) Тогда
			ИмяСправочника = МетаданныеИсточника.Синоним;
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеИсточника.ПолноеИмя());
			ДанныеВыбора = Менеджер.ПолучитьДанныеВыбора(ПараметрыПодбора);
			Для Каждого ЭлементВыбора Из ДанныеВыбора Цикл
				ЧастиПредставления = Новый Массив(2);
				ЧастиПредставления[0] = ЭлементВыбора.Представление;
				ЧастиПредставления[1] = СтроковыеФункции.ФорматированнаяСтрока(
					" <span style=""color:НедоступныйДляВыбораЭлементБЭД"">[%1]</span>", ИмяСправочника);
				ИтоговыйСписок.Добавить(ЭлементВыбора.Значение, Новый ФорматированнаяСтрока(ЧастиПредставления));
				Если Индекс >= Лимит Тогда
					Возврат ИтоговыйСписок;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйСписок;
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииСписковСОграничениемДоступа
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	Списки.Вставить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ЖурналМашиночитаемыхДоверенностей, Истина);
КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + "
	|Справочник.МашиночитаемыеДоверенностиОрганизаций.Чтение.Организации
	|Справочник.МашиночитаемыеДоверенностиОрганизаций.Изменение.Организации
	|РегистрСведений.ЖурналМашиночитаемыхДоверенностей.Чтение.Организации
	|РегистрСведений.ЖурналМашиночитаемыхДоверенностей.Изменение.Организации
	|";
	
КонецПроцедуры

#КонецОбласти

#Область Интерфейс

// Параметры:
//  ЭлементыВыбораВидаДокумента - Массив Из РасширениеПоляФормыДляПоляВвода
Процедура УстановитьСписокВыбораДокументовФизическихЛиц(ЭлементыВыбораВидаДокумента) Экспорт
	ВидыДокументов = МашиночитаемыеДоверенностиКлиентСервер.ВидыДокументовФизическихЛиц();
	Для Каждого ПолеВвода Из ЭлементыВыбораВидаДокумента Цикл
		ПолеВвода.СписокВыбора.Очистить();
		Для Каждого ВидДок Из ВидыДокументов Цикл
			ПолеВвода.СписокВыбора.Добавить(ВидДок.Ключ, ВидДок.Значение);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Параметры:
//  Субъект - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйДоверитель
//          - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйПредставитель
// 
// Возвращаемое значение:
//  Строка -  Сформировать представление субъекта
Функция ПредставлениеСубъектаДоверенности(Субъект) Экспорт
	
	Журнал = РегистрыСведений.ЖурналМашиночитаемыхДоверенностей;
	ТипыДоверителей = Журнал.ТипыДоверителей();
	ТипыПредставителей = Журнал.ТипыПредставителей();
	
	Если Субъект.Тип = ТипыДоверителей.ЮридическоеЛицо
		Или Субъект.Тип = ТипыПредставителей.ЮридическоеЛицо Тогда
		Возврат ПредставлениеЮридическогоЛица(Субъект.ДанныеЮридическогоЛица);
	ИначеЕсли Субъект.Тип = ТипыДоверителей.ИндивидуальныйПредприниматель 
		Или Субъект.Тип = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
		Возврат ПредставлениеИндивидуальногоПредпринимателя(Субъект.ДанныеИндивидуальногоПредпринимателя);
	ИначеЕсли Субъект.Тип = ТипыДоверителей.ФизическоеЛицо
		Или Субъект.Тип = ТипыПредставителей.ФизическоеЛицо Тогда
		Возврат ПредставлениеФизическогоЛица(Субъект.ДанныеФизическогоЛица);
	ИначеЕсли Субъект.Тип = ТипыДоверителей.ИностраннаяОрганизация Тогда
		Возврат ПредставлениеИностраннойОрганизации(Субъект.ДанныеИностраннойОрганизации);
	ИначеЕсли Субъект.Тип = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
		Возврат ПредставлениеИностраннойОрганизации(Субъект.ДанныеФилиалаИностраннойОрганизации);
	ИначеЕсли Субъект.Тип = ТипыПредставителей.ФилиалЮридическогоЛица Тогда
		Возврат ПредставлениеЮридическогоЛица(Субъект.ДанныеФилиалаЮридическогоЛица);
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Сведения о доверителях и представителях.
// 
// Параметры:
//  Доверенности - Массив из ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.МашиночитаемаяДоверенность
//  * Значение - см. НовыеПредставленияДоверителейПредставителей
Функция ПредставленияДоверителейИПредставителей(Доверенности) Экспорт
	Результат = Новый Соответствие;
	ДоверителиПредставители = РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.ДоверителиПредставителиДоверенностей(Доверенности);
	
	Для Каждого КлючЗначение Из ДоверителиПредставители Цикл
		Доверенность = КлючЗначение.Ключ;
		ДоверителиПредставителиДоверенности = КлючЗначение.Значение;
		
		ПредставленияДоверителейПредставителей = НовыеПредставленияДоверителейПредставителей();
		
		ПредставленияДоверителейПредставителей.Доверители = ПредставленияСубьектовДовернности(
			ДоверителиПредставителиДоверенности.Доверители);
			
		ПредставленияДоверителейПредставителей.Представители = ПредставленияСубьектовДовернности(
			ДоверителиПредставителиДоверенности.Представители);

		Результат.Вставить(Доверенность, ПредставленияДоверителейПредставителей);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
Функция СтатусыДействительнойДоверенности() Экспорт
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено);
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	Статусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации);
	
	Возврат Статусы;
	
КонецФункции

// Это передоверие МЧД003.
// 
// Параметры:
//  МЧД - ОбъектXDTO, ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоПередоверие(МЧД) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(МЧД) = Тип("ОбъектXDTO") Тогда
		Результат = (РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(МЧД, "Документ.Передов") <> Неопределено);
	Иначе
		Результат = ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МЧД, "НомерРодительскойДоверенности"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает ИНН и КПП доверителя электронной подписи.
// 
// Параметры:
//  ХешПодписи - Строка
//  ПодписанныйОбъект - СправочникСсылка.СообщениеОбменСБанкамиПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Структура:
//  * ИНН - Строка
//  * КПП - Строка
//  
Функция ИННКППДоверителяЭлектроннойПодписиПоМЧД(ХешПодписи, ПодписанныйОбъект) Экспорт
	Результат = Новый Структура("ИНН, КПП", "", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.Доверенность КАК МЧД
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.Доверенность.НомерДоверенности > """"
		|	И ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И ЭлектронныеПодписиПоМЧД.ХешПодписи = &ХешПодписи";
	
	Запрос.УстановитьПараметр("ХешПодписи", ХешПодписи);
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СправочникМЧД = СправочникМЧД(Выборка.МЧД);
		СведенияМЧД = СправочникМЧД.СведенияМЧД(Выборка.МЧД);
		Результат.ИНН = СведенияМЧД.ИННДоверителя;
		Результат.КПП = СведенияМЧД.КППДоверителя;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Компонует параметры для отбора сертификата подписываемым доверителем
// 
// Параметры:
//  ИННОрганизации - Строка
//  ОГРНОрганизации - Строка
//  СНИЛСДоверителя - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ИННОрганизации - Строка
// * ОГРНОрганизации - Строка
// * СНИЛСДоверителя - Строка
//
Функция ПараметрыОтбораСертификатаДляПодписанияМЧД(ИННОрганизации, ОГРНОрганизации, СНИЛСДоверителя) Экспорт
	
	Структура = Новый Структура();
	Структура.Вставить("ИННОрганизации", ИННОрганизации);
	Структура.Вставить("ОГРНОрганизации", ОГРНОрганизации);
	Структура.Вставить("СНИЛСДоверителя", СНИЛСДоверителя);
	
	Возврат Структура;
	
КонецФункции

// Новая ошибка проверки полномочий.
// 
// Возвращаемое значение:
//  Структура - Новая ошибка проверки полномочий:
// * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//                - СправочникСсылка.МЧД003
// * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 						 - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * ТекстОшибки - Строка
Функция НоваяОшибкаПроверкиПолномочийПриПодписании() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Доверенность", Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка());
	Результат.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументИсходящийЭДО.ПустаяСсылка());
	Результат.Вставить("ТекстОшибки", "");
	Возврат Результат;
	
КонецФункции

// Новая ошибка проверки полномочий.
// 
// Возвращаемое значение:
//  Структура - Новая ошибка проверки полномочий:
// * Доверенность - Строка
// * НомерДоверенности - Строка
// * ТекстОшибки - Строка
Функция НоваяОшибкаПроверкиПолномочий() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Доверенность", "");
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ТекстОшибки", "");
	Возврат Результат;
	
КонецФункции

// Возвращает результат проверки на необходимость наличия доверенности на подпись.
//
// Параметры:
//  ИННДоверителя - Строка
//  СвойстваСубъектаСертификата - См. КриптографияБЭД.СвойстваСубъектаСертификата
//  СвойстваИздателяСертификата - См. КриптографияБЭД.СвойстваИздателяСертификата
//
// Возвращаемое значение:
//  Булево - Истина, если для подписи требуется МЧД
//
Функция ТребуетсяМашиночитаемаяДоверенность(ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата) Экспорт
	
	ТребуетсяДоверенность = Ложь;

	ВидСертификата = КриптографияБЭД.ВидСертификатаПоДаннымСвойствСубъектаИИздателя(СвойстваСубъектаСертификата, 
		СвойстваИздателяСертификата);
	ВидыСертификатов = КриптографияБЭДКлиентСервер.ВидыСертификатовЭлектроннойПодписи();
	ДоверительЮЛ = СтрДлина(ИННДоверителя) = 10;
	ДоверительСовпадаетСПодписантом = (СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ИННДоверителя, 12) = 
		СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СвойстваСубъектаСертификата.ИНН, 12));
		
	Если ВидСертификата = ВидыСертификатов.СертификатДолжностногоЛицаГосОрганаУЦ
		Или ВидСертификата = ВидыСертификатов.СертификатЮЛ Тогда
		ТребуетсяДоверенность = Ложь;
	ИначеЕсли ВидСертификата = ВидыСертификатов.СертификатИП Тогда
		ТребуетсяДоверенность = Не ДоверительСовпадаетСПодписантом; 
	ИначеЕсли ВидСертификата = ВидыСертификатов.СертификатФЛ Тогда
		ТребуетсяДоверенность = ДоверительЮЛ Или Не ДоверительСовпадаетСПодписантом;
	КонецЕсли;
	
	Возврат ТребуетсяДоверенность;
	
КонецФункции

// Находит подписи с непроверенными полномочиями МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 
// Возвращаемое значение:
//  Массив из Структура:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - Строка
//  * ДоверенностьНайдена - Булево
//  
Функция ПодписиСОшибкамиМЧД(ПодписанныйОбъект) Экспорт
	
	Сведения = ЭлектронныеДокументыЭДО.СведенияОПодписанномОбъекте(ПодписанныйОбъект);
	ЭлектронныйДокумент = Сведения.СвойстваДокумента.Ссылка;
	КоллекцияПодписей = ЭлектронныеДокументыЭДО.УстановленныеПодписи(Сведения.СвойстваСообщения.Ссылка);
	ВсегоПодписей = КоллекцияПодписей.Количество();
	Организация = Сведения.СвойстваДокумента.Организация;
	ПодписиОрганизации = Новый Массив();
	
	Для Каждого СвойстваПодписи Из КоллекцияПодписей Цикл
		
		Доверитель = ЭлектронныеДокументыЭДО.ДоверительИНаправлениеПодписи(
			Сведения, СвойстваПодписи, ВсегоПодписей).Доверитель;
		
		Если Доверитель = Организация Тогда
			ПодписиОрганизации.Добавить(СвойстваПодписи.ХешПодписи);
		КонецЕсли;
		
	КонецЦикла;
	
	Подписи = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.ПротоколПроверки КАК ПротоколПроверки,
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи КАК ХешПодписи,
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписиПоМЧД.ПодписьВерна КАК ПодписьВерна,
		|	ЭлектронныеПодписиПоМЧД.ПроверкаВыполнена КАК ПроверкаВыполнена,
		|	ЭлектронныеПодписиПоМЧД.Доверенность КАК Доверенность
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И НЕ ЭлектронныеПодписиПоМЧД.ХешПодписи В (&ПодписиОрганизации)";
	
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	Запрос.УстановитьПараметр("ПодписиОрганизации", ПодписиОрганизации);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПодтверждениеРучнойПроверкиМЧДВыполнено = 
		НастройкаПодтверждениеРучнойПроверкиМЧДВыполнена(ЭлектронныйДокумент);
		
	Если ПодтверждениеРучнойПроверкиМЧДВыполнено Тогда
		ЗаписатьРезультатыРучнойПроверкиПодписейПоДокументу(ЭлектронныйДокумент);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		ДоверенностьНайдена = ЗначениеЗаполнено(Выборка.Доверенность);
		
		ДанныеПодписи = Новый Структура();
		ДанныеПодписи.Вставить("ПодписанныйОбъект", Выборка.ПодписанныйОбъект);
		ДанныеПодписи.Вставить("ХешПодписи", Выборка.ХешПодписи);
		ДанныеПодписи.Вставить("ДоверенностьНайдена", ДоверенностьНайдена);
		ДанныеПодписи.Вставить("ОшибкаПроверкиПолномочий", Ложь);
		
		ПротоколПроверкиJSON = Выборка.ПротоколПроверки.Получить();
		Если ПротоколПроверкиJSON <> Неопределено Тогда
			ПротоколПроверки = ПрочитатьПротоколПроверкиJSON(ПротоколПроверкиJSON);
		Иначе
			ПротоколПроверки = Неопределено;
		КонецЕсли;
		
		ЕстьПротоколПроверки = ПротоколПроверки <> Неопределено;
		
		РезультатПроверкиМЧД = НовыйРезультатПроверкиПодписи();
		ЗаполнитьЗначенияСвойств(РезультатПроверкиМЧД, Выборка, , "ПротоколПроверки");
		РезультатПроверкиМЧД.ПротоколПроверки = ПротоколПроверки;
		
		ПроверкаДоверенностиВыполненаВручную = 
			МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(РезультатПроверкиМЧД);
		
		Если Не ДоверенностьНайдена Тогда
			
			Если ПодтверждениеРучнойПроверкиМЧДВыполнено Или ПроверкаДоверенностиВыполненаВручную Тогда
				Продолжить;
			КонецЕсли;
			Подписи.Добавить(ДанныеПодписи);

		ИначеЕсли ЕстьПротоколПроверки Тогда

			Если Не МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(ПротоколПроверки.ПроверкаМЧД) Тогда
				
				Если Не ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий.Успех Тогда
					ДанныеПодписи.ОшибкаПроверкиПолномочий = Истина;
					Подписи.Добавить(ДанныеПодписи);
					Продолжить;
				КонецЕсли;
				
				Если ПодтверждениеРучнойПроверкиМЧДВыполнено Или ПроверкаДоверенностиВыполненаВручную Тогда
					Продолжить;
				КонецЕсли;
				Подписи.Добавить(ДанныеПодписи);
				
			КонецЕсли;
		Иначе
			
			Если ПодтверждениеРучнойПроверкиМЧДВыполнено Или ПроверкаДоверенностиВыполненаВручную Тогда
				Продолжить;
			КонецЕсли;
			Подписи.Добавить(ДанныеПодписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Подписи;
	
КонецФункции

// Сохраняет в общем хранилище настроек параметры ручной проверки подписи по МЧД.
// 
// Параметры:
//  Настройки - см. МашиночитаемыеДоверенностиКлиент.НовыеНастройкиРучнойПроверкиПодписиПоМЧД
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//
Процедура СохранитьНастройкиРучнойПроверкиПодписиПоМЧД(Настройки, ЭлектронныйДокумент) Экспорт
	
	ИдентификаторыУчастниковЭДО = ЭлектронныеДокументыЭДО.ИдентификаторыУчастниковЭДО(ЭлектронныйДокумент);
				
	ПредставлениеКлючаОбъекта = 
		СтрШаблон("%1_%2", 
			ИдентификаторыУчастниковЭДО.ИдентификаторОтправителя, 
			ИдентификаторыУчастниковЭДО.ИдентификаторПолучателя);
	
	КлючОбъекта = ПредставлениеКлючаОбъекта;
	КлючНастроек = "ПодтверждениеРучнойПроверкиМЧД";
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Настройки);
	
	Если Настройки.ПроверкаВыполнена Тогда
		ЗаписатьРезультатыРучнойПроверкиПодписейПоДокументу(ЭлектронныйДокумент);
	КонецЕсли;
		
КонецПроцедуры

// Проверяет является ли ссылка доверенностью контрагента.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  	- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
// 	Булево
//  
Функция ЭтоМЧДКонтрагента(МЧД) Экспорт
	Возврат ТипЗнч(МЧД) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов");
КонецФункции

// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоМЧД003(Доверенность) Экспорт
	Возврат ТипЗнч(Доверенность) = Тип("СправочникСсылка.МЧД003")
		Или ТипЗнч(Доверенность) = Тип("СправочникОбъект.МЧД003");
КонецФункции

// Возвращает идентификатор пространства имен пилотного формата МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ПилотныйФорматМЧД() Экспорт
	Возврат "ON_DOVBB_1_928_00_01_01";
КонецФункции

// Возвращает идентификатор пространства имен утвержденного в 2022г. формата МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_2022() Экспорт
	Возврат "ON_DOVBB_1_928_00_01_01_01";
КонецФункции

// Возвращает идентификатор пространства имен утвержденного в 2022г., формата МЧД версии 002
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_2022_Версия_002() Экспорт
	Возврат "ON_DOVBB_1_928_00_01_02_01";
КонецФункции

// Возвращает идентификатор утвержденного в 2023г. формата МЧД версии 003
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_003() Экспорт
	Возврат "ON_EMCHD_1_928_00_01_01_01";
КонецФункции

// Возвращает менеджер справочника МЧД
// 
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
//      - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//      - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  - СправочникМенеджер.МЧД003
//  - СправочникМенеджер.МашиночитаемыеДоверенностиКонтрагентов
//  - СправочникМенеджер.МашиночитаемыеДоверенностиОрганизаций
Функция СправочникМЧД(МЧД) Экспорт
	Возврат Справочники[МЧД.Метаданные().Имя];
КонецФункции

#Область ПолучениеСтатусаВРеестреФНС

// Получает статус МЧД из реестра ФНС.
// 
// Параметры:
//  ДанныеДоверенности - См. МашиночитаемыеДоверенностиКлиентСервер.ДанныеДляПроверкиВРеестреФНС
// 
// Возвращаемое значение:
// - Неопределено - если в данных доверенности указан пустой статус в реестре ФНС
// - См. МашиночитаемыеДоверенностиКлиентСервер.РезультатПроверкиВРеестреФНС
//
Функция ОбновитьСтатусМЧДИзРеестраФНС(ДанныеДоверенности) Экспорт

	Если ДанныеДоверенности.СтатусВРеестреФНС = ПредопределенноеЗначение(
		"Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка") Тогда
		Возврат Неопределено;
	КонецЕсли;

	ТокенДоступа = "";
	Результат = МашиночитаемыеДоверенностиКлиентСервер.РезультатПроверкиВРеестреФНС();

	Если ДанныеДоверенности.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено Тогда

		СведенияСтатусаТранзакции = ПолучитьСтатусТранзакцииМЧД(
			ДанныеДоверенности.ИдентификаторТранзакции, ТокенДоступа, ДанныеДоверенности.НомерДоверенности);

		Если СведенияСтатусаТранзакции.СтатусТранзакции = "SUCCESS" Тогда

			Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано;
			Результат.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = "FAILURE" Тогда

			Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации;
			Результат.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
			
		ИначеЕсли СведенияСтатусаТранзакции.СтатусТранзакции = "404" Или СведенияСтатусаТранзакции.СтатусТранзакции
			= "500" Тогда
			Результат.СтраницаНеНайдена = Истина;
		КонецЕсли;

	КонецЕсли;

	Если (ДанныеДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено
		И ДанныеДоверенности.СтатусВРеестреФНС
		<> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации) Или Результат.СтраницаНеНайдена Тогда

		СведенияСтатусаДоверенности = ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(
			ДанныеДоверенности.НомерДоверенности, ТокенДоступа);
		
		ОписаниеСтатусаИзРеестра = СтатусДоверенности(СведенияСтатусаДоверенности, 
			ДанныеДоверенности.СтатусВРеестреФНС, 
			ДанныеДоверенности.ДатаОтзыва);
		
		Если ЗначениеЗаполнено(ОписаниеСтатусаИзРеестра.СтатусВРеестреФНС) Тогда
			Результат.СостояниеИзменено = Истина;
			Результат.СтатусВРеестреФНС = ОписаниеСтатусаИзРеестра.СтатусВРеестреФНС;
			
			Если ЗначениеЗаполнено(ОписаниеСтатусаИзРеестра.ДатаОтзыва) Тогда
				Результат.ДатаОтзыва = ОписаниеСтатусаИзРеестра.ДатаОтзыва;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияСтатусаДоверенности.ДатаОбновленияСтатуса) Тогда
			Результат.ДатаОбновленияСтатуса = ОписаниеСтатусаИзРеестра.ДатаПолученияСтатуса;
		КонецЕсли;
		
	КонецЕсли;

	Результат.ДатаПроверки = ТекущаяДатаСеанса();

	Возврат Результат;

КонецФункции

#КонецОбласти

// Возвращает дату отзыва доверенности по Номеру доверенности и ИНН доверителя.
// 
// Параметры:
//  НомерДоверенности - Строка
//  ДоверительИНН - Строка
//  ТокенДоступа - Строка - если не заполнен, то произойдет получение при обращении к серверу МЧД
// 
// Возвращаемое значение:
//  Дата
Функция ДатаОтзываДоверенности(НомерДоверенности, ДоверительИНН, ТокенДоступа = "") Экспорт
	
	СведенияОДоверенности = МашиночитаемыеДоверенностиПовтИсп.ПолучитьСведенияДоверенностиНаСервереМЧД(
		НомерДоверенности, ДоверительИНН, ТокенДоступа);
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	Если Не СведенияОДоверенности.Ошибка И ТипЗнч(СведенияОДоверенности.ПолныеДанные) = Тип("Структура") Тогда
		ДанныеДляЗагрузки.ДанныеДоверенности = СведенияОДоверенности.ПолныеДанные.ДанныеВыгрузки;
		ДанныеДляЗагрузки.ДанныеПодписи = СведенияОДоверенности.ПолныеДанные.ДанныеПодписи;
		ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = СведенияОДоверенности.ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену;
	Иначе
		ВызватьИсключение СведенияОДоверенности.ТекстОшибки;
	КонецЕсли;

	Возврат ДатаОтзываДоверенностиПоДаннымДляЗагрузкиМЧД(ДанныеДляЗагрузки);

КонецФункции

// Определяет пространство имен XDTO объекта МЧД по его содержимому.
// 
// Параметры:
//  ДанныеXDTO - ОбъектXDTO
// 
// Возвращаемое значение:
//  Строка
Функция ВерсияФорматаОбъектаМЧД(ДанныеXDTO) Экспорт
	
	ЭтоФормализованныеДоверенностиB2B = ДанныеXDTO.Свойства().Получить("ИдФайл") <> Неопределено
		И ФорматыЭДО_ФНС.ЭтоПространствоИменМЧД(ДанныеXDTO.ИдФайл);
	
	ЭтоДоверенностиB2B = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Документ.СвДов") <> Неопределено
		И РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Документ.СвПолн") <> Неопределено;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ВерсФорм") = "EMCHD_1"
		И ЭтоФормализованныеДоверенностиB2B Тогда
		Возврат МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003();
	КонецЕсли;
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ВерсФорм") = "002"
		И ЭтоФормализованныеДоверенностиB2B Тогда
		Возврат ФорматМЧД_2022_Версия_002();
	КонецЕсли;
	
	Если ЭтоДоверенностиB2B Тогда
		Возврат ФорматМЧД_2022();
	КонецЕсли;
	
	Если ЭтоФормализованныеДоверенностиB2B Тогда
		Возврат ПилотныйФорматМЧД();
	ИначеЕсли ДанныеXDTO.Свойства().Получить("ИдФайл") <> Неопределено
		И СтрНайти(ДанныеXDTO.ИдФайл, ФорматыЭДО_ФНС.ПространствоИмен_МЧД_b2g()) > 0 Тогда
		Возврат ФорматМЧД_b2g();
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Проверяет, действительна ли доверенность.
// 
// Параметры:
//  СвойстваДоверенности - см. НовыеСвойстваДоверенности
//  ДатаПроверки - Дата - дата, на которую выполняется проверка
// 
// Возвращаемое значение:
//  Булево
Функция ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ДатаПроверки) Экспорт
	
	ДействительнаПоСроку = ДатаПроверки > СвойстваДоверенности.ДатаВыдачи
		И ДатаПроверки < КонецДня(СвойстваДоверенности.ДатаОкончания);
	Отозвана = СвойстваДоверенности.Отозвана И ДатаПроверки >= СвойстваДоверенности.ДатаОтзыва;
	ДействительнаПоСтатусу = СтатусыДействительнойДоверенности().Найти(СвойстваДоверенности.СтатусВРеестреФНС) <> Неопределено;
	
	Возврат ДействительнаПоСроку И СвойстваДоверенности.Верна И Не Отозвана И ДействительнаПоСтатусу;
	
КонецФункции

// Получить свойства доверенности по номеру.
// 
// Параметры:
//  НомерДоверенности - Строка
// 
// Возвращаемое значение:
//  см. НовыеСвойстваДоверенности
//
Функция СвойстваДоверенностиПоНомеру(НомерДоверенности) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МЧД003.ДатаВыдачи КАК ДатаВыдачи,
		|	МЧД003.СрокДействия КАК ДатаОкончания,
		|	МЧД003.ПолномочияОграничены КАК ПолномочияОграничены,
		|	МЧД003.ДатаПрекращения КАК ДатаОтзыва,
		|	МЧД003.Верна КАК Верна,
		|	МЧД003.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МЧД003.ДатаПрекращения > ДАТАВРЕМЯ(1, 1, 1) КАК Отозвана,
		|	МЧД003.ВариантЗаполненияПолномочий КАК ВариантЗаполненияПолномочий,
		|	МЧД003.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МЧД003 КАК МЧД003
		|ГДЕ
		|	МЧД003.НомерДоверенности = &НомерДоверенности
		|	И МЧД003.Подписана
		|	И НЕ МЧД003.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаВыдачи,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОкончания,
		|	МашиночитаемыеДоверенностиКонтрагентов.ПолномочияОграничены,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОтзыва,
		|	МашиночитаемыеДоверенностиКонтрагентов.Верна,
		|	МашиночитаемыеДоверенностиКонтрагентов.СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиКонтрагентов.Отозвана,
		|	МашиночитаемыеДоверенностиКонтрагентов.ВариантЗаполненияПолномочий,
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|ГДЕ
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности = &НомерДоверенности
		|	И МашиночитаемыеДоверенностиКонтрагентов.Подписана
		|	И НЕ МашиночитаемыеДоверенностиКонтрагентов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("НомерДоверенности", НомерДоверенности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СвойстваМЧД = НовыеСвойстваДоверенности();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СвойстваМЧД, ВыборкаДетальныеЗаписи);
	КонецЕсли; 

	Возврат СвойстваМЧД;
	
КонецФункции

// Возвращает снилс доверителей по переданному массиву ссылок МЧД организаций
// 
// Параметры:
//  МассивМЧД - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//      * Ключ     - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      * Значение - Строка - СНИЛС подписанта (только цифры)
//  
Функция ДанныеСнилсПодписантов(МассивМЧД) Экспорт

	Результат = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Ссылка,
	|	ЛицоБезДовФЛ_СНИЛС КАК СНИЛС,
	|	Неопределено КАК Файл
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций
	|ГДЕ
	|	Ссылка В (&Доверенности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка,
	|	"""",
	|	ФайлМЧД
	|ИЗ
	|	Справочник.МЧД003
	|ГДЕ
	|	Ссылка В (&Доверенности)";
	Запрос.УстановитьПараметр("Доверенности", МассивМЧД);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.СНИЛС) Тогда
			Результат.Вставить(Выборка.Ссылка, УбратьИзСтрокиВсеНеЦифры(Выборка.СНИЛС));
		ИначеЕсли Выборка.Файл <> Неопределено Тогда
			
			ДанныеМЧД = Выборка.Файл.Получить();
			РезультатЧтения = ОбъектXDTOМЧД(ДанныеМЧД);
			
			Если ЗначениеЗаполнено(РезультатЧтения.ТекстОшибки) Тогда
				Продолжить;
			КонецЕсли;
			
			СНИЛС = СНИЛСФизическогоЛицаДоверителя(РезультатЧтения.ОбъектМЧД);
			Результат.Вставить(Выборка.Ссылка, УбратьИзСтрокиВсеНеЦифры(СНИЛС));
				
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

#Область ОтражениеВУчете

// Читает данные файла ЭД и формирует дерево ЭД
// 
// Параметры:
//  ДанныеФайлаЭД - ОбъектXDTO
//  НовыйЭД - Структура
//  
Процедура ПрочитатьМЧД(ДанныеФайлаЭД, НовыйЭД) Экспорт

	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.Довер.СвДов") <> Неопределено Тогда
		СведенияДоверенности = ДанныеФайлаЭД.Документ.Довер.СвДов;
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеФайлаЭД, "Документ.Передов.СвДовПер") <> Неопределено Тогда
		СведенияДоверенности = ДанныеФайлаЭД.Документ.Передов.СвДовПер;
	Иначе
		СведенияДоверенности = ДанныеФайлаЭД.Документ.СвДов;
	КонецЕсли;

	НовыйЭД.ВидЭД = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность;
	НовыйЭД.ИД = СведенияДоверенности.НомДовер;
	НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭДО.Входящий;

	ДеревоДляСовместимостиСБЭД = Новый ДеревоЗначений;
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("ПолныйПуть", Новый ОписаниеТипов("Строка"));
	ДеревоДляСовместимостиСБЭД.Колонки.Добавить("Значение", Новый ОписаниеТипов);

	СтрокаЭДОбъектXDTO = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДОбъектXDTO.ПолныйПуть = "ОбъектXDTO";
	СтрокаЭДОбъектXDTO.Значение = ДанныеФайлаЭД;

	УзелСведений = СведенияДоверенности;

	СтрокаЭДДата = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДДата.ПолныйПуть = "Дата";
	ДатаВыдДовер = УзелСведений.Свойства().Получить("ДатаВыдДовер");
	Если ДатаВыдДовер <> Неопределено Тогда
		Дата = УзелСведений.ДатаВыдДовер;
	Иначе
		Дата = УзелСведений.ДатаНач;
	КонецЕсли;
	СтрокаЭДДата.Значение = СтроковыеФункцииКлиентСервер.СтрокаВДату(Дата);

	СтрокаЭДДНомер = ДеревоДляСовместимостиСБЭД.Строки.Добавить();
	СтрокаЭДДНомер.ПолныйПуть = "Номер";
	СтрокаЭДДНомер.Значение = УзелСведений.НомДовер;

	НовыйЭД.ЗначениеРеквизита = ДеревоДляСовместимостиСБЭД;

КонецПроцедуры

// Заполняет документ учета для типа ЭД - МашиночитаемаяДоверенность.
//
// Параметры:
//  ДанныеЭлектронногоДокумента - см. ОтражениеВУчетеЭДО.НовыеДанныеЭлектронногоДокументаДляОтраженияВУчете
//  ДокументыУчета 	- Неопределено,
//  				- Массив из ОпределяемыйТип.МашиночитаемаяДоверенность
//  СпособОбработки - Строка
//  ОписаниеОшибки  - Строка - описание ошибки создания МЧД. Может быть выведена пользователю.
//  
Процедура ОтразитьВУчете(ДанныеЭлектронногоДокумента, ДокументыУчета, СпособОбработки = "", ОписаниеОшибки = "") Экспорт

	ВерсияФорматаМЧД = ВерсияФорматаПоДаннымЭлектронногоДокумента(ДанныеЭлектронногоДокумента.ЭлектронныйДокумент);
	Если ВерсияФорматаМЧД = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
		СправочникМЧД = Справочники.МЧД003;
	ИначеЕсли СпособОбработки = "МашиночитаемыеДоверенностиОрганизаций" Тогда
		СправочникМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций;
	Иначе
		СправочникМЧД = Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	КонецЕсли;

	ДанныеФайла = ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла;
	Если ДокументыУчета <> Неопределено И ДокументыУчета.Количество() > 0 Тогда
		Для Каждого МЧД Из ДокументыУчета Цикл
			РезультатЗагрузки = СправочникМЧД.ЗагрузитьМЧДИзФайла(ДанныеФайла.ДвоичныеДанные, МЧД);
			Если НЕ ЗначениеЗаполнено(РезультатЗагрузки.МЧД) Тогда
				ОписаниеОшибки = НСтр("ru = 'Не удалось записать машиночитаемую доверенность'");
				ВызватьИсключение(ОписаниеОшибки);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатЗагрузки = СправочникМЧД.ЗагрузитьМЧДИзФайла(ДанныеФайла.ДвоичныеДанные);
		МЧД = РезультатЗагрузки.МЧД;
		Если ЗначениеЗаполнено(МЧД) Тогда
			ДокументыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МЧД);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Формирует список операций ЭД типа МашиночитаемаяДоверенность.
// 
// Возвращаемое значение:
//  СписокЗначений из Строка - Список операций типа документа
//  
Функция СписокОперацийТипаДокумента() Экспорт

	Операции = Новый СписокЗначений;
	Способы = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете();

	Для Каждого Способ Из Способы Цикл
		Операции.Добавить(Способ.Ключ, Способ.Значение);
	КонецЦикла;

	Возврат Операции;

КонецФункции

// См. ОбменСКонтрагентамиПереопределяемый.ПриОпределенииИспользуемыхТиповЭлектронныхДокументов
Процедура ПриОпределенииИспользуемыхТиповЭлектронныхДокументов(ИспользуемыеТипы) Экспорт

	ТипыДокументов = ОбменСКонтрагентами.ТипыДокументов();
	ОбменСКонтрагентами.ДобавитьИспользуемыйТипДокумента(ИспользуемыеТипы, ТипыДокументов.МашиночитаемаяДоверенность);

КонецПроцедуры

// См. ОтражениеВУчетеЭДО.СписокОперацийТипаДокумента
Процедура СпособыОтраженияВУчетеТипаЭлектронногоДокумента(ТипДокумента, СпособыОтраженияВУчете) Экспорт

	Способы = МашиночитаемыеДоверенностиКлиентСервер.СпособыОтраженияВУчете();

	Если ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		Для Каждого Способ Из Способы Цикл
			СпособыОтраженияВУчете.Добавить(
				Способ.Ключ,
				Способ.Значение,
				Способ.Ключ = "МашиночитаемыеДоверенностиКонтрагентов");
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Удаляет варианты отражения в учете из списка в зависимости от версии формата МЧД.
//
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                      - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СписокВариантов - СписокЗначений из Строка - Список вариантов отражения в учете МЧД
Процедура ОграничитьВариантыОтраженияВУчетеПоДаннымЭлектронногоДокумента(ЭлектронныйДокумент, СписокВариантов) Экспорт
	
	ВерсияФорматаМЧД = ВерсияФорматаПоДаннымЭлектронногоДокумента(ЭлектронныйДокумент);
	Если ВерсияФорматаМЧД = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
		Индекс = 0;
		Пока Индекс < СписокВариантов.Количество() Цикл
			Если СписокВариантов[Индекс].Значение = "МЧД003" Тогда
				Индекс = Индекс + 1;
			Иначе
				СписокВариантов.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
	Иначе
		УдаляемыйТипДокумента = СписокВариантов.НайтиПоЗначению("МЧД003");
		Если УдаляемыйТипДокумента <> Неопределено Тогда
			СписокВариантов.Удалить(УдаляемыйТипДокумента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Проверяет заполнение обязательных реквизитов в файле машиночитаемой доверенности.
//
// Параметры:
//  ДанныеДоверенности - См. МашиночитаемыеДоверенности.НовыеДанныеМЧД
//  ЭтоДоверенностьОрганизации - Булево
//
// Возвращаемое значение:
//  Структура - Результат проверки:
// * ЕстьОшибки - Булево
// * ТекстОшибки - Строка
//
Функция ПроверитьКлючевыеРеквизитыДанныхФайлаДоверенности(ДанныеДоверенности, ЭтоДоверенностьОрганизации = Ложь) Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ЕстьОшибки", Ложь);
	РезультатПроверки.Вставить("ТекстОшибки", "");
	
	Если ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		КлючевыеРеквизиты = "ДоверительФЛ_ИНН, ДоверительФЛ_СНИЛС";
	Иначе
		КлючевыеРеквизиты = "ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП";
	КонецЕсли;
	
	КлючевыеРеквизиты = КлючевыеРеквизиты + ",НомерДоверенности, ДатаВыдачи, ДатаОкончания";
	Если ЭтоДоверенностьОрганизации Тогда
		КлючевыеРеквизиты = КлючевыеРеквизиты + ", Представители";
	КонецЕсли;
	
	КлючевыеРеквизиты = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючевыеРеквизиты, , , Истина);
	
	ТекстОшибки = "";
	
	Для Каждого КлючевойРеквизит Из КлючевыеРеквизиты Цикл
		Если ДанныеДоверенности.Свойство(КлючевойРеквизит)
			И ЗначениеЗаполнено(ДанныеДоверенности[КлючевойРеквизит]) Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнены реквизиты справочника'") + ":  " + КлючевойРеквизит;
		Иначе
			ТекстОшибки = ТекстОшибки + ", " + КлючевойРеквизит;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки.ТекстОшибки = ТекстОшибки;
	РезультатПроверки.ЕстьОшибки = ЗначениеЗаполнено(ТекстОшибки);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Структура адреса сервера МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * АдресСервера - Строка
//  * РесурсКорняAPI - Строка
//  * ИспользоватьРасширенияAPI - Булево
//  
Функция СтруктураАдресаСервераМЧД() Экспорт
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресСервера",				"https://1cpoagate.1c.ru/");
	СтруктураАдреса.Вставить("РесурсКорняAPI",				"/applications/MChD/api/clientpoa");
	СтруктураАдреса.Вставить("ИспользоватьРасширенияAPI",	Истина);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Формирует файл заявления на отмену МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ПричинаОтмены - Строка - Причина отмены доверенности
// 
// Возвращаемое значение:
//  Структура - Подготовленный файл:
//  * ИмяФайла - Строка - Имя файла
//  * Содержимое - Строка - Содержимое файла
//
Функция ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, ПричинаОтмены) Экспорт
	
	МЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций.НайтиПоРеквизиту("НомерДоверенности", НомерДоверенности);
	
	Если Не ЗначениеЗаполнено(МЧД) Тогда
		МЧД = Справочники.МЧД003.НайтиПоРеквизиту("НомерДоверенности", НомерДоверенности);
	КонецЕсли;
	
	ДвоичныеДанныеМЧД = ПолучитьДвоичныеДанныеМЧД(МЧД);
	
	ДанныеДоверенности = ДанныеИзФайлаОбмена(ДвоичныеДанныеМЧД).ДанныеДоверенности;
	
	Если ДанныеДоверенности = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось распознать двоичные данные доверенности'");
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("windows-1251");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Файл");
	ЗаписьXML.ЗаписатьАтрибут("ВерсФорм", "001");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");

	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаяв");
	ЗаписьXML.ЗаписатьАтрибут("НомДовер", НомерДоверенности);
	ЗаписьXML.ЗаписатьАтрибут("ПричОтз", ПричинаОтмены);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвЗаявит");
	ЗаписьXML.ЗаписатьНачалоЭлемента("СвДоверит");
	
	Если Не ТипЗнч(ДанныеДоверенности) = Тип("Структура") Тогда
		ДанныеДоверенности = Справочники.МЧД003.ДанныеДляПодачиЗаявленияНаОтмену(ДанныеДоверенности);
	КонецЕсли;
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда

		ЗаписьXML.ЗаписатьНачалоЭлемента("РосОргДовер");
		ЗаписьXML.ЗаписатьАтрибут("НаимОрг", ДанныеДоверенности.ДоверительЮЛ_НаимОрг);
		ЗаписьXML.ЗаписатьАтрибут("ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		ЗаписьXML.ЗаписатьАтрибут("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		ЗаписьXML.ЗаписатьАтрибут("ОГРН", ДанныеДоверенности.ДоверительЮЛ_ОГРН);
		ЗаписьXML.ЗаписатьКонецЭлемента();

	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда

		ЗаписьXML.ЗаписатьНачалоЭлемента("ИПДовер");
		ЗаписьXML.ЗаписатьАтрибут("НаимИП", ДанныеДоверенности.ДоверительЮЛ_НаимОрг);
		ЗаписьXML.ЗаписатьАтрибут("ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН);
		ЗаписьXML.ЗаписатьАтрибут("ОГРНИП", ДанныеДоверенности.ДоверительФЛ_ОГРН);
		ЗаписьXML.ЗаписатьКонецЭлемента();

	Иначе

		ТекстОшибки = НСтр("ru = 'Не поддерживается отзыв с типом доверителя:'") + ДанныеДоверенности.ТипОрганизации;
		ВызватьИсключение ТекстОшибки;

	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат Новый Структура("ИмяФайла, Содержимое", "revoke.xml", ЗаписьXML.Закрыть());
	
КонецФункции

// Получает номер МЧД на сервере МЧД.
// 
// Параметры:
//  ТокенДоступа - Строка - Токен доступа к серверу МЧД.
//  ПоказыватьСлужебныеСообщения - Булево
// 
// Возвращаемое значение:
//  Структура - Результат:
//   * НомерДоверенности - Строка - Номер доверенности
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьНомерМЧД(ТокенДоступа = "", ПоказыватьСлужебныеСообщения = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД(ПоказыватьСлужебныеСообщения).ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеНомераМЧДНаСервереМЧД";
	
	Результат = МашиночитаемыеДоверенностиКлиентСервер.РезультатВыполненияЗапросаВРР();
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен номер доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные номера доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении номера доверенности с сервера МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок = КодыОшибокДоступа();
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/number", "/poar-webapp/integration/poa/generate-number");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ДобавитьHTTPЗаголовокРежимаТестирования(ЗаголовкиHTTP);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОтветHTTP = ПолучитьОтвет(СвойстваСервераМЧД, ЗапросHTTP);
	Исключение
		Если ПоказыватьСлужебныеСообщения Тогда
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ОбщегоНазначения.JSONВЗначение(Результат.ТекстОтвета, , Ложь);
		
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");		
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать данные при получении номера доверенности с сервера МЧД: %1'");
		Если ПоказыватьСлужебныеСообщения Тогда
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		Если ПоказыватьСлужебныеСообщения Тогда
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Регистрирует МЧД на сервере МЧД.
// 
// Параметры:
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МЧД003 -
// 
// Возвращаемое значение:
//  Структура - Результат регистрации:
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * НомерДоверенности - Строка - Номер доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * ИННДоверителя - Строка - ИНН доверителя
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ЗарегистрироватьМЧД(ДанныеВыгрузки, ДанныеПодписи, ТокенДоступа = "", НомерДоверенности = "",
	СсылкаНаДоверенность = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НомерДоверенности) Тогда
		НомерДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДоверенность, "НомерДоверенности");
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.РегистрацияМЧДНаСервереМЧД";
	
	Результат = МашиночитаемыеДоверенностиКлиентСервер.РезультатВыполненияЗапросаВРР();
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор загрузки доверенности на сервер МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось загрузить доверенность на сервер МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при загрузке доверенности на сервер МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/contract/pre_validation/failed",
		СтрШаблон(
			НСтр("ru = 'Регистрационный номер или имя файла регистрируемой доверенности ""%1"" уже используется'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unknown-poa-type",
		СтрШаблон(
			НСтр("ru = 'Некорректный префикс имени файла доверенности ""%1"", невозможно определить тип доверенности'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.signature_is_invalid",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_cn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнены фамилия, имя, отчество владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен СНИЛС владельца в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrn_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРН организации, к которой принадлежит владелец, в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не заполнен ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка подписанта на соответствие данным сертификата электронной подписи доверенности ""%1"" или в качестве доверителя указан ИП'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя не указан в доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/individual_entrepreneur_ogrnip_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРНИП доверителя в доверенности не совпадает с ОГРНИП в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: СНИЛС подписанта доверенности не совпадает со СНИЛС в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН доверителя в доверенности не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_inner_ogrn_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка правомерности загрузки: ОГРН организации-доверителя не совпадает с ОГРН в сертификате электронной подписи доверенности ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/russian_legal_entity_signer_check_failed",
		СтрШаблон(
			НСтр("ru = 'Данные доверителя и подписанта в доверенности не соответствуют данным из ЕГРЮЛ для доверенности ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poa", "/poar-webapp/integration/poa");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ДобавитьHTTPЗаголовокРежимаТестирования(ЗаголовкиHTTP);
	
	МассивДвоичныхДанных = Новый Массив();
	
	ИмяФайлаВыгрузки = ПолучитьИмяФайлаВыгрузки(СсылкаНаДоверенность);
	
	ШаблонФайла = "--My1cV8bNdr
		|Content-Disposition: form-data; name=""poa""; filename=""%1""
		|Content-Type: text/xml
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));	
	МассивДвоичныхДанных.Добавить(ДанныеВыгрузки);
	
	ШаблонФайла = "
		|--My1cV8bNdr
		|Content-Disposition: form-data; name=""signature""; filename=""%1.sig""
		|Content-Type: text/xml
		|
		|";
		
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251"));
	
	ШаблонФайла = "
		|--My1cV8bNdr--";
	СодержимоеФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	ПередаваемыеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ПередаваемыеДанные);
	
	Попытка
		ОтветHTTP = ОтправитьЗапросДляОбработки(СвойстваСервераМЧД, ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ОбщегоНазначения.JSONВЗначение(Результат.ТекстОтвета, , Ложь);
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaId"),
			СтруктураОтвета.poaId, "");
		Результат.ИННДоверителя = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerInn"),
			СтруктураОтвета.issuerInn, "");
			
		Статус = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, 0);
		ТекстОтвета = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("title"),
			СтруктураОтвета.title, "");
		
		Если Статус > 0 Тогда
			Результат.ОписаниеОшибкиРегистрации = ОписаниеОшибкиОтРеестра(Статус, ТекстОтвета);
		КонецЕсли;
		
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при загрузке доверенности на сервер МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ЗаписатьМЧД(Результат, СсылкаНаДоверенность);
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Получает статус транзакции МЧД.
// 
// Параметры:
//  ИдентификаторТранзакции - Строка - Идентификатор транзакции
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
// 
// Возвращаемое значение:
//  Структура - Результат получения статуса транзакции МЧД:
//   * СтатусТранзакции - Строка - Статус транзакции
//   * ИдентификаторТранзакции - Строка - Идентификатор транзакции
//   * ДатаВремяТранзакции - Дата, Неопределено - Дата и время транзакции
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьСтатусТранзакцииМЧД(ИдентификаторТранзакции, ТокенДоступа = "", НомерДоверенности = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеСтатусаТранзакцииМЧДНаСервереМЧД";
	
	Результат = МашиночитаемыеДоверенностиКлиентСервер.РезультатВыполненияЗапросаВРР();
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус обработки с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус обработки с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статус обработки с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/transactions?txId=" + ИдентификаторТранзакции,
		"/poar-webapp/integration/poa/" + ИдентификаторТранзакции + "/status");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ДобавитьHTTPЗаголовокРежимаТестирования(ЗаголовкиHTTP);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОтветHTTP = ПолучитьОтвет(СвойстваСервераМЧД, ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ОбщегоНазначения.JSONВЗначение(Результат.ТекстОтвета, , Ложь);
		
		Результат.СтатусТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
		
		Результат.ДатаВремяТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("timestamp"),
			СтруктураОтвета.timestamp, Неопределено);
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если ЗначениеЗаполнено(Результат.ДатаВремяТранзакции) Тогда
		Попытка
			Результат.ДатаВремяТранзакции = XMLЗначение(Тип("Дата"), Результат.ДатаВремяТранзакции);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось разобрать дату и время транзакции'");
			СтруктураПараметров = Новый Структура("ШаблонОшибкиИзИсключения", ТекстСообщения); 
			ВывестиИЗаписатьОшибкуМЧД(СтруктураПараметров, ОтветHTTP, , "ТолькоЗаписатьВЖурналРегистрации");
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Загружает и возвращает сведения доверенности с сервера МЧД.
// 
// Параметры:
//   НомерДоверенности - Строка - Номер доверенности
//   ИННДоверителя - Строка - ИНН доверителя
//  ТокенДоступа - Строка - Токен доступа
// 
// Возвращаемое значение:
//  Структура:
//   * Ошибка - Булево
//   * ТекстОшибки - Строка
//   * ЧастичныеДанные - Неопределено
//   				   - см. МашиночитаемыеДоверенности.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД
//   * ПолныеДанные - Неопределено
//                  - Структура - Полные данные доверенности:
//                    ** ДанныеВыгрузки - ДвоичныеДанные, Неопределено - Данные выгрузки
//                    ** ДанныеПодписи - ДвоичныеДанные, Неопределено - Данные подписи
//                    ** ДанныеПодписиЗаявленияНаОтмену - ДвоичныеДанные, Неопределено - Данные подписи заявления на отмену
//                    ** ДанныеАрхива - ДвоичныеДанные, Неопределено - Данные архива
//                    ** СтатусПолучения - Строка - Статус получения
//                    ** ТекстОтвета - Строка - Текст ответа сервера МЧД
//   * ДатаЗагрузкиИзРеестра - Дата
// 
Функция ПолучитьСведенияДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа = "") Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ЧастичныеДанные", Неопределено);
	Результат.Вставить("ПолныеДанные", Неопределено);
	Результат.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	
	Если Не ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;

	ПоказыватьСлужебныеСообщения = Ложь;
	
	ЧастичныеДанные = 
		МашиночитаемыеДоверенностиПовтИсп.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(
			НомерДоверенности, ТокенДоступа, ПоказыватьСлужебныеСообщения);
	
	Если ПустаяСтрока(ЧастичныеДанные.НомерДоверенности) Или ЧастичныеДанные.СтатусДоверенности = 404 Тогда
		Результат.Ошибка = Истина;
		ШаблонОшибки = НСтр(
			"ru = 'Не удалось получить данные доверенности в реестре ФНС.
			|Возможно доверенность: %1 не выдана доверителем с ИНН: %2'"); 
		Результат.ТекстОшибки = СтрШаблон(ШаблонОшибки, НомерДоверенности, ИННДоверителя);
		Возврат Результат;
	КонецЕсли;
	
	Результат.ЧастичныеДанные = ЧастичныеДанные;
	
	ПолныеДанные = 
		ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(
			НомерДоверенности, ИННДоверителя, ТокенДоступа, ПоказыватьСлужебныеСообщения);
		
	Если ЗначениеЗаполнено(ПолныеДанные.ТекстОшибки) Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = ПолныеДанные.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПолныеДанные.ДанныеВыгрузки) Тогда
		Результат.Ошибка = Истина;
		Результат.ТекстОшибки = 
			НСтр("ru = 'Не удалось получить данные с сервера МЧД распределенного реестра. Повторите попытку позже'");
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПолныеДанные = ПолныеДанные;
	Результат.ДатаЗагрузкиИзРеестра = ТекущаяДатаСеанса();
	
	Возврат Результат;
			
КонецФункции

// Получает частичные данные доверенности на сервере МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ТокенДоступа - Строка - Токен доступа
//  ПоказыватьСлужебныеСообщения - Булево
// 
// Возвращаемое значение:
//  Структура - Частичные данные доверенности:
//   * СтатусДоверенности - Строка - Статус доверенности
//   * ХешДоверенности - Строка - Хеш доверенности
//   * НомерДоверенности - Строка - Номер доверенности
//   * ДатаВыдачи - Дата, Неопределено - Дата выдачи доверенности
//   * ДатаОкончания - Дата, Неопределено - Дата окончания доверенности
//   * ДатаОбновленияСтатуса - Дата, Неопределено - Дата обновления статуса доверенности
//   * ПубличныйКлюч - Строка - Публичный ключ
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ТокенДоступа = "", ПоказыватьСлужебныеСообщения = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД(ПоказыватьСлужебныеСообщения).ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеЧастичныхДанныхДоверенностиНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусДоверенности", 	"");
	Результат.Вставить("ХешДоверенности", 		"");
	Результат.Вставить("НомерДоверенности", 	"");
	Результат.Вставить("ДатаВыдачи", 			Неопределено);
	Результат.Вставить("ДатаОкончания", 		Неопределено);
	Результат.Вставить("ДатаОбновленияСтатуса", Неопределено);
	Результат.Вставить("ПубличныйКлюч", 		"");
	Результат.Вставить("ТекстОтвета", 			"");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить статус доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении статуса доверенности с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poaopen?poaNumber=" + НомерДоверенности, "/poar-webapp/integration/poa/" + НомерДоверенности + "/public");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ДобавитьHTTPЗаголовокРежимаТестирования(ЗаголовкиHTTP);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОтветHTTP = ПолучитьОтвет(СвойстваСервераМЧД, ЗапросHTTP);
	Исключение
		Если ПоказыватьСлужебныеСообщения Тогда
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ОбщегоНазначения.JSONВЗначение(Результат.ТекстОтвета, , Ложь);
		
		Результат.СтатусДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, "");
		Результат.ХешДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("id"),
			СтруктураОтвета.id, "");
		Результат.НомерДоверенности = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("poaNumber"),
			СтруктураОтвета.poaNumber, "");
		Результат.ДатаВыдачи = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("startDate"),
			СтроковыеФункцииКлиентСервер.СтрокаВДату(СтруктураОтвета.startDate), Неопределено);
		Результат.ДатаОкончания = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("endDate"),
			СтроковыеФункцииКлиентСервер.СтрокаВДату(СтруктураОтвета.endDate), Неопределено);
		Результат.ПубличныйКлюч = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("issuerPublicKey"),
			СтруктураОтвета.issuerPublicKey, "");
			
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") Тогда
			
			Результат.ДатаОбновленияСтатуса = Неопределено;
			Если СтруктураОтвета.Свойство("statusDateTime") Тогда
				Результат.ДатаОбновленияСтатуса = ПрочитатьДатуJSON(СтруктураОтвета.statusDateTime, ФорматДатыJSON.ISO);
			ИначеЕсли СтруктураОтвета.Свойство("statusDate") Тогда
				Результат.ДатаОбновленияСтатуса = СтроковыеФункцииКлиентСервер.СтрокаВДату(СтруктураОтвета.statusDate);
			КонецЕсли;
			
		КонецЕсли;
	Исключение
		Если ПоказыватьСлужебныеСообщения Тогда	
			ШаблоныОшибок.ШаблонОшибкиИзИсключения =
				НСтр("ru = 'Не удалось разобрать ответ при получении статуса доверенности с сервера МЧД: %1'");
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если ПоказыватьСлужебныеСообщения
			И НЕ ЗначениеЗаполнено(Результат.ХешДоверенности)
			И НЕ ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Отменяет МЧД на сервере МЧД.
// 
// Параметры:
//  ИмяФайлаВыгрузки - Строка - Имя файла выгрузки
//  ДанныеВыгрузки - ДвоичныеДанные - Данные выгрузки
//  ДанныеПодписи - ДвоичныеДанные - Данные подписи
//  ДанныеСертификата - ДвоичныеДанные - Данные сертификата
//  ТокенДоступа - Строка - Токен доступа
//  НомерДоверенности - Строка - Номер доверенности
//  СсылкаНаДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, Неопределено - Ссылка на доверенность
// 
// Возвращаемое значение:
//  См.  МашиночитаемыеДоверенностиКлиентСервер.РезультатВыполненияЗапросаВРР
//
Функция ОтменитьМЧД(ИмяФайлаВыгрузки, ДанныеВыгрузки, ДанныеПодписи, ДанныеСертификата, ТокенДоступа = "", 
	НомерДоверенности = "",	СсылкаНаДоверенность = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СсылкаНаДоверенность) Тогда
		
		НачатьТранзакцию();
		
		Попытка
			
			ЭтоМЧД003 = ТипЗнч(СсылкаНаДоверенность) = Тип("СправочникСсылка.МЧД003");
			
			Если Не ЭтоМЧД003 Тогда
				ОбъектДоверенность = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(СсылкаНаДоверенность);
				ОбъектДоверенность.ИмяФайлаЗаявленияНаОтзыв = ИмяФайлаВыгрузки;
				ОбъектДоверенность.ФайлЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеВыгрузки, Новый СжатиеДанных(9));
				ОбъектДоверенность.ЭлектроннаяПодписьЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеПодписи,
					Новый СжатиеДанных(9));
				ОбъектДоверенность.Записать();
			Иначе
				ОбъектДоверенность = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(СсылкаНаДоверенность);
				ОбъектДоверенность.ИмяФайлаЗаявленияНаОтзыв = ИмяФайлаВыгрузки;
				ОбъектДоверенность.ФайлЗаявленияНаОтзыв = Новый ХранилищеЗначения(ДанныеВыгрузки, Новый СжатиеДанных(9));
				
				ОбъектДоверенность.ПодписиЗаявленияНаОтзыв.Очистить();
				
				НоваяПодписьЗаявленияНаОтзыв = ОбъектДоверенность.ПодписиЗаявленияНаОтзыв.Добавить();
				НоваяПодписьЗаявленияНаОтзыв.Подпись = 
					Новый ХранилищеЗначения(ДанныеПодписи, Новый СжатиеДанных(9));
				НоваяПодписьЗаявленияНаОтзыв.Сертификат = 
					Новый ХранилищеЗначения(ДанныеСертификата, Новый СжатиеДанных(9));
				ОбъектДоверенность.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВидОперации = НСтр("ru = 'Отзыв доверенности.'");
			ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстСообщения = НСтр("ru = 'Не удалось отозвать доверенность. Подробности в журнале регистрации.'");
			ОбработкаНеисправностейБЭД.ОбработатьОшибку(ВидОперации,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие,
				ПодробныйТекстОшибки, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ОтменаМЧДНаСервереМЧД";
	
	Результат = МашиночитаемыеДоверенностиКлиентСервер.РезультатВыполненияЗапросаВРР();
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен идентификатор отзыва доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось отозвать доверенность на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при отзыве доверенности на сервере МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/not-valid",
		СтрШаблон(
			НСтр("ru = 'Операция запрещена: данные в сертификате не совпадают с данными досрочно отзываемой доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/certificate_validation_exception",
		СтрШаблон(
			НСтр("ru = 'Электронная подпись запроса на досрочный отзыв доверенности номер ""%1"" невалидна'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/expired_poa",
		СтрШаблон(
			НСтр("ru = 'Досрочный отзыв недоступен: доверенность номер ""%1"" истекла'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoked_poa",
		СтрШаблон(
			НСтр("ru = 'Досрочный отзыв недоступен: доверенность номер ""%1"" уже отозвана'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_terminal_poa_status",
		СтрШаблон(
			НСтр("ru = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/poa.revoke.revocable_poa_status_is_terminal",
		СтрШаблон(
			НСтр("ru = 'Невозможен отзыв доверенности номер ""%1"", имеющей статус, отличный от ""Зарегистрировано""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_signature_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка валидности электронной подписи отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_signature_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как ОГРН/ОГРНИП доверителя в отзываемой доверенности не соответствуют ОГРН/ОГРНИП в сертификате электронной подписи отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_certificate_ogrn_or_ogrnip_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен ОГРН/ОГРНИП для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_certificate_snils_not_specified",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как в сертификате электронной подписи не заполнен СНИЛС владельца для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/revoke_snils_check_failed",
		СтрШаблон(
			НСтр("ru = 'Не пройдена проверка полномочий подписанта, так как СНИЛС подписанта в отзываемой доверенности не соответствуют СНИЛС в сертификате электронной подписи для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_poa_revoke_xml",
		СтрШаблон(
			НСтр("ru = 'XML-файл отзыва доверенности не соответствует XSD-схеме для отзыва доверенности номер ""%1""'"),
			НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poacancel", "/poar-webapp/integration/poa/revoke");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "multipart/form-data; boundary=My1cV8bNdr");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ДобавитьHTTPЗаголовокРежимаТестирования(ЗаголовкиHTTP);
	
	// Запись передаваемых данных
	МассивДвоичныхДанных = Новый Массив();
	
	ШаблонФайла = "--My1cV8bNdr
		|Content-Disposition: form-data; name=""poaRevoke""; filename=""%1""
		|Content-Type: text/xml
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));	
	МассивДвоичныхДанных.Добавить(ДанныеВыгрузки);
	
	ШаблонФайла = "
		|--My1cV8bNdr
		|Content-Disposition: form-data; name=""signature""; filename=""%1""
		|Content-Type: application/octet-stream
		|
		|";
	
	ШаблонФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	СодержимоеФайла = СтрШаблон(ШаблонФайла, ИмяФайлаВыгрузки);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	Подпись64 = Base64Строка(ДанныеПодписи);
	Подпись64 = СтрЗаменить(Подпись64, Символы.ВК, "");
	Подпись64 = СтрЗаменить(Подпись64, Символы.ПС, "");
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(Подпись64, "windows-1251"));
	
	ШаблонФайла = "
		|--My1cV8bNdr--";
	СодержимоеФайла = СтрЗаменить(ШаблонФайла,  Символы.ПС, Символы.ВК + Символы.ПС);
	
	МассивДвоичныхДанных.Добавить(ПолучитьДвоичныеДанныеИзСтроки(СодержимоеФайла, "windows-1251"));
	
	ПередаваемыеДанные = СоединитьДвоичныеДанные(МассивДвоичныхДанных);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	ЗапросHTTP.УстановитьТелоИзДвоичныхДанных(ПередаваемыеДанные);
	
	Попытка
		ОтветHTTP = ОтправитьЗапросДляОбработки(СвойстваСервераМЧД, ЗапросHTTP);
	Исключение
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ОбщегоНазначения.JSONВЗначение(Результат.ТекстОтвета, , Ложь);
		
		Результат.ИдентификаторТранзакции = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("txId"),
			СтруктураОтвета.txId, "");
			
		Статус = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("status"),
			СтруктураОтвета.status, 0);
		ТекстОтвета = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("title"),
			СтруктураОтвета.title, "");
		
		Если Статус > 0 Тогда
			Результат.ОписаниеОшибкиРегистрации = ОписаниеОшибкиОтРеестра(Статус, ТекстОтвета);
		КонецЕсли;
		
	Исключение
		ШаблоныОшибок.ШаблонОшибкиИзИсключения =
			НСтр("ru = 'Не удалось разобрать ответ при отмене доверенности на сервере МЧД: %1'");
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Возвращает URL информационной системы.
// 
// Возвращаемое значение:
//  Строка - url
// 
Функция СведенияОбИнформационнойСистеме() Экспорт
	Возврат "https://m4d.nalog.gov.ru";
КонецФункции

// Возвращает URL ссылки на доверенность в распределенном реестре ФНС.
// 
// Параметры:
//  НомерДоверенности - Строка
// 
// Возвращаемое значение:
//  Строка - url
// 
Функция СсылкаНаДоверенностьВРаспределенномРеестреФНС(НомерДоверенности) Экспорт
	
	Если Не ЗначениеЗаполнено(НомерДоверенности) Тогда
		Возврат СведенияОбИнформационнойСистеме();
	КонецЕсли;
	
	ШаблонСсылки = "https://m4d.nalog.gov.ru/EMCHD/check-status?guid=%1";
	Результат = СтрШаблон(ШаблонСсылки, НомерДоверенности);
	
	Возврат Результат;
	
КонецФункции

// Определяет наличие у пользователя прав на изменение машиночитаемых доверенностей организаций.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право на изменение, иначе Ложь.
//
Функция ЕстьПравоИзменения() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций);
	
КонецФункции

// Возвращает таблицу значений с данными результатов проверки МЧД оператором ЭДО. 
//
// Параметры:
//  ПодписанныеОбъекты - Массив из СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//
// Возвращаемое значение:
// 	ТаблицаЗначений:
// 	 * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// 	 * Отпечаток - Строка
// 	 * ДоверенностьВерна - Булево
//
Функция РезультатыПроверокМЧДОператоромЭДО(ПодписанныеОбъекты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РезультатыПроверкиМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
	|	РезультатыПроверкиМЧД.Отпечаток КАК Отпечаток,
	|	РезультатыПроверкиМЧД.ДоверенностьВерна КАК ДоверенностьВерна
	|ИЗ
	|	РегистрСведений.РезультатыПроверкиМЧДОператором КАК РезультатыПроверкиМЧД
	|ГДЕ
	|	РезультатыПроверкиМЧД.ПодписанныйОбъект В (&ПодписанныеОбъекты)";
	
	Запрос.УстановитьПараметр("ПодписанныеОбъекты", ПодписанныеОбъекты);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить(); 
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

// Описывает пустую структуру сведений МЧД
// 
// Возвращаемое значение:
//  Структура - результат получения данных:
//  * Ссылка - ОпределяемыйТип.МашиночитаемаяДоверенность
//  * НомерДоверенности - Строка
//  * НомерРодительскойДоверенности - Строка
//  * ИННДоверителя - Строка
//  * КППДоверителя - Строка
//  * ИННДоверителяРодительскойДоверенности - Строка
//  * ИННПредставителей - Массив из Строка
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * ДатаПолученияСведений - Дата
//  * Подписана - Булево
//  * Верна - Булево
//  * Отозвана - Булево
//  * ДатаОтзыва - Дата
//  * ПолномочияОграничены - Булево
//  * ПолномочияУказаныИзКлассификатора - Булево
//  * Полномочия - Массив из См.НовыеПолномочияПредставителя
//  * ТипПередоверия - Строка
//  * ПравилоПроверки - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
//  * СовместныеПолномочия - Булево
//  * НесколькоПредставителей - Булево
//  * ДатаЗагрузкиИзРеестраРодительскихДанных - Дата
//  * ДатаОтправкиЗаявленияНаОтзыв - Дата
//  * РодительскиеДанныеМЧД - Неопределено,
//  							См. НовыеСведенияМЧД
//  * ВариантЗаполненияПолномочий - ПеречислениеСсылка.ВариантыЗаполненияПолномочийМЧД
//  
Функция НовыеСведенияМЧД() Экспорт
	
	Сведения = Новый Структура;
	Сведения.Вставить("Ссылка", Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип.ПривестиЗначение());
	Сведения.Вставить("НомерДоверенности", "");
	Сведения.Вставить("НомерРодительскойДоверенности", "");
	Сведения.Вставить("ИННДоверителя", "");
	Сведения.Вставить("КППДоверителя", "");
	Сведения.Вставить("ИННДоверителяРодительскойДоверенности", "");
	Сведения.Вставить("ИННПредставителей", Новый Массив());
	Сведения.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	Сведения.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Сведения.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Сведения.Вставить("Подписана", Ложь);
	Сведения.Вставить("Верна", Ложь);
	Сведения.Вставить("Отозвана", Ложь);
	Сведения.Вставить("ДатаОтзыва", Дата(1, 1, 1));
	Сведения.Вставить("ДатаПолученияСведений", Дата(1, 1, 1));
	Сведения.Вставить("ПолномочияОграничены", Истина);
	Сведения.Вставить("ПолномочияУказаныИзКлассификатора", Ложь);
	Сведения.Вставить("Полномочия", Новый Массив());
	Сведения.Вставить("ТипПередоверия", "");
	Сведения.Вставить("ПравилоПроверки", Справочники.ПравилаПроверкиПолномочийМЧД.ПустаяСсылка());
	Сведения.Вставить("СовместныеПолномочия", Ложь);
	Сведения.Вставить("НесколькоПредставителей", Ложь);
	Сведения.Вставить("ДатаЗагрузкиИзРеестраРодительскихДанных", Дата(1, 1, 1));
	Сведения.Вставить("ДатаОтправкиЗаявленияНаОтзыв", Дата(1, 1, 1));
	Сведения.Вставить("РодительскиеДанныеМЧД", Неопределено);
	Сведения.Вставить("ВариантЗаполненияПолномочий", Перечисления.ВариантыЗаполненияПолномочийМЧД.ПустаяСсылка());
	
	Возврат Сведения;
	
КонецФункции

// Описывает пустую структуру статуса МЧД
// 
// Возвращаемое значение:
//  Структура - результат получения данных:
//  * Ошибка - Булево
//  * ОшибкаПолученияДанныхСРРФНС - Булево
//  * ОписаниеОшибки - Строка - причина по которой не удалось получить данные доверенности, заполняется при Ошибка = Истина
//  * Сведения - см. НовыеСведенияМЧД
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция НовыеДанныеСтатусаМЧД() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ОшибкаПолученияДанныхСРРФНС", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	Результат.Вставить("Сведения", НовыеСведенияМЧД()); 
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);
	Возврат Результат;
	
КонецФункции

// Возрвщает структуру для дальнейшего определения статуса доверенности в реестре
// 
// Возвращаемое значение:
//  Структура:
//   * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//   * ДатаОтзыва - Дата
//   * ДатаПолученияСтатуса - Дата
Функция НовыйСтатусВРеестреФНС() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	Результат.Вставить("ДатаОтзыва", Дата(1, 1, 1));
	Результат.Вставить("ДатаПолученияСтатуса", Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

// Возвращает сведения о статусах доверенностей контрагентов.
// 
// Параметры:
//  ДанныеМЧД - Массив из Структура см. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностейКонтрагентов(ДанныеМЧД) Экспорт
	
	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиКонтрагентов;
	Возврат СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД);
	
КонецФункции

// Возвращает сведения о статусах доверенностей организаций.
// 
// Параметры:
//  ДанныеМЧД - Массив из Структура См. НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - Структура см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностейОрганизаций(ДанныеМЧД) Экспорт
	
	СправочникМЧД = Справочники.МашиночитаемыеДоверенностиОрганизаций;
	Возврат СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД);
	
КонецФункции

// Возвращает общие свойства доверенностей.
// 
// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,
//  						 СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов, СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//         - СправочникСсылка.МЧД003
//  * Значение - См. НовыеОбщиеСвойстваДоверенности
Функция ОбщиеСвойстваДоверенностей(Доверенности) Экспорт
	
	СвойстваДоверенностей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
		|	МашиночитаемыеДоверенностиОрганизаций.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
		|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи КАК ДатаВыдачи,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания КАК ДатаОкончания,
		|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_НаимОрг КАК Доверитель,
		|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_ИНН КАК ДоверительИНН,
		|	МашиночитаемыеДоверенностиОрганизаций.Верна КАК Верна,
		|	МашиночитаемыеДоверенностиОрганизаций.Отозвана КАК Отозвана,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва КАК ДатаОтзыва,
		|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиОрганизаций.ПолномочияОграничены КАК ПолномочияОграничены,
		|	МашиночитаемыеДоверенностиОрганизаций.ВариантЗаполненияПолномочий = ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.Классификатор) КАК ПолномочияУказаныИзКлассификатора,
		|	МашиночитаемыеДоверенностиОрганизаций.ДатаОбновленияСтатуса КАК ДатаОбновленияСтатуса
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
		|ГДЕ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка В(&Доверенности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка,
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерРодительскойДоверенности,
		|	МашиночитаемыеДоверенностиКонтрагентов.НомерДоверенности,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаВыдачи,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОкончания,
		|	МашиночитаемыеДоверенностиКонтрагентов.Доверитель,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДоверительИНН,
		|	МашиночитаемыеДоверенностиКонтрагентов.Верна,
		|	МашиночитаемыеДоверенностиКонтрагентов.Отозвана,
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОтзыва,
		|	МашиночитаемыеДоверенностиКонтрагентов.СтатусВРеестреФНС,
		|	МашиночитаемыеДоверенностиКонтрагентов.ПолномочияОграничены,
		|	МашиночитаемыеДоверенностиКонтрагентов.ВариантЗаполненияПолномочий = ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.Классификатор),
		|	МашиночитаемыеДоверенностиКонтрагентов.ДатаОбновленияСтатуса
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
		|ГДЕ
		|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка В(&Доверенности)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МЧД003.Ссылка,
		|	МЧД003.НомерРодительскойДоверенности,
		|	МЧД003.НомерДоверенности,
		|	МЧД003.ДатаВыдачи,
		|	МЧД003.СрокДействия,
		|	ЖурналМашиночитаемыхДоверенностей.ВсеДоверители,
		|	"""",
		|	МЧД003.Верна,
		|	МЧД003.ДатаПрекращения > ДАТАВРЕМЯ(1, 1, 1),
		|	МЧД003.ДатаПрекращения,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка),
		|	МЧД003.ПолномочияОграничены,
		|	МЧД003.ВариантЗаполненияПолномочий = ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.Классификатор),
		|	МЧД003.ДатаОбновленияСтатуса
		|ИЗ
		|	Справочник.МЧД003 КАК МЧД003
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналМашиночитаемыхДоверенностей КАК ЖурналМашиночитаемыхДоверенностей
		|		ПО МЧД003.ХешФайла = ЖурналМашиночитаемыхДоверенностей.Хеш
		|ГДЕ
		|	МЧД003.Ссылка В(&Доверенности)";
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Свойства = НовыеОбщиеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(Свойства, Выборка);
		
		Если ЭтоМЧД003(Выборка.Ссылка)
			И ЗначениеЗаполнено(Выборка.Доверитель) Тогда
			
			СведенияОДоверителе = 
				РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.СведенияОДоверителях(Выборка.Доверитель)[0];
			
			ТипыДоверителей = РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.ТипыДоверителей();
			Если СведенияОДоверителе.Тип = ТипыДоверителей.ЮридическоеЛицо Тогда
				Свойства.Доверитель = СведенияОДоверителе.ДанныеЮридическогоЛица.Наименование;
				Свойства.ДоверительИНН = СведенияОДоверителе.ДанныеЮридическогоЛица.ИНН;
			ИначеЕсли СведенияОДоверителе.Тип = ТипыДоверителей.ИностраннаяОрганизация Тогда
				Свойства.Доверитель = СведенияОДоверителе.ДанныеИностраннойОрганизации.Наименование;
				Свойства.ДоверительИНН = СведенияОДоверителе.ДанныеИностраннойОрганизации.ИНН;
			ИначеЕсли СведенияОДоверителе.Тип = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
				Свойства.Доверитель = СведенияОДоверителе.ДанныеИндивидуальногоПредпринимателя.Наименование;
				Свойства.ДоверительИНН = СведенияОДоверителе.ДанныеИндивидуальногоПредпринимателя.ИНН;
			ИначеЕсли СведенияОДоверителе.Тип = ТипыДоверителей.ФизическоеЛицо Тогда
				Свойства.Доверитель = СведенияОДоверителе.ДанныеФизическогоЛица.ФИО;
				Свойства.ДоверительИНН = СведенияОДоверителе.ДанныеФизическогоЛица.ИНН;
			КонецЕсли;
		КонецЕсли;
		
		СвойстваДоверенностей.Вставить(Выборка.Ссылка, Свойства);
	КонецЦикла;
	
	Возврат СвойстваДоверенностей;
	
КонецФункции

// Возвращает общие свойства доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  - Неопределено
//  - см. НовыеОбщиеСвойстваДоверенности
Функция ОбщиеСвойстваДоверенности(Доверенность) Экспорт
	Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Доверенность);
	ОбщиеСвойстваДоверенностей = ОбщиеСвойстваДоверенностей(Доверенности);
	Возврат ОбщиеСвойстваДоверенностей[Доверенность];
КонецФункции

// Возвращает номера актуальных доверенностей по данным доверителя и представителя с ИНН доверителей.
// 
// Параметры:
//  ОтборДоверителя - см. НовыеРеквизитыОтбора
//  ОтборПредставителя - см. НовыеРеквизитыОтбора
//  ДействительныеНаДату - Дата
//  ЭлектронныйДокумент - Неопределено
//  					- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  ПодобратьМЧДКонтрагента - Булево
// 
// Возвращаемое значение:
//  Структура:
//  * НомераМЧДСИННДоверителей - Соответствие Из КлючИЗначение:
//	 ** Ключ - Строка - номер МЧД
//	 ** Значение - Структура:
//	  *** ИННДоверителя - Строка
//	  *** ИННДоверителяРодительскойДоверенности - Строка
//  * ОшибкиПроверкиПолномочий - Массив из см. НоваяОшибкаПроверкиПолномочий
Функция НомераДоверенностейСИННДоверителейПоУчастникам(ОтборДоверителя, ОтборПредставителя, ДействительныеНаДату,
	ЭлектронныйДокумент = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НомераМЧДСИННДоверителей", Новый Соответствие);
	Результат.Вставить("ОшибкиПроверкиПолномочий", Новый Массив);
	
	ОтключенПодборМЧДПоКПП = МашиночитаемыеДоверенностиПовтИсп.ОтключенПодборМЧДПоКПППриПодписанииИПроверке();
	
	ДанныеДляОтбораДоверителя = ОбщегоНазначения.СкопироватьРекурсивно(ОтборДоверителя);
	
	Если ОтключенПодборМЧДПоКПП Тогда
		ДанныеДляОтбораДоверителя.КПП = "";
	КонецЕсли;
	
	ВсеДоверенности = ТаблицаДоверенностей(ДанныеДляОтбораДоверителя, ОтборПредставителя, ДействительныеНаДату);
	СортироватьДоверенностиПоКПП(ВсеДоверенности, ОтборДоверителя.КПП);
	
	Для Каждого СтрокаДоверенности Из ВсеДоверенности Цикл
		
		ВозможнаАвтопроверкаПолномочий = ВозможнаАвтопроверкаПолномочий(СтрокаДоверенности);
		Если Не ВозможнаАвтопроверкаПолномочий Тогда
			
			ТекстОшибки = ТекстОшибкиНеНастроенаАвтопроверка();
			ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(СтрокаДоверенности.Ссылка);
			Если Не ПравилоПроверки.Используется Тогда
				ТекстОшибки = ТекстОшибкиВыключеныПравилаПроверки();
			КонецЕсли;
			
			Ошибка = НоваяОшибкаПроверкиПолномочий();
			Ошибка.Доверенность = СтрокаДоверенности.Представление;
			Ошибка.НомерДоверенности = СтрокаДоверенности.НомерДоверенности;
			Ошибка.ТекстОшибки = ТекстОшибки;
			Результат.ОшибкиПроверкиПолномочий.Добавить(Ошибка);
			Продолжить;
		КонецЕсли;
		
		ПолномочияОграничены = Не ЭтоМЧДСПолнымиПолномочиями(СтрокаДоверенности.Ссылка);
		Если ПолномочияОграничены И ЭлектронныйДокумент <> Неопределено Тогда

			РезультатПроверки = ПроверитьПолномочияДоверенности(СтрокаДоверенности.Ссылка, ЭлектронныйДокумент);

			Если Не РезультатПроверки.Успех Тогда
				Ошибка = НоваяОшибкаПроверкиПолномочий();
				Ошибка.Доверенность = СтрокаДоверенности.Представление;
				Ошибка.НомерДоверенности = СтрокаДоверенности.НомерДоверенности;
				Ошибка.ТекстОшибки = РезультатПроверки.ТекстОшибки;
				Результат.ОшибкиПроверкиПолномочий.Добавить(Ошибка);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИННДоверителей = Новый Структура("ИННДоверителя, ИННДоверителяРодительскойДоверенности");
		ЗаполнитьЗначенияСвойств(ИННДоверителей, СтрокаДоверенности);
		
		Результат.НомераМЧДСИННДоверителей.Вставить(СтрокаДоверенности.НомерДоверенности, ИННДоверителей);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Записывает результат проверки в элемент справочника машиночитаемой доверенности.
//
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  Результат - Булево
//  ТекстОшибки - Строка
//  ОписаниеОшибкиРегистрации - Строка
//
Процедура ОтразитьРезультатПроверкиМЧД(МЧД, Результат, ТекстОшибки, ОписаниеОшибкиРегистрации = "") Экспорт
	
	ЭтоМЧД003 = ЭтоМЧД003(МЧД);
	
	НачатьТранзакцию();
	
	Попытка
		
		МЧДОбъект = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(МЧД);
		МЧДОбъект.Верна = Результат;
		МЧДОбъект.ТекстОшибкиПроверкиМЧД = ТекстОшибки;
		
		Если ЭтоМЧД003 Тогда
			МЧДОбъект.ОписаниеОшибкиРегистрации = ОписаниеОшибкиРегистрации;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		МЧДОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
		МЧДОбъект.Разблокировать();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Запись результата проверки доверенности'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки,, МЧД);
			
	КонецПопытки;
	
КонецПроцедуры

// Заполняет реквизиты подписи в объекте справочника машиночитаемые доверенности.
//
// Параметры:
//  ОбъектМЧД - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//			  - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//			  - СправочникОбъект.МЧД003
//  ДанныеДляПроверки - См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  ФорматДоверенности - Строка
//
Процедура ЗаполнитьПодписанаВерна(ОбъектМЧД, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте = Ложь,
	ФорматДоверенности = "", РезультатПроверкиНаСервере = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеПодписи) И ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() Тогда
		РезультатПроверкиДоверенности = ПроверитьДоверенность(ДанныеДляПроверки);
		РезультатВерна = РезультатПроверкиДоверенности.Результат;
		РезультатТекстОшибки = РезультатПроверкиДоверенности.ТекстОшибки;
	Иначе
		ТребуетсяПроверкаМЧДНаКлиенте = Истина;
		РезультатВерна = Ложь;
		РезультатТекстОшибки = "";
	КонецЕсли;

	ДоверенностьПодписана = ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеПодписи) И ЗначениеЗаполнено(
		ДанныеДляПроверки.ДанныеДоверенности);

	Если ДоверенностьПодписана Тогда
		Подпись = Новый ХранилищеЗначения(ДанныеДляПроверки.ДанныеПодписи, Новый СжатиеДанных(9));
		Если ТипЗнч(ОбъектМЧД) = Тип("СправочникОбъект.МЧД003") Тогда
			ПодписьУжеДобавлена = Ложь;
			Для Каждого Строка Из ОбъектМЧД.Подписи Цикл
				Если Строка.Подпись.Получить() = ДанныеДляПроверки.ДанныеПодписи Тогда
					ПодписьУжеДобавлена = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПодписьУжеДобавлена Тогда
				НоваяСтрока = ОбъектМЧД.Подписи.Добавить();
				НоваяСтрока.Подпись = Подпись;
			КонецЕсли;
		Иначе
			ОбъектМЧД.ЭлектроннаяПодпись = Подпись;
		КонецЕсли;
	КонецЕсли;

	Если Не ТребуетсяПроверкаМЧДНаКлиенте И РезультатПроверкиНаСервере <> Неопределено И Не ПроверенаВручную(ОбъектМЧД) Тогда
		РезультатПроверкиНаСервере.Вставить("Результат", РезультатВерна);
		РезультатПроверкиНаСервере.Вставить("ТекстОшибки", РезультатТекстОшибки);
	КонецЕсли;

	ОбъектМЧД.Подписана = ДоверенностьПодписана;
	Если ДоверенностьПодписана И Не ПроверенаВручную(ОбъектМЧД) Тогда
		ОбъектМЧД.Верна = РезультатВерна;
		ОбъектМЧД.ТекстОшибкиПроверкиМЧД = РезультатТекстОшибки;
	КонецЕсли;

КонецПроцедуры

// Формирует данные доверенности для транспортного контейнера.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//               - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности
Функция ДанныеДоверенностиДляКонтейнера(Доверенность) Экспорт
	ДанныеДоверенностиДляКонтейнера = СправочникМЧД(Доверенность).ДанныеДоверенностиДляКонтейнера(Доверенность);
	СсылкаНаРеестр = ДанныеДоверенностиДляКонтейнера.СсылкаНаРеестр;
	ДанныеДоверенностиДляКонтейнера.СсылкаНаРеестр = ?(ПустаяСтрока(СсылкаНаРеестр), МашиночитаемыеДоверенности.СведенияОбИнформационнойСистеме(), СсылкаНаРеестр);
	Возврат ДанныеДоверенностиДляКонтейнера;
КонецФункции

// Получает данные МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
//
Функция ПолучитьДанныеМЧД(МЧД) Экспорт
	Возврат СправочникМЧД(МЧД).ПолучитьДанныеМЧД(МЧД);
КонецФункции

// Возвращает идентификатор машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Строка - Идентификатор машиночитаемой доверенности.
//
Функция ПолучитьИдентификаторМЧД(Ссылка) Экспорт
	Возврат СправочникМЧД(Ссылка).ПолучитьИдентификаторМЧД(Ссылка);
КонецФункции

// Возвращает сохраненные данные файла доверенности и электронную подпись, которой подписана доверенность.
//
// Параметры:
//  МЧД - ОпределяемыйТип.МашиночитаемаяДоверенность
//
// Возвращаемое значение:
//  Структура - Данные файла доверенности и подписи:
//   * ДанныеФайла - ДвоичныеДанные
//   * ДанныеПодписи - ДвоичныеДанные,Неопределено
Функция ДанныеФайлаДоверенностиИПодписи(МЧД) Экспорт
	
	РеквизитыМЧД = РеквизитыДляВыгрузкиДанныхДоверенности(МЧД);
	ДанныеФайла = РеквизитыМЧД.XMLфайлМЧД.Получить();
	Если ТипЗнч(РеквизитыМЧД.ЭлектроннаяПодпись) = Тип("ХранилищеЗначения") Тогда
		ДанныеПодписи = РеквизитыМЧД.ЭлектроннаяПодпись.Получить();
	ИначеЕсли ТипЗнч(РеквизитыМЧД.ЭлектроннаяПодпись) = Тип("ДвоичныеДанные") Тогда
		ДанныеПодписи = РеквизитыМЧД.ЭлектроннаяПодпись;
	Иначе
		ДанныеПодписи = Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеФайла", ДанныеФайла);
	Результат.Вставить("ДанныеПодписи", ДанныеПодписи);

	Возврат Результат;
	
КонецФункции

// Возвращает данные доверенности из файла обмена.
// 
// Параметры:
//  ОписаниеФайлаОбмена - См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// 
// Возвращаемое значение:
//  См. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
Функция ДанныеДоверенностиИзФайлаОбмена(ОписаниеФайлаОбмена) Экспорт
	
	ОписаниеФайла = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	
	ЭлементZipФайлаДанныхДоверенности = Неопределено;
	Поток = ОписаниеФайлаОбмена.ДвоичныеДанные.ОткрытьПотокДляЧтения();
	ЧтениеZip = Новый ЧтениеZipФайла(Поток);
	Для Каждого Элемент Из ЧтениеZip.Элементы Цикл
		Если НРег(Элемент.Расширение) = "xml"
			И ФорматыЭДО_ФНС.ЭтоПространствоИменМЧД(Элемент.Имя) Тогда
			ЭлементZipФайлаДанныхДоверенности = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементZipФайлаДанныхДоверенности = Неопределено Тогда
		ЧтениеZip.Закрыть();
		Поток.Закрыть();
		Возврат ОписаниеФайла;
	КонецЕсли;
	
	ВременныйКаталог = "";
	
	Попытка
		ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
		ЧтениеZip.Извлечь(ЭлементZipФайлаДанныхДоверенности, ВременныйКаталог);
		ОписаниеФайла.ИмяФайла = ЭлементZipФайлаДанныхДоверенности.Имя;
		ОписаниеФайла.ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйКаталог + ЭлементZipФайлаДанныхДоверенности.Имя);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось извлечь файл %1 из архива %2 по причине:'"),
			ЭлементZipФайлаДанныхДоверенности.Имя, ОписаниеФайлаОбмена.ИмяФайла);
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки, 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецПопытки;
	
	ЧтениеZip.Закрыть();
	Поток.Закрыть();
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	КонецЕсли;
	
	Возврат ОписаниеФайла;
	
КонецФункции

// Возвращает признак использования распределенного реестра доверенностей ФНС.
// 
// Возвращаемое значение:
//  Булево
Функция ИспользоватьРеестрДоверенностейФНС() Экспорт
	
	Возврат Константы.ИспользоватьРеестрДоверенностейФНСЭДО.Получить();
	
КонецФункции

#Область ПроверкаПодписи

// Записывает результат ручной проверки подписи по доверенности.
// 
// Параметры:
//  ДанныеПодписи - см. ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности
//
Процедура ЗаписатьРезультатРучнойПроверкиПодписи(ДанныеПодписи) Экспорт
	
	СвойстваПодписи = ДанныеПодписи.СвойстваПодписи;
	ПодписанныйОбъект = ДанныеПодписи.ПодписанныйОбъект;
	
	РезультатПроверкиПоМЧД = ДанныеПодписи.РезультатПроверкиПоМЧД;
		
	РезультатПроверкиПоМЧД.ПроверкаВыполнена = Истина;
	РезультатПроверкиПоМЧД.ДатаПроверки = ТекущаяДатаСеанса();
	РезультатПроверкиПоМЧД.ПодписьВерна = Истина;
	
	Если Не ЗначениеЗаполнено(РезультатПроверкиПоМЧД.ПротоколПроверки) Тогда
		РезультатПроверкиПоМЧД.ПротоколПроверки = НовыйПротоколПроверкиПодписи();
	КонецЕсли;
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ПредставлениеПользователя = ТекущийПользователь.ПолноеИмя;
	ИдентификаторПользователя = Строка(ТекущийПользователь.УникальныйИдентификатор);
	
	ПроверкаПодписиДокумента = МашиночитаемыеДоверенностиКлиентСервер.НовыйРезультатПроверки();
	ПроверкаПодписиДокумента.Выполнено = Истина;
	ПроверкаПодписиДокумента.ДатаПроверки = РезультатПроверкиПоМЧД.ДатаПроверки;
	ПроверкаПодписиДокумента.Успех = Истина;
	ПроверкаПодписиДокумента.РучнаяПроверка = Истина;
	ПроверкаПодписиДокумента.ПредставлениеПользователя = ПредставлениеПользователя;
	ПроверкаПодписиДокумента.ИдентификаторПользователя = ИдентификаторПользователя;
	
	РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаПодписиДокумента = ПроверкаПодписиДокумента;
	
	ПроверкаПолномочий = МашиночитаемыеДоверенностиКлиентСервер.НовыйРезультатПроверки();
	ЗаполнитьЗначенияСвойств(ПроверкаПолномочий, ПроверкаПодписиДокумента);
	
	РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий = ПроверкаПолномочий;

	ЗаписатьРезультатПроверкиПодписи(ПодписанныйОбъект, СвойстваПодписи.ХешПодписи, РезультатПроверкиПоМЧД);
	
КонецПроцедуры

// Записывает результат проверки полномочий доверенности.
// 
// Параметры:
//  ДанныеПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеПроверкиПолномочий
//  
//  Возвращаемое значение:
//    Структура:
//      * Успех - Булево
//      * ТекстОшибки - Строка
//      * РезультатыПроверкиПодписи - Массив из Структура:
//  	  ** ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  	  ** ХешПодписи - Строка
//  	  ** ПроверкаПодписи - см. НовыйРезультатПроверкиПодписи
//      
Функция ЗаписатьРезультатПроверкиПолномочий(Знач ДанныеПроверки) Экспорт
	
	Результат = Новый Структура("Успех, ТекстОшибки", Ложь, "");
	Результат.Вставить("РезультатыПроверкиПодписи", Новый Массив);
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого Данные Из ДанныеПроверки Цикл
		
			НаборЗаписей = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(Данные.ПодписанныйОбъект);
			НаборЗаписей.Отбор.ХешПодписи.Установить(Данные.ХешПодписи);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			ТребуетсяЗапись = Ложь;
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				
				ПротоколПроверкиJSON = ЗаписьНабора.ПротоколПроверки.Получить();
				
				Если ПротоколПроверкиJSON <> Неопределено Тогда
					
					ПротоколПроверки = ПрочитатьПротоколПроверкиJSON(ПротоколПроверкиJSON);
					
					ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий = Данные.РезультатПроверки;
					ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий.ДатаПроверки = ТекущаяДатаСеанса();
					ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий.РучнаяПроверка = Данные.РучнаяПроверка;
					
					Если ЗначениеЗаполнено(Данные.НомерРодительскойДоверенности) Тогда
					
						ПротоколПроверки.ПроверкаМЧД.РодительскиеПолномочияСоответствуютПолномочиямПередоверия
							= ОбщегоНазначения.СкопироватьРекурсивно(Данные.РезультатПроверки);
						ПротоколПроверки.ПроверкаМЧД.РодительскиеПолномочияСоответствуютПолномочиямПередоверия.ДатаПроверки
							= ТекущаяДатаСеанса();
						ПротоколПроверки.ПроверкаМЧД.РодительскиеПолномочияСоответствуютПолномочиямПередоверия.РучнаяПроверка
							= Данные.РучнаяПроверка;
						ПротоколПроверки.ПроверкаМЧД.РодительскиеПолномочияСоответствуютПолномочиямПередоверия.НомерДоверенности
							= Данные.НомерРодительскойДоверенности;
						
					Иначе
						ПротоколПроверки.ПроверкаМЧД.РодительскиеПолномочияСоответствуютПолномочиямПередоверия = Неопределено;
					КонецЕсли;
					
					ПротоколJSON = ОбщегоНазначенияБЭД.JSONСтрока(ПротоколПроверки);
					ЗаписьНабора.ПротоколПроверки = Новый ХранилищеЗначения(ПротоколJSON, Новый СжатиеДанных(9));
					
					ТребуетсяЗапись = Истина;
					
					ЗаписьНабора.ПодписьВерна = ПротоколПроверки.ПроверкаПодписиДокумента.Успех
						И (МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(
							ПротоколПроверки.ПроверкаМЧД) Или Данные.РучнаяПроверка);
					ПроверкаПодписи = НовыйРезультатПроверкиПодписи();
					ПроверкаПодписи.ПроверкаВыполнена = ЗаписьНабора.ПроверкаВыполнена;
					ПроверкаПодписи.ПодписьВерна = ЗаписьНабора.ПодписьВерна;
					ПроверкаПодписи.ТребуетсяДоверенность = Истина;
					ПроверкаПодписи.ПротоколПроверки = ПротоколПроверки;
					ПроверкаПодписи.Доверенность = ЗаписьНабора.Доверенность;
					
					СтруктураРезультата = Новый Структура();
					СтруктураРезультата.Вставить("ПодписанныйОбъект", Данные.ПодписанныйОбъект);
					СтруктураРезультата.Вставить("ХешПодписи", Данные.ХешПодписи);
					СтруктураРезультата.Вставить("ПроверкаПодписи", ПроверкаПодписи);
					Результат.РезультатыПроверкиПодписи.Добавить(ПроверкаПодписи);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТребуетсяЗапись Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				НаборЗаписей.Записать();
				УстановитьПривилегированныйРежим(Ложь);
				ИнтерфейсДокументовЭДО.ЗаписатьПроверкуЭлектронныхПодписейЭДО(Данные.ПодписанныйОбъект);
				
			КонецЕсли;
	
		КонецЦикла;
		
		Результат.Успех = Истина;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Результат.ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(
			Результат.ТекстОшибки,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			УровеньЖурналаРегистрации.Ошибка);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Добавляет доверенность в очередь на регистрацию в реестре ФНС.
// 
// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
//  ВидЗапроса - Строка
// 
Процедура ДобавитьВОчередьЗапросовВРеестрМЧД(Доверенность, ВидЗапроса) Экспорт
	
	ДатаДобавленияВОчередь = ТекущаяДатаСеанса();
	
	ДанныеКРегистрации = Новый Структура();
	ДанныеКРегистрации.Вставить("Доверенность", Доверенность);
	ДанныеКРегистрации.Вставить("ВидЗапроса", ВидЗапроса);
	ДанныеКРегистрации.Вставить("ДатаСоздания", ДатаДобавленияВОчередь);
	ДанныеКРегистрации.Вставить("ДатаПоследнейПопытки", ДатаДобавленияВОчередь);

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка
		
		НаборЗаписей = РегистрыСведений.ОчередьЗапросовВРеестрМЧДЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Доверенность.Установить(Доверенность);
		НаборЗаписей.Отбор.ВидЗапроса.Установить(ВидЗапроса);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДанныеКРегистрации, , "ДатаСоздания");
				Если ЗаписьНабора.НомерПопытки >= 1 Тогда
					ЗаписьНабора.НомерПопытки = ЗаписьНабора.НомерПопытки + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДанныеКРегистрации);
			ЗаписьНабора.НомерПопытки = 1;
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Операция = НСтр("ru = 'Запись МЧД в очередь на регистрацию в реестр ФНС'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось записать МЧД в очередь на регистрацию в реестр ФНС. Подробности в журнале регистрации'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки, ТекстСообщения, Доверенность);
			
	ВызватьИсключение;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет доверенность из очереди на регистрацию в реестре ФНС.
// 
// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
// 
Процедура УдалитьИзОчередиНаРегистрацию(Доверенность) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		НаборЗаписей = РегистрыСведений.ОчередьЗапросовВРеестрМЧДЭДО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Доверенность.Установить(Доверенность);
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		Операция = НСтр("ru = 'Запись МЧД в очередь на регистрацию в реестр ФНС'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось удалить МЧД из очереди на регистрацию в реестр ФНС. Подробности в журнале регистрации'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки, ТекстСообщения, Доверенность);
		
	ВызватьИсключение;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет поиск доверенности в очереди на регистрацию в реестре ФНС и возвращает данные очереди.
// 
// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
//
//  Возвращаемое значение:
//   см. НовыеДанныеМЧДВОчередиНаРегистрацию
//
Функция НайтиДанныеМЧДВОчередиНаРегистрацию(Доверенность) Экспорт

	Результат = НовыеДанныеМЧДВОчередиНаРегистрацию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьЗапросовРР.Доверенность КАК Доверенность,
		|	ОчередьЗапросовРР.ВидЗапроса КАК ВидЗапроса,
		|	ОчередьЗапросовРР.ДатаСоздания КАК ДатаСоздания,
		|	ОчередьЗапросовРР.ДатаПоследнейПопытки КАК ДатаПоследнейПопытки,
		|	ОчередьЗапросовРР.НомерПопытки КАК НомерПопытки
		|ИЗ
		|	РегистрСведений.ОчередьЗапросовВРеестрМЧДЭДО КАК ОчередьЗапросовРР
		|ГДЕ
		|	ОчередьЗапросовРР.Доверенность = &Доверенность";
	
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	
	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
		
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат.ЕстьВОчереди = Истина;
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДетальныеЗаписи);		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Возвращает сведения для проверки подписей по МЧД.
// 
// Параметры:
//  ТекущийПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  РазмерПорции - Число
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  * ХешПодписи - См. КриптографияБЭД.ХешПодписи
Функция ПорцияСведенийОПодписяхДляПроверки(ТекущийПодписанныйОбъект, РазмерПорции) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект КАК ПодписанныйОбъект,
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи КАК ХешПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	НЕ ЭлектронныеПодписиПоМЧД.ПроверкаВыполнена
		|	И ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект > &ПодписанныйОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодписанныйОбъект";
	Если РазмерПорции <> 1000 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", СтрШаблон("ПЕРВЫЕ %1", РазмерПорции));
	КонецЕсли;
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ТекущийПодписанныйОбъект);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает новые параметры проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * ИННДоверителя - Строка - ИНН доверителя по данным файла электронного документа.
//  * СвойстваПодписи - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * СведенияМЧД - см. МашиночитаемыеДоверенности.НовыеСведенияМЧД
//  * ПроверкаОператором - См. НовыйПротоколПроверкиОператором
//  * ТекстОшибки - Строка 
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  * ПроверятьПолномочияВручную - Булево - Признак обязательности интерактивной проверки.
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  					- ДокументСсылка.ЭлектронныйДокументИсходящийЭДО 
//  * ОшибкаПолученияДанныхСРРФНС - Булево
//
Функция НовыеПараметрыПроверкиПодписи() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИННДоверителя", "");
	Параметры.Вставить("СвойстваПодписи", КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи());
	Параметры.Вставить("СведенияМЧД", НовыеСведенияМЧД());
	Параметры.Вставить("ПроверкаОператором", НовыйПротоколПроверкиОператором());
	Параметры.Вставить("ТекстОшибки", "");
	Параметры.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь); 
	Параметры.Вставить("ДанныеДляПроверки", МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД());
	Параметры.Вставить("ЭлектронныйДокумент", Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка());
	Параметры.Вставить("ОшибкаПолученияДанныхСРРФНС", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает новый результат проверки подписи по МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * ПроверкаВыполнена - Булево
//  * ТребуетсяДоверенность - Булево
//  * Доверенность - Неопределено,
//  			   - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,
//  			   - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  			   - СправочникСсылка.МЧД003
//  * ДатаПроверки - Дата
//  * ПодписьВерна - Булево
//  * ПротоколПроверки - Неопределено
//					   - См. НовыйПротоколПроверкиПодписи
//	* ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция НовыйРезультатПроверкиПодписи() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ПроверкаВыполнена", Ложь);
	Результат.Вставить("ТребуетсяДоверенность", Ложь);
	Результат.Вставить("Доверенность", Неопределено);
	Результат.Вставить("ДатаПроверки", '00010101');
	Результат.Вставить("ПодписьВерна", Ложь);
	Результат.Вставить("ПротоколПроверки", Неопределено);
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);
	Возврат Результат;
	
КонецФункции

// Возвращает результат проверки подписей файла сообщения электронного документа по МЧД.
// 
// Параметры:
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписи
// 
// Возвращаемое значение:
//  См. НовыйРезультатПроверкиПодписи
Функция ПроверитьПодпись(ПараметрыПроверки) Экспорт
	
	Результат = НовыйРезультатПроверкиПодписи();
	Результат.ПроверкаВыполнена = Истина;
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ПараметрыПроверки.ТребуетсяПроверкаМЧДНаКлиенте;
	
	СвойстваПодписи = ПараметрыПроверки.СвойстваПодписи;

	Если СвойстваПодписи.ТипПодписи = Перечисления.ТипыПодписиКриптографии.СМеткойДоверенногоВремениCAdEST Тогда
		РасширенныеСвойстваПодписи = ЭлектроннаяПодпись.СвойстваПодписи(СвойстваПодписи.Подпись);
		ДатаПодписи = РасширенныеСвойстваПодписи.ДатаПодписиИзМетки;
	Иначе
		ДатаПодписи = СвойстваПодписи.ДатаПодписи;
	КонецЕсли;
	
	ПротоколПроверки = НовыйПротоколПроверкиПодписи();
	ПроверкаПодписи = ПротоколПроверки.ПроверкаПодписиДокумента;
	ПроверкаПодписи.Выполнено = Истина;
	ПроверкаПодписи.ДатаПроверки = СвойстваПодписи.ДатаПроверкиПодписи;
	ПроверкаПодписи.Успех = СвойстваПодписи.ПодписьВерна;
	Если Не СвойстваПодписи.ПодписьВерна Тогда
		ПроверкаПодписи.Ошибка = СвойстваПодписи.Комментарий;
	КонецЕсли;
	
	ПроверкаДоверенности = ПротоколПроверки.ПроверкаМЧД;
	
	ИННПредставителя = "";
	Если ЗначениеЗаполнено(СвойстваПодписи.Сертификат) Тогда
		СертификатКриптографии = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
		ИННПредставителя = КриптографияБЭД.ИННСубъектаСертификата(СертификатКриптографии);
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(СертификатКриптографии);
		СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(СертификатКриптографии);
	
		Результат.ТребуетсяДоверенность = ТребуетсяМашиночитаемаяДоверенность(
			ПараметрыПроверки.ИННДоверителя, СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) Тогда
		
		Результат.Доверенность = ПараметрыПроверки.СведенияМЧД.Ссылка;
		Если Не ПараметрыПроверки.ОшибкаПолученияДанныхСРРФНС Тогда
			Результат.ПроверкаВыполнена = Ложь;
		КонецЕсли;
		
		ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя,
			ДатаПодписи);
		
		ПроверкаДоверенности.Выполнена = Истина;
		ПроверкаДоверенности.ОшибкаВыполнения = ПараметрыПроверки.ТекстОшибки;
	Иначе
		Результат.Доверенность = ПараметрыПроверки.СведенияМЧД.Ссылка;
		ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя,
			ДатаПодписи);
	КонецЕсли;
	
	Результат.ПодписьВерна = ПроверкаПодписи.Успех 
		И МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(ПротоколПроверки.ПроверкаМЧД);
	
	Результат.ПротоколПроверки = ПротоколПроверки;
	Результат.ДатаПроверки = ТекущаяДатаСеанса();
	
	Возврат Результат;
	
КонецФункции

// Записать результат проверки подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
//  РезультатПроверки - См. ПроверитьПодпись
Процедура ЗаписатьРезультатПроверкиПодписи(ПодписанныйОбъект, ХешПодписи, РезультатПроверки) Экспорт
	
	Если РезультатПроверки.ПроверкаВыполнена И Не РезультатПроверки.ТребуетсяДоверенность Тогда
		ОтключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи);
		ИнтерфейсДокументовЭДО.ЗаписатьПроверкуЭлектронныхПодписейЭДО(ПодписанныйОбъект);
		Возврат;
	КонецЕсли;
	
	ПротоколПроверкиJSON = ОбщегоНазначенияБЭД.JSONСтрока(РезультатПроверки.ПротоколПроверки);
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
	МенеджерЗаписи.ХешПодписи = ХешПодписи;
	МенеджерЗаписи.Доверенность = РезультатПроверки.Доверенность;
	МенеджерЗаписи.ПроверкаВыполнена = РезультатПроверки.ПроверкаВыполнена;
	МенеджерЗаписи.ДатаПроверки = РезультатПроверки.ДатаПроверки;
	МенеджерЗаписи.ПодписьВерна = РезультатПроверки.ПодписьВерна;
	МенеджерЗаписи.ПроверкаВыполненаВРучную = 
		МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(РезультатПроверки);
	
	МенеджерЗаписи.Пользователь = Пользователи.ТекущийПользователь();
	МенеджерЗаписи.ИдентификаторПользователя = 
		ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	СформированПротокол = ЗначениеЗаполнено(РезультатПроверки.ПротоколПроверки);
	
	Если СформированПротокол Тогда
		МенеджерЗаписи.ПротоколПроверки = Новый ХранилищеЗначения(ПротоколПроверкиJSON, Новый СжатиеДанных(9));
	Иначе
		МенеджерЗаписи.ПротоколПроверки = Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИнтерфейсДокументовЭДО.ЗаписатьПроверкуЭлектронныхПодписейЭДО(ПодписанныйОбъект);
	
КонецПроцедуры

// Добавляет подпись в очередь на проверку по доверенности.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
Процедура ВключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
	МенеджерЗаписи.ХешПодписи = ХешПодписи;
	
	УстановитьПривилегированныйРежим(Истина);
	МенеджерЗаписи.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает результаты проверок подписей по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешиПодписей - Массив из см. КриптографияБЭД.ХешПодписи
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - См. КриптографияБЭД.ХешПодписи
//  * Значение - См. НовыйРезультатПроверкиПодписи
Функция РезультатыПроверокПодписей(ПодписанныйОбъект, ХешиПодписей) Экспорт
	
	РезультатыПроверок = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи,
		|	ЭлектронныеПодписиПоМЧД.Доверенность,
		|	ЭлектронныеПодписиПоМЧД.ПроверкаВыполнена,
		|	ЭлектронныеПодписиПоМЧД.ДатаПроверки,
		|	ЭлектронныеПодписиПоМЧД.ПодписьВерна,
		|	ЭлектронныеПодписиПоМЧД.ПротоколПроверки
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И ЭлектронныеПодписиПоМЧД.ХешПодписи В (&ХешиПодписей)";
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ПодписанныйОбъект);
	Запрос.УстановитьПараметр("ХешиПодписей", ХешиПодписей);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат РезультатыПроверок;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		РезультатПроверки = НовыйРезультатПроверкиПодписи();
		РезультатПроверки.Доверенность = Выборка.Доверенность;
		РезультатПроверки.ДатаПроверки = Выборка.ДатаПроверки;
		РезультатПроверки.ПодписьВерна = Выборка.ПодписьВерна;
		РезультатПроверки.ПроверкаВыполнена = Выборка.ПроверкаВыполнена;
		
		ПротоколПроверкиJSON = Выборка.ПротоколПроверки.Получить();
		Если ПротоколПроверкиJSON <> Неопределено Тогда
			ПротоколПроверки = ПрочитатьПротоколПроверкиJSON(ПротоколПроверкиJSON);
			РезультатПроверки.ПротоколПроверки = ПротоколПроверки;
		КонецЕсли;
		
		РезультатыПроверок.Вставить(Выборка.ХешПодписи, РезультатПроверки);
		
	КонецЦикла;
	
	Возврат РезультатыПроверок;
	
КонецФункции

// Возвращает результат проверки подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - см. КриптографияБЭД.ХешПодписи
// 
// Возвращаемое значение:
//  - Неопределено - если для подписи не требуется проверка по МЧД
//  - См. НовыйРезультатПроверкиПодписи
Функция РезультатПроверкиПодписи(ПодписанныйОбъект, ХешПодписи) Экспорт
	
	ХешиПодписей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ХешПодписи);
	РезультатыПроверок = РезультатыПроверокПодписей(ПодписанныйОбъект, ХешиПодписей);
	Возврат РезультатыПроверок[ХешПодписи];
	
КонецФункции

// Параметры:
//  Доверенность - СправочникОбъект.МЧД003
//               - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//  			 - ОпределяемыйТип.МашиночитаемаяДоверенность
//  			 - ДанныеФормыСтруктура:
//  			   * Верна - Булево
//  			   * ТекстОшибкиПроверкиМЧД - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ПроверенаВручную(Доверенность) Экспорт
	ЭтоСсылка = Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип.СодержитТип(ТипЗнч(Доверенность))
		И Доверенность <> Неопределено;
	Если ЭтоСсылка Тогда
		СвойстваДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, "Верна, ТекстОшибкиПроверкиМЧД");
	Иначе
		СвойстваДоверенности = Доверенность;
	КонецЕсли;
	
	Возврат СвойстваДоверенности.Верна И СтрНайти(СвойстваДоверенности.ТекстОшибкиПроверкиМЧД, НСтр("ru='Проверена вручную:'")) > 0;
КонецФункции

#КонецОбласти

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
#Область Версия_1_9_5

#Область МашиночитаемыеДоверенности_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "МашиночитаемыеДоверенности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.10.7";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("42b6ac9c-600e-4a65-a86a-d2c54413dc1c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "МашиночитаемыеДоверенности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление машиночитаемых доверенностей'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.МашиночитаемыеДоверенностиЭД.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РезультатыПроверкиМЧДОператором.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ЭлектронныеПодписиПоМЧД.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СертификатыУчетныхЗаписейЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область ПравилаПроверкиПолномочий_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ПравилаПроверкиПолномочийМЧД.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.12.37";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6a4332b4-de7b-497a-abcf-5b1008f3c4d7");
	Обработчик.Многопоточный = Истина;
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"Справочники.ПравилаПроверкиПолномочийМЧД.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление правил проверки полномочий МЧД'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МашиночитаемыеДоверенности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область МашиночитаемыеДоверенности_ВключитьИспользованиеРеестраДоверенностейФНСЭДО

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.5.9";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "МашиночитаемыеДоверенности.ВключитьИспользованиеРеестраДоверенностейФНСЭДО";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("9a711cb1-24ef-4a1d-aa6b-c787fbcf178d");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.ИспользоватьРеестрДоверенностейФНСЭДО";
	Обработчик.ИзменяемыеОбъекты = "Константа.ИспользоватьРеестрДоверенностейФНСЭДО";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий =
		НСтр("ru = '1С:Обмен с контрагентами: включение использования реестра доверенностей ФНС ЭДО'");
	
#КонецОбласти

#Область Справочники_КлассификаторПолномочийФНСМЧД002_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.12.43";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.КлассификаторПолномочийФНСМЧД002.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("848fb18f-874a-4c0e-8fd9-b77cc97cc793");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.КлассификаторПолномочийФНСМЧД002.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.КлассификаторПолномочийФНСМЧД002.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление классификатора полномочий ФНС (МЧД 002).'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.КлассификаторПолномочийФНСМЧД002.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("70afa5e7-8de4-4de1-9b5a-eefa0b472779");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.КлассификаторПолномочийФНСМЧД002.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.КлассификаторПолномочийФНСМЧД002.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление классификатора полномочий ФНС (МЧД 002) (начальное заполнение).'");

	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#Область Справочники_КлассификаторПолномочийМЧД003_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.9.12.43";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.КлассификаторПолномочийМЧД003.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("47512c62-7886-4b7a-8450-db6dc8a12e8e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.КлассификаторПолномочийМЧД003.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.КлассификаторПолномочийМЧД003.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление классификатора полномочий (МЧД 003).'");
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Справочники.КлассификаторПолномочийМЧД003.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1255a0a9-7ea7-4e94-b243-ca0aacf667a2");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ЭлектронноеВзаимодействие.ЗаполнениеДанныхОбновления";
	Обработчик.ПроцедураПроверки = "";
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.КлассификаторПолномочийМЧД003.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.КлассификаторПолномочийМЧД003.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление классификатора полномочий (МЧД 003) (начальное заполнение).'");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.СвязьВидовИФорматовДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсиюНачальноеЗаполнение";
	НоваяСтрока.Порядок = "После";
	
#КонецОбласти

#КонецОбласти

#Область Версия_1_9_11

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.МЧД003.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.11.3";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Многопоточный = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("e57b7d51-a618-42c9-b4e1-92358c5d1455");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.МЧД003.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: Заполнение сведений по передоверию.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.МЧД003.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.МЧД003.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.МЧД003.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

#КонецОбласти

КонецПроцедуры

// См. ОбменСКонтрагентамиИнтеграцияСобытия.ПриДобавленииПереименованийОбъектовМетаданных
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.9.5.8",
		"Роль.ДобавлениеИзменениеМашиночитаемыхДоверенностей",
		"Роль.ДобавлениеИзменениеМЧДОрганизацийЭДО",
		"БиблиотекаЭлектронныхДокументовДемо");
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог,
		"1.9.5.8",
		"Роль.ЧтениеМашиночитаемыхДоверенностей",
		"Роль.ЧтениеМЧДЭДО",
		"БиблиотекаЭлектронныхДокументовДемо");
	
КонецПроцедуры

// Выгружает данные доверенности в zip архив, в составе которого содержатся xml файл доверенности, подпись
// и файл визуализации.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура - Выгрузить данные доверенности:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево - Истина, если выгрузить данные не удалось.
// * ТекстОшибки - Строка - заполнено, если свойство Ошибка = Истина.
Функция ВыгрузитьДанныеДоверенности(Ссылка) Экспорт
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ОписаниеФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	РезультатВыгрузки.Вставить("Ошибка", Ложь);
	РезультатВыгрузки.Вставить("ТекстОшибки", "");
	
	Если Ссылка.Пустая() Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	ЗначенияРеквизитов = РеквизитыДляВыгрузкиДанныхДоверенности(Ссылка);
	
	Подпись = ЗначенияРеквизитов.ЭлектроннаяПодпись;
	Если ТипЗнч(Подпись) = Тип("ХранилищеЗначения") Тогда
		Подпись = ЗначенияРеквизитов.ЭлектроннаяПодпись.Получить();
	КонецЕсли;
	
	Если НЕ ЗначенияРеквизитов.Подписана Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	Если Подпись = Неопределено Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	ДвоичныеДанныеДоверенности = ЗначенияРеквизитов.XMLфайлМЧД.Получить();
	Если ДвоичныеДанныеДоверенности = Неопределено Тогда
		Возврат РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки);
	КонецЕсли;
	
	Файлы = Новый Массив;
	
	ИмяВременногоКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	ИмяФайлаДоверенностьБезРасширения = ПолучитьИмяФайлаМЧД(Ссылка);
	ИмяФайлаДоверенность = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".xml";
	ИмяФайлаПодпись = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".p7s";
	
	ДвоичныеДанныеДоверенности.Записать(ИмяФайлаДоверенность);
	Файлы.Добавить(ИмяФайлаДоверенность);
	
	Подпись.Записать(ИмяФайлаПодпись);
	Файлы.Добавить(ИмяФайлаПодпись);
		
	ИмяФайлаВизуализация = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".pdf";
	РезультатФормирования = ТабличныйДокументМЧД(ДвоичныеДанныеДоверенности);
	
	ТабличныйДокумент = РезультатФормирования.ПредставлениеДокумента;
	Если ТабличныйДокумент <> Неопределено Тогда
		ТабличныйДокумент.Записать(ИмяФайлаВизуализация, ТипФайлаТабличногоДокумента.PDF);
		Файлы.Добавить(ИмяФайлаВизуализация);
	КонецЕсли;
	
	Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(Файлы);
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	РезультатВыгрузки.ОписаниеФайла.ИмяФайла = ИмяФайлаДоверенностьБезРасширения + ".zip";
	РезультатВыгрузки.ОписаниеФайла.ДвоичныеДанные = Архив;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

// Возвращает данные доверенности в виде строки XML.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	   - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Строка - данные доверенности в виде строки XML.
Функция ВыгрузитьXML(Ссылка) Экспорт
	
	ИмяРеквизитаФайлаМЧД = ?(ТипЗнч(Ссылка) = Тип("СправочникСсылка.МЧД003"), "ФайлМЧД", "XMLфайлМЧД");
	ХранилищеДанныхДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизитаФайлаМЧД);
	ДвоичныеДанныеДоверенности = ХранилищеДанныхДоверенности.Получить();
	Если ДвоичныеДанныеДоверенности = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Кодировка = ОбщегоНазначенияБЭД.КодировкаИзОбъявленияXML(ДвоичныеДанныеДоверенности);
	
	Поток = ДвоичныеДанныеДоверенности.ОткрытьПотокДляЧтения();
	
	Если ЗначениеЗаполнено(Кодировка) Тогда
		ЧтениеТекста = Новый ЧтениеТекста(Поток, Кодировка);
	Иначе
		ЧтениеТекста = Новый ЧтениеТекста(Поток);
	КонецЕсли;
	
	СтрокаXML = ЧтениеТекста.Прочитать();
	
	ЧтениеТекста.Закрыть();
	Поток.Закрыть();
	
	Если СтрокаXML = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат СтрокаXML;
	
КонецФункции

// Параметры:
//  Ссылка - См. ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  ТабличныйДокумент - Представление МЧД или пустой табличный документ, если не удалось сформировать представление
//
Функция ТабличныйДокументМЧДПоСсылке(Ссылка) Экспорт
	
	ТабличныйДокумент = Неопределено;
	
	Если ЭтоЧерновикМЧД003(Ссылка) Тогда
		
		ДвоичныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФайлМЧД").Получить();
		ОбъектДоверенности = Справочники.МЧД003.ОбъектXDTOМЧДИзДвоичныхДанных(ДвоичныеДанные);
		ТабличныйДокумент = Справочники.МЧД003.ТабличныйДокументМЧД(ОбъектДоверенности.Доверенность);
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций") Тогда
		ДвоичныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "XMLфайлМЧД").Получить();
		ТабличныйДокумент = ТабличныйДокументМЧД(ДвоичныеДанные).ПредставлениеДокумента;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов") Тогда
		ДвоичныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "XMLфайлМЧД").Получить();
		ТабличныйДокумент = ТабличныйДокументМЧД(ДвоичныеДанные, Истина).ПредставлениеДокумента;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.МЧД003") Тогда
		ДвоичныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФайлМЧД").Получить();
		ТабличныйДокумент = ТабличныйДокументМЧД(ДвоичныеДанные).ПредставлениеДокумента;
	Иначе
		ШаблонОшибки = НСтр("ru='Для доверенности типа %1 не определен метод получения табличного документа - представления';");
		ВызватьИсключение СтрШаблон(ШаблонОшибки, ТипЗнч(Ссылка));
	КонецЕсли;
	
	Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		Возврат ТабличныйДокумент;
	Иначе
		Возврат Новый ТабличныйДокумент;
	КонецЕсли;
	
КонецФункции

// Возвращает табличный документ МЧД.
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные.
//  ЭтоМЧДКонтрагента - Булево
// 
// Возвращаемое значение:
//  Структура:
//   * ПредставлениеДокумента - Неопределено, ТабличныйДокумент -  табличный документ МЧД
//   * Успех - Булево - Табличный документ сформирован
Функция ТабличныйДокументМЧД(ДвоичныеДанные, ЭтоМЧДКонтрагента = Ложь) Экспорт

	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ПредставлениеДокумента", Неопределено);
	РезультатФормирования.Вставить("Успех", Ложь);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ТекстСообщения = НСтр(
				"ru = 'Ошибка формирования табличного документа МЧД'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат РезультатФормирования;	
	КонецЕсли;				
	
	РезультатЧтения = ДанныеИзФайлаОбмена(ДвоичныеДанные);
	Если НЕ РезультатЧтения.Успех Тогда
		Возврат РезультатФормирования;
	КонецЕсли;
	
	Если РезультатЧтения.ЭтоОбъектXDTO Тогда
		
		ТабличныйДокумент = 
			ТабличныйДокументПоФормату(РезультатЧтения.ВерсияФорматаМЧД, РезультатЧтения.ДанныеДоверенности);
		РезультатФормирования.ПредставлениеДокумента = ТабличныйДокумент;
		РезультатФормирования.Успех = ТабличныйДокумент <> Неопределено;
		
	Иначе
	
		СтруктураДанных = РезультатЧтения.ДанныеДоверенности;
		
		ДоверительФЛ_ФИО = "";
		ДоверительФЛ_Удостоверение = "";
		
		ЭтоПередоверие = ЗначениеЗаполнено(
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанных, "НомерРодительскойДоверенности", ""));
	
		ЭтоДоверительЮрЛицо = СтруктураДанных.ТипОрганизации = "ЮЛ" ИЛИ СтруктураДанных.ТипОрганизации = "ИО";
		
		Для каждого Строка Из СтруктураДанных.ФИО Цикл
			Если Строка.Владелец = Перечисления.СубъектыДоверенности.ДоверительРук
				Или Строка.Владелец = Перечисления.СубъектыДоверенности.ДоверительФЛ Тогда
				ДоверительФЛ_ФИО = ПолучитьПредставлениеФИО(Строка);
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого Строка Из СтруктураДанных.УдостоверенияЛичности Цикл
			Если Строка.Владелец = Перечисления.СубъектыДоверенности.ДоверительФЛ Тогда
				ДоверительФЛ_Удостоверение = ПолучитьПредставлениеУдостоверение(Строка);
			КонецЕсли;
		КонецЦикла;
		
		ИмяСправочника = ?(ЭтоМЧДКонтрагента, "Контрагенты", "Организации");
		
		Доверитель = Неопределено;
		СведенияДоверителя = Новый Структура("ИНН", 
			?(ЭтоДоверительЮрЛицо, СтруктураДанных.ДоверительЮЛ_ИНН, СтруктураДанных.ДоверительФЛ_ИНН));
		СведенияПодписанта = Новый Структура("ИНН",
			?(ЭтоДоверительЮрЛицо, СтруктураДанных.ЛицоБезДовФЛ_ИНН, СтруктураДанных.ДоверительФЛ_ИНН));
		
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяСправочника, Доверитель, , СведенияДоверителя);
		Подписант = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияПодписанта);
			
		СтруктураДанных.Вставить("ЗаголовокДолжность",
			?(ЗначениеЗаполнено(СтруктураДанных.ЛицоБезДовФЛ_Должность), НСтр("ru = 'Должность'"), ""));
		СтруктураДанных.Вставить("Должность", СтруктураДанных.ЛицоБезДовФЛ_Должность);
		СтруктураДанных.Вставить("ДоверительФИО", ДоверительФЛ_ФИО);
		СтруктураДанных.Вставить("ДоверительИНН", 
			?(ЭтоДоверительЮрЛицо, СтруктураДанных.ЛицоБезДовФЛ_ИНН, СтруктураДанных.ДоверительФЛ_ИНН));
		СтруктураДанных.Вставить("ДоверительСНИЛС", 
			?(ЭтоДоверительЮрЛицо, СтруктураДанных.ЛицоБезДовФЛ_СНИЛС, СтруктураДанных.ДоверительФЛ_СНИЛС));
		
		СтруктураДанных.Вставить("Подписант", Подписант);
		СтруктураДанных.Вставить("Доверитель", Доверитель);
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		ИмяМакета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("КарточкаМЧД_%1", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		Макет = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьМакет(ИмяМакета);
		
		ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
		ОбластьШапкаПередоверие = Макет.ПолучитьОбласть("ОбластьШапкаПередоверие");
		
		ОбластьЗаголовокСведенияДоверителя = Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияДоверителя");
		ОбластьЗаголовокПередовериеЛицоПередавшееПолномочия = Макет.ПолучитьОбласть("ОбластьЗаголовокПередовериеЛицоПередавшееПолномочия");
		ОбластьЗаголовокСведенияОПредставителе = Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияОПредставителе");
		ОбластьЗаголовокСведенияОПредставителях = Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияОПредставителях");
		ОбластьЗаголовокСведенияОПредставителеФИО = Макет.ПолучитьОбласть("ОбластьЗаголовокСведенияОПредставителеФИО");
		ОбластьЗаголовокПередовериеЛицоПолучившееПолномочия = Макет.ПолучитьОбласть("ОбластьЗаголовокПередовериеЛицоПолучившееПолномочия");
		ОбластьЗаголовокПередовериеЛицаПолучившиеПолномочия = Макет.ПолучитьОбласть("ОбластьЗаголовокПередовериеЛицаПолучившиеПолномочия");
		
		ОбластьСведенияОбОрганизацииДоверителя = Макет.ПолучитьОбласть("ОбластьСведенияОбОрганизацииДоверителя");
		ОбластьСведенияОДоверителеИП = Макет.ПолучитьОбласть("ОбластьСведенияОДоверителеИП");
		ОбластьСведенияОПодписанте = Макет.ПолучитьОбласть("ОбластьСведенияОПодписанте");
		ОбластьСведенияОДоверенномЛице = Макет.ПолучитьОбласть("ОбластьСведенияОДоверенномЛице");
		ОбластьСведенияОПредставителеИП = Макет.ПолучитьОбласть("ОбластьСведенияОПредставителеИП");
		
		ОбластьПередовериеДоверительЮлЛицо = Макет.ПолучитьОбласть("ОбластьПередовериеДоверительЮлЛицо");
		ОбластьПередовериеДоверительФизЛицо = Макет.ПолучитьОбласть("ОбластьПередовериеДоверительФизЛицо");
		ОбластьПередовериеДоверительИП = Макет.ПолучитьОбласть("ОбластьПередовериеДоверительИП");
		ОбластьПередовериеПолучательПолномочийФизЛицо = Макет.ПолучитьОбласть("ОбластьПередовериеПолучательПолномочийФизЛицо");
		ОбластьПередовериеПолучательЮлЛицо = Макет.ПолучитьОбласть("ОбластьПередовериеПолучательЮлЛицо");
		ОбластьПередовериеПолучательИП = Макет.ПолучитьОбласть("ОбластьПередовериеПолучательИП");
		ОбластьПередовериеДоверительФизЛицоЮЛ = Макет.ПолучитьОбласть("ОбластьПередовериеДоверительФизЛицоЮЛ");
		
		ОбластьЗаголовокПолномочия = Макет.ПолучитьОбласть("ОбластьЗаголовокПолномочия");
		ОбластьПереченьПолномочий = Макет.ПолучитьОбласть("ОбластьПереченьПолномочий");
		ОбластьПредставительОрганизация = Макет.ПолучитьОбласть("ОбластьПредставительОрганизация");
		ОбластьБезПраваПередоверия = Макет.ПолучитьОбласть("ОбластьБезПраваПередоверия");
		ОбластьСПравомПередоверия = Макет.ПолучитьОбласть("ОбластьСПравомПередоверия");
		ОбластьИндивидуальныеПолномочия =  Макет.ПолучитьОбласть("ОбластьИндивидуальныеПолномочия");
		ОбластьСовместныеПолномочия =  Макет.ПолучитьОбласть("ОбластьСовместныеПолномочия");
		ОбластьОднократногоПередоверия = Макет.ПолучитьОбласть("ОбластьОднократногоПередоверия");
		
		ОбластьОтступ = Макет.ПолучитьОбласть("ОбластьОтступ");
		ОбластьОтступЗаполнение = Макет.ПолучитьОбласть("ОбластьОтступЗаполнение");
		ОбластьДокументУдостоверяющийЛичность = Макет.ПолучитьОбласть("ОбластьДокументУдостоверяющийЛичность");
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ОбластьШапка.Параметры.Заполнить(СтруктураДанных);
		ОбластьШапкаПередоверие.Параметры.Заполнить(СтруктураДанных);
		
		ОбластьСведенияОбОрганизацииДоверителя.Параметры.Заполнить(СтруктураДанных);
		ОбластьСведенияОДоверителеИП.Параметры.Заполнить(СтруктураДанных);
		ОбластьСведенияОПодписанте.Параметры.Заполнить(СтруктураДанных);
		ОбластьСведенияОДоверенномЛице.Параметры.Заполнить(СтруктураДанных);
		ОбластьСведенияОПредставителеИП.Параметры.Заполнить(СтруктураДанных);
		ОбластьПредставительОрганизация.Параметры.Заполнить(СтруктураДанных);
		
		ОбластьПередовериеДоверительЮлЛицо.Параметры.Заполнить(СтруктураДанных);
		ОбластьПередовериеДоверительИП.Параметры.Заполнить(СтруктураДанных);
		ОбластьПередовериеДоверительФизЛицо.Параметры.Заполнить(СтруктураДанных);
		ОбластьПередовериеПолучательПолномочийФизЛицо.Параметры.Заполнить(СтруктураДанных);
		ОбластьПередовериеПолучательЮлЛицо.Параметры.Заполнить(СтруктураДанных);
		ОбластьПередовериеПолучательИП.Параметры.Заполнить(СтруктураДанных);
		ОбластьПередовериеДоверительФизЛицоЮЛ.Параметры.Заполнить(СтруктураДанных);
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
			
		НесколькоПредставителей = СтруктураДанных.Представители.Количество() > 1;
	
		Если ЭтоПередоверие Тогда
			
			ТабличныйДокумент.Вывести(ОбластьШапкаПередоверие);
			ТабличныйДокумент.Вывести(ОбластьЗаголовокПередовериеЛицоПередавшееПолномочия);
			
			Если (СтруктураДанных.Свойство("ТипДоверителяОсновнойДоверенности")
					И СтруктураДанных.ТипДоверителяОсновнойДоверенности = "ЮЛ")
				Или (СтруктураДанных.Свойство("ТипДоверителяОсновнойДоверенности")
					И СтруктураДанных.ТипДоверителяОсновнойДоверенности = "ИО") Тогда
				ТабличныйДокумент.Вывести(ОбластьПередовериеДоверительЮлЛицо);
				ТабличныйДокумент.Вывести(ОбластьПередовериеДоверительФизЛицоЮЛ);
			ИначеЕсли СтруктураДанных.Свойство("ТипДоверителяОсновнойДоверенности")
					И СтруктураДанных.ТипДоверителяОсновнойДоверенности = "ИП" Тогда
				ТабличныйДокумент.Вывести(ОбластьПередовериеДоверительИП);
			Иначе
				ТабличныйДокумент.Вывести(ОбластьПередовериеДоверительФизЛицо);
			КонецЕсли;
			
			Если Не ЭтоДоверительЮрЛицо И ЗначениеЗаполнено(ДоверительФЛ_Удостоверение) Тогда
				ОбластьДокументУдостоверяющийЛичность.Параметры.ДокументУдостоверяющийЛичность = 
					ДоверительФЛ_Удостоверение;
				ТабличныйДокумент.Вывести(ОбластьДокументУдостоверяющийЛичность);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьОтступ);
			
			Если НесколькоПредставителей Тогда 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокПередовериеЛицаПолучившиеПолномочия);
			Иначе
				ТабличныйДокумент.Вывести(ОбластьЗаголовокПередовериеЛицоПолучившееПолномочия);
			КонецЕсли;
			
			Для Каждого СведенияОПредставителе Из СтруктураДанных.Представители Цикл
				
				Если НесколькоПредставителей Тогда 
					ОбластьЗаголовокСведенияОПредставителеФИО.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияОПредставителеФИО);
				КонецЕсли;
				
				Если СведенияОПредставителе.ТипУполномоченногоПредставителя = "ЮЛ"
					Или СведенияОПредставителе.ТипУполномоченногоПредставителя = "ИО" Тогда
					
					ОбластьПередовериеПолучательЮлЛицо.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьПередовериеПолучательЮлЛицо);
					
					ОбластьПередовериеПолучательПолномочийФизЛицо.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьПередовериеПолучательПолномочийФизЛицо);
					
				ИначеЕсли СведенияОПредставителе.ТипУполномоченногоПредставителя = "ИП" Тогда
					ОбластьПередовериеПолучательИП.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьПередовериеПолучательИП);
				Иначе
					ОбластьПередовериеПолучательПолномочийФизЛицо.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьПередовериеПолучательПолномочийФизЛицо);
				КонецЕсли;
				
				Если СведенияОПредставителе.Свойство("ПредставлениеУдостоверения") Тогда 
					ОбластьДокументУдостоверяющийЛичность.Параметры.ДокументУдостоверяющийЛичность =
						СведенияОПредставителе.ПредставлениеУдостоверения;
					ТабличныйДокумент.Вывести(ОбластьДокументУдостоверяющийЛичность);
				КонецЕсли;
				
			КонецЦикла;
					
		Иначе
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияДоверителя);
			
			Если ЭтоДоверительЮрЛицо Тогда
				ТабличныйДокумент.Вывести(ОбластьСведенияОбОрганизацииДоверителя);
				ТабличныйДокумент.Вывести(ОбластьСведенияОПодписанте);
			Иначе
				ТабличныйДокумент.Вывести(ОбластьСведенияОДоверителеИП);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьОтступ);
			
			Если НесколькоПредставителей Тогда 
				ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияОПредставителях);
			Иначе
				ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияОПредставителе);
			КонецЕсли;
			
			Для Каждого СведенияОПредставителе Из СтруктураДанных.Представители Цикл
				
				Если НесколькоПредставителей Тогда 
					ОбластьЗаголовокСведенияОПредставителеФИО.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьЗаголовокСведенияОПредставителеФИО);
				КонецЕсли;
				
				Если СведенияОПредставителе.ТипУполномоченногоПредставителя = "ЮЛ"
					ИЛИ СведенияОПредставителе.ТипУполномоченногоПредставителя = "ИО" Тогда 
	
					ОбластьПредставительОрганизация.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьПредставительОрганизация);
	
					ОбластьСведенияОДоверенномЛице.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьСведенияОДоверенномЛице);
	
				ИначеЕсли СведенияОПредставителе.ТипУполномоченногоПредставителя = "ИП" Тогда 
					ОбластьСведенияОПредставителеИП.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьСведенияОПредставителеИП);
				Иначе
					ОбластьСведенияОДоверенномЛице.Параметры.Заполнить(СведенияОПредставителе);
					ТабличныйДокумент.Вывести(ОбластьСведенияОДоверенномЛице);
				КонецЕсли;
	
				Если СведенияОПредставителе.Свойство("ПредставлениеУдостоверения") Тогда 
					ОбластьДокументУдостоверяющийЛичность.Параметры.ДокументУдостоверяющийЛичность =
						СведенияОПредставителе.ПредставлениеУдостоверения;
					ТабличныйДокумент.Вывести(ОбластьДокументУдостоверяющийЛичность);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		Полномочия = ПолномочияДоверенности(СтруктураДанных);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовокПолномочия);
		Для Каждого СтрокаПолномочий Из Полномочия Цикл
			ОбластьПереченьПолномочий.Параметры.ПереченьПолномочий = СтрокаПолномочий;
			ТабличныйДокумент.Вывести(ОбластьПереченьПолномочий);
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьОтступЗаполнение);
		
		Если СтруктураДанных.Свойство("ТипПередоверия") Тогда
			Если СтруктураДанных.ТипПередоверия = "1" Тогда
				ТабличныйДокумент.Вывести(ОбластьОднократногоПередоверия);
			ИначеЕсли СтруктураДанных.ТипПередоверия = "3" Тогда
				ТабличныйДокумент.Вывести(ОбластьСПравомПередоверия);
			Иначе
				ТабличныйДокумент.Вывести(ОбластьБезПраваПередоверия);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураДанных.СовместныеПолномочия Тогда
			ТабличныйДокумент.Вывести(ОбластьСовместныеПолномочия);
		Иначе
			ТабличныйДокумент.Вывести(ОбластьИндивидуальныеПолномочия);
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		РезультатФормирования.ПредставлениеДокумента = ТабличныйДокумент;
		РезультатФормирования.Успех = ТабличныйДокумент <> Неопределено;
	
	КонецЕсли;
	
	Возврат РезультатФормирования;
	
КонецФункции
	
#Область XDTO

// Читает XDTO-объект МЧД из двоичных данных.
// 
// Параметры:
//  ДанныеМЧД - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Структура:
// * ТекстОшибки - Строка
// * ОбъектМЧД - Неопределено
//             - ОбъектXDTO
Функция ОбъектXDTOМЧД(ДанныеМЧД) Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ОбъектМЧД", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
		
	Попытка
		
		РезультатЧтения = ДанныеXMLМЧД(ДанныеМЧД);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		Результат.ОбъектМЧД = РезультатЧтения.ДанныеДоверенности;
		
	Исключение
		
		ВидОперации = НСтр("ru = 'Загрузка машиночитаемой доверенности из файла.'");
		ТекстОшибки = НСтр("ru = 'Ошибка при чтении файла доверенности: файл не соответствует формату ФНС.'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Возвращает пустую структуру данных доверенности.
// 
// Возвращаемое значение:
//  Структура:
//  * НомерДоверенности - Строка
//  * ИННДоверителя - Строка
Функция НовыеДанныеДоверенности() Экспорт
	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("НомерДоверенности", "");
	ДанныеДоверенности.Вставить("ИННДоверителя", "");
	Возврат ДанныеДоверенности;
КонецФункции

// Возвращает новые общие свойства доверенности.
// 
// Возвращаемое значение:
//  Структура:
//  * НомерДоверенности - Строка
//  * НомерРодительскойДоверенности - Строка
//  * ДатаВыдачи - Дата
//  * ДатаОкончания - Дата
//  * Доверитель - Строка
//  * ДоверительИНН - Строка
//  * Верна - Булево
//  * Отозвана - Булево
//  * ДатаОтзыва - Дата
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * ПолномочияОграничены - Булево
//  * ПолномочияУказаныИзКлассификатора - Булево
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  		 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  		 - СправочникСсылка.МЧД003
Функция НовыеОбщиеСвойстваДоверенности() Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("НомерДоверенности", "");
	Свойства.Вставить("НомерРодительскойДоверенности", "");
	Свойства.Вставить("ДатаВыдачи", '00010101');
	Свойства.Вставить("ДатаОкончания", '00010101');
	Свойства.Вставить("Доверитель", "");
	Свойства.Вставить("ДоверительИНН", "");
	Свойства.Вставить("Верна", Ложь);
	Свойства.Вставить("Отозвана", Ложь);
	Свойства.Вставить("ДатаОтзыва", '00010101');
	Свойства.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	Свойства.Вставить("ДатаОбновленияСтатуса", '00010101');
	Свойства.Вставить("ПолномочияОграничены", Ложь);
	Свойства.Вставить("ПолномочияУказаныИзКлассификатора", Ложь);
	Свойства.Вставить("Ссылка", Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка());
	
	Возврат Свойства;
	
КонецФункции

// Формирует пустую структуру данных удостоверения личности субъекта МЧД.
// 
// Возвращаемое значение:
//  Структура:
//  * СерДок - Строка
//  * НомДок - Строка
//  * ДатаДок - Дата
//  * ВыдДок - Строка
//  * ВидДок - Строка
//  * КодВыдДок - Строка
//  * Владелец - ПеречислениеСсылка.СубъектыДоверенности
//  
Функция НовыеДанныеУдостоверенияЛичности() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СерДок", "");
	Результат.Вставить("НомДок", "");
	Результат.Вставить("ДатаДок", '00010101');
	Результат.Вставить("ВыдДок", "");
	Результат.Вставить("ВидДок", "");
	Результат.Вставить("КодВыдДок", "");
	Результат.Вставить("Владелец", Перечисления.СубъектыДоверенности.ПустаяСсылка());
	Возврат Результат;
	
КонецФункции

// Формирует представление удостоверения личности
//
// Параметры:
//  ДанныеУдостоверенияЛичности - См. НовыеДанныеУдостоверенияЛичности
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеУдостоверение(ДанныеУдостоверенияЛичности) Экспорт

	Представление = "";
	
	Если ЗначениеЗаполнено(ДанныеУдостоверенияЛичности.ВидДок) Тогда
		ВидыДокументов = МашиночитаемыеДоверенностиКлиентСервер.ВидыДокументовФизическихЛиц();
		Представление = ВидыДокументов.Получить(ДанныеУдостоверенияЛичности.ВидДок);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеУдостоверенияЛичности.СерДок) Тогда
		Представление = Представление + " " + ДанныеУдостоверенияЛичности.СерДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеУдостоверенияЛичности.НомДок) Тогда
		Представление = Представление + " " + ДанныеУдостоверенияЛичности.НомДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеУдостоверенияЛичности.ДатаДок) Тогда
		Представление = Представление + " " + НСтр("ru = 'выдан'") + " " + Формат(ДанныеУдостоверенияЛичности.ДатаДок, "ДЛФ=ДД");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеУдостоверенияЛичности.ВыдДок) Тогда
		Представление = Представление + " " + ДанныеУдостоверенияЛичности.ВыдДок;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеУдостоверенияЛичности.КодВыдДок) Тогда
		Представление = Представление + ", " + НСтр("ru = 'код подразделения'") + ":" + ДанныеУдостоверенияЛичности.КодВыдДок;
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Возвращает массив номеров МЧД из контейнера входящего сообщения
// 
// Параметры:
//  ФайлСообщения - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - Строка
//  
// Возвращаемое значение:
// 	 Соответствие Из КлючИЗначение:
//	 * Ключ - Строка - номер МЧД
//	 * Значение - Строка - ИНН доверителя
//
Функция НомераМЧДСИННДоверителяИзСообщений(ФайлСообщения, ХешПодписи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МашиночитаемыеДоверенностиСообщений.НомерДоверенности КАК НомерДоверенности,
		|	МашиночитаемыеДоверенностиСообщений.ДоверительИНН КАК ДоверительИНН,
		|	МашиночитаемыеДоверенностиСообщений.Доверенность КАК Доверенность
		|ИЗ
		|	РегистрСведений.МашиночитаемыеДоверенностиСообщений КАК МашиночитаемыеДоверенностиСообщений
		|ГДЕ
		|	МашиночитаемыеДоверенностиСообщений.ПодписанныйОбъект = &ПодписанныйОбъект
		|	И МашиночитаемыеДоверенностиСообщений.ХешПодписи = &ХешПодписи
		|	И (НЕ МашиночитаемыеДоверенностиСообщений.Доверенность В (&ЗначенияПустойДоверенности)
		|	ИЛИ НЕ МашиночитаемыеДоверенностиСообщений.НомерДоверенности = """")";
		
	Запрос.УстановитьПараметр("ПодписанныйОбъект", ФайлСообщения);
	Запрос.УстановитьПараметр("ХешПодписи", ХешПодписи);
	
	ЗначенияПустойДоверенности = 
		ОбщегоНазначенияБЭД.ПустыеЗначенияОписанияТипов(
			Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип);
	
	Запрос.УстановитьПараметр("ЗначенияПустойДоверенности", ЗначенияПустойДоверенности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	НомераМЧДСИННДоверителя = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		
		ИдентификаторыМДЧЗаполнены = 
			ЗначениеЗаполнено(Выборка.НомерДоверенности) И ЗначениеЗаполнено(Выборка.ДоверительИНН);

		Если ИдентификаторыМДЧЗаполнены Тогда
			НомераМЧДСИННДоверителя.Вставить(Выборка.НомерДоверенности, Выборка.ДоверительИНН);
		ИначеЕсли ЗначениеЗаполнено(Выборка.Доверенность) Тогда
			СправочникМЧД = СправочникМЧД(Выборка.Доверенность);
			СведенияМЧД = СправочникМЧД.СведенияМЧД(Выборка.Доверенность);
			НомераМЧДСИННДоверителя.Вставить(СведенияМЧД.НомерДоверенности, СведенияМЧД.ИННДоверителя);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомераМЧДСИННДоверителя;
	
КонецФункции

// Добавляет к подписанному объекту МЧД контрагента из ТК.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  Доверенности - см. ТранспортныеКонтейнерыЭДО.ПрочитатьКарточкуМЧД
Процедура ДобавитьДоверенностиСообщений(ПодписанныйОбъект, Доверенности) Экспорт
	
	Если Не ЗначениеЗаполнено(Доверенности) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Доверенность Из Доверенности Цикл

			ДанныеДоверенности = Доверенность.Значение;
			МенеджерЗаписи = РегистрыСведений.МашиночитаемыеДоверенностиСообщений.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
			МенеджерЗаписи.ХешПодписи = Доверенность.Ключ;

			Если ДанныеДоверенности.ЭтоФайловаяДоверенность Тогда

				Попытка
					Результат = ДанныеXMLМЧД(ДанныеДоверенности.Доверенность.ДвоичныеДанные);
				Исключение

					ШаблонОшибки = НСтр(
						"ru = 'Ошибка при чтении файла доверенности: файл %1 не соответствует формату ФНС.'");
					ТекстОшибки = СтрШаблон(ШаблонОшибки, ДанныеДоверенности.Доверенность.ИмяФайла);
					ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Запись МЧД сообщений ЭДО'"),
						ПодробныйТекстОшибки, ТекстОшибки);
					ВызватьИсключение;

				КонецПопытки;
				
				Если НЕ Результат.Успех Тогда
					ВызватьИсключение Результат.ТекстОшибки;
				КонецЕсли;

				МенеджерЗаписи.ДанныеДоверенности = Новый ХранилищеЗначения(ДанныеДоверенности.Доверенность.ДвоичныеДанные,
					Новый СжатиеДанных(9));
				МенеджерЗаписи.ДанныеПодписи = Новый ХранилищеЗначения(ДанныеДоверенности.Подпись.ДвоичныеДанные,
					Новый СжатиеДанных(9));
					
				ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
				ДанныеДляЗагрузки.ДанныеДоверенности = ДанныеДоверенности.Доверенность.ДвоичныеДанные;
				ДанныеДляЗагрузки.ДанныеПодписи = ДанныеДоверенности.Подпись.ДвоичныеДанные;
					
				ВерсияМЧД = ВерсияФорматаОбъектаМЧД(Результат.ДанныеДоверенности);
				Если ВерсияМЧД = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
					ДанныеДляЗагрузки.ДанныеПодписей.Добавить(ДанныеДоверенности.Подпись.ДвоичныеДанные);
					Результат = Справочники.МЧД003.ЗагрузитьМЧДИзФайла(ДанныеДляЗагрузки);
				Иначе
					Результат = 
						Справочники.МашиночитаемыеДоверенностиКонтрагентов.ЗагрузитьМЧДИзФайла(ДанныеДляЗагрузки);
				КонецЕсли;
				
				МенеджерЗаписи.Доверенность = Результат.МЧД;
				
			Иначе

				МенеджерЗаписи.НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
				МенеджерЗаписи.ДоверительИНН = ДанныеДоверенности.ДоверительИНН;
				МенеджерЗаписи.СсылкаНаРеестр = ДанныеДоверенности.СсылкаНаРеестр;
				
				НайденныеДоверенности = НайтиДоверенности(МенеджерЗаписи.НомерДоверенности, 
					МенеджерЗаписи.ДоверительИНН, 
					Справочники.МашиночитаемыеДоверенностиКонтрагентов);
					
				Если ЗначениеЗаполнено(НайденныеДоверенности) Тогда
					МенеджерЗаписи.Доверенность = НайденныеДоверенности[0];
				КонецЕсли;

			КонецЕсли;

			УстановитьПривилегированныйРежим(Истина);
			МенеджерЗаписи.Записать();
			УстановитьПривилегированныйРежим(Ложь);

		КонецЦикла;
	ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВидОперации = НСтр("ru = 'Запись МЧД сообщений ЭДО.'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробноеПредставлениеОшибки,
			КраткоеПредставлениеОшибки);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет к подписанному объекту МЧД организации.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на МЧД организации
//  
Процедура ДобавитьДоверенностьОрганизации(ПодписанныйОбъект, МЧД) Экспорт
	РегистрыСведений.МашиночитаемыеДоверенностиЭД.ДобавитьМЧД(ПодписанныйОбъект, МЧД);
КонецПроцедуры

// Записывает результат проверки МЧД в информационную базу.
// 
// Параметры:
//  ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - Ссылка на подписанный объект.
//  Отпечаток - Строка
//  ДоверенностьВерна - Булево
//
Процедура ЗаписатьРезультатПроверкиМЧД(ПодписанныйОбъект, Отпечаток, ДоверенностьВерна) Экспорт
	
	Если ДоверенностьВерна <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		МенеджерЗаписи = РегистрыСведений.РезультатыПроверкиМЧДОператором.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПодписанныйОбъект = ПодписанныйОбъект;
		МенеджерЗаписи.Отпечаток = Отпечаток;
		МенеджерЗаписи.ДоверенностьВерна = ДоверенностьВерна;
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Инициализирует структуру для отбора машиночитаемых доверенностей.
// 
// Возвращаемое значение:
//  Структура:
//   * Доверитель - ОпределяемыйТип.Организация - Организация предприятия
//   * Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования, СертификатКриптографии - Сертификат
//                  доверенного лица.
// 
Функция НовыйОтборМЧД() Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Доверитель", Неопределено);
	Отбор.Вставить("Сертификат", Неопределено);
	
	Возврат Отбор;
	
КонецФункции

// Возвращает массив ссылок МЧД 
//
// Параметры:
// 	Отбор - см. НовыйОтборМЧД 
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МЧД003
//
Функция ПолучитьДоверенностиОрганизации(Отбор) Экспорт

	Организация = Отбор.Доверитель;
	РеквизитыОрганизации = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(Организация);
	
	Доверитель = НовыеРеквизитыОтбора();
	ЗаполнитьЗначенияСвойств(Доверитель, РеквизитыОрганизации, "ИНН");
	
	Сертификат = Отбор.Сертификат;
	Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
	Иначе
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	КонецЕсли;
	
	Представитель = НовыеРеквизитыОтбора();
	Представитель.ИНН = СвойстваСубъектаСертификата.ИНН;
	
	ТаблицаДоверенностей = ТаблицаДоверенностейОрганизаций(Доверитель, Представитель);
	СортироватьДоверенностиПоКПП(ТаблицаДоверенностей, РеквизитыОрганизации.КПП);
	
	Возврат ТаблицаДоверенностей.ВыгрузитьКолонку("Ссылка");
КонецФункции

// Возвращает ссылку на последнюю выданную МЧД. Если нет действующих доверенностей, то возвращает пустую ссылку.
//
// Параметры:
// 	Отбор - см. НовыйОтборМЧД
// 	ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО 
//
// Возвращаемое значение:
//  Структура:
//  * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//                 - СправочникСсылка.МЧД003
//  * ОшибкиПроверкиПолномочий - Соответствие из КлючИЗначение:
//    ** Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//    ** Значение - см. МашиночитаемыеДоверенности.НоваяОшибкаПроверкиПолномочийПриПодписании
//
Функция ПолучитьПоследнююВыданнуюДоверенностьОрганизации(Отбор, ЭлектронныйДокумент) Экспорт
	
	Результат = Новый Структура("Доверенность, ОшибкиПроверкиПолномочий",
		Справочники.МашиночитаемыеДоверенностиОрганизаций.ПустаяСсылка(),
		Новый Соответствие());
		
	Организация = Отбор.Доверитель;
	РеквизитыОрганизации = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(Организация);
	
	Доверитель = НовыеРеквизитыОтбора();
	ОтключенПодборМЧДПоКПППриПодписании = МашиночитаемыеДоверенностиПовтИсп.ОтключенПодборМЧДПоКПППриПодписанииИПроверке();
	Если ОтключенПодборМЧДПоКПППриПодписании Тогда
		ЗаполнитьЗначенияСвойств(Доверитель, РеквизитыОрганизации, "ИНН");
	Иначе
		ЗаполнитьЗначенияСвойств(Доверитель, РеквизитыОрганизации, "ИНН, КПП");
	КонецЕсли;
	
	Сертификат = Отбор.Сертификат;
	Если ТипЗнч(Сертификат) = Тип("СертификатКриптографии") Тогда
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
	Иначе
		СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	КонецЕсли;
	
	Представитель = НовыеРеквизитыОтбора();
	Представитель.ИНН = СвойстваСубъектаСертификата.ИНН;
	
	ВсеДоверенности = ТаблицаДоверенностейОрганизаций(Доверитель, Представитель);
	СортироватьДоверенностиПоКПП(ВсеДоверенности, РеквизитыОрганизации.КПП);

	ОшибкиПроверкиПолномочий = Новый Соответствие();
	
	Для Каждого СтрокаТЗ Из ВсеДоверенности Цикл
		СвойстваДоверенности = НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, СтрокаТЗ);
		ВозможнаАвтопроверкаПолномочий = ВозможнаАвтопроверкаПолномочий(СвойстваДоверенности);
		
		Если ВозможнаАвтопроверкаПолномочий Тогда
			
			ЭтоТекстПолныхПолномочий = ЭтоТекстПолныхПолномочий(СтрокаТЗ.ТекстовоеПолномочие);
			ЭтоМЧД002БезОграниченийПолномочий = 
				Не ЭтоМЧД003(СтрокаТЗ.Ссылка) И ЭтоМЧДСПолнымиПолномочиями(СтрокаТЗ.Ссылка);
				
			Если ЭтоТекстПолныхПолномочий Или ЭтоМЧД002БезОграниченийПолномочий Тогда
				Результат.Доверенность = СтрокаТЗ.Ссылка;
				Результат.ОшибкиПроверкиПолномочий = Новый Соответствие();
				Прервать;
			КонецЕсли;
			
			РезультатПроверки = ПроверитьПолномочияДоверенности(СтрокаТЗ.Ссылка, ЭлектронныйДокумент);
		
			Если РезультатПроверки.Успех Тогда
				
				Результат.Доверенность = СтрокаТЗ.Ссылка;
				Результат.ОшибкиПроверкиПолномочий = Новый Соответствие();
				Прервать;
				
			Иначе
				
				Ошибка = НоваяОшибкаПроверкиПолномочийПриПодписании();
				Ошибка.Доверенность = СтрокаТЗ.Ссылка;
				Ошибка.ЭлектронныйДокумент = ЭлектронныйДокумент;
				Ошибка.ТекстОшибки = РезультатПроверки.ТекстОшибки;
				ОшибкиПроверкиПолномочий.Вставить(СтрокаТЗ.Ссылка, Ошибка);
				
			КонецЕсли;
		
		Иначе
			
			ТекстОшибки = ТекстОшибкиНеНастроенаАвтопроверка();
			ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(СтрокаТЗ.Ссылка);
			Если Не ПравилоПроверки.Используется Тогда
				ТекстОшибки = ТекстОшибкиВыключеныПравилаПроверки();
			КонецЕсли;
			
			Ошибка = НоваяОшибкаПроверкиПолномочийПриПодписании();
			Ошибка.Доверенность = СтрокаТЗ.Ссылка;
			Ошибка.ЭлектронныйДокумент = ЭлектронныйДокумент;
			Ошибка.ТекстОшибки = ТекстОшибки;
			ОшибкиПроверкиПолномочий.Вставить(СтрокаТЗ.Ссылка, Ошибка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОшибкиПроверкиПолномочий.Количество() > 0 Тогда
		Результат.ОшибкиПроверкиПолномочий = ОшибкиПроверкиПолномочий;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица доверенностей:
// * Ссылка - ОпределяемыйТип.МашиночитаемаяДоверенность
// * НомерДоверенности - ОпределяемыйТип.ЕдиныйРегистрационныйНомерДоверенности
// * ДатаВыдачи - Дата
// * ДатаОкончания - Дата
// * Отозвана - Булево
// * ДатаОтзыва - Дата
// * ПолномочияОграничены - Булево
// * ТекстовоеПолномочие - Строка
// * ФайлМЧД - ХранилищеЗначения
// * Верна - Булево
// * Представление - Строка
// * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС 
// * ПолномочияУказаныИзКлассификатора - Булево
// * ПравилоПроверки - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
// * ИННДоверителя - Строка
// * ИННДоверителяРодительскойДоверенности - Строка
// * КППДоверителя - Строка
// * ПриоритетПодбора - Число
Функция НоваяТаблицаДоверенностей() Экспорт
	
	ОписаниеТипаДатаБезВремени = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеСтрокиНеограниченнойДлины = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка", Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип);
	Результат.Колонки.Добавить("НомерДоверенности", Метаданные.ОпределяемыеТипы.ЕдиныйРегистрационныйНомерДоверенности.Тип);
	Результат.Колонки.Добавить("ДатаВыдачи", ОписаниеТипаДатаБезВремени);
	Результат.Колонки.Добавить("ДатаОкончания", ОписаниеТипаДатаБезВремени);
	Результат.Колонки.Добавить("Отозвана", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ДатаОтзыва", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Результат.Колонки.Добавить("ПолномочияОграничены", ОписаниеТиповБулево);
	Результат.Колонки.Добавить("ТекстовоеПолномочие", ОписаниеСтрокиНеограниченнойДлины);
	Результат.Колонки.Добавить("ФайлМЧД", Новый ОписаниеТипов("ХранилищеЗначения"));
	Результат.Колонки.Добавить("Верна", ОписаниеТиповБулево);
	Результат.Колонки.Добавить("Представление", ОписаниеСтрокиНеограниченнойДлины);
	Результат.Колонки.Добавить("СтатусВРеестреФНС", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС"));
	Результат.Колонки.Добавить("ПолномочияУказаныИзКлассификатора", ОписаниеТиповБулево);
	Результат.Колонки.Добавить("ПравилоПроверки", Новый ОписаниеТипов("СправочникСсылка.ПравилаПроверкиПолномочийМЧД"));
	Результат.Колонки.Добавить("ИННДоверителя", ОписаниеСтрокиНеограниченнойДлины);
	Результат.Колонки.Добавить("ИННДоверителяРодительскойДоверенности", ОписаниеСтрокиНеограниченнойДлины);
	Результат.Колонки.Добавить("КППДоверителя", ОписаниеСтрокиНеограниченнойДлины);
	Результат.Колонки.Добавить("ПриоритетПодбора", ОбщегоНазначения.ОписаниеТипаЧисло(2));
	
	Возврат Результат;
КонецФункции

// Формирует структуру реквизитов отбора МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * ИНН - Строка
// * КПП - Строка
Функция НовыеРеквизитыОтбора() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Массив из Строка - строковые маски формата оператора ПОДОБНО
Функция МаскиКППГоловнойОрганизации() Экспорт
	Результат = Новый Массив();
	Результат.Добавить(ОбщегоНазначенияБЭД.МаскаКППГоловнойОрганизации());
	Результат.Добавить(ОбщегоНазначенияБЭД.МаскаКППКрупнейшегоНалогоплательщика());
	Возврат Результат;
КонецФункции

// Параметры:
//  КПП - Строка - КПП
// 
// Возвращаемое значение:
//  Булево
Функция КППСоответствуетГоловнойОрганизации(КПП) Экспорт

	МаскиКППГоловнойОрганизации = МаскиКППГоловнойОрганизации();
	Для Каждого МаскаКПП Из МаскиКППГоловнойОрганизации Цикл
		Если Прав(МаскаКПП, 5) = Прав(КПП, 5) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Параметры:
//  НаборУсловий - Массив Из Строка - Тексты условий запроса
//  Разделитель - Строка
// 
// Возвращаемое значение:
//  Строка - Текст условия для блока "ГДЕ"
Функция ТекстОтбора(Знач НаборУсловий, Разделитель = " И ") Экспорт
	
	Если НаборУсловий.Количество() = 0 Тогда
		Возврат "ИСТИНА";
	КонецЕсли;
	
	ПодстрокиРезультата = Новый Массив; // Массив Из Строка
	
	Для Каждого ТекстУсловия Из НаборУсловий Цикл
		ПодстрокиРезультата.Добавить("(" + ТекстУсловия + ")");
	КонецЦикла;
	
	Возврат СтрСоединить(ПодстрокиРезультата, Разделитель);
	
КонецФункции

// Получить номера доверенностей.
// 
// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  КлючИЗначение:
//      * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//      * Значение - Строка - номер доверенности
Функция ПолучитьНомераДоверенностей(Доверенности) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Доверенности, "НомерДоверенности");
	
КонецФункции

// Возвращает данные, полученные из файла обмена.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеДоверенности - Неопределено, ОбъектXDTO, Структура - Данные доверенности, см. НовыеДанныеМЧД
//  * ВерсияФорматаМЧД - Строка
//  * ЭтоОбъектXDTO - Булево
//
Функция ДанныеИзФайлаОбмена(ВходящиеДанные, ЭтоДоверенностьОрганизации = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ДанныеДоверенности", Неопределено);
	Результат.Вставить("ВерсияФорматаМЧД", "");
	Результат.Вставить("ЭтоОбъектXDTO", Ложь);
	
	ДвоичныеДанныеМЧД = Неопределено;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанныеМЧД = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанныеМЧД = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанныеМЧД = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;

	ВерсияФормата = ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД);
	Результат.ВерсияФорматаМЧД = ВерсияФормата;
	
	Если ВерсияФормата = ФорматМЧД_2022() Тогда
		
		РезультатЧтения = ДанныеИзФайлаОбменаВУтвержденномФормате(ВходящиеДанные, ЭтоДоверенностьОрганизации);
		
	ИначеЕсли  ВерсияФормата = ПилотныйФорматМЧД() Тогда
		
		РезультатЧтения = ДанныеИзФайлаОбменаВПилотномФормате(ВходящиеДанные);
		
	ИначеЕсли ВерсияФормата = ФорматМЧД_2022_Версия_002() Тогда
		
		РезультатЧтения = ДанныеИзФайлаОбменаВУтвержденномФорматеВерсия002(ВходящиеДанные, ЭтоДоверенностьОрганизации);
		
	ИначеЕсли ВерсияФормата = ФорматМЧД_b2g() Тогда
		
		Результат.Успех = Ложь;
		Результат.ТекстОшибки = ТекстОшибкиЗагрузкиДоверенности_B2G();
		Возврат Результат;
		
	ИначеЕсли ВерсияФормата = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
		
		РезультатЧтения = ДанныеИзФайлаОбменаОбъектомXDTO(ВходящиеДанные);
		Результат.ЭтоОбъектXDTO = Истина;
		
	Иначе
		
		Результат.Успех = Ложь;
		Результат.ТекстОшибки = ТекстОшибкиЗагрузкиДоверенностиДругогоФормата();
		Возврат Результат;
		
	КонецЕсли;
	
	Если Не РезультатЧтения.Успех Тогда
		Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Успех = Истина;
	Результат.ДанныеДоверенности = РезультатЧтения.ДанныеДоверенности;
	Возврат Результат;
	
КонецФункции

// Проверяет, действительна ли доверенность.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  ДатаПроверки - Дата - дата, на которую выполняется проверка
// 
// Возвращаемое значение:
//  Булево
Функция ДоверенностьДействительна(Ссылка, ДатаПроверки) Экспорт
	
	Доверенности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	РезультатПроверки = ДоверенностиДействительны(Доверенности, ДатаПроверки);
	Возврат РезультатПроверки[Ссылка];

КонецФункции

Функция ПолучитьПредставлениеФИО(СтрокаФИО) Экспорт

	Представление = "";

	Если ЗначениеЗаполнено(СтрокаФИО.Фамилия) Тогда
		Представление = СтрокаФИО.Фамилия;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаФИО.Имя) Тогда
		Представление = Представление + " " + СтрокаФИО.Имя;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаФИО.Отчество) Тогда
		Представление = Представление + " " + СтрокаФИО.Отчество;
	КонецЕсли;

	Возврат Представление;

КонецФункции

// Получает представление статуса автоматической проверки доверенности
//
// Параметры:
//  ДоверенностьДействует - см. ДоверенностьДействительнаПоСвойствам
//
// Возвращаемое значение:
//  Строка
Функция ПредставлениеРезультатаАвтоматическойПроверкиМЧД(ДоверенностьДействует) Экспорт

	Возврат ?(ДоверенностьДействует, НСтр("ru = 'Доверенность действительна'"), 
					НСтр("ru = 'Доверенность недействительна'")) ;

КонецФункции

// Получает представление статуса ручной проверки доверенности
//
// Возвращаемое значение:
//  Строка
Функция ПредставлениеРезультатаРучнойПроверкиМЧД() Экспорт

	Возврат НСтр("ru = 'Доверенность проверена вручную'");

КонецФункции

// Получает имя файла МЧД
//
// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьИмяФайлаМЧД(Доверенность) Экспорт
	
	Если ТипЗнч(Доверенность) = Тип("СправочникСсылка.МЧД003") Тогда
		ИмяФайлаДоверенностьБезРасширения = Справочники.МЧД003.ПолучитьИмяФайлаМЧД(Доверенность);
	ИначеЕсли ТипЗнч(Доверенность) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов") Тогда
		ИмяФайлаДоверенностьБезРасширения =
			Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолучитьИмяФайлаМЧД(Доверенность);
	Иначе
		ИмяФайлаДоверенностьБезРасширения =
			Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(Доверенность);
	КонецЕсли;
	
	Возврат ИмяФайлаДоверенностьБезРасширения;
	
КонецФункции

// Получает двоичные данные доверенности
//
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003,
//  				СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
// Возвращаемое значение:
//  ДвоичныеДанные
//
Функция ПолучитьДвоичныеДанныеМЧД(Доверенность) Экспорт
	
	Если ТипЗнч(Доверенность) = Тип("СправочникСсылка.МЧД003") Тогда
		ДвоичныеДанные = Справочники.МЧД003.ПолучитьДвоичныеДанныеМЧД(Доверенность);
	Иначе
		ДвоичныеДанные = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьДвоичныеДанныеМЧД(Доверенность);
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Получает двоичные данные заявления на отзыв доверенности
//
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003,
//  				СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
// Возвращаемое значение:
//  ДвоичныеДанные
//
Функция ПолучитьДвоичныеДанныеЗаявленияНаОтзыв(Доверенность) Экспорт
	
	Если ТипЗнч(Доверенность) = Тип("СправочникСсылка.МЧД003") Тогда
		ДвоичныеДанные = Справочники.МЧД003.ПолучитьДвоичныеДанныеЗаявленияНаОтзыв(Доверенность);
	Иначе
		ДвоичныеДанные = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьДвоичныеДанныеЗаявленияНаОтзыв(Доверенность);
	КонецЕсли;
	
	Возврат ДвоичныеДанные;
	
КонецФункции

// Возвращает ИНН доверителя.
// 
// Параметры:
//  Ссылка - ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Строка
Функция ИННДоверителя(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.МЧД003") Тогда
		ДанныеДоверителей = Справочники.МЧД003.ПолучитьИННКППДоверителей(Ссылка);
		ДоверительИНН = ДанныеДоверителей[0].ИНН;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов") Тогда
		ДоверительИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ДоверительИНН");
	Иначе
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "XMLфайлМЧД, ДоверительЮЛ_ИНН, ДоверительФЛ_ИНН");
		ДвоичныеДанныеДоверенности = ЗначенияРеквизитов.XMLфайлМЧД.Получить();
		Если ДвоичныеДанныеДоверенности <> Неопределено Тогда
			ДанныеДоверителей = ИННКППДоверителей(ДвоичныеДанныеДоверенности);
			Если ДанныеДоверителей.ТипДоверителя = "ЮЛ"
				Или ДанныеДоверителей.ТипДоверителя = "ИО" Тогда
				ДоверительИНН = ДанныеДоверителей.ИННЮЛ;
			Иначе
				ДоверительИНН = ДанныеДоверителей.ИННФЛ;
			КонецЕсли;
		Иначе
			ДоверительИНН = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ДоверительЮЛ_ИНН), 
				ЗначенияРеквизитов.ДоверительЮЛ_ИНН, ЗначенияРеквизитов.ДоверительФЛ_ИНН);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоверительИНН;
	
КонецФункции

// Получает доверенность из журнала
//
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//
// Возвращаемое значение:
//  ОпределяемыйТип.МашиночитаемаяДоверенность - Доверенность
Функция ПолучитьДоверенностьИзЖурналаПоНомеру(НомерДоверенности) Экспорт
	
	Если ЗначениеЗаполнено(НомерДоверенности) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Доверенность
			|ИЗ
			|	РегистрСведений.ЖурналМашиночитаемыхДоверенностей КАК Журнал
			|ГДЕ
			|	Журнал.Номер = &Номер";
		
		Запрос.УстановитьПараметр("Номер", НомерДоверенности);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Доверенность;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип.ПривестиЗначение();
	
КонецФункции

// Параметры:
//  ВерсияФорматаМЧД - Строка - Версия формата машиночитаемой доверенности.
// 
// Возвращаемое значение:
//  Булево - Истина, если поддерживается вариант заполнения полномочий из классификатора
//
Функция ФорматМЧДПоддерживаетКлассификаторПолномочий (ВерсияФорматаМЧД) Экспорт
	
	Если Не ЗначениеЗаполнено(ВерсияФорматаМЧД) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВерсияФорматаМЧД = ФорматМЧД_2022_Версия_002()
		Или ВерсияФорматаМЧД = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003();
	
КонецФункции

// Параметры:
//  ИНН - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоИННЦентральногоБанка(Знач ИНН) Экспорт
	
	ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ИНН, 12);
	ИННЦентральногоБанка = "007702235133";
	
	Возврат ИНН = ИННЦентральногоБанка;
	
КонецФункции

// Параметры:
//  ИНН - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоИННКазначейства(Знач ИНН) Экспорт
	
	ИНН = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ИНН, 12);
	ИННКазначейства = "007710568760";
		
	Возврат ИНН = ИННКазначейства;
	
КонецФункции

// Инициализирует свойства доверенности.
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка - ОпределяемыйТип.МашиночитаемаяДоверенность
//	* ДатаВыдачи - Дата
//	* ДатаОкончания - Дата
//	* Отозвана - Булево
//	* ДатаОтзыва - Дата
//	* СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//	* Верна - Булево
//	* ПолномочияОграничены - Булево
//  * ПолномочияУказаныИзКлассификатора - Булево
//	* ПравилоПроверки - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
//
Функция НовыеСвойстваДоверенности() Экспорт
	
	Свойства = Новый Структура;
	Свойства.Вставить("Ссылка", Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип.ПривестиЗначение());
	Свойства.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Свойства.Вставить("ДатаОкончания", Дата(1, 1, 1));
	Свойства.Вставить("Отозвана", Ложь);
	Свойства.Вставить("ДатаОтзыва", Дата(1, 1, 1));
	Свойства.Вставить("СтатусВРеестреФНС",
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка"));
	Свойства.Вставить("Верна", Ложь);
	Свойства.Вставить("ПолномочияОграничены", Истина);
	Свойства.Вставить("ПолномочияУказаныИзКлассификатора", Ложь);
	Свойства.Вставить("ПравилоПроверки", Справочники.ПравилаПроверкиПолномочийМЧД.ПустаяСсылка());
	Свойства.Вставить("ВариантЗаполненияПолномочий", Перечисления.ВариантыЗаполненияПолномочийМЧД.ПустаяСсылка());
	
	Возврат Свойства;
	
КонецФункции

// Имеется право изменения машиночитаемой доверенности
//
// Возвращаемое значение:
//  Булево
Функция ИмеетсяПравоИзмененияМЧД() Экспорт
	
	ИмеетсяПравоИзменения = Справочники.МЧД003.ЕстьПравоИзменения()
		Или Справочники.МашиночитаемыеДоверенностиОрганизаций.ЕстьПравоИзменения()
		Или Справочники.МашиночитаемыеДоверенностиКонтрагентов.ЕстьПравоИзменения();
	
	Возврат ИмеетсяПравоИзменения;
	
КонецФункции


#Область События

// См. ЭлектронныеДокументыЭДОСобытия.ЗаписатьМашиночитаемуюДоверенностьВЖурнал
Процедура ЗаписатьМашиночитаемуюДоверенностьВЖурнал(Источник, Отказ) Экспорт
	ПередЗаписьюДоверенностиВЖурнал(Источник, Отказ);
	Источник.ЗаписатьВЖурнал(Отказ);
КонецПроцедуры

// Новые параметры записи в журнал МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * ИзменилсяХеш - Булево - Изменение хеша приведет к удалению предыдущей записи из журнала
// * ПредыдущееЗначениеХеша - Строка
Функция НовыеПараметрыЗаписиВЖурналМЧД() Экспорт
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИзменилсяХеш", Ложь);
	ПараметрыЗаписи.Вставить("ПредыдущееЗначениеХеша", "");
	Возврат ПараметрыЗаписи;
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзФайла

// Загрузить МЧДИз файла.
// 
// Параметры:
//  АдресХранилища - Строка - адрес хранения двоичных данных файла
//  			   - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево
//  ОбновлятьСуществующий - Булево
//  ДополнительныеСведения - См. МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД
//  						- Неопределено
// 
// Возвращаемое значение:
//  Структура:
//  * МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций.
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - Неопределено
//  					- См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  * ТекстОшибки - Строка
Функция ЗагрузитьМЧДИзФайла(АдресХранилища, ТребуетсяПроверкаМЧДНаКлиенте = Ложь, ОбновлятьСуществующий = Ложь,
	ДополнительныеСведения = Неопределено) Экспорт
	
	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	
	Результат = Новый Структура;
	Результат.Вставить("МЧД", Неопределено);
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", ТребуетсяПроверкаМЧДНаКлиенте);
	Результат.Вставить("ДанныеДляПроверки", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
	
	Если ТипЗНч(АдресХранилища) = Тип("Структура") Тогда
		Данные = АдресХранилища;
	Иначе
		Данные = ПрочитатьАрхив(АдресХранилища);
	КонецЕсли;
	
	Если Данные = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатЧтения = ДанныеXMLМЧД(Данные.ДанныеДоверенности);
	
	Если НЕ РезультатЧтения.Успех Тогда
		Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если ДополнительныеСведения = Неопределено Тогда
		ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Данные.ДанныеПодписиЗаявленияНаОтмену) Тогда
		ДополнительныеСведения.ДатаОтзыва = 
			ЭлектроннаяПодпись.ДатаПодписания(Данные.ДанныеПодписиЗаявленияНаОтмену);
	КонецЕсли;
	
	ДополнительныеСведения.ДатаЗагрузки = ТекущаяДатаСеанса();
	
	ЭтоФормат003 = 
		ВерсияФорматаОбъектаМЧД(РезультатЧтения.ДанныеДоверенности) = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003();

	Если ЭтоФормат003 Тогда
		Возврат Справочники.МЧД003.ЗагрузитьМЧДИзФайла(АдресХранилища,, ДополнительныеСведения); 
	Иначе
		
		ДанныеДоверителей = ИННКППДоверителей(Данные.ДанныеДоверенности);
		
		ИННОрганизации = ДанныеДоверителей.ИННЮЛ;
		Если Не ЗначениеЗаполнено(ДанныеДоверителей.ИННЮЛ)
			И ЗначениеЗаполнено(ДанныеДоверителей.ИННФЛ) Тогда
			ИННОрганизации = ДанныеДоверителей.ИННФЛ;
		КонецЕсли;
		
		Организация = ОбщегоНазначенияБЭД.НайтиСсылку("Организации",, 
			Новый Структура("ИНН, КПП", ИННОрганизации, ДанныеДоверителей.КПП));
		СубъектЕстьСредиОрганизаций = ЗначениеЗаполнено(Организация);
		Если СубъектЕстьСредиОрганизаций Или ДополнительныеСведения.ЭтоМЧДОрганизации Тогда
			
			Если Не Справочники.МашиночитаемыеДоверенностиОрганизаций.ЕстьПравоИзменения() Тогда
				Результат.ТекстОшибки = НСтр("ru='У пользователя нет прав на создание МЧД Организации 002 формата'");
				Возврат Результат;
			КонецЕсли;
			
			Возврат Справочники.МашиночитаемыеДоверенностиОрганизаций.ЗагрузитьМЧДИзФайла(
				АдресХранилища,, ДополнительныеСведения);
		Иначе
			Возврат Справочники.МашиночитаемыеДоверенностиКонтрагентов.ЗагрузитьМЧДИзФайла(
				АдресХранилища,, ДополнительныеСведения);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область КлассификаторыМЧД

// Обновляет данные справочника КлассификаторПолномочийМЧД003
// 
// Параметры:
//  ДанныеКлассификатора - см. СервисНастроекЭДО.ПолучитьКлассификаторПолномочий_МЧД003
//
Процедура ОбновитьКлассификаторПолномочий_МЧД003(ДанныеКлассификатора) Экспорт
	
	ВидОперации = НСтр("ru = 'Синхронизация классификатора полномочий (МЧД 003) из сервиса настроек'");
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.КлассификаторПолномочийМЧД003");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		ЗапросГрупп = Новый Запрос;
		ЗапросГрупп.Текст = "ВЫБРАТЬ
		|	ТаблицаНовыхДанных.Родитель КАК Родитель,
		|	ТаблицаНовыхДанных.УИДРодителя КАК УИДРодителя,
		|	ТаблицаНовыхДанных.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаНовыхДанных
		|ИЗ
		|	&ТаблицаНовыхДанныхГрупп КАК ТаблицаНовыхДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлассификаторПолномочийМЧД003.Ссылка,
		|	КлассификаторПолномочийМЧД003.Наименование
		|ПОМЕСТИТЬ ТаблицаТекущихДанных
		|ИЗ
		|	Справочник.КлассификаторПолномочийМЧД003 КАК КлассификаторПолномочийМЧД003
		|ГДЕ
		|	КлассификаторПолномочийМЧД003.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНовыхДанных.Родитель КАК Родитель,
		|	ТаблицаНовыхДанных.УИДРодителя КАК УИДРодителя,
		|	ТаблицаТекущихДанных.Ссылка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаНовыхДанных.Родитель, """") <>
		|			ЕСТЬNULL(ТаблицаТекущихДанных.Наименование, """")
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БылоИзменение
		|ПОМЕСТИТЬ ТаблицаСравненияДанных
		|ИЗ
		|	ТаблицаНовыхДанных КАК ТаблицаНовыхДанных
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаТекущихДанных КАК ТаблицаТекущихДанных
		|		ПО ТаблицаНовыхДанных.Ссылка = ТаблицаТекущихДанных.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСравненияДанных.Родитель КАК Родитель,
		|	ТаблицаСравненияДанных.УИДРодителя КАК УИДРодителя,
		|	ТаблицаСравненияДанных.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаСравненияДанных КАК ТаблицаСравненияДанных
		|ГДЕ
		|	ТаблицаСравненияДанных.БылоИзменение";
		
		КолонкиГруппировок = "Родитель, УИДРодителя";
		РодителиПолномочий = ДанныеКлассификатора.КлассификаторПолномочийМЧД003.Скопировать(, КолонкиГруппировок);
		РодителиПолномочий.Свернуть(КолонкиГруппировок);
		РодителиПолномочий.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.КлассификаторПолномочийМЧД003"));
		
		Для Каждого ДанныеРодителя Из РодителиПолномочий Цикл
			
			СсылкаДанныхИБ = Справочники.КлассификаторПолномочийМЧД003.ПолучитьСсылку(
				ДанныеРодителя.УИДРодителя);
				
			Если ОбщегоНазначения.СсылкаСуществует(СсылкаДанныхИБ) Тогда
				ДанныеРодителя.Ссылка= СсылкаДанныхИБ;
			КонецЕсли;
				
		КонецЦикла;
		
		ЗапросГрупп.УстановитьПараметр("ТаблицаНовыхДанныхГрупп", РодителиПолномочий);
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДетальныеЗаписиРодителей = ЗапросГрупп.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписиРодителей.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписиРодителей.Родитель)
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписиРодителей.Ссылка) Тогда
					
				ОбъектКлассификатора = ВыборкаДетальныеЗаписиРодителей.Ссылка.ПолучитьОбъект();
				
				ТекстПримечания = СтрШаблон(НСтр("ru = 'Выполнение операции: %1
				|Удалена неактуальная группа полномочий: %2'"), ВидОперации, ОбъектКлассификатора.Наименование);
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПримечания, 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, УровеньЖурналаРегистрации.Примечание);
				
				ОбъектКлассификатора.Удалить();
				Продолжить;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписиРодителей.Ссылка) Тогда
				
				СсылкаНаГруппу = Справочники.КлассификаторПолномочийМЧД003.ПолучитьСсылку(
					ВыборкаДетальныеЗаписиРодителей.УИДРодителя);
				ГруппаОбъект = Справочники.КлассификаторПолномочийМЧД003.СоздатьГруппу();
				ГруппаОбъект.УстановитьСсылкуНового(СсылкаНаГруппу);
				
			Иначе
				
				ГруппаОбъект = ВыборкаДетальныеЗаписиРодителей.Ссылка.ПолучитьОбъект();
				
			КонецЕсли;
			
			ГруппаОбъект.Наименование = ВыборкаДетальныеЗаписиРодителей.Родитель;
			ВызовИзОбработчикаОбновления = ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления();
			Если ВызовИзОбработчикаОбновления Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ГруппаОбъект);
			Иначе
				ГруппаОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапросЭлементов = Новый Запрос;
		ЗапросЭлементов.Текст = "ВЫБРАТЬ
		|	ТаблицаНовыхДанных.КодКлассификатора КАК КодКлассификатора,
		|	ТаблицаНовыхДанных.УИДРодителя КАК УИДРодителя,
		|	ТаблицаНовыхДанных.ДатаИзменения
		|ПОМЕСТИТЬ ТаблицаНовыхДанных
		|ИЗ
		|	&ТаблицаНовыхДанныхЭлементов КАК ТаблицаНовыхДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлассификаторПолномочийМЧД003.Ссылка,
		|	КлассификаторПолномочийМЧД003.ДатаИзменения,
		|	КлассификаторПолномочийМЧД003.КодКлассификатора КАК КодКлассификатора
		|ПОМЕСТИТЬ ТаблицаТекущихДанных
		|ИЗ
		|	Справочник.КлассификаторПолномочийМЧД003 КАК КлассификаторПолномочийМЧД003
		|ГДЕ
		|	НЕ КлассификаторПолномочийМЧД003.ЭтоГруппа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНовыхДанных.КодКлассификатора КАК КодКлассификатора,
		|	ТаблицаНовыхДанных.УИДРодителя КАК УИДРодителя,
		|	ТаблицаТекущихДанных.Ссылка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаНовыхДанных.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)) <>
		|			ЕСТЬNULL(ТаблицаТекущихДанных.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БылоИзменение
		|ПОМЕСТИТЬ ТаблицаСравненияДанных
		|ИЗ
		|	ТаблицаНовыхДанных КАК ТаблицаНовыхДанных
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаТекущихДанных КАК ТаблицаТекущихДанных
		|		ПО ТаблицаНовыхДанных.КодКлассификатора = ТаблицаТекущихДанных.КодКлассификатора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСравненияДанных.КодКлассификатора КАК КодКлассификатора,
		|	ТаблицаСравненияДанных.УИДРодителя КАК УИДРодителя,
		|	ТаблицаСравненияДанных.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаСравненияДанных КАК ТаблицаСравненияДанных
		|ГДЕ
		|	ТаблицаСравненияДанных.БылоИзменение";
		
		ЗапросЭлементов.УстановитьПараметр("ТаблицаНовыхДанныхЭлементов", ДанныеКлассификатора.КлассификаторПолномочийМЧД003);
		ВыборкаДетальныеЗаписи = ЗапросЭлементов.Выполнить().Выбрать();
		ЗаполняемыеРеквизиты = "КодКлассификатора, Наименование, Полномочие, Мнемоника, УдалитьТипОтношений,
			|ДатаИзменения, Скрипт, ОписаниеПолномочия, ГруппаПодгруппаПолномочия, МнемоникаСистемыВладельцаПолномочия,
			|ДатаВключенияПолномочияВКлассификатор, ДатаОтзываПолномочия, МаксимальныйСрокДействияДоверенности,
			|ОбластьВидимостиПолномочия, ПравоПолученияДоверенностиСДаннымПолномочием,
			|ПравоНаВыдачуДоверенностиСДаннымПолномочием, КонтекстПолномочия, Правоотношения, РеквизитыНПА, Автоключ";
		ЗаполняемыеРеквизитыПравил = "ИмяПоляДанных, НачальноеЗначение, КонечноеЗначение";
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодКлассификатора)
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда
					
				ОбъектКлассификатора = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				ТекстПримечания = СтрШаблон(НСтр("ru = 'Выполнение операции: %1
				|Удалено неактуальное полномочие: %2'"), ВидОперации, ОбъектКлассификатора.Наименование);
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПримечания, 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, УровеньЖурналаРегистрации.Примечание);
				
				ОбъектКлассификатора.Удалить();
				Продолжить;
				
			КонецЕсли;
			
			СтрокаПолномочий = ДанныеКлассификатора.КлассификаторПолномочийМЧД003.Найти(
				ВыборкаДетальныеЗаписи.КодКлассификатора, "КодКлассификатора");
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда
				
				ОбъектКлассификатора = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					
			Иначе
				
				ОбъектКлассификатора = Справочники.КлассификаторПолномочийМЧД003.СоздатьЭлемент();
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбъектКлассификатора, СтрокаПолномочий, ЗаполняемыеРеквизиты);
			
			ОбъектКлассификатора.Родитель = Справочники.КлассификаторПолномочийМЧД003.ПолучитьСсылку(
				ВыборкаДетальныеЗаписи.УИДРодителя);
			
			ОбъектКлассификатора.НастройкиПроверки.Очистить();
			
			Для Каждого НастройкаПроверки Из СтрокаПолномочий.НастройкиПроверки Цикл
				
				НоваяСтрока = ОбъектКлассификатора.НастройкиПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаПроверки, ЗаполняемыеРеквизитыПравил);
				
				НоваяСтрока.Список = Неопределено;
				
				Если НастройкаПроверки.Список.Количество() > 0 Тогда
					
					НовыйСписок = Новый СписокЗначений;
					
					Для Каждого ЭлементСписка Из НастройкаПроверки.Список Цикл
						
						// Проверяем наличие значения перечисления ТипыДокументовЭДО.
						МетаданныеЗначенияТипаДокумента = Метаданные.Перечисления.ТипыДокументовЭДО.ЗначенияПеречисления.Найти(
							ЭлементСписка.ЗначениеПоляТипДокумента);
						
						Если МетаданныеЗначенияТипаДокумента = Неопределено Тогда
							ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдено значение: ""%1"" перечисления ""ТипыДокументовЭДО""
														 |Элемент списка ограничений не записан.'"),
								ЭлементСписка.ЗначениеПоляТипДокумента);
							Продолжить;
						КонецЕсли;
						
						ТипДокумента = Перечисления.ТипыДокументовЭДО[ЭлементСписка.ЗначениеПоляТипДокумента];
						
						ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
						
						Если ЗначениеЗаполнено(ЭлементСписка.ЗначениеПоляПрикладнойТипДокумента) Тогда
							
							// Находим тип реквизита.
							ТипМетаданныхРеквизита = 
								Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип.Типы()[0];
							МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипМетаданныхРеквизита);
							ЭтоПеречисление = Метаданные.Перечисления.Содержит(МетаданныеРеквизита);
							
							Если Не ЭтоПеречисление Тогда
								ТекстОшибки = НСтр("ru = 'Некорректный тип у определяемого типа: ""ПрикладныеТипыЭлектронныхДокументовЭДО"".
									|Элемент списка ограничений не записан.'");
								ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
								Продолжить;
							КонецЕсли;
							
							// Проверяем наличие значения перечисления.
							МетаданныеЗначения =
								МетаданныеРеквизита.ЗначенияПеречисления.Найти(ЭлементСписка.ЗначениеПоляПрикладнойТипДокумента);
							
							Если МетаданныеЗначения = Неопределено Тогда
								ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдено значение: ""%1"" прикладного типа документа.
									|Элемент списка ограничений не записан.'"),
									ЭлементСписка.ЗначениеПоляПрикладнойТипДокумента);
								Продолжить;
							КонецЕсли;
							
							ПараметрыПоиска.ПрикладнойТипДокумента = 
								Перечисления[МетаданныеРеквизита.Имя][ЭлементСписка.ЗначениеПоляПрикладнойТипДокумента];
							
						КонецЕсли;
						
						ВидДокумента = ЭлектронныеДокументыЭДО.НайтиВидДокумента(ПараметрыПоиска);
						
						Если ЗначениеЗаполнено(ВидДокумента) Тогда
							
							НовыйЭлемент = НовыйСписок.Добавить();
							НовыйЭлемент.Значение = ВидДокумента;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НоваяСтрока.Список = Новый ХранилищеЗначения(НовыйСписок, Новый СжатиеДанных(9));
					
				КонецЕсли;
			
			КонецЦикла;
			
			ВызовИзОбработчикаОбновления = ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления();
			Если ВызовИзОбработчикаОбновления Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектКлассификатора);
			Иначе
				ОбъектКлассификатора.Записать();
			КонецЕсли;
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обновляет данные справочника КлассификаторПолномочийФНСМЧД002
// 
// Параметры:
//  ДанныеКлассификатора - см. СервисНастроекЭДО.ПолучитьКлассификаторПолномочийФНС_МЧД002
//
Процедура ОбновитьКлассификаторПолномочийФНС_МЧД002(ДанныеКлассификатора) Экспорт
	
	ВидОперации = НСтр("ru = 'Синхронизация классификатора полномочий ФНС (МЧД 002) из сервиса настроек'");
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.КлассификаторПолномочийФНСМЧД002");
		ЭлементБлокировки.ИсточникДанных = ДанныеКлассификатора.КлассификаторПолномочийФНСМЧД002;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодКлассификатора", "КодКлассификатора");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаНовыхДанных.КодКлассификатора КАК КодКлассификатора,
		|	ТаблицаНовыхДанных.ДатаИзменения
		|ПОМЕСТИТЬ ТаблицаНовыхДанных
		|ИЗ
		|	&ТаблицаНовыхДанныхКлассификатора КАК ТаблицаНовыхДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНовыхДанных.КодКлассификатора КАК КодКлассификатора,
		|	КлассификаторПолномочийФНСМЧД002.Ссылка,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТаблицаНовыхДанных.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)) <>
		|			ЕСТЬNULL(КлассификаторПолномочийФНСМЧД002.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БылоИзменение
		|ПОМЕСТИТЬ ТаблицаСравненияДанных
		|ИЗ
		|	ТаблицаНовыхДанных КАК ТаблицаНовыхДанных
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.КлассификаторПолномочийФНСМЧД002 КАК КлассификаторПолномочийФНСМЧД002
		|		ПО ТаблицаНовыхДанных.КодКлассификатора = КлассификаторПолномочийФНСМЧД002.КодКлассификатора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСравненияДанных.КодКлассификатора КАК КодКлассификатора,
		|	ТаблицаСравненияДанных.Ссылка КАК Ссылка
		|ИЗ
		|	ТаблицаСравненияДанных КАК ТаблицаСравненияДанных
		|ГДЕ
		|	ТаблицаСравненияДанных.БылоИзменение";
		
		Запрос.УстановитьПараметр("ТаблицаНовыхДанныхКлассификатора", ДанныеКлассификатора.КлассификаторПолномочийФНСМЧД002);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ЗаполняемыеРеквизиты = "КодКлассификатора, Наименование, Полномочие, ТипОтношений, ДатаИзменения, Скрипт";
		ЗаполняемыеРеквизитыПравил = "ИмяПоляДанных, НачальноеЗначение, КонечноеЗначение";
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.КодКлассификатора)
				И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда
					
				ОбъектКлассификатора = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
				
				ТекстПримечания = СтрШаблон(НСтр("ru = 'Выполнение операции: %1
				|Удалено неактуальное полномочие: %2'"), ВидОперации, ОбъектКлассификатора.Наименование);
				ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстПримечания, 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, УровеньЖурналаРегистрации.Примечание);
				
				ОбъектКлассификатора.Удалить();
				Продолжить;
				
			КонецЕсли;
			
			СтрокаПолномочий = ДанныеКлассификатора.КлассификаторПолномочийФНСМЧД002.Найти(
				ВыборкаДетальныеЗаписи.КодКлассификатора, "КодКлассификатора");
			
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Ссылка) Тогда
			
				ОбъектКлассификатора = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			
			Иначе
				
				ОбъектКлассификатора = Справочники.КлассификаторПолномочийФНСМЧД002.СоздатьЭлемент();
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбъектКлассификатора, СтрокаПолномочий, ЗаполняемыеРеквизиты);
			
			ОбъектКлассификатора.НастройкиПроверки.Очистить();
			
			Для Каждого НастройкаПроверки Из СтрокаПолномочий.НастройкиПроверки Цикл
				
				НоваяСтрока = ОбъектКлассификатора.НастройкиПроверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НастройкаПроверки, ЗаполняемыеРеквизитыПравил);
				
				НоваяСтрока.Список = Неопределено;
				
				Если НастройкаПроверки.Список.Количество() > 0 Тогда
					
					НовыйСписок = Новый СписокЗначений;
					
					Для Каждого ЭлементСписка Из НастройкаПроверки.Список Цикл
						
						// Проверяем наличие значения перечисления ТипыДокументовЭДО.
						МетаданныеЗначенияТипаДокумента = Метаданные.Перечисления.ТипыДокументовЭДО.ЗначенияПеречисления.Найти(
							ЭлементСписка.ЗначениеПоляТипДокумента);
							
						Если МетаданныеЗначенияТипаДокумента = Неопределено Тогда
							ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдено значение: ""%1"" перечисления ""ТипыДокументовЭДО""
														 |Элемент списка ограничений не записан.'"),
								ЭлементСписка.ЗначениеПоляТипДокумента);
							Продолжить;
						КонецЕсли;
						
						ТипДокумента = Перечисления.ТипыДокументовЭДО[ЭлементСписка.ЗначениеПоляТипДокумента];
						
						ПараметрыПоиска = ЭлектронныеДокументыЭДО.НовыеПараметрыПоискаВидаДокумента(ТипДокумента);
						
						Если ЗначениеЗаполнено(ЭлементСписка.ЗначениеПоляПрикладнойТипДокумента) Тогда
							
							// Находим тип реквизита.
							ТипМетаданныхРеквизита = 
								Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип.Типы()[0];
							МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТипМетаданныхРеквизита);
							ЭтоПеречисление = Метаданные.Перечисления.Содержит(МетаданныеРеквизита);
							
							Если Не ЭтоПеречисление Тогда
								ТекстОшибки = НСтр("ru = 'Некорректный тип у определяемого типа: ""ПрикладныеТипыЭлектронныхДокументовЭДО"".
									|Элемент списка ограничений не записан.'");
								ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
								Продолжить;
							КонецЕсли;
							
							// Проверяем наличие значения перечисления.
							МетаданныеЗначения =
								МетаданныеРеквизита.ЗначенияПеречисления.Найти(ЭлементСписка.ЗначениеПоляПрикладнойТипДокумента);
							
							Если МетаданныеЗначения = Неопределено Тогда
								ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдено значение: ""%1"" прикладного типа документа.
									|Элемент списка ограничений не записан.'"),
									ЭлементСписка.ЗначениеПоляПрикладнойТипДокумента);
								Продолжить;
							КонецЕсли;
							
							ПараметрыПоиска.ПрикладнойТипДокумента = 
								Перечисления[МетаданныеРеквизита.Имя][ЭлементСписка.ЗначениеПоляПрикладнойТипДокумента];
							
						КонецЕсли;
						
						ВидДокумента = ЭлектронныеДокументыЭДО.НайтиВидДокумента(ПараметрыПоиска);
						
						Если ЗначениеЗаполнено(ВидДокумента) Тогда
							
							НовыйЭлемент = НовыйСписок.Добавить();
							НовыйЭлемент.Значение = ВидДокумента;
							
						КонецЕсли;
						
					КонецЦикла;
					
					НоваяСтрока.Список = Новый ХранилищеЗначения(НовыйСписок, Новый СжатиеДанных(9));
					
				КонецЕсли;
			
			КонецЦикла;
			
			ВызовИзОбработчикаОбновления = ОбновлениеИнформационнойБазы.ЭтоВызовИзОбработчикаОбновления();
			Если ВызовИзОбработчикаОбновления Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектКлассификатора);
			Иначе
				ОбъектКлассификатора.Записать();
			КонецЕсли;
			
		КонецЦикла;
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

// Получает сведения доверенностей из двоичных данных доверенности для МЧД003
// для МЧД организаций берет информацию по ссылке из доверенности.
//
// Параметры:
//  Ссылка - ОпределяемыйТип.МашиночитаемаяДоверенность
//
// Возвращаемое значение:
//  Структура:
//  * СведенияОбИнформационнойСистеме - строка
//  * ВнутреннийНомер - строка
Функция ПрочитатьДополнительныеСведенияМЧД(Ссылка) Экспорт
	
	ДополнительныеСведенияДоверенности = Новый Структура("СведенияОбИнформационнойСистеме, ВнутреннийНомер", "", "");
	
	Если Не ЭтоМЧД003(Ссылка) Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка, "СведенияОбИнформационнойСистеме") Тогда
			ДополнительныеСведенияДоверенности.СведенияОбИнформационнойСистеме =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СведенияОбИнформационнойСистеме");
		КонецЕсли;
		
		Возврат ДополнительныеСведенияДоверенности;
		
	КонецЕсли;
	
	ФайлДоверенности = Ссылка.ФайлМЧД.Получить();
	ОбъектXDTOДоверенности = ОбъектXDTOМЧД(ФайлДоверенности).ОбъектМЧД;
	
	Если ОбъектXDTOДоверенности = Неопределено Тогда
		Возврат ДополнительныеСведенияДоверенности;
	КонецЕсли;
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTOДоверенности, "Документ.Довер.СвДов") <> Неопределено Тогда
		СведенияДоверенности = ОбъектXDTOДоверенности.Документ.Довер.СвДов;
	ИначеЕсли РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTOДоверенности, "Документ.Передов.СвПереДовер") <> Неопределено Тогда
		СведенияДоверенности = ОбъектXDTOДоверенности.Документ.Передов.СвДовПер;	
	Иначе
		СведенияДоверенности = Неопределено;
	КонецЕсли;
	
	Если СведенияДоверенности = Неопределено Тогда
		Возврат ДополнительныеСведенияДоверенности;
	КонецЕсли;
	
	Если ФорматыЭДО.ЕстьСвойствоXDTO(СведенияДоверенности, "СведСист", Истина) Тогда
		ДополнительныеСведенияДоверенности.СведенияОбИнформационнойСистеме = СведенияДоверенности.СведСист;
	ИначеЕсли Не ЭтоНереестроваяМЧД(Ссылка) Тогда
		ДополнительныеСведенияДоверенности.СведенияОбИнформационнойСистеме = СведенияОбИнформационнойСистеме();
	КонецЕсли;
	
	Если ФорматыЭДО.ЕстьСвойствоXDTO(СведенияДоверенности, "ВнНомДовер", Истина) Тогда
		ДополнительныеСведенияДоверенности.ВнутреннийНомер = СведенияДоверенности.ВнНомДовер;
	КонецЕсли;
	
	Возврат ДополнительныеСведенияДоверенности;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область События

Процедура ПередЗаписьюДоверенностиВЖурнал(Источник, Отказ)
	ПараметрыЗаписи = ПолучитьПараметрыЗаписиВЖурналМЧД(Источник);
	Если ПараметрыЗаписи.ИзменилсяХеш Тогда
		РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.УдалитьЗапись(ПараметрыЗаписи.ПредыдущееЗначениеХеша);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

// Идентифицирует нереестровую МЧД.
// 
// Параметры:
//  Доверенность	- СправочникСсылка.МЧД003
//  				- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  				- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоНереестроваяМЧД(Доверенность) Экспорт
	
	ДанныеДоверенностиМЧД = 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, "НомерДоверенности, Подписана, СтатусВРеестреФНС");
	
	ПоказыватьСлужебныеСообщения = Ложь;
	
	ЭтоРеестроваяМЧД = ДанныеДоверенностиМЧД.Подписана
			И ЗначениеЗаполнено(ДанныеДоверенностиМЧД.СтатусВРеестреФНС);
			
	Если Не ЗначениеЗаполнено(ДанныеДоверенностиМЧД.СтатусВРеестреФНС) Тогда
		
		ЧастичныеДанные = 
			МашиночитаемыеДоверенностиПовтИсп.ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД(
				ДанныеДоверенностиМЧД.НомерДоверенности, , ПоказыватьСлужебныеСообщения);
				
		СтатусМЧДПолучен = 
			Не (ПустаяСтрока(ЧастичныеДанные.НомерДоверенности) Или ЧастичныеДанные.СтатусДоверенности = 404);
	
		ЭтоРеестроваяМЧД = СтатусМЧДПолучен
			Или (ДанныеДоверенностиМЧД.Подписана
				И ЗначениеЗаполнено(ДанныеДоверенностиМЧД.СтатусВРеестреФНС));
	КонецЕсли;
	
	Возврат Не ЭтоРеестроваяМЧД;
	
КонецФункции

// возвращает результат чтения данных xml файла МЧД.
//
// Параметры:
//  ДанныеXML - ДвоичныеДанные - Двоичные данные xml файла машиночитаемой доверенности.
//
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ДанныеДоверенности - ОбъектXDTO, Неопределено - в случае неудачного чтения данных - Неопределено
//  * ТекстОшибки - Строка
//
Функция ДанныеXMLМЧД(Знач ДанныеXML)
	
	Результат = Новый Структура("Успех, ДанныеДоверенности, ТекстОшибки", Ложь, Неопределено, "");
	
	ИмяТипа = "Файл";
	ПространствоИмен = "";
	ВидОперации = НСтр("ru = 'Чтение данных машиночитаемой доверенности.'");
	
	Попытка
		
		ПространствоИмен = ВерсияФорматаФайлаМЧД(ДанныеXML);
		
	Исключение
		
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки =
			НСтр("ru = 'Не удалось прочитать данные доверенности. Подробности в журнале регистрации'");
		Возврат Результат;
		
	КонецПопытки;
	
	Если ПространствоИмен = ПилотныйФорматМЧД()
		Или ПространствоИмен = ФорматМЧД_2022()
		Или ПространствоИмен = ФорматМЧД_2022_Версия_002()
		Или ПространствоИмен = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
			ИмяТипа = "Доверенность";
	ИначеЕсли ПространствоИмен = ФорматМЧД_b2g() Тогда
		ТекстОшибки = ТекстОшибкиЗагрузкиДоверенности_B2G();
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	Иначе
		ТекстОшибки = ТекстОшибкиЗагрузкиДоверенностиДругогоФормата();
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Кодировка = ОбщегоНазначенияБЭД.КодировкаИзОбъявленияXML(ДанныеXML); // для поддержки устаревших версий МЧД
	Если ПустаяСтрока(Кодировка) Тогда
		Кодировка = "windows-1251";
	КонецЕсли;
	Данные = ОбщегоНазначенияБЭД.ДобавитьПространствоИмен(ДанныеXML, ПространствоИмен, Кодировка);
	Объект = ОбщегоНазначенияБЭД.ОбъектXDTOИзДанныхXML(Данные, ПространствоИмен, ИмяТипа, Кодировка);
	Результат.ДанныеДоверенности = Объект;
	Результат.Успех = Истина;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  СвойстваСервераМЧД - см. СвойстваСервераМЧД
//  ЗапросHTTP - HTTPЗапрос
//
// Возвращаемое значение:
//  HTTPОтвет
//
Функция ОтправитьЗапросДляОбработки(СвойстваСервераМЧД, ЗапросHTTP)
	
	ОписаниеСоединения =
		ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
	
	Результат = ИнтернетСоединениеБЭД.ВызватьHTTPМетод(ОписаниеСоединения, ЗапросHTTP,
		ИнтернетСоединениеБЭД.HTTPМетоды().POST,  НСтр("ru = 'Запрос данных с узла ФНС'"));
	
	Возврат Результат.Ответ;
	
КонецФункции

// Параметры:
//  СвойстваСервераМЧД - см. СвойстваСервераМЧД
//  ЗапросHTTP - HTTPЗапрос
//
// Возвращаемое значение:
//   - HTTPОтвет
//   - Неопределено
//
Функция ПолучитьОтвет(СвойстваСервераМЧД, ЗапросHTTP)
	
	ОписаниеСоединения =
		ИнтернетСоединениеБЭД.ОписаниеHTTPСоединения(СвойстваСервераМЧД.АдресСервераБезАутентификации, 30);
	Результат = ИнтернетСоединениеБЭД.ВызватьHTTPМетод(ОписаниеСоединения, ЗапросHTTP,
		ИнтернетСоединениеБЭД.HTTPМетоды().GET,  НСтр("ru = 'Запрос данных с узла ФНС'"));
	
	Возврат Результат.Ответ;
	
КонецФункции

// Получает реквизиты для выгрузки данных доверенностей
//
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003,
//  				СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  
// Возвращаемое значение:
//  Структура:
//   * ЭлектроннаяПодпись - ДвоичныеДанные
//   						# ХранилищеЗначения
//   * Подписана - Булево
//   * XMLфайлМЧД - ХранилищеЗначения
//
Функция РеквизитыДляВыгрузкиДанныхДоверенности(Доверенность)
		
	Если ТипЗнч(Доверенность) = Тип("СправочникСсылка.МЧД003") Тогда
		
		Подписи = Справочники.МЧД003.ПодписиДоверенности(Доверенность);
		Подписана = ЗначениеЗаполнено(Подписи);
		Подпись = Неопределено;
		
		Если Подписана Тогда
			Подпись = Подписи[0];
		КонецЕсли;
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, "ФайлМЧД");
		ЗначенияРеквизитов.Вставить("ЭлектроннаяПодпись", Подпись);
		ЗначенияРеквизитов.Вставить("Подписана", Подписана);
		ЗначенияРеквизитов.Вставить("XMLфайлМЧД", ЗначенияРеквизитов.ФайлМЧД);
		
	Иначе
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, "ЭлектроннаяПодпись, XMLфайлМЧД, Подписана");
		
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Возвращает данные файлов из архива с машиночитаемой доверенностью и подписью.
//
// Параметры:
//  ДанныеАрхива - ДвоичныеДанные, Строка - Двоичные данные архива или адрес во временном хранилище.
//
// Возвращаемое значение:
//  - Неопределено
//  - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
Функция ПрочитатьАрхив(ДанныеАрхива) Экспорт
	
	ВидОперации = НСтр("ru = 'Чтение архива машиночитаемой доверенности'");
	Если ТипЗнч(ДанныеАрхива) = Тип("Строка") Тогда
		ДвоичныеДанныеАрхива = ПолучитьИзВременногоХранилища(ДанныеАрхива);
	Иначе
		ДвоичныеДанныеАрхива = ДанныеАрхива;
	КонецЕсли;
	
	РезультатЧтения = ПрочитатьАрхивДоверенности(ДвоичныеДанныеАрхива);
	Если РезультатЧтения.ОшибкаДоступаНаLinux Тогда
		
		ИсправленныеДанныАрхива = РаботаСФайламиБЭД.ИсправитьСигнатуруАрхиваДляЧтенияВLinux(ДвоичныеДанныеАрхива);
		Если ТипЗнч(ИсправленныеДанныАрхива) = Тип("ДвоичныеДанные") Тогда
			РезультатЧтения = ПрочитатьАрхивДоверенности(ИсправленныеДанныАрхива);
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать файл машиночитаемой доверенности.'");
			ПодробныйТекстОшибки = ИсправленныеДанныАрхива;
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеФайлов = РезультатЧтения.ДанныеФайлов;
	Если ДанныеФайлов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеФайлов.ДанныеДоверенности) Тогда
		ТекстОшибки = НСтр("ru = 'В архиве отсутствует xml файл доверенности'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ЭтоФормат003 = ВерсияФорматаФайлаМЧД(ДанныеФайлов.ДанныеДоверенности)
		= МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003();
	Если ДанныеФайлов.ДанныеПодписей.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'В архиве отсутствует подпись'");
	ИначеЕсли ДанныеФайлов.ДанныеПодписей.Количество() > 1 И Не ЭтоФормат003 Тогда
		ТекстОшибки = НСтр("ru = 'В архиве несколько файлов подписи'");
	Иначе
		ТекстОшибки = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Параметры:
//  ДвоичныеДанныеАрхива - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Структура:
//  * ОшибкаДоступаНаLinux - Булево
//  * ДанныеФайлов - Неопределено
//                 - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//
Функция ПрочитатьАрхивДоверенности(ДвоичныеДанныеАрхива)
	
	Результат = Новый Структура;
	Результат.Вставить("ОшибкаДоступаНаLinux", Ложь);
	Результат.Вставить("ДанныеФайлов", Неопределено);
	
	Попытка
		Результат.ДанныеФайлов = РаспаковатьАрхивСМЧДИзПолныхДанных(ДвоичныеДанныеАрхива);
	Исключение
		Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда
			Результат.ОшибкаДоступаНаLinux = Истина;
		Иначе
			ТекстОшибки = НСтр("ru = 'Не удалось прочитать xml файл по причине:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстОшибки, 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
		КонецЕсли;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает значение передоверия из представления реестра ФНС
//
// Параметры:
//  ЗначениеПередоверия - Строка
//
// Возвращаемое значение:
//  Булево
//
Функция ПередовериеВозможно(ЗначениеПередоверия)
	
	ПередовериеВозможно = Ложь;
	
	Если ЗначениеПередоверия = "3" Или ЗначениеПередоверия = "1"  Тогда
		ПередовериеВозможно = Истина;
	КонецЕсли;
	
	Возврат ПередовериеВозможно;
	
КонецФункции

// Возвращает идентификатор пространства имен МЧД b2g
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_b2g()
	Возврат "ON_DOVEL";
КонецФункции

Функция ТекстОшибкиЗагрузкиДоверенности_B2G()
	Возврат НСтр("ru = 'Загружаемая доверенность, предназначена для передачи в адрес налоговых органов.
						|Такая доверенность не может быть использована при обмене с контрагентами.
						|Выберите для загрузки доверенность подходящего назначения.'");
КонецФункции

Функция ТекстОшибкиЗагрузкиДоверенностиДругогоФормата()
	Возврат НСтр("ru = 'Формат загружаемой доверенности не поддерживается в текущей версии программы.
						|Обновитесь до актуальной версии и повторите загрузку.'");
КонецФункции

// Загружает родительские доверенности для данной доверенности
//
// Параметры:
//  МЧД - ОпределяемыйТип.МашиночитаемаяДоверенность
//
Процедура ЗагрузитьРодительскиеДоверенности(МЧД) Экспорт
	
	ДанныеРодительскойДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, 
		"НомерРодительскойДоверенности, ИННДоверителяРодительскойДоверенности");
	
	Если Не ЗначениеЗаполнено(ДанныеРодительскойДоверенности.НомерРодительскойДоверенности) Тогда
		Возврат;
	КонецЕсли;
	
	НаборДанныхМЧД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовыеДанныеДоверенности());
	НаборДанныхМЧД[0].НомерДоверенности = ДанныеРодительскойДоверенности.НомерРодительскойДоверенности;
	НаборДанныхМЧД[0].ИННДоверителя     = ДанныеРодительскойДоверенности.ИННДоверителяРодительскойДоверенности;

	Если ЭтоМЧДКонтрагента(МЧД) Тогда
		СведенияОСтатусахДоверенностейКонтрагентов(НаборДанныхМЧД);
	Иначе
		СведенияОСтатусахДоверенностейОрганизаций(НаборДанныхМЧД);
	КонецЕсли;
	
КонецПроцедуры

// Получает родительские данные доверенности
//
// Параметры:
//  НомерДоверенности - Строка
//  ИННДоверителя - Строка
//  НомераМЧД - Массив из строка, Неопределено
//
// Возвращаемое значение:
//  См. НовыеСведенияМЧД
//
Функция ПолучитьРодительскиеДанныеДоверенности(НомерДоверенности,
	ИННДоверителя, НомераМЧД = Неопределено)
	
	Если НомераМЧД = Неопределено Тогда
		НомераМЧД = Новый Массив();
	КонецЕсли;
	
	НомераМЧД.Добавить(НомерДоверенности);
		
	Доверенность = Неопределено;
	
	СведенияМЧД = НовыеСведенияМЧД();
	Доверенности = 
		НайтиДоверенности(НомерДоверенности, ИННДоверителя, Справочники.МашиночитаемыеДоверенностиОрганизаций, Истина);
	Если Доверенности.Количество() > 0 Тогда
		Доверенность = Доверенности[0];
		СведенияМЧД.Ссылка = Доверенность;
		СправочникМЧД = СправочникМЧД(Доверенность); 
		
		Если ЭтоНереестроваяМЧД(Доверенность) Тогда
			СведенияМЧД = СправочникМЧД.СведенияМЧД(Доверенность);
			УстановитьДанныеРодительскойДоверенности(СведенияМЧД);
			Возврат СведенияМЧД;
		КонецЕсли; 
	КонецЕсли;
	
	СведенияДоверенности = МашиночитаемыеДоверенностиПовтИсп.ПолучитьСведенияДоверенностиНаСервереМЧД(
		НомерДоверенности, ИННДоверителя);
	
	СведенияМЧД.НомерДоверенности = НомерДоверенности;
	СведенияМЧД.ИННДоверителя = ИННДоверителя;
	СведенияМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных = СведенияДоверенности.ДатаЗагрузкиИзРеестра;
		
	Если ЗначениеЗаполнено(СведенияДоверенности.ПолныеДанные) Тогда
		
		ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
		ДанныеДляЗагрузки.ДанныеДоверенности = СведенияДоверенности.ПолныеДанные.ДанныеВыгрузки;
		ДанныеДляЗагрузки.ДанныеПодписи = СведенияДоверенности.ПолныеДанные.ДанныеПодписи;
		ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = СведенияДоверенности.ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену;
		
		ДатаЗагрузки = СведенияДоверенности.ДатаЗагрузкиИзРеестра;
		СтатусВРеестреФНС = 
			МашиночитаемыеДоверенностиКлиентСервер.СтатусВРеестреФНС(
				СведенияДоверенности.ЧастичныеДанные.СтатусДоверенности);
		
		ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
		ДополнительныеСведения.СтатусВРеестреФНС = СтатусВРеестреФНС;
		ДополнительныеСведения.ДатаЗагрузки = ДатаЗагрузки;
			
		РезультатЗагрузки =
			МашиночитаемыеДоверенностиВызовСервера.ЗагрузитьМЧД(ДанныеДляЗагрузки,
				Ложь, Истина, ДополнительныеСведения);
			
		ДанныеИзФайлаОбмена = ДанныеИзФайлаОбмена(СведенияДоверенности.ПолныеДанные.ДанныеВыгрузки);
		ДанныеДоверенности = ДанныеИзФайлаОбмена.ДанныеДоверенности;

		Если ЭтоМЧД003(РезультатЗагрузки.МЧД) Тогда
			СведенияМЧД = Справочники.МЧД003.СведенияМЧД(РезультатЗагрузки.МЧД);
			СведенияМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных = СведенияДоверенности.ДатаЗагрузкиИзРеестра;
		Иначе
			Представители = ДанныеДоверенности.Представители;
			
			Для Каждого Представитель Из Представители Цикл
				
				Если Представитель.ТипУполномоченногоПредставителя = "ЮЛ"
					Или Представитель.ТипУполномоченногоПредставителя = "ИО" Тогда
					СведенияМЧД.ИННПредставителей.Добавить(Представитель.ПредставительЮЛ_ИНН);
				Иначе
					СведенияМЧД.ИННПредставителей.Добавить(Представитель.ПредставительФЛ_ИНН);
				КонецЕсли;
				
			КонецЦикла;
			
			СведенияМЧД.Ссылка = РезультатЗагрузки.МЧД;
			СведенияМЧД.СтатусВРеестреФНС = СтатусВРеестреФНС;
			СведенияМЧД.ДатаПолученияСведений = СведенияДоверенности.ДатаЗагрузкиИзРеестра;
			СведенияМЧД.Верна = Истина;
			СведенияМЧД.ДатаВыдачи = ДанныеДоверенности.ДатаВыдачи;
			СведенияМЧД.ДатаОкончания = ДанныеДоверенности.ДатаОкончания;
			СведенияМЧД.НомерДоверенности = НомерДоверенности;
			СведенияМЧД.НомерРодительскойДоверенности = ДанныеДоверенности.НомерРодительскойДоверенности;
			СведенияМЧД.ИННДоверителя = ИННДоверителя;
			СведенияМЧД.ИННДоверителяРодительскойДоверенности = ДанныеДоверенности.ИННДоверителяРодительскойДоверенности;
			СведенияМЧД.Полномочия = ДанныеДоверенности.Полномочия;
			СведенияМЧД.ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(РезультатЗагрузки.МЧД).Правило;
			СведенияМЧД.ТипПередоверия = ДанныеДоверенности.ТипПередоверия;
			СведенияМЧД.Подписана = ЗначениеЗаполнено(СведенияДоверенности.ПолныеДанные.ДанныеПодписи)
				И ЗначениеЗаполнено(СведенияДоверенности.ПолныеДанные.ДанныеВыгрузки);
				ЗаполнитьРеквизитыОтзыва(СведенияМЧД, ДанныеДляЗагрузки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияМЧД.НомерРодительскойДоверенности)
			И НомераМЧД.Найти(СведенияМЧД.НомерРодительскойДоверенности) = Неопределено Тогда
			СведенияМЧД.РодительскиеДанныеМЧД = ПолучитьРодительскиеДанныеДоверенности(
				СведенияМЧД.НомерРодительскойДоверенности, СведенияМЧД.ИННДоверителяРодительскойДоверенности, НомераМЧД);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Доверенность) Тогда
		
		СведенияМЧД = СправочникМЧД.СведенияМЧД(Доверенность);
		СведенияМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных = СведенияМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных;
		
		Если Не ЗначениеЗаполнено(СведенияМЧД.ТипПередоверия)
			И ТипЗнч(СведенияМЧД.Ссылка) <> Тип("СправочникСсылка.МЧД003") Тогда
			ДанныеДоверенности = ДанныеДоверенности(СведенияМЧД.Ссылка);
			СведенияМЧД.ТипПередоверия = ДанныеДоверенности.ТипПередоверия;
		КонецЕсли;
		
		Результат = НовыйСтатусВРеестреФНС();
		Результат.СтатусВРеестреФНС = СведенияМЧД.СтатусВРеестреФНС;
		Результат.ДатаОтзыва = СведенияМЧД.ДатаОтзыва;
		Результат.ДатаПолученияСтатуса = СведенияМЧД.ДатаПолученияСведений;
		
		Если ЗначениеЗаполнено(СведенияДоверенности.ЧастичныеДанные) Тогда
			Результат = СтатусДоверенности(СведенияДоверенности.ЧастичныеДанные,
					СведенияМЧД.СтатусВРеестреФНС, СведенияМЧД.ДатаОтзыва);
			СведенияМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных = ТекущаяДатаСеанса();
		КонецЕсли;
			
		СтатусУстановлен = СправочникМЧД(Доверенность).УстановитьСтатус(Доверенность, Результат);
		Если СтатусУстановлен Тогда
			СведенияМЧД = СправочникМЧД(Доверенность).СведенияМЧД(Доверенность);
			УстановитьДанныеРодительскойДоверенности(СведенияМЧД);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СведенияМЧД;
	
КонецФункции

// Параметры:
//  СведенияМДЧ - см. НовыеСведенияМЧД
Процедура УстановитьДанныеРодительскойДоверенности(СведенияМДЧ)
	Если ЗначениеЗаполнено(СведенияМДЧ)
		И ЗначениеЗаполнено(СведенияМДЧ.НомерРодительскойДоверенности) Тогда
		
		// Рекурсивное получение сведений родительских доверенностей
		СведенияМДЧ.РодительскиеДанныеМЧД = ПолучитьРодительскиеДанныеДоверенности(
			СведенияМДЧ.НомерРодительскойДоверенности,
				СведенияМДЧ.ИННДоверителяРодительскойДоверенности);
	КонецЕсли;
КонецПроцедуры

// Получает полные данные доверенности на сервере МЧД.
// 
// Параметры:
//  НомерДоверенности - Строка - Номер доверенности
//  ИННДоверителя - Строка - ИНН доверителя
//  ТокенДоступа - Строка - Токен доступа
//  ПоказыватьСлужебныеСообщения - Булево
// 
// Возвращаемое значение:
//  Структура - Полные данные доверенности:
//   * ДанныеВыгрузки - ДвоичныеДанные, Неопределено - Данные выгрузки
//   * ДанныеПодписи - ДвоичныеДанные, Неопределено - Данные подписи
//   * ДанныеПодписиЗаявленияНаОтмену - ДвоичныеДанные, Неопределено - Данные подписи заявления на отмену
//   * ДанныеАрхива - ДвоичныеДанные, Неопределено - Данные архива
//   * СтатусПолучения - Строка - Статус получения
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//   * ТекстОшибки - Строка - Текст ошибки при успешном ответе сервера на запрос
//
Функция ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(НомерДоверенности, ИННДоверителя, ТокенДоступа = "", ПоказыватьСлужебныеСообщения = Истина)
	
	Если НЕ ЗначениеЗаполнено(ТокенДоступа) Тогда
		ТокенДоступа = АвторизоватьсяНаСервереМЧД().ТокенДоступа;
	КонецЕсли;
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.ПолучениеПолныхДанныхДоверенностиНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ДанныеВыгрузки", Неопределено);
	Результат.Вставить("ДанныеПодписи", Неопределено);
	Результат.Вставить("ДанныеАрхива", Неопределено);
	Результат.Вставить("ДанныеПодписиЗаявленияНаОтмену", Неопределено);
	Результат.Вставить("СтатусПолучения", "");
	Результат.Вставить("ТекстОтвета", "");
	Результат.Вставить("ТекстОшибки", "");
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен статус запроса данных доверенности с сервера МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные доверенности с сервера МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении данных доверенности с сервера МЧД распределенного реестра. %1'");
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок, КодыОшибокДоступа());
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ШаблоныОшибок.ШаблоныДляКодовОшибок,
		КодыОшибокОтзыва(НомерДоверенности));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/poazip?poaNumber=" + НомерДоверенности + ?(ИННДоверителя = Неопределено, "", "&issuerInn=" + ИННДоверителя),
		"/poar-webapp/integration/poa/" + НомерДоверенности
			+ ?(ИННДоверителя = Неопределено, "", "/" + ИННДоверителя) + "/zip");
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	ЗаголовкиHTTP.Вставить(?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI, "authorizationtoken", "authorization"),
		"Bearer " + ТокенДоступа);
	
	ДобавитьHTTPЗаголовокРежимаТестирования(ЗаголовкиHTTP);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере, ЗаголовкиHTTP);
	
	Попытка
		ОтветHTTP = ПолучитьОтвет(СвойстваСервераМЧД, ЗапросHTTP);
	Исключение
		Если ПоказыватьСлужебныеСообщения Тогда
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Если ОтветHTTP = Неопределено Тогда
		Результат.ТекстОшибки =
			НСтр("ru = 'Не удалось получить данные с сервера МЧД распределенного реестра. Повторите попытку позже'");
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	Если НРег(ОтветHTTP.Заголовки["Content-Type"]) = "application/zip"
		ИЛИ НРег(ОтветHTTP.Заголовки["content-type"]) = "application/zip"
		ИЛИ НРег(ОтветHTTP.Заголовки["Content-Type"]) = "multipart"
		ИЛИ НРег(ОтветHTTP.Заголовки["content-type"]) = "multipart"
		ИЛИ НРег(Лев(ОтветHTTP.Заголовки["Content-Disposition"], 10)) = "attachment"
		ИЛИ НРег(Лев(ОтветHTTP.Заголовки["content-disposition"], 10)) = "attachment" Тогда
		
		Попытка
			
			Результат.ДанныеАрхива = ОтветHTTP.ПолучитьТелоКакДвоичныеДанные();
				
			РезультатРаспаковкиАрхива = РаспаковатьАрхивСМЧДИзПолныхДанных(Результат.ДанныеАрхива);
			
			Результат.ДанныеВыгрузки = РезультатРаспаковкиАрхива.ДанныеДоверенности;
			Результат.ДанныеПодписи = РезультатРаспаковкиАрхива.ДанныеПодписи;
			Результат.ДанныеПодписиЗаявленияНаОтмену = РезультатРаспаковкиАрхива.ДанныеПодписиЗаявленияНаОтмену;
		
		Исключение
			Если ПоказыватьСлужебныеСообщения Тогда
				ВывестиИЗаписатьОшибкуМЧД(Новый Структура("ШаблонОшибкиИзИсключения",
					НСтр("ru = 'Не удалось распаковать ответ при получении данных доверенности с сервера МЧД: %1'")));
			КонецЕсли;
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(РезультатРаспаковкиАрхива.ТекстОшибки) Тогда
			Результат.ТекстОшибки = РезультатРаспаковкиАрхива.ТекстОшибки;
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.ДанныеВыгрузки) Тогда
			Если ПоказыватьСлужебныеСообщения Тогда
				ВывестиИЗаписатьОшибкуМЧД(Новый Структура("ТекстОшибкиПоУмолчанию",
					НСтр("ru = 'Не получены данные доверенности с сервера МЧД'")));
			КонецЕсли;
			ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
			Возврат Результат;
		КонецЕсли;
		
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
		Возврат Результат;
		
	КонецЕсли;
	
	Попытка
		
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ОбщегоНазначения.JSONВЗначение(Результат.ТекстОтвета, , Ложь);
		
		Результат.СтатусПолучения = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("reqStatus"),
			СтруктураОтвета.reqStatus, "");
		Если Результат.СтатусПолучения = "PENDING" Тогда
			Результат.ТекстОшибки = 
				НСтр("ru='Операция выполняется, идет запрос данных с узла ФНС. Повторите попытку позже.'");
		КонецЕсли;
	Исключение
		Если ПоказыватьСлужебныеСообщения Тогда
			ШаблоныОшибок.ШаблонОшибкиИзИсключения =
				НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.СтатусПолучения) Тогда
		Если ПоказыватьСлужебныеСообщения Тогда
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// Производит распаковку полных данных доверенности, полученных с узла распределенного реестра МЧД.
// 
// Параметры:
//  ДанныеАрхива - ДвоичныеДанные - Данные архива
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//
Функция РаспаковатьАрхивСМЧДИзПолныхДанных(ДанныеАрхива)
	
	Результат = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	
	ОбъектЧтение = Новый ЧтениеZipФайла(ДанныеАрхива.ОткрытьПотокДляЧтения());
	Если ОбъектЧтение.Элементы.Количество() <> 0 Тогда

		КаталогРаспаковки = ФайловаяСистема.СоздатьВременныйКаталог();

		Для Каждого ЭлементАрхива Из ОбъектЧтение.Элементы Цикл

			РасширениеЭлемента = НРег(ЭлементАрхива.Расширение);

			ЭтоИмяФайлаДоверенности = ЭтоИмяФайлаДоверенности(ЭлементАрхива.Имя);
			
			ЭтоДоверенность = РасширениеЭлемента = "xml" И ЭтоИмяФайлаДоверенности;
			
			ЭтоПодписьДоверенности = ЭтоРасширениеФайлаПодписи(РасширениеЭлемента) И ЭтоИмяФайлаДоверенности;

			ЭтоИмяФайлаЗаявленияНаОтмену = ЭтоИмяФайлаЗаявленияНаОтмену(ЭлементАрхива.Имя);
			ЭтоПодписьЗаявленияНаОтмену = ЭтоРасширениеФайлаПодписи(РасширениеЭлемента)
				И ЭтоИмяФайлаЗаявленияНаОтмену;

			ОбъектЧтение.Извлечь(ЭлементАрхива, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			
			Если ЭтоДоверенность Или ЭтоПодписьДоверенности Или ЭтоПодписьЗаявленияНаОтмену Тогда
				
				ДвоичныеДанные = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
				
				Если ЭтоДоверенность Тогда
					Результат.ДанныеДоверенности = ДвоичныеДанные;
				Иначе
					ДанныеПодписи = ОбщегоНазначенияБЭДКлиентСервер.ДекодированныеДвоичныеДанные(ДвоичныеДанные);
					Если ЭтоПодписьДоверенности Тогда
						Результат.ДанныеПодписи = ДанныеПодписи;
						Если Результат.ДанныеПодписей.Найти(ДанныеПодписи) = Неопределено Тогда
							Результат.ДанныеПодписей.Добавить(ДанныеПодписи);
						КонецЕсли;
					Иначе
						Результат.ДанныеПодписиЗаявленияНаОтмену = ДанныеПодписи;
						Если Результат.ДанныеПодписейЗаявленияНаОтмену.Найти(ДанныеПодписи) = Неопределено Тогда
							Результат.ДанныеПодписейЗаявленияНаОтмену.Добавить(ДанныеПодписи);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Результат.ДанныеДоверенности) Тогда // Не удалось найти файлы МЧД по префиксам.
			
			НаименованиеФайлаДоверенности = "";
			НаименованиеФайлаЗаявленияНаОтмену = "";
			
			Для Каждого ЭлементАрхива Из ОбъектЧтение.Элементы Цикл // Ищем доверенности или заявления на отмену
				Если НРег(ЭлементАрхива.Расширение) = "xml" Тогда
					
					ДвоичныеДанные = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
					
					ЭтоМЧД = Ложь;
					Попытка
						ЭтоМЧД = ЗначениеЗаполнено(ВерсияФорматаФайлаМЧД(ДвоичныеДанные));
					Исключение
						ВывестиИЗаписатьОшибкуМЧД(Новый Структура("ШаблонОшибкиИзИсключения", НСтр(
							"ru = 'Не удалось распаковать ответ при получении данных доверенности с сервера МЧД: %1'")));
						Продолжить;
					КонецПопытки;
					
					Если ЭтоМЧД Тогда
						НаименованиеФайлаДоверенности = ЭлементАрхива.ИмяБезРасширения;
						Результат.ДанныеДоверенности = ДвоичныеДанные;
						Продолжить;
					КонецЕсли;
					
					ЭтоЗаявлениеНаОтмену = Ложь;
					Попытка
						ЭтоЗаявлениеНаОтмену = ЭтоЗаявлениеНаОтмену(ДвоичныеДанные);
					Исключение
						ВывестиИЗаписатьОшибкуМЧД(Новый Структура("ШаблонОшибкиИзИсключения", НСтр(
							"ru = 'Не удалось распаковать ответ при получении данных заявления на отмену с сервера МЧД: %1'")));
						Продолжить;
					КонецПопытки;
					
					Если ЭтоЗаявлениеНаОтмену Тогда
						НаименованиеФайлаЗаявленияНаОтмену = ЭлементАрхива.ИмяБезРасширения;
						Результат.ДанныеЗаявленияНаОтмену = ДвоичныеДанные;
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПустаяСтрока(НаименованиеФайлаДоверенности) 
				Или Не ПустаяСтрока(НаименованиеФайлаЗаявленияНаОтмену) Тогда // Ищем подписи доверенности или заявления на отмену
				
				Для Каждого ЭлементАрхива Из ОбъектЧтение.Элементы Цикл
					
					ЭтоПодписьМЧД = 
						ПодписьИзАрхиваМЧДСопоставленаСИменемФайла(ЭлементАрхива, НаименованиеФайлаДоверенности);
					ЭтоПодписьЗаявленияНаОтмену = 
						ПодписьИзАрхиваМЧДСопоставленаСИменемФайла(ЭлементАрхива, НаименованиеФайлаЗаявленияНаОтмену);
					
					Если ЭтоПодписьМЧД Тогда
					
						ДвоичныеДанные = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
						ДанныеПодписи =	ОбщегоНазначенияБЭДКлиентСервер.ДекодированныеДвоичныеДанные(ДвоичныеДанные);
					
						Результат.ДанныеПодписи = ДанныеПодписи;
						Если Результат.ДанныеПодписей.Найти(ДанныеПодписи) = Неопределено Тогда
							Результат.ДанныеПодписей.Добавить(ДанныеПодписи);
						КонецЕсли;
					ИначеЕсли ЭтоПодписьЗаявленияНаОтмену Тогда
					
						ДвоичныеДанные = Новый ДвоичныеДанные(КаталогРаспаковки + ЭлементАрхива.Имя);
						ДанныеПодписи = ОбщегоНазначенияБЭДКлиентСервер.ДекодированныеДвоичныеДанные(ДвоичныеДанные);
					
						Результат.ДанныеПодписиЗаявленияНаОтмену = ДанныеПодписи;
						Если Результат.ДанныеПодписейЗаявленияНаОтмену.Найти(ДанныеПодписи) = Неопределено Тогда
							Результат.ДанныеПодписейЗаявленияНаОтмену.Добавить(ДанныеПодписи);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаталогРаспаковки) Тогда
		ФайловаяСистема.УдалитьВременныйФайл(КаталогРаспаковки);
	КонецЕсли;
	
	ОбъектЧтение.Закрыть();
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат сопоставления имени файла с файлом подписи из архива МЧД.
// 
// Параметры:
//  ЭлементАрхива - ЭлементZipФайла
//  ИмяФайла - Строка
//  
// Возвращаемое значение:
//  Булево
Функция ПодписьИзАрхиваМЧДСопоставленаСИменемФайла(ЭлементАрхива, ИмяФайла)
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЭтоРасширениеФайлаПодписи(НРег(ЭлементАрхива.Расширение)) 
		И СтрНачинаетсяС(НРег(ЭлементАрхива.Имя), НРег(ИмяФайла));

КонецФункции

// Возвращает признак того, что префикс в имени файла относится к МЧД
// 
// Возвращаемое значение:
//  Булево - возвращается Истина, если имя файла начинается с префикса, относящегося к МЧД
Функция ЭтоИмяФайлаДоверенности(ИмяФайла)
	Возврат СтрНачинаетсяС(НРег(ИмяФайла), НРег("Дов_"))
		Или СтрНачинаетсяС(НРег(ИмяФайла), НРег("ON_EMCHD_"));
КонецФункции

// Возвращает признак того, что префикс в имени файла относится к МЧД
// 
// Возвращаемое значение:
//  Булево - возвращается Истина, если имя файла начинается с префикса, относящегося к заявлению на отмену МЧД
Функция ЭтоИмяФайлаЗаявленияНаОтмену(ИмяФайла)
	Возврат СтрНачинаетсяС(НРег(ИмяФайла), НРег("ЗаявОтм_"));
КонецФункции

// Возвращает описание ошибки, если не настроена автопроверка полномочий МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ТекстОшибкиНеНастроенаАвтопроверка()
	Возврат НСтр("ru = 'Не настроены правила проверки полномочий'");
КонецФункции

// Возвращает описание ошибки, если не включена проверка полномочий МЧД.
// 
// Возвращаемое значение:
//  Строка
Функция ТекстОшибкиВыключеныПравилаПроверки()
	Возврат НСтр("ru = 'Правила проверки полномочий выключены'");
КонецФункции

Функция ТекстПодсказкиСкриптаПроверкиПолномочий() Экспорт
	
	Возврат СтроковыеФункции.ФорматированнаяСтрока(НСтр(
		"ru = '<b>Доступные параметры:</b>
		|  <b>Входные:</b>
		|  Параметры.ЭлектронныйДокумент - Ссылка на электронный документ
		|  Параметры.Доверенность - Ссылка на доверенность
		|  Параметры.СодержаниеДанныхОтправителя - ДеревоЗначений или Неопределено
		|  <b>Выходные:</b>
		|  Параметры.Результат - Структура с полями: Успех - Булево, ТекстОшибки - Строка|
		|
		|<b>Пример скрипта:</b>
		|Если Параметры.ЭлектронныйДокумент.ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ТоварнаяНакладная Тогда
		|    Параметры.Результат.Успех = НЕ Параметры.ЭлектронныйДокумент.СуммаДокумента > 1000000;
		|    Если НЕ Параметры.Результат.Успех Тогда
		|        Параметры.Результат.ТекстОшибки = ""Превышена максимально разрешенная доверенностью сумма"";
		|    КонецЕсли;
		|Иначе
		|    Параметры.Результат.ТекстОшибки = ""Не разрешено подписание документов данного вида"";
		|КонецЕсли;'"));
	
КонецФункции

// Проверяет полномочия доверенности по правилам проверки.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  			 - СправочникСсылка.МЧД003
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  					- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * Выполнено - Булево
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  
Функция ПроверитьПолномочияДоверенности(Доверенность, ЭлектронныйДокумент)
	
	ТекстПолномочияНеПодтверждены = НСтр("ru = 'Полномочия не подтверждены правилами проверки'");
	Результат = Новый Структура("Выполнено, Успех, ТекстОшибки", Ложь, Ложь, "");
	
	ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(Доверенность);
	Если Не ПравилоПроверки.Используется Тогда
		Результат.ТекстОшибки = ТекстОшибкиВыключеныПравилаПроверки();
		Возврат Результат;
	КонецЕсли;
	
	// Проверка текстовых полномочий

	ПравилоПроверки = ПравилоПроверки.Правило;

	Если Не ЗначениеЗаполнено(ПравилоПроверки) Тогда

		ВывестиОшибкуНекорректныхПравилПроверки(Доверенность, ЭлектронныйДокумент);
		Результат.ТекстОшибки = НСтр("ru = 'Проверка полномочий завершилась с ошибкой. Правила настроены некорректно.'");
		Возврат Результат;

	КонецЕсли;

	Скрипт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПравилоПроверки, "Скрипт");

	Если ЗначениеЗаполнено(Скрипт) Тогда

		Попытка

			Ответ = Новый Структура("Успех, ТекстОшибки", Ложь, "");
			ПараметрыПроверки = ПараметрыДляВыполненияСкриптаПроверкиПолномочий(Доверенность, ЭлектронныйДокумент,
				Ответ);
			ОбщегоНазначения.ВыполнитьВБезопасномРежиме(Скрипт, ПараметрыПроверки);

			Результат.Выполнено = Истина;
			Результат.Успех = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ, "Успех", Ложь);
			Результат.ТекстОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Ответ, "ТекстОшибки", "");

			Если Не Результат.Успех Тогда

				Если ПустаяСтрока(Результат.ТекстОшибки) Тогда
					Результат.ТекстОшибки = ТекстПолномочияНеПодтверждены;
				КонецЕсли;

			КонецЕсли;

		Исключение

			ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВидОперации = НСтр("ru = 'Проверка полномочий доверенности.'");
			ШаблонСообщения = Нстр(
				"ru = 'Ошибка при выполнении алгоритма проверки полномочий доверенности: %1 для документа: %2'");
			Сообщение = СтрШаблон(ШаблонСообщения, Доверенность, ЭлектронныйДокумент);
			ПодробныйТекстОшибки = Сообщение + Символы.ПС + ТекстОшибки;
			ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Сообщение);
			Результат.ТекстОшибки = НСтр("ru = 'Проверка полномочий завершилась с ошибкой.
										 |Возможно правила настроены некорректно.'");

		КонецПопытки;

	Иначе // Упрощенная настройка

		ТаблицаНастроек = Справочники.ПравилаПроверкиПолномочийМЧД.ТаблицаНастроекОтбора(ПравилоПроверки);
		ТаблицаНастроек.Колонки.Добавить("УсловиеВыполнено", Новый ОписаниеТипов("Булево"));
		Результат.Выполнено = Истина;

		Если ТаблицаНастроек.Количество() > 0 Тогда

			МассивПолей = ТаблицаНастроек.ВыгрузитьКолонку("ИмяПоляДанных");
			ПоляСтрокой = СтрСоединить(МассивПолей, ",");
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, ПоляСтрокой);

			Для Каждого СтрокаТЗНастроек Из ТаблицаНастроек Цикл

				ЕстьСвойствоВДокументе = РеквизитыДокумента.Свойство(СтрокаТЗНастроек.ИмяПоляДанных);
				Если Не ЕстьСвойствоВДокументе Тогда
					ВывестиОшибкуНекорректныхПравилПроверки(Доверенность, ЭлектронныйДокумент, ПравилоПроверки);
					Возврат Результат;
				КонецЕсли;

				ЗначениеРеквизитаДокумента = РеквизитыДокумента[СтрокаТЗНастроек.ИмяПоляДанных];
				Список = СтрокаТЗНастроек.Список.Получить();

				Если ЗначениеЗаполнено(Список) Тогда

					Для Каждого ЭлементСписка Из Список Цикл

						Если ЗначениеРеквизитаДокумента = ЭлементСписка.Значение Тогда
							СтрокаТЗНастроек.УсловиеВыполнено = Истина;
							Продолжить;
						КонецЕсли;

					КонецЦикла;

				ИначеЕсли ТипЗнч(СтрокаТЗНастроек.НачальноеЗначение) = Тип("Булево") Тогда

					СтрокаТЗНастроек.УсловиеВыполнено = ЗначениеРеквизитаДокумента = СтрокаТЗНастроек.НачальноеЗначение;

				ИначеЕсли ТипЗнч(СтрокаТЗНастроек.НачальноеЗначение) = Тип("Число") Тогда

					СтрокаТЗНастроек.УсловиеВыполнено = ?(СтрокаТЗНастроек.НачальноеЗначение = 0, Истина,
						ЗначениеРеквизитаДокумента >= СтрокаТЗНастроек.НачальноеЗначение) И ?(
						СтрокаТЗНастроек.КонечноеЗначение = 0, Истина, ЗначениеРеквизитаДокумента
						<= СтрокаТЗНастроек.КонечноеЗначение);

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		СтрокаТЗНастроек = ТаблицаНастроек.Найти(Ложь, "УсловиеВыполнено");
		Результат.Успех = СтрокаТЗНастроек = Неопределено И ТаблицаНастроек.Количество() > 0;

		Если Не Результат.Успех Тогда
			
			Если ЭтоМЧД003(Доверенность) Тогда
				
				Полномочия = Новый Массив;
				
				РезультатЗапроса = ПолномочияДоверенности003(Доверенность);
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					Полномочия.Добавить(СтрШаблон("%1: %2", Выборка.Код, Выборка.Наименование));
				КонецЦикла;
				
				Полномочия.Добавить(ТекстПолномочияНеПодтверждены);
				
			Иначе
				
				Полномочия = ПолномочияДоверенности(, Доверенность);
				Полномочия.Добавить(ТекстПолномочияНеПодтверждены);
				
			КонецЕсли;
			
			Результат.ТекстОшибки = СтрСоединить(Полномочия, Символы.ПС);
			
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает полномочия записанные в доверенность 003
//
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003
//
// Возвращаемое значение:
//  РезультатЗапроса:
//   * Код - Строка
//   * Наименование - Строка
Функция ПолномочияДоверенности003(Доверенность)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МЧД003Полномочия.Код,
	|	МЧД003Полномочия.Наименование
	|ИЗ
	|	Справочник.МЧД003.Полномочия КАК МЧД003Полномочия
	|ГДЕ
	|	МЧД003Полномочия.Ссылка = &Доверенность";
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

// Параметры:
//  Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  					- ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//  
// Возвращаемое значение:
//  Структура - Параметры для выполнения скрипта проверки полномочий:
// * Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
/// * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  					  - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// * СодержаниеДанныхОтправителя - Неопределено
//                               - ДеревоЗначений
// * Результат - Структура:
//  ** Успех - Булево
//  ** ТекстОшибки - Строка
Функция ПараметрыДляВыполненияСкриптаПроверкиПолномочий(Доверенность, ЭлектронныйДокумент, Ответ)
	
	ДанныеЭлектронногоДокумента = ЭлектронныеДокументыЭДО.ДанныеЭлектронногоДокумента(ЭлектронныйДокумент);
	СодержаниеДанныхОтправителя = ?(ЗначениеЗаполнено(ДанныеЭлектронногоДокумента.ДанныеОтправителя),
		ДанныеЭлектронногоДокумента.ДанныеОтправителя.Содержание, Неопределено);
	
	ПараметрыПроверки = Новый Структура();
	ПараметрыПроверки.Вставить("Доверенность", Доверенность);
	ПараметрыПроверки.Вставить("ЭлектронныйДокумент", ЭлектронныйДокумент);
	ПараметрыПроверки.Вставить("СодержаниеДанныхОтправителя", СодержаниеДанныхОтправителя);
	ПараметрыПроверки.Вставить("Результат", Ответ);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет наличие ограниченных полномочий доверенности
// 
// Параметры:
//  ДанныеДоверенности - Неопределено - допустимо в случае если задан параметр "Доверенность" 
//  				   - см. НовыеДанныеМЧД
//  Доверенность - Неопределено - допустимо в случае если задан параметр "ДанныеДоверенности" 
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов,
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Булево
//  
Функция ПолномочияОграничены(ДанныеДоверенности = Неопределено, Доверенность = Неопределено) Экспорт
	
	Если ДанныеДоверенности = Неопределено Тогда
		
		ДвоичныеДанныеДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "XMLфайлМЧД").Получить();
		РезультатЧтения = ДанныеИзФайлаОбмена(ДвоичныеДанныеДоверенности);
		Если НЕ РезультатЧтения.Успех Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Полномочие Из ДанныеДоверенности.Полномочия Цикл
		
		Если Полномочие.Код = "99" И Не АвтоматическоеДовериеПолнымПолномочиямОтключено() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ЭтоТекстПолныхПолномочий(Полномочие.Описание) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет текст на наличие полных полномочий.
// 
// Параметры:
//  ТекстПолномочий - Строка - Текст полномочий
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоТекстПолныхПолномочий(ТекстПолномочий) Экспорт
	
	Результат = АвтоматическоеДовериеПолнымПолномочиямОтключено();
	Если Результат Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстыПолныхПолномочий = Новый Массив;
	ТекстыПолныхПолномочий.Добавить(МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий());
	ТекстыПолныхПолномочий.Добавить(НСтр("ru = 'Полные полномочия'"));
	ТекстыПолныхПолномочий.Добавить(НСтр("ru = 'Все полномочия'"));
	
	Результат = ТекстыПолныхПолномочий.Найти(СокрЛП(ТекстПолномочий)) <> Неопределено;
	Возврат Результат;
	
КонецФункции

// Проверяет доверенность на наличие полных полномочий.
// 
// Параметры:
//  МЧД			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			 - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоМЧДСПолнымиПолномочиями(МЧД) Экспорт
	
	ТекстПолномочий = "";
	Если ТипЗнч(МЧД) = Тип("СправочникСсылка.МЧД003") Тогда
		ТекстПолномочий = Справочники.МЧД003.ТекстПолномочий(МЧД);
	Иначе
		ТекстПолномочий = ТекстПолномочий(, МЧД);
	КонецЕсли;
	
	ЭтоТекстПолныхПолномочий = ЭтоТекстПолныхПолномочий(ТекстПолномочий);
	
	Возврат ЭтоТекстПолныхПолномочий;
	
КонецФункции

// Проверяет таблицу полномочий на наличие полных полномочий.
// 
// Параметры:
//  Полномочия - ДанныеФормыКоллекция:
//  * Описание - Строка
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЭтоПолныеПолномочия(Полномочия) Экспорт
		
	Если Полномочия.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Для Каждого СтрокаПолномочий Из Полномочия Цикл
		Если Не ЭтоТекстПолныхПолномочий(СтрокаПолномочий.Описание) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает текстовое представление полномочий доверенности
// 
// Параметры:
//  ДанныеДоверенности - Неопределено - допустимо в случае если задан параметр "Доверенность" 
//  				   - см. НовыеДанныеМЧД
//  Доверенность - Неопределено - допустимо в случае если задан параметр "ДанныеДоверенности" 
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов,
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка
//  
Функция ТекстПолномочий(ДанныеДоверенности = Неопределено, Доверенность = Неопределено) Экспорт
	
	СтрокиПолномочий = ПолномочияДоверенности(ДанныеДоверенности, Доверенность);
	Возврат СтрСоединить(СтрокиПолномочий, Символы.ПС);
	
КонецФункции

// Формирует пустую структуру описания полномочия представителя МЧД.
// 
// Возвращаемое значение:
//  Структура:
//	  * Код - Строка
//	  * Описание - Строка
//	  * Содержание - Строка
//	  * Пояснение - Строка
// 
Функция НовыеПолномочияПредставителя() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Код", "");
	Результат.Вставить("Описание", "");
	Результат.Вставить("Содержание", "");
	Результат.Вставить("Пояснение", "");
	
	Возврат Результат;
	
КонецФункции

// Заполняет данные о полномочиях МЧД
//
// Параметры:
//  ДанныеДоверенности - см. НовыеДанныеМЧД
//  Полномочия - СписокXDTO
//
Процедура ЗаполнитьПолномочия(ДанныеДоверенности, Полномочия)
	
	Для Каждого Полномочие Из Полномочия Цикл 
		
		КодПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "КодПолн", "");
		ОписаниеПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "ТекстПолн", "");
		СодержаниеПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "СодержПолн", "");
		ПояснениеПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "ДопТекстПолн", "");
		
		РазделеныеКодыПолномочий = СтрРазделить(КодПолномочий, ";");
		РазделенныеОписанияПолномочий = СтрРазделить(ОписаниеПолномочий, ";");
		РазделенныеСодержанияПолномочий = СтрРазделить(СодержаниеПолномочий, ";");
		РазделенныеПоясненияПолномочий = СтрРазделить(ПояснениеПолномочий, ";");
		
		Если РазделеныеКодыПолномочий.Количество() > 1 Тогда
			Для Индекс = 0 По РазделеныеКодыПолномочий.Количество() - 1 Цикл
				
				СведенияОПолномочиях = НовыеПолномочияПредставителя();
				СведенияОПолномочиях.Код = РазделеныеКодыПолномочий[Индекс];
				
				Если РазделеныеКодыПолномочий.Количество() = РазделенныеОписанияПолномочий.Количество() Тогда
					СведенияОПолномочиях.Описание = РазделенныеОписанияПолномочий[Индекс];
				КонецЕсли;
				Если РазделеныеКодыПолномочий.Количество() = РазделенныеСодержанияПолномочий.Количество() Тогда
					СведенияОПолномочиях.Содержание = РазделенныеСодержанияПолномочий[Индекс];
				КонецЕсли;
				Если РазделеныеКодыПолномочий.Количество() = РазделенныеПоясненияПолномочий.Количество() Тогда
					СведенияОПолномочиях.Пояснение = РазделенныеПоясненияПолномочий[Индекс];
				КонецЕсли;
				
				ДанныеДоверенности.Полномочия.Добавить(СведенияОПолномочиях);
				
			КонецЦикла;
		Иначе
		
			СведенияОПолномочиях = НовыеПолномочияПредставителя();
			СведенияОПолномочиях.Код = КодПолномочий;
			СведенияОПолномочиях.Описание = ОписаниеПолномочий;
			СведенияОПолномочиях.Содержание = СодержаниеПолномочий;
			СведенияОПолномочиях.Пояснение = ПояснениеПолномочий; 
			ДанныеДоверенности.Полномочия.Добавить(СведенияОПолномочиях);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует пустую структуру данных субъекта МЧД.
// 
// Возвращаемое значение:
//  Структура:
//	* Фамилия - Строка -
//	* Имя - Строка -
//	* Отчество - Строка -
//	* Владелец - ПеречислениеСсылка.СубъектыДоверенности
// 
Функция НовыеДанныеСубъектаМЧД()
	
	Результат = Новый Структура;
	Результат.Вставить("Фамилия", "");
	Результат.Вставить("Имя", "");
	Результат.Вставить("Отчество", "");
	Результат.Вставить("Владелец", Перечисления.СубъектыДоверенности.ПустаяСсылка());
	Возврат Результат;
	
КонецФункции

// Формирует пустую структуру данных МЧД.
// 
// Возвращаемое значение:
//  Структура:
//	* XMLфайлМЧД - Неопределено
//				 - ХранилищеЗначения
//	* ДатаЗагрузкиИзРеестра - Дата
//	* НомерДоверенности - Строка
//	* ДатаВыдачи - Дата
//	* ДатаОкончания - Дата
//	* ДатаОтзыва - Дата
//	* СрокДействия - Строка
//	* СведенияОбИнформационнойСистеме - Строка
//	* НомерРодительскойДоверенности - Строка
//	* НомерОсновнойДоверенности - Строка
//	* ИННДоверителяРодительскойДоверенности - Строка
//	* КППДоверителяРодительскойДоверенности - Строка
//	* СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//	* ВозможноПередоверие - Булево
//	* ТипПередоверия - Строка
//	* ФИО - Массив из см. НовыеДанныеСубъектаМЧД
//	* Полномочия - Массив из см. НовыеПолномочияПредставителя
//	* УдостоверенияЛичности - Массив из см. НовыеДанныеУдостоверенияЛичности
//	* ТипОрганизации - Строка
//	* СовместныеПолномочия - Булево
//	* НесколькоПредставителей - Булево
//	* Представители - Массив Из Структура:
//		** ПредставительЮЛ_НаимОрг - Строка
//		** ПредставительЮЛ_ИНН - Строка
//		** ПредставительЮЛ_КПП - Строка
//		** ПредставительЮЛ_ОГРН - Строка
//		** ПредставительФЛ_ИНН - Строка
//		** ПредставительФЛ_ОГРН - Строка
//		** ПредставительФЛ_СНИЛС - Строка
//		** ПредставительФЛ_Гражданство - СправочникСсылка.СтраныМира
//		** ПредставительФЛ_ДатаРождения - Дата
//		** Представитель - Неопределено,
//						- СправочникСсылка
//		** Фамилия - Строка
//		** Имя - Строка
//		** Отчество - Строка
//		** УдостоверениеЛичности см. НовыеДанныеУдостоверенияЛичности
//		** ТипУполномоченногоПредставителя - Строка
//	* ДоверительЮЛ_НаимОрг - Строка
//	* ДоверительЮЛ_ИНН - Строка
//	* ДоверительЮЛ_КПП - Строка
//	* ДоверительЮЛ_ОГРН - Строка
//	* ДоверительЮЛ_Адр - Строка
//	* ЛицоБезДовФЛ_ИНН - Строка
//	* ЛицоБезДовФЛ_СНИЛС - Строка
//	* ЛицоБезДовФЛ_Гражданство - СправочникСсылка.СтраныМира
//	* ЛицоБезДовФЛ_ДатаРождения - Дата
//	* ЛицоБезДовФЛ_Должность - Строка
//	* ЛицоБезДовФЛ - Неопределено,
//				   - СправочникСсылка
//	* ЛицоБезДовЮЛ_НаимОрг - Строка
//	* ЛицоБезДовЮЛ_ИНН - Строка
//	* ЛицоБезДовЮЛ_КПП - Строка
//	* ЛицоБезДовЮЛ_ОГРН - Строка
//	* ЛицоБезДовЮЛ - Неопределено,
//				   - СправочникСсылка
//	* ДоверительЮЛ_ИностраннаяОрганизация - Булево
//	* ДоверительЮЛ_СтрРег - СправочникСсылка.СтраныМира
//	* ДоверительЮЛ_НаимРегОрг - Строка
//	* ДоверительЮЛ_РегНомер - Строка
//	* ДоверительФЛ_ИНН - Строка
//	* ДоверительФЛ_СНИЛС - Строка
//	* ДоверительФЛ_ДатаРождения - Дата
//	* ДоверительФЛ_МестоРожд - Строка
//	* ДоверительФЛ_Пол - Число - 1-мужской, 2-женский
//	* ДоверительФЛ_Гражданство - СправочникСсылка.СтраныМира
//	* ПредставительЮЛ_НаимОрг - Строка
//	* ПредставительЮЛ_ИНН - Строка
//	* ПредставительЮЛ_КПП - Строка
//	* ПредставительЮЛ_ОГРН - Строка
//	* ПредставительФЛ_ИНН - Строка
//	* ПредставительФЛ_ОГРН - Строка
//	* ПредставительФЛ_СНИЛС - Строка
//	* ПредставительФЛ_Гражданство - СправочникСсылка.СтраныМира
//	* ПредставительФЛ_ДатаРождения - Дата
//	* Представитель - Неопределено,
//					- СправочникСсылка
//	* Организация - Неопределено,
//				  - СправочникСсылка
// 
Функция НовыеДанныеМЧД() Экспорт

	ДанныеДоверенности = Новый Структура;

	ДанныеДоверенности.Вставить("XMLфайлМЧД", Неопределено);
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	ДанныеДоверенности.Вставить("НомерДоверенности", "");
	ДанныеДоверенности.Вставить("ДатаВыдачи", '00010101');
	ДанныеДоверенности.Вставить("ДатаОкончания", '00010101');
	ДанныеДоверенности.Вставить("ДатаОтзыва", '00010101');
	ДанныеДоверенности.Вставить("СрокДействия", "");
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", "");
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", "");
	ДанныеДоверенности.Вставить("НомерОсновнойДоверенности", "");
	ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", "");
	ДанныеДоверенности.Вставить("КППДоверителяРодительскойДоверенности", "");
	ДанныеДоверенности.Вставить("СтатусВРеестреФНС", 
		Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	
	ДанныеДоверенности.Вставить("ВозможноПередоверие", Ложь);
	ДанныеДоверенности.Вставить("ТипПередоверия", "");
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("Полномочия", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеДоверенности.Вставить("ТипОрганизации", "");
	ДанныеДоверенности.Вставить("СовместныеПолномочия", Ложь);
	ДанныеДоверенности.Вставить("НесколькоПредставителей", Ложь);
	ДанныеДоверенности.Вставить("Представители", Новый Массив);

	ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", "");

	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", Справочники.СтраныМира.ПустаяСсылка());
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", '00010101');
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", Неопределено);

	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", "");
	ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", Неопределено);
	
	ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Ложь);
	ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", Справочники.СтраныМира.ПустаяСсылка());
	ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", "");

	ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", "");
	ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", '00010101');
	ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", "");
	ДанныеДоверенности.Вставить("ДоверительФЛ_Пол", 1);
	ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.ПустаяСсылка());

	ДанныеДоверенности.Вставить("ПредставительЮЛ_НаимОрг", "");
	ДанныеДоверенности.Вставить("ПредставительЮЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ПредставительЮЛ_КПП", "");
	ДанныеДоверенности.Вставить("ПредставительЮЛ_ОГРН", "");
	
	ДанныеДоверенности.Вставить("ПредставительФЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ПредставительФЛ_ОГРН", "");
	ДанныеДоверенности.Вставить("ПредставительФЛ_СНИЛС", "");
	ДанныеДоверенности.Вставить("ПредставительФЛ_Гражданство", Справочники.СтраныМира.ПустаяСсылка());
	ДанныеДоверенности.Вставить("ПредставительФЛ_ДатаРождения", '00010101');
	
	ДанныеДоверенности.Вставить("Представитель", Неопределено);
	ДанныеДоверенности.Вставить("Организация", Неопределено);
		
	Возврат ДанныеДоверенности;
	
КонецФункции

// Формирует пустую структуру данных МЧД в очереди на регистрацию.
// 
//  Возвращаемое значение:
//   Структура:
//   * ЕстьВОчереди - Булево
//   * ВидЗапроса - Строка
//   * ДатаСоздания - Дата
//   * ДатаПоследнейПопытки - Дата
//   * НомерПопытки - Число
//
Функция НовыеДанныеМЧДВОчередиНаРегистрацию()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьВОчереди", Ложь);
	Результат.Вставить("ВидЗапроса", "");
	Результат.Вставить("ДатаСоздания", '00010101');
	Результат.Вставить("ДатаПоследнейПопытки", '00010101');
	Результат.Вставить("НомерПопытки", 0);
	
	Возврат Результат;
	
КонецФункции

// Доверенности действительны.
// 
// Параметры:
//  Доверенности - Массив Из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//               - Массив Из СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  ДатаПроверки - Дата - дата, на которую выполняется проверка
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение  - результат проверки:
//   * Ключ - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//          - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//   * Значение - Булево
//
Функция ДоверенностиДействительны(Доверенности, ДатаПроверки)
	
	РезультатПроверки = Новый Соответствие;
	СписокРеквизитов = "ДатаВыдачи, ДатаОкончания, Отозвана, ДатаОтзыва, СтатусВРеестреФНС, Верна,
		|ВариантЗаполненияПолномочий";
	РеквизитыДоверенностей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Доверенности, СписокРеквизитов);
	Для Каждого Доверенность Из Доверенности Цикл
		СвойстваДоверенности = НовыеСвойстваДоверенности();
		СвойстваДоверенности.Ссылка = Доверенность;
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, РеквизитыДоверенностей[Доверенность]);
		СвойстваДоверенности.ПолномочияУказаныИзКлассификатора =
			ПолномочияМЧДУказаныИзКлассификатора(Неопределено, РеквизитыДоверенностей[Доверенность].ВариантЗаполненияПолномочий);
		РезультатПроверки.Вставить(Доверенность, ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ДатаПроверки));
	КонецЦикла;
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает гражданство участника МЧД.
// 
// Параметры:
//  СведенияПоФизическомуЛицу - ОбъектXDTO
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира
//  
Функция ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу)
	
	Гражданство = Справочники.СтраныМира.ПустаяСсылка();
	ПризнакГражданства =
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "ПрГражд", "");
	
	Если ПризнакГражданства = "1" Тогда
		
		Гражданство = Справочники.СтраныМира.Россия;
		
	ИначеЕсли ПризнакГражданства = "2" Тогда
		
		КодСтраны = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Гражданство", "");
		Гражданство = Справочники.СтраныМира.НайтиПоКоду(КодСтраны);
		
	КонецЕсли;
	
	Возврат Гражданство;
	
КонецФункции

// Возвращает табличный документ МЧД в зависимости от версии формата.
// 
// Параметры:
//  ВерсияФормата - Строка
//  ДанныеМЧД - ОбъектXDTO
// 
// Возвращаемое значение:
//  ТабличныйДокумент, Неопределено -  табличный документ МЧД
//
Функция ТабличныйДокументПоФормату(ВерсияФормата, ДанныеМЧД)

	ТабличныйДокумент = Неопределено;
	
	Если ВерсияФормата = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
		ТабличныйДокумент = Справочники.МЧД003.ТабличныйДокументМЧД(ДанныеМЧД);
	КонецЕсли;	
		
	Возврат ТабличныйДокумент;
	
КонецФункции	

#Область БазовыйФункционалDOM

// Возвращает ДокументDOM, полученный из двоичных данных.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные или адрес временного хранилища
// 
// Возвращаемое значение:
//  ДокументDOM - Возвращаемый документ дом по входящим данным
//
Функция ПодготовитьДокументDOM(ВходящиеДанные)

	ЭтоФайл = Ложь;
	ТекущиеДанные = ВходящиеДанные;
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	ИначеЕсли ТипЗнч(ВходящиеДанные) = Тип("Строка") И НайтиФайлы(ВходящиеДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;

	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);

	Возврат ДокументDOM;

КонецФункции

// Возвращает найденные по выражению XPath элементы узла в виде массива
// 
// Параметры:
//  УзелВладелец - ДокументDOM
//  ТекстПоиска - Строка - выражение XPath
// 
// Возвращаемое значение:
//  Массив - Массив с найденными элементами DOM
//
Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска)

	Результат = Новый Массив;

	ДокументВладелец = УзелВладелец.ДокументВладелец;
	РазыменовательИмен = Новый РазыменовательПространствИменDOM(ДокументВладелец);
	НашлиЭлементы = ДокументВладелец.ВычислитьВыражениеXPath(ТекстПоиска, УзелВладелец, РазыменовательИмен);

	ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	Пока ОчереднойЭлемент <> Неопределено Цикл
		Результат.Добавить(ОчереднойЭлемент);
		ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает представление даты
// 
// Параметры:
//  ПредставлениеДаты - Строка
// 
// Возвращаемое значение:
//  Строка - представление даты
//
Функция ПодготовитьПредставлениеДаты(ПредставлениеДаты)

	Результат = ПредставлениеДаты;

	МассивСтроки = СтрРазделить(ПредставлениеДаты, ".", Ложь);

	Если МассивСтроки.Количество() = 3 И СтрДлина(МассивСтроки[2]) = 4 Тогда
		Результат = МассивСтроки[2] + МассивСтроки[1] + МассивСтроки[0];
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает ссылку на элемент справочника стран мира, найденную по коду
// 
// Параметры:
//  ПредставлениеСтраны - Строка
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира, Неопределено - Найденный элемент справочника стран мира
//
Функция ПодготовитьПредставлениеСтраны(ПредставлениеСтраны)

	Результат = Справочники.СтраныМира.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ПредставлениеСтраны) Тогда
		ДанныеОСтране = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(ПредставлениеСтраны);
		Если ДанныеОСтране <> Неопределено Тогда
			Результат = ДанныеОСтране.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает представление серии и номера документа в виде структуры
// 
// Параметры:
//  ПредставлениеСерияНомер - Строка
// 
// Возвращаемое значение:
//  Структура:
//  * Серия - Строка
//  * Номер - Строка
//
Функция ПодготовитьПредставлениеСерияНомер(ПредставлениеСерияНомер)

	Результат = Новый Структура;
	Результат.Вставить("Серия", ПредставлениеСерияНомер);
	Результат.Вставить("Номер", "");

	МассивСтроки = СтрРазделить(ПредставлениеСерияНомер, " ", Ложь);

	Если МассивСтроки.Количество() > 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0] + " " + МассивСтроки[1]);
		МассивСтроки.Удалить(0);
		МассивСтроки.Удалить(0);
		Результат.Вставить("Номер", СтрСоединить(МассивСтроки, " "));
	ИначеЕсли МассивСтроки.Количество() = 2 Тогда
		Результат.Вставить("Серия", МассивСтроки[0]);
		Результат.Вставить("Номер", МассивСтроки[1]);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает ссылку на физическое лицо по сведениям.
// 
// Параметры:
//  СписокСправочников - Строка - список справочников через запятую
//  ИНН - Строка
//  КПП - Строка
//  СНИЛС - Строка
// 
// Возвращаемое значение:
//  - СправочникСсылка.ФизическиеЛица
//  - Неопределено - если не элемент не найден в ИБ.
//
Функция ПодыскатьИнформациюВладельца(СписокСправочников, ИНН, КПП = "", СНИЛС = "")

	Результат = Неопределено;

	МассивСправочников = СтрРазделить(СписокСправочников, ",", Ложь);

	Если МассивСправочников.Найти("Организации") <> Неопределено
		ИЛИ МассивСправочников.Найти("Контрагенты") <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ИНН", ИНН);
		Если ЗначениеЗаполнено(КПП) Тогда
			СтруктураПоиска.Вставить("КПП", КПП);
		КонецЕсли;
		
		ИмяСправочника = ?(МассивСправочников.Найти("Организации") <> Неопределено, "Организации", "Контрагенты");
		ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяСправочника, Результат, , СтруктураПоиска);
		
		Если Результат = Неопределено Тогда
			ИмяСправочника = ?(МассивСправочников.Найти("Контрагенты") <> Неопределено, "Контрагенты", "Организации");
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ИмяСправочника, Результат, , СтруктураПоиска); 
		КонецЕсли;
				
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Результат) И МассивСправочников.Найти("ФизическиеЛица") <> Неопределено Тогда
		
		СведенияФизлица = Новый Структура;
		СведенияФизлица.Вставить("ИНН", ИНН);
		Результат = ЭлектронноеВзаимодействиеПереопределяемый.ПолучитьФизЛицоМЧД(СведенияФизлица);
		
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Находит элемент документа DOM, проверяет что оно одно и пытается получить значение и привести тип.
//
// Параметры:
//  УзелВладелец - Строка
//  ТекстПоиска - Строка
//  ЗначениеПоУмолчанию - Строка
// 
// Возвращаемое значение:
//  - Строка 
//  - Дата
//  - СправочникСсылка
//
Функция ПолучитьЗначениеДокумента(УзелВладелец, ТекстПоиска, ЗначениеПоУмолчанию = Неопределено)

	Результат = ЗначениеПоУмолчанию;

	ВыборкаЭлементов = ПолучитьВыборкуЭлементовDOM(УзелВладелец, ТекстПоиска);

	Если ВыборкаЭлементов.Количество() = 1 Тогда

		ЭлементВыборки = ВыборкаЭлементов[0];
		Если ТипЗнч(ЭлементВыборки) = Тип("АтрибутDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.Значение;
		ИначеЕсли ТипЗнч(ЭлементВыборки) = Тип("ЭлементDOM") Тогда
			ПредставлениеЗначения = ЭлементВыборки.ТекстовоеСодержимое;
		Иначе
			ПредставлениеЗначения = ЭлементВыборки.ЗначениеУзла;
		КонецЕсли;

		Если ТипЗнч(ЗначениеПоУмолчанию) = Тип("Дата") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеДаты(ПредставлениеЗначения);
		ИначеЕсли ТипЗнч(ЗначениеПоУмолчанию) = Тип("СправочникСсылка.СтраныМира") Тогда
			ПредставлениеЗначения = ПодготовитьПредставлениеСтраны(ПредставлениеЗначения);
		КонецЕсли;

		Если ЗначениеПоУмолчанию <> Неопределено Тогда
			МассивТипов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ЗначениеПоУмолчанию));
			ТекущийТип = Новый ОписаниеТипов(МассивТипов);
			Результат = ТекущийТип.ПривестиЗначение(ПредставлениеЗначения);
		Иначе
			Результат = ПредставлениеЗначения;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

// Добавляет сведения об участнике МЧД в коллекцию.
// 
// Параметры:
//  ФИО - ОбъектXDTO
//  ТипУчастника - ПеречислениеСсылка.СубъектыДоверенности 
//  МассивУчастников - Массив из Структура:
//  * Фамилия - Строка
//  * Имя - Строка
//  * Отчество - Строка
//  * Владелец - ПеречислениеСсылка.СубъектыДоверенности
Процедура ДобавитьСведенияОбУчастникеМЧД(ФИО, ТипУчастника, МассивУчастников)
	
	НоваяСтрока = Новый Структура;
	НоваяСтрока.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Фамилия", ""));
	НоваяСтрока.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Имя", ""));
	НоваяСтрока.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФИО, "Отчество", ""));
	НоваяСтрока.Вставить("Владелец", ТипУчастника);
	МассивУчастников.Добавить(НоваяСтрока);
			
КонецПроцедуры

//	Заполняет сведения о представителе с соблюдением формата МЧД версий 001, 002 и пилотной.
//	Состав ключей зависит от типа представителя.
//
// Параметры:
//  СведенияОбУполномоченномПредставителе - ОбъектXDTO
//  ТипУполномоченногоПредставителя - Строка
//  
// Возвращаемое значение:
//  Структура:
//	* ПредставительЮЛ_НаимОрг - Строка
//	* ПредставительЮЛ_ИНН - Строка
//	* ПредставительЮЛ_КПП - Строка
//	* ПредставительЮЛ_ОГРН - Строка
//	* ПредставительФЛ_ИНН - Строка
//	* ПредставительФЛ_ОГРН - Строка
//	* ПредставительФЛ_СНИЛС - Строка
//	* ПредставительФЛ_Гражданство - СправочникСсылка.СтраныМира
//	* ПредставительФЛ_ДатаРождения - Дата
//	* ПредставительФИО - Строка
//	* Представитель - Неопределено
//					- ОпределяемыйТип.Организация
//					- ОпределяемыйТип.КонтрагентБЭД
//					- ОпределяемыйТип.ФизическоеЛицо
//	* Фамилия - Строка
//	* Имя - Строка
//	* Отчество - Строка
//	* УдостоверениеЛичности - см. НовыеДанныеУдостоверенияЛичности
//	* ТипУполномоченногоПредставителя - Строка
//
Функция ЗаполнитьСведенияОПредставителеМЧД(СведенияОбУполномоченномПредставителе, ТипУполномоченногоПредставителя)
	
	Представитель = Новый Структура;
	Представитель.Вставить("ТипУполномоченногоПредставителя", ТипУполномоченногоПредставителя);

	Если ТипУполномоченногоПредставителя  = "ЮЛ" Тогда
		
		СведенияОрганизации = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУполномоченномПредставителе, "СвОрг.СвОрг", "");
			
		Если ПустаяСтрока(СведенияОрганизации) Тогда
			СведенияОрганизации = 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУполномоченномПредставителе, "СвОрг", "");
		КонецЕсли;

		Представитель.Вставить("ПредставительЮЛ_НаимОрг", СведенияОрганизации.НаимОрг);
		Представитель.Вставить("ПредставительЮЛ_ИНН", СведенияОрганизации.ИННЮЛ);
		Представитель.Вставить("ПредставительЮЛ_КПП", СведенияОрганизации.КПП);
		ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОрганизации, "ОГРН", "");
		Представитель.Вставить("ПредставительЮЛ_ОГРН", ОГРН);
		
		СведенияФизЛица = 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУполномоченномПредставителе, "СвОрг.СвФЛ", "");
			
		Если ПустаяСтрока(СведенияФизЛица) Тогда
			СведенияФизЛица = 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОбУполномоченномПредставителе, "СведФизЛ", "");
		Иначе
			СведенияФизЛица = СведенияФизЛица[0];
		КонецЕсли;
		
		Если Не ПустаяСтрока(СведенияФизЛица) Тогда
			
			Представитель.Вставить("ПредставительФЛ_ИНН", СведенияФизЛица.ИННФЛ);
			Представитель.Вставить("ПредставительФЛ_СНИЛС", СведенияФизЛица.СНИЛС);
			
			СведенияПоФизическомуЛицу = СведенияФизЛица.СведФЛ;
			Представитель.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
			Представитель.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
			
			Представитель.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФизЛица.ФИО, "Фамилия", ""));
			Представитель.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФизЛица.ФИО, "Имя", ""));
			Представитель.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФизЛица.ФИО, "Отчество", ""));
			
			ФИО = ОбщегоНазначенияБЭДКлиентСервер.ФИОСтрокой(Представитель);
			Представитель.Вставить("ПредставительФИО", ФИО);
			
		КонецЕсли;
		
	ИначеЕсли ТипУполномоченногоПредставителя = "ИП" Тогда
		
		СведенияИП = СведенияОбУполномоченномПредставителе.СведИП;
		Представитель.Вставить("ПредставительЮЛ_НаимОрг", СведенияИП.НаимИП);
		Представитель.Вставить("ПредставительЮЛ_ИНН", СведенияИП.ИННФЛ);
		Представитель.Вставить("ПредставительЮЛ_ОГРН", СведенияИП.ОГРНИП);
		
		Представитель.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИП.ФИО, "Фамилия", ""));
		Представитель.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИП.ФИО, "Имя", ""));
		Представитель.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИП.ФИО, "Отчество", ""));
		
		ФИО = ОбщегоНазначенияБЭДКлиентСервер.ФИОСтрокой(Представитель);
		Представитель.Вставить("ПредставительФИО", ФИО);
		
		СведенияПоФизическомуЛицу = СведенияИП.СведФЛ;
		Представитель.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		Представитель.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		Представитель.Вставить("ПредставительФЛ_СНИЛС", СведенияИП.СНИЛС);
		
	ИначеЕсли ТипУполномоченногоПредставителя = "ФЛ" Тогда
		
		СведенияФизЛица = СведенияОбУполномоченномПредставителе.СведФизЛ;
		
		Представитель.Вставить("ПредставительФЛ_ИНН", СведенияФизЛица.ИННФЛ);
		Представитель.Вставить("ПредставительФЛ_СНИЛС", СведенияФизЛица.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияФизЛица.СведФЛ;
		Представитель.Вставить("ПредставительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		Представитель.Вставить("ПредставительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		Представитель.Вставить("Фамилия", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФизЛица.ФИО, "Фамилия", ""));
		Представитель.Вставить("Имя", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФизЛица.ФИО, "Имя", ""));
		Представитель.Вставить("Отчество", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияФизЛица.ФИО, "Отчество", ""));
		
		ФИО = ОбщегоНазначенияБЭДКлиентСервер.ФИОСтрокой(Представитель);
		Представитель.Вставить("ПредставительФИО", ФИО);

	КонецЕсли;
		
	УдостоверениеЛичности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "УдЛичнФЛ", Неопределено);
	Если УдостоверениеЛичности <> Неопределено Тогда
		
		ДатаДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УдостоверениеЛичности, "ДатаДок", '00010101');
		ВыдДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(УдостоверениеЛичности, "ВыдДок", "");
		Номер = УдостоверениеЛичности.СерНомДок;
		Серия = "";
		СерияНомерДокумента = СтрРазделить(СокрЛП(УдостоверениеЛичности.СерНомДок), " ", Ложь);
		
		Если СерияНомерДокумента.Количество() > 1 Тогда
			Номер = СерияНомерДокумента[СерияНомерДокумента.Количество() - 1];
			Серия = СокрЛП(СтрЗаменить(УдостоверениеЛичности.СерНомДок, Номер, ""));
		КонецЕсли;
		
		ДанныеУдостоверенияЛичности = НовыеДанныеУдостоверенияЛичности();
		ДанныеУдостоверенияЛичности.СерДок = Серия;
		ДанныеУдостоверенияЛичности.НомДок = Номер;
		ДанныеУдостоверенияЛичности.ДатаДок = ДатаДок;
		ДанныеУдостоверенияЛичности.ВыдДок = ВыдДок;
		ДанныеУдостоверенияЛичности.ВидДок = УдостоверениеЛичности.КодВидДок;
		ДанныеУдостоверенияЛичности.КодВыдДок = УдостоверениеЛичности.КодВыдДок;
		
		Представитель.Вставить("УдостоверениеЛичности", ДанныеУдостоверенияЛичности);
		
		ПредставлениеУдостоверения = 
			ПолучитьПредставлениеУдостоверение(ДанныеУдостоверенияЛичности);
		
		Представитель.Вставить("ПредставлениеУдостоверения", ПредставлениеУдостоверения);
	
	КонецЕсли;
	
	ПредставительСсылка = Неопределено;
	Если Представитель.Свойство("ПредставительЮЛ_ИНН") 
		И ЗначениеЗаполнено(Представитель.ПредставительЮЛ_ИНН)
		И Представитель.Свойство("ПредставительЮЛ_КПП") Тогда
			ПредставительСсылка = ПодыскатьИнформациюВладельца("Контрагенты, Организации",
				Представитель.ПредставительЮЛ_ИНН, Представитель.ПредставительЮЛ_КПП);
			Представитель.Вставить("ПредставительЮЛ", ПредставительСсылка);
			Если Представитель.Свойство("ПредставительФЛ_ИНН") Тогда
				ПредставительСсылка = 
					ПодыскатьИнформациюВладельца("ФизическиеЛица", Представитель.ПредставительФЛ_ИНН);
				Представитель.Вставить("Представитель", ПредставительСсылка);
			КонецЕсли;
	КонецЕсли;
	
	Если Представитель.Свойство("ПредставительЮЛ_ИНН") 
		И ЗначениеЗаполнено(Представитель.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(ПредставительСсылка) 
		И ЗначениеЗаполнено(Представитель.ПредставительЮЛ_ОГРН) Тогда
			ПредставительСсылка = ПодыскатьИнформациюВладельца("Контрагенты", Представитель.ПредставительЮЛ_ИНН);
			Представитель.Вставить("ПредставительЮЛ", ПредставительСсылка);
			ПредставительСсылка = ПодыскатьИнформациюВладельца("ФизическиеЛица", Представитель.ПредставительЮЛ_ИНН);
			Представитель.Вставить("Представитель", ПредставительСсылка);
	КонецЕсли;
	
	Если Не Представитель.Свойство("ПредставительЮЛ_ИНН") 
		Или Не ЗначениеЗаполнено(Представитель.ПредставительЮЛ_ИНН) 
		И Не ЗначениеЗаполнено(ПредставительСсылка) Тогда
			ПредставительСсылка = ПодыскатьИнформациюВладельца("ФизическиеЛица", Представитель.ПредставительФЛ_ИНН);
			Представитель.Вставить("Представитель", ПредставительСсылка);
	КонецЕсли;
	
	Возврат Представитель;
	
КонецФункции

// Возвращает данные, полученные из файла обмена в пилотном формате.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеДоверенности - См. НовыеДанныеМЧД
//
Функция ДанныеИзФайлаОбменаВУтвержденномФормате(ВходящиеДанные, ЭтоДоверенностьОрганизации = Неопределено)
	
	Результат = Новый Структура("Успех, ТекстОшибки, ДанныеДоверенности", Ложь, "", НовыеДанныеМЧД());
	ДанныеДоверенности = Результат.ДанныеДоверенности;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'При загрузке файла МЧД возникла ошибка: %1'");
	ДанныеXDTO = Неопределено;
	
	Попытка
		
		РезультатЧтения = ДанныеXMLМЧД(ДвоичныеДанные);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат
		КонецЕсли;
		
		ДанныеXDTO = РезультатЧтения.ДанныеДоверенности;
		
	Исключение
		
		Операция = НСтр("ru = 'Разбор МЧД'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка при разборе файла МЧД'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		Возврат Результат;
		
	КонецПопытки;
	
	ДанныеДоверенности.Вставить("XMLфайлМЧД", Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');

	Документ = ДанныеXDTO.Документ;	
	СведенияДоверенности = Документ.СвДов;
		
	ДанныеДоверенности.Вставить("НомерДоверенности", СведенияДоверенности.НомДовер);
	ДанныеДоверенности.Вставить("ДатаВыдачи", СведенияДоверенности.ДатаВыдДовер);
	ДанныеДоверенности.Вставить("ДатаОкончания", СведенияДоверенности.ДатаКонДовер);
	ДанныеДоверенности.Вставить("СрокДействия", "");
	СведенияОбИнформационнойСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм", "");	
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", СведенияОбИнформационнойСистеме);	
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", "");		
	ДанныеДоверенности.Вставить("ВозможноПередоверие", ?(СведенияДоверенности.ПрПередов = "1", Истина, Ложь));
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);	

	СведенияОДоверителе = Документ.СвДоверит[0];
	ДанныеДоверенности.Вставить("ТипОрганизации", СведенияОДоверителе.ТипДовер);
	
	Если СведенияОДоверителе.ТипДовер = "ЮЛ" Тогда
		СведенияДоверителя = СведенияОДоверителе.РосОргДовер;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИО" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИнОргДовер;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИП" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИПДовер;
	Иначе
		СведенияДоверителя = СведенияОДоверителе.ФЛДовер;
	КонецЕсли;

	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", СведенияДоверителя.ИННЮЛ);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", СведенияДоверителя.КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", СведенияДоверителя.ОГРН);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрРФ);

		ЛицоБезДоверенности = СведенияДоверителя.ЛицоБезДов;
		СведенияПоФизическомуЛицу = ЛицоБезДоверенности.СвФЛ;
		СведенияОЮридическомЛице = ЛицоБезДоверенности.СвОрг;
		
		ОснованиеПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "НаимДокПолн", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ОснованиеПолномочий", ОснованиеПолномочий);
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "ИННФЛ", "");		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ИННФЛ);		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", СведенияПоФизическомуЛицу.СНИЛС);
		
		ДанныеДоверенности.Вставить(
			"ЛицоБезДовФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу.СведФЛ));
				
		ДатаРожд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу.СведФЛ, "ДатаРожд", 
			'00010101', "Дата");		
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ДатаРожд);
		Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Должность", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", Должность);		
		ЛицоБезДовЮЛ_НаимОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "НаимОрг", "");		
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ЛицоБезДовЮЛ_НаимОрг);
		ЛицоБезДовЮЛ_ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ИННЮЛ", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ЛицоБезДовЮЛ_ИНН);
		ЛицоБезДовЮЛ_КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "КПП", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ЛицоБезДовЮЛ_КПП);
		ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ОГРН", "");
		ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ОГРН);

		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
				ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
		КонецЕсли;

		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
		КонецЕсли;

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		
		ДобавитьСведенияОбУчастникеМЧД(
			СведенияОДоверителе.Подписант[0],
			Перечисления.СубъектыДоверенности.ДоверительРук,
			ДанныеДоверенности.ФИО); 

	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИО);
		ИННЮЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННЮЛ", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ИННЮЛ);
		КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "КПП", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", СведенияДоверителя.СтрРег);
		НаимРегОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "НаимРегОрг", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", НаимРегОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", СведенияДоверителя.РегНомер);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрСтрРег);

		СведенияОРуководителеОбособленногоПодразделения = СведенияДоверителя.СвРукОП;
		СведенияПоФизическомуЛицу = СведенияОРуководителеОбособленногоПодразделения.СведФЛ;
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОРуководителеОбособленногоПодразделения, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		МестоРожд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "МестоРожд", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", МестоРожд);
		Пол = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Пол", 1);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Пол", Пол);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", СведенияДоверителя.ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", СведенияДоверителя.ОГРНИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СведенияДоверителя.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));

		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

		ДобавитьСведенияОбУчастникеМЧД(
			СведенияОДоверителе.Подписант[0],
			Перечисления.СубъектыДоверенности.ДоверительФЛ,
			ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "СНИЛС", "");		
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

	КонецЕсли;
	
	Для Каждого СведенияОбУполномоченномПредставителе Из Документ.СвУпПред Цикл
		
		ТипУполномоченногоПредставителя = СведенияОбУполномоченномПредставителе.ТипПред;
		
		СведенияОПредставителеМЧД = Новый Структура;
		Для Каждого СведенияОПредставителе Из СведенияОбУполномоченномПредставителе.СвПред Цикл
			
			СведенияФизЛица = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПредставителе, "СведФизЛ", Неопределено);
			СведенияЮрЛица = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПредставителе, "СвОрг", Неопределено);
			СведенияИП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПредставителе, "СведИП", Неопределено);
			
			Если СведенияЮрЛица <> Неопределено 
				Или СведенияИП <> Неопределено Тогда
					СведенияОПредставителеМЧД = 
						ЗаполнитьСведенияОПредставителеМЧД(СведенияОПредставителе, ТипУполномоченногоПредставителя);
			КонецЕсли;
			
			ДобавляемыеСведенияОПредставителе = Новый Структура;
			Если СведенияФизЛица <> Неопределено Тогда
				ДобавляемыеСведенияОПредставителе =	ЗаполнитьСведенияОПредставителеМЧД(СведенияОПредставителе, "ФЛ");
				ДобавляемыеСведенияОПредставителе.ТипУполномоченногоПредставителя = ТипУполномоченногоПредставителя;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
				СведенияОПредставителеМЧД, ДобавляемыеСведенияОПредставителе, Ложь);
			
		КонецЦикла;
		
		ДанныеДоверенности.Представители.Добавить(СведенияОПредставителеМЧД);
		
	КонецЦикла;
	
	ОрганизацияИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	ОрганизацияКПП = РеквизитыПоискаОрганизации.Получить("КПП");
	
	Если ЭтоДоверенностьОрганизации = Неопределено Тогда
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ОрганизацияИНН, ОрганизацияКПП);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ОрганизацияИНН, ОрганизацияКПП);
		КонецЕсли;
	Иначе
		СправочникДляПоиска = ?(ЭтоДоверенностьОрганизации, "Организации", "Контрагенты");
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(СправочникДляПоиска, ОрганизацияИНН, ОрганизацияКПП);
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Полномочия = Документ.СвПолн;
	
	Для Каждого Полномочие Из Полномочия Цикл
		
		СведенияОПолномочиях = НовыеПолномочияПредставителя();
		СведенияОПолномочиях.Код = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "КодПолн", "");
		СведенияОПолномочиях.Описание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "ТекстПолн", "");
		СведенияОПолномочиях.Содержание = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "СодержПолн", "");
		СведенияОПолномочиях.Пояснение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "ДопТекстПолн", "");
		ДанныеДоверенности.Полномочия.Добавить(СведенияОПолномочиях);
		
	КонецЦикла;
	
	Результат.Успех = Истина;
	Возврат Результат; 

КонецФункции

// Возвращает данные, полученные из файла обмена в формате версии 002
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеДоверенности - См. НовыеДанныеМЧД
//
Функция ДанныеИзФайлаОбменаВУтвержденномФорматеВерсия002(ВходящиеДанные, ЭтоДоверенностьОрганизации = Неопределено)
	
	Результат = Новый Структура("Успех, ТекстОшибки, ДанныеДоверенности", Ложь, "", НовыеДанныеМЧД());
	ДанныеДоверенности = Результат.ДанныеДоверенности;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'При загрузке файла МЧД возникла ошибка: %1'");
	ДанныеXDTO = Неопределено;
	
	Попытка
		
		РезультатЧтения = ДанныеXMLМЧД(ДвоичныеДанные);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		ДанныеXDTO = РезультатЧтения.ДанныеДоверенности;
		
	Исключение
		
		Операция = НСтр("ru = 'Разбор МЧД'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка при разборе файла МЧД'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		Результат.ТекстОшибки = ТекстСообщения;
		Возврат Результат;
		
	КонецПопытки;
	
	ДанныеДоверенности.Вставить("XMLфайлМЧД", Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	
	Документ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO.Документ, "Довер");

	ЭтоПередоверие = Ложь;
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO.Документ, "Передов") <> Неопределено Тогда
		Документ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO.Документ, "Передов"); 
		ЭтоПередоверие = Истина;
	КонецЕсли;

	ДанныеДоверенности.Вставить("ЭтоПередоверие", ЭтоПередоверие);
	
	Если ЭтоПередоверие Тогда
		ЗаполнитьПередовериеПоФормату002(ДанныеДоверенности, Документ, ЭтоДоверенностьОрганизации);
	Иначе
		ЗаполнитьДовериеПоФормату002(ДанныеДоверенности, Документ, ЭтоДоверенностьОрганизации);
	КонецЕсли;
	
	Результат.Успех = Истина;
	Возврат Результат; 

КонецФункции

// Возвращает xdto-объект с данными, полученные из файла обмена.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеДоверенности - ОбъектXDTO
//
Функция ДанныеИзФайлаОбменаОбъектомXDTO(ВходящиеДанные)
	
	Результат = Новый Структура("Успех, ТекстОшибки, ДанныеДоверенности", Ложь, "", Неопределено);
		
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = НСтр("ru = 'При загрузке файла МЧД возникла ошибка: %1'");
	
	Попытка
		
		РезультатЧтения = ДанныеXMLМЧД(ДвоичныеДанные);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
	Исключение
		
		Операция = НСтр("ru = 'Разбор МЧД'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Ошибка при разборе файла МЧД'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами, ПодробныйТекстОшибки, ТекстСообщения);
		ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок);
		Результат.ТекстОшибки = ТекстСообщения;
		Возврат Результат;
		
	КонецПопытки;
	
	Результат.Успех = Истина;
	Результат.ДанныеДоверенности = РезультатЧтения.ДанныеДоверенности;
	Возврат Результат; 

КонецФункции

// Возвращает данные, полученные из файла обмена доверенности в формате 002
// 
// Параметры:
//  ДанныеДоверенности - См. НовыеДанныеМЧД
//  Документ - Произвольный
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
//
Процедура ЗаполнитьДовериеПоФормату002(ДанныеДоверенности, Документ, ЭтоДоверенностьОрганизации = Неопределено)
	
	СведенияДоверенности = Документ.СвДов;
	
	ДанныеДоверенности.Вставить("НомерДоверенности", СведенияДоверенности.НомДовер);
	ДанныеДоверенности.Вставить("ДатаВыдачи", СведенияДоверенности.ДатаВыдДовер);
	ДанныеДоверенности.Вставить("ДатаОкончания", СведенияДоверенности.ДатаКонДовер);
	ДанныеДоверенности.Вставить("СрокДействия", "");
	СведенияОбИнформационнойСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм", "");	
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", СведенияОбИнформационнойСистеме);	
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", "");		
	ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", "");
	ДанныеДоверенности.Вставить("ТипПередоверия", СведенияДоверенности.ПрПередов);
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);	
	ДанныеДоверенности.Вставить("СовместныеПолномочия", ?(СведенияДоверенности.ПрСовмПолн = "2", Истина, Ложь));
	
	СведенияОДоверителе = Документ.СвДоверит[0];
	ДанныеДоверенности.Вставить("ТипОрганизации", СведенияОДоверителе.ТипДовер);
	
	Если СведенияОДоверителе.ТипДовер = "ЮЛ" Тогда
		СведенияДоверителя = СведенияОДоверителе.РосОргДовер.СвРосОрг;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИО" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИнОргДовер;
	ИначеЕсли СведенияОДоверителе.ТипДовер = "ИП" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИПДовер;
	Иначе
		СведенияДоверителя = СведенияОДоверителе.ФЛДовер;
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ЛицоБезДоверенности = СведенияОДоверителе.РосОргДовер.ЛицоБезДов;
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", СведенияДоверителя.ИННЮЛ);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", СведенияДоверителя.КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", СведенияДоверителя.ОГРН);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрРФ);
		
		СведенияПоФизическомуЛицу = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СвФЛ");		
		Если СведенияПоФизическомуЛицу <> Неопределено Тогда
			
			ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "ИННФЛ", "");		
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ИННФЛ);		
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", СведенияПоФизическомуЛицу.СНИЛС);
			
			ДанныеДоверенности.Вставить(
				"ЛицоБезДовФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу.СведФЛ));
			
			ДатаРожд = 
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(
					СведенияПоФизическомуЛицу.СведФЛ, "ДатаРожд", '00010101', "Дата");
			
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ДатаРожд);
			Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Должность", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", Должность);
			
			ОснованиеПолномочий = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "НаимДокПолн", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ОснованиеПолномочий", ОснованиеПолномочий);
			
		КонецЕсли;
		
		СведенияОЮридическомЛице = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СвОрг");
		Если СведенияОЮридическомЛице <> Неопределено Тогда
			ЛицоБезДовЮЛ_НаимОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "НаимОрг", "");		
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ЛицоБезДовЮЛ_НаимОрг);
			ЛицоБезДовЮЛ_ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ИННЮЛ", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ЛицоБезДовЮЛ_ИНН);
			ЛицоБезДовЮЛ_КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "КПП", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ЛицоБезДовЮЛ_КПП);
			ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОЮридическомЛице, "ОГРН", "");
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ОГРН);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
			ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
			ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
		КонецЕсли;
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияОДоверителе.Подписант,
		Перечисления.СубъектыДоверенности.ДоверительРук,
		ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИО);
		ИННЮЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННЮЛ", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ИННЮЛ);
		КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "КПП", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", СведенияДоверителя.СтрРег);
		НаимРегОрг = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "НаимРегОрг", "");
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", НаимРегОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", СведенияДоверителя.РегНомер);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", СведенияДоверителя.АдрСтрРег);
		
		СведенияОРуководителеОбособленногоПодразделения = СведенияДоверителя.СвРукОП;
		СведенияПоФизическомуЛицу = СведенияОРуководителеОбособленногоПодразделения.СведФЛ;
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОРуководителеОбособленногоПодразделения, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		МестоРожд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "МестоРожд", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", МестоРожд);
		Пол = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияПоФизическомуЛицу, "Пол", 1);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Пол", Пол);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", СведенияДоверителя.ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", СведенияДоверителя.ОГРНИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СведенияДоверителя.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;		
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияОДоверителе.Подписант,
		Перечисления.СубъектыДоверенности.ДоверительФЛ,
		ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "СНИЛС", "");		
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
		РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);
		
	КонецЕсли;
	
	Для Каждого СведенияОбУполномоченномПредставителе Из Документ.СвУпПред Цикл
		
		ТипУполномоченногоПредставителя = СведенияОбУполномоченномПредставителе.ТипПред;
		ДанныеДоверенности.Представители.Добавить(ЗаполнитьСведенияОПредставителеМЧД(
			СведенияОбУполномоченномПредставителе, ТипУполномоченногоПредставителя));
		
	КонецЦикла;
		
	ОрганизацияИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	ОрганизацияКПП = РеквизитыПоискаОрганизации.Получить("КПП");
	
	Если ЭтоДоверенностьОрганизации = Неопределено Тогда
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ОрганизацияИНН, ОрганизацияКПП);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ОрганизацияИНН, ОрганизацияКПП);
		КонецЕсли;
	Иначе
		СправочникДляПоиска = ?(ЭтоДоверенностьОрганизации, "Организации", "Контрагенты");
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(СправочникДляПоиска, ОрганизацияИНН, ОрганизацияКПП);
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Полномочия = Документ.СвПолн;
	ЗаполнитьПолномочия(ДанныеДоверенности, Полномочия);
	
КонецПроцедуры

// Возвращает данные, полученные из файла обмена передоверия в формате 002
// 
// Параметры:
//  ДанныеДоверенности - См. НовыеДанныеМЧД
//  Документ - Произвольный
//  ЭтоДоверенностьОрганизации - Неопределено, Булево - Признак что данные относятся к МЧД организации,
//  								при установке Неопределено будет произведен поиск в организациях и контрагентах.
//
Процедура ЗаполнитьПередовериеПоФормату002(ДанныеДоверенности, Документ, ЭтоДоверенностьОрганизации = Неопределено)
	
	СведенияДоверенности = Документ.СвДовПер.СвПереДовер;
	
	ДанныеДоверенности.Вставить("НомерДоверенности", СведенияДоверенности.НомДовер);
	ДанныеДоверенности.Вставить("ДатаВыдачи", СведенияДоверенности.ДатаВыдДовер);
	ДанныеДоверенности.Вставить("ДатаОкончания", СведенияДоверенности.ДатаКонДовер);
	ДанныеДоверенности.Вставить("СрокДействия", "");

	СведенияОбИнформационнойСистеме = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверенности, "СведСистОтм", "");	
	ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", СведенияОбИнформационнойСистеме);	

	НомерРодительскойДоверенности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Документ, "СвДовПер.НомДоверN", "");	// АПК:216 не проверяем смесь латиницы и кириллицы для НомДоверN
	ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", НомерРодительскойДоверенности);	
	ДанныеДоверенности.Вставить("ТипПередоверия", СведенияДоверенности.ПрПередов);
	ДанныеДоверенности.Вставить("УтратаПолномочийПриПередоверии", ?(СведенияДоверенности.ПрУтрПолн = "1", Истина, Ложь));
	ДанныеДоверенности.Вставить("СовместныеПолномочия", ?(СведенияДоверенности.ПрСовмПолн = "2", Истина, Ложь));
	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);	
	
	СведенияОбОсновнойДоверенности = Документ.СвДовПер.СвОснДовер;
	СведенияОДоверителеОсновнойДоверенности = СведенияОбОсновнойДоверенности.СвДовер0[0];
	ДанныеДоверенности.НомерОсновнойДоверенности = СведенияОбОсновнойДоверенности.НомДовер0;
	ДанныеДоверенности.НомерРодительскойДоверенности = ДанныеДоверенности.НомерОсновнойДоверенности;
	ДанныеДоверенности.Вставить("ТипДоверителяОсновнойДоверенности", СведенияОДоверителеОсновнойДоверенности.ТипДовер);
	
	Если СведенияОДоверителеОсновнойДоверенности.ТипДовер = "ЮЛ" Тогда
		СведенияДоверителяОсновнойДоверенности = СведенияОДоверителеОсновнойДоверенности.РосОргДовер;
	ИначеЕсли СведенияОДоверителеОсновнойДоверенности.ТипДовер = "ИП" Тогда
		СведенияДоверителяОсновнойДоверенности = СведенияОДоверителеОсновнойДоверенности.ИПДовер;
	Иначе
		СведенияДоверителяОсновнойДоверенности = СведенияОДоверителеОсновнойДоверенности.ФЛДовер;
	КонецЕсли;
	
	Если ДанныеДоверенности.ТипДоверителяОсновнойДоверенности = "ЮЛ" Тогда
		ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", СведенияДоверителяОсновнойДоверенности.ИННЮЛ);
		ДанныеДоверенности.КППДоверителяРодительскойДоверенности = СведенияДоверителяОсновнойДоверенности.КПП;
	ИначеЕсли ДанныеДоверенности.ТипДоверителяОсновнойДоверенности = "ИП" Тогда
		ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", СведенияДоверителяОсновнойДоверенности.ИННФЛ);
	ИначеЕсли ДанныеДоверенности.ТипДоверителяОсновнойДоверенности = "ФЛ" Тогда
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителяОсновнойДоверенности, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ИННДоверителяРодительскойДоверенности", ИННФЛ);
	КонецЕсли;
	
	СведенияОДоверителе = Документ.СвЛицПередПолн[0];
	ДанныеДоверенности.Вставить("ТипОрганизации", СведенияОДоверителе.ТипЛицПрдПолн);
	
	Если СведенияОДоверителе.ТипЛицПрдПолн = "ЮЛ" Тогда
		СведенияДоверителя = СведенияОДоверителе.РосОргПрдПолн;
	ИначеЕсли СведенияОДоверителе.ТипЛицПрдПолн = "ИП" Тогда
		СведенияДоверителя = СведенияОДоверителе.ИППрдПолн;
	Иначе
		СведенияДоверителя = СведенияОДоверителе.ФЛПрдПолн;
	КонецЕсли;
	
	РеквизитыПоискаОрганизации = Новый Соответствие;
	РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ИННДоверителяРодительскойДоверенности);
	Если ЗначениеЗаполнено(ДанныеДоверенности.КППДоверителяРодительскойДоверенности) Тогда
		РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.КППДоверителяРодительскойДоверенности);
	КонецЕсли;
	
	Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимОрг);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", СведенияДоверителя.ИННЮЛ);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", СведенияДоверителя.КПП);
		ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", СведенияДоверителя.ОГРН);
		
		АдрРег = СведенияДоверителя.АдрРег;
		Если АдрРег <> Неопределено Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", АдрРег.АдрРФ);
		КонецЕсли;
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияОДоверителе.Подписант,
		Перечисления.СубъектыДоверенности.ДоверительРук,
		ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИП" Тогда
		
		ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", СведенияДоверителя.НаимИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", СведенияДоверителя.ИННФЛ);
		ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", СведенияДоверителя.ОГРНИП);
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СведенияДоверителя.СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;		
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		
		ДобавитьСведенияОбУчастникеМЧД(
		СведенияОДоверителе.Подписант,
		Перечисления.СубъектыДоверенности.ДоверительФЛ,
		ДанныеДоверенности.ФИО); 
		
	ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
		
		ИННФЛ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "ИННФЛ", "");
		ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ИННФЛ);
		СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияДоверителя, "СНИЛС", "");		
		ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", СНИЛС);
		
		СведенияПоФизическомуЛицу = СведенияДоверителя.СведФЛ;
		ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ГражданствоУчастникаМЧД(СведенияПоФизическомуЛицу));
		ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", СведенияПоФизическомуЛицу.ДатаРожд);
		
	КонецЕсли;
	
	Для Каждого СведенияОбУполномоченномПредставителе Из Документ.СвЛицПолучПолн Цикл
		
		ТипУполномоченногоПредставителя = СведенияОбУполномоченномПредставителе.ТипПред;
		ДанныеДоверенности.Представители.Добавить(ЗаполнитьСведенияОПредставителеМЧД(
			СведенияОбУполномоченномПредставителе, ТипУполномоченногоПредставителя));
		
	КонецЦикла;
	
	ОрганизацияИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	ОрганизацияКПП = РеквизитыПоискаОрганизации.Получить("КПП");
	
	Если ЭтоДоверенностьОрганизации = Неопределено Тогда
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Организации", ОрганизацияИНН, ОрганизацияКПП);
		Если НЕ ЗначениеЗаполнено(РезультатПоиска) Тогда
			РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП("Контрагенты", ОрганизацияИНН, ОрганизацияКПП);
		КонецЕсли;
	Иначе
		СправочникДляПоиска = ?(ЭтоДоверенностьОрганизации, "Организации", "Контрагенты");
		РезультатПоиска = ИнтеграцияЭДО.СсылкаНаОбъектПоИННКПП(СправочникДляПоиска, ОрганизацияИНН, ОрганизацияКПП);
	КонецЕсли;
	
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Полномочия = Документ.СвПолн;
	ЗаполнитьПолномочия(ДанныеДоверенности, Полномочия);
	
КонецПроцедуры

// Возвращает данные, полученные из файла обмена в пилотном формате.
// 
// Параметры:
//  ВходящиеДанные - ДвоичныеДанные, Строка - Двоичные данные файла обмена или путь к ним.
// 
// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * ТекстОшибки - Строка
//  * ДанныеМЧД - см. НовыеДанныеМЧД
//
Функция ДанныеИзФайлаОбменаВПилотномФормате(ВходящиеДанные)
	
	ДанныеДоверенности = НовыеДанныеМЧД();
	
	Если ТипЗнч(ВходящиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = ВходящиеДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(ВходящиеДанные) Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВходящиеДанные);
	Иначе
		ДвоичныеДанные = Новый ДвоичныеДанные(ВходящиеДанные);
	КонецЕсли;
	
	ДокументОбработки = ПодготовитьДокументDOM(ВходящиеДанные);
	
	ДанныеДоверенности.Вставить("XMLфайлМЧД", Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));
	ДанныеДоверенности.Вставить("ДатаЗагрузкиИзРеестра", '00010101');
	
	СведенияДоверенности = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДов");

	Если СведенияДоверенности.Количество() = 1 Тогда

		ЭлементВыборки = СведенияДоверенности[0];
		ДанныеДоверенности.Вставить("НомерДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НомДовер"));
		ДанныеДоверенности.Вставить("ДатаВыдачи", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ДатаНач", '00010101'));
		ДанныеДоверенности.Вставить("ДатаОкончания", ПолучитьЗначениеДокумента(ЭлементВыборки, "ДатаОкон", '00010101'));
		ДанныеДоверенности.Вставить("СрокДействия", ПолучитьЗначениеДокумента(ЭлементВыборки, "СрокДейст", ""));
		ДанныеДоверенности.Вставить("СведенияОбИнформационнойСистеме", ПолучитьЗначениеДокумента(ЭлементВыборки,
			"СведСистОтм", ""));
		ДанныеДоверенности.Вставить("НомерРодительскойДоверенности", ПолучитьЗначениеДокумента(ЭлементВыборки,
			"@НомПредДовер", ""));
		ПравоПередоверияСтрока = ПолучитьЗначениеДокумента(ЭлементВыборки, "@ПрПередов");
		ДанныеДоверенности.Вставить("ВозможноПередоверие", ?(ПравоПередоверияСтрока = "1", Истина, Ложь));
	КонецЕсли;

	ДанныеДоверенности.Вставить("ФИО", Новый Массив);
	ДанныеДоверенности.Вставить("УдостоверенияЛичности", Новый Массив);
	ДанныеДоверенности.Вставить("ТипОрганизации", "");

	СведенияДоверителяЮЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/РосОргДовер");
	СведенияДоверителяФЛ = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ФЛДовер");
	СведенияДоверителяИО = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвДоверит/ИнОргДовер");

	Если СведенияДоверителяЮЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ЮЛ";
		СведенияДоверителя = СведенияДоверителяЮЛ;
	ИначеЕсли СведенияДоверителяФЛ.Количество() = 1 Тогда
		ДанныеДоверенности.ТипОрганизации = "ФЛ";
		СведенияДоверителя = СведенияДоверителяФЛ;
	Иначе
		ДанныеДоверенности.ТипОрганизации = "ИО";
		СведенияДоверителя = СведенияДоверителяИО;
	КонецЕсли;

	РеквизитыПоискаОрганизации = Новый Соответствие;

	Если СведенияДоверителя.Количество() = 1 Тогда
		ЭлементВыборки = СведенияДоверителя[0];
		Если ДанныеДоверенности.ТипОрганизации = "ЮЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРН"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "@АдрРФ"));

			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@ИННФЛ"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@СНИЛС"));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@ДатаРожд", '00010101'));
			ДанныеДоверенности.Вставить("ЛицоБезДовФЛ_Должность", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвФЛ/@Должность"));

			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@НаимОрг"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@КПП"));
			ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"ЛицоБезДов/СвОрг/@ОГРН"));

			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ИНН) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовФЛ", ПодыскатьИнформациюВладельца("Контрагенты,ФизическиеЛица",
					ДанныеДоверенности.ЛицоБезДовФЛ_ИНН,, ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС));
			КонецЕсли;

			Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
				ДанныеДоверенности.Вставить("ЛицоБезДовЮЛ", ПодыскатьИнформациюВладельца("Контрагенты,Организации",
					ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, ДанныеДоверенности.ЛицоБезДовЮЛ_КПП));
			КонецЕсли;

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ИО" Тогда
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИностраннаяОрганизация", Истина);
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ЭлементВыборки, "@НаимИО"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННЮЛ"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_КПП", ПолучитьЗначениеДокумента(ЭлементВыборки, "@КПП"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_СтрРег", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СтрРег",
				Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_НаимРегОрг", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@НаимРегОрг"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_РегНомер", ПолучитьЗначениеДокумента(ЭлементВыборки, "@РегНомер"));
			ДанныеДоверенности.Вставить("ДоверительЮЛ_Адр", ПолучитьЗначениеДокумента(ЭлементВыборки, "АдрСтрРег"));

			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ИННФЛ"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"СвРукОП/@ДатаРожд", '00010101'));
			ДанныеДоверенности.Вставить("ДоверительФЛ_МестоРожд", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"СвРукОП/@МестоРожд"));
			ДанныеДоверенности.Вставить(
				"ДоверительФЛ_Пол", ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@Пол", 1));
			ПризнакГражданства = ПолучитьЗначениеДокумента(ЭлементВыборки, "СвРукОП/@ПрГражд");
			Если ПризнакГражданства = 1 Тогда
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", Справочники.СтраныМира.Россия);
			Иначе
				ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
					"СвРукОП/@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			КонецЕсли;

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительЮЛ_ИНН);
			РеквизитыПоискаОрганизации.Вставить("КПП", ДанныеДоверенности.ДоверительЮЛ_КПП);

		ИначеЕсли ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ИННФЛ"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ОГРН", ПолучитьЗначениеДокумента(ЭлементВыборки, "@ОГРНИП"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_СНИЛС", ПолучитьЗначениеДокумента(ЭлементВыборки, "@СНИЛС"));
			ДанныеДоверенности.Вставить("ДоверительФЛ_Гражданство", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			ДанныеДоверенности.Вставить("ДоверительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(ЭлементВыборки,
				"@ДатаРожд", '00010101'));

			РеквизитыПоискаОрганизации.Вставить("ИНН", ДанныеДоверенности.ДоверительФЛ_ИНН);

		КонецЕсли;

	КонецЕсли;

	СведенияУполномоченных = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/СвУпПред");
	
	Для Каждого СтрокаМассива Из СведенияУполномоченных Цикл

		ПолномочияПредставителя = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "ПрОблПолн");
		
		Для каждого ПолномочиеПредставителя Из ПолномочияПредставителя Цикл
			
			ПредставлениеВида = СокрЛП(ПолномочиеПредставителя.ТекстовоеСодержимое);
			
			Если ПредставлениеВида = "99" Тогда
				
				Полномочие = НовыеПолномочияПредставителя();
				Полномочие.Описание = МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий();
				ДанныеДоверенности.Полномочия.Добавить(Полномочие);
				
			ИначеЕсли СтрДлина(ПредставлениеВида) = 2 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ПредставлениеВида) Тогда
				
				ВидПолномочия = Число(ПредставлениеВида);
				
				Если ВидПолномочия >= 1 И ВидПолномочия <= КоличествоВидовПолномочийПредставителя() Тогда
					
					Полномочие = НовыеПолномочияПредставителя();
					Полномочие.Код = ПредставлениеВида;
					ДанныеДоверенности.Полномочия.Добавить(Полномочие);

				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ВыборкаЭлементовТекстПолномочий = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "ТекстПолн");
		
		Для каждого СтрокаПолномочий Из ВыборкаЭлементовТекстПолномочий Цикл

			Полномочие = НовыеПолномочияПредставителя();
			Полномочие.Описание = СтрокаПолномочий.ТекстовоеСодержимое;
			ДанныеДоверенности.Полномочия.Добавить(Полномочие);

		КонецЦикла;
		
		Представитель = Новый Структура;
		
		ИнформацияОрганизации = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвПред/СвОрг");
		Если ИнформацияОрганизации.Количество() > 0 Тогда
			Представитель.Вставить("ТипУполномоченногоПредставителя", "ЮЛ");
			Представитель.Вставить("ПредставительЮЛ_НаимОрг", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@НаимОрг"));
			Представитель.Вставить("ПредставительЮЛ_ИНН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@ИННЮЛ"));
			Представитель.Вставить("ПредставительЮЛ_КПП", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@КПП"));
			Представитель.Вставить("ПредставительЮЛ_ОГРН", ПолучитьЗначениеДокумента(ИнформацияОрганизации[0],
				"@ОГРН"));
		КонецЕсли;

		СведенияФЛ = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "СвПред/СведФизЛ");
		Если СведенияФЛ.Количество() > 0 Тогда 
			
			СведенияФЛ = СведенияФЛ[0];
			Представитель.Вставить("ПредставительФЛ_ИНН", ПолучитьЗначениеДокумента(СведенияФЛ, "@ИННФЛ"));
		
			Представитель.Вставить("ТипУполномоченногоПредставителя", "ФЛ");
			
			ОГРНИП = ПолучитьЗначениеДокумента(СведенияФЛ, "@ОГРНИП");
			Если ОГРНИП <> Неопределено Тогда
				Представитель.ТипУполномоченногоПредставителя = "ИП";
			КонецЕсли;

			Представитель.Вставить("ПредставительФЛ_СНИЛС", ПолучитьЗначениеДокумента(СведенияФЛ, "@СНИЛС"));
			Представитель.Вставить("ПредставительФЛ_Гражданство", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@Гражданство", Справочники.СтраныМира.ПустаяСсылка()));
			Представитель.Вставить("ПредставительФЛ_ДатаРождения", ПолучитьЗначениеДокумента(СведенияФЛ,
				"@ДатаРожд", '00010101'));

			Представитель.Вставить("Фамилия", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Фамилия"));
			Представитель.Вставить("Имя", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Имя"));
			Представитель.Вставить("Отчество", ПолучитьЗначениеДокумента(СведенияФЛ, "ФИО/@Отчество"));
			ФИО = СокрЛП(СтрШаблон("%1 %2 %3", Представитель.Фамилия, Представитель.Имя, Представитель.Отчество));
			Представитель.Вставить("ПредставительФИО", ФИО);

			ДанныеУдостоверенияЛичности = НовыеДанныеУдостоверенияЛичности(); 
			СерияНомер = ПодготовитьПредставлениеСерияНомер(ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@СерНомДок"));
			ДанныеУдостоверенияЛичности.СерДок = СерияНомер.Серия;
			ДанныеУдостоверенияЛичности.НомДок = СерияНомер.Номер;
			ДанныеУдостоверенияЛичности.ДатаДок = ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ДатаДок", '00010101');
			ДанныеУдостоверенияЛичности.ВыдДок = ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@ВыдДок");
			ДанныеУдостоверенияЛичности.ВидДок = ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВидДок");
			ДанныеУдостоверенияЛичности.КодВыдДок = ПолучитьЗначениеДокумента(СведенияФЛ, "УдЛичн/@КодВыдДок");
			
			Представитель.Вставить("УдостоверениеЛичности", ДанныеУдостоверенияЛичности);
			
		КонецЕсли;

		ПредставительСсылка = Неопределено;
		Если Представитель.Свойство("ПредставительЮЛ_ИНН") И ЗначениеЗаполнено(
			Представитель.ПредставительЮЛ_ИНН) Тогда
			ПредставительСсылка = ПодыскатьИнформациюВладельца("Контрагенты,Организации",
				Представитель.ПредставительЮЛ_ИНН, Представитель.ПредставительЮЛ_КПП);
		КонецЕсли;

		Если Не Представитель.Свойство("ПредставительЮЛ_ИНН") Или Не ЗначениеЗаполнено(
			Представитель.ПредставительЮЛ_ИНН) И Не ЗначениеЗаполнено(Представитель) И ЗначениеЗаполнено(
			Представитель.ПредставительФЛ_ОГРН) Тогда
			ПредставительСсылка = ПодыскатьИнформациюВладельца("Контрагенты", Представитель.ПредставительФЛ_ИНН);
		КонецЕсли;

		Если Не Представитель.Свойство("ПредставительЮЛ_ИНН") Или Не ЗначениеЗаполнено(
			Представитель.ПредставительЮЛ_ИНН) И Не ЗначениеЗаполнено(Представитель) Тогда
			ПредставительСсылка = ПодыскатьИнформациюВладельца("ФизическиеЛица", Представитель.ПредставительФЛ_ИНН);
		КонецЕсли;
		
		Представитель.Вставить("Представитель", ПредставительСсылка);

		ДанныеДоверенности.Представители.Добавить(Представитель);

	КонецЦикла;

	СведенияПодписанта = ПолучитьВыборкуЭлементовDOM(ДокументОбработки, "/Файл/Документ/Подписант");
	Если СведенияПодписанта.Количество() = 1 Тогда
		ЭлементВыборки = СведенияПодписанта[0];

		НоваяСтрока = НовыеДанныеСубъектаМЧД();
		НоваяСтрока.Фамилия = ПолучитьЗначениеДокумента(ЭлементВыборки, "@Фамилия");
		НоваяСтрока.Имя = ПолучитьЗначениеДокумента(ЭлементВыборки, "@Имя");
		НоваяСтрока.Отчество = ПолучитьЗначениеДокумента(ЭлементВыборки, "@Отчество");
		Если ДанныеДоверенности.ТипОрганизации = "ФЛ" Тогда
			НоваяСтрока.Владелец = Перечисления.СубъектыДоверенности.ДоверительФЛ;
		Иначе
			НоваяСтрока.Владелец = Перечисления.СубъектыДоверенности.ДоверительРук;
		КонецЕсли;
		ДанныеДоверенности.ФИО.Добавить(НоваяСтрока);
	КонецЕсли;

	РезультатПоиска = Неопределено;
	СтруктураПоиска = Новый Структура("ИНН, КПП");
	СтруктураПоиска.ИНН =  РеквизитыПоискаОрганизации.Получить("ИНН");
	СтруктураПоиска.КПП = РеквизитыПоискаОрганизации.Получить("КПП");
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(
		"Организации", РезультатПоиска, , СтруктураПоиска);
	ДанныеДоверенности.Вставить("Организация", РезультатПоиска);
	
	Возврат Новый Структура("Успех, ТекстОшибки, ДанныеДоверенности", Истина, "", ДанныеДоверенности);

КонецФункции

// Отключает проверку подписи по МЧД.
// 
// Параметры:
//  ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  ХешПодписи - См. КриптографияБЭД.ХешПодписи
Процедура ОтключитьПроверкуПодписи(ПодписанныйОбъект, ХешПодписи)
	
	НаборЗаписей = РегистрыСведений.ЭлектронныеПодписиПоМЧД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПодписанныйОбъект.Установить(ПодписанныйОбъект);
	НаборЗаписей.Отбор.ХешПодписи.Установить(ХешПодписи);
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает пространство имен файла МЧД, прочитав из содержимого файла информации отправителя электронного документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
// 
// Возвращаемое значение:
//  Строка
Функция ВерсияФорматаПоДаннымЭлектронногоДокумента(ЭлектронныйДокумент)
	
	Результат = "";
	ОсновнойФайл = ЭлектронныеДокументыЭДО.ОсновнойФайлИнформацииОтправителя(ЭлектронныйДокумент);
	Если ЗначениеЗаполнено(ОсновнойФайл) Тогда
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ОсновнойФайл);
		ДанныеАрхива = ПрочитатьАрхив(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Если ДанныеАрхива = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		ДвоичныеДанныеМЧД = ДанныеАрхива.ДанныеДоверенности;
		Результат = ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет пространство имен файла МЧД по его содержимому.
// 
// Параметры:
//  ДвоичныеДанныеМЧД - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Строка
Функция ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеМЧД.ОткрытьПотокДляЧтения());
	ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	Возврат ВерсияФорматаОбъектаМЧД(ДанныеXDTO);
	
КонецФункции

// Определяет являются ли двоичные данные файлом заявления на отмену МЧД.
// 
// Параметры:
//  ДвоичныеДанныеМЧД - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Строка
Функция ЭтоЗаявлениеНаОтмену(ДвоичныеДанныеМЧД)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(ДвоичныеДанныеМЧД.ОткрытьПотокДляЧтения());
	ДанныеXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Файл.Документ.СвЗаяв.ПричОтз") <> Неопределено Тогда
		Возврат РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "Файл.ВерсФорм") <> "";
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает коллекцию шаблонов ошибок доступа
// 
// Возвращаемое значение - Коллекция общих шаблонов ошибок:
//  Соответствие:
//   * Ключ - Строка
//   * Значение - Строка
Функция КодыОшибокДоступа()
	
	Результат = Новый Соответствие;
	Результат.Вставить("/errors/unauthenticated",
		НСтр("ru = 'Запрос к серверу МЧД распределенного реестра выполнен от неавторизованного пользователя'"));
	Результат.Вставить("/errors/unauthorized",
		НСтр("ru = 'Запрос выполнен не от пользователя с ролью для доступа к серверу МЧД распределенного реестра'"));
	Возврат Результат;
	
КонецФункции

// Возвращает коллекцию шаблонов ошибок отзыва
// 
// Возвращаемое значение - Коллекция общих шаблонов ошибок отзыва:
//  Соответствие:
//   * Ключ - Строка
//   * Значение - Строка
Функция КодыОшибокОтзыва(НомерДоверенности)
	
	Результат = Новый Соответствие;
	Результат.Вставить("/errors/not-found",
		СтрШаблон(НСтр("ru = 'Не найдена доверенность с номером ""%1""'"), НомерДоверенности));
	Возврат Результат;
	
КонецФункции

// Возвращает строку, из которой удалены все символы, не являющиеся цифрами
// 
// Параметры:
//  ИсходнаяСтрока - Строка
// 
// Возвращаемое значение:
//  Строка - Строка, состоящая только из цифр
//  
Функция УбратьИзСтрокиВсеНеЦифры(ИсходнаяСтрока)
	
	Результат = "";
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		ТекущийСимвол = Сред(ИсходнаяСтрока, НомерСимвола, 1);
		Если Найти("0123456789", ТекущийСимвол) > 0 Тогда
			Результат = Результат + ТекущийСимвол; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак реестровой МЧД с необходимостью установки признака "Верна" и не требующего перезаполнения
//
//	Параметры:
//	 ДанныеДляПроверки - См.МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//	 ДанныеДоверенности - См. МашиночитаемыеДоверенности.ДанныеИзФайлаОбмена
//
//	Возвращаемое значение:
//	 Булево.
//
Функция ЭтоПровереннаяРеестроваяМЧД(ДанныеДляПроверки, ДанныеДоверенности) Экспорт
		
	ДоверенностьПодписана = ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеПодписи)
							И ЗначениеЗаполнено(ДанныеДляПроверки.ДанныеДоверенности);
	СтатусВРеестреФНС = Неопределено;
	ДанныеДоверенности.Свойство("СтатусВРеестреФНС", СтатусВРеестреФНС);
	ДоверительныеСтатусы = ДоверительныеСтатусыВРеестреФНС();
	
	Возврат ДоверенностьПодписана И ДоверительныеСтатусы.Найти(СтатусВРеестреФНС) <> Неопределено;
	
КонецФункции

// Возвращает признак того что МЧД нуждается в перезаполнении и перепроверке на сервере.
//
//	Параметры:
//	 Доверенность - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//	              - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//	              - СправочникОбъект.МЧД003
//	 НовыеДанные - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//	 ФорматДоверенности - Строка
//
//	Возвращаемое значение:
//	 Булево
Функция ТребуетсяПерезаполнениеМЧД(Доверенность, НовыеДанные, ФорматДоверенности = "") Экспорт

	ТребуетсяПерезаполнение = Ложь;

	Если ТипЗнч(Доверенность) = Тип("СправочникОбъект.МЧД003") Тогда
		ТребуетсяПерезаполнение = Справочники.МЧД003.ТребуетсяПерезаполнениеМЧД(Доверенность, НовыеДанные);
	Иначе
		ДатаОтзыва = ДатаОтзываДоверенностиПоДаннымДляЗагрузкиМЧД(НовыеДанные);
			
		ЗаполненыРегистрационныеДанныеДоверителя = 
			Справочники.МашиночитаемыеДоверенностиКонтрагентов.ЗаполненыРегистрационныеДанныеДоверителя(Доверенность);
		
		ТребуетсяПерезаполнение = Доверенность.ЭлектроннаяПодпись.Получить() <> НовыеДанные.ДанныеПодписи
			Или Доверенность.XMLфайлМЧД.Получить() <> НовыеДанные.ДанныеДоверенности Или (ЗначениеЗаполнено(ДатаОтзыва)
			И Доверенность.ДатаОтзыва <> ДатаОтзыва) Или Не ЗаполненыРегистрационныеДанныеДоверителя;
	КонецЕсли;

	Возврат ТребуетсяПерезаполнение;

КонецФункции

// Параметры:
//  Доверенность - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//	             - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//	             - СправочникОбъект.МЧД003
//	             - См. НовыеСведенияМЧД
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
Процедура ЗаполнитьРеквизитыОтзыва(Доверенность, ДанныеДляЗагрузки) Экспорт

	ДатаОтзыва = ДатаОтзываДоверенностиПоДаннымДляЗагрузкиМЧД(ДанныеДляЗагрузки);
	
	Если ЗначениеЗаполнено(ДатаОтзыва) Тогда
		Если ЭтоМЧД003(Доверенность) Тогда
			Доверенность.ДатаПрекращения = ДатаОтзыва;
		Иначе
			Доверенность.ДатаОтзыва = ДатаОтзыва;
			Доверенность.Отозвана = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ДоверительныеСтатусыВРеестреФНС()
	
	ДоверительныеСтатусы = Новый Массив();
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОтправленоЗаявлениеНаОтзыв);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаОтзыва);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила);
	ДоверительныеСтатусы.Добавить(Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия);
	
	Возврат ДоверительныеСтатусы;
	
КонецФункции

// Формирует пустую структуру данных физ лица.
// 
// Возвращаемое значение:
//  Структура:
// * ДатаРождения 		- Дата
// * ИНН 				- Строка
// * МестоРождения 		- Строка
// * Пол 				- Строка
// * СтраховойНомерПФР 	- Строка
// * ФИО 				- Строка
// * Фамилия 			- Строка
// * Имя 				- Строка
// * Отчество 			- Строка
// * Гражданство 		- СправочникСсылка.СтраныМира
// * КодФНС 			- Строка
// * Серия 				- Строка
// * Номер 				- Строка
// * ДатаВыдачи 		- Дата
// * КемВыдан 			- Строка
// * КодПодразделения 	- Строка
Функция НовыеДанныеФизЛица() Экспорт
	
	Сведения = Новый Структура;
	Сведения.Вставить("ДатаРождения", Дата(1, 1, 1));
	Сведения.Вставить("ИНН", "");
	Сведения.Вставить("МестоРождения", "");
	Сведения.Вставить("Пол", "");
	Сведения.Вставить("СтраховойНомерПФР", "");
	Сведения.Вставить("ФИО", "");
	Сведения.Вставить("Фамилия", "");
	Сведения.Вставить("Имя", "");
	Сведения.Вставить("Отчество", "");
	Сведения.Вставить("Гражданство", Справочники.СтраныМира.ПустаяСсылка());
	Сведения.Вставить("КодФНС", "");
	Сведения.Вставить("Серия", "");
	Сведения.Вставить("Номер", "");
	Сведения.Вставить("ДатаВыдачи", Дата(1, 1, 1));
	Сведения.Вставить("КемВыдан", "");
	Сведения.Вставить("КодПодразделения", "");
	
	Возврат Сведения;
	
КонецФункции

// Формирует структуру с заполненными данными о физическом лице
//
//	Параметры:
//   ФизЛицо - СправочникСсылка - ссылка на элемент справочника, по которому получаются данные.
//
//	Возвращаемое значение:
//	 см. НовыеДанныеФизЛица
//
Функция ДанныеФизЛица(ФизЛицо) Экспорт
	
	Сведения = НовыеДанныеФизЛица();
	МашиночитаемыеДоверенностиПереопределяемый.ПриИзмененииДанныеФизЛица(ФизЛицо, Сведения);
	ДлинаКодаПодразделенияБезРазделителя = 6;
	Если СтрДлина(Сведения.КодПодразделения) = ДлинаКодаПодразделенияБезРазделителя Тогда
		Сведения.КодПодразделения = Лев(Сведения.КодПодразделения, 3) + "-" + Прав(Сведения.КодПодразделения, 3);
	КонецЕсли;
	Возврат Сведения;
	
КонецФункции

// Возвращает представление объекта.
// 
// Параметры:
//  Объект - ДанныеФормыСтруктура,
//         - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций,
//         - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов,
//         - СправочникОбъект.МЧД003
// 
// Возвращаемое значение:
//  Строка - Представление объекта
//
Функция ПредставлениеОбъекта(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.НомерДоверенности) Тогда
		ЧастьНомераДоверенности = "*" + Прав(Объект.НомерДоверенности, 4) + " ";
	Иначе
		ЧастьНомераДоверенности = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаВыдачи) Тогда
		ДатаВыдачиСтрокой = НСтр("ru = 'от'") + " " + Формат(Объект.ДатаВыдачи, "ДЛФ=D;");
	Иначе
		ДатаВыдачиСтрокой = "";
	КонецЕсли;
	
	Представление = ЧастьНомераДоверенности + ДатаВыдачиСтрокой;
	
	Возврат Представление;
	
КонецФункции

// Ищет доверенности в справочниках.
// 
// Параметры:
//  НомерДоверенности - Строка
//  ИННДоверителя - Строка
//  СправочникМЧД - СправочникиМенеджер, Неопределено - менеджер справочника доверенностей (002)
//  ВключаяПомеченныеНаУдаление - Булево
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.МЧД003, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов, СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Функция НайтиДоверенности(НомерДоверенности, ИННДоверителя, СправочникМЧД = Неопределено, ВключаяПомеченныеНаУдаление = Ложь)
	
	Результат = Справочники.МЧД003.НайтиДоверенности(НомерДоверенности, ИННДоверителя, ВключаяПомеченныеНаУдаление);
	
	Если СправочникМЧД <> Неопределено Тогда
		
		Доверенности = СправочникМЧД.НайтиДоверенности(НомерДоверенности, ВключаяПомеченныеНаУдаление);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Доверенности);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает сведения о статусах доверенностей.
// 
// Параметры:
//  СправочникМЧД - СправочникМенеджер.МашиночитаемыеДоверенностиКонтрагентов,
//  				СправочникМенеджер.МашиночитаемыеДоверенностиОрганизаций 
// 
//  ДанныеМЧД - Массив из Структура см. НовыеДанныеДоверенности
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - Номер доверенности
//  * Значение - см. НовыеДанныеСтатусаМЧД
//  
Функция СведенияОСтатусахДоверенностей(СправочникМЧД, ДанныеМЧД)
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Новый Соответствие;
	
	Для Каждого ДанныеДоверенности Из ДанныеМЧД Цикл
		
		СтатусМЧД = НовыеДанныеСтатусаМЧД();
		
		НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
		ИННДоверителя = ДанныеДоверенности.ИННДоверителя;
		ВключаяПомеченныеНаУдаление = Истина;
		Доверенности = НайтиДоверенности(НомерДоверенности, ИННДоверителя, СправочникМЧД, ВключаяПомеченныеНаУдаление);
		
		МЧД = Неопределено;
		
		Если Доверенности.Количество() > 0 Тогда
			МЧД = Доверенности[0];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МЧД) Тогда
			
			ИННДоверителя = ИННДоверителя(МЧД);
			
			Если ЭтоНереестроваяМЧД(МЧД) Тогда
				СтатусМЧД.Сведения = СправочникМЧД(МЧД).СведенияМЧД(МЧД);
				УстановитьДанныеРодительскойДоверенности(СтатусМЧД.Сведения);
				Результат.Вставить(НомерДоверенности, СтатусМЧД);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СведенияИзРеестра = МашиночитаемыеДоверенностиПовтИсп.ПолучитьСведенияДоверенностиНаСервереМЧД(
			НомерДоверенности, ИННДоверителя);
		
		Если ЗначениеЗаполнено(МЧД) 
			И СведенияИзРеестра.ПолныеДанные = Неопределено 
			И ЗначениеЗаполнено(СведенияИзРеестра.ЧастичныеДанные) Тогда
				
			Сведения = СправочникМЧД(МЧД).СведенияМЧД(МЧД);
			СтатусИзРеестра = СтатусДоверенности(СведенияИзРеестра.ЧастичныеДанные, 
				Сведения.СтатусВРеестреФНС, 
				Сведения.ДатаОтзыва);
			
			СтатусУстановлен = СправочникМЧД(МЧД).УстановитьСтатус(МЧД, СтатусИзРеестра);
			Если СтатусУстановлен Тогда
				СтатусМЧД.Сведения = СправочникМЧД(МЧД).СведенияМЧД(МЧД);
				УстановитьДанныеРодительскойДоверенности(СтатусМЧД.Сведения);
				
				Результат.Вставить(НомерДоверенности, СтатусМЧД);
				
				Продолжить;
			КонецЕсли;

		КонецЕсли;
		
		Если СведенияИзРеестра.Ошибка Тогда
			
			СтатусМЧД.ОшибкаПолученияДанныхСРРФНС = Истина;
			СтатусМЧД.ОписаниеОшибки = СведенияИзРеестра.ТекстОшибки;
			
			Если ЗначениеЗаполнено(МЧД) Тогда
				СтатусМЧД.Сведения = СправочникМЧД(МЧД).СведенияМЧД(МЧД);
				СтатусМЧД.ОписаниеОшибки = 
					НСтр("ru = 'Не удалось получить текущий статус МЧД из распределенного реестра ФНС'");
				
				УстановитьДанныеРодительскойДоверенности(СтатусМЧД.Сведения);
				
			КонецЕсли;
			
			Результат.Вставить(НомерДоверенности, СтатусМЧД);
			Продолжить;
			
		КонецЕсли;
		
		РезультатЧтения = ДанныеXMLМЧД(СведенияИзРеестра.ПолныеДанные.ДанныеВыгрузки);
		
		Если НЕ РезультатЧтения.Успех Тогда
			
			СтатусМЧД.Ошибка = Истина;
			СтатусМЧД.ОписаниеОшибки = РезультатЧтения.ТекстОшибки;
			Результат.Вставить(НомерДоверенности, СтатусМЧД);
			Продолжить;
			
		КонецЕсли;
		
		Если ВерсияФорматаОбъектаМЧД(РезультатЧтения.ДанныеДоверенности) = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
			
			СтатусМЧД = Справочники.МЧД003.ЗагрузитьМЧД(СведенияИзРеестра);
			
			УстановитьДанныеРодительскойДоверенности(СтатусМЧД.Сведения);
			
		Иначе
			
			РезультатЗаполнения = СправочникМЧД.ЗаполнитьМЧД(НомерДоверенности, ИННДоверителя, СведенияИзРеестра);
			
			Если РезультатЗаполнения.Ошибка Тогда
				
				СтатусМЧД.Ошибка = Истина;
				СтатусМЧД.ОписаниеОшибки = РезультатЗаполнения.ОписаниеОшибки;
				Результат.Вставить(НомерДоверенности, СтатусМЧД);
				Продолжить;
			
			КонецЕсли;
			
			УстановитьДанныеРодительскойДоверенности(РезультатЗаполнения.Сведения);
			
			СтатусМЧД.Сведения = РезультатЗаполнения.Сведения;
			СтатусМЧД.ТребуетсяПроверкаМЧДНаКлиенте = РезультатЗаполнения.ТребуетсяПроверкаМЧДНаКлиенте;
			
		КонецЕсли;
		
		Результат.Вставить(НомерДоверенности, СтатусМЧД);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Авторизуется на сервере МЧД.
// 
// Параметры:
//  ПоказыватьСлужебныеСообщения - Булево
// 
// Возвращаемое значение:
//  Структура - Результат авторизации:
//   * ТокенДоступа - Строка - Токен доступа
//   * ТекстОтвета - Строка - Текст ответа сервера МЧД
//
Функция АвторизоватьсяНаСервереМЧД(ПоказыватьСлужебныеСообщения = Истина)
	
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	КлючеваяОперация = "МашиночитаемыеДоверенности.АвторизацияНаСервереМЧД";
	
	Результат = Новый Структура;
	Результат.Вставить("ТокенДоступа", "");
	Результат.Вставить("ТекстОтвета", "");
	
	Если Не МашиночитаемыеДоверенностиПовтИсп.СервисАвторизацииСервераМЧДДоступен() Тогда
		Если ПоказыватьСлужебныеСообщения Тогда
			ТекстОшибкиПоУмолчанию =
				НСтр("ru = 'Сервис авторизации на сервере МЧД распределенного реестра недоступен.'"); 
			СтруктураОтвета = Новый Структура("ТекстОшибкиПоУмолчанию", ТекстОшибкиПоУмолчанию);
			ВывестиИЗаписатьОшибкуМЧД(Неопределено, , СтруктураОтвета);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	ШаблоныОшибок = СтруктураШаблоновОшибокМЧД();
	ШаблоныОшибок.ТекстОшибкиПоУмолчанию =
		НСтр("ru = 'Не получен токен доступа при авторизации на сервере МЧД распределенного реестра'");
	ШаблоныОшибок.ШаблонОшибкиИзИсключения =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиДляКодаСостояния =
		НСтр("ru = 'Не удалось получить данные при авторизации на сервере МЧД распределенного реестра: %1'");
	ШаблоныОшибок.ШаблонОшибкиИзОтвета =
		НСтр("ru = 'Ошибка при получении токена доступа при авторизации на сервере МЧД распределенного реестра. %1'");
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/invalid_grant",
		НСтр("ru = 'Некорректная авторизация на сервере МЧД распределенного реестра'"));
	ШаблоныОшибок.ШаблоныДляКодовОшибок.Вставить("/errors/unsupported_grant_type",
		НСтр("ru = 'Некорректный тип авторизации на сервере МЧД распределенного реестра'"));
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	РесурсНаСервере = СвойстваСервераМЧД.РесурсКорняAPI + ?(СвойстваСервераМЧД.ИспользоватьРасширенияAPI,
		"/token", "/vst-oauth2/oauth/token");

	ПараметрыРесурсаНаСервере = "";
	Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ТикетАутентификацииИлиДанныеПользователя =
			ИнтеграцияБИПБЭД.ТикетАутентификацииИлиДанныеПользователяНаПорталеПоддержки();
		
		Если ТикетАутентификацииИлиДанныеПользователя = Неопределено Тогда
			Если ПоказыватьСлужебныеСообщения Тогда
				ТекстОшибкиПоУмолчанию =
					НСтр("ru = 'Авторизация на сервере МЧД распределенного реестра невозможна, так как не заданы логин и пароль авторизации на Портале 1С:ИТС'"); 
				СтруктураОтвета = Новый Структура("ТекстОшибкиПоУмолчанию", ТекстОшибкиПоУмолчанию);
				ВывестиИЗаписатьОшибкуМЧД(Неопределено, , СтруктураОтвета);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
		Если ТикетАутентификацииИлиДанныеПользователя.Свойство("Тикет") Тогда
			Тикет = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Тикет,
				СпособКодированияСтроки.КодировкаURL); 
			ПараметрыРесурсаНаСервере = СтрШаблон("?ticket=%1", Тикет);
		Иначе
			Логин = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Логин,
				СпособКодированияСтроки.КодировкаURL);
			Пароль = КодироватьСтроку(ТикетАутентификацииИлиДанныеПользователя.Пароль,
				СпособКодированияСтроки.КодировкаURL);
			ПараметрыРесурсаНаСервере = СтрШаблон("?login=%1&password=%2", Логин, Пароль);
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовкиHTTP = Новый Соответствие();
	ЗаголовкиHTTP.Вставить("Content-Type", "application/json");
	ЗаголовкиHTTP.Вставить("Proxy-Connection", "Keep-Alive");
	ЗаголовкиHTTP.Вставить("Pragma", "no-cache");
	
	ДобавитьHTTPЗаголовокРежимаТестирования(ЗаголовкиHTTP);
	
	ЗапросHTTP = Новый HTTPЗапрос(РесурсНаСервере + ПараметрыРесурсаНаСервере, ЗаголовкиHTTP);
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		СтруктураЗапроса = Новый Структура;
		СтруктураЗапроса.Вставить("username", СвойстваСервераМЧД.Логин);
		СтруктураЗапроса.Вставить("password", СвойстваСервераМЧД.Пароль);
		СтруктураЗапроса.Вставить("grant_type", "password");
		
		ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
		ЗапросJSON = Новый ЗаписьJSON;
		ЗапросJSON.ОткрытьФайл(ИмяФайлаЗапроса, "utf-8");
		ЗаписатьJSON(ЗапросJSON, СтруктураЗапроса);
		ЗапросJSON.Закрыть();
		
		ЗапросHTTP.УстановитьИмяФайлаТела(ИмяФайлаЗапроса);
	КонецЕсли;
	
	Попытка
		Если СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ОтветHTTP = ПолучитьОтвет(СвойстваСервераМЧД, ЗапросHTTP);
		Иначе
			ОтветHTTP = ОтправитьЗапросДляОбработки(СвойстваСервераМЧД, ЗапросHTTP);
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		Если ПоказыватьСлужебныеСообщения Тогда
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок); 
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		Результат.ТекстОтвета = ОтветHTTP.ПолучитьТелоКакСтроку();
		СтруктураОтвета = ОбщегоНазначения.JSONВЗначение(Результат.ТекстОтвета, , Ложь);
		
		Если ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("access_token") Тогда
			Результат.ТокенДоступа = СтруктураОтвета.access_token;
		Иначе
			Результат.ТокенДоступа = "";
		КонецЕсли;
	Исключение
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		Если ПоказыватьСлужебныеСообщения Тогда
			ШаблоныОшибок.ШаблонОшибкиИзИсключения =
				НСтр("ru = 'Не удалось разобрать ответ при получении данных доверенности с сервера МЧД: %1'");
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецПопытки;
	ШаблоныОшибок.ШаблонОшибкиИзИсключения = "";
	
	Если НЕ ЗначениеЗаполнено(Результат.ТокенДоступа) Тогда
		Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
		КонецЕсли;
		Если ПоказыватьСлужебныеСообщения Тогда
			ВывестиИЗаписатьОшибкуМЧД(ШаблоныОшибок, ОтветHTTP, СтруктураОтвета);
		КонецЕсли;
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала,,, Истина);
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЗапроса);
	КонецЕсли;

	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	
	Возврат Результат;
	
КонецФункции

// см. МашиночитаемыеДоверенностиПовтИсп.СвойстваСервераМЧД
Функция СвойстваСервераМЧД()
	
	Возврат МашиночитаемыеДоверенностиПовтИсп.СвойстваСервераМЧД();
	
КонецФункции

Функция ОписаниеОшибкиHTTP(КодСостояния)
	
	Если КодСостояния < 300 Тогда
		Возврат "";
	ИначеЕсли КодСостояния = 300 Тогда
		Возврат НСтр("ru = 'Множественный выбор при отправке ответа сервера'");
	ИначеЕсли КодСостояния = 301 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен'");
	ИначеЕсли КодСостояния = 302 Тогда
		Возврат НСтр("ru = 'Ресурс временно перемещен'");
	ИначеЕсли КодСостояния = 303 Тогда
		Возврат НСтр("ru = 'Ресурс перемещен на другой адрес'");
	ИначеЕсли КодСостояния = 304 Тогда
		Возврат НСтр("ru = 'Неожиданный ответ об отсутствии изменений страницы'");
	ИначеЕсли КодСостояния = 305 Тогда
		Возврат НСтр("ru = 'Для доступа к ресурсу требуется прокси'");
	ИначеЕсли КодСостояния = 306 Тогда
		Возврат НСтр("ru = 'Неиспользуемый код перенаправления запроса'");
	ИначеЕсли КодСостояния = 307 Тогда
		Возврат НСтр("ru = 'Временное перенаправление'");
	ИначеЕсли КодСостояния < 400 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка по перенаправлению запроса с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 400 Тогда
		Возврат НСтр("ru = 'Неверный формат запроса'");
	ИначеЕсли КодСостояния = 401 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация'");
	ИначеЕсли КодСостояния = 402 Тогда
		Возврат НСтр("ru = 'Требуется оплата'");
	ИначеЕсли КодСостояния = 403 Тогда
		Возврат НСтр("ru = 'Доступ к ресурсу запрещен'");
	ИначеЕсли КодСостояния = 404 Тогда
		Возврат НСтр("ru = 'Запрошенная страница не найдена'");
	ИначеЕсли КодСостояния = 405 Тогда
		Возврат НСтр("ru = 'Используемый метод запрещен'");
	ИначеЕсли КодСостояния = 406 Тогда
		Возврат НСтр("ru = 'Отсутствуют подходящие ответы'");
	ИначеЕсли КодСостояния = 407 Тогда
		Возврат НСтр("ru = 'Требуется аутентификация прокси'");
	ИначеЕсли КодСостояния = 408 Тогда
		Возврат НСтр("ru = 'Лимит времени сервера при ожидании запроса исчерпан'");
	ИначеЕсли КодСостояния = 409 Тогда
		Возврат НСтр("ru = 'Конфликт с текущим состоянием ресурса, требуется больше информации'");
	ИначеЕсли КодСостояния = 410 Тогда
		Возврат НСтр("ru = 'Ресурс более недоступен'");
	ИначеЕсли КодСостояния = 411 Тогда
		Возврат НСтр("ru = 'Требуется задание длины содержимого'");
	ИначеЕсли КодСостояния = 412 Тогда
		Возврат НСтр("ru = 'Ошибочные условия заголовочных полей'");
	ИначеЕсли КодСостояния = 413 Тогда
		Возврат НСтр("ru = 'Слишком большая длина запроса'");
	ИначеЕсли КодСостояния = 414 Тогда
		Возврат НСтр("ru = 'Запрошенный идентификатор слишком велик'");
	ИначеЕсли КодСостояния = 415 Тогда
		Возврат НСтр("ru = 'Неподдерживаемый тип данных запроса'");
	ИначеЕсли КодСостояния = 416 Тогда
		Возврат НСтр("ru = 'Запрошенный промежуток невыполним'");
	ИначеЕсли КодСостояния = 417 Тогда
		Возврат НСтр("ru = 'Несоответствие ожиданиям'");
	ИначеЕсли КодСостояния = 422 Тогда
		Возврат НСтр("ru = 'Необрабатываемый объект'");
	ИначеЕсли КодСостояния = 423 Тогда
		Возврат НСтр("ru = 'Заблокировано'");
	ИначеЕсли КодСостояния = 424 Тогда
		Возврат НСтр("ru = 'Сбой взаимосвязанного вызова'");
	ИначеЕсли КодСостояния = 449 Тогда
		Возврат НСтр("ru = 'Возврат запроса после необходимого действия'");
	ИначеЕсли КодСостояния < 500 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка клиента с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 500 Тогда
		Возврат НСтр("ru = 'Внутренняя ошибка сервера'");
	ИначеЕсли КодСостояния = 501 Тогда
		Возврат НСтр("ru = 'Процесс для данного запроса не поддерживается сервером'");
	ИначеЕсли КодСостояния = 502 Тогда
		Возврат НСтр("ru = 'Gateway-сервер получил ошибочный ответ'");
	ИначеЕсли КодСостояния = 503 Тогда
		Возврат НСтр("ru = 'Сервер временно недоступен'");
	ИначеЕсли КодСостояния = 504 Тогда
		Возврат НСтр("ru = 'Превышено время ожидание ответа на запрос Gateway-сервера'");
	ИначеЕсли КодСостояния = 505 Тогда
		Возврат НСтр("ru = 'Версия HTTP не поддерживается сервером'");
	ИначеЕсли КодСостояния = 506 Тогда
		Возврат НСтр("ru = 'Вариантный тип содержит также вариант'");
	ИначеЕсли КодСостояния = 507 Тогда
		Возврат НСтр("ru = 'Переполнение хранилища'");
	ИначеЕсли КодСостояния = 510 Тогда
		Возврат НСтр("ru = 'Отсутствует поддержка расширений'");
	ИначеЕсли КодСостояния < 600 Тогда
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка сервера с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	ИначеЕсли КодСостояния = 999 Тогда
		Возврат НСтр("ru = 'Разрушительный сбой сервера'");
	Иначе
		Возврат СтрШаблон(
			НСтр("ru = 'Ошибка с кодом %1'"),
			Формат(КодСостояния, "ЧДЦ=; ЧН=; ЧГ="));
	КонецЕсли;

КонецФункции

Функция СтруктураШаблоновОшибокМЧД()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТекстОшибкиПоУмолчанию", 		"");
	Результат.Вставить("ШаблонОшибкиИзИсключения", 		"");
	Результат.Вставить("ШаблонОшибкиДляКодаСостояния", 	"");
	Результат.Вставить("ШаблонОшибкиИзОтвета", 			"");
	Результат.Вставить("ШаблоныДляКодовОшибок", 		Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиИЗаписатьОшибкуМЧД(
		ШаблоныОшибок,
		ОтветHTTP = Неопределено,
		СтруктураОтвета = Неопределено,
		РежимВыводаИЗаписи = "")
	
	ШаблоныОшибокВызова = СтруктураШаблоновОшибокМЧД();
	Если ШаблоныОшибок <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ШаблоныОшибокВызова, ШаблоныОшибок);
	КонецЕсли;
	
	КодОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("type"),
		СтруктураОтвета.type, "");
	ЗаголовокОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("title"),
		СтруктураОтвета.title, "");
	ТекстОшибки = ?(ТипЗнч(СтруктураОтвета) = Тип("Структура") И СтруктураОтвета.Свойство("detail"),
		СтруктураОтвета.detail, "");
	
	Если ЗначениеЗаполнено(КодОшибки) И ШаблоныОшибокВызова.ШаблоныДляКодовОшибок <> Неопределено
		И ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки]) Тогда
		
		ТекстОшибки = ШаблоныОшибокВызова.ШаблоныДляКодовОшибок[КодОшибки];
		
	ИначеЕсли ЗначениеЗаполнено(ЗаголовокОшибки) ИЛИ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекстОшибки = СтрШаблон(
			ШаблоныОшибокВызова.ШаблонОшибкиИзОтвета,
			ЗаголовокОшибки + ?(ЗначениеЗаполнено(ЗаголовокОшибки) И ЗначениеЗаполнено(ТекстОшибки), ": ", "") + ТекстОшибки);
		
	Иначе
		ТекстОшибки = ?(ОтветHTTP = Неопределено, "", ОписаниеОшибкиHTTP(ОтветHTTP.КодСостояния));
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиДляКодаСостояния,
				ТекстОшибки);
			
		ИначеЕсли ЗначениеЗаполнено(ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения) Тогда
			ТекстОшибки = СтрШаблон(
				ШаблоныОшибокВызова.ШаблонОшибкиИзИсключения,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Иначе
			ТекстОшибки = ШаблоныОшибокВызова.ТекстОшибкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоЗаписатьВЖурналРегистрации" И НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если РежимВыводаИЗаписи <> "ТолькоВывестиОшибку" Тогда
		ИмяСобытия = НСтр("ru = 'Машиночитаемые доверенности'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ИспользуетсяРежимТестирования()
	Возврат МашиночитаемыеДоверенностиПовтИсп.ИспользуетсяРежимТестирования();
КонецФункции

// Параметры:
//  HTTPЗаголовки - Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - Строка
Процедура ДобавитьHTTPЗаголовокРежимаТестирования(HTTPЗаголовки)
	
	Если Не ИспользуетсяРежимТестирования() Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСервераМЧД = СвойстваСервераМЧД();
	
	Если Не СвойстваСервераМЧД.ИспользоватьРасширенияAPI Тогда
		Возврат;
	КонецЕсли;
	
	HTTPЗаголовки.Вставить(ИмяHTTPЗаголовкаРежимаТестирования(), ЗначениеHTTPЗаголовкаРежимаТестирования());
	
КонецПроцедуры

// Возвращаемое значение:
//  Строка - Имя HTTPЗаголовка режима тестирования
Функция ИмяHTTPЗаголовкаРежимаТестирования()
	Возврат "poaservertype";
КонецФункции

// Возвращаемое значение:
//  Строка - Значение HTTPЗаголовка режима тестирования
Функция ЗначениеHTTPЗаголовкаРежимаТестирования()
	Возврат "test3";
КонецФункции

// Полные данные доверенности на сервере МЧД.
// 
// Параметры:
//  Ссылка 	- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций 	- ссылка на доверенность.
//  		- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов	- ссылка на доверенность.
//  		- СправочникСсылка.МЧД003									- ссылка на доверенность.
//  Отказ - Булево - Отказ
// 
// Возвращаемое значение:
//  Неопределено, ДвоичныеДанные - Полные данные доверенности на сервере МЧД
Функция ПолныеДанныеДоверенностиНаСервереМЧД(Ссылка) Экспорт
	
	ДвоичныеДанные = Неопределено; 
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка, "XMLфайлМЧД") Тогда
		XMLфайлМЧД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "XMLфайлМЧД");
		Если ТипЗнч(XMLфайлМЧД) <> Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = XMLфайлМЧД.Получить();
		Иначе
			ДвоичныеДанные = XMLфайлМЧД;
		КонецЕсли;
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка, "ФайлМЧД") Тогда
		ФайлМЧД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФайлМЧД");
		Если ТипЗнч(ФайлМЧД) <> Тип("ДвоичныеДанные") Тогда
			ДвоичныеДанные = ФайлМЧД.Получить();
		Иначе
			ДвоичныеДанные = ФайлМЧД;
		КонецЕсли;
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда

		ДоверительИНН = ИННДоверителя(Ссылка);

		СведенияДоверенности = ПолучитьПолныеДанныеДоверенностиНаСервереМЧД(
			Ссылка.НомерДоверенности, ДоверительИНН);

		Если ЗначениеЗаполнено(СведенияДоверенности.ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(СведенияДоверенности.ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СведенияДоверенности.ДанныеВыгрузки) Тогда
			Возврат Неопределено;
		КонецЕсли;

		ДвоичныеДанные = СведенияДоверенности.ДанныеВыгрузки;

		Если ДвоичныеДанные = Неопределено Тогда
			ТекстСообщения = НСтр("ru='Просмотр карточки МЧД невозможен. 
								  |Отсутствует прикрепленный xml файл доверенности. Доверенность
								  |должна быть подписана и отправлена или загружена из реестра.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;

	КонецЕсли;

	Возврат ДвоичныеДанные;

КонецФункции

#Область Подписание

// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//  ОтпечаткиСертификатов - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. ОбработатьРезультатыЗапросаДанныхМЧДДляПодписания
Функция ДанныеДляПодписания(Доверенности, ОтпечаткиСертификатов, КонтекстДиагностики) Экспорт
	
	ВидОперации = НСтр("ru = 'Выполнение действий по ЭДО'");
	ОтпечаткиСертификатов = КриптографияБЭД.ПолучитьОтпечаткиСертификатов(ВидОперации,
		КонтекстДиагностики, ОтпечаткиСертификатов);
	
	Запрос = ЗапросДанныхМЧДДляПодписания(Доверенности, ОтпечаткиСертификатов, КонтекстДиагностики);
	
	РезультатыЗапроса = РезультатыЗапросаДанныхМЧДДляПодписания(Запрос);
	
	ДанныеДляПодписания = ОбработатьРезультатыЗапросаДанныхМЧДДляПодписания(РезультатыЗапроса, КонтекстДиагностики);
	
	Возврат ДанныеДляПодписания;
	
КонецФункции

// Параметры:
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//  ОтпечаткиСертификатов - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Запрос
Функция ЗапросДанныхМЧДДляПодписания(Доверенности, ОтпечаткиСертификатов, КонтекстДиагностики)
	
	ОписанияЗапросов = Новый Массив;
	
	ДоверенностиОрганизаций = Новый Массив; // См. Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
	ДоверенностиМЧД003 = Новый Массив; // См. Массив из СправочникСсылка.МЧД003
	
	Для Каждого Доверенность Из Доверенности Цикл
		Если ЭтоМЧД003(Доверенность) Тогда
			ДоверенностиМЧД003.Добавить(Доверенность);
		Иначе
			ДоверенностиОрганизаций.Добавить(Доверенность);
		КонецЕсли;
	КонецЦикла;
	
	ИмяТаблицыДоверенностейОрганизаций = "ДоверенностиОрганизаций";
	ИмяТаблицыДоверенностейМЧД003 = "ДоверенностиМЧД003";
	
	Если ЗначениеЗаполнено(ДоверенностиОрганизаций) Тогда
		ЗапросМЧДДляПодписания = Справочники.МашиночитаемыеДоверенностиОрганизаций.ЗапросМЧДДляПодписания(
			ИмяТаблицыДоверенностейОрганизаций, ДоверенностиОрганизаций);
		ОписанияЗапросов.Добавить(ЗапросМЧДДляПодписания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоверенностиМЧД003) Тогда
		ЗапросДляПодписанияМЧД003 = Справочники.МЧД003.ЗапросДляПодписания(ИмяТаблицыДоверенностейМЧД003, ДоверенностиМЧД003);
		ОписанияЗапросов.Добавить(ЗапросДляПодписанияМЧД003);
	КонецЕсли;

	Отбор = КриптографияБЭД.НовыйОтборСертификатов();
	Отбор.Отпечатки = "&ОтпечаткиСертификатов";
	Отбор.ДоступныеТекущемуПользователю = Истина;
	Если Не ОтпечаткиСертификатов.Облако.Доступность Тогда
		Отбор.Облачные = Ложь;
	КонецЕсли;
	ОписанияЗапросов.Добавить(КриптографияБЭД.ЗапросДействующихСертификатов("ДоступныеСертификаты", Отбор));

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДоступныеСертификаты.Ссылка КАК Сертификат,
		|	ДоступныеСертификаты.Отпечаток КАК Отпечаток,
		|	ДоступныеСертификаты.Программа КАК Программа,
		|	ДоступныеСертификаты.Организация КАК Организация,
		|	&ИННОрганизацииСертификата КАК ИННОрганизации
		|ИЗ
		|	ДоступныеСертификаты КАК ДоступныеСертификаты";
	
	ШаблонТекстаЗапросаДанныхДоверенностей = 
		"ВЫБРАТЬ
		|	ДоверенностиДляОбработки.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ДоверенностиДляОбработки.Ссылка) КАК ПредставлениеСсылки,
		|	ДоверенностиДляОбработки.Организация КАК Организация,
		|	ДоверенностиДляОбработки.СНИЛСДоверителя КАК СНИЛСДоверителя,
		|	ДоверенностиДляОбработки.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	ДоверенностиДляОбработки.ОрганизацияИНН КАК ИННОрганизации,
		|	ДоверенностиДляОбработки.ОрганизацияКПП КАК КППОрганизации,
		|	ДоверенностиДляОбработки.ОрганизацияОГРН КАК ОГРНОрганизации
		|ИЗ
		|	#ДоверенностиДляОбработки КАК ДоверенностиДляОбработки";
	
	ТекстыЗапросаДанныхДоверенностей = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ДоверенностиОрганизаций) Тогда
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапросаДанныхДоверенностей, "#ДоверенностиДляОбработки", ИмяТаблицыДоверенностейОрганизаций);
		ТекстыЗапросаДанныхДоверенностей.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоверенностиМЧД003) Тогда
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапросаДанныхДоверенностей, "#ДоверенностиДляОбработки", ИмяТаблицыДоверенностейМЧД003);
		ТекстыЗапросаДанныхДоверенностей.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ТекстОбъединитьВсе =
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов()
		+ СтрСоединить(ТекстыЗапросаДанныхДоверенностей, ТекстОбъединитьВсе);
	
	Запрос = ОбщегоНазначенияБЭД.СоединитьЗапросы(Запрос, ОписанияЗапросов);

	ВсеОтпечатки = КриптографияБЭД.ПолучитьВсеОтпечаткиСертификатов(ОтпечаткиСертификатов);
	Запрос.УстановитьПараметр("ОтпечаткиСертификатов", ВсеОтпечатки);
	
	ИмяРеквизитаИННОрганизации = ИнтеграцияЭДО.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННОрганизации");
	
	ТекстИННОрганизацииСертификата = СтрШаблон("ДоступныеСертификаты.Организация.%1", ИмяРеквизитаИННОрганизации);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИННОрганизацииСертификата", ТекстИННОрганизацииСертификата);

	Возврат Запрос;

КонецФункции

// Параметры:
//  Запрос - Запрос
// 
// Возвращаемое значение:
//  Структура:
//  * Сертификаты - РезультатЗапроса
//  * ДанныеСообщений - РезультатЗапроса
Функция РезультатыЗапросаДанныхМЧДДляПодписания(Запрос)
	МассивРезультатов = Запрос.ВыполнитьПакет();
	КоличествоРезультатов = МассивРезультатов.Количество();
	РезультатыЗапроса = Новый Структура;
	РезультатыЗапроса.Вставить("Сертификаты", МассивРезультатов[КоличествоРезультатов - 2]);
	РезультатыЗапроса.Вставить("ДанныеСообщений", МассивРезультатов[КоличествоРезультатов - 1]);
	Возврат РезультатыЗапроса;
КонецФункции

// Обрабатывает результаты запроса данных МЧД для последующего подписания.
// 
// Параметры:
//  РезультатыЗапроса - см. РезультатыЗапросаДанныхМЧДДляПодписания
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Массив из см. ОписаниеНабораДанныхДляИнтерактивногоПодписанияМЧД
// 
Функция ОбработатьРезультатыЗапросаДанныхМЧДДляПодписания(РезультатыЗапроса, КонтекстДиагностики)
	
	ДанныеДляПодписания = Новый Массив;
	
	СертификатыДляПодписания = РезультатыЗапроса.Сертификаты.Выгрузить();
	ОтсутствуютСертификаты = Не ЗначениеЗаполнено(СертификатыДляПодписания);
	
	НаборыПараметровМЧДПоСертификатам = Новый Соответствие;
	ЕстьМЧДБезДоступныхСертификатов = Ложь;
	
	ОбработанныеМЧД = Новый Соответствие;
	ДвоичныеДанныеМЧД = Новый Соответствие;
	
	Выборка = РезультатыЗапроса.ДанныеСообщений.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Обработано = ОбработанныеМЧД[Выборка.Ссылка];
		Если Обработано = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Если Обработано = Неопределено Тогда
			ОбработанныеМЧД.Вставить(Выборка.Ссылка, Истина);
		КонецЕсли;
		
		Если ОтсутствуютСертификаты Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбораСертификатаДляПодписанияМЧД = ПараметрыОтбораСертификатаДляПодписанияМЧД(
			Выборка.ИННОрганизации, Выборка.ОГРНОрганизации, Выборка.СНИЛСДоверителя);
		
		НаборСертификатов = СоздатьНаборСертификатовДляПодписанияМЧД(
			ПараметрыОтбораСертификатаДляПодписанияМЧД,
			СертификатыДляПодписания);
		
		Если Не ЗначениеЗаполнено(НаборСертификатов.ДанныеСертификатов) Тогда
			ЕстьМЧДБезДоступныхСертификатов = Истина;
			Продолжить;
		КонецЕсли;
		
		НаборПараметровМЧД = НаборыПараметровМЧДПоСертификатам[НаборСертификатов];
		Если НаборПараметровМЧД = Неопределено Тогда
			НаборПараметровМЧД = Новый Массив;
			НаборыПараметровМЧДПоСертификатам.Вставить(НаборСертификатов, НаборПараметровМЧД);
		КонецЕсли;
		
		ПараметрыПодписанияМЧД = ПараметрыПодписанияМЧД(Выборка);
		
		НаборПараметровМЧД.Добавить(ПараметрыПодписанияМЧД);
		
		Если Не ЗначениеЗаполнено(Выборка.СтатусВРеестреФНС) Тогда
			ДвоичныеДанные = ПолучитьДвоичныеДанныеМЧД(Выборка.Ссылка);
		Иначе
			ДвоичныеДанные = ПолучитьДвоичныеДанныеЗаявленияНаОтзыв(Выборка.Ссылка);
		КонецЕсли;
		
		ДвоичныеДанныеМЧД.Вставить(Выборка.Ссылка, ДвоичныеДанные);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НаборыПараметровМЧДПоСертификатам) И ЕстьМЧДБезДоступныхСертификатов Тогда
		ТекстОшибки = НСтр("ru = 'В процессе подписания машиночитаемой доверенности не найден ни один из доступных сертификатов ЭП.'");
		Ошибка = ОбработкаНеисправностейБЭД.НоваяОшибка(
			НСтр("ru = 'Подписание машиночитаемой доверенности.'"),
			ВидОшибкиОтсутствуетСертификатДляПодписания(), ТекстОшибки,
			НСтр("ru = 'Не найден доступный сертификат для подписания.'"));
		ОбработкаНеисправностейБЭД.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами);
	КонецЕсли;

	Для Каждого ПараметрыМЧДПоСертификатам Из НаборыПараметровМЧДПоСертификатам Цикл
		
		ОписаниеНабораДанных = ОписаниеНабораДанныхДляИнтерактивногоПодписанияМЧД(
			ПараметрыМЧДПоСертификатам, ДвоичныеДанныеМЧД);
		ДанныеДляПодписания.Добавить(ОписаниеНабораДанных);
		
	КонецЦикла;

	Возврат ДанныеДляПодписания;

КонецФункции

// Формирует набор для подписания МЧД
// 
// Параметры:
//  ИННОрганизации - Строка
//  ПараметрыОтбораСертификата - см. МашиночитаемыеДоверенности.ПараметрыОтбораСертификатаДляПодписанияМЧД
//  СертификатыДляПодписания - ТаблицаЗначений
// 
// Возвращаемое значение:
//  Структура:
// * ЕстьОшибки - Булево
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
// * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка
//
Функция СоздатьНаборСертификатовДляПодписанияМЧД(ПараметрыОтбораСертификата, СертификатыДляПодписания)

	НовыйНаборСертификатов = Новый Структура;
	НовыйНаборСертификатов.Вставить("ЕстьОшибки", Ложь);
	НовыйНаборСертификатов.Вставить("ДанныеСертификатов", Новый Массив);
	НовыйНаборСертификатов.Вставить("ПаролиСертификатов", Новый Соответствие);
	
	ДанныеСертификатов = НовыйНаборСертификатов.ДанныеСертификатов;
	
	Для Каждого СтрокаТаблицы Из СертификатыДляПодписания Цикл
		СертификатПодходитПоИННОрганизации = СтрокаТаблицы.ИННОрганизации = ПараметрыОтбораСертификата.ИННОрганизации;
		
		Если Не СертификатПодходитПоИННОрганизации Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСертификатДоверителя = ЭтоСертификатДоверителя(
			ПараметрыОтбораСертификата.ИННОрганизации,
			ПараметрыОтбораСертификата.ОГРНОрганизации,
			ПараметрыОтбораСертификата.СНИЛСДоверителя,
			СтрокаТаблицы.Сертификат);
		
		Если Не ЭтоСертификатДоверителя Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСертификата = Новый Структура;
		ДанныеСертификата.Вставить("Ссылка", СтрокаТаблицы.Сертификат);
		ДанныеСертификата.Вставить("Отпечаток", СтрокаТаблицы.Отпечаток);
		ДанныеСертификата.Вставить("Программа", СтрокаТаблицы.Программа);
		ДанныеСертификата.Вставить("Пароль", "");
		ДанныеСертификата.Вставить("Организация", СтрокаТаблицы.Организация);
		ДанныеСертификатов.Добавить(ДанныеСертификата);
		
	КонецЦикла;

	Если Не ЗначениеЗаполнено(ДанныеСертификатов) Тогда
		НовыйНаборСертификатов.ЕстьОшибки = Истина;
		Возврат НовыйНаборСертификатов;
	КонецЕсли;
	
	Если ДанныеСертификатов.Количество() > 0 Тогда
		
		УстановитьПаролиСертификатов(НовыйНаборСертификатов);
		
	КонецЕсли;
	
	Возврат НовыйНаборСертификатов;

КонецФункции

// Извлекает сохраненные пароли для массива сертификатов и устанавливает их для каждого сертификата.
// 
// Параметры:
//  НаборСертификатов - Структура - Набор сертификатов:
// * ИспользоватьНаСервере - Булево - Обработка подписания будет происходить на сервере без запроса пользователя
// * ЕстьОшибки - Булево 
// * ДанныеСертификатов - Массив из Структура:
//     ** Ссылка - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Отпечаток - Строка
//     ** Программа - Строка
//     ** Пароль - Строка
//     ** Организация - ОпределяемыйТип.УчастникЭДО
// * ПаролиСертификатов - Соответствие из КлючИЗначение:
//     ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//     ** Значение - Строка - Пароль
// 
Процедура УстановитьПаролиСертификатов(НаборСертификатов)

	ДанныеСертификатов = НаборСертификатов.ДанныеСертификатов;

	Сертификаты = Новый Массив;
	Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл 
		Сертификаты.Добавить(ДанныеСертификата.Ссылка);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Истина);
	ПаролиСертификатов = КриптографияБЭД.ПаролиСертификатов(Сертификаты);
	УстановитьПривилегированныйРежим(Ложь);
	
	НаборСертификатов.ПаролиСертификатов = ПаролиСертификатов;
	
	Для Каждого ДанныеСертификата Из ДанныеСертификатов Цикл
		Сертификат = ДанныеСертификата.Ссылка;
		Пароль = ПаролиСертификатов[Сертификат];
		Если Пароль <> Неопределено Тогда
			ДанныеСертификата.Пароль = Пароль;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиОтсутствуетСертификатДляПодписания()
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НеНайденСертификатДляПодписания";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Отсутствует доступный сертификат для подписания доверенности'");
	ВидОшибки.ОписаниеПроблемы =  НСтр("ru = 'В процессе подписания машиночитаемой доверенности не найден ни один из доступных сертификатов ЭП.'");
	ОписаниеРешения = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru = '<a href = ""Проверьте"">Проверьте</a> настройки электронных подписей.'"));
	ВидОшибки.ОписаниеРешения = ОписаниеРешения;
	ВидОшибки.ОбработчикиНажатия.Вставить("Проверьте", "СинхронизацияЭДОКлиент.ОткрытьНастройкиЭлектроннойПодписи");
	
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает параметры подписания МЧД.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса:
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//  * ПредставлениеСсылки - Строка
// 
// Возвращаемое значение:
//  Структура:
// * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
// * Представление - Строка
//
Функция ПараметрыПодписанияМЧД(Выборка)
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Выборка.Ссылка);
	Параметры.Вставить("Представление", Выборка.ПредставлениеСсылки);
	Возврат Параметры;
КонецФункции

// Возвращает данные для интерактивного подписания.
// 
// Параметры:
//  ПараметрыМЧДПоСертификатам - КлючИЗначение:
//  * Ключ - См. СоздатьНаборСертификатовДляПодписанияМЧД
//  * Значение - Массив из См. ПараметрыПодписанияМЧД
//  ДвоичныеДанныеМЧД - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.ПрисоединенныйФайл
//  * Значение - ДвоичныеДанные
// Возвращаемое значение:
//  Структура:
//  * Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных - Массив из См. ДанныеМЧДДляИнтерактивногоПодписания
//  * ПаролиСертификатов - Соответствие из КлючИЗначение:
//       ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       ** Значение - Строка
//
Функция ОписаниеНабораДанныхДляИнтерактивногоПодписанияМЧД(ПараметрыМЧДПоСертификатам, ДвоичныеДанныеМЧД)
	
	Сертификаты = Новый Массив;
	Для Каждого ДанныеСертификата Из ПараметрыМЧДПоСертификатам.Ключ.ДанныеСертификатов Цикл
		Сертификаты.Добавить(ДанныеСертификата.Ссылка);
	КонецЦикла;
	
	ПаролиСертификатов = ПараметрыМЧДПоСертификатам.Ключ.ПаролиСертификатов;
	
	НаборДанных = Новый Массив;
	
	Для Каждого ПараметрыМЧД Из ПараметрыМЧДПоСертификатам.Значение Цикл
		
		ДанныеФайла = ДвоичныеДанныеМЧД[ПараметрыМЧД.Ссылка];
		
		ДанныеСообщения = ДанныеМЧДДляИнтерактивногоПодписания(ПараметрыМЧД, ДанныеФайла);
		
		НаборДанных.Добавить(ДанныеСообщения);
		
	КонецЦикла;
	
	ОписаниеНабораДанных = Новый Структура;
	ОписаниеНабораДанных.Вставить("Сертификаты", Сертификаты);
	ОписаниеНабораДанных.Вставить("ПаролиСертификатов", ПаролиСертификатов);	
	ОписаниеНабораДанных.Вставить("НаборДанных", НаборДанных);
	Возврат ОписаниеНабораДанных;
	
КонецФункции

// Возвращает данные сообщения для интерактивного подписания.
// 
// Параметры:
//  ПараметрыПодписания - см. ПараметрыПодписанияМЧД
//  ДвоичныеДанные - ДвоичныеДанные
//
// Возвращаемое значение:
//  Структура:
//  * Данные - ДвоичныеДанные
//  * Представление - Структура:
//  ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//  ** Представление - Строка
//  * Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,СправочникСсылка.МЧД003
//
Функция ДанныеМЧДДляИнтерактивногоПодписания(ПараметрыПодписания, ДвоичныеДанные)
	
	ДанныеМЧД = Новый Структура;
	ДанныеМЧД.Вставить("Данные", ДвоичныеДанные);
	ДанныеМЧД.Вставить("Представление", Новый Структура);
	ДанныеМЧД.Представление.Вставить("Значение", ПараметрыПодписания.Ссылка);
	ДанныеМЧД.Представление.Вставить("Представление", ПараметрыПодписания.Представление);
	ДанныеМЧД.Вставить("Доверенность", ПараметрыПодписания.Ссылка);
	
	Возврат ДанныеМЧД;
	
КонецФункции

#КонецОбласти

#Область ПроверкаПодписи

// Прочитать протокол проверки JSON.
// 
// Параметры:
//  ТекстJSON - Строка
// 
// Возвращаемое значение:
//  см. НовыйПротоколПроверкиПодписи
Функция ПрочитатьПротоколПроверкиJSON(ТекстJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	ПротоколПроверки = ПрочитатьJSON(ЧтениеJSON,, "ДатаПроверки");
	ЧтениеJSON.Закрыть();
	ПроверкаПодписи = НовыйПротоколПроверкиПодписи();
	ПроверкаПодписиДокумента = НовыйРезультатПроверки();
	ПроверкаМЧД = МашиночитаемыеДоверенностиКлиентСервер.НовыйПротоколПроверкиМЧД();
	
	Если ПротоколПроверки.Свойство("ПроверкаМЧД") Тогда
		
		Для Каждого Проверка Из ПроверкаМЧД Цикл
			Если ТипЗнч(Проверка.Значение) = Тип("Структура")
				И НЕ ПротоколПроверки.ПроверкаМЧД.Свойство(Проверка.Ключ) Тогда
				ПроверкаМЧД[Проверка.Ключ] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(ПроверкаМЧД, ПротоколПроверки.ПроверкаМЧД);
		ЗаполнитьЗначенияСвойств(ПроверкаПодписиДокумента, ПротоколПроверки.ПроверкаПодписиДокумента); 
		ЗаполнитьЗначенияСвойств(ПроверкаПодписи, ПротоколПроверки,, "ПроверкаМЧД, ПроверкаПодписиДокумента");
	
	КонецЕсли;

	ПроверкаПодписи.ПроверкаПодписиДокумента = ПроверкаПодписиДокумента;
	ПроверкаПодписи.ПроверкаМЧД = ПроверкаМЧД;
	
	Возврат ПроверкаПодписи;
	
КонецФункции

// Проверяет доступность автопроверки полномочий для доверенности
// 
// Параметры:
//  СвойстваДоверенности - см. НовыеСвойстваДоверенности
// 
// Возвращаемое значение:
//  Булево
//  
Функция ВозможнаАвтопроверкаПолномочий(СвойстваДоверенности) Экспорт
	
	ЭтоМЧДСПолнымиПолномочиями = ЭтоМЧДСПолнымиПолномочиями(СвойстваДоверенности.Ссылка);
	
	Возврат ЭтоМЧДСПолнымиПолномочиями
		ИЛИ ПравилоНастроено(СвойстваДоверенности.ПравилоПроверки)
		ИЛИ СвойстваДоверенности.ПолномочияУказаныИзКлассификатора;
		
КонецФункции

// См. МашиночитаемыеДоверенностиКлиентСервер.НовыйРезультатПроверки
Функция НовыйРезультатПроверки() Экспорт
	Возврат МашиночитаемыеДоверенностиКлиентСервер.НовыйРезультатПроверки();
КонецФункции

// Новый протокол проверки подписи.
// 
// Возвращаемое значение:
//  Структура - Новый протокол проверки подписи:
// * ВерсияПротокола - Строка
// * ПроверкаПодписиДокумента - см. НовыйРезультатПроверки
// * ПроверкаМЧД - см. МашиночитаемыеДоверенностиКлиентСервер.НовыйПротоколПроверкиМЧД
// * ОшибкиПроверкиПолномочий - Массив из см.НоваяОшибкаПроверкиПолномочий
Функция НовыйПротоколПроверкиПодписи() Экспорт
	Протокол = Новый Структура;
	Протокол.Вставить("ВерсияПротокола", "2.0");
	Протокол.Вставить("ПроверкаПодписиДокумента", НовыйРезультатПроверки());
	Протокол.Вставить("ПроверкаМЧД", МашиночитаемыеДоверенностиКлиентСервер.НовыйПротоколПроверкиМЧД());
	Протокол.Вставить("ОшибкиПроверкиПолномочий", Новый Массив());
	Возврат Протокол;
КонецФункции

// Заполняет протокол проверки доверенности.
// 
// Параметры:
//  ПроверкаДоверенности - См. МашиночитаемыеДоверенностиКлиентСервер.НовыйПротоколПроверкиМЧД
//  СведенияМЧД - См. НовыеСведенияМЧД
//  СведенияРодительскойМЧД - См. НовыеСведенияМЧД
//  ДатаПодписи - Дата
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписи
//
Процедура ЗаполнитьПротоколПроверкиРодительскойДоверенности(ПроверкаДоверенности,
	СведенияМЧД, СведенияРодительскойМЧД, ДатаПодписи, ПараметрыПроверки)
	
	ДатаПроверки = ТекущаяДатаСеанса();
	ДатаПодписиНачалоДня = НачалоДня(ДатаПодписи);
	
	ОрганизацияВДокументе = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПроверки.ЭлектронныйДокумент, "Организация");
	
	ДополнительныеРеквизиты = Новый Структура("ИНН", СведенияМЧД.ИННДоверителяРодительскойДоверенности);
	ОрганизацияДоверителя = ОбщегоНазначенияБЭД.НайтиСсылку("Контрагенты", , ДополнительныеРеквизиты);
	Если Не ЗначениеЗаполнено(ОрганизацияДоверителя) Тогда
		ОрганизацияДоверителя = ОбщегоНазначенияБЭД.НайтиСсылку("Организации", , ДополнительныеРеквизиты);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	РодительскиеДанныеПолучены = ПроверкаДоверенности.РодительскиеДанныеПолучены;
	РодительскиеДанныеПолучены.НомерДоверенности = 
		?(ЗначениеЗаполнено(РодительскиеДанныеПолучены.НомерДоверенности),
			РодительскиеДанныеПолучены.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
			
	Если Не РодительскиеДанныеПолучены.Выполнено Тогда
		
		РодительскиеДанныеПолучены.Выполнено = Истина;
		РодительскиеДанныеПолучены.ДатаПроверки = ДатаПроверки;
		РодительскиеДанныеПолучены.Успех = ЗначениеЗаполнено(СведенияРодительскойМЧД.Ссылка) 
			Или ЗначениеЗаполнено(СведенияРодительскойМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных);
	
		Если Не ЗначениеЗаполнено(СведенияРодительскойМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных) Тогда
			РодительскиеДанныеПолучены.Ошибка = 
				СтрШаблон(НСтр("ru = 'Не удалось соединиться с реестром МЧД для загрузки данных доверенности ""%1"".
								|Проверьте подпись вручную позже.'"),
					СведенияРодительскойМЧД.НомерДоверенности);
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ДействительнаВРеестре = ПроверкаДоверенности.РодительскаяДоверенностьДействительнаВРеестре;
	ДействительнаВРеестре.НомерДоверенности = 
		?(ЗначениеЗаполнено(ДействительнаВРеестре.НомерДоверенности),
			ДействительнаВРеестре.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
		
	Если Не ДействительнаВРеестре.Выполнено Тогда
		
		ДействительнаВРеестре.Выполнено = Истина;
		ДействительнаВРеестре.ДатаПроверки = ДатаПроверки;
		ДействительнаВРеестре.Успех = 
			СтатусыДействительнойДоверенности().Найти(СведенияРодительскойМЧД.СтатусВРеестреФНС) <> Неопределено;
		
		Если Не ДействительнаВРеестре.Успех 
			И ЗначениеЗаполнено(СведенияРодительскойМЧД.ДатаОтзыва)
			И СведенияРодительскойМЧД.ДатаОтзыва < ДатаПодписиНачалоДня Тогда
			ДействительнаВРеестре.Ошибка = 
				СтрШаблон(НСтр("ru = 'Доверенность отозвана %1'"), Формат(СведенияРодительскойМЧД.ДатаОтзыва, "ДЛФ=D;"));
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СведенияРодительскойМЧД.ДатаЗагрузкиИзРеестраРодительскихДанных) Тогда
			ДействительнаВРеестре.Ошибка = 
				НСтр("ru = 'Не удалось получить текущий статус МЧД из распределенного реестра ФНС'");
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СоответствиеОрганизацииВДокументе = ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе;
	СоответствиеОрганизацииВДокументе.НомерДоверенности = 
		?(ЗначениеЗаполнено(СоответствиеОрганизацииВДокументе.НомерДоверенности),
			СоответствиеОрганизацииВДокументе.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
			
	Если Не СоответствиеОрганизацииВДокументе.Выполнено Тогда
		
		СоответствиеОрганизацииВДокументе.Выполнено = Истина;
		СоответствиеОрганизацииВДокументе.ДатаПроверки = ДатаПроверки;
		СоответствиеОрганизацииВДокументе.Успех = 
			СведенияРодительскойМЧД.ИННДоверителя = ПараметрыПроверки.ИННДоверителя
			Или СведенияРодительскойМЧД.ИННДоверителя = ПараметрыПроверки.СведенияМЧД.ИННДоверителяРодительскойДоверенности;
		
		Если Не СоответствиеОрганизацииВДокументе.Успех Тогда
	
			Если ЗначениеЗаполнено(ОрганизацияДоверителя) Тогда
				СоответствиеОрганизацииВДокументе.Ошибка = СоответствиеОрганизацииВДокументе.Ошибка
					+ СтрШаблон(НСтр("ru = 'В доверенности: %1
										   |В документе: %2'"),
					ОрганизацияДоверителя, ОрганизацияВДокументе);
			Иначе
				СоответствиеОрганизацииВДокументе.Ошибка = СоответствиеОрганизацииВДокументе.Ошибка
					+ СтрШаблон(НСтр("ru = 'ИНН в доверенности: %1
										   |ИНН в документе: %2'"),
					СведенияРодительскойМЧД.ИННДоверителя, ПараметрыПроверки.ИННДоверителя);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СоответствиеПредставителя = ПроверкаДоверенности.РодительскийПредставительСоответствуютДоверителюПередоверия;
	СоответствиеПредставителя.НомерДоверенности = 
		?(ЗначениеЗаполнено(СоответствиеПредставителя.НомерДоверенности),
			СоответствиеПредставителя.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
		
	Если Не СоответствиеПредставителя.Выполнено Тогда
		
		СоответствиеПредставителя.Выполнено = Истина;
		СоответствиеПредставителя.ДатаПроверки = ДатаПроверки;
		СоответствиеПредставителя.Успех =
			СведенияРодительскойМЧД.ИННПредставителей.Найти(СведенияМЧД.ИННДоверителя) <> Неопределено;
		
		Если Не СоответствиеПредставителя.Успех Тогда
			
			Если СведенияРодительскойМЧД.ИННПредставителей.Количество() = 1 Тогда
				
				СоответствиеПредставителя.Ошибка = 
					СтрШаблон(НСтр("ru = 'Представитель: ИНН %1
									|Доверитель: ИНН %2'"),
						СведенияРодительскойМЧД.ИННПредставителей[0], СведенияМЧД.ИННДоверителя);
					
			Иначе
				
				Представители = СтрСоединить(СведенияРодительскойМЧД.ИННПредставителей, ",");
				
				СоответствиеПредставителя.Ошибка = 
					СтрШаблон(НСтр("ru = 'Представители: ИНН %1
									|Доверитель: ИНН %2'"),
						Представители, СведенияМЧД.ИННДоверителя);
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПериодДействияРодителя = ПроверкаДоверенности.РодительскийПериодДействияСоответствуетДатеДокумента;
	ПериодДействияРодителя.НомерДоверенности = 
		?(ЗначениеЗаполнено(ПериодДействияРодителя.НомерДоверенности),
			ПериодДействияРодителя.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	
	Если Не ПериодДействияРодителя.Выполнено Тогда
	
		ПериодДействияРодителя.Выполнено = Истина;
		ПериодДействияРодителя.ДатаПроверки = ДатаПроверки;
		ПериодДействияРодителя.Успех = ДатаПодписиНачалоДня >= НачалоДня(СведенияРодительскойМЧД.ДатаВыдачи)
			И ДатаПодписиНачалоДня <= НачалоДня(СведенияРодительскойМЧД.ДатаОкончания);
		
		Если Не ПериодДействияРодителя.Успех Тогда
			ПериодДействияРодителя.Ошибка =
				СтрШаблон(НСтр("ru = 'Срок действия: %1
								|Дата документа: %2'"),
					Формат(СведенияРодительскойМЧД.ДатаВыдачи, "ДЛФ=D;") + " - "
						+ Формат(СведенияРодительскойМЧД.ДатаОкончания, "ДЛФ=D;"),
					Формат(ДатаПодписиНачалоДня, "ДЛФ=D;"));
		КонецЕсли;
	
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПраваПередоверия = ПроверкаДоверенности.РодительскаяДоверенностьМоглаПередоверять;
	ПроверкаПраваПередоверия.НомерДоверенности = 
		?(ЗначениеЗаполнено(ПроверкаПраваПередоверия.НомерДоверенности),
			ПроверкаПраваПередоверия.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	
	Если Не ПроверкаПраваПередоверия.Выполнено Тогда
		
		ПроверкаПраваПередоверия.Выполнено = Истина;
		ПроверкаПраваПередоверия.ДатаПроверки = ДатаПроверки;
		ПроверкаПраваПередоверия.Успех = ПередовериеВозможно(СведенияРодительскойМЧД.ТипПередоверия);
		
		Если Не ПроверкаПраваПередоверия.Успех Тогда
			ПроверкаПраваПередоверия.Ошибка = НСтр("ru = 'Стоит признак: Без права передоверия'");
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаРодительскихПолномочий = ПроверкаДоверенности.РодительскиеПолномочияСоответствуютПолномочиямПередоверия;
	ПроверкаРодительскихПолномочий.НомерДоверенности = 
		?(ЗначениеЗаполнено(ПроверкаРодительскихПолномочий.НомерДоверенности),
			ПроверкаРодительскихПолномочий.НомерДоверенности + "," + СведенияРодительскойМЧД.НомерДоверенности,
			СведенияРодительскойМЧД.НомерДоверенности);
	
	Если Не ПроверкаРодительскихПолномочий.Выполнено Тогда
		ПроверкаРодительскихПолномочий.Выполнено = Истина;
		ПроверкаРодительскихПолномочий.ДатаПроверки = ДатаПроверки;
		ПроверкаРодительскихПолномочий.Успех = ЗначениеЗаполнено(СведенияРодительскойМЧД.Ссылка)
			И ЭтоМЧДСПолнымиПолномочиями(СведенияРодительскойМЧД.Ссылка)
			И Не АвтоматическоеДовериеПолнымПолномочиямОтключено()
			Или Не ЗначениеЗаполнено(ПараметрыПроверки.ЭлектронныйДокумент);
		
		Если Не ПроверкаРодительскихПолномочий.Успех Тогда
			Если СведенияРодительскойМЧД.ПолномочияУказаныИзКлассификатора
				Или ПравилоНастроено(СведенияРодительскойМЧД.ПравилоПроверки) Тогда
				
				РезультатПроверкиПолномочий = ПроверитьПолномочияДоверенности(
					СведенияРодительскойМЧД.Ссылка, ПараметрыПроверки.ЭлектронныйДокумент);
				
				ПроверкаРодительскихПолномочий.Успех = РезультатПроверкиПолномочий.Успех;
				ПроверкаРодительскихПолномочий.Ошибка = РезультатПроверкиПолномочий.ТекстОшибки;
				
			Иначе
				
				ПроверкаРодительскихПолномочий.Ошибка =
					МашиночитаемыеДоверенностиКлиентСервер.ТекстНеобходимостиРучнойПроверкиПолномочий();
				
				ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(СведенияРодительскойМЧД.Ссылка);
				Если Не ПравилоПроверки.Используется Тогда
					ПроверкаРодительскихПолномочий.Ошибка = ТекстОшибкиВыключеныПравилаПроверки();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Если ЗначениеЗаполнено(СведенияРодительскойМЧД.РодительскиеДанныеМЧД) Тогда
		ЗаполнитьПротоколПроверкиРодительскойДоверенности(ПроверкаДоверенности,
			СведенияМЧД,
			СведенияРодительскойМЧД.РодительскиеДанныеМЧД,
			ДатаПодписи,
			ПараметрыПроверки);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет протокол проверки доверенности.
// 
// Параметры:
//  ПроверкаДоверенности - См. МашиночитаемыеДоверенностиКлиентСервер.НовыйПротоколПроверкиМЧД
//  ПараметрыПроверки - См. НовыеПараметрыПроверкиПодписи
//  ИННПредставителя - Строка
//  ДатаПодписи - Дата
Процедура ЗаполнитьПротоколПроверкиДоверенности(ПроверкаДоверенности, ПараметрыПроверки, ИННПредставителя, ДатаПодписи)
	
	ПроверкаДоверенности.Выполнена = Истина;
	СведенияМЧД = ПараметрыПроверки.СведенияМЧД;
	ДатаПроверки = СведенияМЧД.ДатаПолученияСведений;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	РодительскиеДанныеМЧД = СведенияМЧД.РодительскиеДанныеМЧД;
	Если Не ЗначениеЗаполнено(РодительскиеДанныеМЧД) Тогда
		ПроверкаДоверенности.РодительскиеДанныеПолучены = Неопределено;
		ПроверкаДоверенности.РодительскаяДоверенностьДействительнаВРеестре = Неопределено;
		ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе = Неопределено;
		ПроверкаДоверенности.РодительскийПредставительСоответствуютДоверителюПередоверия = Неопределено;
		ПроверкаДоверенности.РодительскийПериодДействияСоответствуетДатеДокумента = Неопределено;
		ПроверкаДоверенности.РодительскаяДоверенностьМоглаПередоверять = Неопределено;
		ПроверкаДоверенности.РодительскиеПолномочияСоответствуютПолномочиямПередоверия = Неопределено;
	Иначе
		ЗаполнитьПротоколПроверкиРодительскойДоверенности(ПроверкаДоверенности,
			СведенияМЧД, РодительскиеДанныеМЧД, ДатаПодписи, ПараметрыПроверки);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПодписиМЧД = ПроверкаДоверенности.ПроверкаПодписиМЧД;
	ПроверкаПодписиМЧД.Выполнено = Истина;
	ПроверкаПодписиМЧД.ДатаПроверки = ДатаПроверки;
	ПроверкаПодписиМЧД.Успех = СведенияМЧД.Верна;
	Если НЕ ПроверкаПодписиМЧД.Успех Тогда
		ПроверкаПодписиМЧД.Ошибка = НСтр("ru='Подпись доверенности не верифицирована'");
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаОтзываМЧД = ПроверкаДоверенности.ПроверкаОтзываМЧД;
	ПроверкаОтзываМЧД.Выполнено = Истина;
	ПроверкаОтзываМЧД.ДатаПроверки = ДатаПроверки;
	ПроверкаОтзываМЧД.Успех = НЕ (СведенияМЧД.Отозвана И СведенияМЧД.ДатаОтзыва < ДатаПодписи);
	
	Если НЕ ПроверкаОтзываМЧД.Успех Тогда
		ПроверкаОтзываМЧД.Ошибка = СтрШаблон(НСтр("ru='Доверенность отозвана %1'"), СведенияМЧД.ДатаОтзыва);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	ПроверкаОператором = ПараметрыПроверки.ПроверкаОператором;
		Если ЗначениеЗаполнено(ПроверкаОператором) 
		И ПроверкаОператором.ДоверенностьПроверенаОператором
		И ЗначениеЗаполнено(СведенияМЧД.СтатусВРеестреФНС) Тогда
		Проверка = ПроверкаДоверенности.ПроверкаОператором;
		Проверка.Выполнено = Истина;
		Проверка.ДатаПроверки = ДатаПроверки;
		Проверка.Успех = ПроверкаОператором.ДоверенностьДействительна;
		Если ПроверкаОператором.ДоверенностьДействительна Тогда
			Проверка.Ошибка = ПроверкаОператором.ДоверенностьДействительнаОшибка
		КонецЕсли; 
	Иначе
		ПроверкаДоверенности.ПроверкаОператором = Неопределено;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Если НЕ ЗначениеЗаполнено(СведенияМЧД.СтатусВРеестреФНС)
		Или СведенияМЧД.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации Тогда
		ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС = Неопределено
	Иначе
		
		ПроверкаСтатусаВРеестреФНС = ПроверкаДоверенности.ПроверкаСтатусаВРеестреФНС;
		ПроверкаСтатусаВРеестреФНС.Выполнено = Истина;
		ПроверкаСтатусаВРеестреФНС.ДатаПроверки = ДатаПроверки;
		ПроверкаСтатусаВРеестреФНС.Успех =
			СтатусыДействительнойДоверенности().Найти(СведенияМЧД.СтатусВРеестреФНС) <> Неопределено;

		Если ЗначениеЗаполнено(СведенияМЧД.ДатаОтзыва) 
			И СведенияМЧД.ДатаОтзыва > ДатаПодписи Тогда
			ПроверкаСтатусаВРеестреФНС.Успех = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияМЧД.ДатаОтправкиЗаявленияНаОтзыв) 
			И СведенияМЧД.ДатаОтправкиЗаявленияНаОтзыв > ДатаПодписи Тогда
			ПроверкаСтатусаВРеестреФНС.Успех = Истина;
		КонецЕсли;

		Если НЕ ПроверкаСтатусаВРеестреФНС.Успех Тогда
			ПроверкаСтатусаВРеестреФНС.Ошибка =
				СтрШаблон(НСтр("ru = 'Доверенность недействительна. Текущий статус: %1'"),
					СведенияМЧД.СтатусВРеестреФНС);
		КонецЕсли;
		
		ПроверкаСтатусаВРеестреФНС.Ошибка = ПараметрыПроверки.ТекстОшибки;
		Если Не ПустаяСтрока(ПараметрыПроверки.ТекстОшибки) И Не ПараметрыПроверки.ОшибкаПолученияДанныхСРРФНС Тогда
			ПроверкаСтатусаВРеестреФНС.Успех = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПолномочий = ПроверкаДоверенности.ПроверкаПолномочий;
	ПроверкаПолномочий.ДатаПроверки = ДатаПроверки;
	
	Если СведенияМЧД.СовместныеПолномочия Тогда
		
		ПроверкаПолномочий.Успех = Ложь;
		
		КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ТекстОшибки = НСтр("ru = 'Доверенность содержит несколько представителей.'", КодЯзыка);
		ТекстОписания = НСтр("ru = 'Автоматическая проверка таких доверенностей не поддерживается в этой версии программы.'", КодЯзыка);
		ТекстРешения = НСтр("ru = 'Отметьте вручную или запросите у контрагента документ, подписанный другой доверенностью.'", КодЯзыка);
		ПроверкаПолномочий.Ошибка = СтрШаблон("%1 %2 %3", ТекстОшибки, ТекстОписания, ТекстРешения);
	Иначе
		ПроверкаПолномочий.Успех = ЗначениеЗаполнено(ПараметрыПроверки.СведенияМЧД.Ссылка)
			И ЭтоМЧДСПолнымиПолномочиями(ПараметрыПроверки.СведенияМЧД.Ссылка)
			И Не АвтоматическоеДовериеПолнымПолномочиямОтключено()
			Или Не ЗначениеЗаполнено(ПараметрыПроверки.ЭлектронныйДокумент);
	
		Если НЕ ПроверкаПолномочий.Успех Тогда
			Если ПараметрыПроверки.СведенияМЧД.ПолномочияУказаныИзКлассификатора
				Или ПравилоНастроено(ПараметрыПроверки.СведенияМЧД.ПравилоПроверки) Тогда
				
				РезультатПроверкиПолномочий = ПроверитьПолномочияДоверенности(
					ПараметрыПроверки.СведенияМЧД.Ссылка, ПараметрыПроверки.ЭлектронныйДокумент);
			
				ПроверкаПолномочий.Успех = РезультатПроверкиПолномочий.Успех;
				ПроверкаПолномочий.Ошибка = РезультатПроверкиПолномочий.ТекстОшибки;
				
			Иначе
				
				ПроверкаПолномочий.Ошибка =
					МашиночитаемыеДоверенностиКлиентСервер.ТекстНеобходимостиРучнойПроверкиПолномочий();
				
				ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(ПараметрыПроверки.СведенияМЧД.Ссылка);
				Если Не ПравилоПроверки.Используется Тогда
					ПроверкаПолномочий.Ошибка = ТекстОшибкиВыключеныПравилаПроверки();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СопоставлениеДоверителя = ПроверкаДоверенности.СопоставлениеДоверителя;
	СопоставлениеДоверителя.Выполнено = Истина;
	СопоставлениеДоверителя.ДатаПроверки = ДатаПроверки;
	Если Не ЗначениеЗаполнено(ПараметрыПроверки.ИННДоверителя) Тогда
		СопоставлениеДоверителя.Успех = Ложь;				
		СопоставлениеДоверителя.Ошибка = ПараметрыПроверки.ТекстОшибки; 
	ИначеЕсли СведенияМЧД.ИННДоверителя = ПараметрыПроверки.ИННДоверителя
		Или (ЗначениеЗаполнено(ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе) 
			И ПроверкаДоверенности.РодительскаяДоверенностьСоответствуетОрганизацииВДокументе.Успех) Тогда
		СопоставлениеДоверителя.Успех = Истина;
	Иначе
		СопоставлениеДоверителя.Успех = Ложь;
		СопоставлениеДоверителя.Ошибка = 
			СтрШаблон(НСтр("ru = 'ИНН %1 доверителя не соответствует ИНН %2 в содержании электронного документа.'"),
				СведенияМЧД.ИННДоверителя, ПараметрыПроверки.ИННДоверителя);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
				
	СопоставлениеПредставителя = ПроверкаДоверенности.СопоставлениеПредставителя;
	СопоставлениеПредставителя.Выполнено = Истина;
	СопоставлениеДоверителя.ДатаПроверки = ДатаПроверки;
	СопоставлениеПредставителя.Успех = Ложь;
	
	Если Не ЗначениеЗаполнено(ИННПредставителя) Тогда
		СопоставлениеПредставителя.Ошибка = ПараметрыПроверки.ТекстОшибки;
	КонецЕсли;
	
	Для Каждого ИННПредставителяИзСведенийМЧД Из СведенияМЧД.ИННПредставителей Цикл
		Если ИННПредставителяИзСведенийМЧД = ИННПредставителя Тогда
			СопоставлениеПредставителя.Успех = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СопоставлениеПредставителя.Успех Тогда
		Если СведенияМЧД.ИННПредставителей.Количество() = 1 Тогда
			СопоставлениеПредставителя.Ошибка = СтрШаблон(
				НСтр("ru = 'ИНН %1 представителя по доверенности не соответствует ИНН %2 владельца электронной подписи.'"),
				ИННПредставителяИзСведенийМЧД, ИННПредставителя);
        Иначе
			СопоставлениеПредставителя.Ошибка = СтрШаблон(
				НСтр("ru = 'ИНН представителей по доверенности не соответствует ИНН %1 владельца электронной подписи.'"),
				ИННПредставителя);
		КонецЕсли;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПроверкаПериодаДействия = ПроверкаДоверенности.ПроверкаПериодаДействия;
	ПроверкаПериодаДействия.Выполнено = Истина;
	ПроверкаПериодаДействия.ДатаПроверки = ДатаПроверки;
	ДатаПодписиНачалоДня = НачалоДня(ДатаПодписи);
	ПроверкаПериодаДействия.Успех = ДатаПодписиНачалоДня >= НачалоДня(СведенияМЧД.ДатаВыдачи)
									И ДатаПодписиНачалоДня <= НачалоДня(СведенияМЧД.ДатаОкончания);
	Если НЕ ПроверкаПериодаДействия.Успех Тогда
		ПроверкаПериодаДействия.Ошибка =
			НСтр("ru = 'Дата подписи документа не соответствует периоду действия доверенности.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикОбновления

// Удаляет устаревшие записи регистра "Результаты проверки МЧД оператором".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраРезультатыПроверкиМЧДОператором(Доверенность)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыПроверкиМЧДОператором.ПодписанныйОбъект,
		|	РезультатыПроверкиМЧДОператором.Отпечаток
		|ИЗ
		|	РегистрСведений.МашиночитаемыеДоверенностиЭД КАК МашиночитаемыеДоверенностиЭД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыПроверкиМЧДОператором КАК РезультатыПроверкиМЧДОператором
		|		ПО МашиночитаемыеДоверенностиЭД.ЭлектронныйДокумент = РезультатыПроверкиМЧДОператором.ПодписанныйОбъект
		|ГДЕ
		|	МашиночитаемыеДоверенностиЭД.МЧД = &МЧД";
	
	Запрос.УстановитьПараметр("МЧД", Доверенность);
	ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрыСведений.РезультатыПроверкиМЧДОператором);
	
КонецПроцедуры

// Удаляет устаревшие записи регистра "Машиночитаемые доверенности электронных документов".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраМашиночитаемыеДоверенностиЭД(Доверенность)
	
	НаборЗаписей = РегистрыСведений.МашиночитаемыеДоверенностиЭД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МЧД.Установить(Доверенность);
	ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда
		НаборЗаписей.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет устаревшие записи регистра "Электронные подписи по МЧД".
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_УдалитьЗаписиРегистраЭлектронныеПодписиПоМЧД(Доверенность)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭлектронныеПодписиПоМЧД.ПодписанныйОбъект,
		|	ЭлектронныеПодписиПоМЧД.ХешПодписи
		|ИЗ
		|	РегистрСведений.ЭлектронныеПодписиПоМЧД КАК ЭлектронныеПодписиПоМЧД
		|ГДЕ
		|	ЭлектронныеПодписиПоМЧД.Доверенность = &Доверенность";
	
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрыСведений.ЭлектронныеПодписиПоМЧД);
	
КонецПроцедуры

// Проверить необходимость удаления доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//               - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  Удалить - Булево
Процедура ОбработатьДанные_ПроверитьНеобходимостьУдаленияДоверенности(Доверенность, Удалить)
	
	Если Не ЗначениеЗаполнено(Доверенность.ДатаСоздания) Тогда
		Удалить = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет набор записей регистра сведений, полученный запросом.
// 
// Параметры:
//  Запрос - Запрос - текст запроса должен содержать все измерения регистра в выбираемых полях.
//  РегистрСведенийМенеджер - РегистрСведенийМенеджер.РезультатыПроверкиМЧДОператором
//                          - РегистрСведенийМенеджер.ЭлектронныеПодписиПоМЧД
Процедура ОбработатьДанные_УдалитьЗаписиРегистра(Запрос, РегистрСведенийМенеджер)
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрСведенийМенеджер.СоздатьНаборЗаписей();
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			НаборЗаписей.Отбор[Колонка.Имя].Установить(ВыборкаДетальныеЗаписи[Колонка.Имя]);
		КонецЦикла;
		ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() Тогда
			НаборЗаписей.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Создает правило проверки полномочий.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Процедура ОбработатьДанные_СоздатьПравилоПроверкиПолномочий(Доверенность)
	
	УдалитьСкриптПроверкиПолномочий = 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "УдалитьСкриптПроверкиПолномочий");
	
	Если ЭтоМЧДСПолнымиПолномочиями(Доверенность) ИЛИ НЕ ЗначениеЗаполнено(УдалитьСкриптПроверкиПолномочий)
		ИЛИ ЗначениеЗаполнено(РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(Доверенность).Правило) Тогда
		Возврат;
	КонецЕсли;
	
	ПравилоОбъект = Справочники.ПравилаПроверкиПолномочийМЧД.СоздатьЭлемент();
	ПравилоОбъект.Скрипт = УдалитьСкриптПроверкиПолномочий;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПравилоОбъект);
	
	НаборЗаписей = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.СоздатьНаборЗаписей();
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Доверенность = Доверенность;
	НоваяЗапись.ПравилоПроверки = ПравилоОбъект.Ссылка;
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	
КонецПроцедуры

// Выполняет перенос данных о представителях из реквизита справочника в табличную часть.
// 
// Параметры:
//  ОбъектМЧД - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//  			 - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//  Записать - Булево
Процедура ОбработатьДанные_ЗаполнитьТаблицуПредставителей(ОбъектМЧД, Записать)
		
	ДвоичныеДанныеДоверенности = ОбъектМЧД.XMLфайлМЧД.Получить();
	
	ДанныеИзФайлаОбмена = ДанныеИзФайлаОбмена(ДвоичныеДанныеДоверенности);
	
	Если Не ДанныеИзФайлаОбмена.Успех Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДоверенности = ДанныеИзФайлаОбмена.ДанныеДоверенности;
	
	Если ТипЗнч(ОбъектМЧД) = Тип("СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций") Тогда
	
		Если ДанныеДоверенности.Представители.Количество() > 0 Тогда
		
			Для Каждого Представитель Из ДанныеДоверенности.Представители Цикл
			
				СведенияОПредставителеМЧД = 
					Справочники.МашиночитаемыеДоверенностиОрганизаций.СведенияОПредставителеПоДаннымМЧД(Представитель);
			
				НоваяСтрокаПредставителей = ОбъектМЧД.Представители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПредставителей, СведенияОПредставителеМЧД); 
			
			КонецЦикла;
			
			Записать = Истина;
			
		КонецЕсли;
				
	ИначеЕсли ТипЗнч(ОбъектМЧД) = Тип("СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов") Тогда

		Если ДанныеДоверенности.Представители.Количество() > 0 Тогда	
			Для Каждого СведенияОПредставителе Из ДанныеДоверенности.Представители Цикл
				
				НоваяСтрокаПредставителей = ОбъектМЧД.Представители.Добавить();
				Если СведенияОПредставителе.ТипУполномоченногоПредставителя = "ЮЛ"
					ИЛИ СведенияОПредставителе.ТипУполномоченногоПредставителя = "ИП" Тогда
					НоваяСтрокаПредставителей.Представитель = СведенияОПредставителе.ПредставительЮЛ_НаимОрг;
					НоваяСтрокаПредставителей.ПредставительИНН = СведенияОПредставителе.ПредставительЮЛ_ИНН;
				КонецЕсли;
				
				Если СведенияОПредставителе.ТипУполномоченногоПредставителя = "ФЛ" Тогда
					НоваяСтрокаПредставителей.Представитель = ПолучитьПредставлениеФИО(СведенияОПредставителе);
					НоваяСтрокаПредставителей.ПредставительИНН = СведенияОПредставителе.ПредставительФЛ_ИНН;
				КонецЕсли;
				
			КонецЦикла;
			Записать = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Указывает вариант заполнения полномочий
// 
// Параметры:
//  Объект   - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//  	     - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//  	     - СправочникОбъект.МЧД003
//  Записать - Булево
Процедура ОбработатьДанные_ЗаполнитьВариантУказанияПолномочий(Объект, Записать)
	
	Если Не ЗначениеЗаполнено(Объект.ВариантЗаполненияПолномочий) Тогда
		
		Объект.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Текст;
		Записать = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Классификатор Тогда
		
		Попытка
			ДвоичныеДанныеМЧД = Объект.XMLфайлМЧД.Получить();
			ВерсияФорматаМЧД = ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД);
		Исключение
			ВерсияФорматаМЧД = "";
		КонецПопытки;
		
		Если Не ФорматМЧДПоддерживаетКлассификаторПолномочий(ВерсияФорматаМЧД) Тогда
			
			Объект.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Текст;
			Записать = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле ХешФайла по данным файла доверенности. ХешФайла используется как натуральный ключ в журнале МЧД
// 
// Параметры:
//  Объект - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//  Записать - Булево
Процедура ОбработатьДанные_ЗаполнитьХешФайла(Объект, Записать)
	ДанныеДоверенности = Объект.XMLфайлМЧД.Получить();
	Если ТипЗнч(ДанныеДоверенности) = Тип("ДвоичныеДанные") Тогда
		Объект.ХешФайла = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(ДанныеДоверенности, ХешФункция.SHA256);
		Записать = Истина;
	КонецЕсли;
КонецПроцедуры

// Добавляет доверенности в журнал МЧД
// 
// Параметры:
//  Объект - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
Процедура ОбработатьДанные_ЗаписатьВЖурналМЧД(Объект)
	Объект.ЗаписатьВЖурнал(Ложь);
КонецПроцедуры

// Возвращает информацию о возможности выполнить преобразование МЧД под работу в новом формате,
// записывает в журнал регистрации информацию о причине необработки МЧД
// 
// Параметры:
//  Объект - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//         - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//
// Возвращаемое значение:
//  Булево
Функция ОбработатьДанные_ВозможноВыполнитьОбработкуМЧД(Объект)

	Результат = Истина;
	
	ШаблонСообщения = НСтр("ru = 'Не удалось обработать машиночитаемую доверенность ЭДО: %1 по причине: %2'");
	МетаданныеОбъекта = Объект.Метаданные();
	МассивОшибок = Новый Массив;
	
	ДоверенностьНеПодписана = Не Объект.Подписана;
	НеЗаполненДоверитель = Ложь;
	НеЗаполненПредставитель = Ложь;
	ОшибкаВСодержимом = Ложь;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций") Тогда
		НеЗаполненДоверитель = ПустаяСтрока(Объект.ДоверительЮЛ_ИНН) И ПустаяСтрока(Объект.ДоверительФЛ_ИНН);
		НеЗаполненПредставитель = ПустаяСтрока(Объект.УдалитьПредставительЮЛ_ИНН) 
			И ПустаяСтрока(Объект.УдалитьПредставительФЛ_ИНН);
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов") Тогда
		НеЗаполненДоверитель = ПустаяСтрока(Объект.ДоверительИНН);
		НеЗаполненПредставитель = ПустаяСтрока(Объект.УдалитьПредставительИНН);
	КонецЕсли;
	
	Попытка 
		ДвоичныеДанныеМЧД = Объект.XMLфайлМЧД.Получить();
		ВерсияФорматаФайлаМЧД(ДвоичныеДанныеМЧД);
	Исключение
		ОшибкаВСодержимом = Истина;
	КонецПопытки;

	Если ДоверенностьНеПодписана Тогда
		МассивОшибок.Добавить(НСтр("ru='Доверенность не подписана'", "ru"));
	КонецЕсли;
	Если НеЗаполненДоверитель Тогда
		МассивОшибок.Добавить(НСтр("ru='Не заполнен доверитель'", "ru"));
	КонецЕсли;
	Если НеЗаполненПредставитель Тогда
		МассивОшибок.Добавить(НСтр("ru='Не заполнен представитель'", "ru"));
	КонецЕсли;
	Если ОшибкаВСодержимом Тогда
		МассивОшибок.Добавить(НСтр("ru='Ошибка в содержимом XML доверенности'", "ru"));
	КонецЕсли;
	
	Если МассивОшибок.Количество() Тогда
		Результат = Ложь;
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Объект.Ссылка, СтрСоединить(МассивОшибок, ", "));
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Вызывается после подписания доверенности.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  ДанныеВыгрузки - ДвоичныеДанные - доверенность в формате xml.
//  СвойстваПодписи - Структура - одноименная структура, полученная в результате выполнения
//                    метода см. ЭлектроннаяПодписьКлиент.Подписать.
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Истина, если требуется проверить МЧД на клиенте.
//
Процедура ВыполнитьДействияПослеПодписания(Доверенность, ДанныеВыгрузки, СвойстваПодписи, 
		ТребуетсяПроверкаМЧДНаКлиенте = Ложь) Экспорт
	
	ИмяФайлаМЧД = ПолучитьИмяФайлаМЧД(Доверенность);
	НачатьТранзакцию();
	
	Попытка
		
		ОбъектДоверенность = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(Доверенность);
		Если Не ТипЗнч(ОбъектДоверенность) = Тип("СправочникОбъект.МЧД003") Тогда
			ОбъектДоверенность.ИмяФайлаВыгрузка = ИмяФайлаМЧД + ".xml";
			ОбъектДоверенность.XMLфайлМЧД = Новый ХранилищеЗначения(ДанныеВыгрузки, Новый СжатиеДанных(9));
			ОбъектДоверенность.ДатаПодписания = СвойстваПодписи.ДатаПодписи;
		КонецЕсли;
		
		ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
		ДанныеДляПроверки.ДанныеДоверенности = ДанныеВыгрузки;
		ДанныеДляПроверки.ДанныеПодписи = СвойстваПодписи.Подпись;
		ЗаполнитьПодписанаВерна(ОбъектДоверенность, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте);
		Если ОбъектДоверенность.Модифицированность() Тогда
			ОбъектДоверенность.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		ОбъектДоверенность.Разблокировать();
		
	Исключение
		
		ОтменитьТранзакцию();
		Операция = НСтр("ru = 'Подписание доверенности'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось записать данные доверенности. Подробности в журнале регистрации'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки, ТекстСообщения, Доверенность);
			
	КонецПопытки;
	
КонецПроцедуры

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица, КПП доверителя юр.лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
//    * КПП - Строка - заполнено только для ЮЛ, ИО
//    * ТипДоверителя - Строка - принимает значения ЮЛ, ИО, ИП, ФЛ
Функция ИННКППДоверителей(ДанныеДоверенности) Экспорт
	
	Если ВерсияФорматаФайлаМЧД(ДанныеДоверенности) = ФорматМЧД_2022() Тогда
		Возврат ИННКППДоверителейВУтвержденномФормате(ДанныеДоверенности);
	ИначеЕсли ВерсияФорматаФайлаМЧД(ДанныеДоверенности) = ФорматМЧД_2022_Версия_002() Тогда
		Возврат ИННКППДоверителейВУтвержденномФормате_Версия_002(ДанныеДоверенности);
	ИначеЕсли ВерсияФорматаФайлаМЧД(ДанныеДоверенности) = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
		Возврат ИННКППДоверителейВФормате_003(ДанныеДоверенности);		
	Иначе
		Возврат ИННКППДоверителейВПилотномФормате(ДанныеДоверенности);	
	КонецЕсли;
		
КонецФункции

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица, КПП доверителя юр. лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в пилотном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
//    * КПП - Строка - заполнено только для ЮЛ, ИО
//    * ТипДоверителя - Строка - принимает значения ЮЛ, ИО, ИП
Функция ИННКППДоверителейВПилотномФормате(ДанныеДоверенности)
	
	Поток = ДанныеДоверенности.ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ЛокальноеИмя = "СвДоверит"
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Возврат НайтиИННКППДоверителей(ЧтениеXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	Поток.Закрыть();
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица, КПП доверителя юр.лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в утвержденном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
//    * КПП - Строка - заполнено только для ЮЛ, ИО
//    * ТипДоверителя - Строка - принимает значения ЮЛ, ИО, ИП, ФЛ
Функция ИННКППДоверителейВУтвержденномФормате(ДанныеДоверенности)
	
	Результат = Новый Структура;
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ИННЮЛ", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("ТипДоверителя", "");
	
	Доверенность = ДанныеИзФайлаОбменаВУтвержденномФормате(ДанныеДоверенности).ДанныеДоверенности;
	Результат.ТипДоверителя = Доверенность.ТипОрганизации;
	
	Если Доверенность.ТипОрганизации = "ЮЛ" Тогда
		Результат.ИННФЛ = Доверенность.ЛицоБезДовФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
		Результат.КПП = Доверенность.ДоверительЮЛ_КПП;
	ИначеЕсли Доверенность.ТипОрганизации = "ИО" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
		Результат.КПП = Доверенность.ДоверительЮЛ_КПП;
	ИначеЕсли Доверенность.ТипОрганизации = "ИП" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ФЛ" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Результат.ИННФЛ;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица., КПП доверителя юр.лица формата версии 002
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в утвержденном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
//    * КПП - Строка - заполнено только для ЮЛ, ИО
//    * ТипДоверителя - Строка - принимает значения ЮЛ, ИО, ИП, ФЛ
Функция ИННКППДоверителейВУтвержденномФормате_Версия_002(ДанныеДоверенности)
	
	Результат = Новый Структура;
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ИННЮЛ", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("ТипДоверителя", "");
	
	Доверенность = ДанныеИзФайлаОбменаВУтвержденномФорматеВерсия002(ДанныеДоверенности).ДанныеДоверенности;
	Результат.ТипДоверителя = Доверенность.ТипОрганизации;
	
	Если Доверенность.ТипОрганизации = "ЮЛ" Тогда
		Результат.ИННФЛ = Доверенность.ЛицоБезДовФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
		Результат.КПП = Доверенность.ДоверительЮЛ_КПП;
	ИначеЕсли Доверенность.ТипОрганизации = "ИО" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
		Результат.КПП = Доверенность.ДоверительЮЛ_КПП;
	ИначеЕсли Доверенность.ТипОрганизации = "ИП" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Доверенность.ДоверительЮЛ_ИНН;
	ИначеЕсли Доверенность.ТипОрганизации = "ФЛ" Тогда
		Результат.ИННФЛ = Доверенность.ДоверительФЛ_ИНН;
		Результат.ИННЮЛ = Результат.ИННФЛ;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Возвращает значение атрибутов ИННФЛ, ИННЮЛ.
// 
// Параметры:
//  ЧтениеXML - ЧтениеXML
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка, 
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
//    * КПП - Строка - заполнено только для ЮЛ, ИО
//    * ТипДоверителя - Строка - принимает значения ЮЛ, ИО, ИП
Функция НайтиИННКППДоверителей(ЧтениеXML) 
	
	Результат = Новый Структура;
	Результат.Вставить("ИННФЛ", "");
	Результат.Вставить("ИННЮЛ", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("ТипДоверителя", "");
	
	КлассификаторДаНет = Новый ФиксированнаяСтруктура("Нет, Да", "0", "1");
	
	СведенияОДоверителе = "";
	Пока ЧтениеXML.Прочитать() Цикл
		
		ЭтоСведенияОДоверителе = ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента
			И (ЧтениеXML.ЛокальноеИмя = "РосОргДовер" Или ЧтениеXML.ЛокальноеИмя = "ИнОргДовер" Или ЧтениеXML.ЛокальноеИмя = "ФЛДовер");
			
		Если ЭтоСведенияОДоверителе Тогда
			СведенияОДоверителе = ЧтениеXML.ЛокальноеИмя;
		КонецЕсли;
		
		Если СведенияОДоверителе = "РосОргДовер" Тогда
			
			ИННЮЛ = ЧтениеXML.ЗначениеАтрибута("ИННЮЛ");
			КПП = ?(ЗначениеЗаполнено(ЧтениеXML.ЗначениеАтрибута("КПП")), ЧтениеXML.ЗначениеАтрибута("КПП"), "");
			
			Если ЧтениеXML.ЗначениеАтрибута("ЕИОИП") = КлассификаторДаНет.Да Тогда
				ИННФЛ = ОбщегоНазначенияБЭД.ЗначениеАтрибутаУзла(ЧтениеXML, "СвИП", "ИННФЛ");
			Иначе
				ИННФЛ = ОбщегоНазначенияБЭД.ЗначениеАтрибутаУзла(ЧтениеXML, "СвФЛ", "ИННФЛ");
			КонецЕсли;
			
			ТипДоверителя = "ЮЛ";
			
		ИначеЕсли СведенияОДоверителе = "ИнОргДовер" Тогда
			
			ИННЮЛ = ЧтениеXML.ЗначениеАтрибута("ИННЮЛ");
			КПП = ?(ЗначениеЗаполнено(ЧтениеXML.ЗначениеАтрибута("КПП")), ЧтениеXML.ЗначениеАтрибута("КПП"), "");
			ИННФЛ = ОбщегоНазначенияБЭД.ЗначениеАтрибутаУзла(ЧтениеXML, "СвРукОП", "ИННФЛ");
			ТипДоверителя = "ИО";
			
		ИначеЕсли СведенияОДоверителе = "ФЛДовер" Тогда
			
			ИННФЛ = ЧтениеXML.ЗначениеАтрибута("ИННФЛ");
			ИННЮЛ = ИННФЛ;
			КПП = "";
			ТипДоверителя = "ИП";
			
		КонецЕсли;
		
		Если ЭтоСведенияОДоверителе Тогда
			Результат.ИННФЛ = ИННФЛ;
			Результат.ИННЮЛ = ИННЮЛ;
			Результат.КПП = КПП;
			Результат.ТипДоверителя = ТипДоверителя;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат выгрузки неподписанной доверенности.
// 
// Параметры:
//  РезультатВыгрузки - Структура:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево
// * ТекстОшибки - Строка
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево
// * ТекстОшибки - Строка
Функция РезультатВыгрузкиНеподписаннойДоверенности(РезультатВыгрузки)
	
	РезультатВыгрузки.Ошибка = Истина;
	РезультатВыгрузки.ТекстОшибки = НСтр("ru = 'Выгружать в файл можно только подписанные доверенности. Подпишите и повторите выгрузку.'");
	Возврат РезультатВыгрузки;
	
КонецФункции

// Возвращает количество видов полномочий представителя МЧД.
// 
// Возвращаемое значение:
//  Число
Функция КоличествоВидовПолномочийПредставителя()
	
	Возврат 25;
	
КонецФункции

#Область ПроверкаДоверенности

// Выполняет запись результатов ручной проверки подписи по МЧД
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
// 
Процедура ЗаписатьРезультатыРучнойПроверкиПодписейПоДокументу(ЭлектронныйДокумент)

	Подписи = ЭлектронныеДокументыЭДО.ПодписиПоДокументуСУчетомДоверенностей(ЭлектронныйДокумент);
	
	Для Каждого Подпись Из Подписи Цикл
		Если Подпись.ЭтоПодписьПоДоверенности Тогда
			
			ПроверкаВыполненаВручную = 
				МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(
					Подпись.РезультатПроверкиПоМЧД);
			
			Если Не ПроверкаВыполненаВручную Тогда
				
				ПодписьПоДоверенностиВерна = Подпись.РезультатПроверкиПоМЧД.ПодписьВерна;
				
				Если ЗначениеЗаполнено(Подпись.РезультатПроверкиПоМЧД.ПротоколПроверки) Тогда		
					
					ПроверкаПолномочийБезОшибок = 
						Подпись.РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий.Успех;
											
					Если ПроверкаПолномочийБезОшибок Тогда
						
						ДоверенностьПроверенаУспешно = 
							МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(
								Подпись.РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаМЧД);
						
						Если Не ДоверенностьПроверенаУспешно Тогда
							ЗаписатьРезультатРучнойПроверкиПодписи(Подпись);	
						ИначеЕсли Не ПодписьПоДоверенностиВерна Тогда
							ЗаписатьРезультатРучнойПроверкиПодписи(Подпись);
						КонецЕсли;
						
					ИначеЕсли Не Подпись.РезультатПроверкиПоМЧД.ПроверкаВыполнена Тогда
						ЗаписатьРезультатРучнойПроверкиПодписи(Подпись);	
					КонецЕсли;
					
				ИначеЕсли Не ПодписьПоДоверенностиВерна Тогда
					ЗаписатьРезультатРучнойПроверкиПодписи(Подпись);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Проверяет корректность оформления доверенности.
// 
// Параметры:
//  ДанныеДляПроверки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  См. РезультатПроверкиДоверенности
Функция ПроверитьДоверенность(ДанныеДляПроверки, КонтекстДиагностики = Неопределено) Экспорт
	
	РезультатПроверкиПодписи = КриптографияБЭД.ПроверитьПодпись(Неопределено, ДанныеДляПроверки.ДанныеДоверенности,
		ДанныеДляПроверки.ДанныеПодписи, КонтекстДиагностики);
	
	Возврат РезультатПроверкиДоверенности(ДанныеДляПроверки.ДанныеДоверенности, РезультатПроверкиПодписи,
		КонтекстДиагностики);
	
КонецФункции

// Возвращает результат проверки доверенности.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные
//  РезультатПроверкиПодписи - см. КриптографияБЭДКлиентСервер.НовыйРезультатПроверкиПодписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
// 
// Возвращаемое значение:
//  Структура:
//    * Результат - Булево - Истина, если доверенность оформлена верно.
//    * ТекстОшибки - Строка - свойство заполнено, если Результат - Ложь.
//    * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция РезультатПроверкиДоверенности(ДанныеДоверенности, РезультатПроверкиПодписи, КонтекстДиагностики) Экспорт
	
	РезультатПроверки = Новый Структура("Результат, ТекстОшибки, КонтекстДиагностики", Ложь, "", КонтекстДиагностики);
	
	ИННПодписантаФЛ = "";
	ИННПодписантаЮЛ = "";
	Сертификат = Неопределено;
	СвойстваСубъектаСертификата = Неопределено;
	Ошибки = Новый Массив;
	
	ДанныеДоверителей = ИННКППДоверителей(ДанныеДоверенности);
	
	ИННДоверителяФЛ = ДанныеДоверителей.ИННФЛ;
	ИННДоверителяЮЛ = ДанныеДоверителей.ИННЮЛ;
	
	СНИЛСПодписанта = "";
	СНИЛСДоверителяФЛ = "";
	
	СвойстваПодписи = РезультатПроверкиПодписи.СвойстваПодписи;
	Если СвойстваПодписи.Сертификат <> Неопределено Тогда
		Сертификат = Новый СертификатКриптографии(СвойстваПодписи.Сертификат);
		СвойстваСубъектаСертификата = ЭлектроннаяПодпись.СвойстваСубъектаСертификата(Сертификат);
		
		Если ЗначениеЗаполнено(СвойстваСубъектаСертификата.ИННЮЛ) Тогда
			ИННПодписантаЮЛ = СвойстваСубъектаСертификата.ИННЮЛ;
			ИННПодписантаФЛ = СвойстваСубъектаСертификата.ИНН;
		Иначе
			ИННПодписантаЮЛ = Прав(СвойстваСубъектаСертификата.ИНН, 10);
		КонецЕсли;
		
		СНИЛСПодписанта = 
			СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("- ", СвойстваСубъектаСертификата.СНИЛС, "");
		
	КонецЕсли;
	
	ПодписьВерна = РезультатПроверкиПодписи.СвойстваПодписи.ПодписьВерна;
	Если РезультатПроверкиПодписи.ОписаниеОшибки = "" Тогда
		СертификатДействителен = Истина;
	Иначе
		СертификатДействителен = Ложь;
		Ошибки.Добавить(РезультатПроверкиПодписи.ОписаниеОшибки);
	КонецЕсли;
	
	РезультатЧтения = ОбъектXDTOМЧД(ДанныеДоверенности);
	ВерсияФормата = ВерсияФорматаОбъектаМЧД(РезультатЧтения.ОбъектМЧД);
	СНИЛСДоверителяФЛ = СНИЛСФизическогоЛицаДоверителя(РезультатЧтения.ОбъектМЧД);
		
	Если РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РезультатЧтения.ОбъектМЧД, "Документ.Передов") <> Неопределено Тогда
		ДоверенностьПодписанаДоверителем = Истина;
	ИначеЕсли ЗначениеЗаполнено(ИННДоверителяФЛ) Тогда
		ДоверенностьПодписанаДоверителем = (ИННПодписантаФЛ = ИННДоверителяФЛ);
	ИначеЕсли ЗначениеЗаполнено(СНИЛСДоверителяФЛ) Тогда
		ДоверенностьПодписанаДоверителем = (СНИЛСПодписанта = СНИЛСДоверителяФЛ);
	Иначе
		ДоверенностьПодписанаДоверителем = Ложь;
	КонецЕсли;
	
	СертификатПодписантаНеСодержитИННФизЛица = НЕ ЗначениеЗаполнено(ИННПодписантаФЛ); // выпускались по 21.09.2021
	Если (Не ДоверенностьПодписанаДоверителем
			И ЗначениеЗаполнено(ИННПодписантаФЛ)
			И ЗначениеЗаполнено(ИННДоверителяФЛ))
		Или Не (СертификатПодписантаНеСодержитИННФизЛица 
					ИЛИ ДоверенностьПодписанаДоверителем) Тогда
		ТекстОшибки = 
			НСтр("ru = 'Доверенность подписана лицом, которое не является доверителем по данной доверенности.'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	ДоверенностьВыданаЦентральнымБанком = ЭтоИННЦентральногоБанка(ИННДоверителяЮЛ);
	ЭтоДоверенностьОтИП = ИННДоверителяФЛ = ИННДоверителяЮЛ ИЛИ НЕ ЗначениеЗаполнено(ИННДоверителяЮЛ);
	ДоверительЯвляетсяУполномоченнымПредставителемОрганизации =
		ЭтоДоверенностьОтИП
		ИЛИ (ИННПодписантаЮЛ = ИННДоверителяЮЛ)
		Или (ДоверенностьВыданаЦентральнымБанком
				И ЭтоСертификатВыданныйЦентральнымБанком(Сертификат));
		
	Если Не ДоверительЯвляетсяУполномоченнымПредставителемОрганизации Тогда
		ТекстОшибки = 
			НСтр("ru = 'Доверенность подписана лицом, которое не является уполномоченным представителем организации.'");
		Ошибки.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатПроверки.ТекстОшибки = СтрСоединить(Ошибки, Символы.ПС);
	
	РезультатПроверки.Результат = ПодписьВерна
		И СертификатДействителен
		И (СертификатПодписантаНеСодержитИННФизЛица
			ИЛИ ДоверенностьПодписанаДоверителем)
		И ДоверительЯвляетсяУполномоченнымПредставителемОрганизации
		И ЗначениеЗаполнено(ВерсияФормата);
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

// Параметры:
//  СведенияМЧД - СправочникОбъект.МЧД003
//              - Структура:
//              	* ПередовериеРазрешено - Булево
//              	* ДатаПрекращения      - Дата
//              	* СрокДействия		   - Дата              	
//					* СтатусВРеестреФНС    - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//					* Верна                - Булево
//					* Подписана            - Булево
//
// Возвращаемое значение:
//  Булево
// 
Функция ПередовериеРазрешено(СведенияМЧД) Экспорт
	
	Возврат ИмеетсяПравоИзмененияМЧД() 
		И СведенияМЧД.ПередовериеРазрешено 
		И Не МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьОтозвана(СведенияМЧД)
		И СведенияМЧД.СрокДействия > ТекущаяДатаСеанса() 
		И СведенияМЧД.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано
			Или (СведенияМЧД.Верна И СведенияМЧД.Подписана И Не ЗначениеЗаполнено(СведенияМЧД.СтатусВРеестреФНС));
	
КонецФункции

// Параметры:
//  ДанныеДоверенностиXDTO - ОбъектXDTO
// 
// Возвращаемое значение:
//  Строка
Функция СНИЛСФизическогоЛицаДоверителя(ДанныеДоверенностиXDTO)
	
	ВерсияФормата = ВерсияФорматаОбъектаМЧД(ДанныеДоверенностиXDTO);
	Если ВерсияФормата = МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003() Тогда
		СНИЛСДоверителяФЛ = Справочники.МЧД003.СНИЛСЛицДействующихБезДоверенности(ДанныеДоверенностиXDTO);
	Иначе
		СНИЛСДоверителяФЛ = Справочники.МашиночитаемыеДоверенностиОрганизаций.СНИЛСДоверителя(ДанныеДоверенностиXDTO);
	КонецЕсли;
	
	СНИЛСДоверителя = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими("- ", СНИЛСДоверителяФЛ, "");
	
	Возврат СНИЛСДоверителя;
	
КонецФункции

// Определяет видимость команд МЧД При получении данных динамического списка и кеширует значение в данных строки
// 
// Параметры:
//  Строки - СтрокиДинамическогоСписка
//
Процедура ОпределитьВидимостьКомандМЧДПриПолученииДанныхСпискаНаСервере(Строки) Экспорт
	Если Не ЗначениеЗаполнено(Строки) Тогда
		Возврат;
	КонецЕсли;
	ДатаПроверки = ТекущаяДатаСеанса();
	Доверенности = Новый Массив(Строки.Количество());
	Индекс = 0;
	Для Каждого ОписаниеСтрокиДинамическогоСписка Из Строки Цикл
		Доверенности[Индекс] = ОписаниеСтрокиДинамическогоСписка.Значение.Данные.Ссылка;
		Индекс = Индекс + 1;
	КонецЦикла;
	РезультатПроверки = ДоверенностиДействительны(Доверенности, ДатаПроверки);
	Для Каждого ОписаниеСтрокиДинамическогоСписка Из Строки Цикл
		ДанныеСтроки = ОписаниеСтрокиДинамическогоСписка.Значение.Данные;
		ВидимостьКомандМЧД = Новый Соответствие;
		ВидимостьКомандМЧД.Вставить("ОтменаДоверенности", РезультатПроверки[ДанныеСтроки.Ссылка]);
		ДанныеСтроки["ВидимостьКомандМЧД"] = ВидимостьКомандМЧД;
	КонецЦикла;
КонецПроцедуры

// Проверяет, является ли файл с данным расширением файлом подписи.
// 
// Параметры:
//  РасширениеФайла - Строка
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоРасширениеФайлаПодписи(РасширениеФайла)
	
	Возврат РасширенияФайловПодписи().Найти(РасширениеФайла) <> Неопределено;
	
КонецФункции

// Возвращает расширения файлов подписи.
// 
// Возвращаемое значение:
//  Массив из Строка 
Функция РасширенияФайловПодписи()
	
	МассивРасширений = Новый Массив;
	МассивРасширений.Добавить("p7s");
	МассивРасширений.Добавить("sig");
	МассивРасширений.Добавить("sign");
	МассивРасширений.Добавить("sgn");
	
	Возврат МассивРасширений;
	
КонецФункции

// Проверяет настройку правила проверки полномочий МЧД
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
// 
// Возвращаемое значение:
//  Булево
Функция ПравилоНастроено(Правило) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Правило) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "ПравилоНастроено") = Истина;
	
КонецФункции

// Обрабатывает ошибку некорректных правил проверки.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций, СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов - Доверенность
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО - Электронный документ
//  ПравилоПроверки - Неопределено, СправочникСсылка.ПравилаПроверкиПолномочийМЧД - Правило проверки
Процедура ВывестиОшибкуНекорректныхПравилПроверки(Доверенность, ЭлектронныйДокумент, ПравилоПроверки = Неопределено)
	
	ТекстОшибки = НСтр("ru = 'Не настроены правила проверки полномочий доверенности'");
	Если ЗначениеЗаполнено(ПравилоПроверки) Тогда
		ТекстОшибки = НСтр("ru = 'Правила проверки полномочий настроены некорректно'");
	КонецЕсли;
	ВидОперации = НСтр("ru = 'Проверка полномочий доверенности.'");
	ШаблонСообщения =
		Нстр("ru = 'Ошибка при проверке полномочий доверенности: %1 для документа: %2'");
	Сообщение = СтрШаблон(ШаблонСообщения, Доверенность, ЭлектронныйДокумент);
	ПодробныйТекстОшибки = Сообщение + Символы.ПС + ТекстОшибки; 
	ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, Сообщение);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
// * ТекстОшибки - Строка
// * Полномочия - Неопределено
//              - Массив из см. НовыеПолномочияПредставителя
//              - Массив из см. Справочники.МЧД003.НовыеДанныеМашиночитаемогоПолномочия
//
Функция НовыеДанныеМашиночитаемыхПолномочий() Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("ТекстОшибки", "");
	Данные.Вставить("Полномочия", Неопределено);
	
	Возврат Данные;
	
КонецФункции

// Проверяет право настройки правил проверки полномочий.
// Параметры:
// МетаданныеМЧД - ОбъектМетаданных
// 
// Возвращаемое значение:
//  Булево
Функция ЕстьПравоНастройкиПравилПроверкиПолномочий(МетаданныеМЧД = Неопределено) Экспорт
	
	Возврат (МетаданныеМЧД = Метаданные.Справочники.МашиночитаемыеДоверенностиКонтрагентов
		ИЛИ МетаданныеМЧД = Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций
		ИЛИ МетаданныеМЧД = Метаданные.Справочники.МЧД003)
		И ПравоДоступа("Изменение", МетаданныеМЧД);
	
КонецФункции

// Возвращает признак, указаны ли полномочия доверенности из классификатора.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  			 - СправочникСсылка.МЧД003
//  ВариантЗаполненияПолномочий - ПеречислениеСсылка.ВариантыЗаполненияПолномочийМЧД
// 
// Возвращаемое значение:
//  Булево - Истина, если полномочия из классификатора
//
Функция ПолномочияМЧДУказаныИзКлассификатора(Доверенность = Неопределено, ВариантЗаполненияПолномочий = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Доверенность) И Не ЗначениеЗаполнено(ВариантЗаполненияПолномочий) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВариантЗаполненияПолномочий = Неопределено Тогда
		
		ВариантЗаполненияПолномочий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Доверенность, "ВариантЗаполненияПолномочий");
	
	КонецЕсли;
	
	Возврат ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Классификатор;
	
КонецФункции

// При получении данных на сервере.
// 
// Параметры:
//  ИмяЭлемента - Строка
//  Настройки - НастройкиКомпоновкиДанных
//  Строки - Соответствие Из КлючИЗначение:
//	* Ключ - Произвольный
//	* Значение - СтрокаДинамическогоСписка
//
Процедура ПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки) Экспорт
	
	СтрСоединитель = " " + НСтр("ru = 'и еще'") + " ";
	
	Для Каждого СтрокаТаблицы Из Строки Цикл
		
		Если СтрокаТаблицы.Значение.Данные.Количество > 1 Тогда
			СтрокаТаблицы.Значение.Данные.Представитель = СтрокаТаблицы.Значение.Данные.Представитель 
				+ СтрСоединитель
				+ Строка(СтрокаТаблицы.Значение.Данные.Количество - 1);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

// Формирует набор цветов фона.
// 
// Возвращаемое значение:
//  Структура - набор цветов:
// * ВниманиеМЧД - Цвет
// * ДействительнаяМЧД - Цвет
// * НедействительнаяМЧД - Цвет
//
Функция ЦветаФона() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВниманиеМЧД", ЦветаСтиля.ЦветФонаВниманиеМЧД);
	Результат.Вставить("ДействительнаяМЧД", ЦветаСтиля.ЦветФонаДействительнаяМЧД);
	Результат.Вставить("НедействительнаяМЧД", ЦветаСтиля.ЦветФонаНедействительнаяМЧД);
			
	Возврат Результат;
	
КонецФункции

// Выполняет проверку оператором переданного типа МЧД.
//
// Параметры:
//  Оператор - Строка - Идентификатор оператора
//  ТипДоверенности - Тип - один из типов, входящих в состав определяемого типа МашиночитаемаяДоверенность
//
// Возвращаемое значение:
//  Булево - Истина, если тип доверенности поддержан оператором
//
Функция ТипПоддержанОператором(Оператор, ТипДоверенности) Экспорт
	
	ТипДоверенностиПоддержанОператором = Ложь;
	
	Если ПустаяСтрока(Оператор) Или Не ЗначениеЗаполнено(ТипДоверенности) Или ТипДоверенности = Тип("Неопределено") Тогда
		Возврат ТипДоверенностиПоддержанОператором;
	КонецЕсли;
	
	ТаблицаОператоров = СервисНастроекЭДО.ОператорыЭлектронногоДокументооборота();
	НайденнаяСтрока = ТаблицаОператоров.Найти(Оператор, "Идентификатор");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат ТипДоверенностиПоддержанОператором;
	КонецЕсли;
	
	Если НайденнаяСтрока.ПоддерживаемыеПриРегистрацииПредставителяТипыМЧД.Количество() = 0 Тогда
		ТипДоверенностиПоддержанОператором = Истина;
		Возврат ТипДоверенностиПоддержанОператором;
	КонецЕсли;
	
	НайденныйТип = НайденнаяСтрока.ПоддерживаемыеПриРегистрацииПредставителяТипыМЧД.НайтиПоЗначению(ТипДоверенности);
	ТипДоверенностиПоддержанОператором = (НайденныйТип <> Неопределено);
	
	Если Не ТипДоверенностиПоддержанОператором Тогда
		МассивПоддержанныхТиповМЧД = Новый Массив;
		Для Каждого ТекущийТип Из НайденнаяСтрока.ПоддерживаемыеПриРегистрацииПредставителяТипыМЧД Цикл
			МассивПоддержанныхТиповМЧД.Добавить(ТекущийТип.Представление);
		КонецЦикла;
		ВидОперации = НСтр("ru = 'Проверка поддержки оператором регистрации с использованием машиночитаемой доверенности'");
		
		// АПК:163-выкл отключаем проверку для локализованной/интерфейсной строки
		
		ТекстОшибкиШаблон = 
			НСтр("ru = 'Оператором ""%1"" в данный момент не поддержана регистрация учетных записей
			|представителей с использованием машиночитаемых доверенностей выбранной версии.
			|Необходимо выбрать машиночитаемую доверенность версии %2.
			|В случае её отсутствия, требуемую машиночитаемую доверенность можно
			|зарегистрировать на сайте ФНС и загрузить её в программу из реестра ФНС.'");
			
		// АПК:163-вкл включаем проверку для локализованной/интерфейсной строки
		
		ТекстОшибки = СтрШаблон(ТекстОшибкиШаблон, НайденнаяСтрока.Наименование,
			СтрСоединить(МассивПоддержанныхТиповМЧД, ", "));
		ОбработкаНеисправностейБЭДВызовСервера.ОбработатьОшибку(ВидОперации,
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ЭлектронноеВзаимодействие, ТекстОшибки, ТекстОшибки);
	КонецЕсли;
	
	Возврат ТипДоверенностиПоддержанОператором;
	
КонецФункции

// Формирует фиксированное соответствие, связывающее строковые типы МЧД,
// используемые в json-файлах, публикуемых в сервисе настроек ЭДО, с типами справочников МЧД.
// 
// Возвращаемое значение:
//  ФиксированноеСоответствие Из КлючИЗначение:
//	 * Ключ - Строка
//	 * Значение - Тип - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//	 			- Тип - СправочникСсылка.МЧД003
//
Функция СоответствиеДанныхСервисаНастроекЭДОИТиповМЧД() Экспорт
	
	Результат = Новый Соответствие();
	Результат.Вставить("002", Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций"));
	Результат.Вставить("003", Тип("СправочникСсылка.МЧД003"));
			
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

// Возвращает текст декорации информации о дополнительной проверке полномочий для форм классификаторов полномочий ФНС.
// 
// Возвращаемое значение:
//  Строка - Текст декорации
Функция ТекстДекорацииИнформацииОДополнительнойПроверкеПолномочий() Экспорт
	Возврат НСтр("ru = 'Дополнительные скрипты больше не используются. Все правила проверки настраиваются в карточке машиночитаемой доверенности.'");
КонецФункции

// Возвращает признак выполнения ручной проверки подписи по МЧД.
// 
// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//
// Возвращаемое значение:
//  Булево
//
Функция НастройкаПодтверждениеРучнойПроверкиМЧДВыполнена(ЭлектронныйДокумент)
	
	ИдентификаторыУчастниковЭДО = ЭлектронныеДокументыЭДО.ИдентификаторыУчастниковЭДО(ЭлектронныйДокумент);
	
	ПредставлениеКлючаОбъекта = 
		СтрШаблон("%1_%2", 
			ИдентификаторыУчастниковЭДО.ИдентификаторОтправителя,
				ИдентификаторыУчастниковЭДО.ИдентификаторПолучателя);
	
	КлючОбъекта = ПредставлениеКлючаОбъекта;
	КлючНастроек = "ПодтверждениеРучнойПроверкиМЧД";
	
	НастройкиПодтверждениеРучнойПроверкиМЧД = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если ЗначениеЗаполнено(НастройкиПодтверждениеРучнойПроверкиМЧД)
		И НастройкиПодтверждениеРучнойПроверкиМЧД.ПроверкаВыполнена Тогда
		
		Если Не НастройкиПодтверждениеРучнойПроверкиМЧД.БольшеНеЗадаватьЭтотВопрос Тогда
			НастройкиПодтверждениеРучнойПроверкиМЧД.ПроверкаВыполнена = Ложь;
			СохранитьНастройкиРучнойПроверкиПодписиПоМЧД(
				НастройкиПодтверждениеРучнойПроверкиМЧД, ЭлектронныйДокумент);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьИмяФайлаВыгрузки(СсылкаНаДоверенность)
	
	Если ЭтоМЧД003(СсылкаНаДоверенность) Тогда
		ИмяФайлаВыгрузки = Справочники.МЧД003.ПолучитьИмяФайлаМЧД(СсылкаНаДоверенность);
	Иначе	
		ИмяФайлаВыгрузки = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьИмяФайлаМЧД(СсылкаНаДоверенность);
	КонецЕсли;
	
	Возврат ИмяФайлаВыгрузки;
	
КонецФункции

Процедура ЗаписатьМЧД(РезультатРегистрации, СсылкаНаДоверенность)
	
	Если ЗначениеЗаполнено(РезультатРегистрации.ИдентификаторТранзакции) И ЭтоМЧД003(СсылкаНаДоверенность) Тогда
		МЧД = СсылкаНаДоверенность.ПолучитьОбъект();
		МЧД.ИдентификаторТранзакции = РезультатРегистрации.ИдентификаторТранзакции;
		МЧД.СтатусВРеестреФНС = ПредопределенноеЗначение(
			"Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отправлено");
		МЧД.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ИНН доверителя физ. лица, ИНН доверителя юр.лица, КПП доверителя юр. лица.
// 
// Параметры:
//  ДанныеДоверенности - ДвоичныеДанные - доверенность в пилотном формате xml.
// 
// Возвращаемое значение:
//  Структура:
//    * ИННФЛ - Строка
//            - Неопределено
//    * ИННЮЛ - Строка
//            - Неопределено
//    * КПП - Строка - заполнено только для ЮЛ, ИО
//    * ТипДоверителя - Строка - принимает значения ЮЛ, ИО, ИП
Функция ИННКППДоверителейВФормате_003(ДанныеДоверенности)
	
	Поток = ДанныеДоверенности.ОткрытьПотокДляЧтения();
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьПоток(Поток);
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если (ЧтениеXML.ЛокальноеИмя = "СвДоверит"
				Или ЧтениеXML.ЛокальноеИмя = "СвПередПолн")
			И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Возврат НайтиИННКППДоверителей(ЧтениеXML);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	Поток.Закрыть();
	
	Возврат Неопределено;
	
КонецФункции

// Извлекает из XML файла доверенности поля, необходимые для запроса сведений о родительской доверенности из
// распределенного реестра. 
// 
// Параметры:
//  ДвоичныеДанныеДоверенности - ДвоичныеДанные
// 
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//		* НомерДоверенности - Строка
//		* ИННДоверителя - Строка
//
Функция ПараметрыДляЗапросаРодительскойДоверенности(ДвоичныеДанныеДоверенности)
	
	Отказ = Ложь;
	ОткрытыеРесурсы = Новый Массив; // Массив Из ЧтениеXML, ЗаписьXML
	
	ПараметрыЗапроса = Новый Структура("НомерДоверенности, ИННДоверителя", "", "");
	
	Правило = Обработки.ОбменСКонтрагентами.ПолучитьМакет(
		"ПравилоИзвлеченияСведенийРодительскойДоверенностиДляЗапросаКРеестру").ПолучитьТекст();
	
	ЧтениеДоверености = Новый ЧтениеXML;
	ОткрытыеРесурсы.Добавить(ЧтениеДоверености);
	ЧтениеДоверености.ОткрытьПоток(ДвоичныеДанныеДоверенности.ОткрытьПотокДляЧтения());
	
	ЗаписьСтруктуры = Новый ЗаписьXML;
	ОткрытыеРесурсы.Добавить(ЗаписьСтруктуры);
	ЗаписьСтруктуры.УстановитьСтроку();
	
	Преобразователь = Новый ПреобразованиеXSL;
	Преобразователь.ЗагрузитьИзСтроки(Правило);
	
	Попытка
		Преобразователь.Преобразовать(ЧтениеДоверености, ЗаписьСтруктуры);
		XMLСтрокаСтруктуры = ЗаписьСтруктуры.Закрыть();
		
		ЧтениеСтруктуры = Новый ЧтениеXML;
		ЧтениеСтруктуры.ОткрытьПоток(ПолучитьДвоичныеДанныеИзСтроки(XMLСтрокаСтруктуры).ОткрытьПотокДляЧтения());
		ОткрытыеРесурсы.Добавить(ЧтениеСтруктуры);
		СтруктураИзПравил = СериализаторXDTO.ПрочитатьXML(ЧтениеСтруктуры, Тип("Структура"));
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	Если Не Отказ Тогда
		НомерДоверенности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИзПравил, "НомерДоверенности");
		ИННДоверителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИзПравил, "ИННДоверителя");
		Если ЗначениеЗаполнено(НомерДоверенности) И ЗначениеЗаполнено(ИННДоверителя) Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, СтруктураИзПравил);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого РесурсКЗакрытию Из ОткрытыеРесурсы Цикл
		РесурсКЗакрытию.Закрыть();
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
КонецФункции

#Область ПредставлениеСубъектовДоверенностей

// Параметры:
//  Данные - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеЮридическоеЛицо
//  
// Возвращаемое значение:
//  Строка
Функция ПредставлениеЮридическогоЛица(Знач Данные)
	
	ЗаполнитьПустыеПоля(Данные, "ИНН, КПП");
	Шаблон = НСтр("ru='[Наименование] ИНН: [ИНН] КПП: [КПП]';");
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, Данные);
	
КонецФункции

// Параметры:
//  Данные - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйИндивидуальныйПредприниматель
//  
// Возвращаемое значение:
//  Строка
Функция ПредставлениеИндивидуальногоПредпринимателя(Знач Данные)
	
	ЗаполнитьПустыеПоля(Данные, "ИНН, СНИЛС");
	Шаблон = НСтр("ru='[Наименование] ИНН: [ИНН] СНИЛС: [СНИЛС]';");
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, Данные);
	
КонецФункции

// Параметры:
//  Данные - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеФизическоеЛицо
//  
// Возвращаемое значение:
//  Строка
Функция ПредставлениеФизическогоЛица(Знач Данные)
	
	ЗаполнитьПустыеПоля(Данные, "ИНН, СНИЛС");
	Шаблон = НСтр("ru='[ФИО] ИНН: [ИНН] СНИЛС: [СНИЛС]';");
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, Данные);
	
КонецФункции

// Параметры:
//  Данные - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НоваяИностраннаяОрганизация
//  
// Возвращаемое значение:
//  Строка
Функция ПредставлениеИностраннойОрганизации(Знач Данные)
	
	ЗаполнитьПустыеПоля(Данные, "ИНН, КПП");
	Шаблон = НСтр("ru='[Наименование] ИНН: [ИНН] КПП: [КПП]';");
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Шаблон, Данные);
	
КонецФункции

// Параметры:
//  Структура - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеЮридическоеЛицо
//            - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НоваяИностраннаяОрганизация
//            - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйИндивидуальныйПредприниматель
//            - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеФизическоеЛицо 
//  КлючиСтрокой - Строка
Процедура ЗаполнитьПустыеПоля(Структура, КлючиСтрокой)
	
	Ключи = СтрРазделить(КлючиСтрокой, ", ", Ложь);
	Для Каждого Ключ Из Ключи Цикл
		Если Не ЗначениеЗаполнено(Структура[Ключ]) Тогда
			Структура[Ключ] = " -- ";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеСубъекта - Массив из См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйДоверитель, 
//  	См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйПредставитель
// 
// Возвращаемое значение:
//  Массив из Строка
Функция ПредставленияСубьектовДовернности(ДанныеСубъекта)
	ПредставленияСубьектовДовернности = Новый Массив;
	Для Каждого Субъект Из ДанныеСубъекта Цикл
		ПредставленияСубьектовДовернности.Добавить(ПредставлениеСубъектаДоверенности(Субъект));
	КонецЦикла;
	Возврат ПредставленияСубьектовДовернности;
КонецФункции

// Возвращаемое значение:
//  Структура:
// * Доверители - Массив из Строка - Представление доверителя
// * Представители - Массив из Строка - Представление представителя
Функция НовыеПредставленияДоверителейПредставителей()
	Возврат Новый Структура("Доверители, Представители", Новый Массив, Новый Массив);
КонецФункции

#КонецОбласти

// Проверяет сертификат на принадлежность к доверителю МЧД
//
// Параметры:
//  ИННОрганизации - Строка
//  ОГРНОрганизации - Строка
//  СНИЛСДоверителя - Строка
//  Сертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//
// Возвращаемое значение:
//  Булево - Результат сравнения
//  
Функция ЭтоСертификатДоверителя(ИННОрганизации, ОГРНОрганизации, СНИЛСДоверителя, Сертификат)

	СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификатаПоСсылке(Сертификат);
	ИННПодписантаФЛ = СвойстваСубъектаСертификата.ИНН;
	ИННПодписантаЮЛ = СвойстваСубъектаСертификата.ИННЮЛ;
	ОГРНИП_Подписанта = СвойстваСубъектаСертификата.ОГРНИП;
	ОГРН_Подписанта = СвойстваСубъектаСертификата.ОГРН;
	СНИЛС_Сертификата = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" -", СвойстваСубъектаСертификата.СНИЛС, "");
	СНИЛС_МЧД = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" -", СНИЛСДоверителя, "");
	
	Если Не ЗначениеЗаполнено(ИННПодписантаЮЛ) Тогда
		ИННПодписантаЮЛ = Прав(СвойстваСубъектаСертификата.ИНН, 10);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СНИЛС_МЧД)
		И СНИЛС_МЧД = СНИЛС_Сертификата
		И (ИННПодписантаФЛ = ИННОрганизации 
			Или ИННПодписантаЮЛ = ИННОрганизации
			Или (ЗначениеЗаполнено(ОГРНИП_Подписанта) И ОГРНИП_Подписанта = ОГРНОрганизации)
			Или (ЗначениеЗаполнено(ОГРН_Подписанта) И ОГРН_Подписанта = ОГРНОрганизации)) Тогда
		
		ЭтоСертификатДоверителя = Истина;
	
	ИначеЕсли Не ЗначениеЗаполнено(СНИЛС_МЧД)
		И (ИННПодписантаФЛ = ИННОрганизации
			Или ИННПодписантаЮЛ = ИННОрганизации
			Или (ЗначениеЗаполнено(ОГРНИП_Подписанта) И ОГРНИП_Подписанта = ОГРНОрганизации)
			Или (ЗначениеЗаполнено(ОГРН_Подписанта) И ОГРН_Подписанта = ОГРНОрганизации)) Тогда
		
		ЭтоСертификатДоверителя = Истина;
		
	Иначе
		
		ЭтоСертификатДоверителя = Ложь;
		
	КонецЕсли;
	
	Возврат ЭтоСертификатДоверителя;	
	
КонецФункции

// Это черновик МЧД003.
// 
// Параметры:
//  МЧД - ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЧерновикМЧД003(МЧД)
	
	Если ТипЗнч(МЧД) <> Тип("СправочникСсылка.МЧД003") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Подписана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МЧД, "Подписана"); // Булево
	
	Возврат Не Подписана;
	
КонецФункции

// Возвращает дату отзыва доверенности по данным для загрузки МЧД
// 
// Параметры:
//  ДанныеДляЗагрузки - См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТокенДоступа - Строка - Токен для получения сведений из распределенного реестра
// 
// Возвращаемое значение:
//  Дата
Функция ДатаОтзываДоверенностиПоДаннымДляЗагрузкиМЧД(ДанныеДляЗагрузки, ТокенДоступа = "")

	ДатаОтзыва = Дата(1, 1, 1);
	
	Если ЗначениеЗаполнено(ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену) Тогда
		ДатаОтзыва = ЭлектроннаяПодпись.ДатаПодписания(ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену);
	Иначе
		ПараметрыДляЗапросаРодительскойДоверенности = ПараметрыДляЗапросаРодительскойДоверенности(ДанныеДляЗагрузки.ДанныеДоверенности);
		Если ЗначениеЗаполнено(ПараметрыДляЗапросаРодительскойДоверенности) Тогда
			ДатаОтзыва = ДатаОтзываДоверенности(ПараметрыДляЗапросаРодительскойДоверенности.НомерДоверенности,
				ПараметрыДляЗапросаРодительскойДоверенности.ИННДоверителя, ТокенДоступа);
		КонецЕсли;
	КонецЕсли;
		
	Возврат ДатаОтзыва;

КонецФункции

// Возвращает новый протокол проверки МЧД оператором.
// 
// Возвращаемое значение:
//  Структура:
// * ДоверенностьПроверенаОператором - Булево
// * ДоверенностьДействительна - Булево
// * ДоверенностьДействительнаОшибка - Строка
Функция НовыйПротоколПроверкиОператором()
	Протокол = Новый Структура;
	Протокол.Вставить("ДоверенностьПроверенаОператором", Ложь);
	Протокол.Вставить("ДоверенностьДействительна", Ложь);
	Протокол.Вставить("ДоверенностьДействительнаОшибка", "");
	Возврат Протокол;
КонецФункции

// Возвращает массив со строками полномочий доверенности
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов,
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Массив из См. НовыеПолномочияПредставителя
Функция ПолномочияДоверенностиБезОбработки(Доверенность) Экспорт
	
	ДанныеДоверенности = ДанныеДоверенности(Доверенность);
	
	Возврат ДанныеДоверенности.Полномочия;
	
КонецФункции

// Возвращает данные доверенности
//
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов,
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций,
//  			 - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Структура: См. НовыеДанныеМЧД()
Функция ДанныеДоверенности(Доверенность)
	
	ИмяФайла = "XMLфайлМЧД";
	Если ТипЗнч(Доверенность) = Тип("СправочникСсылка.МЧД003") Тогда
		ИмяФайла = "ФайлМЧД";
	КонецЕсли;
	
	XMLфайлМЧД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, ИмяФайла);
	Если XMLфайлМЧД = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДвоичныеДанныеДоверенности = XMLфайлМЧД.Получить();
	РезультатЧтения = ДанныеИзФайлаОбмена(ДвоичныеДанныеДоверенности);
	Если Не РезультатЧтения.Успех Тогда
		Возврат Новый Массив;
	КонецЕсли;
	ДанныеДоверенности = РезультатЧтения.ДанныеДоверенности;
	
	Возврат ДанныеДоверенности;
	
КонецФункции

// Возвращает массив со строками полномочий доверенности
// 
// Параметры:
//  ДанныеДоверенности - Неопределено - допустимо в случае если задан параметр "Доверенность" 
//  				   - см. НовыеДанныеМЧД
//  Доверенность - Неопределено - допустимо в случае если задан параметр "ДанныеДоверенности" 
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов,
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Массив из Строка
//  
Функция ПолномочияДоверенности(ДанныеДоверенности = Неопределено, Доверенность = Неопределено)
	
	Если ДанныеДоверенности = Неопределено И Доверенность <> Неопределено Тогда
		Полномочия = ПолномочияДоверенностиБезОбработки(Доверенность);
	Иначе
		Полномочия = ДанныеДоверенности.Полномочия;
	КонецЕсли;
	
	КодыПолномочий = Новый Массив;
	ТекстыПолномочий = Новый Массив;
	
	Для Каждого Полномочие Из Полномочия Цикл
		
		МассивПолей = Новый Массив;
		
		Для Каждого КлючИЗначение Из Полномочие Цикл
			
			Если КлючИЗначение.Ключ <> "Код" И НЕ ПустаяСтрока(КлючИЗначение.Значение) Тогда
				МассивПолей.Добавить(КлючИЗначение.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(Полномочие.Код) И Полномочие.Код <> "99" Тогда
			
			Если МассивПолей.Количество() = 0 Тогда
				КодыПолномочий.Добавить(Полномочие.Код);
			Иначе
				МассивПолей.Вставить(0, Полномочие.Код);
			КонецЕсли;
				
		КонецЕсли;
		
		Если МассивПолей.Количество() > 0 Тогда
			ТекстыПолномочий.Добавить(СтрСоединить(МассивПолей, "; "));
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиПолномочий = Новый Массив();
	
	Если КодыПолномочий.Количество() > 0 Тогда
		СтрокиПолномочий.Добавить(НСтр("ru = 'Коды полномочий:'") + " " + СтрСоединить(КодыПолномочий, ", "));
	КонецЕсли;
	
	Если ТекстыПолномочий.Количество() > 0 Тогда
		
		Если ТекстыПолномочий.Количество() = 1 Тогда
			СтрокиПолномочий.Добавить(ТекстыПолномочий[0]);
		Иначе
			Для Счетчик = 1 По ТекстыПолномочий.Количество() Цикл
				Индекс = Счетчик-1;
				СтрокаПолномочий = СтрШаблон("%1. %2", Счетчик, ТекстыПолномочий[Индекс]);
				СтрокиПолномочий.Добавить(СтрокаПолномочий);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокиПолномочий;
	
КонецФункции

// Читает из дополнительных свойств источника параметры записи в журнал МЧД
// 
// Параметры:
//  Источник - ОпределяемыйТип.ИсточникЗаписиЖурналаМЧД
// 
// Возвращаемое значение:
//  См. НовыеПараметрыЗаписиВЖурналМЧД
Функция ПолучитьПараметрыЗаписиВЖурналМЧД(Источник)
	ПараметрыЗаписи = НовыеПараметрыЗаписиВЖурналМЧД();
	Если Источник.ДополнительныеСвойства.Свойство("ПараметрыЗаписиВЖурналМЧД") Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписи, Источник.ДополнительныеСвойства.ПараметрыЗаписиВЖурналМЧД);
	КонецЕсли;
	Возврат ПараметрыЗаписи;
КонецФункции

// Таблица доверенностей.
// 
// Параметры:
//  Доверитель - см. НовыеРеквизитыОтбора
//  Представитель - см. НовыеРеквизитыОтбора
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаДоверенностей
Функция ТаблицаДоверенностейОрганизаций(Доверитель, Представитель)
	ВсеДоверенности = НоваяТаблицаДоверенностей();
	
	ДействительныеНаДату = ТекущаяДатаСеанса();
	
	Доверенност002 = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьДоверенностиПоОтбору(Доверитель, 
		Представитель, 
		ДействительныеНаДату);
	Доверености003 = Справочники.МЧД003.ПолучитьДоверенностиПоОтбору(Доверитель, Представитель, ДействительныеНаДату);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Доверенност002, ВсеДоверенности);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Доверености003, ВсеДоверенности);
	
	Возврат ВсеДоверенности;
КонецФункции

// Таблица доверенностей.
// 
// Параметры:
//  Доверитель - см. НовыеРеквизитыОтбора
//  Представитель - см. НовыеРеквизитыОтбора
//  ДействительныеНаДату - Дата
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. НоваяТаблицаДоверенностей
Функция ТаблицаДоверенностей(Доверитель, Представитель, ДействительныеНаДату)
	ВсеДоверенности = НоваяТаблицаДоверенностей();
	
	ДоверенностиОрганизаций = Справочники.МашиночитаемыеДоверенностиОрганизаций.ПолучитьДоверенностиПоОтбору(Доверитель, 
		Представитель, 
		ДействительныеНаДату);
	
	ДоверенностиКонтрагентов = Справочники.МашиночитаемыеДоверенностиКонтрагентов.ПолучитьДоверенностиПоОтбору(Доверитель, 
		Представитель, 
		ДействительныеНаДату);
	
	Доверенности003 = Справочники.МЧД003.ПолучитьДоверенностиПоОтбору(Доверитель, Представитель, ДействительныеНаДату);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДоверенностиОрганизаций, ВсеДоверенности);
	ОбщегоНазначенияБЭДКлиентСервер.ДополнитьТаблицуУникальнымиСтрокамиПоЗначениямКолонки(ДоверенностиКонтрагентов, 
		ВсеДоверенности, 
		"НомерДоверенности");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Доверенности003, ВсеДоверенности);
	
	Возврат ВсеДоверенности;
КонецФункции

// Параметры:
//  ТаблицаДоверенностей - См. НоваяТаблицаДоверенностей
//  КППДоверителя - Строка
Процедура УстановитьПриоритетПодбораДоверенностейПоКПП(ТаблицаДоверенностей, КППДоверителя)
	Для Каждого СтрокаДоверенности Из ТаблицаДоверенностей Цикл
		Если СтрокаДоверенности.КППДоверителя = КППДоверителя Тогда
			СтрокаДоверенности.ПриоритетПодбора = 1;
			
		ИначеЕсли КППСоответствуетГоловнойОрганизации(СтрокаДоверенности.КППДоверителя) Тогда
			СтрокаДоверенности.ПриоритетПодбора = 2;
			
		Иначе
			СтрокаДоверенности.ПриоритетПодбора = 3;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Параметры:
//  ТаблицаДоверенностей - См. НоваяТаблицаДоверенностей
//  КППДоверителя - Строка
Процедура СортироватьДоверенностиПоКПП(ТаблицаДоверенностей, КПП)
	УстановитьПриоритетПодбораДоверенностейПоКПП(ТаблицаДоверенностей, КПП);
	ТаблицаДоверенностей.Сортировать("ПриоритетПодбора ВОЗР, ДатаВыдачи УБЫВ");
КонецПроцедуры

// Возвращаемое значение:
//  Булево
Функция АвтоматическоеДовериеПолнымПолномочиямОтключено() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы.ОтключитьАвтоматическоеДовериеПолнымПолномочиям.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Булево
Функция ЗаполнениеТекстовыхПолномочийПоУмолчаниюОтключено() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Константы.ОтключитьЗаполнениеТекстовыхПолномочийПоУмолчанию.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Сертификат - СертификатКриптографии
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоСертификатВыданныйЦентральнымБанком(Сертификат)
	Если Сертификат = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;

	СвойстваСубъектаСертификата = КриптографияБЭД.СвойстваСубъектаСертификата(Сертификат);
	СвойстваИздателяСертификата = КриптографияБЭД.СвойстваИздателяСертификата(Сертификат);
	
	Возврат КриптографияБЭД.ЭтоСертификатВыданныйЦентральнымБанком(СвойстваСубъектаСертификата, СвойстваИздателяСертификата);
	
КонецФункции

// Параметры:
//  ЧастичныеДанныеДоверенности - см. ПолучитьЧастичныеДанныеДоверенностиНаСервереМЧД
//  ТекущийСтатусВДоверенности - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  ТекущаяДатаОтзыва - Дата
// 
// Возвращаемое значение:
//  Структура - Статус доверенности:
// * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
// * ДатаОтзыва - Дата
Функция СтатусДоверенности(ЧастичныеДанныеДоверенности, ТекущийСтатусВДоверенности, ТекущаяДатаОтзыва)
	
	Результат = НовыйСтатусВРеестреФНС();
	
	Если ЧастичныеДанныеДоверенности.СтатусДоверенности = "CREATED" 
		И ТекущийСтатусВДоверенности <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила Тогда

		Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила;

	ИначеЕсли ЧастичныеДанныеДоверенности.СтатусДоверенности = "ACTIVE" 
		И ТекущийСтатусВДоверенности <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано
		И ТекущийСтатусВДоверенности <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОтправленоЗаявлениеНаОтзыв
		И ТекущийСтатусВДоверенности <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаОтзыва Тогда

		Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано;

	ИначеЕсли ЧастичныеДанныеДоверенности.СтатусДоверенности = "EXPIRED" 
		И ТекущийСтатусВДоверенности <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия Тогда

		Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия;

	ИначеЕсли ЧастичныеДанныеДоверенности.СтатусДоверенности = "DECLINED"
		Или ЧастичныеДанныеДоверенности.СтатусДоверенности = "REVOKED" Тогда
		
		ДатаОтзываИзРеестра = ЧастичныеДанныеДоверенности.ДатаОбновленияСтатуса;
		
		Если ТекущийСтатусВДоверенности <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано
			Или ТекущаяДатаОтзыва <> ДатаОтзываИзРеестра Тогда
				
			Результат.ДатаОтзыва = ДатаОтзываИзРеестра;
			Результат.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЧастичныеДанныеДоверенности.ДатаОбновленияСтатуса) Тогда
		Результат.ДатаПолученияСтатуса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает текстовое описание ошибок от реестра.
// 
// Параметры:
//  Статус - Число
//  ТекстОшибки - Строка
//  
// Возвращаемое значение:
//  Строка
//
Функция ОписаниеОшибкиОтРеестра(Статус, ТекстОшибки)

	ОписаниеОшибки = "";
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ОписаниеОшибки = ТекстОшибки;
		
		Если Статус = 404 Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось выполнить операцию на сервере МЧД распределенного реестра: доверенность не найдена'");
			Возврат ОписаниеОшибки;
		КонецЕсли;
		
		Если СтрЧислоВхождений(ОписаниеОшибки, "В данный момент система не поддерживает работу") Тогда // АПК:1297 не выводится пользователю
			ОписаниеОшибки = ОписаниеОшибки + Символы.ПС + НСтр(
				"ru = 'На данный момент ФНС не поддерживает регистрацию такого типа доверенности'");
			Возврат ОписаниеОшибки;
		КонецЕсли;
		
		Если СтрЧислоВхождений(ОписаниеОшибки, "ТипПред, равным '1'") Тогда // АПК:1297 не выводится пользователю
			ОписаниеОшибки = ОписаниеОшибки + НСтр("ru = ': Уберите из представителей юридических лиц'");
			Возврат ОписаниеОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеОшибки;
	
КонецФункции

#КонецОбласти
