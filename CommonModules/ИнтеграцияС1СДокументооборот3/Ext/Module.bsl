////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3: сервер, внешнее соединение
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область АсинхронныеОперации

// Получает HTML предпросмотр объекта из Документооборота в фоновом задании.
//
// Параметры:
//   Параметры - Структура:
//     * ИнтеграцияС1СДокументооборотWSОпределения - ХранилищеЗначения
//     * ИнтеграцияС1СДокументооборотВерсияСервиса - Строка
//     * ИнтеграцияС1СДокументооборотИмяПользователя - Строка
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияJWT - Булево
//     * ИнтеграцияС1СДокументооборотИспользуетсяАутентификацияОС - Булево
//     * ИнтеграцияС1СДокументооборотМестоположениеПрокси - Строка
//     * ИнтеграцияС1СДокументооборотПароль - Строка
//     * ИнтеграцияС1СДокументооборотПарольИзвестен - Булево
//     * ID - Строка
//     * Тип - Строка
//     * ИгнорироватьМаксРазмер - Булево - позволяет игнорировать настройку Документооборота
//         "Предельный размер файла для предпросмотра".
//     * ОбъектДляПолученияНДПС - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   АдресХранилища - Строка - адрес хранилища, куда будет помещен результат запроса.
//
Процедура ПолучитьHTMLПредпросмотрОбъектаВФоне(Параметры, АдресХранилища) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьПроксиВФоне(Параметры);
	
	Попытка
		Результат = HTMLПредпросмотрОбъекта(
			Прокси,
			Параметры.ID,
			Параметры.Тип,
			Параметры.ИгнорироватьМаксРазмер,
			Параметры.ОбъектДляПолученияНДПС);
	Исключение
		ПоместитьВоВременноеХранилище(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВерсияСервиса(),
			АдресХранилища);
		ВызватьИсключение;
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ВебСервисБИД

#Область ОбработкаУниверсальногоСообщения

// Возвращает результат обработки универсальных сообщений.
//
// Параметры:
//   Сообщение - ОбъектXDTO - потомок DMILRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - потомок DMILResponse.
//
Функция ОбработатьУниверсальноеСообщение(Сообщение) Экспорт
	
	Попытка
		
		НачалоЗамераВремени = ТекущаяДатаСеанса();
		
		ПараметрыСеанса.ИнтеграцияС1СДокументооборотВерсияСервиса = ВерсияДОПоСообщению(Сообщение);
		
		Результат = Неопределено;
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьПереопределяемый.ПриОбработкеУниверсальногоСообщения(
			Сообщение,
			Результат);
		Если Результат = Неопределено Тогда
			
			Если ПроверитьТипБИД(Сообщение, "DMILGetMetadataRequest") Тогда
				Результат = СтруктураМетаданныхИнтегрированнойСистемы(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILCheckExpressionOnBuiltInLanguageRequest") Тогда
				Результат = ПроверитьВыражениеНаВстроенномЯзыке(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILRelatedIntegrationRulesExistenceRequest") Тогда
				Результат = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.СвязанныеПравилаИнтеграцииСуществуют(
					Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILCreateRelatedIntegrationRuleExistenceRequest") Тогда
				Результат = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.СоздатьСвязанноеПравилоИнтеграции(
					Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILGetExpressionListRequest") Тогда
				Результат = СписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеДО(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILGetPrintedFormsRequest") Тогда
				Результат = СписокПечатныхФормОбъектовИС(Сообщение);
				
			ИначеЕсли ПроверитьТипБИД(Сообщение, "DMILPutChangesRequest") Тогда
				Возврат ИнтеграцияС1СДокументооборот3Обмен.ЗаписатьИзмененияОбъектов(Сообщение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Результат <> Неопределено Тогда
			ВремяВыполнения = ТекущаяДатаСеанса() - НачалоЗамераВремени;
			Если ВремяВыполнения > 15 Тогда
				ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат);
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Неизвестное сообщение'"),
			Строка(Сообщение.Тип()));
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при обработке сообщения'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

// Возвращает URI пространства имен веб-сервиса БИД.
//
// Возвращаемое значение:
//   Строка
//
Функция URIПространстваИменВебСервисаБИД() Экспорт
	
	Возврат "http://www.1c.ru/dmil";
	
КонецФункции

// Создает объект DMILError.
//
// Параметры:
//   Предмет - Строка - тема сообщения об ошибке.
//   Описание - Строка - текстовое описание ошибки, а также отладочная информация.
//
// Возвращаемое значение:
//   ОбъектXDTO
//
Функция ОписаниеОшибкиXDTO(Предмет = "", Описание = "") Экспорт
	
	Ошибка = СоздатьОбъектБИД("DMILError");
	Ошибка.subject = Предмет;
	Ошибка.description = Описание;
	
	Возврат Ошибка;
	
КонецФункции

// Заполняет XDTO объект, описывающий выражение на встроенном языке,
// которое требуется передать и выполнить на стороне ДО.
//
// Параметры:
//   ВыражениеПравилаXDTO - ОбъектXDTO - объект XDTO, описывающий выражение на встроенном языке.
//   ВыражениеДляВыполненияНаСторонеДО - СтрокаТаблицыЗначений - строка табличной части правила интеграции.
//     см. Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ВыраженияДляВыполненияНаСторонеДО
//
Процедура ПодготовитьВычисляемоеВыражениеКПередачеНаСторонуДО(ВыражениеПравилаXDTO,
		ВыражениеДляВыполненияНаСторонеДО) Экспорт
	
	ВыражениеПравилаXDTO.id = ВыражениеДляВыполненияНаСторонеДО.id;
	ВыражениеПравилаXDTO.expressionOnBuiltInLanguage = ВыражениеДляВыполненияНаСторонеДО.ВычисляемоеВыражение;
	ВыражениеПравилаXDTO.tabularSectionName = ВыражениеДляВыполненияНаСторонеДО.ИмяТаблицыИсточника;
	
	Если ВыражениеДляВыполненияНаСторонеДО.ЭтоТаблица = Истина Тогда
		ВыражениеПравилаXDTO.type = "TabularSection";
		
	ИначеЕсли ВыражениеДляВыполненияНаСторонеДО.ЭтоТаблица = Ложь
			И ВыражениеДляВыполненияНаСторонеДО.Таблица <> "" Тогда
		ВыражениеПравилаXDTO.type = "TabularSectionAttribute";
		
	Иначе
		ВыражениеПравилаXDTO.type = "Attribute";
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание ошибки.
//
// Параметры:
//   Инфо - ИнформацияОбОшибке
//
// Возвращаемое значение:
//   Строка - текст детального описания ошибки.
//
Функция ПолучитьОписаниеОшибки(Инфо) Экспорт
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	ТекстСообщения = "";
	Для Каждого Сообщение Из Сообщения Цикл
		ТекстСообщения = ТекстСообщения + Сообщение.Текст + Символы.ПС;
	КонецЦикла;
	
	ПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(Инфо);
	Если Не ПустаяСтрока(Инфо.Описание) И ПустаяСтрока(ПредставлениеОшибки) Тогда
		ПредставлениеОшибки = Инфо.Описание;
	КонецЕсли;
	
	Возврат ПредставлениеОшибки + ?(ПредставлениеОшибки + ТекстСообщения = "", "", Символы.ПС) + ТекстСообщения;
	
КонецФункции

// Возвращает ссылку на объект ИС по ObjectID
//
// Параметры:
//   ObjectID - ОбъектXDTO - объект XDTO типа DMILObjectID.
//
// Возвращаемое значение:
//   ЛюбаяСсылка - ссылка на объект ИС.
//
Функция ПолучитьСсылкуПоObjectID(ObjectID) Экспорт
	
	Ссылка = Неопределено;
	
	Если ObjectID <> Неопределено И ObjectID.id <> "" И ObjectID.type <> "" Тогда
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ObjectID.type);
		Ссылка = Менеджер.ПустаяСсылка();
		
		Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ObjectID.id) Тогда
			Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ObjectID.id));
			
		Иначе // Возможно, это имя предопределенного элемента или перечисление.
			Попытка
				Ссылка = Менеджер[ObjectID.id];
			Исключение
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Нет значения ""%1"" среди значений типа ""%2""'"),
					ObjectID.id,
					ObjectID.type);
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

// Проверяет тип объекта XDTO.
//
// Параметры:
//   ОбъектXDTO - ОбъектXDTO - проверяемый объект.
//   Тип - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево - Истина, если объект является объектом указанного типа.
//
Функция ПроверитьТипБИД(ОбъектXDTO, Тип) Экспорт
	
	Возврат (ТипЗнч(ОбъектXDTO) = Тип("ОбъектXDTO"))
		И (ОбъектXDTO.Тип() = ФабрикаXDTO.Тип(URIПространстваИменВебСервисаБИД(), Тип));
	
КонецФункции

// Создает XDTO объект указанного типа из пространства имен веб-сервиса БИД.
//
// Параметры:
//   ТипОбъекта - Строка - имя типа XDTO
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект указанного типа
//
Функция СоздатьОбъектБИД(ТипОбъекта) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(URIПространстваИменВебСервисаБИД(), ТипОбъекта));
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

// Возвращает HTML предпросмотр объекта.
// Получение НДПС документа совмещено с получением предпросмотра для оптимизации работы списка задач.
// Получим НДПС в одном пакетном запросе вместе с предпросмотром приложения задачи, за один вызов сервиса ДО.
// Заранее, при получении списка задач, получить НДПС всех предметов нельзя, т.к. это
// существенно замедлит обновление списка.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор объекта XDTO.
//   Тип - Строка - тип объекта XDTO.
//   ИгнорироватьМаксРазмер - Булево - позволяет игнорировать настройку Документооборота
//     "Предельный размер файла для предпросмотра".
//   ОбъектДляПолученияНДПС - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   Структура - структура предпросмотра объекта:
//     * ПредставлениеHTML - Строка - HTML предпросмотр объекта.
//     * ПредпросмотрУрезан - Булево - предпросмотр объекта урезан.
//
Функция HTMLПредпросмотрОбъекта(Прокси, ID, Тип, ИгнорироватьМаксРазмер = Ложь,
		ОбъектДляПолученияНДПС = Неопределено) Экспорт
	
	Результат = Новый Структура("ПредставлениеHTML, ПредпросмотрУрезан", "", Ложь);
	
	ЗапросыПакета = Новый Массив;
	
	ЗапросыПакета.Добавить(HTMLПредпросмотрОбъектаЗапрос(Прокси, ID, Тип, ИгнорироватьМаксРазмер));
	
	Если ОбъектДляПолученияНДПС <> Неопределено Тогда
		ЗапросыПакета.Добавить(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПолучитьОбъектыЗапрос(
				Прокси,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектДляПолученияНДПС),
				"enabledProperties"));
	КонецЕсли;
	
	ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
		Прокси,
		ЗапросыПакета);
	
	ОтветПредпросмотр = ОтветНаЗапросыПакета.responses[0];
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ОтветПредпросмотр, "DMError") Тогда
		ТекстОшибки = СокрЛП(ОтветПредпросмотр.description);
		
		// Запишем в ЖР полный текст ошибки.
		ЗаписьЖурналаРегистрации(
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(ОтветПредпросмотр.subject),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "{", "<br>{");
		
		НастройкиДО = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьНастройки();
		
		Результат.ПредставлениеHTML = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.СообщениеВПредпросмотр(
			СтрШаблон(
				"%1:<br>
				|%2",
				ОтветПредпросмотр.subject,
				ТекстОшибки),
			НастройкиДО.ЗаголовокСообщенияВОбластиПредпросмотра);
	Иначе
		ПредставлениеXDTO = ОтветПредпросмотр.ObjectsHTMLPresentations[0];
		Результат.ПредставлениеHTML = ПредставлениеXDTO.htmlView;
		Результат.ПредпросмотрУрезан = ПредставлениеXDTO.truncated;
	КонецЕсли;
	
	Если ОтветНаЗапросыПакета.responses.Количество() = 2 Тогда
		ДанныеДокумента = ОтветНаЗапросыПакета.responses[1];
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, ДанныеДокумента);
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьНДПС(Результат);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьНДПСизОбъектаXDTO(
			Результат,
			ДанныеДокумента.objects[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает запрос к 1С:Документообороту на получение HTML предпросмотра объекта.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор объекта XDTO.
//   Тип - Строка - тип объекта XDTO.
//   ИгнорироватьМаксРазмер - Булево - позволяет игнорировать настройку Документооборота
//     "Предельный размер файла для предпросмотра".
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetObjectsHTMLPresentationsRequest.
//
Функция HTMLПредпросмотрОбъектаЗапрос(Прокси, ID, Тип, ИгнорироватьМаксРазмер = Ложь) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMGetObjectsHTMLPresentationsRequest");
	ОбъектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObject");
	ОбъектXDTO.name = "";
	ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ID,
		Тип);
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(Запрос, "IgnoreMaxSize") Тогда
		Запрос.IgnoreMaxSize = ИгнорироватьМаксРазмер;
	КонецЕсли;
	СписокОбъектов = Запрос.Objects; // СписокXDTO
	СписокОбъектов.Добавить(ОбъектXDTO);
	
	Возврат Запрос;
	
КонецФункции

// Формирует универсальную структуру входящих данных, предназначенную для загрузки объектов в 1С:Документооборот.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СсылкаНаОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   СписокВыражений - Массив из Строка - список выражений на встроенном языке, которые требуется выполнить на
//     стороне ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMIncomingData.
//
Функция ВходящиеДанныеОбъектаИС(Прокси, СсылкаНаОбъектИС, СписокВыражений) Экспорт
	
	ОбъектИС = СсылкаНаОбъектИС.ПолучитьОбъект();
	
	ОбъектМетаданных = ОбъектИС.Метаданные();
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектМетаданныхПоддерживается(ОбъектМетаданных) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Объект %1 (%2) не поддерживается бесшовной интеграцией. Его нельзя отправить в 1С:Документооборот.'"),
			СсылкаНаОбъектИС,
			ОбъектМетаданных.ПолноеИмя());
	КонецЕсли;
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMIncomingData");
	Реквизиты = Результат.attributes; // СписокXDTO
	ТабличныеЧасти = Результат.tabularSections; // СписокXDTO
	
	// Стандартные реквизиты
	Реквизиты.Добавить(
		ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, "Представление", Строка(СсылкаНаОбъектИС)));
	
	ЗаполнитьРеквизитыИзМетаданных(Прокси, Реквизиты, ОбъектМетаданных.СтандартныеРеквизиты, ОбъектИС, Истина);
	
	// Реквизиты
	ЗаполнитьРеквизитыИзМетаданных(Прокси, Реквизиты, ОбъектМетаданных.Реквизиты, ОбъектИС);
	
	// Общие реквизиты
	ИспользованиеРеквизитаИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
	ИспользованиеРеквизитаАвто = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
	АвтоИспользованиеРеквизитаИспользовать = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
	РазделениеДанныхРеквизитаНеИспользовать = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.НеИспользовать;
	
	ВсеОбщиеРеквизиты = Новый Массив;
	Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = РазделениеДанныхРеквизитаНеИспользовать Тогда
			ВсеОбщиеРеквизиты.Добавить(ОбщийРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	ОбщиеРеквизитыОбъекта = Новый Массив;
	Для Каждого ОбщийРеквизит Из ВсеОбщиеРеквизиты Цикл
		ЭлементСостава = ОбщийРеквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава = Неопределено Тогда
			// Общего реквизита нет в документе.
			Продолжить;
		КонецЕсли;
		Если ЭлементСостава.Использование = ИспользованиеРеквизитаИспользовать
				Или (ЭлементСостава.Использование = ИспользованиеРеквизитаАвто
					И ОбщийРеквизит.АвтоИспользование = АвтоИспользованиеРеквизитаИспользовать) Тогда
			ОбщиеРеквизитыОбъекта.Добавить(ОбщийРеквизит);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьРеквизитыИзМетаданных(Прокси, Реквизиты, ОбщиеРеквизитыОбъекта, ОбъектИС);
	
	// Табличные части
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты" Тогда
			Продолжить;
		КонецЕсли;
		
		Колонки = Новый Массив;
		Для Каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			Колонки.Добавить(Реквизит);
		КонецЦикла;
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			Колонки.Добавить(Реквизит);
		КонецЦикла;
		
		Если Колонки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТабличныеЧасти.Добавить(
			ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
				Прокси,
				ТабличнаяЧасть.Имя,
				ОбъектИС[ТабличнаяЧасть.Имя],
				Колонки));
		
	КонецЦикла;
	
	// Данные из выражений на встроенном языке
	ЗаполнитьДанныеИзСпискаВыражений(Прокси, ОбъектИС, Реквизиты, ТабличныеЧасти, СписокВыражений);
	
	// Дополнительные реквизиты
	Если УправлениеСвойствами.ИспользоватьДопРеквизиты(СсылкаНаОбъектИС) Тогда
		ЗаполнитьРеквизитыИзМетаданных(
			Прокси,
			Реквизиты,
			УправлениеСвойствами.СвойстваОбъекта(СсылкаНаОбъектИС, Истина, Ложь),
			ОбъектИС,,
			Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные флага.
//
// Параметры:
//   Флаг - Строка - имя флага, принимает значения перечисления DMObjectFlag (http://www.1c.ru/dm).
//
// Возвращаемое значение:
//   Структура:
//     * ИндексКартинки - Число - индекс картинки в коллекции КоллекцияФлаговПисем.
//     * Картинка - Картинка - картинка флага.
//     * Представление - Строка - представление флага.
//
Функция ДанныеФлага(Флаг) Экспорт
	
	ДанныеФлага = Новый Структура;
	ДанныеФлага.Вставить("ИндексКартинки", 0);
	ДанныеФлага.Вставить("Картинка", БиблиотекаКартинок.ПустойФлаг);
	ДанныеФлага.Вставить("Представление", НСтр("ru = 'Пустой флаг'"));
	
	Если НРег(Флаг) = "purple" Тогда
		ДанныеФлага.ИндексКартинки = 6;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ЛиловыйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Лиловый флаг'");
		
	ИначеЕсли НРег(Флаг) = "orange" Тогда
		ДанныеФлага.ИндексКартинки = 5;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ОранжевыйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Оранжевый флаг'");
		
	ИначеЕсли НРег(Флаг) = "green" Тогда
		ДанныеФлага.ИндексКартинки = 4;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ЗеленыйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Зеленый флаг'");
		
	ИначеЕсли НРег(Флаг) = "yellow" Тогда
		ДанныеФлага.ИндексКартинки = 3;
		ДанныеФлага.Картинка = БиблиотекаКартинок.ЖелтыйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Желтый флаг'");
		
	ИначеЕсли НРег(Флаг) = "blue" Тогда
		ДанныеФлага.ИндексКартинки = 2;
		ДанныеФлага.Картинка = БиблиотекаКартинок.СинийФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Синий флаг'");
		
	ИначеЕсли НРег(Флаг) = "red" Тогда
		ДанныеФлага.ИндексКартинки = 1;
		ДанныеФлага.Картинка = БиблиотекаКартинок.КрасныйФлаг;
		ДанныеФлага.Представление = НСтр("ru = 'Красный флаг'");
		
	КонецЕсли;
	
	Возврат ДанныеФлага;
	
КонецФункции

// Проверяет поддерживает ли веб-сервис Документооборота работу с файлами.
//
// Возвращаемое значение:
//   Булево
//
Функция ДоступенФункционалФайлов() Экспорт
	
	Возврат ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.9.18");
	
КонецФункции

// Возвращает информацию, включена ли интеграция с 1С:Документооборотом редакции 3.
//
// Возвращаемое значение:
//   Булево
//
Функция ИспользоватьИнтеграцию() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьИнтеграциюС1СДокументооборот3");
	
КонецФункции

// Возвращает копию объекта XDTO.
//
// Параметры:
//   Источник - ОбъектXDTO - от куда копировать.
//   ПроксиДО - WSПрокси - объект для подключения к web-сервисам Документооборота. Если указан - копируется объект
//     DMService, если не указан - копируется объект DMILService.
//
// Возвращаемое значение:
//   ОбъектXDTO - копия объекта-источника.
//
Функция КопияОбъектаXDTO(Источник, ПроксиДО = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	СкопироватьОбъектXDTO(Результат, Источник, ПроксиДО);
	
	Возврат Результат;
	
КонецФункции

// Обновляет представление быстрого поиска. Возвращает представление фильтров.
//
// Параметры:
//   БыстрыйПоиск - ДанныеФормыКоллекция - таблица "Быстрый поиск" на форме списка задач.
//   КнопкаСброситьОтбор - КнопкаФормы - кнопка "Сбросить отбор".
//
// Возвращаемое значение:
//   Строка - представление фильтров
//
Функция ОбновитьПредставлениеБыстрогоПоиска(БыстрыйПоиск, КнопкаСброситьОтбор) Экспорт
	
	ЕстьБыстрыйПоиск = Ложь;
	ПредставлениеФильтров = Новый ФорматированнаяСтрока("");
	
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		Строка.ПредставлениеЗначения = ПредставлениеЗначения(Строка.Значение);
		
		Если ЗначениеЗаполнено(Строка.Значение) И Не Строка.Фиксированный Тогда
			
			ЕстьБыстрыйПоиск = Истина;
			
			Если Строка(ПредставлениеФильтров) <> "" Тогда
				ПредставлениеФильтров = Новый ФорматированнаяСтрока(ПредставлениеФильтров, ", ");
			КонецЕсли;
			
			ПредставлениеФильтров = Новый ФорматированнаяСтрока(
				ПредставлениеФильтров,
				Новый ФорматированнаяСтрока(Строка.ПредставлениеПараметра,, ЦветаСтиля.ТекстИнформационнойНадписи),
				Новый ФорматированнаяСтрока(" " + Строка.ПредставлениеЗначения));
			
		КонецЕсли;
		
	КонецЦикла;
	
	КнопкаСброситьОтбор.Видимость = ЕстьБыстрыйПоиск;
	
	Возврат ПредставлениеФильтров;
	
КонецФункции

// Возвращает описание веб-сервиса 1С:Документооборота.
//
// Возвращаемое значение:
//   Строка
//
Функция ОписаниеВебСервисов() Экспорт
	
	Макет = Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ПолучитьМакет("ОписаниеВебСервисов");
	
	Возврат Макет.ПолучитьТекст();
	
КонецФункции

// Возвращает основного сотрудника текущего пользователя 1С:Документооборота.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMEmployee.
//   Неопределено
//
Функция ОсновнойСотрудникТекущегоПользователя() Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	
	Если ПараметрыСеанса.ИнтеграцияС1СДокументооборотТекущийПользователь = "" Тогда
		
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ТекущийПользовательДокументооборотаЗапрос(Прокси);
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		
	Иначе
		
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
			Прокси,
			ПараметрыСеанса.ИнтеграцияС1СДокументооборотТекущийПользователь);
		
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Неопределено;
	Иначе
		СотрудникиПользователя = Ответ.employees; // СписокXDTO
		Для Каждого Сотрудник Из СотрудникиПользователя Цикл
			Если Сотрудник.mainEmployee = Истина Тогда
				Возврат Сотрудник;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

// Возвращает список выражений на встроенном языке, которые требуется выполнить на стороне интегрированной системы, а
// также список печатных форм, которые требуется сформировать на стороне интегрированной системы, для последующей
// передачи результатов на сторону 1С:Документооборот.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, для которых требуется найти соответствующие правила.
//   СоответствиеПравилЗагрузкиВДООбъектамИС - Соответствие из КлючИЗначение - соответствующие правила загрузки в ДО:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - ОбъектXDTO - объект XDTO типа DMDataLoadingRule.
//                - Неопределено - если подходящее правило загрузки не было найдено.
//   ТребуетсяСписокВыражений - Булево - требуется получение списка выражений на встроенном языке.
//   ТребуютсяПечатныеФормы - Булево - требуется получение списка и типа файлов печатных форм.
//
// Возвращаемое значение:
//   Структура:
//     * СоответствиеСпискаВыраженийОбъектамИС - Соответствие из КлючИЗначение:
//       ** Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//       ** Значение - Массив из Строка - список выражений на встроенном языке.
//     * СоответствиеПечатныхФормОбъектамИС - Соответствие из КлючИЗначение:
//       ** Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//       ** Значение - СписокXDTO - таблица печатных форм к передаче в ДО.
//     * ТипыФайловПечатныхФорм - Соответствие из КлючИЗначение:
//       ** Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//       ** Значение - Строка - тип файлов сохранения печатных форм.
//
Функция ПредварительныеДанныеДляВыгрузкиВДО(Прокси, СписокОбъектовИС, СоответствиеПравилЗагрузкиВДООбъектамИС,
		ТребуетсяСписокВыражений = Истина, ТребуютсяПечатныеФормы = Истина) Экспорт
	
	Данные = Новый Структура();
	Если ТребуетсяСписокВыражений Тогда
		Данные.Вставить("СоответствиеСпискаВыраженийОбъектамИС", Новый Соответствие);
	КонецЕсли;
	Если ТребуютсяПечатныеФормы Тогда
		Данные.Вставить("СоответствиеПечатныхФормОбъектамИС", Новый Соответствие);
		Данные.Вставить("ТипыФайловПечатныхФорм", Новый Соответствие);
	КонецЕсли;
	
	Если СписокОбъектовИС.Количество() = 0 Или (Не ТребуетсяСписокВыражений И Не ТребуютсяПечатныеФормы) Тогда
		Возврат Данные;
	КонецЕсли;
	
	Если ТребуетсяСписокВыражений Тогда
		ЗапросСпискаВыражений = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMGetExpressionListRequest");
		ПравилаДляСпискаВыражений = ЗапросСпискаВыражений.objects; // СписокXDTO
	КонецЕсли;
	Если ТребуютсяПечатныеФормы Тогда
		ЗапросПечатныхФорм = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMGetPrintedFormListRequest");
		ПравилаДляПечатныхФорм = ЗапросПечатныхФорм.objects; // СписокXDTO
	КонецЕсли;
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		Если ПравилоЗагрузкиВДО = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТребуетсяСписокВыражений Тогда
			ПравилаДляСпискаВыражений.Добавить(КопияОбъектаXDTO(ПравилоЗагрузкиВДО, Прокси));
		КонецЕсли;
		Если ТребуютсяПечатныеФормы Тогда
			ПравилаДляПечатныхФорм.Добавить(КопияОбъектаXDTO(ПравилоЗагрузкиВДО, Прокси));
		КонецЕсли;
	КонецЦикла;
	
	МассивВсехПечатныхФорм = Новый Массив;
	МассивВсехВыражений = Новый Массив;
	
	ЗапросыПакета = Новый Массив;
	
	Если ТребуетсяСписокВыражений И ПравилаДляСпискаВыражений.Количество() > 0 Тогда
		ЗапросыПакета.Добавить(ЗапросСпискаВыражений);
	КонецЕсли;
	Если ТребуютсяПечатныеФормы И ПравилаДляПечатныхФорм.Количество() > 0 Тогда
		ЗапросыПакета.Добавить(ЗапросПечатныхФорм);
	КонецЕсли;
	
	Если ЗапросыПакета.Количество() > 0 Тогда
		
		ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
			Прокси,
			ЗапросыПакета,
			Истина);
		
		Для Каждого Ответ Из ОтветНаЗапросыПакета.responses Цикл
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
					Прокси, Ответ, "DMGetExpressionListResponse") Тогда
				МассивВсехВыражений = Ответ.objectsExpressionRows;
				
			ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
					Прокси, Ответ, "DMGetPrintedFormListResponse") Тогда
				МассивВсехПечатныхФорм = Ответ.objectsPrintedForms;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		СписокВыражений = Новый Массив;
		СписокПечатныхФорм = Новый Массив;
		ТипФайловПечатныхФорм = "";
		
		Если ПравилоЗагрузкиВДО <> Неопределено Тогда
			Если ТребуетсяСписокВыражений Тогда
				Для Каждого Элемент Из МассивВсехВыражений Цикл
					Если Элемент.object.id = ПравилоЗагрузкиВДО.id Тогда
						СписокВыражений = Элемент.expressionRows;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТребуютсяПечатныеФормы Тогда
				Для Каждого Элемент Из МассивВсехПечатныхФорм Цикл
					Если Элемент.object.id = ПравилоЗагрузкиВДО.id Тогда
						СписокПечатныхФорм = Элемент.printedForms;
						ТипФайловПечатныхФорм = Элемент.spreadsheetDocumentFileType;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТребуетсяСписокВыражений Тогда
			Данные.СоответствиеСпискаВыраженийОбъектамИС.Вставить(ОбъектИС, СписокВыражений);
		КонецЕсли;
		Если ТребуютсяПечатныеФормы Тогда
			Данные.СоответствиеПечатныхФормОбъектамИС.Вставить(ОбъектИС, СписокПечатныхФорм);
			Данные.ТипыФайловПечатныхФорм.Вставить(ОбъектИС, ТипФайловПечатныхФорм);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

// Формирует универсальную таблицу присоединяемых печатных форм для последующего создания.
//
// Параметры:
//   ПечатныеФормы - Массив из ОбъектXDTO - список объектов XDTO типа DMPrintedForm.
//
// Возвращаемое значение:
//   см. ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПрисоединяемыеПечатныеФормы
//
Функция ПрисоединяемыеПечатныеФормы(ПечатныеФормы) Экспорт
	
	ПрисоединяемыеПечатныеФормы = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПрисоединяемыеПечатныеФормы();
	Для Каждого Строка Из ПечатныеФормы Цикл
		НоваяСтрока = ПрисоединяемыеПечатныеФормы.Добавить();
		НоваяСтрока.ИмяКоманды = Строка.commandName;
		НоваяСтрока.МенеджерПечати = Строка.printManager;
		НоваяСтрока.Обновлять = Строка.update;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Строка, "role") Тогда
			НоваяСтрока.РольФайлаID = Строка.role.objectID.id;
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Строка, "additionalParameters") Тогда
			НоваяСтрока.ДополнительныеПараметры = Строка.additionalParameters;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПрисоединяемыеПечатныеФормы;
	
КонецФункции

// Добавляет команды Документооборота на форму объекта при создании на сервере.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если Не ИспользоватьИнтеграцию() Тогда
		Возврат;
	КонецЕсли;
	
	// Переместим команды создания на основании вниз.
	Если Форма.Элементы.Найти("ФормаСоздатьНаОсновании") <> Неопределено Тогда
		Если Форма.Элементы.Найти("ФормаОбщаяКомандаИнтеграцияС1СДокументооборотНачатьОбработку")
				<> Неопределено Тогда
			Форма.Элементы.Переместить(
				Форма.Элементы.ФормаОбщаяКомандаИнтеграцияС1СДокументооборотНачатьОбработку,
				Форма.Элементы.ФормаСоздатьНаОсновании);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает результат действия над задачей или с обработкой.
//
// Параметры:
//   РезультатДействияСтрока - Строка - результат действия, преобразованный в строку.
//   ДанныеДляОбновления - ОбъектXDTO - неявно возвращаемое значение, в которое будут переданы данные,
//     необходимые для обновления формы.
//
// Возвращаемое значение:
//   Структура:
//     * Успешно - Булево
//     * ТекстПредупреждения - Строка
//     * ТребуемоеИнтерактивноеДействие - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ТребуемоеИнтерактивноеДействие
//
Функция РезультатВыполненияКомандыПоОбъекту(РезультатДействияСтрока, ДанныеДляОбновления) Экспорт
	
	Результат = Новый Структура("Успешно, ТекстПредупреждения, ТребуемоеИнтерактивноеДействие",
		Истина, "", ИнтеграцияС1СДокументооборот3КлиентСервер.ТребуемоеИнтерактивноеДействие());
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	ОтветНаЗапросыПакета = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
		Прокси,
		РезультатДействияСтрока);
	
	РезультатВыполнения = ОтветНаЗапросыПакета.responses[0];
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, РезультатВыполнения, "DMError") Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстПредупреждения = СокрЛП(РезультатВыполнения.description);
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			РезультатВыполнения, "requiredInteractiveAction") Тогда
		Результат.Успешно = Ложь;
		ЗаполнитьИнтерактивноеДействие(
			Прокси,
			Результат.ТребуемоеИнтерактивноеДействие,
			РезультатВыполнения.requiredInteractiveAction);
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
				РезультатВыполнения, "interactiveActionResultCache") Тогда
			Результат.ТребуемоеИнтерактивноеДействие.КешПредыдущихРезультатов =
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектXDTOВСтроку(Прокси, РезультатВыполнения);
		КонецЕсли;
	КонецЕсли;
	
	Если ОтветНаЗапросыПакета.responses.Количество() = 2 Тогда
		ДанныеДляОбновления = ОтветНаЗапросыПакета.responses[1];
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(Прокси, ДанныеДляОбновления, "DMError") Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОшибку(
				СокрЛП(ДанныеДляОбновления.description),
				ДанныеДляОбновления.subject);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат выполнения выражения на встроенном языке. Выражение может использоваться только для вычисления
// какого-либо значения, которое в итоге вернет функция. Никакие изменения в базу данных при этом вноситься не
// должны, поэтому выражение выполняется в транзакции, которая откатывается после завершения выполнения.
//
// Параметры:
//   ВычисляемоеВыражение - Строка - выражение на встроенном языке.
//   Источник - Произвольный - источник данных.
//   Приемник - Произвольный - приемник данных.
//   ТекущаяСтрока - Произвольный - передается в случае, если выражение используется для заполнения реквизита
//     строки табличной части.
//
// Возвращаемое значение:
//   Произвольный - результат выполнения выражения на встроенном языке.
//
Функция РезультатВыраженияНаВстроенномЯзыке(ВычисляемоеВыражение, Знач Источник, Приемник = Неопределено,
		ТекущаяСтрока = Неопределено) Экспорт
	
	Параметры = Новый Структура("Источник", Источник);
	
	Если ТипЗнч(Источник) = Тип("ОбъектXDTO") Тогда
		// Преобразуем объект XDTO в структуру, и дополним полученную структуру свойствами, которых нет в
		// исходном объекте XDTO, но к которым могут идти обращения из выражения на встроенном языке.
		Параметры.Источник = Новый Структура;
		Для Каждого СвойствоXDTO Из Источник.Тип().Свойства Цикл
			Параметры.Источник.Вставить(СвойствоXDTO.Имя, Источник[СвойствоXDTO.Имя]);
		КонецЦикла;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, "statusByActionTypeRows") Тогда
			Для Каждого СтрокаСтатус Из Источник.statusByActionTypeRows.rows Цикл
				Параметры.Источник.Вставить(
					СтрШаблон("status_%1", СтрЗаменить(СтрокаСтатус.actionType.objectID.id, "-", "_")),
					СтрокаСтатус.status);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Параметры.Вставить("Приемник", Приемник);
	Параметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	Параметры.Вставить("Результат", Неопределено);
	
	Ошибка = "";
	Попытка
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьВБезопасномРежиме(
			ВычисляемоеВыражение,
			Параметры);
	Исключение
		Ошибка = СтрШаблон(
			НСтр("ru = 'Найдена ошибка в выражении на встроенном языке:
				|%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Ошибка = "" Тогда
		Возврат Параметры.Результат;
	Иначе
		ВызватьИсключение Ошибка;
	КонецЕсли;
	
КонецФункции

// Сбрасывает быстрый поиск (отбор объектов).
//
// Параметры:
//   БыстрыйПоиск - ДанныеФормыКоллекция - таблица "Быстрый поиск" на форме списка задач.
//   КнопкаСброситьОтбор - КнопкаФормы - кнопка "Сбросить отбор".
//
Процедура СброситьБыстрыйПоиск(БыстрыйПоиск, КнопкаСброситьОтбор) Экспорт
	
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		Если Строка.Фиксированный Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Значение = Строка.ЗначениеПоУмолчанию;
		Строка.ЗначениеID = Строка.ЗначениеПоУмолчаниюID;
		Строка.ЗначениеТип = Строка.ЗначениеПоУмолчаниюТип;
		
	КонецЦикла;
	
	ОбновитьПредставлениеБыстрогоПоиска(БыстрыйПоиск, КнопкаСброситьОтбор);
	
КонецПроцедуры

// Копирует объект XDTO.
//
// Параметры:
//   Приемник - ОбъектXDTO - куда копировать.
//   Источник - ОбъектXDTO - от куда копировать.
//   ПроксиДО - WSПрокси - объект для подключения к web-сервисам Документооборота. Если указан - копируется объект
//     DMService, если не указан - копируется объект DMILService.
//
Процедура СкопироватьОбъектXDTO(Приемник, Источник, ПроксиДО = Неопределено) Экспорт
	
	Если ПроксиДО = Неопределено Тогда
		Приемник = СоздатьОбъектБИД(Источник.Тип().Имя);
	Иначе
		Приемник = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(ПроксиДО, Источник.Тип().Имя);
	КонецЕсли;
	Для Каждого Свойство Из Источник.Тип().Свойства Цикл
		
		Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Источник, Свойство.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Источник[Свойство.Имя]) = Тип("ОбъектXDTO") Тогда
			СкопироватьОбъектXDTO(Приемник[Свойство.Имя], Источник[Свойство.Имя], ПроксиДО);
			
		ИначеЕсли ТипЗнч(Источник[Свойство.Имя]) = Тип("СписокXDTO") Тогда
			ТаблицаПриемника = Приемник[Свойство.Имя]; // СписокXDTO
			Для Каждого СтрокаСпискаИсточника Из Источник[Свойство.Имя] Цикл
				СтрокаСпискаПриемника = Неопределено;
				СкопироватьОбъектXDTO(СтрокаСпискаПриемника, СтрокаСпискаИсточника, ПроксиДО);
				ТаблицаПриемника.Добавить(СтрокаСпискаПриемника);
			КонецЦикла;
			
		Иначе
			Приемник[Свойство.Имя] = Источник[Свойство.Имя];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Создает новый объект Документооборота по объекту ИС и указанному правилу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ОбъектИС - ЛюбаяСсылка - объект ИС, источник данных заполнения.
//   Правило - СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - правило заполнения.
//
// Возвращаемое значение:
//   ОбъектXDTO - созданный объект:
//     * name - Строка
//     * objectID - ОбъектXDTO:
//       ** ID - Строка
//       ** type - Строка
//   Строка - сообщение об ошибке.
//
Функция СоздатьОбъектДОПоПравилу(Прокси, ОбъектИС, Правило) Экспорт
	
	СписокОбъектовИС = Новый Массив;
	СписокОбъектовИС.Добавить(ОбъектИС);
	
	ПодходящиеПравилаИнтеграции = Новый Соответствие;
	СписокПравил = Новый Массив;
	СписокПравил.Добавить(Правило);
	ПодходящиеПравилаИнтеграции.Вставить(ОбъектИС, СписокПравил);
	
	Результат = СоздатьОбъектыДОПоПравилам(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции);
	
	Если Результат[ОбъектИС].Успешно Тогда
		Возврат Результат[ОбъектИС].ОбъектXDTO;
	Иначе
		Возврат Результат[ОбъектИС].ТекстОшибки;
	КонецЕсли;
	
КонецФункции

// Создает новые объекты Документооборота для списка объектов ИС по соответствующих им правилам.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, источник данных заполнения.
//   ПодходящиеПравилаИнтеграции - Соответствие из КлючИЗначение - соответствующие правила интеграции:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - список подходящих правил.
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Структура - результат по объекту ИС:
//       ** Успешно - Булево - Истина, если связанный объект в ДО был создан успешно, Ложь, если возникли ошибки.
//       ** ТекстОшибки - Строка - сообщение об ошибке.
//       ** ОбъектXDTO - ОбъектXDTO - созданный в ДО объект.
//
Функция СоздатьОбъектыДОПоПравилам(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMCreateFromIncomingDataRequest");
	
	ТребуютсяПечатныеФормы = ДоступенФункционалФайлов();
	
	СоответствиеПравилЗагрузкиВДООбъектамИС = СоответствиеПравилЗагрузкиВДООбъектамИС(
		Прокси,
		СписокОбъектовИС,
		ПодходящиеПравилаИнтеграции);
	ПредварительныеДанные = ПредварительныеДанныеДляВыгрузкиВДО(
		Прокси,
		СписокОбъектовИС,
		СоответствиеПравилЗагрузкиВДООбъектамИС,,
		ТребуютсяПечатныеФормы);
	СоответствиеСпискаВыраженийОбъектамИС = ПредварительныеДанные.СоответствиеСпискаВыраженийОбъектамИС;
	Если ТребуютсяПечатныеФормы Тогда
		СоответствиеПечатныхФормОбъектамИС = ПредварительныеДанные.СоответствиеПечатныхФормОбъектамИС;
		ТипыФайловПечатныхФорм = ПредварительныеДанные.ТипыФайловПечатныхФорм;
	КонецЕсли;
	
	КонтрольОтправкиФайлов = ИнтеграцияС1СДокументооборотБазоваяФункциональность.КонтрольОтправкиФайлов();
	
	// Добавим в запрос те объекты, для которых есть единственное подходящее dataLoadingRule
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		
		РезультатПоОбъекту = Новый Структура("Успешно, ТекстОшибки, ОбъектXDTO", Истина, "", Неопределено);
		
		ПравилоЗагрузкиВДО = СоответствиеПравилЗагрузкиВДООбъектамИС[ОбъектИС];
		Если ПравилоЗагрузкиВДО = Неопределено Тогда
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = НСтр("ru = 'Не найдено подходящее правило загрузки данных в 1С:Документооборот'");
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецЕсли;
		
		СтруктураСозданияОбъекта = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMIncomingDataRequestStructure",
			ОбъектИС);
		
		Попытка
			СтруктураСозданияОбъекта.incomingData = ВходящиеДанныеОбъектаИС(
				Прокси,
				ОбъектИС,
				СоответствиеСпискаВыраженийОбъектамИС[ОбъектИС]);
		Исключение
			РезультатПоОбъекту.Успешно = Ложь;
			РезультатПоОбъекту.ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
			Продолжить;
		КонецПопытки;
		
		СтруктураСозданияОбъекта.dataLoadingRule = ПравилоЗагрузкиВДО;
		
		Если ТребуютсяПечатныеФормы Тогда
			ПечатныеФормыКСозданию = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПечатныеФормыКСозданию(
				ОбъектИС,
				ПрисоединяемыеПечатныеФормы(СоответствиеПечатныхФормОбъектамИС[ОбъектИС]),
				Перечисления.ТипыФайловСохраненияПечатныхФормОбъектов[ТипыФайловПечатныхФорм[ОбъектИС]],
				КонтрольОтправкиФайлов);
			ПечатныеФормы = СтруктураСозданияОбъекта.files; // СписокXDTO
			Для Каждого ПараметрыСоздания Из ПечатныеФормыКСозданию Цикл
				ФайлXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ФайлXDTOИзПараметровСоздания(
					Прокси,
					ПараметрыСоздания);
				ПечатныеФормы.Добавить(ФайлXDTO);
			КонецЦикла;
		КонецЕсли;
		
		Запрос.objects.Добавить(СтруктураСозданияОбъекта);
		
		Результат.Вставить(ОбъектИС, РезультатПоОбъекту);
		
	КонецЦикла;
	
	Если Запрос.objects.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Для Каждого Строка Из КонтрольОтправкиФайлов Цикл
		РегистрыСведений.КонтрольОтправкиФайловВ1СДокументооборот.СохранитьХешСуммуВерсииФайла(
			Строка.Источник,
			Строка.ИмяФайла,
			Строка.ТабличныйДокумент)
	КонецЦикла;
	
	Для Каждого СтруктураОтвета Из Ответ.objects Цикл
		ОбъектИС = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СсылкаИзUUID(
			СтруктураОтвета.key.type,
			СтруктураОтвета.key.ID);
		Если СтруктураОтвета.success Тогда
			
			ОбъектXDTO = СтруктураОтвета.object;
			Результат[ОбъектИС].ОбъектXDTO = ОбъектXDTO;
			
			НаличиеПрисоединенныхФайлов = Ложь; // Доп. запрос к ДО делать не требуется.
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "files") Тогда
				НаличиеПрисоединенныхФайлов = (ОбъектXDTO.files.Количество() > 0);
			КонецЕсли;
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
				ОбъектXDTO.objectID.ID,
				ОбъектXDTO.objectID.type,
				ОбъектИС,
				НаличиеПрисоединенныхФайлов,
				Ложь);
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьШтрихкод(
				ОбъектИС,
				ОбъектXDTO.objectID.ID,
				ОбъектXDTO.objectID.type);
			
		Иначе
			Результат[ОбъектИС].Успешно = Ложь;
			Результат[ОбъектИС].ТекстОшибки =
				ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.УдалитьТехИнформациюИзТекстаОшибки(
					СтруктураОтвета.error.description);
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаписатьОшибку(СтруктураОтвета.error.description);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Находит на стороне 1С:Документооборот правила загрузки данных в 1С:Документооборот, соответствующие
// переданным объектам интегрированной системы.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СписокОбъектовИС - Массив из ЛюбаяСсылка - объекты ИС, для которых требуется найти соответствующие правила.
//   ПодходящиеПравилаИнтеграции - Соответствие из КлючИЗначение - соответствующие правила интеграции:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - Массив из СправочникСсылка.ПравилаИнтеграцииС1СДокументооборотом3 - список подходящих правил.
//
// Возвращаемое значение:
//   Соответствие из КлючИЗначение:
//     * Ключ - ОпределяемыйТип.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый - объект ИС.
//     * Значение - ОбъектXDTO - объект XDTO типа DMDataLoadingRule.
//                - Неопределено - если подходящее правило загрузки не было найдено.
//
Функция СоответствиеПравилЗагрузкиВДООбъектамИС(Прокси, СписокОбъектовИС, ПодходящиеПравилаИнтеграции) Экспорт
	
	Результат = Новый Соответствие;
	
	Если СписокОбъектовИС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВсеПравила = Новый Массив;
	Для Каждого СоответствиеПравил Из ПодходящиеПравилаИнтеграции Цикл
		Для Каждого Правило Из СоответствиеПравил.Значение Цикл
			Если ВсеПравила.Найти(Правило) = Неопределено Тогда
				ВсеПравила.Добавить(Правило);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СсылкиНаПравилаЗагрузкиВДО = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеПравила, "ПравилоЗагрузкиДанныхВДО");
	
	Для Каждого ОбъектИС Из СписокОбъектовИС Цикл
		Если ПодходящиеПравилаИнтеграции[ОбъектИС].Количество() = 1 Тогда
			ПравилоИнтеграции = ПодходящиеПравилаИнтеграции[ОбъектИС][0];
			Результат.Вставить(
				ОбъектИС,
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
					Прокси,
					СсылкиНаПравилаЗагрузкиВДО[ПравилоИнтеграции],
					"DMDataLoadingRule"));
		Иначе
			Результат.Вставить(ОбъектИС, Неопределено)
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает условное оформление таблицы "Быстрый поиск".
//
// Параметры:
//   УсловноеОформление - УсловноеОформлениеКомпоновкиДанных.
//   ТаблицаБыстрыйПоиск - ТаблицаФормы - таблица "Быстрый поиск".
//   ЯчейкаЗначение - ПолеФормы - ячейка "Значение" таблицы "Быстрый поиск".
//
Процедура УстановитьУсловноеОформлениеТаблицыБыстрыйПоиск(УсловноеОформление, ТаблицаБыстрыйПоиск, ЯчейкаЗначение) Экспорт
	
	// Пустой текст значения.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных(ЯчейкаЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаБыстрыйПоиск.Имя + ".Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	// Фиксированная ячейка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Поля = Элемент.Поля.Элементы;
	Поля.Добавить().Поле = Новый ПолеКомпоновкиДанных(ТаблицаБыстрыйПоиск.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаБыстрыйПоиск.Имя + ".Фиксированный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаВсеПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Проверяет описывает ли переданный тип документ ДО3.
//
// Параметры:
//   ТипОбъектаXDTO - Строка - тип объекта.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДокументДО3(ТипОбъектаXDTO) Экспорт
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить("DMDocument");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.11.25") Тогда
		СписокТипов.Добавить("DMInternalDocument");
		СписокТипов.Добавить("DMIncomingDocument");
		СписокТипов.Добавить("DMOutgoingDocument");
	КонецЕсли;
	
	Возврат СписокТипов.Найти(ТипОбъектаXDTO) <> Неопределено;
	
КонецФункции

// Проверяет описывает ли переданный тип известный объект обзора.
//
// Параметры:
//   ТипОбъектаXDTO - Строка - тип объекта.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоИзвестныйОбъектОбзора(ТипОбъектаXDTO) Экспорт
	
	СписокТипов = Новый Массив;
	СписокТипов.Добавить("DMIncomingElectronicDocument");
	СписокТипов.Добавить("DMOutgoingElectronicDocument");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.14.31") Тогда
		СписокТипов.Добавить("DMCorrespondent");
		СписокТипов.Добавить("DMMeeting");
		СписокТипов.Добавить("DMMeetingMinutesItem");
		СписокТипов.Добавить("DMProject");
		СписокТипов.Добавить("DMProjectTask");
		СписокТипов.Добавить("DMReservation");
		СписокТипов.Добавить("DMIncomingEmail");
		СписокТипов.Добавить("DMOutgoingEmail");
		СписокТипов.Добавить("DMForumMessage");
		СписокТипов.Добавить("DMForumThread");
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.15.41") Тогда
		СписокТипов.Добавить("DMEmployee");
	КонецЕсли;
	
	Возврат ЭтоДокументДО3(ТипОбъектаXDTO) Или СписокТипов.Найти(ТипОбъектаXDTO) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область Задачи

// Возвращает запрос на взятие задачи в работу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеПоЗадаче - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMAcceptTasksRequest.
//
Функция ВзятьЗадачуВРаботуЗапрос(Прокси, ДанныеПоЗадаче) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMAcceptTasksRequest");
	СписокЗадач = Запрос.tasks; // СписокXDTO
	
	taskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	taskAction.name = ДанныеПоЗадаче.ДействиеЗадачи.Наименование;
	taskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.ID,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	
	СписокЗадач.Добавить(taskAction);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос на выполнение действия задачи в Документообороте.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеПоЗадаче - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMExecuteTaskActionRequest.
//
Функция ВыполнитьДействиеЗадачиЗапрос(Прокси, ДанныеПоЗадаче) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMExecuteTaskActionRequest");
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(Запрос, "interactiveActionResult") Тогда
		РезультатыИнтерактивныхДействий = Запрос.interactiveActionResult; // СписокXDTO
	Иначе
		РезультатыИнтерактивныхДействий = Новый Массив;
	КонецЕсли;
	
	Запрос.taskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	Запрос.taskAction.name = ДанныеПоЗадаче.ДействиеЗадачи.Наименование;
	Запрос.taskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.ID,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	
	Запрос.resultOfTaskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.РезультатДействия.Тип);
	Запрос.resultOfTaskAction.name = ДанныеПоЗадаче.РезультатДействия.Наименование;
	Запрос.resultOfTaskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.РезультатДействия.ID,
		ДанныеПоЗадаче.РезультатДействия.Тип);
	
	Запрос.actionResultString = ДанныеПоЗадаче.РезультатДействияТекстом;
	Запрос.dataVersion = ДанныеПоЗадаче.ВерсияДанныхДействияЗадачи;
	
	Если ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.ВыбратьИсполнителяЗадачи Тогда
		
		РезультатXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMInteractiveActionContext");
		РезультатXDTO.interactiveAction = "SelectTaskPerformer";
		РезультатXDTO.context = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMActualTaskPerformer");
		Если ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст.Адресат <> Неопределено Тогда
			РезультатXDTO.context.addressee =
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьИзДанныхСсылочногоОбъектаДО(
				Прокси,
				ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст.Адресат);
		КонецЕсли;
		Если ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст.Сотрудник <> Неопределено Тогда
			РезультатXDTO.context.actualPerformer =
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьИзДанныхСсылочногоОбъектаДО(
				Прокси,
				ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст.Сотрудник);
		КонецЕсли;
		РезультатXDTO.context.isDeputy =
			ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст.ЭтоЗамещающий;
		РезультатыИнтерактивныхДействий.Добавить(РезультатXDTO);
		
	ИначеЕсли ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.ЗадатьПроизвольныйВопрос Тогда
		
		РезультатXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMInteractiveActionContext");
		РезультатXDTO.interactiveAction = "AskAQuestion";
		РезультатXDTO.context = ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст;
		РезультатыИнтерактивныхДействий.Добавить(РезультатXDTO);
		
	ИначеЕсли ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.ИзменитьПараметрыПроцесса Тогда
		
		РезультатXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMInteractiveActionContext");
		РезультатXDTO.interactiveAction = "ChangeProcessParameters";
		Если ТипЗнч(ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст) = Тип("Строка")
				И Не ПустаяСтрока(ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст) Тогда
			РезультатXDTO.context = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
				Прокси,
				ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.Контекст);
		КонецЕсли;
		РезультатыИнтерактивныхДействий.Добавить(РезультатXDTO);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.КешПредыдущихРезультатов) Тогда
		КешXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СтрокаВОбъектXDTO(
			Прокси,
			ДанныеПоЗадаче.ТребуемоеИнтерактивноеДействие.КешПредыдущихРезультатов);
		Для Каждого РезультатXDTO Из КешXDTO.interactiveActionResultCache Цикл
			РезультатыИнтерактивныхДействий.Добавить(РезультатXDTO);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает структуру дополнительных данных задачи.
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO - объект XDTO типа DMTaskAction.
//   ТекущийПользовательИСотрудники - Массив из ОбъектXDTO - Объект XDTO типа DMUser, DMEmployee или Неопределено.
//
// Возвращаемое значение:
//   Структура:
//     * ОбластьДействия - см. НоваяОбластьДействияЗадачи
//     * ДеревоПриложений - см. НовоеДеревоПриложений
//
Функция ДополнительныеДанныеПоЗадаче(ЗадачаXDTO, ТекущийПользовательИСотрудники = Неопределено) Экспорт
	
	Если ТекущийПользовательИСотрудники = Неопределено Тогда
		ТекущийПользовательИСотрудники =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТекущийПользовательДокументооборота();
	КонецЕсли;
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO, "actionArea") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДополнительныеДанные = Новый Структура;
	
	ДополнительныеДанные.Вставить("ОбластьДействия", ОбластьДействияЗадачи(ЗадачаXDTO.actionArea, ЗадачаXDTO.flag));
	
	ДеревоПриложений = НовоеДеревоПриложений();
	ДеревоПриложенийИзXDTO(ЗадачаXDTO, ДеревоПриложений.Строки, ТекущийПользовательИСотрудники);
	ДополнительныеДанные.Вставить("ДеревоПриложений", ДеревоПриложений);
	
	Возврат ДополнительныеДанные;
	
КонецФункции

// Преобразует таблицу "Быстрый поиск" в набор фильтров для запроса к веб-сервису Документооборота
// на получение списка задач.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Фильтры - СписокЗначений из Произвольный - отборы, которые требуется наложить на список задач.
//   БыстрыйПоиск - ДанныеФормыКоллекция - таблица "Быстрый поиск" на форме списка задач.
//
Процедура ДополнитьФильтрыОтбораЗадач(Прокси, Фильтры, БыстрыйПоиск) Экспорт
	
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Параметр = "Автор" Тогда
			
			Автор = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				Строка.ЗначениеID,
				Строка.ЗначениеТип,
				Строка.ПредставлениеЗначения);
			АвторXDTO = УчастникЗадачXDTO(Прокси, Автор);
			Фильтры.Добавить(АвторXDTO, "author");
			
		ИначеЕсли Строка.Параметр = "Исполнитель" Тогда
			
			Исполнитель = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				Строка.ЗначениеID,
				Строка.ЗначениеТип,
				Строка.ПредставлениеЗначения);
			ИсполнительXDTO = УчастникЗадачXDTO(Прокси, Исполнитель);
			Фильтры.Добавить(ИсполнительXDTO, "performer");
			
		ИначеЕсли Строка.Параметр = "ВидДействия" Тогда
			
			ВидДействияXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				Строка.ЗначениеID,
				Строка.ЗначениеТип);
			Фильтры.Добавить(ВидДействияXDTO, "taskActionType");
			
		ИначеЕсли Строка.Параметр = "Проект" Тогда
			
			ПроектXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				Строка.ЗначениеID,
				Строка.ЗначениеТип);
			Фильтры.Добавить(ПроектXDTO, "project");
			
		ИначеЕсли Строка.Параметр = "Флаг" Тогда
			
			Фильтры.Добавить(Строка.Значение, "flag");
			
		ИначеЕсли Строка.Параметр = "ДатаС" Тогда
			
			Фильтры.Добавить(Строка.Значение, "beginDate");
			
		ИначеЕсли Строка.Параметр = "ДатаПо" Тогда
			
			Фильтры.Добавить(Строка.Значение, "endDate");
			
		ИначеЕсли Строка.Параметр = "Состояние" Тогда
			
			ОтборыПоСтатусуЗадач = Новый Массив;
			СостоянияЗадач = Новый Массив;
			
			ТипЗначения = ТипЗнч(Строка.Значение);
			Если ТипЗначения = Тип("Строка") Тогда
				
				Если Строка.ЗначениеТип = "DMTaskStatusFilter" Тогда
					ОтборыПоСтатусуЗадач.Добавить(Строка.ЗначениеID);
				ИначеЕсли Строка.ЗначениеТип = "DMTaskStatus" Тогда
					СостоянияЗадач.Добавить(Строка.ЗначениеID);
				КонецЕсли;
				
			ИначеЕсли ТипЗначения = Тип("СписокЗначений") Тогда
				
				Для Каждого Элемент Из Строка.Значение Цикл
					
					Если Элемент.Значение.Тип = "DMTaskStatusFilter" Тогда
						ОтборыПоСтатусуЗадач.Добавить(Элемент.Значение.ID);
					ИначеЕсли Элемент.Значение.Тип = "DMTaskStatus" Тогда
						СостоянияЗадач.Добавить(Элемент.Значение.ID);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОтборыПоСтатусуЗадач.Количество() > 0 Тогда
				Фильтры.Добавить(ОтборыПоСтатусуЗадач, "taskStatusFilter");
			КонецЕсли;
			
			Если СостоянияЗадач.Количество() > 0 Тогда
				Фильтры.Добавить(СостоянияЗадач, "taskStatus");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Конструктор области действия задачи.
//
// Возвращаемое значение:
//   Структура:
//     * ВыполнитьДействиеЗадачиВариант1 - Неопределено
//     * ВыполнитьДействиеЗадачиВариант2 - Неопределено
//     * ВыполнитьДействиеЗадачиВариант3 - Неопределено
//     * ВыполнитьДействиеЗадачиПоШаблону1 - Неопределено
//     * ВыполнитьДействиеЗадачиПоШаблону2 - Неопределено
//     * ВыполнитьДействиеЗадачиПоШаблону3 - Неопределено
//     * ВыбратьШаблонДляВыполненияЗадачи - Неопределено
//     * ВыполнитьПодключаемоеДействиеЗадачи1 - Неопределено
//     * ОтменитьВыполнение - Неопределено
//     * ВерсияДанныхДействияЗадачи - Строка
//     * РезультатДействияТекстом - Строка
//     * РезультатДействияПолеВвода - Неопределено
//     * ПодменюФлаги - Неопределено
//     * Флаг - Строка
//     * ВзятьВРаботу - Неопределено
//     * ОтменитьВзятиеВРаботу - Неопределено
//     * ДобавитьУчастников - Неопределено
//     * РезультатВарианта1 - Строка
//     * РезультатВарианта1ID - Строка
//     * РезультатВарианта1Тип - Строка
//     * РезультатВарианта2 - Строка
//     * РезультатВарианта2ID - Строка
//     * РезультатВарианта2Тип - Строка
//     * РезультатВарианта3 - Строка
//     * РезультатВарианта3ID - Строка
//     * РезультатВарианта3Тип - Строка
//
Функция НоваяОбластьДействияЗадачи() Экспорт
	
	ОбластьДействия = Новый Структура;
	
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиВариант1", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиВариант2", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиВариант3", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиПоШаблону1", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиПоШаблону2", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьДействиеЗадачиПоШаблону3", Неопределено);
	ОбластьДействия.Вставить("ВыбратьШаблонДляВыполненияЗадачи", Неопределено);
	ОбластьДействия.Вставить("ВыполнитьПодключаемоеДействиеЗадачи1", Неопределено);
	ОбластьДействия.Вставить("ОтменитьВыполнение", Неопределено);
	
	ОбластьДействия.Вставить("РезультатВарианта1", "");
	ОбластьДействия.Вставить("РезультатВарианта1ID", "");
	ОбластьДействия.Вставить("РезультатВарианта1Тип", "");
	ОбластьДействия.Вставить("РезультатВарианта2", "");
	ОбластьДействия.Вставить("РезультатВарианта2ID", "");
	ОбластьДействия.Вставить("РезультатВарианта2Тип", "");
	ОбластьДействия.Вставить("РезультатВарианта3", "");
	ОбластьДействия.Вставить("РезультатВарианта3ID", "");
	ОбластьДействия.Вставить("РезультатВарианта3Тип", "");
	
	ОбластьДействия.Вставить("ВерсияДанныхДействияЗадачи", "");
	ОбластьДействия.Вставить("РезультатДействияТекстом", "");
	ОбластьДействия.Вставить("РезультатДействияПолеВвода", Неопределено);
	ОбластьДействия.Вставить("ПодменюФлаги", Неопределено);
	ОбластьДействия.Вставить("Флаг", "");
	ОбластьДействия.Вставить("ВзятьВРаботу", Неопределено);
	ОбластьДействия.Вставить("ОтменитьВзятиеВРаботу", Неопределено);
	
	ОбластьДействия.Вставить("ДобавитьУчастников", Неопределено);
	ОбластьДействия.Вставить("ДействиеОбработки", "");
	ОбластьДействия.Вставить("ДействиеОбработкиID", "");
	ОбластьДействия.Вставить("ДействиеОбработкиТип", "");
	
	Возврат ОбластьДействия;
	
КонецФункции

// Создает на форме задачи или списка задач новую группу команд создания на основании с подходящими правилами.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма задачи или списка задач.
//   ПодходящиеПравила - Массив из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеПравилаИнтеграции
//
// Возвращаемое значение:
//   Строка - ключ созданной страницы задач.
//
Функция НоваяСтраницаКомандСозданияНаОснованииЗадачи(Форма, ПодходящиеПравила) Экспорт
	
	КлючСтраницы = Строка(Новый УникальныйИдентификатор);
	КлючСтраницы = СтрЗаменить(КлючСтраницы, "-", "_");
	
	// Элементы, подлежащие копированию.
	ИмяГруппыСтраниц = "ГруппаСтраницыКоманд";
	ИмяИсходнойСтраницы = "ГруппаСтраницаКоманд";
	ИсходнаяСтраница = Форма.Элементы[ИмяИсходнойСтраницы];
	ИмяИсходногоПодменю = "ФормаСоздатьНаОсновании";
	ИмяИсходнойПанели = "ГруппаКомандыЗадачи";
	ИсходнаяПанель = Форма.Элементы[ИмяИсходнойПанели];
	
	ИмяНовойСтраницы = ИмяИсходнойСтраницы + КлючСтраницы;
	ИмяНовойПанели = ИмяИсходнойПанели + КлючСтраницы;
	
	// Создадим новую страницу.
	НоваяСтраница = Форма.Элементы.Добавить(ИмяНовойСтраницы, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппыСтраниц]);
	ЗаполнитьЗначенияСвойств(НоваяСтраница, ИсходнаяСтраница,, "Имя, ПутьКДаннымЗаголовка");
	
	// Создадим новую командную панель.
	НоваяПанель = Форма.Элементы.Добавить(ИмяНовойПанели, Тип("ГруппаФормы"), НоваяСтраница);
	ЗаполнитьЗначенияСвойств(НоваяПанель, ИсходнаяПанель,, "Имя");
	
	// Скопируем элементы командной панели, ограничившись двумя уровнями.
	Для Каждого ИсходныйЭлемент Из ИсходнаяПанель.ПодчиненныеЭлементы Цикл
		НовыйЭлемент = Форма.Элементы.Добавить(ИсходныйЭлемент.Имя + КлючСтраницы, ТипЗнч(ИсходныйЭлемент), НоваяПанель);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, ИсходныйЭлемент,, "Имя");
		Если ТипЗнч(ИсходныйЭлемент) = Тип("ГруппаФормы") Тогда
			НоваяГруппа = НовыйЭлемент;
			Для Каждого ИсходныйЭлементГруппы Из ИсходныйЭлемент.ПодчиненныеЭлементы Цикл
				НовыйЭлементГруппы = Форма.Элементы.Добавить(ИсходныйЭлементГруппы.Имя + КлючСтраницы,
					ТипЗнч(ИсходныйЭлементГруппы), НоваяГруппа);
				ЗаполнитьЗначенияСвойств(НовыйЭлементГруппы, ИсходныйЭлементГруппы, , "Имя");
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Дополним стандартное подменю создания пунктами, специфичными для этого вида объекта.
	НовоеПодменю = Форма.Элементы.Найти(ИмяИсходногоПодменю + КлючСтраницы);
	Для Каждого Правило Из ПодходящиеПравила Цикл
		ИмяКоманды = "Создать_" + СтрЗаменить(Строка(Правило.Ссылка.УникальныйИдентификатор()), "-", "_");
		
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			КомандаСоздатьСвязанныйОбъект = Форма.Команды.Добавить(ИмяКоманды);
			КомандаСоздатьСвязанныйОбъект.Действие = "Подключаемый_СоздатьСвязанныйОбъект";
		КонецЕсли;
		
		ИмяЭлемента = ИмяКоманды + КлючСтраницы;
		Если Форма.Элементы.Найти(ИмяЭлемента) = Неопределено Тогда // Страховка от дубликатов правил.
			Кнопка = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), НовоеПодменю);
			Кнопка.Заголовок = Правило.ПредставлениеОбъектаИС;
			Кнопка.ИмяКоманды = ИмяКоманды;
			Кнопка.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КлючСтраницы;
	
КонецФункции

// Конструктор дерева приложений задачи.
//
// Возвращаемое значение:
//   ДеревоЗначений:
//     * ИндексКартинки - Число
//                      - Картинка
//     * Приложение - Строка
//     * ПриложениеID - Строка
//     * ПриложениеТип - Строка
//     * ПредставлениеПриложения - Строка
//     * ТипСтроки - Строка
//     * РольПредмета - Строка
//     * ДоступноУдаление - Булево
//     * ОбязательноеЗаполнение - Булево
//     * ПометкаУдаления - Булево
//     * ЯвляетсяОригиналом - Булево
//     * Редактируется - Булево
//     * РедактируетсяТекущимПользователем - Булево
//     * РольФайлаID - Строка
//     * РольОбязательная - Булево
//     * ПредставлениеHTML - Строка
//     * ПредпросмотрУрезан - Булево
//     * ПодписанЭП - Булево
//     * Зашифрован - Булево
//     * ДатаМодификации - Дата
//     * Расширение - Строка
//
Функция НовоеДеревоПриложений() Экспорт
	
	ТипыКартинки = Новый Массив;
	ТипыКартинки.Добавить(Тип("Число"));
	ТипыКартинки.Добавить(Тип("Картинка"));
	
	НовоеДеревоПриложений = Новый ДеревоЗначений;
	НовоеДеревоПриложений.Колонки.Добавить("Ссылка",
		Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип);
	НовоеДеревоПриложений.Колонки.Добавить("НавигационнаяСсылка", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов(ТипыКартинки));
	НовоеДеревоПриложений.Колонки.Добавить("Приложение", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПриложениеID", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПриложениеТип", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПредставлениеПриложения", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ТипСтроки", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("РольПредмета", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ДоступноУдаление", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ОбязательноеЗаполнение", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("РольОбязательная", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ОжиданиеПредпросмотра", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ПустаяСтрока", Новый ОписаниеТипов("Строка"));
	
	НовоеДеревоПриложений.Колонки.Добавить("ПометкаУдаления", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ЯвляетсяОригиналом", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("Редактируется", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("РедактируетсяТекущимПользователем", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("РольФайлаID", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПредставлениеHTML", Новый ОписаниеТипов("Строка"));
	НовоеДеревоПриложений.Колонки.Добавить("ПредпросмотрУрезан", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ПодписанЭП", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("Зашифрован", Новый ОписаниеТипов("Булево"));
	НовоеДеревоПриложений.Колонки.Добавить("ДатаМодификации", Новый ОписаниеТипов("Дата"));
	НовоеДеревоПриложений.Колонки.Добавить("Расширение", Новый ОписаниеТипов("Строка"));
	
	// НДПС.
	Для Каждого Поле Из ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПоляНДПС() Цикл
		НовоеДеревоПриложений.Колонки.Добавить(Поле.Значение, Новый ОписаниеТипов("Булево"));
	КонецЦикла;
	
	Возврат НовоеДеревоПриложений;
	
КонецФункции

// Выполняет перерисовку области действия в форме задачи и в форме списка задач.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма с областью действия задачи.
//   ОбластьДействия - см. НоваяОбластьДействияЗадачи
//   СохраненныйКомментарий - Строка - результат действия текстом.
//   ИзменятьШрифт - Булево - будет изменен шрифт элементов формы при необходимости.
//
Процедура ОбновитьОбластьДействияЗадачи(Форма, ОбластьДействия, СохраненныйКомментарий = Неопределено,
		ИзменятьШрифт = Истина) Экспорт
	
	// Обновим элементы формы.
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиВариант1,
		Форма.Команды.ВыполнитьДействиеЗадачиВариант1,
		ОбластьДействия.ВыполнитьДействиеЗадачиВариант1,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиВариант2,
		Форма.Команды.ВыполнитьДействиеЗадачиВариант2,
		ОбластьДействия.ВыполнитьДействиеЗадачиВариант2,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиВариант3,
		Форма.Команды.ВыполнитьДействиеЗадачиВариант3,
		ОбластьДействия.ВыполнитьДействиеЗадачиВариант3,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиПоШаблону1,
		Форма.Команды.ВыполнитьДействиеЗадачиПоШаблону1,
		ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону1,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиПоШаблону2,
		Форма.Команды.ВыполнитьДействиеЗадачиПоШаблону2,
		ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону2,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьДействиеЗадачиПоШаблону3,
		Форма.Команды.ВыполнитьДействиеЗадачиПоШаблону3,
		ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону3,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыбратьШаблонДляВыполненияЗадачи,
		Форма.Команды.ВыбратьШаблонДляВыполненияЗадачи,
		ОбластьДействия.ВыбратьШаблонДляВыполненияЗадачи,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ВыполнитьПодключаемоеДействиеЗадачи1,
		Форма.Команды.ВыполнитьПодключаемоеДействиеЗадачи1,
		ОбластьДействия.ВыполнитьПодключаемоеДействиеЗадачи1,
		ИзменятьШрифт);
	ОбновитьКнопкуВОбластиДействия(
		Форма.Элементы.ОтменитьВыполнение,
		Форма.Команды.ОтменитьВыполнение,
		ОбластьДействия.ОтменитьВыполнение,
		ИзменятьШрифт);
	
	ОбновитьПолеВводаВОбластиДействия(
		Форма.Элементы.РезультатДействияТекстом,
		ОбластьДействия.РезультатДействияПолеВвода);
	
	ОбновитьГруппуФормы(
		Форма.Элементы.ПодменюФлаги,
		ОбластьДействия.ПодменюФлаги);
	ДанныеФлага = ДанныеФлага(ОбластьДействия.Флаг);
	Форма.Элементы.ПодменюФлаги.Картинка = ДанныеФлага.Картинка;
	
	ОбновитьКнопкуФормы(Форма.Элементы.ВзятьВРаботу, ОбластьДействия.ВзятьВРаботу);
	ОбновитьКнопкуФормы(Форма.Элементы.ОтменитьВзятиеВРаботу, ОбластьДействия.ОтменитьВзятиеВРаботу);
	ОбновитьКнопкуФормы(Форма.Элементы.ДобавитьУчастников, ОбластьДействия.ДобавитьУчастников);
	
	// Обновим реквизиты формы.
	Если СохраненныйКомментарий = Неопределено Тогда
		Форма.РезультатДействияТекстом = ОбластьДействия.РезультатДействияТекстом;
	Иначе
		Форма.РезультатДействияТекстом = СохраненныйКомментарий;
	КонецЕсли;
	
	Форма.ВерсияДанныхДействияЗадачи = ОбластьДействия.ВерсияДанныхДействияЗадачи;
	Форма.РезультатВарианта1 = ОбластьДействия.РезультатВарианта1;
	Форма.РезультатВарианта1ID = ОбластьДействия.РезультатВарианта1ID;
	Форма.РезультатВарианта1Тип = ОбластьДействия.РезультатВарианта1Тип;
	Форма.РезультатВарианта2 = ОбластьДействия.РезультатВарианта2;
	Форма.РезультатВарианта2ID = ОбластьДействия.РезультатВарианта2ID;
	Форма.РезультатВарианта2Тип = ОбластьДействия.РезультатВарианта2Тип;
	Форма.РезультатВарианта3 = ОбластьДействия.РезультатВарианта3;
	Форма.РезультатВарианта3ID = ОбластьДействия.РезультатВарианта3ID;
	Форма.РезультатВарианта3Тип = ОбластьДействия.РезультатВарианта3Тип;
	Форма.ДействиеОбработки = ОбластьДействия.ДействиеОбработки;
	Форма.ДействиеОбработкиID = ОбластьДействия.ДействиеОбработкиID;
	Форма.ДействиеОбработкиТип = ОбластьДействия.ДействиеОбработкиТип;
	
КонецПроцедуры

// Читает основной предмет из объекта XDTO типа DMTaskAction.
//
// Параметры:
//   ЗадачаXDTO - ОбъектXDTO - объект XDTO типа DMTaskAction.
//
// Возвращаемое значение:
//   Структура:
//     * mainApplication - ОбъектXDTO
//                       - Неопределено
//     * ID - Строка
//     * Тип - Строка
//     * ТипОбъектаДО - Строка
//     * ВидДокументаДОID - Строка
//
Функция ОсновнойПредметЗадачи(ЗадачаXDTO) Экспорт
	
	ОсновнойПредмет = Новый Структура;
	ОсновнойПредмет.Вставить("mainApplication", Неопределено);
	ОсновнойПредмет.Вставить("ID", "");
	ОсновнойПредмет.Вставить("Тип", "");
	ОсновнойПредмет.Вставить("ТипОбъектаДО", "");
	ОсновнойПредмет.Вставить("ВидДокументаДОID", "");
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ЗадачаXDTO, "mainApplication") Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
				ЗадачаXDTO.mainApplication, "document") Тогда
			ОсновнойПредмет.mainApplication = ЗадачаXDTO.mainApplication.document; // ОбъектXDTO
			ОсновнойПредмет.ВидДокументаДОID = ЗадачаXDTO.mainApplication.document.documentType.objectID.ID;
		ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
				ЗадачаXDTO.mainApplication, "correspondent") Тогда
			ОсновнойПредмет.mainApplication = ЗадачаXDTO.mainApplication.correspondent; // ОбъектXDTO
		ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
				ЗадачаXDTO.mainApplication, "meeting") Тогда
			ОсновнойПредмет.mainApplication = ЗадачаXDTO.mainApplication.meeting; // ОбъектXDTO
		КонецЕсли;
		Если ТипЗнч(ОсновнойПредмет.mainApplication) = Тип("ОбъектXDTO") Тогда
			ТипПредмета = ОсновнойПредмет.mainApplication.Тип(); // ТипОбъектаXDTO
			ОсновнойПредмет.ТипОбъектаДО = ТипПредмета.Имя;
			ОсновнойПредмет.ID = ОсновнойПредмет.mainApplication.objectID.ID;
			ОсновнойПредмет.Тип = ОсновнойПредмет.mainApplication.objectID.type;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОсновнойПредмет;
	
КонецФункции

// Возвращает запрос на отмену взятия задачи в работу.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеПоЗадаче - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRevokeTaskAcceptanceRequest.
//
Функция ОтменитьВзятиеЗадачиВРаботуЗапрос(Прокси, ДанныеПоЗадаче) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMRevokeTaskAcceptanceRequest");
	СписокЗадач = Запрос.tasks; // СписокXDTO
	
	taskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	taskAction.name = ДанныеПоЗадаче.ДействиеЗадачи.Наименование;
	taskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.ID,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	
	СписокЗадач.Добавить(taskAction);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос к 1С:Документообороту на получение списка задач.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ТекущаяСтраница - Число - номер текущей страницы списка.
//   РазмерСтраницыДинамическогоСписка - Число - количество задач на одной странице.
//   ПолеДляСортировки - Строка - имя реквизита, по которому будет отсортирован список.
//   НаправлениеСортировкиПоля - Булево - если Ложь, то сортировка по возрастанию, если Истина, то по убыванию.
//   Фильтры - СписокЗначений из Произвольный - отборы, которые требуется наложить на список задач.
//   ОтображениеКарточкиЗадачи - ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения - вариант отображения области
//     чтения задачи.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetDynamicListRequest.
//
Функция СписокЗадачЗапрос(Прокси, ТекущаяСтраница, РазмерСтраницыДинамическогоСписка, ПолеДляСортировки,
		НаправлениеСортировкиПоля, Фильтры, ОтображениеКарточкиЗадачи) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMGetDynamicListRequest");
	
	Запрос.numberOfObjectsPerPage = РазмерСтраницыДинамическогоСписка;
	Запрос.page = ТекущаяСтраница;
	Запрос.type = "DMTaskAction";
	
	УсловияОтбора = Запрос.conditions; // СписокXDTO
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "byUser";
	Условие.value = Истина;
	УсловияОтбора.Добавить(Условие);
	
	Для Каждого Фильтр Из Фильтры Цикл
		Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
		Условие.property = Фильтр.Представление;
		Если ТипЗнч(Фильтр.Значение) = Тип("Массив") Тогда
			ЗначенияУсловия = Условие.valueList; // СписокXDTO
			Для Каждого Элемент Из Фильтр.Значение Цикл
				ЗначенияУсловия.Добавить(Элемент);
			КонецЦикла;
		Иначе
			Условие.value = Фильтр.Значение;
		КонецЕсли;
		УсловияОтбора.Добавить(Условие);
	КонецЦикла;
	
	Сортировка = Запрос.orderBy; // СписокXDTO
	УсловиеСортировки = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMDynamicListSortingCondition");
	УсловиеСортировки.column = ПолеДляСортировки;
	Если НаправлениеСортировкиПоля = Истина Тогда
		УсловиеСортировки.sortingOperator = "DESC";
	Иначе
		УсловиеСортировки.sortingOperator = "ASC";
	КонецЕсли;
	Сортировка.Добавить(УсловиеСортировки);
	
	Если ОтображениеКарточкиЗадачи <> Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		ПолучаемыеПоля = Запрос.columnSet; // СписокXDTO
		ПолучаемыеПоля.Добавить("htmlView");
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос на установку флага задачи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеПоЗадаче - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеПоЗадаче
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMSetFlagRequest.
//
Функция УстановитьФлагЗадачиЗапрос(Прокси, ДанныеПоЗадаче) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMSetFlagRequest");
	СписокЗадач = Запрос.tasks; // СписокXDTO
	
	taskAction = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	taskAction.name = ДанныеПоЗадаче.ДействиеЗадачи.Наименование;
	taskAction.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеПоЗадаче.ДействиеЗадачи.ID,
		ДанныеПоЗадаче.ДействиеЗадачи.Тип);
	
	СписокЗадач.Добавить(taskAction);
	
	Если ЗначениеЗаполнено(ДанныеПоЗадаче.Флаг) Тогда
		Запрос.flag = ДанныеПоЗадаче.Флаг;
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Формирует объект XDTO, описывающий участника задачи.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Исполнитель - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMTaskParticipant.
//
Функция УчастникЗадачXDTO(Прокси, Исполнитель, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	МассивСтрокПредставления = Новый Массив;
	МассивСтрокПредставления.Добавить(Исполнитель.Наименование);
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресации)
			И ЗначениеЗаполнено(ОсновнойОбъектАдресации.Наименование) Тогда
		МассивСтрокПредставления.Добавить(ОсновнойОбъектАдресации.Наименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации)
			И ЗначениеЗаполнено(ДополнительныйОбъектАдресации.Наименование) Тогда
		МассивСтрокПредставления.Добавить(ДополнительныйОбъектАдресации.Наименование);
	КонецЕсли;
	Представление = СтрСоединить(МассивСтрокПредставления, ", ");
	
	УчастникЗадачXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMTaskParticipant");
	УчастникЗадачXDTO.name = Представление;
	
	Если Исполнитель.Тип = "DMEmployee" Тогда
		
		УчастникЗадачXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMEmployee");
		УчастникЗадачXDTO.employee = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMEmployee");
		УчастникЗадачXDTO.employee.name = Исполнитель.Наименование;
		УчастникЗадачXDTO.employee.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMEmployee");
		
	ИначеЕсли Исполнитель.Тип = "DMCompleteRole" Тогда
		
		УчастникЗадачXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMCompleteRole");
		УчастникЗадачXDTO.completeRole = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMCompleteRole");
		УчастникЗадачXDTO.completeRole.name = Исполнитель.Наименование;
		УчастникЗадачXDTO.completeRole.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			"DMCompleteRole");
		
	ИначеЕсли Исполнитель.Тип = "DMBusinessProcessExecutorRole" Тогда
		
		УчастникЗадачXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси);
		УчастникЗадачXDTO.completeRole = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMCompleteRole");
		УчастникЗадачXDTO.completeRole.name = Представление;
		УчастникЗадачXDTO.completeRole.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьПолнуюРоль(
			Прокси,
			УчастникЗадачXDTO.completeRole,
			Исполнитель,
			ОсновнойОбъектАдресации,
			ДополнительныйОбъектАдресации);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректно задан тип участника задачи: %1'"), Исполнитель.Тип);
		
	КонецЕсли;
	
	Возврат УчастникЗадачXDTO;
	
КонецФункции

// Заполняет реквизит, являющийся участником задач ДО, в приемнике по объекту УчастникЗадачXDTO.
//
// Параметры:
//   Приемник - Произвольный - объект, содержащий реквизиты или свойства,
//     которые должны быть заполнены по свойству объекта XDTO.
//   УчастникЗадачXDTO - ОбъектXDTO - объект XDTO типа DMTaskParticipant.
//   ИмяРеквизита - Строка - имя объектного реквизита.
//   ЗаполнятьПредставление - Булево - признак необходимости заполнения реквизита представления
//     по свойству objectID.presentation.
//
Процедура УчастникЗадачДО(Приемник, УчастникЗадачXDTO, ИмяРеквизита, ЗаполнятьПредставление = Истина) Экспорт
	
	Если УчастникЗадачXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(УчастникЗадачXDTO, "employee") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Приемник,
			УчастникЗадачXDTO.employee,
			ИмяРеквизита);
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			УчастникЗадачXDTO, "completeRole") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Приемник,
			УчастникЗадачXDTO.completeRole.role,
			ИмяРеквизита);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Приемник,
			УчастникЗадачXDTO.completeRole.mainAddressingObject,
			"ОсновнойОбъектАдресации" + ИмяРеквизита);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			Приемник,
			УчастникЗадачXDTO.completeRole.secondaryAddressingObject,
			"ДополнительныйОбъектАдресации" + ИмяРеквизита);
	КонецЕсли;
	
	Если ЗаполнятьПредставление Тогда
		Приемник[ИмяРеквизита + "Представление"] =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ПредставлениеУчастникаЗадачи(
				Приемник[ИмяРеквизита],
				Приемник["ОсновнойОбъектАдресации" + ИмяРеквизита],
				Приемник["ДополнительныйОбъектАдресации" + ИмяРеквизита]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Обработка

// Выполняет перерисовку обработки в форме.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма с деревом обработки.
//   ДанныеОбОбработкеXDTO - ОбъектXDTO - объект XDTO типа DMGetCurrentObjectProcessingResponse.
//
Процедура ЗаполнитьОбработкуВФорме(Форма, ДанныеОбОбработкеXDTO) Экспорт
	
	ДоступнаПечать = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.14.31");
	
	ДеревоДействий = Форма.РеквизитФормыВЗначение("Действия"); // ДеревоЗначений
	ДеревоДействий.Строки.Очистить();
	КоличествоДействий = 0;
	
	ТипПредмета = Неопределено;
	Форма.СостояниеОбработки = "";
	ЕстьПравоОстановкиОбработки = Ложь;
	ЕстьДействияОзнакомления = Ложь;
	ЕстьДействияСогласования = Ложь;
	ЗавершеноОтрицательноИЕстьЗамечания = Ложь;
	ИспользоватьВизыСогласования = Ложь;
	ДатаНачалаОбработки = Дата(1, 1, 1);
	ДатаИзмененияСостоянияОбработки = Дата(1, 1, 1);
	НДПС = Новый Структура;
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДополнитьНДПС(НДПС);
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			ДанныеОбОбработкеXDTO, "objectProcessing") Тогда
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
				ДанныеОбОбработкеXDTO.objectProcessing, "target") Тогда
			ТипПредмета = ДанныеОбОбработкеXDTO.objectProcessing.target.objectID.type;
		КонецЕсли;
		Форма.СостояниеОбработки = ДанныеОбОбработкеXDTO.objectProcessing.state;
		ЕстьПравоОстановкиОбработки = ДанныеОбОбработкеXDTO.objectProcessing.haveRightsToStopProcessing;
		ЕстьДействияОзнакомления = ДанныеОбОбработкеXDTO.objectProcessing.haveExaminationActions;
		ЕстьДействияСогласования = ДанныеОбОбработкеXDTO.objectProcessing.haveApprovalActions;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
				ДанныеОбОбработкеXDTO.objectProcessing, "completedNegativelyWithComments") Тогда
			ЗавершеноОтрицательноИЕстьЗамечания = ДанныеОбОбработкеXDTO.objectProcessing.completedNegativelyWithComments;
		КонецЕсли;
		ИспользоватьВизыСогласования = ДанныеОбОбработкеXDTO.objectProcessing.useVisas;
		ДатаНачалаОбработки = ДанныеОбОбработкеXDTO.objectProcessing.startDate;
		ДатаИзмененияСостоянияОбработки = ДанныеОбОбработкеXDTO.objectProcessing.stateChangeDate;
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьНДПСизСвойствXDTO(
			НДПС,
			ДанныеОбОбработкеXDTO.objectProcessing,
			"stateAllowsStartAndTerminateProcessing,stateAllowsStopAndContinueProcessing,stateAllowsRestartProcessing");
		
		ДействияИзXDTO(ДанныеОбОбработкеXDTO.objectProcessing, ДеревоДействий.Строки, КоличествоДействий);
	КонецЕсли;
	
	Прервал = "";
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ДанныеОбОбработкеXDTO, "interrupted")
			И ЗначениеЗаполнено(ДанныеОбОбработкеXDTO.interrupted.objectID.presentation) Тогда
		Прервал = ДанныеОбОбработкеXDTO.interrupted.objectID.presentation;
	КонецЕсли;
	ПричинаПрерывания = ДанныеОбОбработкеXDTO.terminationReason;
	ДатаОкончания = ДанныеОбОбработкеXDTO.endDate;
	ОбработкаЗаданаПравилами = ДанныеОбОбработкеXDTO.processingIsSetByRules;
	
	Форма.Элементы.ДекорацияСостояния.Видимость = Ложь;
	Форма.Элементы.ДекорацияОписание.Видимость = Истина;
	Форма.Элементы.ДекорацияОписание.РастягиватьПоГоризонтали = Ложь;
	Форма.Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Не запущена'");
	Форма.Элементы.ДекорацияОписание.Подсказка = Форма.Элементы.ДекорацияОписание.Заголовок;
	Форма.Элементы.ДействияОтправить.Видимость = (КоличествоДействий > 0);
	Форма.Элементы.ДекорацияОшибкаДействия.Видимость = Ложь;
	Форма.Элементы.ДействияПерезапуститьОбработку.Видимость = Ложь;
	Форма.Элементы.ДействияПечатьЛистСогласования.Видимость = ДоступнаПечать
		И ЕстьДействияСогласования
		И ИспользоватьВизыСогласования;
	Форма.Элементы.ПечатьЛистСогласованияСИсторией.Видимость = ДоступнаПечать
		И ЕстьДействияСогласования
		И ИспользоватьВизыСогласования;
	Форма.Элементы.ЛистОзнакомления.Видимость = ДоступнаПечать И ЕстьДействияОзнакомления;
	Форма.Элементы.ДействияПротоколРазногласий.Видимость = ДоступнаПечать И ЗавершеноОтрицательноИЕстьЗамечания;
	Форма.Элементы.ДействияОстановить.Видимость = Ложь;
	Форма.Элементы.ДекорацияОтступСостояния.Видимость = Ложь;
	
	Если Не ЗначениеЗаполнено(Форма.СостояниеОбработки) Или Форма.СостояниеОбработки = "Terminated" Тогда
		
		Если КоличествоДействий > 0 Тогда
			Форма.Элементы.ДействияОтправить.Заголовок = НСтр("ru = 'Начать обработку'");
			Если ТипПредмета = "DMDocument" Тогда
				Подсказка = НСтр("ru = 'Начать обработку документа'");
			Иначе
				Подсказка = НСтр("ru = 'Начать обработку мероприятия'");
			КонецЕсли;
			
			Если ТипЗнч(Форма.Элементы.ДействияОтправить) = Тип("КнопкаФормы") Тогда
				Форма.Команды[Форма.Элементы.ДействияОтправить.ИмяКоманды].Подсказка = Подсказка;
			Иначе
				Форма.Элементы.ДействияОтправить.Подсказка = Подсказка;
			КонецЕсли;
			
			Форма.Элементы.ДействияОтправить.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Форма.Элементы.ДействияОтправить.Картинка = БиблиотекаКартинок.СформироватьОтчет;
		Иначе
			// Нет действий.
			Форма.Элементы.ДействияОтправить.Видимость = Ложь;
		КонецЕсли;
		Форма.Элементы.ДекорацияОписание.Видимость = Ложь;
		
	ИначеЕсли Форма.СостояниеОбработки = "Executing" Или Форма.СостояниеОбработки = "Stopped" Тогда
		
		Если ЕстьПравоОстановкиОбработки Тогда
			Форма.Элементы.ДействияОтправить.Заголовок = НСтр("ru = 'Прервать'");
			Если ТипПредмета = "DMDocument" Тогда
				Подсказка = НСтр("ru = 'Прервать обработку документа'");
			Иначе
				Подсказка = НСтр("ru = 'Прервать обработку мероприятия'");
			КонецЕсли;
			Если ТипЗнч(Форма.Элементы.ДействияОтправить) = Тип("КнопкаФормы") Тогда
				Форма.Команды[Форма.Элементы.ДействияОтправить.ИмяКоманды].Подсказка = Подсказка;
			Иначе
				Форма.Элементы.ДействияОтправить.Подсказка = Подсказка;
			КонецЕсли;
			
			Форма.Элементы.ДействияОтправить.Отображение = ОтображениеКнопки.Картинка;
			Форма.Элементы.ДействияОтправить.Картинка = БиблиотекаКартинок.ПрерватьОбработку;
			Форма.Элементы.ДекорацияОтступСостояния.Видимость = Истина;
			
			Форма.Элементы.ДействияОстановить.Видимость = Истина;
			Если Форма.СостояниеОбработки = "Executing" Тогда
				Форма.Элементы.ДействияОстановить.Заголовок = НСтр("ru = 'На паузу'");
				Если ТипПредмета = "DMDocument" Тогда
					Подсказка = НСтр("ru = 'Поставить обработку документа на паузу'");
				Иначе
					Подсказка = НСтр("ru = 'Поставить обработку мероприятия на паузу'");
				КонецЕсли;
				Форма.Элементы.ДействияОстановить.Картинка = БиблиотекаКартинок.ЗнакПауза;
			ИначеЕсли Форма.СостояниеОбработки = "Stopped" Тогда
				Форма.Элементы.ДействияОстановить.Заголовок = НСтр("ru = 'Продолжить'");
				Форма.Элементы.ДекорацияОтступСостояния.Видимость = Истина;
				Если ТипПредмета = "DMDocument" Тогда
					Подсказка = НСтр("ru = 'Продолжить обработку документа'");
				Иначе
					Подсказка = НСтр("ru = 'Продолжить обработку мероприятия'");
				КонецЕсли;
				Форма.Элементы.ДействияОстановить.Картинка = БиблиотекаКартинок.СформироватьОтчет;
			КонецЕсли;
			Если ТипЗнч(Форма.Элементы.ДействияОтправить) = Тип("КнопкаФормы") Тогда
				Форма.Команды[Форма.Элементы.ДействияОстановить.ИмяКоманды].Подсказка = Подсказка;
			Иначе
				Форма.Элементы.ДействияОстановить.Подсказка = Подсказка;
			КонецЕсли;
			
		Иначе
			// Простой пользователь не может прервать процесс.
			Форма.Элементы.ДействияОтправить.Видимость = Ложь;
			Форма.Элементы.ДействияОтправить.Заголовок = "";
			Форма.Элементы.ДействияОстановить.Видимость = Ложь;
			Если ТипЗнч(Форма.Элементы.ДействияОтправить) = Тип("КнопкаФормы") Тогда
				Форма.Команды[Форма.Элементы.ДействияОтправить.ИмяКоманды].Подсказка =
					Форма.Элементы.ДействияОтправить.Заголовок;
			Иначе
				Форма.Элементы.ДействияОтправить.Подсказка = Форма.Элементы.ДействияОтправить.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если Форма.СостояниеОбработки = "Executing" Тогда
			Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.СформироватьОтчет;
			Форма.Элементы.ДекорацияОписание.Заголовок = СтрШаблон(НСтр("ru = 'Обработка начата %1'"),
				Формат(ДатаНачалаОбработки, НСтр("ru = 'ДФ=''dd.MM.yyyy HH:mm'''")));
		ИначеЕсли Форма.СостояниеОбработки = "Stopped" Тогда
			Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПауза;
			Форма.Элементы.ДекорацияОписание.Заголовок = СтрШаблон(НСтр("ru = 'Обработка на паузе с %1'"),
				Формат(ДатаИзмененияСостоянияОбработки, НСтр("ru = 'ДФ=''HH:mm dd.MM.yyyy'''")));
		КонецЕсли;
		Форма.Элементы.ДекорацияОписание.Подсказка = Форма.Элементы.ДекорацияОписание.Заголовок;
		Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
		
	ИначеЕсли Форма.СостояниеОбработки = "Completed" Тогда
		
		Форма.Элементы.ДействияПерезапуститьОбработку.Видимость = Истина;
		Форма.Элементы.ДействияОтправить.Видимость = Ложь;
		
		Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ОформлениеФлажок;
		Форма.Элементы.ДекорацияОписание.Заголовок = СтрШаблон(НСтр("ru = 'Обработка завершена  %1'"),
			Формат(ДатаИзмененияСостоянияОбработки, НСтр("ru = 'ДФ=''dd.MM.yyyy HH:mm'''")));
		Форма.Элементы.ДекорацияОписание.Подсказка = Форма.Элементы.ДекорацияОписание.Заголовок;
		Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
		
	КонецЕсли;
	
	Форма.Элементы.ДействияОтправить.Доступность = Не Форма.ТолькоПросмотр И НДПС.СостояниеРазрешаетНачатьОбработку;
	Форма.Элементы.ДействияОстановить.Доступность = Не Форма.ТолькоПросмотр И НДПС.СостояниеРазрешаетОстановитьОбработку;
	Форма.Элементы.ДействияПерезапуститьОбработку.Доступность = Не Форма.ТолькоПросмотр
		И НДПС.СостояниеРазрешаетПерезапуститьОбработку;
	
	Форма.Элементы.ДействияЗаполнить.Видимость = ОбработкаЗаданаПравилами;
	
	Форма.Элементы.ГруппаКнопкиЗапуска.Видимость = Истина;
	Форма.Элементы.ГруппаИнформацияОПрерыванииОбработки.Видимость = Ложь;
	Форма.Элементы.ГруппаПрервалОбработку.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Форма.Элементы.ГруппаИнформацияОПрерыванииОбработки.Видимость = Истина;
		Форма.Элементы.ДействияНадписьПричинаПрерыванияОбработки.АвтоМаксимальнаяШирина = Ложь;
		ЖирныйШрифт = ШрифтыСтиля.ВажнаяНадписьШрифт;
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ПрерватьОбработку));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Обработка прервана:'"), ЖирныйШрифт));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(ДатаОкончания, НСтр("ru = 'ДФ=''dd.MM.yyyy HH:mm'''"))));
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
		Если ЗначениеЗаполнено(ПричинаПрерывания) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Причина:'"), ЖирныйШрифт));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПричинаПрерывания));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС));
		КонецЕсли;
		Форма.Элементы.ДействияНадписьПричинаПрерыванияОбработки.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		Если ЗначениеЗаполнено(Прервал) Тогда
			Форма.Элементы.ГруппаПрервалОбработку.Видимость = Истина;
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Прервал:'"), ЖирныйШрифт));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.НПП));
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Прервал));
			Форма.Элементы.ДействияНадписьПрервал.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоДействий, "Действия");
	
	Если КоличествоДействий = 0 И Не ОбработкаЗаданаПравилами И Не Форма.Элементы.ДекорацияОписание.Видимость Тогда
		Если ТипПредмета = "DMDocument" Тогда
			Шаблон = НСтр("ru = 'Для документов вида ""%1"" обработка не настроена'");
		Иначе
			Шаблон = НСтр("ru = 'Для мероприятий вида ""%1"" обработка не настроена'");
		КонецЕсли;
		Форма.Элементы.ДекорацияСостояния.Видимость = Истина;
		Форма.Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.Информация;
		Форма.Элементы.ДекорацияОписание.Видимость = Истина;
		Форма.Элементы.ДекорацияОписание.РастягиватьПоГоризонтали = Истина;
		Форма.Элементы.ДекорацияОписание.Заголовок = СтрШаблон(Шаблон, Форма.ВидОбъектаДО);
		Форма.Элементы.ДекорацияОписание.Подсказка = Форма.Элементы.ДекорацияОписание.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает запрос на заполнение обработки.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеОбработки - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеОбработки
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMFillProcessingRequest.
//
Функция ЗаполнитьОбработкуЗапрос(Прокси, ДанныеОбработки) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMFillProcessingRequest");
	
	Запрос.object = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеОбработки.ПредметID,
		ДанныеОбработки.ПредметТип);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос на запуск обработки.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеОбработки - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеОбработки
//   ВнешнийОбъект - ЛюбаяСсылка - ссылка на объект ИС.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMStartProcessingRequest.
//
Функция НачатьОбработкуЗапрос(Прокси, ДанныеОбработки, ВнешнийОбъект = Неопределено) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMStartProcessingRequest");
	
	Запрос.object = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеОбработки.ПредметID,
		ДанныеОбработки.ПредметТип);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(Запрос, "link")
			И ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		Запрос.link = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьDMLink(
			Прокси,
			ДанныеОбработки.ПредметID,
			ДанныеОбработки.ПредметТип,
			ВнешнийОбъект);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Проверяет возможно ли запустить обработку объекта указанного типа.
//
// Параметры:
//   ТипОбъектаXDTO - Строка - тип объекта.
//
// Возвращаемое значение:
//   Булево
//
Функция ОбъектДОПоддерживаетОбработку(ТипОбъектаXDTO) Экспорт
	
	ОбъектыСПоддержкойОбработки = Новый Массив;
	ОбъектыСПоддержкойОбработки.Добавить("DMMeeting");
	
	Возврат ЭтоДокументДО3(ТипОбъектаXDTO) Или ОбъектыСПоддержкойОбработки.Найти(ТипОбъектаXDTO) <> Неопределено;
	
КонецФункции

// Возвращает запрос на остановку обработки.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеОбработки - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеОбработки
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMStopContinueProcessingRequest.
//
Функция ОстановитьОбработкуЗапрос(Прокси, ДанныеОбработки) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMStopContinueProcessingRequest");
	
	Запрос.objectProcessingState = "Stopped";
	Запрос.object = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеОбработки.ПредметID,
		ДанныеОбработки.ПредметТип);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос на перезапуск обработки.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеОбработки - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеОбработки
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMRestartProcessingRequest.
//
Функция ПерезапуститьОбработкуЗапрос(Прокси, ДанныеОбработки) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMRestartProcessingRequest");
	
	Запрос.object = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеОбработки.ПредметID,
		ДанныеОбработки.ПредметТип);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос на прерывание обработки.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеОбработки - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеОбработки
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMTerminateProcessingRequest.
//
Функция ПрерватьОбработкуЗапрос(Прокси, ДанныеОбработки) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMTerminateProcessingRequest");
	
	Запрос.terminationReason = ДанныеОбработки.ПричинаПрерывания;
	Запрос.object = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеОбработки.ПредметID,
		ДанныеОбработки.ПредметТип);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос на продолжение обработки.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ДанныеОбработки - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ДанныеОбработки
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMStopContinueProcessingRequest.
//
Функция ПродолжитьОбработкуЗапрос(Прокси, ДанныеОбработки) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMStopContinueProcessingRequest");
	
	Запрос.objectProcessingState = "Executing";
	Запрос.object = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		ДанныеОбработки.ПредметID,
		ДанныеОбработки.ПредметТип);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает запрос к 1С:Документообороту на получение текущей обработки объекта.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   ID - Строка - идентификатор объекта XDTO.
//   Тип - Строка - тип объекта XDTO.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMGetCurrentObjectProcessingRequest.
//
Функция ТекущаяОбработкаОбъектаЗапрос(Прокси, ID, Тип) Экспорт
	
	Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMGetCurrentObjectProcessingRequest");
	Запрос.target = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси, ID, Тип);
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область Действия

// Возвращает дочерних участников действия.
//
// Параметры:
//   Участники - СписокXDTO - список участников действия.
//   ИдентификаторРодителя - Строка - идентификатор вышестоящего участника.
//
// Возвращаемое значение:
//   Массив Из ОбъектXDTO
//
Функция ДочерниеУчастникиДействия(Участники, ИдентификаторРодителя) Экспорт
	
	ДочерниеУчастники = Новый Массив;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		Если СтрокаУчастника.higherLevelParticipant = ИдентификаторРодителя Тогда
			ДочерниеУчастники.Добавить(СтрокаУчастника);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДочерниеУчастники;
	
КонецФункции

// Заполняет состояния действий конкретных участников в форме действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ДействиеXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
Процедура ЗаполнитьСостоянияИРезультатыВФормеДействия(Форма, ДействиеXDTO) Экспорт
	
	Элементы = Форма.Элементы;
	Если Форма.РежимДиалога Тогда
		Элементы.УчастникиНомерКартинки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ВсеСостоянияИРезультаты = ВсеСостоянияИРезультаты(ДействиеXDTO);
	
	Если ВсеСостоянияИРезультаты.Количество() = 0 Тогда
		Элементы.УчастникиНомерКартинки.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	// Установка состояний и результатов.
	СтрокиДляОбработки = Новый Массив;
	
	Для Каждого СтрокаУчастника Из Форма.Участники.ПолучитьЭлементы() Цикл
		СтрокиДляОбработки.Добавить(СтрокаУчастника.ПолучитьИдентификатор());
		Для Каждого ПодчиненнаяСтрока Из СтрокаУчастника.ПолучитьЭлементы() Цикл
			СтрокиДляОбработки.Добавить(ПодчиненнаяСтрока.ПолучитьИдентификатор());
			Для Каждого СтрокаОбеспечивающего Из ПодчиненнаяСтрока.ПолучитьЭлементы() Цикл
				СтрокиДляОбработки.Добавить(СтрокаОбеспечивающего.ПолучитьИдентификатор());
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Результаты и картинки исполнителей.
	ДатаУстановкиСостоянийУчастниками = Новый Соответствие();
	
	Для Каждого ИдентификаторСтроки Из СтрокиДляОбработки Цикл
		
		Строка = Форма.Участники.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Строка.ЭтоЭтап Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Действие", ДействиеXDTO.name);
		СтруктураОтбора.Вставить("ДействиеID", ДействиеXDTO.objectID.ID);
		СтруктураОтбора.Вставить("ДействиеТип", ДействиеXDTO.objectID.type);
		СтруктураОтбора.Вставить("Функция", Строка.Функция);
		СтруктураОтбора.Вставить("ИдентификаторУчастника", Строка.Идентификатор);
		НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 И ЗначениеЗаполнено(Строка.УчастникID) Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Действие", ДействиеXDTO.name);
			СтруктураОтбора.Вставить("ДействиеID", ДействиеXDTO.objectID.ID);
			СтруктураОтбора.Вставить("ДействиеТип", ДействиеXDTO.objectID.type);
			СтруктураОтбора.Вставить("ИдентификаторУчастника", Строка.УчастникID);
			НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			Строка.Результат = НайденнаяСтрока.Результат;
			Строка.Состояние = НайденнаяСтрока.Состояние;
			Строка.НомерКартинки = ИнтеграцияС1СДокументооборот3КлиентСервер.НомерКартинкиРезультатаВыполненияДействия(
				Строка.Результат,
				Строка.Состояние);
			
			ДатаУстановкиСостоянийУчастниками[НайденнаяСтрока.ИдентификаторУчастника] = НайденнаяСтрока.Дата;
		КонецЕсли;
		
	КонецЦикла;
	
	// Дата установки состояния действия.
	ДатаУстановкиСостоянияДействия = Дата(1, 1, 1);
	СостояниеДействия = "";
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Действие", ДействиеXDTO.name);
	СтруктураОтбора.Вставить("ДействиеID", ДействиеXDTO.objectID.ID);
	СтруктураОтбора.Вставить("ДействиеТип", ДействиеXDTO.objectID.type);
	СтруктураОтбора.Вставить("Функция", "");
	СтруктураОтбора.Вставить("ИдентификаторУчастника", "");
	СтруктураОтбора.Вставить("ИдентификаторПункта", "00000000-0000-0000-0000-000000000000");
	НайденныеСтроки = ВсеСостоянияИРезультаты.НайтиСтроки(СтруктураОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДатаУстановкиСостоянияДействия = НайденныеСтроки[0].Дата;
		СостояниеДействия = НайденныеСтроки[0].Состояние;
	КонецЕсли;
	
	// Результаты и картинки этапов по результатам исполнителей.
	Для Каждого ИдентификаторСтроки Из СтрокиДляОбработки Цикл
		
		Строка = Форма.Участники.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Не Строка.ЭтоЭтап Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщееСостояние = Неопределено;
		ОбщийРезультат = Неопределено;
		
		ПодчиненныеСтроки = Строка.ПолучитьЭлементы();
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			ДатаУстановкиСостояния = ДатаУстановкиСостоянийУчастниками[ПодчиненнаяСтрока.Идентификатор];
			
			Если СостояниеДействия = "Completed"
					И ЗначениеЗаполнено(ДатаУстановкиСостояния)
					И ЗначениеЗаполнено(ДатаУстановкиСостоянияДействия)
					И ДатаУстановкиСостояния > ДатаУстановкиСостоянияДействия Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщийРезультат = ИнтеграцияС1СДокументооборот3КлиентСервер.ОбщийРезультатДействия(
				ОбщийРезультат,
				ПодчиненнаяСтрока.Результат);
			ОбщееСостояние = ИнтеграцияС1СДокументооборот3КлиентСервер.ОбщееСостояниеДействия(
				ОбщееСостояние,
				ПодчиненнаяСтрока.Состояние);
		КонецЦикла;
		
		Строка.Состояние = ОбщееСостояние;
		Строка.Результат = ?(ОбщееСостояние = "Performing",
			Неопределено,
			ОбщийРезультат);
		
		Строка.НомерКартинки = ИнтеграцияС1СДокументооборот3КлиентСервер.НомерКартинкиРезультатаВыполненияДействия(
			Строка.Результат,
			ОбщееСостояние);
		
	КонецЦикла;
	
	// Отображение задержки запуска.
	Если Элементы.Найти("ГруппаОписаниеОтложенногоВыполнения") <> Неопределено
			И Элементы.ГруппаОписаниеОтложенногоВыполнения.Видимость = Истина
			И ЗначениеЗаполнено(СостояниеДействия) Тогда
		Если СостояниеДействия = "DelayedStart" Тогда
			ИнтеграцияС1СДокументооборот3КлиентСервер.НастроитьОтображениеОтложенногоНачалаВыполненияДействия(
				Форма,
				Форма.ПредставлениеЗапуска,
				Форма.Команды.ОчиститьЗадержку.Подсказка,
				Форма.Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка);
		Иначе
			Элементы.ГруппаОписаниеОтложенногоВыполнения.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку участника действия XDTO из строки дерева значений Участники в форме действия.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//   СтрокаУчастника - ДанныеФормыЭлементДерева - строка дерева значений Участники в форме действия.
//
Процедура ЗаполнитьСтрокуXDTOИзУчастникаДействия(Прокси, СтрокаXDTO, СтрокаУчастника) Экспорт
	
	СтруктураСтрокиУчастника = СтруктураСтрокиУчастника();
	ЗаполнитьЗначенияСвойств(СтруктураСтрокиУчастника, СтрокаУчастника);
	
	// Свойства объекта DMActionParticipantRow.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "participant")
			И ЗначениеЗаполнено(СтруктураСтрокиУчастника.УчастникID) Тогда
		Участник = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
			СтруктураСтрокиУчастника.УчастникID,
			СтруктураСтрокиУчастника.УчастникТип,
			СтруктураСтрокиУчастника.Участник);
		ДанныеОсновнойОбъектАдресацииУчастник =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				СтруктураСтрокиУчастника.ОсновнойОбъектАдресацииУчастникID,
				СтруктураСтрокиУчастника.ОсновнойОбъектАдресацииУчастникТип,
				СтруктураСтрокиУчастника.ОсновнойОбъектАдресацииУчастник);
		ДанныеДополнительныйОбъектАдресацииУчастник =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				СтруктураСтрокиУчастника.ДополнительныйОбъектАдресацииУчастникID,
				СтруктураСтрокиУчастника.ДополнительныйОбъектАдресацииУчастникТип,
				СтруктураСтрокиУчастника.ДополнительныйОбъектАдресацииУчастник);
		СтрокаXDTO.participant = УчастникДействияXDTO(
			Прокси,
			Участник,
			ДанныеОсновнойОбъектАдресацииУчастник,
			ДанныеДополнительныйОбъектАдресацииУчастник);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "id")
			И СтруктураСтрокиУчастника.Идентификатор <> Неопределено Тогда
		СтрокаXDTO.id = СтруктураСтрокиУчастника.Идентификатор;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "description")
			И СтруктураСтрокиУчастника.Описание <> Неопределено Тогда
		СтрокаXDTO.description = СтруктураСтрокиУчастника.Описание;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "dueDate")
			И СтруктураСтрокиУчастника.Срок <> Неопределено Тогда
		СтрокаXDTO.dueDate = СтруктураСтрокиУчастника.Срок;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "dueDateDays")
			И СтруктураСтрокиУчастника.СрокДни <> Неопределено Тогда
		СтрокаXDTO.dueDateDays = СтруктураСтрокиУчастника.СрокДни;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "dueDateHours")
			И СтруктураСтрокиУчастника.СрокЧасы <> Неопределено Тогда
		СтрокаXDTO.dueDateHours = СтруктураСтрокиУчастника.СрокЧасы;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "dueDateMinutes")
			И СтруктураСтрокиУчастника.СрокМинуты <> Неопределено Тогда
		СтрокаXDTO.dueDateMinutes = СтруктураСтрокиУчастника.СрокМинуты;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "fromSettings")
			И СтруктураСтрокиУчастника.ИзНастройки <> Неопределено Тогда
		СтрокаXDTO.fromSettings = СтруктураСтрокиУчастника.ИзНастройки;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "protected")
			И СтруктураСтрокиУчастника.Защищенный <> Неопределено Тогда
		СтрокаXDTO.protected = СтруктураСтрокиУчастника.Защищенный;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "protectedInSettings")
			И СтруктураСтрокиУчастника.ЗащищенныйВНастройке <> Неопределено Тогда
		СтрокаXDTO.protectedInSettings = СтруктураСтрокиУчастника.ЗащищенныйВНастройке;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "dueDateSpecificationVariant")
			И СтруктураСтрокиУчастника.ВариантУстановкиСрока <> Неопределено
			И ЗначениеЗаполнено(СтруктураСтрокиУчастника.ВариантУстановкиСрока) Тогда
		// Перечисление.
		СтрокаXDTO.dueDateSpecificationVariant = СтруктураСтрокиУчастника.ВариантУстановкиСрока;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "dueDatePresentation")
			И СтруктураСтрокиУчастника.СрокПредставление <> Неопределено Тогда
		СтрокаXDTO.dueDatePresentation = СтруктураСтрокиУчастника.СрокПредставление;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "presentation")
			И СтруктураСтрокиУчастника.ПредставлениеСтроки <> Неопределено Тогда
		СтрокаXDTO.presentation = СтруктураСтрокиУчастника.ПредставлениеСтроки;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "condition")
			И СтруктураСтрокиУчастника.УсловиеID <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси,
			СтруктураСтрокиУчастника,
			"Условие",
			СтрокаXDTO.condition);
	КонецЕсли;
	
	// Свойства наследников объекта DMActionParticipantRow.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "stageID")
			И СтруктураСтрокиУчастника.ИдентификаторЭтапа <> Неопределено Тогда
		СтрокаXDTO.stageID = СтруктураСтрокиУчастника.ИдентификаторЭтапа;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "pointID")
			И СтруктураСтрокиУчастника.ИдентификаторПункта <> Неопределено Тогда
		СтрокаXDTO.pointID = СтруктураСтрокиУчастника.ИдентификаторПункта;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "higherLevelParticipant")
			И СтруктураСтрокиУчастника.ВышестоящийУчастник <> Неопределено Тогда
		СтрокаXDTO.higherLevelParticipant = СтруктураСтрокиУчастника.ВышестоящийУчастник;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "dueDateTotal")
			И СтруктураСтрокиУчастника.СрокОбщий <> Неопределено Тогда
		СтрокаXDTO.dueDateTotal = СтруктураСтрокиУчастника.СрокОбщий;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "taskDescription")
			И СтруктураСтрокиУчастника.НаименованиеЗадачи <> Неопределено Тогда
		СтрокаXDTO.taskDescription = СтруктураСтрокиУчастника.НаименованиеЗадачи;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "resolutionDraft")
			И СтруктураСтрокиУчастника.ПроектРезолюции <> Неопределено Тогда
		СтрокаXDTO.resolutionDraft = СтруктураСтрокиУчастника.ПроектРезолюции;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "resolutionExist")
			И СтруктураСтрокиУчастника.ЕстьРезолюция <> Неопределено Тогда
		СтрокаXDTO.resolutionExist = СтруктураСтрокиУчастника.ЕстьРезолюция;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "resolutionPresentation")
			И СтруктураСтрокиУчастника.ПредставлениеРезолюции <> Неопределено Тогда
		СтрокаXDTO.resolutionPresentation = СтруктураСтрокиУчастника.ПредставлениеРезолюции;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "responsible")
			И СтруктураСтрокиУчастника.Ответственный <> Неопределено Тогда
		СтрокаXDTO.responsible = СтруктураСтрокиУчастника.Ответственный;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "participantFunction")
			И СтруктураСтрокиУчастника.ФункцияУчастника <> Неопределено
			И ЗначениеЗаполнено(СтруктураСтрокиУчастника.ФункцияУчастника) Тогда
		// Перечисление.
		СтрокаXDTO.participantFunction = СтруктураСтрокиУчастника.ФункцияУчастника;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "number")
			И СтруктураСтрокиУчастника.Номер <> Неопределено Тогда
		СтрокаXDTO.number = СтруктураСтрокиУчастника.Номер;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "dataSource")
			И СтруктураСтрокиУчастника.ИсточникДанныхID <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси,
			СтруктураСтрокиУчастника,
			"ИсточникДанных",
			СтрокаXDTO.dataSource);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "controller")
			И ЗначениеЗаполнено(СтруктураСтрокиУчастника.КонтролерID) Тогда
		Контролер = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
			СтруктураСтрокиУчастника.КонтролерID,
			СтруктураСтрокиУчастника.КонтролерТип,
			СтруктураСтрокиУчастника.Контролер);
		ДанныеОсновнойОбъектАдресацииКонтролер =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				СтруктураСтрокиУчастника.ОсновнойОбъектАдресацииКонтролерID,
				СтруктураСтрокиУчастника.ОсновнойОбъектАдресацииКонтролерТип,
				СтруктураСтрокиУчастника.ОсновнойОбъектАдресацииКонтролер);
		ДанныеДополнительныйОбъектАдресацииКонтролер =
			ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
				СтруктураСтрокиУчастника.ДополнительныйОбъектАдресацииКонтролерID,
				СтруктураСтрокиУчастника.ДополнительныйОбъектАдресацииКонтролерТип,
				СтруктураСтрокиУчастника.ДополнительныйОбъектАдресацииКонтролер);
		СтрокаXDTO.controller = УчастникДействияXDTO(
			Прокси,
			Контролер,
			ДанныеОсновнойОбъектАдресацииКонтролер,
			ДанныеДополнительныйОбъектАдресацииКонтролер);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "author")
			И ЗначениеЗаполнено(СтруктураСтрокиУчастника.АвторID) Тогда
		Автор = ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
			СтруктураСтрокиУчастника.АвторID,
			СтруктураСтрокиУчастника.АвторТип,
			СтруктураСтрокиУчастника.Автор);
		СтрокаXDTO.author = УчастникДействияXDTO(Прокси, Автор);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "organization")
			И СтруктураСтрокиУчастника.ОрганизацияID <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси,
			СтруктураСтрокиУчастника,
			"Организация",
			СтрокаXDTO.organization);
	КонецЕсли;
	
	// Свойства наследников объекта DMActionStageRow.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "rankFrom")
			И СтруктураСтрокиУчастника.РангС <> Неопределено Тогда
		СтрокаXDTO.rankFrom = СтруктураСтрокиУчастника.РангС;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "rankTo")
			И СтруктураСтрокиУчастника.РангПо <> Неопределено Тогда
		СтрокаXDTO.rankTo = СтруктураСтрокиУчастника.РангПо;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаXDTO, "orderOfExecutionByParticipants")
			И СтруктураСтрокиУчастника.ПорядокВыполненияУчастниками <> Неопределено
			И ЗначениеЗаполнено(СтруктураСтрокиУчастника.ПорядокВыполненияУчастниками) Тогда
		// Перечисление.
		СтрокаXDTO.orderOfExecutionByParticipants = СтруктураСтрокиУчастника.ПорядокВыполненияУчастниками;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку дерева значений Участники в форме действия.
//
// Параметры:
//   СтрокаУчастника - ДанныеФормыЭлементДерева - строка дерева значений Участники в форме действия.
//   СтрокаXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMActionParticipantRow.
//
Процедура ЗаполнитьСтрокуУчастникаДействияИзXDTO(СтрокаУчастника, СтрокаXDTO) Экспорт
	
	СтруктураСтрокиУчастника = СтруктураСтрокиУчастника();
	
	// Свойства объекта DMActionParticipantRow.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "participant") Тогда
		УчастникДействияДО(СтруктураСтрокиУчастника, СтрокаXDTO.participant, "Участник");
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "id") Тогда
		СтруктураСтрокиУчастника.Идентификатор = СтрокаXDTO.id;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "description") Тогда
		СтруктураСтрокиУчастника.Описание = СтрокаXDTO.description;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dueDate") Тогда
		СтруктураСтрокиУчастника.Срок = СтрокаXDTO.dueDate;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dueDateDays") Тогда
		СтруктураСтрокиУчастника.СрокДни = СтрокаXDTO.dueDateDays;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dueDateHours") Тогда
		СтруктураСтрокиУчастника.СрокЧасы = СтрокаXDTO.dueDateHours;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dueDateMinutes") Тогда
		СтруктураСтрокиУчастника.СрокМинуты = СтрокаXDTO.dueDateMinutes;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "fromSettings") Тогда
		СтруктураСтрокиУчастника.ИзНастройки = СтрокаXDTO.fromSettings;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "protected") Тогда
		СтруктураСтрокиУчастника.Защищенный = СтрокаXDTO.protected;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "protectedInSettings") Тогда
		СтруктураСтрокиУчастника.ЗащищенныйВНастройке = СтрокаXDTO.protectedInSettings;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dueDateSpecificationVariant") Тогда
		СтруктураСтрокиУчастника.ВариантУстановкиСрока = СтрокаXDTO.dueDateSpecificationVariant;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dueDatePresentation") Тогда
		СтруктураСтрокиУчастника.СрокПредставление = СтрокаXDTO.dueDatePresentation;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "presentation") Тогда
		СтруктураСтрокиУчастника.ПредставлениеСтроки = СтрокаXDTO.presentation;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "condition") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			СтруктураСтрокиУчастника,
			СтрокаXDTO.condition,
			"Условие",
			Истина);
	КонецЕсли;
	
	// Свойства наследников объекта DMActionParticipantRow.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "stageID") Тогда
		СтруктураСтрокиУчастника.ИдентификаторЭтапа = СтрокаXDTO.stageID;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "pointID") Тогда
		СтруктураСтрокиУчастника.ИдентификаторПункта = СтрокаXDTO.pointID;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "higherLevelParticipant") Тогда
		СтруктураСтрокиУчастника.ВышестоящийУчастник = СтрокаXDTO.higherLevelParticipant;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dueDateTotal") Тогда
		СтруктураСтрокиУчастника.СрокОбщий = СтрокаXDTO.dueDateTotal;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "taskDescription") Тогда
		СтруктураСтрокиУчастника.НаименованиеЗадачи = СтрокаXDTO.taskDescription;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "resolutionDraft") Тогда
		СтруктураСтрокиУчастника.ПроектРезолюции = СтрокаXDTO.resolutionDraft;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "resolutionExist") Тогда
		СтруктураСтрокиУчастника.ЕстьРезолюция = СтрокаXDTO.resolutionExist;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "resolutionPresentation") Тогда
		СтруктураСтрокиУчастника.ПредставлениеРезолюции = СтрокаXDTO.resolutionPresentation;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "responsible") Тогда
		СтруктураСтрокиУчастника.Ответственный = СтрокаXDTO.responsible;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "participantFunction") Тогда
		СтруктураСтрокиУчастника.ФункцияУчастника = СтрокаXDTO.participantFunction;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "number") Тогда
		СтруктураСтрокиУчастника.Номер = СтрокаXDTO.number;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dataSource") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			СтруктураСтрокиУчастника,
			СтрокаXDTO.dataSource,
			"ИсточникДанных",
			Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "controller") Тогда
		УчастникДействияДО(СтруктураСтрокиУчастника, СтрокаXDTO.controller, "Контролер");
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "author") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			СтруктураСтрокиУчастника,
			СтрокаXDTO.author,
			"Автор",
			Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "organization") Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			СтруктураСтрокиУчастника,
			СтрокаXDTO.organization,
			"Организация");
	КонецЕсли;
	
	// Свойства наследников объекта DMActionStageRow.
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "rankFrom") Тогда
		СтруктураСтрокиУчастника.РангС = СтрокаXDTO.rankFrom;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "rankTo") Тогда
		СтруктураСтрокиУчастника.РангПо = СтрокаXDTO.rankTo;
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "orderOfExecutionByParticipants") Тогда
		СтруктураСтрокиУчастника.ПорядокВыполненияУчастниками = СтрокаXDTO.orderOfExecutionByParticipants;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаУчастника, СтруктураСтрокиУчастника);
	
КонецПроцедуры

// Заполняет таблицу участников действия из объекта XDTO.
//
// Параметры:
//   ТаблицаУчастников - ТаблицаЗначений:
//     * УчастникID - Строка
//     * УчастникТип - Строка
//     * ОсновнойОбъектАдресацииУчастникID - Строка
//     * ОсновнойОбъектАдресацииУчастникТип - Строка
//     * ДополнительныйОбъектАдресацииУчастникID - Строка
//     * ДополнительныйОбъектАдресацииУчастникТип - Строка
//     * Идентификатор - Строка
//   ДействиеXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
Процедура ЗаполнитьТаблицуУчастниковДействия(ТаблицаУчастников, ДействиеXDTO) Экспорт
	
	ТаблицаУчастников.Очистить();
	Для Каждого СтрокаXDTO Из ДействиеXDTO.participantRows.rows Цикл
		ЗаполнитьСтрокуУчастникаДействияИзXDTO(ТаблицаУчастников.Добавить(), СтрокаXDTO);
	КонецЦикла;
	
КонецПроцедуры

// Обработчик, который вызывается после получения данных ДО в форме действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ДействиеXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
Процедура ОбработатьОтветВебСервисаНаПолучениеДействия(Форма, ДействиеXDTO) Экспорт
	
	Обработки.ИнтеграцияС1СДокументооборотБазоваяФункциональность.УстановитьНавигационнуюСсылку(Форма, ДействиеXDTO);
	
	ЗаполнитьДанныеДействия(Форма, ДействиеXDTO.form, ДействиеXDTO.changeAllowed, ДействиеXDTO.permissionRows.rows);
	
	Форма.Элементы.ГруппаДополнительно.ТолькоПросмотр = Не ДействиеXDTO.changeAllowed
		Или Форма.Элементы.ГруппаНедоступноДляИзменения.Видимость;
	
	Форма.МоментРазыменованияУчастников = ДействиеXDTO.participantsDereferenceMoment;
	Форма.ИсполнениеДействияСНовымиУчастниками = ДействиеXDTO.actionPerformedWithNewParticipants;
	Если Форма.ДоступнаНастройкаОтложенногоНачалаВыполнения Тогда
		Форма.ОтложенноеВыполнениеДата = ДействиеXDTO.delayedExecutionDate;
	КонецЕсли;
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ДействиеXDTO.author,
		"Автор",
		Истина);
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Форма,
		ДействиеXDTO.actionSettings,
		"НастройкаДействия");
	
	ЗаполнитьТаблицуУчастниковДействия(Форма.УчастникиПриОткрытии, ДействиеXDTO);
	
КонецПроцедуры

// Формирует объект XDTO для записи в Документообороте по данным из формы действия.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
Функция ПодготовитьДействиеДляЗаписи(Прокси, Форма) Экспорт
	
	ДействиеXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, Форма.Тип);
	ДействиеXDTO.name = "";
	ДействиеXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		Форма.ID,
		Форма.Тип);
	
	Если ЗначениеЗаполнено(Форма.АвторПредставление) Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси, Форма, "Автор", ДействиеXDTO.author, "DMEmployee");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.МоментРазыменованияУчастников) Тогда
		ДействиеXDTO.participantsDereferenceMoment = Форма.МоментРазыменованияУчастников;
	КонецЕсли;
	
	ДействиеXDTO.actionPerformedWithNewParticipants = Форма.ИсполнениеДействияСНовымиУчастниками;
	
	Если Форма.ДоступнаНастройкаОтложенногоНачалаВыполнения Тогда
		ДействиеXDTO.delayedExecutionDate = Форма.ОтложенноеВыполнениеДата;
		ДействиеXDTO.form = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMActionForm");
		ДействиеXDTO.form.delayedExecutionStartDays = Форма.ОтложенноеНачалоВыполненияДни;
		ДействиеXDTO.form.delayedExecutionStartHours = Форма.ОтложенноеНачалоВыполненияЧасы;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(ДействиеXDTO, "dialogueMode") Тогда
		ДействиеXDTO.dialogueMode = Форма.РежимДиалога;
	КонецЕсли;
	
	Возврат ДействиеXDTO;
	
КонецФункции

// Подсказка кнопки "Разные сроки" в некоторых формах действий.
//
// Параметры:
//   ПоПунктам - Булево - действие выполняется по пунктам.
//   ПоЭтапам - Булево - действие выполняется по этапам.
//
// Возвращаемое значение:
//   Строка - подсказка.
//
Функция ПодсказкаКнопкиРазныеСрокиДействия(ПоПунктам, ПоЭтапам) Экспорт
	
	Уточнение = "";
	Если ПоПунктам Тогда
		Уточнение = НСтр("ru = ', в пределах пункта,'")
	ИначеЕсли ПоЭтапам Тогда
		Уточнение = НСтр("ru = ', в пределах этапа,'")
	КонецЕсли;
	
	Возврат СтрШаблон(
		НСтр("ru = 'Если включен, то у каждого участника%1 можно указать свой срок'"), Уточнение);
	
КонецФункции

// Обработчик события ПриСозданииНаСервере формы действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   Параметры - Структура - структура параметров формы действия:
//     * ID - Строка
//     * type - Строка
//
Процедура ПриСозданииНаСервереФормыДействия(Форма, Параметры) Экспорт
	
	Если Параметры.Свойство("РежимДиалога") Тогда
		Форма.РежимДиалога = Параметры.РежимДиалога;
	КонецЕсли;
	
	Форма.ID = Параметры.ID;
	Форма.Тип = Параметры.type;
	
	Форма.ОсновнойПредметID = Параметры.ОсновнойПредметID;
	Форма.ОсновнойПредметТип = Параметры.ОсновнойПредметТип;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"УчастникиПриОткрытии",
		Новый ОписаниеТипов("ТаблицаЗначений"),,
		НСтр("ru = 'Участники при открытии'")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		"УчастникиПередЗаписью",
		Новый ОписаниеТипов("ТаблицаЗначений"),,
		НСтр("ru = 'Участники перед записью'")));
	ПоляТаблицы = СтрРазделить(ИнтеграцияС1СДокументооборот3КлиентСервер.ИменаПолейТаблицыУчастниковДействия(), ",");
	Для Каждого ИмяПоля Из ПоляТаблицы Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			ИмяПоля,
			Новый ОписаниеТипов("Строка"),
			"УчастникиПриОткрытии"));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			ИмяПоля,
			Новый ОписаниеТипов("Строка"),
			"УчастникиПередЗаписью"));
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Форма.ДоступнаНастройкаОтложенногоНачалаВыполнения =
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ДоступенФункционалВерсииСервиса("3.0.14.31");
	
КонецПроцедуры

// Устанавливает видимость команды направления действия с новыми участниками.
// В 1С:Документооборот соответствует ДействияСервер.УстановитьВидимостьНаправленияНовымУчастникам.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   СостояниеДействия - Строка - перечисление XDTO типа DMActionExecutionState.
//   Разрешения - СписокXDTO - список XDTO типа DMActionPermissionRows.
//
Процедура УстановитьВидимостьНаправленияНовымУчастникамДействия(Форма, СостояниеДействия, Разрешения) Экспорт
	
	НаправитьНовымУчастникам = Ложь;
	
	Если Не Форма.ИсполнениеДействияСНовымиУчастниками
			И (СостояниеДействия = "Completed" Или СостояниеДействия = "Skipped") Тогда
		
		ЕстьРазрешениеНаИзменение = Ложь;
		Для Каждого СтрокаРазрешения Из Разрешения Цикл
			Если СтрокаРазрешения.permission = "Allowed" Тогда
				ЕстьРазрешениеНаИзменение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьРазрешениеНаИзменение Тогда
			НаправитьНовымУчастникам = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.НаправитьНовымУчастникам.Видимость = НаправитьНовымУчастникам;
	
КонецПроцедуры

// Устанавливает видимость колонки "Условие", если в действии есть участники с условиями.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ДействиеXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
Процедура УстановитьВидимостьУсловийУчастниковДействия(Форма, ДействиеXDTO) Экспорт
	
	ЕстьУсловия = Ложь;
	
	Если ДействиеXDTO.participantsDereferenceMoment <> "WhenFillingOutProcessing" Тогда
		Для Каждого СтрокаУчастник Из ДействиеXDTO.participantRows.rows Цикл
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаУчастник, "condition")
					И ЗначениеЗаполнено(СтрокаУчастник.condition.objectID.ID) Тогда
				ЕстьУсловия = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Форма.Элементы.УчастникиУсловиеПредставление.Видимость = ЕстьУсловия;
	
КонецПроцедуры

// Устанавливает форме признак Только просмотр, если у по действию нет разрешения на изменение.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   Разрешения - ТаблицаЗначений - таблица разрешений:
//     * ИдентификаторЭтапа - Строка
//     * Разрешение - Строка
//
Процедура УстановитьДоступностьИзмененияУчастниковДействия(Форма, Разрешения) Экспорт
	
	Если Форма.ТолькоПросмотр = Истина Тогда
		Возврат;
	КонецЕсли;
	
	РазрешениеОбщее = Неопределено;
	Если Разрешения.Количество() > 0 Тогда
		РазрешениеОбщее = Разрешения[0].Разрешение;
	КонецЕсли;
	
	Форма.ТолькоПросмотр = (Форма.ТолькоПросмотр Или РазрешениеОбщее = "Forbidden")
		И Не Форма.МожноТолькоДобавлятьУчастников;
	
	Форма.Элементы.ГруппаОписаниеОтложенногоВыполнения.Доступность = Не Форма.ТолькоПросмотр;
	
КонецПроцедуры

// Формирует объект XDTO, описывающий участника действия.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Исполнитель - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ОсновнойОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//   ДополнительныйОбъектАдресации - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMActionParticipant.
//
Функция УчастникДействияXDTO(Прокси, Исполнитель, ОсновнойОбъектАдресации = Неопределено,
		ДополнительныйОбъектАдресации = Неопределено) Экспорт
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.14.31") Тогда
		Возврат УчастникЗадачXDTO(
			Прокси,
			Исполнитель,
			ОсновнойОбъектАдресации,
			ДополнительныйОбъектАдресации);
	КонецЕсли;
	
	МассивСтрокПредставления = Новый Массив;
	МассивСтрокПредставления.Добавить(Исполнитель.Наименование);
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресации)
			И ЗначениеЗаполнено(ОсновнойОбъектАдресации.Наименование) Тогда
		МассивСтрокПредставления.Добавить(ОсновнойОбъектАдресации.Наименование);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации)
			И ЗначениеЗаполнено(ДополнительныйОбъектАдресации.Наименование) Тогда
		МассивСтрокПредставления.Добавить(ДополнительныйОбъектАдресации.Наименование);
	КонецЕсли;
	Представление = СтрСоединить(МассивСтрокПредставления, ", ");
	
	УчастникДействияXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		"DMActionParticipant");
	УчастникДействияXDTO.name = Представление;
	Если Исполнитель.Тип = "DMBusinessProcessExecutorRole" Тогда
		УчастникДействияXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(Прокси);
	Иначе
		УчастникДействияXDTO.objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Исполнитель.ID,
			Исполнитель.Тип);
	КонецЕсли;
	
	Если Исполнитель.Тип = "DMEmployee"
			Или Исполнитель.Тип = "DMCompleteRole"
			Или Исполнитель.Тип = "DMBusinessProcessExecutorRole" Тогда
		УчастникДействияXDTO.taskParticipant = УчастникЗадачXDTO(
			Прокси,
			Исполнитель,
			ОсновнойОбъектАдресации,
			ДополнительныйОбъектАдресации);
		Возврат УчастникДействияXDTO;
	КонецЕсли;
	
	ИмяСвойстваXDTO = "";
	Если Исполнитель.Тип = "DMAutoSubstitutionForObjects" Тогда
		ИмяСвойстваXDTO = "autoSubstitutionForObjects";
		
	ИначеЕсли Исполнитель.Тип = "DMContainerProjects" Тогда
		ИмяСвойстваXDTO = "containerProjects";
		
	ИначеЕсли Исполнитель.Тип = "DMContainerSubdivisions" Тогда
		ИмяСвойстваXDTO = "containerSubdivisions";
		
	ИначеЕсли Исполнитель.Тип = "DMUser" Тогда
		ИмяСвойстваXDTO = "user";
		
	ИначеЕсли Исполнитель.Тип = "DMUserGroup" Тогда
		ИмяСвойстваXDTO = "userGroup";
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Некорректно задан тип участника действия: %1'"), Исполнитель.Тип);
		
	КонецЕсли;
	
	УчастникДействияXDTO[ИмяСвойстваXDTO] = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
		Прокси,
		Исполнитель.Тип);
	УчастникДействияXDTO[ИмяСвойстваXDTO].name = Исполнитель.Наименование;
	УчастникДействияXDTO[ИмяСвойстваXDTO].objectID = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
		Прокси,
		Исполнитель.ID,
		Исполнитель.Тип);
	
	Возврат УчастникДействияXDTO;
	
КонецФункции

// Заполняет реквизит, являющийся участником действия ДО, в приемнике по объекту УчастникДействияXDTO.
//
// Параметры:
//   Приемник - Произвольный - объект, содержащий реквизиты или свойства,
//     которые должны быть заполнены по свойству объекта XDTO.
//   УчастникДействияXDTO - ОбъектXDTO - объект XDTO типа DMActionParticipant.
//   ИмяРеквизита - Строка - имя объектного реквизита.
//   ЗаполнятьПредставление - Булево - признак необходимости заполнения реквизита представления
//     по свойству objectID.presentation.
//
Процедура УчастникДействияДО(Приемник, УчастникДействияXDTO, ИмяРеквизита, ЗаполнятьПредставление = Истина) Экспорт
	
	Если УчастникДействияXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
			Неопределено, УчастникДействияXDTO, "DMTaskParticipant") Тогда
		УчастникЗадачДО(Приемник, УчастникДействияXDTO, ИмяРеквизита, ЗаполнятьПредставление);
		Возврат;
		
	ИначеЕсли Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьТип(
			Неопределено, УчастникДействияXDTO, "DMActionParticipant") Тогда
		Возврат;
		
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(УчастникДействияXDTO, "taskParticipant") Тогда
		УчастникЗадачДО(Приемник, УчастникДействияXDTO.taskParticipant, ИмяРеквизита, ЗаполнятьПредставление);
		Возврат;
	КонецЕсли;
	
	ИмяСвойстваXDTO = "";
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			УчастникДействияXDTO, "autoSubstitutionForObjects") Тогда
		ИмяСвойстваXDTO = "autoSubstitutionForObjects";
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			УчастникДействияXDTO, "containerProjects") Тогда
		ИмяСвойстваXDTO = "containerProjects";
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			УчастникДействияXDTO, "containerSubdivisions") Тогда
		ИмяСвойстваXDTO = "containerSubdivisions";
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			УчастникДействияXDTO, "user") Тогда
		ИмяСвойстваXDTO = "user";
		
	ИначеЕсли ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(
			УчастникДействияXDTO, "userGroup") Тогда
		ИмяСвойстваXDTO = "userGroup";
		
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
		Приемник,
		УчастникДействияXDTO[ИмяСвойстваXDTO],
		ИмяРеквизита,
		ЗаполнятьПредставление);
	
КонецПроцедуры

// Возвращает участников с указанной функцией.
//
// Параметры:
//   ВсеУчастники - СписокXDTO - список всех участников действия.
//   ФункцияУчастника - Строка - функция участника.
//
// Возвращаемое значение:
//   Массив Из ОбъектXDTO
//
Функция УчастникиДействияСФункцией(ВсеУчастники, ФункцияУчастника) Экспорт
	
	Участники = Новый Массив;
	
	Для Каждого СтрокаУчастника Из ВсеУчастники Цикл
		ЕстьВышестоящийУчастник =
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоСуществует(СтрокаУчастника, "higherLevelParticipant")
			И ИнтеграцияС1СДокументооборот3КлиентСервер.ИдентификаторЗаполнен(СтрокаУчастника.higherLevelParticipant);
		Если Не ЕстьВышестоящийУчастник И СтрокаУчастника.participantFunction = ФункцияУчастника Тогда
			Участники.Добавить(СтрокаУчастника);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Участники;
	
КонецФункции

#КонецОбласти

#Область ПравилаКоммуникаций

// Дополняет условия отбора контекстом правил коммуникаций.
//
// Параметры:
//   Прокси - WSПрокси - объект для подключения к web-сервисам Документооборота.
//   Контекст - см. ИнтеграцияС1СДокументооборот3Клиент.КонтекстПравилКоммуникаций.
//   УсловияОтбора - СписокXDTO - список условий отбора.
//
Процедура ДополнитьОтборКонтекстомПравилКоммуникаций(Прокси, Контекст, УсловияОтбора) Экспорт
	
	Если Не ЗначениеЗаполнено(Контекст)
			Или Не ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ДоступенФункционалВерсииСервиса("3.0.15.41") Тогда
		Возврат;
	КонецЕсли;
	
	Условие = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "communicationRulesContext";
	КонтекстПравилКоммуникаций = Условие.valueList; // СписокXDTO
	
	Для Каждого ОписаниеЭлементаКонтекста Из Контекст Цикл
		ЭлементКонтекста = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
			Прокси,
			"DMCommunicationRulesContextItem");
		ЭлементКонтекста.name = ОписаниеЭлементаКонтекста.Ключ;
		
		Если ТипЗнч(ОписаниеЭлементаКонтекста.Значение) = Тип("Структура") Тогда
			ЭлементКонтекста.objectValue = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
				Прокси,
				ОписаниеЭлементаКонтекста.Значение.ID,
				ОписаниеЭлементаКонтекста.Значение.Тип)
		Иначе
			ЭлементКонтекста.simpleValue = ОписаниеЭлементаКонтекста.Значение;
		КонецЕсли;
		
		КонтекстПравилКоммуникаций.Добавить(ЭлементКонтекста);
	КонецЦикла;
	
	УсловияОтбора.Добавить(Условие);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления БИД на версию 3.0.2.5. Замена идентификатора вида действия для заполнения состояния документа.
//
Процедура ПерейтиНаВерсию_3_0_2_5() Экспорт
	
	ЗапросПравила = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПравилаИнтеграцииС1СДокументооборотом3ПравилаЗаполненияРеквизитовИС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом3.ПравилаЗаполненияРеквизитовИС КАК ПравилаИнтеграцииС1СДокументооборотом3ПравилаЗаполненияРеквизитовИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаИнтеграцииС1СДокументооборотом3 КАК ПравилаИнтеграцииС1СДокументооборотом3
		|		ПО ПравилаИнтеграцииС1СДокументооборотом3ПравилаЗаполненияРеквизитовИС.Ссылка = ПравилаИнтеграцииС1СДокументооборотом3.Ссылка
		|ГДЕ
		|	НЕ ПравилаИнтеграцииС1СДокументооборотом3.ПометкаУдаления
		|	И (ВЫРАЗИТЬ(ПравилаИнтеграцииС1СДокументооборотом3ПравилаЗаполненияРеквизитовИС.ИмяРеквизитаОбъектаДО КАК СТРОКА(7))) = ""status_""");
	ВыборкаПравила = ЗапросПравила.Выполнить().Выбрать();
	
	Пока ВыборкаПравила.Следующий() Цикл
		
		ПравилоОбъект = ВыборкаПравила.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПравилаИнтеграцииС1СДокументооборотом3
		Попытка
			ПравилоОбъект.Заблокировать();
		Исключение
			ЗаписьЖурналаРегистрации(
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		Для Каждого Строка Из ПравилоОбъект.ПравилаЗаполненияРеквизитовИС Цикл
			Если СтрНайти(Строка.ИмяРеквизитаОбъектаДО, "status_") = 1 Тогда
				Строка.ИмяРеквизитаОбъектаДО = СтрЗаменить(Строка.ИмяРеквизитаОбъектаДО, "-", "_");
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПравилоОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВебСервисБИД

// Возвращает версию ДО по свойству сообщения versionNumber.
//
// Параметры:
//   Сообщение - ОбъектXDTO - сообщение из ДО.
//
// Возвращаемое значение:
//   Строка - версия ДО.
//
Функция ВерсияДОПоСообщению(Сообщение)
	
	ВерсияДО = "0.0.0.0";
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Сообщение, "versionNumber")
			И ЗначениеЗаполнено(Сообщение.versionNumber) Тогда
		ВерсияДО = Сообщение.versionNumber;
	КонецЕсли;
	
	Возврат ВерсияДО;
	
КонецФункции

// Добавляет описание дополнительных реквизитов.
//
// Параметры:
//   СписокРеквизитовXDTO - СписокXDTO
//   СписокРеквизитов - Массив из ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения
//   Синонимы - Соответствие из КлючИЗначение:
//     * Ключ - Строка
//     * Значение - Строка
//
Процедура ДобавитьОписаниеДопРеквизитов(СписокРеквизитовXDTO, ОбъектМетаданных, ТипыЗначенийОбъектов, НаборыСвойств,
		ПредопределенныеНаборыСвойств, ПолноеИмя, Синонимы)
	
	ВладелецСвойств = Новый(ТипыЗначенийОбъектов[ОбъектМетаданных]);
	Если Не УправлениеСвойствами.ИспользоватьДопРеквизиты(ВладелецСвойств) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборыСвойств.Очистить();
	ТипСсылки = ТипыЗначенийОбъектов[ОбъектМетаданных];
	ПолучатьОсновнойНабор = Истина;
	КлючНазначения = Неопределено;
	УправлениеСвойствамиПереопределяемый.ЗаполнитьНаборыСвойствОбъекта(
		ВладелецСвойств,
		ТипСсылки,
		НаборыСвойств,
		ПолучатьОсновнойНабор,
		КлючНазначения);
	
	Если НаборыСвойств.Количество() = 0 И ПолучатьОсновнойНабор = Истина Тогда
		ИмяЭлемента = СтрЗаменить(ПолноеИмя, ".", "_");
		Набор = ПредопределенныеНаборыСвойств.Получить(ИмяЭлемента); // см. Справочники.НаборыДополнительныхРеквизитовИСведений.СвойстваНабора
		Если Набор = Неопределено Тогда
			ОсновнойНабор = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента];
		Иначе
			ОсновнойНабор = Набор.Ссылка;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОсновнойНабор) Тогда
			НаборыСвойств.Добавить().Набор = ОсновнойНабор;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаСвойств.Свойство КАК Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК ТаблицаСвойств
		|ГДЕ
		|	ТаблицаСвойств.Ссылка В(&МассивНаборовСвойствОбъекта)");
	Запрос.Параметры.Вставить("МассивНаборовСвойствОбъекта", НаборыСвойств.ВыгрузитьКолонку("Набор"));
	
	СписокРеквизитов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Свойство");
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
		РеквизитXDTO.name = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяДопРеквизита(Реквизит);
		РеквизитXDTO.synonym = Реквизит.Наименование;
		
		ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Реквизит.ТипЗначения, Синонимы);
		СписокРеквизитовXDTO.Добавить(РеквизитXDTO);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет описание реквизитов из метаданных.
//
// Параметры:
//   СписокРеквизитовXDTO - СписокXDTO
//   СписокРеквизитов - ОписанияСтандартныхРеквизитов
//   Синонимы - Соответствие из КлючИЗначение:
//     * Ключ - Строка
//     * Значение - Строка
//   ЭтоСтандартныеРеквизиты - Булево
//
Процедура ДобавитьОписаниеРеквизитов(СписокРеквизитовXDTO, СписокРеквизитов, Синонимы, ЭтоСтандартныеРеквизиты = Ложь)
	
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		Синоним = Реквизит.Синоним;
		
		Если ЭтоСтандартныеРеквизиты Тогда
			Если Реквизит.Имя <> "Код"
					И Реквизит.Имя <> "Наименование"
					И Реквизит.Имя <> "Владелец"
					И Реквизит.Имя <> "Родитель"
					И Реквизит.Имя <> "Номер"
					И Реквизит.Имя <> "Дата"
					И Реквизит.Имя <> "ПометкаУдаления" Тогда
				Продолжить;
			КонецЕсли;
			Если Реквизит.Имя = "ПометкаУдаления" Тогда
				Синоним = НСтр("ru = 'Пометка удаления'");
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Реквизит.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
		РеквизитXDTO.name = Реквизит.Имя;
		РеквизитXDTO.synonym = ?(Синоним = "", Реквизит.Имя, Синоним);
		
		ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Реквизит.Тип, Синонимы);
		СписокРеквизитовXDTO.Добавить(РеквизитXDTO);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет описание типов реквизита.
//
// Параметры:
//   СписокТиповXDTO - СписокXDTO
//   ТипРеквизита - ОписаниеТипов
//   Синонимы - Соответствие из КлючИЗначение:
//     * Ключ - Строка
//     * Значение - Строка
//
Процедура ДобавитьОписаниеТиповРеквизита(СписокТиповXDTO, ТипРеквизита, Синонимы)
	
	МассивТипов = ТипРеквизита.Типы();
	
	Если МассивТипов.Количество() > 3 Тогда
		СписокТиповXDTO.Добавить("Составной тип");
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеТипа Из МассивТипов Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОписаниеТипа);
		
		Если (ОбъектМетаданных <> Неопределено) Тогда
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
			Если ЧастиИмени[0] = "Справочник"
					Или ЧастиИмени[0] = "Документ"
					Или ЧастиИмени[0] = "Перечисление"
					Или ЧастиИмени[0] = "ПланВидовХарактеристик"
					Или ЧастиИмени[0] = "БизнесПроцесс"
					Или ЧастиИмени[0] = "Задача" Тогда
				СписокТиповXDTO.Добавить(ПолноеИмя);
				ДобавитьСиноним(Синонимы, ПолноеИмя, ОбъектМетаданных.Синоним);
			Иначе
				СписокТиповXDTO.Добавить(Строка(ОписаниеТипа));
			КонецЕсли;
		Иначе
			СписокТиповXDTO.Добавить(Строка(ОписаниеТипа));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет синоним в соответствие.
//
// Параметры:
//   Синонимы - Соответствие из КлючИЗначение:
//     * Ключ - Строка
//     * Значение - Строка
//   ПолноеИмя - Строка
//   Синоним - Строка
//
Процедура ДобавитьСиноним(Синонимы, ПолноеИмя, Синоним)
	
	Если Синонимы.Получить(ПолноеИмя) = Неопределено Тогда
		Синонимы.Вставить(ПолноеИмя, Синоним);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет печатные формы в XDTO объект, описывающий объект метаданных ИС.
//
// Параметры:
//   ОбъектМетаданныхXDTO - ОбъектXDTO - объект XDTO типа DMILMetadataObject:
//     * printedForms - СписокXDTO
//
Процедура ЗаполнитьПечатныеФормыОбъектаМетаданных(ОбъектМетаданныхXDTO)
	
	ТаблицаПечатныхФорм = ИнтеграцияС1СДокументооборотБазоваяФункциональность.МенеджерыПечати(
		ОбъектМетаданныхXDTO.name);
	
	Для Каждого СтруктураПечатнойФормы Из ТаблицаПечатныхФорм Цикл
		ПечатнаяФормаXDTO = СоздатьОбъектБИД("DMILPrintedForm");
		ПечатнаяФормаXDTO.commandName = СтруктураПечатнойФормы.ИмяКоманды;
		ПечатнаяФормаXDTO.printManager = СтруктураПечатнойФормы.МенеджерПечати;
		ПечатнаяФормаXDTO.commandPresentation = СтруктураПечатнойФормы.ПредставлениеКоманды;
		ПечатнаяФормаXDTO.additionalParameters = СтруктураПечатнойФормы.ДополнительныеПараметры;
		ОбъектМетаданныхXDTO.printedForms.Добавить(ПечатнаяФормаXDTO);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьОшибкуПревышенияВремениВыполнения(ВремяВыполнения, Сообщение, Результат)
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
			НСтр("ru = 'Обработка запросов XDTO'", ОбщегоНазначения.КодОсновногоЯзыка())),
		УровеньЖурналаРегистрации.Ошибка,,,
		СтрШаблон(НСтр("ru = 'Превышено время ожидания выполнения запроса.
			|Время выполнения: %1
			|
			|Текст запроса:
			|%2
			|
			|Результат запроса:
			|%3'"),
				ВремяВыполнения,
				ТекстОбъектаXDTOДляЖР(Сообщение),
				ТекстОбъектаXDTOДляЖР(Результат)));
	
КонецПроцедуры

// Проверяет корректность выражения на встроенном языке, используемого для заполнения реквизитов в
// правилах интеграции.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILCheckExpressionOnBuiltInLanguageRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILOK или DMILError.
//
Функция ПроверитьВыражениеНаВстроенномЯзыке(Сообщение)
	
	Попытка
		
		Если Не Пользователи.ЭтоПолноправныйПользователь() Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав для выполнения выражения на встроенном языке.
				|Обратитесь к администратору.'");
		КонецЕсли;
		
		Если СокрЛП(Сообщение.expressionOnBuiltInLanguage) <> "" Тогда
			Параметры = Новый Структура;
			Источник = ИнтеграцияС1СДокументооборотБазоваяФункциональность.НовыйОбъектИС(Сообщение.objectType);
			Параметры.Вставить("Источник", Источник);
			Параметры.Вставить("Результат", Неопределено);
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Сообщение, "tabularSectionName")
					И Сообщение.tabularSectionName <> "" Тогда
				Таблица = Источник[Сообщение.tabularSectionName]; // ТаблицаЗначений
				Параметры.Вставить("ТекущаяСтрока", Таблица.Добавить());
			КонецЕсли;
			
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьВБезопасномРежиме(
				Сообщение.expressionOnBuiltInLanguage,
				Параметры);
		КонецЕсли;
		
		Ответ = СоздатьОбъектБИД("DMILOK");
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Найдена ошибка в выражении на встроенном языке'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Ищет в правилах интеграции выражения на встроенном языке, которые требуется выполнить на стороне ДО,
// для последующего заполнения данных объекта на стороне ИС.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILGetExpressionListRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetExpressionListResponse или DMILError.
//
Функция СписокВыраженийНаВстроенномЯзыкеДляВыполненияНаСторонеДО(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetExpressionListResponse");
		ВыраженияПоОбъектам = Ответ.objectsExpressionRows; // СписокXDTO
		
		СписокОбъектовИС = Новый Массив;
		СоответствиеObjectIDОбъектамИС = Новый Соответствие;
		
		Для Каждого ObjectID Из Сообщение.objects Цикл
			Ссылка = ПолучитьСсылкуПоObjectID(ObjectID);
			СписокОбъектовИС.Добавить(Ссылка);
			СоответствиеObjectIDОбъектамИС.Вставить(Ссылка, ObjectID);
		КонецЦикла;
		
		ПодходящиеПравила = ИнтеграцияС1СДокументооборот3ВызовСервера.ПодходящиеПравилаИнтеграции(
			СписокОбъектовИС,
			Истина);
		
		ПравилаДляАнализа = Новый Массив;
		Для Каждого СоответствиеПравил Из ПодходящиеПравила Цикл
			Для Каждого Правило Из СоответствиеПравил.Значение Цикл
				Если ПравилаДляАнализа.Найти(Правило) = Неопределено Тогда
					ПравилаДляАнализа.Добавить(Правило);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаВыраженияПравил =
			Справочники.ПравилаИнтеграцииС1СДокументооборотом3.ВыраженияДляВыполненияНаСторонеДО(ПравилаДляАнализа);
		
		Для Каждого СоответствиеПравил Из ПодходящиеПравила Цикл
			СоответствиеПравилXDTO = СоздатьОбъектБИД("DMILObjectExpressionRow");
			СкопироватьОбъектXDTO(СоответствиеПравилXDTO.object, СоответствиеObjectIDОбъектамИС[СоответствиеПравил.Ключ]);
			СписокВыражений = СоответствиеПравилXDTO.expressionRows; // СписокXDTO
			
			КолВоПравил = СоответствиеПравил.Значение.Количество();
			Если КолВоПравил = 1 Тогда
				ВыраженияПравила = ТаблицаВыраженияПравил.НайтиСтроки(Новый Структура("Ссылка", СоответствиеПравил.Значение[0]));
				Для Каждого ВыражениеДляВыполненияНаСторонеДО Из ВыраженияПравила Цикл
					ВыражениеПравилаXDTO = СоздатьОбъектБИД("DMILExpressionRow");
					ПодготовитьВычисляемоеВыражениеКПередачеНаСторонуДО(
						ВыражениеПравилаXDTO,
						ВыражениеДляВыполненияНаСторонеДО);
					СписокВыражений.Добавить(ВыражениеПравилаXDTO);
				КонецЦикла;
			Иначе
				СоответствиеПравилXDTO.error = ОписаниеОшибкиXDTO(
					НСтр("ru = 'Ошибка при получении списка выражений на встроенном языке'"),
					СтрШаблон(
						НСтр("ru = 'Для объекта ""%1"" не удалось подобрать единственное подходящее правило интеграции.
							|Всего найдено правил: %2'"),
							СоответствиеПравил.Ключ,
							КолВоПравил));
			КонецЕсли;
			
			ВыраженияПоОбъектам.Добавить(СоответствиеПравилXDTO);
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка выражений на встроенном языке'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Получает список печатных форм объектов ИС.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILGetPrintedFormsRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetPrintedFormsResponse или DMILError.
//
Функция СписокПечатныхФормОбъектовИС(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetPrintedFormsResponse");
		СписокОбъектов = Ответ.objects; // СписокXDTO
		
		Для Каждого ОбъектМетаданныхXDTO Из Сообщение.objects Цикл
			ЗаполнитьПечатныеФормыОбъектаМетаданных(ОбъектМетаданныхXDTO);
			СписокОбъектов.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
	Исключение
		
		Ответ = ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении списка печатных форм'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

// Возвращает структуру метаданных ИС.
//
// Параметры:
//   Сообщение - ОбъектXDTO - объект XDTO типа DMILGetMetadataRequest.
//
// Возвращаемое значение:
//   ОбъектXDTO - объект XDTO типа DMILGetMetadataResponse или DMError.
//
Функция СтруктураМетаданныхИнтегрированнойСистемы(Сообщение)
	
	Попытка
		
		Ответ = СоздатьОбъектБИД("DMILGetMetadataResponse");
		ОбъектыМетаданных = Ответ.metadataObjects; // СписокXDTO
		СинонимыОбъектов = Ответ.metadataSynonyms; // СписокXDTO
		
		ПолучатьВсе = Истина;
		ПолучатьРеквизиты = Ложь;
		ПолучатьТабличныеЧасти = Ложь;
		ПолучатьПечатныеФормы = Ложь;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Сообщение, "columnSet")
				И Сообщение.columnSet.Количество() > 0 Тогда
			ПолучатьВсе = Ложь;
			Для Каждого РеквизитКПолучению Из Сообщение.columnSet Цикл
				Если НРег(РеквизитКПолучению) = "attributes" Тогда
					ПолучатьРеквизиты = Истина;
				ИначеЕсли НРег(РеквизитКПолучению) = "tabularsections" Тогда
					ПолучатьТабличныеЧасти = Истина;
				ИначеЕсли НРег(РеквизитКПолучению) = "printedforms" Тогда
					ПолучатьПечатныеФормы = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Ответ.dataBaseName = Метаданные.КраткаяИнформация;
		Ответ.dataBaseID = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ИдентификаторБазыДанных();
		Ответ.dmilVersionNumber = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ВерсияБИД();
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(Сообщение, "objects")
				И Сообщение.objects.Количество() > 0 Тогда
			ТипыОбъектовИС = Новый Массив;
			Для Каждого ИмяТипа Из Сообщение.objects Цикл
				Если СтрНайти(ИмяТипа, "Ссылка.") = 0 Тогда
					ИмяТипа = СтрЗаменить(ИмяТипа, ".", "Ссылка.");
				КонецЕсли;
				ТипыОбъектовИС.Добавить(Тип(ИмяТипа));
			КонецЦикла;
		Иначе
			ТипыОбъектовИС = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ТипыОбъектовПоддерживающихИнтеграцию();
		КонецЕсли;
		
		НаборыСвойств = Новый ТаблицаЗначений;
		НаборыСвойств.Колонки.Добавить("Набор");
		НаборыСвойств.Колонки.Добавить("Высота");
		НаборыСвойств.Колонки.Добавить("Заголовок");
		НаборыСвойств.Колонки.Добавить("Подсказка");
		НаборыСвойств.Колонки.Добавить("РастягиватьПоВертикали");
		НаборыСвойств.Колонки.Добавить("РастягиватьПоГоризонтали");
		НаборыСвойств.Колонки.Добавить("ТолькоПросмотр");
		НаборыСвойств.Колонки.Добавить("ЦветТекстаЗаголовка");
		НаборыСвойств.Колонки.Добавить("Ширина");
		НаборыСвойств.Колонки.Добавить("ШрифтЗаголовка");
		НаборыСвойств.Колонки.Добавить("Группировка");
		НаборыСвойств.Колонки.Добавить("Отображение");
		НаборыСвойств.Колонки.Добавить("Картинка");
		НаборыСвойств.Колонки.Добавить("ОтображатьЗаголовок");
		НаборыСвойств.Колонки.Добавить("ОбщийНабор", Новый ОписаниеТипов("Булево"));
		НаборыСвойств.Колонки.Добавить("ШиринаПодчиненныхЭлементов");
		
		ПредопределенныеНаборыСвойств = УправлениеСвойствамиПовтИсп.ПредопределенныеНаборыСвойств();
		
		ТипыЗначенийОбъектов = Новый Соответствие;
		
		ОбъектыПоддерживающиеИнтеграцию = Новый Массив;
		ОбщиеРеквизитыОбъектов = Новый Соответствие;
		Для Каждого ТипЗначения Из ТипыОбъектовИС Цикл
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗначения);
			Если ОбъектМетаданных = Неопределено
					Или Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектМетаданныхПоддерживается(ОбъектМетаданных) Тогда
				Продолжить;
			КонецЕсли;
			ОбъектыПоддерживающиеИнтеграцию.Добавить(ОбъектМетаданных);
			ОбщиеРеквизитыОбъектов[ОбъектМетаданных] = Новый Массив;
			ТипыЗначенийОбъектов[ОбъектМетаданных] = ТипЗначения;
		КонецЦикла;
		
		ИспользованиеРеквизитаИспользовать = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать;
		ИспользованиеРеквизитаАвто = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто;
		АвтоИспользованиеРеквизитаИспользовать = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать;
		РазделениеДанныхРеквизитаНеИспользовать = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.НеИспользовать;
		Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			Если ОбщийРеквизит.РазделениеДанных <> РазделениеДанныхРеквизитаНеИспользовать Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого ЭлементСостава Из ОбщийРеквизит.Состав Цикл
				Если (ЭлементСостава.Использование = ИспользованиеРеквизитаИспользовать
						Или (ЭлементСостава.Использование = ИспользованиеРеквизитаАвто
							И ОбщийРеквизит.АвтоИспользование = АвтоИспользованиеРеквизитаИспользовать))
						И ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектМетаданныхПоддерживается(ЭлементСостава.Метаданные)
						И ОбъектыПоддерживающиеИнтеграцию.Найти(ЭлементСостава.Метаданные) <> Неопределено Тогда
					ОбщиеРеквизитыОбъектов[ЭлементСостава.Метаданные].Добавить(ОбщийРеквизит);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Синонимы = Новый Соответствие;
		
		Для Каждого ОбъектМетаданных Из ОбъектыПоддерживающиеИнтеграцию Цикл
			
			ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
			
			ОбъектМетаданныхXDTO = СоздатьОбъектБИД("DMILMetadataObject");
			ОбъектМетаданныхXDTO.name = ПолноеИмя;
			Реквизиты = ОбъектМетаданныхXDTO.attributes; // СписокXDTO
			ТабличныеЧасти = ОбъектМетаданныхXDTO.tabularSections; // СписокXDTO
			
			ДобавитьСиноним(Синонимы, ПолноеИмя, ОбъектМетаданных.Синоним);
			
			Если ПолучатьВсе Или ПолучатьРеквизиты Тогда
				
				РеквизитXDTO = СоздатьОбъектБИД("DMILMetadataAttribute");
				РеквизитXDTO.name = "Представление";
				РеквизитXDTO.synonym = НСтр("ru = 'Представление'");
				ДобавитьОписаниеТиповРеквизита(РеквизитXDTO.typesList, Новый ОписаниеТипов("Строка"), Синонимы);
				Реквизиты.Добавить(РеквизитXDTO);
				
				ДобавитьОписаниеРеквизитов(
					Реквизиты,
					ОбъектМетаданных.СтандартныеРеквизиты,
					Синонимы,
					Истина);
				ДобавитьОписаниеРеквизитов(
					Реквизиты,
					ОбъектМетаданных.Реквизиты,
					Синонимы);
				ДобавитьОписаниеРеквизитов(
					Реквизиты,
					ОбщиеРеквизитыОбъектов[ОбъектМетаданных],
					Синонимы);
				ДобавитьОписаниеДопРеквизитов(
					Реквизиты,
					ОбъектМетаданных,
					ТипыЗначенийОбъектов,
					НаборыСвойств,
					ПредопределенныеНаборыСвойств,
					ПолноеИмя,
					Синонимы);
				
			КонецЕсли;
			
			Если ПолучатьВсе Или ПолучатьТабличныеЧасти Тогда
				
				Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
					
					Если ТабличнаяЧасть.Имя = "ДополнительныеРеквизиты"
							Или Лев(ТабличнаяЧасть.Имя, 7) = "Удалить"
							Или ТабличнаяЧасть.Реквизиты.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ТабличнаяЧастьXDTO = СоздатьОбъектБИД("DMILMetadataTabularSection");
					ТабличнаяЧастьXDTO.name = ТабличнаяЧасть.Имя;
					ТабличнаяЧастьXDTO.synonym = ТабличнаяЧасть.Синоним;
					
					ДобавитьОписаниеРеквизитов(
						ТабличнаяЧастьXDTO.attributes,
						ТабличнаяЧасть.СтандартныеРеквизиты,
						Синонимы,
						Истина);
					ДобавитьОписаниеРеквизитов(
						ТабличнаяЧастьXDTO.attributes,
						ТабличнаяЧасть.Реквизиты,
						Синонимы);
					
					ТабличныеЧасти.Добавить(ТабличнаяЧастьXDTO);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ПолучатьВсе Или ПолучатьПечатныеФормы Тогда
				ЗаполнитьПечатныеФормыОбъектаМетаданных(ОбъектМетаданныхXDTO);
			КонецЕсли;
			
			ОбъектыМетаданных.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
		Для Каждого Синоним Из Синонимы Цикл
			ОбъектМетаданныхXDTO = СоздатьОбъектБИД("DMILMetadataSynonym");
			ОбъектМетаданныхXDTO.name = Синоним.Ключ;
			ОбъектМетаданныхXDTO.synonym = Синоним.Значение;
			СинонимыОбъектов.Добавить(ОбъектМетаданныхXDTO);
		КонецЦикла;
		
		Возврат Ответ;
		
	Исключение
		
		Возврат ОписаниеОшибкиXDTO(
			НСтр("ru = 'Ошибка при получении структуры метаданных'"),
			ПолучитьОписаниеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецФункции

Функция ТекстОбъектаXDTOДляЖР(ОбъектXDTO)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO);
	ТекстОбъекта = ЗаписьXML.Закрыть();
	ЗаписьXML = Неопределено;
	
	КоличествоДвоичныхДанных = СтрЧислоВхождений(ТекстОбъекта, "<binaryData>");
	Для НомерВхождения = 1 По КоличествоДвоичныхДанных Цикл
		НачальныйНомер = СтрНайти(ТекстОбъекта, "<binaryData>");
		Если НачальныйНомер = 0 Тогда
			Прервать;
		КонецЕсли;
		КонечныйНомер = СтрНайти(ТекстОбъекта, "</binaryData>") + 13;
		ЧислоСимволов = КонечныйНомер - НачальныйНомер;
		
		Подстрока = Сред(ТекстОбъекта, НачальныйНомер, ЧислоСимволов);
		ТекстОбъекта = СтрЗаменить(ТекстОбъекта, Подстрока, "<binaryData/>");
	КонецЦикла;
	
	Возврат Лев(ТекстОбъекта, 10000);
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

// Настраивает условное оформление этапа.
//
Процедура НастроитьУсловноеОформлениеЭтапа(УсловноеОформление, Дерево = "Участники",
		ОформляемоеПоле = "ПредставлениеСтроки")
	
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление,
		НСтр("ru = 'Выделение этапов'"));
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".ЭтоЭтап");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Шрифт");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ШрифтЭтапаДействия.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Настраивает условное оформление пустого участника.
//
Процедура НастроитьУсловноеОформлениеПустогоУчастника(УсловноеОформление, Дерево = "Участники",
		ОформляемоеПоле = "ПредставлениеСтроки", ДопУсловия = Неопределено)
	
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление,
		НСтр("ru = 'Выделение пустого участника'"));
		
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".Участник");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".ЭтоЭтап");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	Если ДопУсловия <> Неопределено Тогда
		Для Каждого ДопУсловие Из ДопУсловия Цикл
			ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбораДанных, ДопУсловие);
		КонецЦикла;
	КонецЕсли;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = '<Не указан>'");
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Настраивает условное оформление пустого условия.
//
Процедура НастроитьУсловноеОформлениеПустогоУсловия(УсловноеОформление, Дерево = "Участники",
		ОформляемоеПоле = "УсловиеПредставление")
	
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(
		УсловноеОформление,
		НСтр("ru = 'Выделение пустого условия'"));
	
	ГруппаОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(
		Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".Условие");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Дерево + ".ЭтоЭтап");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ЦветТекстаВспомогательныхДанныхДействий.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Текст");
	ЭлементЦветаОформления.Значение = НСтр("ru = '<Не установлено>'");
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ОформляемоеПоле);
	
КонецПроцедуры

// Устанавливает условное оформление комментария заполнения участника.
//
// Параметры:
//   УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - условное оформление формы.
//   ПолеДляОтбора - Строка - поле отбора, например, для карточки шаблона процесса "Объект.Исполнители.Исполнитель".
//   ПолеДляОформления - Строка - оформляемое поле, например, для карточки шаблона процесса "Исполнитель".
//
Процедура НастроитьУсловноеОформлениеКомментарияЗаполненияУчастника(УсловноеОформление, ПолеДляОтбора, ПолеДляОформления)
	
	ПредставлениеЭлемента = СтрШаблон(
		НСтр("ru = 'Комментарий заполнения участника в поле: %1'"),
		ПолеДляОтбора);
	
	ЭлементУсловногоОформления = ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, ПредставлениеЭлемента);
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеДляОтбора);
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ЭлементОтбораДанных.ПравоеЗначение = "[";
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("ЦветТекста");
	ЭлементЦветаОформления.Значение = ЦветаСтиля.ОшибочныеДанные;
	ЭлементЦветаОформления.Использование = Истина;
	
	Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	Поле.Поле = Новый ПолеКомпоновкиДанных(ПолеДляОформления);
	
КонецПроцедуры

Функция ЭлементУсловногоОформленияПоПредставлению(УсловноеОформление, Представление)
	
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.Представление = Представление Тогда
			ЭлементОформления.Отбор.Элементы.Очистить();
			ЭлементОформления.Поля.Элементы.Очистить();
			Возврат ЭлементОформления;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементОформления = УсловноеОформление.Элементы.Вставить(0);
	ЭлементОформления.Представление = Представление;
	
	Возврат ЭлементОформления;
	
КонецФункции

#КонецОбласти

// Преобразует список XDTO типа DMAllActionStatesAndResultsRows в таблицу значений.
//
// Параметры:
//   ДействиеXDTO - ОбъектXDTO - объект XDTO типа, наследующего DMAction.
//
// Возвращаемое значение:
//   ТаблицаЗначений:
//     * Действие - Строка
//     * ДействиеID - Строка
//     * ДействиеТип - Строка
//     * Функция - Строка
//     * ИдентификаторУчастника - Строка
//     * ИдентификаторПункта - Строка
//     * Состояние - Строка
//     * Результат - Строка
//     * Дата - Дата
//
Функция ВсеСостоянияИРезультаты(ДействиеXDTO)
	
	ВсеСостоянияИРезультаты = Новый ТаблицаЗначений;
	ВсеСостоянияИРезультаты.Колонки.Добавить("Действие", Новый ОписаниеТипов("Строка"));
	ВсеСостоянияИРезультаты.Колонки.Добавить("ДействиеID", Новый ОписаниеТипов("Строка"));
	ВсеСостоянияИРезультаты.Колонки.Добавить("ДействиеТип", Новый ОписаниеТипов("Строка"));
	ВсеСостоянияИРезультаты.Колонки.Добавить("Функция", Новый ОписаниеТипов("Строка"));
	ВсеСостоянияИРезультаты.Колонки.Добавить("ИдентификаторУчастника", Новый ОписаниеТипов("Строка"));
	ВсеСостоянияИРезультаты.Колонки.Добавить("ИдентификаторПункта", Новый ОписаниеТипов("Строка"));
	ВсеСостоянияИРезультаты.Колонки.Добавить("Состояние", Новый ОписаниеТипов("Строка"));
	ВсеСостоянияИРезультаты.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
	ВсеСостоянияИРезультаты.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаXDTO Из ДействиеXDTO.allStatesAndResultsRows.rows Цикл
		НоваяСтрока = ВсеСостоянияИРезультаты.Добавить();
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
			НоваяСтрока,
			СтрокаXDTO.action,
			"Действие");
		НоваяСтрока.Функция = СтрокаXDTO.function;
		НоваяСтрока.ИдентификаторУчастника = СтрокаXDTO.participantID;
		НоваяСтрока.ИдентификаторПункта = СтрокаXDTO.pointID;
		НоваяСтрока.Состояние = СтрокаXDTO.state;
		НоваяСтрока.Результат = СтрокаXDTO.result;
		НоваяСтрока.Дата = СтрокаXDTO.date;
	КонецЦикла;
	
	Возврат ВсеСостоянияИРезультаты;
	
КонецФункции

Процедура ДеревоПриложенийИзXDTO(ОбъектXDTO, Строки, ТекущийПользовательИСотрудники)
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "applicationRows") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаXDTO Из ОбъектXDTO.applicationRows.rows Цикл
		
		Если НРег(СтрокаXDTO.rowType) = "historyofperform" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Строки.Добавить();
		
		НоваяСтрока.ПредставлениеПриложения = СтрокаXDTO.applicationPresentation;
		НоваяСтрока.ДоступноУдаление = СтрокаXDTO.allowDeletion;
		НоваяСтрока.ОбязательноеЗаполнение = СтрокаXDTO.mandatoryFilling;
		НоваяСтрока.РольОбязательная = СтрокаXDTO.requiredRole;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "rowType") Тогда
			НоваяСтрока.ТипСтроки = НРег(СтрокаXDTO.rowType);
		КонецЕсли;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "applicationRole") Тогда
			НоваяСтрока.РольПредмета = НРег(СтрокаXDTO.applicationRole);
		КонецЕсли;
		
		НоваяСтрока.ИндексКартинки = СтрокаXDTO.imageIndex;
		Если НоваяСтрока.ИндексКартинки = -1 Тогда
			Если НоваяСтрока.РольПредмета = "main" Тогда
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметОсновной16;
				
			ИначеЕсли НоваяСтрока.РольПредмета = "supplementary" Тогда
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметВспомогательный16;
				
			ИначеЕсли НоваяСтрока.РольПредмета = "filledin" Тогда
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметЗаполняемый16;
				
			ИначеЕсли НоваяСтрока.ТипСтроки = "filerole" Тогда
				// В большинстве случаев ДО вернет роль файла с индексом картинки 2.
				// Но, если файл был добавлен некорректно, например, с пустой ролью - нужно отображать
				// такую пустую роль как вспомогательный предмет.
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметВспомогательный16;
				
			ИначеЕсли НоваяСтрока.ТипСтроки = "instruction" Тогда
				// Инструкция идет без картинки.
				
			Иначе
				НоваяСтрока.ИндексКартинки = БиблиотекаКартинок.ПредметВспомогательный16;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "application") Тогда
			Если НоваяСтрока.ТипСтроки = "filerole" Тогда
				
				НоваяСтрока.РольФайлаID = СтрокаXDTO.application.objectID.ID;
				СтрокаДокумента = ИнтеграцияС1СДокументооборот3КлиентСервер.СтрокаДокументаВДеревеПриложений(НоваяСтрока);
				Если СтрокаДокумента <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента, "Приложение, ПриложениеID, ПриложениеТип");
				КонецЕсли;
				
			Иначе
				
				ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
					НоваяСтрока,
					СтрокаXDTO.application,
					"Приложение");
				НоваяСтрока.Ссылка =
					РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.СсылкаНаОбъектИСПоДаннымДокументооборота(
						НоваяСтрока.ПриложениеID,
						НоваяСтрока.ПриложениеТип);
				НоваяСтрока.НавигационнаяСсылка = СтрокаXDTO.application.objectID.navigationRef;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Ссылка) Тогда
					// Ситуация, когда права на объект в ДО есть, а в ИС нет, не должна приводить к исключению
					// при выборке задач. При возникновении исключения получим представление из ДО, а пользователь
					// увидит "Нарушение прав доступа" лишь при попытке открыть предмет.
					Попытка
						НоваяСтрока.ПредставлениеПриложения = ИнтеграцияС1СДокументооборот3ВызовСервера.ПредставлениеПриложенияОбъектаИС(
							НоваяСтрока.Ссылка);
					Исключение
						ЗаписьЖурналаРегистрации(
							ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяСобытияЖурналаРегистрации(
								НСтр("ru = 'Ошибка при получении представления связанного объекта'",
									ОбщегоНазначения.КодОсновногоЯзыка())),
							УровеньЖурналаРегистрации.Ошибка,,
							НоваяСтрока.Ссылка,
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "file") Тогда
			НоваяСтрока.ДатаМодификации = СтрокаXDTO.file.modificationDateUniversal;
			НоваяСтрока.ПодписанЭП = СтрокаXDTO.file.signed;
			НоваяСтрока.ПредставлениеHTML = СтрокаXDTO.file.htmlView;
			НоваяСтрока.ПредпросмотрУрезан = СтрокаXDTO.file.htmlViewTruncated;
			НоваяСтрока.Расширение = СтрокаXDTO.file.extension;
			НоваяСтрока.ПометкаУдаления = СтрокаXDTO.file.deletionMark;
			
			НоваяСтрока.Редактируется = СтрокаXDTO.file.editing;
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO.file, "editingUser") Тогда
				НоваяСтрока.РедактируетсяТекущимПользователем =
					ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ФайлРедактируетсяТекущимПользователем(
						СтрокаXDTO.file.editingUser.objectID.ID,
						СтрокаXDTO.file.editingUser.objectID.type,
						ТекущийПользовательИСотрудники);
			Иначе
				НоваяСтрока.РедактируетсяТекущимПользователем = Ложь;
			КонецЕсли;
			
			НоваяСтрока.Зашифрован = СтрокаXDTO.file.encrypted;
			НоваяСтрока.ЯвляетсяОригиналом = СтрокаXDTO.file.scannedOriginal;
			
			Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO.file, "role") Тогда
				НоваяСтрока.РольФайлаID = СтрокаXDTO.file.role.objectID.id;
			КонецЕсли;
		КонецЕсли;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "htmlView") Тогда
			НоваяСтрока.ПредставлениеHTML = СтрокаXDTO.htmlView;
			НоваяСтрока.ПредпросмотрУрезан = Ложь;
		КонецЕсли;
		
		ДеревоПриложенийИзXDTO(СтрокаXDTO, НоваяСтрока.Строки, ТекущийПользовательИСотрудники);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияИзXDTO(ОбъектXDTO, Строки, КоличествоДействий)
	
	Если Не ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбъектXDTO, "actionsRows") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаXDTO Из ОбъектXDTO.actionsRows.rows Цикл
		
		НоваяСтрока = Строки.Добавить();
		
		НоваяСтрока.Представление = СтрокаXDTO.presentation;
		НоваяСтрока.ПредставлениеСотрудники = СтрокаXDTO.employeesPresentation;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "dueDateExceeded") Тогда
			НоваяСтрока.СрокПревышен = СтрокаXDTO.dueDateExceeded;
		Иначе
			НоваяСтрока.СрокПревышен = Ложь;
		КонецЕсли;
		НоваяСтрока.СрокПредставление = СтрокаXDTO.dueDatePresentation;
		НоваяСтрока.ПредставлениеРезультата = СтрокаXDTO.statePresentation;
		НоваяСтрока.ЕстьФайлыОтчета = СтрокаXDTO.haveReportFiles;
		НоваяСтрока.РезультатТекстом = СтрокаXDTO.comment;
		НоваяСтрока.ДатаУстановкиСостояния = СтрокаXDTO.statusDate;
		НоваяСтрока.СостояниеКонтроля = СтрокаXDTO.monitoringState;
		
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(СтрокаXDTO, "additionalFields") Тогда
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
				НоваяСтрока,
				СтрокаXDTO.additionalFields.action,
				"Действие");
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
				НоваяСтрока,
				СтрокаXDTO.additionalFields.taskAction,
				"ДействиеЗадачи");
			ИнтеграцияС1СДокументооборотБазоваяФункциональность.ЗаполнитьОбъектныйРеквизит(
				НоваяСтрока,
				СтрокаXDTO.additionalFields.actionType,
				"ВидДействия");
			
			НоваяСтрока.НедоступноГруппа = СтрокаXDTO.additionalFields.unavailableGroup;
			НоваяСтрока.Недоступно = СтрокаXDTO.additionalFields.unavailable;
			НоваяСтрока.ЭтоУчастник = СтрокаXDTO.additionalFields.itIsParticipant;
			НоваяСтрока.ЭтоПодзадача = СтрокаXDTO.additionalFields.itIsSubtask;
			НоваяСтрока.ЭтоДействие = СтрокаXDTO.additionalFields.itIsAction;
			НоваяСтрока.НеУдалосьРазыменовать = СтрокаXDTO.additionalFields.failedToDereference;
			НоваяСтрока.БудетУдален = СтрокаXDTO.additionalFields.willBeDeleted;
			НоваяСтрока.Состояние = СтрокаXDTO.additionalFields.state;
			НоваяСтрока.Результат = СтрокаXDTO.additionalFields.result;
			НоваяСтрока.НомерКартинки = ИнтеграцияС1СДокументооборот3КлиентСервер.НомерКартинкиРезультатаВыполненияДействия(
				НоваяСтрока.Результат,
				НоваяСтрока.Состояние);
			НоваяСтрока.ПредставлениеЧистое = СтрокаXDTO.additionalFields.cleanPresentation;
			НоваяСтрока.ПометкаУдаления = СтрокаXDTO.additionalFields.deletionMark;
			
			Если ЗначениеЗаполнено(СтрокаXDTO.additionalFields.id) Тогда
				НоваяСтрока.Идентификатор = Новый УникальныйИдентификатор(СтрокаXDTO.additionalFields.id);
			КонецЕсли;
			
			Если НоваяСтрока.ЭтоДействие Тогда
				КоличествоДействий = КоличествоДействий + 1;
			КонецЕсли;
		КонецЕсли;
		
		ДействияИзXDTO(СтрокаXDTO, НоваяСтрока.Строки, КоличествоДействий);
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при инициализации действия.
//
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ФормаXDTO - ОбъектXDTO - объект XDTO типа DMActionForm.
//   ИзменениеДействияРазрешено - Булево
//   Разрешения - СписокXDTO - список XDTO типа DMActionPermissionRows.
//
Процедура ЗаполнитьДанныеДействия(Форма, ФормаXDTO, ИзменениеДействияРазрешено, Разрешения)
	
	Элементы = Форма.Элементы;
	
	Форма.Заголовок = ФормаXDTO.title;
	Форма.ТолькоПросмотр = ФормаXDTO.readOnly;
	Форма.МожноТолькоДобавлятьУчастников = ФормаXDTO.onlyAddParticipantsIsAvailable;
	Форма.МожноИзменятьЗащищенныхУчастников = ФормаXDTO.protectedParticipantsCanBeChanged;
	
	ЭлементАвтор = СтруктураПоляВводаФормы(ФормаXDTO.authorInputField);
	Элементы.Автор.Доступность = ЭлементАвтор.Доступность;
	ЭлементЗаписатьИЗакрыть = СтруктураКнопкиФормы(ФормаXDTO.buttonDone);
	Элементы.ЗаписатьИЗакрыть.Видимость = ЭлементЗаписатьИЗакрыть.Видимость;
	ЭлементПродолжитьДиалог = СтруктураКнопкиФормы(ФормаXDTO.buttonContinue);
	Элементы.ПродолжитьДиалог.Видимость = ЭлементПродолжитьДиалог.Видимость;
	Элементы.ПродолжитьДиалог.КнопкаПоУмолчанию = ЭлементПродолжитьДиалог.КнопкаПоУмолчанию;
	ЭлементЗакрыть = СтруктураКнопкиФормы(ФормаXDTO.buttonCancel);
	Элементы.Закрыть.Заголовок = ЭлементЗакрыть.Заголовок;
	Элементы.Закрыть.КнопкаПоУмолчанию = ЭлементЗакрыть.КнопкаПоУмолчанию;
	ЭлементГруппаНедоступноДляИзменения = СтруктураГруппыФормы(ФормаXDTO.groupNotEditable);
	Элементы.ГруппаНедоступноДляИзменения.Видимость = ЭлементГруппаНедоступноДляИзменения.Видимость;
	
	УсловноеОформление = Форма.УсловноеОформление;
	НастроитьУсловноеОформлениеЭтапа(УсловноеОформление);
	НастроитьУсловноеОформлениеПустогоУчастника(УсловноеОформление);
	НастроитьУсловноеОформлениеПустогоУсловия(УсловноеОформление);
	НастроитьУсловноеОформлениеКомментарияЗаполненияУчастника(
		УсловноеОформление,
		"Участники.Участник",
		"УчастникиПредставлениеСтроки");
	
	// Права от предмета. Если есть права на предмет, то есть права на Действие.
	Если ИзменениеДействияРазрешено Тогда
		РазрешенияТаблицей = Форма.РеквизитФормыВЗначение("Разрешения"); // ТаблицаЗначений
		Для Каждого РазрешениеXDTO Из Разрешения Цикл
			Разрешение = РазрешенияТаблицей.Добавить();
			Разрешение.ИдентификаторЭтапа = РазрешениеXDTO.stageID;
			Разрешение.Разрешение = РазрешениеXDTO.permission;
		КонецЦикла;
		Форма.ЗначениеВРеквизитФормы(РазрешенияТаблицей, "Разрешения");
	КонецЕсли;
	
	// Отображение задержки запуска.
	Если Элементы.Найти("ГруппаОписаниеОтложенногоВыполнения") <> Неопределено Тогда
		Форма.ОтложенноеНачалоВыполненияДни = ФормаXDTO.delayedExecutionStartDays;
		Форма.ОтложенноеНачалоВыполненияЧасы = ФормаXDTO.delayedExecutionStartHours;
		Форма.ОписаниеОтложенногоНачалаВыполнения = ФормаXDTO.delayedExecutionStartDescription;
		Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ФормаXDTO, "startDateDescription") Тогда
			Форма.ПредставлениеЗапуска = ФормаXDTO.startDateDescription;
		КонецЕсли;
		
		ЭлементОчиститьЗадержку = СтруктураКнопкиФормы(ФормаXDTO.buttonClearDelay);
		Форма.Команды.ОчиститьЗадержку.Подсказка = ЭлементОчиститьЗадержку.ПодсказкаКоманды;
		Элементы.ОчиститьЗадержку.Видимость = ЭлементОчиститьЗадержку.Видимость;
		
		ЭлементГруппаОписаниеОтложенногоВыполнения = СтруктураГруппыФормы(ФормаXDTO.groupDelayedExecutionDescription);
		Элементы.ГруппаОписаниеОтложенногоВыполнения.Видимость = ЭлементГруппаОписаниеОтложенногоВыполнения.Видимость;
		Элементы.ОтложенноеДействие.Видимость = ФормаXDTO.delayedExecutionPictureVisibility;
		
		ЭлементОписаниеОтложенногоНачалаВыполнения = СтруктураПоляНадписи(ФормаXDTO.delayedExecutionStartLabelField);
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Доступность = ЭлементОписаниеОтложенногоНачалаВыполнения.Доступность;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.ВысотаЗаголовка =
			ЭлементОписаниеОтложенногоНачалаВыполнения.ВысотаЗаголовка;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка = ЭлементОписаниеОтложенногоНачалаВыполнения.Подсказка;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = ЭлементОписаниеОтложенногоНачалаВыполнения.Ширина;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.ПоложениеЗаголовка =
			ЭлементОписаниеОтложенногоНачалаВыполнения.ПоложениеЗаголовка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеИзСпискаВыражений(Прокси, ОбъектИС, Реквизиты, ТабличныеЧасти, СписокВыражений)
	
	Для Каждого Выражение Из СписокВыражений Цикл
		
		Если СокрЛП(Выражение.expressionOnBuiltInLanguage) = "" Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не задан текст выражения на встроенном языке.
					|Идентификатор выражения: %1.'"),
				Выражение.id);
		КонецЕсли;
		
		Если Выражение.type = "Attribute" Тогда
			// Выражение для заполнения реквизита. Выполняем единожды, помещаем в attributes.
			РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
				Выражение.expressionOnBuiltInLanguage,
				ОбъектИС);
			Реквизиты.Добавить(
				ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, Выражение.id, РезультатВыражения));
			
		ИначеЕсли Выражение.type = "TabularSection" Тогда
			// Выражение для заполнения табличной части. Выполняем единожды, помещаем в tabularSections.
			РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
				Выражение.expressionOnBuiltInLanguage,
				ОбъектИС); // ТаблицаЗначений
			ТабличныеЧасти.Добавить(ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
				Прокси,
				Выражение.id,
				РезультатВыражения,
				РезультатВыражения.Колонки));
			
		ИначеЕсли Выражение.type = "TabularSectionAttribute" Тогда
			// Выражение для заполнения реквизита таб. части.
			ТаблицаРезультат = Новый ТаблицаЗначений;
			ТаблицаРезультат.Колонки.Добавить("Result");
			
			Если Выражение.tabularSectionName = "" Тогда
				// Вариант: по правилам для отдельных реквизитов.
				// Выполняем единожды, помещаем в attributes.
				РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
					Выражение.expressionOnBuiltInLanguage,
					ОбъектИС);
				СтрокаРезультат = ТаблицаРезультат.Добавить();
				СтрокаРезультат.Result = РезультатВыражения;
				
			Иначе
				// Вариант: из таблицы источника.
				// Выполняем многократно для каждой строки источника, помещаем в tabularSections.
				Для Каждого ТекущаяСтрока Из ОбъектИС[Выражение.tabularSectionName] Цикл
					РезультатВыражения = РезультатВыраженияНаВстроенномЯзыке(
						Выражение.expressionOnBuiltInLanguage,
						ОбъектИС,,
						ТекущаяСтрока);
					СтрокаРезультат = ТаблицаРезультат.Добавить();
					СтрокаРезультат.Result = РезультатВыражения;
				КонецЦикла;
				
			КонецЕсли;
			
			ТабличныеЧасти.Добавить(ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(
				Прокси,
				Выражение.id,
				ТаблицаРезультат,
				ТаблицаРезультат.Колонки));
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не задан вариант выполнения выражения на встроенном языке.
					|Идентификатор выражения: %1.'"),
				Выражение.id);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИнтерактивноеДействие(Прокси, ИнтерактивноеДействие, ИнтерактивноеДействиеXDTO)
	
	Если НРег(ИнтерактивноеДействиеXDTO.interactiveAction) = "backtothetask" Тогда
		ИнтерактивноеДействие.ВернутьсяКЗадаче = Истина;
		
	ИначеЕсли НРег(ИнтерактивноеДействиеXDTO.interactiveAction) = "selecttaskperformer" Тогда
		ИнтерактивноеДействие.ВыбратьИсполнителяЗадачи = Истина;
		ИнтерактивноеДействие.Контекст = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ОбъектXDTOВСтроку(
			Прокси,
			ИнтерактивноеДействиеXDTO.context);
		
	ИначеЕсли НРег(ИнтерактивноеДействиеXDTO.interactiveAction) = "askaquestion" Тогда
		ИнтерактивноеДействие.ЗадатьПроизвольныйВопрос = Истина;
		ИнтерактивноеДействие.Контекст = Новый Структура;
		ИнтерактивноеДействие.Контекст.Вставить("Текст", ИнтерактивноеДействиеXDTO.context.text);
		ИнтерактивноеДействие.Контекст.Вставить("Заголовок", ИнтерактивноеДействиеXDTO.context.title);
		Кнопки = Новый СписокЗначений;
		Для Каждого КнопкаXDTO Из ИнтерактивноеДействиеXDTO.context.buttons Цикл
			Кнопки.Добавить(КнопкаXDTO);
		КонецЦикла;
		ИнтерактивноеДействие.Контекст.Вставить("Кнопки", Кнопки);
		ИнтерактивноеДействие.Контекст.Вставить("КнопкаПоУмолчанию", ИнтерактивноеДействиеXDTO.context.defaultButton);
		
	ИначеЕсли НРег(ИнтерактивноеДействиеXDTO.interactiveAction) = "changeprocessparameters" Тогда
		ИнтерактивноеДействие.ИзменитьПараметрыПроцесса = Истина;
		ИнтерактивноеДействие.Контекст = Новый Структура("ДействиеID, ДействиеТип",
			ИнтерактивноеДействиеXDTO.context.id, ИнтерактивноеДействиеXDTO.context.type);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыИзМетаданных(Прокси, РеквизитыПриемник, РеквизитыИсточник, ОбъектИС,
		ЭтоСтандартныеРеквизиты = Ложь, ЭтоДопРеквизиты = Ложь)
	
	Для Каждого Реквизит Из РеквизитыИсточник Цикл
		Если ЭтоДопРеквизиты Тогда
			ИмяРеквизита = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ИмяДопРеквизита(Реквизит);
			Значение = УправлениеСвойствами.ЗначениеСвойства(ОбъектИС.Ссылка, Реквизит);
		Иначе
			ИмяРеквизита = Реквизит.Имя;
			Значение = ОбъектИС[Реквизит.Имя];
		КонецЕсли;
		
		Если ИмяРеквизита = "" Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыПриемник.Добавить(ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, ИмяРеквизита, Значение));
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру дополнительных данных задачи.
//
// Параметры:
//   ОбластьДействияXDTO - ОбъектXDTO - объект XDTO типа DMTaskActionArea.
//   Флаг - Строка - имя флага, принимает значения перечисления DMObjectFlag (http://www.1c.ru/dm).
//
// Возвращаемое значение:
//   см. НоваяОбластьДействияЗадачи
//
Функция ОбластьДействияЗадачи(ОбластьДействияXDTO, Флаг)
	
	ОбластьДействия = НоваяОбластьДействияЗадачи();
	
	ОбластьДействия.ВыполнитьДействиеЗадачиВариант1 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteOption1);
	ОбластьДействия.ВыполнитьДействиеЗадачиВариант2 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteOption2);
	ОбластьДействия.ВыполнитьДействиеЗадачиВариант3 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteOption3);
	
	ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону1 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteByTemplateOption1);
	ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону2 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteByTemplateOption2);
	ОбластьДействия.ВыполнитьДействиеЗадачиПоШаблону3 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteByTemplateOption3);
	
	ОбластьДействия.ВыбратьШаблонДляВыполненияЗадачи =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonSelectTaskTemplate);
	ОбластьДействия.ВыполнитьПодключаемоеДействиеЗадачи1 =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonExecuteConnectedTaskAction1);
	ОбластьДействия.ОтменитьВыполнение =
		СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonUndoExecution);
	
	ОбластьДействия.ВерсияДанныхДействияЗадачи = ОбластьДействияXDTO.dataVersion;
	ОбластьДействия.РезультатДействияТекстом = ОбластьДействияXDTO.actionResultString;
	ОбластьДействия.РезультатДействияПолеВвода =
		СтруктураПоляВводаФормы(ОбластьДействияXDTO.actionResultInputField);
	ОбластьДействия.ПодменюФлаги = СтруктураГруппыФормы(ОбластьДействияXDTO.flagsSubmenu);
	ОбластьДействия.Флаг = Флаг;
	ОбластьДействия.ВзятьВРаботу = СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonAcceptTask);
	ОбластьДействия.ОтменитьВзятиеВРаботу = СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonRevokeTaskAcceptance);
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбластьДействияXDTO, "buttonAddParticipants") Тогда
		ОбластьДействия.ДобавитьУчастников = СтруктураКнопкиФормы(ОбластьДействияXDTO.buttonAddParticipants);
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбластьДействияXDTO, "processingAction") Тогда
		ОбластьДействия.ДействиеОбработки = ОбластьДействияXDTO.processingAction.name;
		ОбластьДействия.ДействиеОбработкиID = ОбластьДействияXDTO.processingAction.objectID.id;
		ОбластьДействия.ДействиеОбработкиТип = ОбластьДействияXDTO.processingAction.objectID.type;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбластьДействияXDTO, "resultOfOption1") Тогда
		ОбластьДействия.РезультатВарианта1 = ОбластьДействияXDTO.resultOfOption1.name;
		ОбластьДействия.РезультатВарианта1ID = ОбластьДействияXDTO.resultOfOption1.objectID.id;
		ОбластьДействия.РезультатВарианта1Тип = ОбластьДействияXDTO.resultOfOption1.objectID.type;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбластьДействияXDTO, "resultOfOption2") Тогда
		ОбластьДействия.РезультатВарианта2 = ОбластьДействияXDTO.resultOfOption2.name;
		ОбластьДействия.РезультатВарианта2ID = ОбластьДействияXDTO.resultOfOption2.objectID.id;
		ОбластьДействия.РезультатВарианта2Тип = ОбластьДействияXDTO.resultOfOption2.objectID.type;
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ОбластьДействияXDTO, "resultOfOption3") Тогда
		ОбластьДействия.РезультатВарианта3 = ОбластьДействияXDTO.resultOfOption3.name;
		ОбластьДействия.РезультатВарианта3ID = ОбластьДействияXDTO.resultOfOption3.objectID.id;
		ОбластьДействия.РезультатВарианта3Тип = ОбластьДействияXDTO.resultOfOption3.objectID.type;
	КонецЕсли;
	
	Возврат ОбластьДействия;
	
КонецФункции

// Выполняет обновление группы формы.
//
// Параметры:
//   ГруппаФормы - ГруппаФормы
//   ПараметрыГруппыФормы - см. СтруктураГруппыФормы
//
Процедура ОбновитьГруппуФормы(ГруппаФормы, ПараметрыГруппыФормы)
	
	ГруппаФормы.Видимость = ПараметрыГруппыФормы.Видимость;
	ГруппаФормы.Доступность = ПараметрыГруппыФормы.Доступность;
	ГруппаФормы.Заголовок = ПараметрыГруппыФормы.Заголовок;
	
КонецПроцедуры

Процедура ОбновитьКнопкуВОбластиДействия(КнопкаНаФорме, КомандаКнопки, ПараметрыКнопки, ИзменятьШрифт)
	
	КнопкаНаФорме.Видимость = ПараметрыКнопки.Видимость;
	КнопкаНаФорме.Доступность = ПараметрыКнопки.Доступность;
	КнопкаНаФорме.Заголовок = ПараметрыКнопки.Заголовок;
	КнопкаНаФорме.ЦветТекста = ПараметрыКнопки.ЦветТекста;
	КнопкаНаФорме.ВысотаЗаголовка = ПараметрыКнопки.ВысотаЗаголовка;
	Если ИзменятьШрифт Тогда
		КнопкаНаФорме.Шрифт = ПараметрыКнопки.Шрифт;
	КонецЕсли;
	
	Если ПараметрыКнопки.ПодсказкаКоманды <> Неопределено Тогда
		КомандаКнопки.Подсказка = ПараметрыКнопки.ПодсказкаКоманды;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКнопкуФормы(КнопкаНаФорме, ПараметрыКнопки)
	
	Если ПараметрыКнопки <> Неопределено Тогда
		КнопкаНаФорме.Видимость = ПараметрыКнопки.Видимость;
		КнопкаНаФорме.Доступность = ПараметрыКнопки.Доступность;
		КнопкаНаФорме.Заголовок = ПараметрыКнопки.Заголовок;
		КнопкаНаФорме.ВысотаЗаголовка = ПараметрыКнопки.ВысотаЗаголовка;
	Иначе
		КнопкаНаФорме.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПолеВводаВОбластиДействия(ПолеВводаНаФорме, ПараметрыПоляВвода)
	
	ПолеВводаНаФорме.Видимость = ПараметрыПоляВвода.Видимость;
	ПолеВводаНаФорме.ТолькоПросмотр = ПараметрыПоляВвода.ТолькоПросмотр;
	ПолеВводаНаФорме.ПодсказкаВвода = ПараметрыПоляВвода.ПодсказкаВвода;
	
КонецПроцедуры

// Формирует представление значения для быстрого поиска.
//
// Параметры:
//   Значение - Строка
//            - Дата
//            - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//            - СписокЗначений из см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//
// Возвращаемое значение:
//   Строка - Описание.
//
Функция ПредставлениеЗначения(Значение)
	
	ПредставлениеЗначения = "";
	ТипЗначение = ТипЗнч(Значение);
	
	Если ТипЗначение = Тип("СписокЗначений") Тогда
		
		МассивПредставления = Новый Массив;
		Для Каждого ЭлементСписка Из Значение Цикл
			МассивПредставления.Добавить(ПредставлениеЗначения(ЭлементСписка.Значение));
		КонецЦикла;
		ПредставлениеЗначения = СтрСоединить(МассивПредставления, "; ");
		
	ИначеЕсли ТипЗначение = Тип("Структура") Тогда
		
		ПредставлениеЗначения = Значение.Наименование;
		
	ИначеЕсли ТипЗначение = Тип("Дата") Тогда
		
		ПредставлениеЗначения = Формат(Значение, "ДЛФ=D");
		
	ИначеЕсли ТипЗначение = Тип("Строка") Тогда
		
		ДанныеФлага = ДанныеФлага(Значение);
		Если ДанныеФлага.ИндексКартинки > 0 Тогда
			// Это флаг.
			ПредставлениеЗначения = ДанныеФлага.Представление;
		Иначе
			ПредставлениеЗначения = Строка(Значение);
		КонецЕсли;
		
	Иначе
		
		ПредставлениеЗначения = Строка(Значение);
		
	КонецЕсли;
	
	Возврат ПредставлениеЗначения;
	
КонецФункции

Функция ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, ИмяРеквизита, ЗначениеРеквизита)
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataAttribute");
	Результат.name = ИмяРеквизита;
	
	ТипРеквизита = ТипЗнч(ЗначениеРеквизита);
	
	Если ТипРеквизита = Тип("Неопределено") Тогда
		// Свойство value оставляем не установленным.
		Возврат Результат;
		
	ИначеЕсли ТипРеквизита = Тип("ОбъектXDTO") Тогда
		СкопироватьОбъектXDTO(Результат.value, ЗначениеРеквизита, Прокси);
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипРеквизита) Тогда
		Если ЗначениеРеквизита.Пустая() Тогда
			// Свойство value оставляем не установленным.
			Возврат Результат;
		Иначе
			ИмяТипаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ИмяТипаXDTO(
				Метаданные.НайтиПоТипу(ТипРеквизита).ПолноеИмя());
			Если ИмяТипаXDTO = "" Тогда
				ИмяТипаXDTO = "DMObject";
			КонецЕсли;
			
			Результат.value = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(
				Прокси,
				ИмяТипаXDTO,
				ЗначениеРеквизита);
		КонецЕсли;
		
	ИначеЕсли ТипРеквизита = Тип("Строка")
			Или ТипРеквизита = Тип("Число")
			Или ТипРеквизита = Тип("Дата")
			Или ТипРеквизита = Тип("Булево") Тогда
		Результат.value = ЗначениеРеквизита;
		
	ИначеЕсли ТипРеквизита = Тип("УникальныйИдентификатор") Тогда
		Результат.value = Строка(ЗначениеРеквизита);
		
	Иначе
		Результат.error = СтрШаблон(
			НСтр("ru = 'Невозможно выгрузить данные из реквизита ""%1"" с типом ""%2"".'"),
			ИмяРеквизита,
			ТипРеквизита);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразоватьТаблицуОбъектаИСВОбъектXDTO(Прокси, ИмяТаблицы, ТаблицаЗначений, Колонки)
	
	Результат = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataTabularSection");
	Результат.name = ИмяТаблицы;
	Строки = Результат.rows; // СписокXDTO
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтрокаXDTO = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMDataTabularSectionRow");
		РеквизитыСтроки = СтрокаXDTO.attributes; // СписокXDTO
		
		Для Каждого Колонка Из Колонки Цикл
			РеквизитыСтроки.Добавить(
				ПреобразоватьРеквизитОбъектаИСВОбъектXDTO(Прокси, Колонка.Имя, Строка[Колонка.Имя]));
		КонецЦикла;
		
		Строки.Добавить(СтрокаXDTO);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры группы формы.
//
// Параметры:
//   ГруппаФормыXDTO - ОбъектXDTO - объект XDTO типа DMFormGroup:
//     * visible - Булево
//     * enabled - Булево
//     * title - Строка
//
// Возвращаемое значение:
//   Структура:
//     * Видимость - Булево
//     * Доступность - Булево
//     * Заголовок - Строка
//
Функция СтруктураГруппыФормы(ГруппаФормыXDTO)
	
	СтруктураГруппыФормы = Новый Структура;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ГруппаФормыXDTO, "visible") Тогда
		СтруктураГруппыФормы.Вставить("Видимость", ГруппаФормыXDTO.visible);
	Иначе
		СтруктураГруппыФормы.Вставить("Видимость", Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ГруппаФормыXDTO, "enabled") Тогда
		СтруктураГруппыФормы.Вставить("Доступность", ГруппаФормыXDTO.enabled);
	Иначе
		СтруктураГруппыФормы.Вставить("Доступность", Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ГруппаФормыXDTO, "title") Тогда
		СтруктураГруппыФормы.Вставить("Заголовок", ГруппаФормыXDTO.title);
	Иначе
		СтруктураГруппыФормы.Вставить("Заголовок", "");
	КонецЕсли;
	
	Возврат СтруктураГруппыФормы;
	
КонецФункции

// Конструктор структуры кнопки формы.
//
// Параметры:
//   КнопкаXDTO - ОбъектXDTO - объект XDTO типа DMButton:
//     * visible - Булево
//     * enabled - Булево
//     * title - Строка
//     * titleHeight - Число
//     * defaultButton - Булево
//     * hint - Строка
//     * textColor - Строка
//     * font - Строка
//
// Возвращаемое значение:
//   Структура:
//     * Видимость - Булево
//     * Доступность - Булево
//     * Заголовок - Строка
//     * ВысотаЗаголовка - Число
//     * КнопкаПоУмолчанию - Булево
//     * ПодсказкаКоманды - Строка
//                        - Неопределено
//     * ЦветТекста - Цвет
//     * Шрифт - Шрифт
//
Функция СтруктураКнопкиФормы(КнопкаXDTO)
	
	СтруктураКнопкиФормы = Новый Структура;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "visible") Тогда
		СтруктураКнопкиФормы.Вставить("Видимость", КнопкаXDTO.visible);
	Иначе
		СтруктураКнопкиФормы.Вставить("Видимость", Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "enabled") Тогда
		СтруктураКнопкиФормы.Вставить("Доступность", КнопкаXDTO.enabled);
	Иначе
		СтруктураКнопкиФормы.Вставить("Доступность", Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "title") Тогда
		СтруктураКнопкиФормы.Вставить("Заголовок", КнопкаXDTO.title);
	Иначе
		СтруктураКнопкиФормы.Вставить("Заголовок", "");
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "titleHeight") Тогда
		СтруктураКнопкиФормы.Вставить("ВысотаЗаголовка", КнопкаXDTO.titleHeight);
	Иначе
		СтруктураКнопкиФормы.Вставить("ВысотаЗаголовка", 0);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "defaultButton") Тогда
		СтруктураКнопкиФормы.Вставить("КнопкаПоУмолчанию", КнопкаXDTO.defaultButton);
	Иначе
		СтруктураКнопкиФормы.Вставить("КнопкаПоУмолчанию", Ложь);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "hint") Тогда
		СтруктураКнопкиФормы.Вставить("ПодсказкаКоманды", КнопкаXDTO.hint);
	Иначе
		СтруктураКнопкиФормы.Вставить("ПодсказкаКоманды", Неопределено);
	КонецЕсли;
	
	ЦветТекста = Новый Цвет;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "textColor") Тогда
		Если КнопкаXDTO.textColor = "Positive" Тогда
			ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли КнопкаXDTO.textColor = "Negative" Тогда
			ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	СтруктураКнопкиФормы.Вставить("ЦветТекста", ЦветТекста);
	
	Шрифт = Новый Шрифт;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(КнопкаXDTO, "font") Тогда
		Если КнопкаXDTO.font = "Normal" Тогда
			Шрифт = ШрифтыСтиля.ШрифтКнопкиВыполненияЗадачиОбычный;
		ИначеЕсли КнопкаXDTO.font = "Small" Тогда
			Шрифт = ШрифтыСтиля.ШрифтКнопкиВыполненияЗадачиМелкий;
		КонецЕсли;
	КонецЕсли;
	СтруктураКнопкиФормы.Вставить("Шрифт", Шрифт);
	
	Возврат СтруктураКнопкиФормы;
	
КонецФункции

// Конструктор структуры поля ввода формы.
//
// Параметры:
//   ПолеВводаXDTO - ОбъектXDTO - объект XDTO типа DMInputField:
//     * visible - Булево
//     * enabled - Булево
//     * readOnly - Булево
//     * inputHint - Строка
//
// Возвращаемое значение:
//   Структура:
//     * Видимость - Булево
//     * Доступность - Булево
//     * ТолькоПросмотр - Булево
//     * ПодсказкаВвода - Строка
//
Функция СтруктураПоляВводаФормы(ПолеВводаXDTO)
	
	СтруктураПоляВводаФормы = Новый Структура;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеВводаXDTO, "visible") Тогда
		СтруктураПоляВводаФормы.Вставить("Видимость", ПолеВводаXDTO.visible);
	Иначе
		СтруктураПоляВводаФормы.Вставить("Видимость", Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеВводаXDTO, "enabled") Тогда
		СтруктураПоляВводаФормы.Вставить("Доступность", ПолеВводаXDTO.enabled);
	Иначе
		СтруктураПоляВводаФормы.Вставить("Доступность", Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеВводаXDTO, "readOnly") Тогда
		СтруктураПоляВводаФормы.Вставить("ТолькоПросмотр", ПолеВводаXDTO.readOnly);
	Иначе
		СтруктураПоляВводаФормы.Вставить("ТолькоПросмотр", Ложь);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеВводаXDTO, "inputHint") Тогда
		СтруктураПоляВводаФормы.Вставить("ПодсказкаВвода", ПолеВводаXDTO.inputHint);
	Иначе
		СтруктураПоляВводаФормы.Вставить("ПодсказкаВвода", "");
	КонецЕсли;
	
	Возврат СтруктураПоляВводаФормы;
	
КонецФункции

// Конструктор структуры поля надписи.
//
// Параметры:
//   ПолеНадписиXDTO - ОбъектXDTO - объект XDTO типа DMLabelField:
//     * enabled - Булево
//     * titleHeight - Число
//     * hint - Строка
//     * width - Число
//     * titleLocation - Строка
//
// Возвращаемое значение:
//   Структура:
//     * Доступность - Булево
//     * ВысотаЗаголовка - Число
//     * Подсказка - Строка
//     * Ширина - Число
//     * ПоложениеЗаголовка - ПоложениеЗаголовкаЭлементаФормы
//
Функция СтруктураПоляНадписи(ПолеНадписиXDTO)
	
	СтруктураПоляНадписи = Новый Структура;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеНадписиXDTO, "enabled") Тогда
		СтруктураПоляНадписи.Вставить("Доступность", ПолеНадписиXDTO.enabled);
	Иначе
		СтруктураПоляНадписи.Вставить("Доступность", Истина);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеНадписиXDTO, "titleHeight") Тогда
		СтруктураПоляНадписи.Вставить("ВысотаЗаголовка", ПолеНадписиXDTO.titleHeight);
	Иначе
		СтруктураПоляНадписи.Вставить("ВысотаЗаголовка", 0);
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеНадписиXDTO, "hint") Тогда
		СтруктураПоляНадписи.Вставить("Подсказка", ПолеНадписиXDTO.hint);
	Иначе
		СтруктураПоляНадписи.Вставить("Подсказка", "");
	КонецЕсли;
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеНадписиXDTO, "width") Тогда
		СтруктураПоляНадписи.Вставить("Ширина", ПолеНадписиXDTO.width);
	Иначе
		СтруктураПоляНадписи.Вставить("Ширина", 0);
	КонецЕсли;
	
	Если ИнтеграцияС1СДокументооборотБазоваяФункциональность.СвойствоУстановлено(ПолеНадписиXDTO, "titleLocation") Тогда
		Если ПолеНадписиXDTO.titleLocation = "Auto" Тогда
			МестоположениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
			
		ИначеЕсли ПолеНадписиXDTO.titleLocation = "Top" Тогда
			МестоположениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			
		ИначеЕсли ПолеНадписиXDTO.titleLocation = "Left" Тогда
			МестоположениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
			
		ИначеЕсли ПолеНадписиXDTO.titleLocation = "None" Тогда
			МестоположениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			
		ИначеЕсли ПолеНадписиXDTO.titleLocation = "Bottom" Тогда
			МестоположениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Низ;
			
		ИначеЕсли ПолеНадписиXDTO.titleLocation = "Right" Тогда
			МестоположениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
	Иначе
		МестоположениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	КонецЕсли;
	СтруктураПоляНадписи.Вставить("ПоложениеЗаголовка", МестоположениеЗаголовка);
	
	Возврат СтруктураПоляНадписи;
	
КонецФункции

Функция СтруктураСтрокиУчастника()
	
	Возврат Новый Структура(
		"Идентификатор, Участник, УчастникID, УчастникТип, УчастникПредставление,
		|ОсновнойОбъектАдресацииУчастник, ОсновнойОбъектАдресацииУчастникID, ОсновнойОбъектАдресацииУчастникТип,
		|ДополнительныйОбъектАдресацииУчастник, ДополнительныйОбъектАдресацииУчастникID,
		|ДополнительныйОбъектАдресацииУчастникТип,
		|Условие, УсловиеID, УсловиеТип, УсловиеПредставление, Описание,
		|Срок, СрокДни, СрокЧасы, СрокМинуты, ИзНастройки,
		|Защищенный, ЗащищенныйВНастройке, ВариантУстановкиСрока, СрокПредставление,
		|ПредставлениеСтроки, ИдентификаторЭтапа, ИдентификаторПункта,
		|ВышестоящийУчастник, СрокОбщий, НаименованиеЗадачи,
		|ПроектРезолюции, ПредставлениеРезолюции, ЕстьРезолюция, Ответственный, ФункцияУчастника, Номер,
		|ИсточникДанных, ИсточникДанныхID, ИсточникДанныхТип, ИсточникДанныхПредставление,
		|Контролер, КонтролерID, КонтролерТип, КонтролерПредставление,
		|ОсновнойОбъектАдресацииКонтролер, ОсновнойОбъектАдресацииКонтролерID, ОсновнойОбъектАдресацииКонтролерТип,
		|ДополнительныйОбъектАдресацииКонтролер, ДополнительныйОбъектАдресацииКонтролерID,
		|ДополнительныйОбъектАдресацииКонтролерТип,
		|Организация, ОрганизацияID, ОрганизацияТип,
		|Автор, АвторID, АвторТип, АвторПредставление,
		|ПорядокВыполненияУчастниками, РангС, РангПо");
	
КонецФункции

#КонецОбласти