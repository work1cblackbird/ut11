////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции для обработки действий пользователя
// в процессе работы с документами продажи.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает наибольшую из дат аванса в строке тч ЭтапыОплаты
//
// Параметры:
//   ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - этапы оплаты, в которых необходимо рассчитать дату аванса.
//
// Возвращаемое значение:
//   Дата - максимальная дата аванса, если дат аванса нет, то пустая дата.
//
Функция МаксимальнаяДатаАванса(ЭтапыГрафикаОплаты) Экспорт
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки")
			Или ТекЭтап.ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения") Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МаксДатаАванса;
	
КонецФункции

// Процедура обработки события "ПриНачалеРедактирования" табличной части документа продажи.
//
// Параметры:
//	Форма         - ФормаКлиентскогоПриложения - форма документа, в котором возникло событие
//	ИмяТаблицы    - Строка - имя таблицы, из которой произошло событие
//	СтрокаТаблицы - ДанныеФормыЭлементКоллекции - обрабатываемая строка табличной части документа
//	НоваяСтрока   - Булево - флаг редактирования новой строки
//	Копирование   - Булево - флаг редактирования путем копирования строки.
//
Процедура СтрокаНоменклатурыПриНачалеРедактирования(Форма, ИмяТаблицы, СтрокаТаблицы, НоваяСтрока, Копирование) Экспорт

	Если НоваяСтрока И НЕ Копирование Тогда

		Если Не Форма.ИспользоватьСоглашенияСКлиентами И СтрокаТаблицы.Свойство("ВидЦены") Тогда
			
			Таблица = Форма.Объект[ИмяТаблицы];
			
			Если Таблица.Количество() > 1 Тогда
				СтрокаТаблицы.ВидЦены = Таблица[СтрокаТаблицы.НомерСтроки - 2].ВидЦены;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ВидЦены) Тогда
				СтрокаТаблицы.ВидЦены = Форма.ВидЦеныПоУмолчанию;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя о перезаполнении желаемой даты отгрузки.
//
Процедура ОповеститьОПерезаполненииЖелаемойДатыОтгрузки() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Желаемая дата отгрузки перезаполнена'"),
		,
		НСтр("ru='Желаемая дата отгрузки перезаполнена с учетом максимальной даты аванса.'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

// Осуществляет инициализацию структуры состояния заказа.
//
// Возвращаемое значение:
//	Структура - структура с полями:
//	 * Состояние - ПеречислениеСсылка.СостоянияЗаказовКлиентов -
//	 * СостояниеПросрочено - Булево -
//	 * СуммаОплаты - Число -
//	 * СуммаОтгрузки - Число -
//	 * ПроцентОплаты - Число -
//	 * ПроцентОтгрузки - Число -
//	 * СуммаДолга - Число -
//	 * ПроцентДолга - Число -
//	 * СуммаКОплате - Число -
//	 * ЕстьРасхожденияОрдерНакладная - Булево -
//
Функция СтруктураСостоянияЗаказа() Экспорт
	
	СтруктураСостоянияЗаказа = ВзаиморасчетыКлиентСервер.СтруктураСостоянияРасчетов(Истина);
	СтруктураСостоянияЗаказа.Вставить("ЕстьРасхожденияОрдерНакладная", Ложь);
	Возврат СтруктураСостоянияЗаказа;
	
КонецФункции

#Область ПроцедурыИФункцииРаботыСВыборомЗначений

// Функция-конструктор параметров начала выбора соглашения с клиентом на форме.
//
// Возвращаемое значение:
// 	Структура - Структура параметров:
//     * Элемент                      - ПолеФормы - Поле выбора соглашения.
//     * Партнер                      - СправочникСсылка.Партнеры - ссылка на партнера, для которого выберите соглашение
//     * Организация                  - СправочникСсылка.Организации - ссылка на организацию, для которой выбирается соглашение
//     * Документ                     - СправочникСсылка.СоглашенияСКлиентами - ссылка на ранее выбранное соглашение для
//                                                                              начального позиционирования в списке.
//     * ДатаДокумента                - Дата - Дата для определения действующего соглашения.
//     * ТолькоТиповые                - Булево - флаг, позволяющий включать в список выбора только типовые соглашения
//     * ТолькоИспользуемыеВРаботеТП  - Булево - флаг, позволяющий включать в список выбора только соглашения,
//                                              используемые в работе торговых представителей.
//     * ХозяйственнаяОперация        - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция объекта.
//     * ДанныеФормыСтруктура         - ДанныеФормыСтруктура - Данные формы инициатора.
//
Функция ПараметрыНачалаВыбораСоглашенияСКлиентом() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("Элемент");
	СтруктураПараметров.Вставить("Партнер");
	СтруктураПараметров.Вставить("Организация");
	СтруктураПараметров.Вставить("Документ");
	СтруктураПараметров.Вставить("ДатаДокумента", Дата(1,1,1));
	СтруктураПараметров.Вставить("ТолькоТиповые", Ложь);
	СтруктураПараметров.Вставить("ТолькоИспользуемыеВРаботеТП", Ложь);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация", Неопределено);
	СтруктураПараметров.Вставить("ДанныеФормыСтруктура", Неопределено);
	СтруктураПараметров.Вставить("ИспользуютсяДоговорыКонтрагентов", Неопределено);
	СтруктураПараметров.Вставить("КомиссионныеПродажи25", Неопределено);
	СтруктураПараметров.Вставить("ТолькоОперацииПередачи", Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура - обработчик события "НачалоВыбора" элемента формы "Соглашение"
//
// Параметры:
//	СтруктураПараметров  - см. ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом
//	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура НачалоВыбораСоглашенияСКлиентом(СтруктураПараметров, СтандартнаяОбработка) Экспорт
	
	Элемент                     = СтруктураПараметров.Элемент;
	Партнер                     = СтруктураПараметров.Партнер;
	Документ                    = СтруктураПараметров.Документ;
	ДатаДокумента               = СтруктураПараметров.ДатаДокумента;
	ТолькоТиповые               = СтруктураПараметров.ТолькоТиповые;
	ТолькоИспользуемыеВРаботеТП = СтруктураПараметров.ТолькоИспользуемыеВРаботеТП;
	ХозяйственнаяОперация       = СтруктураПараметров.ХозяйственнаяОперация;
	ДанныеФормыСтруктура        = СтруктураПараметров.ДанныеФормыСтруктура;
	ИспользуютсяДоговорыКонтрагентов = СтруктураПараметров.ИспользуютсяДоговорыКонтрагентов;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		ОтборКлиент = Новый Структура("Клиент", Истина);
		
		Если СтруктураПараметров.Свойство("ОбслуживаетсяТорговымиПредставителями") Тогда
			ОтборКлиент.Вставить("ОбслуживаетсяТорговымиПредставителями", СтруктураПараметров.ОбслуживаетсяТорговымиПредставителями);	
		КонецЕсли;

		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", Новый Структура("Отбор", ОтборКлиент),,,,, 
			Новый ОписаниеОповещения("НачалоВыбораСоглашенияСКлиентомЗавершение", ЭтотОбъект, СтруктураПараметров), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	НачалоВыбораСоглашенияСКлиентомФрагмент(СтруктураПараметров);
	
КонецПроцедуры

// Создает транспортную накладную в случае утвердительного ответа пользователя.
//
// Параметры:
//  Результат               - СправочникСсылка.Партнеры - партнер, для которого выбираются соглашения.
//  ДополнительныеПараметры - Структура - дополнительные параметры, необходимые для отбора соглашений.
//
Процедура НачалоВыбораСоглашенияСКлиентомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДатаДокумента 				= ДополнительныеПараметры.ДатаДокумента;
	Документ 					= ДополнительныеПараметры.Документ;
	ТолькоИспользуемыеВРаботеТП = ДополнительныеПараметры.ТолькоИспользуемыеВРаботеТП;
	ТолькоТиповые 				= ДополнительныеПараметры.ТолькоТиповые;
	ХозяйственнаяОперация 		= ДополнительныеПараметры.ХозяйственнаяОперация;
	Элемент 					= ДополнительныеПараметры.Элемент;
	ДанныеФормыСтруктура 		= ДополнительныеПараметры.ДанныеФормыСтруктура;
	
	Партнер = Результат;
	
	Если ДанныеФормыСтруктура<>Неопределено Тогда
		ДанныеФормыСтруктура.Партнер = Партнер;
		Если ДанныеФормыСтруктура.Свойство("Контрагент") Тогда
			ПартнерыИКонтрагентыВызовСервера.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, ДанныеФормыСтруктура.Контрагент, Истина);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДляВыбора = ПараметрыНачалаВыбораСоглашенияСКлиентом();
	ЗаполнитьЗначенияСвойств(СтруктураДляВыбора, ДополнительныеПараметры);
	СтруктураДляВыбора.Вставить("Партнер", Партнер);
	
	НачалоВыбораСоглашенияСКлиентомФрагмент(СтруктураДляВыбора);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы "Аналитика расходов".
//
// Параметры:
//	Элемент  - ПолеФормы - Поле выбора аналитики расходов
//	СтандартнаяОбработка - Булево - Признак стандартной обработки события.
//
Процедура НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка) Экспорт
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"ОбщийМодуль.ПродажиКлиент.НачалоВыбораАналитикиРасходов");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("ОбщаяФорма.ВыборАналитикиРасходов", , Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПроверкиВозможностиВыполненияДействий

// Проверяет заполненность реквизитов, необходимых для отмены строк в таблице
//
// Параметры:
//   ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//   ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//   ВыделенныеСтроки - Массив
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеПричиныОтменыВыделенныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти, ВыделенныеСтроки) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,НСтр("ru='В таблице отсутствуют выделенные строки. Выделите строки для отмены.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для отмены непоставленных строк
//
// Параметры:
//   ТабличнаяЧасть              - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку.
//   ПредставлениеТабличнойЧасти - Строка - представление табличной части для информирования пользователя.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеПричиныОтменыНепоставленныхСтрок(ТабличнаяЧасть, ПредставлениеТабличнойЧасти) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		
		ТекстПредупреждения = НСтр("ru='В документе не заполнен список %ПредставлениеТабличнойЧасти%. Строки не могут быть отменены.'");
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ПредставлениеТабличнойЧасти%", ПредставлениеТабличнойЧасти);
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат Ложь;
		
	Иначе
		
		ЕстьНеотмененныеСтроки = Ложь;
		Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
			Если Не ТекСтрока.Отменено Тогда
				ЕстьНеотмененныеСтроки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЕстьНеотмененныеСтроки Тогда
			ПоказатьПредупреждение(,НСтр("ru='Все строки отменены.'"));
			Возврат Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке.
//
// Параметры:
//   ДокументПроведен - Булево - признак проведенности документа.
//
// Возвращаемое значение:
//   Булево - Ложь, если необходимые данные не заполнены.
//
Функция НеобходимоЗаполнениеТоваровПоОтгрузке(ДокументПроведен) Экспорт
	
	Если Не ДокументПроведен Тогда
		ПоказатьПредупреждение(,НСтр("ru='Документ не проведен, заполнение невозможно.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Проверяет является ли оповещение в форме событием изменения документов оплаты.
//
// Параметры:
//   ИмяСобытия - Строка - имя события из процедуры формы "ОбработкаОповещения".
//
// Возвращаемое значение:
//   Булево - Истина, если оповещение является оплатой.
//
Функция ИзменилисьДокументыОплатыКлиентам(ИмяСобытия) Экспорт
	
	Возврат
		ИмяСобытия = "Запись_ОперацияПоПлатежнойКарте"
		Или ИмяСобытия = "Запись_ПоступлениеБезналичныхДенежныхСредств"
		Или ИмяСобытия = "Запись_ПриходныйКассовыйОрдер"
		Или ИмяСобытия = "Запись_ВзаимозачетЗадолженности"
		Или ИмяСобытия = "Запись_СписаниеЗадолженности";
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОповещенияПользователяОВыполненныхДействиях

// Показывает оповещение пользователя об окончании заполнения условий продаж по умолчанию.
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия продаж заполнены'"),
		,
		НСтр("ru='Условия продаж по умолчанию заполнены'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения условий продаж
//
Процедура ОповеститьОбОкончанииЗаполненияУсловийПродаж() Экспорт

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Условия продаж заполнены'"),
		,НСтр("ru='Условия продаж по соглашению с клиентом заполнены'"),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения цен по соглашению с клиентом.
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке.
//	ТекстОшибки - Строка - Описание ошибки при расчете цен.
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны = Истина, ТекстОшибки = "") Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru='Цены по соглашению с клиентом заполнены'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ТекстСообщения = НСтр("ru='Ни в одной строке цены по соглашению с клиентом не заполнены.'");
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения цен по договору с клиентом.
//
// Параметры:
//	ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке.
//	ТекстОшибки - Строка - Описание ошибки при расчете цен.
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоДоговору(ЦеныРассчитаны = Истина, ТекстОшибки = "") Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			НСтр("ru='Цены по договору с клиентом заполнены'"),
			БиблиотекаКартинок.Информация32);
	Иначе
		ТекстСообщения = НСтр("ru='Ни в одной строке цены по договору с клиентом не заполнены.'");
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + ТекстОшибки;
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения цен по виду цен.
//
// Параметры:
//  ЦеныРассчитаны - Булево - Признак успешного расчета цен хотя бы в одной строке.
//  ВидЦен - СправочникСсылка.ВидыЦен - Вид цен, по которому осуществлялось заполнение цен.
//
Процедура ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен) Экспорт

	Если ЦеныРассчитаны Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Цены по виду цен ""%ВидЦен%"" заполнены'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Цены не заполнены'"),
			,
			СтрЗаменить(НСтр("ru='Ни в одной строке цены по виду цен ""%ВидЦен%"" не заполнены'"), "%ВидЦен%", ВидЦен),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//
Процедура ОповеститьОбОтменеВыделенныхСтрок(ПричинаОтмены) Экспорт

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выделенные строки отменены'"),
			,
			СтрЗаменить(НСтр("ru='Выделенные строки отменены по причине ""%ПричинаОтмены%""'"), "%ПричинаОтмены%", ПричинаОтмены),
			БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Показывает оповещение пользователя об отмене выделенных строк
//
// Параметры:
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - Причина отмены выделенных строк.
//	КоличествоОтмененныхСтрок - Число
//	ПроверятьОстатки - Булево
//
Процедура ОповеститьОбОтменеНепоставленныхСтрок(ПричинаОтмены, КоличествоОтмененныхСтрок, ПроверятьОстатки) Экспорт

	Если КоличествоОтмененныхСтрок = 0 Тогда
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Строки не отменены'"),
			,
			НСтр("ru='По всем строкам оформлена отгрузка. Строки не могут быть отменены.'"),
			БиблиотекаКартинок.Информация32);
			
		Иначе
			
			Если ПроверятьОстатки Тогда

				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Строки отменены'"),
					,
					СтрЗаменить(НСтр("ru='Все непоставленные строки отменены по причине ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32);
			
			Иначе
				
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Строки отменены'"),
					,
					СтрЗаменить(НСтр("ru='Все строки отменены по причине ""%ПричинаОтмены%"".'"), "%ПричинаОтмены%", ПричинаОтмены),
					БиблиотекаКартинок.Информация32);
				
			КонецЕсли;
			
		КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании заполнения дат отгрузки всех строк тч.
//
// Параметры:
//	ДатаОтгрузки - Дата - дата отгрузки, по которой заполнялась дата в табличной части
//	ЗаполнениеВыделенныхСтрок - Булево
//
Процедура ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, ЗаполнениеВыделенныхСтрок) Экспорт

	Если ЗаполнениеВыделенныхСтрок Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата отгрузки заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для выделенных строк установлена дата отгрузки %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Дата отгрузки заполнена'"),
			,
			СтрЗаменить(НСтр("ru='Для всех строк установлена дата отгрузки %ДатаОтгрузки%'"), "%ДатаОтгрузки%", Формат(ДатаОтгрузки, "ДЛФ=D")),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Показывает оповещение пользователя об окончании перезаполнения товаров по фактической отгрузке.
//
// Параметры:
//	ЕстьИзменения           - Булево - Если Истина - есть изменения в табличной части
//	КоличествоПерезаполнено - Булево - Если Истина - количество было перезаполнено по фактической отгрузке.
//	ЕстьНесобранные - Булево
//
Процедура ОповеститьОбОкончанииПерезаполненияТоваровПоОтгрузке(ЕстьИзменения, КоличествоПерезаполнено, ЕстьНесобранные = Ложь) Экспорт
	
	Если ЕстьИзменения Тогда
		Если ЕстьНесобранные Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Количество перезаполнено'"),
				,
				НСтр("ru='В строках перезаполнено количество с учетом собирающихся на складе товаров.'"),
				БиблиотекаКартинок.Информация32);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Количество перезаполнено'"),
				,
				НСтр("ru='В строках перезаполнено количество.'"),
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	Иначе
		
		Если КоличествоПерезаполнено Тогда
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Перезаполнение не требуется, т.к. во всех строках количество совпадает с указанным.'"),
				БиблиотекаКартинок.Информация32);
			
		Иначе
		
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Перезаполнение не требуется'"),
				,
				НСтр("ru='Ни по одной строке не начата отгрузка.'"),
				БиблиотекаКартинок.Информация32);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработкиКомандПользователя

// Проверяет заполненность реквизитов, необходимых для заполнения товаров по отгрузке.
//
// Параметры:
//   ОписаниеОповещения    - ОписаниеОповещения - обработка пользовательского выбора.
//   ЕстьОтгруженныеТовары - Булево             - признак наличия отгруженных товаров.
//
Процедура ВопросОПерезаполненииОтгруженнымиТоварами(ОписаниеОповещения, ЕстьОтгруженныеТовары) Экспорт
	
	СписокКнопок = Новый СписокЗначений();
	
	Если ЕстьОтгруженныеТовары Тогда
		
		ТекстВопроса = НСтр("ru='Не все товары собраны/отгружены. Учитывать при заполнении товары, которые находятся в процессе сборки?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		СписокКнопок.Добавить("НеУчитывать", НСтр("ru = 'Не учитывать'"));
		
	Иначе
		
		ТекстВопроса = НСтр("ru='Отсутствуют собранные/отгруженные товары. Учитывать при заполнении товары, которые находятся в процессе сборки?'");
		СписокКнопок.Добавить("Учитывать", НСтр("ru = 'Учитывать'"));
		
	КонецЕсли;
	
	СписокКнопок.Добавить("НеПерезаполнять", НСтр("ru = 'Не перезаполнять'"));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ВопросОПерезаполненииОтгруженнымиТоварамиЗавершение", ПродажиКлиент, ДополнительныеПараметры),
		ТекстВопроса,
		СписокКнопок);
	
КонецПроцедуры

// Обработчик вопроса о перезаполнении отгруженными товарами.
//
// Параметры:
//  ОтветНаВопрос           - Строка - вариант ответа на вопрос, выбранный пользователем.
//  ДополнительныеПараметры - Структура - дополнительные параметры, необходимые для заполнения.
//
Процедура ВопросОПерезаполненииОтгруженнымиТоварамиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаполнятьНесобраннымиТоварами", (ОтветНаВопрос = "Учитывать"));
	Результат.Вставить("Перезаполнить", Не (ОтветНаВопрос = "НеПерезаполнять"));
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Результат);
	
КонецПроцедуры

// Процедура для выбора вида цен из формы выбора.
//
// Параметры:
//	ОписаниеОповещения - ОписаниеОповещения - Описание оповещения.
//	ПараметрыОтбора    - Структура - структура параметров отбора
//
Процедура ВыбратьВидЦен(ОписаниеОповещения, ПараметрыОтбора) Экспорт
	
	ВидЦеныПрайсЛист = ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
	Если ВидЦеныПрайсЛист <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВидЦеныПрайсЛист);
		Возврат;
	КонецЕсли;
	
	СтруктураОтбор = Новый Структура;
	Если ПараметрыОтбора = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, ВидЦеныПрайсЛист);
		Возврат;
	Иначе
		Для каждого Параметр Из ПараметрыОтбора Цикл
			СтруктураОтбор.Вставить(Параметр.Ключ, Параметр.Значение);		
		КонецЦикла;
	КонецЕсли; 
	
	ОткрытьФорму(
		"Справочник.ВидыЦен.ФормаВыбора",
		Новый Структура("Отбор", СтруктураОтбор),,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "НеСогласовано".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Не согласовано"". По действующим соглашениям могут быть оформлены документы. После изменения статуса действующие соглашения перестанут действовать. Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиНеСогласованоЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиНеСогласованоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиНеСогласовано(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Не согласовано'"));

КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Действует".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиДействует(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Действует"". Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиДействуетЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиДействуетЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОчиститьСообщения();
	
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиДействует(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Действует'"));

КонецПроцедуры

// Устанавливает у выделенных в списке соглашений статус "Закрыто".
//
// Параметры:
//	Список - ДинамическийСписок - Список соглашений.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список) Экспорт
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке соглашений будет установлен статус ""Закрыто"". После изменения статуса действующие соглашения перестанут действовать. Продолжить?'");
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусСоглашенийСКлиентамиЗакрытоЗавершение", ЭтотОбъект, Новый Структура("Список", Список)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Устанавливает статус соглашений с клиентами
//
// Параметры:
//  РезультатВопроса		 - КодВозвратаДиалога -  набор вариантов ответа пользователя 
//  ДополнительныеПараметры	 - Структура - структура параметров.
//
Процедура УстановитьСтатусСоглашенийСКлиентамиЗакрытоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Список = ДополнительныеПараметры.Список;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	ОчиститьСообщения();
	
    КоличествоОбработанных = ПродажиВызовСервера.УстановитьСтатусСоглашенийСКлиентамиЗакрыто(Список.ВыделенныеСтроки);
    ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, Список.ВыделенныеСтроки.Количество(), НСтр("ru='Закрыто'"));

КонецПроцедуры

// Устанавливает у выделенных в таблице строк признак Отменено и заполняет причину отмены.
//
// Параметры:
//	ТабличнаяЧасть - ДанныеФормыКоллекция - табличная часть, в которой необходимо осуществить проверку
//	ВыделенныеСтроки - Массив - массив выделенных пользователем строк табличной части
//	ПричинаОтмены - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки
//	СтруктураДействийСИзмененнымиСтроками - Структура - Структура действий с измененными строками.
//
Процедура ОтменитьВыделенныеСтроки(ТабличнаяЧасть, ВыделенныеСтроки, ПричинаОтмены, СтруктураДействийСИзмененнымиСтроками=Неопределено) Экспорт
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл

		СтрокаТаблицы = ТабличнаяЧасть.НайтиПоИдентификатору(ТекСтрока);
		МассивСтрок.Добавить(СтрокаТаблицы);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
			Если СтрокаТаблицы.ПричинаОтмены <> ПричинаОтмены Тогда
				СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			КонецЕсли;
			
			Если СтруктураДействийСИзмененнымиСтроками <> Неопределено Тогда
				ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействийСИзмененнымиСтроками, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает нажатие информационной гиперссылки о состоянии документа и выводит отчет "Состояние выполнения".
//
// Параметры:
//  СтандартнаяОбработка  - Булево - признак стандартной обработки события.
//  Форма                 - ФормаКлиентскогоПриложения - Форма, в которой было выполнено нажатие. Содержит в том числе:
//    * Объект - ДокументОбъект - 
//
Процедура СостояниеВФормеДокументаНажатие(СтандартнаяОбработка, Форма) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Ссылка = Форма.Объект.Ссылка;
	
	Если НЕ Ссылка.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Ссылка);
		
		ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета", 
		             Новый Структура("ВходящиеДокументы", СписокДокументов), 
		             Форма,
		             Истина);
	
	КонецЕсли;
	
КонецПроцедуры

//Открывает отчет по задолженности при нажатии на гиперссылку запрета отгрузки в формах документов.
Процедура ОткрытьОтчетРасшифровкиЗапретаОтгрузки(Договор, ДанныеПоСуммеПродажи, КлючНазначенияИспользования, НоваяАрхитектураВзаиморасчетов) Экспорт
	
	Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНазначенияИспользования);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
		ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Договор));
		ПараметрыФормы.Вставить("Договор",                     Договор);
		ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
		
		ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
			ПараметрыФормы,
			,
			"Договор=" + Договор);
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта", "ЗадолженностьКлиентовПричиныЗапретаОтгрузки" );
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",         Истина);
		ПараметрыФормы.Вставить("Отбор",                           Новый Структура("Договор", Договор));
		ПараметрыФормы.Вставить("КлючНазначенияИспользования",     КлючНазначенияИспользования);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов", Ложь);
		
		ОткрытьФорму("Отчет.ЗадолженностьКлиентов.Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик нажатия на гиперссылку со списком подчиненных документов в "Заказе клиента"
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - где:
// 		* Объект - ДокументОбъект.ЗаказКлиента
// 	НавигационнаяСсылкаФорматированнойСтроки - Строка
// 	СтандартнаяОбработка - Булево
//
Процедура ОбработкаНавигационнойСсылкиПодчиненныхДокументов(Форма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка) Экспорт
	
	МассивСтрок = СтрРазделить(НавигационнаяСсылкаФорматированнойСтроки, "_");
	Действие = МассивСтрок[0];
	ПолноеИмя = "";
	
	Если МассивСтрок.Количество() > 1 Тогда
		ПолноеИмя = МассивСтрок[1];
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Действие = "ОткрытьДокумент" Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ПолноеИмя);
		
	ИначеЕсли Действие = "Оформить" Тогда
		
		ОбщегоНазначенияУТКлиент.ОткрытьФормуПослеПроверкиПроведенностиДокумента(ПолноеИмя + ".ФормаОбъекта",
			Новый Структура,
			Форма,
			"Независимый",
			"Основание");
		
	ИначеЕсли Действие = "ОткрытьСписок" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Ссылка", Форма.ДокументыНаОсновании));
		
		ОткрытьФорму(ПолноеИмя + ".ФормаСписка",
						ПараметрыФормы,
						Форма,
						,
						,
						,
						,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
						
	ИначеЕсли Действие = "ОформитьКомплект" Тогда
		
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(Форма.Объект.Ссылка);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("МассивСсылок", МассивСсылок);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("КлючОбъекта", "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных/ТекущиеДанные");
		
		СформироватьКомплектДокументовВызов(Неопределено, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ПриСозданииДоговораИзДокумента

// Открывает форму создания нового договора с данными по партнеру.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма документа.
//	Элемент - ЭлементыФормы - поле формы, содержащее информацию о договоре.
//	ПутьКДоговору - Строка - путь к реквизиту с данными по договору.
//	Партнер - СправочникСсылка.Партнеры - данные по партнеру для создания договора.
//	СтандартнаяОбработка - Булево - в данный параметр передается признак выполнения подбора данных объекта.
//	ИмяСобытияОповещения - Строка - имя события оповещения для формы документа при изменении договора.
//
Процедура ОткрытьФормуСозданияДоговора(Форма, Элемент, ПутьКДоговору, Партнер, СтандартнаяОбработка, ИмяСобытияОповещения = "ПриИзмененииДоговора") Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИмяФормыДоговора = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента";
	
	ПараметрыФормы = Новый Структура();
	ПараметрыВыбора = Новый Структура();
	
	Для Каждого ПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
		Если СтрНайти(ПараметрВыбора.Имя,"Отбор.") <> 0 Тогда
			ПараметрыВыбора.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараметрВыбора Из Элемент.СвязиПараметровВыбора Цикл
		Если СтрНайти(ПараметрВыбора.Имя,"Отбор.") <> 0 Тогда
			ЗначениеПараметра = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Форма, ПараметрВыбора.ПутьКДанным);
			ИмяКлюча = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
			Если Не ПараметрыВыбора.Свойство(ИмяКлюча) Тогда
				ПараметрыВыбора.Вставить(ИмяКлюча, ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Отбор",ПараметрыВыбора);
	
	ПараметрыСоздания = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыВыбора);
	ПараметрыСоздания.Вставить("Партнер", Партнер);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",ПараметрыСоздания);
	ПараметрыФормы.Вставить("ТекстЗаполнения", Элемент.ТекстРедактирования);
	ПараметрыФормы.Вставить("ПроверкаПриСозданииДоговора", Истина);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Объект", Форма);
	ДополнительныеПараметры.Вставить("Отбор", ПараметрыВыбора);
	ДополнительныеПараметры.Вставить("Партнер", Партнер);
	ДополнительныеПараметры.Вставить("ПутьКДоговору", ПутьКДоговору);
	ДополнительныеПараметры.Вставить("ИмяСобытияОповещения", ИмяСобытияОповещения);
	
	ОповещениеОСозданииДоговора = Новый ОписаниеОповещения("ПослеСозданияДоговораЗавершение", ПродажиКлиент, ДополнительныеПараметры);
	
	ОткрытьФорму(ИмяФормыДоговора, ПараметрыФормы, Форма, Форма.УникальныйИдентификатор,,,ОповещениеОСозданииДоговора);
	
КонецПроцедуры

// Обработка оповещения после создания договора из формы документа.
//
//Параметры:
// Результат - Структура:
//  *Договор - СправочникСсылка.ДоговорыКонтрагентов - созданный договор.
// ДополнительныеПараметры - Структура:
//  *Объект - ФормаКлиентскогоПриложения - форма документа.
//  *Партнер - СправочникСсылка.Партнеры - партнер из документа.
//  *ПутьКДоговору - Строка - путь к реквизиту с данными по договору.
//  *ИмяСобытияОповещения - Строка - имя события формы при изменении договора.
//  *Договор - СправочникСсылка.ДоговорыКонтрагентов - выбранный договор.
//
Процедура ПослеСозданияДоговораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Договор") И ЗначениеЗаполнено(ДополнительныеПараметры.Договор)
		И ДополнительныеПараметры.Свойство("Партнер") Тогда
		СообщениеОбОшибке = "";
		ВыбранныйДоговор = ДополнительныеПараметры.Договор;
		Если ПродажиВызовСервера.ПроверитьДанныеПоОтборуИПартнеру(ВыбранныйДоговор, ДополнительныеПараметры.Отбор, ДополнительныеПараметры.Партнер, СообщениеОбОшибке) Тогда
			ДанныеДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеДляПрисвоения(ДополнительныеПараметры.Объект,
				ДополнительныеПараметры.ПутьКДоговору);
			ДанныеДокумента.Данные[ДанныеДокумента.Имя] = ВыбранныйДоговор;
			Оповестить(ДополнительныеПараметры.ИмяСобытияОповещения, ДанныеДокумента.Имя, ДополнительныеПараметры.Объект);
		Иначе
			ПоказатьПредупреждение(,СообщениеОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеКомплектаДокументов

// Процедура формирования комплекта документов на основании документа "Заказ клиента"
//
// Параметры:
// 	Результат - Произвольный
// 	ДополнительныеПараметры - Структура:
// 		* МассивСсылок - Массив из ДокументСсылка.ЗаказКлиента
// 		* Форма - ФормаКлиентскогоПриложения - должна иметь служебные реквизиты:
// 			** ТаблицаОборудования - ДанныеФормыКоллекция
// 			** ОтменитьПакетноеФормирование - Булево
//
Процедура СформироватьКомплектДокументовВызов(Результат, ДополнительныеПараметры) Экспорт
	
	МассивСсылок = Новый Массив();
	
	Если Не ДополнительныеПараметры.Свойство("МассивСсылок", МассивСсылок) Тогда
		ВызватьИсключение НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить.'");
	КонецЕсли;
	
	Если Не ДополнительныеПараметры.Свойство("КлючОбъекта") Тогда
		ДополнительныеПараметры.Вставить("КлючОбъекта", "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных/ТекущиеДанные");
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("СоответствиеРаспоряжений", ИнициализироватьРаспоряжения(МассивСсылок));
	
	ДополнительныеПараметры.Вставить("ПараметрыФормирования", ПараметрыФормированияДокументов(ДополнительныеПараметры));
	
	Если Не ДополнительныеПараметры.ПараметрыФормирования.СохраненыНастройкиОформления Тогда
		Оповещение = Новый ОписаниеОповещения("СформироватьКомплектДокументовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ОткрытьФормуНастройкиПараметров(Оповещение, ДополнительныеПараметры);
		Возврат;
	КонецЕсли;
	
	Если НачатьПодключениеОборудованияДляФискализацииДокументов(Результат, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьКомплектДокументов(ДополнительныеПараметры.Форма, 
								   ДополнительныеПараметры.СоответствиеРаспоряжений, 
								   ДополнительныеПараметры.ПараметрыФормирования);
	
КонецПроцедуры

Процедура СформироватьКомплектДокументов(Форма, СоответствиеРаспоряжений, ПараметрыФормирования = Неопределено, НакопленныйСписокОшибок = Неопределено) Экспорт
	
	ОчиститьСообщения();
	
	// Выбор варианта действия и возврат результата в виде имени формы, которую необходимо открыть и ее входящих параметров.
	ПараметрыСозданныхДокументов = ПродажиВызовСервера.ОформитьНакладнуюНаСервере(СоответствиеРаспоряжений, ПараметрыФормирования);
	
	ПараметрыФормирования.Вставить("СоответствиеРаспоряжений", СоответствиеРаспоряжений);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПараметрыФормирования", ПараметрыФормирования);
	ДополнительныеПараметры.Вставить("ПараметрыСозданныхДокументов", ПараметрыСозданныхДокументов);
	ДополнительныеПараметры.Вставить("ТаблицаОборудования");
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	Если ЗначениеЗаполнено(НакопленныйСписокОшибок) Тогда
		Если ПараметрыСозданныхДокументов.СписокОшибок = Неопределено Тогда
			ПараметрыСозданныхДокументов.СписокОшибок = Новый Массив;
		КонецЕсли;	
		Для Каждого СообщениеОбОшибке Из НакопленныйСписокОшибок Цикл
			ПараметрыСозданныхДокументов.СписокОшибок.Вставить(0, СообщениеОбОшибке);
		КонецЦикла;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма, "ТаблицаОборудования") Тогда
		ДополнительныеПараметры.ТаблицаОборудования = ДополнительныеПараметры.Форма.ТаблицаОборудования;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма, "ОтменитьПакетноеФормирование") Тогда
		ДополнительныеПараметры.Форма.ОтменитьПакетноеФормирование = Ложь;
	КонецЕсли;
	
	Если ПараметрыСозданныхДокументов.Свойство("ОформитьРядНакладных") И ПараметрыСозданныхДокументов.ОформитьРядНакладных Тогда
		
		Если ПараметрыФормирования.ФискализацияДоступна И ПараметрыФормирования.ТребуетсяФискализация Тогда
			// в том случае, если требуется фискализация, то будем формировать и фискализировать каждый пакет по отдельности
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОформитьПродажуНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			СписокДлительныхОпераций = Новый СписокЗначений;
			
			ПараметрыФормыДлительныхОпераций = Новый Структура;
			ПараметрыФормыДлительныхОпераций.Вставить("СписокДействий", СписокДлительныхОпераций);
			ПараметрыФормыДлительныхОпераций.Вставить("КоличествоДействий", ПараметрыСозданныхДокументов.КоличествоПакетов);
			ПараметрыФормыДлительныхОпераций.Вставить("ТекущийНомерДействия", 1);
			
			ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.ДлительнаяОперация",ПараметрыФормыДлительныхОпераций,
									Форма,,,,ОписаниеОповещения);
			
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			
			ДополнительныеПараметры.Вставить("СписокДлительныхОпераций", СписокДлительныхОпераций);
			ДополнительныеПараметры.Вставить("ПараметрыОжидания", ПараметрыОжидания);
			ДополнительныеПараметры.Вставить("ПараметрыФормыДлительныхОпераций", ПараметрыФормыДлительныхОпераций);
			
			ДлительнаяОперация = ПродажиВызовСервера.ОформитьРядНакладныхПоТаблицамВызов(ПараметрыСозданныхДокументов, 
									ПараметрыФормирования, ПараметрыФормыДлительныхОпераций.ТекущийНомерДействия);
			СписокДлительныхОпераций.Добавить(ДлительнаяОперация);
			
			ОписаниеОповещенияСледующийДокумент = Новый ОписаниеОповещения("НачатьОформлениеСледующегоДокумента", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещенияСледующийДокумент, ПараметрыОжидания);
			
			Оповестить("ДобавленоНовоеДействие", ПараметрыФормыДлительныхОпераций);
			
		Иначе
			// если фискализация не нужна, то документы сформируем сразу одним блоком
			ДлительнаяОперация = ПродажиВызовСервера.ОформитьРядНакладныхПоТаблицамВызов(ПараметрыСозданныхДокументов, ПараметрыФормирования);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОформитьПродажуНаКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
		КонецЕсли;
	Иначе // если одно распоряжение
		Если ПараметрыФормирования.ФискализацияДоступна И ПараметрыФормирования.ТребуетсяФискализация И НЕ ПараметрыФормирования.ПоОрдерам Тогда
			ФискализироватьДокументы(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
		ОформитьПродажуНаКлиентеЗавершение(Неопределено, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьКомплектДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПродажиВызовСервера.СохранитьНастройкуКомплектаДокументов(Результат, ДополнительныеПараметры.КлючОбъекта);
	
	ДополнительныеПараметры.Вставить("ПараметрыФормирования", ПараметрыФормированияДокументов(ДополнительныеПараметры));
	
	Если НачатьПодключениеОборудованияДляФискализацииДокументов(Результат, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьКомплектДокументов(ДополнительныеПараметры.Форма, 
								   ДополнительныеПараметры.СоответствиеРаспоряжений, 
								   ДополнительныеПараметры.ПараметрыФормирования);
	
КонецПроцедуры

Процедура НачатьОформлениеСледующегоДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	ОперацияОтменена = ДополнительныеПараметры.Форма.ОтменитьПакетноеФормирование;
	
	Если ОперацияОтменена Тогда 
		Если ДополнительныеПараметры.ПараметрыСозданныхДокументов.СписокОшибок = Неопределено Тогда
			ДополнительныеПараметры.ПараметрыСозданныхДокументов.СписокОшибок = Новый Массив;
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Действие отменено пользователем.'");
		ДополнительныеПараметры.ПараметрыСозданныхДокументов.СписокОшибок.Добавить(Сообщение);
		СообщитьОшибкиПользователю(ДополнительныеПараметры.ПараметрыСозданныхДокументов.СписокОшибок);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ПараметрыФормыДлительныхОпераций.ТекущийНомерДействия = ДополнительныеПараметры.ПараметрыФормыДлительныхОпераций.ТекущийНомерДействия + 1;
	
	Если ДополнительныеПараметры.ПараметрыФормыДлительныхОпераций.ТекущийНомерДействия <= ДополнительныеПараметры.ПараметрыФормыДлительныхОпераций.КоличествоДействий Тогда
		
		ДлительнаяОперация = ПродажиВызовСервера.ОформитьРядНакладныхПоТаблицамВызов(ДополнительныеПараметры.ПараметрыСозданныхДокументов, 
					ДополнительныеПараметры.ПараметрыФормирования, ДополнительныеПараметры.ПараметрыФормыДлительныхОпераций.ТекущийНомерДействия);
		ДополнительныеПараметры.СписокДлительныхОпераций.Добавить(ДлительнаяОперация);
		
		ОписаниеОповещенияФискализироватьДокументы = Новый ОписаниеОповещения("НачатьОформлениеСледующегоДокумента", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещенияФискализироватьДокументы, ДополнительныеПараметры.ПараметрыОжидания);
		
		Оповестить("ДобавленоНовоеДействие", ДополнительныеПараметры.ПараметрыФормыДлительныхОпераций);
		
	КонецЕсли;
	
	ФискализироватьДокументы(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОформитьПродажуНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыСозданныхДокументов = ПродажиВызовСервера.ПрочитатьДанныеИзБезопасногоХранилища("ФормаСозданныеДокументыПродажи");
	Если Результат = Неопределено И ПараметрыСозданныхДокументов = Неопределено Тогда // фоновое задание отменено.
		ПараметрыСозданныхДокументов = ДополнительныеПараметры.ПараметрыСозданныхДокументов;
		ПараметрыФормирования = ДополнительныеПараметры.ПараметрыФормирования;
	Иначе
		Если ТипЗнч(ПараметрыСозданныхДокументов) = Тип("Массив") Тогда
			ПараметрыСозданныхДокументов = ДополнительныеПараметры.ПараметрыСозданныхДокументов;
			ПараметрыФормирования = ДополнительныеПараметры.ПараметрыФормирования;
		Иначе
			Если ПараметрыСозданныхДокументов = Неопределено Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
				Возврат;
			Иначе
				ПараметрыФормирования = ПараметрыСозданныхДокументов.ПараметрыФормирования;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СозданныеДокументы = Новый Массив;
	ЕстьСвойствоСозданныеДокументы = Ложь;
	ЕстьОшибкиСозданияДокументов = Ложь;
	ЕстьОшибки = Ложь;
	Если ПараметрыСозданныхДокументов.Свойство("Параметры") Тогда
		Если ПараметрыСозданныхДокументов.Параметры.Свойство("СозданныеДокументы") Тогда
			ЕстьСвойствоСозданныеДокументы = Истина;
			СозданныеДокументы = ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы;
		ИначеЕсли ПараметрыСозданныхДокументов.Параметры.Свойство("Основание") 
				  И ПараметрыСозданныхДокументов.Параметры.Основание.Свойство("СозданныеДокументы") Тогда
			ЕстьСвойствоСозданныеДокументы = Истина;
			СозданныеДокументы = ПараметрыСозданныхДокументов.Параметры.Основание.СозданныеДокументы;
		КонецЕсли;
		Для каждого Элемент Из СозданныеДокументы Цикл
			Если ТипЗнч(Элемент) = Тип("Структура") И Элемент.Свойство("ЕстьОшибки",ЕстьОшибки) И ЕстьОшибки = Истина Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		ЕстьОшибкиСозданияДокументов = (ЕстьОшибки = Истина);
	КонецЕсли;
	
	Если ПараметрыСозданныхДокументов.Свойство("ТекстВопросаПользователю") Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения(ПараметрыСозданныхДокументов.ПроцедураОбработкиОтветаПользователя, 
				ЭтотОбъект,
				ПараметрыСозданныхДокументов),
			ПараметрыСозданныхДокументов.ТекстВопросаПользователю,
			РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("ИмяФормы") 
			И (НЕ ПараметрыФормирования.НеОткрыватьФормуСозданногоДокумента 
				ИЛИ (ПараметрыФормирования.НеОткрыватьФормуСозданногоДокумента И ЕстьОшибкиСозданияДокументов)
				ИЛИ ПараметрыСозданныхДокументов.ИмяФормы = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям") Тогда
		
		Если ЕстьСвойствоСозданныеДокументы Тогда
			
			ТекстОповещения = НСтр("ru = 'Создано документов: %1'");
			Если СозданныеДокументы.Количество() > 0 Тогда
				ТекстОповещения = СтрШаблон(ТекстОповещения, СозданныеДокументы.Количество());
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Оповестить("ОформленДокументПродажи", , ДополнительныеПараметры.Форма);
			Иначе
				ТекстОповещения = СтрШаблон(ТекстОповещения, 0);
				ПоказатьОповещениеПользователя(НСтр("ru = 'Создание документов'"), , ТекстОповещения);
				Оповестить("ОформленДокументПродажи", , ДополнительныеПараметры.Форма);
				СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		ОткрытьФорму(ПараметрыСозданныхДокументов.ИмяФормы, 
			ПараметрыСозданныхДокументов.Параметры);
	ИначеЕсли ПараметрыСозданныхДокументов.Свойство("РежимПечатиДокументов") Тогда
		
		МассивПечатаемыхДокументов = Новый Массив;
		
		Для Каждого ТекЭлемент Из СозданныеДокументы Цикл
			Если НЕ (ТекЭлемент.Проведен И ПараметрыФормирования.НеОткрыватьФормуСозданногоДокумента) Тогда
				
				Если ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
				ИначеЕсли ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					ОткрытьФорму("Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
				ИначеЕсли ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда 
					ОткрытьФорму("Документ.АктВыполненныхРабот.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
				ИначеЕсли ТипЗнч(ТекЭлемент.Документ) = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения") Тогда 
					ОткрытьФорму("Документ.ОтгрузкаТоваровСХранения.Форма.ФормаДокумента", Новый Структура("Ключ", ТекЭлемент.Документ));
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекЭлемент.Проведен И ТекЭлемент.Печатать Тогда
				
				МассивПечатаемыхДокументов.Добавить(ТекЭлемент.Документ);
				
			КонецЕсли;
			
		КонецЦикла;
		Если СозданныеДокументы.Количество() > 0 Тогда
			
			Если МассивПечатаемыхДокументов.Количество() > 0 Тогда
				УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
					"РегистрСведений.НастройкиПечатиОбъектов",
					"КомплектДокументов",
					МассивПечатаемыхДокументов,
					Новый Структура());
				ТекстСообщения = НСтр("ru = 'Документы созданы и напечатаны (%КоличествоДокументов%)'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Документы созданы (%КоличествоДокументов%)'");
			КонецЕсли;
				
			ПоказатьОповещениеПользователя(
				СтрЗаменить(ТекстСообщения, "%КоличествоДокументов%", СозданныеДокументы.Количество()),
				,,
				БиблиотекаКартинок.Информация32);
			
			Оповестить("ОформленДокументПродажи", , ДополнительныеПараметры.Форма);
			
		КонецЕсли;
	КонецЕсли;
	
	СообщитьОшибкиПользователю(ПараметрыСозданныхДокументов.СписокОшибок);
	
КонецПроцедуры

// Возвращает соответствие структур переданных распоряжений
// 
// Параметры:
// 	СписокСсылок - Массив из ДокументСсылка.ЗаказКлиента
// 	
// Возвращаемое значение:
// 	Соответствие - где:
// 		* Ключ - ДокументСсылка.ЗаказКлиента
// 		* Значение - Структура - где:
// 			** СостояниеНакладной - Число
// 			** СостояниеОрдера - Число
// 
Функция ИнициализироватьРаспоряжения(СписокСсылок) Экспорт
	
	СоответствиеРаспоряжений = Новый Соответствие;
	Если ТипЗнч(СписокСсылок) = Тип("Массив") Тогда
		// если вызов из форма списка или формы документа "Заказ клиента"
		Для Каждого Ссылка Из СписокСсылок Цикл
			Если ТипЗнч(Ссылка) = Тип("Структура") Тогда
				СоответствиеРаспоряжений.Вставить(Ссылка.Ссылка, Ссылка);
			Иначе
				Структура = Новый Структура;
				Структура.Вставить("Ссылка", Ссылка);
				Структура.Вставить("СостояниеНакладной", 1);
				Структура.Вставить("СостояниеОрдера", 1);
				СоответствиеРаспоряжений.Вставить(Ссылка, Структура);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(СписокСсылок) = Тип("ДанныеФормыКоллекция") Тогда
		// если вызов из обработки
		Для Каждого Строка Из СписокСсылок Цикл
			Структура = Новый Структура;
			Если ТипЗнч(Строка.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента")
				И Строка.РазбиватьРеализациюПоСкладам Тогда
				Ключ = Новый Структура;
				Ключ.Вставить("ДокументОснование", Строка.Ссылка);
				Ключ.Вставить("Склад", Строка.Склад);
			Иначе
				Ключ = Строка.Ссылка;
			КонецЕсли;

			Структура.Вставить("СостояниеНакладной", Строка.СостояниеНакладной);
			Структура.Вставить("СостояниеОрдера", Строка.СостояниеОрдера);
			СоответствиеРаспоряжений.Вставить(Ключ, Структура);
		КонецЦикла;
	КонецЕсли;
	Возврат СоответствиеРаспоряжений;
	
КонецФункции

Функция ПараметрыФормированияДокументов(ДополнительныеПараметры)
	
	ПараметрыФормирования = ПродажиВызовСервера.ПолучитьНастройкуКомплектаДокументов(ДополнительныеПараметры.КлючОбъекта);
	
	ПоОрдерам = Ложь;
	Если ДополнительныеПараметры.Свойство("ПоОрдерам") Тогда
		ПоОрдерам = ДополнительныеПараметры.ПоОрдерам;
	КонецЕсли;
	ПараметрыФормирования.Вставить("ПоОрдерам", ПоОрдерам);
	
	Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Если ДополнительныеПараметры.Свойство("Склад") Тогда
		Склад = ДополнительныеПараметры.Склад;
	КонецЕсли;
	ПараметрыФормирования.Вставить("Склад", Склад);
	
	ИменаПараметровОформленияКомплектаДокументов = Новый Массив;
	ИменаПараметровОформленияКомплектаДокументов.Добавить("СоздаватьДокументПродажи");
	ИменаПараметровОформленияКомплектаДокументов.Добавить("СохраненыНастройкиОформления");
	ИменаПараметровОформленияКомплектаДокументов.Добавить("ИмяФормыСозданныеДокументы");
	
	//Параметры формы "ОбщаяФорма.ФормаСозданныхДокументов"
	ИменаПараметровОформленияКомплектаДокументов.Добавить("ВидимыеКолонки");
	ИменаПараметровОформленияКомплектаДокументов.Добавить("СобытияОбновления");
	
	Для каждого ИмяПараметра Из ИменаПараметровОформленияКомплектаДокументов Цикл
		
		Если Не ДополнительныеПараметры.Свойство(ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормирования, ДополнительныеПараметры, ИмяПараметра);
		
	КонецЦикла;
	
	ПараметрыФормирования.Вставить("УникальныйИдентификатор", ДополнительныеПараметры.Форма.УникальныйИдентификатор);
	
	Если ДополнительныеПараметры.Свойство("ПроверитьСклады") Тогда
		ПараметрыФормирования.Вставить("ПроверитьСклады", ДополнительныеПараметры.ПроверитьСклады);
	КонецЕсли;
	
	Возврат ПараметрыФормирования;
	
КонецФункции

Процедура ОткрытьФормуНастройкиПараметров(Оповещение, ДополнительныеПараметры)
	
	ПараметрыФормы = ПродажиВызовСервера.ПолучитьНастройкуКомплектаДокументов(ДополнительныеПараметры.КлючОбъекта);
	ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.ПараметрыОформленияДокументовПродажи", ПараметрыФормы,
		ДополнительныеПараметры.Форма, , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Выводит накопленные методом ДобавитьОшибкуПользователю ошибки.
//
// Параметры:
//  Ошибки - Массив из СообщениеПользователю
//  Отказ - Булево - устанавливается Истина, если ошибки сообщались.
//
Процедура СообщитьОшибкиПользователю(Ошибки, Отказ = Ложь)
	
	Если Ошибки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = (Ошибки.Количество()>0);
	
	Для каждого Ошибка Из Ошибки Цикл
		Ошибка.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

#Область Фискализация

Функция НачатьПодключениеОборудованияДляФискализацииДокументов(Результат, ДополнительныеПараметры)
	
	Результат = Ложь;
	Если ДополнительныеПараметры.ПараметрыФормирования.ПробиватьФискальныйЧек
		И Не ДополнительныеПараметры.ПараметрыФормирования.ПоОрдерам
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры.Форма, "ТаблицаОборудования") Тогда
		
		ПродажиВызовСервера.ДополнитьСтруктуруРаспоряженийИПараметрыФормирования(ДополнительныеПараметры.СоответствиеРаспоряжений
																				, ДополнительныеПараметры.ПараметрыФормирования);
		
		Если ДополнительныеПараметры.ПараметрыФормирования.ТребуетсяФискализация Тогда
			Если ДополнительныеПараметры.ПараметрыФормирования.ФискализацияДоступна Тогда
			    Результат = Истина;
				
				ДополнительныеПараметры.Форма.ТаблицаОборудования.Очистить();
				ТаблицаОборудования	= ДополнительныеПараметры.Форма.ТаблицаОборудования;
				ДанныеРаспоряжений = Новый Массив;
				Для Каждого Элемент Из ДополнительныеПараметры.СоответствиеРаспоряжений Цикл
					Если Элемент.Значение.Фискализировать Тогда
						ДанныеРаспоряжений.Добавить(Элемент.Значение);
					КонецЕсли;
				КонецЦикла;
				ПродажиВызовСервера.ПолучитьПодключенноеОборудование(ДанныеРаспоряжений, ТаблицаОборудования);

				ДополнительныеПараметры.Вставить("ИспользуемоеОборудование", ИспользуемоеОборудование(ТаблицаОборудования));
				ДополнительныеПараметры.Вставить("ТаблицаОборудования", ТаблицаОборудования);
				ДополнительныеПараметры.Вставить("ОшибкиПриПодключенииОборудования", Неопределено);

				Для Каждого ДокументСтруктура Из ДанныеРаспоряжений Цикл
					СтруктураПоискаОборудования = Новый Структура ("Организация, Касса", ДокументСтруктура.Организация, ДокументСтруктура.Касса);
					НайденноеОборудование = ТаблицаОборудования.НайтиСтроки(СтруктураПоискаОборудования);
					Если НайденноеОборудование.Количество() = 0 Тогда
						
						ТекстСообщения = НСтр("ru = 'При получении данных о подключенном оборудовании произошла ошибка. Не найдено подключенное оборудование.
													|Дополнительное описание:
													|Организация: %Организация%
													|Касса: %Касса%'");
						
						ТекстСообщения = СтрЗаменить(
							ТекстСообщения,
							"%Организация%",
							ДокументСтруктура.Организация);

						ТекстСообщения = СтрЗаменить(
							ТекстСообщения,
							"%Касса%",
							ДокументСтруктура.Касса);
							
						ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ДополнительныеПараметры.ОшибкиПриПодключенииОборудования, 
							"", ТекстСообщения, Неопределено);
								
					КонецЕсли;
				КонецЦикла;
				
				ПодключитьОборудованиеДляФискализацииДокументовПродолжить(Новый Структура, ДополнительныеПараметры);
				
			Иначе
				ВызватьИсключение НСтр("ru = 'В настройках создания комплектов документов установлен признак ""Пробивать фискальный чек"".
											|Для этого необходимо разрешить использование розничных продаж и подключаемого оборудования.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура ПодключитьОборудованиеДляФискализацииДокументовПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	ПрерватьВыполнение = Ложь;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ДополнительныеПараметры.ОшибкиПриПодключенииОборудования, 
				"", Результат.ОписаниеОшибки, Неопределено);
		КонецЕсли;
	Иначе
		ПрерватьВыполнение = Истина;
		ОписаниеОшибки = НСтр("ru = 'При подключении оборудования возникла неизвестная ошибка. Продолжение операции невозможно, обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ДополнительныеПараметры.ОшибкиПриПодключенииОборудования, 
			"", ОписаниеОшибки, Неопределено);
	КонецЕсли;
	
	ИспользуемоеОборудование = Новый Массив;
	Если ДополнительныеПараметры.ИспользуемоеОборудование.Количество() И Не ПрерватьВыполнение Тогда
		ПодключаемоеОборудование = ДополнительныеПараметры.ИспользуемоеОборудование[ДополнительныеПараметры.ИспользуемоеОборудование.ВГраница()];
		ДополнительныеПараметры.ИспользуемоеОборудование.Удалить(ДополнительныеПараметры.ИспользуемоеОборудование.ВГраница());
		ИспользуемоеОборудование.Добавить(ПодключаемоеОборудование);
	КонецЕсли;
	
	Если ИспользуемоеОборудование.Количество() Тогда
		ОповещениеОЗавершенииУстановкиСтатуса = Новый ОписаниеОповещения("ПодключитьОборудованиеДляФискализацииДокументовПродолжить", ЭтотОбъект, ДополнительныеПараметры);
		ПодключаемоеОборудованиеУТКлиент.УстановитьСтатусПодключенияОборудования(
			Истина,
			Новый Структура("УникальныйИдентификатор", ДополнительныеПараметры.ПараметрыФормирования.УникальныйИдентификатор),
			ИспользуемоеОборудование,
			ДополнительныеПараметры.ТаблицаОборудования,
			ОповещениеОЗавершенииУстановкиСтатуса);
	Иначе
		ОповещениеОЗавершенииУстановкиСтатуса = Новый ОписаниеОповещения("ПодключитьОборудованиеДляФискализацииДокументовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		РезультатПодключенияОборудования = (Не ПрерватьВыполнение);
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершенииУстановкиСтатуса, РезультатПодключенияОборудования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОборудованиеДляФискализацииДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ДополнительныеПараметры.Вставить("ПодключенноеОборудование", ДополнительныеПараметры.ТаблицаОборудования.НайтиСтроки(Новый Структура("Подключено", Истина)));
		ОбработатьСостояниеСменыДляФискализацииДокументов(Истина, ДополнительныеПараметры);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(ДополнительныеПараметры.ОшибкиПриПодключенииОборудования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСостояниеСменыДляФискализацииДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	ПрерватьВыполнение = Ложь;
	Если Результат = Ложь Тогда
		ПрерватьВыполнение = Истина;	
		ОписаниеОшибки = НСтр("ru = 'При обработке состояния смены возникла ошибка. Продолжение операции невозможно, обратитесь к администратору.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(ДополнительныеПараметры.ОшибкиПриПодключенииОборудования, 
			"", ОписаниеОшибки, Неопределено);
	КонецЕсли;
	
	ПодключенноеОборудование = Неопределено;
	Если ДополнительныеПараметры.ПодключенноеОборудование.Количество() И Не ПрерватьВыполнение Тогда
		ПодключенноеОборудование = ДополнительныеПараметры.ПодключенноеОборудование[ДополнительныеПараметры.ПодключенноеОборудование.ВГраница()].Оборудование;
		ДополнительныеПараметры.ПодключенноеОборудование.Удалить(ДополнительныеПараметры.ПодключенноеОборудование.ВГраница());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодключенноеОборудование) Тогда
		ОповещениеОЗавершенииОбработкиСостоянияСмены = Новый ОписаниеОповещения("ОбработатьСостояниеСменыДляФискализацииДокументов", ЭтотОбъект, ДополнительныеПараметры);
		РозничныеПродажиКлиент.ОбработатьСостояниеСменыАвтоматически(ПодключенноеОборудование, ОповещениеОЗавершенииОбработкиСостоянияСмены);
	Иначе
		ОповещениеОЗавершенииОбработкиСостоянияСмены = Новый ОписаниеОповещения("ОбработатьСостояниеСменыДляФискализацииДокументовЗавершение", ЭтотОбъект, ДополнительныеПараметры);			
		РезультатОбработкиСостояния = (Не ПрерватьВыполнение);
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершенииОбработкиСостоянияСмены, РезультатОбработкиСостояния);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСостояниеСменыДляФискализацииДокументовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НакопленныйСписокОшибок = Неопределено;
	Если ДополнительныеПараметры.Свойство("ОшибкиПриПодключенииОборудования") 
		И ЗначениеЗаполнено(ДополнительныеПараметры.ОшибкиПриПодключенииОборудования) Тогда
		
		НакопленныйСписокОшибок = Новый Массив;
		Для Каждого СообщениеПользователю Из ДополнительныеПараметры.ОшибкиПриПодключенииОборудования.СписокОшибок Цикл
			Если СообщениеПользователю.ИндексСтроки = Неопределено Тогда
				ИндексСтроки = СообщениеПользователю.НомерСтроки;
			Иначе
				ИндексСтроки = СообщениеПользователю.ИндексСтроки;
			КонецЕсли;
			
			Сообщение = ОбщегоНазначенияСлужебныйКлиентСервер.СообщениеПользователю(
							СообщениеПользователю.ТекстДляОднойОшибки,
							Неопределено,
							СтрЗаменить(СообщениеПользователю.ПолеОшибки, "%1", Формат(ИндексСтроки, "ЧН=0; ЧГ=")));
							
			НакопленныйСписокОшибок.Добавить(Сообщение);
		КонецЦикла;
	КонецЕсли;
	
	Если Результат = Истина Тогда
		СформироватьКомплектДокументов(ДополнительныеПараметры.Форма, 
									   ДополнительныеПараметры.СоответствиеРаспоряжений, 
									   ДополнительныеПараметры.ПараметрыФормирования,
									   НакопленныйСписокОшибок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФискализироватьДокументы(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормирования			= ДополнительныеПараметры.ПараметрыФормирования;
	ТаблицаОборудования				= ДополнительныеПараметры.ТаблицаОборудования;
	Если Результат = Неопределено Тогда
		ПараметрыСозданныхДокументов 	= ДополнительныеПараметры.ПараметрыСозданныхДокументов;//Структура
		Если ПараметрыСозданныхДокументов.Свойство("Параметры") Тогда
			СозданныеДокументы				= ПараметрыСозданныхДокументов.Параметры.Основание.СозданныеДокументы;
		Иначе
			// документы не созданы
			Возврат;
		КонецЕсли;
	Иначе
		ПараметрыСозданныхДокументов 	= ПолучитьИзВременногоХранилища(Результат.АдресРезультата);//Структура
		СозданныеДокументы				= ПараметрыСозданныхДокументов.Параметры.СозданныеДокументы;
	КонецЕсли;
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПараметрыФормирования.Свойство("ДокументыОбработанныеНаФискальномУстройстве") Тогда
		ПараметрыФормирования.Вставить("ДокументыОбработанныеНаФискальномУстройстве", Новый Массив);
	КонецЕсли;
	
	ПродажиВызовСервера.ПолучитьПодключенноеОборудование(СозданныеДокументы, ТаблицаОборудования);
	
	ПодключаемоеОборудованиеУТКлиент.УстановитьСтатусПодключенияОборудования(
		Истина,
		Новый Структура("УникальныйИдентификатор", ПараметрыФормирования.УникальныйИдентификатор),
		ИспользуемоеОборудование(ТаблицаОборудования),
		ТаблицаОборудования);
		
	Для каждого СтрокаОборудование Из ТаблицаОборудования Цикл
		Если СтрокаОборудование.Подключено Тогда
			РозничныеПродажиКлиент.ОбработатьСостояниеСменыАвтоматически(СтрокаОборудование.Оборудование);
		КонецЕсли;
	КонецЦикла; 
	
	Для Каждого ДокументСтруктура Из СозданныеДокументы Цикл
		
		Если Не (ТипЗнч(ДокументСтруктура) = Тип("Структура")) 
			Или Не ДокументСтруктура.Проведен
			Или ПараметрыФормирования.ДокументыОбработанныеНаФискальномУстройстве.Найти(ДокументСтруктура.Документ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
			
		Если ТипЗнч(ДокументСтруктура.МассивРаспоряжений) = Тип("Массив") Тогда 
			Если ДокументСтруктура.МассивРаспоряжений.Количество() > 0 Тогда
				Распоряжение = ДокументСтруктура.МассивРаспоряжений[0];
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			Распоряжение = ДокументСтруктура.МассивРаспоряжений;
		КонецЕсли;
			
		ТипЗнчДокумент = ТипЗнч(ДокументСтруктура.Документ);
		
		Если ТипЗнчДокумент = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнчДокумент = Тип("ДокументСсылка.АктВыполненныхРабот")
			ИЛИ ТипЗнчДокумент = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			
			ДокументРаспоряжение = ПараметрыФормирования.СоответствиеРаспоряжений.Получить(Распоряжение);
			Если Не ДокументРаспоряжение.Фискализировать Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоискаОборудования = Новый Структура ("Организация, Касса, Подключено", ДокументСтруктура.Организация, ДокументСтруктура.Касса, Истина);
			НайденноеОборудование = ТаблицаОборудования.НайтиСтроки(СтруктураПоискаОборудования);
			Если НайденноеОборудование.Количество() > 0 Тогда
				Оборудование = НайденноеОборудование[0].Оборудование;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Оборудование) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыОперацииФискализацииЧека = ФормированиеФискальныхЧековВызовСервера.ПараметрыОперацииФискализацииЧекаПакетныйРежим(
																ДокументСтруктура.Документ, Оборудование);
			
			Если ПараметрыОперацииФискализацииЧека = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыФормирования.ДокументыОбработанныеНаФискальномУстройстве.Добавить(ДокументСтруктура.Документ);
			
			ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПечатьЧека_Завершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
				ОповещениеПриЗавершении,
				ПараметрыФормирования.УникальныйИдентификатор,
				Оборудование,
				ПараметрыОперацииФискализацииЧека);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПечатьЧека_Завершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ПараметрыФискализации = Неопределено;
		
		// Если данные в регистр ФискальныеОперации не были записаны - произошла ошибка при записи.
		Если РезультатВыполнения.Свойство("ВыходныеПараметры") И РезультатВыполнения.ВыходныеПараметры.Количество() > 8 Тогда
			ПараметрыФискализации = РезультатВыполнения.ВыходныеПараметры[8];
		КонецЕсли;
		
		ПараметрыЗавершения = Новый Структура;
		ПараметрыЗавершения.Вставить("ЗакрытьФорму",                Ложь);
		ПараметрыЗавершения.Вставить("Форма",                       ДополнительныеПараметры.ПараметрыФормирования.УникальныйИдентификатор);
		ПараметрыЗавершения.Вставить("ФискальнаяОперацияРеквизиты", ПараметрыФискализации);
		ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении",     Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		// в любом случае, даже при успешной записи, переходим к выполнению действий после записи 
		ПодключаемоеОборудованиеУТКлиент.ВыполнитьДействиеПослеЗаписиФискальнойОперацииВЖурнал(
			ЭтотОбъект,
			Новый ОписаниеОповещения("ФискальнаяОперацияЗаписанаВЖурнал", ПодключаемоеОборудованиеУТКлиент, ПараметрыЗавершения),
			НСтр("ru = 'Не удалось записать данные в журнал фискальных операций.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
									|Чек не напечатан на фискальном устройстве:
									|%ИдентификаторУстройства%
									|Дополнительное описание:
									|%ДополнительноеОписание%'");
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ИдентификаторУстройства%",
			РезультатВыполнения.ИдентификаторУстройства);

		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
			
		РозничныеПродажиВызовСервера.ЗаписьЖурналаУровеньОшибка("ПродажиКлиент.ПечатьЧека_Завершение",,, ТекстСообщения);
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Поле = "";
		Если ДополнительныеПараметры.ПараметрыСозданныхДокументов.СписокОшибок = Неопределено Тогда
			ДополнительныеПараметры.ПараметрыСозданныхДокументов.СписокОшибок = Новый Массив;
		КонецЕсли;
		ДополнительныеПараметры.ПараметрыСозданныхДокументов.СписокОшибок.Добавить(Сообщение);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПробитьЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ИспользуемоеОборудование(ТаблицаОборудования)
	
	ИспользуемоеОборудование = Новый Массив;
	
	Если Не ТаблицаОборудования = Неопределено Тогда
		Для Каждого СтрокаТаблицыОборудования Из ТаблицаОборудования Цикл
			ИспользуемоеОборудование.Добавить(СтрокаТаблицыОборудования.Оборудование);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИспользуемоеОборудование;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область Прочее

Процедура НачалоВыбораСоглашенияСКлиентомФрагмент(СтруктураПараметров)
	
	Если Не ЗначениеЗаполнено(СтруктураПараметров.Партнер) Тогда
		Возврат;
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ДатаДокумента", СтруктураПараметров.ДатаДокумента);
		ПараметрыФормы.Вставить("Партнер", СтруктураПараметров.Партнер);
		ПараметрыФормы.Вставить("ТолькоТиповые",СтруктураПараметров.ТолькоТиповые);
		ПараметрыФормы.Вставить("ТолькоИспользуемыеВРаботеТП",СтруктураПараметров.ТолькоИспользуемыеВРаботеТП);
		ПараметрыФормы.Вставить("ТекущаяСтрока",СтруктураПараметров.Документ);
		ПараметрыФормы.Вставить("ХозяйственнаяОперация",СтруктураПараметров.ХозяйственнаяОперация);
		ПараметрыФормы.Вставить("ИспользуютсяДоговорыКонтрагентов",СтруктураПараметров.ИспользуютсяДоговорыКонтрагентов);
		ПараметрыФормы.Вставить("КомиссионныеПродажи25",СтруктураПараметров.КомиссионныеПродажи25);
		ПараметрыФормы.Вставить("ТолькоОперацииПередачи",СтруктураПараметров.ТолькоОперацииПередачи);
		
		ДополнительныйОтбор = Новый Структура;
		
		Для Каждого ПараметрВыбора Из СтруктураПараметров.Элемент.ПараметрыВыбора Цикл
			ДополнительныйОтбор.Вставить(СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", ""), ПараметрВыбора.Значение);
		КонецЦикла;
		
		ПараметрыФормы.Вставить("Отбор", ДополнительныйОтбор);
		
		ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора",
			ПараметрыФормы,
			СтруктураПараметров.Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает список предопределенных типов номенклатуры, для которых в необходимо указывать 
// аналитику по подразделениям. Используется в документах продаж.
// 
// Возвращаемое значение:
// 	СписокЗначений
//
Функция ТипыНоменклатурыСАналитикойПодразделение() Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	Возврат Список;

КонецФункции

Процедура ОбработкаВыбораПодразделения(ДанныеТабличнойЧасти, ВыделенныеСтроки, ВыбранноеЗначение) Экспорт

	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ДанныеТабличнойЧасти.НайтиПоИдентификатору(Строка);
		СписокТипов = ТипыНоменклатурыСАналитикойПодразделение();
		
		Если СписокТипов.НайтиПоЗначению(ДанныеСтроки.ТипНоменклатуры) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки.Подразделение = ВыбранноеЗначение;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти


