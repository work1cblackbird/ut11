#Область ПрограммныйИнтерфейс

// Параметры:
//  Логин - Строка 
//  Пароль - Строка
//
Процедура ПриВыполненииАвторизации(ПараметрыАвторизации) Экспорт
	
КонецПроцедуры

// Реализует обработку события изменения авторизации информационной базы
// в сервисе распознавания документов.
//
// Параметры:
//  ПараметрыАвторизации - Структура - структура с полями
//    * Состояние - Строка - возможные варианты "Ожидает", "Активирован";
//    * ТипАутентификации - Строка - возможные варианты "НеВыполнена", "ПоТикетуИТС", "ПоЛогинуПаролю";
//
Процедура ПриИзмененииДанныхАвторизации(ПараметрыАвторизации) Экспорт
	
КонецПроцедуры

Процедура ПередЗаписьюРаспознанногоДокумента(
		ДокументОбъект,
		РезультатОбратнойСвязи = Неопределено
	) Экспорт
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		
		ПараметрНомер = "";
		ПараметрДата = "";
		ПараметрСумма = "";
		
		ОсновныеРеквизиты = Новый Структура;
		Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
			ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
			
			Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
				ОсновныеРеквизиты.Вставить("Покупатель", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПродавецОрганизация", "Организация");
			Иначе
				ОсновныеРеквизиты.Вставить("Продавец", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПокупательОрганизация", "Организация");
			КонецЕсли;
		ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
			
			Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
				ОсновныеРеквизиты.Вставить("Покупатель", "Контрагент");
				ОсновныеРеквизиты.Вставить("Исполнитель", "Организация");
			Иначе
				ОсновныеРеквизиты.Вставить("Продавец", "Контрагент");
				ОсновныеРеквизиты.Вставить("ПокупательОрганизация", "Организация");
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ДокументОбъект.РеквизитыДокумента Цикл
			Если СтрокаТаблицы.ИмяРеквизита = "НомерДокумента" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрНомер = СтрокаТаблицы.Значение;
				Иначе
					ПараметрНомер = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.ИмяРеквизита = "ДатаДокумента" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрДата = Формат(СтрокаТаблицы.Значение, "ДФ='dd.MM.yyyy'");
				Иначе
					ПараметрДата = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли СтрокаТаблицы.ИмяРеквизита = "ИтогоВсего" Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы.Значение) Тогда
					ПараметрСумма = СтрокаТаблицы.Значение;
				Иначе
					ПараметрСумма = СтрокаТаблицы.РаспознанныйТекст;
				КонецЕсли;
			ИначеЕсли ОсновныеРеквизиты.Свойство(СтрокаТаблицы.ИмяРеквизита) Тогда
				ДокументОбъект[ОсновныеРеквизиты[СтрокаТаблицы.ИмяРеквизита]] = СтрокаТаблицы.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатОбратнойСвязи <> Неопределено Тогда
			РезультатОбратнойСвязи.НомерРаспознанногоДокумента = ДокументОбъект.Номер;
			РезультатОбратнойСвязи.ЭтоВходящийДокумент = (ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий);
			РезультатОбратнойСвязи.НомерДокумента = ПараметрНомер;
			РезультатОбратнойСвязи.ДатаДокумента = ПараметрДата;
			РезультатОбратнойСвязи.СуммаДокумента = ПараметрСумма;
			РезультатОбратнойСвязи.Контрагент = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ДокументОбъект.Контрагент);
			РезультатОбратнойСвязи.Организация = РаспознаваниеДокументов.УбратьОрганизационнуюФорму(ДокументОбъект.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСопоставленииТиповДокументов(СоответствиеТиповДокументов) Экспорт
	
КонецПроцедуры

Процедура ПриСопоставленииРеквизитовДокумента(ТипДокумента, СопоставленныеРеквизиты) Экспорт
	
КонецПроцедуры

Функция ПриПриведенииТипаРеквизитаВОбъекте(
		МетаданныеОбъекта,
		ПереданноеЗначение,
		ТипЭтогоЗначения,
		ТипРеквизитаВОбъекте
	) Экспорт
	
	
КонецФункции

Процедура ПриОпределенииЮрФизЛицаПоОрганизационнойФорме(Результат) Экспорт
	
	Значение = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Результат.Вставить("публичное акционерное общество", Значение);
	Результат.Вставить("открытое акционерное общество", Значение);
	Результат.Вставить("закрытое акционерное общество", Значение);
	Результат.Вставить("общество с ограниченной ответственностью", Значение);
	Результат.Вставить("акционерное общество", Значение);
	Результат.Вставить("федеральное государственное унитарное предприятие", Значение);
	Результат.Вставить("пао", Значение);
	Результат.Вставить("оао", Значение);
	Результат.Вставить("зао", Значение);
	Результат.Вставить("ооо", Значение);
	Результат.Вставить("ао", Значение);
	Результат.Вставить("фгуп", Значение);
	
	Значение = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Результат.Вставить("индивидуальный предприниматель", Значение);
	Результат.Вставить("ип", Значение);
	
КонецПроцедуры

// В параметре Параметры.ТекстЗапросаКандидаты требуется выбрать:
// - Ссылка
// - ДополнительнаяСсылка
// - Все поля, добавленные в параметр ВесаРеквизитовПредварительнойОценки
// или оставить параметр пустым, тогда будет составлен запрос по-умолчанию к объекту метаданного.
//
Процедура ПриОпределенииПараметровНечеткогоПоиска(Параметры, МетаданныеОбъекта) Экспорт
	
	Если МетаданныеОбъекта = Метаданные.Справочники.Номенклатура Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("НаименованиеПолное", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Артикул", "Артикул");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.ВесаРеквизитов.Вставить("Артикул", 0.1);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("НаименованиеПолное");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Артикул");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("НаименованиеПолное", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Артикул", 1);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.НоменклатураКонтрагентов Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Артикул", "Артикул");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.ВесаРеквизитов.Вставить("Артикул", 0.1);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Артикул");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Артикул", 1);

	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.Контрагенты
		Или МетаданныеОбъекта = Метаданные.Справочники.Организации Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("НаименованиеПолное", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("ИНН", "ИНН");
		Параметры.СоответствиеРеквизитов.Вставить("КПП", "КПП");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.ВесаРеквизитов.Вставить("ИНН", 1);
		Параметры.ВесаРеквизитов.Вставить("КПП", 0.5);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("НаименованиеПолное");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("ИНН");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("НаименованиеПолное", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.5);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("ИНН", 1);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("КПП", 0);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.КлассификаторБанков Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("Код", "Код");
		Параметры.ВесаРеквизитов.Вставить("Код", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("Код");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Код", 1);       
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.БанковскиеСчетаКонтрагентов
		Или  МетаданныеОбъекта = Метаданные.Справочники.БанковскиеСчетаОрганизаций Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("НомерСчета", "НомерСчета");
		Параметры.ВесаРеквизитов.Вставить("НомерСчета", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("НомерСчета");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("НомерСчета", 1);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.УпаковкиЕдиницыИзмерения Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.СоответствиеРеквизитов.Вставить("Код", "Код");
		
		Параметры.ВесаРеквизитов.Вставить("Наименование", 0.75);
		Параметры.ВесаРеквизитов.Вставить("Код", 1);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Код");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.75);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Код", 1);
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Справочники.ДоговорыКонтрагентов Тогда
		
		Параметры.СоответствиеРеквизитов.Вставить("Номер", "Номер");
		Параметры.СоответствиеРеквизитов.Вставить("Дата", "Дата");
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		
		Параметры.ВесаРеквизитов.Вставить("Номер", 1);
		Параметры.ВесаРеквизитов.Вставить("Дата", 0.75);
		Параметры.ВесаРеквизитов.Вставить("Наименование", 0.75);
		
		Параметры.РеквизитыПолногоСоответствия.Добавить("Номер");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Дата");
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Номер", 1);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Дата", 0.75);
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 0.75);
		
	Иначе
		
		Параметры.СоответствиеРеквизитов.Вставить("Наименование", "Наименование");
		Параметры.ВесаРеквизитов.Вставить("Наименование", 1);
		Параметры.РеквизитыПолногоСоответствия.Добавить("Наименование");
		Параметры.ВесаРеквизитовПредварительнойОценки.Вставить("Наименование", 1);
		
	КонецЕсли;	
КонецПроцедуры

Процедура ПриЗаполненииРаспознанногоДокумента(ДокументОбъект, ДокументСсылка) Экспорт
	
	ПроверяемыеРеквизиты = Новый Структура;
	ПроверяемыеРеквизиты.Вставить("Исполнитель", Неопределено);
	ПроверяемыеРеквизиты.Вставить("ПродавецОрганизация", Неопределено);
	ПроверяемыеРеквизиты.Вставить("ПокупательОрганизация", Неопределено);
	ПроверяемыеРеквизиты.Вставить("СуммаВключаетНДС", Ложь);
	ПроверяемыеРеквизиты.Вставить("ТекстНДС", "");
	ПроверяемыеРеквизиты.Вставить("ИтогоСумма", 0);
	ПроверяемыеРеквизиты.Вставить("ИтогоСуммаНДС", 0);
	ПроверяемыеРеквизиты.Вставить("ИтогоВсего", 0);
	
	Для Каждого РеквизитШапки Из ДокументОбъект.РеквизитыДокумента Цикл
		// Если Грузоотправитель совпадает с полем Продавец или Грузополучатель - с полем Покупатель, 
		// тогда Значение нужно оставить пустым
		Если РеквизитШапки.ИмяРеквизита = "Грузоотправитель" Тогда
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Продавец", "ИмяРеквизита");
			Если НайденнаяСтрока <> Неопределено И РеквизитШапки.Значение = НайденнаяСтрока.Значение Тогда
				РеквизитШапки.Значение = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли РеквизитШапки.ИмяРеквизита = "Грузополучатель" Тогда
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("Покупатель", "ИмяРеквизита");
			Если НайденнаяСтрока <> Неопределено И РеквизитШапки.Значение = НайденнаяСтрока.Значение Тогда
				РеквизитШапки.Значение = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
		ИначеЕсли РеквизитШапки.ИмяРеквизита = "СуммаВключаетНДС" Тогда
			СтароеЗначение = РеквизитШапки.Значение;
			
			Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
				ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
				ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
				ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг 
				ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
				
				Если СтрНачинаетсяС(РеквизитШапки.РаспознанныйТекст, "В том числе НДС") Тогда
					РеквизитШапки.Значение = Истина;
				Иначе
					// "Без налога (НДС)"
					// "Сумма НДС"
					РеквизитШапки.Значение = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			ПроверяемыеРеквизиты.Вставить("СуммаВключаетНДС", РеквизитШапки.Значение);
			ПроверяемыеРеквизиты.Вставить("ТекстНДС", РеквизитШапки.РаспознанныйТекст);
			ПроверяемыеРеквизиты.Вставить("ИзмениласьСуммаВключаетНДС", СтароеЗначение <> РеквизитШапки.Значение);
		ИначеЕсли ПроверяемыеРеквизиты.Свойство(РеквизитШапки.ИмяРеквизита) Тогда
			ПроверяемыеРеквизиты.Вставить(РеквизитШапки.ИмяРеквизита, РеквизитШапки.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг Тогда
		
		Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПродавецОрганизация) И НЕ ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПокупательОрганизация) Тогда
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		Иначе
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
		КонецЕсли;
	ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		Если ЗначениеЗаполнено(ПроверяемыеРеквизиты.Исполнитель) И НЕ ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПокупательОрганизация) Тогда
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий;
		Иначе
			ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
		КонецЕсли;
	КонецЕсли;
	
	// На основании направления можно определить Контрагента и Организацию, а по ним заполнить Договор
	// 
	ПараметрыВыбораДоговора = РаспознаваниеДокументовСлужебный.ПараметрыВыбораДоговора(ДокументОбъект);
	ЕстьНезаполненныйПараметр = Ложь;
	Для Каждого ПараметрВыбора Из ПараметрыВыбораДоговора Цикл
		Если Не ЗначениеЗаполнено(ПараметрВыбора.Значение) Тогда
			// для массива тоже подходит. т.е. при условии ТипЗнч(ПараметрВыбора.Значение) = Тип("Массив")
			ЕстьНезаполненныйПараметр = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьНезаполненныйПараметр Тогда
		// Используем заполнение без нечеткого поиска
		РаспознаваниеДокументовСлужебный.ЗаполнитьДоговорКонтрагента(ДокументОбъект);
	Иначе
		
		ОтборМетаданных = Новый Массив;
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"Организация", "=", ПараметрыВыбораДоговора.Организация));  
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"Контрагент", "=", ПараметрыВыбораДоговора.Контрагент));
		ОтборМетаданных.Добавить(Новый Структура("Свойство, ВидСравнения, Значение",
			"ТипДоговора", "В", ПараметрыВыбораДоговора.ВидыДоговоров));
		
		ДанныеПоиска = Новый Структура;
		РеквизитыПоиска = Новый Структура; // Ключ - имя реквизита из РаспознанныйДокумент.РеквизитыДокумента, Значение - имя реквизита объекта метаданных
		РеквизитыПоиска.Вставить("НомерДоговора", "Номер");
		РеквизитыПоиска.Вставить("ДатаДоговора", "Дата");
		РеквизитыПоиска.Вставить("Договор", "Наименование");
		
		Для Каждого ИмяРеквизита Из РеквизитыПоиска Цикл
			Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита.Ключ);
			СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
			Если СтрокиПоиска.Количество() <> 0 Тогда
				ЗначениеПоиска = СтрокиПоиска[0].РаспознанныйТекст;
				//ЗначениеПоиска = СтрокиПоиска[0].Значение;
				//Если Не ЗначениеЗаполнено(ЗначениеПоиска) Тогда
				//	// Пустую дату и т.д. заменяем на пустую строку
				//	ЗначениеПоиска = "";
				//КонецЕсли;
			Иначе
				ЗначениеПоиска = Неопределено;
			КонецЕсли;
			
			ДанныеПоиска.Вставить(ИмяРеквизита.Значение, ЗначениеПоиска);
		КонецЦикла;
		
		Тип = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Кандидаты = РаспознаваниеДокументов.ПолучитьКандидатов(
			ДанныеПоиска,
			Тип,
			,
			ОтборМетаданных,
			ДокументОбъект.ИдентификаторРезультата
		);
		РаспознаваниеДокументовСлужебный.ДобавитьКандидатовВСписокВыбора(ДокументОбъект, ДокументСсылка, "Договор", Кандидаты);
		
		Отбор = Новый Структура("ИмяРеквизита", "Договор");
		СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() <> 0 Тогда
			Реквизит = СтрокиПоиска[0];
			Если Реквизит.УверенностьНайденногоЗначения >= РаспознаваниеДокументовСлужебныйКлиентСервер.ГраницаПроблемныхЗначений()
				И НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение))
				И НЕ РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(Реквизит.ИмяРеквизита, Реквизит.РаспознанныйТекст) Тогда
				
				Реквизит.Значение = Реквизит.НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// На основании Контрагента и Договора, можно найти Партнера	
	РаспознаваниеДокументовСлужебный.ЗаполнитьПартнераКонтрагента(ДокументОбъект);
	
	РаспознаваниеДокументовСлужебный.ЗаполнитьСоглашениеКонтрагента(ДокументОбъект);
	
	// На основании Контрагента, Организации, Валюты из Договора, данных о Банке и Счете можно найти банковский счет
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		РаспознаваниеДокументовСлужебный.ЗаполнитьБанковскийСчет(ДокументОбъект);
	КонецЕсли;
	
	Для Каждого ЯчейкаТаблицы Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл
		
		Если ЯчейкаТаблицы.ИмяРеквизита = "СтавкаНДС" Тогда
			ЯчейкаТаблицы.Значение = РаспознаваниеДокументовУП.СтавкаНДСПоРаспознанномуТексту(ЯчейкаТаблицы.РаспознанныйТекст, ЯчейкаТаблицы.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДокумента = РаспознаваниеДокументовСлужебный.ЗаполненнаяТаблицаДокумента(ДокументОбъект);
	
	Если ПроверяемыеРеквизиты.Свойство("ИзмениласьСуммаВключаетНДС") Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииСтавкаНДС(СтрокаТаблицы, ПроверяемыеРеквизиты.СуммаВключаетНДС);
		КонецЦикла;
	КонецЕсли;
	
	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		
		ИтогоСуммаСкидкиРаспознано = РаспознаваниеДокументовСлужебныйКлиентСервер.ЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаСкидки", 0);
		ИтогоСуммаСкидкиПоТаблице = ТаблицаДокумента.Итог("СуммаСкидки");
		
		ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НеПредоставлена;
		Если ИтогоСуммаСкидкиПоТаблице <> 0 Тогда
			ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().НаОтдельныеПозиции;
		ИначеЕсли ИтогоСуммаСкидкиПоТаблице = 0 И ИтогоСуммаСкидкиРаспознано <> 0 Тогда
			ВидСкидки = РаспознаваниеДокументовСлужебныйКлиентСервер.ВидыСкидок().ПоДокументуВЦелом;
		КонецЕсли;
		
		РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(ДокументОбъект, "ВидСкидки", ВидСкидки);
		
		Если ИтогоСуммаСкидкиРаспознано = 0 И ИтогоСуммаСкидкиПоТаблице <> 0 Тогда
			РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(ДокументОбъект, "ИтогоСуммаСкидки", ИтогоСуммаСкидкиПоТаблице);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
		Если СтрокаТаблицы.Количество = 0
			И СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПроверяемыеРеквизиты.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС) Тогда
			СтрокаТаблицы.Количество = 1;
		КонецЕсли;
	КонецЦикла;

	Если ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату Тогда
		
		// Определение ставки НДС
		Если ПроверяемыеРеквизиты.ТекстНДС = "Без налога (НДС)" Тогда
			СтавкаНДС = Новый Структура("Числом, Ссылкой", 0, Справочники.СтавкиНДС.БезНДС);
		Иначе 
			СтавкаНДС = РаспознаваниеДокументовУП.ОпределитьСтавкуНДС(ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС);
		КонецЕсли;
		
		Если СтавкаНДС = Неопределено Тогда
			// Ставку НДС не удалось определить по полям итогов. Будем брать из номенклатуры
			ВсяНоменклатура = ТаблицаДокумента.ВыгрузитьКолонку("Номенклатура"); 
			
			Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
				 Поиск = "ПокупательОрганизация" ;   
			 Иначе
				 Поиск = "ПродавецОрганизация" ; 
			 КонецЕсли;
			 
			Отбор = Новый Структура("ИмяРеквизита", Поиск);
			СтрокиПоиска = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
			Если СтрокиПоиска.Количество() <> 0 Тогда  
				Организация = СтрокиПоиска[0].Значение;
			Иначе
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
			
			НДСПоНоменклатуре = Новый Соответствие();
			
			НайденнаяСтрока = ДокументОбъект.РеквизитыДокумента.Найти("ДатаДокумента", "ИмяРеквизита");
			Если НайденнаяСтрока = Неопределено Тогда
				НДСПоНоменклатуре = Неопределено; 
				ДатаДокумента  = Неопределено; 
			Иначе
				ДатаДокумента = НайденнаяСтрока.Значение;
			КонецЕсли;
			
			Для Каждого Позиция Из ВсяНоменклатура Цикл 
				Если ЗначениеЗаполнено( Позиция) и ЗначениеЗаполнено( ДатаДокумента) Тогда
				СтавкаНДСн = УчетНДСУП.СтавкаНДСНоменклатуры(Позиция,Организация,ДатаДокумента ); 
			 	НДСПоНоменклатуре.Вставить(Позиция, СтавкаНДСн);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Цена");
		ПоляПроверки.Добавить("Количество");
		ПоляПроверки.Добавить("Сумма");
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			// Восстановление нулей и потерянных запятых
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки, ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС);
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьПотеряннуюЗапятую(СтрокаТаблицы, ПоляПроверки, ДокументОбъект);
			
			// Пытаемся восстановить ставку НДС
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				Если СтавкаНДС <> Неопределено Тогда
					СтрокаТаблицы.СтавкаНДС = СтавкаНДС.Ссылкой;
					СтавкаНДСЧислом = СтавкаНДС.Числом;
				ИначеЕсли НДСПоНоменклатуре <> Неопределено Тогда
					СтрокаТаблицы.СтавкаНДС = НДСПоНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
					СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
					СтрокаТаблицы.СуммаНДС = РаспознаваниеДокументовСлужебныйКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, ПроверяемыеРеквизиты.СуммаВключаетНДС, СтавкаНДСЧислом);
					СтрокаТаблицы.Всего = СтрокаТаблицы.Сумма + ?(ПроверяемыеРеквизиты.СуммаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12
		ИЛИ ДокументОбъект.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
		
		// Этот расчет происходит до того, как пользователь что-то увидит + в УПД, Торг12 и Счетах-фактурах
		// введены 4 колонки, которые можно легко сверить для каждой строки по формулам:
		// 1) Если (Сумма без НДС) + (Сумма НДС) = (Сумма с НДС), то проверить и при необходимости восстановить Ставку НДС.
		// 2) Если (Сумма без НДС) * (100 + Ставка НДС)/100 = (Сумма с НДС), то проверить и при необходимости восстановить Сумму НДС.
		
		// Если СуммаВключаетНДС = Истина, то такая проверка не пройдет и ее нужно исключить. Но для этих трех документов
		// при печате на бумаге Сумма без НДС не должна совпадать с колонкой Всего даже на нетиповых документах.
		Если Не ПроверяемыеРеквизиты.СуммаВключаетНДС Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
				СтавкаНДСЧислом = РаспознаваниеДокументовСлужебныйВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТаблицы.СтавкаНДС);
				СложениемСовпало = (СтрокаТаблицы.Сумма + СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего);
				УмножениемСовпало = (Окр(СтрокаТаблицы.Сумма * (100 + СтавкаНДСЧислом)/100, 2) = СтрокаТаблицы.Всего);
				Если СложениемСовпало Или УмножениемСовпало Тогда
					Если Не СложениемСовпало Тогда
						СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.Всего - СтрокаТаблицы.Сумма;
					ИначеЕсли Не УмножениемСовпало Тогда
						СтруктураСтавкиНДС = РаспознаваниеДокументовУП.ОпределитьСтавкуНДС(СтрокаТаблицы.Всего, СтрокаТаблицы.СуммаНДС);
						Если СтруктураСтавкиНДС <> Неопределено Тогда
							СтрокаТаблицы.СтавкаНДС = СтруктураСтавкиНДС.Ссылкой;
						КонецЕсли;
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) И СтавкаНДСЧислом = 0 Тогда
						СтрокаТаблицы.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Всего");
		ПоляПроверки.Добавить("СуммаНДС");
		ПоляПроверки.Добавить("Сумма");
		
		Счетчик = 0;
		РаспознаваниеДокументовСлужебный.ВосстановлениеПо2Формулам(ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПоляПроверки);
		НеобходимоПроверять = Истина;
		Пока НеобходимоПроверять И Счетчик < 5 Цикл
			Счетчик = Счетчик + 1;
			НеобходимоПроверять = РаспознаваниеДокументовСлужебный.ВосстановлениеПо1ФормулеСУверенностью(ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПроверяемыеРеквизиты.ИтогоСумма);
			НеобходимоПроверять = НеобходимоПроверять Или РаспознаваниеДокументовСлужебный.ВосстановлениеПо2Формулам(ПроверяемыеРеквизиты.СуммаВключаетНДС, ТаблицаДокумента, ПроверяемыеРеквизиты.ИтогоВсего, ПроверяемыеРеквизиты.ИтогоСуммаНДС, ПоляПроверки);
		КонецЦикла;
		
		ПоляПроверки = Новый Массив;
		ПоляПроверки.Добавить("Цена");
		ПоляПроверки.Добавить("Количество");
		СтрокаСДатой = ДокументОбъект.РеквизитыДокумента.Найти("ДатаДокумента", "ИмяРеквизита");
		Для Каждого СтрокаТаблицы Из ТаблицаДокумента Цикл
			Если СтрокаСДатой <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
				Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий И ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПродавецОрганизация) Тогда
					СтрокаТаблицы.СтавкаНДС = УчетНДСУП.СтавкаНДСНоменклатуры(СтрокаТаблицы.Номенклатура,ПроверяемыеРеквизиты.ПродавецОрганизация,СтрокаСДатой.Значение);
				ИначеЕсли  ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий И ЗначениеЗаполнено(ПроверяемыеРеквизиты.ПокупательОрганизация) Тогда
					СтрокаТаблицы.СтавкаНДС = УчетНДСУП.СтавкаНДСНоменклатуры(СтрокаТаблицы.Номенклатура,ПроверяемыеРеквизиты.ПокупательОрганизация,СтрокаСДатой.Значение);
				КонецЕсли;
			КонецЕсли;
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьЕдинственныйНоль(СтрокаТаблицы, ПоляПроверки, ДокументОбъект, ПроверяемыеРеквизиты.СуммаВключаетНДС);
			РаспознаваниеДокументовСлужебный.НайтиИВосстановитьПотеряннуюЗапятую(СтрокаТаблицы, ПоляПроверки, ДокументОбъект);
		КонецЦикла;
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебный.СохранитьТаблицуДокумента(ДокументОбъект, ТаблицаДокумента);
	
КонецПроцедуры

Процедура ПриЗаполненииПараметровВыбораДоговора(ДокументОбъект, ПараметрыВыбораДоговора) Экспорт
	
	ВидыДоговоров = Новый Массив;
	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		ВидыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПокупателем);
	Иначе
		ВидыДоговоров.Добавить(Перечисления.ТипыДоговоров.СПоставщиком);
	КонецЕсли;
	
	ПараметрыВыбораДоговора.Вставить("ВидыДоговоров", ВидыДоговоров);

	Отбор = Новый Структура("ИмяРеквизита", "Партнер");
	НайденныеСтроки = ДокументОбъект.РеквизитыДокумента.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ПараметрыВыбораДоговора.Вставить("Партнер", НайденныеСтроки[0].Значение);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриЗаполненииДоговораКонтрагента(ДоговорКонтрагента, ДокументОбъект, ПараметрыДоговора) Экспорт
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(ПараметрыДоговора.Организация) Или Не ЗначениеЗаполнено(ПараметрыДоговора.Контрагент) Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметрыПоиска = Новый Структура;
	Если ЗначениеЗаполнено(ПараметрыДоговора.НомерДоговора) Тогда
		ДополнительныеПараметрыПоиска.Вставить("Номер", Новый Структура("ЗначениеОтбора", ПараметрыДоговора.НомерДоговора));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыДоговора.ДатаДоговора) Тогда
		ДополнительныеПараметрыПоиска.Вставить("Дата", Новый Структура("ЗначениеОтбора", ПараметрыДоговора.ДатаДоговора));
	КонецЕсли;
	
	Договор = ДоговорКонтрагента(ПараметрыДоговора.Контрагент, 
		ПараметрыДоговора.Организация, ПараметрыДоговора.ВидыДоговоров, ДополнительныеПараметрыПоиска);
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Договор = ДоговорКонтрагента(
			ПараметрыДоговора.Контрагент, ПараметрыДоговора.Организация, ПараметрыДоговора.ВидыДоговоров);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		ДоговорКонтрагента = Договор;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриЗаполненииБанковскогоСчета(Счет, ДокументОбъект, ПараметрыСчета) Экспорт
	
	Если ЗначениеЗаполнено(Счет) Тогда
		// Проверим соответствие счета и владельца, т.к. нечеткий поиск этого пока не делает
		Если ПараметрыСчета.Владелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Счет, "Владелец") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Тут можно использовать поиск по данным из ПараметрыСчета (реквизиты "Банк", "БанкНаименование", "БанкСчет"), но
	// для демонстрации заполняем основным банковским счетом владельца
	
	ВалютаОплаты = РаспознаваниеДокументовСлужебный.ВалютаОплаты(ПараметрыСчета.Договор);
	УстановитьБанковскийСчет(Счет, ПараметрыСчета.Владелец, ВалютаОплаты, Истина);
	
КонецПроцедуры

Функция УстановитьБанковскийСчет(Счет, ВладелецСчета, Валюта, СовпадениеВалюты = Истина, УчитыватьВалюту = Истина, НомерСчета = Неопределено) Экспорт
	
	Если ТипЗнч(Счет) <> Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НовыйСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	Если НЕ ЗначениеЗаполнено(ВладелецСчета) Тогда
		ПолучитьНовыйСчет = Счет <> НовыйСчет;
		Счет = НовыйСчет;
		Возврат ПолучитьНовыйСчет;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	|	И (&УчитыватьВалюту = ЛОЖЬ
	|			ИЛИ (БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|					И &СовпадениеВалюты = ИСТИНА
	|				ИЛИ НЕ БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|					И &СовпадениеВалюты = ЛОЖЬ))
	|	И (&УчитыватьНомерСчета = ЛОЖЬ
	|			ИЛИ БанковскиеСчета.НомерСчета = &НомерСчета)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецСчета",       ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта",              Валюта);
	Запрос.УстановитьПараметр("СовпадениеВалюты",    СовпадениеВалюты);
	Запрос.УстановитьПараметр("УчитыватьВалюту",     УчитыватьВалюту);
	Запрос.УстановитьПараметр("УчитыватьНомерСчета", ЗначениеЗаполнено(НомерСчета));
	Запрос.УстановитьПараметр("НомерСчета",          НомерСчета);
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойСчет = Выборка.Приоритет = 1;
		НайденОдинСчет     = Выборка.Количество() = 1;
		
		Если НайденОсновнойСчет ИЛИ НайденОдинСчет Тогда
			НовыйСчет = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьНовыйСчет = Счет <> НовыйСчет;
	Если ПолучитьНовыйСчет Тогда
		Если НЕ ЗначениеЗаполнено(Счет) Тогда
			Счет = НовыйСчет;
		Иначе
			СвойствоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Счет, "Владелец, ВалютаДенежныхСредств");
			Если СвойствоСчета.Владелец <> ВладелецСчета
				ИЛИ СовпадениеВалюты И СвойствоСчета.ВалютаДенежныхСредств <> Валюта Тогда
				Счет = НовыйСчет;
			Иначе
				ПолучитьНовыйСчет = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолучитьНовыйСчет;
	
КонецФункции 

Процедура ПриЗаполненииВалютыОплаты(ДоговорКонтрагента, ВалютаОплаты) Экспорт
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДоговорКонтрагента, "ВалютаВзаиморасчетов, ОплатаВВалюте");
		
		Если РеквизитыДоговора.ОплатаВВалюте Тогда
			ВалютаОплаты = ВалютаРегламентированногоУчета;
		Иначе
			ВалютаОплаты = РеквизитыДоговора.ВалютаВзаиморасчетов;
		КонецЕсли;
	Иначе
		ВалютаОплаты = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииСтавкиНДС(СтавкаНДСЧислом, СтавкаНДС) Экспорт
		
	Если СтавкаНДС.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		СтавкаНДСЧислом = 20;
	ИначеЕсли СтавкаНДС.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		СтавкаНДСЧислом = 18;
	ИначеЕсли СтавкаНДС.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		СтавкаНДСЧислом = 10;
	ИначеЕсли СтавкаНДС.ПеречислениеСтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		СтавкаНДСЧислом = 0;
	Иначе
		СтавкаНДСЧислом = СтавкаНДС.Ставка;
	КонецЕсли;

КонецПроцедуры

Процедура ПриОпределенииПроверяемыхРеквизитов(ДокументОбъект, ПроверяемыеРеквизиты) Экспорт
	
	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("Договор");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	ИначеЕсли ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("Договор");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("СоглашениеСКлиентами");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	ИначеЕсли ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("СоглашениеСПоставщиком");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЕсли;

	Если ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("СоглашениеСПоставщиком");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	ИначеЕсли ДокументОбъект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("СоглашениеСКлиентом");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("Подразделение");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЕсли;  
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("Склад");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЕсли;
	
	 Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		ИндексЗначения = ПроверяемыеРеквизиты.Найти("Партнер");
		Если ИндексЗначения <> Неопределено Тогда
			ПроверяемыеРеквизиты.Удалить(ИндексЗначения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОбработкеПроверкиЗаполненияРеквизитов(ДокументОбъект, ТаблицаПроблем) Экспорт
		
КонецПроцедуры

Процедура ПриЗаполненииНовогоЭлементаСправочника(СправочникОбъект, ДанныеДляЗаполнения) Экспорт
	
	СправочникОбъект.Заполнить(ДанныеДляЗаполнения);
	
КонецПроцедуры

Процедура ПриСозданииДокументаНаОснованииРаспознанного(ДокументОбъект, РаспознанныйДокумент, ПараметрыЗаполнения) Экспорт
	
	
КонецПроцедуры

Процедура ПриПроведенииДокументаНаОснованииРаспознанного(ДокументОбъект) Экспорт
	
	
КонецПроцедуры

Процедура ПослеСозданияДокументаНаОснованииРаспознанного(ДокументОбъект) Экспорт
	
		
КонецПроцедуры

Процедура ПриСозданииСчетФактуры(ПараметрыСоздания, СчетФактураСсылка = Неопределено) Экспорт
	
	ТипДокументаСтрокой = ПараметрыСоздания.ТипДокументаСтрокой;
	ПараметрыЗаполнения = ПараметрыСоздания.ПараметрыЗаполнения;
	ПараметрыСоздания.ПараметрыЗаполнения.Вставить("ДокументОснование",ПараметрыСоздания.ДокументОснование);	
	Если ПараметрыЗаполнения.Свойство("НомерДокумента")Тогда
		ПараметрыСоздания.ПараметрыЗаполнения.Вставить("Номер",ПараметрыЗаполнения.НомерДокумента);	
	Иначе
		ПараметрыСоздания.ПараметрыЗаполнения.Вставить("Номер",ПараметрыЗаполнения.Номер); 
	КонецЕсли;
	
	Если ТипДокументаСтрокой = "ПриобретениеТоваровУслуг" Или
		ТипДокументаСтрокой = "ПриобретениеУслугПрочихАктивов" Тогда
	СоздаваемыйДокумент = Документы.СчетФактураПолученный.СоздатьДокумент(); 
	Иначе
		СоздаваемыйДокумент = Документы.СчетФактураВыданный.СоздатьДокумент();
	КонецЕсли;
	
	СоздаваемыйДокумент.Заполнить(ПараметрыЗаполнения); 
	ЗаполнитьЗначенияСвойств(СоздаваемыйДокумент, ПараметрыЗаполнения);
	
	Если Не СоздаваемыйДокумент.ПроверитьЗаполнение() Тогда
		ВызватьИсключение НСтр("ru = 'При проверке заполнения обнаружены ошибки'");
	КонецЕсли;
	 
	СоздаваемыйДокумент.Записать(РежимЗаписиДокумента.Проведение);

	СчетФактураСсылка = СоздаваемыйДокумент.Ссылка;
	
КонецПроцедуры

Процедура ПриОпределенииПараметровСозданияНоменклатуры(Параметры) Экспорт
	
	МетаданныеНоменклатура = Метаданные.Справочники.Номенклатура;
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.СтандартныеРеквизиты.Наименование);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.Реквизиты.Артикул);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.СтандартныеРеквизиты.Родитель);
	Параметр.ОписаниеЭлемента = РаспознаваниеДокументов.ОписаниеЭлемента();
	Параметр.ОписаниеЭлемента.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.Реквизиты.ВидНоменклатуры);
	
	// Ставка НДС (хранение - перечисление "ВидыСтавокНДС", выбор - перечисление "СтавкиНДС")
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита();
	Параметр.ОписаниеРеквизита.Имя = "СтавкаНДС";
	Параметр.ОписаниеРеквизита.Синоним = "Ставка НДС";
	Параметр.ОписаниеРеквизита.Тип = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	Параметр.ОписаниеРеквизита.ПроверкаЗаполнения = ПроверкаЗаполнения.НеПроверять;
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.Реквизиты.ЕдиницаИзмерения);
	
	Параметр = Параметры.Добавить();
	Параметр.ОписаниеРеквизита = РаспознаваниеДокументов.ОписаниеРеквизита(
		МетаданныеНоменклатура.Реквизиты.ТипНоменклатуры);
		
КонецПроцедуры

Процедура ОбработкаСозданияНоменклатуры(РезультатСсылка, ДанныеЗаполнения) Экспорт
	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НоваяНоменклатура, ДанныеЗаполнения);
	НоваяНоменклатура.Заполнить(ДанныеЗаполнения);
	
	НоваяНоменклатура.НаименованиеПолное = НоваяНоменклатура.Наименование;
	
	Если НоваяНоменклатура.ПроверитьЗаполнение() Тогда
		НоваяНоменклатура.Записать();
		РезультатСсылка = НоваяНоменклатура.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаполненииПараметровСозданияНовогоЭлемента(СвязанныеКолонки, ИмяЭлемента, ТипДокумента, Направление) Экспорт
	
	Если ИмяЭлемента = "Номенклатура" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Номенклатура", Истина, Истина, "НаименованиеПолное"));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "Артикул", "Артикул", Истина, Ложь));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный, ВыборГруппИЭлементов", "Родитель", "Родитель", "Входит в группу", Ложь, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"), Ложь, ГруппыИЭлементы.Группы));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "СтавкаНДС", "СтавкаНДС", "% НДС", Ложь, ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"), Ложь));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЕдиницаИзмерения", "ЕдиницаИзмерения", "Единица измерения", Ложь, ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка"), Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ВидНоменклатуры", "Вид номенклатуры", Ложь, ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "ЕдиницаИзмерения" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Наименование", "ЕдиницаИзмерения", "Наименование", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Код", "КодЕдиницыИзмерения", "Код", Истина, Истина));
	ИначеЕсли ИмяЭлемента = "СтранаПроисхождения" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Наименование", "СтранаПроисхождения", "Наименование", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Код", "КодСтраныПроисхождения", "Код", Истина, Истина));
	ИначеЕсли ИмяЭлемента = "НомерГТД" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "Код", "НомерГТД", "Номер", Истина, Истина));
		
	ИначеЕсли ИмяЭлемента = "БанковскийСчетКонтрагента" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный, ПодходящиеОбязательноеРавенство",
			"Владелец", "Продавец", "Контрагент", Истина, ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"), Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "НомерСчета", "БанковскийСчетКонтрагента", "Номер счета", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "Банк", "Банк", "Банк", Истина, ПредопределенноеЗначение("Справочник.КлассификаторБанков.ПустаяСсылка"), Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ВалютаДенежныхСредств", "Валюта", Ложь, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина));
	ИначеЕсли ИмяЭлемента = "БанковскийСчетОрганизации" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный, ПодходящиеОбязательноеРавенство",
			"Владелец", "ПродавецОрганизация", "Контрагент", Истина, ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"), Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный", "НомерСчета", "БанковскийСчетОрганизации", "Номер счета", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "Банк", "Банк", "Банк", Истина, ПредопределенноеЗначение("Справочник.КлассификаторБанков.ПустаяСсылка"), Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ВалютаДенежныхСредств", "Валюта", Ложь, ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(), Истина));
		
	ИначеЕсли ИмяЭлемента = "Продавец" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Продавец", "Наименование", Истина, Истина, "НаименованиеПолное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКПППродавца", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКПППродавца", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННПродавца", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КПППродавца", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "ПродавецОрганизация" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "ПродавецОрганизация", Истина, Истина, "НаименованиеПолное,НаименованиеСокращенное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКПППродавца", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКПППродавца", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННПродавца", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КПППродавца", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "Покупатель" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Покупатель", Истина, Истина, "НаименованиеПолное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКПППокупателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКПППокупателя", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННПокупателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КПППокупателя", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "ПокупательОрганизация" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "ПокупательОрганизация", Истина, Истина, "НаименованиеПолное,НаименованиеСокращенное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКПППокупателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКПППокупателя", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННПокупателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КПППокупателя", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "Грузоотправитель" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Грузоотправитель", Истина, Истина, "НаименованиеПолное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКППГрузоотправителя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКППГрузоотправителя", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННГрузоотправителя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КППГрузоотправителя", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "Грузополучатель" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный, РеквизитыЗаполнения", "Наименование", "Грузополучатель", Истина, Истина, "НаименованиеПолное"));
		Если ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД
			ИЛИ ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННКППГрузополучателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "ИННКППГрузополучателя", Ложь, Ложь));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "ИНН", "ИННГрузополучателя", Истина, Ложь));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, ИскатьПодходящие, Обязательный", "КПП", "КППГрузополучателя", Ложь, Ложь));
		КонецЕсли;
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный", "ЮридическоеФизическоеЛицо", "Вид контрагента", Ложь, ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка"), Истина));
	ИначеЕсли ИмяЭлемента = "Договор" Тогда
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
			"ТипДоговора", "Тип договора", Истина, Перечисления.ТипыДоговоров.ПустаяСсылка(), Истина));
		
		Если Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
				"Контрагент", "Покупатель", "Контрагент", Истина, Справочники.Контрагенты.ПустаяСсылка(), Истина));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
				"Организация", "ПродавецОрганизация", "Организация", Истина, Справочники.Организации.ПустаяСсылка(), Истина));
		Иначе
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
				"Контрагент", "Продавец", "Контрагент", Истина, Справочники.Контрагенты.ПустаяСсылка(), Истина));
			СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
				"Организация", "ПокупательОрганизация", "Организация", Истина, Справочники.Организации.ПустаяСсылка(), Истина));
		КонецЕсли;
	
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный",
			"Наименование", "Договор", "Наименование", Истина, Истина));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, Обязательный",
			"Номер", "НомерДоговора", "Номер договора", Истина, Ложь));
		СвязанныеКолонки.Добавить(Новый Структура("Реквизит, ИмяРеквизита, Синоним, ИскатьПодходящие, ПустаяСсылка, Обязательный",
			"Дата", "ДатаДоговора", "Дата договора", Истина, '00010101', Ложь));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

Процедура ПередЗаписьюФормыРаспознаванияНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	
	
КонецПроцедуры

Процедура ПослеЗаписиФормыРаспознаванияНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьДобавленныеКолонкиТаблиц(Объект, Строки, Очистить = Ложь) Экспорт
	
КонецПроцедуры

// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
КонецПроцедуры

#Область УстаревшиеПроцедурыИФункции

Процедура ПриИзмененииКолонкиНаСервере(Объект, СтрокаТаблицы, ИмяРеквизита, НомерСтрокиТаблицы, ВыбранноеЗначение) Экспорт
	
	РаспознаваниеДокументовСлужебныйКлиентСервер.ПриИзмененииКолонки(Объект, СтрокаТаблицы, ИмяРеквизита, ВыбранноеЗначение);

КонецПроцедуры

#КонецОбласти

Функция ДоговорКонтрагента(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора= Неопределено, СтруктураПараметров = Неопределено) Экспорт
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	&ТекстФильтра";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ИмяРеквизитаКонтрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();	
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов." + ИмяРеквизитаКонтрагент + " = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ТипДоговора" + " В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			
			ВидСравненияЗапроса = "";

			Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
				ВидСравненияЗапроса = "=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
				ВидСравненияЗапроса = "<>";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
				ВидСравненияЗапроса = "В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
				ВидСравненияЗапроса = "НЕ В";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
				ВидСравненияЗапроса = "НЕ В ИЕРАРХИИ";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
				ВидСравненияЗапроса = ">";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
				ВидСравненияЗапроса = ">=";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
				ВидСравненияЗапроса = "<";
			ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
				ВидСравненияЗапроса = "<=";
			Иначе // другие варианты 
				ВидСравненияЗапроса = "=";
			КонецЕсли;
			
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Если Выборка.Количество() = 1 Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция производит поиск счета-фактуры полученного с видом "на поступление" или "корректировочный" 
// по документу-основанию.
//
// Параметры:
//  ДокументОснование	- ДокументСсылка.* - Ссылка на документ, для которого надо найти счет-фактуру.
//  ИсключаемыйСФ		- ДокументСсылка.* - Ссылка на счет-фактуру, исключаемый при поиске.
//  ПометкаУдаления		- Булево - Значение пометки счета-фактуры для отбора при поиске.
//	СтруктураОтбора     - Структура - Дополнительный отбор счетов-фактур.
//
// Возвращаемое значение:
//  ДокументСсылка.СчетФактураПолученный - Если нашли, то возвращаем ссылку, не нашли - Неопределено.
//
Функция НайтиПодчиненныйСчетФактуруПолученный(
	ДокументОснование, ИсключаемыйСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт

	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		// Если в качестве документа-основания указана счет-фактура, то искать нет необходимости.
		
		Если ДокументОснование = ИсключаемыйСФ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДокументОснование, "ПометкаУдаления, ВидСчетаФактуры");
		Если РеквизитыСчетаФактуры.ПометкаУдаления <> ПометкаУдаления
		 Или РеквизитыСчетаФактуры.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.НаПоступление
			И РеквизитыСчетаФактуры.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыПолученного.Корректировочный Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ДокументОснование;
		
	КонецЕсли;
	
	НайденныеСФ = НайтиПодчиненныеСчетаФактурыПолученные(ДокументОснование, ИсключаемыйСФ, ПометкаУдаления, СтруктураОтбора);

	Возврат НайденныеСФ[ДокументОснование];

КонецФункции

// Функция производит поиск счетов-фактур полученных с видом "на поступление" или "корректировочный" 
// по документам-основаниям.
//
// Параметры:
//  СписокДокументовОснований - ДокументСсылка.*, Массив, СписокЗначений - Ссылки на документы, для которых надо найти счета-фактуры.
//  ИсключаемыеСФ		- ДокументСсылка.СчетФактураПолученный, Массив, СписокЗначений - Ссылки на счета-фактуры, исключаемые при поиске.
//  ПометкаУдаления		- Булево - Значение пометки счета-фактуры для отбора при поиске.
//	СтруктураОтбора     - Структура - Дополнительный отбор счетов-фактур.
//
// Возвращаемое значение:
//	Соответствие - Содержит:
//		* Ключ - ДокументСсылка.* - Документ основание
//  	* Значение - ДокументСсылка.СчетФактураПолученный - Найденный счет-фактура для документа-основания.
//
Функция НайтиПодчиненныеСчетаФактурыПолученные(СписокДокументовОснований, ИсключаемыеСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(СписокДокументовОснований) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураПолученный) Тогда
		Возврат Результат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументовОснований", СписокДокументовОснований);
	Запрос.УстановитьПараметр("ИсключаемыеСФ",     ИсключаемыеСФ);
	Запрос.УстановитьПараметр("ПометкаУдаления",   ПометкаУдаления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование,
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументОснование В(&СписокДокументовОснований)
	|	И СчетФактураПолученный.Ссылка.ПометкаУдаления = &ПометкаУдаления
	|	И НЕ СчетФактураПолученный.Ссылка В (&ИсключаемыеСФ)
	|	И &ДопУсловия";

	// Отбор одной записи.
	Если ТипЗнч(СписокДокументовОснований) = Тип("Массив") 
		ИЛИ ТипЗнч(СписокДокументовОснований) = Тип("СписокЗначений") Тогда
		ВыбиратьПервые = СписокДокументовОснований.Количество() = 1;
	Иначе
		ВыбиратьПервые = Истина;
	КонецЕсли;
	Если НЕ ВыбиратьПервые Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	КонецЕсли;
	
	// Фильтрация исключаемых счетов-фактур.
	Если НЕ ЗначениеЗаполнено(ИсключаемыеСФ) Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"НЕ СчетФактураПолученный.Ссылка В (&ИсключаемыеСФ)",
			"ИСТИНА");
	КонецЕсли;
	
	// Дополнительные отборы.
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") И СтруктураОтбора.Количество() > 0 Тогда
		ТекстУсловия = "";
		Для Каждого КлючЗначение Из СтруктураОтбора Цикл
			Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
				ТекстУсловия = ТекстУсловия + "
				| И ";
			КонецЕсли;
			
			Если ТипЗнч(КлючЗначение.Значение) = Тип("СписокЗначений") 
				ИЛИ ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
				ТекстУсловия = ТекстУсловия + "СчетФактураПолученный.Ссылка." + КлючЗначение.Ключ + " В (&" + КлючЗначение.Ключ + ")";
			Иначе
				ТекстУсловия = ТекстУсловия + "СчетФактураПолученный.Ссылка." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия",  ТекстУсловия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия",  "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ДокументОснование, Выборка.СчетФактура);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция производит поиск счета-фактуры выданного на реализацию или корректировочного с указанным документом-основанием.
//
// Параметры:
//  ДокументОснование	- ДокументСсылка.* - Ссылка на документ, для которого надо найти счет-фактурую.
//  ИсключаемыйСФ		- ДокументСсылка.СчетФактураВыданный - Ссылка на счет-фактуру, исключаемый при поиске.
//  ПометкаУдаления		- Булево - Значение пометки счета-фактуры для отбора при поиске.
//	СтруктураОтбора     - Структура - Дополнительный отбор счетов-фактур.
//
// Возвращаемое значение:
//  ДокументСсылка.СчетФактураВыданный - Если нашли, то возвращаем ссылку, не нашли - Неопределено.
//
Функция НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(ДокументОснование, ИсключаемыйСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт
	
	НайденныеСФ	= НайтиПодчиненныеСчетаФактурыВыданныеНаРеализацию(ДокументОснование, ИсключаемыйСФ, ПометкаУдаления, СтруктураОтбора);

	Возврат НайденныеСФ[ДокументОснование];

КонецФункции

// Функция производит поиск счетов-фактур выданных на реализацию или корректировочного с указанными документами-основаниями.
//
// Параметры:
//  СписокДокументовОснований - ДокументСсылка.*, Массив, СписокЗначений - Ссылки на документы, для которых надо найти счета-фактуры.
//  ИсключаемыеСФ		- ДокументСсылка.СчетФактураВыданный, Массив, СписокЗначений - Ссылки на счета-фактуры, исключаемые при поиске.
//  ПометкаУдаления		- Булево - Значение пометки счета-фактуры для отбора при поиске.
//	СтруктураОтбора     - Структура - Дополнительный отбор счетов-фактур.
//
// Возвращаемое значение:
//	Соответствие - Содержит:
//		* Ключ - ДокументСсылка.* - Документ основание
//  	* Значение - ДокументСсылка.СчетФактураВыданный - Найденный счет-фактура для документа-основания.
//
Функция НайтиПодчиненныеСчетаФактурыВыданныеНаРеализацию(СписокДокументовОснований, ИсключаемыеСФ = Неопределено, ПометкаУдаления = Ложь, СтруктураОтбора = Неопределено) Экспорт

	Результат = Новый Соответствие;
	
	Если НЕ ЗначениеЗаполнено(СписокДокументовОснований) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДокументовОснований", СписокДокументовОснований);
	Запрос.УстановитьПараметр("ИсключаемыеСФ",     ИсключаемыеСФ);
	Запрос.УстановитьПараметр("ПометкаУдаления",   ПометкаУдаления);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ДокументыОснования.Ссылка КАК СчетФактура
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.ДокументОснование В (&СписокДокументовОснований)
	|	И ДокументыОснования.Ссылка.ПометкаУдаления = &ПометкаУдаления
	|	И НЕ ДокументыОснования.Ссылка В (&ИсключаемыеСФ)
	|	И &ДопУсловия";

	// Отбор одной записи.
	Если ТипЗнч(СписокДокументовОснований) = Тип("Массив") 
		ИЛИ ТипЗнч(СписокДокументовОснований) = Тип("СписокЗначений") Тогда
		ВыбиратьПервые = СписокДокументовОснований.Количество() = 1;
	Иначе
		ВыбиратьПервые = Истина;
	КонецЕсли;
	Если НЕ ВыбиратьПервые Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", "");
	КонецЕсли;

	// Фильтрация исключаемых счетов-фактур.
	Если НЕ ЗначениеЗаполнено(ИсключаемыеСФ) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"НЕ ДокументыОснования.Ссылка В (&ИсключаемыеСФ)",
			"ИСТИНА");
	КонецЕсли;

	// Дополнительные отборы.
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") И СтруктураОтбора.Количество() > 0 Тогда
		ТекстУсловия = "";
		Для Каждого КлючЗначение Из СтруктураОтбора Цикл
			Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
				ТекстУсловия = ТекстУсловия + "
				| И ";
			КонецЕсли;
			
			Если ТипЗнч(КлючЗначение.Значение) = Тип("СписокЗначений") 
				ИЛИ ТипЗнч(КлючЗначение.Значение) = Тип("Массив") Тогда
				ТекстУсловия = ТекстУсловия + "ДокументыОснования.Ссылка." + КлючЗначение.Ключ + " В (&" + КлючЗначение.Ключ + ")";
			Иначе
				ТекстУсловия = ТекстУсловия + "ДокументыОснования.Ссылка." + КлючЗначение.Ключ + " = &" + КлючЗначение.Ключ;
			КонецЕсли;
			
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия",  ТекстУсловия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловия",  "ИСТИНА");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ДокументОснование, Выборка.СчетФактура);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Если по сериям для переданных Номенклатуры/Склада учитывается себестоимость, то рассчитывает статус указания серий.
//  Проверяет принадлежность уже указанной серии переданной номенклатуре.
//
// Параметры:
//  ТекущаяСтрока			 - Структура - для которой рассчитывается статус указания серий;
//  Склад					 - СправочникСсылка.Склады	 - склад, для которого осуществляется расчет статуса указания серий;
//  ПараметрыУказанияСерий	 - Структура				 - структура, описанная в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
// 
// Возвращаемое значение:
//  Структура - структура со следующими ключами:
//  * Серия - СправочникСсылка.СерииНоменклатуры - если серия указана и она может использоваться с новым значением номенклатуры,
//  	на указанном складе, то возвращается переданное значение, если нет - пустая ссылка;
//  * СтатусУказанияСерий - Число - если серии указываются в ТЧ "Товары", то возвращается рассчитанный статус,
//  	если для переданной номенклатуры/склада серии не используется - возвращается 0
//  	иначе возвращается переданный статус.
//
Функция ПроверитьСериюРассчитатьСтатусПриИзмененииРеквизитаВТЧ(ТекущаяСтрока, Склад, ПараметрыУказанияСерий) Экспорт
	
	МетаданныеОбъекта = ОбщегоНазначенияУТ.МетаданныеОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Серия");
	СтруктураВозврата.Вставить("УказыватьСерии");
	
	СтруктураВозврата.Серия = ТекущаяСтрока.Серия;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА КАК РазличаютсяВладельцыСерииИНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура,
	|	Справочник.СерииНоменклатуры КАК Серии
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|	И Серии.Ссылка = &Серия
	|	И НЕ(Серии.ВидНоменклатуры.ВладелецСерий = Номенклатура.ВидНоменклатуры.ВладелецСерий
	|					И Серии.ВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|					И Номенклатура.ВидНоменклатуры.ВладелецСерий <> ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)
	|				ИЛИ Номенклатура.ВладелецСерий = Серии.ВидНоменклатуры
	|				ИЛИ Номенклатура.ВидНоменклатуры = Серии.ВидНоменклатуры)";
	Запрос.УстановитьПараметр("Номенклатура", ТекущаяСтрока.Номенклатура);
	Запрос.УстановитьПараметр("Серия", ТекущаяСтрока.Серия);
	Если Не Запрос.Выполнить().Пустой() Тогда
		СтруктураВозврата.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		СтруктураВозврата.Вставить("СтатусУказанияСерий");
	Иначе
		Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			СтруктураВозврата.Вставить(ИмяПоляСтатус);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		СтруктураВозврата.Серия               = Справочники.СерииНоменклатуры.ПустаяСсылка();
		Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураВозврата.СтатусУказанияСерий = 0;
		Иначе
			Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				СтруктураВозврата[ИмяПоляСтатус] = 0;
			КонецЦикла;
		КонецЕсли;
		СтруктураВозврата.УказыватьСерии      = Ложь;
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристикиНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипСерииНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	ТаблицаТоваров.Колонки.Добавить("Характеристика", ТипХарактеристикиНоменклатуры);
	ТаблицаТоваров.Колонки.Добавить("Серия", ТипСерииНоменклатуры);
		
	ТаблицаТоваров.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляКоличество,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
	
	ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, МетаданныеОбъекта);
	
	ТаблицаСерий = Новый ТаблицаЗначений;
	ТаблицаСерий.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаСерий.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаСерий.Колонки.Добавить(ПараметрыУказанияСерий.ИмяПоляКоличество,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, ТаблицаСерий, МетаданныеОбъекта, Истина);
	
	СтрокаТовара = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТовара,ТекущаяСтрока);
	СтрокаТовара.НомерСтроки = 1;
	СтрокаТовара.Серия = СтруктураВозврата.Серия;
	
	Выборка = НоменклатураСервер.ВыборкаИзЗапросаРасчетаСтатусовУказанияСерий(ПараметрыУказанияСерий, ТаблицаТоваров, ТаблицаСерий, Склад);
	
	Если Выборка.Следующий() Тогда
		
		// Если серии указываются в отдельной ТЧ, то при изменении реквизитов
		// будут пересчитаны только статусы, связанные с сериями, указываемыми
		// в ТЧ "Товары" (т.е. по которым ведется учет себестоимости).
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧТовары(Выборка.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтруктураВозврата.СтатусУказанияСерий = Выборка.СтатусУказанияСерий;
			Иначе
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтруктураВозврата[ИмяПоляСтатус] = Выборка[ИмяПоляСтатус];
				КонецЦикла;
			КонецЕсли;
						
		Иначе
			Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
				СтруктураВозврата.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерий;
			Иначе
				Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
					СтруктураВозврата[ИмяПоляСтатус] = ТекущаяСтрока[ИмяПоляСтатус];
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;
		
		Если НоменклатураКлиентСервер.ВЭтомСтатусеСерииНеУказываются(СтруктураВозврата.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
			СтруктураВозврата.УказыватьСерии = Ложь;
			СтруктураВозврата.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураВозврата.СтатусУказанияСерий = ТекущаяСтрока.СтатусУказанияСерий;
		Иначе
			Для Каждого ИмяПоляСтатус Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				СтруктураВозврата[ИмяПоляСтатус] = ТекущаяСтрока[ИмяПоляСтатус];
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ДополнитьТаблицуКолонкамиПоПолямПараметровУказанияСерий(ПараметрыУказанияСерий, Таблица, Знач Метаданные = Неопределено, ЭтоТаблицаСерий = Ложь) Экспорт	
	
	Если ЭтоТаблицаСерий Тогда
		Таблица.Колонки.Добавить("Склад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
		Возврат;
	КонецЕсли;   
	
	//Склада не будет точно
	Таблица.Колонки.Добавить("ТСклад",Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Если ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
		Если Таблица.Колонки.Найти("СтатусУказанияСерий") = Неопределено Тогда
			Таблица.Колонки.Добавить("СтатусУказанияСерий",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
		КонецЕсли;
	Иначе
		Для Каждого СтрМас Из ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
			Если Таблица.Колонки.Найти(СтрМас) = Неопределено Тогда
				Таблица.Колонки.Добавить(СтрМас,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// Процедура пересчитывает статусы указания серий в строках товаров, если это необходимо,
//  переподчиняет строки серий другим строкам ТЧ "Товары".
//
// Параметры:
//  Объект						 - ДанныеФормыСтруктура	 - основной реквизит формы документа.
//  ПараметрыУказанияСерий		 - Структура - структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа.
//  ТекущаяСтрокаИдентификатор	 - Число - идентификатор текущей строки товаров в форме документа.
//  КэшированныеЗначения		 - Структура - структура кеша реквизитов текущей строки товаров.
//
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
																			ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		Возврат; // Если ТЧ Серии нет, тогда все статусы пересчитываются при изменении реквизитов ТЧ, а не при окончании редактирования
	КонецЕсли;
	
	Если ТекущаяСтрокаИдентификатор <> Неопределено Тогда
		ТекущаяСтрока = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор); // ДокументТабличнаяЧастьСтрока.АктОРасхожденияхПослеПриемки.Товары - указано для типизации
	Иначе
		ТекущаяСтрока = Неопределено //значит строку удалили;
	КонецЕсли;
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас Из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	// Если строка новая (в т.ч. скопированная) или используется разделение по вариантам продажи - будет закешированно Неопределено
	// Тогда не нужно искать строки со старыми значениями.
	Если КэшированныеЗначения.Номенклатура <> Неопределено Тогда
		
		СтруктураПоискаСтарыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаСтарыеЗначения,КэшированныеЗначения);
		
		НайденныеСтрокиТоваров = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
		НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаСтарыеЗначения);
	Иначе
		НайденныеСтрокиТоваров = Новый Массив;
		НайденныеСтрокиСерий   = Новый Массив;
	КонецЕсли;
	
	// Если поменялись ключевые поля:
	// - возможно нужно переподчинять серии
	// - статус указания серий нужно пересчитывать в строках по новым ключевым полям и по старым.
	Если ТекущаяСтрока <> Неопределено 
		И Не ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КэшированныеЗначения, ТекущаяСтрока, "Номенклатура,Характеристика"+ТекстПоляСвязи) Тогда
		
		УчитыватьОстатки      = Ложь;
		ПереподчинитьСерии    = Ложь;
		ПересчитатьКоличество = Ложь;
		// Определим, нужно ли переподчинять серии. Это нужно если:
		// - серии относились только к одной строке
		// - новые и старые ключевые поля поддерживают одну политику учета
		// - серии относились к нескольким строкам, но изменилось значение действия по отражению расхождения со строкой
		// Если строки нужно переподчинять, то определим, нужно ли пересчитывать количество.
		Если КэшированныеЗначения.Номенклатура <> Неопределено
			И ((КэшированныеЗначения.Свойство("Действие")
					И КэшированныеЗначения.Действие <> ТекущаяСтрока.Действие)
				Или НайденныеСтрокиТоваров.Количество() = 0) Тогда//т.к. строк с такими ключевыми полями не осталось, значит такая строка была одна
			
			Если НайденныеСтрокиТоваров.Количество() > 0 Тогда
				УчитыватьОстатки   = Истина;
				ПереподчинитьСерии = Истина;
			ИначеЕсли КэшированныеЗначения.Номенклатура = ТекущаяСтрока.Номенклатура Тогда //т.е. изменились поля, от которых политика учета не зависит
				ПереподчинитьСерии = Истина;
			Иначе //будем переподчинять, если не поменялся вид номенклатуры
				ВидНоменклатурыТекущий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КэшированныеЗначения.Номенклатура,"ВидНоменклатуры");
				ВидНоменклатурыНовый   = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Номенклатура, "ВидНоменклатуры");
				
				ПереподчинитьСерии = (ВидНоменклатурыТекущий = ВидНоменклатурыНовый);
			КонецЕсли;
			
			Если ПереподчинитьСерии
				И ЕстьУпаковки
				И КэшированныеЗначения.Упаковка <> ТекущаяСтрока.Упаковка Тогда
				
				ПересчитатьКоличество = Истина;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		// Если строка удалена, то в качестве текущих значений будет передано Неопределено
		// Тогда не нужно искать строки с новыми значениями.
		СтруктураПоискаНовыеЗначения = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
		ЗаполнитьЗначенияСвойств(СтруктураПоискаНовыеЗначения,ТекущаяСтрока);
		
		НайденныеСтрокиТоваровНовые = Объект[ПараметрыУказанияСерий.ИмяТЧТовары].НайтиСтроки(СтруктураПоискаНовыеЗначения);    
		
		// Добавим строки по новым ключевым полям в массив строк для пересчета статуса указания серий.
		
		// При объединении массивов будем обходить меньший массив
		Если НайденныеСтрокиТоваров.Количество() < НайденныеСтрокиТоваровНовые.Количество() Тогда
			Для Каждого СтрМас Из НайденныеСтрокиТоваров Цикл
				НайденныеСтрокиТоваровНовые.Добавить(СтрМас);
			КонецЦикла;
			НайденныеСтрокиТоваров = НайденныеСтрокиТоваровНовые;
		Иначе
			Для Каждого СтрМас Из НайденныеСтрокиТоваровНовые Цикл
				НайденныеСтрокиТоваров.Добавить(СтрМас);
			КонецЦикла;
		КонецЕсли;
		
		// Определим массив строк серий, который должен участвовать в пересчете статусов,
		Если ПереподчинитьСерии Тогда		
			// Сначала переподчиним серии
			
			Если УчитыватьОстатки Тогда
				Если ТекущаяСтрока.КоличествоПоДокументу > ТекущаяСтрока.Количество Тогда
					КоличествоОстаток = ТекущаяСтрока.Количество;
				Иначе
					
					ЕстьНовыеСерии = Ложь;
					
					КоличествоСтрокСИзлишками = 0;
					
					Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
						Если СтрМас.КоличествоПоДокументу = 0 Тогда
							ЕстьНовыеСерии = Истина;
						ИначеЕсли СтрМас.КоличествоПоДокументу < СтрМас.Количество Тогда
							КоличествоСтрокСИзлишками = КоличествоСтрокСИзлишками + 1;
						КонецЕсли;
					КонецЦикла;
					
					Если ЕстьНовыеСерии
						И КоличествоСтрокСИзлишками > 0 Тогда //Переподчиним количество серий за вычетом количества строк с излишками
						
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу - КоличествоСтрокСИзлишками;
						
					ИначеЕсли ЕстьНовыеСерии Тогда //Переподчиним количество серий равное количеству серий в документе
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу;
					Иначе //Переподчиним количество серий равное фактическому количеству серий в обрабатываемой строке
						КоличествоОстаток = ТекущаяСтрока.КоличествоПоДокументу
											- (ТекущаяСтрока.Количество - ТекущаяСтрока.КоличествоПоДокументу);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
				
				Если УчитыватьОстатки Тогда
					Если КоличествоОстаток > 0
						Или СтрМас.Количество <> СтрМас.КоличествоПоДокументу Тогда
						
						КоличествоОстаток = КоличествоОстаток - СтрМас.Количество;
						
						ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, ТекстПоляСвязи);
					КонецЕсли;
				Иначе
					ЗаполнитьЗначенияСвойств(СтрМас, ТекущаяСтрока, "Номенклатура,Характеристика" + ТекстПоляСвязи);
				КонецЕсли;
				
				Если ПересчитатьКоличество Тогда
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
					ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрМас,СтруктураДействий,КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не УчитыватьОстатки Тогда
				// Если серии переподчинены, то достаточно произвести поиск по новым полям поиска
				НайденныеСтрокиСерий = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			КонецЕсли;
			
		Иначе	
			НайденныеСтрокиСерийНовые = Объект[ПараметрыУказанияСерий.ИмяТЧСерии].НайтиСтроки(СтруктураПоискаНовыеЗначения);
			
			// Если серии не переподчинены, то к строкам по старым ключевым полям нужно добавить строки по новым ключевым полям.
			
			// При объединении массивов будем обходить меньший массив
			Если НайденныеСтрокиСерий.Количество() < НайденныеСтрокиСерийНовые.Количество() Тогда
				Для Каждого СтрМас Из НайденныеСтрокиСерий Цикл
					НайденныеСтрокиСерийНовые.Добавить(СтрМас);
				КонецЦикла;
				НайденныеСтрокиСерий = НайденныеСтрокиСерийНовые;
			Иначе
				Для Каждого СтрМас Из НайденныеСтрокиСерийНовые Цикл
					НайденныеСтрокиСерий.Добавить(СтрМас);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСкладПоУмолчанию() Экспорт
	
	СкладПоУмолчанию = Справочники.Склады.СкладПоУмолчанию();
	Если ЗначениеЗаполнено(СкладПоУмолчанию) Тогда
		Возврат СкладПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа
		|	И НЕ Склады.ПометкаУдаления";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкиРаспознования = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Если ЗначениеЗаполнено(НастройкиРаспознования.СкладПоУмолчанию) Тогда
		Возврат НастройкиРаспознования.СкладПоУмолчанию;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Справочники.Склады.ПустаяСсылка();
	
КонецФункции 

Функция ПолучитьПервыйСкладПоУмолчанию() Экспорт
  	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НЕ Склады.ЭтоГруппа";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции 

#КонецОбласти