////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставки.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Добавляет элементы формы 1С:Доставки на форму объекта при создании на сервере.
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, из которой вызвана процедура.
//   МестоРазмещенияКоманд - ГруппаФормы - место для размещения, по умолчанию - командная панель формы.
//   ПараметрыОповещения - Структура - параметры, где может быть установлен источник команды.
//
Процедура ПриСозданииНаСервере(Форма, МестоРазмещенияКоманд = Неопределено, ПараметрыОповещения = Неопределено) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СДоставка")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьер")
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьСервис1СКурьерика") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоРаботыССервисомДоставки() Тогда
		Возврат;
	КонецЕсли;
	
	// Делаем видимой отдельную группу с доставкой
	ЭлементУправления = Форма.Элементы.Найти("ГруппаСервисДоставки");
	Если ЭлементУправления <> Неопределено Тогда
		
		ЭлементУправления.Видимость = Истина;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
			И ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
			
			КоличествоЗаказовНаДоставку = РегистрыСведений.ДанныеЗаказовСервисДоставки.КоличествоЗаказовПоОснованию(Форма.Объект.Ссылка);
			
			Если КоличествоЗаказовНаДоставку > 0 Тогда
				
				ЭлементГруппаПодчиненныеЗаказыНаДоставку = Форма.Элементы.Вставить(
					"ГруппаПодчиненныеЗаказыНаДоставку",
					Тип("ГруппаФормы"),
					ЭлементУправления.Родитель,
					ЭлементУправления);
				
				ЭлементГруппаПодчиненныеЗаказыНаДоставку.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ЭлементГруппаПодчиненныеЗаказыНаДоставку.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
				ЭлементГруппаПодчиненныеЗаказыНаДоставку.ОтображатьЗаголовок = Ложь;
				ЭлементГруппаПодчиненныеЗаказыНаДоставку.ЦветФона = WebЦвета.Лимонный;
				
				ЭлементКартинка = Форма.Элементы.Добавить(
					"КартинкаПодчиненныеЗаказыНаДоставку",
					Тип("ДекорацияФормы"),
					ЭлементГруппаПодчиненныеЗаказыНаДоставку);
				
				ЭлементКартинка.Вид = ВидДекорацииФормы.Картинка;
				ЭлементКартинка.Картинка = БиблиотекаКартинок.Информация16;
				
				ЭлементДекорация = Форма.Элементы.Добавить(
					"ДекорацияПодчиненныеЗаказыНаДоставку",
					Тип("ДекорацияФормы"),
					ЭлементГруппаПодчиненныеЗаказыНаДоставку);
				
				ЭлементДекорация.Заголовок = Новый ФорматированнаяСтрока(
					Новый ФорматированнаяСтрока(НСтр("ru = 'На основании документа введены'")), " ",
					Новый ФорматированнаяСтрока(СтрШаблон(
						НСтр("ru = 'заказы на доставку (%1)'"),
						КоличествоЗаказовНаДоставку),,,,
						"Ссылка")
					);
					
				ЭлементДекорация.АвтоМаксимальнаяШирина = Ложь;
				ЭлементДекорация.РастягиватьПоГоризонтали = Истина;
				ЭлементДекорация.УстановитьДействие(
					"ОбработкаНавигационнойСсылки",
					"Подключаемый_ДекорацияСервисДоставкиОбработкаНавигационнойСсылки");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МетодыСервиса

// Создание заказа на доставку в сервисе.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура СоздатьИзменитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);

	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;

	Результат = Новый Структура;
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаСоздатьИзменитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
		
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Оформление заказа на доставку у грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОформитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ЗапросСервиса = ЗапросСервисаОформлениеЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);

	Результат = Новый Структура;
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ТекущееФоновоеЗадание = ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ТекущееФоновоеЗадание <> Неопределено Тогда
			МассивСообщений = ТекущееФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Иначе
			МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		Если МассивСообщений.Количество() Тогда
			Результат = Новый Структура;
			Результат.Вставить("Ошибки", Новый Массив);
			Результат.Ошибки.Добавить(МассивСообщений[0].Текст);
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОформитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Создать изменить отправить заказы на доставку.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  Результат - Массив Из Структура, Неопределено
Функция СоздатьИзменитьОтправитьЗаказыНаДоставку(ПараметрыВыполнения, ДополнительныеПараметры = Неопределено) Экспорт

	Результат = Неопределено;
	
	ОрганизацияБизнесСетиСсылка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполнения,
		"ОрганизацияБизнесСетиСсылка");
	Если ОрганизацияБизнесСетиСсылка = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ОрганизацияБизнесСетиСсылка, Отказ);
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	Кэш = Неопределено;
	Результат = Новый Массив;
	Отправка = ПараметрыВыполнения.Отправка;
	ТипГрузоперевозки = ПараметрыВыполнения.ТипГрузоперевозки;
	ПравоОтправки = ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	ГрупповаяОбработка = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполнения, "ГрупповаяОбработка", Ложь);
	ПараметрыДанныеФормы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыВыполнения, "ПараметрыДанныеФормы",
		Новый Структура);
	
	Если ПараметрыВыполнения.Свойство("СписокЗаказов") Тогда
		МассивЗаказов = ПараметрыВыполнения.СписокЗаказов;
	Иначе
		МассивЗаказов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыВыполнения);
	КонецЕсли;
	
	Счетчик = 0;
	Количество = МассивЗаказов.Количество();
	СообщитьПрогресс = Количество > 1;
	
	Для Каждого ДанныеЗаказа Из МассивЗаказов Цикл
		
		Отказ = Ложь;
		
		Счетчик = Счетчик + 1;
		Ошибки = Новый Массив;
		РезультатДанныеЗаказа = Новый Структура;
		
		Если ПустаяСтрока(ДанныеЗаказа.Идентификатор) Тогда
			
			Основание = ДанныеЗаказа.ДокументыОснования[0].Значение;
			ПараметрыЗаказаПоОснованию = ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, Основание);
			ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ПараметрыЗаказаПоОснованию, , "ДокументыОснованияИдентификаторы");
			ДанныеЗаказа.ПунктВыдачиКлиента.Идентификатор = СервисДоставки.ПолучитьПунктВыдачиКлиента(ТипГрузоперевозки,
					СкладДокумента(Основание));
					
			Если ПустаяСтрока(ДанныеЗаказа.ПунктВыдачиКлиента.Идентификатор) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось определить пункт выдачи.'");
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекстОшибки), Истина);
			КонецЕсли;
					
			Если Не ЗначениеЗаполнено(Ошибки) Тогда
				
				ДанныеЗаказа.СуммаДокумента = ДанныеЗаказа.ПолнаяСтоимость;
				ДанныеЗаказа.СуммаНаложенногоПлатежа = ДанныеЗаказа.ПолнаяСтоимость;
				ДанныеЗаказа.ПолнаяСтоимость = 0;
				
				Для Каждого СтрокаТоварныйСостав Из ПараметрыЗаказаПоОснованию.ТоварныйСостав Цикл
					НоваяСтрока = ДанныеЗаказа.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоварныйСостав);
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ЗапросСервиса = ЗапросСервисаПолучениеЗаказаНаДоставку(ДанныеЗаказа);
			ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСетиСсылка);
			РезультатЗапросаПолучить = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш);

			Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапросаПолучить) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса()),
					Истина);
			ИначеЕсли ТипЗнч(РезультатЗапросаПолучить) = Тип("Структура") Тогда
				ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(РезультатЗапросаПолучить, РезультатДанныеЗаказа);
				Если РезультатДанныеЗаказа.Свойство("Ошибки") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатДанныеЗаказа.Ошибки, Истина);
				Иначе
					ЗаполнитьЗначенияСвойств(ДанныеЗаказа, РезультатДанныеЗаказа.Данные);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Ошибки) Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеЗаказа, ПараметрыДанныеФормы);
			
			СервисДоставкиПереопределяемый.ЗаполнитьРеквизитыКонтактногоЛицаПолучателяПоУмолчанию(ДанныеЗаказа,
				Не ЗначениеЗаполнено(ДанныеЗаказа.Получатель.КонтактноеЛицо.Ссылка)
				И ПустаяСтрока(ДанныеЗаказа.Получатель.КонтактноеЛицо.Наименование),
				Не ЗначениеЗаполнено(ДанныеЗаказа.Получатель.КонтактноеЛицо.Телефон.Представление));
			
			ЗапросСервиса = ЗапросСервисаСозданиеИзменениеЗаказаНаДоставку(ДанныеЗаказа);
			ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСетиСсылка);
			ЗапросСервиса.Заголовки.Вставить("groupProcessing", ГрупповаяОбработка);
			РезультатЗапросаСоздатьИзменить = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш);
	
			Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапросаСоздатьИзменить) Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса()),
					Истина);
			ИначеЕсли ТипЗнч(РезультатЗапросаСоздатьИзменить) = Тип("Структура") Тогда
				ОбработатьРезультатЗапросаСоздатьИзменитьЗаказНаДоставку(РезультатЗапросаСоздатьИзменить,
					РезультатДанныеЗаказа, Истина);
				Если РезультатДанныеЗаказа.Свойство("Ошибки") Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатДанныеЗаказа.Ошибки, Истина);
				Иначе
					ДанныеЗаказа.Идентификатор = РезультатДанныеЗаказа.Идентификатор;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отправка И ПравоОтправки И Не ПустаяСтрока(ДанныеЗаказа.Идентификатор) И Не ЗначениеЗаполнено(Ошибки) Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеЗаказа.Получатель.КонтактноеЛицо.Ссылка)
				И ПустаяСтрока(ДанныеЗаказа.Получатель.КонтактноеЛицо.Наименование) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось определить контактное лицо получателя с указанным номером телефона.'");
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекстОшибки), Истина);
			ИначеЕсли ПустаяСтрока(ДанныеЗаказа.Получатель.Адрес.Представление) Тогда
				ТекстОшибки = НСтр("ru = 'Не удалось определить адрес доставки.'");
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекстОшибки), Истина);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Ошибки) Тогда
				
				ЗапросСервиса = ЗапросСервисаОформлениеЗаказаНаДоставку(ДанныеЗаказа);
				ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ОрганизацияБизнесСетиСсылка);
				ЗапросСервиса.Заголовки.Вставить("groupProcessing", ГрупповаяОбработка);
				РезультатЗапросаОтправить = ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш);

				РезультатДанныеЗаказа.Вставить("Отправка", Истина);
				Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапросаОтправить) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
						СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса()), Истина);
				ИначеЕсли ТипЗнч(РезультатЗапросаОтправить) = Тип("Структура") Тогда
					ОбработатьРезультатЗапросаОформитьЗаказНаДоставку(РезультатЗапросаОтправить, РезультатДанныеЗаказа,
						Истина);
					Если РезультатДанныеЗаказа.Свойство("Ошибки") Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, РезультатДанныеЗаказа.Ошибки, Истина);
					КонецЕсли;
				КонецЕсли;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Ошибки) Тогда
			РезультатДанныеЗаказа.Вставить("Ошибки", Ошибки);
		КонецЕсли;
		
		РезультатДанныеЗаказа.Вставить("ИдентификаторСтроки", ДанныеЗаказа.ИдентификаторСтроки);
		
		Результат.Добавить(РезультатДанныеЗаказа);
		
		Если СообщитьПрогресс И Счетчик < Количество Тогда
			ДлительныеОперации.СообщитьПрогресс(НСтр("ru = 'Обработка документов.'"),
				СтрШаблон(НСтр("ru = 'Обработка документов: %1 из %2'"), Счетчик, Количество),
				Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получение заказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка заказов на доставку по отборам.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьЗаказыНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьЗаказыНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Обновление заказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОбновитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОбновлениеЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОбновитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отмена заказа на доставку
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОтменитьЗаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОтменаЗаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОтменитьЗаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Создание заказа на доставку в сервисе.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура СоздатьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Отказ = Не ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСозданиеМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Результат = Новый Структура();
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ТекущееФоновоеЗадание= ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ТекущееФоновоеЗадание <> Неопределено Тогда
			МассивСообщений = ТекущееФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Иначе
			МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		
		Если МассивСообщений.Количество() Тогда 
			Результат = Новый Структура();
			Результат.Вставить("Ошибки", Новый Массив());
			Результат.Ошибки.Добавить(МассивСообщений[0].Текст);
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаСоздатьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;

	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Добавление заказа на доставку в мультизаказ.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для проверки запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ДобавитьЗаказНаДоставкуВМультизаказ(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаДобавлениеЗаказаНаДоставкуВМультизаказ(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Результат = Новый Структура();
	
	Если Отказ Тогда
		ТекущееФоновоеЗадание= ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ТекущееФоновоеЗадание <> Неопределено Тогда
			МассивСообщений = ТекущееФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Иначе
			МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		
		Если МассивСообщений.Количество() Тогда 
			Результат.Вставить("Ошибки", Новый Массив());
			Результат.Ошибки.Добавить(МассивСообщений[0].Текст);
		КонецЕсли;
	Иначе
		Результат.Вставить("ОперацияВыполнена", Истина);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Оформление мультизаказа на доставку у грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОформитьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Отказ = Не ПравоОтправкиЗаказовНаДоставкуПеревозчику(Истина);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОформлениеМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Результат = Новый Структура();
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ТекущееФоновоеЗадание= ПолучитьТекущийСеансИнформационнойБазы().ПолучитьФоновоеЗадание();
		Если ТекущееФоновоеЗадание <> Неопределено Тогда
			МассивСообщений = ТекущееФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Иначе
			МассивСообщений = ПолучитьСообщенияПользователю(Истина);
		КонецЕсли;
		
		Если МассивСообщений.Количество() Тогда 
			Результат = Новый Структура();
			Результат.Вставить("Ошибки", Новый Массив());
			Результат.Ошибки.Добавить(МассивСообщений[0].Текст);
		КонецЕсли;
	ИначеЕсли ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОформитьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение мультизаказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Обновление мультизаказа на доставку по идентификатору.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОбновитьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОбновлениеМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОбновитьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отмена мультизаказа на доставку
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ОтменитьМультизаказНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОтменаМультизаказаНаДоставку(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаОтменитьМультизаказНаДоставку(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка строк графика заказа
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрафикДвиженияЗаказа(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучитьГрафикДвиженияЗаказа(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка строк графика заказа
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрафикДвиженияЗаказаПоТрекНомеру(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучитьГрафикДвиженияЗаказаПоТрекНомеру(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка доступных печатных форм для заказа на доставку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДоступныеПечатныеФормы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаДоступныхПечатныхФорм(ПараметрыЗапроса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДоступныеФормы(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка выбранных файлов печатных форм.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьФайлыПечатныхФорм(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	РезультатИтоговый = Новый Структура();
	РезультатИтоговый.Вставить("Список", Новый Массив());
	РезультатИтоговый.Вставить("Ошибки", Новый Массив());
	Для Каждого ПараметрыЗапросаПоЗаказу Из ПараметрыЗапроса.Параметры Цикл
		
		ЗапросСервиса = ЗапросСервисаПолучениеФайловПечатныхФорм(ПараметрыЗапросаПоЗаказу);
		ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
		РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
			Если ПараметрыЗапроса.Параметры.Количество() = 1 Тогда
				Возврат
			Иначе
				Отказ = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Результат = Новый Структура();
		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			ОбработатьРезультатЗапросаПолучитьФайлыДоступныхФорм(РезультатЗапроса, Результат);
		КонецЕсли;
		
		Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
			Для Каждого Элемент Из Результат.Ошибки Цикл
				РезультатИтоговый.Ошибки.Добавить(Элемент);
			КонецЦикла;
		Иначе
			Для Каждого Элемент Из Результат.Список Цикл
				РезультатИтоговый.Список.Добавить(Элемент);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;

	ПоместитьВоВременноеХранилище(РезультатИтоговый, АдресРезультата);
	
КонецПроцедуры

// Получение списка доступных тарифов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьТарифы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеТарифов(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьТарифы(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка доступных тарифов.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьТариф(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеТарифов(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьТарифы(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка состояний заказов на доставку.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСостояния(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаСостояний(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояния(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка типов грузоперевозок сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьТипыГрузоперевозки(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаТиповГрузоперевозок(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьТипыГрузоперевозок(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка грузоперевозчиков сервиса.
//
// Параметры:
//  ПараметрыЗапроса - см. НовыйПараметрыЗапросаПолучитьГрузоперевозчиков
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьГрузоперевозчиков(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаГрузоперевозчиков(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		
		ОбработатьРезультатЗапросаПолучитьГрузоперевозчиков(РезультатЗапроса, Результат);
		Если Результат.Свойство("Ошибки")
			И Результат.Ошибки.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
		Результат.Вставить("Организация", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
		
		ПараметрыЗапросаАвторизации = Новый Структура("ОрганизацияБизнесСетиСсылка, ИдентификаторСервиса");
		
		Для Каждого ТекущийЭлементСписка Из Результат.Список Цикл
			
			ПараметрыЗапросаАвторизации.ОрганизацияБизнесСетиСсылка = Результат.Организация;
			ПараметрыЗапросаАвторизации.ИдентификаторСервиса = ТекущийЭлементСписка.ИдентификаторСервиса;
			
			АдресРезультатаЗапросАвторизации = ПоместитьВоВременноеХранилище(Неопределено);
			ПолучитьНастройкиАвторизации(ПараметрыЗапросаАвторизации, АдресРезультатаЗапросАвторизации);
			РезультатАвторизации = ПолучитьИзВременногоХранилища(АдресРезультатаЗапросАвторизации);
			
			Если ТипЗнч(РезультатАвторизации) = Тип("Структура")
				И РезультатАвторизации.Свойство("Авторизован") Тогда
				ТекущийЭлементСписка.Вставить("УспешнаяАвторизация", РезультатАвторизации["Авторизован"]);
			Иначе
				ТекущийЭлементСписка.Вставить("УспешнаяАвторизация", Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение данных грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеГрузоперевозчика(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеДанныхГрузоперевозчика(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеГрузоперевозчика(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка грузоперевозчиков сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьПунктыВыдачиКлиента(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаПунктовВыдачиКлиента(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьПунктыВыдачиКлиента(РезультатЗапроса, Результат);
		Результат.Вставить("Организация", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка курьеров сервиса.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСписокКурьеров(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучитьСписокКурьеров(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСписокКурьеров(РезультатЗапроса, Результат);
		Результат.Вставить("Организация", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получить состояние подключения организации.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//  АдресРезультата - Строка - Адрес результата.
//
Процедура ПолучитьСостояниеПодключенияОрганизации(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолученияСостоянияПодключенияОрганизации(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояниеПодключенияОрганизации(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Отправить запрос на получение регистрационных данных.
// 
// Параметры:
//  ПараметрыЗапроса - Структура - Параметры запроса.
//  АдресРезультата - Строка - Адрес результата.
//
Процедура ОтправитьЗапросНаПолучениеРегистрационныхДанных(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаОтправкиЗапросаНаПолучениеРегистрационныхДанных(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояниеПодключенияОрганизации(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка услуг для тарифа.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьУслугиТарифов(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеУслугиДляТипаГрузоперевозки(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьУслугиДляТипаГрузоперевозки(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка услуг для тарифа.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеУслуги(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеДанныхУслуги(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеУслуги(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение доступных терминалов по адресу и направлению.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДоступныеТерминалы(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеСпискаДоступныхТерминалов(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДоступныеТерминалы(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение данных терминала.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеТерминала(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеДанныхТерминала(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеТерминала(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение настроек авторизации.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьНастройкиАвторизации(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеНастроекАвторизации(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьНастройкиАвторизации(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Запись настроек авторизации.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ЗаписатьНастройкиАвторизации(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаЗаписьНастроекАвторизации(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Записано", Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение данных по тарифу грузоперевозчика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьДанныеПоТарифу(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучениеДанныхПоТарифу(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДанныеПоТарифу(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Проверка доступности указанного типа грузоперевозки
//
// Параметры:
//  ТипГрузоперевозки - Число - тип грузоперевозки.
//
// Возвращаемое значение:
//  Булево - доступность типа грузоперевозки.
//
Функция ТипГрузоперевозкиДоступен(ТипГрузоперевозки) Экспорт
	
	ТипГрузоперевозкиДоступен = Истина;
	
	ДоступныеСервисы = СервисДоставкиВызовСервера.ДоступныеСервисыДоставки();
	
	Если ДоступныеСервисы.Найти(ТипГрузоперевозки) = Неопределено Тогда
		ТипГрузоперевозкиДоступен = Ложь;
	КонецЕсли;
	
	Возврат ТипГрузоперевозкиДоступен;
	
КонецФункции

// Установить тариф по умолчанию.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура УстановитьТарифПоУмолчанию(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаУстановитьТарифПоУмолчанию(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ОперацияВыполнена", Истина);
	Результат.Вставить("ТарифИдентификатор", ПараметрыЗапроса.ТарифИдентификатор);
	Результат.Вставить("ГрузоперевозчикИдентификатор", ПараметрыЗапроса.ГрузоперевозчикИдентификатор);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Сбросить тариф по умолчанию.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура СброситьТарифПоУмолчанию(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаУстановитьТарифПоУмолчанию(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ОперацияВыполнена", Истина);
	Результат.Вставить("ТарифИдентификатор", ПараметрыЗапроса.ТарифИдентификатор);
	Результат.Вставить("ГрузоперевозчикИдентификатор", ПараметрыЗапроса.ГрузоперевозчикИдентификатор);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Сохранить параметры тарифа.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура СохранитьПараметрыТарифа(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт

	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаСохранитьПараметрыТарифа(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("ОперацияВыполнена", Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);

КонецПроцедуры

// Получение списка реквизитов возможных к редактированию.
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
Процедура ПолучитьДоступныеДляИзмененияРеквизиты(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолучитьДоступныеДляИзмененияРеквизиты(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьДоступныеДляИзмененияРеквизиты(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка наложенных платежей.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьНаложенныеПлатежи(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСервиса = ЗапросСервисаПолученияСпискаНаложенныхПлатежей(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьНаложенныеПлатежи(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение состояние опции Курьерика.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса:
//  * ОрганизацияБизнесСетиСсылка - СправочникСсылка.Организации - организация подключенная к бизнес сети 
//  АдресРезультата	 - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСостояниеОпцииКурьерика(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИдентификатора = ПолучитьИдентификаторСервисаБизнесСеть();
	Если Не ЗначениеЗаполнено(ДанныеИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеИдентификатора", ДанныеИдентификатора);
	
	ЗапросСервиса = ЗапросСервисаПолучитьСостояниеОпцииКурьерика(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСостояниеОпцииКурьерика(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение журнала заказов на доставку из сервиса.
//
// Параметры:
// 	ПараметрыЗапроса - Структура - параметры для формирования запроса:
// 		ОрганизацияБизнесСетиСсылка - СправочникСсылка.Организации - организация, подключенная к Бизнес-сети.
// 	АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьЖурналЗаказовНаДоставкуИзСервиса(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИдентификатора = ПолучитьИдентификаторСервисаБизнесСеть();
	Если Не ЗначениеЗаполнено(ДанныеИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеИдентификатора", ДанныеИдентификатора);
	
	ЗапросСервиса = ЗапросСервисаПолучитьЖурналЗаказовНаДоставкуИзСервиса(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьЖурналЗаказовНаДоставкуИзСервиса(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение списка состояний заказов на доставку из сервиса.
//
// Параметры:
// 	ПараметрыЗапроса - Структура - параметры для формирования запроса:
// 		ОрганизацияБизнесСетиСсылка - СправочникСсылка.Организации - организация, подключенная к Бизнес-сети.
// 	АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСписокСостоянийЗаказовИзСервиса(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИдентификатора = ПолучитьИдентификаторСервисаБизнесСеть();
	Если Не ЗначениеЗаполнено(ДанныеИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеИдентификатора", ДанныеИдентификатора);
	
	ЗапросСервиса = ЗапросСервисаПолучитьСписокСостоянийЗаказовИзСервиса(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьСписокСостоянийЗаказовИзСервиса(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Получение печатной формы из сервиса.
//
// Параметры:
// 	ПараметрыЗапроса - Структура - параметры для формирования запроса:
// 		ОрганизацияБизнесСетиСсылка - СправочникСсылка.Организации - организация, подключенная к Бизнес-сети.
// 	АдресРезультата - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьПечатнуюФормуИзСервиса(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИдентификатора = ПолучитьИдентификаторСервисаБизнесСеть();
	Если Не ЗначениеЗаполнено(ДанныеИдентификатора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("ДанныеИдентификатора", ДанныеИдентификатора);
	
	ЗапросСервиса = ЗапросСервисаПолучитьПечатнуюФормуИзСервиса(ПараметрыЗапроса);
	ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
	РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
	
	Если Отказ
		Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура();
	Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
		ОбработатьРезультатЗапросаПолучитьПечатнуюФормуИзСервиса(РезультатЗапроса, Результат);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область Конструкторы

#Область КонструкторыЗапросов

#Область ЗаказНаДоставку

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
Функция НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку() Экспорт
	
	Параметры = НовыйПараметрыЗаказаНаДоставку();
	
	Параметры.Вставить("ИдентификаторЗаказа"); // Идентификатор заказа 1С:Доставка
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаСоздатьИзменитьОтправитьЗаказНаДоставку() Экспорт
	
	Параметры = НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку();
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("ИдентификаторСтроки", -1);
	
	Возврат Параметры;
	
КонецФункции

// Новый параметры запроса получить заказ на доставку.
// 
// Возвращаемое значение:
//  Результат - Структура - Новый параметры запроса получить заказ на доставку.
Функция НовыйПараметрыЗапросаПолучитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОбновитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОтменитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("ОтменитьЗаказПлатно");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
Функция НовыйПараметрыЗапросаОформитьЗаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	Результат.Вставить("ТипГрузоперевозки");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Результат - Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаЗаписатьИзменитьОтправитьСписокЗаказовНаДоставку() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СписокЗаказов", Новый Массив);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("Отправка", Ложь);
	Результат.Вставить("ГрупповаяОбработка", Ложь);
	Результат.Вставить("ПараметрыДанныеФормы", Новый Структура);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьГрафикДвиженияЗаказа() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗаказа");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьГрафикДвиженияЗаказаПоТрекНомеру() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТрекНомер");
	Результат.Вставить("ГрузоперевозчикИдентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДоступныеПечатныеФормы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыЗаказов", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаЗагрузитьФайлыПечатныхФорм() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Параметры", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйЭлементПараметровЗапросаЗагрузитьФайлыПечатныхФорм() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторЗаказа");
	Результат.Вставить("Список", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьЖурналЗаказовНаДоставкуИзСервиса() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Страница", 0);
	Результат.Вставить("Сортировка", "");
	Результат.Вставить("МассивНомеров", Новый Массив);
	Результат.Вставить("ДатаСозданияОт");
	Результат.Вставить("ДатаСозданияДо");
	Результат.Вставить("СписокСтатусов", Новый Массив);
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьПечатнуюФормуИзСервиса() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ИдентификаторДокумента", "");
	Результат.Вставить("ИдентификаторПечатнойФормы", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МультизаказНаДоставку

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаСоздатьМультизаказ() Экспорт
	
	Результат = НовыйПараметрыМультизаказаНаДоставку();
	Результат.Вставить("ИдентификаторЗаказа");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаДобавитьЗаказНаДоставкуВМультизаказ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("ИдентификаторЗаказа");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьМультизаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОформитьМультизаказ() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОбновитьМультизаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОтменитьМультизаказНаДоставку() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	Результат.Вставить("ОтменитьЗаказПлатно");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Справочники

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьСостояния() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьТипыГрузоперевозки() Экспорт
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса получить грузоперевозчиков.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить грузоперевозчиков. Содержит свойства:
//		* ОрганизацияБизнесСетиСсылка - Неопределено - 
//		* ТипГрузоперевозки - Число - 
//		* ГрузоперевозчикИНН - Строка - 
//		* ГрузоперевозчикКПП - Строка -
// 
Функция НовыйПараметрыЗапросаПолучитьГрузоперевозчиков() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияБизнесСетиСсылка", Неопределено);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ГрузоперевозчикИНН", "");
	Результат.Вставить("ГрузоперевозчикКПП", "");
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса получить пункты выдачи клиента.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить пункты выдачи клиента. Содержит свойства:
//		* ОрганизацияБизнесСетиСсылка - Неопределено - 
//		* ТипГрузоперевозки - Число - 
//		* ТипЗагрузки - Число -
//
Функция НовыйПараметрыЗапросаПолучитьПунктыВыдачиКлиента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияБизнесСетиСсылка", Неопределено);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ТипЗагрузки", 0); // 0 - получить, 1 - запросить у оператора и получить
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса получить список курьеров.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса получить список курьеров. Содержит свойства:
//		* ОрганизацияБизнесСетиСсылка - Неопределено - 
//		* ТипГрузоперевозки - Число - идентификатор сервиса доставки из которого необходимо получить данные
//		* ТипЗагрузки - Число - указывает способ получения данных из сервиса доставки.
//								0 - получить кэшированные данные,
//								1 - запросить данные у оператора сервиса и получить их.
//
Функция НовыйПараметрыЗапросаПолучитьСписокКурьеров() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОрганизацияБизнесСетиСсылка", Неопределено);
	Результат.Вставить("ТипГрузоперевозки", 0);
	Результат.Вставить("ТипЗагрузки", 0); // 0 - получить, 1 - запросить у оператора и получить
	
	Возврат Результат;
	
КонецФункции

// Новый параметры запроса установить тариф по умолчанию.
// 
// Возвращаемое значение:
//  Структура - Новый параметры запроса установить тариф по умолчанию. Содержит свойства:
//		* ГрузоперевозчикИдентификатор - Строка - 
//		* ТарифИдентификатор - Строка - 
//		* ТипГрузоперевозки - Число -
//
Функция НовыйПараметрыЗапросаУстановитьТарифПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ГрузоперевозчикИдентификатор", "");
	Результат.Вставить("ТарифИдентификатор", "");
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДанныеГрузоперевозчика() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДанныеУслуги() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДанныеТерминала() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьТарифы() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипГрузоперевозки", 1);
	Результат.Вставить("ГрузоперевозчикИдентификатор", "");
	Результат.Вставить("ТарифИдентификатор", "");
	
	Результат.Вставить("ЗаказчикРоль", 1); // 1 - Отправитель, 2 - Получатель, 3 - Плательщик, 4 - Третье лицо.
	Результат.Вставить("ЗаказчикИНН", "");
	
	Результат.Вставить("СпособОтгрузки");
	Результат.Вставить("ДатаОтгрузки");
	Результат.Вставить("ВремяОтгрузкиС");
	Результат.Вставить("ВремяОтгрузкиПо");
	Результат.Вставить("ВремяОтгрузкиОбедС");
	Результат.Вставить("ВремяОтгрузкиОбедПо");
	
	Результат.Вставить("СпособДоставки");
	Результат.Вставить("ДатаДоставки");
	Результат.Вставить("ВариантВремениОтгрузки");
	Результат.Вставить("ВремяДоставкиС");
	Результат.Вставить("ВремяДоставкиПо");
	Результат.Вставить("ВремяДоставкиОбедС");
	Результат.Вставить("ВремяДоставкиОбедПо");

	Результат.Вставить("ПунктПриемаГрузаИдентификатор", "");
	Результат.Вставить("ПунктПриемаГрузаИдентификаторВСистемеГрузоперевозчика", "");
	Результат.Вставить("ПунктПриемаГрузаНаселенныйПунктИдентификатор", 0);
	Результат.Вставить("ОтправительАдрес"); //Полный адрес
	Результат.Вставить("ОтправительАдресЗначение"); //Формат JSON 1С:БСП
	Результат.Вставить("ОтправительАдресШирота", 0);
	Результат.Вставить("ОтправительАдресДолгота", 0);
	
	Результат.Вставить("ПунктВыдачиГрузаИдентификатор", "");
	Результат.Вставить("ПунктВыдачиГрузаИдентификаторВСистемеГрузоперевозчика", "");
	Результат.Вставить("ПунктВыдачиГрузаНаселенныйПунктИдентификатор", 0);
	Результат.Вставить("ПолучательАдрес"); //Полный адрес
	Результат.Вставить("ПолучательАдресЗначение"); //Формат JSON 1С:БСП
	Результат.Вставить("ПолучательАдресШирота", 0);
	Результат.Вставить("ПолучательАдресДолгота", 0);
	
	Результат.Вставить("ФормаОплаты");
	Результат.Вставить("ПлательщикРоль"); // 1 - Отправитель, 2 - Получатель, 3 - Третье лицо
	Результат.Вставить("ПлательщикАдрес"); //Полный адрес
	Результат.Вставить("ПлательщикАдресЗначение"); //Формат JSON 1С:БСП
	Результат.Вставить("ПлательщикАдресШирота", 0);
	Результат.Вставить("ПлательщикАдресДолгота", 0);
	
	Результат.Вставить("ГрузКоличествоГрузовыхМест", 1);
	Результат.Вставить("ГрузСтоимость");
	Результат.Вставить("ГрузСодержимое");
	
	Результат.Вставить("ГрузОбщийОбъем");
	Результат.Вставить("ГрузОбщийВес");
	Результат.Вставить("ГрузМаксимальнаяВысота");
	Результат.Вставить("ГрузМаксимальнаяДлина");
	Результат.Вставить("ГрузМаксимальнаяШирина");
	Результат.Вставить("ГрузМаксимальныйВес");
	Результат.Вставить("ТипГрузоперевозки");

	// Таблица адресов маршрута
	АдресаМаршрута = Новый ТаблицаЗначений;
	АдресаМаршрута.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число"));
	АдресаМаршрута.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	АдресаМаршрута.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	АдресаМаршрута.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число"));
	АдресаМаршрута.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число"));
	АдресаМаршрута.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	Результат.Вставить("АдресаМаршрута", АдресаМаршрута);
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	// Таблица товаров
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Длина", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Высота", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Ширина", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Результат.Вставить("Товары", ТаблицаТоваров);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьУслугиТарифов() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипГрузоперевозки", 1);
	Результат.Вставить("УслугиДляМультизаказов", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДоступныеТерминалы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ГрузоперевозчикИдентификатор", "");
	Результат.Вставить("Направление", 0);
	Результат.Вставить("Адрес", ""); // Полный адрес
	Результат.Вставить("АдресЗначение"); // Формат JSON 1С:БСП
	Результат.Вставить("ВсеТерминалы", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДанныеПоТарифу() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаСохранитьПараметрыТарифа() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("ФормаОплаты", 0);
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Результат.Вставить("Услуги", ТаблицаУслуги);
	
	// Таблица терминалы
	ТаблицаТерминалы = Новый ТаблицаЗначений;
	ТаблицаТерминалы.Колонки.Добавить("Идентификатор");
	ТаблицаТерминалы.Колонки.Добавить("Направление");
	ТаблицаТерминалы.Колонки.Добавить("АдресПредставление");
	ТаблицаТерминалы.Колонки.Добавить("АдресЗначение");
	
	Результат.Вставить("Терминалы", ТаблицаТерминалы);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Авторизация

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьНастройкиАвторизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторСервиса", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаЗаписатьНастройкиАвторизации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Логин", "");
	Результат.Вставить("Пароль", "");
	Результат.Вставить("ПравоДоступа", "");
	Результат.Вставить("Токен", "");
	Результат.Вставить("ИдентификаторСервиса", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку() Экспорт
	
	// Таблица состояний.
	ТаблицаСостояний = Новый ТаблицаЗначений;
	ТаблицаСостояний.Колонки.Добавить("Идентификатор", СервисДоставкиСлужебный.Типы().Число);
	
	// Таблица откуда.
	ТаблицаОткуда = Новый ТаблицаЗначений;
	ТаблицаОткуда.Колонки.Добавить("КодФИАС", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица куда
	ТаблицаКуда = Новый ТаблицаЗначений;
	ТаблицаКуда.Колонки.Добавить("КодФИАС", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица отправителей.
	ТаблицаОтправителей = Новый ТаблицаЗначений;
	ТаблицаОтправителей.Колонки.Добавить("Наименование", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаОтправителей.Колонки.Добавить("ЮрФизЛицо", СервисДоставкиСлужебный.Типы().Число);
	ТаблицаОтправителей.Колонки.Добавить("ИНН", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаОтправителей.Колонки.Добавить("КПП", СервисДоставкиСлужебный.Типы().Строка);
	
	// Таблица получателей.
	ТаблицаПолучателей = Новый ТаблицаЗначений;
	ТаблицаПолучателей.Колонки.Добавить("Наименование", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаПолучателей.Колонки.Добавить("ЮрФизЛицо", СервисДоставкиСлужебный.Типы().Число);
	ТаблицаПолучателей.Колонки.Добавить("ИНН", СервисДоставкиСлужебный.Типы().Строка);
	ТаблицаПолучателей.Колонки.Добавить("КПП", СервисДоставкиСлужебный.Типы().Строка);
	
	Результат = Новый Структура;
	
	// Страничный отбор.
	Результат.Вставить("Страница",			0);  // page
	Результат.Вставить("РазмерСтраницы",	0);  // size
	Результат.Вставить("Сортировка",		""); //
	
	// Отборы для поиска.
	Результат.Вставить("ИдентификаторыЗаказов", Новый Массив); 	// ordersId
	Результат.Вставить("Роль", 				""); 				// role
	Результат.Вставить("НомерЗаказа", 				""); 		// number
	Результат.Вставить("ДокументОснованиеИдентификатор", "");	// baseDocumentId
	Результат.Вставить("Состояние",		ТаблицаСостояний); 		// statuses
	Результат.Вставить("Отправитель",	ТаблицаОтправителей); 	// sender
	Результат.Вставить("Получатель",	ТаблицаПолучателей); 	// receiver
	Результат.Вставить("Откуда", 		ТаблицаОткуда); 		// shipmentPoint
	Результат.Вставить("Куда",			ТаблицаКуда); 			// deliveryPoint
	Результат.Вставить("ПунктВыдачиКлиента"); 					// pickuppointid
	Результат.Вставить("Грузоперевозчик"); 						// carrier
	Результат.Вставить("Оплата"); 								// paymentStatus
	Результат.Вставить("ДатаСозданияОт"); 						// dateCreateFrom
	Результат.Вставить("ДатаСозданияДо"); 						// dateCreateTo
	Результат.Вставить("ДатаОтгрузкиОт"); 						// dateShipmentFrom
	Результат.Вставить("ДатаОтгрузкиДо"); 						// dateShipmentTo
	Результат.Вставить("ДатаДоставкиОт"); 						// dateDeliveryFrom
	Результат.Вставить("ДатаДоставкиДо"); 						// dateDeliveryTo
	Результат.Вставить("НаложенныйПлатеж"); 					// paymentOnDeliveryIsAvailable
	Результат.Вставить("НаложенныйПлатежПолучен");				// paymentOnDeliveryIsPaid
	Результат.Вставить("ТипГрузоперевозки");
	Результат.Вставить("ОтборПоГотовностиЗаказов", 0);
	Результат.Вставить("Курьер"); 								// courier
	
	// Режим просмотра с учетом мультизаказов
	Результат.Вставить("ФильтрПоМультизаказам", ФильтрПоМультизаказамПоУмолчанию());
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПечатнаяФормаДляЗапроса() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторДокумента");
	Результат.Вставить("ИдентификаторПечатнойФормы");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьДоступныеДляИзмененияРеквизиты() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Идентификатор");
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
// 
// Возвращаемое значение:
//  Структура -- параметры, необходимые для формирования запроса.
Функция ПараметрыЗапросаПолучитьНаложенныеПлатежи() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("РазмерВыборки", 100);		// size
	Параметры.Вставить("ДатаВыборкиС", '00010101');	// date
	Параметры.Вставить("Идентификатор", "");		// Идентификатор
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаПолучитьСостояниеПодключенияОрганизации() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипГрузоперевозки", 0);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры для запроса.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗапросаОтправитьЗапросНаПолучениеРегистрационныхДанных() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЗарегистрироватьОрганизацию", Ложь);
	Результат.Вставить("ЗарегистрироватьПунктВыдачи", Ложь);
	Результат.Вставить("ЗарегистрироватьПользователя", Ложь);
	
	Результат.Вставить("НаименованиеОрганизации", "");
	Результат.Вставить("ИдентификаторОрганизации", "");
	Результат.Вставить("ИдентификаторПунктаВыдачи", "");
	Результат.Вставить("НаименованиеПунктаВыдачи", "");
	Результат.Вставить("АдресПунктаВыдачи", "");
	Результат.Вставить("ТелефонПунктаВыдачи", "");
	Результат.Вставить("НаименованиеПользователя", "");
	Результат.Вставить("НомерТелефонаПользователя", "");
	Результат.Вставить("АдресЭлектроннойПочтыПользователя", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает заказ на доставку, введенный на основании переданного документа.
//
// Параметры:
//  Ссылка - ДокументСсылка - документ-основание заказа на доставку.
//  ИсключатьИзмененные - Булево - исключать из поиска заказы с зарегистрированным
//		изменением товарного состава.
//
// Возвращаемое значение:
//  ДокументСсылка.ЗаказНаДоставку - заказ на доставку.
//
Функция НайтиЗаказНаДоставкуПоОснованию(Ссылка, ИсключатьИзмененные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ИсключатьИзмененные", ИсключатьИзмененные);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаРегистра.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.ДокументОснование = &Ссылка
	|	И ВЫБОР
	|		КОГДА &ИсключатьИзмененные
	|			ТОГДА НЕ ТаблицаРегистра.ЕстьИзмененияТоварногоСостава
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Идентификатор;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область КонструкторыОтветов

// Возвращает параметры для ответа на запрос.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыОтветаПолучитьГрафикДвиженияЗаказа() Экспорт
	
	Параметры = Новый Структура();
	
	Параметры.Вставить("ИдентификаторЗаказа", ""); //Идентификатор заказа 1С:Доставка
	Параметры.Вставить("ТрекНомер", "");
	Параметры.Вставить("НомерЗаказа", "");
	Параметры.Вставить("ДатаЗаказа", '00010101');
	Параметры.Вставить("ДатаСозданияЗаказа", '00010101');
	Параметры.Вставить("Состояние", "");
	Параметры.Вставить("СостояниеИдентификатор", 0);
	Параметры.Вставить("Заблокирован", Ложь);
	Параметры.Вставить("ТипГрузоперевозки", 1);
	
	Параметры.Вставить("Грузоперевозчик", НовыйПараметрыГрузоперевозчика());
	Параметры.Вставить("Тариф", НовыйПараметрыТарифа());
	Параметры.Вставить("СпособОтгрузки", СервисДоставкиКлиентСервер.СпособОтгрузкиОтТерминала());
	Параметры.Вставить("СпособДоставки", СервисДоставкиКлиентСервер.СпособДоставкиДоТерминала());
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ДатаДоставки", '00010101');
	Параметры.Вставить("ДатаДоставки", '00010101');
	
	Параметры.Вставить("ТочкаОтправления", НовыйПараметрыТочкиМаршрута());
	Параметры.Вставить("ДополнительнаяИнформация", "");
	
	Параметры.Вставить("ГрафикДвиженияЗаказа", Новый Массив());
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область КонструкторыДанных

// Возвращает параметры объекта данных сервиса доставки.
//
// Параметры:
//  РазмерСтраницы - Число - количество строк на странице.
//  Страница       - Число - номер текущей страницы.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыСтраницСервиса(РазмерСтраницы = 0, Страница = 0) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Страница",          Страница); // Номер страницы для запроса.
	Результат.Вставить("РазмерСтраницы",    РазмерСтраницы); // Количество записей на одной странице для запроса.
	Результат.Вставить("КоличествоСтрок",   0); // Количество строк в сервисе.
	Результат.Вставить("КоличествоСтраниц", 0); // Количество страниц в сервисе.
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗаказаНаДоставкуДляСписка() Экспорт
	
	Возврат СервисДоставкиКлиентСервер.НовыйПараметрыЗаказаНаДоставкуДляСписка();
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Параметры - Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыЗаказаНаДоставку() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("КлючИдемпотентности", Новый УникальныйИдентификатор());
	
	Параметры.Вставить("ДокументОснование", Неопределено); // Устарел. Не использовать.
	Параметры.Вставить("ДокументыОснования", Новый СписокЗначений());
	Параметры.Вставить("ДокументыОснованияИдентификаторы", Новый СписокЗначений());
	Параметры.Вставить("ФормаОплаты", 1);
	Параметры.Вставить("Валюта", НовыйПараметрыВалюты());
	Параметры.Вставить("СуммаДокумента", 0);
	Параметры.Вставить("СуммаСкидки", 0);
	
	Параметры.Вставить("Оплачен", Ложь);
	Параметры.Вставить("НаложенныйПлатежВидОплаты", 0);
	Параметры.Вставить("СуммаНаложенногоПлатежа", 0);
	Параметры.Вставить("НаложенныйПлатежВидОплатыДополнительный", 0);
	Параметры.Вставить("СуммаНаложенногоПлатежаДополнительный", 0);
	Параметры.Вставить("ПолнаяСтоимость", 0);
	
	Параметры.Вставить("ТипГрузоперевозки", 0);
	Параметры.Вставить("Грузоперевозчик", НовыйПараметрыГрузоперевозчика());
	Параметры.Вставить("Тариф", НовыйПараметрыТарифа());
	
	Параметры.Вставить("Отправитель", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ПунктПриемаГруза", НовыйПараметрыПунктаПриемаВыдачи());
	Параметры.Вставить("СпособОтгрузки", 0);
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ВремяОтгрузки", НовыйПараметрыВремениОтгрузкиДоставки());
	Параметры.Вставить("ОтгрузкаНаБлижайшееВремя", Ложь); 
	Параметры.Вставить("ВариантВремениОтгрузки", 0); 
	
	Параметры.Вставить("Получатель", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ПунктВыдачиГруза", НовыйПараметрыПунктаПриемаВыдачи());
	Параметры.Вставить("СпособДоставки", 0);
	Параметры.Вставить("ДатаДоставки", '00010101');
	Параметры.Вставить("ВремяДоставки", НовыйПараметрыВремениОтгрузкиДоставки());
	
	Параметры.Вставить("ПунктВыдачиКлиента", НовыйПараметрыПунктаВыдачиКлиента());
	
	Параметры.Вставить("ПлательщикРоль", 0); //1 - Отправитель; 2 - Получатель; 3 - Третье лицо
	Параметры.Вставить("Плательщик", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("Груз", НовыйПараметрыГруза());
	
	Параметры.Вставить("ЗаказчикРоль", 0); //1 - Отправитель; 2 - Получатель; 3 - Плательщик; 4 - Третье лицо

	Параметры.Вставить("ДополнительнаяИнформация", "");
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Параметры.Вставить("Услуги", ТаблицаУслуги);
	
	// Таблица позиций
	ТаблицаТовары = Новый ТаблицаЗначений;
	ПараметрыТаблицыПозиций = НовыйПараметрыЭлементаГруза();
	
	Для Каждого ПараметрГруза Из ПараметрыТаблицыПозиций Цикл
		ТаблицаТовары.Колонки.Добавить(ПараметрГруза.Ключ);
	КонецЦикла;
	
	Параметры.Вставить("Товары", ТаблицаТовары);
	
	// Таблица дополнительных услуг.
	ТаблицаДопУслуги = Новый ТаблицаЗначений;
	ТаблицаДопУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаДопУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Параметры.Вставить("ДополнительныеУслуги", ТаблицаДопУслуги);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыМультизаказаНаДоставку() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ТипГрузоперевозки", 0);
	Параметры.Вставить("ТипНаименование", "");
	Параметры.Вставить("ТипИдентификатор", "");
	Параметры.Вставить("Грузоперевозчик", НовыйПараметрыГрузоперевозчика());
	Параметры.Вставить("Тариф", НовыйПараметрыТарифа());
	
	Параметры.Вставить("Отправитель", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ПунктПриемаГруза", НовыйПараметрыПунктаПриемаВыдачи());
	Параметры.Вставить("СпособОтгрузки", 0);
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ВремяОтгрузки", НовыйПараметрыВремениОтгрузкиДоставки());
	Параметры.Вставить("ОтгрузкаНаБлижайшееВремя", Ложь);
	Параметры.Вставить("ВариантВремениОтгрузки", 0);
	
	Параметры.Вставить("ПлательщикРоль", 0); //1 - Отправитель; 2 - Получатель; 3 - Третье лицо
	Параметры.Вставить("Плательщик", НовыйПараметрыУчастникаГрузоперевозки());
	Параметры.Вставить("ФормаОплаты", 1);
	Параметры.Вставить("ФормаОплатыНаименование", "");
	Параметры.Вставить("Валюта", НовыйПараметрыВалюты());
	Параметры.Вставить("СуммаДокумента", 0);
	Параметры.Вставить("СуммаСкидки", 0);
	
	Параметры.Вставить("Груз", НовыйПараметрыГруза());
	
	Параметры.Вставить("ДополнительнаяИнформация", "");
	
	// Таблица услуги
	ТаблицаУслуги = Новый ТаблицаЗначений;
	ТаблицаУслуги.Колонки.Добавить("Идентификатор");
	ТаблицаУслуги.Колонки.Добавить("Свойства", СервисДоставкиСлужебный.Типы().Массив);
	
	Параметры.Вставить("Услуги", ТаблицаУслуги);
	
	Параметры.Вставить("Заказы", Новый Массив());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыУчастникаГрузоперевозки() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Контрагент", НовыйПараметрыКонтрагента());
	Параметры.Вставить("Адрес", НовыйПараметрыАдреса("АдресДоставки"));
	Параметры.Вставить("КонтактноеЛицо", НовыйПараметрыКонтактногоЛица());
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса:
//  *Ссылка - СправочникСсылка,Неопределено - 
//  *Наименование - Строка
//  *ЮрФизЛицо - Число
//  *ИНН - Строка
//  *КПП - Строка
//
Функция НовыйПараметрыКонтрагента() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("ЮрФизЛицо", 0);
	Параметры.Вставить("ИНН", "");
	Параметры.Вставить("КПП", "");
	Параметры.Вставить("ЮридическийАдрес", НовыйПараметрыАдреса("Юридический"));
	Параметры.Вставить("ЭтоОрганизация", Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса:
//  *Ссылка - СправочникСсылка, Неопределено - 
//  *Идентификатор - Строка
//  *Наименование - Строка
//  *Email - Строка
//  *Телефон - см. НовыйПараметрыТелефона
//  *ТелефонДополнительный - см. НовыйПараметрыТелефона
//  *СпособОпределенияКонтактногоЛица - Число
//
Функция НовыйПараметрыКонтактногоЛица() Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Email", "");
	Параметры.Вставить("Телефон", НовыйПараметрыТелефона());
	Параметры.Вставить("ТелефонДополнительный", НовыйПараметрыТелефона());
	Параметры.Вставить("СпособОпределенияКонтактногоЛица", 0);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Параметры:
//  ТипАдреса - Строка - наименование типа адреса. Например: "АдресДоставки", "Юридический", "Фактический". 
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыАдреса(ТипАдреса = "") Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ТипАдреса", ТипАдреса);
	Параметры.Вставить("Владелец", Неопределено);
	Параметры.Вставить("ВладелецНаименование", "");
	Параметры.Вставить("Представление", "");
	Параметры.Вставить("Широта", 0);
	Параметры.Вставить("Долгота", 0);
	Параметры.Вставить("ЗначенияПолей", "");
	Параметры.Вставить("Значение", "");
	
	Возврат Параметры;
	
КонецФункции

// Возвращает параметры объекта данных сервиса доставки.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция НовыйПараметрыСвойстваУслуги() Экспорт

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("ЕдиницаИзмерения", "");
	Результат.Вставить("ТипЗначения", "");
	Результат.Вставить("Значение", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры организации для подключения к 1С:Бизнес-сеть.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для формирования запроса.
//
Функция ПараметрыОрганизацииБизнесСетиДляПодключения() Экспорт
	
	Результат = Новый Структура("ИдентификаторОрганизации, ВременныйТокен");
	Результат.ИдентификаторОрганизации = "";
	Результат.ВременныйТокен = "";
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры наложенного платежа.
//
// Возвращаемое значение:
//  Структура - параметры, необходимые для платежа.
//
Функция НовыйПараметрыПлатежа() Экспорт
	
	ПараметрыПлатежа = Новый Структура();
	
	ПараметрыПлатежа.Вставить("Идентификатор", "");
	ПараметрыПлатежа.Вставить("ДокументОснование", Неопределено);
	ПараметрыПлатежа.Вставить("ОтправительИНН", "");
	ПараметрыПлатежа.Вставить("ОтправительКПП", "");
	ПараметрыПлатежа.Вставить("ОтправительКонтрагентСсылка", Неопределено);
	ПараметрыПлатежа.Вставить("ОтправительКонтрагентНаименование", "");
	ПараметрыПлатежа.Вставить("ГрузоперевозчикИНН", "");
	ПараметрыПлатежа.Вставить("ГрузоперевозчикКПП", "");
	ПараметрыПлатежа.Вставить("ГрузоперевозчикКонтрагентСсылка", Неопределено);
	ПараметрыПлатежа.Вставить("ГрузоперевозчикКонтрагентНаименование", "");
	ПараметрыПлатежа.Вставить("СуммаНаложенногоПлатежа", 0);
	ПараметрыПлатежа.Вставить("ДатаРегистрацииНаложенногоПлатежа", '00010101');
		
	Возврат ПараметрыПлатежа;
	
КонецФункции

Функция НовыйПараметрыВремениОтгрузкиДоставки() Экспорт

	Параметры = Новый Структура;
	
	Параметры.Вставить("С", '00010101');
	Параметры.Вставить("По", '00010101');
	Параметры.Вставить("ОбедС", '00010101');
	Параметры.Вставить("ОбедПо", '00010101');
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПараметрыПоУмолчанию

// Возвращает структуру, содержащую значения параметров по умолчанию для работы с 1С:Доставка, прочитанные из информационной базы по 
// наименованиям параметров.
//
// Параметры:
//  ТипГрузоперевозки - Число - 1 - Сборный груз, 2 - Курьерская доставка, 3 - Курьерика
//  Параметры - Строка - имена параметров, перечисленные через запятую, в формате
//                       требований к свойствам структуры.
//                       Например, "ВесЕдиницыТовара, ШиринаЕдиницыТовара".
//            - Массив, ФиксированныйМассив - имена параметров в формате требований
//                       к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных параметров:
//    * ОрганизацияБизнесСети - ОпределяемыйТип.ОрганизацияСервисДоставки - организации, подключенная к 1С:БизнесСеть.
//    * ВесЕдиницыТовара      - Число - вес единицы товара в килограммах.
//    * ДлинаЕдиницыТовара    - Число - размер единицы товара в сантиметрах.
//    * ШиринаЕдиницыТовара   - Число - размер единицы товара в сантиметрах.
//    * ВысотаЕдиницыТовара   - Число - размер единицы товара в сантиметрах.
//    * ВесГрузовогоМеста     - Число - вес грузового места в килограммах.
//    * ДлинаГрузовогоМеста   - Число - размер грузового места в сантиметрах.
//    * ШиринаГрузовогоМеста  - Число - размер грузового места в сантиметрах.
//    * ВысотаГрузовогоМеста  - Число - размер грузового места в сантиметрах.
//
Функция ПараметрыПоУмолчанию(ТипГрузоперевозки, Параметры = "") Экспорт
	
	ВернутьВсеПараметры = Ложь;
	ПараметрыДляЗапроса = Новый Массив();
	
	Если ТипЗнч(Параметры) = Тип("Строка") Тогда
		Если ПустаяСтрока(Параметры) Тогда
			ВернутьВсеПараметры = Истина;
		Иначе
			// Удаление пробелов.
			Параметры = СтрЗаменить(Параметры, " ", "");
			// Преобразование параметра в массив полей.
			ПараметрыДляЗапроса = СтрРазделить(Параметры, ",");
		КонецЕсли;
	ИначеЕсли ТипЗнч(Параметры) = Тип("Массив")
		Или ТипЗнч(Параметры) = Тип("ФиксированныйМассив") Тогда
		ПараметрыДляЗапроса = Параметры;
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный тип параметра Параметры в функции СервисДоставки.ПараметрыПоУмолчанию: %1'"), 
			Строка(ТипЗнч(Параметры)));
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ОрганизацияБизнесСети""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ NULL
	|	КОНЕЦ) КАК ОрганизацияБизнесСети,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВесЕдиницыТовара""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ВесЕдиницыТовара,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВысотаЕдиницыТовара""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ВысотаЕдиницыТовара,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ДлинаЕдиницыТовара""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ДлинаЕдиницыТовара,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ШиринаЕдиницыТовара""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ШиринаЕдиницыТовара,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВесГрузовогоМеста""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ВесГрузовогоМеста,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВысотаГрузовогоМеста""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ВысотаГрузовогоМеста,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ДлинаГрузовогоМеста""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ДлинаГрузовогоМеста,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ШиринаГрузовогоМеста""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ШиринаГрузовогоМеста,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяДоставкиОбедПо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяДоставкиОбедПо,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяДоставкиОбедС""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяДоставкиОбедС,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяДоставкиПо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяДоставкиПо,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяДоставкиС""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяДоставкиС,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяОтгрузкиОбедПо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяОтгрузкиОбедПо,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяОтгрузкиОбедС""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяОтгрузкиОбедС,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяОтгрузкиПо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяОтгрузкиПо,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ВремяОтгрузкиС""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ) КАК ВремяОтгрузкиС,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""КонтактноеЛицо""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ NULL
	|	КОНЕЦ) КАК КонтактноеЛицо,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""СпособОпределенияКонтактногоЛица""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК СпособОпределенияКонтактногоЛица,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""СпособДоставки""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК СпособДоставки,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""СпособОтгрузки""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК СпособОтгрузки,
	|	МАКСИМУМ(ВЫРАЗИТЬ(ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""ЗаказчикРоль""
	|			ТОГДА НастройкиДоставки.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧИСЛО)) КАК ЗаказчикРоль
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	РегистрСведений.НастройкиОбщиеСервисДоставки КАК НастройкиДоставки
	|ГДЕ
	|	(НастройкиДоставки.НаименованиеПараметра В (&Параметры)
	|	ИЛИ &ВернутьВсеПараметры)
	|	И НастройкиДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НастройкиДоставки.НаименованиеПараметра = ""УслугиДоставки""
	|			ТОГДА НастройкиДоставки.ЗначениеХранилищеЗначения
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК УслугиДоставки
	|ПОМЕСТИТЬ ВременнаяТаблицаУслугиДоставки
	|ИЗ
	|	РегистрСведений.НастройкиОбщиеСервисДоставки КАК НастройкиДоставки
	|ГДЕ
	|	НастройкиДоставки.НаименованиеПараметра = ""УслугиДоставки""
	|	И НастройкиДоставки.ТипГрузоперевозки = &ТипГрузоперевозки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ОрганизацияБизнесСети КАК ОрганизацияБизнесСети,
	|	ВременнаяТаблица.ВесЕдиницыТовара КАК ВесЕдиницыТовара,
	|	ВременнаяТаблица.ВысотаЕдиницыТовара КАК ВысотаЕдиницыТовара,
	|	ВременнаяТаблица.ДлинаЕдиницыТовара КАК ДлинаЕдиницыТовара,
	|	ВременнаяТаблица.ШиринаЕдиницыТовара КАК ШиринаЕдиницыТовара,
	|	ВременнаяТаблица.ВесГрузовогоМеста КАК ВесГрузовогоМеста,
	|	ВременнаяТаблица.ВысотаГрузовогоМеста КАК ВысотаГрузовогоМеста,
	|	ВременнаяТаблица.ДлинаГрузовогоМеста КАК ДлинаГрузовогоМеста,
	|	ВременнаяТаблица.ШиринаГрузовогоМеста КАК ШиринаГрузовогоМеста,
	|	ВременнаяТаблица.ВремяДоставкиОбедПо КАК ВремяДоставкиОбедПо,
	|	ВременнаяТаблица.ВремяДоставкиОбедС КАК ВремяДоставкиОбедС,
	|	ВременнаяТаблица.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВременнаяТаблица.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ВременнаяТаблица.ВремяОтгрузкиОбедПо КАК ВремяОтгрузкиОбедПо,
	|	ВременнаяТаблица.ВремяОтгрузкиОбедС КАК ВремяОтгрузкиОбедС,
	|	ВременнаяТаблица.ВремяОтгрузкиПо КАК ВремяОтгрузкиПо,
	|	ВременнаяТаблица.ВремяОтгрузкиС КАК ВремяОтгрузкиС,
	|	ВременнаяТаблица.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ВременнаяТаблица.СпособОпределенияКонтактногоЛица КАК СпособОпределенияКонтактногоЛица,
	|	ВременнаяТаблица.СпособДоставки КАК СпособДоставки,
	|	ВременнаяТаблица.СпособОтгрузки КАК СпособОтгрузки,
	|	ВременнаяТаблица.ЗаказчикРоль КАК ЗаказчикРоль,
	|	ВременнаяТаблицаУслугиДоставки.УслугиДоставки КАК УслугиДоставки
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ПОЛНОЕ СОЕДИНЕНИЕ ВременнаяТаблицаУслугиДоставки КАК ВременнаяТаблицаУслугиДоставки
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("Параметры", ПараметрыДляЗапроса);
	Запрос.УстановитьПараметр("ВернутьВсеПараметры", ВернутьВсеПараметры);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат НовыйПараметрыПоУмолчанию();
	КонецЕсли;
	
	СтруктураПараметров = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат.Выгрузить()[0]);
	СтруктураОтвета = Новый Структура();
	Значение = Неопределено;
	
	Если Не ВернутьВсеПараметры Тогда
		
		Для Каждого ТекСтрока Из ПараметрыДляЗапроса Цикл
			СтруктураПараметров.Свойство(ТекСтрока, Значение);
			СтруктураОтвета.Вставить(ТекСтрока, Значение);
		КонецЦикла;
		
	ИначеЕсли НЕ СтруктураПараметров.ВесЕдиницыТовара = Null Тогда
		СтруктураОтвета = СтруктураПараметров;
	Иначе
		СтруктураОтвета = НовыйПараметрыПоУмолчанию();
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Права

// Проверяет возможность работы в сервисе 1С:Доставка для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права.
//
Функция ПравоРаботыССервисомДоставки(ВыводитьСообщение = Ложь) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьПраво = ПравоДоступа("Использование", Метаданные.Обработки.СервисДоставки);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СервисДоставкиСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет возможность отправки заказов перевозчику в сервисе 1С:Доставка для текущего пользователя.
//
// Параметры:
//  ВыводитьСообщение - Булево - признак необходимости вывода сообщения о недостаточности прав.
// 
// Возвращаемое значение:
//  Булево - наличие права.
//
Функция ПравоОтправкиЗаказовНаДоставкуПеревозчику(ВыводитьСообщение = Ложь) Экспорт
	
	ЕстьПраво = Пользователи.РолиДоступны("ОтправкаЗаказовНаДоставкуПеревозчикуСервисДоставки", , Ложь);
	
	Если Не ЕстьПраво И ВыводитьСообщение Тогда
		СервисДоставкиСлужебный.СообщитьПользователюОНарушенииПравДоступа();
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Проверяет возможность работы в сервисе 1С:Доставка для текущего пользователя.
//
// Параметры:
//  Параметры - Структура - см. НовыйПараметрыАдреса().
// 
Процедура ЗаполнитьАдресПоПараметрам(Параметры) Экспорт
	
	СервисДоставкиСлужебный.ЗаполнитьАдресПоПараметрам(Параметры);
	
КонецПроцедуры

// Возвращает признак возможности использовать регламентное задание.
//
// Возвращаемое значение:
//  Булево - признак использования.
//
Функция ИспользуетсяРегламентЗагрузкиНаложенныхПлатежей() Экспорт
	
	ИспользоватьРегламентЗагрузкиНаложенныхПлатежей = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьРегламентЗагрузкиНаложенныхПлатежей(ИспользоватьРегламентЗагрузкиНаложенныхПлатежей);
	
	Возврат ИспользоватьРегламентЗагрузкиНаложенныхПлатежей;

КонецФункции

// Возвращает признак возможности использовать регламентное задание.
//
// Возвращаемое значение:
//  Булево - признак использования.
//
Функция ИспользуютсяНаложенныеПлатежи() Экспорт
	
	ИспользоватьНаложенныеПлатежи = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьНаложенныеПлатежи(ИспользоватьНаложенныеПлатежи);
	
	Возврат ИспользоватьНаложенныеПлатежи;

КонецФункции

// Заполняет параметры телефона контактной информацией по владельцу, указанному в Параметры.
//
// Параметры:
//  Параметры - см. НовыйПараметрыКонтактногоЛица
//  ЗаполняемыеТипыКонтактнойИнформации - Массив из ПеречислениеСсылка.ТипыКонтактнойИнформации, Неопределено - 
//  	Если Неопределено, то заполняются все типы контактной информации (телефон, e-mail)
//
Процедура ЗаполнитьПараметрыКонтактногоЛица(Параметры, ЗаполняемыеТипыКонтактнойИнформации = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Параметры.Наименование = Строка(Параметры.Ссылка);
	
	КлючиЗаполнения = Новый Структура();
	КлючиЗаполнения.Вставить("Телефон", Перечисления.ТипыКонтактнойИнформации.Телефон);	
	КлючиЗаполнения.Вставить("Email", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);	
	
	Если ТипЗнч(ЗаполняемыеТипыКонтактнойИнформации) <> Тип("Массив") Тогда
		ЗаполняемыеТипыКонтактнойИнформации = Новый Массив();
		Для каждого Элем Из КлючиЗаполнения Цикл
			ЗаполняемыеТипыКонтактнойИнформации.Добавить(Элем.Значение)
		КонецЦикла;
	КонецЕсли;
	
	ВидыКИПоСсылка = УправлениеКонтактнойИнформацией.ВидыКонтактнойИнформацииОбъекта(Параметры.Ссылка);
	ЦелевыеВидыКИ = Новый Массив;
	Для каждого ЭлемВидКИ Из ВидыКИПоСсылка Цикл
		Если ЗаполняемыеТипыКонтактнойИнформации.Найти(ЭлемВидКИ.Тип) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЦелевыеВидыКИ.Добавить(ЭлемВидКИ.Ссылка);
	КонецЦикла; 
	
	ТекущаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	ЦелеваяКонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Параметры.Ссылка, ЦелевыеВидыКИ, ТекущаяДата, Ложь);
	
	ЗаполненныеПараметры = Новый Массив;
	Для каждого ЭлемКИ Из ЦелеваяКонтактнаяИнформация Цикл
		Для каждого ЭлемРеквизит Из КлючиЗаполнения Цикл
			Если ЭлемКИ.Тип = ЭлемРеквизит.Значение
				И ЗаполненныеПараметры.Найти(ЭлемРеквизит.Ключ) = Неопределено Тогда
				
				ЗаполненныеПараметры.Добавить(ЭлемРеквизит.Ключ);
				Если ЭлемРеквизит.Ключ = "Телефон" Тогда
					Если НЕ ПустаяСтрока(Параметры[ЭлемРеквизит.Ключ].Представление) Тогда
						Продолжить;
					КонецЕсли; 
					Параметры[ЭлемРеквизит.Ключ].Значение = ЭлемКИ.Значение;
					Параметры[ЭлемРеквизит.Ключ].Представление = ЭлемКИ.Представление;
				Иначе
					Если НЕ ПустаяСтрока(Параметры[ЭлемРеквизит.Ключ]) Тогда
						Продолжить;
					КонецЕсли; 
					Параметры[ЭлемРеквизит.Ключ] = ЭлемКИ.Представление;
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Определяет пункт выдачи клиента для склада, либо возвращает пункт выдачи, используемый по умолчанию.
//
// Параметры:
//  ТипГрузоперевозки - Число
//  Склад - Произвольный
//
// Возвращаемое значение:
// 	Строка.
//
Функция ПолучитьПунктВыдачиКлиента(ТипГрузоперевозки, Склад = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовСервисовДоставки КАК ТаблицаСоответствий
	|ГДЕ
	|	ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСервисовДоставки.ПунктВыдачи)
	|	И Значение = &Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовСервисовДоставки КАК ТаблицаСоответствий
	|ГДЕ
	|	ТипГрузоперевозки = &ТипГрузоперевозки
	|	И ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовСервисовДоставки.ПунктВыдачи)
	|	И ЗначениеПоУмолчанию";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.ИдентификаторОбъекта;
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДокументыОснования
// Формирует таблицу значений с данными по основаниям.
//
// Параметры:
//  Основания - Массив - Ссылки на документы основания.
//
// Возвращаемое значение:
//  ТаблицаЗначений - имеет колонки:
//    * Ссылка - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки - ссылка на документ основание.
//    * СуммаДокумента - Число - сумма документа.
//    * Валюта - СправочникСсылка.Валюты - валюта документа основания.
//    * Отправитель - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки - отправитель.
//    * Получатель - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки - получатель.
//    * ОтправительАдрес - Строка - буквенный код по классификатору.
//    * ПолучательАдрес - Строка - буквенный код по классификатору.
//    * ДатаОтгрузки - Дата - дата отгрузки.
//    * СпособОтгрузки - Число - числовой код из списка: 0 - не определен, 1 - от терминала, 2 - от адреса.
//    * СпособДоставки - Число - числовой код из списка: 0 - не определен, 1 - до терминала, 2 - до адреса.
//
Функция ДокументыОснованияСписок(Основания) Экспорт
	
	ДокументыОснованияСписок = Новый ТаблицаЗначений();
	ДокументыОснованияСписок.Колонки.Добавить("Ссылка");
	ДокументыОснованияСписок.Колонки.Добавить("СуммаДокумента");
	ДокументыОснованияСписок.Колонки.Добавить("Валюта");
	ДокументыОснованияСписок.Колонки.Добавить("Отправитель");
	ДокументыОснованияСписок.Колонки.Добавить("Получатель");
	ДокументыОснованияСписок.Колонки.Добавить("ОтправительАдрес");
	ДокументыОснованияСписок.Колонки.Добавить("ПолучательАдрес");
	ДокументыОснованияСписок.Колонки.Добавить("ДатаОтгрузки");
	ДокументыОснованияСписок.Колонки.Добавить("СпособОтгрузки");
	ДокументыОснованияСписок.Колонки.Добавить("СпособДоставки");
	
	Для Каждого ТекОснование Из Основания Цикл
		НоваяСтрока = ДокументыОснованияСписок.Добавить();
		НоваяСтрока.Ссылка = ТекОснование;
	КонецЦикла;
	
	Если ДокументыОснованияСписок.Количество() <> 0 Тогда
		СервисДоставкиПереопределяемый.ЗаполнитьДокументыОснованияСписок(ДокументыОснованияСписок);
	КонецЕсли;
	
	Возврат ДокументыОснованияСписок;
	
КонецФункции

#КонецОбласти

#Область ШаблоныДоставки

// Проверяет наличие шаблона доставки по параметрам заказа, и в случае, если находит шаблон,
// переопределяет открываемую форму заказа на доставку, заполняет параметры заказа значениями
// из найденного шаблона.
//
// Параметры:
//  ИмяФормы - Строка - имя открываемой формы заказа на доставку;
//  ПараметрыЗаказа - Структура - структура, содержащая параметры заказа на доставку.
//
Процедура ПроверитьНаличиеШаблонаДоставкиПоОснованию(ИмяФормы, ПараметрыЗаказа) Экспорт
	
	СценарийПеревозки = ОпределитьСценарийПеревозкиПоПараметрам(ПараметрыЗаказа);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	0 КАК Приоритет,
	|	НастройкиРаботыСПеревозчиком.Организация КАК Организация,
	|	НастройкиРаботыСПеревозчиком.СценарийПеревозки КАК СценарийПеревозки,
	|	НастройкиРаботыСПеревозчиком.Контрагент КАК Контрагент,
	|	НастройкиРаботыСПеревозчиком.ТребуетсяАвторизация КАК ТребуетсяАвторизация,
	|	НастройкиРаботыСПеревозчиком.ПеревозчикИД КАК ПеревозчикИД,
	|	НастройкиРаботыСПеревозчиком.ТарифИД КАК ТарифИД,
	|	НастройкиРаботыСПеревозчиком.ТерминалИД КАК ТерминалИД,
	|	НастройкиРаботыСПеревозчиком.Грузоперевозчик КАК Грузоперевозчик,
	|	НастройкиРаботыСПеревозчиком.Тариф КАК Тариф,
	|	НастройкиРаботыСПеревозчиком.Терминал КАК Терминал,
	|	НастройкиРаботыСПеревозчиком.ОплачиваетЗаказчик КАК ОплачиваетЗаказчик,
	|	НастройкиРаботыСПеревозчиком.ФормаОплаты КАК ФормаОплаты,
	|	НастройкиРаботыСПеревозчиком.ВесРассчитывается КАК ВесРассчитывается,
	|	НастройкиРаботыСПеревозчиком.Вес КАК Вес,
	|	НастройкиРаботыСПеревозчиком.ГабаритыРассчитываются КАК ГабаритыРассчитываются,
	|	НастройкиРаботыСПеревозчиком.Длина КАК Длина,
	|	НастройкиРаботыСПеревозчиком.Ширина КАК Ширина,
	|	НастройкиРаботыСПеревозчиком.Высота КАК Высота,
	|	НастройкиРаботыСПеревозчиком.Объем КАК Объем,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругихПеревозчиков КАК ИсключитьДругихПеревозчиков,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругиеТарифы КАК ИсключитьДругиеТарифы,
	|	НастройкиРаботыСПеревозчиком.ССобственногоСклада КАК ССобственногоСклада
	|ИЗ
	|	РегистрСведений.НастройкиРаботыСПеревозчикамиСервисДоставки КАК НастройкиРаботыСПеревозчиком
	|ГДЕ
	|	НастройкиРаботыСПеревозчиком.Организация = &Организация
	|	И НастройкиРаботыСПеревозчиком.СценарийПеревозки = &СценарийПеревозки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	НастройкиРаботыСПеревозчиком.Организация,
	|	НастройкиРаботыСПеревозчиком.СценарийПеревозки,
	|	НастройкиРаботыСПеревозчиком.Контрагент,
	|	НастройкиРаботыСПеревозчиком.ТребуетсяАвторизация,
	|	НастройкиРаботыСПеревозчиком.ПеревозчикИД,
	|	НастройкиРаботыСПеревозчиком.ТарифИД,
	|	НастройкиРаботыСПеревозчиком.ТерминалИД,
	|	НастройкиРаботыСПеревозчиком.Грузоперевозчик,
	|	НастройкиРаботыСПеревозчиком.Тариф,
	|	НастройкиРаботыСПеревозчиком.Терминал,
	|	НастройкиРаботыСПеревозчиком.ОплачиваетЗаказчик,
	|	НастройкиРаботыСПеревозчиком.ФормаОплаты,
	|	НастройкиРаботыСПеревозчиком.ВесРассчитывается,
	|	НастройкиРаботыСПеревозчиком.Вес,
	|	НастройкиРаботыСПеревозчиком.ГабаритыРассчитываются,
	|	НастройкиРаботыСПеревозчиком.Длина,
	|	НастройкиРаботыСПеревозчиком.Ширина,
	|	НастройкиРаботыСПеревозчиком.Высота,
	|	НастройкиРаботыСПеревозчиком.Объем,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругихПеревозчиков,
	|	НастройкиРаботыСПеревозчиком.ИсключитьДругиеТарифы,
	|	НастройкиРаботыСПеревозчиком.ССобственногоСклада
	|ИЗ
	|	РегистрСведений.НастройкиРаботыСПеревозчикамиСервисДоставки КАК НастройкиРаботыСПеревозчиком
	|ГДЕ
	|	НастройкиРаботыСПеревозчиком.Организация = &Организация
	|	И НастройкиРаботыСПеревозчиком.СценарийПеревозки = ЗНАЧЕНИЕ(Перечисление.СценарииПеревозкиСервисДоставки.Общий)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("Организация", ПараметрыЗаказа.ОрганизацияБизнесСетиСсылка);
	Запрос.УстановитьПараметр("СценарийПеревозки", СценарийПеревозки);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ШаблонДоставки = Результат.Выбрать();
	ШаблонДоставки.Следующий();
	
	Если Не ПараметрыЗаказа.Свойство("РедактированиеБыстрогоЗаказа")
		И ШаблонДоставки.ИсключитьДругиеТарифы Тогда
		ИмяФормы = "БыстрыйЗаказ";
	КонецЕсли;
	
	Если НЕ ШаблонДоставки.ВесРассчитывается Тогда
		ПараметрыЗаказа.Груз.Вставить("Вес", ШаблонДоставки.Вес);
	КонецЕсли;
	
	Если НЕ ШаблонДоставки.ГабаритыРассчитываются Тогда
		ПараметрыЗаказа.Груз.Вставить("МаксимальнаяДлина", ШаблонДоставки.Длина);
		ПараметрыЗаказа.Груз.Вставить("МаксимальнаяШирина", ШаблонДоставки.Ширина);
		ПараметрыЗаказа.Груз.Вставить("МаксимальнаяВысота", ШаблонДоставки.Высота);
		ПараметрыЗаказа.Груз.Вставить("Объем", ШаблонДоставки.Объем);
	КонецЕсли;
	
	ПараметрыЗаказа.Грузоперевозчик.Вставить("Идентификатор", ШаблонДоставки.ПеревозчикИД);
	ПараметрыЗаказа.Грузоперевозчик.Вставить("Наименование", ШаблонДоставки.Грузоперевозчик);
	ПараметрыЗаказа.Грузоперевозчик.Вставить("Представление", ШаблонДоставки.Грузоперевозчик);
	
	ПараметрыЗаказа.Тариф.Вставить("Идентификатор", ШаблонДоставки.ТарифИД);
	ПараметрыЗаказа.Тариф.Вставить("Наименование", ШаблонДоставки.Тариф);
	ПараметрыЗаказа.Тариф.Вставить("Представление", ШаблонДоставки.Тариф);
	
	ПараметрыЗаказа.ПунктПриемаГруза.Вставить("Идентификатор", ШаблонДоставки.ТерминалИД);
	ПараметрыЗаказа.ПунктПриемаГруза.Вставить("Наименование", ШаблонДоставки.Терминал);
	
	СвойстваФормыОплаты = Новый Структура();
	СвойстваФормыОплаты.Вставить("ФормаОплаты", 2);
	СвойстваФормыОплаты.Вставить("ФормаОплатыПредставление", НСтр("ru='Наличная'"));
	
	СервисДоставкиПереопределяемый.ОпределитьПараметрыЗаказаФормаОплаты(ШаблонДоставки.ФормаОплаты, СвойстваФормыОплаты);
	
	ПараметрыЗаказа.Вставить("ФормаОплаты", СвойстваФормыОплаты.ФормаОплаты);
	ПараметрыЗаказа.Вставить("ФормаОплатыПредставление", СвойстваФормыОплаты.ФормаОплатыПредставление);
	
	Если ШаблонДоставки.ССобственногоСклада Тогда
		ПараметрыЗаказа.Вставить("СпособОтгрузки", 2);
	Иначе
		ПараметрыЗаказа.Вставить("СпособОтгрузки", 1);
	КонецЕсли;
	
	Если ШаблонДоставки.ОплачиваетЗаказчик Тогда
		ПараметрыЗаказа.Вставить("ПлательщикРоль", 2);
	Иначе
		ПараметрыЗаказа.Вставить("ПлательщикРоль", 1);
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("СпособДоставки", СервисДоставкиКлиентСервер.СпособДоставкиДоАдреса());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// API по загрузке данных о наложенных платежах в хост-систему
#Область НаложенныеПлатежиAPI

// Выполнить загрузку данных по наложенным платежам.
// 
// Параметры:
//   ПараметрыПроцедуры - Структура - параметры процедуры, не заполнять.
//   АдресРезультата - УникальныйИдентификатор - адрес результат в хранилище, не заполнять.
Процедура ВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам(Знач ПараметрыПроцедуры, Знач АдресРезультата) Экспорт

	Если ЗначениеЗаполнено(ПараметрыПроцедуры) И ПараметрыПроцедуры.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		
		ОрганизацииБизнесСети = Новый Массив;
		ОрганизацииБизнесСети.Добавить(ПараметрыПроцедуры.ОрганизацияБизнесСетиСсылка);
		
	Иначе
		
		ОрганизацииБизнесСети = Новый Массив;
		ТаблицаОрганизацииБизнесСети = СервисДоставкиСлужебный.ОрганизацииБизнесСети();
		Для Каждого Строка Из ТаблицаОрганизацииБизнесСети Цикл
			ОрганизацииБизнесСети.Добавить(Строка.Организация);
		КонецЦикла;
		
	КонецЕсли;
	
	ПределИтератора = ОрганизацииБизнесСети.Количество();
	Для Сч = 1 По ПределИтератора Цикл
		ТекОрганизация = ОрганизацииБизнесСети[ПределИтератора - Сч];
		Если НЕ ВозможнаДоставкаНаложеннымПлатежом(ТекОрганизация) Тогда
			ОрганизацииБизнесСети.Удалить(ПределИтератора - Сч);
		КонецЕсли;
	КонецЦикла;
	
	Пока ОрганизацииБизнесСети.Количество() > 0 Цикл
		
		ОрганизацииБизнесСетиДляПовторнойОбработки = Новый Массив;
		
		Для Каждого ОрганизацияБизнесСети Из ОрганизацииБизнесСети Цикл
	
			// 1.1 Вызов ПолучитьНаложенныеПлатежи
			ТекущийШаг = Перечисления.ШагиЗагрузкиНаложенныхПлатежейСервисДоставки.ЗагрузкаИзEDI;
			ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.СтруктураСостояния();
			СостояниеЗагрузки = РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.СтруктураСостояния();
		
			Если НеобходимоВыполнитьШагЗагрузкиНаложенныхПлатежей(ОрганизацияБизнесСети, ТекущийШаг, СостояниеЗагрузки) Тогда
													   
				ЗаполнитьЗначенияСвойств(ТекущееСостояниеЗагрузки, СостояниеЗагрузки);
																		
				ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
				ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Выполняется;
				
				ОтказИзмененияСостояния = Ложь;
				РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки, ОтказИзмененияСостояния);
				
				Если НЕ ОтказИзмененияСостояния Тогда
				
					ПараметрыЗапроса = ПараметрыЗапросаПолучитьНаложенныеПлатежи();
					ПараметрыЗапроса.ДатаВыборкиС = СостояниеЗагрузки.ДатаРегистрацииПлатежа;
					ПараметрыЗапроса.Идентификатор = СостояниеЗагрузки.ИдентификаторДокумента;
					ПараметрыЗапроса.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияБизнесСети);
			
					АдресРезультатаЗапроса = ПоместитьВоВременноеХранилище(Неопределено);
				
					ПолучитьНаложенныеПлатежи(ПараметрыЗапроса, АдресРезультатаЗапроса);
					
					РезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
					Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
						
						ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Выполнена;
						
						Если РезультатЗапроса.СписокПлатежей.Количество() > 0 Тогда
							
							НачатьТранзакцию();
							Попытка
								ЗаписатьДанныеПоНаложеннымПлатежамКОбработке(ОрганизацияБизнесСети, РезультатЗапроса.СписокПлатежей);
								
								ОрганизацииБизнесСетиДляПовторнойОбработки.Добавить(ОрганизацияБизнесСети);
								ТекущееСостояниеЗагрузки.ДатаРегистрацииПлатежа = РезультатЗапроса.ПараметрыЗапроса.ДатаРегистрацииПлатежа;
								ТекущееСостояниеЗагрузки.ИдентификаторДокумента = РезультатЗапроса.ПараметрыЗапроса.ИдентификаторДокумента;
								
								ЗафиксироватьТранзакцию();
							Исключение
								ОтменитьТранзакцию();
								ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Ошибка;
							КонецПопытки;
							
						КонецЕсли;
						
					Иначе
						
						ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Ошибка;
						
					КонецЕсли;
					
					РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
				
				КонецЕсли; 
	
			КонецЕсли;
			
			// 1.2 Вызов ОбработкаЗагруженныхДанных
			ТекущийШаг = Перечисления.ШагиЗагрузкиНаложенныхПлатежейСервисДоставки.ОбработкаЗагруженныхДанных;
			ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.СтруктураСостояния();
				
			Если НеобходимоВыполнитьШагЗагрузкиНаложенныхПлатежей(ОрганизацияБизнесСети, ТекущийШаг) Тогда
		
				ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
				ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Выполняется;
				
				ОтказИзмененияСостояния = Ложь;
				РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки, ОтказИзмененияСостояния);
				
				Если НЕ ОтказИзмененияСостояния Тогда
					
					ОбработатьДанныеПоНаложеннымПлатежам(ОрганизацияБизнесСети);
					
					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Выполнена;
					РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
					
				КонецЕсли; 

			КонецЕсли;
			
			
			// 1.3 Вызов ОчисткаЗагруженныхДанных
			ТекущийШаг = Перечисления.ШагиЗагрузкиНаложенныхПлатежейСервисДоставки.ОчисткаЗагруженныхДанных;
			ТекущееСостояниеЗагрузки = РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.СтруктураСостояния();
				
			Если НеобходимоВыполнитьШагЗагрузкиНаложенныхПлатежей(ОрганизацияБизнесСети, ТекущийШаг) Тогда
		
				ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
				ТекущееСостояниеЗагрузки.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Выполняется;
				
				ОтказИзмененияСостояния = Ложь;
				РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
				Если НЕ ОтказИзмененияСостояния Тогда
				
					ОтборДляУдаления = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.НовыйОтборЗаписей();
					ОтборДляУдаления.УдалитьОбработанные = Истина;
					
					РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.УдалитьЗаписиПоОтбору(ОтборДляУдаления);
					
					ТекущееСостояниеЗагрузки.ШагЗагрузки = ТекущийШаг;
					ТекущееСостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Выполнена;
					РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.УстановитьСостояние(ТекущееСостояниеЗагрузки);
				
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
	
		ОрганизацииБизнесСети = ОрганизацииБизнесСетиДляПовторнойОбработки;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(АдресРезультата) Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("ОперацияВыполнена", Истина);
		
		ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор атрибутов наложенного платежа для регистрации.
// Результат повторяет структуру реквизитов регистра ДанныеНаложенныхПлатежейСервисДоставки.
// Экспортным метод сделан для типизации в других модулях.
// Возвращаемое значение:
//	Структура:
//	*ДатаРегистрацииПлатежа - Дата
//	*ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки
//	*Отправитель - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки
//	*Перевозчик - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки
//	*СуммаПлатежа - Число
//	*ИдентификаторДокумента - УникальныйИдентификатор - идентификатор заказа на доставку
Функция НовыйДанныеНаложенногоПлатежа() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ДатаРегистрацииПлатежа", Дата(1,1,1));
	Результат.Вставить("ДокументОснование", Неопределено);
	Результат.Вставить("Отправитель", Неопределено);
	Результат.Вставить("Перевозчик", Неопределено);
	Результат.Вставить("СуммаПлатежа", 0);
	Результат.Вставить("ИдентификаторДокумента", Неопределено);
	Возврат Результат;
КонецФункции

#КонецОбласти

Функция ЗначениеИзСтрокиJSON(Значение, ЕстьОшибка=Ложь, ТекстОшибки="") Экспорт
	
	// Проверка типа JSON
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Значение;
	КонецЕсли;
	ПервыйСимвол = Лев(Значение, 1);
	Если ПервыйСимвол <> "[" И ПервыйСимвол <> "{" Тогда
		Возврат Значение;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	Попытка
		ЧтениеJSON.УстановитьСтроку(Значение);
		Результат = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	Исключение
		ЕстьОшибка = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Преобразование данных.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПреобразованиеТиповЗначений(Свойство, Значение, ДополнительныеПараметрыФункцииПреобразования, Отказ) Экспорт
	
	Если ТипЗнч(Значение) = Тип("УникальныйИдентификатор") Тогда
		Возврат Строка(Значение);
	ИначеЕсли ТипЗнч(Значение) = Тип("ХранилищеЗначения") Тогда
		
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON, Значение, НазначениеТипаXML.Явное);
		
		Возврат ЗаписьJSON.Закрыть();
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Неопределено") Тогда
		Возврат "";
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьПодключениеИнтернетПоддержки(ЕстьПодключениеКСервису = Неопределено) Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		ЕстьПодключениеКСервису = Истина;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		ПараметрыАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если ТипЗнч(ПараметрыАутентификации) = Тип("Структура") Тогда
			ЕстьПодключениеКСервису = Истина;
		Иначе
			ЕстьПодключениеКСервису = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьБлокОшибок(Результат, ОперацияВыполнена) Экспорт
	
	Если Результат.Свойство("Ошибки") Тогда
		Если ТипЗнч(Результат.Ошибки) = Тип("Массив") Тогда
			Для Каждого ТекущаяОшибка Из Результат.Ошибки Цикл
				ОбщегоНазначения.СообщитьПользователю(ТекущаяОшибка);
			КонецЦикла;
		КонецЕсли;
		ОперацияВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыВалюты() Экспорт

	ПараметрыВалюты = Новый Структура;
	
	ПараметрыВалюты.Вставить("Код", НСтр("ru = '643'"));
	ПараметрыВалюты.Вставить("Наименование", НСтр("ru = 'RUB'"));
	ПараметрыВалюты.Вставить("Ссылка");
	
	СервисДоставкиПереопределяемый.ЗаполнитьПараметрыВалюты(ПараметрыВалюты);

	Возврат ПараметрыВалюты;
	
КонецФункции

// Новый структура взаиморасчетов по документу.
// 
// Возвращаемое значение:
//  Структура - Новый структура взаиморасчетов по документу:
// * СуммаДокумента - Число - 
// * СуммаОплат - Число - 
// * ДоступноВедениеВзаиморасчетов - Булево - 
Функция НовыйСтруктураВзаиморасчетовПоДокументу() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СуммаДокумента", 0);
	Результат.Вставить("СуммаОплат", 0);
	Результат.Вставить("ДоступноВедениеВзаиморасчетов", Ложь);

	Возврат Результат;
	
КонецФункции
// См. НастройкиБЭДСобытия.ПриФормированииТаблицыЗависимостейКонстант
Процедура ПриФормированииТаблицыЗависимостейКонстант(ТаблицаЗависимостей) Экспорт
	
	// Отключаем использование сервиса доставки в случае отключения обмена с 1С:Бизнес-сеть
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьОбменБизнесСеть.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСервис1СДоставка.Имя, Ложь);
		
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьОбменБизнесСеть.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСервис1СКурьер.Имя, Ложь);
		
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьОбменБизнесСеть.Имя, Ложь,
		Метаданные.Константы.ИспользоватьСервис1СКурьерика.Имя, Ложь);
		
	НастройкиБЭД.ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаЗависимостей,
		Метаданные.Константы.ИспользоватьСервис1СКурьер.Имя, Ложь,
		Метаданные.Константы.ИспользоватьНаложенныеПлатежиСервисДоставки.Имя, Ложь);
		
КонецПроцедуры

Функция ПараметрыЗаказаНаДоставкуПоДокументуОснованию(ТипГрузоперевозки, Основание = Неопределено) Экспорт
	
	Основания = Новый СписокЗначений();
	
	Если Основание <> Неопределено Тогда
		Основания.Добавить(Основание);
	КонецЕсли;
	
	Возврат ПараметрыЗаказаНаДоставку(ТипГрузоперевозки, Основания);
	
КонецФункции

Функция ПараметрыЗаказаНаДоставку(ТипГрузоперевозки, Основания = Неопределено) Экспорт
	
	ПараметрыЗаказа = НовыйПараметрыЗаказаНаДоставку();
	ПараметрыЗаказа.ТипГрузоперевозки = ТипГрузоперевозки;
	
	Если ЗначениеЗаполнено(Основания) Тогда
		ПараметрыЗаказа.ДокументОснование = Основания[0].Значение;
		ПараметрыЗаказа.ДокументыОснования = Основания;
		СервисДоставкиПереопределяемый.ЗаполнитьПараметрыЗаказаНаДоставку(ПараметрыЗаказа);
	КонецЕсли;
	
	ДобавитьПараметрыПоУмолчанию(ПараметрыЗаказа);
	
	Если ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьерика() Тогда
		
		Если ЗначениеЗаполнено(Основания)
			И Основания.Количество() > 1 Тогда
			ИмяФормы = "ФормаГрупповогоСозданияЗаказовНаДоставку";
		Иначе
			ИмяФормы = "КарточкаЗаказаКурьерика";
		КонецЕсли;
		
	Иначе
		ИмяФормы = "КарточкаЗаказа";
	КонецЕсли;
	
	// Для поддержки шаблонов создания заказов, если они используются в прикладном решении
	Если ЗначениеЗаполнено(Основания) Тогда
		ПроверитьНаличиеШаблонаДоставкиПоОснованию(ИмяФормы, ПараметрыЗаказа);
	КонецЕсли;
	ПараметрыЗаказа.Вставить("ИмяФормы", ИмяФормы);
	
	ПараметрыЗаказа.Вставить("ТоварныйСостав", ОбщегоНазначения.ТаблицаЗначенийВМассив(ПараметрыЗаказа.Товары));
	ПараметрыЗаказа.Удалить("Товары");
	ПараметрыЗаказа.Удалить("Услуги");
	ПараметрыЗаказа.Удалить("ДополнительныеУслуги");
		
	Возврат ПараметрыЗаказа;
	
КонецФункции

Функция ОрганизацияПоУмолчанию(ТипГрузоперевозки) Экспорт
	
	ОрганизацияБизнесСетиСсылка = ПараметрыПоУмолчанию(ТипГрузоперевозки, "ОрганизацияБизнесСети").ОрганизацияБизнесСети;
		
	Если Не ЗначениеЗаполнено(ОрганизацияБизнесСетиСсылка) 
		ИЛИ Не СервисДоставкиСлужебный.ОрганизацияПодключена(ОрганизацияБизнесСетиСсылка) Тогда
		
		ОрганизацияБизнесСетиСсылка = Неопределено;
		ДанныеОрганизаций = БизнесСеть.ПодключенныеОрганизации();
		
		Если ДанныеОрганизаций.Количество() Тогда
			
			Если ДанныеОрганизаций.Количество() = 1 Тогда
				ОрганизацияБизнесСетиСсылка = ДанныеОрганизаций[0].Организация;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОрганизацияБизнесСетиСсылка;
	
КонецФункции

Функция УчастникГрузоперевозки(ИНН, КПП) Экспорт
	Возврат УчастникГрузоперевозкиПоИННиКПП(ИНН, КПП);
КонецФункции

Функция КонтактноеЛицоУчастникаГрузоперевозкиПоИдентификатору(ИдентификаторКонтактногоЛица) Экспорт
		
	Возврат КонтактноеЛицоПоGUID(ИдентификаторКонтактногоЛица);
	
КонецФункции

#Область ДляВызоваИзЭлектронногоВзаимодействия

// См. ЭлектронноеВзаимодействие.ПриПолученииСпискаШаблонов.
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхПоНаложеннымПлатежамСервисДоставки.Имя);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииПсевдонимовОбработчиков.
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхПоНаложеннымПлатежамСервисДоставки.ИмяМетода);
	
КонецПроцедуры

// См. ЭлектронноеВзаимодействие.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	НоваяСтрока = Настройки.Добавить();
	НоваяСтрока.РегламентноеЗадание = Метаданные.РегламентныеЗадания["ЗагрузкаДанныхПоНаложеннымПлатежамСервисДоставки"];
	НоваяСтрока.ФункциональнаяОпция = Метаданные.ФункциональныеОпции["ИспользоватьНаложенныеПлатежиСервисДоставки"];
	НоваяСтрока.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Словарь

Функция ИдентификаторСостоянияЧерновик() Экспорт
	
	Возврат 0;
	
КонецФункции

Функция ФильтрПоМультизаказамВсеЗаказы() Экспорт
	
	Возврат "allOrders";
	
КонецФункции

Функция ФильтрПоМультизаказамОдиночныеИМультизаказы() Экспорт
	
	Возврат "singleOrdersAndMultiOrders";
	
КонецФункции

Функция ФильтрПоМультизаказамОдиночныеЗаказы() Экспорт
	
	Возврат "singleOrders";
	
КонецФункции

Функция СортировкаЗаказовНаОтправкуПоУмолчанию() Экспорт
	
	Возврат "ДатаОтгрузки ВОЗР";
	
КонецФункции

Функция ПредставлениеЗаказаНаДоставку(Параметры, ПолноеНаименование = Ложь) Экспорт
	
	Возврат СервисДоставкиКлиентСервер.ПредставлениеЗаказаНаДоставку(Параметры, ПолноеНаименование);
	
КонецФункции

#КонецОбласти

// Получение идентификатора пользователя портала 1С.
//
// Возвращаемое значение:
//  Строка - идентификатор пользователя на портале 1С.
//
Функция ПолучитьИдентификаторСервисаБизнесСеть()
	
	Возврат СервисДоставкиПовтИсп.ПолучитьИдентификаторПользователяНаПортале("1c-bn-access");
	
КонецФункции

// Подписка на событие "ПередЗаписью" документов-оснований заказов на доставку.
//
// Параметры:
// 	Источник - ДокументОбъект
// 	Отказ - Булево
// 	РежимЗаписи - РежимЗаписиДокумента
// 	РежимПроведения - РежимПроведенияДокумента.
//
Процедура ПередЗаписьюОснованияЗаказаСервисДоставкиПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СервисДоставкиПереопределяемый.ПередЗаписьюОснованияЗаказаНаДоставку(Источник);
	
КонецПроцедуры

// Получение состояний списка заказов на доставку на доставку по отборам.
//
// Параметры:
//  ПараметрыЗапроса - Структура - параметры для формирования запроса.
//   * ОрганизацияБизнесСетиСсылка - ОпределяемыйТип.ОрганизацияСервисДоставки - организация.
//   * ДанныеГрузоперевозки - Структура - Содержит свойства:
//    ** ТипГрузоперевозки - число - тип грузоперевозки
//    ** ИдентификаторыЗаказов - массив идентификаторов заказов, для которых нужно получить статус
//  АдресРезультата  - Строка - адрес хранилища с результатом.
//
Процедура ПолучитьСостоянияЗаказовНаДоставку(Знач ПараметрыЗапроса, Знач АдресРезультата) Экспорт
	
	Результат = Новый Структура;
	
	Отказ = Ложь;
	
	Если ПараметрыЗапроса.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		СервисДоставкиСлужебный.ПроверитьОрганизациюБизнесСети(ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка, Отказ);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура("Список", Новый Соответствие);
	
	Для Каждого ДанныеГрузоперевозки Из ПараметрыЗапроса.ДанныеГрузоперевозки Цикл
		ПараметрыЗапросаПолучениеСпискаЗаказовНаДоставкуСОтборами = НовыйПараметрыЗапросаПолучитьЗаказыНаДоставку();
		ЗаполнитьЗначенияСвойств(ПараметрыЗапросаПолучениеСпискаЗаказовНаДоставкуСОтборами, ПараметрыЗапроса);
		ЗаполнитьЗначенияСвойств(ПараметрыЗапросаПолучениеСпискаЗаказовНаДоставкуСОтборами, ДанныеГрузоперевозки);
		ЗапросСервиса = ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапросаПолучениеСпискаЗаказовНаДоставкуСОтборами);
		ЗапросСервиса.Вставить("ОрганизацияБизнесСети", ПараметрыЗапроса.ОрганизацияБизнесСетиСсылка);
		РезультатЗапроса = ВыполнитьЗапрос(ЗапросСервиса, Отказ);
		
		Если Отказ Или Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(РезультатЗапроса) = Тип("Структура") Тогда
			ОбработатьРезультатЗапросаПолучитьСостоянияЗаказовНаДоставку(РезультатЗапроса, Результат);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонструкторыДанных

Функция ЗначениеСортировкиПоИдентификатору(Идентификатор)
	
	Сортировка = Новый Соответствие();
	Сортировка.Вставить("Дата УБЫВ", "createdTimeDesc");
	Сортировка.Вставить("Дата ВОЗР", "createdTimeAsc");
	Сортировка.Вставить("ДатаОтгрузки УБЫВ", "shipmentDateDesc");
	Сортировка.Вставить("ДатаОтгрузки ВОЗР", "shipmentDateAsc");
	
	Возврат Сортировка.Получить(Идентификатор);
	
КонецФункции

Функция НовыйПараметрыОтветаПолучитьЗаказНаДоставку()
	
	Результат = НовыйПараметрыЗаказаНаДоставку();
	Результат.Вставить("ИдентификаторЗаказа", ""); //Идентификатор заказа 1С:Доставка
	Результат.Вставить("НомерЗаказаДляПечати", ""); //Идентификатор документа заказа 1С:Доставка
	Результат.Вставить("ТрекНомер", "");
	Результат.Вставить("НомерЗаказа", "");
	Результат.Вставить("ДатаЗаказа", '00010101');
	Результат.Вставить("ДатаСозданияЗаказа", '00010101');
	Результат.Вставить("ДатаОтгрузки", '00010101');
	Результат.Вставить("ДатаДоставки", '00010101');
	Результат.Вставить("ЦенаВключаетНДС", 0);
	Результат.Вставить("Оплачен", 0);
	Результат.Вставить("НаложенныйПлатежПолучен", Ложь);
	Результат.Вставить("Состояние", 0);
	Результат.Вставить("ДоступнаОтмена", Ложь);
	Результат.Вставить("ДоступноРедактированиеПослеОформления", Ложь);
	Результат.Вставить("СостояниеИдентификатор", 0);
	Результат.Вставить("Заблокирован", Ложь);
	Результат.Вставить("ДополнительнаяИнформация", "");
	Результат.Вставить("Документы", Новый Массив());
	Результат.Вставить("АвтомобильМарка", "");
	Результат.Вставить("АвтомобильНомер", "");
	Результат.Вставить("ИсполнительНаименование", "");
	Результат.Вставить("ИсполнительТелефон", "");
	Результат.Вставить("ИсполнительЮридическоеЛицоНаименование", "");
	
	Результат.Вставить("МультизаказДата", '00010101');
	Результат.Вставить("МультизаказНомер", "");
	Результат.Вставить("МультизаказИдентификатор", "");
	Результат.Вставить("МультизаказТипНаименование", "");
	Результат.Вставить("МультизаказТипИдентификатор", "");
	Результат.Вставить("МультизаказПредставление", "");
	
	// Таблица "Дополнительные данные"
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Наименование");
	Таблица.Колонки.Добавить("Значение");
	Таблица.Колонки.Добавить("ТипЗначения");
	Таблица.Колонки.Добавить("Список", СервисДоставкиСлужебный.Типы().Массив);
	
	Результат.Вставить("ДополнительныеДанныеЗаказа", Таблица);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыОтветаПолучитьМультизаказНаДоставку()
	
	Результат = НовыйПараметрыМультизаказаНаДоставку();
	
	Результат.Вставить("ИдентификаторЗаказа", ""); //Идентификатор заказа 1С:Доставка
	Результат.Вставить("НомерЗаказаДляПечати", ""); //Идентификатор документа заказа 1С:Доставка
	Результат.Вставить("ТрекНомер", "");
	Результат.Вставить("НомерЗаказа", "");
	Результат.Вставить("ДатаЗаказа", '00010101');
	Результат.Вставить("ДатаСозданияЗаказа", '00010101');
	Результат.Вставить("ЦенаВключаетНДС", 0);
	Результат.Вставить("Оплачен", 0);
	Результат.Вставить("ДоступнаОтмена", Ложь);
	Результат.Вставить("Состояние", "");
	Результат.Вставить("СостояниеИдентификатор", 0);
	Результат.Вставить("АвтомобильМарка", "");
	Результат.Вставить("АвтомобильНомер", "");
	Результат.Вставить("ИсполнительНаименование", "");
	Результат.Вставить("ИсполнительТелефон", "");
	Результат.Вставить("ИсполнительЮридическоеЛицоНаименование", "");
	Результат.Вставить("ДополнительныеДанныеЗаказа", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыТарифа()

	Параметры = Новый Структура;
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("НеГабарит", "");
	Параметры.Вставить("ФормаОплаты", Новый Массив());
	Параметры.Вставить("ТолькоВремяДоставки", Ложь);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыГрузоперевозчика()

	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Телефон", "");
	Параметры.Вставить("ИНН", "");
	Параметры.Вставить("КПП", "");
	
	Возврат Параметры;
	
КонецФункции

// Возвращаемое значение:
//	Структура:
//	*Значение - Строка
//	*Представление - Строка
Функция НовыйПараметрыТелефона()

	Параметры = Новый Структура;
	Параметры.Вставить("Представление", "");
	Параметры.Вставить("Значение", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыУслугиЗаказа()

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("Наименование", "");
	Результат.Вставить("Категория", "");
	Результат.Вставить("Обязательная", Ложь);
	Результат.Вставить("ПоказыватьИнформацию", Ложь);
	Результат.Вставить("СтавкаНДСНаименование", "");
	Результат.Вставить("СтавкаНДСИдентификатор", "");
	Результат.Вставить("СуммаНДС", 0);
	Результат.Вставить("СуммаСНДС", 0);
	Результат.Вставить("СуммаСкидки", 0);
	Результат.Вставить("СвойстваУслуги", Новый Массив());
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыГруза()

	Параметры = Новый Структура;
	Параметры.Вставить("КоличествоГрузовыхМест", 1);
	Параметры.Вставить("Вес", 0);
	Параметры.Вставить("Объем", 0);
	Параметры.Вставить("МаксимальнаяВысота", 0);
	Параметры.Вставить("МаксимальнаяДлина", 0);
	Параметры.Вставить("МаксимальнаяШирина", 0);
	Параметры.Вставить("МаксимальныйВес", 0);
	Параметры.Вставить("НегабаритныйВес", 0);
	Параметры.Вставить("НегабаритныйОбъем", 0);
	Параметры.Вставить("КоличествоНегабаритныхГрузовыхМест", 0);
	Параметры.Вставить("Содержимое", "");
	Параметры.Вставить("Стоимость", 0);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыДокументаЗаказа()

	Результат = Новый Структура;
	
	Результат.Вставить("Идентификатор", "");
	Результат.Вставить("ТипДокументаНаименование", "");
	Результат.Вставить("ТипДокументаИдентификатор", 0);
	Результат.Вставить("Состояние", "");
	Результат.Вставить("Номер", "");
	Результат.Вставить("Дата", '00010101');
	Результат.Вставить("Сумма", 0);
	Результат.Вставить("СуммаДолга", 0);
	Результат.Вставить("СуммаСкидки", 0);
	Результат.Вставить("Оплачен", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйПараметрыПунктаПриемаВыдачи()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("ТипНаименование", "");
	Параметры.Вставить("ТипИдентификатор", "");
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("ИдентификаторВСистемеГрузоперевозчика", "");
	Параметры.Вставить("НаселенныйПунктИдентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Телефон", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыПунктаВыдачиКлиента()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Телефон", "");
	Параметры.Вставить("АдресШирота", "");
	Параметры.Вставить("АдресДолгота", "");
		
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыКурьера()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
		
	Возврат Параметры;
	
КонецФункции

Функция НовыйСостояниеПодключенияОрганизации()

	СостояниеПодключения = Новый Структура;
	
	СостояниеПодключения.Вставить("ОрганизацияЗарегистрирована", Ложь);
	СостояниеПодключения.Вставить("ПунктВыдачиЗарегистрирован", "");
	СостояниеПодключения.Вставить("ЛогистЗарегистрирован", "");
	
	Возврат СостояниеПодключения;
	
КонецФункции

Функция НовыйПараметрыДоступныеПериодыОтгрузки()

	Параметры = Новый Структура;
	
	Параметры.Вставить("ДатаОтгрузки", '00010101');
	Параметры.Вставить("ВремяОтгрузкиС", '00010101');
	Параметры.Вставить("ВремяОтгрузкиПо", '00010101');
	Параметры.Вставить("ПериодОтгрузкиПредставление", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыТочкиМаршрута()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Город", "");
	Параметры.Вставить("Тип", НовыйПараметрыТипТочкиМаршрута());
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("Адрес", "");
	Параметры.Вставить("Телефон", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыТипТочкиМаршрута()

	Параметры = Новый Структура;
	
	Параметры.Вставить("Идентификатор", "");
	Параметры.Вставить("Наименование", "");
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыЭлементаГруза()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Артикул", "");
	Параметры.Вставить("ИННВладельцаГруза", "");
	Параметры.Вставить("Наименование", "");
	Параметры.Вставить("ЕдиницаИзмерения", "");
	Параметры.Вставить("Количество", 0);
	Параметры.Вставить("Цена", 0);
	Параметры.Вставить("Сумма", 0);
	Параметры.Вставить("СуммаНДС", 0);
	Параметры.Вставить("СтавкаНДС", "");
	Параметры.Вставить("СтавкаНДСПредставление", "");
	Параметры.Вставить("Вес", 0);
	Параметры.Вставить("Объем", 0);
	Параметры.Вставить("Длина", 0);
	Параметры.Вставить("Ширина", 0);
	Параметры.Вставить("Высота", 0);
	Параметры.Вставить("ТипНоменклатуры", 0);//0  товар, 1 - услуга, 2 - услуга доставки
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйПараметрыПоУмолчанию()
	
	Параметры = Новый Структура;
	Параметры.Вставить("ОрганизацияБизнесСети", Неопределено);
	Параметры.Вставить("ВесЕдиницыТовара", 0);
	Параметры.Вставить("ВысотаЕдиницыТовара", 0);
	Параметры.Вставить("ДлинаЕдиницыТовара", 0);
	Параметры.Вставить("ШиринаЕдиницыТовара", 0);
	Параметры.Вставить("ВесГрузовогоМеста", 0);
	Параметры.Вставить("ВысотаГрузовогоМеста", 0);
	Параметры.Вставить("ДлинаГрузовогоМеста", 0);
	Параметры.Вставить("ШиринаГрузовогоМеста", 0);
	Параметры.Вставить("КонтактноеЛицо", Неопределено);
	Параметры.Вставить("СпособОпределенияКонтактногоЛица", СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаНеЗадан());
	Параметры.Вставить("СпособДоставки", 0);
	Параметры.Вставить("СпособОтгрузки", 0);
	Параметры.Вставить("ВремяДоставкиОбедПо", '00010101');
	Параметры.Вставить("ВремяДоставкиОбедС", '00010101');
	Параметры.Вставить("ВремяДоставкиПо", '00010101');
	Параметры.Вставить("ВремяДоставкиС", '00010101');
	Параметры.Вставить("ВремяОтгрузкиОбедПо", '00010101');
	Параметры.Вставить("ВремяОтгрузкиОбедС", '00010101');
	Параметры.Вставить("ВремяОтгрузкиПо", '00010101');
	Параметры.Вставить("ВремяОтгрузкиС", '00010101');
	Параметры.Вставить("ЗаказчикРоль", 0);
	Параметры.Вставить("УслугиДоставки", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииДляРаботыССервисом

// Выполнение команды сервиса.
// 
// Параметры:
//  ЗапросСервиса - Структура - параметры вызова или имя команды.
//  Отказ - Булево - признак ошибки выполнения.
//  Кэш - Структура, Неопределено - Данные аутентификации
// 
// Возвращаемое значение:
//  Произвольный - возвращаемые данные сервиса.
Функция ВыполнитьЗапрос(ЗапросСервиса, Отказ, Кэш = Неопределено) Экспорт
	
	ИмяСервиса = "Доставка";
	Если Не ПустаяСтрока(ЗапросСервиса.Сервис) Тогда
		ИмяСервиса = ЗапросСервиса.Сервис;
	КонецЕсли;
	
	// Инициализация параметров соединения.
	ПараметрыСоединения = ПараметрыСоединения(ИмяСервиса);

	Если ПараметрыСоединения = Неопределено Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если Кэш = Неопределено Тогда
		
		Кэш = НовыйПараметрыКэшАутентификацииБС();
		
		Если Не ПравоРаботыССервисомДоставки(Истина) Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ЗапросСервиса.Свойство("ОрганизацияБизнесСети") 
			Или Не ЗначениеЗаполнено(ЗапросСервиса.ОрганизацияБизнесСети) Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
			
		ПараметрыОрганизацииБизнесСети = ПараметрыОрганизацииБизнесСетиДляПодключения();
		
		Если Не ЗначениеЗаполнено(ПараметрыОрганизацииБизнесСети.ИдентификаторОрганизации) Тогда
			ПараметрыОрганизацииБизнесСети.Вставить("ИдентификаторОрганизации", БизнесСеть.ИдентификаторОрганизации(ЗапросСервиса.ОрганизацияБизнесСети));
		КонецЕсли;
		
		Если ПараметрыОрганизацииБизнесСети = Неопределено Тогда
			Отказ = Истина;
			Возврат Неопределено;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЗапросСервиса, ПараметрыОрганизацииБизнесСети);
			
		Если ЗначениеЗаполнено(ЗапросСервиса.ИдентификаторОрганизации) Тогда
			Кэш.АдресПрефикс = "api/" + ПараметрыОрганизацииБизнесСети.ИдентификаторОрганизации + "/";
			ЗапросСервиса.Адрес = Кэш.АдресПрефикс + ЗапросСервиса.Адрес;
		КонецЕсли;
			
		// СтрокаАутентификации формируется заранее, поскольку может быть обращение к сервису
		СтрокаАутентификации = БизнесСеть.СтрокаАутентификацииДляВыполненияКомандыСервиса(ЗапросСервиса, ПараметрыСоединения, Отказ);
		Кэш.СтрокаАутентификации = СтрокаАутентификации;
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru='Информационная база не подключена к организация ""%1"" в сервисе 1С:Бизнес-сеть.'")
				+ Символы.ПС + НСтр("ru ='Для подключения организации запустите мастер регистрации организаций в сервисе 1С:Бизнес-сеть.'");
				
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				ЗапросСервиса.ОрганизацияБизнесСети);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
				ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисДоставки);
			Возврат Неопределено;
		КонецЕсли;
	
	Иначе
		
		ЗапросСервиса.Адрес = Кэш.АдресПрефикс + ЗапросСервиса.Адрес;
		СтрокаАутентификации = Кэш.СтрокаАутентификации;
		
	КонецЕсли;
	
	СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыСоединения.Сервер);
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения.
	Попытка
		Соединение = Новый HTTPСоединение(СтруктураURL.Хост, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстСообщения = НСтр("ru='Отсутствует соединение с сервисом 1С:Доставка'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), 
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисДоставки);
		Возврат Неопределено;
	КонецПопытки;

	// Установка параметров запроса.
	Запрос = Новый HTTPЗапрос(ЗапросСервиса.Адрес);
	
	Если ЗначениеЗаполнено(СтрокаАутентификации) Тогда
		Запрос.Заголовки.Вставить("Authorization", СокрЛП(СтрЗаменить(СтрокаАутентификации,"Bearer ", "")));
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Установка заголовков запроса.
	Если ЗапросСервиса.Свойство("Заголовки") Тогда
		Для каждого ПараметрЗаголовка Из ЗапросСервиса.Заголовки Цикл
			Запрос.Заголовки.Вставить(ПараметрЗаголовка.Ключ, ПараметрЗаголовка.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			Запрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			Запрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Метод = "GET" Тогда
		Запрос.Заголовки.Вставить("Accept", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "POST" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PUT" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "PATCH" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
	ИначеЕсли ЗапросСервиса.Метод = "DELETE" Тогда
		Запрос.Заголовки.Вставить("Content-Type", ЗапросСервиса.Контент);
		Запрос.Заголовки.Вставить("Content-Length", СтрДлина(Запрос.ПолучитьТелоКакСтроку()));
	КонецЕсли;
	
	Попытка
		Ответ = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, Запрос);
		Данные = Ответ.ПолучитьТелоКакСтроку();
	Исключение
		Отказ = Истина;
		ТекстОшибки = НСтр("ru = 'Ошибка выполнения запроса к сервису.'");
		ПодробныйТекстОшибки = ТекстОшибки + Символы.ПС + ЗапросСервиса.Адрес + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ЗапросСервиса.Наименование,
			ПодробныйТекстОшибки, ТекстОшибки, "БизнесСеть");
		Возврат Неопределено;
	КонецПопытки;
	
	// Обработка результата запроса.
	Результат = ОбработатьОтветСервиса(Соединение, ЗапросСервиса, Ответ, Данные, Отказ);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОтветСервиса(Соединение, ЗапросСервиса, HTTPОтвет, Данные, Отказ)
	
	// Инициализация возврата ошибки.
	Результат = Неопределено;
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) = Неопределено
		И КодСостояния <> 200
		И ЗапросСервиса.РазрешенныеСостояния.Найти(КодСостояния) = Неопределено Тогда
		Если КодСостояния >= 500 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, СервисДоставкиКлиентСервер.ТекстОшибкиВнутренняяОшибкаСервиса());
		ИначеЕсли КодСостояния >= 400 Тогда
			ЗапросСервиса.Ошибки.Вставить(КодСостояния, "");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		Возврат ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросСервиса.Результат) Тогда
		Данные = ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(ЗначениеИзСтрокиJSON(Данные),
			ЗапросСервиса.Результат, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат КодСостояния;
	КонецЕсли;
	
	Если ЗапросСервиса.ОбработкаРезультата <> Неопределено Тогда
		Результат = ОбработатьОтветСервисаПродолжение(ЗапросСервиса.ОбработкаРезультата, КодСостояния, Данные, Отказ);
	Иначе
		Результат = ЗначениеИзСтрокиJSON(Данные);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОшибкуСервиса(Соединение, ЗапросСервиса, КодСостояния, Данные, Отказ)

	ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
	
	Если ТекстОшибки = Ложь Тогда
		Возврат КодСостояния;
	ИначеЕсли ПустаяСтрока(ТекстОшибки) Тогда
		ТекстОшибки = НСтр("ru = 'Сервис доставки. Ошибка'");
	КонецЕсли;
	
	Отказ = Истина;
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если Не ПустаяСтрока(ЗапросСервиса.Наименование) Тогда
		ТекстОшибки = ТекстОшибки + " (" + ЗапросСервиса.Наименование + ")";
	КонецЕсли;
	
	ОшибкаСервиса = "";
	Если ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
		
		Если ЗначениеДанных.Свойство("error") Тогда
			ЗначениеДанных = ЗначениеДанных.error;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("title") Тогда
			ОшибкаСервиса = ЗначениеДанных.title;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("requestTraceId") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС)
				+ НСтр("ru = 'Идентификатор ошибки'") + ": " + ЗначениеДанных.requestTraceId;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("detail") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС) + ЗначениеДанных.detail;
		КонецЕсли;
		Если ЗначениеДанных.Свойство("message") Тогда
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + Символы.ПС) + ЗначениеДанных.message;
		ИначеЕсли ЗначениеДанных.Свойство("error_description") Тогда
			ОшибкаСервиса = ЗначениеДанных.error_description;
		ИначеЕсли ЗначениеДанных.Свойство("ПодробныйТекстОшибки") Тогда
			ОшибкаСервиса = ЗначениеДанных.ПодробныйТекстОшибки;
		ИначеЕсли ЗначениеДанных.Свойство("validationError") И ТипЗнч(ЗначениеДанных.validationError) = Тип("Массив") Тогда
			ОшибкиВложенные = "";
			Для каждого СтрокаОшибки Из ЗначениеДанных.validationError Цикл
				ОшибкиВложенные = ОшибкиВложенные + ?(ПустаяСтрока(ОшибкиВложенные), "", Символы.ПС)
					+ " - " + СтрокаОшибки.message + " (" + СтрокаОшибки.field + ")";
			КонецЦикла;
			ОшибкаСервиса = ?(ПустаяСтрока(ОшибкаСервиса), "", ОшибкаСервиса + ":" + Символы.ПС) + ОшибкиВложенные;
		КонецЕсли;
		
	Иначе
		
		ОшибкаСервиса = ТекстОшибки;
		
	КонецЕсли;
	
	АдресСоединенияURL =  ?(Соединение.Защищенное, "https://", "http://") + Соединение.Сервер
		+ ":" + Формат(Соединение.Порт, "ЧГ=") + ?(Лев(ЗапросСервиса.Адрес, 1) = "/", "", "/") + ЗапросСервиса.Адрес;
	
	ПодробныйТекстОшибки = ТекстОшибки
		+ ?(КодСостояния > 200, Символы.ПС + НСтр("ru = 'Код состояния:'") + " " + КодСостояния, "")
		+ Символы.ПС + ЗапросСервиса.Метод + " " +АдресСоединенияURL
		+ ?(ОшибкаСервиса = "", "", Символы.ПС + ОшибкаСервиса)
		+ ?(ПустаяСтрока(ЗапросСервиса.Детализация), "", Символы.ПС 
			+ НСтр("ru = 'Детализация'") + ": " + ЗапросСервиса.Детализация);
	
	Если Не (ЗапросСервиса.Свойство("БлокироватьСообщенияОбОшибках")
		И ЗапросСервиса.БлокироватьСообщенияОбОшибках = Истина) Тогда
		
		ТекстОшибкиПользователю = "";
		Если ИзменитьТекстОшибкиПользователю(ОшибкаСервиса, ТекстОшибкиПользователю) Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибкиПользователю);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ОшибкаСервиса);
		КонецЕсли;
		
	КонецЕсли;
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Сервис доставки.'", ОбщегоНазначения.КодОсновногоЯзыка())
		+ ЗапросСервиса.Наименование, УровеньЖурналаРегистрации.Ошибка,,, ПодробныйТекстОшибки);
		
	Возврат КодСостояния;
	
КонецФункции

Функция ИзменитьТекстОшибкиПользователю(ОшибкаСервиса, ТекстОшибкиПользователю = "")
	
	Результат = Ложь;
	
	Если СтрНайти(ОшибкаСервиса, "Оплата при получении недоступна") Тогда
		ТекстОшибкиПользователю = НСтр("ru = 'Внимание! Оплата при получении недоступна. 
											|Измените способ постоплаты.'");
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьОтветСервисаПродолжение(Обработка, КодСостояния, Данные, Отказ)
	
	ЗначениеДанных = ЗначениеИзСтрокиJSON(Данные);
	
	Если ТипЗнч(Обработка) = Тип("ТаблицаЗначений") Тогда
		Если ТипЗнч(ЗначениеДанных) = Тип("Массив") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		ИначеЕсли ТипЗнч(ЗначениеДанных) = Тип("Структура") Тогда
			Результат = ПреобразоватьКоллекциюПоТаблицеЗначений(ЗначениеДанных, Обработка);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Обработка) = Тип("Строка") Тогда
		Результат = КонвертироватьЗначениеСервиса(ЗначениеДанных, Обработка, КодСостояния);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьПараметрАдресаHTML(Адрес, Имя, Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Значение = Формат(Значение, "ЧГ=");
	КонецЕсли;
	
	Адрес = Адрес + ?(СтрНайти(Адрес, "?") = 0, "?", "&") + Имя + "=" + Значение;
	
КонецПроцедуры

#Область НастройкиПодключенияКСервису

Функция ПараметрыСоединения(ИмяСервиса)
	
	Возврат СервисДоставкиПовтИсп.ПараметрыСоединения(ИмяСервиса);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеКонструкторы

// Описание запроса сервиса.
// 
// Возвращаемое значение:
//  Структура - данные для запроса.
//
Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("Сервис",       "Доставка");
	ЗапросСервиса.Вставить("Наименование", ""); // Полное наименование метода.
	ЗапросСервиса.Вставить("Адрес",        ""); // Адрес URI метода.
	ЗапросСервиса.Вставить("Метод",        ""); // Метод HTTP соединения, например POST. См. МетодыСоединения()
	ЗапросСервиса.Вставить("Права",        "");
	ЗапросСервиса.Вставить("Данные");           // Двоичные данные или строка.
	ЗапросСервиса.Вставить("РазрешенныеСостояния", Новый Массив);
	ЗапросСервиса.Вставить("Ошибки",       Новый Соответствие); // Соответствие ошибок, например: (404, "Не найдено").
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь); // Не выводить сообщения об ошибках.
	ЗапросСервиса.Вставить("ОбработкаРезультата");        // Строка, ТаблицаЗначений
	ЗапросСервиса.Вставить("Страница",       0);  // page
	ЗапросСервиса.Вставить("РазмерСтраницы", 0);  // size
	ЗапросСервиса.Вставить("ИдентификаторОрганизации", "");
	ЗапросСервиса.Вставить("ВременныйТокен", ""); // используется для выполнения запросов по токенам, не сохраненных в ИБ
	ЗапросСервиса.Вставить("Аутентификация", Ложь); // для некоторых методов, аутентификация может быть не нужна
	ЗапросСервиса.Вставить("ТипКонтента", "  application/json");
	
	ЗапросСервиса.Вставить("Таймаут",      120);  // Длительность ожидания ответа.
	ЗапросСервиса.Вставить("Результат");        // Свойство возврата результата, например "path[0].cat".
	ЗапросСервиса.Вставить("ДополнительныеПараметры");          // Дополнительные параметры.
	ЗапросСервиса.Вставить("Контент",      ""); // Описание контента (передается в заголовке).
	ЗапросСервиса.Вставить("Детализация",  ""); // Дополнительная информация для описания деталей запроса.
	ЗапросСервиса.Вставить("Заголовки",  Новый Соответствие()); // Дополнительная информация для описания деталей запроса.
	
	
	Возврат ЗапросСервиса;
	
КонецФункции

// Параметры кэша при аутентификации БС.
// 
// Возвращаемое значение:
//  Структура - Новый параметры кэш аутентификации БС:
// * АдресПрефикс - Строка - 
// * СтрокаАутентификации - Строка - 
Функция НовыйПараметрыКэшАутентификацииБС()

	Структура = Новый Структура;
	
	Структура.Вставить("АдресПрефикс", "");
	Структура.Вставить("СтрокаАутентификации", "");
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЗапросовКСервису

Функция ЗапросСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Создать, изменить заказ на доставку'");
	ЗапросСервиса.Адрес = "delivery/order";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("vnd-1cbn-idempotency-key", ПараметрыЗапроса.КлючИдемпотентности);

	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-createordr.v3+json";
		Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-result.v1+json");
		// Тело запроса
		Данные = ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса);
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-createordr.v1+json";
		Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-result.v1+json");
		// Тело запроса
		Данные = ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса);
	Иначе
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-createordr-courierica.v1+json";
		Заголовки.Вставить("Accept", "application/vnd-1cbn-result-courierica-result.v1+json");	
		Данные = ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставкуКурьерика(ПараметрыЗапроса);
	КонецЕсли;
	
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставку(ПараметрыЗапроса)

	Данные = Новый Структура;
	
	Параметры = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(ПараметрыЗапроса, Параметры);
	
	ДобавитьЗначение(Данные, "id", Параметры.ИдентификаторЗаказа, Истина);
	ДобавитьЗначение(Данные, "baseDocuments", Параметры.ДокументыОснованияИдентификаторы.ВыгрузитьЗначения(), Истина);
	ДобавитьЗначение(Данные, "transportationTypeId", Параметры.ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", Параметры.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "tariffId", Параметры.ТарифИдентификатор, Истина);
	ДобавитьЗначение(Данные, "currencyId", Параметры.ВалютаКод, Истина);
	ДобавитьЗначение(Данные, "totalSum", Параметры.СуммаДокумента, Истина);
	ДобавитьЗначение(Данные, "totalDiscountSum", Параметры.СуммаСкидки, Истина);
	ДобавитьЗначение(Данные, "requesterRoleId", Параметры.ЗаказчикРоль, Истина);
	
	ДобавитьЗначение(Данные, "shipment.tipeId", Параметры.СпособОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.pointId", Параметры.ПунктПриемаГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.date", Параметры.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.timeOptionId", Параметры.ВариантВремениОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.time.from", Параметры.ВремяОтгрузкиС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.to", Параметры.ВремяОтгрузкиПо, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakFrom", Параметры.ВремяОтгрузкиОбедС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakTo", Параметры.ВремяОтгрузкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "shipment.address.view", Параметры.ОтправительАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.address.latitude", Параметры.ОтправительАдресШирота);
	ДобавитьЗначение(Данные, "shipment.address.longitude", Параметры.ОтправительАдресДолгота);
	ДобавитьЗначение(Данные, "shipment.address.value", Новый ХранилищеЗначения(Параметры.ОтправительАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.name", Параметры.ОтправительКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.typeId", Параметры.ОтправительКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.inn", Параметры.ОтправительКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.kpp", Параметры.ОтправительКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view", Параметры.ОтправительКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоСсылка) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.id", Параметры.ОтправительКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.name", Параметры.ОтправительКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.number", Параметры.ОтправительКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.number", Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйЗначение, Новый СжатиеДанных(9)), Ложь);
	КонецЕсли;

	ДобавитьЗначение(Данные, "delivery.tipeId", Параметры.СпособДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.pointId", Параметры.ПунктВыдачиГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.date", Параметры.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.time.From", Параметры.ВремяДоставкиС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.To", Параметры.ВремяДоставкиПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakFrom", Параметры.ВремяДоставкиОбедС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakTo", Параметры.ВремяДоставкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "delivery.address.view", Параметры.ПолучательАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.address.latitude", Параметры.ПолучательАдресШирота);
	ДобавитьЗначение(Данные, "delivery.address.longitude", Параметры.ПолучательАдресДолгота);
	ДобавитьЗначение(Данные, "delivery.address.value", Новый ХранилищеЗначения(Параметры.ПолучательАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.name", Параметры.ПолучательКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.inn", Параметры.ПолучательКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.kpp", Параметры.ПолучательКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.typeId", Параметры.ПолучательКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.view", Параметры.ПолучательКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ПолучательКонтактноеЛицоСсылка) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.id", Параметры.ПолучательКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.name", Параметры.ПолучательКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.number", Параметры.ПолучательКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.number", Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйЗначение, Новый СжатиеДанных(9)), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.email", Параметры.ПолучательКонтактноеЛицоEmail, Ложь);
	
	ДобавитьЗначение(Данные, "payment.typeId", Параметры.ФормаОплаты, Истина);
	ДобавитьЗначение(Данные, "payment.payerRoleId", Параметры.ПлательщикРоль, Истина);
	
	Если Параметры.ПлательщикРоль = 3 Тогда
		ДобавитьЗначение(Данные, "payment.address.value", Новый ХранилищеЗначения(Параметры.ПлательщикАдресЗначение, Новый СжатиеДанных(9)), Истина);
		ДобавитьЗначение(Данные, "payment.address.view", Параметры.ПлательщикАдресПредставление, Истина);
		
		ДобавитьЗначение(Данные, "payment.participant.counteragent.name", Параметры.ПлательщикКонтрагентНаименование, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.typeId", Параметры.ПлательщикКонтрагентЮрФизЛицо, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.inn", Параметры.ПлательщикКонтрагентИНН, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.kpp", Параметры.ПлательщикКонтрагентКПП, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.legaladdress.view", Параметры.ПлательщикКонтрагентЮридическийАдресПредставление, Истина);
		ДобавитьЗначение(Данные, "payment.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ПлательщикКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
		Если ЗначениеЗаполнено(Параметры.ПлательщикКонтактноеЛицоСсылка) Тогда
			ДобавитьЗначение(Данные, "payment.participant.contactPerson.id", Параметры.ПлательщикКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
		КонецЕсли;
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.name", Параметры.ПлательщикКонтактноеЛицоНаименование, Истина);
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.phone.number", Параметры.ПлательщикКонтактноеЛицоТелефонПредставление, Истина);
		ДобавитьЗначение(Данные, "payment.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ПлательщикКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
		Если ЗначениеЗаполнено(Параметры.ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
			ДобавитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.number", Параметры.ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
			ДобавитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.value", Новый ХранилищеЗначения(Параметры.ПлательщикКонтактноеЛицоТелефонДополнительныйЗначение, Новый СжатиеДанных(9)), Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда
		
		ДобавитьЗначение(Данные, "paymentOnDelivery.method", Параметры.НаложенныйПлатежВидОплаты, Истина);
		ДобавитьЗначение(Данные, "paymentOnDelivery.sum", Параметры.СуммаНаложенногоПлатежа, Истина);
		
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "cargo.quantity", Параметры.ГрузКоличествоГрузовыхМест, Истина);
	ДобавитьЗначение(Данные, "cargo.weight", Параметры.ГрузВес, Истина);
	ДобавитьЗначение(Данные, "cargo.volume", Параметры.ГрузОбъем, Истина);
	ДобавитьЗначение(Данные, "cargo.maxHeight", Параметры.ГрузМаксимальнаяВысота, Истина);
	ДобавитьЗначение(Данные, "cargo.maxLength", Параметры.ГрузМаксимальнаяДлина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWidth", Параметры.ГрузМаксимальнаяШирина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWeight", Параметры.ГрузМаксимальныйВес, Истина);
	ДобавитьЗначение(Данные, "cargo.description", Параметры.ГрузСодержимое, Истина);
	ДобавитьЗначение(Данные, "cargo.value", Параметры.ГрузСтоимость, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedWeight", Параметры.ГрузНегабаритныйВес, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedVolume", Параметры.ГрузНегабаритныйОбъем, Истина);
	ДобавитьЗначение(Данные, "cargo.oversizedQuantity", Параметры.ГрузКоличествоНегабаритныхГрузовыхМест, Истина);
	
	ДобавитьЗначение(Данные, "additionalInfo", Параметры.ДополнительнаяИнформация);
	
	МассивУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	МассивПозиций = Новый Массив();
	
	Для Каждого ТекущаяПозиция Из ПараметрыЗапроса.Товары Цикл
		
		НоваяПозиция = Новый Структура();
		ДобавитьЗначение(НоваяПозиция, "title", ТекущаяПозиция.Наименование, Истина);
		ДобавитьЗначение(НоваяПозиция, "unit", ТекущаяПозиция.ЕдиницаИзмерения, Истина);
		ДобавитьЗначение(НоваяПозиция, "quantity", ТекущаяПозиция.Количество, Истина);
		ДобавитьЗначение(НоваяПозиция, "price", ТекущаяПозиция.Цена, Истина);
		ДобавитьЗначение(НоваяПозиция, "cost", ТекущаяПозиция.Сумма, Истина);
		ДобавитьЗначение(НоваяПозиция, "vatCode", ТекущаяПозиция.СтавкаНДС, Истина);
		ДобавитьЗначение(НоваяПозиция, "vat", ТекущаяПозиция.СуммаНДС, Истина);
		ДобавитьЗначение(НоваяПозиция, "weight", ТекущаяПозиция.Вес, Истина);
		ДобавитьЗначение(НоваяПозиция, "volume", ТекущаяПозиция.Объем, Истина);
		ДобавитьЗначение(НоваяПозиция, "length", ТекущаяПозиция.Длина, Истина);
		ДобавитьЗначение(НоваяПозиция, "width", ТекущаяПозиция.Ширина, Истина);
		ДобавитьЗначение(НоваяПозиция, "height", ТекущаяПозиция.Высота, Истина);
		ДобавитьЗначение(НоваяПозиция, "innCargoOwner", ТекущаяПозиция.ИННВладельцаГруза, Ложь);
		ДобавитьЗначение(НоваяПозиция, "article", ТекущаяПозиция.Артикул, Ложь);
		ДобавитьЗначение(НоваяПозиция, "itemtype", ТекущаяПозиция.ТипНоменклатуры, Истина);
		
		МассивПозиций.Добавить(НоваяПозиция);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "items", МассивПозиций);
	
	Возврат Данные;
	
КонецФункции

Функция ЗаполнитьДанныеДляСервисаСозданиеИзменениеЗаказаНаДоставкуКурьерика(ПараметрыЗапроса)
		
	Данные = Новый Структура;
	
	Параметры = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(ПараметрыЗапроса, Параметры);
	
	ДобавитьЗначение(Данные, "id", Параметры.ИдентификаторЗаказа, Истина);
	ДобавитьЗначение(Данные, "baseDocuments", Параметры.ДокументыОснованияИдентификаторы.ВыгрузитьЗначения(), Истина);
	ДобавитьЗначение(Данные, "transportationTypeId", Параметры.ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", Параметры.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "currencyId", Параметры.ВалютаКод, Истина);
	ДобавитьЗначение(Данные, "totalSum", Параметры.СуммаДокумента, Истина);

	ДобавитьЗначение(Данные, "shipment.date", Параметры.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.timeOptionId", Параметры.ВариантВремениОтгрузки, Истина);

	ДобавитьЗначение(Данные, "delivery.pickuppointId", Параметры.ПунктВыдачиКлиентаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.date", Параметры.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.time.From", Параметры.ВремяДоставкиС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.To", Параметры.ВремяДоставкиПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakFrom", Параметры.ВремяДоставкиОбедС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakTo", Параметры.ВремяДоставкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "delivery.address.view", Параметры.ПолучательАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.address.latitude", Параметры.ПолучательАдресШирота);
	ДобавитьЗначение(Данные, "delivery.address.longitude", Параметры.ПолучательАдресДолгота);
	ДобавитьЗначение(Данные, "delivery.address.value", Новый ХранилищеЗначения(Параметры.ПолучательАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.name", Параметры.ПолучательКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.inn", Параметры.ПолучательКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.kpp", Параметры.ПолучательКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.typeId", Параметры.ПолучательКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.view", Параметры.ПолучательКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ПолучательКонтактноеЛицоСсылка) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.id", Параметры.ПолучательКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.name", Параметры.ПолучательКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.number", Параметры.ПолучательКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.number", Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
		ДобавитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.value", Новый ХранилищеЗначения(Параметры.ПолучательКонтактноеЛицоТелефонДополнительныйЗначение, Новый СжатиеДанных(9)), Ложь);
	КонецЕсли;
	ДобавитьЗначение(Данные, "delivery.participant.contactPerson.email", Параметры.ПолучательКонтактноеЛицоEmail, Ложь);
	
	ДобавитьЗначение(Данные, "payment.typeId", Параметры.ФормаОплаты, Истина);
	ДобавитьЗначение(Данные, "payment.payerRoleId", 2, Истина);
	
	ДобавитьЗначение(Данные, "paymentOnDelivery.isPaid", Параметры.Оплачен, Истина);
	ДобавитьЗначение(Данные, "paymentOnDelivery.method", Параметры.НаложенныйПлатежВидОплаты, Истина);
	ДобавитьЗначение(Данные, "paymentOnDelivery.sum", Параметры.СуммаНаложенногоПлатежа, Истина);
	ДобавитьЗначение(Данные, "paymentOnDelivery.methodAdditional", Параметры.НаложенныйПлатежВидОплатыДополнительный, Истина);
	ДобавитьЗначение(Данные, "paymentOnDelivery.sumAdditional", Параметры.СуммаНаложенногоПлатежаДополнительный, Истина);
	
	ДобавитьЗначение(Данные, "additionalInfo", Параметры.ДополнительнаяИнформация);
	
	МассивПозиций = Новый Массив();
	
	Для Каждого ТекущаяПозиция Из ПараметрыЗапроса.Товары Цикл
		
		НоваяПозиция = Новый Структура();
		
		ДобавитьЗначение(НоваяПозиция, "title", ТекущаяПозиция.Наименование, Истина);
		ДобавитьЗначение(НоваяПозиция, "unit", ТекущаяПозиция.ЕдиницаИзмерения, Истина);
		ДобавитьЗначение(НоваяПозиция, "quantity", ТекущаяПозиция.Количество, Истина);
		ДобавитьЗначение(НоваяПозиция, "price", ТекущаяПозиция.Цена, Истина);
		ДобавитьЗначение(НоваяПозиция, "cost", ТекущаяПозиция.Сумма, Истина);
		ДобавитьЗначение(НоваяПозиция, "vatCode", ТекущаяПозиция.СтавкаНДС, Истина);
		ДобавитьЗначение(НоваяПозиция, "vat", ТекущаяПозиция.СуммаНДС, Истина);
		ДобавитьЗначение(НоваяПозиция, "weight", ТекущаяПозиция.Вес, Истина);
		ДобавитьЗначение(НоваяПозиция, "length", ТекущаяПозиция.Длина, Истина);
		ДобавитьЗначение(НоваяПозиция, "width", ТекущаяПозиция.Ширина, Истина);
		ДобавитьЗначение(НоваяПозиция, "height", ТекущаяПозиция.Высота, Истина);
		ДобавитьЗначение(НоваяПозиция, "innCargoOwner", ТекущаяПозиция.ИННВладельцаГруза, Ложь);
		ДобавитьЗначение(НоваяПозиция, "article", ТекущаяПозиция.Артикул, Ложь);
		ДобавитьЗначение(НоваяПозиция, "itemtype", ТекущаяПозиция.ТипНоменклатуры, Истина);
		
		МассивПозиций.Добавить(НоваяПозиция);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "items", МассивПозиций);
	
	Возврат Данные;
	
КонецФункции

Функция ЗапросСервисаСозданиеМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Создать мультизаказ на доставку'");
	ЗапросСервиса.Адрес = "delivery/multiorder";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-createmultiordr.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-result.v1+json");
	
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Тело запроса
	Данные = Новый Структура;
	
	Параметры = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(ПараметрыЗапроса, Параметры);
	
	ДобавитьЗначение(Данные, "id", Параметры.ИдентификаторЗаказа, Истина);
	ДобавитьЗначение(Данные, "transportationTypeId", Параметры.ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", Параметры.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "tariffId", Параметры.ТарифИдентификатор, Истина);
	ДобавитьЗначение(Данные, "currencyId", Параметры.ВалютаКод, Истина);
	
	ДобавитьЗначение(Данные, "shipment.tipeId", Параметры.СпособОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.pointId", Параметры.ПунктПриемаГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.date", Параметры.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.timeOptionId", Параметры.ВариантВремениОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.time.from", Параметры.ВремяОтгрузкиС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.to", Параметры.ВремяОтгрузкиПо, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakFrom", Параметры.ВремяОтгрузкиОбедС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakTo", Параметры.ВремяОтгрузкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "shipment.address.view", Параметры.ОтправительАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.address.latitude", Параметры.ОтправительАдресШирота);
	ДобавитьЗначение(Данные, "shipment.address.longitude", Параметры.ОтправительАдресДолгота);
	ДобавитьЗначение(Данные, "shipment.address.value", Новый ХранилищеЗначения(Параметры.ОтправительАдресЗначение, Новый СжатиеДанных(9)), Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.name", Параметры.ОтправительКонтрагентНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.typeId", Параметры.ОтправительКонтрагентЮрФизЛицо, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.inn", Параметры.ОтправительКонтрагентИНН, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.kpp", Параметры.ОтправительКонтрагентКПП, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view", Параметры.ОтправительКонтрагентЮридическийАдресПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтрагентЮридическийАдресЗначение, Новый СжатиеДанных(9)), Истина);
	
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоСсылка) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.id", Параметры.ОтправительКонтактноеЛицоСсылка.УникальныйИдентификатор(), Ложь);
	ИначеЕсли ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоИдентификатор) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.id", Параметры.ОтправительКонтактноеЛицоИдентификатор, Ложь);
	КонецЕсли;
	
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.name", Параметры.ОтправительКонтактноеЛицоНаименование, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.number", Параметры.ОтправительКонтактноеЛицоТелефонПредставление, Истина);
	ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонЗначение, Новый СжатиеДанных(9)), Истина);
	Если ЗначениеЗаполнено(Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление) Тогда
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.number", Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйПредставление, Ложь);
		ДобавитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.value", Новый ХранилищеЗначения(Параметры.ОтправительКонтактноеЛицоТелефонДополнительныйЗначение, Новый СжатиеДанных(9)), Ложь);
	КонецЕсли;

	ДобавитьЗначение(Данные, "additionalInfo", Параметры.ДополнительнаяИнформация);
	
	МассивУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаОформлениеЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Оформление заказа на доставку'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/orders/%1/carrier",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v2+json";
	Иначе
		ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОформлениеМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Оформление мультизаказа на доставку'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1/carrier",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаДобавлениеЗаказаНаДоставкуВМультизаказ(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Проверка заказа на доставку'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1/addOrder",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "PUT";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторЗаказа) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "orderId", ПараметрыЗапроса.ИдентификаторЗаказа);
	КонецЕсли;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение заказа на доставку.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/orders/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-ordr.v2+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОбновлениеЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Обновление данных заказа на доставку.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/orders/%1/carrier/update",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-orders-carrier-upd-result.v2+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОтменаЗаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Отмена заказа на доставку.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/orders/%1/cancel",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ОтменитьЗаказПлатно) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "isPaid", ПараметрыЗапроса.ОтменитьЗаказПлатно);
	КонецЕсли;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение мультизаказа на доставку.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-multiordr.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОбновлениеМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Обновление данных мультизаказа на доставку.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1/carrier/update",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-multiorders-carrier-upd-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОтменаМультизаказаНаДоставку(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Отмена мультизаказа на доставку.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/multiorders/%1/cancel",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-result.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ОтменитьЗаказПлатно) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "isPaid", ПараметрыЗапроса.ОтменитьЗаказПлатно);
	КонецЕсли;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаЗаказовНаДоставкуСОтборами(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка заказов на доставку'");
	ЗапросСервиса.Адрес = "delivery/orders";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-srchords.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-orders.v2+json");
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда 
		Заголовки.Вставить("Accept", "application/vnd-1cbn-courier-orders.v2+json");
	Иначе
		Заголовки.Вставить("Accept", "application/vnd-1cbn-courierica-orders.v2+json");
	КонецЕсли;
	
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Страница) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "page", ПараметрыЗапроса.Страница);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерСтраницы) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерСтраницы);
	КонецЕсли;

	Если ПараметрыЗапроса.Свойство("Сортировка") 
		И ЗначениеЗаполнено(ПараметрыЗапроса.Сортировка) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "sortBy", ЗначениеСортировкиПоИдентификатору(ПараметрыЗапроса.Сортировка));
	КонецЕсли;
	
	// Тело запроса
	Данные = Новый Структура;
		
	ДобавитьЗначение(Данные,"filterMultiOrders", ПараметрыЗапроса.ФильтрПоМультизаказам);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Роль) Тогда
		
		ДобавитьЗначение(Данные,"role", ПараметрыЗапроса.Роль);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Состояние) Тогда
		
		Состояния = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Состояние Цикл
			Состояния.Добавить(ЭлементКоллекции.Идентификатор);
		КонецЦикла;
		ДобавитьЗначение(Данные,"statuses", Состояния);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.НомерЗаказа) Тогда
		
		ДобавитьЗначение(Данные,"number", ПараметрыЗапроса.НомерЗаказа);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ДокументОснованиеИдентификатор) Тогда
		
		ДобавитьЗначение(Данные,"baseDocumentId", ПараметрыЗапроса.ДокументОснованиеИдентификатор, Истина);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыЗаказов) Тогда
		
		ДобавитьЗначение(Данные,"ordersId", ПараметрыЗапроса.ИдентификаторыЗаказов, Истина);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыЗапроса.Отправитель) Тогда
		
		Отправители = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Отправитель Цикл
			Отправитель = Новый Структура;
			Отправитель.Вставить("inn", ЭлементКоллекции.ИНН);
			Отправитель.Вставить("kpp",  ЭлементКоллекции.КПП);
			Отправитель.Вставить("type",  ЭлементКоллекции.ЮрФизЛицо);
			Отправитель.Вставить("name",  ЭлементКоллекции.Наименование);
			Отправители.Добавить(Отправитель);
		КонецЦикла;
		ДобавитьЗначение(Данные,"sender", Отправители);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Получатель) Тогда
		
		Получатели = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Получатель Цикл
			Получатель = Новый Структура;
			Получатель.Вставить("inn", ЭлементКоллекции.ИНН);
			Получатель.Вставить("kpp",  ЭлементКоллекции.КПП);
			Получатель.Вставить("type",  ЭлементКоллекции.ЮрФизЛицо);
			Получатель.Вставить("name",  ЭлементКоллекции.Наименование);
			Получатели.Добавить(Получатель);
		КонецЦикла;
		ДобавитьЗначение(Данные,"receiver", Получатели);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Откуда) Тогда
		
		АдресаОткуда = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Откуда Цикл
			АдресОткуда = Новый Структура;
			АдресОткуда.Вставить("id", ЭлементКоллекции.КодФИАС);
			АдресаОткуда.Добавить(АдресОткуда);
		КонецЦикла;
		ДобавитьЗначение(Данные,"shipmentPoint", АдресаОткуда);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Куда) Тогда
		
		АдресаКуда = Новый Массив();
		Для каждого ЭлементКоллекции Из ПараметрыЗапроса.Куда Цикл
			АдресКуда = Новый Структура;
			АдресКуда.Вставить("id", ЭлементКоллекции.КодФИАС);
			АдресаКуда.Добавить(АдресКуда);
		КонецЦикла;
		ДобавитьЗначение(Данные,"deliveryPoint", АдресаКуда);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыЗапроса.Курьер) Тогда
		ДобавитьЗначение(Данные,"courier", ПараметрыЗапроса.Курьер);
	КонецЕсли;

	ДобавитьЗначение(Данные,"pickuppointId", ПараметрыЗапроса.ПунктВыдачиКлиента);
	ДобавитьЗначение(Данные,"carrier", ПараметрыЗапроса.Грузоперевозчик);
	ДобавитьЗначение(Данные,"paymentStatus", ПараметрыЗапроса.Оплата);
	ДобавитьЗначение(Данные,"dateCreateFrom", ПараметрыЗапроса.ДатаСозданияОт);
	ДобавитьЗначение(Данные,"dateCreateTo", ПараметрыЗапроса.ДатаСозданияДо);
	ДобавитьЗначение(Данные,"dateShipmentFrom", ПараметрыЗапроса.ДатаОтгрузкиОт);
	ДобавитьЗначение(Данные,"dateShipmentTo", ПараметрыЗапроса.ДатаОтгрузкиДо);
	ДобавитьЗначение(Данные,"dateDeliveryFrom", ПараметрыЗапроса.ДатаДоставкиОт);
	ДобавитьЗначение(Данные,"dateDeliveryTo", ПараметрыЗапроса.ДатаДоставкиДо);
	
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда
		
		ДобавитьЗначение(Данные,"paymentOnDeliveryIsAvailable", ПараметрыЗапроса.НаложенныйПлатеж);
		ДобавитьЗначение(Данные,"paymentOnDeliveryIsPaid", ПараметрыЗапроса.НаложенныйПлатежПолучен);
		
	КонецЕсли;
	
	ДобавитьЗначение(Данные,"creationStatus", ПараметрыЗапроса.ОтборПоГотовностиЗаказов);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьГрафикДвиженияЗаказа(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных по заказу.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/orders/%1/tracking",
		ПараметрыЗапроса.ИдентификаторЗаказа);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-tracker.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьГрафикДвиженияЗаказаПоТрекНомеру(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных по заказу.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/orders/carrier/%1/trackNumber/%2/tracking",
		?(ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикИдентификатор),ПараметрыЗапроса.ГрузоперевозчикИдентификатор, "0"), ПараметрыЗапроса.ТрекНомер);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-tracker.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаДоступныхПечатныхФорм(ПараметрыЗапроса, Отказ = Ложь)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторыЗаказов) Тогда
		
		Если ПараметрыЗапроса.ИдентификаторыЗаказов.Количество() = 1 Тогда
			ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка доступных печатных форм.'");
			ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"delivery/orders/%1/availableForms",
				ПараметрыЗапроса.ИдентификаторыЗаказов[0]);
			ЗапросСервиса.Метод = "GET";
			ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-forms.v1+json";
			ЗапросСервиса.Аутентификация = Истина;
			ЗапросСервиса.ОбработкаРезультата = Неопределено;
		ИначеЕсли ПараметрыЗапроса.ИдентификаторыЗаказов.Количество() > 1 Тогда
			ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка доступных печатных форм для заказов на доставку.'");
			ЗапросСервиса.Адрес = "delivery/orders/availableForms";
			ЗапросСервиса.Метод = "POST";
			ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-forms-list.v1+json";
			ЗапросСервиса.Аутентификация = Истина;
			ЗапросСервиса.ОбработкаРезультата = Неопределено;
			
			Заголовки = Новый Соответствие();
			Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-forms-list.v1+json");
			ЗапросСервиса.Вставить("Заголовки", Заголовки);
			
			// Тело запроса
			Данные = Новый Структура;
			МассивИдентификаторов = Новый Массив();
			
			Для Каждого ИдентификаторЗаказа Из ПараметрыЗапроса.ИдентификаторыЗаказов Цикл
				
				МассивИдентификаторов.Добавить(ИдентификаторЗаказа);
				
			КонецЦикла;
			
			ДобавитьЗначение(Данные, "ordersIds", МассивИдентификаторов, Истина);
			
			ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
		Иначе
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеФайловПечатныхФорм(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение файлов печатных форм.'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/orders/%1/print-forms",
		ПараметрыЗапроса.ИдентификаторЗаказа);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-files.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	СтрокаПараметров = "";
	Для Каждого ТекущаяФорма Из ПараметрыЗапроса.Список Цикл
		
		СтрокаПараметров = СтрокаПараметров + ?(СтрокаПараметров = "", "", ",")
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"%1:%2",
				ТекущаяФорма.ИдентификаторПечатнойФормы,
				ТекущаяФорма.ИдентификаторДокумента);
		
	КонецЦикла;
	
	// Параметры запроса
	Если ЗначениеЗаполнено(СтрокаПараметров) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "formIds", СтрокаПараметров);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеТарифов(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка тарифов'");
	ЗапросСервиса.Адрес = "delivery/calculator";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-deliv-srchtrfs.v3+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-deliv-tariffs.v3+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Тело запроса
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "transportationTypeId", ПараметрыЗапроса.ТипГрузоперевозки, Истина);
	ДобавитьЗначение(Данные, "carrierId", ПараметрыЗапроса.ГрузоперевозчикИдентификатор, Истина);
	ДобавитьЗначение(Данные, "tariffId", ПараметрыЗапроса.ТарифИдентификатор, Истина);
	ДобавитьЗначение(Данные, "requesterRoleId", ПараметрыЗапроса.ЗаказчикРоль, Истина);
	ДобавитьЗначение(Данные, "requesterINN", ПараметрыЗапроса.ЗаказчикИНН, Истина);
	
	ДобавитьЗначение(Данные, "shipment.date", ПараметрыЗапроса.ДатаОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.timeOptionId", ПараметрыЗапроса.ВариантВремениОтгрузки, Истина);
	ДобавитьЗначение(Данные, "shipment.time.from", ПараметрыЗапроса.ВремяОтгрузкиС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.to", ПараметрыЗапроса.ВремяОтгрузкиПо, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakFrom", ПараметрыЗапроса.ВремяОтгрузкиОбедС, Истина);
	ДобавитьЗначение(Данные, "shipment.time.breakTo", ПараметрыЗапроса.ВремяОтгрузкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "shipment.terminal.id", ПараметрыЗапроса.ПунктПриемаГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.terminal.terminalID", ПараметрыЗапроса.ПунктПриемаГрузаИдентификаторВСистемеГрузоперевозчика, Истина);
	ДобавитьЗначение(Данные, "shipment.terminal.cityID", ПараметрыЗапроса.ПунктПриемаГрузаНаселенныйПунктИдентификатор, Истина);
	ДобавитьЗначение(Данные, "shipment.address.view", ПараметрыЗапроса.ОтправительАдрес, Истина);
	ДобавитьЗначение(Данные, "shipment.address.value", ПараметрыЗапроса.ОтправительАдресЗначение, Истина);
	ДобавитьЗначение(Данные, "shipment.address.latitude", ПараметрыЗапроса.ОтправительАдресШирота);
	ДобавитьЗначение(Данные, "shipment.address.longitude", ПараметрыЗапроса.ОтправительАдресДолгота);
	ДобавитьЗначение(Данные, "shipment.method", ПараметрыЗапроса.СпособОтгрузки, Истина);
	
	ДобавитьЗначение(Данные, "delivery.date", ПараметрыЗапроса.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.date", ПараметрыЗапроса.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.date", ПараметрыЗапроса.ДатаДоставки, Истина);
	ДобавитьЗначение(Данные, "delivery.time.from", ПараметрыЗапроса.ВремяДоставкиС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.to", ПараметрыЗапроса.ВремяДоставкиПо, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakFrom", ПараметрыЗапроса.ВремяДоставкиОбедС, Истина);
	ДобавитьЗначение(Данные, "delivery.time.breakTo", ПараметрыЗапроса.ВремяДоставкиОбедПо, Истина);
	ДобавитьЗначение(Данные, "delivery.terminal.id", ПараметрыЗапроса.ПунктВыдачиГрузаИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.terminal.terminalID", ПараметрыЗапроса.ПунктВыдачиГрузаИдентификаторВСистемеГрузоперевозчика, Истина);
	ДобавитьЗначение(Данные, "delivery.terminal.cityID", ПараметрыЗапроса.ПунктВыдачиГрузаНаселенныйПунктИдентификатор, Истина);
	ДобавитьЗначение(Данные, "delivery.address.view", ПараметрыЗапроса.ПолучательАдрес, Истина);
	ДобавитьЗначение(Данные, "delivery.address.value", ПараметрыЗапроса.ПолучательАдресЗначение, Истина);
	ДобавитьЗначение(Данные, "delivery.address.latitude", ПараметрыЗапроса.ПолучательАдресШирота);
	ДобавитьЗначение(Данные, "delivery.address.longitude", ПараметрыЗапроса.ПолучательАдресДолгота);
	ДобавитьЗначение(Данные, "delivery.method", ПараметрыЗапроса.СпособДоставки, Истина);
	
	ДобавитьЗначение(Данные, "payment.typeId", ПараметрыЗапроса.ФормаОплаты, Истина);
	ДобавитьЗначение(Данные, "payment.roleId", ПараметрыЗапроса.ПлательщикРоль, Истина);
	ДобавитьЗначение(Данные, "payment.address.view", ПараметрыЗапроса.ПлательщикАдрес, Истина);
	ДобавитьЗначение(Данные, "payment.address.value", ПараметрыЗапроса.ПлательщикАдресЗначение, Истина);
	ДобавитьЗначение(Данные, "payment.address.latitude", ПараметрыЗапроса.ПлательщикАдресШирота);
	ДобавитьЗначение(Данные, "payment.address.longitude", ПараметрыЗапроса.ПлательщикАдресДолгота);
	
	МассивАдресов = Новый Массив();

	Для Каждого ТекущийАдрес Из ПараметрыЗапроса.АдресаМаршрута Цикл
		НовыйАдрес = Новый Структура();
		ДобавитьЗначение(НовыйАдрес, "id", ТекущийАдрес.Идентификатор, Истина);
		ДобавитьЗначение(НовыйАдрес, "visitNumber", ТекущийАдрес.ПорядковыйНомер, Истина);
		ДобавитьЗначение(НовыйАдрес, "address.view", ТекущийАдрес.Представление, Истина);
		ДобавитьЗначение(НовыйАдрес, "address.value", ТекущийАдрес.Значение, Истина);
		ДобавитьЗначение(НовыйАдрес, "address.latitude", ТекущийАдрес.Широта, Истина);
		ДобавитьЗначение(НовыйАдрес, "address.longitude", ТекущийАдрес.Долгота, Истина);
		МассивАдресов.Добавить(НовыйАдрес);
	КонецЦикла;

	ДобавитьЗначение(Данные, "points", МассивАдресов);
	ДобавитьЗначение(Данные, "cargo.quantity", ПараметрыЗапроса.ГрузКоличествоГрузовыхМест, Истина);
	ДобавитьЗначение(Данные, "cargo.weight", ПараметрыЗапроса.ГрузОбщийВес, Истина);
	ДобавитьЗначение(Данные, "cargo.volume", ПараметрыЗапроса.ГрузОбщийОбъем, Истина);
	ДобавитьЗначение(Данные, "cargo.maxHeight", ПараметрыЗапроса.ГрузМаксимальнаяВысота, Истина);
	ДобавитьЗначение(Данные, "cargo.maxLength", ПараметрыЗапроса.ГрузМаксимальнаяДлина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWidth", ПараметрыЗапроса.ГрузМаксимальнаяШирина, Истина);
	ДобавитьЗначение(Данные, "cargo.maxWeight", ПараметрыЗапроса.ГрузМаксимальныйВес, Истина);
	ДобавитьЗначение(Данные, "cargo.description", ПараметрыЗапроса.ГрузСодержимое, Истина);
	ДобавитьЗначение(Данные, "cargo.value", ПараметрыЗапроса.ГрузСтоимость, Истина);
	
	МассивУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	МассивТоваров = Новый Массив();
	
	Для Каждого ТекущийТовар Из ПараметрыЗапроса.Товары Цикл
		
		НовыйТовар = Новый Структура();
		
		ДобавитьЗначение(НовыйТовар, "quantity", ТекущийТовар.Количество, Истина);
		ДобавитьЗначение(НовыйТовар, "weight", ТекущийТовар.Вес, Истина);
		ДобавитьЗначение(НовыйТовар, "length", ТекущийТовар.Длина, Истина);
		ДобавитьЗначение(НовыйТовар, "width", ТекущийТовар.Ширина, Истина);
		ДобавитьЗначение(НовыйТовар, "height", ТекущийТовар.Высота, Истина);
		
		МассивТоваров.Добавить(НовыйТовар);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "items", МассивТоваров, Истина);

	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаСостояний(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка состояний заказов на доставку'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/statuses";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-statuses.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаТиповГрузоперевозок(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение типов грузоперевозки'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/deliveryTypes";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-carriers.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаГрузоперевозчиков(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка грузоперевозчиков'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/carriers";
	ЗапросСервиса.Метод = "GET";
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-catalog-carriers.v1+json";
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда 
		ЗапросСервиса.Контент = "application/vnd-1cbn-courier-catalog-carriers.v1+json";
	Иначе
		ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-catalog-carriers.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикИНН) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "inn", ПараметрыЗапроса.ГрузоперевозчикИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикКПП) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "kpp", ПараметрыЗапроса.ГрузоперевозчикКПП);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеДанныхГрузоперевозчика(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных грузоперевозчика'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"deliveryCatalogs/carriers/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-carrier.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаПунктовВыдачиКлиента(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка пунктов выдачи клиента'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/pickupPoints";
	ЗапросСервиса.Метод = "GET";
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-catalog-pickuppoints.v1+json";
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда 
		ЗапросСервиса.Контент = "application/vnd-1cbn-courier-catalog-pickuppoints.v1+json";
	Иначе
		ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-catalog-pickuppoints.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ТипЗагрузки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "type", ПараметрыЗапроса.ТипЗагрузки);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьСписокКурьеров(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка курьеров'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/couriers";
	ЗапросСервиса.Метод = "GET";
	Если ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СДоставка() Тогда
		ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-catalog-couriers.v1+json";
	ИначеЕсли ПараметрыЗапроса.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда 
		ЗапросСервиса.Контент = "application/vnd-1cbn-courier-catalog-couriers.v1+json";
	Иначе
		ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-catalog-couriers.v1+json";
	КонецЕсли;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ТипЗагрузки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "type", ПараметрыЗапроса.ТипЗагрузки);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолученияСостоянияПодключенияОрганизации(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение состояния подключения организации'");
	ЗапросСервиса.Адрес = "delivery/company"; 
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-delivery-company.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаОтправкиЗапросаНаПолучениеРегистрационныхДанных(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Отправка запроса на получение регистрационных данных'");
	ЗапросСервиса.Адрес = "delivery/company"; 
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-courierica-delivery-company.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/vnd-1cbn-courierica-delivery-company.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Данные = Новый Структура;
		
	Данные.Вставить("companyIsReg", ПараметрыЗапроса.ЗарегистрироватьОрганизацию);
	Если ПараметрыЗапроса.ЗарегистрироватьОрганизацию Тогда
		
		ДанныеОрганизации = Новый Структура;
		ДанныеОрганизации.Вставить("name", ПараметрыЗапроса.НаименованиеОрганизации);
		ДанныеОрганизации.Вставить("external_license", Ложь);
		
		Данные.Вставить("company", ДанныеОрганизации);
		
	КонецЕсли;
	
	Данные.Вставить("pickuppointIsReg", ПараметрыЗапроса.ЗарегистрироватьПунктВыдачи);
	Если ПараметрыЗапроса.ЗарегистрироватьПунктВыдачи Тогда
		
		ДанныеПунктаВыдачи = Новый Структура;
		ДанныеПунктаВыдачи.Вставить("name", ПараметрыЗапроса.НаименованиеПунктаВыдачи);
		ДанныеПунктаВыдачи.Вставить("address", ПараметрыЗапроса.АдресПунктаВыдачи);
		ДанныеПунктаВыдачи.Вставить("phone", ПараметрыЗапроса.ТелефонПунктаВыдачи);
		ДанныеПунктаВыдачи.Вставить("external_id", ПараметрыЗапроса.ИдентификаторПунктаВыдачи);
		ДанныеПунктаВыдачи.Вставить("point", Новый Структура("latitude, longitude", 0, 0));
		
		Данные.Вставить("pickuppoint", ДанныеПунктаВыдачи);
		
	КонецЕсли;
	
	Данные.Вставить("logisticianIsReg", ПараметрыЗапроса.ЗарегистрироватьПользователя);
	Если ПараметрыЗапроса.ЗарегистрироватьПользователя Тогда
		
		ФамилияПользователя = "";
		ИмяПользователя = "";
		ОтчествоПользователя = "";
		
		МассивФИО = СтрРазделить(ПараметрыЗапроса.НаименованиеПользователя, " ", Ложь);
		Если МассивФИО.Количество() > 0 Тогда
			ФамилияПользователя = МассивФИО.Получить(0);
		КонецЕсли;
		Если МассивФИО.Количество() > 1 Тогда
			ИмяПользователя = МассивФИО.Получить(1);
		КонецЕсли;
		Если МассивФИО.Количество() > 2 Тогда
			ОтчествоПользователя = МассивФИО.Получить(2);
		КонецЕсли;
		
		ДанныеПользователя = Новый Структура;
		ДанныеПользователя.Вставить("name", ИмяПользователя);
		ДанныеПользователя.Вставить("middle_name", ОтчествоПользователя);
		ДанныеПользователя.Вставить("last_name", ФамилияПользователя);
		ДанныеПользователя.Вставить("phone", ПараметрыЗапроса.НомерТелефонаПользователя);
		ДанныеПользователя.Вставить("email", ПараметрыЗапроса.АдресЭлектроннойПочтыПользователя);
		
		ДанныеЛогиста = Новый Структура("user", ДанныеПользователя);
		
		Данные.Вставить("user", ДанныеЛогиста);
		
	КонецЕсли;
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучениеУслугиДляТипаГрузоперевозки(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка услуг'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/services";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-services.v2+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Если ПараметрыЗапроса.Свойство("ТипГрузоперевозки") И ЗначениеЗаполнено(ПараметрыЗапроса.ТипГрузоперевозки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "transportationType", ПараметрыЗапроса.ТипГрузоперевозки);
	Иначе
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "transportationType", "1");
	КонецЕсли;

	Если ПараметрыЗапроса.Свойство("УслугиДляМультизаказов")
			И ПараметрыЗапроса.УслугиДляМультизаказов Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "isMultiorder", true);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеДанныхУслуги(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных услуги грузоперевозки по идентификатору'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"deliveryCatalogs/services/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-service.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеСпискаДоступныхТерминалов(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка доступных терминалов.'");
	ЗапросСервиса.Адрес = "deliveryCatalogs/pointsByAdrress";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-points.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept", "application/vnd-1cbn-delivcat-points.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	// Тело запроса
	Данные = Новый Структура;
	
	ДобавитьЗначение(Данные, "allTerminals", ПараметрыЗапроса.ВсеТерминалы, Истина);
		
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Адрес) Тогда
		
		ДобавитьЗначение(Данные, "address.view", ПараметрыЗапроса.Адрес, Истина);
		ДобавитьЗначение(Данные, "address.value", ПараметрыЗапроса.АдресЗначение, Истина);
		
	ИначеЕсли Не ПараметрыЗапроса.ВсеТерминалы Тогда
		
		ТекстСообщения = НСтр("ru='Не заполнен адрес.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Отказ = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ГрузоперевозчикИдентификатор) Тогда
		ДобавитьЗначение(Данные, "carrierId", ПараметрыЗапроса.ГрузоперевозчикИдентификатор, Истина);
	Иначе
		ТекстСообщения = НСтр("ru='Не заполнен код грузоперевозчика.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Направление) Тогда
		ДобавитьЗначение(Данные, "typeOperation", ПараметрыЗапроса.Направление, Истина);
	Иначе
		ТекстСообщения = НСтр("ru='Не заполнен код операции.'");
		Отказ = Истина;
	КонецЕсли;
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеДанныхТерминала(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных пункта приема-выдачи груза'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"deliveryCatalogs/points/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-point.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучениеНастроекАвторизации(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение настроек авторизации'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"services/%1/auth",
		ПараметрыЗапроса.ИдентификаторСервиса);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-services-auth-info.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-services-auth-info.v1+json");
	
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаЗаписьНастроекАвторизации(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Запись настроек авторизации'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"services/%1/auth",
		ПараметрыЗапроса.ИдентификаторСервиса);
	ЗапросСервиса.Метод = "PUT";
	
	// Тело запроса
	Данные = Новый Структура();
	ДобавитьЗначение(Данные, "scope", ПараметрыЗапроса.ПравоДоступа, Истина);
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Логин) Тогда
		Контент = "application/vnd-1cbn-services-auth-basic.v1+json";
		ДобавитьЗначение(Данные, "login", ПараметрыЗапроса.Логин, Истина);
		ДобавитьЗначение(Данные, "password", ПараметрыЗапроса.Пароль, Истина);
	ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.Токен) Тогда
		Контент = "application/vnd-1cbn-services-auth-token.v1+json";
		ДобавитьЗначение(Данные, "token", ПараметрыЗапроса.Токен, Истина);
	Иначе
		Контент = "application/vnd-1cbn-services-auth-oauth.v1+json";
	КонецЕсли;
	
	ЗапросСервиса.Контент = Контент;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучениеДанныхПоТарифу(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение данных тарифа'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"deliveryCatalogs/tariff/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivcat-tariff.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаУстановитьТарифПоУмолчанию(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Установка тарифа по умолчанию'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"deliveryCatalogs/setDefaultTariff/%1/",
		ПараметрыЗапроса.ГрузоперевозчикИдентификатор);
	ЗапросСервиса.Метод = "PUT";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	// Параметры запроса
	Если ПараметрыЗапроса.Свойство("ТипГрузоперевозки") И ЗначениеЗаполнено(ПараметрыЗапроса.ТипГрузоперевозки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "transportationType", ПараметрыЗапроса.ТипГрузоперевозки);
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ТарифИдентификатор) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "tariff", ПараметрыЗапроса.ТарифИдентификатор);
	КонецЕсли;
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаСохранитьПараметрыТарифа(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Сохранение параметров тарифа'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"deliveryCatalogs/tariff/%1",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "PATCH";
	
	Контент = "application/vnd-1cbn-delivcat-tariff_settings.v1+json";
	
	ЗапросСервиса.Контент = Контент;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	// Тело запроса
	Данные = Новый Структура();
	ДобавитьЗначение(Данные, "payment.typeId", ПараметрыЗапроса.ФормаОплаты, Истина);
	
	МассивУслуг = Новый Массив();
	
	Для Каждого ТекущаяУслуга Из ПараметрыЗапроса.Услуги Цикл
		
		НоваяУслуга = Новый Структура();
		НоваяУслуга.Вставить("id", ТекущаяУслуга.Идентификатор);
		
		МассивСвойств = Новый Массив();
		Для Каждого ТекущееСвойство Из ТекущаяУслуга.Свойства Цикл
			НовоеСвойство = Новый Структура();
			ДобавитьЗначение(НовоеСвойство, "id", ТекущееСвойство.Идентификатор, Истина);
			ДобавитьЗначение(НовоеСвойство, "value", ТекущееСвойство.Значение, Истина);
			МассивСвойств.Добавить(НовоеСвойство);
		КонецЦикла;
		
		НоваяУслуга.Вставить("properties", МассивСвойств);
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "services", МассивУслуг, Истина);
	
	МассивТерминалов = Новый Массив();
	
	Для Каждого ТекущийТерминал Из ПараметрыЗапроса.Терминалы Цикл
		
		НоваяСтрока = Новый Структура();
		ДобавитьЗначение(НоваяСтрока, "id", ТекущийТерминал.Идентификатор);
		ДобавитьЗначение(НоваяСтрока, "typeOperation", ТекущийТерминал.Направление, Истина);
		ДобавитьЗначение(НоваяСтрока, "address.view", ТекущийТерминал.АдресПредставление, Истина);
		ДобавитьЗначение(НоваяСтрока, "address.value", Новый ХранилищеЗначения(ТекущийТерминал.АдресЗначение, Новый СжатиеДанных(9)), Истина);
		
		МассивТерминалов.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	ДобавитьЗначение(Данные, "points", МассивТерминалов, Истина);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;

КонецФункции

Функция ЗапросСервисаПолучитьДоступныеДляИзмененияРеквизиты(ПараметрыЗапроса, Отказ = Неопределено)

	КлючКонтента = "application/vnd-1cbn-delivery-order-editable-attributes.v1+json";
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка реквизитов доступных для редактирования'");
	ЗапросСервиса.Адрес = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"delivery/orders/%1/editableAttributes",
		ПараметрыЗапроса.Идентификатор);
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = КлючКонтента;
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолученияСпискаНаложенныхПлатежей(ПараметрыЗапроса, Отказ = Неопределено)

	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получить список наложенных платежей'");
	ЗапросСервиса.Адрес = "delivery/paymentsondelivery";
	ЗапросСервиса.Метод = "GET";
	ЗапросСервиса.Контент = "application/vnd-1cbn-delivery-payment-list.v1+json";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	// Параметры запроса
	Если ЗначениеЗаполнено(ПараметрыЗапроса.РазмерВыборки) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "size", ПараметрыЗапроса.РазмерВыборки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ДатаВыборкиС) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "date", ДатаВСтрокуISO(ПараметрыЗапроса.ДатаВыборкиС));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.Идентификатор) Тогда
		ДобавитьПараметрАдресаHTML(ЗапросСервиса.Адрес, "id", ПараметрыЗапроса.Идентификатор);
	КонецЕсли;
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьСостояниеОпцииКурьерика(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получить состояние опции Курьерика'");
	ЗапросСервиса.Адрес = "delivery/optionscheck";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;

	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-courierica-optionscheck.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Данные = Новый Структура;
	Данные.Вставить("UserUeid", ПараметрыЗапроса.ДанныеИдентификатора.Получить("uin"));
	Данные.Вставить("login", ПараметрыЗапроса.ДанныеИдентификатора.Получить("login"));
	Данные.Вставить("subscriberUeid", ПараметрыЗапроса.ДанныеИдентификатора.Получить("subscriberUeid"));
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(Данные);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьЖурналЗаказовНаДоставкуИзСервиса(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Обновление журнала заказов на доставку.'");
	ЗапросСервиса.Адрес = "delivery/orderList";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("page", ПараметрыЗапроса.Страница);
	ТелоЗапроса.Вставить("docIds", ПараметрыЗапроса.МассивНомеров);
	ТелоЗапроса.Вставить("dateStart", ПараметрыЗапроса.ДатаСозданияОт);
	ТелоЗапроса.Вставить("dateEnd", ПараметрыЗапроса.ДатаСозданияДо);
	ТелоЗапроса.Вставить("states", ПараметрыЗапроса.СписокСтатусов);
	ТелоЗапроса.Вставить("orderBy", ПараметрыЗапроса.Сортировка);
	
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(ТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-orderlist.v3+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьСписокСостоянийЗаказовИзСервиса(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение списка состояний заказов на доставку.'");
	ЗапросСервиса.Адрес = "delivery/orderStates";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-orderstates.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросСервисаПолучитьПечатнуюФормуИзСервиса(ПараметрыЗапроса, Отказ = Неопределено)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	
	ЗапросСервиса.Наименование = НСтр("ru = 'Получение печатной формы заказа на доставку.'");
	ЗапросСервиса.Адрес = "delivery/orderPrintforms";
	ЗапросСервиса.Метод = "POST";
	ЗапросСервиса.Аутентификация = Истина;
	ЗапросСервиса.ОбработкаРезультата = Неопределено;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("docUID", ПараметрыЗапроса.ИдентификаторДокумента);
	ТелоЗапроса.Вставить("mode", ПараметрыЗапроса.ИдентификаторПечатнойФормы);
	ЗапросСервиса.Данные = ЗначениеВСтрокуJSON(ТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Accept", "application/vnd-1cbn-delivery-orderprintforms.v1+json");
	ЗапросСервиса.Вставить("Заголовки", Заголовки);
	
	Возврат ЗапросСервиса;
	
КонецФункции

#КонецОбласти

#Область ОбработкаРезультатовЗапросовКСервису

Процедура ОбработатьРезультатЗапросаСоздатьИзменитьЗаказНаДоставку(СтруктураОтвета, Результат,
	ГрупповаяОбработка = Ложь)
	
	МассивРезультатов = Новый Массив;
	
	Если ТипЗнч(СтруктураОтвета) = Тип("Массив") Тогда
		МассивОтветовКоллекция = СтруктураОтвета;
	Иначе
		МассивОтветовКоллекция = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураОтвета);
	КонецЕсли;
	
	Для Каждого Ответ Из МассивОтветовКоллекция Цикл
		
		РезультатЗапроса = Новый Структура;
		
		// Заполним ошибки
		ОбработатьБлокОшибокРезультатаЗапроса(Ответ, РезультатЗапроса);
		
		Если РезультатЗапроса.Свойство("Ошибки") И РезультатЗапроса.Ошибки.Количество() > 0 Тогда
			МассивРезультатов.Добавить(РезультатЗапроса);
			Продолжить;
		КонецЕсли;
		
		// Заполним данные
		РезультатЗапроса.Вставить("Идентификатор", ПолучитьЗначение(Ответ, "id"));
		РезультатЗапроса.Вставить("Состояние", ПолучитьЗначение(Ответ, "status.name"));
		РезультатЗапроса.Вставить("НомерЗаказа", ПолучитьЗначение(Ответ, "number"));
		РезультатЗапроса.Вставить("ДатаЗаказа", ПолучитьЗначение(Ответ, "date", "Дата"));
		Если ГрупповаяОбработка Тогда
			МассивРезультатов.Добавить(РезультатЗапроса);
			Продолжить;
		КонецЕсли;
		РезультатЗапроса.Вставить("ДокументыОснования", ПолучитьДокументыОснованияПоИдентификаторам(
			ПолучитьЗначение(Ответ, "documents")));
		РезультатЗапроса.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(Ответ, "barcode"));
		РезультатЗапроса.Вставить("ТрекНомер", ПолучитьЗначение(Ответ, "trackNumber"));
		РезультатЗапроса.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Ответ, "createDate"));
		РезультатЗапроса.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Ответ, "status.id"));
		РезультатЗапроса.Вставить("Статус", ПолучитьЗначение(Ответ, "status.name")); // Устарело
		РезультатЗапроса.Вставить("СтатусИдентификатор", ПолучитьЗначение(Ответ, "status.id")); // Устарело
		РезультатЗапроса.Вставить("ЧастичныйОтказИзменений", ПолучитьЗначение(Ответ, "descriptionOfCanceled"));
		
		МассивРезультатов.Добавить(РезультатЗапроса);
		
	КонецЦикла;
	
	Если МассивРезультатов.Количество() = 1 Тогда
		Результат = МассивРезультатов[0];
	Иначе
		Результат = МассивРезультатов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаСоздатьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));
	Результат.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(СтруктураОтвета, "barcode"));
	Результат.Вставить("НомерЗаказа", ПолучитьЗначение(СтруктураОтвета, "number"));
	Результат.Вставить("ДатаЗаказа", ПолучитьЗначение(СтруктураОтвета, "date", "Дата"));
	Результат.Вставить("ТрекНомер", ПолучитьЗначение(СтруктураОтвета, "trackNumber"));
	Результат.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(СтруктураОтвета, "createDate"));
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОформитьЗаказНаДоставку(СтруктураОтвета, Результат, ГрупповаяОбработка = Ложь)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Если ГрупповаяОбработка Тогда
		Возврат;
	КонецЕсли;
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));
	Результат.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(СтруктураОтвета, "barcode"));
	Результат.Вставить("НомерЗаказа", ПолучитьЗначение(СтруктураОтвета, "number"));
	Результат.Вставить("ДатаЗаказа", ПолучитьЗначение(СтруктураОтвета, "date", "Дата"));
	Результат.Вставить("ТрекНомер", ПолучитьЗначение(СтруктураОтвета, "trackNumber"));
	Результат.Вставить("ДоступнаОтмена", ПолучитьЗначение(СтруктураОтвета, "availableCancel"));
	Результат.Вставить("ДоступноРедактированиеПослеОформления", ПолучитьЗначение(СтруктураОтвета, "availableEdit"));
	Результат.Вставить("ОжидатьРасчета", ПолучитьЗначение(СтруктураОтвета, "waitCalculation"));
	Результат.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(СтруктураОтвета, "createDate"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОформитьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));
	Результат.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(СтруктураОтвета, "barcode"));
	Результат.Вставить("НомерЗаказа", ПолучитьЗначение(СтруктураОтвета, "number"));
	Результат.Вставить("ДатаЗаказа", ПолучитьЗначение(СтруктураОтвета, "date", "Дата"));
	Результат.Вставить("ТрекНомер", ПолучитьЗначение(СтруктураОтвета, "trackNumber"));
	Результат.Вставить("ДоступнаОтмена", ПолучитьЗначение(СтруктураОтвета, "availableCancel"));
	Результат.Вставить("ОжидатьРасчета", ПолучитьЗначение(СтруктураОтвета, "waitCalculation"));
	Результат.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(СтруктураОтвета, "createDate"));
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОтменитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Результат.Вставить("ДокументОтменен", ПолучитьЗначение(СтруктураОтвета, "result.IsCancel"));
	Результат.Вставить("ДоступнаОтмена", ПолучитьЗначение(СтруктураОтвета, "result.availableCancel"));
	Результат.Вставить(
		"ДоступноРедактированиеПослеОформления", 
		ПолучитьЗначение(СтруктураОтвета, "result.availableEdit"));
	Результат.Вставить("ДоступнаПлатнаяОтмена", ПолучитьЗначение(СтруктураОтвета, "result.availablePaidCancel"));
	Результат.Вставить("СуммаПлатнойОтмены", ПолучитьЗначение(СтруктураОтвета, "result.PaidCancel"));
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Параметры = НовыйПараметрыОтветаПолучитьЗаказНаДоставку();
	
	ПараметрыЗаказа = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыЗаказа);
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыЗаказа.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(Данные, "id"));
	ПараметрыЗаказа.Вставить("ДокументыОснования", ПолучитьДокументыОснованияПоИдентификаторам(ПолучитьЗначение(Данные,
		"baseDocuments")));
	ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(Данные, "trackNumber"));
	ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(Данные, "barcode"));
	ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(Данные, "number"));
	ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(Данные, "date","Дата"));
	ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Данные, "createDate", "Дата"));
	ПараметрыЗаказа.Вставить("ОбязательныеРеквизитыЗаполнены", ПолучитьЗначение(Данные, "isFilled",,Ложь));
	
	ПараметрыЗаказа.Вставить("МультизаказДата", ПолучитьЗначение(Данные, "multiOrder.date","Дата"));
	ПараметрыЗаказа.Вставить("МультизаказНомер", ПолучитьЗначение(Данные, "multiOrder.number",,""));
	ПараметрыЗаказа.Вставить("МультизаказИдентификатор", ПолучитьЗначение(Данные, "multiOrder.id",,""));
	ПараметрыЗаказа.Вставить("МультизаказТипНаименование", ПолучитьЗначение(Данные, "multiOrder.type.Name",,""));
	ПараметрыЗаказа.Вставить("МультизаказТипИдентификатор", ПолучитьЗначение(Данные, "multiOrder.type.Id",,""));
	ПараметрыЗаказа.Вставить("МультизаказПредставление", ПредставлениеМультизаказа(ПараметрыЗаказа, Истина));
	
	ПараметрыЗаказа.Вставить("СуммаДокумента", ПолучитьЗначение(Данные, "totalSum","Число",0));
	ПараметрыЗаказа.Вставить("СуммаСкидки", ПолучитьЗначение(Данные, "totalDiscountSum","Число",0));
	ПараметрыЗаказа.Вставить("ЦенаВключаетНДС", ПолучитьЗначение(Данные, "includingVAT",, Истина));
	ПараметрыЗаказа.Вставить("ЗаказчикРоль", ПолучитьЗначение(Данные, "requesterRoleId",, 3));
	Если ПараметрыЗаказа.ЗаказчикРоль = 0 Тогда
		ПараметрыЗаказа.ЗаказчикРоль = 3;
	КонецЕсли;
	
	ПараметрыВалюты = НовыйПараметрыВалюты();
	ПараметрыЗаказа.Вставить("ВалютаКод", ПараметрыВалюты.Код);
	ПараметрыЗаказа.Вставить("ВалютаНаименование", ПараметрыВалюты.Наименование);
	ПараметрыЗаказа.Вставить("ВалютаСсылка", ПараметрыВалюты.Ссылка);
	
	ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(Данные, "status.name",, НСтр("ru='Состояние неизвестно'")));
	ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Данные, "status.id",, 0));
	ПараметрыЗаказа.Вставить("Заблокирован", ПолучитьЗначение(Данные, "isLocked",, Ложь));
	ПараметрыЗаказа.Вставить("Оплачен", ПолучитьЗначение(Данные, "isPaid",, Ложь));
	ПараметрыЗаказа.Вставить("ДоступнаОтмена", ПолучитьЗначение(Данные, "availableCancel",, Ложь));
	ПараметрыЗаказа.Вставить("ДоступноРедактированиеПослеОформления", ПолучитьЗначение(Данные, "availableEdit",, Ложь));
	
	ПараметрыЗаказа.Вставить("ТипГрузоперевозки", ПолучитьЗначение(Данные, "transportationTypeId",,1));
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.ТипГрузоперевозки) Тогда
		ПараметрыЗаказа.ТипГрузоперевозки = 1;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrier.name"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrier.id"));
	ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(Данные, "tariff.name"));
	ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(Данные, "tariff.id"));
	ПараметрыЗаказа.Вставить("ТарифФормаОплаты", ПолучитьЗначение(Данные, "tariff.paymentType",, Новый Массив()));
	ПараметрыЗаказа.Вставить("ТарифТолькоВремяДоставки", ПолучитьЗначение(Данные, "tariff.availableShippingTime",,Ложь));
	
	// Отгрузка
	ПараметрыЗаказа.Вставить("СпособОтгрузки", ПолучитьЗначение(Данные, "shipment.type.id"));
	ПараметрыЗаказа.Вставить("СпособОтгрузкиНаименование", ПолучитьЗначение(Данные, "shipment.type.name"));
	
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаИдентификатор", ПолучитьЗначение(Данные, "shipment.point.id"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаИдентификаторВСистемеГрузоперевозчика", ПолучитьЗначение(Данные, "shipment.point.terminalID"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаНаселенныйПунктИдентификатор", ПолучитьЗначение(Данные, "shipment.point.cityID"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаНаименование", ПолучитьЗначение(Данные, "shipment.point.name"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаАдрес", ПолучитьЗначение(Данные, "shipment.point.address"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТелефон", ПолучитьЗначение(Данные, "shipment.point.phone"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТипНаименование", ПолучитьЗначение(Данные, "shipment.point.type.name"));
	ПараметрыЗаказа.Вставить("ПунктПриемаГрузаТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.type.id"));
	
	ПараметрыЗаказа.Вставить("ОтправительАдресПредставление", ПолучитьЗначение(Данные, "shipment.address.view"));
	ПараметрыЗаказа.Вставить("ОтправительАдресЗначение", ПолучитьЗначение(Данные, "shipment.address.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ОтправительАдресШирота", ПолучитьЗначение(Данные, "shipment.address.latitude",, 0));
	ПараметрыЗаказа.Вставить("ОтправительАдресДолгота", ПолучитьЗначение(Данные, "shipment.address.longitude",, 0));
	
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(Данные, "shipment.date","Дата"));
	ПараметрыЗаказа.Вставить("ВариантВремениОтгрузки", ПолучитьЗначение(Данные, "shipment.timeOptionId"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(Данные, "shipment.time.from", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(Данные, "shipment.time.to", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедС", ПолучитьЗначение(Данные, "shipment.time.breakFrom", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяОтгрузкиОбедПо", ПолучитьЗначение(Данные, "shipment.time.breakTo", "Дата"));
	
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "shipment.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентИНН", ПолучитьЗначение(Данные, "shipment.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентКПП", ПолучитьЗначение(Данные, "shipment.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентНаименование", ПолучитьЗначение(Данные, "shipment.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ОтправительКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view"));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыЗаказа.ОтправительКонтрагентИНН, ПараметрыЗаказа.ОтправительКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ОтправительКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыЗаказа.Вставить("ОтправительКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "shipment.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.number"));
	ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	// Доставка
	ПараметрыЗаказа.Вставить("СпособДоставки", ПолучитьЗначение(Данные, "delivery.type.id"));
	ПараметрыЗаказа.Вставить("СпособДоставкиНаименование", ПолучитьЗначение(Данные, "delivery.type.name"));
	
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаИдентификатор", ПолучитьЗначение(Данные, "delivery.point.id"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаИдентификаторВСистемеГрузоперевозчика", ПолучитьЗначение(Данные, "delivery.point.terminalID"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаНаселенныйПунктИдентификатор", ПолучитьЗначение(Данные, "delivery.point.cityID"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаНаименование", ПолучитьЗначение(Данные, "delivery.point.name"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаАдрес", ПолучитьЗначение(Данные, "delivery.point.address"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТелефон", ПолучитьЗначение(Данные, "delivery.point.phone"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТипНаименование", ПолучитьЗначение(Данные, "delivery.point.type.name"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиГрузаТипИдентификатор", ПолучитьЗначение(Данные, "delivery.point.type.id"));
	
	ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаИдентификатор", ПолучитьЗначение(Данные, "delivery.pickuppoint.id"));
	ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаНаименование", ПолучитьЗначение(Данные, "delivery.pickuppoint.name"));

	ПараметрыЗаказа.Вставить("ПолучательАдресПредставление", ПолучитьЗначение(Данные, "delivery.address.view"));
	ПараметрыЗаказа.Вставить("ПолучательАдресЗначение", ПолучитьЗначение(Данные, "delivery.address.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПолучательАдресШирота", ПолучитьЗначение(Данные, "delivery.address.latitude",, 0));
	ПараметрыЗаказа.Вставить("ПолучательАдресДолгота", ПолучитьЗначение(Данные, "delivery.address.longitude",, 0));
	
	ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(Данные, "delivery.date","Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиС", ПолучитьЗначение(Данные, "delivery.time.from", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиПо", ПолучитьЗначение(Данные, "delivery.time.to", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиОбедС", ПолучитьЗначение(Данные, "delivery.time.breakFrom", "Дата"));
	ПараметрыЗаказа.Вставить("ВремяДоставкиОбедПо", ПолучитьЗначение(Данные, "delivery.time.breakTo", "Дата"));
	
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "delivery.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентИНН", ПолучитьЗначение(Данные, "delivery.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентКПП", ПолучитьЗначение(Данные, "delivery.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентНаименование", ПолучитьЗначение(Данные, "delivery.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПолучательКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "delivery.participant.counteragent.legaladdress.view"));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыЗаказа.ПолучательКонтрагентИНН, ПараметрыЗаказа.ПолучательКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПолучательКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыЗаказа.Вставить("ПолучательКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "delivery.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.number"));
	ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "delivery.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	// Оплата
	ПараметрыЗаказа.Вставить("ФормаОплаты", ПолучитьЗначение(Данные, "payment.type.id",,1));
	ПараметрыЗаказа.Вставить("ФормаОплатыНаименование", ПолучитьЗначение(Данные, "payment.type.name",,""));
	
	ПараметрыЗаказа.Вставить("ПлательщикРоль", ПолучитьЗначение(Данные, "payment.payerRoleId",,0));
	
	ПараметрыЗаказа.Вставить("ПлательщикАдресПредставление", ПолучитьЗначение(Данные, "payment.address.view"));
	ПараметрыЗаказа.Вставить("ПлательщикАдресЗначение", ПолучитьЗначение(Данные, "payment.address.value", "ХранилищеЗначения"));

	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "payment.participant.counteragent.typeId",,1));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентИНН", ПолучитьЗначение(Данные, "payment.participant.counteragent.inn"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентКПП", ПолучитьЗначение(Данные, "payment.participant.counteragent.kpp"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентНаименование", ПолучитьЗначение(Данные, "payment.participant.counteragent.name"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.view"));
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "payment.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "payment.participant.contactPerson.name"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "payment.participant.contactPerson.email"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.number"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.number"));
	ПараметрыЗаказа.Вставить("ПлательщикКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыЗаказа.ПлательщикКонтрагентИНН, ПараметрыЗаказа.ПлательщикКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыЗаказа.Вставить("ПлательщикКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыЗаказа.Вставить("ПлательщикКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	// Груз
	ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(Данные, "cargo.weight"));
	ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(Данные, "cargo.volume"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяВысота", ПолучитьЗначение(Данные, "cargo.maxHeight"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяДлина", ПолучитьЗначение(Данные, "cargo.maxLength"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальнаяШирина", ПолучитьЗначение(Данные, "cargo.maxWidth"));
	ПараметрыЗаказа.Вставить("ГрузМаксимальныйВес", ПолучитьЗначение(Данные, "cargo.maxWeight"));
	ПараметрыЗаказа.Вставить("ГрузСодержимое", ПолучитьЗначение(Данные, "cargo.description"));
	ПараметрыЗаказа.Вставить("ГрузКоличествоГрузовыхМест", ПолучитьЗначение(Данные, "cargo.quantity"));
	ПараметрыЗаказа.Вставить("ГрузСтоимость", ПолучитьЗначение(Данные, "cargo.value"));
	ПараметрыЗаказа.Вставить("ГрузНегабаритныйВес", ПолучитьЗначение(Данные, "cargo.oversizedWeight",,0));
	ПараметрыЗаказа.Вставить("ГрузНегабаритныйОбъем", ПолучитьЗначение(Данные, "cargo.oversizedVolume",,0));
	ПараметрыЗаказа.Вставить("ГрузКоличествоНегабаритныхГрузовыхМест", ПолучитьЗначение(Данные, "cargo.oversizedQuantity"));
	
	ТарифНеГабарит = (ПараметрыЗаказа.ГрузКоличествоНегабаритныхГрузовыхМест <> 0);
	ПараметрыЗаказа.Вставить("ТарифНеГабарит", ТарифНеГабарит);
	
	// Наложенный платеж
	
	ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплатыДополнительный", ПолучитьЗначение(Данные, "paymentOnDelivery.methodAdditional",,0));
	ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежаДополнительный", ПолучитьЗначение(Данные, "paymentOnDelivery.sumAdditional",,ПараметрыЗаказа.СуммаНаложенногоПлатежаДополнительный));
	ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплаты", ПолучитьЗначение(Данные, "paymentOnDelivery.method",,0));
	ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежа", ПолучитьЗначение(Данные, "paymentOnDelivery.sum",,ПараметрыЗаказа.СуммаНаложенногоПлатежа));
	ПараметрыЗаказа.Вставить("НаложенныйПлатежПолучен", ПолучитьЗначение(Данные, "paymentOnDelivery.isPaid",,ПараметрыЗаказа.НаложенныйПлатежПолучен));
	
	// Услуги
	Услуги = ПолучитьЗначение(Данные, "services");
	МассивУслуг = Новый Массив;
	
	Для Каждого ТекУслуга Из Услуги Цикл
		
		НоваяУслуга = НовыйПараметрыУслугиЗаказа();
		НоваяУслуга.Идентификатор = ТекУслуга.id;
		НоваяУслуга.Наименование = ТекУслуга.name;
		НоваяУслуга.Категория = ТекУслуга.category;
		НоваяУслуга.Обязательная = ТекУслуга.required;
		НоваяУслуга.ПоказыватьИнформацию = ТекУслуга.isDescribed;
		НоваяУслуга.СтавкаНДСНаименование = ТекУслуга.vatRateName;
		НоваяУслуга.СтавкаНДСИдентификатор = ТекУслуга.vatRateId;
		НоваяУслуга.СуммаНДС = ТекУслуга.vat;
		НоваяУслуга.СуммаСНДС = ТекУслуга.sum;
		НоваяУслуга.СуммаСкидки = ТекУслуга.discountSum;
		
		Для Каждого ТекущееСвойство Из ТекУслуга.properties Цикл
			
			НовоеСвойство = НовыйПараметрыСвойстваУслуги();
			НовоеСвойство.Идентификатор = ТекущееСвойство.id;
			НовоеСвойство.Наименование = ТекущееСвойство.name;
			СтруктураТипа = ПолучитьЗначение(ТекущееСвойство, "type");
			НовоеСвойство.ТипЗначения = СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа);
			НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.unit;
			НовоеСвойство.Значение = ТекущееСвойство.value;
			
			НоваяУслуга.СвойстваУслуги.Добавить(НовоеСвойство);
			
		КонецЦикла;
		
		МассивУслуг.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	ПараметрыЗаказа.Вставить("Услуги", МассивУслуг);
	
	// Дополнительные услуги тарифа заказа.
	ДополнительныеУслуги = ПолучитьЗначение(Данные, "optionalServices");
	МассивДополнительныхУслуг = Новый Массив();
	
	Для Каждого ТекущаяДополнительнаяУслуга Из ДополнительныеУслуги Цикл
		
		НоваяДопУслуга = Новый Структура();
		
		НоваяДопУслуга.Вставить("Идентификатор", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "id"));
		НоваяДопУслуга.Вставить("Наименование", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "name"));
		НоваяДопУслуга.Вставить("Категория", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "category"));
		НоваяДопУслуга.Вставить("Обязательная", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "required"));
		НоваяДопУслуга.Вставить("ПоказыватьИнформацию", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isDescribed"));

		НоваяДопУслуга.Вставить("СвойстваУслуги", Новый Массив());
		
		СвойстваДополнительнойУслуги = НоваяДопУслуга.СвойстваУслуги;
		
		Для Каждого СвойствоДополнительнойУслуги Из ТекущаяДополнительнаяУслуга.properties Цикл
			
			НовоеСвойство = Новый Структура();
			НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(СвойствоДополнительнойУслуги, "id"));
			НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(СвойствоДополнительнойУслуги, "name"));
			СтруктураТипа = ПолучитьЗначение(СвойствоДополнительнойУслуги, "type");
			НовоеСвойство.Вставить("ТипЗначения", СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа));
			НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(СвойствоДополнительнойУслуги,"unit"));
			
			СвойстваДополнительнойУслуги.Добавить(НовоеСвойство);
			
		КонецЦикла;
		
		МассивДополнительныхУслуг.Добавить(НоваяДопУслуга);
		
	КонецЦикла;
	
	ПараметрыЗаказа.Вставить("ДополнительныеУслуги", МассивДополнительныхУслуг);
	
	// Позиционный состав заказа
	Позиции = ПолучитьЗначение(Данные, "items");
	ТаблицаТовары = Новый ТаблицаЗначений;
	
	ПолнаяСтоимость = 0;
		
	Если НЕ Позиции = Неопределено Тогда
		
		ПараметрыТаблицыПозиций = НовыйПараметрыЭлементаГруза();
		
		Для Каждого ПараметрГруза Из ПараметрыТаблицыПозиций Цикл
			ТаблицаТовары.Колонки.Добавить(ПараметрГруза.Ключ);
		КонецЦикла;
		
		СоответствиеСтавокНДС = СервисДоставкиПовтИсп.СоответствиеСтавокНДСИзСервиса();
		
		Для Каждого ТекущаяПозиция Из Позиции Цикл
			
			НоваяПозиция = ТаблицаТовары.Добавить();
			
			НоваяПозиция.Наименование           = ТекущаяПозиция.title;
			НоваяПозиция.ЕдиницаИзмерения       = ТекущаяПозиция.unit;
			НоваяПозиция.Количество             = ТекущаяПозиция.quantity;
			НоваяПозиция.Цена                   = ТекущаяПозиция.price;
			НоваяПозиция.Сумма                  = ТекущаяПозиция.cost;
			НоваяПозиция.СтавкаНДС              = ТекущаяПозиция.vatCode;
			НоваяПозиция.СтавкаНДСПредставление = СоответствиеСтавокНДС[НоваяПозиция.СтавкаНДС];
			НоваяПозиция.СуммаНДС               = ТекущаяПозиция.vat;
			НоваяПозиция.Вес                    = ТекущаяПозиция.weight;
			НоваяПозиция.Объем                  = ТекущаяПозиция.volume;
			НоваяПозиция.Длина                  = ТекущаяПозиция.length;
			НоваяПозиция.Ширина                 = ТекущаяПозиция.width;
			НоваяПозиция.Высота                 = ТекущаяПозиция.height;
			НоваяПозиция.Артикул                = ТекущаяПозиция.article;
			НоваяПозиция.ИННВладельцаГруза      = ТекущаяПозиция.innCargoOwner;
			НоваяПозиция.ТипНоменклатуры        = ТекущаяПозиция.itemtype;
			
			ПолнаяСтоимость = ПолнаяСтоимость + НоваяПозиция.Сумма;
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("Товары", ТаблицаТовары);
	
	ПараметрыЗаказа.Вставить("ПолнаяСтоимость", ПолнаяСтоимость);
	
	// Документы
	ДокументыЗаказа = ПолучитьЗначение(Данные, "documents");
	МассивДокументов = Новый Массив;
	
	Для Каждого ТекущийДокумент Из ДокументыЗаказа Цикл
		
		НовыйДокумент = НовыйПараметрыДокументаЗаказа();
		НовыйДокумент.Идентификатор = ТекущийДокумент.id;
		НовыйДокумент.ТипДокументаНаименование = ТекущийДокумент.typeName;
		НовыйДокумент.ТипДокументаИдентификатор = ТекущийДокумент.typeId;
		НовыйДокумент.Состояние = ТекущийДокумент.status;
		НовыйДокумент.Номер = ТекущийДокумент.number;
		НовыйДокумент.Дата = ТекущийДокумент.date;
		НовыйДокумент.Сумма = ТекущийДокумент.totalSum;
		НовыйДокумент.СуммаДолга = ТекущийДокумент.debtSum;
		НовыйДокумент.СуммаСкидки = ТекущийДокумент.discountSum;
		НовыйДокумент.Оплачен = ТекущийДокумент.isPaid;
		
		МассивДокументов.Добавить(НовыйДокумент);
		
	КонецЦикла;
	
	ПараметрыЗаказа.Вставить("Документы", МассивДокументов);
	
	// Дополнительные данные
	ДополнительныеДанные = ПолучитьЗначение(Данные, "additionalData");
	
	Если ДополнительныеДанные <> Неопределено Тогда
		МассивДополнительныеДанные = Новый Массив;
		
		Для Каждого ТекущиеДанные Из ДополнительныеДанные Цикл
			
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("Наименование", ТекущиеДанные.name);
			НоваяСтрока.Вставить("ТипЗначения", ТекущиеДанные.type);
			НоваяСтрока.Вставить("Значение", ТекущиеДанные.value);
			НоваяСтрока.Вставить("Список", Новый Массив());
			
			Для Каждого ТекЭлемент Из ТекущиеДанные.items Цикл
				
				НовыйЭлемент = Новый Структура();
				НовыйЭлемент.Вставить("Наименование", ТекЭлемент.name);
				НовыйЭлемент.Вставить("ТипЗначения", ТекЭлемент.type);
				НовыйЭлемент.Вставить("Значение", ТекЭлемент.value);
				
				НоваяСтрока.Список.Добавить(НовыйЭлемент);
				
			КонецЦикла;
			
			МассивДополнительныеДанные.Добавить(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;
	
	// Данные об исполнителе
	
	ПараметрыЗаказа.Вставить("Курьер", ПолучитьЗначение(Данные, "performer.name"));
	ПараметрыЗаказа.Вставить("ИсполнительНаименование", ПолучитьЗначение(Данные, "performer.name"));
	ПараметрыЗаказа.Вставить("ИсполнительЮридическоеЛицоНаименование", ПолучитьЗначение(Данные, "performer.legalName"));
	ПараметрыЗаказа.Вставить("ИсполнительТелефон", ПолучитьЗначение(Данные, "performer.phone"));
	ПараметрыЗаказа.Вставить("АвтомобильМарка", ПолучитьЗначение(Данные, "performer.carModel"));
	ПараметрыЗаказа.Вставить("АвтомобильНомер", ПолучитьЗначение(Данные, "performer.carNumber"));
	
	ПараметрыЗаказа.Вставить("ДополнительныеДанныеЗаказа", МассивДополнительныеДанные);
	
	ПараметрыЗаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(Данные, "additionalInfo"));
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, ПараметрыЗаказа);
	
	Результат.Вставить("Данные", Параметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОбновитьЗаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("ДатаОбновления", ПолучитьЗначение(СтруктураОтвета, "updateDate", "Дата"));
	Результат.Вставить("ЗаказОбновлен", ПолучитьЗначение(СтруктураОтвета, "isUpdated", , Истина));
	
	ОбработатьРезультатЗапросаПолучитьЗаказНаДоставку(СтруктураОтвета, Результат);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Параметры = НовыйПараметрыОтветаПолучитьМультизаказНаДоставку();
	
	ПараметрыМультизаказа = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыМультизаказа);
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыМультизаказа.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(Данные, "id"));
	
	ПараметрыМультизаказа.Вставить("ТрекНомер", ПолучитьЗначение(Данные, "trackNumber"));
	ПараметрыМультизаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(Данные, "barcode"));
	ПараметрыМультизаказа.Вставить("НомерЗаказа", ПолучитьЗначение(Данные, "number"));
	ПараметрыМультизаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(Данные, "date","Дата"));
	ПараметрыМультизаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Данные, "createDate", "Дата"));
	ПараметрыМультизаказа.Вставить("ДатаДоставки", ПолучитьЗначение(Данные, "finalDate","Дата"));

	ПараметрыМультизаказа.Вставить("ТипИдентификатор", ПолучитьЗначение(Данные, "typeId",, ""));
	ПараметрыМультизаказа.Вставить("ТипНаименование", ПолучитьЗначение(Данные, "typeName",, ""));
	
	ПараметрыМультизаказа.Вставить("СуммаДокумента", ПолучитьЗначение(Данные, "totalSum","Число",0));
	ПараметрыМультизаказа.Вставить("СуммаСкидки", ПолучитьЗначение(Данные, "totalDiscountSum","Число",0));
	ПараметрыМультизаказа.Вставить("ЦенаВключаетНДС", ПолучитьЗначение(Данные, "includingVAT",, Истина));
	
	ПараметрыВалюты = НовыйПараметрыВалюты();
	ПараметрыМультизаказа.Вставить("ВалютаКод", ПараметрыВалюты.Код);
	ПараметрыМультизаказа.Вставить("ВалютаНаименование", ПараметрыВалюты.Наименование);
	ПараметрыМультизаказа.Вставить("ВалютаСсылка", ПараметрыВалюты.Ссылка);
	
	ПараметрыМультизаказа.Вставить("Состояние", ПолучитьЗначение(Данные, "status.name",, НСтр("ru='Состояние неизвестно'")));
	ПараметрыМультизаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Данные, "status.id",, 0));
	ПараметрыМультизаказа.Вставить("Оплачен", ПолучитьЗначение(Данные, "isPaid",, Ложь));
	ПараметрыМультизаказа.Вставить("ДоступнаОтмена", ПолучитьЗначение(Данные, "availableCancel",, Ложь));
	
	ПараметрыМультизаказа.Вставить("ТипГрузоперевозки", ПолучитьЗначение(Данные, "transportationTypeId",,1));
	Если Не ЗначениеЗаполнено(ПараметрыМультизаказа.ТипГрузоперевозки) Тогда
		ПараметрыМультизаказа.ТипГрузоперевозки = 1;
	КонецЕсли;
	
	ПараметрыМультизаказа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrier.name"));
	ПараметрыМультизаказа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrier.id"));
	ПараметрыМультизаказа.Вставить("ТарифНаименование", ПолучитьЗначение(Данные, "tariff.name"));
	ПараметрыМультизаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(Данные, "tariff.id"));
	
	// Отгрузка
	ПараметрыМультизаказа.Вставить("СпособОтгрузки", ПолучитьЗначение(Данные, "shipment.type.id"));
	ПараметрыМультизаказа.Вставить("СпособОтгрузкиНаименование", ПолучитьЗначение(Данные, "shipment.type.name"));
	
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаИдентификатор", ПолучитьЗначение(Данные, "shipment.point.id"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаНаименование", ПолучитьЗначение(Данные, "shipment.point.name"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаАдрес", ПолучитьЗначение(Данные, "shipment.point.address"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаТелефон", ПолучитьЗначение(Данные, "shipment.point.phone"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаТипНаименование", ПолучитьЗначение(Данные, "shipment.point.type.name"));
	ПараметрыМультизаказа.Вставить("ПунктПриемаГрузаТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.type.id"));
	
	ПараметрыМультизаказа.Вставить("ОтправительАдресПредставление", ПолучитьЗначение(Данные, "shipment.address.view"));
	ПараметрыМультизаказа.Вставить("ОтправительАдресЗначение", ПолучитьЗначение(Данные, "shipment.address.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ОтправительАдресШирота", ПолучитьЗначение(Данные, "shipment.address.latitude",, 0));
	ПараметрыМультизаказа.Вставить("ОтправительАдресДолгота", ПолучитьЗначение(Данные, "shipment.address.longitude",, 0));
	
	ПараметрыМультизаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(Данные, "shipment.date","Дата"));
	ПараметрыМультизаказа.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(Данные, "shipment.time.from", "Дата"));
	ПараметрыМультизаказа.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(Данные, "shipment.time.to", "Дата"));
	ПараметрыМультизаказа.Вставить("ВремяОтгрузкиОбедС", ПолучитьЗначение(Данные, "shipment.time.breakFrom", "Дата"));
	ПараметрыМультизаказа.Вставить("ВремяОтгрузкиОбедПо", ПолучитьЗначение(Данные, "shipment.time.breakTo", "Дата"));
	ПараметрыМультизаказа.Вставить("ВариантВремениОтгрузки", ПолучитьЗначение(Данные, "shipment.timeOptionId"));
	
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "shipment.participant.counteragent.typeId",,1));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентИНН", ПолучитьЗначение(Данные, "shipment.participant.counteragent.inn"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентКПП", ПолучитьЗначение(Данные, "shipment.participant.counteragent.kpp"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентНаименование", ПолучитьЗначение(Данные, "shipment.participant.counteragent.name"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "shipment.participant.counteragent.legaladdress.view",,""));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыМультизаказа.ОтправительКонтрагентИНН, ПараметрыМультизаказа.ОтправительКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыМультизаказа.Вставить("ОтправительКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыМультизаказа.Вставить("ОтправительКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "shipment.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.name"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.email"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.number"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.number"));
	ПараметрыМультизаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "shipment.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	// Оплата
	ПараметрыМультизаказа.Вставить("ФормаОплаты", ПолучитьЗначение(Данные, "payment.type.id",,1));
	ПараметрыМультизаказа.Вставить("ФормаОплатыНаименование", ПолучитьЗначение(Данные, "payment.type.name",,""));
	
	ПараметрыМультизаказа.Вставить("ПлательщикРоль", ПолучитьЗначение(Данные, "payment.payerRoleId",,0));

	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентЮрФизЛицо", ПолучитьЗначение(Данные, "payment.participant.counteragent.typeId",,1));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентИНН", ПолучитьЗначение(Данные, "payment.participant.counteragent.inn"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентКПП", ПолучитьЗначение(Данные, "payment.participant.counteragent.kpp"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентНаименование", ПолучитьЗначение(Данные, "payment.participant.counteragent.name"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентЮридическийАдресЗначение", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентЮридическийАдресПредставление", ПолучитьЗначение(Данные, "payment.participant.counteragent.legaladdress.view"));
	
	КонтактноеЛицо = КонтактноеЛицоПоGUID(ПолучитьЗначение(Данные, "payment.participant.contactPerson.id"));
	Если КонтактноеЛицо <> Неопределено Тогда
		ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоСсылка", КонтактноеЛицо.Ссылка);
	КонецЕсли;
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоНаименование", ПолучитьЗначение(Данные, "payment.participant.contactPerson.name"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоEmail", ПолучитьЗначение(Данные, "payment.participant.contactPerson.email"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.number"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phone.value", "ХранилищеЗначения"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.number"));
	ПараметрыМультизаказа.Вставить("ПлательщикКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(Данные, "payment.participant.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
	
	УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыМультизаказа.ПлательщикКонтрагентИНН, ПараметрыМультизаказа.ПлательщикКонтрагентКПП);
	Если УчастникГрузоперевозки <> Неопределено Тогда
		ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
		ПараметрыМультизаказа.Вставить("ПлательщикКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
	КонецЕсли;
	
	// Груз
	ПараметрыМультизаказа.Вставить("ГрузВес", ПолучитьЗначение(Данные, "cargo.weight"));
	ПараметрыМультизаказа.Вставить("ГрузОбъем", ПолучитьЗначение(Данные, "cargo.volume"));
	ПараметрыМультизаказа.Вставить("ГрузМаксимальнаяВысота", ПолучитьЗначение(Данные, "cargo.maxHeight"));
	ПараметрыМультизаказа.Вставить("ГрузМаксимальнаяДлина", ПолучитьЗначение(Данные, "cargo.maxLength"));
	ПараметрыМультизаказа.Вставить("ГрузМаксимальнаяШирина", ПолучитьЗначение(Данные, "cargo.maxWidth"));
	ПараметрыМультизаказа.Вставить("ГрузМаксимальныйВес", ПолучитьЗначение(Данные, "cargo.maxWeight"));
	ПараметрыМультизаказа.Вставить("ГрузСодержимое", ПолучитьЗначение(Данные, "cargo.description"));
	ПараметрыМультизаказа.Вставить("ГрузКоличествоГрузовыхМест", ПолучитьЗначение(Данные, "cargo.quantity"));
	ПараметрыМультизаказа.Вставить("ГрузСтоимость", ПолучитьЗначение(Данные, "cargo.value"));
	ПараметрыМультизаказа.Вставить("ГрузНегабаритныйВес", ПолучитьЗначение(Данные, "cargo.oversizedWeight",,0));
	ПараметрыМультизаказа.Вставить("ГрузНегабаритныйОбъем", ПолучитьЗначение(Данные, "cargo.oversizedVolume",,0));
	ПараметрыМультизаказа.Вставить("ГрузКоличествоНегабаритныхГрузовыхМест", ПолучитьЗначение(Данные, "cargo.oversizedQuantity"));
	
	ТарифНеГабарит = (ПараметрыМультизаказа.ГрузКоличествоНегабаритныхГрузовыхМест <> 0);
	ПараметрыМультизаказа.Вставить("ТарифНеГабарит", ТарифНеГабарит);
	
	// Услуги
	Услуги = ПолучитьЗначение(Данные, "services");
	МассивУслуг = Новый Массив;
	
	Если Услуги <> Неопределено Тогда
		Для Каждого ТекУслуга Из Услуги Цикл
			
			НоваяУслуга = НовыйПараметрыУслугиЗаказа();
			НоваяУслуга.Идентификатор = ТекУслуга.id;
			НоваяУслуга.Наименование = ТекУслуга.name;
			НоваяУслуга.Категория = ТекУслуга.category;
			НоваяУслуга.Обязательная = ТекУслуга.required;
			НоваяУслуга.ПоказыватьИнформацию = ТекУслуга.isDescribed;
			
			НоваяУслуга.СтавкаНДСНаименование = ТекУслуга.vatRateName;
			НоваяУслуга.СтавкаНДСИдентификатор = ТекУслуга.vatRateId;
			НоваяУслуга.СуммаНДС = ТекУслуга.vat;
			НоваяУслуга.СуммаСНДС = ТекУслуга.sum;
			НоваяУслуга.СуммаСкидки = ТекУслуга.discountSum;
			
			Для Каждого ТекущееСвойство Из ТекУслуга.properties Цикл
				
				НовоеСвойство = НовыйПараметрыСвойстваУслуги();
				НовоеСвойство.Идентификатор = ТекущееСвойство.id;
				НовоеСвойство.Наименование = ТекущееСвойство.name;
				СтруктураТипа = ПолучитьЗначение(ТекущееСвойство, "type");
				НовоеСвойство.ТипЗначения = СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа);
				НовоеСвойство.ЕдиницаИзмерения = ТекущееСвойство.unit;
				НовоеСвойство.Значение = ТекущееСвойство.value;
				
				НоваяУслуга.СвойстваУслуги.Добавить(НовоеСвойство);
				
			КонецЦикла;
			
			МассивУслуг.Добавить(НоваяУслуга);
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыМультизаказа.Вставить("Услуги", МассивУслуг);
	
	// Дополнительные данные
	ДополнительныеДанные = ПолучитьЗначение(Данные, "additionalData");
	МассивДополнительныеДанные = Новый Массив;
	
	Если ДополнительныеДанные <> Неопределено Тогда
		
		Для Каждого ТекущиеДанные Из ДополнительныеДанные Цикл
			
			НоваяСтрока = Новый Структура();
			НоваяСтрока.Вставить("Наименование", ТекущиеДанные.name);
			НоваяСтрока.Вставить("ТипЗначения", ТекущиеДанные.type);
			НоваяСтрока.Вставить("Значение", ТекущиеДанные.value);
			НоваяСтрока.Вставить("Список", Новый Массив());
			
			Для Каждого ТекЭлемент Из ТекущиеДанные.items Цикл
				
				НовыйЭлемент = Новый Структура();
				НовыйЭлемент.Вставить("Наименование", ТекЭлемент.name);
				НовыйЭлемент.Вставить("ТипЗначения", ТекЭлемент.type);
				НовыйЭлемент.Вставить("Значение", ТекЭлемент.value);
				
				НоваяСтрока.Список.Добавить(НовыйЭлемент);
				
			КонецЦикла;
			
			МассивДополнительныеДанные.Добавить(НоваяСтрока);
			
		КонецЦикла;
	КонецЕсли;

	ПараметрыМультизаказа.Вставить("ДополнительныеДанныеЗаказа", МассивДополнительныеДанные);
	
	// Заказы
	Заказы = ПолучитьЗначение(Данные, "orders"); 
	МассивЗаказы = Новый Массив;
	
	Если Заказы <> Неопределено Тогда
		Для Каждого ТекущийЗаказ Из Заказы Цикл
			
			ПараметрыЗаказа = НовыйПараметрыЗаказаНаДоставкуДляСписка();
			
			ПараметрыЗаказа.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "id"));
			ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(ТекущийЗаказ, "trackNumber"));
			ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(ТекущийЗаказ, "number"));
			ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(ТекущийЗаказ, "barcode"));
			ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(ТекущийЗаказ, "date", "Дата"));
			ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(ТекущийЗаказ, "createDate", "Дата"));
			ПараметрыЗаказа.Вставить("Сумма", ПолучитьЗначение(ТекущийЗаказ, "totalSum","Число",0));
			ПараметрыЗаказа.Вставить("ПолучательИНН", ПолучитьЗначение(ТекущийЗаказ, "reciever.inn"));
			ПараметрыЗаказа.Вставить("ПолучательКПП", ПолучитьЗначение(ТекущийЗаказ, "reciever.kpp"));
			ПараметрыЗаказа.Вставить("ПолучательНаименование", ПолучитьЗначение(ТекущийЗаказ, "reciever.name",,));
			ПараметрыЗаказа.Вставить("АдресДоставкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.address","Строка",""));
			ПараметрыЗаказа.Вставить("АдресДоставкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.name","Строка",""));
			ПараметрыЗаказа.Вставить("АдресДоставкиТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.typename","Строка",""));
			ПараметрыЗаказа.Вставить("ДоставкаДоАдреса", ПолучитьЗначение(ТекущийЗаказ, "deliveryToAddress"));
			ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(ТекущийЗаказ, "deliveryDate","Дата"));
			ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЗаказ, "tariff.name"));
			ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "tariff.id"));
			ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(ТекущийЗаказ, "status",, НСтр("ru='Состояние неизвестно'")));
			ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "statusId",, 0));
			ПараметрыЗаказа.Вставить("ВалютаКод", ПолучитьЗначение(ТекущийЗаказ, "currency.code",,"643"));
			ПараметрыЗаказа.Вставить("ВалютаНаименование", ПолучитьЗначение(ТекущийЗаказ, "currency.name",,"RUB"));
			ПараметрыЗаказа.Вставить("КоличествоГрузовыхМест", ПолучитьЗначение(ТекущийЗаказ, "cargo.quantity","Число",0));
			ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(ТекущийЗаказ, "cargo.weight","Число",0));
			ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(ТекущийЗаказ, "cargo.volume","Число",0));
			ПараметрыЗаказа.Вставить("ГрузСтоимость", ПолучитьЗначение(ТекущийЗаказ, "cargo.value","Число",0));
			ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.name",, ""));
			ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phone.view",, ""));
			
			МассивЗаказы.Добавить(ПараметрыЗаказа);
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыМультизаказа.Вставить("Заказы", МассивЗаказы);
	
	// Данные об исполнителе
	ПараметрыМультизаказа.Вставить("ИсполнительНаименование", ПолучитьЗначение(Данные, "performer.name"));
	ПараметрыМультизаказа.Вставить("ИсполнительЮридическоеЛицоНаименование", ПолучитьЗначение(Данные, "performer.legalName"));
	ПараметрыМультизаказа.Вставить("ИсполнительТелефон", ПолучитьЗначение(Данные, "performer.phone"));
	ПараметрыМультизаказа.Вставить("АвтомобильМарка", ПолучитьЗначение(Данные, "performer.carModel"));
	ПараметрыМультизаказа.Вставить("АвтомобильНомер", ПолучитьЗначение(Данные, "performer.carNumber"));
	
	ПараметрыМультизаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(Данные, "additionalInfo"));
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, ПараметрыМультизаказа);
	
	Результат.Вставить("Данные", Параметры);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОбновитьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("ДатаОбновления", ПолучитьЗначение(СтруктураОтвета, "updateDate", "Дата"));
	Результат.Вставить("ЗаказОбновлен", ПолучитьЗначение(СтруктураОтвета, "isUpdated", , Истина));
	
	ОбработатьРезультатЗапросаПолучитьМультизаказНаДоставку(СтруктураОтвета, Результат);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаОтменитьМультизаказНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Результат.Вставить("Идентификатор", ПолучитьЗначение(СтруктураОтвета, "id"));
	Результат.Вставить("Статус", ПолучитьЗначение(СтруктураОтвета, "status.name")); // Устарело
	Результат.Вставить("СтатусИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id")); // Устарело
	Результат.Вставить("Состояние", ПолучитьЗначение(СтруктураОтвета, "status.name"));
	Результат.Вставить("СостояниеИдентификатор", ПолучитьЗначение(СтруктураОтвета, "status.id"));
	Результат.Вставить("ДокументОтменен", ПолучитьЗначение(СтруктураОтвета, "result.IsCancel"));
	Результат.Вставить("ДоступнаОтмена", ПолучитьЗначение(СтруктураОтвета, "result.availableCancel"));
	Результат.Вставить("ДоступнаПлатнаяОтмена", ПолучитьЗначение(СтруктураОтвета, "result.availablePaidCancel"));
	Результат.Вставить("СуммаПлатнойОтмены", ПолучитьЗначение(СтруктураОтвета, "result.PaidCancel"));
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьЗаказыНаДоставку(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним блок "Страницы"
	БлокСтраницыОтвета = ПолучитьЗначение(СтруктураОтвета, "page");
	
	ПараметрыСтраницы = Новый Структура();
	
	ПараметрыСтраницы.Вставить("Страница", ПолучитьЗначение(БлокСтраницыОтвета, "number",,1));
	ПараметрыСтраницы.Вставить("РазмерСтраницы", ПолучитьЗначение(БлокСтраницыОтвета, "size",,100));
	ПараметрыСтраницы.Вставить("КоличествоСтрок", ПолучитьЗначение(БлокСтраницыОтвета, "totalElements",,0));
	ПараметрыСтраницы.Вставить("КоличествоСтраниц", ПолучитьЗначение(БлокСтраницыОтвета, "totalPages",,1));
	
	Результат.Вставить("Страницы", ПараметрыСтраницы);
	
	// Заполним список документов
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЗаказовОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
	
	МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку = МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(Ложь);
	
	СписокЗаказов = Новый Массив();
	Для Каждого ТекущийЗаказ Из СписокЗаказовОтвета Цикл
		
		ПараметрыЗаказа = НовыйПараметрыЗаказаНаДоставкуДляСписка();
		
		ПараметрыЗаказа.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "id"));
		ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(ТекущийЗаказ, "trackNumber"));
		ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(ТекущийЗаказ, "number"));
		ПараметрыЗаказа.Вставить("ОбязательныеРеквизитыЗаполнены", ПолучитьЗначение(ТекущийЗаказ, "isFilled",,Ложь));
		
		ПараметрыЗаказа.Вставить("МультизаказДата", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.date","Дата"));
		ПараметрыЗаказа.Вставить("МультизаказНомер", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.number",,""));
		ПараметрыЗаказа.Вставить("МультизаказИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.id",,""));
		ПараметрыЗаказа.Вставить("МультизаказТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.type.name",,""));
		ПараметрыЗаказа.Вставить("МультизаказТипИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "multiOrder.type.id",,""));
		ПараметрыЗаказа.Вставить("МультизаказПредставление", ПредставлениеМультизаказа(ПараметрыЗаказа));
		ПараметрыЗаказа.Вставить("ЭтоМультизаказ", ПолучитьЗначение(ТекущийЗаказ, "isMultiOrder",,Ложь));
		ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(ТекущийЗаказ, "barcode"));
		ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(ТекущийЗаказ, "date", "Дата"));
		ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(ТекущийЗаказ, "createDate", "Дата"));
		
		СписокИдентификаторовДокументовОснований = ПолучитьЗначение(ТекущийЗаказ, "baseDocuments");
		КоличествоИдентификаторовДокументовОснований = 0;

		ДокументыОснования = Новый СписокЗначений;

		Для Каждого ТекИдентификатор Из СписокИдентификаторовДокументовОснований Цикл
			
			Если ТекИдентификатор = "00000000-0000-0000-0000-000000000000" Тогда
				Продолжить;
			КонецЕсли;

			ТекДокументОснование = ДокументОснованияЗаказаНаДоставкуПоGUID(ТекИдентификатор,
				МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку);
			Если ТекДокументОснование <> Неопределено Тогда
				ДокументыОснования.Добавить(ТекДокументОснование);
			КонецЕсли;

			КоличествоИдентификаторовДокументовОснований = КоличествоИдентификаторовДокументовОснований + 1;
			
		КонецЦикла;

		ПараметрыЗаказа.Вставить("ДокументыОснования", ДокументыОснования);
		ПараметрыЗаказа.Вставить("ЕстьДокументыОснования", ДокументыОснования.Количество() > 0);
		ПараметрыЗаказа.Вставить("ДокументОснованиеПредставление", ПредставлениеОснованияДляСписка(ДокументыОснования,
			КоличествоИдентификаторовДокументовОснований));
		
		ПараметрыЗаказа.Вставить("Сумма", ПолучитьЗначение(ТекущийЗаказ, "totalSum","Число",0));
		ПараметрыЗаказа.Вставить("ОтправительИНН", ПолучитьЗначение(ТекущийЗаказ, "sender.inn"));
		ПараметрыЗаказа.Вставить("ОтправительКПП", ПолучитьЗначение(ТекущийЗаказ, "sender.kpp"));
		ПараметрыЗаказа.Вставить("ОтправительНаименование", ПолучитьЗначение(ТекущийЗаказ, "sender.name"));
		
		ПараметрыЗаказа.Вставить("ОтправительАдресПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipment.address.view"));
		ПараметрыЗаказа.Вставить("ОтправительАдресЗначение", ПолучитьЗначение(ТекущийЗаказ, "shipment.address.value", "ХранилищеЗначения"));
		ПараметрыЗаказа.Вставить("ОтправительАдресШирота", ПолучитьЗначение(ТекущийЗаказ, "shipment.address.latitude",, 0));
		ПараметрыЗаказа.Вставить("ОтправительАдресДолгота", ПолучитьЗначение(ТекущийЗаказ, "shipment.address.longitude",, 0));
		ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(ТекущийЗаказ, "shipment.Date","Дата"));
		ПараметрыЗаказа.Вставить("ВариантВремениОтгрузки", ПолучитьЗначение(ТекущийЗаказ, "shipment.timeOptionId",,0));
		ПараметрыЗаказа.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(ТекущийЗаказ, "shipment.time.from", "Дата"));
		ПараметрыЗаказа.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(ТекущийЗаказ, "shipment.time.to", "Дата"));
		
		ПараметрыЗаказа.Вставить("АдресОтгрузкиИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.id","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.address","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.name","Строка",""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "shipmentPoint.typename","Строка",""));
		
		ПараметрыЗаказа.Вставить("ПолучательИНН", ПолучитьЗначение(ТекущийЗаказ, "reciever.inn"));
		ПараметрыЗаказа.Вставить("ПолучательКПП", ПолучитьЗначение(ТекущийЗаказ, "reciever.kpp"));
		ПараметрыЗаказа.Вставить("ПолучательНаименование", ПолучитьЗначение(ТекущийЗаказ, "reciever.name",,));

		ПараметрыЗаказа.Вставить("ПолучательАдресПредставление", ПолучитьЗначение(ТекущийЗаказ, "delivery.address.view"));
		ПараметрыЗаказа.Вставить("ПолучательАдресЗначение", ПолучитьЗначение(ТекущийЗаказ, "delivery.address.value", "ХранилищеЗначения"));
		ПараметрыЗаказа.Вставить("ПолучательАдресШирота", ПолучитьЗначение(ТекущийЗаказ, "delivery.address.latitude",, 0));
		ПараметрыЗаказа.Вставить("ПолучательАдресДолгота", ПолучитьЗначение(ТекущийЗаказ, "delivery.address.longitude",, 0));
		
		ПараметрыЗаказа.Вставить("АдресДоставкиИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.id","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.address","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.name","Строка",""));
		ПараметрыЗаказа.Вставить("АдресДоставкиТипНаименование", ПолучитьЗначение(ТекущийЗаказ, "deliveryPoint.typename","Строка",""));

		ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаКод", ПолучитьЗначение(ТекущийЗаказ, "pickuppoint.id","Строка",""));
		ПараметрыЗаказа.Вставить("ПунктВыдачиКлиентаНаименование", ПолучитьЗначение(ТекущийЗаказ, "pickuppoint.name","Строка",""));
		
		ПараметрыЗаказа.Вставить("ЗаборОтАдреса", ПолучитьЗначение(ТекущийЗаказ, "deliveryFromAddress"));
		ПараметрыЗаказа.Вставить("ДоставкаДоАдреса", ПолучитьЗначение(ТекущийЗаказ, "deliveryToAddress"));
		ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(ТекущийЗаказ, "deliveryDate","Дата"));
		ПараметрыЗаказа.Вставить("ПеревозчикНаименование", ПолучитьЗначение(ТекущийЗаказ, "carrier.name"));
		ПараметрыЗаказа.Вставить("ПеревозчикИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "carrier.id"));
		ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЗаказ, "tariff.name"));
		ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "tariff.id"));
		ПараметрыЗаказа.Вставить("ПлательщикИНН", ПолучитьЗначение(ТекущийЗаказ, "payer.inn"));
		ПараметрыЗаказа.Вставить("ПлательщикКПП", ПолучитьЗначение(ТекущийЗаказ, "payer.kpp"));
		ПараметрыЗаказа.Вставить("ПлательщикНаименование", ПолучитьЗначение(ТекущийЗаказ, "payer.name"));
		ПараметрыЗаказа.Вставить("Оплачен", ПолучитьЗначение(ТекущийЗаказ, "isPaid",, Ложь));
		ПараметрыЗаказа.Вставить("НаложенныйПлатежПолучен", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.isPaid",, Ложь));
		ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежа", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.sum",, 0));
		ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплаты", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.method",, 0));
		ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежаДополнительный", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.sumAdditional",, 0));
		ПараметрыЗаказа.Вставить("НаложенныйПлатежВидОплатыДополнительный", ПолучитьЗначение(ТекущийЗаказ, "paymentOnDelivery.methodAdditional",, 0));
		ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(ТекущийЗаказ, "status",, НСтр("ru='Состояние неизвестно'")));
		ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "statusId",, 0));
		ПараметрыЗаказа.Вставить("ВалютаКод", ПолучитьЗначение(ТекущийЗаказ, "currency.code",,"643"));
		ПараметрыЗаказа.Вставить("ВалютаНаименование", ПолучитьЗначение(ТекущийЗаказ, "currency.name",,"RUB"));
		ПараметрыЗаказа.Вставить("ДоступнаОтмена", ПолучитьЗначение(ТекущийЗаказ, "availableCancel",, Ложь));
		ПараметрыЗаказа.Вставить("ДоступноРедактированиеПослеОформления", ПолучитьЗначение(ТекущийЗаказ, "availableEdit",, Ложь));
		ПараметрыЗаказа.Вставить("КоличествоГрузовыхМест", ПолучитьЗначение(ТекущийЗаказ, "cargo.quantity","Число",0));
		ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(ТекущийЗаказ, "cargo.weight","Число",0));
		ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(ТекущийЗаказ, "cargo.volume","Число",0));
		
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.id",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.name",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоEmail", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.email",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.phone.view",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.phone.value", "ХранилищеЗначения"));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.phoneAdditional.view"));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(ТекущийЗаказ, "shipment.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));

		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.id",, ""));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.name",, ""));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоEmail", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.email",, ""));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phone.view",, ""));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонЗначение", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phone.value", "ХранилищеЗначения"));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйПредставление", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phoneAdditional.view"));
		ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонДополнительныйЗначение", ПолучитьЗначение(ТекущийЗаказ, "delivery.contactPerson.phoneAdditional.value", "ХранилищеЗначения"));
		
		ПараметрыЗаказа.Вставить("КурьерИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "performer.id",, ""));
		ПараметрыЗаказа.Вставить("КурьерНаименование", ПолучитьЗначение(ТекущийЗаказ, "performer.name",, ""));
		
		ПараметрыЗаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(ТекущийЗаказ, "additionalInfo",, ""));
		
		СписокЗаказов.Добавить(ПараметрыЗаказа);
		
	КонецЦикла;
	
	Результат.Вставить("Список", СписокЗаказов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьГрафикДвиженияЗаказа(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные
	Параметры = НовыйПараметрыОтветаПолучитьГрафикДвиженияЗаказа();
	
	ПараметрыЗаказа = Новый Структура();
	СервисДоставкиКлиентСервер.ЗаполнитьЛинейныеДанныеПоСтруктуре(Параметры, ПараметрыЗаказа);
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыЗаказа.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(Данные, "id"));
	ПараметрыЗаказа.Вставить("ТрекНомер", ПолучитьЗначение(Данные, "trackNumber"));
	ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(Данные, "number"));
	ПараметрыЗаказа.Вставить("ДатаЗаказа", ПолучитьЗначение(Данные, "date","Дата"));
	ПараметрыЗаказа.Вставить("ДатаСозданияЗаказа", ПолучитьЗначение(Данные, "createDate", "Дата"));
	
	ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(Данные, "status.name",, НСтр("ru='Состояние неизвестно'")));
	ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(Данные, "status.id",, 0));
	ПараметрыЗаказа.Вставить("Заблокирован", ПолучитьЗначение(Данные, "isLocked",, Ложь));
	
	ПараметрыЗаказа.Вставить("ТипГрузоперевозки", ПолучитьЗначение(Данные, "transportationType",,1));
	Если Не ЗначениеЗаполнено(ПараметрыЗаказа.ТипГрузоперевозки) Тогда
		ПараметрыЗаказа.ТипГрузоперевозки = 1;
	КонецЕсли;
	
	ПараметрыЗаказа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrier.name"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrier.id"));
	ПараметрыЗаказа.Вставить("ГрузоперевозчикТелефон", ПолучитьЗначение(Данные, "carrier.phone"));
	ПараметрыЗаказа.Вставить("ТарифНаименование", ПолучитьЗначение(Данные, "tariff.name"));
	ПараметрыЗаказа.Вставить("ТарифИдентификатор", ПолучитьЗначение(Данные, "tariff.id"));
	ПараметрыЗаказа.Вставить("ДополнительнаяИнформация", ПолучитьЗначение(Данные, "additionalInfo"));
	
	// Отгрузка
	ПараметрыЗаказа.Вставить("СпособОтгрузкиИдентификатор", ПолучитьЗначение(Данные, "shipment.type.id"));
	ПараметрыЗаказа.Вставить("СпособОтгрузкиНаименование", ПолучитьЗначение(Данные, "shipment.type.name"));
	ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПолучитьЗначение(Данные, "shipment.date","Дата"));
	
	ПараметрыЗаказа.Вставить("ТочкаОтправленияИдентификатор", ПолучитьЗначение(Данные, "shipment.point.id"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияНаименование", ПолучитьЗначение(Данные, "shipment.point.name"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияАдрес", ПолучитьЗначение(Данные, "shipment.point.address"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТипИдентификатор", ПолучитьЗначение(Данные, "shipment.point.type.id"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТипНаименование", ПолучитьЗначение(Данные, "shipment.point.type.name"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияГород", ПолучитьЗначение(Данные, "shipment.point.city"));
	ПараметрыЗаказа.Вставить("ТочкаОтправленияТелефон", ПолучитьЗначение(Данные, "shipment.point.phone"));
	
	// Доставка
	ПараметрыЗаказа.Вставить("СпособДоставкиИдентификатор", ПолучитьЗначение(Данные, "delivery.type.id"));
	ПараметрыЗаказа.Вставить("СпособДоставкиНаименование", ПолучитьЗначение(Данные, "delivery.type.name"));
	ПараметрыЗаказа.Вставить("ДатаДоставки", ПолучитьЗначение(Данные, "delivery.date","Дата"));
	
	ПараметрыЗаказа.Вставить("ТочкаНазначенияИдентификатор", ПолучитьЗначение(Данные, "delivery.point.id"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияНаименование", ПолучитьЗначение(Данные, "delivery.point.name"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияАдрес", ПолучитьЗначение(Данные, "delivery.point.address"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТипИдентификатор", ПолучитьЗначение(Данные, "delivery.point.type.id"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТипНаименование", ПолучитьЗначение(Данные, "delivery.point.type.name"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияГород", ПолучитьЗначение(Данные, "delivery.point.city"));
	ПараметрыЗаказа.Вставить("ТочкаНазначенияТелефон", ПолучитьЗначение(Данные, "delivery.point.phone"));
	
	СписокЭлементов = ПолучитьЗначение(Данные, "schedule",,Новый Структура());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Дата", ПолучитьЗначение(ТекущийЭлемент, "date", "Дата"));
		ДанныеЭлемента.Вставить("ДатаМаксимальная", ПолучитьЗначение(ТекущийЭлемент, "dateMax", "Дата"));
		ДанныеЭлемента.Вставить("ЭтоФакт", ПолучитьЗначение(ТекущийЭлемент, "isFact",,Ложь));
		ДанныеЭлемента.Вставить("СостояниеНаименование", ПолучитьЗначение(ТекущийЭлемент, "status.name"));
		ДанныеЭлемента.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "status.id"));
		ДанныеЭлемента.Вставить("МестоположениеИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "point.id"));
		ДанныеЭлемента.Вставить("МестоположениеГород", ПолучитьЗначение(ТекущийЭлемент, "point.city"));
		ДанныеЭлемента.Вставить("МестоположениеНаименование", ПолучитьЗначение(ТекущийЭлемент, "point.name"));
		ДанныеЭлемента.Вставить("МестоположениеАдрес", ПолучитьЗначение(ТекущийЭлемент, "point.adress"));
		ДанныеЭлемента.Вставить("МестоположениеТипИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "point.type.id"));
		ДанныеЭлемента.Вставить("МестоположениеТипНаименование", ПолучитьЗначение(ТекущийЭлемент, "point.type.name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	ПараметрыЗаказа.Вставить("ГрафикДвиженияЗаказа", НовыйСписокЭлементов);
	
	Результат.Вставить("Данные", ПараметрыЗаказа);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДоступныеФормы(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(ТекущийЭлемент, "orderId"));
		ДанныеЭлемента.Вставить("ИдентификаторДокумента", ПолучитьЗначение(ТекущийЭлемент, "docId"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("Расширение", ПолучитьЗначение(ТекущийЭлемент, "extension"));
		ДанныеЭлемента.Вставить("Обязательная", ПолучитьЗначение(ТекущийЭлемент, "required"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьФайлыДоступныхФорм(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded");
	
	СписокФайловПечатныхФорм = Новый Массив();
	
	Если БлокСпискаОтвета <> Неопределено Тогда
		
		СписокФайловПечатныхФормИсточника = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
		
		Для Каждого ТекущийЗаказ Из СписокФайловПечатныхФормИсточника Цикл
			
			ПараметрыФормы = Новый Структура();
			
			ПараметрыФормы.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "id"));
			ПараметрыФормы.Вставить("ИдентификаторЗаказа", ПолучитьЗначение(ТекущийЗаказ, "orderId"));
			ПараметрыФормы.Вставить("Наименование", ПолучитьЗначение(ТекущийЗаказ, "name"));
			ПараметрыФормы.Вставить("Данные", ПолучитьЗначение(ТекущийЗаказ, "data"));
			ПараметрыФормы.Вставить("Расширение", ПолучитьЗначение(ТекущийЗаказ, "extension"));
			ПараметрыФормы.Вставить("Кодировка", ПолучитьЗначение(ТекущийЗаказ, "encodingMethod"));
			
			СписокФайловПечатныхФорм.Добавить(ПараметрыФормы);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат.Вставить("Список", СписокФайловПечатныхФорм);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСостояния(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("ИдентификаторГруппы", ПолучитьЗначение(ТекущийЭлемент, "groupId"));
		ДанныеЭлемента.Вставить("НаименованиеГруппы", ПолучитьЗначение(ТекущийЭлемент, "groupName"));
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьТипыГрузоперевозок(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "number"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьГрузоперевозчиков(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("НаименованиеПолное", ПолучитьЗначение(ТекущийЭлемент, "fullName"));
		ДанныеЭлемента.Вставить("Описание", ПолучитьЗначение(ТекущийЭлемент, "descriptoin"));
		ДанныеЭлемента.Вставить("ТребуетсяАвторизация", ПолучитьЗначение(ТекущийЭлемент, "authRequired",, Ложь));
		ДанныеЭлемента.Вставить("ИдентификаторСервиса", ПолучитьЗначение(ТекущийЭлемент, "serviceID",, ""));
		ДанныеЭлемента.Вставить("ВозможнаРаботаБезАвторизации", ПолучитьЗначение(ТекущийЭлемент, "workingWithoutAuth",, Ложь));
		ДанныеЭлемента.Вставить("ДанныеАвторизацииВведены", ПолучитьЗначение(ТекущийЭлемент, "authData",, Ложь));
		ДанныеЭлемента.Вставить("ТипАвторизации", ПолучитьЗначение(ТекущийЭлемент, "authorizationType",, ""));
		ДанныеЭлемента.Вставить("ОписаниеПодключения", ПолучитьЗначение(ТекущийЭлемент, "connectionDescription",, ""));
		ДанныеЭлемента.Вставить("УстаревшийТипАвторизации", ПолучитьЗначение(ТекущийЭлемент, "outdated",, Ложь));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеГрузоперевозчика(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыГрузоперевозчика = Новый Структура();
	
	ПараметрыГрузоперевозчика.Вставить("Идентификатор", ПолучитьЗначение(Данные, "id"));
	ПараметрыГрузоперевозчика.Вставить("Наименование", ПолучитьЗначение(Данные, "name"));
	ПараметрыГрузоперевозчика.Вставить("НаименованиеПолное", ПолучитьЗначение(Данные, "fullName"));
	ПараметрыГрузоперевозчика.Вставить("Описание", ПолучитьЗначение(Данные, "description"));
	ПараметрыГрузоперевозчика.Вставить("АдресСайта", ПолучитьЗначение(Данные, "addressWebSite"));
	ПараметрыГрузоперевозчика.Вставить("ЮридическийАдрес", ПолучитьЗначение(Данные, "addressLegal"));
	ПараметрыГрузоперевозчика.Вставить("ФизическийАдрес", ПолучитьЗначение(Данные, "addressPhysical"));
	ПараметрыГрузоперевозчика.Вставить("Телефон", ПолучитьЗначение(Данные, "phone"));
	ПараметрыГрузоперевозчика.Вставить("ТребуетсяАвторизация", ПолучитьЗначение(Данные, "authRequired",, Ложь));
	ПараметрыГрузоперевозчика.Вставить("ИдентификаторСервиса", ПолучитьЗначение(Данные, "serviceID",, ""));
	ПараметрыГрузоперевозчика.Вставить("ДанныеПоТарифам", Новый Массив());
	
	Для Каждого ТекущийЭлемент Из Данные.tariffs Цикл
		
		ПараметрыТарифа = Новый Структура();
		ПараметрыТарифа.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ПараметрыТарифа.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ПараметрыТарифа.Вставить("Описание", ПолучитьЗначение(ТекущийЭлемент, "comment"));
		ПараметрыТарифа.Вставить("МаксВес", ПолучитьЗначение(ТекущийЭлемент, "maxWeight"));
		ПараметрыТарифа.Вставить("МаксОбъем", ПолучитьЗначение(ТекущийЭлемент, "maxVolume"));
		ПараметрыТарифа.Вставить("МаксДлина", ПолучитьЗначение(ТекущийЭлемент, "maxLength"));
		ПараметрыТарифа.Вставить("НегабаритныйВес", ПолучитьЗначение(ТекущийЭлемент, "oversizeWeight"));
		ПараметрыТарифа.Вставить("НегабаритныйОбъем", ПолучитьЗначение(ТекущийЭлемент, "oversizeVolume"));
		ПараметрыТарифа.Вставить("НегабаритнаяДлина", ПолучитьЗначение(ТекущийЭлемент, "oversizeLength"));
		ПараметрыТарифа.Вставить("ФормаОплаты", ПолучитьЗначение(ТекущийЭлемент, "payType"));
		ПараметрыТарифа.Вставить("ПоУмолчанию", ПолучитьЗначение(ТекущийЭлемент, "isDefault", "Булево", Ложь));
		
		ПараметрыГрузоперевозчика.ДанныеПоТарифам.Добавить(ПараметрыТарифа);
	КонецЦикла;
	
	Результат.Вставить("Данные", ПараметрыГрузоперевозчика);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьПунктыВыдачиКлиента(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = НовыйПараметрыПунктаВыдачиКлиента();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("Адрес", ПолучитьЗначение(ТекущийЭлемент, "address"));
		ДанныеЭлемента.Вставить("Телефон", ПолучитьЗначение(ТекущийЭлемент, "phone"));
		ДанныеЭлемента.Вставить("АдресШирота", ПолучитьЗначение(ТекущийЭлемент, "point.latitude"));
		ДанныеЭлемента.Вставить("АдресДолгота", ПолучитьЗначение(ТекущийЭлемент, "point.longitude"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСписокКурьеров(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЭлементов = ПолучитьЗначение(СтруктураОтвета, "items",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = НовыйПараметрыКурьера();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСостояниеПодключенияОрганизации(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	СостояниеПодключения = НовыйСостояниеПодключенияОрганизации();
	
	СостояниеПодключения.Вставить("ОрганизацияЗарегистрирована", ПолучитьЗначение(СтруктураОтвета, "companyIsReg",, Ложь));
	СостояниеПодключения.Вставить("ПунктВыдачиЗарегистрирован", ПолучитьЗначение(СтруктураОтвета, "pickuppointIsReg",, Ложь));
	СостояниеПодключения.Вставить("ЛогистЗарегистрирован", ПолучитьЗначение(СтруктураОтвета, "logisticianIsReg",, Ложь));
	
	Результат.Вставить("СостояниеПодключенияОрганизации", СостояниеПодключения);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьТарифы(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "items",, Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "carrierId"));
		ДанныеЭлемента.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(ТекущийЭлемент, "carrierName"));
		ДанныеЭлемента.Вставить("ТарифИдентификатор", ПолучитьЗначение(ТекущийЭлемент, "tariffId"));
		ДанныеЭлемента.Вставить("ТарифНаименование", ПолучитьЗначение(ТекущийЭлемент, "tariffName"));
		ДанныеЭлемента.Вставить("ПоУмолчанию", ПолучитьЗначение(ТекущийЭлемент, "isDefault", "Булево", Ложь));
		ДанныеЭлемента.Вставить("Стоимость", ПолучитьЗначение(ТекущийЭлемент, "cost"));
		ДанныеЭлемента.Вставить("СуммаСкидки", ПолучитьЗначение(ТекущийЭлемент, "discount"));
		
		ДанныеЭлемента.Вставить("МинимальныйСрок", ПолучитьЗначение(ТекущийЭлемент, "termMin"));
		ДанныеЭлемента.Вставить("МаксимальныйСрок", ПолучитьЗначение(ТекущийЭлемент, "termMax"));
		ДанныеЭлемента.Вставить("Негабарит", ПолучитьЗначение(ТекущийЭлемент, "oversize"));
		ДанныеЭлемента.Вставить("ОписаниеНеГабарит", ПолучитьЗначение(ТекущийЭлемент, "oversizecomment"));
		ДанныеЭлемента.Вставить("Описание", ПолучитьЗначение(ТекущийЭлемент, "comment"));
		
		ДанныеЭлемента.Вставить("ДетализацияСтоимости", Новый Массив());
		ДанныеЭлемента.Вставить("ДополнительныеУслуги", Новый Массив());
		
		ДанныеЭлемента.Вставить("ТочкаОтправленияПредставление", ПолучитьЗначение(ТекущийЭлемент, "shipment.point.view",,""));
		ДанныеЭлемента.Вставить("ТочкаОтправленияШирота", ПолучитьЗначение(ТекущийЭлемент, "shipment.point.latitude",,0));
		ДанныеЭлемента.Вставить("ТочкаОтправленияДолгота", ПолучитьЗначение(ТекущийЭлемент, "shipment.point.longitude",,0));
		
		ДанныеЭлемента.Вставить("ТочкаДоставкиПредставление", ПолучитьЗначение(ТекущийЭлемент, "delivery.point.view",,""));
		ДанныеЭлемента.Вставить("ТочкаДоставкиШирота", ПолучитьЗначение(ТекущийЭлемент, "delivery.point.latitude",,0));
		ДанныеЭлемента.Вставить("ТочкаДоставкиДолгота", ПолучитьЗначение(ТекущийЭлемент, "delivery.point.longitude",,0));
		
		// Ограничения тарифа
		ДанныеЭлемента.Вставить("МаксВес", ПолучитьЗначение(ТекущийЭлемент, "maxWeight"));
		ДанныеЭлемента.Вставить("МаксОбъем", ПолучитьЗначение(ТекущийЭлемент, "maxVolume"));
		ДанныеЭлемента.Вставить("МаксДлина", ПолучитьЗначение(ТекущийЭлемент, "maxLength"));
		ДанныеЭлемента.Вставить("НегабаритныйВес", ПолучитьЗначение(ТекущийЭлемент, "oversizeWeight"));
		ДанныеЭлемента.Вставить("НегабаритныйОбъем", ПолучитьЗначение(ТекущийЭлемент, "oversizeVolume"));
		ДанныеЭлемента.Вставить("НегабаритнаяДлина", ПолучитьЗначение(ТекущийЭлемент, "oversizeLength"));
		ДанныеЭлемента.Вставить("ФормаОплаты", ПолучитьЗначение(ТекущийЭлемент, "paymentType"));
		ДанныеЭлемента.Вставить("ФормаОплатыПоУмолчанию", ПолучитьЗначение(ТекущийЭлемент, "paymentTypeDefault",,0));
		ДанныеЭлемента.Вставить("ТолькоВремяДоставки", ПолучитьЗначение(ТекущийЭлемент, "onlyDeliveryTime",,Ложь));
		
		Для Каждого ТекущаяУслуга Из ТекущийЭлемент.costDetails Цикл
	
			НоваяУслуга = Новый Структура();
			
			НоваяУслуга.Вставить("Идентификатор", ПолучитьЗначение(ТекущаяУслуга, "id"));
			НоваяУслуга.Вставить("Наименование", ПолучитьЗначение(ТекущаяУслуга, "name"));
			НоваяУслуга.Вставить("Стоимость", ПолучитьЗначение(ТекущаяУслуга, "cost"));
			НоваяУслуга.Вставить("ВариантУчета", ПолучитьЗначение(ТекущаяУслуга, "type"));
			НоваяУслуга.Вставить("Описание", ПолучитьЗначение(ТекущаяУслуга, "comment"));
			
			ДанныеЭлемента.ДетализацияСтоимости.Добавить(НоваяУслуга);
			
		КонецЦикла;
		
		Для Каждого ТекущаяДополнительнаяУслуга Из ТекущийЭлемент.optionalServices Цикл
	
			НоваяДопУслуга = Новый Структура();
			
			НоваяДопУслуга.Вставить("Идентификатор", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "id"));
			НоваяДопУслуга.Вставить("Наименование", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "name"));
			НоваяДопУслуга.Вставить("Категория", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "category"));
			НоваяДопУслуга.Вставить("Обязательная", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "required"));
			НоваяДопУслуга.Вставить("Использовать", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isSelected"));
			НоваяДопУслуга.Вставить("ПоказыватьИнформацию", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isDescribed"));
			НоваяДопУслуга.Вставить("Свойства", Новый Массив());
			
			СвойстваДополнительнойУслуги = НоваяДопУслуга.Свойства;
			
			Для Каждого СвойствоДополнительнойУслуги Из ТекущаяДополнительнаяУслуга.properties Цикл
				
				НовоеСвойство = Новый Структура();
				НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(СвойствоДополнительнойУслуги, "id"));
				НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(СвойствоДополнительнойУслуги, "name"));
				СтруктураТипа = ПолучитьЗначение(СвойствоДополнительнойУслуги, "type");
				НовоеСвойство.Вставить("ТипЗначения", СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа));
				НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(СвойствоДополнительнойУслуги,"unit"));
				ИспользоватьСвойство = ПолучитьЗначение(СвойствоДополнительнойУслуги,"isSelected");
				Если ИспользоватьСвойство Тогда
					НовоеСвойство.Вставить("Использовать", ИспользоватьСвойство);
					НовоеСвойство.Вставить("Значение", ПолучитьЗначение(СвойствоДополнительнойУслуги,"value"));
				КонецЕсли;
				
				СвойстваДополнительнойУслуги.Добавить(НовоеСвойство);
				
			КонецЦикла;
			
			ДанныеЭлемента.ДополнительныеУслуги.Добавить(НоваяДопУслуга);
			
		КонецЦикла;
		
		Терминал = НовыйПараметрыПунктаПриемаВыдачи();
		Терминал.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.id"));
		Терминал.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.name"));
		Терминал.Вставить("Адрес", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.address"));
		Терминал.Вставить("Телефон", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.phone"));
		Терминал.Вставить("ТипИдентификатор", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.type.id"));
		Терминал.Вставить("ТипНаименование", ПолучитьЗначение(ТекущийЭлемент,"shipment.defaultPoint.type.name"));
		
		ДанныеЭлемента.Вставить("ПунктПриемаГруза", Терминал);
		
		Терминал = НовыйПараметрыПунктаПриемаВыдачи();
		Терминал.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.id"));
		Терминал.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.name"));
		Терминал.Вставить("Адрес", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.address"));
		Терминал.Вставить("Телефон", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.phone"));
		Терминал.Вставить("ТипИдентификатор", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.type.id"));
		Терминал.Вставить("ТипНаименование", ПолучитьЗначение(ТекущийЭлемент,"delivery.defaultPoint.type.name"));
		
		ДанныеЭлемента.Вставить("ПунктВыдачиГруза", Терминал);
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
	// Заполним доступные периоды отгрузки
	ДоступныеПериодыОтгрузки = Новый Массив();
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "availableIntervals",,Новый Структура());
	
	Если БлокСпискаОтвета.allowed Тогда
		
		СписокДоступныхПериодовОтгрузки = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
		
		Для Каждого ТекущийПериод Из СписокДоступныхПериодовОтгрузки Цикл

			ПериодОтгрузки = НовыйПараметрыДоступныеПериодыОтгрузки();
			ПериодОтгрузки.Вставить("ДатаОтгрузки", ПолучитьЗначение(ТекущийПериод, "date","Дата"));
			ПериодОтгрузки.Вставить("ВремяОтгрузкиС", ПолучитьЗначение(ТекущийПериод, "from","Дата"));
			ПериодОтгрузки.Вставить("ВремяОтгрузкиПо", ПолучитьЗначение(ТекущийПериод, "to","Дата"));
			ПериодОтгрузки.Вставить("ПериодОтгрузкиПредставление", ПолучитьЗначение(ТекущийПериод, "intervalName","Строка"));
			
			ДоступныеПериодыОтгрузки.Добавить(ПериодОтгрузки);
			
		КонецЦикла;
		Результат.Вставить("ДоступныПериодыОтгрузки", Истина);
	Иначе
		Результат.Вставить("ДоступныПериодыОтгрузки", Ложь);
	КонецЕсли;
	
	Результат.Вставить("ДоступныеПериодыОтгрузки", ДоступныеПериодыОтгрузки);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьУслугиДляТипаГрузоперевозки(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "services",,Новый Структура());
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "commonServices",,Новый Массив());
	
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("Наименование", ПолучитьЗначение(ТекущийЭлемент, "name"));
		ДанныеЭлемента.Вставить("Категория", ПолучитьЗначение(ТекущийЭлемент, "category"));
		ДанныеЭлемента.Вставить("Обязательная", ПолучитьЗначение(ТекущийЭлемент, "required"));
		ДанныеЭлемента.Вставить("ПоказыватьИнформацию", ПолучитьЗначение(ТекущийЭлемент, "isDescribed"));
		ДанныеЭлемента.Вставить("Свойства", Новый Массив());
		
		Для Каждого ТекущееСвойство Из ТекущийЭлемент.properties Цикл
	
			НовоеСвойство = Новый Структура();
			
			НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(ТекущееСвойство, "id"));
			НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(ТекущееСвойство, "name"));
			СтруктураТипа = ПолучитьЗначение(ТекущееСвойство, "type");
			НовоеСвойство.Вставить("ТипЗначения", СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа));
			НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(ТекущееСвойство, "unit"));
			
			ДанныеЭлемента.Свойства.Добавить(НовоеСвойство);
			
		КонецЦикла;
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("Список", НовыйСписокЭлементов);
	
	СписокЭлементов = ПолучитьЗначение(БлокОтветаСписок, "incompatibleServices",,Новый Массив());
	НовыйСписокЭлементов = Новый Массив();
	Для Каждого ТекущийЭлемент Из СписокЭлементов Цикл
		
		ДанныеЭлемента = Новый Структура();
		
		ДанныеЭлемента.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЭлемент, "id"));
		ДанныеЭлемента.Вставить("ИдентификаторНесовместимойУслуги", ПолучитьЗначение(ТекущийЭлемент, "incompatibleId"));
		
		НовыйСписокЭлементов.Добавить(ДанныеЭлемента);
		
	КонецЦикла;
	
	Результат.Вставить("СписокНесовместимыеУслуги", НовыйСписокЭлементов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеУслуги(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеУслуги = ПолучитьЗначение(СтруктураОтвета, "data",,Новый Структура());

	Данные = Новый Структура();
	Данные.Вставить("Идентификатор", ПолучитьЗначение(ДанныеУслуги, "id"));
	Данные.Вставить("Наименование", ПолучитьЗначение(ДанныеУслуги, "name"));
	Данные.Вставить("Категория", ПолучитьЗначение(ДанныеУслуги, "category"));
	Данные.Вставить("Обязательная", ПолучитьЗначение(ДанныеУслуги, "required"));
	Данные.Вставить("Описание", ПолучитьЗначение(ДанныеУслуги, "description"));
	
	Результат.Вставить("Данные", Данные);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДоступныеТерминалы(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним список
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	Список = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
	
	СписокТерминалов = Новый Массив();
	Для Каждого ТекущийТерминал Из Список Цикл
		
		ПараметрыТерминала = Новый Структура();
		
		ПараметрыТерминала.Вставить("Идентификатор", ПолучитьЗначение(ТекущийТерминал, "id"));
		ПараметрыТерминала.Вставить("ИдентификаторВСистемеГрузоперевозчика", ПолучитьЗначение(ТекущийТерминал, "terminalID"));
		ПараметрыТерминала.Вставить("Наименование", ПолучитьЗначение(ТекущийТерминал, "name"));
		ПараметрыТерминала.Вставить("Адрес", ПолучитьЗначение(ТекущийТерминал, "address"));
		ПараметрыТерминала.Вставить("Описание", ПолучитьЗначение(ТекущийТерминал, "description"));
		ПараметрыТерминала.Вставить("Телефон", ПолучитьЗначение(ТекущийТерминал, "telephone"));
		ПараметрыТерминала.Вставить("ТипИдентификатор", ПолучитьЗначение(ТекущийТерминал, "typeId"));
		ПараметрыТерминала.Вставить("ТипНаименование", ПолучитьЗначение(ТекущийТерминал, "typeName"));
		ПараметрыТерминала.Вставить("Долгота", ПолучитьЗначение(ТекущийТерминал, "longitude"));
		ПараметрыТерминала.Вставить("Широта", ПолучитьЗначение(ТекущийТерминал, "latitude"));
		ПараметрыТерминала.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(ТекущийТерминал, "carrierName"));
		ПараметрыТерминала.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(ТекущийТерминал, "carrierId"));
		ПараметрыТерминала.Вставить("НаселенныйПунктИдентификатор", ПолучитьЗначение(ТекущийТерминал, "cityID"));
		ПараметрыТерминала.Вставить("Город", ПолучитьЗначение(ТекущийТерминал, "cityName"));
		
		ГрафикРаботыСписок = ПолучитьЗначение(ТекущийТерминал, "worktable");
		ГрафикРаботыНовый = Новый Массив();
		
		Для Каждого ТекущаяСтрока Из ГрафикРаботыСписок Цикл
			СтрокаГрафикаРаботы = Новый Структура();
			СтрокаГрафикаРаботы.Вставить("Отдел", ПолучитьЗначение(ТекущаяСтрока, "department"));
			СтрокаГрафикаРаботы.Вставить("ГрафикРаботыПредставление", ПолучитьЗначение(ТекущаяСтрока, "worktableView"));
			ГрафикРаботыНовый.Добавить(СтрокаГрафикаРаботы);
		КонецЦикла;
		
		ПараметрыТерминала.Вставить("ГрафикРаботы", ГрафикРаботыНовый);
		
		СписокТерминалов.Добавить(ПараметрыТерминала);
		
	КонецЦикла;
	
	Результат.Вставить("Список", СписокТерминалов);
	
	Если БлокСпискаОтвета.Свойство("cities") Тогда
		
		Список = ПолучитьЗначение(БлокСпискаОтвета, "cities",,Новый Массив());
	
		СписокНаселенныхПунктов = Новый СписокЗначений();
		Для Каждого ТекущийГород Из Список Цикл
			СписокНаселенныхПунктов.Добавить(ПолучитьЗначение(ТекущийГород, "cityID"), ПолучитьЗначение(
				ТекущийГород, "cityName"));
		КонецЦикла;
	
		Результат.Вставить("СписокНаселенныхПунктов", СписокНаселенныхПунктов);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеТерминала(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыТерминала = Новый Структура();
	
	ПараметрыТерминала.Вставить("Идентификатор", ПолучитьЗначение(Данные, "id"));
	ПараметрыТерминала.Вставить("Наименование", ПолучитьЗначение(Данные, "name"));
	ПараметрыТерминала.Вставить("Адрес", ПолучитьЗначение(Данные, "address"));
	ПараметрыТерминала.Вставить("Описание", ПолучитьЗначение(Данные, "description"));
	ПараметрыТерминала.Вставить("Телефон", ПолучитьЗначение(Данные, "telephone"));
	ПараметрыТерминала.Вставить("ТипИдентификатор", ПолучитьЗначение(Данные, "typeId"));
	ПараметрыТерминала.Вставить("ТипНаименование", ПолучитьЗначение(Данные, "typeName"));
	ПараметрыТерминала.Вставить("Долгота", ПолучитьЗначение(Данные, "longitude"));
	ПараметрыТерминала.Вставить("Широта", ПолучитьЗначение(Данные, "latitude"));
	ПараметрыТерминала.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrierName"));
	ПараметрыТерминала.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrierId"));
	
	ГрафикРаботыСписок = ПолучитьЗначение(Данные, "worktable");
	ГрафикРаботыНовый = Новый Массив();
	
	Для Каждого ТекущаяСтрока Из ГрафикРаботыСписок Цикл
		СтрокаГрафикаРаботы = Новый Структура();
		СтрокаГрафикаРаботы.Вставить("Отдел", ПолучитьЗначение(ТекущаяСтрока, "department"));
		СтрокаГрафикаРаботы.Вставить("ГрафикРаботыПредставление", ПолучитьЗначение(ТекущаяСтрока, "worktableView"));
		ГрафикРаботыНовый.Добавить(СтрокаГрафикаРаботы);
	КонецЦикла;
	
	ПараметрыТерминала.Вставить("ГрафикРаботы", ГрафикРаботыНовый);
	
	Результат.Вставить("Данные", ПараметрыТерминала);
	
КонецПроцедуры

Процедура ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат)

	БлокОшибок = ПолучитьЗначение(СтруктураОтвета, "errors");
	Если БлокОшибок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("Ошибки", БлокОшибок);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьНастройкиАвторизации(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокОтветаСписок = ПолучитьЗначение(СтруктураОтвета, "_embedded",, Новый Массив());
	
	Авторизован = Ложь;
	ПраваДоступа = Новый Массив();
	Для Каждого РасшифровкаРезультата Из БлокОтветаСписок Цикл
		Авторизован = ПолучитьЗначение(РасшифровкаРезультата, "authorized",, Ложь);
		ПравоДоступа = ПолучитьЗначение(РасшифровкаРезультата, "scope",, "");
		ТипАвторизации = ПолучитьЗначение(РасшифровкаРезультата, "type",, "");
		Если ЗначениеЗаполнено(ПравоДоступа) Тогда
			Если ПраваДоступа.Найти(ПравоДоступа) = Неопределено Тогда
				ПраваДоступа.Добавить(ПравоДоступа);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("ПраваДоступа", ПраваДоступа);
	Результат.Вставить("Авторизован", Авторизован);
	Результат.Вставить("ТипАвторизации", ТипАвторизации);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДанныеПоТарифу(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Данные = СтруктураОтвета.data;
	
	ПараметрыТарифа = Новый Структура();
	ПараметрыТарифа.Вставить("Идентификатор", ПолучитьЗначение(Данные, "id"));
	ПараметрыТарифа.Вставить("Наименование", ПолучитьЗначение(Данные, "name"));
	
	ПараметрыТарифа.Вставить("ГрузоперевозчикИдентификатор", ПолучитьЗначение(Данные, "carrierId"));
	ПараметрыТарифа.Вставить("ГрузоперевозчикНаименование", ПолучитьЗначение(Данные, "carrierName"));
	
	ПараметрыТарифа.Вставить("ПоУмолчанию", ПолучитьЗначение(Данные, "isDefault", "Булево", Ложь));
	ПараметрыТарифа.Вставить("Описание", ПолучитьЗначение(Данные, "comment"));
	ПараметрыТарифа.Вставить("УслугиТарифа", Новый Массив());
	ПараметрыТарифа.Вставить("ТерминалыТарифа", Новый Массив());
	
	// Ограничения тарифа
	ПараметрыТарифа.Вставить("МаксВес", ПолучитьЗначение(Данные, "maxWeight"));
	ПараметрыТарифа.Вставить("МаксОбъем", ПолучитьЗначение(Данные, "maxVolume"));
	ПараметрыТарифа.Вставить("МаксДлина", ПолучитьЗначение(Данные, "maxLength"));
	ПараметрыТарифа.Вставить("НегабаритныйВес", ПолучитьЗначение(Данные, "oversizeWeight"));
	ПараметрыТарифа.Вставить("НегабаритныйОбъем", ПолучитьЗначение(Данные, "oversizeVolume"));
	ПараметрыТарифа.Вставить("НегабаритнаяДлина", ПолучитьЗначение(Данные, "oversizeLength"));
	ПараметрыТарифа.Вставить("ДоступныеФормыОплаты", ПолучитьЗначение(Данные, "paymentType"));
	ПараметрыТарифа.Вставить("ФормаОплаты", ПолучитьЗначение(Данные, "paymentTypeDefault",,0));
		
	Для Каждого ТекущаяДополнительнаяУслуга Из Данные.services Цикл

		НоваяУслуга = Новый Структура();
		
		НоваяУслуга.Вставить("Идентификатор", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "id"));
		НоваяУслуга.Вставить("Наименование", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "name"));
		НоваяУслуга.Вставить("Категория", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "category"));
		НоваяУслуга.Вставить("Обязательная", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "required"));
		НоваяУслуга.Вставить("Дополнительная", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isOptional"));
		НоваяУслуга.Вставить("Использовать", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isSelected"));
		НоваяУслуга.Вставить("ПоказыватьИнформацию", ПолучитьЗначение(ТекущаяДополнительнаяУслуга, "isDescribed"));
		НоваяУслуга.Вставить("Свойства", Новый Массив());
		
		СвойстваДополнительнойУслуги = НоваяУслуга.Свойства;
		
		Для Каждого СвойствоДополнительнойУслуги Из ТекущаяДополнительнаяУслуга.properties Цикл
			
			НовоеСвойство = Новый Структура();
			НовоеСвойство.Вставить("Идентификатор", ПолучитьЗначение(СвойствоДополнительнойУслуги, "id"));
			НовоеСвойство.Вставить("Наименование", ПолучитьЗначение(СвойствоДополнительнойУслуги, "name"));
			СтруктураТипа = ПолучитьЗначение(СвойствоДополнительнойУслуги, "type");
			НовоеСвойство.Вставить("ТипЗначения", СервисДоставкиСлужебный.ПолучитьОписаниеТипаПоСтруктуре(СтруктураТипа));
			НовоеСвойство.Вставить("ЕдиницаИзмерения", ПолучитьЗначение(СвойствоДополнительнойУслуги,"unit"));
			
			ИспользоватьСвойство = ПолучитьЗначение(СвойствоДополнительнойУслуги,"isSelected");
			Если ИспользоватьСвойство Тогда
				НовоеСвойство.Вставить("Использовать", ИспользоватьСвойство);
				НовоеСвойство.Вставить("Значение", ПолучитьЗначение(СвойствоДополнительнойУслуги,"value"));
			КонецЕсли;
			СвойстваДополнительнойУслуги.Добавить(НовоеСвойство);
			
		КонецЦикла;
		
		ПараметрыТарифа.УслугиТарифа.Добавить(НоваяУслуга);
		
	КонецЦикла;
	
	Терминалы = ПолучитьЗначение(Данные, "points",,Новый Массив());
	
	Для Каждого ТекущийТерминал Из Терминалы Цикл
		
		НовыйТерминал = Новый Структура();
		НовыйТерминал.Вставить("Идентификатор", ПолучитьЗначение(ТекущийТерминал,"id",,""));
		НовыйТерминал.Вставить("Наименование", ПолучитьЗначение(ТекущийТерминал,"name",,""));
		НовыйТерминал.Вставить("Направление", ПолучитьЗначение(ТекущийТерминал,"typeOperation",,0));
		НовыйТерминал.Вставить("АдресПредставление", ПолучитьЗначение(ТекущийТерминал,"address.view",,""));
		НовыйТерминал.Вставить("АдресЗначение", ПолучитьЗначение(ТекущийТерминал,"address.value","ХранилищеЗначения",""));
		
		ПараметрыТарифа.ТерминалыТарифа.Добавить(НовыйТерминал);
		
	КонецЦикла;
	
	Результат.Вставить("Данные", ПараметрыТарифа);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьДоступныеДляИзмененияРеквизиты(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("ИдентификаторЗаказа", 
		ПолучитьЗначение(СтруктураОтвета, "id"));
		
	КартаСвязиРеквизитов = Новый Структура;
	КартаСвязиРеквизитов.Вставить("payerAddress",		"ПлательщикАдрес");
	КартаСвязиРеквизитов.Вставить("payerContactInfo",	"ПлательщикКонтактнаяИнформация");
	КартаСвязиРеквизитов.Вставить("payerContragent",	"ПлательщикКонтрагент");
	
	КартаСвязиРеквизитов.Вставить("receiverAddress",			"ПолучательАдрес");
	КартаСвязиРеквизитов.Вставить("receiverContactInfo",		"ПолучательКонтактнаяИнформация");
	КартаСвязиРеквизитов.Вставить("receiverContragent",			"ПолучательКонтрагент");
	КартаСвязиРеквизитов.Вставить("receiverDeliveryDateTime",	"ПолучательДатаВремяДоставки");
	
	КартаСвязиРеквизитов.Вставить("senderAddress",			"ОтправительАдрес");
	КартаСвязиРеквизитов.Вставить("senderContactInfo",		"ОтправительКонтактнаяИнформация");
	КартаСвязиРеквизитов.Вставить("senderPickupDateTime",	"ОтправительДатаВремяОтгрузки");
	
	Для каждого Элем Из КартаСвязиРеквизитов Цикл
	
		КлючВнешний = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("editableAttributes.%1", Элем.Ключ);
		КлючЛокальный = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ДоступностьРеквизитов.%1", Элем.Значение);
		ДобавитьЗначение(Результат, КлючЛокальный, ПолучитьЗначение(СтруктураОтвета, КлючВнешний));
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьНаложенныеПлатежи(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним данные для запросы
	БлокПараметровЗапроса = ПолучитьЗначение(СтруктураОтвета, "page",,Новый Структура());
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ДатаРегистрацииПлатежа", ПолучитьЗначение(БлокПараметровЗапроса, "cursor.date", "Дата"));
	ПараметрыЗапроса.Вставить("ИдентификаторДокумента", ПолучитьЗначение(БлокПараметровЗапроса, "cursor.id", "Строка"));
	
	// Заполним список документов
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
	
	МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку = МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(Истина);
	
	СписокПлатежей = Новый Массив();
	Для Каждого ТекущийПлатеж Из СписокОтвета Цикл
		
		ПараметрыПлатежа = НовыйПараметрыПлатежа();
		
		ПараметрыПлатежа.Вставить("Идентификатор", ПолучитьЗначение(ТекущийПлатеж, "id"));
		
		ИдентификаторДокументаОснования = ПолучитьЗначение(ТекущийПлатеж, "baseDocumentId");
		ДокументОснование = ДокументОснованияЗаказаНаДоставкуПоGUID(ИдентификаторДокументаОснования,
			МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку);
			
		Если ДокументОснование <> Неопределено Тогда
			ПараметрыПлатежа.Вставить("ДокументОснование", ДокументОснование);
		КонецЕсли;
		
		ПараметрыПлатежа.Вставить("ОтправительИНН", ПолучитьЗначение(ТекущийПлатеж, "sender.inn"));
		ПараметрыПлатежа.Вставить("ОтправительКПП", ПолучитьЗначение(ТекущийПлатеж, "sender.kpp"));

		УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыПлатежа.ОтправительИНН, ПараметрыПлатежа.ОтправительКПП);
		Если УчастникГрузоперевозки <> Неопределено Тогда
			ПараметрыПлатежа.Вставить("ОтправительКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
			ПараметрыПлатежа.Вставить("ОтправительКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
		КонецЕсли;

		ПараметрыПлатежа.Вставить("ГрузоперевозчикИНН", ПолучитьЗначение(ТекущийПлатеж, "carrier.inn"));
		ПараметрыПлатежа.Вставить("ГрузоперевозчикКПП", ПолучитьЗначение(ТекущийПлатеж, "carrier.kpp"));

		УчастникГрузоперевозки = УчастникГрузоперевозкиПоИННиКПП(ПараметрыПлатежа.ГрузоперевозчикИНН, ПараметрыПлатежа.ГрузоперевозчикКПП);
		Если УчастникГрузоперевозки <> Неопределено Тогда
			ПараметрыПлатежа.Вставить("ГрузоперевозчикКонтрагентСсылка", УчастникГрузоперевозки.Ссылка);
			ПараметрыПлатежа.Вставить("ГрузоперевозчикКонтрагентНаименование", УчастникГрузоперевозки.Наименование);
		КонецЕсли;

		ПараметрыПлатежа.Вставить("СуммаНаложенногоПлатежа", ПолучитьЗначение(ТекущийПлатеж, "sum",, 0));
		ПараметрыПлатежа.Вставить("ДатаРегистрацииНаложенногоПлатежа", ПолучитьЗначение(ТекущийПлатеж, "dateRegistration", "Дата", 0));
		
		СписокПлатежей.Добавить(ПараметрыПлатежа);
		
	КонецЦикла;
	
	Результат.Вставить("СписокПлатежей", СписокПлатежей);
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСостояниеОпцииКурьерика(СтруктураОтвета, Результат)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Комментарий = ПолучитьЗначение(СтруктураОтвета, "comment",, "");
	ОпцияДоступна = ПолучитьЗначение(СтруктураОтвета, "activity",, Ложь);
	СрокДействия = ПолучитьЗначение(СтруктураОтвета, "expirationdate",, Дата(1, 1, 1));
	Баланс = ПолучитьЗначение(СтруктураОтвета, "balance",, 0);
	
	Результат.Вставить("Комментарий", Комментарий);
	Результат.Вставить("ОпцияДоступна", ОпцияДоступна);
	Результат.Вставить("СрокДействия", СрокДействия);
	Результат.Вставить("Баланс", Баланс);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьЖурналЗаказовНаДоставкуИзСервиса(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	БлокСтраницыОтвета = ПолучитьЗначение(СтруктураОтвета, "metadata");
	
	ПараметрыСтраницы = Новый Структура();
	ПараметрыСтраницы.Вставить("ТекущаяСтраница", ПолучитьЗначение(БлокСтраницыОтвета, "currentPage",, 1));
	ПараметрыСтраницы.Вставить("ПредыдущаяСтраница", ПолучитьЗначение(БлокСтраницыОтвета, "prevPage",, 1));
	ПараметрыСтраницы.Вставить("СледующаяСтраница", ПолучитьЗначение(БлокСтраницыОтвета, "nextPage",, 1));
	ПараметрыСтраницы.Вставить("КоличествоСтраниц", ПолучитьЗначение(БлокСтраницыОтвета, "totalPages",, 1));
	
	Результат.Вставить("Страницы", ПараметрыСтраницы);
	
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",, Новый Структура());
	СписокЗаказовОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items",, Новый Массив());
	
	СписокЗаказов = Новый Массив();
	Для Каждого ТекущийЗаказ Из СписокЗаказовОтвета Цикл
		
		ПараметрыЗаказа = Новый Структура;
		
		ЗначениеДаты = ПолучитьЗначение(ТекущийЗаказ, "orderedAt",, "");
		ПараметрыЗаказа.Вставить("ДатаЗаказа", ПрочитатьДатуJSONБезРазделителя(ЗначениеДаты));
		
		ЗначениеДаты = ПолучитьЗначение(ТекущийЗаказ, "orderDates.derivalFromOspSender",, "");
		ПараметрыЗаказа.Вставить("ДатаОтгрузки", ПрочитатьДатуJSONБезРазделителя(ЗначениеДаты));
		
		ДатаИсполненияЗаказа = ПолучитьЗначение(ТекущийЗаказ, "orderDates.finish",, "");
		Если ЗначениеЗаполнено(ДатаИсполненияЗаказа) Тогда
			ЗначениеДаты = ДатаИсполненияЗаказа;
		Иначе
			
			ЗначениеДаты = ПолучитьЗначение(ТекущийЗаказ, "orderDates.arrivalToOspReceiver",, "");
			Если ЗначениеЗаполнено(ЗначениеДаты) Тогда
				ЗначениеДаты = ЗначениеДаты + " 00:00:00";
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЗаказа.Вставить("ДатаДоставки", ПрочитатьДатуJSONБезРазделителя(ЗначениеДаты));
		
		ПараметрыЗаказа.Вставить("Идентификатор", ПолучитьЗначение(ТекущийЗаказ, "orderId",, ""));
		ПараметрыЗаказа.Вставить("ТрекНомер", "");
		ПараметрыЗаказа.Вставить("НомерЗаказа", ПолучитьЗначение(ТекущийЗаказ, "orderId",, ""));
		
		ПараметрыЗаказа.Вставить("ПрогрессВыполнения", ПолучитьЗначение(ТекущийЗаказ, "progressPercent",, ""));
		
		ПараметрыЗаказа.Вставить("Сумма", ПолучитьЗначение(ТекущийЗаказ, "totalSum",, 0));
		ПараметрыЗаказа.Вставить("Состояние", ПолучитьЗначение(ТекущийЗаказ, "stateName",, ""));
		ПараметрыЗаказа.Вставить("СостояниеИдентификатор", ПолучитьЗначение(ТекущийЗаказ, "state",, ""));
		ПараметрыЗаказа.Вставить("Отправитель", Неопределено);
		ПараметрыЗаказа.Вставить("ОтправительНаименование", ПолучитьЗначение(ТекущийЗаказ, "sender.name",, ""));
		ПараметрыЗаказа.Вставить("ПлательщикНаименование", ПолучитьЗначение(ТекущийЗаказ, "payer.name",, ""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "derival.address",, ""));
		ПараметрыЗаказа.Вставить("Получатель", Неопределено);
		ПараметрыЗаказа.Вставить("ПолучательНаименование", ПолучитьЗначение(ТекущийЗаказ, "receiver.name",, ""));
		ПараметрыЗаказа.Вставить("АдресДоставкиПредставление", ПолучитьЗначение(ТекущийЗаказ, "arrival.address",, ""));
		
		ПараметрыЗаказа.Вставить("ВариантОтгрузки",
			?(ПолучитьЗначение(ТекущийЗаказ, "derival.Address",, "") = ПолучитьЗначение(ТекущийЗаказ, "derival.terminalAddress",, ""),
				НСтр("ru = 'От терминала'"),
				НСтр("ru = 'От адреса'")));
		
		ПараметрыЗаказа.Вставить("ВариантДоставки",
			?(ПолучитьЗначение(ТекущийЗаказ, "arrival.Address",, "") = ПолучитьЗначение(ТекущийЗаказ, "arrival.terminalAddress",, ""),
				НСтр("ru = 'До терминала'"),
				НСтр("ru = 'До адреса'")));
		
		ЕстьОплатыПоДокументам = Ложь;
		СписокПечатныхФорм = Новый СписокЗначений();
		СписокДокументов = Новый СписокЗначений();
		
		Если ТекущийЗаказ.Свойство("documents")
			И ТипЗнч(ТекущийЗаказ.documents) = Тип("Массив")
			И ТекущийЗаказ.documents.Количество() > 0 Тогда
			
			СписокДокументов.ЗагрузитьЗначения(ТекущийЗаказ.documents);
			
			Для Каждого СтрокаДокументОснование Из ТекущийЗаказ.documents Цикл
				
				Если СтрокаДокументОснование.payment = Истина Тогда
					ЕстьОплатыПоДокументам = Истина;
				КонецЕсли;
				
				Если СтрокаДокументОснование.type = "shipping"
					И СтрокаДокументОснование.availableDocs.Количество() > 0 Тогда
					
					СписокПечатныхФорм.Добавить(
						Новый Структура("uid, id",
							СтрокаДокументОснование.uid,
							СтрокаДокументОснование.id),
						СтрСоединить(СтрокаДокументОснование.availableDocs, ","));
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыЗаказа.Вставить("СписокДокументов", СписокДокументов);
		ПараметрыЗаказа.Вставить("СписокПечатныхФорм", СписокПечатныхФорм);
		ПараметрыЗаказа.Вставить("ДоступнаПечать", СписокПечатныхФорм.Количество() > 0);
		
		ПараметрыЗаказа.Вставить("Оплачен", ПолучитьЗначение(ТекущийЗаказ, "isPaid",, Ложь)
			И ЕстьОплатыПоДокументам);
		
		ПараметрыЗаказа.Вставить("ОтправительТерминал", ПолучитьЗначение(ТекущийЗаказ, "derival.terminalName",, ""));
		ПараметрыЗаказа.Вставить("ПолучательТерминал", ПолучитьЗначение(ТекущийЗаказ, "arrival.terminalName",, ""));
		
		ПараметрыЗаказа.Вставить("ПеревозчикНаименование", "");
		ПараметрыЗаказа.Вставить("ПеревозчикИдентификатор", "");
		ПараметрыЗаказа.Вставить("ТарифНаименование", "");
		ПараметрыЗаказа.Вставить("ТарифИдентификатор", "");
		
		ПараметрыЗаказа.Вставить("НомерЗаказаДляПечати", ПолучитьЗначение(ТекущийЗаказ, "orderNumber",, ""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "derival.address",, ""));
		ПараметрыЗаказа.Вставить("АдресОтгрузкиТипНаименование", "");
		ПараметрыЗаказа.Вставить("АдресДоставкиНаименование", ПолучитьЗначение(ТекущийЗаказ, "arrival.address",, ""));
		ПараметрыЗаказа.Вставить("АдресДоставкиТипНаименование", "");
		
		ПараметрыЗаказа.Вставить("АдресОтгрузкиГород", ПолучитьЗначение(ТекущийЗаказ, "derival.city",, ""));
		ПараметрыЗаказа.Вставить("АдресДоставкиГород", ПолучитьЗначение(ТекущийЗаказ, "arrival.city",, ""));
		
		ПараметрыЗаказа.Вставить("ДоступнаОтмена", Ложь);
		ПараметрыЗаказа.Вставить("КоличествоГрузовыхМест", ПолучитьЗначение(ТекущийЗаказ, "freight.places",, 0));
		ПараметрыЗаказа.Вставить("ГрузВес", ПолучитьЗначение(ТекущийЗаказ, "freight.weight",, 0));
		ПараметрыЗаказа.Вставить("ГрузОбъем", ПолучитьЗначение(ТекущийЗаказ, "freight.volume",, 0));
		ПараметрыЗаказа.Вставить("ГрузДлина", ПолучитьЗначение(ТекущийЗаказ, "freight.length",, 0));
		ПараметрыЗаказа.Вставить("ГрузШирина", ПолучитьЗначение(ТекущийЗаказ, "freight.width",, 0));
		ПараметрыЗаказа.Вставить("ГрузВысота", ПолучитьЗначение(ТекущийЗаказ, "freight.height",, 0));
		ПараметрыЗаказа.Вставить("ГрузОписание", ПолучитьЗначение(ТекущийЗаказ, "freight.name",, ""));
		
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "sender.contacts",, ""));
		ПараметрыЗаказа.Вставить("ОтправительКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "sender.phones",, ""));
		
		Если ПолучитьЗначение(ТекущийЗаказ, "receiver.anonym",, Ложь) Тогда
			ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "receiver.name",, ""));
			ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "receiver.anonymPhone",, ""));
		Иначе
			ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоНаименование", ПолучитьЗначение(ТекущийЗаказ, "receiver.contacts",, ""));
			ПараметрыЗаказа.Вставить("ПолучательКонтактноеЛицоТелефонПредставление", ПолучитьЗначение(ТекущийЗаказ, "receiver.phones",, ""));
		КонецЕсли;
		
		ПараметрыЗаказа.Вставить("НаложенныйПлатежПолучен", ПолучитьЗначение(ТекущийЗаказ, "withWebOrder",, Ложь));
		ПараметрыЗаказа.Вставить("СуммаНаложенногоПлатежа", ПолучитьЗначение(ТекущийЗаказ, "webOrderItemsSum",, 0));
		ПараметрыЗаказа.Вставить("ЭтоМультизаказ", ПолучитьЗначение(ТекущийЗаказ, "documents",, Новый Массив).Количество() > 1);
		ПараметрыЗаказа.Вставить("КартинкаИдентификатор", 0);
		ПараметрыЗаказа.Вставить("МультизаказТипНаименование", "");
		ПараметрыЗаказа.Вставить("МультизаказТипИдентификатор", "");
		ПараметрыЗаказа.Вставить("МультизаказИдентификатор", "");
		ПараметрыЗаказа.Вставить("МультизаказДата", Дата(1, 1, 1));
		ПараметрыЗаказа.Вставить("МультизаказПредставление", "");
		ПараметрыЗаказа.Вставить("МультизаказНомер", "");
		ПараметрыЗаказа.Вставить("КОплатеНаличные", 0);
		ПараметрыЗаказа.Вставить("КОплатеКарта", 0);
		ПараметрыЗаказа.Вставить("ПунктВыдачи", "");
		
		СписокЗаказов.Добавить(ПараметрыЗаказа);
		
	КонецЦикла;
	
	Результат.Вставить("Список", СписокЗаказов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСписокСостоянийЗаказовИзСервиса(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗаказов = ПолучитьЗначение(СтруктураОтвета, "data",, Новый Массив());
	
	Результат.Вставить("Список", СписокЗаказов);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьПечатнуюФормуИзСервиса(СтруктураОтвета, Результат)
	
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки")
		И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Список = ПолучитьЗначение(СтруктураОтвета, "data",, Новый Структура());
	
	Результат.Вставить("Список", Список);
	
КонецПроцедуры

Процедура ОбработатьРезультатЗапросаПолучитьСостоянияЗаказовНаДоставку(СтруктураОтвета, Результат, ГрупповаяОбработка = Ложь)
	
	// Заполним ошибки
	ОбработатьБлокОшибокРезультатаЗапроса(СтруктураОтвета, Результат);
	
	Если Результат.Свойство("Ошибки") И Результат.Ошибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним список документов
	БлокСпискаОтвета = ПолучитьЗначение(СтруктураОтвета, "_embedded",,Новый Структура());
	СписокЗаказовОтвета = ПолучитьЗначение(БлокСпискаОтвета, "items",,Новый Массив());
	
	Для Каждого ДанныеЗаказа Из СписокЗаказовОтвета Цикл
		Результат.Список.Вставить(ДанныеЗаказа.id, ДанныеЗаказа.status);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонвертацияДанных

Процедура ДобавитьКолонкиТаблицыОписания(ТаблицаИсточник, Имя, Префикс = "")
	
	Таблица = Новый ТаблицаЗначений;
	
	Если Имя = "PageParameters" Тогда
		
		Таблица.Колонки.Добавить("Страница",          СервисДоставкиСлужебный.Типы().Число, "number");
		Таблица.Колонки.Добавить("РазмерСтраницы",    СервисДоставкиСлужебный.Типы().Число, "size");
		Таблица.Колонки.Добавить("КоличествоСтрок",   СервисДоставкиСлужебный.Типы().Число, "totalElements");
		Таблица.Колонки.Добавить("КоличествоСтраниц", СервисДоставкиСлужебный.Типы().Число, "totalPages");
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено описание данных сервиса %1'"), Имя);
		
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаИсточник) <> Тип("ТаблицаЗначений") Тогда
		ТаблицаИсточник = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если Префикс <> "" Тогда
		Префикс = Префикс + ".";
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Таблица.Колонки Цикл
		ТаблицаИсточник.Колонки.Добавить(ЭлементКоллекции.Имя, ЭлементКоллекции.ТипЗначения, Префикс + ЭлементКоллекции.Заголовок);
	КонецЦикла;
	
КонецПроцедуры

// Получение структуры данных по абсолютному пути.
// Параметры:
//  Путь - Строка - например, "pathToRoot[0].categories".
//
// Возвращаемое значение:
//  Произвольный - возвращаемые данные.
//
Функция ПолучитьЗначенияДанныеСтруктурыПоАбсолютномуПути(Значение, Путь, Отказ)
	
	СвойстваПути = СтрРазделить(Путь, ".");
	Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	Возврат Результат;
	
КонецФункции

// Получить значение данных структуры в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив - элементы пути, например  pathToRoot[0]; categories.
//  Отказ - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваСтруктурыВРекурсии(Знач Значение, Знач СвойстваПути, Отказ = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если ТипЗнч(Значение) <> Тип("Структура")
		ИЛИ Значение.Свойство(Свойство) = Ложь Тогда
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваСтруктурыВРекурсии(Значение, СвойстваПути, Отказ);
	КонецЕсли;
	
КонецФункции

// Преобразование массива структур в таблицу значений, структуры в структуру.
//
// Параметры:
//  Коллекция				 - Массив - массив структур.
//  ОписаниеТаблицыЗначений	 - ТаблицаЗначений - описание результирующей таблицы.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - результат преобразования.
//
Функция ПреобразоватьКоллекциюПоТаблицеЗначений(Знач Источник, Знач ОписаниеТаблицыЗначений, ТипРезультата = Неопределено)
	
	Если ТипЗнч(Источник) = Тип("Массив") И Источник.Количество() = 0 Тогда
		Возврат ОписаниеТаблицыЗначений;
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") И НЕ ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ОписаниеТаблицыЗначений.Скопировать().Добавить());
	КонецЕсли;
	
	Если ТипРезультата = Неопределено Тогда
		Если ТипЗнч(Источник) = Тип("Массив") Тогда
			ТипРезультата = Тип("ТаблицаЗначений");
		Иначе
			ТипРезультата = ТипЗнч(Источник);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитыЧерезТочку = Новый Соответствие; // Реквизиты, получаемые через точку.
	ПравилаКонвертации  = Новый Соответствие; // Список конвертаций значений "*".
	ВложенныеКоллекции  = Новый Соответствие; // Список вложенных коллекций "|".
	
	// Создание колонок без типов.
	ВременнаяТаблица = Новый ТаблицаЗначений;
	Для каждого КолонкаТаблицыОписания Из ОписаниеТаблицыЗначений.Колонки Цикл
		
		// Поиск правил преобразования.
		ИмяСвойстваИсточника = КолонкаТаблицыОписания.Заголовок;
		
		РазделительПравила = СтрНайти(ИмяСвойстваИсточника, "*");
		Если РазделительПравила <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительПравила - 1));
			ИмяПравила = Сред(КолонкаТаблицыОписания.Заголовок, РазделительПравила + 1);
		КонецЕсли;
		
		РазделительОписание = СтрНайти(ИмяСвойстваИсточника, "|");
		Если РазделительОписание <> 0 Тогда
			ИмяСвойстваИсточника = СокрП(Лев(ИмяСвойстваИсточника, РазделительОписание - 1));
			ИмяОписания = Сред(КолонкаТаблицыОписания.Заголовок, РазделительОписание + 1);
		КонецЕсли;
		
		НовоеИмяСвойстваИсточника = ИмяСвойстваИсточника;
		
		// Поиск реквизитов в структуре.
		Если СтрНайти(ИмяСвойстваИсточника, ".") Тогда
			НовоеИмяСвойстваИсточника = СтрЗаменить(ИмяСвойстваИсточника, ".", "_");
			РеквизитыЧерезТочку.Вставить(ИмяСвойстваИсточника, НовоеИмяСвойстваИсточника);
		КонецЕсли;
		
		// Добавления правила конвертации.
		Если РазделительПравила <> 0 Тогда
			ПравилаКонвертации.Вставить(НовоеИмяСвойстваИсточника, ИмяПравила);
		КонецЕсли;
		
		// Добавления описание вложенной коллекции.
		Если РазделительОписание <> 0 Тогда
			ВложенныеКоллекции.Вставить(НовоеИмяСвойстваИсточника, ИмяОписания);
		КонецЕсли;
		
		ВременнаяТаблица.Колонки.Добавить(НовоеИмяСвойстваИсточника,, КолонкаТаблицыОписания.Имя);
		
	КонецЦикла;
	
	// Заполнение данных таблицы обработки.
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		
		// Источником данных является массив структур.
		
		Для каждого СтрокаИсточника Из Источник Цикл
			НоваяСтрока = ВременнаяТаблица.Добавить();
			Если СтрокаИсточника <> Неопределено Тогда // Возможно значение неопределено.
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
			КонецЕсли;
			                                       
			// Заполнение реквизитов в структуре.
			Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
				СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
				НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(СтрокаИсточника, СоставСтруктурыРеквизита);
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		
		// Источником данных является структура.
		
		НоваяСтрока = ВременнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Источник);
		
		// Заполнение реквизитов в структуре.
		Для каждого Реквизит Из РеквизитыЧерезТочку Цикл
			СоставСтруктурыРеквизита = СтрРазделить(Реквизит.Ключ, ".", Ложь);
			НоваяСтрока[Реквизит.Значение] = ЗначениеСвойстваСтруктурыВРекурсии(Источник, СоставСтруктурыРеквизита);
		КонецЦикла;
		
	КонецЕсли;
	
	// Обработка по правилам преобразования "*".
	Для каждого ЭлементПреобразования Из ПравилаКонвертации Цикл
		ДанныеОбработки = ВременнаяТаблица.ВыгрузитьКолонку(ЭлементПреобразования.Ключ);
		ОбработанныеЗначения = КонвертироватьЗначениеСервиса(ДанныеОбработки, ЭлементПреобразования.Значение);
		Если ТипЗнч(ОбработанныеЗначения) = Тип("Массив") Тогда
			ВременнаяТаблица.ЗагрузитьКолонку(ОбработанныеЗначения, ЭлементПреобразования.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Обработка по описаниям вложенных коллекций "|".
	Для каждого ЭлементОписания Из ВложенныеКоллекции Цикл
		
		ТаблицаОписанияДанных = Неопределено;
		ДобавитьКолонкиТаблицыОписания(ТаблицаОписанияДанных, ЭлементОписания.Значение);
		Для каждого ЭлементКоллекции Из ВременнаяТаблица Цикл
			ОбработанныеЗначения = ПреобразоватьКоллекциюПоТаблицеЗначений(
				ЭлементКоллекции[ЭлементОписания.Ключ], ТаблицаОписанияДанных);
			ЭлементКоллекции[ЭлементОписания.Ключ] = ОбработанныеЗначения;
		КонецЦикла;
		
	КонецЦикла;
	
	// Обратное переименование колонок.
	Для каждого КолонкаТаблицыОбработки Из ВременнаяТаблица.Колонки Цикл
		КолонкаТаблицыОбработки.Имя = КолонкаТаблицыОбработки.Заголовок;
	КонецЦикла;
	
	// Финальная подготовка результата преобразования.
	Если ТипРезультата = Тип("ТаблицаЗначений") Тогда
		
		// Заполнение таблицы результата.
		Результат = ОписаниеТаблицыЗначений.Скопировать();
		Для каждого СтрокаТаблицы Из ВременнаяТаблица Цикл
			ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаТаблицы);
		КонецЦикла;
		
	ИначеЕсли ТипРезультата = Тип("Структура") И ВременнаяТаблица.Количество() = 1 Тогда
		
		// Заполнение структуры
		Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ВременнаяТаблица[0]);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Преобразовать значение полученное из сервиса.
//
// Параметры:
//  Данные			- Произвольный - данные, полученные из сервиса.
//  Правило			- Строка - имя обработчика.
//  КодСостояния	- Число - код состояния ответа сервиса.
// 
// Возвращаемое значение:
//  Произвольный - возвращаемое значение разбора.
//
Функция КонвертироватьЗначениеСервиса(Значение, Правило, КодСостояния = 200)
	
	Перем Результат;

	Если Правило = "ИстинаПоКоду200" Тогда
		
		Результат = (КодСостояния = 200);
		
	ИначеЕсли ТипЗнч(Правило) = Тип("Строка") Тогда
		
		Результат = ЗначениеСвойстваСтруктурыВРекурсии(Значение, СтрРазделить(Правило, "."));
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Ошибка десериализации значения'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Добавление значение в структуру с учетом обязательности заполнения.
//
// Параметры:
//  Результат			 - Структура - переменная для добавления значения.
//  Поле				 - Строка	 - имя добавляемого поля.
//  Значение			 - Произвольный	 - добавляемое значение
//  ОбязательныйРеквизит - Булево		 - признак обязательности значения.
//
Процедура ДобавитьЗначение(Результат, Знач Поле, Знач Значение, ОбязательныйРеквизит = Ложь)
	
	Если Не ОбязательныйРеквизит И Не ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	ПозицияРазделителя = СтрНайти(Поле, ".");
	Если ПозицияРазделителя > 0 Тогда
		МассивПолей = СтрРазделить(Поле, ".");
		ИмяСвойства = МассивПолей[0];
		Если Не Результат.Свойство(ИмяСвойства) Тогда
			Результат.Вставить(ИмяСвойства);
		КонецЕсли;
		ДобавитьЗначение(Результат[ИмяСвойства], Сред(Поле, ПозицияРазделителя + 1), Значение, ОбязательныйРеквизит);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Значение = СокрЛП(Значение);
	КонецЕсли;
	
	Результат.Вставить(Поле, Значение);
	
КонецПроцедуры

Функция ПолучитьЗначение(Знач Источник, Знач ИмяРеквизита, ТипЗначения = "", ЗначениеПоУмолчанию = Неопределено)
	
	Значение = ЗначениеПоУмолчанию;
	
	МассивПолей = СтрРазделить(ИмяРеквизита, ".");
	КоличествоПолей = МассивПолей.Количество()-1;
	
	Для Ид = 0 По КоличествоПолей-1 Цикл
		ИмяСвойства = МассивПолей[Ид];
		
		Если ТипЗнч(Источник) = Тип("Структура")
			И Источник.Свойство(ИмяСвойства) Тогда
			Источник = Источник[ИмяСвойства];
		Иначе
			Возврат Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ИмяРеквизита = МассивПолей[КоличествоПолей];
	
	Если ТипЗнч(Источник) = Тип("Структура")
		И Источник.Свойство(ИмяРеквизита) Тогда
		
		ИсходноеЗначение = Источник [ИмяРеквизита];
		
		Если ИсходноеЗначение = Неопределено Тогда
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Массив") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Структура") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Дата") Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗнч(ИсходноеЗначение) = Тип("Строка") И ВРег(ИсходноеЗначение) = "NONE" Тогда
			Значение = ЗначениеПоУмолчанию;
		ИначеЕсли ТипЗначения = "" Тогда
			Значение = ИсходноеЗначение;
		ИначеЕсли ТипЗначения = "Дата" Тогда
			Значение = СтрокаВДату(ИсходноеЗначение);
		ИначеЕсли ТипЗначения = "Число" Тогда
			Значение = СтрокаВЧисло(ИсходноеЗначение);
		ИначеЕсли ТипЗначения = "ХранилищеЗначения" Тогда
			Значение = ХранилищеЗначенияИзJSON(ИсходноеЗначение);
		Иначе
			ТребуемыйТип	= Новый ОписаниеТипов(ТипЗначения);
			Значение		= ТребуемыйТип.ПривестиЗначение(ИсходноеЗначение);
		КонецЕсли; 
		
		Если Значение = Неопределено Тогда
			Значение = ЗначениеПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Значение;
	
КонецФункции

Функция ЗначениеВСтрокуJSON(Параметры, Отказ = Ложь, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	Попытка
		ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
		ЗаписатьJSON(ЗаписьJSON, Параметры,,"ПреобразованиеТиповЗначений", СервисДоставки);
	Исключение
		Отказ = Истина;
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
	КонецПопытки;
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ХранилищеЗначенияИзJSON(Значение)
	
	Результат = "";
	Значение = СокрЛП(Значение);
	
	Если Значение <> "" Тогда
		
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Значение);
		Попытка
			ЗначениеИзJSON = СериализаторXDTO.ПрочитатьJSON(ЧтениеJSON);
		Исключение
			Возврат Результат;
		КонецПопытки;
		
		ЧтениеJSON.Закрыть();
	
		Если ЗначениеЗаполнено(ЗначениеИзJSON) 
			И ТипЗнч(ЗначениеИзJSON) = Тип("ХранилищеЗначения") Тогда
			Результат = ЗначениеИзJSON.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СтрокаВДату(СтрокаДанных)
	
	Результат = Дата(1,1,1);
	
	Если СтрокаДанных = ПустаяДатаJSON() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат = ПрочитатьДатуJSON(СтрокаДанных, ФорматДатыJSON.ISO);
	
	Возврат Результат;
	
КонецФункции

Функция ПустаяДатаJSON() 

	Возврат ЗаписатьДатуJSON('00010101', ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата);

КонецФункции

Функция СтрокаВЧисло(Значение)
	
	Если ТипЗнч(Значение) = Тип("Число") Тогда
		Результат = Значение;
	ИначеЕсли ТипЗнч(Значение) = Тип("Строка") Тогда
		НовоеЗначение = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Значение);
		Если НовоеЗначение = Неопределено Тогда
			Результат = 0;
		Иначе
			Результат = НовоеЗначение;
		КонецЕсли;
		
	Иначе
		Результат = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаВСтрокуISO(Знач Значение)
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат "";
	КонецЕсли;
	
	Результат = ЗаписатьДатуJSON(Значение, ФорматДатыJSON.ISO,ВариантЗаписиДатыJSON.УниверсальнаяДата);

	Возврат Результат;
	
КонецФункции

Функция ПолучитьДокументыОснованияПоИдентификаторам(ИдентификаторыДокументов)

	ДокументыОснования = Новый СписокЗначений;

	Если ТипЗнч(ИдентификаторыДокументов) = Тип("Массив") Тогда
	
	МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку = МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(Истина);
	
	Для Каждого Идентификатор Из ИдентификаторыДокументов Цикл
		ДокументОснование = ДокументОснованияЗаказаНаДоставкуПоGUID(Идентификатор,
			МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку);
		Если ДокументОснование <> Неопределено Тогда
			ДокументыОснования.Добавить(ДокументОснование);
		КонецЕсли;
	КонецЦикла;
	
	КонецЕсли;
	
	Возврат ДокументыОснования;

КонецФункции

#КонецОбласти

#Область ПолучениеДанныхИзЛокальнойБазыДанных

// Менеджеры объектов документов-оснований заказа на доставку.
// 
// Параметры:
//  ИсключитьНедоступныеТипы - Булево - Исключить типы, у которых для пользователя нет прав на чтение
// 
// Возвращаемое значение:
//  Массив - Менеджеры объектов документов-оснований заказа на доставку
Функция МенеджерыОбъектовДокументовОснованийЗаказаНаДоставку(ИсключитьНедоступныеТипы = Ложь)
	
	Результат = Новый Массив();
	
	ОжидаемыеТипыДокументов = Метаданные.ОпределяемыеТипы.ОснованиеЗаказаСервисДоставки.Тип.Типы();
			
	Для Каждого ОжидаемыйТип Из ОжидаемыеТипыДокументов Цикл
				
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ОжидаемыйТип);
		Если ОбъектМетаданных <> Неопределено
			И ОбщегоНазначения.ЭтоСсылка(ОжидаемыйТип) 
			И (НЕ ИсключитьНедоступныеТипы ИЛИ (ПравоДоступа("Чтение", ОбъектМетаданных))) Тогда
				
			НаименованиеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(ОжидаемыйТип);
			НаименованиеТипа = СтрЗаменить(НаименованиеТипа, "Ссылка", "");
			Результат.Добавить(ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаименованиеТипа));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Поиск по GUID документа-основания заказа на доставку
// 
// Параметры:
//  ИдентификаторДокумента - Строка(36) - Идентификатор документа
//  МенеджерыОбъектовОжидаемыхТиповДокументов  - массив элементов типа менеджер объекта - менеджеры объектов в которых необходимо искать ссылку по GUID
// 
// Возвращаемое значение:
//  ДокументСсылка, Неопределено - документ-основание заказа на доставку
Функция ДокументОснованияЗаказаНаДоставкуПоGUID(ИдентификаторДокумента, МенеджерыОбъектовОжидаемыхТиповДокументов);
		
	ДокументОснование = Неопределено;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторДокумента) Тогда
		ИдентификаторДокумента = Новый УникальныйИдентификатор(ИдентификаторДокумента);
		
		Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
			
			Для Каждого МенеджерОбъекта ИЗ МенеджерыОбъектовОжидаемыхТиповДокументов Цикл
				ВозможныйДокументОснование = МенеджерОбъекта.ПолучитьСсылку(ИдентификаторДокумента);
				
				УстановитьПривилегированныйРежим(Истина);
				Если ВозможныйДокументОснование.ПолучитьОбъект() <> Неопределено Тогда
					ДокументОснование = ВозможныйДокументОснование;
					УстановитьПривилегированныйРежим(Ложь);
					Прервать;
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

Функция УчастникГрузоперевозкиПоИННиКПП(ИНН, КПП)
	
	УчастникГрузоперевозки = Неопределено;
	
	Если ИННиКППЗаполнены(ИНН, КПП) Тогда 
		
		ТипыОрганизаций = Метаданные.ОпределяемыеТипы.ОрганизацияСервисДоставки.Тип.Типы();
		ТипыКонтрагентов = Метаданные.ОпределяемыеТипы.КонтрагентСервисДоставки.Тип.Типы();
		
		ТекстЗапроса = "НАЧ";
		Для Каждого ТекущийТип Из ТипыОрганизаций Цикл
			
			ТипСтрока = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТекущийТип);
			ТипСтрока = СтрЗаменить(ТипСтрока, "Ссылка", "");
			ТипМетаданных = СтрЗаменить(ТипСтрока, "Справочник.", "");
			
			ОбъектМетаданных = Метаданные.Справочники.Найти(ТипМетаданных);
			Если НЕ ОбъектМетаданных = Неопределено Тогда
				Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("ИНН", Метаданные.Справочники[ТипМетаданных]) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ТекстПодзапроса = "ВЫБРАТЬ
			                  |	Таблица.Ссылка КАК Ссылка,
			                  |	Таблица.Наименование КАК Наименование,
			                  |	1 КАК ЭтоОрганизация
			                  |ИЗ
			                  |	&ИмяТаблицы КАК Таблица
			                  |ГДЕ
			                  |	Таблица.ИНН = &ИНН
			                  |	И Таблица.КПП = &КПП";
			
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИмяТаблицы", ТипСтрока);
			СервисДоставкиПереопределяемый.ОбработатьЗапросПолученияУчастникаГрузоперевозкиПоИННиКПП(ТекстПодзапроса, ТекущийТип);
			ТекстПодзапроса = ТекстПодзапроса + "
												|ОБЪЕДИНИТЬ ВСЕ";
			
			ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса + Символы.ПС;
			
		КонецЦикла;
		
		Для Каждого ТекущийТип Из ТипыКонтрагентов Цикл
			
			ТипСтрока = ОбщегоНазначения.СтроковоеПредставлениеТипа(ТекущийТип);
			ТипСтрока = СтрЗаменить(ТипСтрока, "Ссылка", "");
			ТипМетаданных = СтрЗаменить(ТипСтрока, "Справочник.", "");
			
			ОбъектМетаданных = Метаданные.Справочники.Найти(ТипМетаданных);
			Если НЕ ОбъектМетаданных = Неопределено Тогда
				Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("ИНН", Метаданные.Справочники[ТипМетаданных]) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ТекстПодзапроса = "ВЫБРАТЬ
			                  |	Таблица.Ссылка КАК Ссылка,
			                  |	Таблица.Наименование КАК Наименование,
			                  |	0 КАК ЭтоОрганизация
			                  |ИЗ
			                  |	&ИмяТаблицы КАК Таблица
			                  |ГДЕ
			                  |	Таблица.ИНН = &ИНН
			                  |	И Таблица.КПП = &КПП";
			
			ТекстПодзапроса = СтрЗаменить(ТекстПодзапроса, "&ИмяТаблицы", ТипСтрока);
			СервисДоставкиПереопределяемый.ОбработатьЗапросПолученияУчастникаГрузоперевозкиПоИННиКПП(ТекстПодзапроса, ТекущийТип);
			ТекстПодзапроса = ТекстПодзапроса + "
												|ОБЪЕДИНИТЬ ВСЕ";
			
			ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса + Символы.ПС;
			
		КонецЦикла;
		
		Если ТекстЗапроса <> "НАЧ" Тогда
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧВЫБРАТЬ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ");
			ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-15);
			ТекстЗапроса = ТекстЗапроса + "УПОРЯДОЧИТЬ ПО ЭтоОрганизация УБЫВ";
			
			Запрос = Новый Запрос();
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			
			УстановитьПривилегированныйРежим(Истина);
			Результат = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда 
					УчастникГрузоперевозки = НовыйПараметрыКонтрагента();
					ЗаполнитьЗначенияСвойств(УчастникГрузоперевозки, Выборка);
					УчастникГрузоперевозки.ИНН = ИНН;
					УчастникГрузоперевозки.КПП = КПП;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УчастникГрузоперевозки;
	
КонецФункции

Функция КонтактноеЛицоПоGUID(ИдентификаторКонтактногоЛица)
		
	КонтактноеЛицо = Неопределено;
	
	Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторКонтактногоЛица) Тогда
		ИдентификаторКонтактногоЛица = Новый УникальныйИдентификатор(ИдентификаторКонтактногоЛица);
		
		Если ЗначениеЗаполнено(ИдентификаторКонтактногоЛица) Тогда
			
			ОжидаемыеТипы = Метаданные.ОпределяемыеТипы.КонтактноеЛицоУчастникаГрузоперевозкиСервисДоставки.Тип.Типы();
			
			Для Каждого ОжидаемыйТип Из ОжидаемыеТипы Цикл
				
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ОжидаемыйТип);
				Если ОбъектМетаданных <> Неопределено
					И ОбщегоНазначения.ЭтоСсылка(ОжидаемыйТип) 
					И ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
				
					НаименованиеТипа = ОбщегоНазначения.СтроковоеПредставлениеТипа(ОжидаемыйТип);
					НаименованиеТипа = СтрЗаменить(НаименованиеТипа, "Ссылка", "");
					МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НаименованиеТипа);
					ВозможноеКонтактноеЛицо = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдентификаторКонтактногоЛица));
					
					УстановитьПривилегированныйРежим(Истина);
					Если ВозможноеКонтактноеЛицо.ПолучитьОбъект() <> Неопределено Тогда
						КонтактноеЛицо = ВозможноеКонтактноеЛицо;
						УстановитьПривилегированныйРежим(Ложь);
						Прервать;
					КонецЕсли;
					УстановитьПривилегированныйРежим(Ложь);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонтактноеЛицо;
	
КонецФункции

Функция СкладДокумента(Основание)
	
	Если Основание.Метаданные().Реквизиты.Найти("Склад") <> Неопределено Тогда
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Склад");
	ИначеЕсли Основание.Метаданные().Реквизиты.Найти("СкладОтправитель") <> Неопределено Тогда
		Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "СкладОтправитель");
	Иначе
		Склад = Неопределено;
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции

#КонецОбласти

#Область ПроверкаДанных

Функция ИННиКППЗаполнены(Знач ИНН, Знач КПП)
	
	ИНН = СокрЛП(ИНН);
	КПП = СокрЛП(КПП);
	
	Результат = (ЗначениеЗаполнено(ИНН) И СтрДлина(ИНН) = 10 И ЗначениеЗаполнено(КПП)) 
				ИЛИ (ЗначениеЗаполнено(ИНН) И СтрДлина(ИНН) = 12);
			
	Возврат Результат
			
КонецФункции

#КонецОбласти

#Область ШаблоныДоставки

Функция ОпределитьСценарийПеревозкиПоПараметрам(ПараметрыЗаказа)
	
	СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.ПустаяСсылка();
	
	РегиональнаяДоставка = РегиональнаяДоставка(ПараметрыЗаказа);
	
	Если РегиональнаяДоставка Тогда
		
		СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.Региональный;
		
	Иначе
		Если ПараметрыЗаказа.Груз.Вес = 0 Тогда
			Возврат СценарийПеревозки;
		Иначе
			Если ПараметрыЗаказа.Груз.Вес <= 5 Тогда
				СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.До5кг;
			ИначеЕсли ПараметрыЗаказа.Груз.Вес <= 10 Тогда
				СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.До10кг;
			Иначе
				СценарийПеревозки = Перечисления.СценарииПеревозкиСервисДоставки.Свыше10кг;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СценарийПеревозки;
КонецФункции

Функция РегиональнаяДоставка(ПараметрыЗаказа)
	
	РегиональнаяДоставка = Ложь;
	
	КодыОтправителя = АдресныйКлассификатор.КодыАдреса(ПараметрыЗаказа.Отправитель.Адрес.Значение);
	
	Если НЕ ЗначениеЗаполнено(КодыОтправителя.КодКЛАДР) Тогда
		Возврат РегиональнаяДоставка;
	КонецЕсли;
	
	РегионОтправителя = Лев(КодыОтправителя.КодКЛАДР, 2);

	КодыПолучателя = АдресныйКлассификатор.КодыАдреса(ПараметрыЗаказа.Получатель.Адрес.Значение);
	
	Если НЕ ЗначениеЗаполнено(КодыПолучателя.КодКЛАДР) Тогда
		Возврат РегиональнаяДоставка;
	КонецЕсли;
	
	РегионПолучателя = Лев(КодыПолучателя.КодКЛАДР, 2);
	
	Возврат Не РегионОтправителя = РегионПолучателя;
КонецФункции

#КонецОбласти

#Область ЗагрузкаНаложенныхПлатежей

// Проверяет, есть ли у переданной организации договор подключения к платежной системе с оператором доставки.
// Параметры:
//	Организация - см. СервисДоставкиПереопределяемый.ВозможнаДоставкаНаложеннымПлатежом.Организация
//	Перевозчик - см. СервисДоставкиПереопределяемый.ВозможнаДоставкаНаложеннымПлатежом.Перевозчик 
// Возвращаемое значение:
//	Булево
Функция ВозможнаДоставкаНаложеннымПлатежом(Знач Организация, Знач Перевозчик = Неопределено)
	Результат = Истина;
	СервисДоставкиПереопределяемый.ВозможнаДоставкаНаложеннымПлатежом(Организация, Неопределено, Результат);
	Возврат Результат
КонецФункции 

Процедура ОбработатьДанныеПоНаложеннымПлатежам(ОрганизацияБизнесСети)
	
	Если НЕ ВозможнаДоставкаНаложеннымПлатежом(ОрганизацияБизнесСети) Тогда
		Возврат;
	КонецЕсли;
	КешВозможностиДоставкиНаложеннымПлатежом = Новый Соответствие;
	НевозможенНаложенныйПлатежКоличество = 0;
	ПримерНеобработанногоОснования = Неопределено;
	
	// Для защиты от зацикливания из-за возможных ошибок в переопределяемом модуле
	ЛимитВремениВыполнения = ЛимитВремениВыполненияПоУмолчанию();
	СервисДоставкиПереопределяемый.ЛимитВремениОбработкиПачкиПлатежей(ЛимитВремениВыполнения);
	
	ПериодЗавершения = ТекущаяУниверсальнаяДата() + ЛимитВремениВыполнения;
	
	Пока ТекущаяУниверсальнаяДата() < ПериодЗавершения Цикл
	
		ТаблицаЗагрузки = Новый ТаблицаЗначений;
		ПолучитьЗагруженныеНаложенныеПлатежи(ТаблицаЗагрузки, ОрганизацияБизнесСети);
		
		Если ТаблицаЗагрузки.Количество() = 0 Тогда
			Прервать;
		КонецЕсли; 
		
		ПодтвержденныеОснования = Новый Массив;
		Для каждого Элем Из ТаблицаЗагрузки Цикл
			АтрибутыПлатежа = НовыйДанныеНаложенногоПлатежа();
			ЗаполнитьЗначенияСвойств(АтрибутыПлатежа, Элем);
			ТекстОшибки = "";
			ПлатежОбработанУспешно = Ложь;
			
			// Проверим возможность обработки наложенного платежа
			Если КешВозможностиДоставкиНаложеннымПлатежом.Получить(Элем.Перевозчик) = Неопределено Тогда
				КешВозможностиДоставкиНаложеннымПлатежом.Вставить(
					Элем.Перевозчик,
					ВозможнаДоставкаНаложеннымПлатежом(ОрганизацияБизнесСети, Элем.Перевозчик));
			КонецЕсли;
			
			Если КешВозможностиДоставкиНаложеннымПлатежом.Получить(Элем.Перевозчик) = Ложь Тогда
				НевозможенНаложенныйПлатежКоличество = НевозможенНаложенныйПлатежКоличество + 1;
				Если НЕ ЗначениеЗаполнено(ПримерНеобработанногоОснования) 
					И ЗначениеЗаполнено(АтрибутыПлатежа.ДокументОснование) Тогда
					ПримерНеобработанногоОснования = АтрибутыПлатежа.ДокументОснование;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			СервисДоставкиПереопределяемый.ОбработатьДанныеНаложенногоПлатежа(АтрибутыПлатежа, ПлатежОбработанУспешно, ТекстОшибки);
			Если ПлатежОбработанУспешно = Истина Тогда
				ПодтвержденныеОснования.Добавить(Элем.ИдентификаторДокумента);
			Иначе
				ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Обработка наложенных платежей.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,
					Элем.ИдентификаторДокумента,
					ТекстОшибки);
				
			КонецЕсли; 
		КонецЦикла; 
		
		Если НевозможенНаложенныйПлатежКоличество > 0 Тогда
			ШаблонОшибки = НСтр(
				"ru = 'Не удалось обработать %1 платежей, по ним отсутствует возможность наложенного платежа
				|Пример такого документа: %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, 
				НевозможенНаложенныйПлатежКоличество, 
				ПримерНеобработанногоОснования);
			ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Обработка наложенных платежей.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);
				
		КонецЕсли; 
		
		Если ПодтвержденныеОснования.Количество() = 0 Тогда
			Для каждого Элем Из ТаблицаЗагрузки Цикл
				
				// отметить ошибку обработки
				ЗаписьДанныхНаложенныхПлатежей = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.СоздатьМенеджерЗаписи();
				ЗаписьДанныхНаложенныхПлатежей.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
				ЗаписьДанныхНаложенныхПлатежей.ИдентификаторДокумента = Элем.ИдентификаторДокумента;
				ЗаписьДанныхНаложенныхПлатежей.Прочитать();
				
				Если НЕ ЗаписьДанныхНаложенныхПлатежей.Выбран() Тогда
					Продолжить;
				КонецЕсли; 
				
				ЗаписьДанныхНаложенныхПлатежей.Состояние = Перечисления.СостоянияОбработкиНаложенныхПлатежейСервисДоставки.Ошибка;
				ЗаписьДанныхНаложенныхПлатежей.Записать();
				
			КонецЦикла; 
			Прервать;
		КонецЕсли; 
		
		ПодтвердитьЗагрузкуНаложенныхПлатежей(ОрганизацияБизнесСети, ПодтвержденныеОснования);
	
	КонецЦикла;

КонецПроцедуры

Функция ЛимитВремениВыполненияПоУмолчанию()
	
	Возврат 300;
	
КонецФункции
 
// Возвращает данные для фиксации их в хост-системе.
// Параметры:
//	ЗагруженныеДанные - ТаблицаЗначений:
//	*ДатаРегистрацииПлатежа - Дата
//	*СуммаПлатежа - Число
//	*ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки
//	*Отправитель - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки
//	*Перевозчик - ОпределяемыйТип.УчастникГрузоперевозкиСервисДоставки
//	*ИдентификаторДокумента - УникальныйИдентификатор - идентификатор заказа на доставку
//	Организация - ОпределяемыйТип.Организация - организация, по которой нужно получить данные наложенных платежей.
//	НачальнаяДата - Дата, Неопределено - начальная дата получаемых документов (дата регистрации документа)
//	РазмерПачки - Число - размер получаемой пачки документов
Процедура ПолучитьЗагруженныеНаложенныеПлатежи(
	ЗагруженныеДанные, Знач Организация, Знач НачальнаяДата = Неопределено, Знач РазмерПачки = 100)
	
	МаксимальныйРазмерПачки = 100;
	
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
	НачальнаяДата = ТипДата.ПривестиЗначение(ТипДата);
	
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный);
	РазмерПачки = ТипЧисло.ПривестиЗначение(РазмерПачки);
	РазмерПачки = Мин(РазмерПачки, МаксимальныйРазмерПачки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 123456789
	|	НаложенныеПлатежиКОбработке.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	НаложенныеПлатежиКОбработке.ДатаРегистрацииПлатежа КАК ДатаРегистрацииПлатежа,
	|	НаложенныеПлатежиКОбработке.ДокументОснование КАК ДокументОснование,
	|	НаложенныеПлатежиКОбработке.Отправитель КАК Отправитель,
	|	НаложенныеПлатежиКОбработке.Перевозчик КАК Перевозчик,
	|	НаложенныеПлатежиКОбработке.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	РегистрСведений.ДанныеНаложенныхПлатежейСервисДоставки КАК НаложенныеПлатежиКОбработке
	|ГДЕ
	|	НаложенныеПлатежиКОбработке.ОрганизацияБизнесСети = &Организация
	|	И НаложенныеПлатежиКОбработке.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбработкиНаложенныхПлатежейСервисДоставки.Обработать)
	|	И НаложенныеПлатежиКОбработке.ДатаРегистрацииПлатежа >= &НачальнаяДата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрацииПлатежа,
	|	ДокументОснование";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "123456789", Формат(РазмерПачки, "ЧДЦ=0; ЧН=1; ЧГ="));
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("НачальнаяДата", НачальнаяДата);
	Запрос.Текст = ТекстЗапроса;
	
	ЗагруженныеДанные = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Переданные документы будут помечены к удалению, поскольку обработаны.
// Важно(!!!): используется текущее ограничение "При наложенном платеже, одно основание - одна отправка".
// Параметры:
//	Организация - ОпределяемыйТип.Организация - организация, по которой нужно получить данные наложенных платежей.
//	ОбработанныеДанные - Массив из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки
Процедура ПодтвердитьЗагрузкуНаложенныхПлатежей(Знач Организация, Знач ОбработанныеДанные)
	
	ТаблицаСверки = Новый ТаблицаЗначений;
	
	ТаблицаСверки.Колонки.Добавить("ИдентификаторДокумента", Новый ОписаниеТипов("УникальныйИдентификатор")); 
		
	ОбработанныеДанные = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбработанныеДанные);
	Для каждого Элем Из ОбработанныеДанные Цикл
		НовСтрока = ТаблицаСверки.Добавить();
		НовСтрока.ИдентификаторДокумента = Элем;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ОрганизацияБизнесСети", Организация);
	Запрос.Параметры.Вставить("СостоянияОчистки", Перечисления.СостоянияОбработкиНаложенныхПлатежейСервисДоставки.Обработать);
	Запрос.Параметры.Вставить("ТаблицаСверки", ТаблицаСверки);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тз.ИдентификаторДокумента КАК ИдентификаторДокумента
	|ПОМЕСТИТЬ ДляОчистки
	|ИЗ
	|	&ТаблицаСверки КАК тз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаложенныеПлатежиКУдалению.ИдентификаторДокумента КАК ИдентификаторДокумента,
	|	НаложенныеПлатежиКУдалению.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.ДанныеНаложенныхПлатежейСервисДоставки КАК НаложенныеПлатежиКУдалению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДляОчистки КАК ДляОчистки
	|		ПО НаложенныеПлатежиКУдалению.ИдентификаторДокумента = ДляОчистки.ИдентификаторДокумента
	|ГДЕ
	|	НаложенныеПлатежиКУдалению.ОрганизацияБизнесСети = &ОрганизацияБизнесСети
	|	И НаложенныеПлатежиКУдалению.Состояние В(&СостоянияОчистки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаложенныеПлатежиКУдалению.ОрганизацияБизнесСети,
	|	НаложенныеПлатежиКУдалению.ИдентификаторДокумента";
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеНаложенныхПлатежейСервисДоставки");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ОрганизацияБизнесСети", Организация);
		ЭлементБлокировки.ИсточникДанных = ТаблицаСверки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторДокумента", "ИдентификаторДокумента");
		Блокировка.Заблокировать();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.СоздатьНаборЗаписей();
			Набор.Отбор.ОрганизацияБизнесСети.Установить(Организация);
			Набор.Отбор.ИдентификаторДокумента.Установить(Выборка.ИдентификаторДокумента);
			
			Набор.Прочитать();
			
			Если Набор.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Запись = Набор[0];
			Запись.Состояние = Перечисления.СостоянияОбработкиНаложенныхПлатежейСервисДоставки.Удалить;
			Набор.Записать();
			
		КонецЦикла; 

		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru='Сервис доставки.Фиксация обработки данных.'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Записать данные по наложенным платежам к обработке.
// 
// Параметры:
//  ОрганизацияБизнесСети - СправочникСсылка.Организации - Организация бизнес сети
//  СписокПлатежей - Массив - Список платежей (Структура)
Процедура ЗаписатьДанныеПоНаложеннымПлатежамКОбработке(ОрганизацияБизнесСети, СписокПлатежей)
	
	Если СписокПлатежей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Производим безусловную запись в регистр сведений
	ЗаписиКОбработке = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.СоздатьНаборЗаписей();
	ТаблицаКЗагрузке = ЗаписиКОбработке.ВыгрузитьКолонки();
	
	ДатаЗаписи = ТекущаяУниверсальнаяДата();
	
	Для Каждого Элемент Из СписокПлатежей Цикл
		НоваяСтрока = ТаблицаКЗагрузке.Добавить();

		НоваяСтрока.Состояние = Перечисления.СостоянияОбработкиНаложенныхПлатежейСервисДоставки.Обработать;
		НоваяСтрока.ДатаПоследнегоИзменения = ДатаЗаписи;
		
		НоваяСтрока.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
		НоваяСтрока.ИдентификаторДокумента = Новый УникальныйИдентификатор(Элемент.Идентификатор);
		НоваяСтрока.ДатаРегистрацииПлатежа = Элемент.ДатаРегистрацииНаложенногоПлатежа;
		НоваяСтрока.ДокументОснование = Элемент.ДокументОснование;
		НоваяСтрока.Отправитель = Элемент.ОтправительКонтрагентСсылка;
		НоваяСтрока.Перевозчик = Элемент.ГрузоперевозчикКонтрагентСсылка;
		НоваяСтрока.СуммаПлатежа = Элемент.СуммаНаложенногоПлатежа;
		
	КонецЦикла;

	ЗаписиКОбработке.Загрузить(ТаблицаКЗагрузке);
	
	ОтборДляУдаления = РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.НовыйОтборЗаписей();
	ОтборДляУдаления.ОрганизацияБизнесСети = ОрганизацияБизнесСети;
	ОтборДляУдаления.СписокИдентификаторов = ТаблицаКЗагрузке.ВыгрузитьКолонку("ИдентификаторДокумента");
	
	РегистрыСведений.ДанныеНаложенныхПлатежейСервисДоставки.УдалитьЗаписиПоОтбору(ОтборДляУдаления);
	
	ЗаписиКОбработке.Записать(Ложь);

КонецПроцедуры

// Необходимо выполнить шаг загрузки наложенных платежей.
// 
// Параметры:
//  ТекущийШаг - ПеречислениеСсылка.ШагиЗагрузкиНаложенныхПлатежейСервисДоставки - Текущий шаг
//  СостояниеЗагрузки - Неопределено, Структура - Состояние загрузки::
// * Результат - Булево -
// * ШагЗагрузки - Неопределено, ПеречислениеСсылка.ШагиЗагрузкиНаложенныхПлатежейСервисДоставки -
// * ДатаПоследнегоИзменения - Дата -
// * Состояние - Неопределено, ПеречислениеСсылка.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки -
// * ДатаРегистрацииПлатежа - Дата -
// * ИдентификаторДокумента - Строка -
// 
// Возвращаемое значение:
//  Булево --- истина, выполнить шаг загрузки необходимо. Ложь, нет необходимости
Функция НеобходимоВыполнитьШагЗагрузкиНаложенныхПлатежей(ОрганизацияБизнесСети, ТекущийШаг, СостояниеЗагрузки = Неопределено)
	
	СостояниеЗагрузки = РегистрыСведений.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.ПолучитьТекущееСостояниеЗагрузки(ОрганизацияБизнесСети, ТекущийШаг);
	
	Результат = Ложь;
	
	Если СостояниеЗагрузки.Результат = Ложь Тогда
		Результат = Истина;
	Иначе
		Если Не СостояниеЗагрузки.Состояние = Перечисления.СостоянияЗагрузкиНаложенныхПлатежейСервисДоставки.Выполняется Тогда
			Результат = Истина;
		Иначе
			ЛимитВремениВыполнения = ЛимитВремениВыполненияПоУмолчанию();
			СервисДоставкиПереопределяемый.ЛимитВремениОбработкиПачкиПлатежей(ЛимитВремениВыполнения);
			Если (СостояниеЗагрузки.ДатаПоследнегоИзменения + ЛимитВремениВыполнения) <= ТекущаяУниверсальнаяДата() Тогда
				Результат = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Загрузка данных по наложенным платежам.
Процедура ЗагрузкаДанныхПоНаложеннымПлатежамСервисДоставки() Экспорт 
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхПоНаложеннымПлатежамСервисДоставки);
	
	Начало = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ИспользоватьРегламентЗагрузкиНаложенныхПлатежей = Ложь;
	СервисДоставкиПереопределяемый.ИспользоватьРегламентЗагрузкиНаложенныхПлатежей(ИспользоватьРегламентЗагрузкиНаложенныхПлатежей);
	Если ИспользоватьРегламентЗагрузкиНаложенныхПлатежей Тогда
		ВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам(Неопределено, Неопределено);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОбщийМодуль.СервисДоставки.ВыполнитьЗагрузкуДанныхПоНаложеннымПлатежам", Начало);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПредставлениеОснованияДляСписка(Основания, КоличествоИдентификаторовДокументовОснований)
	
	ПредставлениеОснования = "";
	
	Если Основания.Количество() = 0 Тогда
		Если КоличествоИдентификаторовДокументовОснований > 0 Тогда
			ПредставлениеОснования = "Введено в другой информационной базе";
		Иначе
			ПредставлениеОснования = "";
		КонецЕсли;
	ИначеЕсли Основания.Количество() = 1 Тогда
		УстановитьПривилегированныйРежим(Истина);
		ПредставлениеОснования = Строка(Основания[0].Значение);
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		ПредставлениеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Всего документов: %1'"),
			Основания.Количество());
	КонецЕсли;
	
	Возврат ПредставлениеОснования;
	
КонецФункции

Функция ПредставлениеМультизаказа(Параметры, ПолноеНаименование = Ложь)
	
	ПредставлениеДляСписка = "";
	
	ПредставлениеДляСписка = Параметры.МультизаказТипНаименование;
	
	Если Параметры.МультизаказНомер <> "" Тогда
		ПредставлениеДляСписка =
			ПредставлениеДляСписка + " "
			+ СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(Параметры.МультизаказНомер,"0","СЛЕВА");
	КонецЕсли;
		
	Если ПолноеНаименование Тогда
		ПредставлениеДляСписка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 от %2'"),
			ПредставлениеДляСписка,
			Формат(Параметры.МультизаказДата, "ДЛФ=D"))
	КонецЕсли;
	
	Возврат ПредставлениеДляСписка;
	
КонецФункции

Процедура ДобавитьПараметрыПоУмолчанию(Параметры)
	
	ДанныеПоУмолчанию = ПараметрыПоУмолчанию(Параметры.ТипГрузоперевозки);
	
	Если Не Параметры.Свойство("ОрганизацияБизнесСетиСсылка") Тогда
		Параметры.Вставить("ОрганизацияБизнесСетиСсылка");
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Параметры.ОрганизацияБизнесСетиСсылка) 
		И НЕ БизнесСеть.ОрганизацияПодключена(Параметры.ОрганизацияБизнесСетиСсылка))
		ИЛИ Не ЗначениеЗаполнено(Параметры.ОрганизацияБизнесСетиСсылка) Тогда
		
		Параметры.Вставить("ОрганизацияБизнесСетиСсылка", ОрганизацияПоУмолчанию(Параметры.ТипГрузоперевозки));
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ЗаказчикРоль) Тогда
		Если ЗначениеЗаполнено(ДанныеПоУмолчанию.ЗаказчикРоль) Тогда
			Параметры.ЗаказчикРоль = ДанныеПоУмолчанию.ЗаказчикРоль;
		Иначе
			Параметры.ЗаказчикРоль = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяДоставки.ОбедПо) Тогда
		Параметры.ВремяДоставки.ОбедПо = ДанныеПоУмолчанию.ВремяДоставкиОбедПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяДоставки.ОбедС) Тогда
		Параметры.ВремяДоставки.ОбедС = ДанныеПоУмолчанию.ВремяДоставкиОбедС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяДоставки.По) Тогда
		Параметры.ВремяДоставки.По = ДанныеПоУмолчанию.ВремяДоставкиПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяДоставки.С) Тогда
		Параметры.ВремяДоставки.С = ДанныеПоУмолчанию.ВремяДоставкиС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.ОбедПо) Тогда
		Параметры.ВремяОтгрузки.ОбедПо = ДанныеПоУмолчанию.ВремяОтгрузкиОбедПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.ОбедС) Тогда
		Параметры.ВремяОтгрузки.ОбедС = ДанныеПоУмолчанию.ВремяОтгрузкиОбедС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.По) Тогда
		Параметры.ВремяОтгрузки.По = ДанныеПоУмолчанию.ВремяОтгрузкиПо;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.С) Тогда
		Параметры.ВремяОтгрузки.С = ДанныеПоУмолчанию.ВремяОтгрузкиС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.ВремяОтгрузки.С) Тогда
		Параметры.ВремяОтгрузки.С = ДанныеПоУмолчанию.ВремяОтгрузкиС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.СпособДоставки) Тогда
		Параметры.СпособДоставки = ДанныеПоУмолчанию.СпособДоставки;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.СпособОтгрузки) Тогда
		Параметры.СпособОтгрузки = ДанныеПоУмолчанию.СпособОтгрузки;
	КонецЕсли;
	
	ПараметрыУчастника = Параметры.Отправитель;
	Если ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
		
		Если ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица = СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаВручную() Тогда
			ПараметрыУчастника.КонтактноеЛицо.Ссылка = Неопределено;
			ПараметрыУчастника.КонтактноеЛицо.Наименование = "";
			ПараметрыУчастника.КонтактноеЛицо.Телефон.Представление = "";
			ПараметрыУчастника.КонтактноеЛицо.Телефон.Значение = "";
		ИначеЕсли ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица = СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаОтветственныйЗаДоставку()
			И ЗначениеЗаполнено(ДанныеПоУмолчанию.КонтактноеЛицо) Тогда
			Если ТипЗнч(ДанныеПоУмолчанию.КонтактноеЛицо) = Тип("Строка") Тогда
				ПараметрыУчастника.КонтактноеЛицо.Наименование = ДанныеПоУмолчанию.КонтактноеЛицо;
			Иначе
				ПараметрыУчастника.КонтактноеЛицо.Ссылка = ДанныеПоУмолчанию.КонтактноеЛицо;
				ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыУчастника = Параметры.Получатель;
	Если ПараметрыУчастника.Контрагент.ЭтоОрганизация Тогда
		
		Если ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица = СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаВручную() Тогда
			ПараметрыУчастника.КонтактноеЛицо.Ссылка = Неопределено;
			ПараметрыУчастника.КонтактноеЛицо.Наименование = "";
			ПараметрыУчастника.КонтактноеЛицо.Телефон.Представление = "";
			ПараметрыУчастника.КонтактноеЛицо.Телефон.Значение = "";
		ИначеЕсли ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица = СервисДоставкиКлиентСервер.СпособОпределенияКонтактногоЛицаОтветственныйЗаДоставку()
			И ЗначениеЗаполнено(ДанныеПоУмолчанию.КонтактноеЛицо) Тогда
			Если ТипЗнч(ДанныеПоУмолчанию.КонтактноеЛицо) = Тип("Строка") Тогда
				ПараметрыУчастника.КонтактноеЛицо.Наименование = ДанныеПоУмолчанию.КонтактноеЛицо;
			Иначе
				ПараметрыУчастника.КонтактноеЛицо.Ссылка = ДанныеПоУмолчанию.КонтактноеЛицо;
				ЗаполнитьПараметрыКонтактногоЛица(ПараметрыУчастника.КонтактноеЛицо);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Товары = Параметры.Товары;
	ВсегоВес = 0;
	ВсегоОбъем = 0;
	
	Для Каждого ТекСтрока Из Товары Цикл
		
		Если ТекСтрока.Вес = 0 Тогда
			ТекСтрока.Вес = ДанныеПоУмолчанию.ВесЕдиницыТовара;
		КонецЕсли;
		
		Если ТекСтрока.Объем = 0 Тогда
		
			Если ТекСтрока.Длина = 0 Тогда
				ТекСтрока.Длина = ДанныеПоУмолчанию.ДлинаЕдиницыТовара;
			КонецЕсли;
			
			Если ТекСтрока.Ширина = 0 Тогда
				ТекСтрока.Ширина = ДанныеПоУмолчанию.ШиринаЕдиницыТовара;
			КонецЕсли;
			
			Если ТекСтрока.Высота = 0 Тогда
				ТекСтрока.Высота = ДанныеПоУмолчанию.ВысотаЕдиницыТовара;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Длина*ТекСтрока.Ширина*ТекСтрока.Высота = 0 Тогда
			
			Если ТекСтрока.Длина <> 0 Тогда
				
				Если ТекСтрока.Ширина <> 0 Тогда
					ТекСтрока.Высота = Окр(ТекСтрока.Объем/(ТекСтрока.Длина*ТекСтрока.Ширина), 0);
				ИначеЕсли ТекСтрока.Высота <> 0 Тогда
					ТекСтрока.Ширина = Окр(ТекСтрока.Объем/(ТекСтрока.Длина*ТекСтрока.Высота), 0);
				ИначеЕсли ДанныеПоУмолчанию.ШиринаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Ширина = ДанныеПоУмолчанию.ШиринаЕдиницыТовара;
					ТекСтрока.Высота = Окр(ТекСтрока.Объем/(ТекСтрока.Длина*ТекСтрока.Ширина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ВысотаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Высота = ДанныеПоУмолчанию.ВысотаЕдиницыТовара;
					ТекСтрока.Ширина = Окр(ТекСтрока.Объем/(ТекСтрока.Длина*ТекСтрока.Высота), 0);
				Иначе
					ТекСтрока.Ширина = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Длина), 0);
					ТекСтрока.Высота = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Длина), 0);
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.Ширина <> 0 Тогда
				
				Если ТекСтрока.Высота <> 0 Тогда
					ТекСтрока.Длина = Окр(ТекСтрока.Объем/(ТекСтрока.Ширина*ТекСтрока.Высота), 0);
				ИначеЕсли ДанныеПоУмолчанию.ДлинаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Длина = ДанныеПоУмолчанию.ДлинаЕдиницыТовара;
					ТекСтрока.Высота = Окр(ТекСтрока.Объем/(ТекСтрока.Ширина*ТекСтрока.Длина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ВысотаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Высота = ДанныеПоУмолчанию.ВысотаЕдиницыТовара;
					ТекСтрока.Длина = Окр(ТекСтрока.Объем/(ТекСтрока.Ширина*ТекСтрока.Высота), 0);
				Иначе
					ТекСтрока.Длина = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Ширина), 0);
					ТекСтрока.Высота = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Ширина), 0);
				КонецЕсли;
				
			ИначеЕсли ТекСтрока.Высота <> 0 Тогда
				
				Если ДанныеПоУмолчанию.ДлинаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Длина = ДанныеПоУмолчанию.ДлинаЕдиницыТовара;
					ТекСтрока.Ширина = Окр(ТекСтрока.Объем/(ТекСтрока.Высота*ТекСтрока.Длина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ШиринаЕдиницыТовара <> 0 Тогда
					ТекСтрока.Ширина = ДанныеПоУмолчанию.ШиринаЕдиницыТовара;
					ТекСтрока.Длина = Окр(ТекСтрока.Объем/(ТекСтрока.Высота*ТекСтрока.Ширина), 0);
				Иначе
					ТекСтрока.Длина = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Высота), 0);
					ТекСтрока.Ширина = Окр(Sqrt(ТекСтрока.Объем/ТекСтрока.Высота), 0);
				КонецЕсли;
			Иначе
				ТекСтрока.Длина = ДанныеПоУмолчанию.ДлинаЕдиницыТовара;
				ТекСтрока.Ширина = ДанныеПоУмолчанию.ШиринаЕдиницыТовара;
				ТекСтрока.Высота = ДанныеПоУмолчанию.ВысотаЕдиницыТовара;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекСтрока.Объем = Окр(ТекСтрока.Длина*ТекСтрока.Ширина*ТекСтрока.Высота/1000000, 3);
		
		ВсегоВес = ВсегоВес + ТекСтрока.Вес * ТекСтрока.Количество;
		ВсегоОбъем = ВсегоОбъем + ТекСтрока.Объем * ТекСтрока.Количество;
		
	КонецЦикла;
	
	Параметры.Груз.КоличествоГрузовыхМест = ?(Параметры.Груз.КоличествоГрузовыхМест = 0, 1, Параметры.Груз.КоличествоГрузовыхМест);
	
	МаксимальныйВес = ?(Параметры.Груз.МаксимальныйВес = 0, ДанныеПоУмолчанию.ВесГрузовогоМеста, Параметры.Груз.МаксимальныйВес);
	
	Если Параметры.Груз.КоличествоГрузовыхМест = 1 Тогда
		Если Параметры.Груз.Вес = 0 Тогда
			Параметры.Груз.Вес = ?(ВсегоВес > МаксимальныйВес, ВсегоВес, МаксимальныйВес);
			Параметры.Груз.МаксимальныйВес = Параметры.Груз.Вес;
		КонецЕсли;
	Иначе
		Если Параметры.Груз.Вес = 0 Тогда
			Параметры.Груз.Вес = ?(ВсегоВес > МаксимальныйВес*Параметры.Груз.КоличествоГрузовыхМест, ВсегоВес, МаксимальныйВес*Параметры.Груз.КоличествоГрузовыхМест);
			Параметры.Груз.МаксимальныйВес = МаксимальныйВес;
		ИначеЕсли Параметры.Груз.МаксимальныйВес = 0 Тогда
			Параметры.Груз.МаксимальныйВес = МаксимальныйВес;
		КонецЕсли
	КонецЕсли;
	
	Если Параметры.Груз.КоличествоГрузовыхМест = 1 Тогда
		
		Если Параметры.Груз.Объем = 0
			И ВсегоОбъем = 0 Тогда
			
			Если Параметры.Груз.МаксимальнаяДлина = 0 Тогда
				Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
			КонецЕсли;
			
			Если Параметры.Груз.МаксимальнаяШирина = 0 Тогда
				Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
			КонецЕсли;
			
			Если Параметры.Груз.МаксимальнаяВысота = 0 Тогда
				Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
			КонецЕсли;
			
		ИначеЕсли Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяШирина*Параметры.Груз.МаксимальнаяВысота = 0 Тогда
			
			ОбъемДляРасчетов = ?(Параметры.Груз.Объем = 0, ВсегоОбъем, Параметры.Груз.Объем);
			
			Если Параметры.Груз.МаксимальнаяДлина <> 0 Тогда
				
				Если Параметры.Груз.МаксимальнаяШирина <> 0 Тогда
					Параметры.Груз.МаксимальнаяВысота = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяШирина), 0);
				ИначеЕсли Параметры.Груз.МаксимальнаяВысота <> 0 Тогда
					Параметры.Груз.МаксимальнаяШирина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяВысота), 0);
				ИначеЕсли ДанныеПоУмолчанию.ШиринаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяВысота = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяШирина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ВысотаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяШирина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяДлина*Параметры.Груз.МаксимальнаяВысота), 0);
				Иначе
					Параметры.Груз.МаксимальнаяШирина = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяДлина), 0);
					Параметры.Груз.МаксимальнаяВысота = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяДлина), 0);
				КонецЕсли;
				
			ИначеЕсли Параметры.Груз.МаксимальнаяШирина <> 0 Тогда
				
				Если Параметры.Груз.МаксимальнаяВысота <> 0 Тогда
					Параметры.Груз.МаксимальнаяДлина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяШирина*Параметры.Груз.МаксимальнаяВысота), 0);
				ИначеЕсли ДанныеПоУмолчанию.ДлинаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяВысота = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяШирина*Параметры.Груз.МаксимальнаяДлина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ВысотаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяДлина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяШирина*Параметры.Груз.МаксимальнаяВысота), 0);
				Иначе
					Параметры.Груз.МаксимальнаяДлина = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяШирина), 0);
					Параметры.Груз.МаксимальнаяВысота = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяШирина), 0);
				КонецЕсли;
				
			ИначеЕсли Параметры.Груз.МаксимальнаяВысота <> 0 Тогда
				
				Если ДанныеПоУмолчанию.ДлинаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяШирина = Окр(ОбъемДляРасчетов/(Параметры.Груз.МаксимальнаяВысота*Параметры.Груз.МаксимальнаяДлина), 0);
				ИначеЕсли ДанныеПоУмолчанию.ШиринаГрузовогоМеста <> 0 Тогда
					Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
					Параметры.Груз.МаксимальнаяДлина = Окр(Параметры.Груз.МаксимальнаяОбъем/(Параметры.Груз.МаксимальнаяВысота*Параметры.Груз.МаксимальнаяШирина), 0);
				Иначе
					Параметры.Груз.МаксимальнаяДлина = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяВысота), 0);
					Параметры.Груз.МаксимальнаяШирина = Окр(Sqrt(ОбъемДляРасчетов/Параметры.Груз.МаксимальнаяВысота), 0);
				КонецЕсли;
			Иначе
				Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
				Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
				Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
			КонецЕсли;
			
		КонецЕсли;
		
		Объем = Параметры.Груз.МаксимальнаяДлина * Параметры.Груз.МаксимальнаяШирина * Параметры.Груз.МаксимальнаяВысота/1000000;
		
	Иначе
		
		Если Параметры.Груз.МаксимальнаяДлина = 0 Тогда
			Параметры.Груз.МаксимальнаяДлина = ДанныеПоУмолчанию.ДлинаГрузовогоМеста;
		КонецЕсли;
		
		Если Параметры.Груз.МаксимальнаяШирина = 0 Тогда
			Параметры.Груз.МаксимальнаяШирина = ДанныеПоУмолчанию.ШиринаГрузовогоМеста;
		КонецЕсли;
		
		Если Параметры.Груз.МаксимальнаяВысота = 0 Тогда
			Параметры.Груз.МаксимальнаяВысота = ДанныеПоУмолчанию.ВысотаГрузовогоМеста;
		КонецЕсли;
		
		ОбъемГрузовогоМестаПоУмолчанию = ДанныеПоУмолчанию.ДлинаГрузовогоМеста * ДанныеПоУмолчанию.ШиринаГрузовогоМеста * ДанныеПоУмолчанию.ВысотаГрузовогоМеста/1000000;
		
		Объем = Параметры.Груз.Объем;
		Если Объем = 0 Тогда
			Объем = Макс(ВсегоОбъем, ОбъемГрузовогоМестаПоУмолчанию*Параметры.Груз.КоличествоГрузовыхМест);
		КонецЕсли
		
	КонецЕсли;
	
	Если Объем > 0 Тогда
		Параметры.Груз.Объем = ?(Окр(Объем, 3) = 0, 0.001, Окр(Объем, 3));
	КонецЕсли;
	
КонецПроцедуры

Функция ФильтрПоМультизаказамПоУмолчанию()
	
	Возврат ФильтрПоМультизаказамВсеЗаказы();
	
КонецФункции

// Преобразовывает дату JSON без разделителя в дату.
//
// Параметры:
// 	ДатаСтрокой - Строка.
//
// Возвращаемое значение:
//  Дата.
//  
Функция ПрочитатьДатуJSONБезРазделителя(ДатаСтрокой)
	
	Результат = Дата(1, 1, 1);
	
	Если ЗначениеЗаполнено(ДатаСтрокой)
		И СтрНайти(ДатаСтрокой, " ") > 0 Тогда
		
		Попытка
			Результат = ПрочитатьДатуJSON(СтрЗаменить(ДатаСтрокой, " ", "T"), ФорматДатыJSON.ISO);
		Исключение
			Результат = Дата(1, 1, 1);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки подсистемы ЭлектронноеВзаимодействие.СервисДоставки
// по переданному типу грузоперевозки.
//
// Параметры:
// 	ТипГрузоперевозки - Число.
//
// Возвращаемое значение:
// 	Структура.
//
Функция НастройкиПодсистемыСервисДоставки(ТипГрузоперевозки) Экспорт
	
	Результат = Новый Структура;
	
	НаборЗаписей = РегистрыСведений.НастройкиОбщиеСервисДоставки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипГрузоперевозки.Установить(ТипГрузоперевозки);
	НаборЗаписей.Прочитать();

	Если НаборЗаписей.Выбран() Тогда
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Результат.Вставить(Запись.НаименованиеПараметра, Запись.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

