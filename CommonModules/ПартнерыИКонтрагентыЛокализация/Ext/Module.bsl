
#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	//++ Локализация


	//-- Локализация
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов_Контрагенты(КомандыОтчетов, Параметры) Экспорт
	КомандаОтчет = ВариантыОтчетовЛокализация.ДобавитьКомандуДосьеКонтрагента(КомандыОтчетов);
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов_Партнеры(КомандыОтчетов, Параметры) Экспорт
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		КомандаОтчет = ВариантыОтчетовЛокализация.ДобавитьКомандуДосьеКонтрагента(КомандыОтчетов);
		Если КомандаОтчет <> Неопределено Тогда
			КомандаОтчет.ВидимостьВФормах = "ФормаЭлемента,ФормаСписка,ФормаСпискаБезПолнотекстовогоПоиска,ФормаЭлементаРеквизитыКонтрагента";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФормами

// Обработчик события ПриСозданииНаСервере форм элемента справочника Партнеры.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ВыборГоловногоКонтрагентаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Если ЗначениеЗаполнено(Форма.Параметры.ИНН) Тогда
		
		ТаблицаКонтрагентов = ВозможныеГоловныеКонтрагенты(Форма.Параметры.ИНН, Форма.Параметры.Контрагент);
		
		Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
			Форма.СписокВыбора.Добавить(
				СтрокаТаблицы.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, КПП: %2'"),
					СтрокаТаблицы.Представление,
					?(ЗначениеЗаполнено(СтрокаТаблицы.КПП), СтрокаТаблицы.КПП, НСтр("ru = '<не заполнен>'"))));
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбособленныеПодразделения
//++ Локализация

// Определяет возможных головных контрагентов по ИНН.
// 
// Параметры:
//  ИНН  - Строка - ИНН, по которому необходимо получить список контрагентов.
//  Контрагент - СправочникСсылка.Контрагенты - ссылка на контрагента, исключаемого из поиска.
//
// Возвращаемое значение:
//  ТаблицаЗначений   - таблица контрагентов, с колонками:
//   * Ссылка         - СправочникСсылка.Контрагенты - возможный головной контрагент.
//   * Представление  - Строка - представление возможного головного контрагента.
//   * КПП            - Строка - КПП возможного головного контрагента.
//
Функция ВозможныеГоловныеКонтрагенты(ИНН, Контрагент = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка        КАК Ссылка,
	|	Контрагенты.Представление КАК Представление,
	|	Контрагенты.КПП           КАК КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|	И НЕ Контрагенты.ОбособленноеПодразделение
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Контрагенты.Ссылка <> &Ссылка";
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("Ссылка", Контрагент);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Изменяет ИНН в подчиненных головному контрагентах, если они не совпадают
//
// Параметры:
//  ГоловнойКонтрагент - СправочникСсылка.Контрагенты - контрагент, обособленные подразделения которого проверяются.
//  ИНН - Строка - ИНН головного контрагента.
//
Процедура ИзменитьИННПодчиненныхКонтрагентов(ГоловнойКонтрагент, ИНН) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГоловнойКонтрагент", ГоловнойКонтрагент);
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.ГоловнойКонтрагент = &ГоловнойКонтрагент
	|	И Контрагенты.ИНН <> &ИНН";
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	Пока Выборка.Следующий() Цикл
			
		ОбособленноеПодразделениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
		ОбособленноеПодразделениеОбъект.ИНН = ИНН;
		ОбособленноеПодразделениеОбъект.Записать();
			
	КонецЦикла;
	
КонецПроцедуры

// Формирует список значений возможных головных контрагентов
// 
// Параметры:
// 	ИНН - Строка - строка с ИНН
// Возвращаемое значение:
// 	СписокЗначений - список головных контрагентов
//
Функция СписокВозможныхГоловныхКонтрагентов(ИНН) Экспорт
	
	Список = Новый СписокЗначений;
	ТаблицаКонтрагентов = ВозможныеГоловныеКонтрагенты(ИНН);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтрагентов Цикл
		Список.Добавить(
			СтрокаТаблицы.Ссылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1, КПП: %2'"),
				СтрокаТаблицы.Представление,
				?(ЗначениеЗаполнено(СтрокаТаблицы.КПП), СтрокаТаблицы.КПП, НСтр("ru = '<не заполнен>'"))));
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции
//-- Локализация

// Выполняет поиск непривязанных обособленных подразделений
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ВыполнитьПоискНепривязанныхОбособленныхПодразделений(Форма) Экспорт
	//++ Локализация
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса ="
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформацияКонтрагента.Ссылка КАК Ссылка,
	|	КонтактнаяИнформацияКонтрагента.Вид КАК Вид,
	|	МАКСИМУМ(КонтактнаяИнформацияКонтрагента.ДействуетС) КАК ДействуетС
	|ПОМЕСТИТЬ СрезКонтактнойИнформацииКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО КонтактнаяИнформацияКонтрагента.Ссылка = Контрагенты.Ссылка
	|ГДЕ
	|	КонтактнаяИнформацияКонтрагента.ДействуетС <= &ДействуетС
	|	И КонтактнаяИнформацияКонтрагента.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)
	|	И Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И Контрагенты.ИНН = &ИНН
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтактнаяИнформацияКонтрагента.Вид,
	|	КонтактнаяИнформацияКонтрагента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Представление КАК Представление,
	|	Контрагенты.КПП КАК КПП,
	|	Контакты.Представление КАК ЮридическийАдрес,
	|	ИСТИНА КАК Выбран
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК Контакты
	|		ПО Контрагенты.Ссылка = Контакты.Ссылка
	|ГДЕ
	|	Контрагенты.ОбособленноеПодразделение
	|	И Контрагенты.ГоловнойКонтрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И Контрагенты.ИНН = &ИНН";
	
	Если Форма.НаОснованииОбособленногоКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И Контрагенты.Ссылка <> &КонтрагентИсключение";
		Запрос.УстановитьПараметр("КонтрагентИсключение", Форма.КонтрагентОснование);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ИНН", Форма.ИНН);
	Запрос.УстановитьПараметр("ДействуетС", ТекущаяДатаСеанса());
	РезультатЗапроса = Запрос.Выполнить();
	
	Форма.ОбособленныеПодразделения.Очистить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(Форма.ОбособленныеПодразделения, РезультатЗапроса.Выгрузить());
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыПроверкиКорректностиЗаполнения

// Проверяет корректность заполнения контрагента. Вызывается из процедуры "ОбработкаПроверкиЗаполнения".
//
// Параметры:
//  Объект     - СправочникОбъект.Контрагенты, ФормаКлиентскогоПриложения - объект, содержащий данные контрагента.
//  Контрагент - СправочникСсылка.Контрагенты - ссылка на проверяемого контрагент.
//  Отказ      - Булево - флаг отказа в процедуре проверки заполнения.
//
Процедура ПроверитьКорректностьЗаполненияКонтрагента(Объект, Контрагент, Отказ) Экспорт
	//++ Локализация
	КлючДанных = ?(ТипЗнч(Объект) = Тип("ФормаКлиентскогоПриложения"), Неопределено, Объект);
	Если Объект.ОбособленноеПодразделение И ЗначениеЗаполнено(Объект.ГоловнойКонтрагент) Тогда
		
		Если Объект.ГоловнойКонтрагент <> Контрагент Тогда
			
			СвойстваГоловногоКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект.ГоловнойКонтрагент, "Наименование, ИНН");
			
			Если ЗначениеЗаполнено(СвойстваГоловногоКонтрагента.ИНН) И СвойстваГоловногоКонтрагента.ИНН <> Объект.ИНН Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'ИНН контрагента не равен указанному в головном подразделении'"),
					СвойстваГоловногоКонтрагента.Наименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, КлючДанных, "ИНН", , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда 
		
		РезультатПоиска = ИННКППУжеИспользуетсяВИнформационнойБазе(Объект.ИНН, Объект.КПП, Контрагент, Объект.ЮрФизЛицо) ;
		
		Если Не РезультатПоиска.ДоступноСоздание Тогда
			
			ДанныеКонтрагента = РезультатПоиска.НайденныеСовпадения[0];
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			                                СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                                  НСтр("ru='Данные ИНН и КПП уже указаны для другого контрагента, ответственный - %1.'"),
			                                  ДанныеКонтрагента.ОсновнойМенеджер),
			                                КлючДанных,
			                               "ИНН",
			                                ,
			                                Отказ);
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ПартнерыИКонтрагенты.УпрощенныйВводДоступен() Тогда
			
			Если (Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель 
					ИЛИ Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не указан ИНН'"),
				КлючДанных,
				"ИНН",
				,
				Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ПрочийПрограммныйИнтерфейс

// Дополняет значения реквизитов выбранного контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Ссылка на контрагента.
//  РеквизитыКонтрагента - Структура - реквизиты выбранного контрагента.
//  ДатаСведений - Дата - дата получения сведений.
//
Процедура ДополнитьРеквизитыКонтрагента(Контрагент, РеквизитыКонтрагента, ДатаСведений = Неопределено) Экспорт
	//++ Локализация
	Запрос = Новый Запрос;
	
	Если ДатаСведений <> Неопределено Тогда
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ИсторияКППКонтрагентов.КПП КАК КПП
		|ПОМЕСТИТЬ ИсторическоеЗначениеКПП
		|ИЗ
		|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
		|ГДЕ
		|	ИсторияКППКонтрагентов.Ссылка = &Контрагент
		|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсторияКППКонтрагентов.Период УБЫВ
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ИсторическоеЗначениеКПП.КПП, Контрагенты.КПП)                                        КАК КПП,
		|	Контрагенты.КодПоОКПО                                                                         КАК КодПоОКПО,
		|	Контрагенты.РегистрационныйНомер                                                              КАК РегистрационныйНомер,
		|	Контрагенты.НалоговыйНомер                                                                    КАК НалоговыйНомер,
		|	Контрагенты.СтранаРегистрации                                                                 КАК СтранаРегистрации,
		|	ЕСТЬNULL(СтраныМира.КодАльфа2, """")                                                          КАК КодАльфа2СтраныРегистрации,
		|	Контрагенты.ОбособленноеПодразделение                                                         КАК ОбособленноеПодразделение,
		|	Контрагенты.ГоловнойКонтрагент                                                                КАК ГоловнойКонтрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
		|		ПО Контрагенты.СтранаРегистрации = СтраныМира.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ ИсторическоеЗначениеКПП КАК ИсторическоеЗначениеКПП
		|		ПО (ИСТИНА)
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент
		|";
		
		Запрос.УстановитьПараметр("ДатаСведений", ДатаСведений);
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.КПП                       КАК КПП,
		|	Контрагенты.КодПоОКПО                 КАК КодПоОКПО,
		|	Контрагенты.РегистрационныйНомер      КАК РегистрационныйНомер,
		|	Контрагенты.НалоговыйНомер            КАК НалоговыйНомер,
		|	Контрагенты.СтранаРегистрации         КАК СтранаРегистрации,
		|	ЕСТЬNULL(СтраныМира.КодАльфа2, """")  КАК КодАльфа2СтраныРегистрации,
		|	Контрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Контрагенты.ГоловнойКонтрагент        КАК ГоловнойКонтрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
		|		ПО Контрагенты.СтранаРегистрации = СтраныМира.Ссылка
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		КПП                        = Выборка.КПП;
		НалоговыйНомер             = Выборка.НалоговыйНомер;
		КодПоОКПО                  = Выборка.КодПоОКПО;
		РегистрационныйНомер       = Выборка.РегистрационныйНомер;
		НалоговыйНомер             = Выборка.НалоговыйНомер;
		СтранаРегистрации          = Выборка.СтранаРегистрации;
		КодАльфа2СтраныРегистрации = Выборка.КодАльфа2СтраныРегистрации;
		ОбособленноеПодразделение  = Выборка.ОбособленноеПодразделение;
		ГоловнойКонтрагент         = Выборка.ГоловнойКонтрагент;
	Иначе
		КПП                        = "";
		НалоговыйНомер             = "";
		КодПоОКПО                  = "";
		РегистрационныйНомер       = "";
		НалоговыйНомер             = Выборка.НалоговыйНомер;
		СтранаРегистрации          = Справочники.СтраныМира.ПустаяСсылка();
		КодАльфа2СтраныРегистрации = "";
		ОбособленноеПодразделение  = Ложь;
		ГоловнойКонтрагент         = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	РеквизитыКонтрагента.Вставить("КПП",                        КПП);
	РеквизитыКонтрагента.Вставить("КодПоОКПО",                  КодПоОКПО);
	РеквизитыКонтрагента.Вставить("РегистрационныйНомер",       РегистрационныйНомер);
	РеквизитыКонтрагента.Вставить("НалоговыйНомер",             НалоговыйНомер);
	РеквизитыКонтрагента.Вставить("СтранаРегистрации",          СтранаРегистрации);
	РеквизитыКонтрагента.Вставить("КодАльфа2СтраныРегистрации", КодАльфа2СтраныРегистрации);
	РеквизитыКонтрагента.Вставить("ОбособленноеПодразделение",  ОбособленноеПодразделение);
	РеквизитыКонтрагента.Вставить("ГоловнойКонтрагент",         ГоловнойКонтрагент);
	
	//-- Локализация
КонецПроцедуры

//++ Локализация

// Возвращает КПП на дату.
//
// Параметры:
//  Контрагент   - СправочникСсылка.Контрагенты - Ссылка на контрагента.
//  ДатаСведений - Дата - дата получения сведений.
//
// Возвращаемое значение:
//  Строка - КПП контрагента на дату
//
Функция КППНаДату(Контрагент, ДатаСведений) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Контрагент)
		ИЛИ ТипЗнч(Контрагент) <> Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "КПП");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Контрагент", Контрагент);
	Запрос.Параметры.Вставить("ДатаСведений", ДатаСведений);
	Запрос.Текст ="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсторияКППКонтрагентов.КПП КАК КПП
	|ПОМЕСТИТЬ ИсторическоеЗначениеКПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК ИсторияКППКонтрагентов
	|ГДЕ
	|	ИсторияКППКонтрагентов.Ссылка = &Контрагент
	|	И ИсторияКППКонтрагентов.Период <= &ДатаСведений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсторияКППКонтрагентов.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ИсторическоеЗначениеКПП.КПП, Контрагенты.КПП) КАК КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсторическоеЗначениеКПП КАК ИсторическоеЗначениеКПП
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КПП;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Определяет, есть ли в базе контрагент с таким же набором ИНН/КПП.
//
// Параметры:
//  ИНН             - Строка - ИНН контрагента.
//  КПП             - Строка - КПП контрагента.
//  ИсключаяСсылку  - СправочникСсылка.Контрагенты - контрагент, который исключается при поиске.
//  ЮрФизЛицо       - ПеречислениеСсылка.ЮрФизЛицо - значение ЮрФизЛицо текущего контрагента
//
// Возвращаемое значение:
//   Булево   - Истина, если упрощенный ввод доступен, и ложь в обратном случае.
//
Функция ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КПП, ИсключаяСсылку = Неопределено, ЮрФизЛицо = Неопределено) Экспорт
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("НайденныеСовпадения", Новый Массив);
	РезультатПоиска.Вставить("ДоступноСоздание",    Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка                       КАК Ссылка,
	|	Контрагенты.ЮрФизЛицо                    КАК ЮрФизЛицо,
	|	Партнеры.Ссылка                          КАК Партнер,
	|	Партнеры.Код                             КАК Код,
	|	ПРЕДСТАВЛЕНИЕ(Партнеры.ОсновнойМенеджер) КАК ОсновнойМенеджер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Ссылка
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	Запрос.УстановитьПараметр("Ссылка",ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		
		Если ЗначениеЗаполнено(ИсключаяСсылку) 
			И Выборка.Ссылка = ИсключаяСсылку Тогда
			
			Возврат РезультатПоиска;
			
		ИначеЕсли ЗначениеЗаполнено(ЮрФизЛицо) Тогда
			
			Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель
				И Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда 
				
				ДобавитьДанныеНайденногоКонтрагента(Выборка, РезультатПоиска.НайденныеСовпадения);
				
			ИначеЕсли ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
				И Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
				
				ДобавитьДанныеНайденногоКонтрагента(Выборка, РезультатПоиска.НайденныеСовпадения);
				
			Иначе
				
				ДобавитьДанныеНайденногоКонтрагента(Выборка, РезультатПоиска.НайденныеСовпадения);
				РезультатПоиска.ДоступноСоздание = Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ДобавитьДанныеНайденногоКонтрагента(Выборка, РезультатПоиска.НайденныеСовпадения);
			РезультатПоиска.ДоступноСоздание = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Выборка.Количество() > 1 Тогда
		
		РезультатПоиска.ДоступноСоздание = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			ДобавитьДанныеНайденногоКонтрагента(Выборка, РезультатПоиска.НайденныеСовпадения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции 

// Параметры поиска использования ИННКПП.
// 
// Возвращаемое значение:
//  Структура -  Параметры поиска использования ИННКПП:
// * ИНН - Строка - 
// * КПП - Строка - 
// * ТекущийКонтрагент - СправочникСсылка.Контрагенты - 
// * ЮрФизЛицо - ПеречислениеСсылка.ЮрФизЛицо -
// 
Функция ПараметрыПоискаИспользованияИННКПП() Экспорт
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ИНН",               "");
	ПараметрыПоиска.Вставить("КПП",               "");
	ПараметрыПоиска.Вставить("ТекущийКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	ПараметрыПоиска.Вставить("ЮрФизЛицо",         Перечисления.ЮрФизЛицо.ПустаяСсылка());
	
	Возврат ПараметрыПоиска;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбщиеПроцедурыФормЭлементаСправочникаПартнеры

// Обработчик события ПриСозданииНаСервере форм элемента справочника Партнеры.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлементаПартнер(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы помощника нового справочника Партнеры.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаПомощникНового(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	
	Параметры = Форма.Параметры;
	Форма.НастройкиПодключенияКСервисуИППЗаданы = НастройкиПодключенияКСервисуИППЗаданы();
	Если Не Форма.НастройкиПодключенияКСервисуИППЗаданы Тогда
		Форма.Элементы.СокрЮрНаименованиеКонтрагента.ПодсказкаВвода = "";
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
					
		Если Параметры.Основание.Свойство("ИНН") Тогда
			Форма.ИНН = Параметры.Основание.ИНН;
			Если СтрДлина(Форма.ИНН) = 12 Тогда
				Форма.ВидКомпании = 2;
			КонецЕсли;
			Форма.УказыватьЮридическиеРеквизиты = Истина;
		КонецЕсли;
		
		Если Параметры.Основание.Свойство("КПП") Тогда
			Форма.КПП = Параметры.Основание.КПП;
			Форма.УказыватьЮридическиеРеквизиты = Истина;
		КонецЕсли;
			
	ИначеЕсли Параметры.Свойство("ИНН") Тогда
		
		Если СтрДлина(Параметры.ИНН) = 12 Тогда
			Форма.ИННПартнерФизЛицо = Параметры.ИНН;
			Форма.ЭтоКомпания = 1;
		Иначе
			Форма.ИНН = Параметры.ИНН;
		КонецЕсли;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Параметры.СсылкаНаФайл) Тогда
		Форма.ЕстьОшибкаЧтенияФайла = Ложь;
		РазобратьФайлНаСервере(Параметры.СсылкаНаФайл, Форма.ЕстьОшибкаЧтенияФайла, Форма);
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы реквизиты контрагента справочника Партнеры
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлементаРеквизитыКонтрагента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	
	Если Форма.Объект.Ссылка.Пустая()
		И ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.ИНН,
			|	Контрагенты.КПП,
			|	Контрагенты.КодПоОКПО
			|
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
			|		ПО Контрагенты.Партнер = Партнеры.Ссылка
			|ГДЕ
			|	Партнеры.Ссылка = &ЗначениеЗаполнения";
			
			Запрос.УстановитьПараметр("ЗначениеЗаполнения", Форма.Параметры.ЗначениеКопирования);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(Форма, Выборка);
			КонецЕсли;
			
		КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере формы элемента справочника Контрагенты
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект.Партнеры, СправочникОбъект.Контрагенты - объект, который будет прочитан.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПослеЗаписиНаСервереФормаЭлементаРеквизитыКонтрагента(ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

// Устанавливает условное для реквизитов формы элемента справочника Контрагенты.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление.
//
Процедура УстановитьУсловноеОформление_ПомощникНового(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	//++ Локализация
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИНН.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННФизЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказыватьЮридическиеРеквизиты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИНН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидКомпании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КПП");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСравненияПартнеровЗначениеНайденного.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСравненияПартнеров.ДубльИННКПП");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНайденоПредставлениеПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНайдено.ДубльИННКПП");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	//-- Локализация
КонецПроцедуры

// Записывает контрагента по данным формы Партнера
// 
// Параметры:
// 	КонтрагентОбъект - СправочникОбъект.Контрагенты - изменяемый контрагент.
// 	Форма - ФормаКлиентскогоПриложения - форма справочника Партнеры.
//
Процедура ПередЗаписьюКонтрагентаПартнера(КонтрагентОбъект, Форма) Экспорт
	//++ Локализация
	КонтрагентОбъект.НДСпоСтавкам4и2           = Форма.НДСПоСтавкам4и2;
	КонтрагентОбъект.КодПоОКПО                 = Форма.КодПоОКПО;
	КонтрагентОбъект.КПП                       = Форма.КПП;
	
	КонтрагентОбъект.ИсторияКПП.Загрузить(Форма.ИсторияКПП.Выгрузить());

	Если Не (Форма.КонтрагентПартнера.Пустая() Или Форма.ОбособленноеПодразделение) И Форма.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ИзменитьИННПодчиненныхКонтрагентов(Форма.КонтрагентПартнера, Форма.ИНН);
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры 

// Обработчик создания нового головного контрагента
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма помощника нового партнера
//
Процедура ПриСозданииНовогоГоловногоКонтрагента(Форма) Экспорт
	//++ Локализация	
	Форма.ИНН = Форма.Параметры.ЗначенияЗаполнения.ИНН;
	Если ЗначениеЗаполнено(Форма.ИНН) Тогда
		МассивЭлементов = Новый Массив();
		МассивЭлементов.Добавить("ИНН");
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
	КонецЕсли;
	
	//-- Локализация	
КонецПроцедуры

// Дополняет данные контрагента партнера
// 
// Параметры:
// 	Приемник - СправочникОбъект.Контрагенты - ссылка на контрагента
// 	Партнер - СправочникСсылка.Партнеры - ссылка на партнера
// 	СИсторическимиДанными - Булево - признак дополнения историческими данными
//
Процедура ДополнитьДанныеКонтрагентаПартнера(Приемник, Партнер, СИсторическимиДанными = Истина) Экспорт
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК КонтрагентПартнера,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.НДСПоСтавкам4и2           КАК НДСпоСтавкам4и2,
	|	Контрагенты.КодПоОКПО                 КАК КодПоОКПО
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыИсторияКПП.Период КАК Период,
	|	КонтрагентыИсторияКПП.КПП    КАК КПП
	|ИЗ
	|	Справочник.Контрагенты.ИсторияКПП КАК КонтрагентыИсторияКПП
	|ГДЕ
	|	КонтрагентыИсторияКПП.Ссылка.Партнер = &Партнер
	|;
	|";
	
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();

	Если Выборка.Следующий() Тогда
	
		ЗаполнитьЗначенияСвойств(Приемник, Выборка);
		Если СИсторическимиДанными Тогда
			Приемник.ИсторияКПП.Загрузить(РезультатЗапроса[1].Выгрузить());
		КонецЕсли;
	
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Дополняет данные контрагента при записи
// 
// Параметры:
// 	ОбъектКонтрагент - СправочникОбъект.Контрагенты - создаваемый контрагент
// 	Форма - ФормаКлиентскогоПриложения - форма-источник данных
//
Процедура ДополнитьДанныеКонтрагентаПриЗаписи(ОбъектКонтрагент, Форма) Экспорт
	//++ Локализация
	ОбъектКонтрагент.СтранаРегистрации     = ?(ОбъектКонтрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент, Форма.СтранаРегистрации, Справочники.СтраныМира.Россия);
	ОбъектКонтрагент.ИНН                   = ?(Форма.ЭтоКомпания = 0,?(Форма.ВидКомпании <> 1,Форма.ИНН,""),Форма.ИННПартнерФизЛицо);
	ОбъектКонтрагент.КПП                   = ?(Форма.ЭтоКомпания = 0 И (Форма.ВидКомпании = 0 Или Форма.ВидКомпании = 3),Форма.КПП,"");
	ОбъектКонтрагент.КодПоОКПО             = ?(Форма.ЭтоКомпания = 0 И Форма.ВидКомпании <> 1,Форма.КодПоОКПО,"");
	ОбъектКонтрагент.РегистрационныйНомер  = ?(Форма.ЭтоКомпания = 0 И Форма.ВидКомпании <> 1,
												Форма.РегистрационныйНомер,
												"");
	ОбъектКонтрагент.ИсторияКПП.Загрузить(Форма.ИсторияКПП.Выгрузить());
	
	Если ОбъектКонтрагент.ИсторияКПП.Количество() > 1 
		И ОбъектКонтрагент.КПП <> ОбъектКонтрагент.ИсторияКПП[0].КПП Тогда
		
		НоваяСтрокаИстории = ОбъектКонтрагент.ИсторияКПП.Добавить();
		НоваяСтрокаИстории.Период = НачалоДня(ТекущаяДатаСеанса());
		НоваяСтрокаИстории.КПП    = ОбъектКонтрагент.КПП;
		
	КонецЕсли;
	
	Если Форма.ЭтоКомпания = 0 И НЕ ПустаяСтрока(Форма.ТелефонПартнера) И НЕ Форма.ИспользуютсяТолькоПартнеры Тогда
		Если Форма.ИНН = Форма.ИННИсточникДанныхЗаполнения Тогда
			
			НоваяСтрокаКИ = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид           = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			НоваяСтрокаКИ.Представление = Форма.ТелефонКонтрагента;
			НоваяСтрокаКИ.ЗначенияПолей = Форма.ТелефонКонтрагентаЗначенияПолей;
			НоваяСтрокаКИ.Значение     	= УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(Форма.ТелефонКонтрагентаЗначенияПолей);
			
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Дополняет данные головного контрагента при записи
// 
// Параметры:
// 	ОбъектГоловнойКонтрагент - СправочникОбъект.Контрагенты - создаваемый контрагент
// 	Форма                    - ФормаКлиентскогоПриложения - форма-источник данных
//
Процедура ДополнитьДанныеГоловногоКонтрагентаПриЗаписи(ОбъектГоловнойКонтрагент, Форма) Экспорт
	//++ Локализация
	ОбъектГоловнойКонтрагент.КПП                = Форма.КППГоловногоКонтрагента;
	ОбъектГоловнойКонтрагент.КодПоОКПО          = Форма.КодПоОКПОГоловногоКонтрагента;
	//-- Локализация
КонецПроцедуры

// Заполняет данные контрагента
// 
// Параметры:
// 	ДанныеКонтрагента - Структура - структура данных
// 	Отказ - Булево - признак отказа
//
Процедура ЗаполнитьДанныеКонтрагентаПоСсылке(ДанныеКонтрагента, Отказ) Экспорт
	//++ Локализация	
	Если ДанныеКонтрагента.Свойство("Ссылка") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
		|	Контрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.Наименование КАК Наименование,
		|	Контрагенты.НДСПоСтавкам4и2 КАК НДСПоСтавкам4и2,
		|	Контрагенты.Партнер КАК Партнер,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	МАКСИМУМ(КонтактнаяИнформация.ДействуетС) КАК ДействуетС
		|ПОМЕСТИТЬ СрезКонтактнойИнформацииКонтрагенты
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка
		|	И КонтактнаяИнформация.ДействуетС <= &ДействуетС
		|	И КонтактнаяИнформация.Вид В (ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailКонтрагента), ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагента))
		|
		|СГРУППИРОВАТЬ ПО
		|	КонтактнаяИнформация.Вид,
		|	КонтактнаяИнформация.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////2
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Представление КАК Представление,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	КонтактнаяИнформация.Значение	   КАК Значение
		|ИЗ
		|	СрезКонтактнойИнформацииКонтрагенты КАК СрезКонтактнойИнформации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
		|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
		|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДанныеКонтрагента.Ссылка);
		Запрос.УстановитьПараметр("ДействуетС", НачалоДня(ТекущаяДатаСеанса()));
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаШапка = Результат[0].Выбрать();
		
		Если ВыборкаШапка.Следующий() Тогда
			
			Если ВыборкаШапка.Партнер <> Справочники.Партнеры.НеизвестныйПартнер И ВыборкаШапка.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ДанныеКонтрагента.Вставить("Название", ВыборкаШапка.Наименование);
			ДанныеКонтрагента.Вставить("ИНН", ВыборкаШапка.ИНН);
			ДанныеКонтрагента.Вставить("КодПоОКПО", ВыборкаШапка.КодПоОКПО);
			ДанныеКонтрагента.Вставить("КПП", ВыборкаШапка.КПП);
			ДанныеКонтрагента.Вставить("ЮрФизЛицо", ВыборкаШапка.ЮрФизЛицо);
			ДанныеКонтрагента.Вставить("ОбособленноеПодразделение", ВыборкаШапка.ОбособленноеПодразделение);
			ДанныеКонтрагента.Вставить("НДСПоСтавкам4и2", ВыборкаШапка.НДСПоСтавкам4и2);
			ДанныеКонтрагента.Вставить("ПолноеЮридическоеНаименование",ВыборкаШапка.НаименованиеПолное);
			
			ВыборкаКонтактнаяИнформация = Результат[2].Выбрать();
			
			Пока ВыборкаКонтактнаяИнформация.Следующий() Цикл
				
				Если ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ФактАдресКонтрагента";
				ИначеЕсли ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
					ВидКонтактнойИнформации = "ЮрАдресКонтрагента";
				ИначеЕсли ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
					ВидКонтактнойИнформации = "EmailКонтрагента";
				ИначеЕсли ВыборкаКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
					ВидКонтактнойИнформации = "ТелефонКонтрагента";
				Иначе
					Продолжить;
				КонецЕсли;
				
				ДанныеКонтрагента.Вставить(ВидКонтактнойИнформации,Новый Структура("Представление, ЗначенияПолей, Значение",
				                                                                   ВыборкаКонтактнаяИнформация.Представление,
				                                                                   ВыборкаКонтактнаяИнформация.ЗначенияПолей,
																				   ВыборкаКонтактнаяИнформация.Значение));
				
			КонецЦикла;
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
	
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

// Заполняет форму помощника на основании данных контрагента
// 
// Параметры:
// 	ДанныеКонтрагента - Структура - структура данных
// 	Форма - ФормаКлиентскогоПриложения - заполняемая форма
//
Процедура ЗаполнитьНаОснованииКонтрагента(ДанныеКонтрагента, Форма) Экспорт
	//++ Локализация
	Если ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Форма.Название = "";
		Форма.ИНН = "";
		Форма.ИННПартнерФизЛицо = ДанныеКонтрагента.ИНН;
	ИначеЕсли ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		Форма.КПП = "";
	ИначеЕсли ДанныеКонтрагента.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент Тогда
		Форма.КПП = "";
		Форма.КодПоОКПО = "";
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Выполняет привязку обособленных подразделений
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма помощника
//
Процедура ПривязатьОбособленныеПодразделения(Форма) Экспорт
	// привязка обособленных подразделений
	Если Форма.ЭтоКомпания = 0 И Форма.ВидКомпании = 0 И ЗначениеЗаполнено(Форма.ИНН) И Форма.ПривязатьОбособленныеПодразделения = 0 Тогда
		
		Для Каждого СтрокаТаблицы Из Форма.ОбособленныеПодразделения Цикл
			Если СтрокаТаблицы.Выбран Тогда
				
				ОписаниеОшибки = "";
				ПартнерыИКонтрагентыЛокализацияВызовСервера.ИзменитьГоловногоКонтрагента(СтрокаТаблицы.Контрагент, Форма.КонтрагентВыбор, ОписаниеОшибки);
				
				Если НЕ ПустаяСтрока(ОписаниеОшибки) Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

// Заполняет список выбора
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ЗаполнитьСписокВыбораГоловногоКонтрагента(Форма) Экспорт
	//++ Локализация
	ИмяЭлементаФормы = ?(Форма.ИспользуютсяТолькоПартнеры, "ГоловнойКонтрагентДопСведения", "ГоловнойКонтрагент");
	
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлементаФормы);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = ЭлементФормы.СписокВыбора;
	СписокВыбора.Очистить();
	
	ИНН = Строка(Форма.ИНН);
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		СписокГоловныхКонтрагентов = СписокВозможныхГоловныхКонтрагентов(ИНН);
		
		Для Каждого Элемент Из СписокГоловныхКонтрагентов Цикл
			СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	РазмерСписка = СписокВыбора.Количество();
	
	Если РазмерСписка = 1 Тогда
		Форма.ГоловнойКонтрагент = СписокВыбора[0].Значение;
	ИначеЕсли РазмерСписка = 0
			Или (ЗначениеЗаполнено(Форма.ГоловнойКонтрагент) 
			И СписокВыбора.НайтиПоЗначению(Форма.ГоловнойКонтрагент) = Неопределено) Тогда
		Форма.ГоловнойКонтрагент = Неопределено;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормЭлементаСправочникаКонтрагенты

// Обработчик события ПередЗаписьюНаСервере формы элемента справочника Контрагенты
//
// Параметры:
//  Отказ                - Булево - признак отказа от создания формы.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ОбработкаПроверкиЗаполненияНаСервереКонтрагент(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
	
КонецПроцедуры

// Устанавливает условное для реквизитов формы элемента справочника Контрагенты.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление.
//
Процедура УстановитьУсловноеОформлениеКонтрагент(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	//++ Локализация
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИНН.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННФизЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЮрФизЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ФизЛицо);
	СписокЗначений.Добавить(Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИНН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//-- Локализация
КонецПроцедуры

// Обработчик события ПриЧтенииСозданииНаСервере формы элемента справочника Контрагенты
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПриЧтенииСозданииНаСервереКонтрагент(Форма) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация

	Форма.НастройкиПодключенияКСервисуИППЗаданы = НастройкиПодключенияКСервисуИППЗаданы();
	
	Если Не Форма.НастройкиПодключенияКСервисуИППЗаданы 
		И СтрНайти(Форма.ИмяФормы, "Контрагенты") > 0 Тогда // Только для формы справочника Контрагенты
		Форма.Элементы.НаименованиеСокращенное.ПодсказкаВвода = "";
	КонецЕсли;

	//-- Локализация
КонецПроцедуры

// Обработчик события ПередЗаписью справочника Контрагенты
// 
// Параметры:
// 	Объект - СправочникОбъект.Контрагенты - объект Контрагент.
// 	Отказ - Булево - признак отказа обработки.
//
Процедура ПередЗаписьюКонтрагент(Объект, Отказ) Экспорт
	//++ Локализация
	// Обработка смены пометки удаления.
	Если Не Объект.ЭтоНовый() Тогда
	
		// изменим ИНН в подчиненных контрагентах
		Если Не Объект.ОбособленноеПодразделение И Объект.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
			ИзменитьИННПодчиненныхКонтрагентов(Объект.Ссылка, Объект.ИНН);
		КонецЕсли;
	
	КонецЕсли;
	//-- Локализация	
КонецПроцедуры

Процедура ПриОкончанииИзмененияРеквизита_Контрагент(ИмяЭлемента, Форма) Экспорт
	
	
КонецПроцедуры

Процедура ВыполнитьКомандуЛокализации(Форма, ИмяКоманды, ПараметрыОбработки) Экспорт
	//++ Локализация
	Если ИмяКоманды = "РазобратьФайлНаСервере" Тогда
		РазобратьФайлНаСервере(ПараметрыОбработки.СсылкаНаФайл, ПараметрыОбработки.ЕстьОшибкаЧтенияФайла, Форма);
		ПараметрыОбработки.Вставить("ИмяПроцедуры", "ВидимостьСтраницПервичнаяИнформация");
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаКонтрагенты

// Обработчик события ПриСозданииНаСервере формы списка (параметрическая) справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаСпискаПараметрическаяКонтрагент(Форма,  Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	ИспользоватьПроверкуКонтрагентов                  = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
	Элементы.ЕстьОшибкиПроверкаКонтрагентов.Видимость = ИспользоватьПроверкуКонтрагентов;
	Элементы.ЛокализацияГруппаЛегенда.Видимость       = ИспользоватьПроверкуКонтрагентов;
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы списка справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаСпискаКонтрагент(Форма,  Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	ИспользоватьПроверкуКонтрагентов                  = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
	Элементы.ЕстьОшибкиПроверкаКонтрагентов.Видимость = ИспользоватьПроверкуКонтрагентов;
	Элементы.ЛокализацияГруппаЛегенда.Видимость       = ИспользоватьПроверкуКонтрагентов;
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы выбора справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаВыбораКонтрагент(Форма,  Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	ИспользоватьПроверкуКонтрагентов                  = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
	Элементы.ЕстьОшибкиПроверкаКонтрагентов.Видимость = ИспользоватьПроверкуКонтрагентов;
	Элементы.ЛокализацияГруппаЛегенда.Видимость       = ИспользоватьПроверкуКонтрагентов;
	
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы выбора справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаВыборГоловногоКонтрагента(Форма,  Отказ, СтандартнаяОбработка) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	Если ЗначениеЗаполнено(Параметры.ИНН) Тогда
		
		Форма.ТаблицаКонтрагентов = ВозможныеГоловныеКонтрагенты(Параметры.ИНН, Параметры.Контрагент);
		
		Для Каждого СтрокаТаблицы Из Форма.ТаблицаКонтрагентов Цикл
			Форма.СписокВыбора.Добавить(
				СтрокаТаблицы.Ссылка,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, КПП: %2'"),
					СтрокаТаблицы.Представление,
					?(ЗначениеЗаполнено(СтрокаТаблицы.КПП), СтрокаТаблицы.КПП, НСтр("ru = '<не заполнен>'"))));
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	
КонецПроцедуры

// Обработчик события ПриСозданииНаСервере формы списка/выбора справочника Контрагенты
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//  ЗапросСИнформациейПоКонтрагенту - Булево - признак запроса с информацией по контрагенту
//
Процедура ПриСозданииНаСервереФормаВыбораСпискаПартнеры(Форма, Отказ, СтандартнаяОбработка, ЗапросСИнформациейПоКонтрагенту = Ложь) Экспорт
	//++ Локализация
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	ИспользоватьПроверкуКонтрагентов           = ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена();
	Если Не СтрНайти(Форма.ИмяФормы, "Контрагенты") > 0 Тогда
		ОтображатьИнформациюПоПроверкеКонтрагентов = Форма.ИспользоватьПартнеровКакКонтрагентов
		                                                          И ИспользоватьПроверкуКонтрагентов
		                                                          И ЗапросСИнформациейПоКонтрагенту;
		Форма.Элементы.ЕстьОшибкиПроверкаКонтрагентов.Видимость = ОтображатьИнформациюПоПроверкеКонтрагентов;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		                                                               "ГруппаЛегенда",
		                                                               "Видимость",
		                                                               ОтображатьИнформациюПоПроверкеКонтрагентов);	
		// Сервис 1С-ЭДО
		ЭлементЭДО = Форма.Элементы.Найти("ЭДО");
		Если ЭлементЭДО <> Неопределено Тогда
			ЭлементЭДО.Видимость = Форма.ИспользоватьПартнеровКакКонтрагентов И ЗапросСИнформациейПоКонтрагенту;
		КонецЕсли;
		ЭлементКомандыЭДО = Форма.Элементы.Найти("КомандыЭДО");
		Если ЭлементКомандыЭДО <> Неопределено Тогда
			ЭлементКомандыЭДО.Видимость = Форма.ИспользоватьПартнеровКакКонтрагентов;
		КонецЕсли;		
		// Конец Сервис 1С-ЭДО	
	КонецЕсли;
	//-- Локализация
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
КонецПроцедуры

Процедура УстановитьСвойстваДинамическогоСпискаКонтрагенты(Форма) Экспорт
	//++ Локализация

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса					= ТекстЗапросаДинамическогоСпискаКонтрагенты();
	СвойстваСписка.ОсновнаяТаблица				= "Справочник.Контрагенты";
	СвойстваСписка.ДинамическоеСчитываниеДанных	= Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Форма.Элементы.Список, СвойстваСписка);
	
	//-- Локализация	
КонецПроцедуры

Процедура УстановитьСвойстваДинамическогоСпискаФормыВыбораКонтрагенты(Форма) Экспорт
	//++ Локализация

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СвойстваСписка.ТекстЗапроса					= ТекстЗапросаДинамическогоСпискаФормыВыбораКонтрагенты();
	СвойстваСписка.ОсновнаяТаблица				= "Справочник.Контрагенты";
	СвойстваСписка.ДинамическоеСчитываниеДанных	= Истина;
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Форма.Элементы.Список, СвойстваСписка);
	
	//-- Локализация	
КонецПроцедуры

//++ Локализация
Функция ТекстЗапросаДинамическогоСпискаКонтрагенты()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникКонтрагенты.Ссылка,
	|	СправочникКонтрагенты.ПометкаУдаления,
	|	СправочникКонтрагенты.Предопределенный,
	|	СправочникКонтрагенты.Наименование,
	|	СправочникКонтрагенты.НаименованиеПолное,
	|	СправочникКонтрагенты.ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА СправочникКонтрагенты.ОбособленноеПодразделение
	|			ТОГДА ВЫРАЗИТЬ(&ПредставлениеОбособленногоПодразделения КАК СТРОКА(100))
	|		ИНАЧЕ СправочникКонтрагенты.ЮрФизЛицо
	|	КОНЕЦ КАК ВидКонтрагента,
	|	СправочникКонтрагенты.ОбособленноеПодразделение,
	|	СправочникКонтрагенты.ЮридическоеФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА СправочникКонтрагенты.ОбособленноеПодразделение
	|			ТОГДА СправочникКонтрагенты.ГоловнойКонтрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК ГоловнойКонтрагент,
	|	СправочникКонтрагенты.ИНН,
	|	СправочникКонтрагенты.КПП,
	|	СправочникКонтрагенты.КодПоОКПО,
	|	СправочникКонтрагенты.НДСпоСтавкам4и2,
	|	СправочникКонтрагенты.Партнер,
	|	СправочникКонтрагенты.Представление,
	|	ВЫБОР
	|		КОГДА СостоянияКонтрагентов.Состояние ЕСТЬ NULL 
	|				ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка)
	|				ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС)
	|				ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке)
	|			ТОГДА 3
	|		КОГДА СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП)
	|			ТОГДА 2
	|		КОГДА СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЕстьОшибкиПроверкаКонтрагентов
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	|	,
  	|	ВЫБОР
  	|   	КОГДА СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.Подключен)
  	|      		ТОГДА 1
  	|  		КОГДА СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НастроенЭДО)
  	|      		ТОГДА 2
  	|  		ИНАЧЕ 0
  	|  	КОНЕЦ КАК ЭДО,
  	|   ВЫБОР
  	|      	КОГДА СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(перечисление.СостоянияКонтрагентаБЭД.НастроенЭДО)
  	|       	ТОГДА ИСТИНА
  	|      	ИНАЧЕ ЛОЖЬ
  	|  	КОНЕЦ КАК ЕстьСвязь,
	|	СостоянияКонтрагентовБЭД.Состояние КАК СостояниеПодключенияЭДО
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	|ИЗ
	|	Справочник.Контрагенты КАК СправочникКонтрагенты
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
	|		ПО (СостоянияКонтрагентов.Контрагент = СправочникКонтрагенты.Ссылка)}
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
	|		ПО СостоянияКонтрагентовБЭД.Контрагент = СправочникКонтрагенты.Ссылка
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДинамическогоСпискаФормыВыбораКонтрагенты()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникКонтрагенты.Ссылка,
	|	СправочникПартнеры.Ссылка КАК Партнер,
	|	СправочникПартнеры.Предопределенный,
	|	СправочникПартнеры.Родитель,
	|	СправочникПартнеры.Код,
	|	СправочникПартнеры.Наименование,
	|	СправочникПартнеры.БизнесРегион,
	|	СправочникПартнеры.ГруппаДоступа,
	|	СправочникПартнеры.ДатаРегистрации,
	|	СправочникПартнеры.Клиент,
	|	СправочникПартнеры.Комментарий,
	|	СправочникПартнеры.Конкурент,
	|	СправочникПартнеры.ОсновнойМенеджер,
	|	СправочникПартнеры.Поставщик,
	|	СправочникПартнеры.ПрочиеОтношения,
	|	СправочникКонтрагенты.ИНН,
	|	СправочникКонтрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	СправочникКонтрагенты.ЮрФизЛицо КАК ЮрФизЛицо,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникКонтрагенты.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА &ПредставлениеОбособленногоПодразделения
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(СправочникКонтрагенты.ЮрФизЛицо)
	|	КОНЕЦ КАК ВидКонтрагента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СправочникКонтрагенты.ОбособленноеПодразделение, ЛОЖЬ)
	|			ТОГДА СправочникКонтрагенты.ГоловнойКонтрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК ГоловнойКонтрагент,
	|	СправочникКонтрагенты.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	СправочникКонтрагенты.КПП,
	|	СправочникКонтрагенты.КодПоОКПО,
	|	СправочникКонтрагенты.НДСпоСтавкам4и2,
	|	ЕСТЬNULL(СостоянияКонтрагентов.Состояние,
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС)) КАК СостояниеПроверкиКонтрагента,
	|	ВЫБОР
	|		КОГДА СостоянияКонтрагентов.Состояние ЕСТЬ NULL
	|		ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка)
	|		ИЛИ
	|			СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС)
	|		ИЛИ
	|			СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке)
	|			ТОГДА 3
	|		КОГДА
	|			СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП)
	|			ТОГДА 2
	|		КОГДА СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерКартинкиСостояниеПроверки
	|ИЗ
	|	Справочник.Контрагенты КАК СправочникКонтрагенты {ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК
	|			СостоянияКонтрагентов
	|		ПО СостоянияКонтрагентов.Контрагент = СправочникКонтрагенты.Ссылка}
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК СправочникПартнеры
	|		ПО СправочникКонтрагенты.Партнер = СправочникПартнеры.Ссылка
	|ГДЕ
	|	ВЫБОР
	|		КОГДА
	|		НЕ &ОтборПоСегментуУстановлен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоСегменту)
	|	КОНЕЦ
	|	И ВЫБОР
	|		КОГДА
	|		НЕ &ОтборПоПолнотекстовомуПоискуУстановлен
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоПолнотекстовомуПоиску)
	|	КОНЕЦ
	|{ГДЕ
	|	СправочникПартнеры.Ссылка КАК ПараметризацияПоПартнеру}";
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- Локализация	

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

Функция ТекстЗапросаДинамическогоСпискаПартнерыСИнформациейПоКонтрагенту() Экспорт
	//++ Локализация
	Возврат "
		|ВЫБРАТЬ
		|	СправочникПартнеры.Ссылка,
		|	СправочникПартнеры.ПометкаУдаления,
		|	СправочникПартнеры.Предопределенный,
		|	СправочникПартнеры.Родитель,
		|	СправочникПартнеры.Код,
		|	СправочникПартнеры.Наименование,
		|	СправочникПартнеры.БизнесРегион,
		|	СправочникПартнеры.ГруппаДоступа,
		|	СправочникПартнеры.ДатаРегистрации,
		|	СправочникПартнеры.Клиент,
		|	СправочникПартнеры.Комментарий,
		|	СправочникПартнеры.Конкурент,
		|	СправочникПартнеры.НаименованиеПолное,
		|	СправочникПартнеры.ОсновнойМенеджер,
		|	СправочникПартнеры.Поставщик,
		|	СправочникПартнеры.Перевозчик,
		|	СправочникПартнеры.ПрочиеОтношения,
		|	СправочникПартнеры.ДополнительныеРеквизиты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Свойство,
		|		Значение,
		|		ТекстоваяСтрока
		|	),
		|	СправочникПартнеры.КонтактнаяИнформация.(
		|		Ссылка,
		|		НомерСтроки,
		|		Тип,
		|		Вид,
		|		Представление,
		|		ЗначенияПолей,
		|		Страна,
		|		Регион,
		|		Город,
		|		АдресЭП,
		|		ДоменноеИмяСервера,
		|		НомерТелефона,
		|		НомерТелефонаБезКодов
		|	),
		|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
		|	ЕСТЬNULL(Контрагенты.ЮрФизЛицо, ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ПустаяСсылка)) КАК ЮрФизЛицо,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Контрагенты.ОбособленноеПодразделение, ЛОЖЬ)
		|			ТОГДА Контрагенты.ГоловнойКонтрагент
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|	КОНЕЦ КАК ГоловнойКонтрагент,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Контрагенты.ОбособленноеПодразделение, ЛОЖЬ)
		|			ТОГДА &ПредставлениеОбособленногоПодразделения
		|		ИНАЧЕ ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Контрагенты.ЮрФизЛицо), """")
		|	КОНЕЦ КАК ВидКонтрагента,
		|	ЕСТЬNULL(Контрагенты.ОбособленноеПодразделение, ЛОЖЬ) КАК ОбособленноеПодразделение,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(Контрагенты.ИНН, """") КАК Строка(50)) КАК ИНН,
		|	ЕСТЬNULL(Контрагенты.КПП, """") КАК КПП,
		|	ЕСТЬNULL(Контрагенты.КодПоОКПО, """") КАК КодПоОКПО,
		|	ЕСТЬNULL(СостоянияКонтрагентов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС)) КАК СостояниеПроверкиКонтрагента,
		|	ВЫБОР
		|		КОГДА СостоянияКонтрагентов.Состояние ЕСТЬ NULL
		|				ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустаяСсылка)
		|				ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС)
		|				ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке)
		|			ТОГДА 3
		|		КОГДА СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП)
		|			ТОГДА 2
		|		КОГДА СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.ПустойИННИлиКПП)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НомерКартинкиСостояниеПроверки
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		|	,
  		|	ВЫБОР
  		|   	КОГДА СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.Подключен)
  		|      		ТОГДА 1
  		|  		КОГДА СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтрагентаБЭД.НастроенЭДО)
  		|      		ТОГДА 2
  		|  		ИНАЧЕ 0
  		|  	КОНЕЦ КАК ЭДО,
  		|   ВЫБОР
  		|      	КОГДА СостоянияКонтрагентовБЭД.Состояние = ЗНАЧЕНИЕ(перечисление.СостоянияКонтрагентаБЭД.НастроенЭДО)
  		|       	ТОГДА ИСТИНА
  		|      	ИНАЧЕ ЛОЖЬ
  		|  	КОНЕЦ КАК ЕстьСвязь,
		|	СостоянияКонтрагентовБЭД.Состояние КАК СостояниеПодключенияЭДО
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		|ИЗ
		|	Справочник.Партнеры КАК СправочникПартнеры
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (Контрагенты.Партнер = СправочникПартнеры.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
		|		ПО (СостоянияКонтрагентов.Контрагент = Контрагенты.Ссылка)
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
		|		ПО (СостоянияКонтрагентовБЭД.Контрагент = Контрагенты.Ссылка)
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		|}		
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ОтборПоСегментуУстановлен <> ИСТИНА
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоСегменту)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА НЕ &ОтборПоПолнотекстовомуПоискуУстановлен
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоПолнотекстовомуПоиску)
		|		КОНЕЦ";
	//-- Локализация
КонецФункции

#КонецОбласти

#Область ПоискДублейПартнеровКонтрагентов

Процедура ЗаполнитьИтоговуюИнформацию(ИтоговаяИнформация, Форма) Экспорт
	//++ Локализация
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#WE#");
	Если (Форма.ИспользуютсяТолькоПартнеры Или Форма.ДействиеСКонтрагентом = 1) И Форма.УказыватьЮридическиеРеквизиты Тогда
		СтруктураИНН = ДанныеИНН_КПП(Форма);
		Если Форма.ЕстьДубльПоОснРеквизитам Тогда 
			РезультатПоиска = ИННКППУжеИспользуетсяВИнформационнойБазе(СтруктураИНН.ИНН, СтруктураИНН.КПП, , ПартнерыИКонтрагенты.ЮрФизЛицоПоДаннымФормыПомощникаНового(Форма));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#InformationRepetetiveINN#", СообщениеДубльИНН(СтруктураИНН.ИНН_КПП, РезультатПоиска.НайденныеСовпадения[0]));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ID#", "");
		Иначе
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#INN#", СтруктураИНН.ИНН_КПП);
			Если Форма.ЭтоКомпания = 0
				И Форма.ВидКомпании <> 1 Тогда
				
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#OKPOCode#", Форма.КодПоОКПО);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#SKD#", "");
				
				Если Форма.ВидКомпании = 2 Тогда
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#OGRNIP#", Форма.РегистрационныйНомер);
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#OGI#", "");
				Иначе
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#OGRN#", Форма.РегистрационныйНомер);
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#OG#", "");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ВидКомпании = 3 И Не Форма.ИспользуютсяТолькоПартнеры И Форма.ВыбратьГоловногоКонтрагента = 1 Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,
			"#HeadCounterpartyINN#", 
			Форма.ИНН + ?(ПустаяСтрока(Форма.КППГоловногоКонтрагента), "", "\" + Форма.КППГоловногоКонтрагента));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#HeadCounterpartyOKPOCode#", Форма.КодПоОКПОГоловногоКонтрагента);
	КонецЕсли;
	//-- Локализация
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#WE#", "");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#OG#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#OGI#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#SKD#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#DD#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#BA#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#OKPOCode#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#INN#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#OGRN#");
	ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#OGRNIP#");
КонецПроцедуры

Процедура ВыполнитьПоискПоПервичнойИнформацииЗавершение(Форма, ПредставленияРеквизитов) Экспорт
	//++ Локализация
	Форма.ЕстьДубльПоОснРеквизитам = Ложь;
	Элементы =  Форма.Элементы;
	
	СтруктураИНН = ДанныеИНН_КПП(Форма);
	
	Если Не (Форма.НаОснованииКонтрагента Или ПустаяСтрока(СтруктураИНН.ИНН)) Тогда
		РезультатПоиска = ИННКППУжеИспользуетсяВИнформационнойБазе(СтруктураИНН.ИНН, СтруктураИНН.КПП, , ПартнерыИКонтрагенты.ЮрФизЛицоПоДаннымФормыПомощникаНового(Форма));
		Форма.ЕстьДубльПоОснРеквизитам = (Не РезультатПоиска.ДоступноСоздание);
	КонецЕсли;
	
	Если Форма.ЕстьДубльПоОснРеквизитам Тогда
		Элементы.ДекорацияДубльИННКПП.Заголовок = СообщениеДубльИНН(СтруктураИНН.ИНН_КПП, РезультатПоиска.НайденныеСовпадения[0]);
		Если Форма.ИспользуютсяТолькоПартнеры Тогда
			Элементы.ДействиеПоРезультатамНайдено.Доступность = Ложь;
			Форма.ДействиеПоРезультатамНайдено = 0;
		КонецЕсли;
		Элементы.ГруппаДействиеСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаДубльИННКПП;
		Если Форма.ТаблицаНайдено.Количество() > 0 Тогда
			Форма.ДействиеСКонтрагентом = 0;
		КонецЕсли;
		ОтобразитьДубльИННКППВНайденныхПартнерах(РезультатПоиска.НайденныеСовпадения[0], ПредставленияРеквизитов, Форма);
	Иначе
		Элементы.ДействиеПоРезультатамНайдено.Доступность = Истина;
		Элементы.ДекорацияДубльИННКПП.Заголовок = "";
		Элементы.ГруппаДействиеСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаДействиеСКонтрагентом;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДействиеСКонтрагентом", "Видимость",
			Не Форма.ИспользуютсяТолькоПартнеры И Форма.УказыватьЮридическиеРеквизиты);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьСтруктуруПоиска(Форма, СтруктураПоиска) Экспорт
	//++ Локализация
	СтруктураПоиска.Вставить("КодПоОКПО", (Форма.ЭтоКомпания = 0 И Форма.УказыватьЮридическиеРеквизиты И Форма.ВидКомпании <> 1 И Не ПустаяСтрока(Форма.КодПоОКПО)));
	//-- Локализация	
КонецПроцедуры

Процедура ПередСозданиемПартнераВФормеПомощникаНового(Форма, ЮрФизЛицо,  Отказ) Экспорт
	
	//++ Локализация
	
	РезультатПоиска = Неопределено;
	
	Если (Форма.УказыватьЮридическиеРеквизиты И Форма.ЭтоКомпания = 0 И Не ПустаяСтрока(Форма.ИНН)) Тогда
		
		РезультатПоиска = ИННКППУжеИспользуетсяВИнформационнойБазе(Форма.ИНН, Форма.КПП,,ЮрФизЛицо);
		
	ИначеЕсли (Форма.ЭтоКомпания = 1 И Не ПустаяСтрока(Форма.ИННПартнерФизЛицо)) Тогда
		
		РезультатПоиска =  ИННКППУжеИспользуетсяВИнформационнойБазе(Форма.ИННПартнерФизЛицо, "",,ЮрФизЛицо);
		
	КонецЕсли;
	
	Если РезультатПоиска <> Неопределено
		И (Не РезультатПоиска.ДоступноСоздание) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаПоиска(ТекстЗапроса, СтруктураПоиска, НаОснованииКонтрагента) Экспорт
	//++ Локализация

	Если СтруктураПоиска.КодПоОКПО Тогда
		ДополнитьЗапросОКПО(ТекстЗапроса, НаОснованииКонтрагента);
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаПоиска(Форма, Запрос) Экспорт
	//++ Локализация
	Запрос.УстановитьПараметр("КодПоОКПО", Форма.КодПоОКПО);
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьПредставленияРеквизитовПоиска(ПредставленияРеквизитов) Экспорт
	//++ Локализация
	ПредставленияРеквизитов.Вставить("СтрокаКодОКПО", НСтр("ru='Код по ОКПО'"));
	ПредставленияРеквизитов.Вставить("СтрокаКПП", НСтр("ru='КПП'"));
	//-- Локализация
КонецПроцедуры

Процедура ПоместитьВременныеТаблицыРеквизитовКонтрагента(ПредставленияРеквизитов, СтруктураПоиска, РеквизитыИнформацииБезПоиска, РеквизитыКонтрагента, Форма) Экспорт
	//++ Локализация
		
	Если СтруктураПоиска.ИНН Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаИНН,
			?(Форма.ЭтоКомпания = 0, Форма.ИНН, Форма.ИННПартнерФизЛицо), 4, Истина);
		Если Форма.ЭтоКомпания = 0 И (Форма.ВидКомпании = 0 Или Форма.ВидКомпании = 3) Тогда
			РеквизитыИнформацииБезПоиска.Добавить(ПредставленияРеквизитов.СтрокаКПП);
			ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаКПП, Форма.КПП, 5);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураПоиска.КодПоОКПО Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаКодОКПО, Форма.КодПоОКПО, 6);
	КонецЕсли;
	
	//-- Локализация	
КонецПроцедуры

Процедура ДополнитьСводныйЗапросПоСтруктуреПоиска(СводныйЗапрос, СтруктураПоиска) Экспорт
	//++ Локализация
	Если СтруктураПоиска.ИНН Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоИНН.Партнер,
		|	КонтрагентыПоИНН.НайденоПоСсылка,
		|	КонтрагентыПоИНН.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоИНН КАК КонтрагентыПоИНН
		|"; 
		
	КонецЕсли;
	
	Если СтруктураПоиска.КодПоОКПО Тогда
	
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоОКПО.Партнер,
		|	КонтрагентыПоОКПО.НайденоПоСсылка,
		|	КонтрагентыПоОКПО.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоОКПО КАК КонтрагентыПоОКПО
		|";
	
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

Процедура УстановитьДополнительныеУсловияСводногоЗапроса(СводныйЗапрос) Экспорт
	//++ Локализация
	СтрокаУсловий = "
	|ВЫБОР
	|	КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаИНН
	|			ТОГДА Контрагенты.ИНН
	|	КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаКПП
	|		ТОГДА Контрагенты.КПП
	|	КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаКодОКПО
	|		ТОГДА Контрагенты.КодПоОКПО
	|	ИНАЧЕ
	|		""""
	|	КОНЕЦ
	|";
	СводныйЗапрос = СтрЗаменить(СводныйЗапрос, "&ДопУсловия", СтрокаУсловий);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

//++ Локализация
#Область ЗаполнениеРеквизитовКонтрагентаПоИНН

// Получает данные контрагента по ИНН 
//
// Параметры:
//  ПараметрыФормирования - Структура - параметры формирования фонового задания.
//  АдресХранилища        - Строка - адрес хранилища, в который будут помещены результаты выполнения фонового задания.
//
Процедура ДанныеКонтрагентаПоИННФоновоеЗадание(ПараметрыФормирования, АдресХранилища) Экспорт
	
	Если ПараметрыФормирования.ЭтоЮридическоеЛицо Тогда
		
		РезультатФормирования   = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ПараметрыФормирования.ИНН);
		РезультатПреобразования = РезультатПреобразованияСведенийОЮрЛице(РезультатФормирования);
		ПоместитьВоВременноеХранилище(РезультатПреобразования, АдресХранилища);
		
	Иначе
		
		РезультатФормирования = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ПараметрыФормирования.ИНН);
		РезультатПреобразования = РезультатПреобразованияСведенийОФизЛице(РезультатФормирования);
		ПоместитьВоВременноеХранилище(РезультатПреобразования, АдресХранилища);
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатПреобразованияСведенийОФизЛице(РезультатФормирования) Экспорт
	
	РезультатПреобразования = НовыйРезультатПреообразованияДанныхКонтрагента();
	
	РезультатПреобразования.ИНН            = РезультатФормирования.ИНН;
	РезультатПреобразования.ОписаниеОшибки = РезультатФормирования.ОписаниеОшибки;
	
	//Наименование
	Если РезультатФормирования.Свойство("Наименование")
		И Не ПустаяСтрока(РезультатФормирования.Наименование) Тогда
		
		РезультатПреобразования.Наименование = РезультатФормирования.Наименование;
		
	ИначеЕсли РезультатФормирования.Свойство("НаименованиеПолное")
		И Не ПустаяСтрока(РезультатФормирования.НаименованиеПолное) Тогда
		
		РезультатПреобразования.Наименование = РезультатФормирования.НаименованиеПолное;
		
	КонецЕсли;
	
	//Наименование сокращенное
	Если РезультатФормирования.Свойство("НаименованиеСокращенное")
		И Не ПустаяСтрока(РезультатФормирования.НаименованиеСокращенное) Тогда
		
		РезультатПреобразования.НаименованиеСокращенное = РезультатФормирования.НаименованиеСокращенное;
	КонецЕсли;   
	
	// Наименование полное
	Если РезультатФормирования.Свойство("НаименованиеПолное")
		И Не ПустаяСтрока(РезультатФормирования.НаименованиеПолное) Тогда
		
		РезультатПреобразования.НаименованиеПолное = РезультатФормирования.НаименованиеПолное;
		
	КонецЕсли;
	
	Если РезультатФормирования.Свойство("РегистрацияВНалоговомОргане") 
		И ЗначениеЗаполнено(РезультатФормирования.РегистрацияВНалоговомОргане) Тогда 
		
		РезультатПреобразования.РегистрацияВНалоговомОргане = РезультатФормирования.РегистрацияВНалоговомОргане;
		
	КонецЕсли;
	
	Если РезультатФормирования.Свойство("ДатаРегистрации")
		И ЗначениеЗаполнено(РезультатФормирования.ДатаРегистрации) Тогда 
		
		РезультатПреобразования.ДатаРегистрации = РезультатФормирования.ДатаРегистрации;
		
	КонецЕсли;
	
	Если РезультатФормирования.Свойство("РегистрационныйНомер")
		И Не ПустаяСтрока(РезультатФормирования.РегистрационныйНомер) Тогда
		
		РезультатПреобразования.РегистрационныйНомер = РезультатФормирования.РегистрационныйНомер;
		
	КонецЕсли;            
	
	Если РезультатФормирования.Свойство("СвидетельствоОРегистрации") 
		И РезультатФормирования.СвидетельствоОРегистрации <> Неопределено Тогда
		
		РезультатПреобразования.СвидетельствоСерияНомер.Серия = РезультатФормирования.СвидетельствоОРегистрации.Серия;
		РезультатПреобразования.СвидетельствоСерияНомер.Номер = РезультатФормирования.СвидетельствоОРегистрации.Номер;
		РезультатПреобразования.СвидетельствоСерияНомер.Дата = РезультатФормирования.СвидетельствоОРегистрации.Дата;
	КонецЕсли;
	
	//КодОКВЭД и ЭтоОКВЭД2
	Если РезультатФормирования.Свойство("ВидДеятельности")
		И РезультатФормирования.ВидДеятельности <> Неопределено Тогда 
		
		РезультатПреобразования.КодОКВЭД  = РезультатФормирования.ВидДеятельности.Код;
		РезультатПреобразования.ЭтоОКВЭД2 = РезультатФормирования.ЭтоОКВЭД2;
	КонецЕсли;
	
	//История реквизитов
	Если РезультатФормирования.Свойство("ИсторияРеквизитов") Тогда
		
		//История Наименований
		Если РезультатФормирования.ИсторияРеквизитов.Свойство("ФИО") Тогда
			
			ИсторияНаименования = Новый Массив;
			
			РезультатФормирования.ИсторияРеквизитов.ФИО.Сортировать("Дата Убыв");
			
			Для Каждого СтрокаИстории Из РезультатФормирования.ИсторияРеквизитов.ФИО Цикл
				
				ДанныеНаименования = Новый Структура;
				ДанныеНаименования.Вставить("Дата",                    СтрокаИстории.Дата);
				
				ФИО = СтрШаблон("%1 %2 %3", СтрокаИстории.Фамилия, СтрокаИстории.Имя, СтрокаИстории.Отчество);
				ДанныеНаименования.Вставить("НаименованиеПолное",      ФИО);
				ДанныеНаименования.Вставить("НаименованиеСокращенное", ФИО);
				
				ИсторияНаименования.Добавить(ДанныеНаименования);
				
			КонецЦикла;
			
			РезультатПреобразования.ИсторияРеквизитов.Наименование = ИсторияНаименования;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПреобразования;
	
КонецФункции

Функция РезультатПреобразованияСведенийОЮрЛице(РезультатФормирования) Экспорт
	
	РезультатПреобразования = НовыйРезультатПреообразованияДанныхКонтрагента();
	
	РезультатПреобразования.ИНН            = РезультатФормирования.ИНН;
	РезультатПреобразования.ОписаниеОшибки = РезультатФормирования.ОписаниеОшибки;
	
	Если РезультатФормирования.Свойство("ЕГРЮЛ")
		И ТипЗнч(РезультатФормирования.ЕГРЮЛ) = Тип("Структура") Тогда
		
		// КПП
		Если РезультатФормирования.ЕГРЮЛ.Свойство("КПП") Тогда
			
			РезультатПреобразования.КПП = РезультатФормирования.ЕГРЮЛ.КПП;
			
		КонецЕсли;
		
		//Наименование
		Если РезультатФормирования.ЕГРЮЛ.Свойство("Наименование")
			И Не ПустаяСтрока(РезультатФормирования.ЕГРЮЛ.Наименование) Тогда
			
			РезультатПреобразования.Наименование = РезультатФормирования.ЕГРЮЛ.Наименование;
			
		КонецЕсли;	
		
		//Наименование полное
		Если РезультатФормирования.ЕГРЮЛ.Свойство("НаименованиеПолное")
			И Не ПустаяСтрока(РезультатФормирования.ЕГРЮЛ.НаименованиеПолное) Тогда
			
			РезультатПреобразования.НаименованиеПолное = РезультатФормирования.ЕГРЮЛ.НаименованиеПолное;
			
		КонецЕсли;
		
		//Наименование международное
		Если РезультатФормирования.ЕГРЮЛ.Свойство("НаименованиеСокращенноеНаАнглийском")
			И Не ПустаяСтрока(РезультатФормирования.ЕГРЮЛ.НаименованиеСокращенноеНаАнглийском) Тогда
			
			РезультатПреобразования.НаименованиеМеждународное = РезультатФормирования.ЕГРЮЛ.НаименованиеСокращенноеНаАнглийском;
			
		КонецЕсли;

		//Наименование сокращенное
		Если РезультатФормирования.ЕГРЮЛ.Свойство("НаименованиеСокращенное")
			И Не ПустаяСтрока(РезультатФормирования.ЕГРЮЛ.НаименованиеСокращенное) Тогда
			
			РезультатПреобразования.НаименованиеСокращенное = РезультатФормирования.ЕГРЮЛ.НаименованиеСокращенное;
			
		ИначеЕсли РезультатФормирования.ЕГРЮЛ.Свойство("НаименованиеПолное")
			И Не ПустаяСтрока(РезультатФормирования.ЕГРЮЛ.НаименованиеПолное) Тогда
			
			РезультатПреобразования.НаименованиеСокращенное = РезультатФормирования.ЕГРЮЛ.НаименованиеПолное;
			
		КонецЕсли;
		
		// ДатаРегистрации
		Если РезультатФормирования.ЕГРЮЛ.Свойство("ДатаРегистрации") Тогда
			РезультатПреобразования.ДатаРегистрации = РезультатФормирования.ЕГРЮЛ.ДатаРегистрации;
		КонецЕсли;
		
		// Юридический адрес
		Если РезультатФормирования.ЕГРЮЛ.Свойство("ЮридическийАдрес")
			И РезультатФормирования.ЕГРЮЛ.ЮридическийАдрес <> Неопределено Тогда
				
				ДанныеЮридическогоАдреса = Новый Структура;
				ДанныеЮридическогоАдреса.Вставить("КонтактнаяИнформация", РезультатФормирования.ЕГРЮЛ.ЮридическийАдрес.КонтактнаяИнформация);
				ДанныеЮридическогоАдреса.Вставить("Представление",        РезультатФормирования.ЕГРЮЛ.ЮридическийАдрес.Представление);
				
				РезультатПреобразования.ЮридическийАдрес = ДанныеЮридическогоАдреса;
				
		КонецЕсли;
			
		// Телефон
		Если РезультатФормирования.ЕГРЮЛ.Свойство("Телефон")
			И РезультатФормирования.ЕГРЮЛ.Телефон <> Неопределено Тогда
				
				ДанныеТелефона = Новый Структура;
				ДанныеТелефона.Вставить("КонтактнаяИнформация", РезультатФормирования.ЕГРЮЛ.Телефон.КонтактнаяИнформация);
				ДанныеТелефона.Вставить("Представление",        РезультатФормирования.ЕГРЮЛ.Телефон.Представление);
				
				РезультатПреобразования.ЮридическийАдрес = ДанныеЮридическогоАдреса
				
		КонецЕсли;
		
		//КодОКВЭД и ЭтоОКВЭД2
		Если РезультатФормирования.ЕГРЮЛ.Свойство("ВидДеятельности")
			И РезультатФормирования.ЕГРЮЛ.ВидДеятельности <> Неопределено Тогда 
			
			РезультатПреобразования.КодОКВЭД  = РезультатФормирования.ЕГРЮЛ.ВидДеятельности.Код;
			РезультатПреобразования.ЭтоОКВЭД2 = РезультатФормирования.ЕГРЮЛ.ЭтоОКВЭД2;
		КонецЕсли;
		
		// Регистрацонный номер
		Если РезультатФормирования.ЕГРЮЛ.Свойство("РегистрационныйНомер")
			И РезультатФормирования.ЕГРЮЛ.РегистрационныйНомер <> Неопределено Тогда
			
			РезультатПреобразования.РегистрационныйНомер  = РезультатФормирования.ЕГРЮЛ.РегистрационныйНомер;
			
		КонецЕсли;
		
		// Регистрирующий орган
		Если РезультатФормирования.ЕГРЮЛ.Свойство("РегистрирующийОрган")
			И ТипЗнч(РезультатФормирования.ЕГРЮЛ.РегистрирующийОрган) = Тип("Структура")
			И РезультатФормирования.ЕГРЮЛ.РегистрирующийОрган.Свойство("Наименование") Тогда
			
			РезультатПреобразования.РегистрирующийОрган = РезультатФормирования.ЕГРЮЛ.РегистрирующийОрган.Наименование;
			
		КонецЕсли;
		
		// Регистрация в налоговом органе
		Если РезультатФормирования.ЕГРЮЛ.Свойство("РегистрацияВНалоговомОргане") <> Неопределено
			И РезультатФормирования.ЕГРЮЛ.РегистрацияВНалоговомОргане <> Неопределено Тогда
			
			РезультатПреобразования.РегистрацияВНалоговомОргане = РезультатФормирования.ЕГРЮЛ.РегистрацияВНалоговомОргане;
		КонецЕсли;
		
		//Руководитель
		Если РезультатФормирования.ЕГРЮЛ.Свойство("ДанныеРуководителей")
			И РезультатФормирования.ЕГРЮЛ.ДанныеРуководителей <> Неопределено
			И РезультатФормирования.ЕГРЮЛ.ДанныеРуководителей.Свойство("СкрытыеДанные")
			И РезультатФормирования.ЕГРЮЛ.ДанныеРуководителей.СкрытыеДанные = Ложь Тогда 
			
			Если РезультатФормирования.ЕГРЮЛ.ДанныеРуководителей.Руководители.Количество() > 0 Тогда
				
				СтрокаРуководитель = РезультатФормирования.ЕГРЮЛ.ДанныеРуководителей.Руководители[0];
				
				РезультатПреобразования.Руководитель.Фамилия  = СтрокаРуководитель.Фамилия;
				РезультатПреобразования.Руководитель.Имя      = СтрокаРуководитель.Имя;
				РезультатПреобразования.Руководитель.Отчество = СтрокаРуководитель.Отчество ;
				
			КонецЕсли;
			
		КонецЕсли;
		
		//История реквизитов
		Если РезультатФормирования.ЕГРЮЛ.Свойство("ИсторияРеквизитов") Тогда
			
			//История КПП
			Если РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.Свойство("КПП") Тогда
				
				ИсторияКПП = Новый Массив;
				
				РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.КПП.Сортировать("Дата Убыв");
				
				Для Каждого СтрокаИстории Из РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.КПП Цикл
					
					ДанныеКПП = Новый Структура;
					ДанныеКПП.Вставить("Дата", СтрокаИстории.Дата);
					ДанныеКПП.Вставить("Значение", СтрокаИстории.Значение); 
					
					ИсторияКПП.Добавить(ДанныеКПП);
					
				КонецЦикла; 
				
				РезультатПреобразования.ИсторияРеквизитов.КПП = ИсторияКПП;
				
			КонецЕсли;
			
			//История Наименований
			Если РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.Свойство("Наименование") Тогда
				
				ИсторияНаименования = Новый Массив;
				
				РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.Наименование.Сортировать("Дата Убыв");
				
				Для Каждого СтрокаИстории Из РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.Наименование Цикл
					
					ДанныеНаименования = Новый Структура;
					ДанныеНаименования.Вставить("Дата",                    СтрокаИстории.Дата);
					ДанныеНаименования.Вставить("НаименованиеПолное",      СтрокаИстории.НаименованиеПолное);
					ДанныеНаименования.Вставить("НаименованиеСокращенное", СтрокаИстории.НаименованиеСокращенное);
					
					ИсторияНаименования.Добавить(ДанныеНаименования);
					
				КонецЦикла;
				
				РезультатПреобразования.ИсторияРеквизитов.Наименование = ИсторияНаименования;
				
			КонецЕсли;
			
			//История юр. адресов
			Если РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.Свойство("Адрес") Тогда
				
				ИсторияАдресов = Новый Массив;
				
				РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.Адрес.Сортировать("Дата Возр");
				
				Для Каждого СтрокаИстории Из РезультатФормирования.ЕГРЮЛ.ИсторияРеквизитов.Адрес Цикл
					
					ДанныеАдреса = Новый Структура;
					ДанныеАдреса.Вставить("Дата",                  СтрокаИстории.Дата);
					ДанныеАдреса.Вставить("КонтактнаяИнформация",  СтрокаИстории.КонтактнаяИнформация);
					ДанныеАдреса.Вставить("Представление",         СтрокаИстории.Представление);
					ДанныеАдреса.Вставить("Комментарий",           СтрокаИстории.Комментарий);
					
					ИсторияАдресов.Добавить(ДанныеАдреса);
					
				КонецЦикла; 
				
				АктуальныйАдрес = РезультатФормирования.ЕГРЮЛ.ЮридическийАдрес;
				Если ИсторияАдресов.Количество() > 0 Тогда
					Пока Истина Цикл
						Если ИсторияАдресов.Количество() > 0 Тогда
							Индекс = ИсторияАдресов.Количество() - 1;
							ДанныеАдреса = ИсторияАдресов[Индекс];
							Если ДанныеАдреса.КонтактнаяИнформация = АктуальныйАдрес.КонтактнаяИнформация Тогда
								Прервать;
							Иначе
								ИсторияАдресов.Удалить(Индекс);
							КонецЕсли;
						Иначе 
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;         
				
				Если ИсторияАдресов.Количество() = 0 Тогда

					ДанныеАдреса = Новый Структура;
					ДанныеАдреса.Вставить("КонтактнаяИнформация",  АктуальныйАдрес.КонтактнаяИнформация);
					ДанныеАдреса.Вставить("Представление",         АктуальныйАдрес.Представление);
					ДанныеАдреса.Вставить("Комментарий",           АктуальныйАдрес.Комментарий);
					
					ИсторияАдресов.Добавить(ДанныеАдреса);
				КонецЕсли;

				РезультатПреобразования.ИсторияРеквизитов.Адрес = ИсторияАдресов;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПреобразования;
	
КонецФункции

Функция НовыйРезультатПреообразованияДанныхКонтрагента()
	
	РезультатПреобразования = Новый Структура; 
	
	РезультатПреобразования.Вставить("ИНН",                     "");
	РезультатПреобразования.Вставить("КПП",                     "");
	РезультатПреобразования.Вставить("РегистрационныйНомер",    "");
	РезультатПреобразования.Вставить("Наименование",            "");
	РезультатПреобразования.Вставить("НаименованиеСокращенное", "");
	РезультатПреобразования.Вставить("НаименованиеПолное",		"");
	РезультатПреобразования.Вставить("НаименованиеМеждународное","");
	РезультатПреобразования.Вставить("РегистрирующийОрган",     "");
	РезультатПреобразования.Вставить("ДатаРегистрации",         Дата(1,1,1));
	РезультатПреобразования.Вставить("КодОКВЭД",                Неопределено);
	РезультатПреобразования.Вставить("ЭтоОКВЭД2",               Неопределено);
	РезультатПреобразования.Вставить("ЮридическийАдрес",        Неопределено);
	РезультатПреобразования.Вставить("Телефон",                 Неопределено);
	РезультатПреобразования.Вставить("РегистрацияВНалоговомОргане",Неопределено);
	РезультатПреобразования.Вставить("ИсторияРеквизитов",       Новый Структура("КПП, Наименование, Адрес"));
	РезультатПреобразования.Вставить("Руководитель",            Новый Структура("Фамилия, Имя, Отчество"));
	РезультатПреобразования.Вставить("СвидетельствоСерияНомер", Новый Структура("Серия, Номер, Дата"));
	РезультатПреобразования.Вставить("ОписаниеОшибки",          "");
	
	Возврат РезультатПреобразования;
	
КонецФункции

// Проверяет, заданы ли настройки подключения к сервису интернет поддержки пользователей.
//
//
// Возвращаемое значение:
//   Булево   - Истина, если настройки заданы.
//
Функция НастройкиПодключенияКСервисуИППЗаданы() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		
		Возврат Истина;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеАвторизации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
		УстановитьПривилегированныйРежим(Ложь);

		Возврат (ДанныеАвторизации <> Неопределено); 
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти
//-- Локализация

#Область ПрочиеСлужебныеМетоды

Процедура РазобратьФайлНаСервере(СсылкаНаФайл, ЕстьОшибка, Форма) Экспорт
	//++ Локализация
	СтруктураВозврата = Новый Структура;
	РезультатРазбора = Ложь;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиУТ.РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, РезультатРазбора);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	ЕстьОшибка = Не РезультатРазбора;	
	Если Не ЕстьОшибка Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтруктураВозврата);
		Форма.АдресЭППартнераФизЛицо = Форма.АдресЭППартнера;
		ПартнерыИКонтрагенты.ЗначенияПолейКонтактнойИнформации(Форма.ТелефонКЛ,
		                                        Форма.ТелефонКЛЗначенияПолей,
		                                        ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		
		ПартнерыИКонтрагенты.ЗначенияПолейКонтактнойИнформации(Форма.ТелефонПартнера,
		                                        Форма.ТелефонПартнераЗначенияПолей,
		                                        ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		
		ПартнерыИКонтрагенты.ЗначенияПолейКонтактнойИнформации(Форма.ТелефонПартнераФизЛицо,
		                                        Форма.ТелефонПартнераФизЛицоЗначенияПолей,
		                                        ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		
		Если ЗначениеЗаполнено(Форма.НомерСчета) Тогда
			Форма.ВалютаДенежныхСредств = ДенежныеСредстваСерверЛокализация.ПолучитьВалютуПоНомеруСчета(Форма.НомерСчета);
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.БИКБанка) Тогда
			Банк = Справочники.КлассификаторБанков.НайтиПоКоду(Форма.БИКБанка);
			Если Не ЗначениеЗаполнено(Банк) Тогда
				Форма.ПредставлениеБанка = "";
				ТекстОшибки = НСтр("ru='В справочнике Банки не найден банк по БИК'") +" = " + Форма.БИКБанка;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма.БИКБанкаДляРасчетов) Тогда
			БанкДляРасчетов = Справочники.КлассификаторБанков.НайтиПоКоду(Форма.БИКБанкаДляРасчетов);
			Если Не ЗначениеЗаполнено(БанкДляРасчетов) Тогда
				Форма.ПредставлениеБанкаДляРасчетов = "";
				ТекстОшибки = НСтр("ru='В справочнике Банки не найден банк по БИК'") +" = " + Форма.БИКБанкаДляРасчетов;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
		Форма.НаименованиеКонтрагента = СтруктураВозврата.ПолноеНаименование;
	КонецЕсли;
	
	Форма.ЭтоКомпания = 0;
	Форма.Элементы.СтраницыКомпанияЧастноеЛицо.ТекущаяСтраница = Форма.Элементы.СтраницаКомпания;
	
	Если ЕстьОшибка Тогда
		ВызватьИсключение (НСтр("ru = 'Неверный формат файла'"));
	КонецЕсли;
	
	//-- Локализация
КонецПроцедуры

// Получает необходимые данные о партнере для вывода в панель информации форм списка 
// и выбора справочника "Партнеры".
//
// Параметры:
//  ДанныеПартнера - Структура - информация о партнере.
//  Партнер        - СправочникСсылка.Партнеры - партнер для которого необходимо получить информацию.
//
Процедура ДополнитьДанныеПартнераДляПанелиИнформации(ДанныеПартнера, Партнер) Экспорт
	//++ Локализация
	ДанныеПартнера.Вставить("КоличествоКонтрагентов", 0);
	ДанныеПартнера.Вставить("ЕстьОшибкиПроверкаКонтрагентов", Ложь);
	
	ТекстЗапросаКонтрагенты = "";
	Если ПроверкаКонтрагентов.ПроверкаКонтрагентовВключена() Тогда
		
		ТекстЗапросаКонтрагенты = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК КоличествоКонтрагентов,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СостоянияКонтрагентов.Состояние ЕСТЬ NULL 
		|					ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентЕстьВБазеФНС)
		|					ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.НеДействуетИлиИзмененКПП)
		|					ИЛИ СостоянияКонтрагентов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСуществованияКонтрагента.КонтрагентНеПодлежитПроверке)
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьОшибкиПроверкаКонтрагентов
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияКонтрагентов КАК СостоянияКонтрагентов
		|		ПО (СостоянияКонтрагентов.Контрагент = Контрагенты.Ссылка)
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер
		|	И НЕ Контрагенты.ПометкаУдаления";
		
	Иначе
		
		ТекстЗапросаКонтрагенты = "
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК КоличествоКонтрагентов,
		|	ЛОЖЬ КАК ЕстьОшибкиПроверкаКонтрагентов
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер
		|	И НЕ Контрагенты.ПометкаУдаления";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапросаКонтрагенты);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ДанныеПартнера.КоличествоКонтрагентов         = Выборка.КоличествоКонтрагентов; 
		ДанныеПартнера.ЕстьОшибкиПроверкаКонтрагентов = Выборка.ЕстьОшибкиПроверкаКонтрагентов;
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

Процедура ДополнитьРеквизитыНеРедактируемыеВГрупповойОбработкеКонтрагент(НеРедактируемыеРеквизиты) Экспорт
	//++ Локализация
	НеРедактируемыеРеквизиты.Добавить("КПП");
	НеРедактируемыеРеквизиты.Добавить("ИсторияКПП.*");	
	//-- Локализация
КонецПроцедуры

// Заполняет панель информации в форме списка по данным партнера.
// 
// Параметры:
//  Форма     - ФормаКлиентскогоПриложения - форма, в которой находится динамический список партнеров.
//  Партнер   - СправочникСсылка.Партнеры - партнер, данными которого заполняется панель информации.
//  ДанныеПартнера - Структура - структура с данными по партнеру.
//
Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера(Форма, Партнер, ДанныеПартнера) Экспорт
	//++ Локализация
	Если Партнер <> Неопределено Тогда
		Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
			Форма.КонтрагентыПартнера = НСтр("ru = 'Контрагенты'") + " (" + Строка(ДанныеПартнера.КоличествоКонтрагентов) + ")";
			Форма.ЕстьОшибкиПроверкаКонтрагентов = ДанныеПартнера.ЕстьОшибкиПроверкаКонтрагентов;
		КонецЕсли;
	КонецЕсли;
	Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		Если Форма.ЕстьОшибкиПроверкаКонтрагентов И ДанныеПартнера <> Неопределено Тогда
			Форма.Элементы.СтраницыОшибкаПроверкиКонтрагентов.ТекущаяСтраница =  Форма.Элементы.СтраницаЕстьОшибки;
		Иначе
			Форма.Элементы.СтраницыОшибкаПроверкиКонтрагентов.ТекущаяСтраница =  Форма.Элементы.СтраницаНетОшибок;
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

//++ Локализация

// Проверяет что ИНН и КПП головного контрагента используются в информационной базе.
// 
// Параметры:
//  ИНН                     - Строка -
//  КППГоловногоКонтрагента - Строка
// 
// Возвращаемое значение:
//  Булево - Истина если используется
//
Функция ИННКППГоловногоКонтрагентаИспользуютсяВИнформационнойБазе(ИНН, КППГоловногоКонтрагента) Экспорт
	
	РезультатПоиска = ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН, КППГоловногоКонтрагента);
	
	Если Не РезультатПоиска.ДоступноСоздание Тогда 
		
		ДанныеКонтрагента = РезультатПоиска.НайденныеСовпадения[0];
		
		СтрСообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='ИНН\КПП - %1 уже указаны для контрагента %2 с кодом %3, ответственный - %4.'"),
			ИНН + ?(ПустаяСтрока(КППГоловногоКонтрагента), "", "\" + КППГоловногоКонтрагента),
			ДанныеКонтрагента.Ссылка,
			ДанныеКонтрагента.Код,
			ДанныеКонтрагента.ОсновнойМенеджер);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСообщение,, "КППГоловногоКонтрагента");
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
//-- Локализация

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
//++ Локализация
#Область ПоискДублейПартнеровКонтрагентов_Служебные

Процедура ДополнитьЗапросОКПО(ТекстЗапроса, НаОснованииКонтрагента)
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
	|	&СтрокаКодОКПО      КАК НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоОКПО
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.КодПоОКПО = &КодПоОКПО И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#Область ОбщиеПроцедурыФормЭлементаСправочникаПартнеры

//++ Локализация
Функция ДанныеИНН_КПП(Форма)
	
	СтруктураИНН = Новый Структура;
	СтруктураИНН.Вставить("ИНН", "");
	СтруктураИНН.Вставить("КПП", "");
	СтруктураИНН.Вставить("ИНН_КПП", "");
	
	Если Форма.ЭтоКомпания = 0 И Форма.ВидКомпании = 1 Тогда
		Возврат СтруктураИНН;
	КонецЕсли;
	
	СтруктураИНН.ИНН = ?(Форма.ЭтоКомпания = 0, Форма.ИНН, Форма.ИННПартнерФизЛицо);
	
	Если Форма.ЭтоКомпания = 0 И Форма.ВидКомпании <> 2 Тогда
		СтруктураИНН.КПП     = Форма.КПП;
		СтруктураИНН.ИНН_КПП = СтруктураИНН.ИНН + ?(ПустаяСтрока(Форма.КПП), "", "\" + Форма.КПП);
	Иначе
		СтруктураИНН.ИНН_КПП = СтруктураИНН.ИНН;
	КонецЕсли;
	
	Возврат СтруктураИНН;
	
КонецФункции

Функция СообщениеДубльИНН(ПредставлениеИНН_КПП, НайденныйДубльПоИНН)
	
	СтрСообщение = НСтр("ru='Контрагент создан не будет. ИНН\КПП - %1 уже указаны для контрагента %2 с кодом %3, ответственный - %4.'");
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		СтрСообщение = СтрСообщение + " " + НСтр("ru='Измените КПП или используйте уже имеющегося партнера.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СтрСообщение,
		ПредставлениеИНН_КПП,
		НайденныйДубльПоИНН.Ссылка,
		НайденныйДубльПоИНН.Код,
		НайденныйДубльПоИНН.ОсновнойМенеджер);
	
КонецФункции

Процедура ОтобразитьДубльИННКППВНайденныхПартнерах(НайденныйДубльПоИНН, ПредставленияРеквизитов, Форма)
	
	НайденныеСтроки = Форма.ТаблицаНайдено.НайтиСтроки(Новый Структура("Партнер", НайденныйДубльПоИНН.Партнер));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПартнера = НайденныеСтроки[0];
	СтрокаПартнера.ДубльИННКПП = Истина;
	
	СсылкаНаДубль = ?(Форма.ИспользуютсяТолькоПартнеры, НайденныйДубльПоИНН.Партнер, НайденныйДубльПоИНН.Ссылка);
	
	УзелПартнера = Форма.ДеревоДанныхНайденныхПартнеров.НайтиПоИдентификатору(СтрокаПартнера.ИдентификаторДереваДанных);
	ЭлементыУзлаПартнера = УзелПартнера.ПолучитьЭлементы();
	Для Каждого ЭлементУзла Из ЭлементыУзлаПартнера Цикл
		Если ЭлементУзла.НайденоПоСсылка = СсылкаНаДубль Тогда
			
			УзелКонтрагента = ЭлементУзла.ПолучитьЭлементы();
			Для Каждого ЭлементИнформации Из УзелКонтрагента Цикл
				Если ЭлементИнформации.Реквизит = ПредставленияРеквизитов.СтрокаИНН
					Или ЭлементИнформации.Реквизит = ПредставленияРеквизитов.СтрокаКПП Тогда
					ЭлементИнформации.ДубльИННКПП = Истина;
				КонецЕсли;
			КонецЦикла;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции
//++ Локализация
Процедура ДобавитьСтрокуВТаблицуРеквизитовДанных(ТаблицаРеквизитов, Реквизит, Значение, Порядок, Существенный = Ложь)
	
	СтрокаРеквизита = ТаблицаРеквизитов.Добавить();
	СтрокаРеквизита.Реквизит = Реквизит;
	СтрокаРеквизита.Значение = Значение;
	СтрокаРеквизита.Порядок  = Порядок;
	СтрокаРеквизита.Существенный = Существенный;
	
КонецПроцедуры

Процедура ДобавитьДанныеНайденногоКонтрагента(Выборка, НайденныеСовпадения)
	
	ДанныеКонтрагента = Новый Структура;
	ДанныеКонтрагента.Вставить("Ссылка",           Выборка.Ссылка);
	ДанныеКонтрагента.Вставить("ЮрФизЛицо",        Выборка.ЮрФизЛицо);
	ДанныеКонтрагента.Вставить("Партнер",          Выборка.Партнер);
	ДанныеКонтрагента.Вставить("Код",              Выборка.Код);
	ДанныеКонтрагента.Вставить("ОсновнойМенеджер", Выборка.ОсновнойМенеджер);
	
	НайденныеСовпадения.Добавить(ДанныеКонтрагента);
	
КонецПроцедуры

//-- Локализация
#КонецОбласти

#КонецОбласти