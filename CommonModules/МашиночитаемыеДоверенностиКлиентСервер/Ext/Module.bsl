
#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкаДоверенности

// Формирует пустую структуру данных проверки полномочий.
// 
// Возвращаемое значение:
//  Структура:
// * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
// * ХешПодписи - Строка
// * РезультатПроверки - см. НовыйРезультатПроверки
// * РучнаяПроверка - Булево
// * НомерРодительскойДоверенности - Строка
// 
Функция НовыеДанныеПроверкиПолномочий() Экспорт
	
	ДанныеПроверки = Новый Структура();
	ДанныеПроверки.Вставить("ПодписанныйОбъект",
		ПредопределенноеЗначение("Справочник.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка"));
	ДанныеПроверки.Вставить("ХешПодписи", "");
	ДанныеПроверки.Вставить("РезультатПроверки", НовыйРезультатПроверки());
	ДанныеПроверки.Вставить("РучнаяПроверка", Ложь);
	ДанныеПроверки.Вставить("НомерРодительскойДоверенности", "");
	
	Возврат ДанныеПроверки;
	
КонецФункции

// Возвращает новый результат проверки.
// 
// Возвращаемое значение:
//  Структура - Новый результат проверки:
// * Выполнено - Булево
// * ДатаПроверки - Дата
// * Успех - Булево
// * Ошибка - Строка
// * НомерДоверенности - Строка
// * РучнаяПроверка - Булево
// * ПредставлениеПользователя - Строка - Представление пользователя от лица которого была выполнена ручная проверка.
// * ИдентификаторПользователя - Строка
//
Функция НовыйРезультатПроверки() Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Выполнено", Ложь);
	РезультатПроверки.Вставить("ДатаПроверки", '00010101');
	РезультатПроверки.Вставить("Успех", Ложь);
	РезультатПроверки.Вставить("Ошибка", "");
	РезультатПроверки.Вставить("НомерДоверенности", "");
	РезультатПроверки.Вставить("РучнаяПроверка", Ложь);
	РезультатПроверки.Вставить("ПредставлениеПользователя", "");
	РезультатПроверки.Вставить("ИдентификаторПользователя", "");
	
	Возврат РезультатПроверки;
	
КонецФункции

// Инициализирует структуру для проверки МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеДоверенности - ДвоичныеДанные
// * ДанныеПодписи - ДвоичныеДанные
//
Функция НовыеДанныеДляПроверкиМЧД() Экспорт
	
	ДанныеДляПроверки = Новый Структура;
	ДанныеДляПроверки.Вставить("ДанныеДоверенности", ОбщегоНазначенияБЭДКлиентСервер.ПустыеДвоичныеДанные());
	ДанныеДляПроверки.Вставить("ДанныеПодписи", ОбщегоНазначенияБЭДКлиентСервер.ПустыеДвоичныеДанные());
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

// Возвращает вид ошибки, для документа имеющего подписи с невалидными МЧД
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
// 	
Функция ВидОшибкиЕстьПодписиСНепровереннымиПолномочиямиМЧД() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ЕстьПодписиСНепровереннымиПолномочиямиМЧД";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документ содержит подписи с
		|непроверенными полномочиями'");
	ВидОшибки.ОписаниеРешения =
		НСтр("ru = '<a href = ""Выполните"">Выполните</a> ручную проверку полномочий'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Выполните",
		"МашиночитаемыеДоверенностиКлиент.ОткрытьФормуПроверкиПолномочий");
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
	ВидОшибки.АвтоматическиВыполняемыйОбработчик = "МашиночитаемыеДоверенностиКлиент.ОткрытьФормуПроверкиПолномочий";
	
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает вид ошибки для документа, имеющего подписи с непроверенными МЧД, когда доверенность не найдена.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиЕстьПодписиСМЧДДоверенностьНеНайдена() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ЕстьПодписиСНепровереннымиПолномочиямиМЧДДоверенностьНеНайдена";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Для автоматической проверки подписи требуется электронная доверенность'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Найти подходящую доверенность автоматически не получилось'");
	ВидОшибки.ОписаниеРешения =
		НСтр("ru = 'Получите от контрагента подходящую доверенность, загрузите ее в программу и проверьте подпись. 
	    |Или проверьте самостоятельно правильность подписания каждого документа в отдельности для принятия решения о доверии к подписи контрагента.'"); 
	
	Возврат ВидОшибки;
	
КонецФункции

// Вид ошибки документы недоступны для подписания на сервере по доверенности из-за нехватки полномочий.
// 
// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиДокументыНедоступныДляПодписанияНаСервереПоПолномочиямДоверенности() Экспорт
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ДокументыНедоступныеДляПодписанияНаСервереПоДоверенностиОшибкаПолномочий";
	
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Документы недоступны для подписания'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Найдены действующие доверенности, но они не подходят по полномочиям'");
	ВидОшибки.ОписаниеРешения = Символы.ПС + НСтр("ru='Что делать:
		|- настройте правила проверки полномочий;
		|- оформите подходящую доверенность;
		|- либо передайте документ на подпись руководителю.'");
	
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
	ВидОшибки.АвтоматическиВыполняемыйОбработчик = 
		"ЭлектронныеДокументыЭДОКлиент.ВывестиИнформациюОПроверкеПолномочийМЧДДляСертификата";
	
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает статус проверки МЧД выполненной вручную
// 
// Параметры:
//  РезультатПроверкиПоМЧД - см. МашиночитаемыеДоверенности.НовыйРезультатПроверкиПодписи
// 
// Возвращаемое значение:
// 	Булево
//
Функция ПроверкаДоверенностиВыполненаВручную(РезультатПроверкиПоМЧД) Экспорт
	Возврат ЗначениеЗаполнено(РезультатПроверкиПоМЧД) 
		И РезультатПроверкиПоМЧД.ПодписьВерна 
		И РезультатПроверкиПоМЧД.ПроверкаВыполнена
		И ЗначениеЗаполнено(РезультатПроверкиПоМЧД.ПротоколПроверки)
		И РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаПодписиДокумента.РучнаяПроверка;
КонецФункции

// Возвращает результат проверки доверенности из протокола проверки
// 
// Параметры:
//  Проверка - см. НовыйПротоколПроверкиМЧД
// 
// Возвращаемое значение:
//  Булево
//  
Функция ДоверенностьПроверенаУспешно(Проверка) Экспорт
	
	Протокол = НовыйПротоколПроверкиМЧД();
	ЗаполнитьЗначенияСвойств(Протокол, Проверка);
	
	Для Каждого ИмяИЗначениеПоля Из Протокол Цикл
		
		ИмяПоля = ИмяИЗначениеПоля.Ключ;
		Если ИмяПоля = "Выполнена" Или ИмяПоля = "ОшибкаВыполнения" Тогда
			// Служебные поля
			Продолжить;
		КонецЕсли;
		
		РезультатПроверки = ИмяИЗначениеПоля.Значение;
		Если РезультатПроверки = Протокол.ПроверкаОператором Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатПроверки)
			И Не РезультатПроверки.Успех Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

// Новый протокол проверки МЧД.
// 
// Возвращаемое значение:
//   Структура:
// 	   * Выполнена - Булево
// 	   * ОшибкаВыполнения - Строка
// 	   * ПроверкаПодписиМЧД - Неопределено - если проверка не требуется.
// 	   						- см. НовыйРезультатПроверки
// 	   * ПроверкаОтзываМЧД	- Неопределено - если проверка не требуется.
// 							- см. НовыйРезультатПроверки
//	   * ПроверкаОператором - Неопределено - если проверка не требуется.
//							- см. НовыйРезультатПроверки
// 	   * СопоставлениеПредставителя - Неопределено - если проверка не требуется.
//									- см. НовыйРезультатПроверки
//	   * СопоставлениеДоверителя	- Неопределено - если проверка не требуется.
//									- см. НовыйРезультатПроверки
// 	   * ПроверкаПериодаДействия 	- Неопределено - если проверка не требуется.
//									- см. НовыйРезультатПроверки
// 	   * ПроверкаСтатусаВРеестреФНС	- Неопределено - если проверка не требуется.
// 							 		- см. НовыйРезультатПроверки
// 	   * ПроверкаПолномочий			- Неопределено - если проверка не требуется.
//									- см. НовыйРезультатПроверки
//	   * РодительскиеДанныеПолучены									 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскаяДоверенностьДействительнаВРеестре				 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскаяДоверенностьСоответствуетОрганизацииВДокументе - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскийПредставительСоответствуютДоверителюПередоверия - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскийПериодДействияСоответствуетДатеДокумента		 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскаяДоверенностьМоглаПередоверять					 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
//	   * РодительскиеПолномочияСоответствуютПолномочиямПередоверия	 - Неопределено - если проверка не требуется.
//																	 - см. НовыйРезультатПроверки
Функция НовыйПротоколПроверкиМЧД() Экспорт
	
	ПротоколПроверкиМЧД = Новый Структура;
	
	ПротоколПроверкиМЧД.Вставить("Выполнена", Ложь);
	ПротоколПроверкиМЧД.Вставить("ОшибкаВыполнения", "");
	ПротоколПроверкиМЧД.Вставить("ПроверкаПодписиМЧД", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаОтзываМЧД", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаОператором", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("СопоставлениеПредставителя", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("СопоставлениеДоверителя", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаПериодаДействия", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаСтатусаВРеестреФНС", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("ПроверкаПолномочий", НовыйРезультатПроверки());
	
	ПротоколПроверкиМЧД.Вставить("РодительскиеДанныеПолучены", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскаяДоверенностьДействительнаВРеестре", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскаяДоверенностьСоответствуетОрганизацииВДокументе", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскийПредставительСоответствуютДоверителюПередоверия", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскийПериодДействияСоответствуетДатеДокумента", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскаяДоверенностьМоглаПередоверять", НовыйРезультатПроверки());
	ПротоколПроверкиМЧД.Вставить("РодительскиеПолномочияСоответствуютПолномочиямПередоверия", НовыйРезультатПроверки());
	
	Возврат ПротоколПроверкиМЧД;
	
КонецФункции

#КонецОбласти

#Область РаботаСРеестром

// Возвращает структуру, предназначенную для хранения результатов проверки МЧД в реестре ФНС.
// 
// Возвращаемое значение:
// - Структура:
//    * СтраницаНеНайдена - Булево
//    * СостояниеИзменено - Булево
//    * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//    * НомерДоверенности - ОпределяемыйТип.ЕдиныйРегистрационныйНомерДоверенности
//    * ДатаПроверки - Дата 
//    * ДатаОтзыва - Дата
//    * ДатаОбновленияСтатуса - Дата
//
Функция РезультатПроверкиВРеестреФНС() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("СтраницаНеНайдена", Ложь);
	Результат.Вставить("СостояниеИзменено", Ложь);
	Результат.Вставить("СтатусВРеестреФНС", ПредопределенноеЗначение(
		"Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка"));
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ДатаПроверки", '00010101');
	Результат.Вставить("ДатаОтзыва", '00010101');
	Результат.Вставить("ДатаОбновленияСтатуса", '00010101');
	Возврат Результат;

КонецФункции

// Возвращает структуру, предназначенную для хранения результатов выполнения запроса к реестру ФНС.
// 
// Возвращаемое значение:
// - Структура:
//    * ИдентификаторТранзакции - Строка
//    * СтатусТранзакции - Строка
//    * ДатаВремяТранзакции - Дата
//    * ХешДоверенности - Строка
//    * НомерДоверенности - Строка
//    * ИННДоверителя - Строка 
//    * ТекстОтвета - Строка
//    * ОписаниеОшибкиРегистрации - Строка
//
Функция РезультатВыполненияЗапросаВРР() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторТранзакции", "");
	Результат.Вставить("СтатусТранзакции", "");
	Результат.Вставить("ДатаВремяТранзакции", '00010101');
	Результат.Вставить("ХешДоверенности", "");
	Результат.Вставить("НомерДоверенности", "");
	Результат.Вставить("ИННДоверителя", "");
	Результат.Вставить("ТекстОтвета", "");
	Результат.Вставить("ОписаниеОшибкиРегистрации", "");
	
	Возврат Результат;

КонецФункции

// Возвращает структуру, предназначенную для проверки МЧД в реестре ФНС.
// 
// Возвращаемое значение:
//  Структура:
//  * НомерДоверенности - ОпределяемыйТип.ЕдиныйРегистрационныйНомерДоверенности
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * ИдентификаторТранзакции - Строка
//  * ДоверительЮЛ_ИНН - Строка
//  * ДоверительФЛ_ИНН - Строка
//  * ДатаОтзыва - Дата
//
Функция ДанныеДляПроверкиВРеестреФНС() Экспорт

	ДанныеДоверенности = Новый Структура;
	ДанныеДоверенности.Вставить("НомерДоверенности", "");
	ДанныеДоверенности.Вставить("СтатусВРеестреФНС", ПредопределенноеЗначение(
		"Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка"));
	ДанныеДоверенности.Вставить("ИдентификаторТранзакции", "");
	ДанныеДоверенности.Вставить("ДоверительЮЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ДоверительФЛ_ИНН", "");
	ДанныеДоверенности.Вставить("ДатаОтзыва", '00010101');
	Возврат ДанныеДоверенности;

КонецФункции

// Возвращает виды запросов к реестру в представлении.
// 
// Возвращаемое значение:
//  Структура:
// * Регистрация - Строка
// * Отзыв - Строка
//
Функция ВидыЗапросовКРеестру() Экспорт

	ВидыЗапросов = Новый Структура();
	ВидыЗапросов.Вставить("Регистрация", "Регистрация в РР");
	ВидыЗапросов.Вставить("Отзыв", "Отзыв в РР");

	Возврат ВидыЗапросов;

КонецФункции

#КонецОбласти

// Возвращает имя регламентного задания "Обработка очереди запросов по МЧД в распределенный реестр ФНС".
// 
// Возвращаемое значение:
// 	Строка
Функция ИмяРегламентногоЗаданияОбработкаОчередиЗапросовВРеестрМЧДЭДО() Экспорт
	
	Возврат "ОбработкаОчередиЗапросовВРеестрМЧДЭДО";
	
КонецФункции

// Новые сведения о представителе МЧД.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о представителе МЧД:
// * ТипПредставителя - Строка
// * ДокументВид - Строка
// * ДокументСерия - Строка
// * ДокументНомер - Строка
// * ДокументДатаВыдачи - Дата
// * ДокументКемВыдан - Строка
// * ДокументКодПодразделения - Строка
// * ФЛ_ИНН - Строка
// * ФЛ_СНИЛС - Строка
// * ФЛ_Удостоверение - Строка
// * ФЛ_Гражданство - СправочникСсылка.СтраныМира
// * ФЛ_ДатаРождения - Дата
// * Представитель - Строка
// * ПредставлениеПредставителя - Строка
// * ФЛ_Фамилия - Строка
// * ФЛ_Имя - Строка
// * ФЛ_Имя - Строка
// * ФЛ_Отчество - Строка 
// * ФЛ_ОГРН - Строка
// * ЮЛ_Наименование - Строка
// * ЮЛ_ИНН - Строка
// * ЮЛ_КПП - Строка
// * ЮЛ_ОГРН - Строка
//
Функция НовыеСведенияОПредставителеМЧД() Экспорт
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ТипПредставителя", "");
	
	СтруктураДанных.Вставить("ДокументВид", "");
	СтруктураДанных.Вставить("ДокументСерия", "");
	СтруктураДанных.Вставить("ДокументНомер", "");
	СтруктураДанных.Вставить("ДокументДатаВыдачи", Дата(1, 1, 1));
	СтруктураДанных.Вставить("ДокументКемВыдан", "");
	СтруктураДанных.Вставить("ДокументКодПодразделения", "");
	
	СтруктураДанных.Вставить("ФЛ_ИНН", "");	
	СтруктураДанных.Вставить("ФЛ_СНИЛС", "");
	СтруктураДанных.Вставить("ФЛ_Удостоверение", "");
	СтруктураДанных.Вставить("ФЛ_Гражданство", ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка"));
	СтруктураДанных.Вставить("ФЛ_ДатаРождения", Дата(1, 1, 1));
	СтруктураДанных.Вставить("Представитель", "");
	СтруктураДанных.Вставить("ПредставлениеПредставителя", "");
	
	СтруктураДанных.Вставить("ФЛ_Фамилия", "");
	СтруктураДанных.Вставить("ФЛ_Имя", "");
	СтруктураДанных.Вставить("ФЛ_Отчество", "");
	
	СтруктураДанных.Вставить("ФЛ_ОГРН", "");
	
	СтруктураДанных.Вставить("ЮЛ_Наименование", "");
	СтруктураДанных.Вставить("ЮЛ_ИНН", "");
	СтруктураДанных.Вставить("ЮЛ_КПП", "");
	СтруктураДанных.Вставить("ЮЛ_ОГРН",	"");

	Возврат СтруктураДанных;

КонецФункции

Функция ЗаголовокБудетОтозвана() Экспорт
	Возврат НСтр("ru = 'Будет отозвана'");
КонецФункции

// Возвращает структуру способов отражения в учете ЭД Машиночитаемая доверенность
// 
// Возвращаемое значение:
//  Структура:
//  * МашиночитаемыеДоверенностиКонтрагентов - Строка
//  * МашиночитаемыеДоверенностиОрганизаций - Строка
//  * МЧД003 - Строка
Функция СпособыОтраженияВУчете() Экспорт
	
	Способы = Новый Структура;
	Способы.Вставить("МашиночитаемыеДоверенностиКонтрагентов", НСтр("ru = 'Машиночитаемая доверенность контрагента'"));
	Способы.Вставить("МашиночитаемыеДоверенностиОрганизаций", НСтр("ru = 'Машиночитаемая доверенность организации'"));
	Способы.Вставить("МЧД003", НСтр("ru = 'Машиночитаемая доверенность единой формы'"));
	Возврат Способы;
	
КонецФункции

// Коллекция видов документов
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение- где:
//   * Ключ - Строка - код вида документа, 
//   * Значение - Строка - наименование вида документа.
//
Функция ВидыДокументовФизическихЛиц() Экспорт
	
	ВидыДокументов = Новый Соответствие();
	
	ВидыДокументов.Вставить("07", НСтр("ru = 'Военный билет'"));
	ВидыДокументов.Вставить("10", НСтр("ru = 'Паспорт иностранного гражданина'"));
	ВидыДокументов.Вставить("11", НСтр("ru = 'Свидетельство о рассмотрении ходатайства о признании лица беженцем на территории Российской Федерации по существу'"));
	ВидыДокументов.Вставить("12", НСтр("ru = 'Вид на жительство в Российской Федерации'"));
	ВидыДокументов.Вставить("13", НСтр("ru = 'Удостоверение беженца'"));
	ВидыДокументов.Вставить("15", НСтр("ru = 'Разрешение на временное проживание в Российской Федерации'"));
	ВидыДокументов.Вставить("19", НСтр("ru = 'Свидетельство о предоставлении временного убежища на территории Российской Федерации'"));
	ВидыДокументов.Вставить("21", НСтр("ru = 'Паспорт гражданина Российской Федерации'"));
	ВидыДокументов.Вставить("24", НСтр("ru = 'Удостоверение личности военнослужащего Российской Федерации'"));
	
	Возврат ВидыДокументов;
	
КонецФункции

// Возвращает СтатусВРеестреФНС МЧД, полученной из реестра
//
// Параметры:
//  СтатусДоверенности - Строка - "CREATED" - дата начала действия не наступила, "ACTIVE" - действует,
//                                "EXPIRED" - истекла, "REVOKED/DECLINED" - отменена (отозвана), "" - не запрашивался
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//
Функция СтатусВРеестреФНС(СтатусДоверенности) Экспорт
	Если СтатусДоверенности = "ACTIVE" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Зарегистрировано");
	ИначеЕсли СтатусДоверенности = "CREATED" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ДатаНачалаДействияНеНаступила");
	ИначеЕсли СтатусДоверенности = "EXPIRED" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ИстекСрокДействия");
	ИначеЕсли СтатусДоверенности = "REVOKED" ИЛИ СтатусДоверенности = "DECLINED" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.Отозвано");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка");
	КонецЕсли;
КонецФункции

// Возвращает признак, что передана ссылка на доверенность.
// 
// Параметры:
//  Ссылка - ЛюбаяСсылка
// 
// Возвращаемое значение:
//  Булево - Истина, если передана ссылка на машиночитаемую доверенность.
Функция ЭтоСсылкаНаДоверенность(Ссылка) Экспорт
	
	Результат = Ложь;
	
	ТипСсылки = ТипЗнч(Ссылка);
	Если ТипСсылки = Тип("СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций")
		ИЛИ ТипСсылки = Тип("СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов")
		ИЛИ ТипСсылки = Тип("СправочникСсылка.МЧД003") Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует набор дополнительных сведений по загрузке МЧД из реестра
//
// Возвращаемое значение:
// Структура:
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * ДатаОтзыва - Дата
//  * ДатаЗагрузки - Дата
//  * ЭтоМЧДОрганизации - Булево
Функция ДополнительныеСведенияПоЗагрузкеМЧД() Экспорт
	
	ДополнительныеСведения = Новый Структура();
	ДополнительныеСведения.Вставить("СтатусВРеестреФНС", 
		ПредопределенноеЗначение("Перечисление.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка"));
	ДополнительныеСведения.Вставить("ДатаОтзыва", Дата(1, 1, 1)); 
	ДополнительныеСведения.Вставить("ДатаЗагрузки", Дата(1, 1, 1));
	ДополнительныеСведения.Вставить("ЭтоМЧДОрганизации", Ложь);
	
	Возврат ДополнительныеСведения
	
КонецФункции

// Инициализирует структуру для загрузки МЧД в информационную базу.
// 
// Возвращаемое значение:
//  Структура:
// * ДанныеДоверенности - ДвоичныеДанные
// * ДанныеЗаявленияНаОтмену - ДвоичныеДанные
// * ДанныеПодписи - ДвоичныеДанные
// * ДанныеПодписиЗаявленияНаОтмену - ДвоичныеДанные
// * ДанныеПодписей - Массив Из ДвоичныеДанные - Количество подписей соответствует количеству доверителей в доверенности
// * ДанныеПодписейЗаявленияНаОтмену - Массив Из ДвоичныеДанные - Количество подписей соответствует количеству подписантов в заявлении на отмену
// * ТекстОшибки - Строка
//
Функция НовыеДанныеДляЗагрузкиМЧД() Экспорт
	
	ДанныеДляПроверки = Новый Структура;
	ДанныеДляПроверки.Вставить("ДанныеДоверенности", ОбщегоНазначенияБЭДКлиентСервер.ПустыеДвоичныеДанные());
	ДанныеДляПроверки.Вставить("ДанныеЗаявленияНаОтмену", ОбщегоНазначенияБЭДКлиентСервер.ПустыеДвоичныеДанные());
	ДанныеДляПроверки.Вставить("ДанныеПодписи", ОбщегоНазначенияБЭДКлиентСервер.ПустыеДвоичныеДанные());
	ДанныеДляПроверки.Вставить("ДанныеПодписиЗаявленияНаОтмену", ОбщегоНазначенияБЭДКлиентСервер.ПустыеДвоичныеДанные());
	ДанныеДляПроверки.Вставить("ДанныеПодписей", Новый Массив);
	ДанныеДляПроверки.Вставить("ДанныеПодписейЗаявленияНаОтмену", Новый Массив);
	ДанныеДляПроверки.Вставить("ТекстОшибки", "");
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

// Параметры:
//  СведенияМЧД - СправочникОбъект.МЧД003
//              - Структура:
//              	* ДатаПрекращения - Дата
// Возвращаемое значение:
//  Булево
//
Функция ДоверенностьОтозвана(СведенияМЧД) Экспорт
	Возврат СведенияМЧД.ДатаПрекращения > Дата(1, 1, 1);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует набор дерева правил проверки полномочий МЧД.
// 
// Возвращаемое значение:
//  Структура - Набор картинок:
// * Документ - Число
// * Реквизит - Число
// * Ресурс - Число
// * Справочник - Число
Функция НаборКартинок() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Документ", 0);
	Результат.Вставить("Реквизит", 1);
	Результат.Вставить("Ресурс", 2);
	Результат.Вставить("Справочник", 3);
	
	Возврат Результат;
	
КонецФункции

Функция Тип_Число_15() Экспорт
	Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0, ДопустимыйЗнак.Неотрицательный));
КонецФункции

Функция Тип_Булево() Экспорт
	Возврат Новый ОписаниеТипов("Булево");
КонецФункции

// Проверяет наличие заполненных настроек в дереве
// 
// Параметры:
//  ДеревоОтбора - ДанныеФормыДерево
// 
// Возвращаемое значение:
//  Булево
Функция ДеревоСодержитНастройки(ДеревоОтбора) Экспорт
	
	СтрокиДерева = ДеревоОтбора.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ДоступенСписок Тогда
			
			ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
			
			Для Каждого Элемент Из ЭлементыДерева Цикл
				Если ЗначениеЗаполнено(Элемент.Данные) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Если СтрокаДерева.Тип = Тип_Булево()
				И СтрокаДерева.НачальноеЗначение = СтрокаДерева.КонечноеЗначение Тогда
				Возврат Истина;
			КонецЕсли;
			
			Если СтрокаДерева.Тип = Тип_Число_15()
				И СтрокаДерева.НачальноеЗначение + СтрокаДерева.КонечноеЗначение > 0 Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет настройку правила проверки полномочий МЧД
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
//  Булево
Функция ПравилоНастроено(Форма) Экспорт
	
	Варианты = ВариантыПроверки();
	ВариантПроверки = Форма.ВариантПроверки;
	
	Если ВариантПроверки = Варианты.Скрипт Тогда
		Возврат ЗначениеЗаполнено(Форма.Скрипт);
	ИначеЕсли ВариантПроверки = Варианты.Настройка Тогда
		Возврат ДеревоСодержитНастройки(Форма.ДеревоОтбора);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Задает варианты проверки.
// 
// Возвращаемое значение:
//  Структура - Варианты проверки:
// * Настройка - Строка
// * Отбор - Строка
// * Скрипт - Строка
Функция ВариантыПроверки() Экспорт
	
	Варианты = Новый Структура();
	Варианты.Вставить("Настройка", НСтр("ru = 'Упрощенная настройка'"));
	Варианты.Вставить("Скрипт", НСтр("ru = 'Скрипт на языке 1С:Предприятия'"));
	
	Возврат Варианты;
	
КонецФункции

// Возвращает строковое представление неограниченных полномочий.
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеНеограниченныхПолномочий() Экспорт
	Возврат НСтр("ru = 'Подписывать электронные документы'");
КонецФункции

// Возвращает текст необходимости настроить правила проверки.
// 
// Возвращаемое значение:
//  Строка
Функция ТекстНеобходимостиРучнойПроверкиПолномочий() Экспорт
	Возврат НСтр("ru = 'Правила проверки полномочий не настроены. Настройте или проверьте полномочия вручную.'");
КонецФункции

// Возвращает новые параметры проверки полномочий доверенности.
// 
// Возвращаемое значение:
//  Структура:
// 	  * ПодписанныйОбъект - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    * ХешПодписи - Строка
//    * ЭтоОперацияЭДО - Булево
//    * НоваяДоверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//    * ТекстОшибки - Строка
//
Функция НовыеПараметрыПроверкиПолномочий() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("ПодписанныйОбъект",
		ПредопределенноеЗначение("Справочник.СообщениеЭДОПрисоединенныеФайлы.ПустаяСсылка"));
	Результат.Вставить("ХешПодписи", "");
	Результат.Вставить("ЭтоОперацияЭДО", Ложь);
	Результат.Вставить("НоваяДоверенность",
		ПредопределенноеЗначение("Справочник.МашиночитаемыеДоверенностиКонтрагентов.ПустаяСсылка"));
	Результат.Вставить("ТекстОшибки", "");
	
	Возврат Результат;
	
КонецФункции

// Формирует представление полномочия для элементов справочников:
// СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
// СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Параметры:
//  Код        - Строка
//  Содержание - Строка
//  Описание   - Строка
// 
// Возвращаемое значение:
//  Строка
//
Функция СформироватьПредставлениеПолномочия(Код = "", Содержание = "", Описание = "") Экспорт
	
	Если ЗначениеЗаполнено(Код) Тогда
		
		ШаблонОписания = ("%1; %2"); 
		ПредставлениеПолномочия = СтрШаблон(ШаблонОписания, Код, Содержание);
		
	Иначе
		
		ПредставлениеПолномочия = Описание;
		
	КонецЕсли;
	
	Возврат ПредставлениеПолномочия;
	
КонецФункции

// Параметры:
//  МЧД - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//      - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//      - СправочникОбъект.МЧД003
//      - ДанныеФормыСтруктура - созданная из объектов указанных выше.
//  ПолномочияОграничены - Булево
//      
// Возвращаемое значение:
//  Булево - если Истина, то настройка доступна, иначе - недоступна.
//
Функция ДоступнаИнтерактивнаяНастройкаПравилПроверки(МЧД, ПолномочияОграничены = Истина) Экспорт
	
	ЭтоТекстовыеПолномочия = МЧД.ВариантЗаполненияПолномочий = 
		ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияПолномочийМЧД.Текст");
		
	Возврат ПолномочияОграничены И ЭтоТекстовыеПолномочия;
	
КонецФункции

// Возвращает идентификатор пространства имен универсального формата МЧД версии 003
// 
// Возвращаемое значение:
//  Строка
Функция ФорматМЧД_003() Экспорт
	Возврат "urn://x-artefacts/EMCHD_1";
КонецФункции

// Возвращает результат соответствия тексту ответа из реестра уже отмененной доверенности.
// 
// Параметры:
//  ОписаниеОшибки - Строка
// 
// Возвращаемое значение:
//  Строка
Функция ДоверенностьУжеИстекла(ОписаниеОшибки) Экспорт
	
	Если СтрЧислоВхождений(ОписаниеОшибки, "Отмена невозможна. Доверенность уже истекла, отменена или отклонена") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти
