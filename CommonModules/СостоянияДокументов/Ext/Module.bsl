#Область ПрограммныйИнтерфейс

// Отражает изменения состояний документов в регистрах состояний.
//
// Параметры:
//  ДокументИсточник - ДокументОбъект - Документ-инициатор изменения состояния.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, содержащий таблицы изменений регистров.
//
Процедура ОтразитьСостоянияДокументов(ДокументИсточник, МенеджерВременныхТаблиц) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("СостоянияДокументов.ОтразитьСостоянияДокументов");

	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ШаблонЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.ОтражаемыйДокумент КАК ОтражаемыйДокумент
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|;
	|";
	
	ТекстВложенногоЗапроса = "";
	ТекстЗапросаВременныхТаблиц = "";
	ИменаВременныхТаблиц = "";
	
	ДополнитьТекстЗапросаЗаданий(
		Запрос,
		ТекстВложенногоЗапроса,
		ТекстЗапросаВременныхТаблиц,
		ИменаВременныхТаблиц);
	
	ТекстУничтожитьВт = ЗакрытиеМесяцаСервер.ТестЗапросаУничтоженияВременныхТаблиц(ИменаВременныхТаблиц);
	
	Если ЗначениеЗаполнено(ТекстВложенногоЗапроса) Тогда // есть хотя бы один контрольный регистр.
		Запрос.Текст = ТекстЗапросаВременныхТаблиц
			+ СтрЗаменить(ШаблонЗапроса, "&КоллекцияДанных", "(" + ТекстВложенногоЗапроса + ")")
			+ ТекстУничтожитьВт;
			
		МассивОтражаемыхДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОтражаемыйДокумент");
		РаспределениеЗапасов.ИсключитьСсылкиТребующиеОтложенногоОбновления(МассивОтражаемыхДокументов);
		ДобавитьЗаданияКОтражениюСостоянияЗаказов(ДокументИсточник, МассивОтражаемыхДокументов);
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Добавляет задания к отражению состояния заказов.
// 
// Параметры:
//  Источник - ДокументОбъект - проводимый документ, источник информации для отражения.
//  ОтражаемыеДокументы - Массив из ДокументСсылка - массив ссылок на документы, которые надо отразить.
//  Действие - Строка - действие для отражения состояния заказов. Возможные действия указываются в методе
//                      "ДействияДляОтраженияСостоянияЗаказов" модуля менеджера соответствующего регистра
//                      сведений состояния заказов.
//                      Более подробно можно прочесть в описании метода
//                      "ИнициализироватьТаблицуДействийДляОтраженияСостоянияЗаказов".
//                      По умолчанию пустая строка.
//  РегистрыКОтражению - Строка - имена регистров отражения состояиния заказов (ключи структуры из 
//                                РегистрыКОтражениюСостоянияЗаказов) разделенные запятыми.
//                     - см. РегистрыКОтражениюСостоянияЗаказов
//
Процедура ДобавитьЗаданияКОтражениюСостоянияЗаказов(
			Источник,
			ОтражаемыеДокументы,
			Действие = "",
			РегистрыКОтражению = Неопределено) Экспорт
	
	Если ТипЗнч(РегистрыКОтражению) = Тип("Строка") Тогда
		
		Регистры = РегистрыКОтражениюСостоянияЗаказов();
		
		СтруктураРегистровКОтражению = Новый Структура(РегистрыКОтражению);
		Для каждого ЭлементРегистр Из СтруктураРегистровКОтражению Цикл
			
			ИмяРегистра = ЭлементРегистр.Ключ;
			Если Регистры.Свойство(ИмяРегистра) Тогда
				Регистры[ИмяРегистра] = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Регистры = РегистрыКОтражению;
		
	КонецЕсли;
	
	ТаблицаЗаданий = ОтложенныеЗадания.ИнициализироватьТаблицуЗаданий("ЗаданияКОтражениюСостоянияЗаказов");
	
	Для каждого ИмяРегистра Из ОбслуживаемыеРегистры(Регистры) Цикл
		
		РегистрыСведений[ИмяРегистра].ДобавитьЗаданияКОтражениюСостоянияЗаказов(
			Источник,
			ОтражаемыеДокументы,
			Действие,
			ТаблицаЗаданий);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОтражаемыеДокументы) Тогда
		ОтложенныеЗадания.Запустить(ТаблицаЗаданий);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров описывающих регистры к отражению состояния заказов.
//
// Возвращаемое значение:
//  Структура - Регистры к отражению состояния заказов:
//   * СостоянияЗаказовКлиентов       - Булево - 
//   * СостоянияЗаказовПоставщикам    - Булево - 
//   * СостоянияВнутреннихЗаказов     - Булево - 
//   * СостоянияЭтаповПроизводства    - Булево - 
//   * СостоянияЗаказовНаПроизводство - Булево - 
//
Функция РегистрыКОтражениюСостоянияЗаказов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("СостоянияЗаказовКлиентов",       Ложь);
	Параметры.Вставить("СостоянияЗаказовПоставщикам",    Ложь);
	Параметры.Вставить("СостоянияВнутреннихЗаказов",     Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Возвращает текст запроса наличие заданий в регистре "ЗаданияКОтражениюСостоянияЗаказов".
// 
// Параметры:
//  ИмяПараметра - Строка - Имя параметра определяющий документ, для которого происходит проверка наличие заданий.
//                          Имя параметра запроса передается вместе с "&" (пример "&ЗаказКлиента").
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЕстьЗаданияКОтражениюСостоянияЗаказов(ИмяПараметра) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьЗаданияКОтражениюСостоянияЗаказов
	|ИЗ
	|	РегистрСведений.ЗаданияКОтражениюСостоянияЗаказов КАК Задания
	|ГДЕ
	|	Задания.Документ = &Заказ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Заказ", ИмяПараметра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Обработчик после записи на сервере для форм заказов.
// Проверяет возможность запуска проверки наличие задания к отражению состояния заказов, и, если возможно, устанавливает
// признак запуска данной проверки (значение реквизита формы "СтартПроверкиЗаданияКОтражениюСостоянияЗаказов" в 0).
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - с реквизитом "ПризнакПроверкиЗаданияКОтражениюСостоянияЗаказов":
//                                        1. 0 - проверка задания к отражению состояния заказов не запущена,
//                                        2. 1 - запустить проверку задания к отражению состояния заказов,
//                                        3. 2 - старт проверки задания к отражению состояния заказов,
//                                        4. 3 - проверка задания к отражению состояния заказов выполняется.
//  ПараметрыЗаписи - Структура - стандартный параметр, передаваемый в обработчик события.
//  ИмяЭлементаСостояние - см. СостоянияДокументовКлиентСервер.УстановитьВидимостьЭлементов.ИмяЭлементаСостояние
//  ИмяГруппыСостояниеРассчитывается - см. СостоянияДокументовКлиентСервер.УстановитьВидимостьЭлементов.ИмяГруппыСостояниеРассчитывается
//  ДополнительноеУсловие - Булево - если Ложь, тогда проверка задания к отражению состояния заказов не запускается.
//                                   По умолчанию ИСТИНА.
//
Процедура ПослеЗаписиНаСервере(
			Форма,
			ПараметрыЗаписи,
			ИмяЭлементаСостояние = "Состояние",
			ИмяГруппыСостояниеРассчитывается = "ГруппаСостояниеРассчитывается",
			ДополнительноеУсловие = Истина) Экспорт
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Проведение
	 Или ОбщегоНазначения.ИнформационнаяБазаФайловая()
	 Или ОбщегоНазначения.РежимОтладки()
	 Или Не ДополнительноеУсловие
	 Или Не ПроверкаЗаданияКОтражениюСостоянияЗаказовНеЗапущена(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПризнакПроверкиЗаданияКОтражениюСостоянияЗаказов = 1;
	
	СостоянияДокументовКлиентСервер.УстановитьВидимостьЭлементов(
		Форма.Элементы,
		ИмяЭлементаСостояние,
		ИмяГруппыСостояниеРассчитывается,
		Истина);
	
КонецПроцедуры

// Возвращает признак, что проверка задания к отражению состояния заказов не запущена.
// 
// Параметры:
//  Форма - см. ПослеЗаписиНаСервере.Форма
// 
// Возвращаемое значение:
//  Булево - признак запуска проверки задания к отражению состояния заказов
//
Функция ПроверкаЗаданияКОтражениюСостоянияЗаказовНеЗапущена(Форма) Экспорт
	
	Возврат Форма.ПризнакПроверкиЗаданияКОтражениюСостоянияЗаказов = 0;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет необходимые действия по очереди заданий к отражению состояния заказов.
//
// Параметры:
//  Задания - ТаблицаЗначений - колонки соответствуют измерениям, ресурсам и реквизитам регистра сведений
//                              "ЗаданияКОтражениюСостоянияЗаказов", есть и служебные колонки:
//             * Документ               - ДокументСсылка          - ссылка на документ, который надо отразить
//             * ИдентификаторЗаписи    - УникальныйИдентификатор -
//             * ДатаЗаписи             - Дата                    -
//             * Действие               - Строка                  -
//             * ИдентификаторЗадания   - УникальныйИдентификатор - служебная
//             * ДатаЗадания            - Дата                    - служебная
//  ИдентификаторыНеОбработанныхЗаписей - Соответствие из УникальныйИдентификатор - ключ, это идентификатор 
//                                                                                   не выполненных (выдающих ошибку при
//                                                                                   выполнении) записей регистра
//                                                                                   сведений очереди заданий
//                                                                                   (измерение ИдентификаторЗаписи
//                                                                                   регистра сведений очереди заданий),
//                                                                                  значение, это представление ошибки.
//  ДополнительныеСвойства - Неопределено, Структура - дополнительные свойства выполнения заданий.
//
Процедура ОтразитьСостоянияДокументовВРегистрахСостояний(
			Задания,
			ИдентификаторыНеОбработанныхЗаписей,
			ДополнительныеСвойства = Неопределено) Экспорт
	
	ОбслуживаемыеРегистры = ОбслуживаемыеРегистры();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Задания", Задания);
	
	ТекстыЗапросаСостояний = Новый Массив;
	
	Для каждого ИмяРегистра Из ОбслуживаемыеРегистры Цикл
		
		ИмяПараметра = СтрШаблон("Типы%1", ИмяРегистра);
		
		ТекстЗапросаСостояний = СтрШаблон("ТИПЗНАЧЕНИЯ(Задания.Документ) В (&%1) КАК %2",
											ИмяПараметра,
											ИмяРегистра);
		
		ТекстыЗапросаСостояний.Добавить(ТекстЗапросаСостояний);
		
		Запрос.УстановитьПараметр(ИмяПараметра, РегистрыСведений[ИмяРегистра].ТипыЗаказовДляОтраженияСостояний());
		
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Задания.Документ            КАК Документ,
	|	Задания.Действие            КАК Действие,
	|	Задания.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	Задания.ДатаЗаписи          КАК ДатаЗаписи
	|ПОМЕСТИТЬ Задания
	|ИЗ
	|	&Задания КАК Задания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задания.Документ            КАК Документ,
	|	Задания.Действие            КАК Действие,
	|	Задания.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	&ПоляСостояний
	|ИЗ
	|	Задания КАК Задания
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗаписи
	|";
	
	Разделитель =
	",
	|	";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ПоляСостояний", СтрСоединить(ТекстыЗапросаСостояний, Разделитель));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаданий = Результат.Выгрузить();
	
	Для каждого ИмяРегистра Из ОбслуживаемыеРегистры Цикл
		ТаблицаЗаданий.Индексы.Добавить(ИмяРегистра);
		ТаблицаЗаданий.Индексы.Добавить(СтрШаблон("%1, Действие", ИмяРегистра));
	КонецЦикла;
	
	Для каждого ИмяРегистра Из ОбслуживаемыеРегистры Цикл
		
		ОтборПоРегистру = Новый Структура(ИмяРегистра, Истина);
		
		КоличествоСтрокВсего = ТаблицаЗаданий.НайтиСтроки(ОтборПоРегистру).Количество();
		Если КоличествоСтрокВсего = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяМетодаПоУмолчанию = СтрШаблон("РегистрыСведений.%1.ОтразитьСостоянияЗаказов", ИмяРегистра);
		
		ОтборПоРегистру.Вставить("Действие", "");
		ТаблицаЗаказов = ТаблицаЗаданий.Скопировать(ОтборПоРегистру, "Документ, ИдентификаторЗаписи");
		
		Если КоличествоСтрокВсего = ТаблицаЗаказов.Количество() Тогда
			
			ОтражаемыеДокументы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаЗаказов, "Документ", Истина);
			
			ВыполнитьМетодОтраженияСостоянияДокументов(
				ИмяМетодаПоУмолчанию,
				ОтражаемыеДокументы,
				ТаблицаЗаказов,
				ИдентификаторыНеОбработанныхЗаписей);
			
		Иначе
			
			Действие = ТаблицаЗаданий[0].Действие;
			
			ТаблицаДействий = РегистрыСведений[ИмяРегистра].ДействияДляОтраженияСостоянияЗаказов();
			
			ОтражаемыеДокументы = Новый Массив;
			ОбработанныеСтроки  = Новый Массив;
			
			Для каждого СтрокаТаблицы Из ТаблицаЗаданий Цикл
				
				Если Действие <> СтрокаТаблицы.Действие Тогда
					
					ВыполнитьМетодОтраженияСостоянияДокументов(
						ИмяМетодаОтраженияСостоянияДокументов(Действие, ТаблицаДействий, ИмяМетодаПоУмолчанию),
						ОтражаемыеДокументы,
						ТаблицаЗаданий.Скопировать(ОбработанныеСтроки),
						ИдентификаторыНеОбработанныхЗаписей);
					
					Действие = СтрокаТаблицы.Действие;
					
					ОтражаемыеДокументы.Очистить();
					ОбработанныеСтроки.Очистить();
					
				КонецЕсли;
				
				ТекущийДокумент = СтрокаТаблицы.Документ;
				
				Если ОтражаемыеДокументы.Найти(ТекущийДокумент) = Неопределено Тогда
					ОтражаемыеДокументы.Добавить(ТекущийДокумент);
				КонецЕсли;
				
				ОбработанныеСтроки.Добавить(СтрокаТаблицы);
				
			КонецЦикла;
			
			ВыполнитьМетодОтраженияСостоянияДокументов(
				ИмяМетодаОтраженияСостоянияДокументов(Действие, ТаблицаДействий, ИмяМетодаПоУмолчанию),
				ОтражаемыеДокументы,
				ТаблицаЗаданий.Скопировать(ОбработанныеСтроки),
				ИдентификаторыНеОбработанныхЗаписей);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует таблицу действий для отражения состояния заказов. Используется, если нужно вызвать метод отражения
// состояния заказов который различается от стандартного "РегистрыСведений[ИмяРегистра].ОтразитьСостоянияЗаказов".
// Методы отражения определяются по значению реквизита "Действие" регистра сведений "ЗаданияКОтражениюСостоянияЗаказов".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица действий для для отражения состояний:
//   * Действие  - Строка - действие, для которого нужно выполнить метод отражения.
//                          Обязательно для заполнения.
//   * ИмяМетода - Строка - метод отражения, имя экспортной процедуры в формате
//                          <имя объекта>.<имя процедуры>, где <имя объекта> - это
//                          общий модуль или модуль менеджера объекта.
//                          Обязательно для заполнения.
//
Функция ИнициализироватьТаблицуДействийДляОтраженияСостоянияЗаказов() Экспорт
	
	ТаблицаДействий = Новый ТаблицаЗначений;
	ТаблицаДействий.Колонки.Добавить("Действие",  ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ТаблицаДействий.Колонки.Добавить("ИмяМетода", ОбщегоНазначения.ОписаниеТипаСтрока(1000));
	
	Возврат ТаблицаДействий;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает массив метаданных регистров отражения состояния заказов.
//
// Параметры:
//  РегистрыКОтражениюСостоянияЗаказов - см. РегистрыКОтражениюСостоянияЗаказов
//
// Возвращаемое значение:
//  Массив из ОбъектМетаданных -
//
Функция ОбслуживаемыеРегистры(РегистрыКОтражениюСостоянияЗаказов = Неопределено)
	
	МассивРегистров = Новый Массив();
	
	Если РегистрыКОтражениюСостоянияЗаказов = Неопределено Тогда
		
		МассивРегистров.Добавить(Метаданные.РегистрыСведений.СостоянияЗаказовКлиентов.Имя);
		МассивРегистров.Добавить(Метаданные.РегистрыСведений.СостоянияЗаказовПоставщикам.Имя);
		МассивРегистров.Добавить(Метаданные.РегистрыСведений.СостоянияВнутреннихЗаказов.Имя);
		
	Иначе
		
		Если РегистрыКОтражениюСостоянияЗаказов.СостоянияЗаказовКлиентов Тогда
			МассивРегистров.Добавить(Метаданные.РегистрыСведений.СостоянияЗаказовКлиентов.Имя);
		КонецЕсли;
		
		Если РегистрыКОтражениюСостоянияЗаказов.СостоянияЗаказовПоставщикам Тогда
			МассивРегистров.Добавить(Метаданные.РегистрыСведений.СостоянияЗаказовПоставщикам.Имя);
		КонецЕсли;
		
		Если РегистрыКОтражениюСостоянияЗаказов.СостоянияВнутреннихЗаказов Тогда
			МассивРегистров.Добавить(Метаданные.РегистрыСведений.СостоянияВнутреннихЗаказов.Имя);
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат МассивРегистров
	
КонецФункции

// Дополняет текст запроса механизма расчета состояний.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 	ТекстЗапроса - Строка - строка с текстом запроса.
// 	ТекстЗапросаВременныхТаблиц - Строка - строка с текстом запроса временных таблиц.
// 	ИменаВременныхТаблиц - Строка - массив имен создаваемых временных таблиц для последующего уничтожения.
Процедура ДополнитьТекстЗапросаЗаданий(Запрос, ТекстЗапроса, ТекстЗапросаВременныхТаблиц, ИменаВременныхТаблиц)
	Для каждого ИмяРегистра Из ОбслуживаемыеРегистры() Цикл
		СоответствиеЗапросов = РегистрыСведений[ИмяРегистра].СоответствиеЗапросовКонтрольнымРегистрам(Запрос);
		
		Для Каждого ЭлементСоответствия Из СоответствиеЗапросов Цикл
			ЗакрытиеМесяцаСервер.ДополнитьТекстЗапросаЗаданий(ЭлементСоответствия.Ключ,
				ЭлементСоответствия.Значение,
				Запрос.МенеджерВременныхТаблиц.Таблицы,
				ТекстЗапроса,
				ТекстЗапросаВременныхТаблиц,
				ИменаВременныхТаблиц);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Выполняет метод отражения состояния документов.
// 
// Параметры:
//  ИмяМетода - Строка - метод отражения.
//  ОтражаемыеДокументы - Массив из ДокументСсылка - массив ссылок на документы, которые надо отразить.
//  ТаблицаИдентификаторов - ТаблицаЗначений - с колонками:
//                            * Документ - ДокументСсылка -
//                            * ИдентификаторЗаписи - УникальныйИдентификатор -
//  ИдентификаторыНеОбработанныхЗаписей - см. ОтразитьСостоянияДокументовВРегистрахСостояний.ИдентификаторыНеОбработанныхЗаписей
//
Процедура ВыполнитьМетодОтраженияСостоянияДокументов(
			ИмяМетода,
			ОтражаемыеДокументы,
			ТаблицаИдентификаторов,
			ИдентификаторыНеОбработанныхЗаписей)
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(ОтражаемыеДокументы);
	ПараметрыМетода.Добавить(Новый Соответствие); // Ошибки
	
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, ПараметрыМетода);
	
	Ошибки = ПараметрыМетода[1];
	
	Если Ошибки.Количество() > 0 Тогда
		
		ПоляОшибки   = Новый Структура("Документ");
		ДанныеОшибки = Новый Структура("Документ");
		
		ТаблицаИдентификаторов.Индексы.Добавить("Документ");
		
		Для каждого Ошибка Из Ошибки Цикл
			
			ДанныеОшибки.Документ = Ошибка.Ключ;
			
			ТекстОшибки = ОтложенныеЗадания.ТекстОшибкиВыполнения(ПоляОшибки, ДанныеОшибки, Ошибка.Значение);
			
			НайденныеСтроки = ТаблицаИдентификаторов.НайтиСтроки(ДанныеОшибки);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ИдентификаторыНеОбработанныхЗаписей.Вставить(НайденнаяСтрока.ИдентификаторЗаписи, ТекстОшибки);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает имя метода отражения состояния документов.
// 
// Параметры:
//  Действие - Строка -
//  ТаблицаДействий - см. ИнициализироватьТаблицуДействийДляОтраженияСостоянияЗаказов
//  ИмяМетодаПоУмолчанию - Строка - метод отражения по умолчанию.
// 
// Возвращаемое значение:
//  Строка - метод отражения.
//  
Функция ИмяМетодаОтраженияСостоянияДокументов(Действие, ТаблицаДействий, ИмяМетодаПоУмолчанию)
	
	Если ЗначениеЗаполнено(Действие) И ЗначениеЗаполнено(ТаблицаДействий) Тогда
		
		НайденныеСтрокиДействий = ТаблицаДействий.НайтиСтроки(Новый Структура("Действие", Действие));
		
		Если НайденныеСтрокиДействий.Количество() > 0 Тогда
			
			ИмяМетода = НайденныеСтрокиДействий[0].ИмяМетода;
			
		Иначе
			
			ИмяМетода = ИмяМетодаПоУмолчанию;
			
		КонецЕсли;
		
	Иначе
		
		ИмяМетода = ИмяМетодаПоУмолчанию;
		
	КонецЕсли;
	
	Возврат ИмяМетода;
	
КонецФункции

#КонецОбласти
