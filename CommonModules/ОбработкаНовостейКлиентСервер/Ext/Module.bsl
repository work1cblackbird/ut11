///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Новости".
// ОбщийМодуль.ОбработкаНовостейКлиентСервер.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработкаХТМЛ

// Функция возвращает текст, обрамленный тегами HTML.
//
// Параметры:
//  Текст        - Строка - сам текст, который надо вывести;
//  Жирный       - Булево - Истина, если текст надо обрамить жирностью;
//  Курсив       - Булево - Истина, если текст надо обрамить курсивом;
//  Подчеркнутый - Булево - Истина, если текст надо обрамить подчеркиванием;
//  ЦветТекста   - Строка - FFFFFF, (длина 6);
//  Гиперссылка  - Строка - гиперссылка текста.
//
// Возвращаемое значение:
//  Строка - текст в формате HTML.
//
Функция ПолучитьФорматированнуюСтроку(
			ЗНАЧ Текст,
			Жирный = Ложь, Курсив = Ложь, Подчеркнутый = Ложь,
			ЦветТекста = Неопределено, Гиперссылка = "") Экспорт

	ТипСтрока = Тип("Строка");

	Если Жирный = Истина Тогда
		Текст = "<B>" + Текст + "</B>";
	КонецЕсли;

	Если Курсив = Истина Тогда
		Текст = "<I>" + Текст + "</I>";
	КонецЕсли;

	Если Подчеркнутый = Истина Тогда
		Текст = "<U>" + Текст + "</U>";
	КонецЕсли;

	Если ТипЗнч(ЦветТекста) = ТипСтрока Тогда
		Текст = "<FONT COLOR=""#%ЦветТекста%"">" + Текст + "</FONT>";
		Текст = СтрЗаменить(Текст, "%ЦветТекста%", ЦветТекста);
	КонецЕсли;

	Если НЕ ПустаяСтрока(Гиперссылка) Тогда
		Текст = "<A HREF=""%Гиперссылка%"">" + Текст + "</A>";
		Текст = СтрЗаменить(Текст, "%Гиперссылка%", Гиперссылка);
	КонецЕсли;

	Возврат Текст;

КонецФункции

// Функция возвращает текст, обрамленный тегами HTML.
//
// Параметры:
//  МассивТекстов - Массив из Строка - Массив простых и форматированных текстов.
//
// Возвращаемое значение:
//  Строка - текст в формате HTML.
//
Функция ПолучитьФорматированныйТекст(МассивТекстов) Экспорт

	Текст = "";

	Для каждого ТекущийЭлементМассива Из МассивТекстов Цикл
		Если ТекущийЭлементМассива = Символы.ПС Тогда
			Текст = Текст + "<br/>";
		Иначе
			Текст = Текст + ТекущийЭлементМассива;
		КонецЕсли;
	КонецЦикла;

	Возврат Текст;

КонецФункции

// Функция заменяет специальные символы в коде HTML для правильного отображения новости.
//
// Параметры:
//  Текст - Строка - Код HTML, который необходимо подкорректировать.
//
// Возвращаемое значение:
//   Строка - откорректированный код HTML.
//
Функция ЗаменитьСпециальныеСимволыВHTML(Текст) Экспорт

	Результат = Текст;

	// Если разделителем строк вместо символа 13 будет 10, то inline-картинки (<img src="data:image/png;base64,) НЕ будут отображаться.
	// Необходимо заменить символы с кодом 10 на 13.
	Результат = СтрЗаменить(Результат, Символ(13) + Символ(10), Символ(13));
	Результат = СтрЗаменить(Результат, Символ(10) + Символ(13), Символ(13));
	Результат = СтрЗаменить(Результат, Символ(10), Символ(13));
	// Остальные замены.
	// Один символ перевода строки не заменять! Это разрушит inline-base64-картинки.
	Результат = СтрЗаменить(Результат, Символ(13) + Символ(13), "<#br#/><#br#/>");
	// Пробел с переводом строки заменить на <br/>.
	Результат = СтрЗаменить(Результат, " " + Символ(13), "<#br#/>");
	// Заменить неявные переводы строк <*>13 на <*> - удалить 13, если он идет сразу после тега.
	// Потому-что это может повлиять на отображение таблиц, которые удобно редактировать с переводами строк.
	Результат = СтрЗаменить(Результат, ">" + Символ(13), ">");
	// Перевод строки неявно заменить на <br/>.
	Результат = СтрЗаменить(Результат, "<#br#/>", "<br/>");

	Возврат Результат;

КонецФункции

// Функция ищет в тексте новости комментарий вида <!-- {Идентификатор} {Содержимое} --> и возвращает {Содержимое}.
// Разработчикам необходимо учесть факт, что при наличии комментариев "Идентификатор", "Идентификатор1", ... при попытке
//  поиска по "Идентификатор" будут найдены и "Идентификатор" и "Идентификатор1",
//  т.к. не обрабатывается анализ следующего символа после идентификатора - это символ или пробел или перевод строки.
// Эту возможность можно использовать для передачи в тексте новости произвольных параметров, например текст для отображения
//  в другой произвольной обработке (когда не подходят Заголовок, Подзаголовок и ТекстНовости).
//
// Параметры:
//  ДанныеНовости            - Строка, СправочникСсылка.Новости - где искать необходимый комментарий;
//  ИдентификаторКомментария - Строка - идентификатор, по которому необходимо найти данные;
//  ВозвращатьЕслиНеНайдено  - Произвольный - что возвращать, если комментарий не найден.
//
// Возвращаемое значение:
//   Произвольный - Строка или значение параметра функции ВозвращатьЕслиНеНайдено - содержимое комментария.
//
Функция ПолучитьСодержимоеИменованногоКомментария(ДанныеНовости, ИдентификаторКомментария, ВозвращатьЕслиНеНайдено = "") Экспорт

	ТипСтрока  = Тип("Строка");
	ТипНовость = Тип("СправочникСсылка.Новости");

	Результат = ВозвращатьЕслиНеНайдено;

	Если ТипЗнч(ДанныеНовости) = ТипСтрока Тогда
		ТекстНовости = ДанныеНовости;
	ИначеЕсли ТипЗнч(ДанныеНовости) = ТипНовость Тогда
		ТекстНовости = ДанныеНовости.ТекстНовости;
	КонецЕсли;

	Если НЕ ПустаяСтрока(ТекстНовости) Тогда

		ТегНачала = "<!-- " + ИдентификаторКомментария;
		ТегКонца  = "-->";
		ГдеНачало = СтрНайти(ТекстНовости, ТегНачала);
		Если ГдеНачало > 0 Тогда
			ГдеКонец = СтрНайти(ТекстНовости, ТегКонца, , ГдеНачало);
			Если ГдеКонец > 0 Тогда
				Результат = Сред(ТекстНовости, ГдеНачало + СтрДлина(ТегНачала), ГдеКонец - ГдеНачало - СтрДлина(ТегНачала));
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область КонтекстныеНовости

// Функция создает подменю "Новости" для отображения контекстных новостей.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой необходимо разместить подменю;
//  ЭлементКоманднаяПанель - ЭлементФормы - командная панель, в конце которой будет размещено подменю "Новости";
//  ТаблицаНовостей        - Массив из Структура - массив структур с ключами:
//    * Новость              - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьНаименование  - Строка - заголовок новости;
//    * ДатаПубликации       - Дата - Дата публикации новости;
//    * Важность             - Число - важность новости (длина (1));
//    * ЭтоПостояннаяНовость - Булево - ИСТИНА, если новость постоянная (находится вверху списка).
//
// Возвращаемое значение:
//   ГруппаФормы - Созданный элемент управления.
//
Функция ДобавитьПодменюПросмотраСпискаНовостей(
			Форма,
			ЭлементКоманднаяПанель,
			ТаблицаНовостей) Экспорт

	ЭлементПодменюНовости = Неопределено;

	Если (ТипЗнч(ЭлементКоманднаяПанель) = Тип("ГруппаФормы")) Тогда

		РазмерПодменюПостоянныхКонтекстныхНовостей = 5;
		ОбработкаНовостейКлиентСерверПереопределяемый.ПереопределитьРазмерПодменюПостоянныхКонтекстныхНовостей(
			РазмерПодменюПостоянныхКонтекстныхНовостей);
		РазмерПодменюКонтекстныхНовостей = 10;
		ОбработкаНовостейКлиентСерверПереопределяемый.ПереопределитьРазмерПодменюКонтекстныхНовостей(
			РазмерПодменюКонтекстныхНовостей);

		НастройкиСозданияПодменю = Новый Структура;
			НастройкиСозданияПодменю.Вставить("РазмерПодменюПостоянныхКонтекстныхНовостей", РазмерПодменюПостоянныхКонтекстныхНовостей);
			НастройкиСозданияПодменю.Вставить("РазмерПодменюКонтекстныхНовостей"          , РазмерПодменюКонтекстныхНовостей);

		ЭлементПодменюНовости = ОбработкаНовостейВызовСервера.ДобавитьПодменюПросмотраСпискаНовостей(
			Форма,
			ЭлементКоманднаяПанель,
			ТаблицаНовостей,
			НастройкиСозданияПодменю);

		Если (ТипЗнч(ЭлементПодменюНовости) = Тип("ГруппаФормы")) Тогда
			ОбработкаНовостейКлиентСерверПереопределяемый.ПослеДобавленияПодменюПросмотраСпискаНовостей(
				Форма,
				ЭлементКоманднаяПанель,
				ЭлементПодменюНовости,
				ТаблицаНовостей);
		КонецЕсли;

	КонецЕсли;

	Возврат ЭлементПодменюНовости;

КонецФункции

// Функция создает кнопку "Новости" для отображения списка контекстных новостей.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой необходимо разместить кнопку;
//  ЭлементКоманднаяПанель - ЭлементФормы - командная панель, в конце которой будет размещена кнопка "Новости";
//  ТаблицаНовостей        - ТаблицаЗначений - таблица, в которой должны быть колонки:
//    * Новость              - СправочникСсылка.Новости - ссылка на новость;
//    * НовостьНаименование  - Строка - заголовок новости;
//    * ДатаПубликации       - Дата - Дата публикации новости;
//    * Важность             - Число - важность новости (длина (1));
//    * ЭтоПостояннаяНовость - Булево - ИСТИНА, если новость постоянная (находится вверху списка).
//
// Возвращаемое значение:
//   КнопкаФормы - Созданный элемент управления.
//
Функция ДобавитьКнопкуПросмотраСпискаНовостей(
			Форма,
			ЭлементКоманднаяПанель,
			ТаблицаНовостей) Экспорт

	КомандаНовость  = Неопределено;
	ТипКомандаФормы = Тип("КомандаФормы");

	Если (ТипЗнч(ЭлементКоманднаяПанель) = Тип("ГруппаФормы")) Тогда

		// Очистить команды формы, начинающиеся с "Команда_Новость_".
		// У команд формы нет итератора по индексу, поэтому для удаления вначале составим список имен команд, а потом их удалим.
		ИменаКомандНовостейДляУдаления = Новый Массив;
		Для Каждого ТекущаяКоманда Из Форма.Команды Цикл
			Если СтрНачинаетсяС(ВРег(ТекущаяКоманда.Имя), ВРег("Команда_Новость_")) Тогда
				ИменаКомандНовостейДляУдаления.Добавить(ТекущаяКоманда.Имя);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекущееИмяКоманды Из ИменаКомандНовостейДляУдаления Цикл
			НайденнаяКоманда = Форма.Команды.Найти(ТекущееИмяКоманды);
			Если ТипЗнч(НайденнаяКоманда) = ТипКомандаФормы Тогда
				Форма.Команды.Удалить(НайденнаяКоманда);
			КонецЕсли;
		КонецЦикла;

		КомандаНовость = Форма.Команды.Добавить("Команда_Новость_Список");
			КомандаНовость.Действие    = "Подключаемый_ОбработкаНовости"; // ОбработкаНовости
			КомандаНовость.Картинка    = БиблиотекаКартинок.Новости;
			КомандаНовость.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КомандаНовость.Подсказка   = НСтр("ru='Нажмите для открытия списка контекстных новостей'");

		КнопкаНовостей = Форма.Элементы.Добавить("КнопкаНовостей", Тип("КнопкаФормы"), ЭлементКоманднаяПанель);
			КнопкаНовостей.Заголовок                 = НСтр("ru='Новости'");
			КнопкаНовостей.Вид                       = ВидКнопкиФормы.КнопкаКоманднойПанели;
			КнопкаНовостей.ИмяКоманды                = КомандаНовость.Имя;
			КнопкаНовостей.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;

		ОбработкаНовостейКлиентСерверПереопределяемый.ПослеДобавленияКнопкиПросмотраСпискаНовостей(
			Форма,
			ЭлементКоманднаяПанель,
			КнопкаНовостей,
			ТаблицаНовостей);

	КонецЕсли;

	Возврат КомандаНовость;

КонецФункции

#КонецОбласти

#Область РаботаСоСтроками

// Функция возвращает количество новостей прописью.
//
// Параметры:
//  КоличествоНовостей - Число - количество новостей;
//
// Возвращаемое значение:
//  Строка - количество новостей прописью.
//
Функция КоличествоНовостейПрописью(КоличествоНовостей) Экспорт

	Результат = 
		НРег(
			ЧислоПрописью(
				КоличествоНовостей,
				"НП=Истина; НД=Ложь;",
				НСтр("ru='новость,новости,новостей,ж,,,,,0'")));

	Возврат Результат;

КонецФункции

// Функция возвращает строку доступных для задания кода символов - английские буквы, цифры, минус, подчеркивание и т.п.
//
// Возвращаемое значение:
//  Строка - список символов, разрешенных для использования в идентификаторах.
//
Функция РазрешенныеДляИдентификацииСимволы() Экспорт

	Результат = "_-ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область БуферОбмена

// Возвращает пустую структуру для заполнения данными буфера обмена.
// Для использования в качестве буфера обмена Массив Структур, в отличие от ТаблицыЗначений,
//  может существовать и на клиенте и на сервере.
//
// Параметры:
//  КлючОбъекта  - Строка - Ключ, с которым данные будут сохранены в ХранилищеНастроек.БуферОбмена.
//
// Возвращаемое значение:
//   Структура - пустая Структура со всеми необходимыми полями.
//
Функция ПолучитьОписаниеПолейБуфераОбмена(КлючОбъекта) Экспорт

	Результат = Новый Структура;

	Если ВРег(КлючОбъекта) = ВРег("Документы.Новости.КатегорииПростые") Тогда
		Результат = Новый Структура("КатегорияНовостей, КатегорияНовостейКод, УсловиеОтбора, ЗначениеКатегорииНовостей, ЗначениеКатегорииНовостейКод, Автор");
	ИначеЕсли ВРег(КлючОбъекта) = ВРег("Документы.Новости.КатегорииИнтервалыВерсий") Тогда
		Результат = Новый Структура("КатегорияНовостей, КатегорияНовостейКод, Продукт, ПродуктКод, ВерсияОТ, ВерсияДО, ПредставлениеИнтервалаВерсий, Автор");
	ИначеЕсли ВРег(КлючОбъекта) = ВРег("Документы.Новости.ПривязкаКМетаданным") Тогда
		Результат = Новый Структура("Метаданные, Форма, Событие, ПоказыватьВФормеОбъекта, Важность, ДатаСбросаВажности, ДатаСбросаВажностиМестная, ЭтоПостояннаяНовость, ДатаСбросаПостояннойНовости, ДатаСбросаПоказаВФормеОбъекта");
	ИначеЕсли ВРег(КлючОбъекта) = ВРег("Документы.Новости.БинарныеДанные") Тогда
		Результат = Новый Структура("УИН, Заголовок, ИнтернетСсылка, ПорядокСортировки, ДанныеСтрока64, ДанныеРазмер");
	ИначеЕсли ВРег(КлючОбъекта) = ВРег("Документы.Новости.Действия") Тогда
		Результат = Новый Структура("УИНДействия, Действие, ПараметрыДействий");
	ИначеЕсли ВРег(КлючОбъекта) = ВРег("Документы.Новости.ПараметрыДействий") Тогда
		Результат = Новый Структура("Параметр, ЗначениеПараметра");
	ИначеЕсли ВРег(КлючОбъекта) = ВРег("Справочники.Продукты.Родители") Тогда
		Результат = Новый Структура("Продукт, ВерсияПродукта, ВерсияОТ, ВерсияДО, ВерсииСинхронизированы, ПредставлениеИнтервалаВерсий");
	ИначеЕсли ВРег(КлючОбъекта) = ВРег("Справочники.Продукты.КаналыРаспространенияНовостей") Тогда
		Результат = Новый Структура("КаналРаспространенияНовостей, ВерсияОТ, ВерсияДО, ПредставлениеИнтервалаВерсий");
	ИначеЕсли ВРег(КлючОбъекта) = ВРег("Справочники.Пользователи.ПраваДоступаКТематическимПодборкам") Тогда
		Результат = Новый Структура("ТематическаяПодборка, Чтение, Изменение, Публикация, ОтменаПубликации");
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСоСтроками

// Функция удаляет последние символы, если они находятся в списке удаляемых.
// Полезно для приведения каталогов к виду "без слеша в конце".
//
// Параметры:
//  ОбрабатываемаяСтрока - Строка - строка для проверки;
//  УдаляемыеСимволы     - Строка - строка со списком символов, которые необходимо удалить.
//
// Возвращаемое значение:
//  Строка - преобразованная строка.
//
Функция УдалитьПоследнийСимвол(ОбрабатываемаяСтрока, УдаляемыеСимволы) Экспорт

	Результат = ОбрабатываемаяСтрока;

	Если НЕ ПустаяСтрока(УдаляемыеСимволы) Тогда
		БылиУдаления = Истина;
		Пока БылиУдаления = Истина Цикл
			БылиУдаления = Ложь;
			Если СтрДлина(Результат) > 0 Тогда
				ПроверяемыйСимвол = Прав(Результат, 1);
				Если СтрНайти(УдаляемыеСимволы, ПроверяемыйСимвол) > 0 Тогда
					Результат = Лев(Результат, СтрДлина(Результат) - 1);
					БылиУдаления = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция приводит переданную строку к внутреннему формату версии:
//  - приводит к формату 99.99.999.9999;
//  - заменяет пробелы на нули;
//  - если пробел в конце, то сдвигает число направо (" 17 ", "  17", "17  " -> "0017").
//
// Параметры:
//  Версия  - Строка - Строка, которую необходимо преобразовать.
//
// Возвращаемое значение:
//   Строка - версия правильного вида, формата 99.99.999.9999.
//
Функция ВнутреннееПредставлениеНомераВерсии(Версия) Экспорт

	НовыйМассивЧиселВерсии = Новый Массив(4);
	МассивЧиселВерсии = СтрРазделить(Версия, ".", Истина);
	Для С=1 По 4 Цикл
		НовыйМассивЧиселВерсии[С-1] = 0;
		Если МассивЧиселВерсии.Количество() >= С Тогда
			// Преобразование "Число" выполняется без попытки/исключения, а значит если в номере версии есть символы, отличные от цифр,
			//  то будет исключение.
			НовыйМассивЧиселВерсии[С-1] = ?(ПустаяСтрока(МассивЧиселВерсии[С-1]), 0, Число(СокрЛП(МассивЧиселВерсии[С-1])));
		КонецЕсли;
	КонецЦикла;

	НоваяВерсия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1.%2.%3.%4",
		Формат(НовыйМассивЧиселВерсии[0], "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0"),
		Формат(НовыйМассивЧиселВерсии[1], "ЧЦ=2; ЧН=00; ЧВН=; ЧГ=0"),
		Формат(НовыйМассивЧиселВерсии[2], "ЧЦ=3; ЧН=000; ЧВН=; ЧГ=0"),
		Формат(НовыйМассивЧиселВерсии[3], "ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=0"));

	Возврат НоваяВерсия;

КонецФункции

// Функция из версии формата 99.99.999.9999 удаляет лидирующие нули, чтобы 08.02.019.0080 выглядело как 8.2.19.80.
//
// Параметры:
//  Версия - Строка - строка формата 99.99.999.9999, в которой необходимо удалить лидирующие нули;
//  СокращатьРазрядностьВерсии - Булево - разрешить сокращать версию (завершающуюся на 0000/000/00 или 9999/999/99) в следующих случаях:
//                    А.00.000.0000 = А,
//                    А.Б.000.0000 = А.Б,
//                    А.Б.В.0000 = А.Б.В,
//                    А.99.999.9999 = А.*,
//                    А.Б.999.9999 = А.Б.*,
//                    А.Б.В.9999 = А.Б.В.*.
//
// Возвращаемое значение:
//   Строка - удобочитаемое представление версии.
//
Функция ПользовательскоеПредставлениеНомераВерсии(Версия, СокращатьРазрядностьВерсии = Ложь) Экспорт

	Результат = "";

	Если СокращатьРазрядностьВерсии = Истина Тогда

		Версии = СтрЗаменить(Версия, ".", Символы.ПС);
		Если СтрЧислоСтрок(Версии) <> 4 Тогда
			Результат = Версия; // оставить как есть
		Иначе
			Версия1 = СтрПолучитьСтроку(Версии, 1);
			Версия2 = СтрПолучитьСтроку(Версии, 2);
			Версия3 = СтрПолучитьСтроку(Версии, 3);
			Версия4 = СтрПолучитьСтроку(Версии, 4);
			Если (Версия2 = "00") И (Версия3 = "000") И (Версия4 = "0000") Тогда
				// А.00.000.0000 = А
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0");
			ИначеЕсли (СтрПолучитьСтроку(Версии, 3) = "000") И (СтрПолучитьСтроку(Версии, 4) = "0000") Тогда
				// А.Б.000.0000 = А.Б
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0");
			ИначеЕсли (СтрПолучитьСтроку(Версии, 4) = "0000") Тогда
				// А.Б.В.0000 = А.Б.В
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия3), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0");
			ИначеЕсли (Версия2 = "99") И (Версия3 = "999") И (Версия4 = "9999") Тогда
				// А.99.999.9999 = А.*
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ ".*";
			ИначеЕсли (Версия3 = "999") И (Версия4 = "9999") Тогда
				// А.Б.999.9999 = А.Б.*
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ ".*";
			ИначеЕсли (Версия4 = "9999") Тогда
				// А.Б.В.9999 = А.Б.В.*
				Результат =
					Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия3), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ ".*";
			Иначе
				Результат = Формат(Число(Версия1), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия2), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия3), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0")
					+ "." + Формат(Число(Версия4), "ЧЦ=4; ЧДЦ=0; ЧН=0; ЧГ=0");
			КонецЕсли;
		КонецЕсли;

	Иначе

		НоваяВерсия = ВнутреннееПредставлениеНомераВерсии(Версия);

		НовыйМассивЧиселВерсии = Новый Массив(4);
		МассивЧиселВерсии = СтрРазделить(НоваяВерсия, ".", Истина);
		Для С=1 По 4 Цикл
			НовыйМассивЧиселВерсии[С-1] = 0;
			Если МассивЧиселВерсии.Количество() >= С Тогда
				Попытка
					НовыйМассивЧиселВерсии[С-1] = ?(ПустаяСтрока(МассивЧиселВерсии[С-1]), 0, Число(МассивЧиселВерсии[С-1]));
				Исключение
					НовыйМассивЧиселВерсии[С-1] = 0;
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;

		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1.%2.%3.%4",
			СокрЛП(Формат(НовыйМассивЧиселВерсии[0], "ЧЦ=4; ЧДЦ=; ЧН=0; ЧГ=0")),
			СокрЛП(Формат(НовыйМассивЧиселВерсии[1], "ЧЦ=4; ЧДЦ=; ЧН=0; ЧГ=0")),
			СокрЛП(Формат(НовыйМассивЧиселВерсии[2], "ЧЦ=4; ЧДЦ=; ЧН=0; ЧГ=0")),
			СокрЛП(Формат(НовыйМассивЧиселВерсии[3], "ЧЦ=4; ЧДЦ=; ЧН=0; ЧГ=0")));

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция генерирует пользовательское представление интервала версий.
//
// Параметры:
//  ВерсияОТ - Строка - строка формата 99.99.999.9999, которая участвует в формировании интервала версий;
//  ВерсияДО - Строка - строка формата 99.99.999.9999, которая участвует в формировании интервала версий.
//
// Возвращаемое значение:
//   Строка - пользовательское представление интервала версий.
//
Функция ПользовательскоеПредставлениеИнтервалаВерсий(ВерсияОТ, ВерсияДО) Экспорт

	Результат = "";

	Если (ВерсияОТ = "00.00.000.0000") И (ВерсияДО = "99.99.999.9999") Тогда
		Результат = НСтр("ru='Любая версия'");
	ИначеЕсли (ВерсияОТ <> "00.00.000.0000") И (ВерсияДО <> "99.99.999.9999") Тогда
		Если ВерсияОТ = ВерсияДО Тогда // Точная версия
			Результат = ПользовательскоеПредставлениеНомераВерсии(ВерсияОТ, Истина);
		Иначе // Интервал версий
			Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Интервал %1...%2'"),
				ПользовательскоеПредставлениеНомераВерсии(ВерсияОТ, Истина),
				ПользовательскоеПредставлениеНомераВерсии(ВерсияДО, Истина));
		КонецЕсли;
	ИначеЕсли (ВерсияОТ <> "00.00.000.0000") И (ВерсияДО = "99.99.999.9999") Тогда // От версии и выше
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='От %1 и выше'"),
			ПользовательскоеПредставлениеНомераВерсии(ВерсияОТ, Истина));
	ИначеЕсли (ВерсияОТ = "00.00.000.0000") И (ВерсияДО <> "99.99.999.9999") Тогда // До версии включительно
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='До версии %1 включительно'"),
			ПользовательскоеПредставлениеНомераВерсии(ВерсияДО, Истина));
	Иначе // Воспринимать как Интервал версий
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Интервал %1...%2.'"),
			ПользовательскоеПредставлениеНомераВерсии(ВерсияОТ, Истина),
			ПользовательскоеПредставлениеНомераВерсии(ВерсияДО, Истина));
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает строковое представление для произвольного значения.
//
// Параметры:
//  ОбрабатываемоеЗначение - Произвольный - значение произвольного типа, которое надо вывести в виде строки;
//  Разделитель1           - Строка - разделитель значений 1 (например, разделяет элементы массива или ключ и значение структуры или соответствия);
//  Разделитель2           - Строка - разделитель значений 2 (например, разделяет элементы структуры или соответствия);
//  Уровень                - Число  - Значение уровня, влияет на отступ.
//
// Возвращаемое значение:
//   Строка - строковое представление.
//
Функция ПредставлениеЗначения(ОбрабатываемоеЗначение, Разделитель1 = "", Разделитель2 = "", Знач Уровень = 0) Экспорт

	Результат = Новый Массив;

	ТипЧисло                     = Тип("Число");
	ТипСтрока                    = Тип("Строка");
	ТипДата                      = Тип("Дата");
	ТипБулево                    = Тип("Булево");
	ТипСписокЗначений            = Тип("СписокЗначений");
	ТипМассив                    = Тип("Массив");
	ТипФиксированныйМассив       = Тип("ФиксированныйМассив");
	ТипСтруктура                 = Тип("Структура");
	ТипФиксированнаяСтруктура    = Тип("ФиксированнаяСтруктура");
	ТипСоответствие              = Тип("Соответствие");
	ТипФиксированноеСоответствие = Тип("ФиксированноеСоответствие");

	Если ТипЗнч(Уровень) <> ТипЧисло
			ИЛИ Уровень < 0 Тогда
		Уровень = 0;
	КонецЕсли;

	Если ТипЗнч(ОбрабатываемоеЗначение) = ТипСтрока Тогда
		Результат.Добавить(СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень) + ОбрабатываемоеЗначение);
	ИначеЕсли ТипЗнч(ОбрабатываемоеЗначение) = ТипДата Тогда
		Результат.Добавить(СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень) + Формат(ОбрабатываемоеЗначение, "ДЛФ=DT"));
	ИначеЕсли ТипЗнч(ОбрабатываемоеЗначение) = ТипЧисло Тогда
		Результат.Добавить(СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень) + Формат(ОбрабатываемоеЗначение, "ЧЦ=15; ЧДЦ=4; ЧРД=,; ЧРГ=' '; ЧН=0,0000; ЧГ=3,0"));
	ИначеЕсли ТипЗнч(ОбрабатываемоеЗначение) = ТипБулево Тогда
		Результат.Добавить(СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень) + Формат(ОбрабатываемоеЗначение, "БЛ=Ложь; БИ=Истина"));
	ИначеЕсли ТипЗнч(ОбрабатываемоеЗначение) = ТипСписокЗначений Тогда
		Счетчик = 1;
		Для Каждого ТекущееЗначение Из ОбрабатываемоеЗначение Цикл
			Если Счетчик = ОбрабатываемоеЗначение.Количество() Тогда
				Результат.Добавить(
					СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ ПредставлениеЗначения(ТекущееЗначение.Значение, Разделитель1, Разделитель2, Уровень));
			Иначе
				Результат.Добавить(
					СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ ПредставлениеЗначения(ТекущееЗначение.Значение, Разделитель1, Разделитель2, Уровень) + Разделитель1);
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
	ИначеЕсли (ТипЗнч(ОбрабатываемоеЗначение) = ТипМассив) ИЛИ (ТипЗнч(ОбрабатываемоеЗначение) = ТипФиксированныйМассив) Тогда
		Счетчик = 1;
		Для Каждого ТекущееЗначение Из ОбрабатываемоеЗначение Цикл
			Если Счетчик = ОбрабатываемоеЗначение.Количество() Тогда
				Результат.Добавить(
					СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ ПредставлениеЗначения(ТекущееЗначение, Разделитель1, Разделитель2, Уровень));
			Иначе
				Результат.Добавить(
					СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ ПредставлениеЗначения(ТекущееЗначение, Разделитель1, Разделитель2, Уровень) + Разделитель1);
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
	ИначеЕсли (ТипЗнч(ОбрабатываемоеЗначение) = ТипСтруктура)
			ИЛИ (ТипЗнч(ОбрабатываемоеЗначение) = ТипФиксированнаяСтруктура) Тогда
		Для Каждого КлючЗначение Из ОбрабатываемоеЗначение Цикл
			Если (ТипЗнч(КлючЗначение.Значение) = ТипСтруктура)
					ИЛИ (ТипЗнч(КлючЗначение.Значение) = ТипФиксированнаяСтруктура) Тогда
				// Перед структурой вставить еще один разделитель.
				Результат.Добавить(
					СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ КлючЗначение.Ключ
					+ Разделитель1
					+ Символы.ПС
					+ ПредставлениеЗначения(КлючЗначение.Значение, Разделитель1, Разделитель2, Уровень + 1) // С отступом
					+ Разделитель2);
			Иначе
				Результат.Добавить(
					СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ КлючЗначение.Ключ
					+ Разделитель1
					+ ПредставлениеЗначения(КлючЗначение.Значение, Разделитель1, Разделитель2, 0) // Без отступа
					+ Разделитель2);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли (ТипЗнч(ОбрабатываемоеЗначение) = ТипСоответствие) ИЛИ (ТипЗнч(ОбрабатываемоеЗначение) = ТипФиксированноеСоответствие) Тогда
		Для Каждого КлючЗначение Из ОбрабатываемоеЗначение Цикл
			Если (ТипЗнч(КлючЗначение.Значение) = ТипСтруктура)
					ИЛИ (ТипЗнч(КлючЗначение.Значение) = ТипФиксированнаяСтруктура) Тогда
				// Перед структурой вставить еще один разделитель.
				Результат.Добавить(
					СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ ПредставлениеЗначения(КлючЗначение.Ключ, Разделитель1, Разделитель2, Уровень + 1)
					+ Разделитель1
					+ Символы.ПС
					+ ПредставлениеЗначения(КлючЗначение.Значение, Разделитель1, Разделитель2, Уровень + 1) // С отступом
					+ Разделитель2);
			Иначе
				Результат.Добавить(
					СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", Уровень)
					+ ПредставлениеЗначения(КлючЗначение.Ключ, Разделитель1, Разделитель2, Уровень + 1)
					+ Разделитель1
					+ ПредставлениеЗначения(КлючЗначение.Значение, Разделитель1, Разделитель2, 0) // Без отступа
					+ Разделитель2);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Значения других типов, например элементы справочников - выводятся как есть.
		Результат.Добавить(ОбрабатываемоеЗначение);
	КонецЕсли;

	Возврат СтрСоединить(Результат, ""); // Разделитель2 уже добавлен

КонецФункции

// Для многострочной строки добавляет отступ для каждой строки.
//
// Параметры:
//  МногострочнаяСтрока   - Строка, Массив - строка, которую необходимо преобразовать;
//  Отступ                - Строка - отступ, который надо добавить;
//  ОтступДляПервойСтроки - Булево - добавлять отступ для первой строки или нет;
//  СокращатьПробелы      - Булево - Истина, если для каждой строки надо предварительно удалять незначащие символы с концов строки.
//
// Возвращаемое значение:
//   Строка - отформатированная строка.
//
Функция ВставитьОтступВМногострочнуюСтроку(МногострочнаяСтрока, Отступ, ОтступДляПервойСтроки = Ложь, СокращатьПробелы = Ложь) Экспорт

	Результат = Новый Массив;

	ТипМассив = Тип("Массив");
	ТипСтрока = Тип("Строка");

	Если ТипЗнч(МногострочнаяСтрока) = ТипМассив Тогда
		СтрокиДляОбработки = МногострочнаяСтрока;
	ИначеЕсли ТипЗнч(МногострочнаяСтрока) = ТипСтрока Тогда
		СтрокиДляОбработки = СтрРазделить(МногострочнаяСтрока, Символы.ПС, Истина);
	Иначе
		СтрокиДляОбработки = Новый Массив;
	КонецЕсли;

	ЭтоПерваяСтрока = Истина;
	Для Каждого ТекущаяСтрока Из СтрокиДляОбработки Цикл
		Если СокращатьПробелы = Истина Тогда
			ТекущаяСтрока = СокрЛП(ТекущаяСтрока);
		КонецЕсли;
		Если (ЭтоПерваяСтрока = Истина) И (ОтступДляПервойСтроки = Ложь) Тогда
			Результат.Добавить(ТекущаяСтрока);
		Иначе
			Результат.Добавить(Отступ + ТекущаяСтрока);
		КонецЕсли;
		ЭтоПерваяСтрока = Ложь;
	КонецЦикла;

	Результат = СтрСоединить(Результат, Символы.ПС);

	Возврат Результат;

КонецФункции

#Область Шаблонизатор

// Заполняет шаблон.
//
// Параметры:
//  ТекстШаблона   - Строка - текст с кодами подстановки.
//    Коды подстановки - между {{ и }} (именно двойные, т.к. одинарные фигурные скобки есть в текстах исключений);
//  ИсточникДанных - Структура - источник данных для шаблонов вида {{ИмяПоля}}.
//
// Возвращаемое значение:
//   Строка - результат заполнения шаблона.
//
Функция ЗаполнитьШаблон(ТекстШаблона, ИсточникДанных) Экспорт

	Результат = "";

	НомерСтрокиШаблона = 0;
	СтрокиШаблона      = СтрРазделить(ТекстШаблона, Символы.ПС, Истина);
	СтрокиРезультата   = Новый Массив;
	Для Каждого СтрокаШаблона Из СтрокиШаблона Цикл
		СтрокаРезультата = ЗаполнитьСтрокуШаблона(СтрокаШаблона, ИсточникДанных);
		СтрокиРезультата.Добавить(СтрокаРезультата);
	КонецЦикла;
	Результат = СтрСоединить(СтрокиРезультата, Символы.ПС);

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЛогИОтладка

#Область УстаревшийФункционал

// Устаревший функционал. // Надо использовать НовыйКонтекстВыполнения.
// Возвращает структуру контекста выполнения для дальнейшей записи в журнал регистрации или вывод на экран.
// Это базовый функционал.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Структура - Структура с определенными ключами, см. код.
//
Функция НоваяЗаписьРезультатовВыполненияОпераций() Экспорт

	Результат = Новый Структура;
		Результат.Вставить("НаименованиеМетода"          , "");
		Результат.Вставить("ЛогШаговВыполнения"          , Новый Массив);
		Результат.Вставить("КодРезультата"               , 0);
		Результат.Вставить("ОписаниеРезультата"          , "");
		Результат.Вставить("ЗаписыватьВЖурналРегистрации", Ложь);
		Результат.Вставить("КонтекстВыполненияВложенный" , Неопределено); // При необходимости - заполнить самостоятельно.

	Возврат Результат;

КонецФункции

// Устаревший функционал. // Надо использовать НачатьШагВыполнения или НачатьШагВыполненияВложенный.
// Регистрирует начало шага выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций;
//  ИдентификаторШага - Строка - Произвольный идентификатор;
//  Шаг - Строка - Произвольное описание шага.
//
Процедура НачатьРегистрациюРезультатаВыполненияОперации(КонтекстВыполнения, ИдентификаторШага, Шаг) Экспорт

	// В начале регистрации записывается информация:
	//  ИдентификаторШага, Шаг, ВремяНачала.
	// В конце регистрации записывается информация:
	//  ВремяОкончания, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения.

	// Если в контексте выполнения уже существовало свойство "ТекущийШагВыполнения", то он будет перезаписан.

	ТекущийШагВыполнения = СтруктураШагаВыполнения();
		ТекущийШагВыполнения.Вставить("ИдентификаторШага", ИдентификаторШага);
		ТекущийШагВыполнения.Вставить("Шаг"              , Шаг);
		ТекущийШагВыполнения.Вставить("ВремяНачала"      , ТекущаяУниверсальнаяДатаВМиллисекундах());

	КонтекстВыполнения.Вставить("ТекущийШагВыполнения", ТекущийШагВыполнения);

КонецПроцедуры

// Устаревший функционал. // Надо использовать ЗавершитьШагВыполнения.
// Регистрирует завершение шага выполнения и возвращает последний шаг.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций;
//  КодРезультата - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата - Строка, Массив - произвольное описание результата шага. Массив будет преобразован в строку с разделителями;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.СтруктураШагаВыполнения.
//
Функция ЗавершитьРегистрациюРезультатаВыполненияОперации(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения = Неопределено) Экспорт

	// В начале регистрации записывается информация:
	//  ИдентификаторШага, Шаг, ВремяНачала.
	// В конце регистрации записывается информация:
	//  ВремяОкончания, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения.

	ТипМассив = Тип("Массив");

	ТекущийШагВыполнения = СтруктураШагаВыполнения();
	Если КонтекстВыполнения.Свойство("ТекущийШагВыполнения") Тогда
		ЗаполнитьЗначенияСвойств(ТекущийШагВыполнения, КонтекстВыполнения.ТекущийШагВыполнения, "ИдентификаторШага, Шаг, ВремяНачала");
	КонецЕсли;

	// Если не было зарегистрировано начало шага выполнения, то впоследствии могут быть ошибки при записи лога в журнал регистрации.
	Если ТипЗнч(ТекущийШагВыполнения.ВремяНачала) <> Тип("Число") Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не зарегистрировано начало шага выполнения %1.'"),
				ТекущийШагВыполнения.ИдентификаторШага);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Если ТипЗнч(ОписаниеРезультата) = ТипМассив Тогда
		ОписаниеРезультатаСтрокой = СтрСоединить(ОписаниеРезультата, Символы.ПС);
	Иначе
		ОписаниеРезультатаСтрокой = ОписаниеРезультата;
	КонецЕсли;

	ТекущийШагВыполнения.Вставить("ВремяОкончания"             , ТекущаяУниверсальнаяДатаВМиллисекундах());
	ТекущийШагВыполнения.Вставить("КодРезультата"              , КодРезультата);
	ТекущийШагВыполнения.Вставить("ОписаниеРезультата"         , ОписаниеРезультатаСтрокой);
	ТекущийШагВыполнения.Вставить("ВложенныйКонтекстВыполнения", ВложенныйКонтекстВыполнения);

	КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ТекущийШагВыполнения);

	КонтекстВыполнения.Удалить("ТекущийШагВыполнения"); // Удалить текущий шаг, т.к. он уже добавлен в "ЛогШаговВыполнения".

	Возврат ТекущийШагВыполнения;

КонецФункции

// Устаревший функционал.
// Для случая, когда в лог необходимо записать единственное действие, без времени, то вместо комбинации
//  НачатьРегистрациюРезультатаВыполненияОперации ... ЗавершитьРегистрациюРезультатаВыполненияОперации можно использовать
//  только ЗарегистрироватьРезультатВыполненияОперации, тогда время выполнения будет равно 0.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций;
//  ИдентификаторШага - Строка - Произвольный идентификатор;
//  Шаг - Строка - Произвольное описание шага.
//  КодРезультата - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата - Строка - произвольное описание результата шага;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.СтруктураШагаВыполнения.
//
Функция ЗарегистрироватьРезультатВыполненияОперации(
			КонтекстВыполнения,
			ИдентификаторШага,
			Шаг,
			КодРезультата,
			ОписаниеРезультата,
			ВложенныйКонтекстВыполнения = Неопределено) Экспорт

	ТекущийШагВыполнения = СтруктураШагаВыполнения();
		ТекущийШагВыполнения.Вставить("ИдентификаторШага"          , ИдентификаторШага);
		ТекущийШагВыполнения.Вставить("Шаг"                        , Шаг);
		ТекущийШагВыполнения.Вставить("ВремяНачала"                , ТекущаяУниверсальнаяДатаВМиллисекундах());
		ТекущийШагВыполнения.Вставить("ВремяОкончания"             , ТекущийШагВыполнения.ВремяНачала);
		ТекущийШагВыполнения.Вставить("КодРезультата"              , КодРезультата);
		ТекущийШагВыполнения.Вставить("ОписаниеРезультата"         , ОписаниеРезультата);
		ТекущийШагВыполнения.Вставить("ВложенныйКонтекстВыполнения", ВложенныйКонтекстВыполнения);

	КонтекстВыполнения.ЛогШаговВыполнения.Добавить(ТекущийШагВыполнения);

	Возврат ТекущийШагВыполнения;

КонецФункции

// Устаревший функционал.
// Возвращает структуру шага выполнения для дальнейшей записи в журнал регистрации или вывод на экран.
//
// Возвращаемое значение:
//   Структура - Структура с определенными ключами, см. код.
//
Функция СтруктураШагаВыполнения()

	Результат = Новый Структура;
		Результат.Вставить("ИдентификаторШага"          , "");
		Результат.Вставить("Шаг"                        , "");
		Результат.Вставить("ВремяНачала"                , 0);
		Результат.Вставить("ВремяОкончания"             , 0);
		Результат.Вставить("КодРезультата"              , 0);
		Результат.Вставить("ОписаниеРезультата"         , "");
		Результат.Вставить("ВложенныйКонтекстВыполнения", Неопределено);

	Возврат Результат;

КонецФункции

// Устаревший функционал.
// Функция возвращает текстовое описание шагов выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - Структура с ключами, описанными в Интернет.НоваяЗаписьРезультатовВыполненияОпераций();
//  ВключаяВложенные   - Булево - Истина, если надо включать вложенные контексты выполнения;
//  ВариантФормата     - Строка - в каком формате выводить текст. Возможные варианты:
//    * ТолькоТекстОписанияРезультата;
//    * ПодробноПоШагам.
//  УровеньВложенности - Число - Текущий уровень вложенности.
//
// Возвращаемое значение:
//   Строка - текстовое описание результата шага выполнения.
//
Функция ПредставлениеЗаписиРезультатовВыполненияОпераций(
			КонтекстВыполнения,
			ВключаяВложенные = Ложь,
			ВариантФормата = "",
			УровеньВложенности = 0) Экспорт

	ТипСтруктура = Тип("Структура");

	СтрокиРезультата = Новый Массив;
	ШаблонШага = НСтр("ru='%1Шаг: %2 (%3 мс), %4'");

	Для Каждого ТекущийШаг Из КонтекстВыполнения.ЛогШаговВыполнения Цикл

		Если ВариантФормата = "ТолькоТекстОписанияРезультата" Тогда
			СтрокиРезультата.Добавить(
				СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", УровеньВложенности)
				+ ТекущийШаг.ОписаниеРезультата);
		ИначеЕсли ВариантФормата = "ПодробноПоШагам" Тогда
			Отступ = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", УровеньВложенности);
			СтрокиРезультата.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонШага,
					Отступ,
					ТекущийШаг.ИдентификаторШага,
					Формат(ТекущийШаг.ВремяОкончания - ТекущийШаг.ВремяНачала, "ЧРГ=_; ЧН=0; ЧГ=3,0"), // Длительность.
					"[" + ТекущийШаг.КодРезультата + "]: " + ТекущийШаг.ОписаниеРезультата));
		КонецЕсли;

		Если ВключаяВложенные = Истина Тогда
			Если ТипЗнч(ТекущийШаг.ВложенныйКонтекстВыполнения) = ТипСтруктура Тогда
				СтрокиРезультата.Добавить(
					ПредставлениеЗаписиРезультатовВыполненияОпераций(
						ТекущийШаг.ВложенныйКонтекстВыполнения,
						ВключаяВложенные,
						ВариантФормата,
						УровеньВложенности + 1));
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат СтрСоединить(СтрокиРезультата, Символы.ПС);

КонецФункции

#КонецОбласти

// Функция возвращает текстовое описание лога шагов выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - Структура с ключами, описанными в Интернет.НовыйКонтекстВыполнения();
//  УровеньВложенности - Число - Текущий уровень вложенности.
//
// Возвращаемое значение:
//   Массив из Строка - массив строк, включая шаги выполнения вложенных контекстов выполнения.
//
Функция ПолныйЛогШаговВыполнения(
			КонтекстВыполнения,
			УровеньВложенности = 0) Экспорт

	ТипСтруктура = Тип("Структура");

	СтрокиРезультата = Новый Массив;
	ШаблонШага = НСтр("ru='%1Шаг: %2 (%3 мс), %4'");

	Для Каждого ТекущийШаг Из КонтекстВыполнения.ЖурналРегистрации.ЛогШаговВыполнения Цикл

		Отступ = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("  ", УровеньВложенности);
		СтрокиРезультата.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонШага,
				Отступ,
				ТекущийШаг.ИдентификаторШага,
				Формат(ТекущийШаг.ВремяОкончания - ТекущийШаг.ВремяНачала, "ЧРГ=_; ЧН=0; ЧГ=3,0"), // Длительность.
				"[" + ТекущийШаг.КодРезультата + "]: " + ТекущийШаг.ОписаниеРезультата));

		Если ТипЗнч(ТекущийШаг.ВложенныйКонтекстВыполнения) = ТипСтруктура Тогда
			ВложенныйЛогШаговВыполнения = ПолныйЛогШаговВыполнения(
				ТекущийШаг.ВложенныйКонтекстВыполнения,
				УровеньВложенности + 1);
			Для Каждого ТекущаяСтрока Из ВложенныйЛогШаговВыполнения Цикл
				СтрокиРезультата.Добавить(ТекущаяСтрока);
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;

	Возврат СтрокиРезультата;

КонецФункции

// Возвращает структуру шага выполнения для дальнейшей записи в журнал регистрации или вывод на экран.
//
// Параметры:
//  ИдентификаторШага - Строка - идентификатор шага.
//
// Возвращаемое значение:
//   Структура - Структура с определенными ключами, см. код.
//
Функция НовыйОписательШагаВыполнения(ИдентификаторШага = "") Экспорт

	Результат = Новый Структура;
		Результат.Вставить("ИдентификаторШага"          , ИдентификаторШага);
		Результат.Вставить("ВремяНачала"                , ТекущаяУниверсальнаяДатаВМиллисекундах());
		Результат.Вставить("ВремяОкончания"             , 0);
		Результат.Вставить("КодРезультата"              , 0);
		Результат.Вставить("ОписаниеРезультата"         , "");
		Результат.Вставить("ВложенныйКонтекстВыполнения", Неопределено);

	Возврат Результат;

КонецФункции

// Возвращает структуру контекста выполнения для дальнейшей записи в журнал регистрации или вывод на экран.
// Это базовый функционал.
//
// Параметры:
//  НаименованиеМетода           - Строка - имя метода;
//  ЗаписыватьВЖурналРегистрации - Булево - если Истина, то в конце метода будет запись в журнал регистрации;
//  ИдентификаторРодителя        - Строка - идентификатор контекста выполнения родителя (Общее.ИдентификаторРодителя).
//  Идентификатор                - Строка - идентификатор контекста выполнения (Общее.Идентификатор).
//
// Возвращаемое значение:
//   Структура - см. в коде.
//
Функция НовыйКонтекстВыполнения(
			НаименованиеМетода,
			ЗаписыватьВЖурналРегистрации = Ложь,
			ИдентификаторРодителя = "",
			Идентификатор = "") Экспорт

	Результат = Новый Структура;
		Результат.Вставить("Общее", Новый Структура);
			Результат.Общее.Вставить("НаименованиеМетода"   , НаименованиеМетода);
			Результат.Общее.Вставить("ИдентификаторРодителя", ИдентификаторРодителя);
			Результат.Общее.Вставить("Идентификатор"        ,
				?(ПустаяСтрока(Идентификатор), СокрЛП(Новый УникальныйИдентификатор), Идентификатор));
		Результат.Вставить("ЖурналРегистрации", Новый Структура);
			Результат.ЖурналРегистрации.Вставить("ИмяСобытия"        , "БИП:Новости.Сервис и регламент"); // Идентификатор.
			Результат.ЖурналРегистрации.Вставить("Записывать"        , ЗаписыватьВЖурналРегистрации);
			Результат.ЖурналРегистрации.Вставить("Уровень"           , "Информация"); // Примечание, Информация, Предупреждение, Ошибка.
			Результат.ЖурналРегистрации.Вставить("ЛогШаговВыполнения", Новый Массив);
		Результат.Вставить("Вспомогательное", Новый Структура);
			Результат.Вспомогательное.Вставить("ТекущийШагВыполнения", Неопределено); // Заполняется автоматически.
		Результат.Вставить("ВходящиеПараметры", Новый Структура); // Для передачи во вложенные методы

	Возврат Результат;

КонецФункции

// Регистрирует начало шага выполнения в контексте выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  ИдентификаторШага  - Строка - Произвольный идентификатор.
//
Процедура НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага) Экспорт

	ТипСтруктура = Тип("Структура");

	// Если был предыдущий шаг - завершить его с пустыми результатами.
	// Если предыдущий шаг был "сложный" - с полями КодРезультата, ОписаниеРезультатаСтрокой, ВложенныйКонтекстВыполнения,
	//  то надо было его завершить с помощью метода ЗавершитьШагВыполнения.
	Если ТипЗнч(КонтекстВыполнения.Вспомогательное.ТекущийШагВыполнения) = ТипСтруктура Тогда
		ЗавершитьШагВыполнения(КонтекстВыполнения, "", "", Неопределено);
	КонецЕсли;

	// В начале регистрации записывается информация:
	//  ИдентификаторШага, ВремяНачала.
	// В конце регистрации записывается информация:
	//  ВремяОкончания, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения.

	// Если в контексте выполнения уже существовало свойство "ТекущийШагВыполнения", то он будет перезаписан.

	ТекущийШагВыполнения = НовыйОписательШагаВыполнения(ИдентификаторШага);

	КонтекстВыполнения.Вспомогательное.Вставить("ТекущийШагВыполнения", ТекущийШагВыполнения);

КонецПроцедуры

// Регистрирует начало шага выполнения в контексте выполнения и возвращает подготовленный контекст для вложенного вызова другого метода.
//
// Параметры:
//  КонтекстВыполнения          - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  ИдентификаторШага           - Строка - Произвольный идентификатор.
//  НаименованиеМетодаВложенный - Строка - Произвольный идентификатор.
//
// Возвращаемое значение:
//   Структура - см. НовыйКонтекстВыполнения.
//
Функция НачатьШагВыполненияВложенный(КонтекстВыполнения, ИдентификаторШага, НаименованиеМетодаВложенный) Экспорт

	НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага);

	// Если мы начинаем выполнять вложенный метод, то обычно запись
	//  в журнал регистрации будет в одном месте - в вызывающем методе.
	Возврат НовыйКонтекстВыполнения(НаименованиеМетодаВложенный, Ложь, КонтекстВыполнения.Общее.Идентификатор);

КонецФункции

// Регистрирует завершение шага выполнения и возвращает последний шаг.
//
// Параметры:
//  КонтекстВыполнения          - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  КодРезультата               - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата          - Строка, Массив - произвольное описание результата шага.
//                                  Массив будет преобразован в строку с разделителями;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.НовыйОписательШагаВыполнения.
//
Функция ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения = Неопределено) Экспорт

	// В начале регистрации записывается информация:
	//  ИдентификаторШага, Шаг, ВремяНачала.
	// В конце регистрации записывается информация:
	//  ВремяОкончания, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения.

	ТипЧисло     = Тип("Число");
	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	ТекущийШагВыполнения = НовыйОписательШагаВыполнения();
	Если ТипЗнч(КонтекстВыполнения.Вспомогательное.ТекущийШагВыполнения) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(
			ТекущийШагВыполнения,
			КонтекстВыполнения.Вспомогательное.ТекущийШагВыполнения,
			"ИдентификаторШага, ВремяНачала");
	КонецЕсли;

	// Если не было зарегистрировано начало шага выполнения, то впоследствии могут быть ошибки при записи лога в журнал регистрации.
	Если ТипЗнч(ТекущийШагВыполнения.ВремяНачала) <> ТипЧисло Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не зарегистрировано начало шага выполнения %1.'"),
				ТекущийШагВыполнения.ИдентификаторШага);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Если ТипЗнч(ОписаниеРезультата) = ТипМассив Тогда
		ОписаниеРезультатаСтрокой = СтрСоединить(ОписаниеРезультата, Символы.ПС);
	Иначе
		ОписаниеРезультатаСтрокой = ОписаниеРезультата;
	КонецЕсли;

	ТекущийШагВыполнения.Вставить("ВремяОкончания"             , ТекущаяУниверсальнаяДатаВМиллисекундах());
	ТекущийШагВыполнения.Вставить("КодРезультата"              , КодРезультата);
	ТекущийШагВыполнения.Вставить("ОписаниеРезультата"         , ОписаниеРезультатаСтрокой);
	ТекущийШагВыполнения.Вставить("ВложенныйКонтекстВыполнения", ВложенныйКонтекстВыполнения);

	КонтекстВыполнения.ЖурналРегистрации.ЛогШаговВыполнения.Добавить(ТекущийШагВыполнения);

	КонтекстВыполнения.Вспомогательное.Вставить("ТекущийШагВыполнения", Неопределено); // "Обнулить" текущий шаг, т.к. он уже добавлен в "ЛогШаговВыполнения".

	Возврат ТекущийШагВыполнения;

КонецФункции

// Регистрирует и начало и завершение шага выполнения и возвращает этот шаг.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  ИдентификаторШага  - Строка - Произвольный идентификатор.
//  КодРезультата      - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата - Строка, Массив - произвольное описание результата шага. Массив будет преобразован в строку с разделителями;
//  ВремяНачала        - Число - Время начала выполнения (ТекущаяУниверсальнаяДатаВМиллисекундах).
//                          Если не указано, то общее время выполнения шага = 0.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.НовыйОписательШагаВыполнения.
//
Функция ДобавитьШагВыполнения(КонтекстВыполнения, ИдентификаторШага, КодРезультата, ОписаниеРезультата, ВремяНачала = 0) Экспорт

	НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага);

	Если ВремяНачала > 0 Тогда
		КонтекстВыполнения.Вспомогательное.ТекущийШагВыполнения.ВремяНачала = ВремяНачала;
	КонецЕсли;

	Возврат ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, Неопределено);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПанельКонтекстныхНовостей

// В этой процедуре формируется форматированная строка для показа списка новостей в панели контекстных новостей.
// Массив структур новостей для отображения хранится в Форма.Новости.НовостиДляПанелиКонтекстныхНовостей.
// СпособОтображенияПанелиКонтекстныхНовостей хранится в Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма объекта с панелью важных новостей.
//
Процедура ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма) Экспорт

	СтандартнаяОбработка = Истина;
	ОбработкаНовостейКлиентСерверПереопределяемый.ПанельКонтекстныхНовостей_ОтобразитьНовости(Форма, СтандартнаяОбработка);

	Если СтандартнаяОбработка <> Ложь Тогда
		ТекущаяДатаДляРасчетов = ТекущаяДата(); // АПК:143 Эта дата не влияет на сохраняемые данные.
		СпособОтображенияПанелиКонтекстныхНовостей       = Форма.Новости.СпособОтображенияПанелиКонтекстныхНовостей;
		КоличествоНовостейДляПанелиКонтекстныхНовостей   = Форма.Новости.КоличествоНовостейДляПанелиКонтекстныхНовостей;
		ИндексТекущейНовостиДляПанелиКонтекстныхНовостей = Форма.Новости.ИндексТекущейНовостиДляПанелиКонтекстныхНовостей;
		ШрифтПанелиКонтекстныхНовостей = Форма.Новости.ШрифтПанелиКонтекстныхНовостей;
		// Отображение основных элементов управления.
		Если (СпособОтображенияПанелиКонтекстныхНовостей = "Скрыть") Тогда
			// Если выбран вариант "Скрыть", то скрыть и саму панель и кнопку управления видимостью панели.
			// Также для этого варианта не надо заполнять таблицу новостей.
			Форма.Элементы.ПанельКонтекстныхНовостей.Видимость = Ложь;
			Если Форма.Новости.ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей = Истина Тогда
				Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Видимость = Ложь;
			КонецЕсли;
		ИначеЕсли (СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей") Тогда
			Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаСтрелкаВлево.Видимость = Ложь;
			Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаНовостиИнформация.Видимость = Истина;
			Форма.Элементы.ПанельКонтекстныхНовостей_СписокНовостей.Видимость = Истина;
			Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаСтрелкаВправо.Видимость = Ложь;
			Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаВесьСписок.Видимость = Истина;
			Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаЗакрыть.Видимость = Истина;
		ИначеЕсли (СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
				ИЛИ (СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание") Тогда
			Если КоличествоНовостейДляПанелиКонтекстныхНовостей > 1 Тогда
				Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаСтрелкаВлево.Видимость = Истина;
				Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаСтрелкаВправо.Видимость = Истина;
			Иначе // Для одной новости не выводить кнопки листания.
				Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаСтрелкаВлево.Видимость = Ложь;
				Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаСтрелкаВправо.Видимость = Ложь;
			КонецЕсли;
			Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаНовостиИнформация.Видимость = Ложь;
			Форма.Элементы.ПанельКонтекстныхНовостей_СписокНовостей.Видимость = Истина;
			Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаВесьСписок.Видимость = Истина;
			Форма.Элементы.ПанельКонтекстныхНовостей_КартинкаЗакрыть.Видимость = Истина;
		КонецЕсли;
		// Отображение новостей.
		Если (СпособОтображенияПанелиКонтекстныхНовостей <> "Скрыть") Тогда
			Если КоличествоНовостейДляПанелиКонтекстныхНовостей > 0 Тогда
				// Вне зависимости от того, скрыл пользователь панель контекстных новостей или нет, заполнять ее.
				// Потому что пользователь в любой момент может включить ее отображение обратно.
				Если (СпособОтображенияПанелиКонтекстныхНовостей = "СписокНовостей") Тогда
					// Вывести первые три новости.
					// Выводятся только заголовки с гиперссылкой на новость (для дальнейшей обработки
					//  в ОбработкаНовостейКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки),
					//  разделенные ";". Непрочтенные - жирным шрифтом.
					МассивСтрок = Новый Массив;
					ВыведеноНовостей = 0;
					Для Каждого ТекущаяНовость Из Форма.Новости.НовостиДляПанелиКонтекстныхНовостей Цикл
						ЗаголовокНовостиСГиперссылкой = Новый ФорматированнаяСтрока(
							ТекущаяНовость.НовостьНаименование,
							Новый Шрифт(
								ШрифтПанелиКонтекстныхНовостей,
								,
								,
								?(ТекущаяНовость.Прочтена = Истина, Ложь, Истина)), // Жирность.
							, // Цвет текста
							, // Цвет фона
							"news1C:Open?" + ТекущаяНовость.НомерСтрокиНовости); // Ссылка. Идентификатор.
						МассивСтрок.Добавить(ЗаголовокНовостиСГиперссылкой);
						МассивСтрок.Добавить("; ");
						ВыведеноНовостей = ВыведеноНовостей + 1;
						Если ВыведеноНовостей >= 3 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Форма.Элементы.ПанельКонтекстныхНовостей_СписокНовостей.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
				ИначеЕсли (СпособОтображенияПанелиКонтекстныхНовостей = "Листание")
						ИЛИ (СпособОтображенияПанелиКонтекстныхНовостей = "Автолистание") Тогда
					// Вывести первую новость.
					МассивСтрок = Новый Массив;
					ТекущаяНовость = Форма.Новости.НовостиДляПанелиКонтекстныхНовостей[ИндексТекущейНовостиДляПанелиКонтекстныхНовостей];
					ЗаголовокНовостиСГиперссылкой = Новый ФорматированнаяСтрока(
						ТекущаяНовость.НовостьНаименование,
						Новый Шрифт(
							ШрифтПанелиКонтекстныхНовостей,
							,
							,
							?(ТекущаяНовость.Прочтена = Истина, Ложь, Истина)), // Жирность.
						, // Цвет текста
						, // Цвет фона
						"news1C:Open?" + ТекущаяНовость.НомерСтрокиНовости); // Ссылка. Идентификатор.
					МассивСтрок.Добавить(ЗаголовокНовостиСГиперссылкой);
					МассивСтрок.Добавить(Символы.ПС);
					МассивСтрок.Добавить(ТекущаяНовость.НовостьПодзаголовок); // Простым шрифтом.
					Форма.Элементы.ПанельКонтекстныхНовостей_СписокНовостей.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
					// Обработчик перелистывания может подключаться только на клиенте. Подключение обработчика реализовано в ПриОткрытии формы.
				КонецЕсли;

				// Со времени скрытия появились новые новости? Если ДА, принудительно включить панель.
				// Прошло больше месяца после отключения панели? Если ДА, принудительно включить панель.
				Если Форма.Новости.ВидимостьПанелиКонтекстныхНовостей = Ложь Тогда
					ДатаПоследнейНовостиПанелиКонтекстныхНовостей = '00010101';
					Для Каждого ТекущаяНовость Из Форма.Новости.НовостиДляПанелиКонтекстныхНовостей Цикл
						Если ДатаПоследнейНовостиПанелиКонтекстныхНовостей < ТекущаяНовость.ДатаПубликации Тогда
							ДатаПоследнейНовостиПанелиКонтекстныхНовостей = ТекущаяНовость.ДатаПубликации;
						КонецЕсли;
					КонецЦикла;
					Если (ДатаПоследнейНовостиПанелиКонтекстныхНовостей > Форма.Новости.ДатаПоследнейНовостиПанелиКонтекстныхНовостей)
							ИЛИ (ТекущаяДатаДляРасчетов > ДобавитьМесяц(Форма.Новости.ДатаОтключенияПанелиКонтекстныхНовостей, 1)) Тогда
						Форма.Новости.Вставить("ВидимостьПанелиКонтекстныхНовостей", Истина);
					КонецЕсли;
				КонецЕсли;

				Если (Форма.Новости.ВидимостьПанелиКонтекстныхНовостей = Ложь) Тогда
					Форма.Элементы.ПанельКонтекстныхНовостей.Видимость = Ложь;
					Если Форма.Новости.ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей = Истина Тогда
						Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Видимость = Истина;
						Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Пометка   = Ложь;
					КонецЕсли;
				Иначе
					Форма.Элементы.ПанельКонтекстныхНовостей.Видимость = Истина;
					Если Форма.Новости.ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей = Истина Тогда
						Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Видимость = Истина;
						Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Пометка   = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Если новостей нет, то не показывать панель контекстных новостей.
				// Но т.к. кнопка показа панели новостей осталась. то вывести текст, что новостей нет.
				МассивСтрок = Новый Массив;
				МассивСтрок.Добавить(НСтр("ru='Нет новостей'"));
				Форма.Элементы.ПанельКонтекстныхНовостей_СписокНовостей.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
				Форма.Элементы.ПанельКонтекстныхНовостей.Видимость = Ложь;
				Если Форма.Новости.ЕстьКнопкаУправленияВидимостьюПанелиКонтекстныхНовостей = Истина Тогда
					Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Видимость = Истина;
					Форма.Элементы.ФормаВидимостьПанелиКонтекстныхНовостей.Пометка   = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Шаблонизатор

// Обрабатывает единственную строку шаблона данными из ИсточникДанных.
//
// Параметры:
//  СтрокаШаблона  - Строка;
//  ИсточникДанных - Структура - источник данных для шаблонов вида {{ИмяПоля}}.
//
// Возвращаемое значение:
//   Строка.
//
Функция ЗаполнитьСтрокуШаблона(СтрокаШаблона, ИсточникДанных)

	С = 0;
	Результат = СтрокаШаблона;

	ОткрывающаяСкобка = "{{";
	ЗакрывающаяСкобка = "}}";

	ИмяПоля = НайтиПолеПодстановки(Результат);

	Пока НЕ ПустаяСтрока(ИмяПоля) Цикл
		// В ИмяПоля может быть:
		//  - шаблон выбора из списка значений ?Значение|Значение1^Результат1|Значение2^Результат2|РезультатИначе
		//  - шаблон тернарной операции: Условие?ЕслиИстина|ЕслиЛожь, например СостояниеПИНКода -eq "Активен"?"style:color=red;"|"";
		//  - текст с форматированием: Значение|Формат, например ДатаАктивации|ДЛФ=DT;
		//  - просто имя поля.
		ЭтоВыбор = СтрНачинаетсяС(ИмяПоля, "?");
		ГдеВопрос = СтрНайти(ИмяПоля, "?");
		ГдеРазделитель = СтрНайти(ИмяПоля, "|");
		// Получение данных.
		Если (ЭтоВыбор = Истина) И (ГдеРазделитель > 0) Тогда // Шаблон выбора из списка значений
			Значение = ПолучитьРезультатВыбораИзСписка(ИмяПоля, ИсточникДанных);
		ИначеЕсли (ГдеВопрос > 0) И (ГдеРазделитель > 0) И (ГдеВопрос < ГдеРазделитель) Тогда // Шаблон тернарной операции
			Значение = ПолучитьРезультатТернарнойОперации(ИмяПоля, ИсточникДанных);
		ИначеЕсли (ГдеРазделитель > 0) Тогда
			ФорматПоля = Прав(ИмяПоля, СтрДлина(ИмяПоля) - ГдеРазделитель);
			ТолькоИмяПоля = Лев(ИмяПоля, ГдеРазделитель - 1);
			ЗначениеБезФормата = ПолучитьЗначение(ТолькоИмяПоля, ИсточникДанных);
			Значение = Формат(ЗначениеБезФормата, ФорматПоля);
		Иначе
			Значение = ПолучитьЗначение(ИмяПоля, ИсточникДанных);
		КонецЕсли;
		Результат = СтрЗаменить(Результат, ОткрывающаяСкобка + ИмяПоля + ЗакрывающаяСкобка, Значение);
		// Поиск следующего поля
		ИмяПоля = НайтиПолеПодстановки(Результат);
		// Запретить более 100 итераций.
		С = С + 1;
		Если С >= 100 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ошибка заполнения шаблона [%1] значениями - зацикленность.'"),
				СтрокаШаблона);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Возвращает первый "ИмяПоля" из строки вида "бла-бла-бла {ИмяПоля} бла-бла-бла".
// В процессе обработки в строке {{ИмяПоля}} будет заменено на конкретное значение,
//  а значит следующий поиск выдаст значение следующего {{ИмяПоля}}.
//
// Параметры:
//  СтрокаШаблона - Строка - строка поиска, где будет искаться {{ИмяПоля}}.
//
// Возвращаемое значение:
//   Строка - имя следующего поля.
//
Функция НайтиПолеПодстановки(СтрокаШаблона)

	Результат = "";

	ОткрывающаяСкобка = "{{";
	ЗакрывающаяСкобка = "}}";
	ДлинаОткрывающейСкобки = СтрДлина(ОткрывающаяСкобка);
	ДлинаЗакрывающейСкобки = СтрДлина(ЗакрывающаяСкобка);

	ГдеНачалоПоля = СтрНайти(СтрокаШаблона, ОткрывающаяСкобка, НаправлениеПоиска.СНачала, 1);
	Если ГдеНачалоПоля > 0 Тогда
		ГдеКонецПоля = СтрНайти(СтрокаШаблона, ЗакрывающаяСкобка, НаправлениеПоиска.СНачала, ГдеНачалоПоля);
		Результат = Сред(СтрокаШаблона, ГдеНачалоПоля + ДлинаОткрывающейСкобки, ГдеКонецПоля - ГдеНачалоПоля - ДлинаЗакрывающейСкобки);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает значение поля.
// Поле может быть составным, через точку ".": ИмяПоля.ИмяРеквизита1.ИмяРеквизита2.
//
// Параметры:
//  ИмяПоля        - Строка - строка с именем поля, может содержать значения через точку;
//  ИсточникДанных - Структура - источник данных для шаблонов вида {{ИмяПоля}}.
//
// Возвращаемое значение:
//   Произвольное.
//
Функция ПолучитьЗначение(ИмяПоля, ИсточникДанных)

	Результат = Неопределено;

	Лексемы = СтрРазделить(ИмяПоля, ".");
	Результат = ИсточникДанных[Лексемы[0]];
	Если Лексемы.Количество() = 1 Тогда
		// Готово.
	Иначе // Вложенный вызов
		Лексемы.Удалить(0);
		НовоеИмяПоля = СтрСоединить(Лексемы, ".");
		Результат = ПолучитьЗначение(НовоеИмяПоля, Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает результат тернарной операции.
// Формат:
//  ИмяПоля Условие ПравоеЗначение ? ЕслиИстина | ЕслиЛожь
//    Условие: -eq -ne -gt -ge -lt -le
//    ПравоеЗначение - строка, число
//
// Параметры:
//  Выражение      - Строка - строка с выражением тернарной операции;
//  ИсточникДанных - Структура - источник данных для шаблонов вида {{ИмяПоля}}.
//
// Возвращаемое значение:
//   Произвольное.
//
Функция ПолучитьРезультатТернарнойОперации(Выражение, ИсточникДанных)

	Результат = "";

	ГдеВопрос = СтрНайти(Выражение, "?");
	ГдеРазделитель = СтрНайти(Выражение, "|");
	ВыражениеУсловия = Лев(Выражение, ГдеВопрос - 1);
	ЧастиУсловия = СтрРазделить(ВыражениеУсловия, " ");
	ЕслиИстина = Сред(Выражение, ГдеВопрос + 1, ГдеРазделитель - ГдеВопрос - 1);
	ЕслиЛожь   = Прав(Выражение, СтрДлина(Выражение) - ГдеРазделитель);
	Если ЧастиУсловия.Количество() = 3 Тогда
		ЛевоеЗначение  = ПолучитьЗначение(ЧастиУсловия[0], ИсточникДанных);
		Условие        = НРег(ЧастиУсловия[1]);
		ПравоеЗначение = ЧастиУсловия[2];
		Если (Условие = "-eq")
				ИЛИ (Условие = "-ne")
				ИЛИ (Условие = "-gt")
				ИЛИ (Условие = "-ge")
				ИЛИ (Условие = "-lt")
				ИЛИ (Условие = "-le") Тогда
			РезультатУсловия = ПроверитьУсловие(ЛевоеЗначение, Условие, ПравоеЗначение);
			Если РезультатУсловия = Истина Тогда
				Результат = ЕслиИстина;
			Иначе
				Результат = ЕслиЛожь;
			КонецЕсли;
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось обработать тернарную операцию [%1]:
					|Условие [%2] не обрабатывается.
					|Допустимы: -eq -ne -gt -ge -lt -le'"),
				Выражение,
				Условие);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось обработать тернарную операцию [%1]:
				|Условия.Количество() = %2'"),
			Выражение,
			ЧастиУсловия.Количество());
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Сравнивает значения по условию.
//
// Параметры:
//  ЛевоеЗначение  - Произвольный - произвольное значение.
//  Условие        - Строка - одно из значений.
//  ПравоеЗначение - Строка - значение. В зависимости от типа ЛевоеЗначение может быть конвертировано в тот же тип.
//
// Возвращаемое значение:
//   Булево - ИСТИНА, если условие верно
//
Функция ПроверитьУсловие(ЛевоеЗначение, Условие, ПравоеЗначение)

	ТипДата   = Тип("Дата");
	ТипЧисло  = Тип("Число");
	ТипБулево = Тип("Булево");

	ПравоеЗначениеПравильногоТипа = ПравоеЗначение;

	Если ТипЗнч(ЛевоеЗначение) = ТипДата Тогда
		// ПравоеЗначение должно быть в формате XML даты
#Если ВебКлиент Тогда
		ПравоеЗначениеПравильногоТипа = ОбработкаНовостейВызовСервера.XMLЗначениеДата(ПравоеЗначение);
#Иначе
		ПравоеЗначениеПравильногоТипа = XMLЗначение(ТипДата, ПравоеЗначение);
#КонецЕсли
	ИначеЕсли ТипЗнч(ЛевоеЗначение) = ТипЧисло Тогда
#Если ВебКлиент Тогда
		ПравоеЗначениеПравильногоТипа = ОбработкаНовостейВызовСервера.XMLЗначениеЧисло(ПравоеЗначение);
#Иначе
		ПравоеЗначениеПравильногоТипа = XMLЗначение(ТипЧисло, ПравоеЗначение);
#КонецЕсли
	ИначеЕсли ТипЗнч(ЛевоеЗначение) = ТипБулево Тогда
		Если (НРег(ПравоеЗначение) = НРег("Истина")) ИЛИ (НРег(ПравоеЗначение) = НРег("True")) Тогда
			ПравоеЗначениеПравильногоТипа = Истина;
		Иначе
			ПравоеЗначениеПравильногоТипа = Ложь;
		КонецЕсли;
	КонецЕсли;

	Результат = Ложь;

	Если (Условие = "-eq") И (ЛевоеЗначение = ПравоеЗначениеПравильногоТипа) Тогда
		Результат = Истина;
	ИначеЕсли (Условие = "-ne") И (ЛевоеЗначение <> ПравоеЗначениеПравильногоТипа) Тогда
		Результат = Истина;
	ИначеЕсли (Условие = "-gt") И (ЛевоеЗначение > ПравоеЗначениеПравильногоТипа) Тогда
		Результат = Истина;
	ИначеЕсли (Условие = "-ge") И (ЛевоеЗначение >= ПравоеЗначениеПравильногоТипа) Тогда
		Результат = Истина;
	ИначеЕсли (Условие = "-lt") И (ЛевоеЗначение < ПравоеЗначениеПравильногоТипа) Тогда
		Результат = Истина;
	ИначеЕсли (Условие = "-le") И (ЛевоеЗначение <= ПравоеЗначениеПравильногоТипа) Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает результат выбора из списка.
// Формат:
//  ?ИмяПоля|Значение1^Результат1|Значение2^Результат2|ЗначениеN^РезультатN|РезультатИначе
// РезультатИначе всегда должен идти последним, там не будет проверяться наличие ^.
//
// Параметры:
//  Выражение      - Строка - строка с выражением выбора из списка;
//  ИсточникДанных - Структура - источник данных для шаблонов вида {{ИмяПоля}}.
//
// Возвращаемое значение:
//   Произвольное.
//
Функция ПолучитьРезультатВыбораИзСписка(Выражение, ИсточникДанных)

	Результат = "";

	Выражения = СтрРазделить(Выражение, "|");
	ИмяПоля = Прав(Выражения[0], СтрДлина(Выражения[0]) - 1); // Точно знаем формат выражения, оно начинается с "?".
	ЛевоеЗначение   = ПолучитьЗначение(ИмяПоля, ИсточникДанных);
	Условие         = "-eq"; // Выбор из списка всегда проверяет на "равно".
	ЗначениеНайдено = Ложь;
	Выражения.Удалить(0); // Имя поля удалим - оно больше не нужно, оставим только список значений выбора.

	Для С=0 По Выражения.Количество()-2 Цикл
		ЧастиВыражения = СтрРазделить(Выражения[С], "^", Истина);
		Если ЧастиВыражения.Количество() <> 2 Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Не удалось обработать выбор из списка [%1]:
					|В части проверки [%2] не найден разделитель условия и значения, символ [^].'"),
				Выражение,
				Выражения[С]);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ПравоеЗначение = ЧастиВыражения[0];
		РезультатУсловия = ПроверитьУсловие(ЛевоеЗначение, Условие, ПравоеЗначение);
		Если РезультатУсловия = Истина Тогда
			ЗначениеНайдено = Истина;
			Результат = ЧастиВыражения[1];
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Если значение так и не найдено, вернуть последний элемент списка. Считаем, что там "РезультатИначе".
	Если ЗначениеНайдено = Ложь Тогда
		Результат = Выражения[Выражения.Количество()-1];
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти
