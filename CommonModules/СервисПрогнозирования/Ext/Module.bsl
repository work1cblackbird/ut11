
#Область ПрограммныйИнтерфейс

#Область РаботаСВнешнимиРесурсами
///////////////////////////////////////////////////////////////////////////////
// Инициализации параметров сеанса.

///////////////////////////////////////////////////////////////////////////////
// Работа с запросами API.

// Выполняет итоговый запрос согласно структуре входящих параметров.
// 
// Параметры:
//  Метод - Строка - Метод HTTP-запроса.
//  URLЗапроса - Строка - Строка соединения с сервером.
//  Заголовки - Неопределено, Соответствие - Заголовки.
//  ТелоЗапроса - Строка - Тело запроса в формате JSON.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ВыполнитьHTTPЗапрос(Метод,
	URLЗапроса,
	Заголовки = Неопределено,
	ТелоЗапроса = "") Экспорт
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	
	СтруктураURI = СтруктураURI(URLЗапроса);
	
	ИнформацияОРесурсе = Новый Структура("Метод, РесурсСервиса, Заголовки",
		Метод,
		URLЗапроса,
		"");
	
	Если ЗначениеЗаполнено(Заголовки) Тогда
		Для Каждого КлючЗначение Из Заголовки Цикл
			ИнформацияОРесурсе.Заголовки = ИнформацияОРесурсе.Заголовки + КлючЗначение.Ключ + ":" 
				+ КлючЗначение.Значение + ";";
		КонецЦикла;
	КонецЕсли;
	
	Таймаут = Неопределено;
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	НастройкиСервиса.Свойство("ТаймаутСетевогоСоединения", Таймаут);
	Таймаут = ?(Таймаут = Неопределено, 120, Таймаут);
	Таймаут = ?(Таймаут < 10, 10, Таймаут);
	Таймаут = ?(Таймаут > 600, 600, Таймаут);
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт, , , Прокси, Таймаут);
	
	HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
	
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("Charset", "utf-8");
	
	Если ЗначениеЗаполнено(Заголовки) Тогда
		Для Каждого КлючЗначение Из Заголовки Цикл
			HTTPЗапрос.Заголовки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если Метод <> "GET" Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Результат = Неопределено;
	СтруктураРезультата = СтруктураОтвета();
	
	Попытка
		Результат = HTTPСоединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
			Результат.КодСостояния,
			ТелоЗапроса,
			Ложь,
			Истина);
	Исключение
		// Запрос не дошел до HTTP-Сервера.
		// Failure when receiving data from the peer.
		ТекстСообщения = СтрШаблон(НСтр("ru='По запросу URL: %1 произошла сетевая ошибка. %2'"),
			URLЗапроса,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
			-1,
			ТелоЗапроса,
			Истина,
			Истина);
		РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
			-1,
			ТекстСообщения,
			Истина,
			Ложь);
		
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	КонецПопытки;
	
	Если Результат <> Неопределено Тогда
		ЕстьОшибка = Ложь;
		Если Результат.КодСостояния >= 400 И Результат.КодСостояния < 500  Тогда // Код статуса 4XX, ошибка запроса
			ЕстьОшибка = Истина;
			Если Метод = "GET" Тогда
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - ошибка запроса.
					|Метод: %3'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод);
			Иначе
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - ошибка запроса.
					|Метод: %3
					|Тело запроса: %4'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод, Лев(ТелоЗапроса, 200));
			КонецЕсли;
				
			РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
				Результат.КодСостояния,
				ТекстСообщения,
				Истина,
				Ложь);

			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецЕсли;
		
		Если Результат.КодСостояния >= 500 И Результат.КодСостояния < 600 Тогда // Код статуса 5XX, ошибка сервера
			ЕстьОшибка = Истина;
			
			Если Метод = "GET" Тогда
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - ошибка сервера.
					|Метод: %3'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод);
			Иначе
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - ошибка сервера.
					|Метод: %3
					|Тело запроса: %4'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод, Лев(ТелоЗапроса, 200));
			КонецЕсли;
			
			РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
				Результат.КодСостояния,
				ТекстСообщения,
				Истина,
				Ложь);
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		КонецЕсли;
		
		// Обрабатываем перенаправление.
		Если Результат.КодСостояния >= 300 И Результат.КодСостояния < 400 Тогда // Код статуса 3XX, Перенаправление.
			
			Если Метод = "GET" Тогда
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - перенаправление.
					|Метод: %3'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод);
			Иначе
				ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - перенаправление.
					|Метод: %3
					|Тело запроса: %4'");
				ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод, Лев(ТелоЗапроса, 200));
			КонецЕсли;
			
			Если Результат.КодСостояния = 302 Тогда // Код статуса 302, Постоянное перенаправление.
				АдресРесурса = Результат.Заголовки.Получить("Location");
				
				Если АдресРесурса <> Неопределено Тогда
					
					Если Метод = "GET" Тогда
						ШаблонТекста = НСтр("ru='По запросу URL: %1 производится попытка выполнения по новому адресу %2.
							|Метод: %3'");
						ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, АдресРесурса, Метод);
					Иначе
						ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - перенаправление.
							|Метод: %3
							|Тело запроса: %4'");
						ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, АдресРесурса, Метод, Лев(ТелоЗапроса, 200));
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение, , , ТекстСообщения);
					
					URLЗапроса = СтрЗаменить(URLЗапроса, СтруктураURI.Хост, АдресРесурса);
					Попытка
						ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапроса);
					Исключение
						
						Если Метод = "GET" Тогда
							ШаблонТекста = НСтр("ru='По запросу URL: %1 попытка выполнения(перенаправления) его по новому адресу %2 произошла с ошибкой.
								|Метод: %3'");
							ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, АдресРесурса, Метод);
						Иначе
							ШаблонТекста = НСтр("ru='По запросу URL: %1 попытка выполнения(перенаправления) его по новому адресу %2 произошла с ошибкой.
								|Метод: %3
								|Тело запроса: %4'");
							ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, АдресРесурса, Метод, Лев(ТелоЗапроса, 200));
						КонецЕсли;
						
						ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
					КонецПопытки;
				Иначе
					
					Если Метод = "GET" Тогда
					ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - постоянное перенаправление, но сервер не сообщил адрес ресурса.
							|Метод: %3'");
						ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод);
					Иначе
						ШаблонТекста = НСтр("ru='По запросу URL: %1 получен код состояния %2 - постоянное перенаправление, но сервер не сообщил адрес ресурса.
							|Метод: %3
							|Тело запроса: %4'");
						ТекстСообщения = СтрШаблон(ШаблонТекста, URLЗапроса, Результат.КодСостояния, Метод, Лев(ТелоЗапроса, 200));
					КонецЕсли;
					
					ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		СтруктураРезультата = СтруктураОтветаСервиса(Результат);
		
		РегистрыСведений.ЖурналСервисаПрогнозирования.ЗаписатьИнформациюОбОбмене(ИнформацияОРесурсе,
			Результат.КодСостояния,
			Результат.ПолучитьТелоКакСтроку(),
			ЕстьОшибка,
			Ложь);
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

#КонецОбласти

#Область Авторизация

// Получить тикет ИТС.
// 
// Возвращаемое значение:
//  Структура - Ответ функции получения тикета ИТС:
// * Тикет - Строка -
// * ТекстОшибки - Строка -
Функция ПолучитьТикет() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура("Тикет, ТекстОшибки", "", "");
	
	Тикет = "";
	ВладелецТикета = "https://forecast.1c.ai";
	УстановитьПривилегированныйРежим(Истина);
	МодульИнтернетПоддержкаПользователей = СервисПрогнозирования.МодульИнтернетПоддержкаПользователей();
	Если МодульИнтернетПоддержкаПользователей = Неопределено Тогда
		ТекстСообщенияОбОшибке = ТекстОшибкиНеУдалосьПолучитьМодульИнтернетПоддержкаПользователей();
		ВозвращаемоеЗначение.ТекстОшибки = ТекстСообщенияОбОшибке;
		ВозвращаемоеЗначение.Тикет = Тикет;
		Возврат ВозвращаемоеЗначение;
	Иначе
		РезультатПолученияТикета =
			МодульИнтернетПоддержкаПользователей.ТикетАутентификацииНаПорталеПоддержки(ВладелецТикета);
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	Если Не ПустаяСтрока(РезультатПолученияТикета.Тикет) Тогда
		// Вызвать целевой сервис, используя полученный тикет.
		Тикет = РезультатПолученияТикета.Тикет;
	ИначеЕсли РезультатПолученияТикета.КодОшибки = "НеверныйЛогинИлиПароль" Тогда
		// Отсутствуют сохраненные данные аутентификации или данные аутентификации некорректны.
		ТекстСообщенияОбОшибке = ТекстОшибкиНеверныйЛогинПарольИТС();
		ВозвращаемоеЗначение.ТекстОшибки = ТекстСообщенияОбОшибке;
	Иначе
		// При получении тикета возникла сетевая или иная ошибка.
		ТекстСообщенияОбОшибке = ТекстОшибкиНеУдалосьПолучитьТикет();
		ВозвращаемоеЗначение.ТекстОшибки = ТекстСообщенияОбОшибке;
	КонецЕсли;
	
	
	ВозвращаемоеЗначение.Тикет = Тикет;
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Отправить заявку на подключение к сервису.
// 
// Возвращаемое значение:
//  Булево -
Функция ОтправитьЗаявкуВСервис() Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	Если Не ЗначениеЗаполнено(НастройкиСервиса.ТокенПриложения) Тогда
		Ответ = ПолучитьТикет();
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			СтруктураОтвета = СтруктураОтвета();
			СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
			Возврат СтруктураОтвета;
		КонецЕсли;
		
		Ответ = ЗарегистрироватьПриложениеВСервисеПоИТС(Ответ.Тикет, Ложь);
		Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
			Возврат Ответ;
		КонецЕсли;
		
		НастройкиСервиса = ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("feedback");
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИдентификаторПриложения);
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("НазваниеКомпании"),
		НастройкиСервиса.НазваниеКомпании);
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ФИОКонтактногоЛица"),
		НастройкиСервиса.ФИОКонтактногоЛица);
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ЭлектроннаяПочта"),
		НастройкиСервиса.ЭлектроннаяПочта);
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("НомерТелефона"),
		НастройкиСервиса.НомерТелефона);
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("НомерТелефонаКомментарий"),
		НастройкиСервиса.НомерТелефонаКомментарий);
		
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("НовыйПользователь"),
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ЗаявкаНаПодключение",
			СтруктураОтвета.КодСостояния);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Возвращает ответ заявки на перерегистрацию с целью восстановления доступа на новой версии сервиса
// или ошибку получения тикета ИТС.
// 
// Возвращаемое значение:
//  Неопределено, Структура - Структура ответа получения тикета или перерегистрации в сервисе:
//   * Ответ - Произвольный - 
//   * КодСостояния - Число - 
//   * ДесериализованноеЗначение - Произвольный - 
//   * КоличествоДанныхНаСервере - Число - 
//   * ТекстОшибки - Строка - 
Функция ПеререгистрироватьПриложениеВСервисеПоИТС() Экспорт
	
	Ответ = ПолучитьТикет();
	Если ПустаяСтрока(Ответ.ТекстОшибки) Тогда
		Возврат ЗарегистрироватьПриложениеВСервисеПоИТС(Ответ.Тикет, Истина);
	Иначе
		Возврат Ответ;
	КонецЕсли;
	
КонецФункции

// Зарегистрировать пользователя сервиса.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ЗарегистрироватьПользователяСервиса() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("login");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Логин"),  НастройкиСервиса.Логин);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Пароль"), НастройкиСервиса.Пароль);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Неопределено, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПользователя");
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Зарегистрировать приложение в сервисе.
// 
// Параметры:
//  ПеререгистрацияПриложения - Булево - признак заявки перерегистрации на новой версии сервиса.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ЗарегистрироватьПриложениеВСервисе(ПеререгистрацияПриложения) Экспорт
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("login");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИмяБазы"), НастройкиСервиса.ИмяБазы);
	Если ПеререгистрацияПриложения Тогда
		ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ТокенПриложенияПредыдущейВерсии"),
			НастройкиСервиса.ТокенПриложения);
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Логин"),  НастройкиСервиса.Логин);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Пароль"), НастройкиСервиса.Пароль);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Тариф"),  НастройкиСервиса.Тариф);
	ТелоЗапроса.Вставить("scope", ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
		Если ПеререгистрацияПриложения И ПустаяСтрока(СтруктураОтвета.ТекстОшибки) Тогда
			ОчиститьИнформациюСервиса();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Зарегистрировать приложение в сервисе по ИТС.
// 
// Параметры:
//  Тикет - Строка -
//  ПеререгистрацияПриложения - Булево - признак заявки перерегистрации на новой версии сервиса.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ЗарегистрироватьПриложениеВСервисеПоИТС(Тикет, ПеререгистрацияПриложения) Экспорт
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("its");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИмяБазы"), НастройкиСервиса.ИмяБазы);
	Если ПеререгистрацияПриложения Тогда
		ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ТокенПриложенияПредыдущейВерсии"),
			НастройкиСервиса.ТокенПриложения);
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("ticket",
		Тикет);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Тариф"),
		НастройкиСервиса.Тариф);
	ТелоЗапроса.Вставить("scope",
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
		Если ПеререгистрацияПриложения И ПустаяСтрока(СтруктураОтвета.ТекстОшибки) Тогда
			ОчиститьИнформациюСервиса();
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Повторная регистрация приложения в сервисе.
// 
// Параметры:
//  ИдентификаторПриложения - Строка - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПовторнаяРегистрацияПриложенияВСервисе(ИдентификаторПриложения) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("login");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИмяБазы"),
		НастройкиСервиса.ИмяБазы);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Логин"),
		НастройкиСервиса.Логин);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Пароль"),
		НастройкиСервиса.Пароль);
	ТелоЗапроса.Вставить("application_uuid",
		ИдентификаторПриложения);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Тариф"),
		НастройкиСервиса.Тариф);
	ТелоЗапроса.Вставить("scope",
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Повторная регистрация приложения в сервисе по ИТС.
// 
// Параметры:
//  Тикет - Строка - 
//  ИдентификаторПриложения - Строка - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПовторнаяРегистрацияПриложенияВСервисеПоИТС(Тикет, ИдентификаторПриложения) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("its");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ВложенноеТелоЗапроса = Новый Структура();
	ВложенноеТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИмяБазы"),
		НастройкиСервиса.ИмяБазы);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("ticket",
		Тикет);
	ТелоЗапроса.Вставить("application_uuid",
		ИдентификаторПриложения);
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("Тариф"),
		НастройкиСервиса.Тариф);
	ТелоЗапроса.Вставить("scope",
		ВложенноеТелоЗапроса);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Обновить токен доступа приложения в сервисе.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ОбновитьТокенДоступаПриложенияВСервисе() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth_application");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ТокенОбновления"),
		НастройкиСервиса.ТокенОбновления);
	
	Заголовки = Новый Соответствие();
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "РегистрацияПриложения");
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Выдать права приложению в сервисе.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ВыдатьПраваПриложениюВСервисе() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("copy_grants");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить(ПолучитьПредставлениеСвойстваСервиса("ИдентификаторПриложения"),
		НастройкиСервиса.ТокенПриложения);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПользователя);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Выдать права приложению в сервисе.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьСтатусПодключенияКСервису() Экспорт
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("auth");
	ПараметрыАдреса.Добавить("info");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ТелоЗапроса = "";
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучениеСтатуса",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// См. ИнтернетПоддержкаПользователейПереопределяемый.ПриИзмененииДанныхАутентификацииИнтернетПоддержки()
//
Процедура ПриИзмененииДанныхАутентификации(ДанныеПользователя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиАвторизации = ПолучитьАвторизационныеНастройкиСервиса();
	УстановитьПривилегированныйРежим(Ложь);
	
	Настройки = Новый Структура(НастройкиАвторизации);
	
	// Регистрация по пользователю ИТС
	Если Настройки.ТипАвторизации = 1 Тогда
		
		// Не производилась регистрация в сервисе
		Если ПустаяСтрока(Настройки.ТокенПриложения) Тогда
			Возврат;
		КонецЕсли;
		
		Если ДанныеПользователя = Неопределено Тогда
			
			// При удалении данных аутентификации пользователя интернет-поддержки.
			Настройки.ИзмененыНастройкиИнтернетПоддержки = Истина;
			ОбновитьНастройкиСервиса(Настройки);
			УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
			
		Иначе
			
			// При возврате актуальных данных аутентификации пользователя интернет-поддержки.
			Если Настройки.ИзмененыНастройкиИнтернетПоддержки Тогда
				Если ДанныеПользователя.Логин = Настройки.ЛогинИТС Тогда
					Настройки.ИзмененыНастройкиИнтернетПоддержки = Ложь;
					ОбновитьНастройкиСервиса(Настройки);
					УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			// При изменении данных аутентификации пользователя интернет-поддержки.
			Если ДанныеПользователя.Логин <> Настройки.ЛогинИТС Тогда
				Настройки.ИзмененыНастройкиИнтернетПоддержки = Истина;
				ОбновитьНастройкиСервиса(Настройки);
				УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Коллекции

// Проверка у выгружаемых коллекций на изменение состава данных.
//
// Параметры:
//  НастройкиСервиса - Неопределено, Структура из Произвольный - см. СервисПрогнозирования.ПолучитьНастройкиСервиса
//
// Возвращаемое значение:
//  Строка -
Функция ПроверитьКонфигурацииКоллекций(НастройкиСервиса = Неопределено) Экспорт
	
	Если НастройкиСервиса = Неопределено Тогда
		НастройкиСервиса = ПолучитьНастройкиСервиса();
	КонецЕсли;
	
	КоллекцииСНеактуальнымиКонфигурациями = Новый Массив();
	
	Для Каждого КлючЗначение Из НастройкиСервиса.Коллекции Цикл
		
		ОписаниеКоллекции = КлючЗначение.Значение;
		Если Не ОписаниеКоллекции.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ИнфоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(КлючЗначение.Ключ);
		Если Не ЗначениеЗаполнено(ИнфоКоллекции.ИдКоллекции)
			Или Число(ИнфоКоллекции.ИдКоллекции) < 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнфоКоллекции.ИзмененФормат Тогда
			КоллекцииСНеактуальнымиКонфигурациями.Добавить(ОписаниеКоллекции.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоллекцииСНеактуальнымиКонфигурациями.Количество() > 0 Тогда
		
		СтрокаПеречисленияКоллекций = СтрСоединить(КоллекцииСНеактуальнымиКонфигурациями, ", ");
		Если ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж)
			Или Пользователи.ЭтоПолноправныйПользователь() Тогда
			ТекстОшибки = НСтр("ru = 'У коллекций ""%1"" изменился состав передаваемых данных.
				|Для построения прогноза, необходимо повторно произвести выгрузку коллекций через Помощник подключения к сервису -
				|7. Параметры первого прогноза - Догрузить данные.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтрокаПеречисленияКоллекций);
		Иначе
			ТекстОшибки = НСтр("ru = 'У коллекций ""%1"" изменился состав передаваемых данных.
				|Для построения прогноза, необходимо повторно произвести выгрузку коллекций в сервис.
				|Обратитесь к администратору.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, СтрокаПеречисленияКоллекций);
		КонецЕсли;
		
	Иначе
		ТекстОшибки = "";
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Создать коллекции.
// 
// Параметры:
//  КоллекцииДляСоздания - Неопределено, Массив из Строка - Коллекции для создания
Процедура СоздатьКоллекции(КоллекцииДляСоздания = Неопределено) Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Для Каждого КлючЗначениеКоллекции Из НастройкиСервиса.Коллекции Цикл
		Если КоллекцииДляСоздания <> Неопределено
			И КоллекцииДляСоздания.Найти(КлючЗначениеКоллекции.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеКоллекции = КлючЗначениеКоллекции.Значение;
		
		КоллекцияВыгружалась = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.КоллекцияВыгружалась(КлючЗначениеКоллекции.Ключ);
		ИнфоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(КлючЗначениеКоллекции.Ключ);
		
		Если ОписаниеКоллекции.Выгружать Тогда
			Если Не КоллекцияВыгружалась Тогда
				СоздатьКоллекцию(КлючЗначениеКоллекции.Ключ, ОписаниеКоллекции.ИмяВСервисе);
			ИначеЕсли КоллекцияВыгружалась
				И ИнфоКоллекции.ИзмененФормат Тогда
				УдалитьКоллекцию(КлючЗначениеКоллекции.Ключ);
				СоздатьКоллекцию(КлючЗначениеКоллекции.Ключ, ОписаниеКоллекции.ИмяВСервисе);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Очистить или удалить коллекцию на сервере.
// 
// Параметры:
//  ИдКоллекции - Число - Ид коллекции
//  УдалитьКоллекцию - Булево - Удалить коллекцию
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ОчиститьУдалитьКоллекцию(ИдКоллекции, УдалитьКоллекцию = Ложь) Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(ИдКоллекции);
	
	Если УдалитьКоллекцию Тогда
		Метод = "DELETE";
	Иначе
		Метод = "PUT";
	КонецЕсли;
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ТелоЗапроса = Новый Структура();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции


// Выгрузить коллекции.
// 
// Параметры:
//  КоллекцииДляВыгрузки - Массив из Строка - Коллекции для выгрузки
//  АдресХранилища - Строка - Адрес хранилища, передаваемый при вызове в фоне
Процедура ВыгрузитьКоллекции(КоллекцииДляВыгрузки = Неопределено, АдресХранилища = Неопределено) Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ЗапланированоВыгрузитьКоллекций = 0;
	Если КоллекцииДляВыгрузки <> Неопределено Тогда
		ЗапланированоВыгрузитьКоллекций = КоллекцииДляВыгрузки.Количество();
	Иначе
		Для Каждого КлючЗначениеКоллекции Из НастройкиСервиса.Коллекции Цикл
			ОписаниеКоллекции = КлючЗначениеКоллекции.Значение;
			Если ОписаниеКоллекции.Выгружать Тогда
				ЗапланированоВыгрузитьКоллекций = ЗапланированоВыгрузитьКоллекций + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
	СводкаОбменаДанными.ОбменДаннымиАктивен = Истина;
	СводкаОбменаДанными.ЗапланированоВыгрузитьКоллекций = ЗапланированоВыгрузитьКоллекций;
	СводкаОбменаДанными.ВыгруженоОбъектовКоллекции = 0;
	СводкаОбменаДанными.ЗапланированоВыгрузитьОбъектовКоллекции = 0;
	СводкаОбменаДанными.ВыгружаемаяСейчасКоллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПустаяСсылка();
	РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
	
	ВыгруженоКоллекций = 0;
	Для Каждого КлючЗначениеКоллекции Из НастройкиСервиса.Коллекции Цикл
		Если КоллекцииДляВыгрузки <> Неопределено
			И КоллекцииДляВыгрузки.Найти(КлючЗначениеКоллекции.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеКоллекции = КлючЗначениеКоллекции.Значение;
		Выгружать = ОписаниеКоллекции.Выгружать;
		Если Не Выгружать Тогда
			Продолжить;
		КонецЕсли;
		Категориальный = ОписаниеКоллекции.Категориальный;
		
		Коллекция = КлючЗначениеКоллекции.Ключ;
		СводкаПоКоллекции = СервисПрогнозированияПереопределяемый.ПолучитьСводкуПоКоллекции(Коллекция, НастройкиСервиса);
		
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ВыгруженоКоллекций = ВыгруженоКоллекций;
		СводкаОбменаДанными.ВыгружаемаяСейчасКоллекция = Коллекция;
		СводкаОбменаДанными.ВыгруженоОбъектовКоллекции = 0;
		СводкаОбменаДанными.ЗапланированоВыгрузитьОбъектовКоллекции = СводкаПоКоллекции.КоличествоДанных;
		
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		
		ОбработаноПолностью = Истина;
		Если Категориальный Тогда
			ОбработаноПолностью = ВыгрузитьКатегориальнуюКоллекцию(Коллекция);
		Иначе
			ОбработаноПолностью = ВыгрузитьПериодическуюКоллекцию(Коллекция);
		КонецЕсли;
		
		Если Не ОбработаноПолностью Тогда
			Прервать;
		КонецЕсли;
		ВыгруженоКоллекций = ВыгруженоКоллекций + 1;
		
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ВыгруженоКоллекций = ВыгруженоКоллекций;
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		
	КонецЦикла;
	
	СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
	СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
	СводкаОбменаДанными.ДатаЗавершения = ТекущаяДатаСеанса();
	РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
	
КонецПроцедуры

// Получить информацию о коллекциях.
// 
// Параметры:
//  ИмяКоллекции - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИнформациюОКоллекциях(ИмяКоллекции) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса();
	
	ИнфоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(ИмяКоллекции);
	ИдКоллекции = ИнфоКоллекции.ИдКоллекции;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(ИдКоллекции);
	ПараметрыАдреса.Добавить("info");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ТелоЗапроса = Новый Структура();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область Модели

// Проверить создать модель.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПроверитьСоздатьМодель(ВидПлана) Экспорт
	
	ПроверитьВидПлана(ВидПлана);
	
	СтруктураОтвета = Новый Структура("ТекстОшибки");
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования") <= 0 Тогда
		Ответ = СоздатьМодель(ВидПлана);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Создать модель.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция СоздатьМодель(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели > 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстМоделиУжеНазначенИдентификатор();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ИмяМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "Наименование");
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("models");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("modelName",
		ИмяМодели);
	ТелоЗапроса.Вставить("service",
		НастройкиСервиса.ИмяСервиса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "СозданиеМодели",
			ВидПлана);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить информацию о моделях.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИнформациюОМоделях() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("models");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ОбновлениеИнформацииОКоллекциях");
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область КонфигурацииМоделей

// Проверить создать конфигурацию модели.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПроверитьСоздатьКонфигурациюМодели(ВидПлана) Экспорт
	
	ПроверитьВидПлана(ВидПлана);
	Ответ = СоздатьКонфигурациюМодели(ВидПлана);
	Возврат Ответ;
	
КонецФункции

// Создать конфигурацию модели.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция СоздатьКонфигурациюМодели(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ТребуемыеРеквизитыДополнительно = "ЗаполнятьПоХарактеристикамНоменклатуры, ЗаполнятьПартнераВТЧ, ЗаполнятьСкладВТЧ, ТипПлана";
	ТребуемыеРеквизиты = СервисПрогнозированияПереопределяемыйКлиентСервер.РеквизитыВидаПланаДляСервисаПрогнозирования();
	ТребуемыеРеквизиты = ТребуемыеРеквизиты + ", " + ТребуемыеРеквизитыДополнительно;
	НастройкиВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана, ТребуемыеРеквизиты);
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("config");
	
	Метод = "PUT";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Если РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.КоличествоВыгруженныхКоллекций() = 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНетКоллекцийДляВыгрузки();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	НеЗаполняетсяСклад          = Не НастройкиВидаПлана.ЗаполнятьСкладВТЧ;
	НеЗаполняетсяКлиент         = Не НастройкиВидаПлана.ЗаполнятьПартнераВТЧ;
	НеЗаполняетсяХарактеристика = Не НастройкиВидаПлана.ЗаполнятьПоХарактеристикамНоменклатуры;
	
	ОсновнаяКоллекция      = Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи;
	КлючиОсновнойКоллекции = КлючиОсновнойКоллекции();
	
	ДополнительныеКоллекции            = Новый Массив(); // extraCollections - list of dict.
	ОбъектыПрогнозированияПоКоллекциям = Новый Массив(); // userDataSources - list of dict.
	
	ИнфоОсновнойКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(
		ОсновнаяКоллекция);
	Если Не ЗначениеЗаполнено(ИнфоОсновнойКоллекции.ИдКоллекции)
		Или Число(ИнфоОсновнойКоллекции.ИдКоллекции) < 1 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторОсновнойКоллекции();
	КонецЕсли;
	ИДОсновнойКоллекции = СтрЗаменить(ИнфоОсновнойКоллекции.ИдКоллекции, Символы.НПП, ""); // mainCollection - string.
	
	ОписаниеОсновнойКоллекции = НастройкиСервиса.Коллекции[ОсновнаяКоллекция];
	Для Каждого ВложенныйКлючЗначение Из ОписаниеОсновнойКоллекции.ВложенноеОписание Цикл
		ОписаниеРеквизита = ВложенныйКлючЗначение.Значение;
		Если Не ОписаниеРеквизита.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаВСервисе = ОписаниеРеквизита.ИмяВСервисе;
		Если ИмяРеквизитаВСервисе = "shop_id" И НеЗаполняетсяСклад Тогда
			Продолжить;
		ИначеЕсли ИмяРеквизитаВСервисе = "customer_id" И НеЗаполняетсяКлиент Тогда
			Продолжить;
		ИначеЕсли ИмяРеквизитаВСервисе = "item_variant_id" И НеЗаполняетсяХарактеристика Тогда
			Продолжить;
		КонецЕсли;
		Если ИмяРеквизитаВСервисе = "quantity" Тогда
			Продолжить; // target.
		КонецЕсли;
		
		ОбъектПрогнозирования = Новый Структура();
		ОбъектПрогнозирования.Вставить("collectionId",      ИДОсновнойКоллекции);
		ОбъектПрогнозирования.Вставить("fieldName",         ИмяРеквизитаВСервисе);
		Если ОписаниеРеквизита.ТипДанных = "string" Тогда
			Если КлючиОсновнойКоллекции.Найти(ИмяРеквизитаВСервисе) <> Неопределено Тогда
				ОбъектПрогнозирования.Вставить("forecastObjectKey", 1);
				Если ИмяРеквизитаВСервисе = "item_id" Тогда
					Если НастройкиВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям
						И НастройкиВидаПлана.ВариантПрогнозированияПоКатегориям = 0 Тогда
						ОбъектПрогнозирования.Вставить("forecastObjectKey", 0); // "category_processing" = "group".
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОписаниеРеквизита.ТипДанных = "number" Тогда
			Если СтрНайти(ИмяРеквизитаВСервисе, "price") Тогда
				ОбъектПрогнозирования.Вставить("knownFuture", 1);
			КонецЕсли;
			ОбъектПрогнозирования.Вставить("aggregationMode", "mean");
			Если СтрНайти(ИмяРеквизитаВСервисе, "price") Тогда
				СпособЗаполненияПропущенных = Новый Структура();
				СпособЗаполненияПропущенных.Вставить("method", "ffill");
				ОбъектПрогнозирования.Вставить("conditionalMissedFillerMode", СпособЗаполненияПропущенных);
				Если НастройкиВидаПлана.ВзвешиваниеОбъектовПриПодсчетеМетрики > 0 Тогда
					ОбъектПрогнозирования.Вставить("usedForMetricWeighing", 1);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ОбъектыПрогнозированияПоКоллекциям.Добавить(ОбъектПрогнозирования);
	КонецЦикла;
	
	// Обработка данных дополнительных коллекций.
	Для Каждого КлючЗначение Из НастройкиСервиса.Коллекции Цикл
		
		Если КлючЗначение.Ключ = ОсновнаяКоллекция Тогда
			Продолжить; // Обработка данных основной коллекции происходит отдельно выше.
		КонецЕсли;
		
		ОписаниеКоллекции = КлючЗначение.Значение;
		Если Не ОписаниеКоллекции.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		ИнфоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(КлючЗначение.Ключ);
		Если Не ЗначениеЗаполнено(ИнфоКоллекции.ИдКоллекции)
			Или Число(ИнфоКоллекции.ИдКоллекции) < 1 Тогда
			Продолжить;
		КонецЕсли;
		
		ИДКоллекции             = СтрЗаменить(ИнфоКоллекции.ИдКоллекции, Символы.НПП, "");
		ДополнительнаяКоллекция = Новый Структура("collectionId", ИДКоллекции);
		КлючиСоединения         = Новый Массив(); // mainCollectionJoinKeys, extraCollectionJoinKeys - list of string.
		Для Каждого ВложенныйКлючЗначение Из ОписаниеКоллекции.ВложенноеОписание Цикл
			ОписаниеРеквизита = ВложенныйКлючЗначение.Значение;
			Если Не ОписаниеРеквизита.Выгружать Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизитаВСервисе = ОписаниеРеквизита.ИмяВСервисе;
			Если КлючиОсновнойКоллекции.Найти(ИмяРеквизитаВСервисе) <> Неопределено Тогда // item_id, shop_id, customer_id, item_variant_id.
				
				Если ИмяРеквизитаВСервисе = "shop_id" И НеЗаполняетсяСклад Тогда
					Продолжить;
				ИначеЕсли ИмяРеквизитаВСервисе = "customer_id" И НеЗаполняетсяКлиент Тогда
					Продолжить;
				ИначеЕсли ИмяРеквизитаВСервисе = "item_variant_id" И НеЗаполняетсяХарактеристика Тогда
					Продолжить;
				КонецЕсли;
				КлючиСоединения.Добавить(ИмяРеквизитаВСервисе);
				Продолжить; // Ключи соединения с коллекцией продаж.
				
			КонецЕсли;
			
			ОбъектПрогнозирования = Новый Структура();
			ОбъектПрогнозирования.Вставить("collectionId", ИДКоллекции);
			ОбъектПрогнозирования.Вставить("fieldName",    ИмяРеквизитаВСервисе);
			Если ОписаниеРеквизита.ТипДанных = "string" Тогда
				
				Если ИмяРеквизитаВСервисе = "category_id"
					И НастройкиВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям Тогда
					ОбъектПрогнозирования.Вставить("forecastObjectKey", 1); // "category_processing" = "group or reduce".
				КонецЕсли;
				
			ИначеЕсли ОписаниеРеквизита.ТипДанных = "number" Тогда
				ОбъектПрогнозирования.Вставить("aggregationMode", "mean");
				Если ИмяРеквизитаВСервисе = "stock_quantity" Тогда
					СпособЗаполненияПропущенных = Новый Структура();
					СпособЗаполненияПропущенных.Вставить("method", "ffill");
					ОбъектПрогнозирования.Вставить("conditionalMissedFillerMode", СпособЗаполненияПропущенных);
				КонецЕсли;
			КонецЕсли;
			ОбъектыПрогнозированияПоКоллекциям.Добавить(ОбъектПрогнозирования);
			
		КонецЦикла;
		ДополнительнаяКоллекция.Вставить("mainCollectionJoinKeys",  КлючиСоединения);
		ДополнительнаяКоллекция.Вставить("extraCollectionJoinKeys", КлючиСоединения);
		ДополнительныеКоллекции.Добавить(ДополнительнаяКоллекция);
	КонецЦикла;
	
	СпособРасчетаСреднегоИСтандартногоОтклонения = "auto";
	Если НастройкиВидаПлана.РассчитыватьОтклонениеПоСезоннымЗначениям = 1 Тогда
		СпособРасчетаСреднегоИСтандартногоОтклонения = "season";
	ИначеЕсли НастройкиВидаПлана.РассчитыватьОтклонениеПоСезоннымЗначениям = 2 Тогда
		СпособРасчетаСреднегоИСтандартногоОтклонения = "trend";
	КонецЕсли;
	
	ВерхняяГраницаВыброса         = НастройкиВидаПлана.ВерхняяГраницаВыброса;
	НижняяГраницаВыброса          = НастройкиВидаПлана.НижняяГраницаВыброса;
	Если НастройкиВидаПлана.СглаживаниеВыбросовИсторическихДанных = 0 Тогда
		СпособСглаживанияВыбросов = "no";
		ВерхняяГраницаВыброса     = 3;
		НижняяГраницаВыброса      = 3;
	ИначеЕсли НастройкиВидаПлана.СглаживаниеВыбросовИсторическихДанных = 1 Тогда
		СпособСглаживанияВыбросов = "bound";
	Иначе
		СпособСглаживанияВыбросов = "mean";
	КонецЕсли;
	
	СвойстваОбработкиВыбросов = Новый Структура();
	СвойстваОбработкиВыбросов.Вставить("smoothingType",      СпособСглаживанияВыбросов);
	СвойстваОбработкиВыбросов.Вставить("stdUpperBound",      ВерхняяГраницаВыброса);
	СвойстваОбработкиВыбросов.Вставить("stdLowerBound",      НижняяГраницаВыброса);
	СвойстваОбработкиВыбросов.Вставить("stdCalculatingType", СпособРасчетаСреднегоИСтандартногоОтклонения);
	
	СвойстваПоказателяОсновнойКоллекции = Новый Структура(); // target - Структура из fieldName, aggregationMode, missedFillerMode, isNonnegative.
	СвойстваПоказателяОсновнойКоллекции.Вставить("fieldName",       "quantity");
	СвойстваПоказателяОсновнойКоллекции.Вставить("aggregationMode", "sum");
	СвойстваПоказателяОсновнойКоллекции.Вставить("isNonnegative",   1);
	
	НомераКвантилейПрогноза = Новый Массив();
	НомераКвантилейПрогноза.Добавить(1);
	НомераКвантилейПрогноза.Добавить(10);
	НомераКвантилейПрогноза.Добавить(25);
	НомераКвантилейПрогноза.Добавить(50);
	НомераКвантилейПрогноза.Добавить(90);
	НомераКвантилейПрогноза.Добавить(99);
	
	ТелоЗапроса = Новый Структура();
	
	// Базовые параметры.
	ТелоЗапроса.Вставить("mainCollection", ИДОсновнойКоллекции);
	ТелоЗапроса.Вставить("dateGranularity", ПреобразоватьВТипСервиса(НастройкиВидаПлана.Периодичность)); // timeframe в ПП.
	Если НастройкиВидаПлана.Периодичность = Перечисления.Периодичность.Неделя Тогда
		ДеньНеделиНачалаПрогноза = ПреобразоватьВТипСервиса(НастройкиВидаПлана.ДеньНеделиНачалаПрогноза); // Строка -
		ТелоЗапроса.Вставить("startWeekDay", ДеньНеделиНачалаПрогноза);
	КонецЕсли;
	ТелоЗапроса.Вставить("horizon",         НастройкиВидаПлана.КоличествоПериодов);
	ТелоЗапроса.Вставить("target",          СвойстваПоказателяОсновнойКоллекции);
	ТелоЗапроса.Вставить("dtStartForecast", ПреобразоватьВТипСервиса(НастройкиВидаПлана.НачалоПрогнозирования));
	
	// Параметры связей с дополнительными коллекциями.
	ТелоЗапроса.Вставить("extraCollections", ДополнительныеКоллекции);
	// Параметры пользовательских реквизитов, используемых для подсчета и разреза данных.
	ТелоЗапроса.Вставить("userDataSources",  ОбъектыПрогнозированияПоКоллекциям);
	
	// Продолжение базовых параметров.
	ТелоЗапроса.Вставить("userMetric",          НастройкиВидаПлана.МетрикаОценкиКачестваПрогноза);
	ТелоЗапроса.Вставить("predictionQuantiles", НомераКвантилейПрогноза);
	
	// Параметры способа обработки выбросов.
	ТелоЗапроса.Вставить("outliersProcessing", СвойстваОбработкиВыбросов);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "СозданиеКонфигурацииМодели",
			ВидПлана);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область ОбучениеМоделей

// Получить типы сервисов.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьТипыСервисов() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("forecast");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
		
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
		
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ОбновлениеИнформацииОМоделях");
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Запустить обучение.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ЗапуститьОбучение(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Идентификаторы = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИдентификаторыОбученияВидаПлана(ВидПлана);
	Если Идентификаторы <> Неопределено
		И ЗначениеЗаполнено(Идентификаторы.ИдОбучения)
		И (Идентификаторы.СтатусОбучения = СтатусОбучается()
			Или Идентификаторы.СтатусОбучения = СтатусОжидаетОбучения()
			Или Идентификаторы.СтатусОбучения = СтатусГотовКПолучению()) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОжиданиеЗавершенияОбученияМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Если ИдетОбменДанными() Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОбучениеНевозможноИдетВыгрузкаДанных();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("train");
	
	ПараметрыЗапроса = Новый Соответствие();
	ПараметрыЗапроса.Вставить("ServiceType",  НастройкиСервиса.ИмяСервиса);
	ПараметрыЗапроса.Вставить("ModelID",      Число(ИдМодели));
	ПараметрыЗапроса.Вставить("make_default", 1);
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса, ПараметрыЗапроса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ЗапускОбученияМодели",
			ВидПлана);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить статус обучения.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов -
// 
// Возвращаемое значение:
//  Структура - из:
//  * ТекстОшибки - Строка -
//  * ВидПлана - СправочникСсылка.ВидыПланов -
//  * ИдОбучения - Строка -
//  * Статус - Строка, Неопределено -
Функция ПолучитьСтатусОбучения(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ДобавитьТекстОшибкиКОбучениюПоВидуПлана(ВидПлана,
			ТекстОшибки);
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ОтветФункции = Новый Структура();
	ОтветФункции.Вставить("ТекстОшибки", "");
	
	ИдентификаторыОбучения = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИдентификаторыОбученияВидаПлана(ВидПлана);
	Если ИдентификаторыОбучения = Неопределено Тогда
		ОтветФункции.ТекстОшибки = ТекстНеНайденаИнформацияОбученияМодели();
		Возврат ОтветФункции;
	КонецЕсли;
	ИдОбучения = ИдентификаторыОбучения.ИдОбучения;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("result");
	ПараметрыАдреса.Добавить(ИдОбучения);
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",  НастройкиСервиса.ТокенПриложения);
	Заголовки.Вставить("ServiceType", НастройкиСервиса.ИмяСервиса);
	Заголовки.Вставить("ModelID",     ИдМодели);
	Заголовки.Вставить("resultUUID",  ИдОбучения);
	
	СтруктураОтвета = Неопределено;
	СтатусОбучения = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		
		ДополнительныйПараметр = Новый Структура("ВидПлана, ИдОбучения", ВидПлана, ИдОбучения);
		
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение,
			"ОбновлениеИнформацииОСтатусеОбучения",
			ДополнительныйПараметр);
		СтатусОбучения = Ответ.ВозвращаемоеЗначение;
		ОтветФункции.Вставить("ТекстОшибки",Ответ.ТекстОшибки);
	КонецЕсли;
	
	ОтветФункции.Вставить("ВидПлана", ВидПлана);
	ОтветФункции.Вставить("ИдОбучения", ИдОбучения);
	ОтветФункции.Вставить("Статус", СтатусОбучения);
	
	Возврат ОтветФункции;
	
КонецФункции

#Область ПолучениеПрогнозов

// Получить прогноз сервиса.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - Вид плана
//  ИдОбучения - Строка - Ид обучения
//  ИмяМодели - Строка - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьПрогнозСервиса(ВидПлана, ИдОбучения, ИмяМодели = Неопределено) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	
	Если ЗначениеЗаполнено(ИмяМодели)
		И ИмяМодели <> "auto" Тогда
		ТекстАдресаНаборДанных = "process?target_data=predictions_full";
	Иначе
		ТекстАдресаНаборДанных = "process?target_data=predictions";
		ИмяМодели = "auto";
	КонецЕсли;
	ПараметрыАдреса.Добавить(ТекстАдресаНаборДанных);
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP", НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		СтруктураОтветаКачествоМодели = Новый Массив();
		
		ДополнительныйПараметр = Новый Структура("ВидПлана, ИдОбучения, КачествоМодели",
			ВидПлана, ИдОбучения, СтруктураОтветаКачествоМодели);
		ДополнительныйПараметр.Вставить("ИмяМодели", ИмяМодели);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучениеПрогнозаСервиса",
			ДополнительныйПараметр);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить качество моделей.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьКачествоМоделей(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=models_quality");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
		
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучениеКачестваМоделей",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить качество моделей по объектам.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьКачествоМоделейПоОбъектам(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=models_item_quality");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучениеКачестваМоделей",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить фактические значения и предсказания на тестовых периодах.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьФактическиеЗначенияИПредсказанияНаТестовыхПериодах(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=test_models");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьФактическиеЗначенияИПредсказанияНаТестовыхПериодах",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить сумму план факт моделей за все тестовые периоды.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьСуммуПланФактМоделейЗаВсеТестовыеПериоды(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=test_models_series");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьСуммуПланФактМоделейЗаВсеТестовыеПериоды",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить исключенные объекты обучения.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИсключенныеОбъектыОбучения(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=excluded_objects");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьИсключенныеОбъектыОбучения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить сезонность.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьСезонность(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=seasonality");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьСезонность",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить сезонность.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьСезонностьПоМесяцам(ВидПлана) Экспорт
	Возврат ПолучитьСезонность(ВидПлана);
КонецФункции

// Получить историю обучения.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов -
//  ОтборПоОбъекту - Структура - содержит идентификатор объекта и/или детализации:
// * shop_id - Строка - Идентификатор склада, по которому будут считываться данные
// * item_id - Строка - Идентификатор товара, по которому будут считываться данные
// * customer_id - Строка - Идентификатор клиента, по которому будут считываться данные
// * item_variant_id - Строка - Идентификатор характеристики товара, по которому будут считываться данные
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИсториюОбучения(ВидПлана, ОтборПоОбъекту) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	
	КоличествоВПорции = 1000;
	ШаблонЗапроса = "process?target_data=history&limit=%1";
	ПараметрыАдреса.Добавить(СтрШаблон(ШаблонЗапроса, Формат(КоличествоВПорции, "ЧГ=")));
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP", НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапроса = Новый Структура();
	Если ОтборПоОбъекту.Количество() Тогда
		ТелоЗапроса                    = ОтборПоОбъекту;
		УстановленаФильтрацияПоОбъекту = Истина;
	Иначе
		УстановленаФильтрацияПоОбъекту = Ложь;
	КонецЕсли;
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьИсториюОбучения",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
		СтруктураОтвета.Вставить("ФильтрацияПоОбъекту", УстановленаФильтрацияПоОбъекту);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить прогноз сервиса расширенный.
// 
// Параметры:
//  ВидПлана - СправочникСсылка.ВидыПланов - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьПрогнозСервисаРасширенный(ВидПлана) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ИдМодели = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ИдентификаторМоделиПрогнозирования");
	Если ИдМодели <= 0 Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстНеПолученИдентификаторМодели();
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить(НастройкиСервиса.ИмяСервиса);
	ПараметрыАдреса.Добавить("models");
	ПараметрыАдреса.Добавить(ИдМодели);
	ПараметрыАдреса.Добавить("process?target_data=final_prediction");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьПрогнозСервисаРасширенный",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Получить список коллекций на сервере.
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьПереченьКоллекцийНаСервере() Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьПереченьКоллекцийНаСервере",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

// Получить инфо коллекции на сервере.
// 
// Параметры:
//  ИдКоллекции - Число - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция ПолучитьИнфоКоллекцииНаСервере(ИдКоллекции) Экспорт
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(Число(ИдКоллекции));
	ПараметрыАдреса.Добавить("info");
	
	Метод = "GET";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ПолучитьИнфоКоллекцииНаСервере",
			Неопределено);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПолучениеДополнительнойИнформации

// Статус обучения модели.
// 
// Параметры:
//  СценарийПрогнозирования - СправочникСсылка.СценарииТоварногоПланирования - 
//  ВидПлана - СправочникСсылка.ВидыПланов - 
//  ОжидаетсяИнформацияОПрогнозе - Булево - 
//  ОжидаетсяЗагрузкаПрогноза - Булево - 
// 
// Возвращаемое значение:
//  см. СтатусОбученияМоделиОтвет.
Функция СтатусОбученияМодели(СценарийПрогнозирования, ВидПлана,
	ОжидаетсяИнформацияОПрогнозе = Ложь,
	ОжидаетсяЗагрузкаПрогноза = Ложь) Экспорт
	
	Отказ = Ложь;
	ЕстьИнформацияОСтатусеОбучения = Истина;
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		СтатусОбучения = Новый ФорматированнаяСтрока(НСтр("ru='Нет прогнозов. Не выбран вид плана.'"));
		ЕстьИнформацияОСтатусеОбучения = Ложь;
		Отказ = Истина;
	ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ЗаполнятьПоДаннымСервиса") Тогда
		СтатусОбучения = Новый ФорматированнаяСтрока(НСтр("ru='Нет прогнозов. Вид плана не настроен для работы с сервисом прогнозирования.'"));
		ЕстьИнформацияОСтатусеОбучения = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	Если СценарийПрогнозирования = НастройкиСервиса.СценарийПрогнозированияФактИПлан
		И ЗначениеЗаполнено(СценарийПрогнозирования) Тогда
		ШаблонТекстаОшибки = НСтр("ru='Сценарий прогнозирования %1 запрещен для выбора, поскольку используется для подмены данных о продажах.'");
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "СценарийПрогнозирования");
		СценарийПрогнозирования = Справочники.СценарииТоварногоПланирования.ПустаяСсылка();
		Отказ = Истина;
	ИначеЕсли СценарийПрогнозирования = НастройкиСервиса.СценарийПрогнозированияКонтрольныхПланов
		И ЗначениеЗаполнено(СценарийПрогнозирования) Тогда
		ШаблонТекстаОшибки = НСтр("ru='Сценарий прогнозирования %1 запрещен для выбора, поскольку используется для выгрузки экспертных планов продаж.'");
		ТекстОшибки = СтрШаблон(ШаблонТекстаОшибки, СценарийПрогнозирования);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "СценарийПрогнозирования");
		СценарийПрогнозирования = Справочники.СценарииТоварногоПланирования.ПустаяСсылка();
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Ответ = СтатусОбученияМоделиОтвет(ЕстьИнформацияОСтатусеОбучения, СтатусОбучения);
		Возврат Ответ;
	КонецЕсли;
	
	ИнфоМодели = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИнформацияОбОбученииМодели(ВидПлана);
	
	ДатаПостроенияПрогноза = Дата(1, 1, 1);
	ДатаОбновленияСтатусаОбучения = Дата(1, 1, 1);
	СтатусОбучения = "";
	ТекстОшибки = "";
	Готовность = 0;
	
	Если ИнфоМодели.ЗагруженнаяМодель <> Неопределено Тогда
		ДатаПостроенияПрогноза = ИнфоМодели.ЗагруженнаяМодель.ВремяИзмененияСостояния;
	КонецЕсли;
	
	Если ИнфоМодели.ОбучающаясяМодель <> Неопределено Тогда
		ДатаОбновленияСтатусаОбучения = ИнфоМодели.ОбучающаясяМодель.ВремяИзмененияСостояния;
		СтатусОбучения = НРег(ИнфоМодели.ОбучающаясяМодель.СтатусОбучения);
		Готовность = ИнфоМодели.ОбучающаясяМодель.Готовность;
		ТекстОшибки = ИнфоМодели.ОбучающаясяМодель.ТекстОшибки;
	КонецЕсли;
	
	ЕстьОшибка = Не ПустаяСтрока(ТекстОшибки) Или СтрНайти(СтатусОбучения, "ошибка") > 0;
	ГотовКПолучению = СтрНайти(СтатусОбучения, "готов") > 0;
	
	ПроцентВыполнения = НСтр("ru='готовность: %1%%'");
	ПроцентВыполнения = СтрШаблон(ПроцентВыполнения, Готовность);
	
	СтатусПрогнозаИОбучения = Новый ФорматированнаяСтрока("");
	
	Если ДатаПостроенияПрогноза > ДатаОбновленияСтатусаОбучения Тогда
		// Есть прогноз, обучение еще не запущено.
		
		ШаблонСтроки = "%1: %2, <a href=""ЗапуститьОбучение"">%3</a>, <a href=""ЗагрузитьПрогноз"">%4</a>.";
		ТекстЗаголовок = НСтр("ru='Последний прогноз построен'");
		ТекстГиперссылки = НСтр("ru='запросить новый прогноз'");
		ТекстГиперссылкиПовторнаяЗагрузка = НСтр("ru='получить прогноз по другой модели'");
		СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
			ТекстЗаголовок,
			Строка(ДатаПостроенияПрогноза),
			ТекстГиперссылки,
			ТекстГиперссылкиПовторнаяЗагрузка);
		
	ИначеЕсли ДатаПостроенияПрогноза > Дата(1, 1, 1)
		И ДатаПостроенияПрогноза <= ДатаОбновленияСтатусаОбучения Тогда
		// Есть прогноз, запущено повторное обучение.
		
		Если Не ЕстьОшибка
			И ГотовКПолучению Тогда
			ШаблонСтроки = "%1: %2. %3, %4 <a href=""ЗагрузитьПрогноз"">%5</a>.";
			ТекстЗаголовок = НСтр("ru='Последний прогноз построен'");
			ТекстЗаголовок2 = НСтр("ru='Готов к получению'");
			ТекстГиперссылки = НСтр("ru='получить прогноз'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				Строка(ДатаПостроенияПрогноза),
				ТекстЗаголовок2,
				ПроцентВыполнения,
				ТекстГиперссылки);
		ИначеЕсли Не ЕстьОшибка Тогда
			ШаблонСтроки = "%1: %2. %3, %4 <a href=""ЗагрузитьПрогноз"">%5</a>.";
			ТекстЗаголовок = НСтр("ru='Последний прогноз построен'");
			ТекстЗаголовок2 = НСтр("ru='Идет обучение'");
			ТекстГиперссылки = НСтр("ru='обновить статус'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				Строка(ДатаПостроенияПрогноза),
				ТекстЗаголовок2,
				ПроцентВыполнения,
				ТекстГиперссылки);
		Иначе
			ШаблонСтроки = "%1: %2, <a href=""ТекстОшибки"">%3</a>, <a href=""ЗапуститьОбучение"">%4</a>, <a href=""ЗагрузитьПрогноз"">%5</a>.";
			ТекстЗаголовок = НСтр("ru='Последний прогноз построен'");
			ТекстГиперссылки = НСтр("ru='запросить новый прогноз'");
			ТекстГиперссылки2 = НСтр("ru='обновить статус'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				Строка(ДатаПостроенияПрогноза),
				СтатусОбучения,
				ТекстГиперссылки,
				ТекстГиперссылки2);
		КонецЕсли;
		
	ИначеЕсли ДатаПостроенияПрогноза = Дата(1, 1, 1)
		И ДатаОбновленияСтатусаОбучения > Дата(1, 1, 1) Тогда
		// Нет прогноза, запущено обучение.
		
		Если Не ЕстьОшибка Тогда
			ШаблонСтроки = "%1. %2, %3 <a href=""ЗагрузитьПрогноз"">%4</a>.";
			ТекстЗаголовок = НСтр("ru='Нет построенных прогнозов'");
			ТекстЗаголовок2 = НСтр("ru='Идет обучение'");
			ТекстГиперссылки = НСтр("ru='обновить статус'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				ТекстЗаголовок2,
				ПроцентВыполнения,
				ТекстГиперссылки);
		Иначе
			ШаблонСтроки = "%1, <a href=""ТекстОшибки"">%2</a>, <a href=""ЗапуститьОбучение"">%3</a>, <a href=""ЗагрузитьПрогноз"">%4</a>.";
			ТекстЗаголовок = НСтр("ru='Нет построенных прогнозов'");
			ТекстГиперссылки = НСтр("ru='запросить новый прогноз'");
			ТекстГиперссылки2 = НСтр("ru='обновить статус'");
			СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
				ТекстЗаголовок,
				СтатусОбучения,
				ТекстГиперссылки,
				ТекстГиперссылки2);
		КонецЕсли;
		
	Иначе
		// Нет прогноза, нет обучения.
		
		ШаблонСтроки = "%1, <a href=""ЗапуститьОбучение"">%2</a>.";
		ТекстЗаголовок = НСтр("ru='Нет построенных прогнозов'");
		ТекстГиперссылки = НСтр("ru='запросить прогноз'");
		СтатусПрогнозаИОбучения = СтроковыеФункции.ФорматированнаяСтрока(ШаблонСтроки,
			ТекстЗаголовок,
			ТекстГиперссылки);
		
		ЕстьИнформацияОСтатусеОбучения = Ложь;
		
	КонецЕсли;
	
	Если ОжидаетсяИнформацияОПрогнозе Тогда
		СтатусПрогнозаИОбучения = Новый ФорматированнаяСтрока(НСтр("ru='ожидание ответа'"));
	ИначеЕсли ОжидаетсяЗагрузкаПрогноза Тогда
		СтатусПрогнозаИОбучения = Новый ФорматированнаяСтрока(НСтр("ru='ожидание ответа'"));
	КонецЕсли;
	
	СтрокаКачества = НСтр("ru='нет информации'");
	КачествоМодели = Новый ФорматированнаяСтрока(СтрокаКачества);
	
	МодельОбучается = ИнфоМодели.ОбучающаясяМодель <> Неопределено
		И (ИнфоМодели.ОбучающаясяМодель.СтатусОбучения = СтатусОбучается()
			Или ИнфоМодели.ОбучающаясяМодель.СтатусОбучения = СтатусОжидаетОбучения()
			Или ИнфоМодели.ОбучающаясяМодель.СтатусОбучения = СтатусНеизвестен());
	ЕстьЗагруженнаяМодель = ИнфоМодели.ЗагруженнаяМодель <> Неопределено 
		И ИнфоМодели.ЗагруженнаяМодель.СтатусОбучения = СтатусЗагружен();
	
	Ответ = СтатусОбученияМоделиОтвет(ЕстьИнформацияОСтатусеОбучения,
		СтатусПрогнозаИОбучения,
		Не МодельОбучается
			И ГотовКПолучению,
		Не МодельОбучается
			И ЕстьЗагруженнаяМодель);
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область НастройкиСервиса
// Получить настройки сервиса.
// 
// Возвращаемое значение:
//  см. ШаблонНастроекСервиса.
Функция ПолучитьНастройкиСервиса() Экспорт
	
	ВсеНастройкиСервиса = ШаблонНастроекСервиса();
	
	СохраненныеНастройкиСервиса = Константы.НастройкиСервисаПрогнозирования.Получить().Получить();
	
	Для Каждого КлючЗначение Из ВсеНастройкиСервиса Цикл
		Если СохраненныеНастройкиСервиса <> Неопределено
			И СохраненныеНастройкиСервиса.Свойство(КлючЗначение.Ключ)
			И ЗначениеЗаполнено(СохраненныеНастройкиСервиса[КлючЗначение.Ключ]) Тогда
			
			Если ((ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
				Или ТипЗнч(КлючЗначение.Значение) = Тип("Соответствие"))
					И КлючЗначение.Значение.Количество() > 0) Тогда
				
				Для Каждого КлючЗначениеВнутренний Из КлючЗначение.Значение Цикл
					ЭтоСтруктура = ТипЗнч(СохраненныеНастройкиСервиса[КлючЗначение.Ключ]) = Тип("Структура");
					КлючСтроковый = ТипЗнч(КлючЗначениеВнутренний.Ключ) = Тип("Строка");
					
					КлючСодержитсяВСтруктуре = СохраненныеНастройкиСервиса[КлючЗначение.Ключ] <> Неопределено
						И ЭтоСтруктура
						И КлючСтроковый
						И СохраненныеНастройкиСервиса[КлючЗначение.Ключ].Свойство(КлючЗначениеВнутренний.Ключ)
						И ЗначениеЗаполнено(СохраненныеНастройкиСервиса[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ]);
						
					КлючСодержитсяВСоответствии = СохраненныеНастройкиСервиса[КлючЗначение.Ключ] <> Неопределено
						И Не ЭтоСтруктура
						И СохраненныеНастройкиСервиса[КлючЗначение.Ключ].Получить(КлючЗначениеВнутренний.Ключ) <> Неопределено;
					
					Если КлючСодержитсяВСтруктуре Или КлючСодержитсяВСоответствии Тогда
						ВсеНастройкиСервиса[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ]
							= СохраненныеНастройкиСервиса[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ];
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				ВсеНастройкиСервиса[КлючЗначение.Ключ] = СохраненныеНастройкиСервиса[КлючЗначение.Ключ];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеНастройкиСервиса;
	
КонецФункции

// Получить настройки сервиса из шаблона.
// 
// Возвращаемое значение:
//  см. ШаблонНастроекСервиса.
Функция ПолучитьШаблонныеНастройкиСервиса() Экспорт
	
	Возврат ШаблонНастроекСервиса();
	
КонецФункции

// Сбросить настройки сервиса в значения по умолчанию.
Процедура СброситьНастройкиСервиса() Экспорт
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
	
	НастройкиПоУмолчанию = ШаблонНастроекСервиса();
	ХранилищеПараметров = Новый ХранилищеЗначения(НастройкиПоУмолчанию);
	Константы.НастройкиСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	
КонецПроцедуры

// Сбросить настройки авторизации в сервисе в значения по умолчанию.
//
Процедура СброситьНастройкиАвторизацииВСервисе(Настройки = Неопределено) Экспорт
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
	                         УровеньЖурналаРегистрации.Информация,
	                         ,
	                         ,
	                         ТекущаяДатаСеанса());
	
	Если Настройки = Неопределено Тогда
		Настройки = ПолучитьНастройкиСервиса();
	КонецЕсли;
	НастройкиПоУмолчанию = ШаблонНастроекСервиса();
	
	// Заявка на подключение
	Настройки.НазваниеКомпании                   = НастройкиПоУмолчанию.НазваниеКомпании;
	Настройки.ФИОКонтактногоЛица                 = НастройкиПоУмолчанию.ФИОКонтактногоЛица;
	Настройки.ЭлектроннаяПочта                   = НастройкиПоУмолчанию.ЭлектроннаяПочта;
	Настройки.НомерТелефона                      = НастройкиПоУмолчанию.НомерТелефона;
	Настройки.НомерТелефонаЗначенияПолей         = НастройкиПоУмолчанию.НомерТелефонаЗначенияПолей;
	Настройки.НомерТелефонаКомментарий           = НастройкиПоУмолчанию.НомерТелефонаКомментарий;
	Настройки.ЗаявкаНаПодключениеОтправлена      = НастройкиПоУмолчанию.ЗаявкаНаПодключениеОтправлена;
	
	// Авторизация.
	Настройки.ТипАвторизации                     = НастройкиПоУмолчанию.ТипАвторизации;
	Настройки.АдресПодключения                   = НастройкиПоУмолчанию.АдресПодключения;
	Настройки.Логин                              = НастройкиПоУмолчанию.Логин;
	Настройки.Пароль                             = НастройкиПоУмолчанию.Пароль;
	Настройки.ЛогинИТС                           = НастройкиПоУмолчанию.ЛогинИТС;
	Настройки.ТокенПриложения                    = НастройкиПоУмолчанию.ТокенПриложения;
	Настройки.ТокенОбновления                    = НастройкиПоУмолчанию.ТокенОбновления;
	Настройки.ИдентификаторПриложения            = НастройкиПоУмолчанию.ИдентификаторПриложения;
	Настройки.ДатаОбновленияТокенов              = НастройкиПоУмолчанию.ДатаОбновленияТокенов;
	Настройки.ИмяБазы                            = НастройкиПоУмолчанию.ИмяБазы;
	Настройки.Тариф                              = НастройкиПоУмолчанию.Тариф;
	Настройки.СтатусПодключения                  = НастройкиПоУмолчанию.СтатусПодключения;
	Настройки.РазрешенОбменССервисом             = НастройкиПоУмолчанию.РазрешенОбменССервисом;
	Настройки.ИзмененыНастройкиИнтернетПоддержки = НастройкиПоУмолчанию.ИзмененыНастройкиИнтернетПоддержки;
	
	ХранилищеПараметров = Новый ХранилищеЗначения(Настройки);
	Константы.НастройкиСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
	УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	
КонецПроцедуры

// Восстановить удаленные настройки и пересоздать настройки с некорректным типом.
Процедура ВосстановитьНастройкиСервиса() Экспорт
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
	
	НастройкиПоУмолчанию = ШаблонНастроекСервиса();
	ТекущиеНастройки = ПолучитьНастройкиСервиса();
	ВосстановитьНастройкиПоШаблону(ТекущиеНастройки, НастройкиПоУмолчанию);
	
	ТекущиеНастройки.Версия = НастройкиПоУмолчанию.Версия;
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ПарольПользователяСервисаПрогнозирования",
		"Пароль");
	Если Не ЗначениеЗаполнено(Пароль)
		И ЗначениеЗаполнено(ТекущиеНастройки.Пароль) Тогда
		ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ПарольПользователяСервисаПрогнозирования",
			ТекущиеНастройки.Пароль, "Пароль");
		ТекущиеНастройки.Пароль = "";
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьНастройкиСервиса(ТекущиеНастройки);
	УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Разное

// Получает значения часто используемых и редко изменяемых настроек сервиса прогнозирования.
// Если требуется получить настройку не заданную в этой функции, следует вызвать метод
// который получит полный список настроек - ПолучитьНастройкиСервиса().
// 
// Возвращаемое значение:
//  см. ШаблонАвторизационныхНастроекСервиса.
Функция ПолучитьАвторизационныеНастройкиСервиса() Экспорт
	
	Возврат ПараметрыСеанса.НастройкиСервисаПрогнозирования;
	
КонецФункции

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса.
Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	
	Обработчики.Вставить("НастройкиСервисаПрогнозирования", "СервисПрогнозирования.УстановкаПараметровСеанса");
	
КонецПроцедуры

// Устанавливает параметры сеанса работы с сервисом прогнозирования продаж.
//
// Параметры:
//   ИмяПараметра - Строка - 
//   УстановленныеПараметры - Массив из Строка - 
//
Процедура УстановкаПараметровСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "НастройкиСервисаПрогнозирования" Тогда
		УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
		УстановленныеПараметры.Добавить("НастройкиСервисаПрогнозирования");
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииОбработчиковУстановкиПараметровСеанса
Процедура УстановитьПараметрыСеансаНастроекСервисаПрогнозирования() Экспорт
	
	ТекущиеНастройкиСервисаСтруктура = ШаблонАвторизационныхНастроекСервиса();
	ВсеНастройкиСервиса = ПолучитьНастройкиСервиса();
	ЗаполнитьЗначенияСвойств(ТекущиеНастройкиСервисаСтруктура, ВсеНастройкиСервиса);
	
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ПарольПользователяСервисаПрогнозирования",
		"Пароль");
	ТекущиеНастройкиСервисаСтруктура.Пароль = Пароль;
	
	ПараметрыСеанса.НастройкиСервисаПрогнозирования = Новый ФиксированнаяСтруктура(ТекущиеНастройкиСервисаСтруктура);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Идет обмен данными.
// 
// Возвращаемое значение:
//  Булево -
Функция ИдетОбменДанными() Экспорт
	
	СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
	Если СводкаОбменаДанными.ОбменДаннымиАктивен
		И СводкаОбменаДанными.ТипОбмена = 0 Тогда
		НастройкиСервиса = ПолучитьНастройкиСервиса();
		Если ТекущаяДатаСеанса() > СводкаОбменаДанными.ДатаОбновленияЗаписи + НастройкиСервиса.ТаймаутВыгрузки Тогда
			СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
			СводкаОбменаДанными.ЕстьОшибка = Истина;
			СводкаОбменаДанными.ТекстОшибки = ТекстТаймаутВыгрузкиДанных();
			РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		Иначе
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли СводкаОбменаДанными.ОбменДаннымиАктивен
		И СводкаОбменаДанными.ТипОбмена = 1 Тогда
		НастройкиСервиса = ПолучитьНастройкиСервиса();
		Если ТекущаяДатаСеанса() > СводкаОбменаДанными.ДатаОбновленияЗаписи + НастройкиСервиса.ТаймаутЗагрузки Тогда
			СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
			СводкаОбменаДанными.ЕстьОшибка = Истина;
			СводкаОбменаДанными.ТекстОшибки = ТекстТаймаутЗагрузкиДанных();
			РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Это уникальный идентификатор.
// 
// Параметры:
//  ТекстСсылки - Строка - 
// 
// Возвращаемое значение:
//  Булево - 
Функция ЭтоУникальныйИдентификатор(ТекстСсылки) Экспорт
	
	Возврат СтрДлина(ТекстСсылки) = 36 И СтрЧислоВхождений(ТекстСсылки, "-") = 4;
	
КонецФункции

// Это пустой уникальный идентификатор.
// 
// Параметры:
//  ТекстСсылки - Строка - 
// 
// Возвращаемое значение:
//  Булево - 
Функция ЭтоПустойИдентификатор(ТекстСсылки) Экспорт
	
	ПустойИдентификатор = Ложь;
	Если ТекстСсылки = "00000000-0000-0000-0000-000000000000"
		Или ПустаяСтрока(ТекстСсылки) Тогда
		ПустойИдентификатор = Истина;
	КонецЕсли;
	
	Возврат ПустойИдентификатор;
	
КонецФункции

// Пустое значение сервиса.
// 
// Параметры:
//  Значение - Произвольный - 
// 
// Возвращаемое значение:
//  Булево - 
Функция ПустоеЗначениеСервиса(Значение) Экспорт
	
	Если Значение = Неопределено
		Или Значение = "x0"
		Или Значение = "NaN"
		Или Значение = "" // category_id может быть пустым.
		Или Значение = "0"
		Или Значение = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Получить уникальный идентификатор.
// 
// Параметры:
//  ТекстИдентификатора - Строка - 
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
Функция ПолучитьУникальныйИдентификатор(ТекстИдентификатора) Экспорт
	
	Если ТекстИдентификатора = Неопределено
		Или ТекстИдентификатора = "x0"
		Или ТекстИдентификатора = "NaN" Тогда
		ПустойИдентификатор = "00000000-0000-0000-0000-000000000000";
		Возврат Новый УникальныйИдентификатор(ПустойИдентификатор);
	КонецЕсли;
	
	Возврат Новый УникальныйИдентификатор(ТекстИдентификатора);
	
КонецФункции

// Дата сервиса в дату программы.
// 
// Параметры:
//  СтрокаДаты - Строка - 
// 
// Возвращаемое значение:
//  Дата - Дата сервиса в дату программы
Функция ДатаСервисаВДатуПрограммы(СтрокаДаты) Экспорт
	
	ЭлементыДаты = СтрРазделить(СтрокаДаты, "-");
	ДатаПродажи = Дата(ЭлементыДаты[0], ЭлементыДаты[1], ЭлементыДаты[2]);
	Возврат ДатаПродажи;
	
КонецФункции

// Обновить настройки сервиса.
// 
// Параметры:
//  НовыеНастройки - см. ШаблонНастроекСервиса.
//  
Процедура ОбновитьНастройкиСервиса(НовыеНастройки) Экспорт
	
	ТекущиеНастройки = ПолучитьНастройкиСервиса();
	
	Для Каждого КлючЗначение Из ТекущиеНастройки Цикл
		
		Если НовыеНастройки.Свойство(КлючЗначение.Ключ)
			И НовыеНастройки[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
			ТекущиеНастройки[КлючЗначение.Ключ] = НовыеНастройки[КлючЗначение.Ключ];
		КонецЕсли;
		
	КонецЦикла;
	
	ХранилищеПараметров = Новый ХранилищеЗначения(ТекущиеНастройки);
	
	Константы.НастройкиСервисаПрогнозирования.Установить(ХранилищеПараметров);
	
КонецПроцедуры

// Диапазон дат для выгрузки.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - 
//  ДатаНачалаВводаДанных - Дата - Нижняя граница периода, нужна чтобы не перебирать все возможные даты в прошлом.
//  ДатаАктуальности - Дата, Неопределено - Переопределяет текущую позицию (курсор) выгрузки периодической коллекции.
// 
// Возвращаемое значение:
//  Структура:
//   * ДатаНачала - Дата -
//   * ДатаОкончания - Дата -
Функция ДиапазонДатДляВыгрузки(Коллекция, ДатаНачалаВводаДанных, ДатаАктуальности = Неопределено) Экспорт
	
	День = 86400;
	
	ДатаНачалаВводаДанных = ?(ТипЗнч(ДатаНачалаВводаДанных) = Тип("Null"), Дата(1, 1, 1), ДатаНачалаВводаДанных);
	ДатаНачалаВводаДанных = ?(ТипЗнч(ДатаНачалаВводаДанных) = Тип("Неопределено"), Дата(1, 1, 1), ДатаНачалаВводаДанных);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	ПорцияВыгрузкиПериодическихДанныхВДнях = НастройкиСервиса.ПорцияВыгрузкиПериодическихДанныхВДнях;
	
	Если ДатаАктуальности = Неопределено Тогда
		СводкаПоКоллекции= РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(Коллекция);
		ДатаАктуальности = СводкаПоКоллекции.ДатаАктуальности;
	КонецЕсли;
	ДатаАктуальности = Макс(ДатаАктуальности, ДатаНачалаВводаДанных);
	
	Если Не НастройкиСервиса.ВыгружатьОстаткиЗаВсеВремя
		И ДатаАктуальности < НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж
		И Коллекция <> Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж Тогда
		ДатаАктуальности = НастройкиСервиса.ДатаНачалаВыгрузкиОстатковИПродаж;
	ИначеЕсли Не НастройкиСервиса.ВыгружатьКонтрольныеПланыЗаВсеВремя
		И ДатаАктуальности < НастройкиСервиса.ДатаНачалаВыгрузкиКонтрольныхПланов
		И Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж Тогда
		ДатаАктуальности = НастройкиСервиса.ДатаНачалаВыгрузкиКонтрольныхПланов;
	КонецЕсли;
	
	ДатаОкончания = ДатаАктуальности + (ПорцияВыгрузкиПериодическихДанныхВДнях * День);
	
	Если Не НастройкиСервиса.ВыгружатьОстаткиЗаВсеВремя
		И ДатаОкончания > НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж
		И Коллекция <> Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж Тогда
		Если НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж > Дата(2000, 1, 1) Тогда
			ДатаОкончания = НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж;
		КонецЕсли;
	ИначеЕсли Не НастройкиСервиса.ВыгружатьКонтрольныеПланыЗаВсеВремя
		И ДатаОкончания > НастройкиСервиса.ДатаОкончанияВыгрузкиКонтрольныхПланов
		И Коллекция = Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж Тогда
		Если НастройкиСервиса.ДатаОкончанияВыгрузкиКонтрольныхПланов > Дата(2000, 1, 1) Тогда
			ДатаОкончания = НастройкиСервиса.ДатаОкончанияВыгрузкиКонтрольныхПланов;
		КонецЕсли;
	КонецЕсли;
	
	ДатаАктуальности = НачалоДня(ДатаАктуальности);
	ДатаОкончания = НачалоДня(ДатаОкончания);
	
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаАктуальности, ДатаОкончания);
	
КонецФункции

// Модуль интернет поддержка пользователей.
// 
// Возвращаемое значение:
//  ОбщийМодуль, Неопределено - Модуль интернет поддержка пользователей.
Функция МодульИнтернетПоддержкаПользователей() Экспорт
	
	Попытка
		Возврат ОбщегоНазначения.ОбщийМодуль("ИнтернетПоддержкаПользователей");
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
	
КонецФункции

// Доступны права администратора сервиса прогнозирования продаж.
// 
// Возвращаемое значение:
//  Булево
Функция ДоступныПраваАдминистратораСервисаПрогнозированияПродаж() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования);
	
КонецФункции

// Представить таблицу строкой.
// 
// Параметры:
//  Таблица - ТаблицаЗначений -
// 
// Возвращаемое значение:
//  Строка - Представить таблицу строкой
Функция ПредставитьТаблицуСтрокой(Таблица) Экспорт
	
	ШаблонСтроки = НСтр("ru = '%1: %2'");
	ШаблонНоваяСтрока = "---------------";
	
	ИменаКолонок = Новый Массив();
	Для Каждого Колонка Из Таблица.Колонки Цикл // КолонкаТаблицыЗначений.
		ИменаКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	ДанныеПоСтрокам = Новый Массив();
	Для Каждого Строка Из Таблица Цикл
		ДанныеПоКолонкам = Новый Массив();
		Для Каждого Колонка Из ИменаКолонок Цикл
			КолонкаТекущейСтроки = СтрШаблон(ШаблонСтроки, Колонка, Строка[Колонка]);
			ДанныеПоКолонкам.Добавить(КолонкаТекущейСтроки);
		КонецЦикла;
		ДанныеПоКолонкам.Добавить(ШаблонНоваяСтрока);
		ДанныеМоделиСтрокой = СтрСоединить(ДанныеПоКолонкам, Символы.ПС);
		ДанныеПоСтрокам.Добавить(ДанныеМоделиСтрокой);
	КонецЦикла;
	СобраннаяСтрока = СтрСоединить(ДанныеПоСтрокам, Символы.ПС);
	
	Возврат СобраннаяСтрока;
	
КонецФункции

// Получить общий отбор выгрузки.
// 
// Возвращаемое значение:
//  Неопределено, НастройкиКомпоновкиДанных - 
Функция ПолучитьОбщийОтборВыгрузки() Экспорт
	
	НастройкиОтборов = Неопределено;
	ЗначениеКонстанты = Константы.НастройкиОтборовНаВыгрузкуСервисаПрогнозирования.Получить();
	Если ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
		ХранилищеПараметров = ЗначениеКонстанты.Получить();
		Если ЗначениеЗаполнено(ХранилищеПараметров)
			И ХранилищеПараметров.Свойство("ОбщийОтборВыгрузки") Тогда
			НастройкиОтборов = ХранилищеПараметров.ОбщийОтборВыгрузки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиОтборов;
	
КонецФункции

// Возвращает список периодичностей, которые можно использовать для работы с сервисом прогнозирования.
//
// Возвращаемое значение:
//  СписокЗначений Из ПеречислениеСсылка.Периодичность - список значений периодичностей, поддерживаемых сервисом прогнозирования.
//
Функция ПоддерживаемыеПериодичностиСервисом() Экспорт
	
	ПоддерживаемыеПериодичности = Новый СписокЗначений();
	ПоддерживаемыеПериодичности.Добавить(Перечисления.Периодичность.День);
	ПоддерживаемыеПериодичности.Добавить(Перечисления.Периодичность.Неделя);
	ПоддерживаемыеПериодичности.Добавить(Перечисления.Периодичность.Месяц);
	Возврат ПоддерживаемыеПериодичности;
	
КонецФункции

#КонецОбласти

#Область РегламентныеЗадания

// Процедура обработки регламентного задания по выгрузке данных
//
Процедура ВыгрузкаДанныхВСервисПрогнозированияПродаж() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыгрузкаДанныхВСервисПрогнозированияПродаж);
	
	РегистрыСведений.ЖурналСервисаПрогнозирования.ПроверитьОчиститьЖурналСервисаПрогнозирования();
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если НастройкиСервиса.ВыгрузкаДанныхПоРасписаниюАктивна Тогда
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
		
		// 1. Полная выгрузка
		СоздатьКоллекции();
		ВыгрузитьКоллекции();
		
		// 2. Инициировать обучение по моделям, чей срок подошел.
		Если НастройкиСервиса.ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение Тогда
			ЗапуститьАвтообновлениеПрогнозов();
			
			СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
										УровеньЖурналаРегистрации.Информация,
										,
										,
										ТекущаяДатаСеанса());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки регламентного задания по загрузке данных
//
Процедура ЗагрузкаДанныхИзСервисаПрогнозированияПродаж() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаДанныхИзСервисаПрогнозированияПродаж);
	
	РегистрыСведений.ЖурналСервисаПрогнозирования.ПроверитьОчиститьЖурналСервисаПрогнозирования();
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если НастройкиСервиса.ЗагрузкаДанныхПоРасписаниюАктивна Тогда
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыПланов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыПланов КАК ВидыПланов
		|ГДЕ
		|	НЕ ВидыПланов.ПометкаУдаления
		|	И ВидыПланов.ЗаполнятьПоДаннымСервиса
		|	И ВидыПланов.ИдентификаторМоделиПрогнозирования > 0";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		МоделиПрогнозирования = Новый Массив();
		Пока Выборка.Следующий() Цикл
			МоделиПрогнозирования.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		// 1. Обновить инфо по всем ИД обучения, которые в статусе Обучение
		Для Каждого МодельПрогнозирования Из МоделиПрогнозирования Цикл
			ИнфоСтатусаОбучения = ПолучитьСтатусОбучения(МодельПрогнозирования);
			Если ИнфоСтатусаОбучения.Свойство("Статус")
				И ИнфоСтатусаОбучения.Статус = СтатусГотовКПолучению() Тогда
				ПолучитьПрогнозСервиса(МодельПрогнозирования, ИнфоСтатусаОбучения.ИдОбучения);
			КонецЕсли;
		КонецЦикла;
		
		// 2. Загрузить данные по тем ИД, по котором статус К получению
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
									УровеньЖурналаРегистрации.Информация,
									,
									,
									ТекущаяДатаСеанса());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыПодключения

// Служебный статус подключения Активен.
// 
// Возвращаемое значение:
//  Число - 
Функция СтатусПодключенияАктивен() Экспорт
	Возврат 1;
КонецФункции

// Служебный статус подключения В очереди.
// 
// Возвращаемое значение:
//  Число - 
Функция СтатусПодключенияВОчереди() Экспорт
	Возврат -1;
КонецФункции

// Служебный статус подключения Неизвестен.
// 
// Возвращаемое значение:
//  Число - 
Функция СтатусПодключенияНеПодключено() Экспорт
	Возврат 0;
КонецФункции

// Служебный статус обучения СтатусНеизвестен().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусНеизвестен() Экспорт
	Возврат НСтр("ru = 'Статус неизвестен'");
КонецФункции

// Служебный статус обучения СтатусОжидаетОбучения().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусОжидаетОбучения() Экспорт
	Возврат НСтр("ru = 'Ожидает обучения'");
КонецФункции

// Служебный статус обучения СтатусОбучается().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусОбучается() Экспорт
	Возврат НСтр("ru = 'Обучается'");
КонецФункции

// Служебный статус обучения СтатусОшибкаОбучения().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусОшибкаОбучения() Экспорт
	Возврат НСтр("ru = 'Ошибка обучения'");
КонецФункции

// Служебный статус обучения СтатусГотовКПолучению().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусГотовКПолучению() Экспорт
	Возврат НСтр("ru = 'Готов к получению'");
КонецФункции

// Служебный статус обучения СтатусЗагружен().
// 
// Возвращаемое значение:
//  Строка - 
Функция СтатусЗагружен() Экспорт
	Возврат НСтр("ru = 'Загружен'");
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСВнешнимиРесурсами

Функция ВыполнитьHTTPЗапросСКонтролемПередачиДанных(Метод,
	URLЗапроса,
	ИдКоллекции,
	ТелоЗапроса,
	Заголовки = Неопределено,
	ДобавляетсяОбъектов = 0)
	
	СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
	
	Для Счетчик = 0 По 3 Цикл
		ВозвращаемоеЗначение = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапроса);
		
		ПринятоОбъектовСервером = 0;
		Если ВозвращаемоеЗначение.ДесериализованноеЗначение <> Неопределено
			И ТипЗнч(ВозвращаемоеЗначение.ДесериализованноеЗначение["newObjects"]) = Тип("Число") Тогда
			ПринятоОбъектовСервером = ВозвращаемоеЗначение.ДесериализованноеЗначение["newObjects"];
		КонецЕсли;
		
		ИнфоКоллекции = ПолучитьИнфоКоллекцииНаСервере(ИдКоллекции);
		ТекущееКоличествоДанных = 0;
		Если ТипЗнч(ИнфоКоллекции) <> Неопределено
			И ИнфоКоллекции.Свойство("ДесериализованноеЗначение")
			И ТипЗнч(ИнфоКоллекции.ДесериализованноеЗначение) = Тип("Соответствие") Тогда
			ИнфоКоллекцииОбработанное = ИнфоКоллекции.ДесериализованноеЗначение;
			Если ИнфоКоллекцииОбработанное.Получить("info") <> Неопределено Тогда
				ТекущееКоличествоДанных = Число(ИнфоКоллекцииОбработанное["info"]["rowCount"]);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеНаСервере = (ДобавляетсяОбъектов = ПринятоОбъектовСервером);
		ДанныеНаСервереЧастично = (ДобавляетсяОбъектов <> ПринятоОбъектовСервером);
		ДанныхНетНаСервере = (ПринятоОбъектовСервером = 0);
		
		Если ДанныеНаСервере Тогда
			ВозвращаемоеЗначение.КоличествоДанныхНаСервере = ТекущееКоличествоДанных;
			Возврат ВозвращаемоеЗначение;
		ИначеЕсли ДанныхНетНаСервере Тогда
			// Произведем еще одну попытку.
		ИначеЕсли ДанныеНаСервереЧастично Тогда
			// Произошла ошибка, из-за которой данные стали некорректны.
			ТекстСообщения = ТекстСервисПринялНеВсеВыгружаемыеДанные(ДобавляетсяОбъектов, ПринятоОбъектовСервером);
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
			ВозвращаемоеЗначение.КоличествоДанныхНаСервере = ТекущееКоличествоДанных;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
	КонецЦикла;
	
	// Произошла ошибка, данные не были отправлены.
	ТекстСообщения = ТекстСервисНеПринялДанные();
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
	
	Возврат СтруктураОтвета();
	
КонецФункции

// Функция формирует запрос исходя из входных параметров
//
// Параметры:
//  ПараметрыАдреса - Массив - содержит массив параметров для формирования итогового запроса URL.
//  ПараметрыЗапроса - Соответствие - содержит соответствие параметров для формирования итогового запроса URL.
// Возвращаемое значение:
//  Строка - Итоговый запрос к API.
//
Функция СформироватьПутьЗапроса(ПараметрыАдреса, ПараметрыЗапроса = Неопределено) 
	
	НастройкиСервиса = ПолучитьАвторизационныеНастройкиСервиса(); // Запрос авторизационных данных.
	ИтоговыйЗапрос = НастройкиСервиса.АдресПодключения 
		+ ?(Прав(НастройкиСервиса.АдресПодключения, 1) = "/", "", "/") + "api/v3/";
	
	Для каждого Параметр Из ПараметрыАдреса Цикл
		ОбработанныйПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Параметр,
			Формат(Параметр, "ЧГ="));
		ИтоговыйЗапрос = ИтоговыйЗапрос + ?(Прав(ИтоговыйЗапрос, 1) = "/", "", "/") + ОбработанныйПараметр;
	КонецЦикла;
	
	Если ТипЗнч(ПараметрыЗапроса) = Тип("Соответствие") Тогда 
		Если ПараметрыЗапроса.Количество() > 0 Тогда
			ИтоговыйЗапрос = ИтоговыйЗапрос + "?";
		КонецЕсли;
		Для каждого Параметр Из ПараметрыЗапроса Цикл
			ИтоговыйЗапрос = ИтоговыйЗапрос + Параметр.Ключ + "=" + Параметр.Значение + "&";
		КонецЦикла;
		ИтоговыйЗапрос = Лев(ИтоговыйЗапрос, СтрДлина(ИтоговыйЗапрос) - ?(Прав(ИтоговыйЗапрос, 1) = "&", 1, 0));
	КонецЕсли;
	
	Возврат ИтоговыйЗапрос
	
КонецФункции

#КонецОбласти

#Область Разное

Функция ВыгрузитьКатегориальнуюКоллекцию(ИмяКоллекции)
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
		СводкаОбменаДанными.ТекстОшибки         = ТекстОшибки;
		СводкаОбменаДанными.ЕстьОшибка          = Истина;
		СводкаОбменаДанными.ДатаЗавершения      = ТекущаяДатаСеанса();
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(
			СводкаОбменаДанными);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[ИмяКоллекции];
	Выгружать = ИнфоОКоллекции.Выгружать;
	
	Если Не Выгружать Тогда
		Возврат Истина;
	КонецЕсли;
	
	СводкаПоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(ИмяКоллекции);
	ИдКоллекции = СтрЗаменить(СводкаПоКоллекции.ИдКоллекции, " ", "");
	Если ПустаяСтрока(ИдКоллекции)
		Или Число(ИдКоллекции) < 1 Тогда
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
		СводкаОбменаДанными.ТекстОшибки         = ТекстНеПолученИдентификаторКоллекции(ИмяКоллекции);
		СводкаОбменаДанными.ЕстьОшибка          = Истина;
		СводкаОбменаДанными.ДатаЗавершения      = ТекущаяДатаСеанса();
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	ДанныеВыгружались = СводкаПоКоллекции.ДатаНачалаПоследнейВыгрузки > Дата(1, 1, 1);
	
	ДоступныеРеквизиты = ИнфоОКоллекции.ВложенноеОписание;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(Число(ИдКоллекции));
	
	Если ДанныеВыгружались Тогда
		// Удаление данных на сервере и полная выгрузка.
		Метод = "PUT";
	Иначе
		Метод = "POST";
	КонецЕсли;
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ВыгружаемыеДанныеИсходныйНабор = СервисПрогнозированияПереопределяемый.ПолучитьИсходнуюКоллекцию(ИмяКоллекции);
	
	СводкаПоКоллекции.ДатаНачалаПоследнейВыгрузки = ТекущаяДатаСеанса();
	
	ОбщееКоличествоОбъектов = 0;
	ТекущееКоличествоДанныхНаСервере = 0;
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	ТекущееКоличествоОбъектов = 0;
	ДиапазоныВыгрузки = ОпределитьДиапазоны(ВыгружаемыеДанныеИсходныйНабор, НастройкиСервиса.ПорцияВыгрузкиКатегориальныхДанных);
	Для Каждого Диапазон Из ДиапазоныВыгрузки Цикл
		
		ИсходныйНабор = ОтфильтроватьИсходныйНаборПоДиапазону(ВыгружаемыеДанныеИсходныйНабор, Диапазон);
		ВыгружаемыеДанные = СервисПрогнозированияПереопределяемый.ПолучитьКоллекцию(ИмяКоллекции, ИсходныйНабор, НастройкиСервиса);
		
		ПреобразованныеДанные = ТаблицуЗначенийКатегориальнойКоллекцииВМассивСтруктур(
			ВыгружаемыеДанные, ДоступныеРеквизиты); // Массив -
		ТекущееКоличествоОбъектов = ПреобразованныеДанные.Количество();
		ОбщееКоличествоОбъектов   = ОбщееКоличествоОбъектов + ТекущееКоличествоОбъектов;
		
		Если ТекущееКоличествоОбъектов > 0 Тогда
			ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ПреобразованныеДанные, ЕстьОшибки);
			
			Если ЕстьОшибки Тогда
				ТекстОшибки = ТекстОшибкиФормированияОбъектаДляВыгрузки();
				Прервать;
			КонецЕсли;
			
			СтруктураОтвета = Неопределено;
			Если НастройкиСервиса.РазрешенОбменССервисом Тогда
				СтруктураОтвета = ВыполнитьHTTPЗапросСКонтролемПередачиДанных(Метод,
					URLЗапроса,
					ИдКоллекции,
					ТелоЗапросаJSON,
					Заголовки,
					ТекущееКоличествоОбъектов);
				ТекущееКоличествоДанныхНаСервере = СтруктураОтвета.КоличествоДанныхНаСервере;
				ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, ИмяКоллекции);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Метод = "PUT" Тогда
			СводкаПоКоллекции.ДатаНачалаПоследнейВыгрузки = ТекущаяДатаСеанса();
			Метод = "POST"; // Удаление имеющейся коллекции на сервере требуется только в первый раз.
		КонецЕсли;
		
		СводкаПоКоллекции.ДатаПоследнейВыгрузки = ТекущаяДатаСеанса();
		СводкаПоКоллекции.ИдКоллекции = Число(ИдКоллекции);
		СводкаПоКоллекции.КоличествоДанныхВыгруженное = ОбщееКоличествоОбъектов;
		СводкаПоКоллекции.КоличествоДанныхНаСервере = ТекущееКоличествоДанныхНаСервере;
		СводкаПоКоллекции.ИзмененФормат = Ложь;
		СводкаПоКоллекции.ИзмененыОтборы = Ложь;
		
		РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(ИмяКоллекции, СводкаПоКоллекции);
		
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ДатаЗавершения = ТекущаяДатаСеанса();
		СводкаОбменаДанными.ВыгруженоОбъектовКоллекции = СводкаОбменаДанными.ВыгруженоОбъектовКоллекции + ТекущееКоличествоОбъектов;
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		
		Если Не СводкаОбменаДанными.ОбменДаннымиАктивен Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
		СводкаОбменаДанными.ТекстОшибки = ТекстОшибки;
		СводкаОбменаДанными.ЕстьОшибка = Истина;
		СводкаОбменаДанными.ДатаЗавершения = ТекущаяДатаСеанса();
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыгрузитьПериодическуюКоллекцию(ИмяКоллекции)
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
		СводкаОбменаДанными.ТекстОшибки         = ТекстОшибки;
		СводкаОбменаДанными.ЕстьОшибка          = Истина;
		СводкаОбменаДанными.ДатаЗавершения      = ТекущаяДатаСеанса();
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(
			СводкаОбменаДанными);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	ИнфоОКоллекции = НастройкиСервиса.Коллекции[ИмяКоллекции];
	Выгружать = ИнфоОКоллекции.Выгружать;
	
	Если Не Выгружать Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДоступныеРеквизиты = ИнфоОКоллекции.ВложенноеОписание;
	
	СводкаПоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(ИмяКоллекции);
	ИдКоллекции = СтрЗаменить(СводкаПоКоллекции.ИдКоллекции, " ", "");
	Если ПустаяСтрока(ИдКоллекции)
		Или Число(ИдКоллекции) < 1 Тогда
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
		СводкаОбменаДанными.ТекстОшибки         = ТекстНеПолученИдентификаторКоллекции(ИмяКоллекции);
		СводкаОбменаДанными.ЕстьОшибка          = Истина;
		СводкаОбменаДанными.ДатаЗавершения      = ТекущаяДатаСеанса();
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(
			СводкаОбменаДанными);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	ИзмененыОтборы = СводкаПоКоллекции.ИзмененыОтборы;
	ДатаАктуальности = СводкаПоКоллекции.ДатаАктуальности;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(Число(ИдКоллекции));
	
	Если ИзмененыОтборы Тогда
		// Удаление данных на сервере и полная выгрузка.
		Метод = "PUT";
		СводкаПоКоллекции.ДатаАктуальности = Дата(1, 1, 1);
		РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(ИмяКоллекции, СводкаПоКоллекции);
	Иначе
		Метод = "POST";
	КонецЕсли;
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ДатаАктуальности = СводкаПоКоллекции.ДатаАктуальности;
	НоваяДатаАктуальности = ДатаАктуальности;
	КоличествоНеудач = 0;
	
	СводкаПоКоллекции.ДатаНачалаПоследнейВыгрузки = ТекущаяДатаСеанса();
	
	ОбщееКоличествоОбъектов = 0;
	ТекущееКоличествоДанныхНаСервере = 0;
	ЕстьОшибки = Ложь;
	ТекстОшибки = "";
	
	Пока ЕстьНевыгруженныйПериод(ИмяКоллекции) Цикл
		
		ПорцияВыгрузки = СервисПрогнозированияПереопределяемый.ПолучитьКоллекцию(ИмяКоллекции, Неопределено, НастройкиСервиса);
		Если ПорцияВыгрузки.Свойство("ПричинаОшибки") Тогда
			ЕстьОшибки = Истина;
			Если ПорцияВыгрузки.ПричинаОшибки = "НеУказанСценарийПрогнозированияКонтрольныхПланов" Тогда
				ТекстОшибки = ТекстОшибкиНеУказанСценарийПрогнозированияКонтрольныхПланов();
			КонецЕсли;
			Прервать;
		КонецЕсли;
		
		СброситьДатуНачалаВыгрузки = Ложь;
		НоваяДатаНачалаВыгрузки = Неопределено;
		
		ТекущееКоличествоОбъектов = 0;
		Если ПорцияВыгрузки.КоличествоДанных > 0 Тогда
			
			ДанныеКоллекции = ТаблицуЗначенийПериодическойКоллекцииВМассивСтруктур(
				ПорцияВыгрузки.Коллекция, ДоступныеРеквизиты); // Структура -
			ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ДанныеКоллекции.ПреобразованныеДанные, ЕстьОшибки);
			
			Если ЕстьОшибки Тогда
				ТекстОшибки = ТекстОшибкиФормированияОбъектаДляВыгрузки();
				Прервать;
			КонецЕсли;
			
			ТекущееКоличествоОбъектов = ДанныеКоллекции.КоличествоДанных;
			ОбщееКоличествоОбъектов = ОбщееКоличествоОбъектов + ТекущееКоличествоОбъектов;
			
			СтруктураОтвета = Неопределено;
			Если НастройкиСервиса.РазрешенОбменССервисом Тогда
				СтруктураОтвета = ВыполнитьHTTPЗапросСКонтролемПередачиДанных(Метод,
					URLЗапроса,
					ИдКоллекции,
					ТелоЗапросаJSON,
					Заголовки,
					ТекущееКоличествоОбъектов);
				ТекущееКоличествоДанныхНаСервере = СтруктураОтвета.КоличествоДанныхНаСервере;
				ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, ИмяКоллекции);
			КонецЕсли;
			
			Если Метод = "PUT" Тогда
				СброситьДатуНачалаВыгрузки = Истина;
				НоваяДатаНачалаВыгрузки = ТекущаяДатаСеанса();
				Метод = "POST"; // Удаление имеющейся коллекции на сервере требуется только в первый раз.
			КонецЕсли;
			
		КонецЕсли;
		
		// Следующую итерацию начинаем со следующего дня.
		НоваяДатаАктуальности = НачалоДня(ПорцияВыгрузки.ДатаОкончанияВыборкиПорции) + 86400;
		
		Если ДатаАктуальности = НоваяДатаАктуальности Тогда
			КоличествоНеудач = КоличествоНеудач + 1;
			Если КоличествоНеудач > 5 Тогда
				ЕстьОшибки = Истина;
				ТекстОшибки = ТекстОшибкиПроизошлоЗацикливание();
				Прервать;
			КонецЕсли;
		Иначе
			ДатаАктуальности = НоваяДатаАктуальности;
			КоличествоНеудач = 0;
		КонецЕсли;
		
		СводкаПоКоллекции.ДатаАктуальности = НоваяДатаАктуальности;
		СводкаПоКоллекции.ДатаПоследнейВыгрузки = ТекущаяДатаСеанса();
		СводкаПоКоллекции.ИзмененыОтборы = Ложь;
		СводкаПоКоллекции.ИзмененФормат = Ложь;
		СводкаПоКоллекции.ИдКоллекции = Число(ИдКоллекции);
		СводкаПоКоллекции.КоличествоДанныхВыгруженное = ОбщееКоличествоОбъектов;
		СводкаПоКоллекции.КоличествоДанныхНаСервере = ТекущееКоличествоДанныхНаСервере;
		
		Если СброситьДатуНачалаВыгрузки Тогда
			СводкаПоКоллекции.ДатаНачалаПоследнейВыгрузки = НоваяДатаНачалаВыгрузки;
		КонецЕсли;
		
		РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(ИмяКоллекции, СводкаПоКоллекции);
		
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ДатаЗавершения = ТекущаяДатаСеанса();
		СводкаОбменаДанными.ВыгруженоОбъектовКоллекции = СводкаОбменаДанными.ВыгруженоОбъектовКоллекции + ТекущееКоличествоОбъектов;
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		
		Если Не СводкаОбменаДанными.ОбменДаннымиАктивен Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		СводкаОбменаДанными = РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ПолучитьСтатусыОбменаДанными();
		СводкаОбменаДанными.ОбменДаннымиАктивен = Ложь;
		СводкаОбменаДанными.ТекстОшибки = ТекстОшибки;
		СводкаОбменаДанными.ЕстьОшибка = Истина;
		СводкаОбменаДанными.ДатаЗавершения = ТекущаяДатаСеанса();
		РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ЗаписатьСтатусыОбменаДанными(СводкаОбменаДанными);
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОчиститьИнформациюСервиса() Экспорт
	
	РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ОчиститьКоллекции();
	РегистрыСведений.СтатусыОбменаДаннымиССервисомПрогнозированияПродаж.ОчиститьСтатусыОбменаДанными();
	ОчиститьИдентификаторыМоделей();
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыМоделей()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПланов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	НЕ ВидыПланов.ПометкаУдаления
	|	И ВидыПланов.ЗаполнятьПоДаннымСервиса
	|	И ВидыПланов.ИдентификаторМоделиПрогнозирования > 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВидПлана = Выборка.Ссылка;
		
		НачатьТранзакцию();
		Попытка
			
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ВидыПланов");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ВидПлана);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			ОбъектВидПлана = ВидПлана.ПолучитьОбъект(); // СправочникОбъект.ВидыПланов
			ОбъектВидПлана.ИдентификаторМоделиПрогнозирования = -1;
			ОбъектВидПлана.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ВидыПланов,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = ТекстПриОчисткеИдентификатораВидаПланаПроизошлаОшибка(
				КраткоеПредставлениеОшибки, Строка(ВидПлана));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ВидПлана);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьАвтообновлениеПрогнозов()
	
	Если Не ПустаяСтрока(ПроверитьКонфигурацииКоллекций()) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыПланов.Ссылка КАК Ссылка,
	|	ВидыПланов.ПериодичностьОбновленияПрогноза КАК ПериодичностьОбновленияПрогноза,
	|	ВидыПланов.КоличествоОбновленийЗаПериод КАК КоличествоОбновленийЗаПериод
	|ИЗ
	|	Справочник.ВидыПланов КАК ВидыПланов
	|ГДЕ
	|	НЕ ВидыПланов.ПометкаУдаления
	|	И ВидыПланов.ЗаполнятьПоДаннымСервиса
	|	И ВидыПланов.АвтоматическиОбновлятьПрогноз";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		День = 86400;
		ДнейДоСледующегоОбновления = День * Выборка.КоличествоОбновленийЗаПериод;
		Если Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Неделя Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 7;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Декада Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 10;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Месяц Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 31;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Квартал Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 92;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Полугодие Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 182;
		ИначеЕсли Выборка.ПериодичностьОбновленияПрогноза = Перечисления.Периодичность.Год Тогда
			ДнейДоСледующегоОбновления = ДнейДоСледующегоОбновления * 365;
		КонецЕсли;
		
		ИнфоОбучения = РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ИдентификаторыОбученияВидаПлана(
			Выборка.Ссылка, Ложь);
		Если ИнфоОбучения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИнфоОбучения.ВремяИзмененияСостояния + ДнейДоСледующегоОбновления <= ТекущаяДатаСеанса() Тогда
			ПроверитьСоздатьМодель(Выборка.Ссылка);
			ПроверитьСоздатьКонфигурациюМодели(Выборка.Ссылка);
			ЗапуститьОбучение(Выборка.Ссылка);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицуЗначенийКатегориальнойКоллекцииВМассивСтруктур(ТаблицаЗначений,
	ДоступныеРеквизиты = Неопределено, Диапазон = Неопределено)
	
	МассивСтруктур = Новый Массив();
	Если ТаблицаЗначений.Количество() = 0 Тогда
		Возврат МассивСтруктур;
	КонецЕсли;
	
	ЛеваяГраница  = 0;
	ПраваяГраница = ТаблицаЗначений.Количество() - 1;
	Если Диапазон <> Неопределено Тогда
		ЛеваяГраница  = Диапазон["ЛеваяГраница"];
		ПраваяГраница = Диапазон["ПраваяГраница"];
	КонецЕсли;
	
	Для ТекущийИндекс = ЛеваяГраница По ПраваяГраница Цикл
		
		СтрокаТаблицы = ТаблицаЗначений[ТекущийИндекс];
		ДанныеОбъекта = Новый Структура();
		
		Для Каждого КлючЗначениеРеквизита Из ДоступныеРеквизиты Цикл
			ОписаниеРеквизита = КлючЗначениеРеквизита.Значение;
			
			Если ОписаниеРеквизита.Выгружать Тогда
				ИмяВСервисе = ОписаниеРеквизита.ИмяВСервисе;
				
				Если ОписаниеРеквизита.ЭтоПользовательскоеПоле Тогда
					ЧастиКлюча         = СтрРазделить(ОписаниеРеквизита.ИмяВИсточнике, "_");
					ТипРеквизита       = ЧастиКлюча[0];
					ИмяРеквизита       = ЧастиКлюча[1];
					ИмяРеквизитаСТипом = ТипРеквизита + "_" + ИмяРеквизита;
					ЗначениеРеквизита  = СтрокаТаблицы[ИмяРеквизитаСТипом];
					Если ЗначениеРеквизита = Неопределено Тогда
						ДанныеОбъекта.Вставить(ИмяВСервисе, "");
						Продолжить;
					КонецЕсли;
					Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
						ЗначениеРеквизита = Строка(ЗначениеРеквизита);
						ДанныеОбъекта.Вставить(ИмяВСервисе, ЗначениеРеквизита);
						Продолжить;
					КонецЕсли;
					ДанныеОбъекта.Вставить(ИмяВСервисе, ПреобразоватьВТипСервиса(ЗначениеРеквизита));
				Иначе
					ЗначениеРеквизита = СтрокаТаблицы[ОписаниеРеквизита.ИмяВИсточнике];
					Если ТипЗнч(ЗначениеРеквизита) = Тип("Число") Тогда
						ЗначениеРеквизита = Строка(ЗначениеРеквизита);
						ДанныеОбъекта.Вставить(ИмяВСервисе, ЗначениеРеквизита);
						Продолжить;
					КонецЕсли;
					ДанныеОбъекта.Вставить(ИмяВСервисе, ПреобразоватьВТипСервиса(ЗначениеРеквизита));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеОбъекта.Вставить("timeseries", Новый Массив()); // У категориальных коллекций не заполняется временной ряд.
		МассивСтруктур.Добавить(ДанныеОбъекта);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

Функция ТаблицуЗначенийПериодическойКоллекцииВМассивСтруктур(ТаблицаЗначений,
	ДоступныеРеквизиты = Неопределено, Диапазон = Неопределено)
	
	ДанныеКоллекции  = Новый Структура();
	МассивСтруктур   = Новый Массив();
	КоличествоДанных = 0;
	
	Если ТаблицаЗначений.Количество() = 0 Тогда
		ДанныеКоллекции.Вставить("ПреобразованныеДанные", МассивСтруктур);
		ДанныеКоллекции.Вставить("КоличествоДанных",      КоличествоДанных);
		Возврат ДанныеКоллекции;
	КонецЕсли;
	
	ЛеваяГраница  = 0;
	ПраваяГраница = ТаблицаЗначений.Количество() - 1;
	Если Диапазон <> Неопределено Тогда
		ЛеваяГраница  = Диапазон["ЛеваяГраница"];
		ПраваяГраница = Диапазон["ПраваяГраница"];
	КонецЕсли;
	
	ПроверочныеРеквизиты = Новый Структура();
	
	Для ТекущийИндекс = ЛеваяГраница По ПраваяГраница Цикл
		
		ДобавленыКлючевыеИСтатическиеРеквизиты = Истина;
		СтрокаТаблицы = ТаблицаЗначений[ТекущийИндекс];
		
		Если ТекущийИндекс = 0 Тогда
			ДанныеОбъекта                          = Новый Структура();
			ДинамическиеДанныеОбъекта              = Новый Массив();
			ДобавленыКлючевыеИСтатическиеРеквизиты = Ложь;
		Иначе
			СледующийОбъект = Ложь;
			Для Каждого КлючЗначениеПроверочногоРеквизита Из ПроверочныеРеквизиты Цикл
				ПроверяемыйРеквизит = СтрокаТаблицы[КлючЗначениеПроверочногоРеквизита.Ключ];
				Если ПроверяемыйРеквизит <> КлючЗначениеПроверочногоРеквизита.Значение Тогда
					СледующийОбъект = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СледующийОбъект Тогда
				// Заполнение динамических данных по датам, перед началом заполнения следующего объекта.
				КоличествоДанных = КоличествоДанных + ДинамическиеДанныеОбъекта.Количество();
				ДанныеОбъекта.Вставить("timeseries", ДинамическиеДанныеОбъекта);
				МассивСтруктур.Добавить(ДанныеОбъекта);
				
				ДанныеОбъекта                          = Новый Структура();
				ДинамическиеДанныеОбъекта              = Новый Массив();
				ДобавленыКлючевыеИСтатическиеРеквизиты = Ложь;
			КонецЕсли;
		КонецЕсли;
		ДатаЗаписиОбъекта = СтрокаТаблицы.Дата;
		ДинамическиеРеквизиты = Новый Структура();
		ДинамическиеРеквизиты.Вставить("date", ДатаЗаписиОбъекта);
		
		Для Каждого КлючЗначениеРеквизита Из ДоступныеРеквизиты Цикл
			ОписаниеРеквизита = КлючЗначениеРеквизита.Значение;
			
			Если ОписаниеРеквизита.Выгружать Тогда
				
				Если ОписаниеРеквизита.ТипДанных = "string"
					И ДобавленыКлючевыеИСтатическиеРеквизиты Тогда
					Продолжить;
				КонецЕсли;
				ИмяВСервисе   = ОписаниеРеквизита.ИмяВСервисе;
				ИмяВИсточнике = ОписаниеРеквизита.ИмяВИсточнике;
				
				Если ОписаниеРеквизита.ЭтоПользовательскоеПоле Тогда
					ЧастиКлюча         = СтрРазделить(ИмяВИсточнике, "_");
					ТипРеквизита       = ЧастиКлюча[0];
					ИмяРеквизита       = ЧастиКлюча[1];
					ИмяРеквизитаСТипом = ТипРеквизита + "_" + ИмяРеквизита;
					ЗначениеРеквизита  = СтрокаТаблицы[ИмяРеквизитаСТипом];
					Если ОписаниеРеквизита.ТипДанных = "string" Тогда
						ПроверочныеРеквизиты.Вставить(ИмяВИсточнике, ЗначениеРеквизита);
						Если ЗначениеРеквизита = Неопределено Тогда
							ДанныеОбъекта.Вставить(ИмяВСервисе, "");
							Продолжить;
						КонецЕсли;
						ДанныеОбъекта.Вставить(ИмяВСервисе, ПреобразоватьВТипСервиса(ЗначениеРеквизита));
					Иначе // number.
						Если ЗначениеРеквизита = Неопределено Тогда
							ДинамическиеРеквизиты.Вставить(ИмяВСервисе, 0);
							Продолжить;
						КонецЕсли;
						ДинамическиеРеквизиты.Вставить(ИмяВСервисе, ПреобразоватьВТипСервиса(ЗначениеРеквизита));
					КонецЕсли;
				Иначе
					Если ОписаниеРеквизита.ТипДанных = "string" Тогда
						ЗначениеРеквизита = СтрокаТаблицы[ИмяВИсточнике];
						ПроверочныеРеквизиты.Вставить(ИмяВИсточнике, ЗначениеРеквизита);
						ДанныеОбъекта.Вставить(ИмяВСервисе, ПреобразоватьВТипСервиса(ЗначениеРеквизита));
					Иначе // number.
						ДинамическиеРеквизиты.Вставить(ИмяВСервисе,
							ПреобразоватьВТипСервиса(СтрокаТаблицы[ИмяВИсточнике]));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		ДинамическиеДанныеОбъекта.Добавить(ДинамическиеРеквизиты);
		
	КонецЦикла;
	
	// Добавление последней пары обекта.
	Если ДинамическиеДанныеОбъекта.Количество() > 0 Тогда
		КоличествоДанных = КоличествоДанных + ДинамическиеДанныеОбъекта.Количество();
		ДанныеОбъекта.Вставить("timeseries", ДинамическиеДанныеОбъекта);
		МассивСтруктур.Добавить(ДанныеОбъекта);
	КонецЕсли;
	
	ДанныеКоллекции.Вставить("ПреобразованныеДанные", МассивСтруктур);
	ДанныеКоллекции.Вставить("КоличествоДанных",      КоличествоДанных);
	Возврат ДанныеКоллекции;
	
КонецФункции

Функция ПреобразоватьВТипСервиса(ВходящееЗначение)
	
	ТипЗначения = ТипЗнч(ВходящееЗначение);
	МетаданныеЗначения = Неопределено; // ОбъектМетаданных. 
	
	ЭтоПримитивныйТип =  ТипЗначения = Тип("Дата")
		Или ТипЗначения = Тип("Число")
		Или ТипЗначения = Тип("Строка")
		Или ТипЗначения = Тип("Булево")
		Или ТипЗначения = Тип("Неопределено")
		Или ТипЗначения = Тип("Null");
	
	Если Не ЭтоПримитивныйТип Тогда
		МетаданныеЗначения = ВходящееЗначение.Метаданные(); // ОбъектМетаданных. 
	КонецЕсли;
	
	Если ТипЗначения = Тип("Null") Тогда
		Возврат "";
	ИначеЕсли ТипЗначения = Тип("Неопределено") Тогда
		Возврат "";
	ИначеЕсли ТипЗначения = Тип("Число") Тогда
		Возврат ВходящееЗначение;
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда
		Возврат Строка(Формат(ВходящееЗначение, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ИначеЕсли ТипЗначения = Тип("ПеречислениеСсылка.ДниНедели") Тогда
		
		Если ВходящееЗначение = Перечисления.ДниНедели.ПустаяСсылка() Тогда
			Возврат "";
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Понедельник Тогда
			Возврат "Mon";
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Вторник Тогда
			Возврат "Tue";
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Среда Тогда
			Возврат "Wed";
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Четверг Тогда
			Возврат "Thu";
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Пятница Тогда
			Возврат "Fri";
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Суббота Тогда
			Возврат "Sat";
		ИначеЕсли ВходящееЗначение = Перечисления.ДниНедели.Воскресенье Тогда
			Возврат "Sun";
		КонецЕсли;
		
	ИначеЕсли МетаданныеЗначения <> Неопределено
		И (ОбщегоНазначения.ЭтоСправочник(МетаданныеЗначения)
			Или ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначения)) Тогда
		Возврат Строка(ВходящееЗначение.УникальныйИдентификатор());
	ИначеЕсли МетаданныеЗначения <> Неопределено
		И ОбщегоНазначения.ЭтоПеречисление(МетаданныеЗначения)
		И МетаданныеЗначения.Имя = Метаданные.Перечисления.Периодичность.Имя Тогда
		
		Если ВходящееЗначение = Перечисления.Периодичность.День Тогда
			Возврат "day";
		ИначеЕсли ВходящееЗначение = Перечисления.Периодичность.Неделя Тогда
			Возврат "week";
		ИначеЕсли ВходящееЗначение = Перечисления.Периодичность.Месяц Тогда
			Возврат "month";
		Иначе
			ВызватьИсключение ТекстВыбраннаяПериодичностьНеПредусмотрена(Строка(ВходящееЗначение));
		КонецЕсли;
	ИначеЕсли МетаданныеЗначения <> Неопределено
		И ОбщегоНазначения.ЭтоПеречисление(МетаданныеЗначения) Тогда
		
		Возврат Строка(ВходящееЗначение);
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда
		Возврат СокрЛП(ВходящееЗначение);
	Иначе
		Возврат Строка(ВходящееЗначение);
	КонецЕсли;
	
КонецФункции

// Функция разбирает входящую строку и определяет структуру URI
//
Функция СтруктураURI(Знач СтрокаURI)
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Функция десериализует строку формата JSON, полученную от сервера, и возвращает результат этого действия.
//
// Параметры:
//  СтрокаВФорматеJSON - Строка - Строка в формате JSON.
//
// Возвращаемое значение:
//  Соответствие, Массив, Структура - десериализованное значение чтения JSON.
//
Функция ПрочитатьТелоЗапросаJSON(СтрокаВФорматеJSON)
	
	ДесериализованноеЗначение = Неопределено;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаВФорматеJSON);
	// Строка может быть не в формате JSON (например при ошибке)
	Попытка
		ДесериализованноеЗначение = ПрочитатьJSON(ЧтениеJSON, Истина);
	Исключение
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , , 
			ТекстНевозможноПрочитатьJSON(СтрокаВФорматеJSON));
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат ДесериализованноеЗначение;
	
КонецФункции

// Функция формирует строку JSON из передаваемого для записи объекта.
//
// Параметры:
//  ЗаписываемыйОбъект - Произвольный - записываемый объект в тело запроса JSON.
//
// Возвращаемое значение:
//  Строка - Строка в формате JSON
//
Функция СформироватьТелоЗапросаJSON(ЗаписываемыйОбъект, ЕстьОшибки = Ложь)
	
	СтрокаJSON = Новый ЗаписьJSON;
	СтрокаJSON.УстановитьСтроку();
	Попытка
		ЗаписатьJSON(СтрокаJSON, ЗаписываемыйОбъект);
	Исключение
		ЕстьОшибки = Истина;
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстНевозможноСформироватьJSON(ЗаписываемыйОбъект, ОписаниеОшибки));
	КонецПопытки;
	ТелоЗапросаJSON = СтрокаJSON.Закрыть();
	
	Возврат ТелоЗапросаJSON;
	
КонецФункции

Функция ПолучитьПредставлениеСвойстваСервиса(ИмяСвойства, ВыдаватьОшибку = Истина)
	
	СоответствиеИменСвойств = СоответствиеИменСвойств();
	Если СоответствиеИменСвойств.Получить(ИмяСвойства) = Неопределено Тогда
		Если ВыдаватьОшибку Тогда
			ТекстСообщения = ТекстНеНайденаНастройка(ИмяСвойства);
			ВызватьИсключение ТекстСообщения;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоответствиеИменСвойств[ИмяСвойства];
	
КонецФункции

Функция ЕстьСвойствоСтруктурыСоответствия(Коллекция, ИмяСвойства)
	
	Если ТипЗнч(Коллекция) = Тип("Структура") Тогда
		Возврат Коллекция.Свойство(ИмяСвойства);
	ИначеЕсли ТипЗнч(Коллекция) = Тип("Соответствие") Тогда
		Возврат Коллекция[ИмяСвойства] <> Неопределено;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ИзвлечьДатыИзСтроки(Строка)
	
	МассивДат = Новый Массив();
	
	НачальнаяПозиция = 1;
	
	ПредыдущийРазделитель = СтрНайти(Строка, "-", , НачальнаяПозиция);
	Пока ПредыдущийРазделитель > 0 Цикл
		СледующийРазделитель = СтрНайти(Строка, "-", , ПредыдущийРазделитель + 1);
		Если СледующийРазделитель - ПредыдущийРазделитель = 3 Тогда
			Год = Сред(Строка, ПредыдущийРазделитель - 4, 4);
			Месяц = Сред(Строка, ПредыдущийРазделитель + 1, 2);
			День = Сред(Строка, СледующийРазделитель + 1, 2);
			МассивДат.Добавить(Дата(Год, Месяц, День));
		КонецЕсли;
		ПредыдущийРазделитель = СледующийРазделитель;
	КонецЦикла;
	
	Возврат МассивДат;
	
КонецФункции

Функция ИзвлечьЧислаИзСтроки(Строка)
	
	МассивЧисел = Новый Массив();
	
	СтрокаЛишнихБукв = СтрСоединить(СтрРазделить(Строка, "-0123456789."));
	ИскомыеЧисла = СтрРазделить(Строка, СтрокаЛишнихБукв, Ложь);
	Для Каждого НайденноеЧисло Из ИскомыеЧисла Цикл
		Если НайденноеЧисло = "."
			Или НайденноеЧисло = "-" Тогда
			Продолжить;
		КонецЕсли;
		МассивЧисел.Добавить(Число(НайденноеЧисло));
	КонецЦикла;
	
	Возврат МассивЧисел;
	
КонецФункции

Функция ОпределитьДиапазоны(КоллекцияДляОпределения, КоличествоВПорции = 1000)
	
	Диапазоны = Новый Массив();
	
	КоличествоЭлементов = КоллекцияДляОпределения.Количество();
	ЦелыхПорций = Цел(КоличествоЭлементов / КоличествоВПорции);
	ПоследняяПорция = КоличествоЭлементов % КоличествоВПорции;
	
	Если ЦелыхПорций > 0 Тогда
		Для НомерПорции = 0 По ЦелыхПорций - 1 Цикл
			ЭлементДиапазона = Новый Структура("ЛеваяГраница, ПраваяГраница");
			ЭлементДиапазона["ЛеваяГраница"] = НомерПорции * КоличествоВПорции;
			ЭлементДиапазона["ПраваяГраница"] = НомерПорции * КоличествоВПорции + КоличествоВПорции - 1;
			Диапазоны.Добавить(ЭлементДиапазона);
		КонецЦикла;
	КонецЕсли;
	
	Если ПоследняяПорция > 0 Тогда
		ЭлементДиапазона = Новый Структура("ЛеваяГраница, ПраваяГраница");
		ЭлементДиапазона["ЛеваяГраница"] = ЦелыхПорций * КоличествоВПорции;
		ЭлементДиапазона["ПраваяГраница"] = КоличествоЭлементов - 1;
		Диапазоны.Добавить(ЭлементДиапазона);
	КонецЕсли;
	
	Возврат Диапазоны;
	
КонецФункции

Функция ОтфильтроватьИсходныйНаборПоДиапазону(ИсходныйНабор, Диапазон)
	
	ОтфильтрованныйНабор = Новый Массив;
	
	Для Индекс = Диапазон.ЛеваяГраница По Диапазон.ПраваяГраница Цикл
		ОтфильтрованныйНабор.Добавить(ИсходныйНабор[Индекс]);
	КонецЦикла;
	
	Возврат ОтфильтрованныйНабор;
	
КонецФункции

Процедура ПроверитьВидПлана(ВидПлана)
	
	Если Не ЗначениеЗаполнено(ВидПлана) Тогда
		ВызватьИсключение ТекстПустойВидПлана();
	ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПлана, "ЗаполнятьПоДаннымСервиса") Тогда
		ВызватьИсключение ТекстНекорректныйВидПлана();
	КонецЕсли;
	
КонецПроцедуры

Функция ПередВызовомМетодаСервиса()
	
	ПолучитьСтатусПодключенияКСервису();
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если НастройкиСервиса.СтатусПодключения = СтатусПодключенияАктивен() Тогда
		ТекстОшибки = "";
	ИначеЕсли НастройкиСервиса.СтатусПодключения = СтатусПодключенияВОчереди() Тогда
		ТекстОшибки = ТекстОжидаетсяПодключение();
	Иначе
		ТекстОшибки = ТекстНеПодключено();
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

// Создать коллекцию.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - 
//  ТипКоллекции - Строка - Коллекция (по данным сервиса)
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция СоздатьКоллекцию(Коллекция, ТипКоллекции = "sales")
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	
	Метод = "POST";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	ОписаниеКоллекции = НастройкиСервиса.Коллекции[Коллекция]; // см. СервисПрогнозированияПереопределяемыйКлиентСервер.ОписаниеВыгружаемогоЭлементаДанных.
	Категориальный = ОписаниеКоллекции.Категориальный;
	
	КонфигурацияКоллекции = Новый Структура();
	Если Не Категориальный Тогда
		СвойстваВременногоРядаКоллекции = Новый Структура();
		СвойстваВременногоРядаКоллекции.Вставить("dateGranularity", "day");
		КонфигурацияКоллекции.Вставить("tsProperties", СвойстваВременногоРядаКоллекции);
	КонецЕсли;
	
	КлючиОсновнойКоллекции = КлючиОсновнойКоллекции();
	
	СпецификацияПолейКоллекции = Новый Массив();
	Для Каждого КлючЗначениеРеквизита Из ОписаниеКоллекции.ВложенноеОписание Цикл
		
		ОписаниеРеквизита = КлючЗначениеРеквизита.Значение;
		Если Не ОписаниеРеквизита.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		ИмяРеквизитаВСервисе = ОписаниеРеквизита.ИмяВСервисе;
		
		Если ОписаниеРеквизита.ТипДанных = "string" Тогда
			Если ОписаниеРеквизита.Обязательный
				Или КлючиОсновнойКоллекции.Найти(ИмяРеквизитаВСервисе) <> Неопределено Тогда
				ТипРеквизита = "key";
			Иначе
				ТипРеквизита = "static";
			КонецЕсли;
		Иначе
			ТипРеквизита = "dynamic"; // По типам number ожидается dynamic.
		КонецЕсли;
		
		СвойстваПоляКоллекции = СвойстваСпецификацииПоляКоллекции();
		СвойстваПоляКоллекции.Вставить("name",     ИмяРеквизитаВСервисе);
		СвойстваПоляКоллекции.Вставить("type",     ТипРеквизита);
		СвойстваПоляКоллекции.Вставить("dataType", ОписаниеРеквизита.ТипДанных);
		СпецификацияПолейКоллекции.Добавить(СвойстваПоляКоллекции);
		
	КонецЦикла;
	КонфигурацияКоллекции.Вставить("columnProperties", СпецификацияПолейКоллекции);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("dataName", ТипКоллекции);
	ТелоЗапроса.Вставить("dataType", "timeseries"); // Одинаковый тип как у периодических, так и категориальных коллекций.
	ТелоЗапроса.Вставить("config",   КонфигурацияКоллекции);
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP", НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "ОбновлениеИнформацииОКоллекциях",
			Коллекция);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Удалить коллекцию.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - 
// 
// Возвращаемое значение:
//  см. СтруктураОтветаСервиса.
Функция УдалитьКоллекцию(Коллекция)
	
	ТекстОшибки = ПередВызовомМетодаСервиса();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СтруктураОтвета = СтруктураОтвета();
		СтруктураОтвета.ТекстОшибки = ТекстОшибки;
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	СводкаПоКоллекции= РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(Коллекция);
	ИдКоллекции = СводкаПоКоллекции.ИдКоллекции;
	
	ПараметрыАдреса = Новый Массив;
	ПараметрыАдреса.Добавить("data");
	ПараметрыАдреса.Добавить(Число(ИдКоллекции));
	
	Метод = "DELETE";
	URLЗапроса = СформироватьПутьЗапроса(ПараметрыАдреса);
	
	ТелоЗапроса = Новый Структура();
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("X-AUTH-APP",
		НастройкиСервиса.ТокенПриложения);
	
	ТелоЗапросаJSON = СформироватьТелоЗапросаJSON(ТелоЗапроса);
	
	СтруктураОтвета = Неопределено;
	Если НастройкиСервиса.РазрешенОбменССервисом Тогда
		СтруктураОтвета = ВыполнитьHTTPЗапрос(Метод, URLЗапроса, Заголовки, ТелоЗапросаJSON);
		Ответ = ОбработатьОтветСервиса(СтруктураОтвета.ДесериализованноеЗначение, "УдалениеКоллекции", Коллекция);
		СтруктураОтвета.ТекстОшибки = Ответ.ТекстОшибки;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

// Функция-конструктор ключей основной коллекции "Продажи".
//
// Возвращаемое значение:
//  Массив Из Строка -
Функция КлючиОсновнойКоллекции()
	
	КлючиКоллекции = Новый Массив();
	КлючиКоллекции.Добавить("item_id");
	КлючиКоллекции.Добавить("shop_id");
	КлючиКоллекции.Добавить("customer_id");
	КлючиКоллекции.Добавить("item_variant_id");
	
	Возврат КлючиКоллекции;
	
КонецФункции

// Функция-конструктор свойств спецификации поля коллекции "columnProperties".
//
// Возвращаемое значение:
//  Структура - где:
//     * name 		- Строка - Название поля
//     * type 		- Строка - Тип поля
//     * dataType 	- Строка - Тип данных
//
Функция СвойстваСпецификацииПоляКоллекции()
	
	СвойстваПоляКоллекции = Новый Структура();
	СвойстваПоляКоллекции.Вставить("name",     "");
	СвойстваПоляКоллекции.Вставить("type",     "");
	СвойстваПоляКоллекции.Вставить("dataType", "");
	
	Возврат СвойстваПоляКоллекции;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОтветаСервиса
Функция ПолучитьПредставлениеОбщейОшибки(СтруктураОтвета, ЭтоДействиеССобственнойОбработкойСпецифическихОшибок)
	
	ТекстОшибки = "";
	
	ОбработанныйОтвет = "";
	Если ТипЗнч(СтруктураОтвета) = Тип("Строка") Тогда
		ОбработанныйОтвет = НРег(СтруктураОтвета);
	ИначеЕсли ТипЗнч(СтруктураОтвета) = Тип("Соответствие")
			И ЗначениеЗаполнено(СтруктураОтвета["error"]) Тогда
		ОбработанныйОтвет = НРег(СтруктураОтвета["error"]);
	КонецЕсли;
	
	Если НРег(ОбработанныйОтвет) = "timeout while authorization" Тогда
		ТекстОшибки = ТекстТаймаутАутентификации();
	ИначеЕсли ОбработанныйОтвет = "application not authorized"
			Или ОбработанныйОтвет = "данные для аутентификации не найдены" Тогда
		ТекстОшибки = ТекстДанныеАутентификацииНеНайдены();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "sales collection is empty") > 0 Тогда
		ТекстОшибки = ТекстКоллекцияПродажПустая();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "no processor for that model, check if model is trained") > 0 Тогда
		ТекстОшибки = ТекстВидПланаНеОбучен();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "the json object must be str, bytes or bytearray") > 0 Тогда
		ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "list index out of range") > 0 Тогда
		ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "forbidden for user") > 0 Тогда
		ЧислаВСтроке = ИзвлечьЧислаИзСтроки(ОбработанныйОтвет);
		ТекстОшибки = ТекстНедостаточноПравДляПользователя(ЧислаВСтроке[0]);
	ИначеЕсли СтрНайти(ОбработанныйОтвет, "if specified category collection, column ""category_id"" should present in products collection") > 0 Тогда
		ТекстОшибки = ТекстНеОтмеченаКВыгрузкеКолонкаКатегория();
	ИначеЕсли ТипЗнч(СтруктураОтвета) = Тип("Соответствие") 
			И ЗначениеЗаполнено(СтруктураОтвета["error"])
			И СтрНайти(НРег(СтруктураОтвета["error"]), "the json object must be str, bytes or bytearray") > 0 Тогда
		ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли ТипЗнч(СтруктураОтвета) = Тип("Соответствие") 
			И ЗначениеЗаполнено(СтруктураОтвета["error"])
			И Не ЭтоДействиеССобственнойОбработкойСпецифическихОшибок Тогда
		ТекстОшибки = ТекстВоВремяОбращенияКСервисуПроизошлаОшибка(СтруктураОтвета["error"]);
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция ОбработатьОтветСервиса(СтруктураОтвета, ИмяДействия,
	ДополнительныйПараметр = Неопределено)
	
	Ответ = ОбработатьОтветСервисаВнутренний(СтруктураОтвета, ИмяДействия, ДополнительныйПараметр);
	Если Не ПустаяСтрока(Ответ.ТекстОшибки) Тогда
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ШаблонЗаписиЖурналаРегистрации = НСтр("ru = 'Произошла ошибка во время выполнения действия %1, текст ошибки: %2'");
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, , ,
			СтрШаблон(ШаблонЗаписиЖурналаРегистрации, ИмяДействия, Ответ.ТекстОшибки));
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Функция ОбработатьОтветСервисаВнутренний(СтруктураОтвета, ИмяДействия, ДополнительныйПараметр = Неопределено)
	
	Ответ = ОтветФункцииОбработкиОтветаСервиса();
	
	ДействияССобственнойОбработкойСпецифическихОшибок = Новый Массив();
	ДействияССобственнойОбработкойСпецифическихОшибок.Добавить("ОбновлениеИнформацииОСтатусеОбучения");
	
	ЭтоДействиеССобственнойОбработкойСпецифическихОшибок 
		= ДействияССобственнойОбработкойСпецифическихОшибок.Найти(ИмяДействия) <> Неопределено;
	
	ТекстОшибки = ПолучитьПредставлениеОбщейОшибки(СтруктураОтвета, ЭтоДействиеССобственнойОбработкойСпецифическихОшибок);
	Если Не ПустаяСтрока(ТекстОшибки)
		И Не ИмяДействия = "ПолучениеПрогнозаСервиса" Тогда
		Ответ.ТекстОшибки = ТекстОшибки;
		Возврат Ответ;
	КонецЕсли;
	
	ЭтоИтерируемыйТип = ТипЗнч(СтруктураОтвета) = Тип("Структура")
			Или ТипЗнч(СтруктураОтвета) = Тип("Соответствие")
			Или ТипЗнч(СтруктураОтвета) = Тип("Массив");
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если ИмяДействия = "РегистрацияПользователя"
		И СтруктураОтвета <> Неопределено Тогда
		
		НастройкиСервиса.ТокенПользователя = СтруктураОтвета["token"];
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
		
	ИначеЕсли ИмяДействия = "РегистрацияПриложения"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если ЭтоИтерируемыйТип Тогда
			НастройкиСервиса.ТокенПриложения = СтруктураОтвета["access_token"];
			НастройкиСервиса.ТокенОбновления = СтруктураОтвета["refresh_token"];
			НастройкиСервиса.ИдентификаторПриложения = СтруктураОтвета["application_uuid"];
			НастройкиСервиса.ДатаОбновленияТокенов = ТекущаяДатаСеанса();
			Если СтруктураОтвета["status"] = "active" Тогда
				НастройкиСервиса.СтатусПодключения = СтатусПодключенияАктивен();
				НастройкиСервиса.ИзмененАПИСервиса = Ложь;
			ИначеЕсли СтруктураОтвета["status"] = "pending" Тогда
				НастройкиСервиса.СтатусПодключения = СтатусПодключенияВОчереди();
				НастройкиСервиса.ИзмененАПИСервиса = Ложь;
			Иначе
				НастройкиСервиса.СтатусПодключения = СтатусПодключенияНеПодключено();
			КонецЕсли;
			УстановитьПривилегированныйРежим(Истина);
			ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
			УстановитьПривилегированныйРежим(Ложь);
			Если ДанныеАутентификации <> Неопределено Тогда
				НастройкиСервиса.ЛогинИТС = ДанныеАутентификации.Логин;
			КонецЕсли;
			ОбновитьНастройкиСервиса(НастройкиСервиса);
			УстановитьПараметрыСеансаНастроекСервисаПрогнозирования();
		Иначе
			Ответ.ТекстОшибки = ТекстВоВремяРегистрацииПриложенияПроизошлаОшибка(СтруктураОтвета);
			Возврат Ответ;
		КонецЕсли;
		
	ИначеЕсли ИмяДействия = "ЗаявкаНаПодключение"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если ДополнительныйПараметр = 200 Тогда
			НастройкиСервиса.ЗаявкаНаПодключениеОтправлена = Истина;
			ОбновитьНастройкиСервиса(НастройкиСервиса);
		КонецЕсли;
		
	ИначеЕсли ИмяДействия = "ПолучениеСтатуса"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если СтруктураОтвета["status"] = "active" Тогда
			НастройкиСервиса.СтатусПодключения = СтатусПодключенияАктивен();
		ИначеЕсли СтруктураОтвета["status"] = "pending" Тогда
			НастройкиСервиса.СтатусПодключения = СтатусПодключенияВОчереди();
		Иначе
			НастройкиСервиса.СтатусПодключения = СтатусПодключенияНеПодключено();
		КонецЕсли;
		
		ОбновитьНастройкиСервиса(НастройкиСервиса);
		
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОКоллекциях"
		И СтруктураОтвета <> Неопределено Тогда
		
		ИнфоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(ДополнительныйПараметр);
		ИнфоКоллекции.ИдКоллекции = СтруктураОтвета["dataID"];
		РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(ДополнительныйПараметр, ИнфоКоллекции);
		
	ИначеЕсли ИмяДействия = "УдалениеКоллекции"
		И СтруктураОтвета <> Неопределено Тогда
		
		ИнфоКоллекции = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(ДополнительныйПараметр);
		ИнфоКоллекции.ИдКоллекции                 = -1;
		ИнфоКоллекции.ИзмененФормат               = Ложь;
		ИнфоКоллекции.ДатаАктуальности            = Дата(1, 1, 1);
		ИнфоКоллекции.ДатаНачалаПоследнейВыгрузки = Дата(1, 1, 1);
		ИнфоКоллекции.ДатаПоследнейВыгрузки       = Дата(1, 1, 1);
		РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ЗаписатьИнформациюКоллекции(ДополнительныйПараметр, ИнфоКоллекции);
		
	ИначеЕсли ИмяДействия = "СозданиеМодели"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если Не ЭтоИтерируемыйТип Тогда
			Ответ.ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
			Возврат Ответ;
		КонецЕсли;
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.ВидыПланов");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", ДополнительныйПараметр);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			ВидПлана = ДополнительныйПараметр.ПолучитьОбъект(); // СправочникОбъект.ВидыПланов
			ВидПлана.ИдентификаторМоделиПрогнозирования = СтруктураОтвета["modelId"];
			ВидПлана.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ВидыПланов,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КраткоеПредставлениеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Ответ.ТекстОшибки = ТекстПриПолученииИдентификатораВидаПланаПроизошлаОшибка(КраткоеПредставлениеОшибки);
		КонецПопытки;
		
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОМоделях"
		И СтруктураОтвета <> Неопределено Тогда
		
	ИначеЕсли ИмяДействия = "СозданиеКонфигурацииМодели"
		И СтруктураОтвета <> Неопределено Тогда
		
	ИначеЕсли ИмяДействия = "ЗапускОбученияМодели"
		И СтруктураОтвета = Неопределено Тогда
		Ответ.ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли ИмяДействия = "ЗапускОбученияМодели"
		И СтруктураОтвета <> Неопределено Тогда
		
		Если Лев(СтруктураОтвета, 2) = "t_" Тогда
			СтатусОбучения = СтатусОжидаетОбучения();
			РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ЗаполнитьИдентификаторОбученияПоВидуПлана(
				ДополнительныйПараметр,
				СтруктураОтвета,
				СтатусОбучения);
			Ответ.ВозвращаемоеЗначение = СтатусОбучения;
			Возврат Ответ;
		Иначе
			Ответ.ТекстОшибки = ТекстВоВремяЗапускаОбученияПроизошлаОшибка(СтатусОбучения);
			Возврат Ответ;
		КонецЕсли;
		
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОСтатусеОбучения"
		И СтруктураОтвета = Неопределено Тогда
		Ответ.ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
	ИначеЕсли ИмяДействия = "ОбновлениеИнформацииОСтатусеОбучения"
		И СтруктураОтвета <> Неопределено Тогда
		
		ТекстОшибкиВнутренний = "";
		Готовность = 0;
		
		СтатусОбучения = СтатусОбучается();
		Если ТипЗнч(СтруктураОтвета["status"]) = Тип("Строка") Тогда
			Если НРег(СтруктураОтвета["status"]) = "pending" Тогда
				СтатусОбучения = СтатусОжидаетОбучения();
			ИначеЕсли НРег(СтруктураОтвета["status"]) = "progress" Тогда
				СтатусОбучения = СтатусОбучается();
			ИначеЕсли НРег(СтруктураОтвета["status"]) = "finished" Тогда
				СтатусОбучения = СтатусГотовКПолучению();
				Готовность = 100;
			ИначеЕсли НРег(СтруктураОтвета["result"]) = "fail" Тогда
				СтатусОбучения = СтатусОшибкаОбучения();
			Иначе
				СтатусОбучения = СтатусНеизвестен();
			КонецЕсли;
		ИначеЕсли ТипЗнч(СтруктураОтвета["status"]) = Тип("Соответствие") Тогда
			Если НРег(СтруктураОтвета["result"]) = "fail" Тогда
				СтатусОбучения = СтатусОшибкаОбучения();
				Если СтрНайти(НРег(СтруктураОтвета["error"]), "try to decrease prediction date") > 0 Тогда
					ДатаПродажи = ИзвлечьДатыИзСтроки(СтруктураОтвета["error"]);
					ТекстОшибкиВнутренний = ТекстТребуетсяСдвинутьДатуНачалаПрогнозаКДатеПродажи(
						Формат(ДатаПродажи[0], "ДЛФ=D"));
				ИначеЕсли СтрНайти(НРег(СтруктураОтвета["error"]), "try to increase prediction date") > 0 Тогда
					ДатаПродажи = ИзвлечьДатыИзСтроки(СтруктураОтвета["error"]);
					ТекстОшибкиВнутренний = ТекстТребуетсяДобавитьПродажиДляПостроенияПрогноза(
						Формат(ДатаПродажи[0], "ДЛФ=D"));
				ИначеЕсли СтрНайти(НРег(СтруктураОтвета["error"]), "no one item has enought sales history") > 0 Тогда
					ЧислаВСтроке = ИзвлечьЧислаИзСтроки(СтруктураОтвета["error"]);
					ТекстОшибкиВнутренний = ТекстТребуетсяДнейДляПостроенияПрогноза(ЧислаВСтроке[0]);
				КонецЕсли;
			ИначеЕсли СтруктураОтвета["status"]["progress"] > 0.1 Тогда
				СтатусОбучения = СтатусОбучается();
				Готовность = СтруктураОтвета["status"]["progress"] * 100;
				Готовность = ?(Готовность > 100, 100, Готовность);
			ИначеЕсли СтруктураОтвета["status"]["progress"] >= 100 Тогда
				СтатусОбучения = СтатусГотовКПолучению();
				Готовность = 100;
			Иначе
				СтатусОбучения = СтатусНеизвестен();
			КонецЕсли;
		ИначеЕсли НРег(СтруктураОтвета.Получить("error")) = "no such uuid" Тогда
			СтатусОбучения = СтатусОшибкаОбучения();
			ТекстОшибкиВнутренний = НСтр("ru='Идентификатор не найден'");
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстОшибкиВнутренний) Тогда
			Если ТипЗнч(СтруктураОтвета) = Тип("Структура")
				И СтруктураОтвета.Свойство("error") Тогда
				ТекстОшибкиВнутренний = СтруктураОтвета["error"]; //@skip-warning
			ИначеЕсли ТипЗнч(СтруктураОтвета) = Тип("Соответствие")
				И СтруктураОтвета.Получить("error") <> Неопределено Тогда
				ТекстОшибкиВнутренний = СтруктураОтвета["error"];
			КонецЕсли;
		КонецЕсли;
		
		РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ЗаполнитьИдентификаторОбученияПоВидуПлана(
			ДополнительныйПараметр.ВидПлана,
			ДополнительныйПараметр.ИдОбучения,
			СтатусОбучения,
			ТекстОшибкиВнутренний,
			Готовность);
		
		Ответ.ВозвращаемоеЗначение = СтатусОбучения;
		Возврат Ответ;
		
	ИначеЕсли ИмяДействия = "ПолучениеПрогнозаСервиса" Тогда
		
		СтатусОбучения = СтатусЗагружен();
		ТекстОшибкиВнутренний = "";
		Готовность = 100;
		
		Если Не ЭтоИтерируемыйТип Тогда
			Ответ.ТекстОшибки = ТекстПриПолученииДанныхПроизошлаОшибка();
			Возврат Ответ;
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ЗаполнитьИдентификаторОбученияПоВидуПлана(
				ДополнительныйПараметр.ВидПлана,
				ДополнительныйПараметр.ИдОбучения,
				СтатусОшибкаОбучения(),
				ТекстОшибки,
				Готовность);
			Возврат Ответ; // Возврат текста ошибки не требуется, ошибка будет выведена в интерфейс через метод выше.
		КонецЕсли;
		
		НастройкиВидаПлана = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДополнительныйПараметр.ВидПлана,
			"ТипПлана, ВариантПрогнозированияПоКатегориям");
		ПланПродажПоКатегориям = (НастройкиВидаПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям);
		
		Если ПланПродажПоКатегориям И НастройкиВидаПлана.ВариантПрогнозированияПоКатегориям = 0 Тогда
			СервисПрогнозированияПереопределяемый.ЗаписатьПрогнозПродажПоКатегориям(СтруктураОтвета,
				ДополнительныйПараметр.ВидПлана,
				ДополнительныйПараметр.ИмяМодели,
				ДополнительныйПараметр.ИдОбучения,
				ДополнительныйПараметр.КачествоМодели);
		Иначе
			СервисПрогнозированияПереопределяемый.ЗаписатьПрогнозПродаж(СтруктураОтвета,
				ДополнительныйПараметр.ВидПлана,
				ДополнительныйПараметр.ИмяМодели,
				ДополнительныйПараметр.ИдОбучения,
				ДополнительныйПараметр.КачествоМодели);
		КонецЕсли;
			
		РегистрыСведений.СервисПрогнозированияИдентификаторыОбучения.ЗаполнитьИдентификаторОбученияПоВидуПлана(
			ДополнительныйПараметр.ВидПлана,
			ДополнительныйПараметр.ИдОбучения,
			СтатусОбучения,
			ТекстОшибкиВнутренний,
			Готовность);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Процедура ВосстановитьНастройкиПоШаблону(ТекущиеНастройки, ШаблонНастроек)
	
	Для Каждого КлючЗначение Из ШаблонНастроек Цикл
		
		ЕстьСвойство = ЕстьСвойствоСтруктурыСоответствия(ТекущиеНастройки, КлючЗначение.Ключ);
		
		Если ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
			Или ТипЗнч(КлючЗначение.Значение) = Тип("Соответствие") Тогда
			
			Если ЕстьСвойство
				И ТипЗнч(КлючЗначение.Значение) <> ТипЗнч(ТекущиеНастройки[КлючЗначение.Ключ]) Тогда
				ТекущиеНастройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			ИначеЕсли ЕстьСвойство Тогда
				ВосстановитьНастройкиПоШаблону(ТекущиеНастройки[КлючЗначение.Ключ], КлючЗначение.Значение);
			Иначе
				ТекущиеНастройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЕсли;
			
		ИначеЕсли ЕстьСвойство
			И ТипЗнч(КлючЗначение.Значение) <> ТипЗнч(ТекущиеНастройки[КлючЗначение.Ключ]) Тогда
			ТекущиеНастройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		ИначеЕсли Не ЕстьСвойство Тогда
			ТекущиеНастройки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Есть невыгруженный период.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж - 
//  ДатаАктуальности - Дата, Неопределено - Переопределяет текущую позицию (курсор) выгрузки периодической коллекции.
// 
// Возвращаемое значение:
//  Булево - Есть невыгруженный период
Функция ЕстьНевыгруженныйПериод(Коллекция, ДатаАктуальности = Неопределено) Экспорт
	
	НастройкиСервиса = ПолучитьНастройкиСервиса();
	
	Если Коллекция <> Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПланыПродаж Тогда
		Если НастройкиСервиса.ВыгружатьОстаткиЗаВсеВремя Тогда
			ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
		Иначе
			ДатаОкончания = НастройкиСервиса.ДатаОкончанияВыгрузкиОстатковИПродаж;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(НастройкиСервиса.СценарийПрогнозированияКонтрольныхПланов) Тогда
			Возврат Ложь; // Не указан сценарий экспертных планов продаж.
		КонецЕсли;
		Если НастройкиСервиса.ВыгружатьКонтрольныеПланыЗаВсеВремя Тогда
			ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
		Иначе
			ДатаОкончания = НастройкиСервиса.ДатаОкончанияВыгрузкиКонтрольныхПланов;
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаОкончания < Дата(2000, 1, 1) Тогда
		ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Если ДатаАктуальности = Неопределено Тогда
		СводкаПоКоллекции= РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.ПолучитьИнформациюКоллекции(Коллекция);
		ДатаАктуальности = СводкаПоКоллекции.ДатаАктуальности;
	КонецЕсли;
	
	Если НачалоДня(ДатаАктуальности) < НачалоДня(ДатаОкончания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


#КонецОбласти

#Область ШаблоныИСтруктуры

// Шаблон настроек сервиса.
// 
// Возвращаемое значение:
//  Структура - Шаблон настроек сервиса:
// * Версия - Число -
// * НазваниеКомпании - Строка - 
// * ФИОКонтактногоЛица - Строка - 
// * ЭлектроннаяПочта - Строка - 
// * НомерТелефона - Строка -  
// * НомерТелефонаЗначенияПолей - Строка - 
// * НомерТелефонаКомментарий - Строка - 
// * ЗаявкаНаПодключениеОтправлена - Булево - 
// * ТипАвторизации - Число -
// * АдресПодключения - Строка -
// * Логин - Строка -
// * Пароль - Строка -
// * ЛогинИТС - Строка -
// * ТокенПриложения - Строка -
// * ТокенОбновления - Строка -
// * ИдентификаторПриложения - Строка -
// * ДатаОбновленияТокенов - Дата -
// * ИмяБазы - Строка -
// * Тариф - Строка -
// * РазрешенОбменССервисом - Булево -
// * ИзмененыНастройкиИнтернетПоддержки - Булево -
// * ВыгрузкаДанныхПоРасписаниюАктивна - Булево -
// * ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение - Булево -
// * ЗагрузкаДанныхПоРасписаниюАктивна - Булево -
// * ИспользоватьРеальныеОстаткиИПродажи - Булево -
// * ИспользоватьПлановыеОстаткиИПродажи - Булево -
// * СценарийПрогнозированияФактИПлан - СправочникСсылка.СценарииТоварногоПланирования -
// * ВыгружатьОстаткиЗаВсеВремя - Булево -
// * ДатаНачалаВыгрузкиОстатковИПродаж - Дата -
// * ДатаОкончанияВыгрузкиОстатковИПродаж - Дата -
// * УчетПотерянныхПродаж - Число -
// * КоэффициентВосстановленияУчетаПотерянныхПродаж - Число -
// * ПорцияВыгрузкиКатегориальныхДанных - Число -
// * ПорцияВыгрузкиПериодическихДанныхВДнях - Число -
// * СценарийПрогнозированияКонтрольныхПланов - СправочникСсылка.СценарииТоварногоПланирования -
// * ВыгружатьКонтрольныеПланыЗаВсеВремя - Булево -
// * ДатаНачалаВыгрузкиКонтрольныхПланов - Дата -
// * ДатаОкончанияВыгрузкиКонтрольныхПланов - Дата -
// * РеквизитАналогиТовара - Строка -
// * РеквизитАналогиТовараВИсточнике - Строка -
// * РеквизитАналогиТовараСвойство - ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения -
// * РеквизитАналогиТовараПредставление - Строка -
// * Коллекции - см. СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций.
// * ИдКоллекций - Структура - описывает идентификаторы коллекций:
// ** Ключ - Строка - Имя коллекции
// ** Значение - Число - Номер коллекции
// * ИзмененияКоллекций - см. СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций.
// * ИмяСервиса - Строка -
// * МоделиПрогнозирования - Соответствие -
// * ОкруглятьШтучныеПозиции - Булево -
// * ИзмененАПИСервиса - Булево -
// * ВыгрузкаАктивна - Булево -
// * ДатаПоследнейВыгрузки - Дата -
// * ТаймаутВыгрузки - Число -
// * ТаймаутЗагрузки - Число -
// * ТаймаутСетевогоСоединения - Число -
// * ИмяВыгружаемойСейчасКоллекции - Строка -
// * ЗапланированоВыгрузитьКоллекций - Число -
// * ВыгруженоКоллекций - Число -
Функция ШаблонНастроекСервиса()
	
	Коллекции = СервисПрогнозированияПереопределяемый.ПолучитьОписаниеРеквизитовВсехКоллекций();
	
	ВсеНастройкиСервиса = Новый Структура();
	ВсеНастройкиСервиса.Вставить("Версия", 2.0);
	
	// Заявка на подключение
	ВсеНастройкиСервиса.Вставить("НазваниеКомпании", "");
	ВсеНастройкиСервиса.Вставить("ФИОКонтактногоЛица", "");
	ВсеНастройкиСервиса.Вставить("ЭлектроннаяПочта", "");
	ВсеНастройкиСервиса.Вставить("НомерТелефона", "");
	ВсеНастройкиСервиса.Вставить("НомерТелефонаЗначенияПолей", "");
	ВсеНастройкиСервиса.Вставить("НомерТелефонаКомментарий", "");
	ВсеНастройкиСервиса.Вставить("ЗаявкаНаПодключениеОтправлена", Ложь);
	
	// Авторизация.
	ВсеНастройкиСервиса.Вставить("ТипАвторизации", 1);
	ВсеНастройкиСервиса.Вставить("АдресПодключения", "http://forecast.1c.ai");
	ВсеНастройкиСервиса.Вставить("Логин", "");
	ВсеНастройкиСервиса.Вставить("Пароль", ""); // Сохраняется в безопасном хранилище.
	ВсеНастройкиСервиса.Вставить("ЛогинИТС", ""); // Сохраняется в рамках библиотеки ИПП.
	ВсеНастройкиСервиса.Вставить("ТокенПриложения", "");
	ВсеНастройкиСервиса.Вставить("ТокенОбновления", "");
	ВсеНастройкиСервиса.Вставить("ИдентификаторПриложения", "");
	ВсеНастройкиСервиса.Вставить("ДатаОбновленияТокенов", '00010101');
	ВсеНастройкиСервиса.Вставить("ИмяБазы", Метаданные.Имя);
	ВсеНастройкиСервиса.Вставить("Тариф", "FORECAST_ERP_PILOT");
	ВсеНастройкиСервиса.Вставить("СтатусПодключения", СтатусПодключенияНеПодключено());
	
	ВсеНастройкиСервиса.Вставить("РазрешенОбменССервисом", Истина);
	ВсеНастройкиСервиса.Вставить("ИзмененыНастройкиИнтернетПоддержки", Ложь);
	ВсеНастройкиСервиса.Вставить("АвтоматическиОчищатьЖурналСервисаПрогнозирования", Истина);
	ВсеНастройкиСервиса.Вставить("ПорогОчисткиЖурналаСервисаПрогнозирования", 50000);
	ВсеНастройкиСервиса.Вставить("ВыгрузкаДанныхПоРасписаниюАктивна", Ложь);
	ВсеНастройкиСервиса.Вставить("ВыгрузкаДанныхПоРасписаниюЗапускатьОбучение", Ложь);
	ВсеНастройкиСервиса.Вставить("ЗагрузкаДанныхПоРасписаниюАктивна", Ложь);
	ВсеНастройкиСервиса.Вставить("ИспользоватьРеальныеОстаткиИПродажи", Истина);
	ВсеНастройкиСервиса.Вставить("ИспользоватьПлановыеОстаткиИПродажи", Ложь);
	ВсеНастройкиСервиса.Вставить("СценарийПрогнозированияФактИПлан", Справочники.СценарииТоварногоПланирования.ПустаяСсылка());
	ВсеНастройкиСервиса.Вставить("ВыгружатьОстаткиЗаВсеВремя", Истина);
	ВсеНастройкиСервиса.Вставить("ДатаНачалаВыгрузкиОстатковИПродаж", '00010101');
	ВсеНастройкиСервиса.Вставить("ДатаОкончанияВыгрузкиОстатковИПродаж", '00010101');
	ВсеНастройкиСервиса.Вставить("УчетПотерянныхПродаж", 0);
	ВсеНастройкиСервиса.Вставить("КоэффициентВосстановленияУчетаПотерянныхПродаж", 0.5);
	ВсеНастройкиСервиса.Вставить("ПорцияВыгрузкиКатегориальныхДанных", 1000);
	ВсеНастройкиСервиса.Вставить("ПорцияВыгрузкиПериодическихДанныхВДнях", 30 * 3);
	ВсеНастройкиСервиса.Вставить("СценарийПрогнозированияКонтрольныхПланов", Справочники.СценарииТоварногоПланирования.ПустаяСсылка());
	ВсеНастройкиСервиса.Вставить("ВыгружатьКонтрольныеПланыЗаВсеВремя", Истина);
	ВсеНастройкиСервиса.Вставить("ДатаНачалаВыгрузкиКонтрольныхПланов", '00010101');
	ВсеНастройкиСервиса.Вставить("ДатаОкончанияВыгрузкиКонтрольныхПланов", '00010101');
	ВсеНастройкиСервиса.Вставить("Коллекции", Коллекции);
	ВсеНастройкиСервиса.Вставить("ИдКоллекций", Новый Структура());
	ВсеНастройкиСервиса.Вставить("ИмяСервиса", "forecast");
	ВсеНастройкиСервиса.Вставить("МоделиПрогнозирования", Новый Соответствие());
	ВсеНастройкиСервиса.Вставить("ОкруглятьШтучныеПозиции", Ложь);
	ВсеНастройкиСервиса.Вставить("ИзмененАПИСервиса", Ложь);
	
	// Информация о выгрузке.
	ВсеНастройкиСервиса.Вставить("ДатаПоследнейВыгрузки", '00010101');
	ВсеНастройкиСервиса.Вставить("ТаймаутВыгрузки", 60*60*5); // 5 часов.
	ВсеНастройкиСервиса.Вставить("ТаймаутЗагрузки", 60*5); // 5 минут.
	ВсеНастройкиСервиса.Вставить("ТаймаутСетевогоСоединения", 60*2); // 2 минуты.
	
	// Устаревшие настройки.
	ВсеНастройкиСервиса.Вставить("ИмяВыгружаемойСейчасКоллекции", "");
	ВсеНастройкиСервиса.Вставить("ЗапланированоВыгрузитьКоллекций", 0);
	ВсеНастройкиСервиса.Вставить("ВыгруженоКоллекций", 0);
	ВсеНастройкиСервиса.Вставить("ВыгрузкаАктивна", Ложь);
	ВсеНастройкиСервиса.Вставить("РеквизитАналогиТовара", "");
	ВсеНастройкиСервиса.Вставить("РеквизитАналогиТовараВИсточнике", "");
	ВсеНастройкиСервиса.Вставить("РеквизитАналогиТовараСвойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка());
	ВсеНастройкиСервиса.Вставить("РеквизитАналогиТовараПредставление", "");
	ВсеНастройкиСервиса.Вставить("ИзмененияКоллекций", Новый Структура);
	
	Возврат ВсеНастройкиСервиса;
	
КонецФункции

// Шаблон авторизационных настроек сервиса.
// 
// Возвращаемое значение:
//  Структура - Шаблон авторизационных настроек сервиса:
// * Версия - Число -
// * ТипАвторизации - Строка -
// * АдресПодключения - Строка -
// * Логин - Строка -
// * Пароль - Строка -
// * ЛогинИТС - Строка -
// * ТокенПриложения - Строка -
// * ТокенОбновления - Строка -
// * ИдентификаторПриложения - Строка -
// * ДатаОбновленияТокенов - Дата -
// * ИмяБазы - Строка -
// * Тариф - Строка -
// * РазрешенОбменССервисом - Булево -
// * ИзмененыНастройкиИнтернетПоддержки - Булево -
// * ТаймаутСетевогоСоединения - Число - 
Функция ШаблонАвторизационныхНастроекСервиса()
	
	Структура = Новый Структура();
	Структура.Вставить("Версия", 0);
	Структура.Вставить("ТипАвторизации", "");
	Структура.Вставить("АдресПодключения", "");
	Структура.Вставить("Логин", "");
	Структура.Вставить("Пароль", "");
	Структура.Вставить("ЛогинИТС", "");
	Структура.Вставить("ТокенПриложения", "");
	Структура.Вставить("ТокенОбновления", "");
	Структура.Вставить("ИдентификаторПриложения", "");
	Структура.Вставить("ДатаОбновленияТокенов", '00010101');
	Структура.Вставить("ИмяБазы", "");
	Структура.Вставить("Тариф", "");
	Структура.Вставить("РазрешенОбменССервисом", Ложь);
	Структура.Вставить("ИзмененыНастройкиИнтернетПоддержки", Ложь);
	Структура.Вставить("ТаймаутСетевогоСоединения", 120);
	
	Возврат Структура;
	
КонецФункции

// Структура ответа.
// 
// Возвращаемое значение:
//  Структура - Структура ответа:
// * Ответ - Произвольный - 
// * КодСостояния - Число - 
// * ДесериализованноеЗначение - Произвольный - 
// * КоличествоДанныхНаСервере - Число - 
// * ТекстОшибки - Строка - 
Функция СтруктураОтвета()
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Ответ");
	СтруктураРезультата.Вставить("КодСостояния");
	СтруктураРезультата.Вставить("ДесериализованноеЗначение");
	
	СтруктураРезультата.Вставить("КоличествоДанныхНаСервере");
	СтруктураРезультата.Вставить("ТекстОшибки");
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Структура ответа сервиса.
// 
// Параметры:
//  Результат - Неопределено, HTTPОтвет - Результат
// 
// Возвращаемое значение:
//  см. СтруктураОтвета.
Функция СтруктураОтветаСервиса(Результат)
	
	ТелоОтветаНаЗапрос = Результат.ПолучитьТелоКакСтроку();
	ДесериализованноеЗначение = ПрочитатьТелоЗапросаJSON(ТелоОтветаНаЗапрос);
	
	СтруктураРезультата = СтруктураОтвета();
	СтруктураРезультата.Ответ = ТелоОтветаНаЗапрос;
	СтруктураРезультата.КодСостояния = Результат.КодСостояния;
	СтруктураРезультата.ДесериализованноеЗначение = ДесериализованноеЗначение;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Ответ функции обработки ответа сервиса.
// 
// Возвращаемое значение:
//  Структура - Ответ функции обработки ответа сервиса:
// * ВозвращаемоеЗначение - Неопределено -
// * ТекстОшибки - Строка -
Функция ОтветФункцииОбработкиОтветаСервиса()
	
	Ответ = Новый Структура();
	Ответ.Вставить("ВозвращаемоеЗначение", Неопределено);
	Ответ.Вставить("ТекстОшибки", "");
	
	Возврат Ответ;
	
КонецФункции

Функция СоответствиеИменСвойств(ВключаяОбратные = Истина)
	
	СоответствиеИмен = Новый Соответствие();
	// Основные
	СоответствиеИмен.Вставить("Логин", "login");
	СоответствиеИмен.Вставить("Пароль", "password");
	СоответствиеИмен.Вставить("ТокенПриложения", "access_token");
	СоответствиеИмен.Вставить("ТокенПриложенияПредыдущейВерсии", "old_access_token");
	СоответствиеИмен.Вставить("ТокенОбновления", "refresh_token");
	СоответствиеИмен.Вставить("ИдентификаторПриложения", "application_uuid");
	СоответствиеИмен.Вставить("ИмяСервиса", "service_name");
	СоответствиеИмен.Вставить("ИмяБазы", "application_name");
	СоответствиеИмен.Вставить("Тариф", "tariff");
	СоответствиеИмен.Вставить("НовыйПользователь", "new_user");
	СоответствиеИмен.Вставить("НазваниеКомпании", "company_name");
	СоответствиеИмен.Вставить("ФИОКонтактногоЛица", "client_name");
	СоответствиеИмен.Вставить("ЭлектроннаяПочта", "email");
	СоответствиеИмен.Вставить("НомерТелефона", "tel");
	СоответствиеИмен.Вставить("НомерТелефонаКомментарий", "tel_comment");
	// Коллекции
	СоответствиеИмен.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи, "sales");
	СоответствиеИмен.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары, "products");
	СоответствиеИмен.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры, "product_variants");
	СоответствиеИмен.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели, "customers");
	СоответствиеИмен.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады, "shops");
	СоответствиеИмен.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки, "stock");
	СоответствиеИмен.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо, "promo");
	СоответствиеИмен.Вставить(Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность, "seasonality");
	
	Если ВключаяОбратные Тогда
		СоответствиеИменОбратное = Новый Соответствие();
		
		Для Каждого КлючЗначение Из СоответствиеИмен Цикл
			СоответствиеИменОбратное.Вставить(КлючЗначение.Значение, КлючЗначение.Ключ);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СоответствиеИмен, СоответствиеИменОбратное, Ложь);
	КонецЕсли;
	
	Возврат СоответствиеИмен;
	
КонецФункции

// Статус обучения модели ответ.
// 
// Параметры:
//  ЕстьИнформацияОСтатусеОбучения - Булево -  
//  СтатусПрогнозаИОбучения - Строка -  
//  ГотовКПолучению - Булево -  
//  ЕстьЗагруженнаяМодель - Булево -  
// 
// Возвращаемое значение:
//  Структура - Статус обучения модели ответ:
// * ЕстьИнформацияОСтатусеОбучения - Булево - 
// * СтатусПрогнозаИОбучения - Строка -
// * ГотовКПолучению - Булево -
// * ЕстьЗагруженнаяМодель - Булево -
Функция СтатусОбученияМоделиОтвет(ЕстьИнформацияОСтатусеОбучения,
	СтатусПрогнозаИОбучения,
	ГотовКПолучению = Ложь,
	ЕстьЗагруженнаяМодель = Ложь)
	
	Структура = Новый Структура();
	Структура.Вставить("ЕстьИнформацияОСтатусеОбучения", ЕстьИнформацияОСтатусеОбучения);
	Структура.Вставить("СтатусПрогнозаИОбучения", СтатусПрогнозаИОбучения);
	Структура.Вставить("ГотовКПолучению", ГотовКПолучению);
	Структура.Вставить("Загружен", ЕстьЗагруженнаяМодель);
	
	Возврат Структура;
	
КонецФункции

#КонецОбласти

#Область Тексты

Функция ТекстПустойВидПлана()
	Возврат НСтр("ru='Не выбран вид плана.'");
КонецФункции

Функция ТекстНекорректныйВидПлана()
	Возврат НСтр("ru='Выбранный вид плана не настроен для работы с сервисом прогнозирования.'");
КонецФункции

Функция ТекстНеПолученИдентификаторМодели()
	Возврат НСтр("ru='Для выбранного вида плана не получен идентификатор модели.
	|Рекомендуется запустить обучение повторно.'");
КонецФункции

Функция ТекстВидПланаНеОбучен()
	ТекстОшибки = НСтр("ru='По выбранному виду плана не завершено или не запущено обучение.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстНетКоллекцийДляВыгрузки()
	Возврат НСтр("ru='Идентификаторы коллекций не известны. Требуется выполнить полную выгрузку данных.'");
КонецФункции

Функция ТекстОжиданиеЗавершенияОбученияМодели()
	Возврат НСтр("ru='По выбранному виду плана уже производится обучение. 
		|Дождитесь окончания и загрузите результат перед повторным запуском обучения.'");
КонецФункции

Функция ТекстНеНайденаИнформацияОбученияМодели()
	
	ТекстОшибки = НСтр("ru='По выбранному виду плана не найдена информация обучения модели.'");
	Возврат ТекстОшибки;
	
КонецФункции

Функция ТекстОбучениеНевозможноИдетВыгрузкаДанных()
	Возврат НСтр("ru='Невозможно запустить обучение поскольку в данный момент идет выгрузка данных на сервер.'");
КонецФункции

Функция ТекстМоделиУжеНазначенИдентификатор()
	Возврат НСтр("ru='Модели уже назначен идентификатор.'");
КонецФункции

Функция ТекстВоВремяЗапускаОбученияПроизошлаОшибка(ТекстОшибки)
	ТекстШаблона = НСтр("ru='Во время запуска обучения модели произошла ошибка:
		|%1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстОшибки);
КонецФункции

Функция ТекстПриПолученииИдентификатораВидаПланаПроизошлаОшибка(ТекстОшибки)
	ТекстШаблона = НСтр("ru='Во время получения идентификатора для вида плана произошла ошибка:
		|%1'");
	Возврат СтрШаблон(ТекстШаблона, ТекстОшибки);
КонецФункции

Функция ТекстТребуетсяСдвинутьДатуНачалаПрогнозаКДатеПродажи(ДатаПродажи)
	ТекстШаблона = НСтр("ru = 'Недостаточно данных для построения прогноза. Последняя известная дата продажи: %1.
						|Попробуйте сдвинуть дату начала прогноза к этой дате.'");
	Возврат СтрШаблон(ТекстШаблона, ДатаПродажи);
КонецФункции

Функция ТекстТребуетсяДобавитьПродажиДляПостроенияПрогноза(ДатаПрогнозирования)
	ТекстШаблона = НСтр("ru = 'Недостаточно данных для построения прогноза. Дата начала прогнозирования: %1.
						|Попробуйте добавить данные для построения прогноза.'");
	Возврат СтрШаблон(ТекстШаблона, ДатаПрогнозирования);
КонецФункции

Функция ТекстТребуетсяДнейДляПостроенияПрогноза(ТребуетсяДней)
	ТекстШаблона = НСтр("ru = 'Нет истории продаж достаточной длины для построения прогноза.
						|Минимальное требуемое количество различных дней продаж: %1.'");
	Возврат СтрШаблон(ТекстШаблона, ТребуетсяДней);
КонецФункции

Функция ТекстНедостаточноПравДляПользователя(ИдентификаторПользователя)
	ТекстШаблона = НСтр("ru = 'Недостаточно прав для пользователя с идентификатором %1.'");
	Возврат СтрШаблон(ТекстШаблона, ИдентификаторПользователя);
КонецФункции

Функция ТекстВоВремяОбращенияКСервисуПроизошлаОшибка(ТекстОшибки)
	ТекстШаблона = НСтр("ru='Во время обращения к сервису произошла ошибка: %1
		|Попробуйте еще раз. В случае повторения ошибки обратитесь в техподдержку.'");
	Возврат СтрШаблон(ТекстШаблона, ТекстОшибки);
КонецФункции

Функция ТекстДанныеАутентификацииНеНайдены()
	ТекстШаблона = НСтр("ru='Данные аутентификации не найдены. Проверьте подключение к сервису.'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстТаймаутАутентификации()
	ТекстШаблона = НСтр("ru='Таймаут проверки аутентификации. Попробуйте снова.'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстТаймаутВыгрузкиДанных()
	ТекстШаблона = НСтр("ru='Таймаут при выполнении выгрузки данных.'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстТаймаутЗагрузкиДанных()
	ТекстШаблона = НСтр("ru='Таймаут при выполнении загрузки данных.'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстВоВремяРегистрацииПриложенияПроизошлаОшибка(ТекстОшибки)
	ТекстШаблона = НСтр("ru='Во время регистрации приложения произошла ошибка:
		|%1
		|Проверьте аутентификационные данные и попробуйте снова.'");
	Возврат СтрШаблон(ТекстШаблона, ТекстОшибки);
КонецФункции

Функция ТекстСервисПринялНеВсеВыгружаемыеДанные(КоличествоВыгружено, КоличествоПринято)
	ТекстСообщения = НСтр("ru = 'Сервис прогнозирования принял данные частично. Выгружено: %1 Принято: %2'");
	Возврат СтрШаблон(ТекстСообщения, КоличествоВыгружено, КоличествоПринято);
КонецФункции

Функция ТекстСервисНеПринялДанные()
	ТекстШаблона = НСтр("ru='Сервис прогнозирования не принял выгружаемые данные.'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстНевозможноСформироватьJSON(ЗаписываемыйОбъект, ТекстОшибки)
	ТекстШаблона = НСтр("ru='Невозможно сформировать тело запроса JSON. Записываемый объект: %1 Описание ошибки: %2'");
	Возврат СтрШаблон(ТекстШаблона, ЗаписываемыйОбъект, ТекстОшибки);
КонецФункции

Функция ТекстНевозможноПрочитатьJSON(ЧитаемыйОбъект)
	ТекстШаблона = НСтр("ru='Невозможно прочитать тело запроса JSON. Читаемый объект(первые 150 символов): %1'");
	ЧитаемыйОбъектСтрока = Лев(Строка(ЧитаемыйОбъект), 150);
	Возврат СтрШаблон(ТекстШаблона, ЧитаемыйОбъектСтрока);
КонецФункции

Функция ТекстОшибкиФормированияОбъектаДляВыгрузки()
	Возврат НСтр("ru='Произошла ошибка формирования тела объекта JSON.'");
КонецФункции

Функция ТекстОшибкиПроизошлоЗацикливание()
	Возврат НСтр("ru='Произошло зацикливание.'");
КонецФункции

Функция ТекстКоллекцияПродажПустая()
	ТекстОшибки = НСтр("ru='Коллекция продаж в сервисе прогнозирования пустая, работа сервиса невозможна.
		|Проверьте наличие продаж в информационной базе и установленные фильтры на выгрузку, после чего повторите выгрузку данных.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстПриПолученииДанныхПроизошлаОшибка()
	ТекстОшибки = НСтр("ru='Произошла ошибка при получении данных. Попробуйте еще раз позже.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстВыбраннаяПериодичностьНеПредусмотрена(Периодичность)
	ТекстШаблона = НСтр("ru='Выбранная периодичность не предусмотрена сервисом. Значение: %1'");
	Возврат СтрШаблон(ТекстШаблона, Периодичность);
КонецФункции

Функция ТекстНеНайденаНастройка(ИмяНастройки)
	ТекстШаблона = НСтр("ru='Не найдена настройка сервиса с именем %1'");
	Возврат СтрШаблон(ТекстШаблона, ИмяНастройки);
КонецФункции

Функция ТекстНеОтмеченаКВыгрузкеКолонкаКатегория()
	ТекстШаблона = НСтр("ru = 'Коллекция ""Категории товаров"" выгружена, но не используется.
	|Пожалуйста, отметьте к выгрузке реквизит ""Код категории"" в коллекции ""Товары"", или отключите выгрузку коллекции ""Категории товаров"".'");
	Возврат ТекстШаблона;
КонецФункции

Функция ТекстОжидаетсяПодключение()
	ТекстОшибки = НСтр("ru='Подключение к сервису прогнозирования в очереди. Попробуйте позже.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстНеПодключено()
	ТекстОшибки = НСтр("ru='Нет подключения к сервису прогнозирования. Проверьте авторизацию в помощнике подключения.'");
	Возврат ТекстОшибки;
КонецФункции

Функция ТекстОшибкиНеверныйЛогинПарольИТС()
	Возврат НСтр("ru = 'Неверный логин или пароль пользователя ИТС.'");
КонецФункции

Функция ТекстОшибкиНеУдалосьПолучитьМодульИнтернетПоддержкаПользователей()
	Возврат НСтр("ru = 'Не удалось получить модуль ""Интернет поддержка пользователей"". Обратитесь к администратору.'");
КонецФункции

Функция ТекстОшибкиНеУдалосьПолучитьТикет()
	Возврат НСтр("ru = 'Не удалось получить тикет.'");
КонецФункции

Функция ТекстОшибкиНеУказанСценарийПрогнозированияКонтрольныхПланов()
	
	Возврат НСтр("ru = 'В настройках сервиса прогнозирования не указан сценарий планирования для экспертных планов продаж.
		|Для возможности учета экспертных планов продаж при прогнозировании, установите сценарий планирования (экспертный) в настройках сервиса -
		|Помощник подключения к сервису - Источники данных - Экспертные планы продаж (на будущий период).'");
	
КонецФункции

Функция ТекстНеПолученИдентификаторОсновнойКоллекции()
	
	Возврат НСтр("ru = 'Не получен идентификатор обязательной коллекции ""Продажи"".
	|Необходимо произвести выгрузку данных в сервис.'");
	
КонецФункции

Функция ТекстНеПолученИдентификаторКоллекции(ИмяКоллекции)
	
	ТекстШаблона = НСтр("ru = 'Не получен идентификатор коллекции ""%1"".
		|Попробуйте запустить еще раз полную выгрузку данных.'");
	Возврат СтрШаблон(ТекстШаблона, ИмяКоллекции);
	
КонецФункции

Функция ТекстПриОчисткеИдентификатораВидаПланаПроизошлаОшибка(ТекстОшибки, ТекстВидПлана)
	
	ТекстШаблона = НСтр("ru = 'Во время очистки идентификатора модели у вида плана ""%1"", произошла ошибка:
		|%2'");
	Возврат СтрШаблон(ТекстШаблона, ТекстВидПлана, ТекстОшибки);
	
КонецФункции

#КонецОбласти

#КонецОбласти
