#Область ПрограммныйИнтерфейс

// Обработка проверки заполнения.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Отказ - Булево
//  ПроверяемыеРеквизиты - Массив из Строка - Проверяемые реквизиты
Процедура ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт 
	
	//++ Локализация
	
	ОтказПроверки = Ложь;
	ПроверкаЗаполненияМаркируемойПродукции(Форма, ОтказПроверки);
	
	//-- Локализация
	
КонецПроцедуры

// Обработка заполнения.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПриходныйОрдерНаТовары -
//  ДанныеЗаполнения - Структура -
//  СтандартнаяОбработка - Булево -
Процедура ОбработкаЗаполнения(ДокументОбъект, ДанныеЗаполнения, СтандартнаяОбработка)Экспорт

	//++ Локализация
	Если НЕ ДокументОбъект.ЭтоНовый()
		ИЛИ НЕ ОбщегоНазначенияИСМП.ИспользуетсяМаркируемаяПродукция() 
		ИЛИ НЕ ДанныеЗаполнения.Свойство("Распоряжение") 
		ИЛИ ТипЗнч(ДанныеЗаполнения.Распоряжение) <> Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьШтрихкодыУпаковокПоРаспоряжению(ДокументОбъект, ДанныеЗаполнения);
	
	//-- Локализация

КонецПроцедуры

// При создании на сервере.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Отказ - Булево
//  СтандартнаяОбработка - Булево
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	ЗаполнитьКешированныеЗначения(Форма);
	//-- Локализация
	
КонецПроцедуры
	 
#Область МаркируемаяПродукция

// Определяет ведение учета маркируемой продукции.
// 
// Возвращаемое значение:
//  Булево - Используется маркируемая продукция
Функция ИспользуетсяМаркируемаяПродукция() Экспорт
	
	Возврат СкладыЛокализация.ИспользуетсяМаркируемаяПродукция();
	
КонецФункции

// Установить признак использования маркируемой продукции.
// 
// Параметры:
//  Форма - см. СкладыЛокализация.УстановитьПризнакИспользованияМаркируемойПродукции.Форма
Процедура УстановитьПризнакИспользованияМаркируемойПродукции(Форма) Экспорт
	
	СкладыЛокализация.УстановитьПризнакИспользованияМаркируемойПродукции(Форма);

	//++ Локализация
	ЗаполнитьКешированныеЗначения(Форма);
	//-- Локализация
	
КонецПроцедуры

// Определение признака маркируемая продукция текста запроса.
// 
// Параметры:
//  ПутьКПолюНоменклатура -Строка -Путь к полю номенклатура
// 
// Возвращаемое значение:
//  Строка - Определение признака маркируемая продукция текста запроса
Функция ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура) Экспорт
	
	Результат = "";
	//++ Локализация
	Результат = ИнтеграцияИСУТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура);
	//-- Локализация
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

#Область СопоставлениеКоличестваМарок
	
// Параметры:
//	Ордер - ДокументОбъект.РасходныйОрдерНаТовары
//	Отказ - Булево
Процедура ПроверкаЗаполненияМаркируемойПродукции(Ордер, Отказ)
	
	СтатусыКонтроля = СтатусыКонтроляМаркировки();
	СкладскиеОперацииКонтроля = СкладскиеОперацииКонтроляМаркировки(); 
	Если ТипЗнч(Ордер) <> Тип("ДокументОбъект.ПриходныйОрдерНаТовары")
		ИЛИ СкладскиеОперацииКонтроля.Найти(Ордер.СкладскаяОперация) = Неопределено
		ИЛИ СтатусыКонтроля.Найти(Ордер.Статус) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияИСМП.ИспользуетсяМаркируемаяПродукция() Тогда
		Возврат;
	КонецЕсли; 
	
	ИнтеграцияИСУТ.ПроверитьЗаполнениеАкцизныхМарок(Ордер, Отказ);
	
КонецПроцедуры

Функция СтатусыКонтроляМаркировки()
	
	СтатусыКонтроля = Новый Массив;
	СтатусыКонтроля.Добавить(Перечисления.СтатусыПриходныхОрдеров.Принят);
	
	Возврат СтатусыКонтроля;
	
КонецФункции

Функция СкладскиеОперацииКонтроляМаркировки()

	СкладскиеОперацииКонтроля = Новый Массив;
	СкладскиеОперацииКонтроля.Добавить(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика);
	СкладскиеОперацииКонтроля.Добавить(Перечисления.СкладскиеОперации.ПриемкаПоВозвратуОтКлиента);
	СкладскиеОперацииКонтроля.Добавить(Перечисления.СкладскиеОперации.ВозвратНеПринятыхТоваров);
	
	Возврат СкладскиеОперацииКонтроля;
	
КонецФункции

#КонецОбласти

// Параметры:
//	Ордер - ДокументОбъект.ПриходныйОрдерНаТовары -
//	ДанныеЗаполнения - Структура - 
Процедура ЗаполнитьШтрихкодыУпаковокПоРаспоряжению(Ордер, ДанныеЗаполнения)
	
	ТаблицаШтрихкодыУпаковок = Ордер.ШтрихкодыУпаковок;
	
	ТаблицаШтрихкодыУпаковок.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Распоряжение",ДанныеЗаполнения.Распоряжение);
	Запрос.УстановитьПараметр("СопоставлениеВидовПродукции",СопоставлениеВидовПродукцииИСМП());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СопоставлениеВидовПродукции.ВидПродукцииИС КАК ВидПродукцииИС,
	|	СопоставлениеВидовПродукции.ОсобенностьУчета КАК ОсобенностьУчета
	|ПОМЕСТИТЬ СопоставлениеВидовПродукции
	|ИЗ
	|	&СопоставлениеВидовПродукции КАК СопоставлениеВидовПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиОрдеров.ПриходныйОрдер КАК ПриходныйОрдер,
	|	УпаковкиОрдеров.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	УпаковкиОрдеров.ЭтоМультитоварнаяУпаковка КАК ЭтоМультитоварнаяУпаковка,
	|	УпаковкиОрдеров.ВидПродукцииИС КАК ВидПродукцииИС
	|ПОМЕСТИТЬ МаркиПринятые
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ШтрихкодыУпаковокОрдеров.Ссылка КАК ПриходныйОрдер,
	|		ШтрихкодыУпаковокОрдеров.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|		ВЫБОР
	|			КОГДА ШтрихкодыУпаковокОрдеров.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоМультитоварнаяУпаковка,
	|		ВЫБОР
	|			КОГДА ШтрихкодыУпаковокОрдеров.ШтрихкодУпаковки.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
	|				ТОГДА НЕОПРЕДЕЛЕНО
	|			ИНАЧЕ СопоставлениеВидовПродукции.ВидПродукцииИС
	|		КОНЕЦ КАК ВидПродукцииИС
	|	ИЗ
	|		Документ.ПриходныйОрдерНаТовары.ШтрихкодыУпаковок КАК ШтрихкодыУпаковокОрдеров
	|			ЛЕВОЕ СОЕДИНЕНИЕ СопоставлениеВидовПродукции КАК СопоставлениеВидовПродукции
	|			ПО ШтрихкодыУпаковокОрдеров.ШтрихкодУпаковки.Номенклатура.ОсобенностьУчета = СопоставлениеВидовПродукции.ОсобенностьУчета
	|	ГДЕ
	|		ШтрихкодыУпаковокОрдеров.Ссылка.Распоряжение = &Распоряжение
	|		И ШтрихкодыУпаковокОрдеров.Ссылка.Проведен) КАК УпаковкиОрдеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиИПодбораДокументовИС КАК СтатусыПроверкиИПодбораДокументовИС
	|		ПО УпаковкиОрдеров.ПриходныйОрдер = СтатусыПроверкиИПодбораДокументовИС.Документ
	|ГДЕ
	|	СтатусыПроверкиИПодбораДокументовИС.СтатусПроверкиИПодбора = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиИПодбораИС.Завершено)
	|	И ВЫБОР
	|			КОГДА УпаковкиОрдеров.ЭтоМультитоварнаяУпаковка
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ УпаковкиОрдеров.ВидПродукцииИС = СтатусыПроверкиИПодбораДокументовИС.ВидМаркируемойПродукции
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркиПриобретения.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.ШтрихкодыУпаковок КАК МаркиПриобретения
	|		ЛЕВОЕ СОЕДИНЕНИЕ МаркиПринятые КАК МаркиПринятые
	|		ПО МаркиПриобретения.ШтрихкодУпаковки = МаркиПринятые.ШтрихкодУпаковки
	|ГДЕ
	|	МаркиПриобретения.Ссылка = &Распоряжение
	|	И МаркиПриобретения.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И МаркиПринятые.ШтрихкодУпаковки ЕСТЬ NULL";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока =  ТаблицаШтрихкодыУпаковок.Добавить();
		НоваяСтрока.ШтрихкодУпаковки = Выборка.ШтрихкодУпаковки;
	КонецЦикла; 
	
КонецПроцедуры

// Возвращаемое значение:
// 	ТаблицаЗначений:
//		*ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС
//		*ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
Функция СопоставлениеВидовПродукцииИСМП()
	
	ТаблицаСопоставления = Новый ТаблицаЗначений;
	ТаблицаСопоставления.Колонки.Добавить("ВидПродукцииИС",   Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ТаблицаСопоставления.Колонки.Добавить("ОсобенностьУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидПродукции КАК ВидПродукции
	|ИЗ
	|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП
	|ГДЕ
	|	ВестиУчетПродукции";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Выборка.ВидПродукции);
		Если ЗначениеЗаполнено(ОсобенностьУчета) 
			И ТипЗнч(ОсобенностьУчета) = Тип("ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры") Тогда
			
			НоваяСтрока = ТаблицаСопоставления.Добавить();
			НоваяСтрока.ВидПродукцииИС = Выборка.ВидПродукции;
			НоваяСтрока.ОсобенностьУчета = ОсобенностьУчета;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСопоставления;
	
КонецФункции // СопоставлениеВидовПродукцииИСМП()

// Параметры:
//  Форма - см. Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента
//	
Процедура ЗаполнитьКешированныеЗначения(Форма) 
	
	ЦелевойРеквизитИмя = "КэшКонтрагентаРаспоряжения";
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ЦелевойРеквизитИмя) Тогда
		НовыйРеквизит = Новый РеквизитФормы(ЦелевойРеквизитИмя, Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		КоллекцияРеквизитов = Новый Массив;
		КоллекцияРеквизитов.Добавить(НовыйРеквизит);
		Форма.ИзменитьРеквизиты(КоллекцияРеквизитов);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Распоряжение = Форма.Объект.Распоряжение;
	РеквизитКонтрагент = "Контрагент";
	Если ЗначениеЗаполнено(Распоряжение)
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Распоряжение, РеквизитКонтрагент) Тогда
		Форма[ЦелевойРеквизитИмя] = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, РеквизитКонтрагент);
	Иначе
		Форма[ЦелевойРеквизитИмя] = Неопределено; 
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти