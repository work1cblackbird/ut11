
#Область ПрограммныйИнтерфейс


// Возвращает флаг того, что поле подходит для выбора по типу значения.
// 
// Параметры:
// 	СтрокаДереваЗначений - ДанныеФормыЭлементДерева - Строка дерева операндов:
// 	 *Идентификатор - Строка - Идентификатор текущей части операнда.
// 	ЦелевойТип - ОписаниеТипов - целевой тип (строки данного типа можно выбирать).
// 	ДополнительноеСвойствоИдентификатор - Строка - Идентификатор добавленного дополнительного реквизита.
// Возвращаемое значение:
// 	Булево - Истина, если поле подходит для выбора.
//
Функция ПодходящееПолеВыбора(СтрокаДереваЗначений, ЦелевойТип, ДополнительноеСвойствоИдентификатор = "") Экспорт
	
	Результат = Ложь;
	
	Если СтрокаДереваЗначений.ТипЭлементаДерева = "ТабличнаяЧасть" Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительноеСвойствоИдентификатор) Тогда
		Результат = (СтрокаДереваЗначений.Идентификатор = ДополнительноеСвойствоИдентификатор);
	Иначе
		Для каждого Тип Из СтрокаДереваЗначений.ТипЗначения.Типы() Цикл
			Если ЦелевойТип.СодержитТип(Тип) Тогда
				Результат = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Для заданной даты формирует строковое представление заданного интервала
//
// Параметры:
//  ДатаПериода  - Дата - дата для которой необходимо сформировать строковое представление интервала
//  Периодичность  - ПеречислениеСсылка.Периодичность, Число - интервал представление которого необходимо сформировать
//  КодЯзыка - Строка - код языка для применения нужного форматирования дат.
//
// Возвращаемое значение:
//  Строка - строковое представление интервала.
//
Функция ПредставлениеИнтервала(ДатаПериода, Знач Периодичность, КодЯзыка = "") Экспорт
	
	Если ТипЗнч(ДатаПериода) <> Тип("Дата") Тогда
		Возврат ДатаПериода;
	КонецЕсли;
	
	Если Периодичность = 6 Тогда
		Периодичность = Перечисления.Периодичность.День;
	ИначеЕсли Периодичность = 7 Тогда
		Периодичность = Перечисления.Периодичность.Неделя;
	ИначеЕсли Периодичность = 8 Тогда
		Периодичность = Перечисления.Периодичность.Декада;
	ИначеЕсли Периодичность = 9 Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	ИначеЕсли Периодичность = 10 Тогда
		Периодичность = Перечисления.Периодичность.Квартал;
	ИначеЕсли Периодичность = 11 Тогда
		Периодичность = Перечисления.Периодичность.Полугодие;
	ИначеЕсли Периодичность = 12 Тогда
		Периодичность = Перечисления.Периодичность.Год;
	КонецЕсли;
	
	ДатаНачала = НачалоПериода(ДатаПериода, Периодичность);
	ДатаОкончания = КонецПериода(ДатаПериода, Периодичность);
	Если Периодичность = Перечисления.Периодичность.Полугодие И Месяц(ДатаНачала) = 7 
			И (КодЯзыка = "" Или КодЯзыка = "ru") Тогда
		Возврат "2 " + НСтр("ru = 'полугодие'") + " " + Формат(Год(ДатаНачала), "ЧГ=0") + " г.";
	КонецЕсли;
	
	ФорматнаяСтрока = ?(ЗначениеЗаполнено(КодЯзыка), "Л="+КодЯзыка+";", "") + "ФП = Истина";   
	Возврат ПредставлениеПериода(ДатаНачала, ДатаОкончания, ФорматнаяСтрока);
	
КонецФункции

// Возвращает начальную дату интервала
//
// Параметры:
//  ДатаПериода  - Дата - дата входящая в интервал
//  Периодичность  - ПеречислениеСсылка.Периодичность - интервал представление которого необходимо сформировать.
//
// Возвращаемое значение:
//   Дата - начальная дата переданного интервала.
//
Функция НачалоПериода(Знач ДатаПериода, Периодичность) Экспорт
	
	НачалоПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.День Тогда
		НачалоПериода = НачалоДня(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		НачалоПериода = НачалоНедели(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 1);
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 11);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода), Месяц(ДатаПериода), 21);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		НачалоПериода = НачалоМесяца(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(НачалоПериода) <= 6 Тогда
			НачалоПериода = Дата(Год(ДатаПериода),1,1);
		Иначе
			НачалоПериода = Дата(Год(ДатаПериода),7,1);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		НачалоПериода = НачалоГода(ДатаПериода);
		
	КонецЕсли;
	
	Возврат НачалоПериода;
	
КонецФункции // НачалоПериода()

// Возвращает конечную дату интервала
//
// Параметры:
//  ДатаПериода  - Дата - дата входящая в интервал
//  Периодичность  - ПеречислениеСсылка.Периодичность - интервал представление которого необходимо сформировать.
//
// Возвращаемое значение:
//   Дата - конечная дата переданного интервала.
//
Функция КонецПериода(Знач ДатаПериода, Периодичность) Экспорт
	
	КонецПериода = ДатаПериода;
	Если Периодичность = Перечисления.Периодичность.День Тогда
		КонецПериода = КонецДня(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		КонецПериода = КонецНедели(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Если День(ДатаПериода) <= 10 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 10));
		ИначеЕсли День(ДатаПериода) <= 20 Тогда
			КонецПериода = КонецДня(Дата(Год(ДатаПериода), Месяц(ДатаПериода), 20));
		Иначе
			КонецПериода = КонецМесяца(ДатаПериода);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		КонецПериода = КонецМесяца(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		КонецПериода = КонецКвартала(ДатаПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(КонецПериода) <= 6 Тогда
			КонецПериода = Дата(Год(ДатаПериода),6,30,23,59,59);
		Иначе
			КонецПериода = Дата(Год(ДатаПериода),12,31,23,59,59);
		КонецЕсли;
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		КонецПериода = КонецГода(ДатаПериода);
		
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции // КонецПериода()

#Область ПроцедурыИФункции_РаботыССКД

// Возвращает ссылку на новое поле в переданном наборе данных
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных, НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в
//      котором необходимо создать новое поле.
//  Поле         - Строка - имя нового поля схемы компоновки данных
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "")
//  ТипЗначения  - ОписаниеТипов - тип данных нового поля схемы компоновки данных (необязательное по умолчанию Неопределено).
//
// Возвращаемое значение:
//  ПолеНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения.
//
Функция НовоеПолеНабора(НаборДанных, Поле, ПутьКДанным = "", Заголовок = "", ТипЗначения = Неопределено) Экспорт
	
	Если ПустаяСтрока(ПутьКДанным) Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = Поле;
	КонецЕсли;
	
	НовоеПоле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовоеПоле.Поле = Поле;
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Заголовок = Заголовок;
	Если ТипЗначения <> Неопределено Тогда
		НовоеПоле.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Возврат НовоеПоле;
	
КонецФункции

// Возвращает ссылку на новый ресурс в переданной схеме компоновки данных.
//
// Параметры:
//  СхемаКД  - СхемаКомпоновкиДанных - схема компоновки данных в которой необходимо создать новый ресурс.
//  ПутьКДанным  - Строка - путь к данным нового ресурса схемы компоновки данных.
//  Агрегат  - Строка - агрегатная функция нового ресурса (необязательное по умолчанию "Сумма").
//  ВыражениеРесурса - Строка - выражение вычисления нового ресурса (необязательное).
//
// Возвращаемое значение:
//   ПолеИтогаСхемыКомпоновкиДанных - ссылка на новый ресурс схемы компоновки данных.
//
Функция НовыйРесурс(СхемаКД, ПутьКДанным, Агрегат = "Сумма", ВыражениеРесурса = "") Экспорт
	
	НовыйРесурс = СхемаКД.ПоляИтога.Добавить();
	НовыйРесурс.ПутьКДанным = ПутьКДанным;
	НовыйРесурс.Выражение = Агрегат + "("+ НовыйРесурс.ПутьКДанным +")";
	Если НЕ ПустаяСтрока(ВыражениеРесурса) Тогда
		НовыйРесурс.Выражение = ВыражениеРесурса;
	КонецЕсли;
	
	Возврат НовыйРесурс;
	
КонецФункции

// Возвращает ссылку на новое вычисляемое поле в переданной схеме компоновки данных.
//
// Параметры:
//  СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - схема компоновки данных в которой необходимо создать новое
//                                                  вычисляемое поле.
//  ПутьКДанным           - Строка - путь к данным вычисляемого поля схемы компоновки данных.
//  ВыражениеПоля         - Строка - выражение вычисления нового вычисляемого поля.
//  Заголовок             - Строка - заголовок нового вычисляемого поля (необязательное).
//  ИскатьИПерезаполнять  - Булево - Истина - добавить новое и заполнить или перезаполнить найденное поле, 
//                                   Ложь - добавить новое и заполнить без поиска дублей, 
//                                   Неопределено - добавить новое и заполнить или оставить найденное поле без изменений. 
//                                   Значение по умолчанию - Ложь.
//  ТипЗначения           - ОписаниеТипов - Описание типов вычисляемого поля.
//                        - Неопределено - Тип значения установлен не будет, по умолчанию Неопределено.
//
// Возвращаемое значение:
//  ВычисляемоеПолеСхемыКомпоновкиДанных - ссылка на новое вычисляемое поле схемы компоновки данных.
//
Функция НовоеВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, ВыражениеПоля, Заголовок = "", ИскатьИПерезаполнять = Ложь, ТипЗначения = Неопределено) Экспорт
	
	// Поиск или создание
	ПолеДобавлено = Ложь;
	Если ИскатьИПерезаполнять = Ложь Тогда
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
		ПолеДобавлено = Истина;
	Иначе
		ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ПутьКДанным);
		ПолеСуществует = ВычисляемоеПоле <> Неопределено;
		
		Если Не ПолеСуществует Тогда
			ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
			ПолеДобавлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение
	Если ПолеДобавлено Или Не ИскатьИПерезаполнять = Неопределено Тогда
		ВычисляемоеПоле.ПутьКДанным = ПутьКДанным;
		ВычисляемоеПоле.Выражение = ВыражениеПоля;
		Если НЕ ПустаяСтрока(Заголовок) Тогда
			ВычисляемоеПоле.Заголовок = Заголовок;
		КонецЕсли;
		
		Если НЕ ТипЗначения = Неопределено Тогда
			ВычисляемоеПоле.ТипЗначения = ТипЗначения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВычисляемоеПоле;
	
КонецФункции

// Возвращает ссылку на новый ресурс по новому вычисляемому полю в переданной схеме компоновки данных.
//
// Параметры:
//  Схема  - СхемаКомпоновкиДанных - схема компоновки данных в которой необходимо создать новый ресурс
//  ПутьКДанным  - Строка - путь к данным нового вычисляемого поля и ресурса схемы компоновки данных
//  ВыражениеПоля  - Строка - выражение вычисления нового вычисляемого поля (необязательное по умолчанию "Неопределено")
//  Агрегат  - Строка - агрегатная функция нового ресурса (необязательное по умолчанию "Максимум")
//  ВыражениеРесурса  - Строка - выражение вычисления нового ресурса (необязательное).
//
// Возвращаемое значение:
//   ПолеИтогаСхемыКомпоновкиДанных - ссылка на новый ресурс схемы компоновки данных.
//
Функция НовыйВычисляемыйРесурс(Схема, ПутьКДанным, ВыражениеПоля = "Неопределено", Агрегат = "Максимум", ВыражениеРесурса = "") Экспорт
	
	НовоеВычисляемоеПоле = НовоеВычисляемоеПоле(Схема, ПутьКДанным, ВыражениеПоля);
	Ресурс = НовыйРесурс(Схема, ПутьКДанным, Агрегат, ВыражениеРесурса);
	
	Возврат Ресурс;
	
КонецФункции

// Возвращает ссылку на новое поле выбора в переданной структуре схемы компоновки данных.
//
// Параметры:
//  СтруктураКД - ГруппировкаКомпоновкиДанных - структура схемы компоновки в которую необходимо добавить новое поле выбора.
//                ТаблицаКомпоновкиДанных - структура схемы компоновки в которую необходимо добавить новое поле выбора.
//                ГруппировкаТаблицыКомпоновкиДанных - структура схемы компоновки в которую необходимо добавить новое поле выбора.
//  Поле  - Строка - путь к данным нового поля выбора.
//  Заголовок  - Строка - заголовок нового поля выбора (необязательное по умолчанию "Поле").
//
// Возвращаемое значение:
//   ВыбранноеПолеКомпоновкиДанных - ссылка на новое поле выбора схемы компоновки данных.
//
Функция НовоеПолеВыбора(СтруктураКД, Поле, Заголовок = "") Экспорт
	
	НовоеПолеВыбора = СтруктураКД.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбора.Использование = Истина;
	НовоеПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(Поле);
	НовоеПолеВыбора.Заголовок = ?(ПустаяСтрока(Заголовок),Поле,Заголовок);
	
	Возврат НовоеПолеВыбора;
	
КонецФункции

// Возвращает ссылку на новую группировку в переданной структуре схемы компоновки данных.
//
// Параметры:
//  СтруктураКД  - ГруппировкаКомпоновкиДанных - структура схемы компоновки в которую необходимо добавить новую группировку.
//                 ГруппировкаТаблицыКомпоновкиДанных - структура схемы компоновки в которую необходимо добавить новую группировку.
//                 КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - структура схемы компоновки в которую необходимо добавить новую группировку.
//                 КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных - структура схемы компоновки в которую необходимо добавить новую группировку.
//  ИмяПоляГруппировки  - Строка - имя поля группировки.
//  ТипГруппировки  - ТипГруппировкиКомпоновкиДанных - тип группировки Элементы (БезИерархии), Иерархия, ТолькоИерархия.
//  ДобавлятьОдноименноеПолеГруппировки - Булево - Флаг добавления одноименного вложенного поля группировки. Значение по умолчанию Истина.
//
// Возвращаемое значение:
//   ГруппировкаКомпоновкиДанных - ссылка на новую группировку схемы компоновки данных.
//
Функция НоваяГруппировка(СтруктураКД, ИмяПоляГруппировки = "", ТипГруппировки = Неопределено, ДобавлятьОдноименноеПолеГруппировки = Истина) Экспорт
	
	Если ТипЗнч(СтруктураКД) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Добавить();
		
	ИначеЕсли ТипЗнч(СтруктураКД) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		Группировка = СтруктураКД.Структура.Добавить();
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДобавлятьОдноименноеПолеГруппировки Тогда
		НовоеПолеГруппировки(Группировка, ИмяПоляГруппировки, ТипГруппировки);
	КонецЕсли;
	
	Группировка.Использование = Истина;
	Группировка.Имя = ИмяПоляГруппировки;
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат Группировка;
	
КонецФункции

// Возвращает ссылку на новое поле группировки в переданной группировке схемы компоновки данных.
//
// Параметры:
//  Группировка  - ГруппировкаКомпоновкиДанных - структура схемы компоновки в которую необходимо добавить новую группировку.
//  ИмяПоляГруппировки  - Строка - имя поля группировки.
//  ТипГруппировки  - ТипГруппировкиКомпоновкиДанных - тип группировки (необязательное по умолчанию Неопределено).
//
// Возвращаемое значение:
//   ПолеГруппировкиКомпоновкиДанных - ссылка на новое поле группировки схемы компоновки данных.
//
Функция НовоеПолеГруппировки(Группировка, ИмяПоляГруппировки = "", ТипГруппировки = Неопределено) Экспорт
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	Если НЕ ПустаяСтрока(ИмяПоляГруппировки) Тогда
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляГруппировки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТипГруппировки) Тогда
		ПолеГруппировки.ТипГруппировки = ТипГруппировки;
	КонецЕсли;
	
	Возврат ПолеГруппировки;
	
КонецФункции

// Возвращает ссылку на новый элемент порядка в переданной настройке схемы компоновки данных.
//
// Параметры:
//  НастройкиКомпоновщика - КомпоновщикНастроекКомпоновкиДанных -
//                          НастройкиКомпоновкиДанных - настройки схемы компоновки в которые необходимо добавить новый порядок.
//  ИмяПоля - Строка -
//            ПолеКомпоновкиДанных - поля компоновки по которому необходимо установить сортировку (необязательное).
//  Сортировка  - Строка - направление сортировки "ВОЗР", "УБЫВ" (необязательное по умолчанию "ВОЗР").
//
// Возвращаемое значение:
//   ЭлементПорядкаКомпоновкиДанных - ссылка на новый элемент порядка настроек схемы компоновки данных.
//
Функция НовыйПорядок(НастройкиКомпоновщика, ИмяПоля = "", Сортировка = "ВОЗР") Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	
	НовыйПорядок = НастройкиКД.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйПорядок.Использование = Истина;
	Если НЕ ПустаяСтрока(ИмяПоля) Тогда
		НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	КонецЕсли;
	НовыйПорядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных[Сортировка];
	
	Возврат НовыйПорядок;
	
КонецФункции

// Устанавливает параметр вывода в переданных настройках схемы компоновки данных
//
// Параметры:
//  НастройкиКомпоновщика - КомпоновщикНастроекКомпоновкиДанных -
//                          НастройкиКомпоновкиДанных - настройки схемы компоновки.
//  ИмяПараметра - Строка - имя параметра.
//  Значение  - Произвольный - значение параметра вывода (необязательное).
//  Использование  - Булево - использование параметра вывода (необязательное по умолчанию Истина).
//
Процедура УстановитьПараметрВывода(НастройкиКомпоновщика, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	УстановитьПараметр(НастройкиКД.ПараметрыВывода, ИмяПараметра, Значение, Использование);
	
КонецПроцедуры

// Устанавливает ограничения полей набора данных схемы компоновки данных
//
// Параметры:
//  СхемаКД - СхемаКомпоновкиДанных - схема компоновки данных.
//  ИменаПолей - Строка - имена полей перечисленные через запятую для которых необходимо установить ограничения.
//  ОграничениеПоля - Строка - ограничение поля "Группировка", "Поле", "Порядок", "Условие".
//
Процедура УстановитьОграничениеПолей(СхемаКД, ИменаПолей, ОграничениеПоля) Экспорт
	
	ЗначениеОграниченияПоля = Истина;
	ЗначениеОграниченияРеквизита = Неопределено;
	ОграничениеРеквизита = Неопределено;
	Если ОграничениеРеквизита = Неопределено Тогда
		ОграничениеРеквизита = ОграничениеПоля;
	КонецЕсли;
	
	Если ЗначениеОграниченияРеквизита = Неопределено Тогда
		ЗначениеОграниченияРеквизита = ЗначениеОграниченияПоля;
	КонецЕсли;
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаПолей);
	Для Каждого НаборДанных Из СхемаКД.НаборыДанных Цикл
		Для Каждого ПутьКДанным Из МассивПолей Цикл
			Поле = НаборДанных.Поля.Найти(ПутьКДанным);
			Если Поле <> Неопределено Тогда
				Поле.ОграничениеИспользования[ОграничениеПоля] = ЗначениеОграниченияПоля;
				Поле.ОграничениеИспользованияРеквизитов[ОграничениеРеквизита] = ЗначениеОграниченияРеквизита;
			КонецЕсли;
		КонецЦикла;// по полям набора данных
	КонецЦикла;// по наборам данных СКД
	
КонецПроцедуры

// Устанавливает роль поля набора данных схемы компоновки данных
//
// Параметры:
//  НаборДанных - НаборДанныхЗапросСхемыКомпоновкиДанных -
//                НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных схемы компоновки данных.
//  ПутьКДанным - Строка - имя поля для которого необходимо установить роль схемы компоновки.
//  РольПоля  - Структура - ключи - значение ключа структуры:
//		ВыражениеВидаСчета - "".
//		ГруппаОстатка - "".
//		ИгнорироватьЗначенияNULL - Ложь.
//		Измерение - Ложь.
//		НомерПериода - 0.
//		Обязательное - Ложь.
//		Остаток - Ложь.
//		ПолеСчета - "".
//		РеквизитИзмерения - Ложь.
//		РодительскоеИзмерение - "".
//		Счет - Ложь.
//		ТипБухгалтерскогоОстатка - ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет.
//		ТипОстатка - ТипОстаткаКомпоновкиДанных.Нет.
//		ТипПериода - ТипПериодаКомпоновкиДанных.Основной.
//
Процедура УстановитьРольПоляНабора(НаборДанных, ПутьКДанным, РольПоля = Неопределено) Экспорт
	
	Если РольПоля = Неопределено Тогда
		РольПоля = НоваяРольПоляНабораДанных();
	КонецЕсли;
	
	ПолеНабора = НаборДанных.Поля.Найти(ПутьКДанным);
	ЗаполнитьЗначенияСвойств(ПолеНабора.Роль, РольПоля);
	
КонецПроцедуры

// Возвращает структуру роли поля набора данных схемы компоновки данных
// с заполненными пустыми значениями по умолчанию.
//
// Возвращаемое значение: 
//	Структура - Ключи:
//		* ВыражениеВидаСчета - Строка - 
//		* ГруппаОстатка - Строка - 
//		* ИгнорироватьЗначенияNULL - Булево
//		* Измерение - Булево
//		* НомерПериода - Число
//		* Обязательное - Булево
//		* Остаток - Булево
//		* ПолеСчета - Строка
//		* РеквизитИзмерения - Булево
//		* РодительскоеИзмерение - Строка
//		* Счет - Булево
//		* ТипБухгалтерскогоОстатка - ТипБухгалтерскогоОстаткаКомпоновкиДанных -
//		* ТипОстатка - ТипОстаткаКомпоновкиДанных - 
//		* ТипПериода - ТипПериодаКомпоновкиДанных- 
//
Функция НоваяРольПоляНабораДанных() Экспорт
	
	НоваяРоль = Новый Структура;
	НоваяРоль.Вставить("ВыражениеВидаСчета"      , "");
	НоваяРоль.Вставить("ГруппаОстатка"           , "");
	НоваяРоль.Вставить("ИгнорироватьЗначенияNULL", Ложь);
	НоваяРоль.Вставить("Измерение"               , Ложь);
	НоваяРоль.Вставить("НомерПериода"            , 0);
	НоваяРоль.Вставить("Обязательное"            , Ложь);
	НоваяРоль.Вставить("Остаток"                 , Ложь);
	НоваяРоль.Вставить("ПолеСчета"               , "");
	НоваяРоль.Вставить("РеквизитИзмерения"       , Ложь);
	НоваяРоль.Вставить("РодительскоеИзмерение"   , "");
	НоваяРоль.Вставить("Счет"                    , Ложь);
	НоваяРоль.Вставить("ТипБухгалтерскогоОстатка", ТипБухгалтерскогоОстаткаКомпоновкиДанных.Нет);
	НоваяРоль.Вставить("ТипОстатка"              , ТипОстаткаКомпоновкиДанных.Нет);
	НоваяРоль.Вставить("ТипПериода"              , ТипПериодаКомпоновкиДанных.Основной);
	Возврат НоваяРоль;
	
КонецФункции

// Возвращает ссылку на новый макет области
//
// Параметры:
//  Схема - СхемаКомпоновкиДанных - схема компоновки данных.
//  МакетОбласти - ОписаниеМакетаСхемыКомпоновкиДанных - описание параметра.
//  ИмяМакета - Строка - имя макета.
//
// Возвращаемое значение:
//   ОписаниеМакетаСхемыКомпоновкиДанных - описание макета схемы компоновки данных.
//
Функция ДобавитьМакетСхемы(Схема, МакетОбласти, ИмяМакета) Экспорт
	
	ОписаниеМакета = Схема.Макеты.Добавить(); // ОписаниеМакетаСхемыКомпоновкиДанных -
	ОписаниеМакета.Макет = МакетОбласти;
	ОписаниеМакета.Имя = ИмяМакета;
	Возврат ОписаниеМакета;
	
КонецФункции

// Возвращает ссылку на новую связь наборов данных схемы компоновки данных.
//
// Параметры:
//  СКД  - СхемаКомпоновкиДанных - схема компоновки данных в которой необходимо добавить связь наборов.
//  НаборДанныхИсточник  - НаборДанныхЗапросСхемыКомпоновкиДанных -
//  						- НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных источник связи.
//  НаборДанныхПриемник  - НаборДанныхЗапросСхемыКомпоновкиДанных -
//  						- НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных приемник связи.
//  ВыражениеИсточник - Строка - Выражение, по которому будет определяться значение связи источника.
//  ВыражениеПриемник - Строка - Выражение, по которому будет определяться значение связи приемника (необязательное).
//
// Возвращаемое значение:
//   СвязьНаборовДанныхСхемыКомпоновкиДанных - ссылка на новую связь наборов данных.
//
Функция НоваяСвязьНаборов(СКД, НаборДанныхИсточник, НаборДанныхПриемник, ВыражениеИсточник, ВыражениеПриемник = "") Экспорт
	
	Связь = СКД.СвязиНаборовДанных.Добавить();
	Связь.НаборДанныхИсточник = 	НаборДанныхИсточник;
	Связь.НаборДанныхПриемник = 	НаборДанныхПриемник;
	Связь.ВыражениеИсточник = 		ВыражениеИсточник;
	Если ВыражениеПриемник = "" Тогда
		Связь.ВыражениеПриемник = 		ВыражениеИсточник;
	Иначе
		Связь.ВыражениеПриемник = 		ВыражениеПриемник;
	КонецЕсли;
	
	Возврат Связь;
	
КонецФункции

// Копирует элементы отбора из одной коллекции отбора в другую
//
// Параметры:
//  ОтборИсточник - ОтборКомпоновкиДанных - откуда копировать.
//  ОтборПриемник - ОтборКомпоновкиДанных - куда копировать.
//  ТолькоИспользуемые - Булево - копировать только используемые.
//  ПоляИсключения - Структура - в ключах структуры перечислены поля которые не должны попасть в отбор приемник.
//  Постфикс - Строка - произвольная строка которая будет добавлена к имени левого поля.
//  ПроверятьДоступностьПолей - Булево - Проверять доступность полей отбора при копировании. По умолчанию Ложь.
//
Процедура СкопироватьОтбор(ОтборИсточник, ОтборПриемник, ТолькоИспользуемые = Ложь, ПоляИсключения = Неопределено, Постфикс = "", ПроверятьДоступностьПолей = Ложь) Экспорт
	
	ПараметрыПроверкиДоступностиПолей = Новый Структура;
	ПараметрыПроверкиДоступностиПолей.Вставить("ПроверятьДоступностьПолей", ПроверятьДоступностьПолей);
	
	ДоступныеПоляОтбора = Новый ТаблицаЗначений;
	ДоступныеПоляОтбора.Колонки.Добавить("ПолеКомпоновки");
	ДоступныеПоляОтбора.Колонки.Добавить("ИмяПоля");
	Если ПроверятьДоступностьПолей Тогда
		ЗаполнитьДоступныеПоляРекурсивно(ДоступныеПоляОтбора, ОтборПриемник.ДоступныеПоляОтбора.Элементы);
	КонецЕсли;
	ДоступныеПоляОтбора.Индексы.Добавить("ПолеКомпоновки");
	ДоступныеПоляОтбора.Индексы.Добавить("ИмяПоля");
	
	ПараметрыПроверкиДоступностиПолей.Вставить("ДоступныеПоляОтбора", ДоступныеПоляОтбора);
	
	СкопироватьОтборРекурсивно(ОтборИсточник, ОтборПриемник, ТолькоИспользуемые, ПоляИсключения, Постфикс, ПараметрыПроверкиДоступностиПолей);
	
КонецПроцедуры

// Возвращает ссылку на группировку компоновки в переданной структуре схемы компоновки данных.
//
// Параметры:
//  СтруктураКД - КоллекцияЭлементовСтруктурыНастроекКомпоновкиДанных - отбор схемы компоновки в который необходимо добавить новый элемент.
//  ИмяЭлемента - Строка - имя поля компоновки по которому необходимо найти группировка.
//
// Возвращаемое значение:
//   ГруппировкаКомпоновкиДанных - ссылка на найденный элемент группировки схемы компоновки данных.
//
Функция НайтиГруппировку(СтруктураКД, ИмяЭлемента) Экспорт
	
	Результат = Неопределено;
	Для Каждого Элемент Из СтруктураКД Цикл
		Если Элемент.Имя = ИмяЭлемента Тогда
			Результат = Элемент;
			Прервать;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Результат = НайтиГруппировку(Элемент.Строки, ИмяЭлемента);
			Если Результат = Неопределено Тогда
				Результат = НайтиГруппировку(Элемент.Колонки, ИмяЭлемента);	
			КонецЕсли;
			Прервать;
		Иначе
			Результат = НайтиГруппировку(Элемент.Структура, ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на элемент отбора в переданном отборе схемы компоновки данных.
//
// Параметры:
//  ОтборКД - ОтборКомпоновкиДанных - отбор схемы компоновки в который необходимо добавить новый элемент.
//  ИмяЭлемента - Строка - имя поля компоновки по которому необходимо найти элемент отбора.
//  ЗначениеОтбора - Произвольный - установленное значение отбора по которому необходимо найти элемент отбора.
//  ВидСравнения - ВидСравненияКомпоновкиДанных - установленный вид сравнения по которому необходимо найти элемент отбора.
//
// Возвращаемое значение:
//   ЭлементОтбораКомпоновкиДанных - ссылка на найденный элемент отбора схемы компоновки данных.
//
Функция НайтиЭлементОтбора(ОтборКД, ИмяЭлемента, ЗначениеОтбора = "#НеУчитывать#", ВидСравнения = Неопределено) Экспорт
	
	Результат = Неопределено;
	Для Каждого ЭлементОтбора Из ОтборКД.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = НайтиЭлементОтбора(ЭлементОтбора, ИмяЭлемента);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяЭлемента) Тогда
			Если ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора ИЛИ ЗначениеОтбора = "#НеУчитывать#" Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравнения ИЛИ ВидСравнения = Неопределено Тогда
					Результат = ЭлементОтбора;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Добавляет новый параметр в переданную коллекцию параметров настроек схемы компоновки данных.
//
// Параметры:
//  Параметры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - настройки схемы компоновки.
//  ИмяПараметра - ЗначенияПараметровДанныхКомпоновкиДанных, ЗначенияПараметровВыводаКомпоновкиДанных - коллекция параметров компоновки данных.
//  Значение  - Произвольный - значение параметра компоновки (необязательное).
//  Использование  - Булево - использование параметра данных (необязательное по умолчанию Истина).
//
Процедура УстановитьПараметр(Параметры, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	Параметр = Параметры.Элементы.Найти(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметр.Использование = Использование;
	Если Использование Тогда
		Параметр.Значение = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет схему компоновки данных и возвращает таблицу результата.
//
// Параметры:
//  СхемаКомпоновкиДанных  - СхемаКомпоновкиДанных - исполняемая схема компоновки данных.
//  НастройкиКомпоновщика  - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек исполняемой схемы компоновки данных.
//  ВнешниеНаборыДанных  - Структура - внешние наборы компоновки данных - ключ - наименование внешнего набора,
//                                       значение - таблица значений внешнего набора.
//  ВыводВДерево - Булево - если Истина выводить в дерево значений.
//
// Возвращаемое значение:
//   ТаблицаЗначений, ДеревоЗначений - результат выполнения схемы компоновки данных.
//
Функция ВыгрузитьРезультатСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика, ВнешниеНаборыДанных = Неопределено, ВыводВДерево = Ложь) Экспорт
	
	МакетКомпоновщика = ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика);
	Возврат ВыгрузитьРезультатСКДПоМакету(МакетКомпоновщика, ВнешниеНаборыДанных, ВыводВДерево);
	
КонецФункции

// Возвращает ссылку на новый элемент отбора в переданном отборе схемы компоновки данных.
//
// Параметры:
//  Отбор - ОтборКомпоновкиДанных - отбор схемы компоновки, в который необходимо добавить новый элемент
//  ЛевоеЗначение - Строка, ПолеКомпоновкиДанных - поле компоновки, по которому необходимо установить отбор (необязательное)
//  ПравоеЗначение  - Произвольный, Строка, ПолеКомпоновкиДанных - значение отбора (необязательное) или поле компоновки
//  ТипОтбора  - ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных - тип нового элемента отбора (необязательное)
//  ВидСравнения  - ВидСравненияКомпоновкиДанных - вид сравнения левого и правого значения
//  ПравоеЗначениеПоле  - Булево - указывает использовать ли в качестве правого значения поле компоновки данных.
//
// Возвращаемое значение:
//  ЭлементОтбораКомпоновкиДанных - ссылка на новый элемент отбора схемы компоновки данных.
//
Функция НовыйОтбор(Отбор, ЛевоеЗначение, ПравоеЗначение = Неопределено, ТипОтбора = Неопределено, ВидСравнения = Неопределено, ПравоеЗначениеПоле = Ложь) Экспорт
	
	Если ТипОтбора = Неопределено Тогда
		ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных");
	КонецЕсли;
	
	НовыйОтбор = Отбор.Элементы.Добавить(ТипОтбора);
	Если ЛевоеЗначение <> Неопределено Тогда
		Если ТипЗнч(ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			НовыйОтбор.ЛевоеЗначение = ЛевоеЗначение;
		Иначе
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	Если ПравоеЗначение <> Неопределено Тогда
		Если ПравоеЗначениеПоле Тогда
			Если ТипЗнч(ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
				НовыйОтбор.ПравоеЗначение = ПравоеЗначение;
			Иначе
				НовыйОтбор.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ПравоеЗначение);
			КонецЕсли;
		Иначе
			НовыйОтбор.ПравоеЗначение = ПравоеЗначение;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОтбора = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Если ВидСравнения = Неопределено Тогда
			НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			Если ТипЗнч(ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ПравоеЗначение) = Тип("СписокЗначений") Тогда
				НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			КонецЕсли;
		Иначе
			НовыйОтбор.ВидСравнения = ВидСравнения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НовыйОтбор;
	
КонецФункции

// Устанавливает новый отбор в переданном отборе схемы компоновки данных.
//
// Параметры:
//  ОтборКД - ОтборКомпоновкиДанных - отбор схемы компоновки в который необходимо добавить новый элемент.
//  ЛевоеЗначение - Строка, ПолеКомпоновкиДанных - поле компоновки по которому необходимо установить отбор.
//  ПравоеЗначение  - Произвольный - значение отбора (необязательное).
//  ВидСравнения  - ВидСравненияКомпоновкиДанных - вид сравнение компоновки данных (необязательное).
//  Использование  - Булево - использование нового элемента отбора (необязательное по умолчанию Истина).
//
Процедура УстановитьОтбор(ОтборКД, ЛевоеЗначение, ПравоеЗначение = Неопределено, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	ЭлементОтбора = НайтиЭлементОтбора(ОтборКД, ЛевоеЗначение);
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = НовыйОтбор(ОтборКД, ЛевоеЗначение, ПравоеЗначение);
	КонецЕсли;
	ЭлементОтбора.Использование = Использование;
	Если ВидСравнения <> Неопределено Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения;
	КонецЕсли;
	Если Использование Тогда
		ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметр данных в переданных настройках схемы компоновки данных.
//
// Параметры:
//  НастройкиКомпоновщика - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - настройки схемы компоновки.
//  ИмяПараметра - Строка - имя параметра компоновки данных.
//  Значение  - Произвольный - значение параметра компоновки (необязательное).
//  Использование  - Булево - использование параметра данных (необязательное по умолчанию Истина).
//
Процедура УстановитьПараметрКомпоновки(НастройкиКомпоновщика, ИмяПараметра, Значение = Неопределено, Использование = Истина) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.Настройки;
	КонецЕсли;
	УстановитьПараметр(НастройкиКД.ПараметрыДанных, ИмяПараметра, Значение, Использование);
	
КонецПроцедуры

// Возвращает компоновщик настроек для переданной схемы компоновки данных
//
// Параметры:
//  Схема                    - СхемаКомпоновкиДанных - схема компоновки данных для которой необходимо создать
//                                                     компоновщик настроек.
//  ВосстанавливатьНастройки - Булево - признак необходимости восстанавливать настройки.
//
// Возвращаемое значение:
//   КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек для варианта по умолчанию.
//
Функция КомпоновщикСхемы(Схема, ВосстанавливатьНастройки = Истина) Экспорт
	
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема);
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(ИсточникДоступныхНастроек);
	Компоновщик.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	
	Если ВосстанавливатьНастройки Тогда
		Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	КонецЕсли;
	
	Возврат Компоновщик;
	
КонецФункции

// Возвращает макет компоновки данных.
//
// Параметры:
//  СхемаКомпоновкиДанных  - СхемаКомпоновкиДанных - исполняемая схема компоновки данных.
//  НастройкиКомпоновщика  - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных - настройки исполняемой
//      схемы компоновки данных.
//
// Возвращаемое значение:
//   МакетКомпоновкиДанных - макет компоновки данных.
//
Функция ПодготовитьМакетКомпоновкиДляВыгрузкиСКД(СхемаКомпоновкиДанных, НастройкиКомпоновщика) Экспорт
	
	НастройкиКД = НастройкиКомпоновщика;
	Если ТипЗнч(НастройкиКомпоновщика) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		НастройкиКД = НастройкиКомпоновщика.ПолучитьНастройки();
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКД,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Возврат МакетКомпоновки;
	
КонецФункции

// Выполняет схему компоновки данных и возвращает таблицу результата.
//
// Параметры:
//  МакетКомпоновки  - МакетКомпоновкиДанных - макет компоновки данных.
//  ВнешниеНаборыДанных  - Структура - внешние наборы компоновки данных - ключ - наименование внешнего набора,
//                                       значение - таблица значений внешнего набора.
//  ВыводВДерево - Булево - если Истина выводить в дерево значений.
//
// Возвращаемое значение:
//   ТаблицаЗначений, ДеревоЗначений - результат выполнения схемы компоновки данных.
//
Функция ВыгрузитьРезультатСКДПоМакету(МакетКомпоновки, ВнешниеНаборыДанных = Неопределено, ВыводВДерево = Ложь) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Если ВыводВДерево Тогда
		Результат = Новый ДеревоЗначений;
	КонецЕсли;
	
	// Создаем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	Если ВнешниеНаборыДанных = Неопределено Тогда
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,,Истина);
	Иначе
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,,Истина);
	КонецЕсли;
	
	// Выводим в таблицу значений
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	Возврат Результат;
	
КонецФункции

// Возвращает ссылку на новую группу полей в переданном наборе данных.
//
// Параметры:
//  НаборДанных  - НаборДанныхЗапросСхемыКомпоновкиДанных,НаборДанныхОбъектСхемыКомпоновкиДанных - набор данных в
//      котором необходимо создать новое поле.
//  Поле         - Строка - имя нового поля схемы компоновки данных.
//  ПутьКДанным  - Строка - путь к данным нового поля схемы компоновки данных (необязательное по умолчанию равно "").
//  Заголовок    - Строка - заголовок нового поля схемы компоновки данных (необязательное по умолчанию равно "").
//
// Возвращаемое значение:
//  ПапкаПолейНабораДанныхСхемыКомпоновкиДанных - описание возвращаемого значения.
//
Функция НоваяГруппаНабора(НаборДанных, ПутьКДанным, Заголовок = "") Экспорт
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = ПутьКДанным;
	КонецЕсли;
	
	НоваяГруппа = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	НоваяГруппа.ПутьКДанным = ПутьКДанным;
	НоваяГруппа.Заголовок = Заголовок;
	
	Возврат НоваяГруппа;
	
КонецФункции


// Возвращает в зависимости от типа, коллекцию подчиненных элементов первого уровня переданной строки дерева элементов отчета.
//
//	Параметры:
//		СтрокаДерева - ДанныеФормыЭлементДерева, СтрокаДереваЗначений, КоллекцияСтрокДереваЗначений, ДанныеФормыДерево - строка дерева элементов отчета.
//
//	Возвращаемое значение:
//		ДанныеФормыКоллекцияЭлементовДерева -
//		КоллекцияСтрокДереваЗначений - Подчиненные строки.
//
Функция ПодчиненныеСтроки(СтрокаДерева) Экспорт
	
	ТипСтрокиДерева = ТипЗнч(СтрокаДерева);
	ЭтоКоллекцияСтрок = ТипСтрокиДерева = Тип("ДанныеФормыКоллекцияЭлементовДерева")
	                ИЛИ ТипСтрокиДерева = Тип("КоллекцияСтрокДереваЗначений");
	
	Если ЭтоКоллекцияСтрок Тогда
		ПодчиненныеСтроки = СтрокаДерева;
	Иначе
		Если ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыЭлементДерева")
			ИЛИ ТипЗнч(СтрокаДерева) = Тип("ДанныеФормыДерево") Тогда
			ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Иначе
			ПодчиненныеСтроки = СтрокаДерева.Строки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПодчиненныеСтроки;
	
КонецФункции

// Находит ближайший вниз по иерархии элемент по значению заданного реквизита.
//
// Параметры:
//	Дерево - ДанныеФормыДерево, ДанныеФормыЭлементДерева - элемент дерева или строка дерева в котором необходимо произвести поиск
//	ИмяРеквизита - Строка - имя реквизита дерева значение которого сравнивается с заданным для поиска
//	ЗначениеРеквизита - Произвольный - значение реквизита дерева которое необходимо найти.
//
// Возвращаемое значение:
//	ДанныеФормыЭлементДерева, СтрокаДереваЗначений - подчиненный элемент.
//
Функция ПодчиненныйЭлемент(Дерево, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	Если ТипЗнч(Дерево) = Тип("ДеревоЗначений")
		ИЛИ ТипЗнч(Дерево) = Тип("СтрокаДереваЗначений") Тогда
		
		СтрокиДерева = Дерево.Строки;
		Возврат СтрокиДерева.Найти(ЗначениеРеквизита, ИмяРеквизита, Истина);
		
	КонецЕсли;
	
	ПодчиненныйЭлемент = Неопределено;
	ПодчиненныеСтроки = ПодчиненныеСтроки(Дерево);
	Для Каждого СтрокаДерева Из ПодчиненныеСтроки Цикл
		Если СтрокаДерева[ИмяРеквизита] = ЗначениеРеквизита Тогда
			ПодчиненныйЭлемент = СтрокаДерева;
			Прервать;
		КонецЕсли;
		ПодчиненныйЭлемент = ПодчиненныйЭлемент(СтрокаДерева, ИмяРеквизита, ЗначениеРеквизита);
		Если ПодчиненныйЭлемент <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодчиненныйЭлемент;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Переопределяет флаг РазрешаетсяВыборОперанда у добавленных строк схемы компоновки.
// 
// Параметры:
// 	ДобавленнаяСтрока - ДанныеФормыЭлементДерева - Описание:
// 	  * РазрешаетсяВыборОперанда - Булево - Флаг возможности выбора строки.
// 	Форма - ФормаКлиентскогоПриложения - форма настройки заполнения аналитики бюджетирования или форма настройки заполнения субконто международного учета:
// 	  * ТипЗначения - ОписаниеТипов - операнды с типами, входящими в указанное описание типов, можно выбрать.
// 	  * ДополнительноеСвойствоИдентификатор - Строка - Идентификатор добавленного из формы дополнительного реквизита / сведения.
Процедура ПроверитьВозможностьВыбораДобавленныхСтрокПоТипуРекурсивно(ДобавленнаяСтрока, Форма)
	
	ДобавленнаяСтрока.РазрешаетсяВыборОперанда = Мин(ДобавленнаяСтрока.РазрешаетсяВыборОперанда,
		ПодходящееПолеВыбора(ДобавленнаяСтрока, Форма.ТипЗначения, Форма.ДополнительноеСвойствоИдентификатор));
	
	Для каждого ПодчиненнаяСтрокаГруппы Из ДобавленнаяСтрока.ПолучитьЭлементы() Цикл
		ПроверитьВозможностьВыбораДобавленныхСтрокПоТипуРекурсивно(ПодчиненнаяСтрокаГруппы, Форма);
	КонецЦикла;

КонецПроцедуры

// Возвращает коллекцию элементов дерева формы.
// 
// Параметры:
// 	МестоПоискаСтрок - ДанныеФормыЭлементДерева, ДанныеФормыДерево - место поиска строк.
// Возвращаемое значение:
// 	ДанныеФормыКоллекцияЭлементовДерева из ДанныеФормыЭлементДерева - коллекция элементов дерева:
// 	 *Идентификатор - Строка - Идентификатор текущей части операнда.
Функция ПодчиненныеСтрокиДляРазвертки(МестоПоискаСтрок)
	Возврат МестоПоискаСтрок.ПолучитьЭлементы();
КонецФункции

Процедура РазвернутьСтрокиДереваОперандовПоТекущемуВыражению(Форма, МестоПоискаСтрок, ОставшиесяЧастиОперанда, ОграниченияРазвертки)
	Если ОставшиесяЧастиОперанда.Количество() > 0 Тогда
		СтрокаДерева = Неопределено;
		ПодчиненныеСтроки = ПодчиненныеСтрокиДляРазвертки(МестоПоискаСтрок);
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.Идентификатор = ОставшиесяЧастиОперанда[0] Тогда
				СтрокаДерева = ПодчиненнаяСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ СтрокаДерева = Неопределено Тогда
			ОставшиесяЧастиОперанда.Удалить(0);
			Если ОставшиесяЧастиОперанда.Количество() > 0 Тогда
				Если НЕ СтрокаДерева.ПодчиненныеСтрокиРазворачивались Тогда
					ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
					РаботаСФормулами.РазвернутьСтрокуОперандаДереваФормы(Форма.ДеревоВыбора,
						ИдентификаторСтроки,
						ОграниченияРазвертки.МаксимальныйУровеньРазверткиСтрок);
				КонецЕсли;
				РазвернутьСтрокиДереваОперандовПоТекущемуВыражению(Форма, СтрокаДерева, ОставшиесяЧастиОперанда, ОграниченияРазвертки);
			Иначе
				ДеревоВыбора = Форма.Элементы.ДеревоВыбора; // ТаблицаФормы -
				ДеревоВыбора.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Копирует элементы отбора из одной коллекции отбора в другую.
//
// Параметры:
//  ОтборИсточник - ОтборКомпоновкиДанных - откуда копировать.
//  ОтборПриемник - ОтборКомпоновкиДанных - куда копировать.
//  ТолькоИспользуемые - Булево - копировать только используемые.
//  ПоляИсключения - Структура - в ключах структуры перечислены поля которые не должны попасть в отбор приемник.
//  Постфикс - Строка - произвольная строка которая будет добавлена к имени левого поля.
//  ПараметрыПроверкиДоступностиПолей - Структура - Параметры проверки доступности полей. Если необходимо проверять доступность полей:
//   *ПроверятьДоступностьПолей - Булево - Проверять доступность полей отбора при копировании. По умолчанию Ложь.
//   *ДоступныеПоляОтбора - ТаблицаЗначений - Кэш доступных полей для проверки при иерархическом копировании отбора:
//     **ПолеКомпоновки - ПолеКомпоновкиДанных  - Поле компоновки данных.
//     **ИмяПоля        - Строка          - Имя поля для проверок через точку.
//
Процедура СкопироватьОтборРекурсивно(ОтборИсточник, ОтборПриемник, ТолькоИспользуемые = Ложь, ПоляИсключения = Неопределено, Постфикс = "", ПараметрыПроверкиДоступностиПолей = Неопределено)
	
	ПроверятьДоступностьПолей = ПараметрыПроверкиДоступностиПолей.ПроверятьДоступностьПолей;
	ДоступныеПоляОтбора = ПараметрыПроверкиДоступностиПолей.ДоступныеПоляОтбора;
	
	Для Каждого Элемент Из ОтборИсточник.Элементы Цикл
		
		Если НЕ (ТолькоИспользуемые И Элемент.Использование ИЛИ НЕ ТолькоИспользуемые) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлемент = НовыйОтбор(ОтборПриемник, Неопределено,,Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			СкопироватьОтборРекурсивно(Элемент, НовыйЭлемент, ТолькоИспользуемые, ПоляИсключения, Постфикс, ПараметрыПроверкиДоступностиПолей);
		Иначе
			
			Если Не ЗначениеЗаполнено(Элемент.ЛевоеЗначение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПоляИсключения) Тогда
				Поле = КомпоновкаДанныхКлиентСервер.РазделитьИмяПоляИРеквизита(Строка(Элемент.ЛевоеЗначение));
				Если ПоляИсключения.Свойство(Поле.Имя) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если ПроверятьДоступностьПолей Тогда
				ПолеДоступно = Ложь;
				Если НЕ ДоступныеПоляОтбора.Найти(Элемент.ЛевоеЗначение, "ПолеКомпоновки") = Неопределено Тогда
					ПолеДоступно = Истина;
				КонецЕсли;
				Если НЕ ПолеДоступно Тогда
					ИмяПоляИРеквизит = КомпоновкаДанныхКлиентСервер.РазделитьИмяПоляИРеквизита(Строка(Элемент.ЛевоеЗначение));
					Если НЕ ДоступныеПоляОтбора.Найти(ИмяПоляИРеквизит.Имя, "ИмяПоля") = Неопределено Тогда
						ПолеДоступно = Истина;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ПолеДоступно Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовыйЭлемент = НовыйОтбор(ОтборПриемник, Неопределено,,Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			
			Если Постфикс <> "" Тогда
				Поле = КомпоновкаДанныхКлиентСервер.РазделитьИмяПоляИРеквизита(Строка(НовыйЭлемент.ЛевоеЗначение));
				НовоеИмяПоля = Поле.Имя + Постфикс + "." + Поле.Реквизит;
				Если СтрНайти(Поле.Имя, "Субконто") И СтрНайти("ДТКТ", ВРег(Постфикс))Тогда
					Номер = Прав(Поле.Имя, 1);
					Если СтрНайти("12345", Номер) Тогда
						Шаблон = СтрЗаменить(Поле.Имя, Номер, "%1");
						НовоеИмяПоля = СтрШаблон(Шаблон, Постфикс + Номер) + "." + Поле.Реквизит;
					КонецЕсли;
				КонецЕсли;
				НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(НовоеИмяПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДоступныеПоляРекурсивно(ДоступныеПоля, ЭлементыДоступныхПолей)
	Для каждого ЭлементДоступныхПолей Из ЭлементыДоступныхПолей Цикл
		Если ЭлементДоступныхПолей.Папка Тогда
			ЗаполнитьДоступныеПоляРекурсивно(ДоступныеПоля, ЭлементДоступныхПолей.Элементы);
		Иначе
			НоваяСтрока = ДоступныеПоля.Добавить();
			НоваяСтрока.ПолеКомпоновки = ЭлементДоступныхПолей.Поле;
			НоваяСтрока.ИмяПоля = Строка(ЭлементДоступныхПолей.Поле);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
