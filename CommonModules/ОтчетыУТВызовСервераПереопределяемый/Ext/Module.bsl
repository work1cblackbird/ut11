////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Форма отчета УТ (вызов сервера, переопределяемый)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается из модуля ОтчетыУТКлиентПереопределяемый"
//
// Параметры:
// 	СвойстваВариантаОтчета - Структура -:
// 	 *КлючОбъекта - Строка - 
// 	 *КлючВарианта - Строка - 
// Возвращаемое значение:
// 	КомпоновщикНастроекКомпоновкиДанных, Неопределено - Описание
Функция КомпоновщикНастроекВариантаОтчета(СвойстваВариантаОтчета) Экспорт
	
	СКДОтчета = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СвойстваВариантаОтчета.КлючОбъекта).ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	ИскомыйВариантОтчета = СКДОтчета.ВариантыНастроек.Найти(СвойстваВариантаОтчета.КлючВарианта);
	
	Если ИскомыйВариантОтчета <> Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.ЗагрузитьНастройки(ИскомыйВариантОтчета.Настройки);
		Возврат КомпоновщикНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Формирует параметры расшифровки для отчета 'ТоварыСИстекающимиСертификатами'.
// 
// Параметры:
//	Расшифровка - Произвольный - значение расшифровки точки, серии или значения диаграммы.
//	АдресРасшифровки - Строка - Адрес расшифровки
//
// Возвращаемое значение:
//	Структура - Сформировать данные расшифровки:
//		* ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - значение вида номенклатуры.
//		* Номенклатура - СправочникСсылка.Номенклатура - значение поля номенклатуры.
//		* Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - значение поля характеристики номенклатуры.
//		* Серия - СправочникСсылка.СерииНоменклатуры - значение поля серии номенклатуры.
//		* ТипСертификата - Строка - значение типа сертификата.
//
Функция СформироватьДанныеРасшифровки(Расшифровка, АдресРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки); // ДанныеРасшифровкиКомпоновкиДанных -
	
	ПараметрыРасшифровки = Новый Структура;
	ПараметрыРасшифровки.Вставить("ВидНоменклатуры",	Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ПараметрыРасшифровки.Вставить("Номенклатура",		Справочники.Номенклатура.ПустаяСсылка());
	ПараметрыРасшифровки.Вставить("Характеристика",		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	ПараметрыРасшифровки.Вставить("Серия",				Справочники.СерииНоменклатуры.ПустаяСсылка());
	ПараметрыРасшифровки.Вставить("ТипСертификата",		"");
	
	ПолучитьЗначенияПолей(ПараметрыРасшифровки, ДанныеРасшифровки.Элементы, Расшифровка);
	
	ВыбранноеПоле = ДанныеРасшифровки.Элементы[Расшифровка];
	
	Если ТипЗнч(ВыбранноеПоле) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
		Для Каждого Поле Из ВыбранноеПоле.ПолучитьПоля() Цикл
			Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				ПараметрыРасшифровки.Вставить(СтрЗаменить(Поле.Поле, ".", ""), Поле.Значение);
				
				Если Поле.Поле = "Серия" Тогда
					ПолучитьЗначениеПоля(ПараметрыРасшифровки, ДанныеРасшифровки.Элементы[Расшифровка - 1]);
				ИначеЕсли Поле.Поле = "Характеристика" Тогда
					ПолучитьЗначениеПоля(ПараметрыРасшифровки, ДанныеРасшифровки.Элементы[Расшифровка +1 ]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРасшифровки.Номенклатура) Тогда
		ПараметрыРасшифровки.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
												ПараметрыРасшифровки.Номенклатура,
												"ВидНоменклатуры");
	КонецЕсли;
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции

// Вызывается для отчета "УправленческийБаланс" возвращеает параметры для открытия контекстного меню
// со списком расшифровочных отчетов
// 
// Параметры:
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных
//  Расшифровка - ДанныеРасшифровкиКомпоновкиДанных
//  АдресРасшифровки - Строка
// 
// Возвращаемое значение:
//  Структура - Настройки расшифровки статьи актива пассива:
// * Показатель - ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов
// * ОборотноСальдоваяВедомостьАктивовПассивов - Структура -:
// ** ПараметрыСКД - Структура -:
// *** ПериодОтчета - Дата
// *** ВалютаОтчета  - СправочникСсылка.Валюты
// ** Отбор - Структура -
// * МенюОтчетов - СписокЗначений - списко настроек для открытия контекстных отчетов
//
Функция НастройкиРасшифровкиСтатьиАктиваПассива(КомпоновщикНастроек, Расшифровка, АдресРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки); // ДанныеРасшифровкиКомпоновкиДанных -
	
	ПоляРасшифровки = Новый Структура;
	ПоляРасшифровки.Вставить("Показатель", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка());
	ПолучитьЗначенияПолей(ПоляРасшифровки, ДанныеРасшифровки.Элементы, Расшифровка);
	
	ВыбранноеПоле = ДанныеРасшифровки.Элементы[Расшифровка]; 
	Если ТипЗнч(ВыбранноеПоле) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
		Для Каждого Поле Из ВыбранноеПоле.ПолучитьПоля() Цикл
			Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				ПоляРасшифровки.Вставить(СтрЗаменить(Поле.Поле,".",""), Поле.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();

	СписокОтчетов = Новый СписокЗначений;
	#Область ОбщиеПараметры
	ВалютаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ВалютаОтчета").Значение;
	ПараметрыСКД = Новый Структура("ВалютаОтчета", ВалютаОтчета);
	Отбор = Новый Структура;
	ПараметрыОтчетаРасшифровки = Новый Структура("ПараметрыСКД, Отбор", ПараметрыСКД, Отбор);
	ПараметрыСКД = ПараметрыОтчетаРасшифровки.ПараметрыСКД;
	
	ПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ПериодОтчета").Значение;
	Если ПоляРасшифровки.Свойство("ДинамическийПериод") Тогда
		Периодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Периодичность").Значение;
		ПериодОтчета = Новый СтандартныйПериод;
		ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		ПериодОтчета.ДатаНачала = ФинансоваяОтчетностьСервер.НачалоПериода(ПоляРасшифровки.ДинамическийПериод, Периодичность);
		ПериодОтчета.ДатаОкончания = ФинансоваяОтчетностьСервер.КонецПериода(ПоляРасшифровки.ДинамическийПериод, Периодичность);
	КонецЕсли;
	ИмяПараметраПериода = "Период";
	#КонецОбласти

	#Область ОбщийОтбор
	Отбор = ПараметрыОтчетаРасшифровки.Отбор;
	Если ПоляРасшифровки.Свойство("НаправлениеДеятельности") Тогда
		ЭлементОтбора = НовыйЭлементОтбора();
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаправлениеДеятельности");
		ЭлементОтбора.ПравоеЗначение = ПоляРасшифровки.НаправлениеДеятельности;
		Отбор.Вставить("НаправлениеДеятельности", ЭлементОтбора);
		Если НЕ ЗначениеЗаполнено(Отбор.НаправлениеДеятельности.ПравоеЗначение) Тогда
			Отбор.НаправлениеДеятельности.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		КонецЕсли;
	КонецЕсли;
	Если ПоляРасшифровки.Свойство("Организация") Тогда
		ЭлементОтбора = НовыйЭлементОтбора();
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ПравоеЗначение = ПоляРасшифровки.Организация;
		Отбор.Вставить("Организация", ЭлементОтбора);
	КонецЕсли;
	
	НайтиИДобавитьОтбор(НастройкиОтчета.Отбор, "Организация", Отбор);
	НайтиИДобавитьОтбор(НастройкиОтчета.Отбор, "НаправлениеДеятельности", Отбор);
	НайтиИДобавитьОтбор(НастройкиОтчета.Отбор, "Подразделение", Отбор);
	ОтборАктивовПассивов = ОбщегоНазначения.СкопироватьРекурсивно(Отбор);
	#КонецОбласти

#Область ИндивидуальныеПараметрыИОтборы

	Если ПоляРасшифровки.Свойство("Показатель") И ПоляРасшифровки.Количество() = 1 Тогда
		СписокОтчетов.Добавить("ОткрытьЗначение", НСтр("ru = 'Открыть значение'"));
		ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ОткрытьЗначение");
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ПолученныеАвансы")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ЗадолженностьКлиентов") Тогда
		
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			СписокОтчетов.Добавить("ВедомостьРасчетовСКлиентами", НСтр("ru = 'Ведомость расчетов с клиентами'"));
			ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ВедомостьРасчетовСКлиентами");
			ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "Ведомость");
			// параметры текущего отчета
			ПараметрыСКД.Вставить("ДанныеОтчета", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
			
			Если Отбор.Свойство("Подразделение") Тогда
				Отбор.Подразделение.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектРасчетов.Подразделение");
			КонецЕсли;
			
		Иначе
			СписокОтчетов.Добавить("РасчетыСКлиентами", НСтр("ru = 'Ведомость расчетов с клиентами'"));
			ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "РасчетыСКлиентами");
			ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "РасчетыСКлиентами");
			// параметры текущего отчета
			ПараметрыСКД.Вставить("ДанныеПоРасчетам", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
		
			Если Отбор.Свойство("Подразделение") Тогда
				Отбор.Подразделение.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заказ.Подразделение");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ВыданныеАвансы")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ЗадолженностьПередПоставщиками") Тогда
		
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			СписокОтчетов.Добавить("ВедомостьРасчетовСПоставщиками", НСтр("ru = 'Ведомость расчетов с поставщиками'"));
			ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ВедомостьРасчетовСПоставщиками");
			ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "Ведомость");
			// параметры текущего отчета
			ПараметрыСКД.Вставить("ДанныеОтчета", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
			
			Если Отбор.Свойство("Подразделение") Тогда
				Отбор.Подразделение.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектРасчетов.Подразделение");
			КонецЕсли;
			
		Иначе
			СписокОтчетов.Добавить("РасчетыСПоставщиками", НСтр("ru = 'Ведомость расчетов с поставщиками'"));
			ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "РасчетыСПоставщиками");
			ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "РасчетыСПоставщиками");
			// параметры текущего отчета
			ПараметрыСКД.Вставить("ДанныеПоРасчетам", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
			
			Если Отбор.Свойство("Подразделение") Тогда
				Отбор.Подразделение.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Заказ.Подразделение");
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ЗадолженностьСобственныхОрганизаций") Тогда
		
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			СписокОтчетов.Добавить("ВедомостьРасчетовМеждуОрганизациями", НСтр("ru = 'Расчеты между организациями (по продажам)'"));
			ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ВедомостьРасчетовМеждуОрганизациями");
			ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "РасчетыПоПродажам");
			// параметры текущего отчета
			ПараметрыСКД.Вставить("ДанныеПоРасчетам", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
			
			// отбор текущего отчета
			Если Отбор.Свойство("Организация") Тогда
				Отбор.Организация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Продавец");
			КонецЕсли;
			Если Отбор.Свойство("Подразделение") Тогда
				Отбор.Подразделение.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектРасчетов.Подразделение");
			КонецЕсли;
			
		Иначе
			СписокОтчетов.Добавить("РасчетыМеждуОрганизациями", НСтр("ru = 'Расчеты между организациями'"));
			ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "РасчетыМеждуОрганизациями");
			ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "РасчетыПоПродажам");
			// параметры текущего отчета
			ПараметрыСКД.Вставить("ДанныеПоРасчетам", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
			
			// отбор текущего отчета
			Если Отбор.Свойство("Организация") Тогда
				Отбор.Организация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Продавец");
			КонецЕсли;
			Если Отбор.Свойство("Подразделение") Тогда
				Отбор.Подразделение.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументРасчетов.Подразделение");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ОбязательстваПередСобственнымиОрганизациями") Тогда
		Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
			СписокОтчетов.Добавить("ВедомостьРасчетовМеждуОрганизациями", НСтр("ru = 'Расчеты между организациями'"));
			ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ВедомостьРасчетовМеждуОрганизациями");
			ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "РасчетыПоЗакупкам");
			// параметры текущего отчета
			ПараметрыСКД.Вставить("ДанныеПоРасчетам", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
			
			// отбор текущего отчета
			Если Отбор.Свойство("Организация") Тогда
				Отбор.Организация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Покупатель");
			КонецЕсли;
			Если Отбор.Свойство("Подразделение") Тогда
				Отбор.Подразделение.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектРасчетов.Подразделение");
			КонецЕсли;
			
		Иначе
			СписокОтчетов.Добавить("РасчетыМеждуОрганизациями", НСтр("ru = 'Расчеты между организациями'"));
			ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "РасчетыМеждуОрганизациями");
			ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "РасчетыПоЗакупкам");
			// параметры текущего отчета
			ПараметрыСКД.Вставить("ДанныеПоРасчетам", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
			
			// отбор текущего отчета
			Если Отбор.Свойство("Организация") Тогда
				Отбор.Организация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Покупатель");
			КонецЕсли;
			Если Отбор.Свойство("Подразделение") Тогда
				Отбор.Подразделение.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДокументРасчетов.Подразделение");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДенежныеСредстваБезналичные")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДенежныеСредстваНаличные")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДенежныеСредстваВПути") Тогда
		СписокОтчетов.Добавить("ВедомостьПоДенежнымСредствам", НСтр("ru = 'Ведомость по денежным средствам'"));
		ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ВедомостьПоДенежнымСредствам");
		ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "ВедомостьПоДенежнымСредствам");
		ИмяПараметраПериода = "ПериодОтчета";
		// параметры текущего отчета
		ПараметрыСКД.Вставить("ДанныеОтчета", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
		
		// отбор текущего отчета
		Если Отбор.Свойство("НаправлениеДеятельности") Тогда
			Отбор.НаправлениеДеятельности.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МестоХраненияДенежныхСредств.НаправлениеДеятельности");
		КонецЕсли;
		ТипДС = НовыйЭлементОтбора();
		ТипДС.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипДенежныхСредств");
		Если ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДенежныеСредстваБезналичные") Тогда
			ТипДС.ПравоеЗначение = Перечисления.ТипыДенежныхСредств.Безналичные;
		ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДенежныеСредстваНаличные") Тогда
			ТипДС.ПравоеЗначение = Перечисления.ТипыДенежныхСредств.Наличные;
		ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДенежныеСредстваВПути") Тогда
			ТипДС.ПравоеЗначение = Перечисления.ТипыДенежныхСредств.ДенежныеСредстваВПути;
		КонецЕсли;
		Отбор.Вставить("ТипДенежныхСредств", ТипДС);
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДенежныеСредстваУПодотчетныхЛиц") Тогда
		СписокОтчетов.Добавить("ВедомостьПоДенежнымСредствамУПодотчетныхЛиц",
			НСтр("ru = 'Ведомость по денежным средствам у подотчетных лиц'"));
		ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ВедомостьПоДенежнымСредствамУПодотчетныхЛиц");
		ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "ВедомостьПоДенежнымСредствамУПодотчетныхЛиц");
		ИмяПараметраПериода = "ПериодОтчета";
		// параметры текущего отчета
		ПараметрыСКД.Вставить("ДанныеОтчета", ЗначениеПараметраДанныеРасчета(ВалютаОтчета));
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ЗадолженностьПоКредитам")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДепозитыВБанках")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ЗаймыВыданные") Тогда
		СписокОтчетов.Добавить("ВедомостьРасчетовПоФинансовымИнструментам", НСтр("ru = 'Ведомость расчетов по финансовым инструментам'"));
		ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ВедомостьРасчетовПоФинансовымИнструментам");
		ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "ВедомостьРасчетовПоФинансовымИнструментам");
		ИмяПараметраПериода = "ПериодОтчета";
		Если Отбор.Свойство("НаправлениеДеятельности") Тогда
			Отбор.НаправлениеДеятельности.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Договор.НаправлениеДеятельности");
		КонецЕсли;
		ХарактерДоговора = НовыйЭлементОтбора();
		ХарактерДоговора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Договор.ХарактерДоговора");
		Если ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ЗадолженностьПоКредитам") Тогда
			ХарактерДоговора.ПравоеЗначение = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм;
		ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДепозитыВБанках") Тогда
			ХарактерДоговора.ПравоеЗначение = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит;
		ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ЗаймыВыданные") Тогда
			ХарактерДоговора.ПравоеЗначение = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный;
		КонецЕсли;
		Отбор.Вставить("ХарактерДоговора", ХарактерДоговора);
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ТоварыНаОптовыхСкладах")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ТоварыВРознице")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ТоварыПереданныеНаКомиссию")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ТоварыПереданныеВПереработку") Тогда
		
		СписокОтчетов.Добавить("ВедомостьПоПартиямТоваров", НСтр("ru = 'Себестоимость товаров'"));
		ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "ВедомостьПоПартиямТоваров");
		ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "ВедомостьПоПартиямТоваровПредприятия");
		// параметры текущего отчета
		ПараметрыСКД.Вставить("ДанныеОтчета", 1);// Валюте упр. учета с НДС
		
		// отбор текущего отчета
		Если Отбор.Свойство("НаправлениеДеятельности") Тогда
			Отбор.НаправлениеДеятельности.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АналитикаНоменклатуры.НаправлениеДеятельности");
		КонецЕсли;
		ОтборТипЗапасов = НовыйЭлементОтбора();
		ОтборТипЗапасов.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АналитикаНоменклатуры.ВидЗапасов.ТипЗапасов");
		Если ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ТоварыНаОптовыхСкладах") Тогда
			ОтборТипЗапасов.ПравоеЗначение = Перечисления.ТипыЗапасов.Товар;
			
		ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ТоварыПереданныеНаКомиссию") Тогда
			ОтборТипЗапасов.ПравоеЗначение = Перечисления.ТипыЗапасов.КомиссионныйТовар;
			
		ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ТоварыПереданныеВПереработку") Тогда
			
			ОтборРазделУчета = НовыйЭлементОтбора();
			ОтборРазделУчета.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РазделУчета");
			ОтборРазделУчета.ПравоеЗначение = Перечисления.РазделыУчетаСебестоимостиТоваров.ТоварыПереданныеПереработчику;
			Отбор.Вставить("РазделУчета", ОтборРазделУчета);
			
		КонецЕсли;
		Отбор.Вставить("ТипЗапасов", ОтборТипЗапасов);
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ТоварыКОформлениюОтчетовКомитенту") Тогда
		СписокОтчетов.Добавить("СостояниеРасчетовСКомитентами", НСтр("ru = 'Состояние расчетов с комитентами'"));
		ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "СостояниеРасчетовСКомитентами");
		ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "СостояниеРасчетовСКомитентами");
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("НезавершенноеПроизводство") Тогда
		
	ИначеЕсли ПоляРасшифровки.Показатель = СтатьяАктиваПассива("РасходыБудущихПериодов")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("ДоходыТекущегоПериода")
		ИЛИ ПоляРасшифровки.Показатель = СтатьяАктиваПассива("РасходыТекущегоПериода") Тогда
		СписокОтчетов.Добавить("АнализДоходовРасходов", НСтр("ru = 'Доходы и расходы'"));
		ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "АнализДоходовРасходов");
		ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "ДоходыИРасходыПоПредприятию");
		
	ИначеЕсли ПоляРасшифровки.Показатель = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка() Тогда
		СписокОтчетов.Добавить("УправленческийБалансКонтроль", НСтр("ru = 'Контроль баланса'"));
		ПараметрыОтчетаРасшифровки.Вставить("ИмяОтчета", "УправленческийБалансКонтроль");
		ПараметрыОтчетаРасшифровки.Вставить("КлючВарианта", "КонтрольБалансаКонтекст");
		// параметры текущего отчета
		ИмяПараметраПериода = "ПериодОтчета";
		
	Иначе
		СписокОтчетов.Добавить("ОборотноСальдоваяВедомостьАктивовПассивов", НСтр("ru = 'Карточка актива/пассива'"));
		ЗаполнитьПараметрыКарточкиАктиваПассива(ПараметрыОтчетаРасшифровки, ПоляРасшифровки.Показатель);
		ИмяПараметраПериода = "ПериодОтчета";
		
	КонецЕсли;
#КонецОбласти

	ПараметрыСКД.Вставить(ИмяПараметраПериода, ПериодОтчета);
	ПараметрыОтчетаРасшифровки.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
	
	ОтчетыРасшифровки = Новый Структура("Показатель", ПоляРасшифровки.Показатель);
	ОтчетыРасшифровки.Вставить(СписокОтчетов[0].Значение, ПараметрыОтчетаРасшифровки);
	Если ПараметрыОтчетаРасшифровки.ИмяОтчета <> "ОткрытьЗначение" Тогда
		
		КлючНастроек = "РасшифровкаУправленческогоБаланса";
		НастройкиОтчетаРасшифровки = НастроитьОтчетРасшифровки(ПараметрыОтчетаРасшифровки);
		ЗаполнитьПараметрыФормыОтчета(НастройкиОтчетаРасшифровки, ПараметрыОтчетаРасшифровки, КлючНастроек);
		
		Если НЕ (ПараметрыОтчетаРасшифровки.ИмяОтчета = "ОборотноСальдоваяВедомостьАктивовПассивов"
			ИЛИ ПараметрыОтчетаРасшифровки.ИмяОтчета = "УправленческийБалансКонтроль") Тогда
			СписокОтчетов.Добавить("ОборотноСальдоваяВедомостьАктивовПассивов", НСтр("ru = 'Карточка актива/пассива'"));
			
			ПараметрыСКД = Новый Структура("ПериодОтчета, ВалютаОтчета", ПериодОтчета, ВалютаОтчета);
			ПараметрыКарточкиАктиваПассива = Новый Структура("ПараметрыСКД, Отбор", ПараметрыСКД, ОтборАктивовПассивов);
			ПараметрыКарточкиАктиваПассива.Вставить("КомпоновщикНастроек", КомпоновщикНастроек);
			ЗаполнитьПараметрыКарточкиАктиваПассива(ПараметрыКарточкиАктиваПассива, ПоляРасшифровки.Показатель);
			
			НастройкиКарточкиАктиваПассива = НастроитьОтчетРасшифровки(ПараметрыКарточкиАктиваПассива);
			ЗаполнитьПараметрыФормыОтчета(НастройкиКарточкиАктиваПассива, ПараметрыКарточкиАктиваПассива, КлючНастроек);
			
			ОтчетыРасшифровки.Вставить("ОборотноСальдоваяВедомостьАктивовПассивов", ПараметрыКарточкиАктиваПассива);
			
		КонецЕсли;
	КонецЕсли;
	
	ОтчетыРасшифровки.Вставить("МенюОтчетов", СписокОтчетов);
	Возврат ОтчетыРасшифровки;
	
КонецФункции

// Функция переносит настройки вызывающего отчета в настройки отчета расшифровки
//
// Параметры:
//  Параметры - Структура - содержащая ключи:
//   *ИмяОтчета - Строка - Имя метаданных отчета расшифровки
//   *КлючВарианта - Строка - Имя варианта отчета расшифровки
//   *КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настроенный компоновщик вызывающего отчета
//   *ПараметрыСКД - Структура - Ключ - ИмяПараметра; Значение - значение параметра
//   *Отбор - Структура - Ключ - ИмяПоля; Значение - ЭлементОтбораКомпоновкиДанных или структура с такими же полями
//   *ПоляРасшифровки - Структура - Ключ - ИмяПоля; Значение - Текущее значение выбранного поля расшифровки.
//
// Возвращаемое значение:
//   КомпоновщикНастроекКомпоновкиДанных - настроенный компоновщик отчета расшифровки.
//
Функция НастроитьОтчетРасшифровки(Знач Параметры) Экспорт
	
	// Настройки вызывающего отчета
	НастройкиОтчета = Параметры.КомпоновщикНастроек.ПолучитьНастройки();
	ПользовательскиеНастройкиОтчета = Параметры.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	// Настройки отчета расшифровки
	КомпоновщикНастроекРасшифровки = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИмяСхемы = Метаданные.Отчеты[Параметры.ИмяОтчета].ОсновнаяСхемаКомпоновкиДанных.Имя;
	СхемаРасшифровки = Отчеты[Параметры.ИмяОтчета].ПолучитьМакет(ИмяСхемы);
	НастройкиВарианта = СхемаРасшифровки.ВариантыНастроек[Параметры.КлючВарианта].Настройки;
	КомпоновщикНастроекРасшифровки.ЗагрузитьНастройки(НастройкиВарианта);
	ПользовательскиеНастройкиРасшифровки = КомпоновщикНастроекРасшифровки.ПользовательскиеНастройки;
	ПользовательскийОтборРасшифровки = КомпоновщикНастроекРасшифровки.ФиксированныеНастройки.Отбор;
	Для Каждого Элемент Из ПользовательскиеНастройкиРасшифровки.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
			ПользовательскийОтборРасшифровки = Элемент;
		КонецЕсли;
	КонецЦикла;
	
	// Перенесем параметры вызывающего отчета
	Для Каждого Элемент Из ПользовательскиеНастройкиОтчета.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			КлючПараметра =  Строка(Элемент.Параметр);
			ЗначениеПараметра = Элемент.Значение;
			Использование = Элемент.Использование;
			
			ПараметрОтчетаРасшифровки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(ПользовательскиеНастройкиРасшифровки, КлючПараметра);
			Если НЕ ПараметрОтчетаРасшифровки = Неопределено Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
					ПользовательскиеНастройкиРасшифровки, КлючПараметра, ЗначениеПараметра, Использование);
			КонецЕсли;
		КонецЕсли;// это параметр отчета
	КонецЦикла;// по пользовательским настройкам вызывающего отчета
	
	// Установим переданные параметры
	Если Параметры.Свойство("ПараметрыСКД") Тогда
		Для Каждого Параметр Из Параметры.ПараметрыСКД Цикл
			ПараметрОтчетаРасшифровки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(ПользовательскиеНастройкиРасшифровки, Параметр.Ключ);
			Если НЕ ПараметрОтчетаРасшифровки = Неопределено И ПараметрОтчетаРасшифровки.Использование Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройкиРасшифровки, Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Перенесем отборы вызывающего отчета, кроме переданных и отборов по полям расшифровки.
	ПоляИсключения = Новый Структура;
	// Установим переданные отборы
	Если Параметры.Свойство("Отбор") Тогда
		Для Каждого Отбор Из Параметры.Отбор Цикл
			ПоляИсключения.Вставить(Отбор.Ключ);
			НовыйОтбор = ПользовательскийОтборРасшифровки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйОтбор, Отбор.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Параметры.Свойство("ПоляРасшифровки") И ЗначениеЗаполнено(Параметры.ПоляРасшифровки) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПоляИсключения, Параметры.ПоляРасшифровки);
	КонецЕсли;
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(
			НастройкиОтчета.Отбор, // Источник
			ПользовательскийОтборРасшифровки, // Приемник
			Истина, // Только используемые
			ПоляИсключения); // Поля исключения
	
	// Добавим отборы по полям расшифровки
	Если Параметры.Свойство("ПоляРасшифровки") И ЗначениеЗаполнено(Параметры.ПоляРасшифровки) Тогда
		Для Каждого Поле Из Параметры.ПоляРасшифровки Цикл
			НовыйОтбор = ПользовательскийОтборРасшифровки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле.Ключ);
			НовыйОтбор.ПравоеЗначение = Поле.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КомпоновщикНастроекРасшифровки;
	
КонецФункции

// Получает значения всех вышестоящих группировок
//
// Параметры:
//		СписокПолей - Структура - Ключ имя поля, значение - значение группировочного поля отчета - параметр в который будет помещен список найденных значений
//		КоллекцияЭлементов - ЭлементыРасшифровкиКомпоновкиДанных - коллекция элементов расшифровки отчета (ДанныеРасшифровки.Элементы)
//		Идентификатор - ИдентификаторРасшифровкиКомпоновкиДанных - идентификатор расшифровываемого поля.
//
Процедура ПолучитьЗначенияПолей(СписокПолей, КоллекцияЭлементов, Идентификатор) Экспорт
	
	ЭлементРасшифровки = КоллекцияЭлементов[Идентификатор]; // ЭлементРасшифровкиКомпоновкиДанныхПоля -
	РодительскиеРасшифровки = МассивРодительскихЭлементовРасшифровки(ЭлементРасшифровки);
	Для Каждого Родитель Из РодительскиеРасшифровки Цикл
		ПолучитьЗначенияПолей(СписокПолей, КоллекцияЭлементов, Родитель["Идентификатор"]);
		ПолучитьЗначениеПоля(СписокПолей, Родитель);
	КонецЦикла;
	
КонецПроцедуры

// Получает значения полей текущего элемента расшифровки
//
// Параметры:
//		СписокПолей - Структура - Ключ имя поля, значение - значение группировочного поля отчета - параметр в который будет помещен список найденных значений
//		ВыбранноеПоле - ЭлементРасшифровкиКомпоновкиДанныхПоля - элемент расшифровки поля которого необходимо получить.
//
Процедура ПолучитьЗначениеПоля(СписокПолей, ВыбранноеПоле) Экспорт
	
	Если ТипЗнч(ВыбранноеПоле) <> Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
		Для Каждого Поле Из ВыбранноеПоле.ПолучитьПоля() Цикл
			Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				СписокПолей.Вставить(СтрЗаменить(Поле.Поле,".",""), Поле.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет статус указанного фонового задания.
// 
// Параметры:
//  КлючЗадания - Строка - Ключ задания
// 
// Возвращаемое значение:
//  Структура - Проверить фоновое задание:
// * ОтмененоИлиНеНайдено - Булево - Флаг, указывающий на то, что фоновое задание было отменено или не найдено по ключу.
// * УспешноВыполнено - Булево - Фоновое задание успешно выполнено.
// * ЕщеВыполняется - Булево - Задание ещё выполняется.
// * ВыполненоСОшибками - Булево - Задание выполнено с ошиками.
// * ТекстОшибки - Строка - Подробно описание ошибки выполнения фонового задания.
Функция ПроверитьФоновоеЗадание(Знач КлючЗадания) Экспорт
	Результат = Новый Структура("ОтмененоИлиНеНайдено, УспешноВыполнено, ЕщеВыполняется, ВыполненоСОшибками, ТекстОшибки");
	Результат.Вставить("ОтмененоИлиНеНайдено",	Ложь);
	Результат.Вставить("УспешноВыполнено",		Ложь);
	Результат.Вставить("ЕщеВыполняется",		Ложь);
	Результат.Вставить("ВыполненоСОшибками",	Ложь);
	Результат.Вставить("ТекстОшибки",			"");
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() = 0 Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Результат.ЕщеВыполняется = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		Результат.УспешноВыполнено = Истина;
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		Результат.ВыполненоСОшибками = Истина;
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(АктивныеЗадания[0].ИнформацияОбОшибке);
	ИначеЕсли АктивныеЗадания[0].Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		Результат.ОтмененоИлиНеНайдено = Истина;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает признак завершения расчета партий, начатого при формировании отчета.
//
// Параметры:
//	ПараметрыФормы - Структура - параметры запуска расчета партий;
//		ключи структуры см. в АктуализироватьПартииДляОтчетов и в ОтчетыУТКлиентПереопределяемый.ВосстановитьОффлайновыеРасчеты.
// Возвращаемое значение:
//	Булево - признак окончания расчета.
Функция ПартииДляОтчетовАктуализированы(Знач ПараметрыФормы) Экспорт
	
	Возврат РасчетСебестоимостиПрикладныеАлгоритмы.ПартииДляОтчетовАктуализированы(ПараметрыФормы);
	
КонецФункции

// Возвращает границу, на которую актуализированы взаиморасчеты.

// Начало распределения взаиморасчетов.
// 
// Параметры:
//  КонецРасчета - Дата
//  МассивКлючейПартнеров - Массив - Массив ключей партнеров
//  ИмяРасчета - Строка - Имя расчета
//  НомерЗадания - Число - Номер задания
// 
// Возвращаемое значение:
//  см. РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов
Функция НачалоРаспределенияВзаиморасчетов(КонецРасчета, МассивКлючейПартнеров, ИмяРасчета, НомерЗадания) Экспорт
	АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
	АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивКлючейПартнеров;
	Возврат РаспределениеВзаиморасчетовВызовСервера.НачалоРасчетов(КонецРасчета, АналитикиРасчета, ИмяРасчета, НомерЗадания);
КонецФункции

// Возвращает массив хозяйственных операций, которые используются в аналитических регистрах.
//
// Параметры:
//  ИмяРегистра  - Строка - имя регистра как оно задано в метаданных.
//
// Возвращаемое значение:
//   Массив   - массив соответствующих хозяйственных операций.
//
Функция ХозяйственныеОперацииАналитическихРегистров(ИмяРегистра) Экспорт
	Возврат ИсточникиДанныхПовтИсп.ХозяйственныеОперацииАналитическихРегистров(ИмяРегистра);
КонецФункции

// Вызывается для отчета "КонтрольОформленияДокументовТовародвижения"
// 
// Возвращаемое значение:
//  Неопределено, СправочникСсылка.ИдентификаторыОбъектовМетаданных, Произвольный, Null, СправочникСсылка.ИдентификаторыОбъектовРасширений - Идентификатор движение продукции и материалов
Функция ИдентификаторДвижениеПродукцииИМатериалов() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Вызывается для отчета "КонтрольОформленияДокументовТовародвижения"
//
Процедура ЗаполнитьОтборыКонтрольОформленияДокументовТовародвижения(
	ПараметрыОбработкиРасшифровки, РежимЗаполнения, Знач ОтборыДляФормированияОтчетаКонтроля = Неопределено) Экспорт
	
	ОтчетКонтроля = Отчеты.КонтрольОформленияДокументовТовародвижений.Создать();
	ОтчетКонтроля.КомпоновщикНастроек.ЗагрузитьНастройки(
		ОтчетКонтроля.СхемаКомпоновкиДанных.ВариантыНастроек.ДетальныеЗаписи.Настройки);
	КомпоновщикНастроек = ОтчетКонтроля.КомпоновщикНастроек;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		КомпоновщикНастроек,
		"ВидОперации",
		ПараметрыОбработкиРасшифровки.ВидОперации,
		ВидСравненияКомпоновкиДанных.Равно);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		КомпоновщикНастроек,
		"Рекомендация",
		ПараметрыОбработкиРасшифровки.Рекомендация,
		ВидСравненияКомпоновкиДанных.Равно);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		КомпоновщикНастроек,
		"Склад",
		ПараметрыОбработкиРасшифровки.Склад,
		ВидСравненияКомпоновкиДанных.Равно);
	
	Если ОбщегоНазначенияУТ.ВерсияПлатформыНеНижеУказанной("8.3.18.1208") Тогда
		Если ЗначениеЗаполнено(ОтборыДляФормированияОтчетаКонтроля)
			И ОтборыДляФормированияОтчетаКонтроля.Количество() > 0 Тогда
			
			АдресТаблицыОтборов = ПоместитьВоВременноеХранилище(ОтборыДляФормированияОтчетаКонтроля.Выгрузить());
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ОтчетКонтроля.КомпоновщикНастроек,
															"АдресТаблицыОтборов",
															АдресТаблицыОтборов);
			
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ОтборыДляФормированияОтчетаКонтроля) Тогда
			ГруппаИли = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
							КомпоновщикНастроек.Настройки.Отбор.Элементы,
							ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			Для Каждого Стр Из ОтборыДляФормированияОтчетаКонтроля Цикл
				ГруппаИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(
							ГруппаИли.Элементы,
							ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					ГруппаИ,
					"Номенклатура",
					Стр.Номенклатура,
					ВидСравненияКомпоновкиДанных.Равно);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					ГруппаИ,
					"Характеристика",
					Стр.Характеристика,
					ВидСравненияКомпоновкиДанных.Равно);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					ГруппаИ,
					"Серия",
					Стр.Серия,
					ВидСравненияКомпоновкиДанных.Равно);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					ГруппаИ,
					"Склад",
					Стр.Склад,
					ВидСравненияКомпоновкиДанных.Равно);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
					ГруппаИ,
					"Назначение",
					Стр.Назначение,
					ВидСравненияКомпоновкиДанных.Равно);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если РежимЗаполнения = "Распоряжения" Тогда
		ПараметрыОбработкиРасшифровки.Вставить("Распоряжения", ОтчетКонтроля.РаспоряженияДляОформленияДокументов());
	ИначеЕсли РежимЗаполнения = "НоменклатураИХарактеристики" Тогда
		Структура = ОтчетКонтроля.НоменклатураИХарактеристикиДляОформленияДокументов();
		ПараметрыОбработкиРасшифровки.Вставить("СписокНоменклатуры", Структура.СписокНоменклатуры);
		ПараметрыОбработкиРасшифровки.Вставить("СписокХарактеристик", Структура.СписокХарактеристик);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается для отчета "КонтрольОформленияДокументовТовародвижения"
//
// Параметры:
//     Расшифровка - Строка
// 
// Возвращаемое значение:
//     ОписаниеОбработкиРасшифровкиКомпоновкиДанных 
//
Функция ПараметрыОбработкиРасшифровкиКонтрольОформленияДокументовТовародвижения(Расшифровка) Экспорт
	
	ПараметрыОбработкиРасшифровки = ОбщегоНазначения.ЗначениеИзСтрокиXML(Расшифровка);
	ПараметрыОбработкиРасшифровки.Вставить(
		"СтруктураРекомендаций", 
		Отчеты.КонтрольОформленияДокументовТовародвижений.СтруктураРекомендаций(ПараметрыОбработкиРасшифровки.Рекомендация));
	Возврат ПараметрыОбработкиРасшифровки;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


// Возвращает массив родительских элементов расшифровки компоновки.
// 
// Параметры:
// 	ЭлементРасшифровки - ЭлементРасшифровкиКомпоновкиДанныхПоля -
// 						- ЭлементРасшифровкиКомпоновкиДанныхГруппировка - 
// Возвращаемое значение:
// 	Массив из ЭлементРасшифровкиКомпоновкиДанныхПоля, ЭлементРасшифровкиКомпоновкиДанныхГруппировка -
Функция МассивРодительскихЭлементовРасшифровки(ЭлементРасшифровки)
	Возврат ЭлементРасшифровки.ПолучитьРодителей();
КонецФункции

Функция НовыйЭлементОтбора()
	
	ЭлементОтбора = Новый Структура("ЛевоеЗначение,ПравоеЗначение");
	ЭлементОтбора.Вставить("Использование", Истина);
	ЭлементОтбора.Вставить("ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
	Возврат ЭлементОтбора;
	
КонецФункции

#Область РасшифровкаСтатьиАктиваПассива

Процедура НайтиИДобавитьОтбор(ОтборОтчета, ИмяПоляОтбора, ЭлементыОтбора)
	
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(ОтборОтчета, ИмяПоляОтбора);
	Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда
		НовыйЭлементОтбора = НовыйЭлементОтбора();
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
		ЭлементыОтбора.Вставить(ИмяПоляОтбора, НовыйЭлементОтбора);
	КонецЕсли;
	
КонецПроцедуры

Функция СтатьяАктиваПассива(ИмяСтатьи)
	
	Возврат ПланыВидовХарактеристик.СтатьиАктивовПассивов[ИмяСтатьи];
	
КонецФункции

Функция ЗначениеПараметраДанныеРасчета(ВалютаОтчета)
	
	// параметры текущего отчета
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ДанныеРасчета = ?(ВалютаОтчета = ВалютаУпрУчета, 2,?(ВалютаОтчета = ВалютаРеглУчета, 3,1));
	Возврат ДанныеРасчета;
	
КонецФункции

Процедура ЗаполнитьПараметрыФормыОтчета(НастройкиОтчета, ПараметрыОтчета, КлючНастроек)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", ПараметрыОтчета.КлючВарианта);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", КлючНастроек);
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек", КлючНастроек);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", НастройкиОтчета.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиОтчета.ФиксированныеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрыОтчета.Вставить("ПараметрыФормы", ПараметрыФормы);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыКарточкиАктиваПассива(ПараметрыОтчета, Показатель)
	
	ПараметрыОтчета.Вставить("ИмяОтчета", "ОборотноСальдоваяВедомостьАктивовПассивов");
	ПараметрыОтчета.Вставить("КлючВарианта", "КарточкаАктиваПассива");
	
	// отбор текущего отчета
	ЭлементОтбора = НовыйЭлементОтбора();
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статья");
	ЭлементОтбора.ПравоеЗначение = Показатель;
	Если ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Показатель, "ЭтоГруппа").ЭтоГруппа Тогда
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	КонецЕсли;
	ПараметрыОтчета.Отбор.Вставить("Статья", ЭлементОтбора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти