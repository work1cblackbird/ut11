
#Область ПрограммныйИнтерфейс

// Процедура вызывается при очистке товаров в устройстве.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//  ВыполненоУспешно - Булево - Признак успешного выполнения операции.
//
Процедура ПриОчисткеТоваровВУстройстве(Устройство, ВыполненоУспешно = Истина) Экспорт
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока Выборка.Следующий() Цикл
			УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
			УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
			УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
			УзелОбъект.Записать();
		КонецЦикла;
		
		ЗарегистрироватьИзменения(Устройство);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	//-- Локализация
КонецПроцедуры

// Процедура вызывается при выгрузке товаров в устройство.
// Выполняет запись информации в узел плана обмена.
//
// Параметры:
//  Устройство       - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//  СтруктураДанные - Структура
//  ВыполненоУспешно - Булево - Признак успешного выполнения операции.
//  РасширеннаяВыгрузка - Булево - Признак использования расширенной выгрузки.
//
Процедура ПриВыгрузкеТоваровВУстройство(Устройство, СтруктураДанные, ВыполненоУспешно = Истина, РасширеннаяВыгрузка = Ложь) Экспорт
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы                             КАК УзелИнформационнойБазы,
	|	ПодключаемоеОборудование.ПравилоОбмена                                      КАК ПравилоОбмена,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы                             КАК УзелИнформационнойБазы,
	|	ПодключаемоеОборудование.ПравилоОбмена                                      КАК ПравилоОбмена,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			Если ВыполненоУспешно И СтруктураДанные <> Неопределено Тогда
				
				Если Выборка.ВыгружатьИзменения Тогда
					
					Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
					
					Если РасширеннаяВыгрузка Тогда
						Коллекция = СтруктураДанные.МассивКодовSKU;
					Иначе
						Коллекция = СтруктураДанные.Данные;
					КонецЕсли;
					
					Для Каждого СтрокаТЧ Из Коллекция Цикл
						
						Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
						Набор.Отбор.ПравилоОбмена.Использование = Истина;
						
						Набор.Отбор.Код.Значение = ?(РасширеннаяВыгрузка, СтрокаТЧ, СтрокаТЧ.КодВРегистре);
						Набор.Отбор.Код.Использование = Истина;
						
						ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы, Набор);
						
					КонецЦикла;
					
				Иначе
					
					ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы);
					
				КонецЕсли;
				
			КонецЕсли;
			
			УзелОбъект = Выборка.УзелИнформационнойБазы.ПолучитьОбъект();
			УзелОбъект.ДатаВыгрузки      = ТекущаяДатаСеанса();
			УзелОбъект.ВыгрузкаВыполнена = ВыполненоУспешно;
			УзелОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	//-- Локализация
КонецПроцедуры

#Область ВыгрузкаТоваров

// Процедура возвращает структуру с данными в формате, необходимом для выгрузки списка товаров в весы с печатью этикеток.
//
// Параметры:
//  ПараметрыУстройства - Структура - перезаполняемое значение, см. функцию ПолучитьПараметрыУстройства.
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Устройство для которого необходимо получить данные.
//  ТолькоИзмененные - Булево - Флаг получения только измененных данных.
//
Процедура ПолучитьДанныеДляВесов(ПараметрыУстройства, Устройство, ТолькоИзмененные = Истина) Экспорт
	//++ Локализация
	Параметры = Неопределено; 
	ПолучитьПараметрыУстройства(Параметры, Устройство);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные И Параметры.ВыгружатьИзменения);
	
	ПараметрыУстройства = Новый Структура;
	ПараметрыУстройства.Вставить("Данные", Новый Массив);
	ПараметрыУстройства.Вставить("КоличествоНеВыгруженныхСтрокСОшибками", 0);
	ПараметрыУстройства.Вставить("ЧастичнаяВыгрузка", ТолькоИзмененные И Параметры.ВыгружатьИзменения);
	ПараметрыУстройства.Вставить("Параметры", Параметры);
	
	Таблица = Неопределено;
	ДанныеТоваровДляВыгрузки(Таблица, Устройство, Параметры, Истина);
	
	МаксимальныйКодВесовогоТовара = ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		Если СтрокаТЧ.ЕстьОшибки Тогда
			ПараметрыУстройства.КоличествоНеВыгруженныхСтрокСОшибками = ПараметрыУстройства.КоличествоНеВыгруженныхСтрокСОшибками + 1;
			Продолжить;
		КонецЕсли;
		
		Штрихкод = СтрокаТЧ.МассивШтрихкодов[0];
		
		ЭлементМассива = ОборудованиеВесовоеОборудованиеКлиентСервер.ПараметрыСтрокиВыгрузкиВВесыСПечатьюЭтикеток();
		Если НЕ ЭлементМассива.Свойство("КодВРегистре") Тогда
			ЭлементМассива.Вставить("КодВРегистре", 0);
		КонецЕсли;
		
		// Все коды товаров в правилах выгрузки начинаются с 100000
		Если СтрокаТЧ.Код > МаксимальныйКодВесовогоТовара Тогда
			ЭлементМассива.PLU = Число(СтрокаТЧ.Код - МаксимальныйКодВесовогоТовара);
		Иначе
			ЭлементМассива.PLU = Число(СтрокаТЧ.Код);
		КонецЕсли;
		ЭлементМассива.КодВРегистре = Число(СтрокаТЧ.Код);
		ЭлементМассива.Код          = Число(Сред(Штрихкод, 3, 5));
		ЭлементМассива.ВесовойТовар	= СтрокаТЧ.Весовой;
		Если СтрокаТЧ.Используется Тогда
			ЭлементМассива.Наименование   = Строка(СтрокаТЧ.Номенклатура);
			ЭлементМассива.ОписаниеТовара = СтрокаТЧ.ОписаниеТовара;
			ЭлементМассива.Цена           = СтрокаТЧ.Цена;
		КонецЕсли;
		
		ПараметрыУстройства.Данные.Добавить(ЭлементМассива);
		
	КонецЦикла;
	//-- Локализация
КонецПроцедуры

// Процедура возвращает параметры устройства
//
// Параметры:
//  ПараметрыУстройства - Структура:
//  * ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  * УзелИнформационнойБазы - ПланОбменаСсылка - узел информационной базы.
//  * Склад - СправочникСсылка.Склады - Склад.
//  * ВидЦены - СправочникСсылка.ВидыЦен - Вид цены.
//  * ИндивидуальныйВидЦены - СправочникСсылка.ВидыЦен - Индивидулаьный вид цены.
//  * ТипОборудования - ПеречислениеСсылка.ТипыПодключаемогоОборудования, ПеречислениеСсылка.ТипыОфлайнОборудования - тип оборудования.
//  * МаксимальныйКод - Число - Максимальный код.
//  * ВыгружатьИзменения - Булево - Признак необходимости выгрузки изменений.
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
// 
Процедура ПолучитьПараметрыУстройства(ПараметрыУстройства, Устройство) Экспорт
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад.ИндивидуальныйВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ИндивидуальныйВидЦены,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКод, 0) КАК МаксимальныйКод,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения,
	|	ПодключаемоеОборудование.ТипОфлайнОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад.ИндивидуальныйВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ИндивидуальныйВидЦены,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.МаксимальныйКод, 0) КАК МаксимальныйКод,
	|	ЕСТЬNULL(ПодключаемоеОборудование.ПравилоОбмена.ВыгружатьИзменения, Истина) КАК ВыгружатьИзменения,
	|	ПодключаемоеОборудование.ТипОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &Устройство";
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПараметрыУстройства = Новый Структура;
		ПараметрыУстройства.Вставить("ПравилоОбмена",          Выборка.ПравилоОбмена);
		ПараметрыУстройства.Вставить("УзелИнформационнойБазы", Выборка.УзелИнформационнойБазы);
		ПараметрыУстройства.Вставить("Склад",                  Выборка.Склад);
		ПараметрыУстройства.Вставить("ВидЦены",                Выборка.ВидЦены);
		ПараметрыУстройства.Вставить("ИндивидуальныйВидЦены",  Выборка.ИндивидуальныйВидЦены);
		ПараметрыУстройства.Вставить("ТипОборудования",        Выборка.ТипОборудования);
		ПараметрыУстройства.Вставить("МаксимальныйКод",        Выборка.МаксимальныйКод + ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара());
		ПараметрыУстройства.Вставить("ВыгружатьИзменения",     Выборка.ВыгружатьИзменения);
		
		Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
			НастройкиАссортимента = РегистрыСведений.ИсторияИзмененияФорматовМагазинов.ТекущийНастройкиАссортимента(ПараметрыУстройства.Склад);
			Если НастройкиАссортимента.РозничныеЦеныИзФорматаМагазина Тогда
				РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкиАссортимента.ФорматМагазина, "РозничныйВидЦены, ИндивидуальныйВидЦены");
				ПараметрыУстройства.ВидЦены = РеквизитыОбъекта.РозничныйВидЦены;
				ПараметрыУстройства.ИндивидуальныйВидЦены = РеквизитыОбъекта.ИндивидуальныйВидЦены;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Процедура регистрирует изменения для устройства.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Ссылка на устройство.
//
Процедура ЗарегистрироватьИзменения(Устройство) Экспорт
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО ПодключаемоеОборудование.ПравилоОбмена = КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется
	|	И ПодключаемоеОборудование.Ссылка = &Устройство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена КАК ПравилоОбмена
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО ПодключаемоеОборудование.ПравилоОбмена = КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется
	|	И ПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НачатьТранзакцию();
	Попытка
		
		Набор = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьНаборЗаписей();
		Пока Выборка.Следующий() Цикл
			
			Набор.Отбор.ПравилоОбмена.Значение = Выборка.ПравилоОбмена;
			Набор.Отбор.ПравилоОбмена.Использование = Истина;
			
			Набор.Отбор.Код.Значение = Выборка.Код;
			Набор.Отбор.Код.Использование = Истина;
			
			ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, Набор);
		
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	//-- Локализация
КонецПроцедуры

// Процедура заполняет структуру прайс-листа для выгрузке на ККМ Offline в расширенном формате (с группами товаров)
//
Процедура ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(СтруктураПрайсЛиста, ТоварыКВыгрузке) Экспорт
	//++ Локализация
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТоварыКВыгрузке.Код КАК Код,
	|	ТоварыКВыгрузке.КодГруппы КАК КодГруппы,
	|	ТоварыКВыгрузке.Артикул КАК Артикул,
	|	ТоварыКВыгрузке.КодВидаНоменклатурнойКлассификации КАК КодВидаНоменклатурнойКлассификации,
	|	ТоварыКВыгрузке.Весовой КАК Весовой,
	|	ТоварыКВыгрузке.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыКВыгрузке.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	ТоварыКВыгрузке.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ТоварыКВыгрузке.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	ТоварыКВыгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКВыгрузке.Наименование КАК Наименование,
	|	ТоварыКВыгрузке.Остаток КАК Остаток,
	|	ТоварыКВыгрузке.СтавкаНДС КАК СтавкаНДС,
	|	ТоварыКВыгрузке.Алкоголь КАК Алкоголь,
	|	ТоварыКВыгрузке.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ТоварыКВыгрузке.Маркируемый КАК Маркируемый,
	|	ТоварыКВыгрузке.РазливноеПиво КАК РазливноеПиво,
	|	ТоварыКВыгрузке.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
	|	ТоварыКВыгрузке.ЕмкостьТары КАК ЕмкостьТары,
	|	ТоварыКВыгрузке.Крепость КАК Крепость,
	|	ТоварыКВыгрузке.ИННПроизводителя КАК ИННПроизводителя,
	|	ТоварыКВыгрузке.КПППроизводителя КАК КПППроизводителя,
	|	ТоварыКВыгрузке.Упаковка КАК Упаковка,
	|	ТоварыКВыгрузке.УпаковкаНаименование КАК УпаковкаНаименование,
	|	ТоварыКВыгрузке.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТоварыКВыгрузке.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьХарактеристики,
	|	ВЫБОР
	|		КОГДА ТоварыКВыгрузке.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьУпаковки,
	|	ТоварыКВыгрузке.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	ТоварыКВыгрузке.Цена КАК Цена,
	|	ТоварыКВыгрузке.Штрихкод КАК Штрихкод,
	|	ТоварыКВыгрузке.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	ТоварыКВыгрузке.ТипНоменклатуры КАК ТипНоменклатуры
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыКВыгрузке КАК ТоварыКВыгрузке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Наименование КАК Наименование,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.УпаковкаНаименование КАК УпаковкаНаименование,
	|	Товары.КодГруппы КАК КодГруппы,
	|	Товары.Артикул КАК Артикул,
	|	Товары.КодВидаНоменклатурнойКлассификации КАК КодВидаНоменклатурнойКлассификации,
	|	Товары.Весовой КАК Весовой,
	|	Товары.КодЕдиницыИзмерения КАК КодЕдиницыИзмерения,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	Товары.Код КАК Код,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.Остаток КАК Остаток,
	|	Товары.Цена КАК Цена,
	|	Товары.Штрихкод КАК Штрихкод,
	|	Товары.Алкоголь КАК Алкоголь,
	|	Товары.ОсобенностьУчета КАК ОсобенностьУчета,
	|	Товары.Маркируемый КАК Маркируемый,
	|	Товары.РазливноеПиво КАК РазливноеПиво,
	|	Товары.КодВидаАлкогольнойПродукции КАК КодВидаАлкогольнойПродукции,
	|	Товары.ЕмкостьТары КАК ЕмкостьТары,
	|	Товары.Крепость КАК Крепость,
	|	Товары.ИННПроизводителя КАК ИННПроизводителя,
	|	Товары.КПППроизводителя КАК КПППроизводителя,
	|	Товары.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	Товары.ТипНоменклатуры КАК ТипНоменклатуры,
	|	Товары.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	Товары.ЕстьХарактеристики КАК ЕстьХарактеристики,
	|	Товары.ЕстьУпаковки КАК ЕстьУпаковки
	|ИЗ
	|	Товары КАК Товары
	|ИТОГИ
	|	МАКСИМУМ(Номенклатура),
	|	МАКСИМУМ(Наименование),
	|	МАКСИМУМ(ХарактеристикаНаименование),
	|	МАКСИМУМ(КодГруппы),
	|	МАКСИМУМ(Артикул),
	|	МАКСИМУМ(КодВидаНоменклатурнойКлассификации),
	|	МАКСИМУМ(Весовой),
	|	МАКСИМУМ(КодЕдиницыИзмерения),
	|	МАКСИМУМ(ЕдиницаИзмерения),
	|	МАКСИМУМ(НаименованиеЕдиницыИзмерения),
	|	МАКСИМУМ(СтавкаНДС),
	|	МАКСИМУМ(Остаток),
	|	МАКСИМУМ(Цена),
	|	МАКСИМУМ(Штрихкод),
	|	МАКСИМУМ(Алкоголь),
	|	МАКСИМУМ(ОсобенностьУчета),
	|	МАКСИМУМ(Маркируемый),
	|	МАКСИМУМ(РазливноеПиво),
	|	МАКСИМУМ(КодВидаАлкогольнойПродукции),
	|	МАКСИМУМ(ЕмкостьТары),
	|	МАКСИМУМ(Крепость),
	|	МАКСИМУМ(ИННПроизводителя),
	|	МАКСИМУМ(КПППроизводителя),
	|	МАКСИМУМ(ТипНоменклатуры),
	|	МАКСИМУМ(ПодакцизныйТовар),
	|	МАКСИМУМ(ЕстьХарактеристики),
	|	МАКСИМУМ(ЕстьУпаковки)
	|ПО
	|	Код,
	|	Характеристика");
	
	Запрос.УстановитьПараметр("ТоварыКВыгрузке", ТоварыКВыгрузке);
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивПодобранныхЕИ = Новый Массив;
	ВыборкаПоНоменклатуре = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ЗаписьТовар = МенеджерОфлайнОборудования.ЗаписьТовараПрайсЛиста();
		
		Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.КодГруппы) Тогда
			ЗаписьТовар.КодГруппы = Строка(Формат(ВыборкаПоНоменклатуре.КодГруппы, "ЧГ=0"));
		КонецЕсли;
		
		ЗаписьТовар.Наименование     = ВыборкаПоНоменклатуре.Наименование;
		ЗаписьТовар.Артикул          = ВыборкаПоНоменклатуре.Артикул;
		ЗаписьТовар.КодВидаНоменклатурнойКлассификации = ВыборкаПоНоменклатуре.КодВидаНоменклатурнойКлассификации;
		ЗаписьТовар.ЭтоВесовойТовар  = ВыборкаПоНоменклатуре.Весовой;
		ЗаписьТовар.КодЕдиницыИзмерения = СокрП(ВыборкаПоНоменклатуре.КодЕдиницыИзмерения);
		ЗаписьТовар.ЭтоАлкоголь      = ВыборкаПоНоменклатуре.Алкоголь;
		ЗаписьТовар.Код              = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
		ЗаписьТовар.СтавкаНДС        = ПолучитьСтавкуНДСККМ(ВыборкаПоНоменклатуре.СтавкаНДС);
		ЗаписьТовар.ПризнакПредметаРасчета = РозничныеПродажиКлиентСервер.ПризнакПредметаРасчетаФискальнойОперации(
			ВыборкаПоНоменклатуре.ТипНоменклатуры,
			ВыборкаПоНоменклатуре.ПодакцизныйТовар);
		
		Если ЗаписьТовар.ЭтоАлкоголь Тогда
			ЗаписьТовар.АлкогольныеРеквизиты.Маркируемый = ВыборкаПоНоменклатуре.Маркируемый;
			ЗаписьТовар.АлкогольныеРеквизиты.КодВидаАлкогольнойПродукции = ВыборкаПоНоменклатуре.КодВидаАлкогольнойПродукции;
			ЗаписьТовар.АлкогольныеРеквизиты.ЕмкостьТары = ВыборкаПоНоменклатуре.ЕмкостьТары;
			ЗаписьТовар.АлкогольныеРеквизиты.Крепость = ВыборкаПоНоменклатуре.Крепость;
			ЗаписьТовар.АлкогольныеРеквизиты.ИННПроизводителя = ВыборкаПоНоменклатуре.ИННПроизводителя;
			ЗаписьТовар.АлкогольныеРеквизиты.КПППроизводителя = ВыборкаПоНоменклатуре.КПППроизводителя;
		КонецЕсли;
		
		Если ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
			ЗаписьТовар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ТабачнаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция Тогда
			ЗаписьТовар.ТипМаркированнойПродукции = Перечисления.ТипыМаркировкиККТ.ОбувныеТовары;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		КонецЕсли;
		
		Если ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ИзделияИзМеха;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Табак;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Обувь;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ЛегкаяПромышленность;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС
			Или ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.МолочнаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Шины Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Шины;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Фотоаппараты;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Духи Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Духи;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Велосипеды;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.КреслаКоляски;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.АльтернативныйТабак;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.УпакованнаяВода;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Антисептики Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Антисептики;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БАДы Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.БАДы;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.НикотиносодержащаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.РазливноеПиво = ИСТИНА
			И (ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво
				Или ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках) Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.РазливноеПиво;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво
			Или ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Пиво;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
			ЗаписьТовар.ЭтоАлкоголь = Ложь;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.СоковаяПродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.СоковаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.БезалкогольноеПиво;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Морепродукты;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ВетеринарныеПрепараты;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ИгрыИИгрушкиДляДетей;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.РадиоэлектроннаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ТитановаяМеталлопродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.РастительныеМасла Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.РастительныеМасла;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ОптоволокноИОптоволоконнаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС
			ИЛИ ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.КормаДляЖивотных;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Мясо;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ПечатнаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.СтроительныеМатериалы;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ОтопительныеПриборы;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Бакалея Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.Бакалея;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ТелефоныИНоутбуки;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ПиротехническиеИзделияИСредстваПожарнойБезопасности;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.КабельнаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МоторныеМасла Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.МоторныеМасла;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.БезалкогольныеНапитки;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.ТехническиеСредстваРеабилитации;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.МедицинскиеИзделия;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		ИначеЕсли ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС
			ИЛИ ВыборкаПоНоменклатуре.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС Тогда
			ЗаписьТовар.ВидМаркированнойПродукции = Перечисления.ВидыМаркированнойПродукцииБПО.КонсервированнаяПродукция;
			ЗаписьТовар.ЭтоМаркированнаяПродукция = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.ЕдиницаИзмерения) Тогда
			УникальныйИдентификаторЕИ = ВыборкаПоНоменклатуре.ЕдиницаИзмерения.УникальныйИдентификатор();
			Если МассивПодобранныхЕИ.Найти(УникальныйИдентификаторЕИ) = Неопределено Тогда
				ЕдиницаИзмеренияККМ = МенеджерОфлайнОборудования.ЗаписьЕдиницыИзмеренияПрайсЛиста();
				ЕдиницаИзмеренияККМ.Код = СокрП(ВыборкаПоНоменклатуре.КодЕдиницыИзмерения);
				ЕдиницаИзмеренияККМ.Наименование = ВыборкаПоНоменклатуре.НаименованиеЕдиницыИзмерения;
				ЕдиницаИзмеренияККМ.УникальныйИдентификатор = УникальныйИдентификаторЕИ;
				
				СтруктураПрайсЛиста.ЕдиницыИзмерения.Добавить(ЕдиницаИзмеренияККМ);
				МассивПодобранныхЕИ.Добавить(УникальныйИдентификаторЕИ);
			КонецЕсли;
			ЗаписьТовар.УникальныйИдентификаторЕдиницыИзмерения = УникальныйИдентификаторЕИ;
		КонецЕсли;
			
		ЗаписьТовар.УникальныйИдентификатор = ВыборкаПоНоменклатуре.Номенклатура.УникальныйИдентификатор();
		Если ВыборкаПоНоменклатуре.ЕстьХарактеристики Тогда
			
			ЗаписьТовар.ИмеетХарактеристики = Истина;
			ЗаписьТовар.ИмеетУпаковки       = Ложь;
			
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
				
				ЗаписьХарактеристика = МенеджерОфлайнОборудования.ЗаписьХарактеристикиПрайсЛиста();
				ЗаписьХарактеристика.Наименование = ВыборкаПоХарактеристикам.ХарактеристикаНаименование;
				
				Если ВыборкаПоХарактеристикам.ЕстьУпаковки Тогда
					
					ЗаписьХарактеристика.ИмеетУпаковки       = Истина;
					
					ВыборкаПоУпаковкам = ВыборкаПоХарактеристикам.Выбрать();
					
					Пока ВыборкаПоУпаковкам.Следующий() Цикл
						ЗаписьУпаковка = МенеджерОфлайнОборудования.ЗаписьУпаковкиПрайсЛиста();
						Если ВыборкаПоНоменклатуре.Весовой Тогда 
							
							ЗаписьУпаковка.Код      = Сред(ВыборкаПоУпаковкам.Штрихкод, 3, 5);
						Иначе
							Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Штрихкод) Тогда
								МассивШК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоУпаковкам.Штрихкод,",",,);
								Для каждого СтрокаШтрихкод Из МассивШК Цикл
									ЗаписьШтрихкода = МенеджерОфлайнОборудования.ЗаписьШтрихкодаПрайсЛиста();
									ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкод;
									ЗаписьУпаковка.Штрихкоды.Добавить(ЗаписьШтрихкода);
								КонецЦикла; 
							КонецЕсли;
							ЗаписьУпаковка.Код      = Строка(Формат(ВыборкаПоУпаковкам.Код, "ЧГ=0"));
						КонецЕсли;
						ЗаписьУпаковка.Цена     = ВыборкаПоУпаковкам.Цена;
						ЗаписьУпаковка.Остаток  = ВыборкаПоУпаковкам.Остаток;
						ЗаписьУпаковка.Коэффициент = ВыборкаПоУпаковкам.КоэффициентУпаковки;
						ЗаписьУпаковка.Наименование  = ВыборкаПоУпаковкам.УпаковкаНаименование;
						
						Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Упаковка) Тогда
							ЗаписьУпаковка.УникальныйИдентификатор = ВыборкаПоУпаковкам.Упаковка.УникальныйИдентификатор();
						Иначе	
							ЗаписьУпаковка.УникальныйИдентификатор = Неопределено;
						КонецЕсли;
						
						ЗаписьХарактеристика.Упаковки.Добавить(ЗаписьУпаковка);
						
					КонецЦикла;
					
				Иначе
					ЗаписьХарактеристика.ИмеетУпаковки       = Ложь;
					Если ВыборкаПоНоменклатуре.Весовой Тогда 
						ЗаписьХарактеристика.Код = Сред(ВыборкаПоХарактеристикам.Штрихкод, 3, 5);
					Иначе
						Если ЗначениеЗаполнено(ВыборкаПоХарактеристикам.Штрихкод) Тогда
							МассивШК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоХарактеристикам.Штрихкод,",",,);
							Для каждого СтрокаШтрихкод Из МассивШК Цикл
								ЗаписьШтрихкода = МенеджерОфлайнОборудования.ЗаписьШтрихкодаПрайсЛиста();
								ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкод;
								ЗаписьХарактеристика.Штрихкоды.Добавить(ЗаписьШтрихкода);
							КонецЦикла;
						КонецЕсли;
						ЗаписьХарактеристика.Код  = Строка(Формат(ВыборкаПоХарактеристикам.Код, "ЧГ=0"));
					КонецЕсли;
					
					ЗаписьХарактеристика.Цена     = ВыборкаПоХарактеристикам.Цена;
					ЗаписьХарактеристика.Остаток  = ВыборкаПоХарактеристикам.Остаток;
					
				КонецЕсли;
				
				ЗаписьХарактеристика.УникальныйИдентификатор = ВыборкаПоХарактеристикам.Характеристика.УникальныйИдентификатор();
				
				ЗаписьТовар.Характеристики.Добавить(ЗаписьХарактеристика);
				
			КонецЦикла;
			
		ИначеЕсли ВыборкаПоНоменклатуре.ЕстьУпаковки И НЕ ВыборкаПоНоменклатуре.ЕстьХарактеристики Тогда
			
			ВыборкаПоПустойХарактеристике = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			ВыборкаПоПустойХарактеристике.Следующий();
			
			ВыборкаПоУпаковкам = ВыборкаПоПустойХарактеристике.Выбрать();
			
			ЗаписьТовар.ИмеетУпаковки       = Истина;
			ЗаписьТовар.ИмеетХарактеристики = Ложь;
			
			Пока ВыборкаПоУпаковкам.Следующий() Цикл
				
				ЗаписьУпаковка = МенеджерОфлайнОборудования.ЗаписьУпаковкиПрайсЛиста();
				
				Если ВыборкаПоНоменклатуре.Весовой Тогда 
					ЗаписьУпаковка.Код      = Сред(ВыборкаПоУпаковкам.Штрихкод, 3, 5);
				Иначе
					Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Штрихкод) Тогда
						МассивШК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоУпаковкам.Штрихкод,",",,);
						Для каждого СтрокаШтрихкод Из МассивШК Цикл
							ЗаписьШтрихкода = МенеджерОфлайнОборудования.ЗаписьШтрихкодаПрайсЛиста();
							ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкод;
							ЗаписьУпаковка.Штрихкоды.Добавить(ЗаписьШтрихкода);
						КонецЦикла;
					КонецЕсли;
					ЗаписьУпаковка.Код      = Строка(Формат(ВыборкаПоУпаковкам.Код, "ЧГ=0"));
				КонецЕсли;
				
				ЗаписьУпаковка.Цена     = ВыборкаПоУпаковкам.Цена;
				ЗаписьУпаковка.Остаток  = ВыборкаПоУпаковкам.Остаток;
				ЗаписьУпаковка.Коэффициент = ВыборкаПоУпаковкам.КоэффициентУпаковки;
				ЗаписьУпаковка.Наименование  = ВыборкаПоУпаковкам.УпаковкаНаименование;
				
				Если ЗначениеЗаполнено(ВыборкаПоУпаковкам.Упаковка) Тогда
					ЗаписьУпаковка.УникальныйИдентификатор = ВыборкаПоУпаковкам.Упаковка.УникальныйИдентификатор();
				Иначе
					ЗаписьУпаковка.УникальныйИдентификатор = Неопределено;
				КонецЕсли;
			
				ЗаписьТовар.Упаковки.Добавить(ЗаписьУпаковка);
				
			КонецЦикла;
			
		Иначе
			
			Если ВыборкаПоНоменклатуре.Весовой Тогда 
				ЗаписьТовар.Код      = Сред(ВыборкаПоНоменклатуре.Штрихкод, 3, 5);
			Иначе
				Если ЗначениеЗаполнено(ВыборкаПоНоменклатуре.Штрихкод) Тогда
					МассивШК = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыборкаПоНоменклатуре.Штрихкод,",",,);
					Для каждого СтрокаШтрихкод Из МассивШК Цикл
						ЗаписьШтрихкода = МенеджерОфлайнОборудования.ЗаписьШтрихкодаПрайсЛиста();
						ЗаписьШтрихкода.Штрихкод = СтрокаШтрихкод;
						ЗаписьТовар.Штрихкоды.Добавить(ЗаписьШтрихкода);
					КонецЦикла;
				КонецЕсли;
				ЗаписьТовар.Код = Строка(Формат(ВыборкаПоНоменклатуре.Код, "ЧГ=0"));
			КонецЕсли;
			ЗаписьТовар.Цена     = ВыборкаПоНоменклатуре.Цена;
			ЗаписьТовар.Остаток  = ВыборкаПоНоменклатуре.Остаток;
			
			ЗаписьТовар.ИмеетУпаковки       = Ложь;
			ЗаписьТовар.ИмеетХарактеристики = Ложь;
			
		КонецЕсли;
		
		СтруктураПрайсЛиста.Товары.Добавить(ЗаписьТовар);
		
	КонецЦикла;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаТоваров

// Процедура обновляет таблицу товаров с данными к выгрузке в устройство.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - Таблица товаров к выгрузке.
//  Устройство - СправочникСсылка.ПодключаемоеОборудование - Устройство для которого необходимо получить данные
//  Параметры - Структура - ПАраметры выгрузки.
//  ОбновитьКодыТоваров - Булево - Флаг обновления кодов товаров перед получением данных.
//  Штрихкод - Строка -.
//
Процедура ДанныеТоваровДляВыгрузки(ТаблицаТоваров, Устройство, Параметры, ОбновитьКодыТоваров = Ложь, Штрихкод = "") Экспорт
	//++ Локализация
	ИспользоватьСерииНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Параметры.Склад));
	
	Если ОбновитьКодыТоваров Тогда
		ПодключаемоеОборудованиеOfflineВызовСервера.ОбновитьКодыТоваров(Параметры.ПравилоОбмена);
	КонецЕсли;
	
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		ТекстЗапроса = ТекстЗапросаДанныеТоваровДляВыгрузки25(Параметры, ИспользоватьСерииНоменклатуры);
	Иначе
		ТекстЗапроса = ТекстЗапросаДанныеТоваровДляВыгрузки(Параметры, ИспользоватьСерииНоменклатуры);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ФорматШтрихкода",        РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода()));
	Запрос.УстановитьПараметр("ПравилоОбмена",          Параметры.ПравилоОбмена);
	Запрос.УстановитьПараметр("ПравилоОбменаСклад",     Параметры.Склад);
	Запрос.УстановитьПараметр("ВидЦены",                Параметры.ВидЦены);
	Запрос.УстановитьПараметр("ИндивидуальныйВидЦены",  Параметры.ИндивидуальныйВидЦены);
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", Параметры.УзелИнформационнойБазы);
	Запрос.УстановитьПараметр("ТекущаяДата",            КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ОтборПоШтрихкоду",       НЕ ПустаяСтрока(Штрихкод));
	Запрос.УстановитьПараметр("Штрихкод",               Штрихкод);
	Запрос.УстановитьПараметр("ПустаяСтрока",           "");
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Устройство, "Организация")));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КодГруппы",          Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Артикул",            Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаНоменклатурнойКлассификации", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("ХарактеристикаНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("УпаковкаНаименование",Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КоэффициентУпаковки", Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения",   Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("КодЕдиницыИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеЕдиницыИзмерения", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ОписаниеТовара",     Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("МассивШтрихкодов",   Новый ОписаниеТипов("Массив"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Остаток",            Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ПодакцизныйТовар",   Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ТипНоменклатуры",    Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	
	ТаблицаТоваров.Колонки.Добавить("ТребуетсяУказаниеСерий", Новый ОписаниеТипов("Булево"));
	
	ТаблицаТоваров.Колонки.Добавить("ЕстьОшибки",                  Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИндексКартинкиЕстьИзменения", Новый ОписаниеТипов("Число"));
	
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",					Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("Алкоголь",						Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Маркируемый",					Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("РазливноеПиво",				Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("КодВидаАлкогольнойПродукции",	Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ЕмкостьТары",					Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Крепость",						Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("ИННПроизводителя",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("КПППроизводителя",				Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ОсобенностьУчета",             Новый ОписаниеТипов("ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры"));
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		ПрефиксУзлаШтрихкода                      = РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода();
		МаксимальноеЗначениеКодаВесовыхШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаВесовыхШтрихкодов();
		МаксимальныйКодВесовогоТовара             = РегистрыСведений.ШтрихкодыНоменклатуры.МаксимальныйКодВесовогоТовара();
		
		Пока ВыборкаПоКодам.Следующий() Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
		
			Выборка = ВыборкаПоКодам.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.Весовой Тогда
					Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Выборка.Штрихкод);
				Иначе
					Штрихкод = СокрЛП(Выборка.Штрихкод);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
					
					НоваяСтрока.Используется                = Выборка.Используется;
					НоваяСтрока.Код                         = Выборка.Код;
					НоваяСтрока.КодГруппы                   = Выборка.КодГруппы;
					НоваяСтрока.Артикул                     = Выборка.Артикул;
					НоваяСтрока.КодВидаНоменклатурнойКлассификации = Выборка.КодВидаНоменклатурнойКлассификации;
					НоваяСтрока.Номенклатура                = Выборка.Номенклатура;
					НоваяСтрока.Характеристика              = Выборка.Характеристика;
					НоваяСтрока.ХарактеристикаНаименование  = Выборка.ХарактеристикаНаименование;
					НоваяСтрока.Упаковка                    = Выборка.Упаковка;
					НоваяСтрока.УпаковкаНаименование        = Выборка.УпаковкаНаименование;
					НоваяСтрока.КоэффициентУпаковки         = Выборка.КоэффициентУпаковки;
					НоваяСтрока.Наименование                = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименование, Выборка.ХарактеристикаНаименование) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование + ")","");
					НоваяСтрока.НаименованиеПолное          = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(Выборка.НоменклатураНаименованиеПолное, Выборка.ХарактеристикаНаименованиеПолное) + ?(ЗначениеЗаполнено(Выборка.УпаковкаНаименование),", " + Выборка.УпаковкаНаименование + ")","");
					НоваяСтрока.ОписаниеТовара              = Выборка.ОписаниеТовара;
					НоваяСтрока.Цена                        = Выборка.Цена;
					НоваяСтрока.Остаток                     = Выборка.Остаток;
					НоваяСтрока.Весовой                     = Выборка.Весовой;
					НоваяСтрока.ИндексКартинкиЕстьИзменения = Выборка.ИндексКартинкиЕстьИзменения;
					НоваяСтрока.Штрихкод                    = Штрихкод;
					НоваяСтрока.КодЕдиницыИзмерения         = Выборка.КодЕдиницыИзмерения;
					НоваяСтрока.ЕдиницаИзмерения            = Выборка.ЕдиницаИзмерения;
					НоваяСтрока.НаименованиеЕдиницыИзмерения= Выборка.НаименованиеЕдиницыИзмерения;
					НоваяСтрока.ТипНоменклатуры             = Выборка.ТипНоменклатуры;
					НоваяСтрока.ПодакцизныйТовар            = Выборка.ПодакцизныйТовар;
					
					Если ИспользоватьСерииНоменклатуры Тогда
						НоваяСтрока.ТребуетсяУказаниеСерий  = Выборка.УказыватьСерииПриОтгрузкеВРозницу;
					КонецЕсли;
					
					НоваяСтрока.Алкоголь                    = Выборка.Алкоголь;
					НоваяСтрока.СтавкаНДС                   = Выборка.СтавкаНДС;
					НоваяСтрока.Маркируемый                 = Выборка.Маркируемый;
					НоваяСтрока.РазливноеПиво               = Выборка.РазливноеПиво;
					НоваяСтрока.КодВидаАлкогольнойПродукции = Выборка.КодВидаАлкогольнойПродукции;
					НоваяСтрока.ЕмкостьТары                 = Выборка.ЕмкостьТары;
					НоваяСтрока.Крепость                    = Выборка.Крепость;
					НоваяСтрока.ИННПроизводителя            = Выборка.ИННПроизводителя;
					НоваяСтрока.КПППроизводителя            = Выборка.КПППроизводителя;
					НоваяСтрока.ОсобенностьУчета            = Выборка.ОсобенностьУчета;
					
				Иначе
					НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + "," + Штрихкод;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Штрихкод) Тогда
					НоваяСтрока.МассивШтрихкодов.Добавить(Штрихкод);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НоваяСтрока.Весовой
				И ОбновитьКодыТоваров
				И (Не ЗначениеЗаполнено(НоваяСтрока.Штрихкод)) Тогда
				
					Если МаксимальноеЗначениеКодаВесовыхШтрихкодов = Неопределено ИЛИ МаксимальноеЗначениеКодаВесовыхШтрихкодов >= МаксимальныйКодВесовогоТовара Тогда
						ВызватьИсключение РегистрыСведений.ШтрихкодыНоменклатуры.ТекстСообщенияНетСвободныхКодовВесовыхШтрихкодов();
					КонецЕсли;
					
					МаксимальноеЗначениеКодаВесовыхШтрихкодов = МаксимальноеЗначениеКодаВесовыхШтрихкодов + 1;
					
					Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(МаксимальноеЗначениеКодаВесовыхШтрихкодов, ПрефиксУзлаШтрихкода);
					
					Попытка
						
						МенеджерЗаписиШтрихкода = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
						МенеджерЗаписиШтрихкода.Номенклатура   = НоваяСтрока.Номенклатура;
						МенеджерЗаписиШтрихкода.Характеристика = НоваяСтрока.Характеристика;
						МенеджерЗаписиШтрихкода.Упаковка       = НоваяСтрока.Упаковка;
						МенеджерЗаписиШтрихкода.Штрихкод       = Штрихкод;
						МенеджерЗаписиШтрихкода.Записать();
						
						НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Штрихкод);
						НоваяСтрока.МассивШтрихкодов.Добавить(НоваяСтрока.Штрихкод);
						
					Исключение
						
						НоваяСтрока.Штрихкод = "";
						НоваяСтрока.МассивШтрихкодов.Очистить();
						
					КонецПопытки;
					
			КонецЕсли;
			
			Если НоваяСтрока.Весовой Тогда
				
				Если НоваяСтрока.МассивШтрихкодов.Количество() = 0 Тогда
					НоваяСтрока.ЕстьОшибки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Цена)
				ИЛИ Не ЗначениеЗаполнено(НоваяСтрока.Наименование)
				ИЛИ (Не ЗначениеЗаполнено(НоваяСтрока.Штрихкод) И Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток)
				ИЛИ (ЗначениеЗаполнено(Параметры.МаксимальныйКод) И НоваяСтрока.Код > Параметры.МаксимальныйКод) Тогда
				НоваяСтрока.ЕстьОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При подготовке данных к выгрузке произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ТаблицаТоваров.Очистить();
		
	КонецПопытки;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ТоварыПравилаВыгрузки

// Процедура обновляет таблицу товаров с данными о товарам для правила выгрузки с ценами
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - Таблица товаров
//  ПравилоОбмена - СправочникСсылка.ПравилаОбменаСПодключаемымОборудованиемOffline - Правило обмена.
//  ВидЦены - СправочникСсылка.ВидыЦен - Вид цены.
//  ИндивидуальныйВидЦены - СправочникСсылка.ВидыЦен - индивидуальный вид цены.
//
Процедура ДанныеТоваровПоПравилуОбмена(ТаблицаТоваров, ПравилоОбмена, ВидЦены, ИндивидуальныйВидЦены) Экспорт
	//++ Локализация
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПараметры = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.ТипПодключаемогоОборудования КАК ТипОборудования
	|ИЗ
	|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
	|ГДЕ
	|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &Ссылка");
	
	ЗапросПараметры.УстановитьПараметр("Ссылка", ПравилоОбмена);
	
	Параметры = ЗапросПараметры.Выполнить().Выбрать();
	Параметры.Следующий();
	
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		ТекстЗапроса = ТекстЗапросаДанныеТоваровПоПравилуОбмена25(Параметры);
	Иначе
		ТекстЗапроса = ТекстЗапросаДанныеТоваровПоПравилуОбмена(Параметры);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода()));
	Запрос.УстановитьПараметр("ПравилоОбмена",   ПравилоОбмена);
	Запрос.УстановитьПараметр("ВидЦены",         ВидЦены);
	Запрос.УстановитьПараметр("ИндивидуальныйВидЦены",  ИндивидуальныйВидЦены);
	Запрос.УстановитьПараметр("ТекущаяДата",     КонецДня(ТекущаяДатаСеанса()));
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",       Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КодИнтерактивно",    Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",       Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",     Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",           Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",       Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",           Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Цена",               Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",            Новый ОписаниеТипов("Булево"));
	
	МаксимальныйКодВесовогоТовара = ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Весовой Тогда
				Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(Выборка.Штрихкод);
			Иначе
				Штрихкод = СокрЛП(Выборка.Штрихкод);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
				НоваяСтрока.Используется       = Выборка.Используется;
				
				НоваяСтрока.Код                = Выборка.Код;
				Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток
					И Выборка.Код > МаксимальныйКодВесовогоТовара Тогда
					
					НоваяСтрока.КодИнтерактивно = Выборка.Код - МаксимальныйКодВесовогоТовара;
				Иначе
					НоваяСтрока.КодИнтерактивно = Выборка.Код;
				КонецЕсли;
				
				НоваяСтрока.Номенклатура       = Выборка.Номенклатура;
				НоваяСтрока.Характеристика     = Выборка.Характеристика;
				НоваяСтрока.Упаковка           = Выборка.Упаковка;
				НоваяСтрока.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименование,
					Выборка.ХарактеристикаНаименование,
					Выборка.УпаковкаНаименование);
				НоваяСтрока.НаименованиеПолное = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименованиеПолное,
					Выборка.ХарактеристикаНаименованиеПолное,
					Выборка.УпаковкаНаименование);
				НоваяСтрока.Цена               = Выборка.Цена;
				НоваяСтрока.Весовой            = Выборка.Весовой;
				НоваяСтрока.Штрихкод           = Штрихкод;
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + Штрихкод;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	//-- Локализация
КонецПроцедуры

#КонецОбласти

// заполнение переопределяемых процедур модуля МенеджерОфлайнОборудованияПереопределяемый

Процедура ЗаполнитьНастройкиККМ(ОфлайнОборудование, НастройкиОборудования) Экспорт
	//++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаОбмена.Склад КАК Склад,
	|	ПодключаемоеОборудование.Организация КАК Организация,
	|	ПодключаемоеОборудование.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПравилаОбмена.Склад КАК Магазин,
	|	ПравилаОбмена.Склад.Наименование КАК НаименованиеМагазина,
	|	ПодключаемоеОборудование.Организация.ИНН КАК ИНН,
	|	ПодключаемоеОборудование.Организация.КПП КАК КПП
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбмена
	|			ПО ПодключаемоеОборудование.ПравилоОбмена = ПравилаОбмена.Ссылка
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &ОфлайнОборудование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаОбмена.Склад КАК Склад,
	|	ПодключаемоеОборудование.Организация КАК Организация,
	|	ПодключаемоеОборудование.Организация.Наименование КАК НаименованиеОрганизации,
	|	ПравилаОбмена.Склад КАК Магазин,
	|	ПравилаОбмена.Склад.Наименование КАК НаименованиеМагазина,
	|	ПодключаемоеОборудование.Организация.ИНН КАК ИНН,
	|	ПодключаемоеОборудование.Организация.КПП КАК КПП
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбмена
	|			ПО ПодключаемоеОборудование.ПравилоОбмена = ПравилаОбмена.Ссылка
	|ГДЕ
	|	ПодключаемоеОборудование.Ссылка = &ОфлайнОборудование";
	
	Запрос.УстановитьПараметр("ОфлайнОборудование", ОфлайнОборудование);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НастройкиОборудования.НаименованиеОрганизации = Выборка.НаименованиеОрганизации;
		НастройкиОборудования.НаименованиеМагазина = Выборка.НаименованиеМагазина;
		НастройкиОборудования.ИНН = Выборка.ИНН;
		НастройкиОборудования.КПП = Выборка.КПП;
		
		//МестоТочкиПродажи
		НастройкиОборудования.АдресТочкиПродажи = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Магазин, Справочники.ВидыКонтактнойИнформации.АдресСклада);
		
		//АдресТочкиПродажи
		
		//СистемыНалогообложения
		НалогообложениеНДС = УчетНДСУП.ПараметрыУчетаПоОрганизации(
			Выборка.Организация,
			ТекущаяДатаСеанса(),
			Выборка.Склад).НалогообложениеНДСРозничнойПродажи;
		
		НалогообложениеНДСККТ = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
		Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда
			НалогообложениеНДСККТ = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
		ИначеЕсли НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			НалогообложениеНДСККТ = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
		Иначе
			НалогообложениеНДСККТ = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(Выборка.Организация);
		КонецЕсли;
		
		НастройкиОборудования.СистемыНалогообложения.Добавить(НалогообложениеНДСККТ);
		
		//ЭлектроннаяПочтаОтправителяЧека
		УстановитьПривилегированныйРежим(Истина);
		СистемнаяУчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		НастройкиОборудования.ЭлектроннаяПочтаОтправителяЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СистемнаяУчетнаяЗапись,
			"АдресЭлектроннойПочты");
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПлатежнаяКарта();
	ВидОплатыККМ = МенеджерОфлайнОборудования.ЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= 1;
	ВидОплатыККМ.Наименование 				= НСтр("ru = 'Оплата платежной картой'");
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	

	ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыБанковскийКредит();
	ВидОплатыККМ = МенеджерОфлайнОборудования.ЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= 2;
	ВидОплатыККМ.Наименование 				= НСтр("ru = 'Оплата банковским кредитом'");
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	
	ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыПодарочныйСертификат();
	ВидОплатыККМ = МенеджерОфлайнОборудования.ЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= 3;
	ВидОплатыККМ.Наименование 				= НСтр("ru = 'Оплата подарочным сертификатом'");
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	
	ТипЭлектроннойОплаты = МенеджерОфлайнОборудования.ТипЭлектроннойОплатыБонусы();
	ВидОплатыККМ = МенеджерОфлайнОборудования.ЗаписьВидЭлектроннойОплаты();
	
	ВидОплатыККМ.Код 						= 4;
	ВидОплатыККМ.Наименование 				= НСтр("ru = 'Оплата бонусами'");
	ВидОплатыККМ.ТипЭлектроннойОплаты 		= ТипЭлектроннойОплаты;
	
	НастройкиОборудования.ВидыЭлектроннойОплаты.Добавить(ВидОплатыККМ);
	//-- Локализация
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистККМ(ОфлайнОборудование, ПрайсЛист, ПолнаяВыгрузка) Экспорт
	//++ Локализация
	Параметры = Неопределено;
	ПолучитьПараметрыУстройства(Параметры, ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", НЕ ПолнаяВыгрузка И Параметры.ВыгружатьИзменения);
	Параметры.Вставить("ВыгружатьГруппыТоваров", Ложь);
	
	ТоварыКВыгрузке = Неопределено;
	ДанныеТоваровДляВыгрузки(ТоварыКВыгрузке, ОфлайнОборудование, Параметры, Истина);
	
	ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛист, ТоварыКВыгрузке);
	//-- Локализация
КонецПроцедуры

Процедура ЗаполнитьПрайсЛистККМПоШтрихкоду(ОфлайнОборудование, ПрайсЛист, Штрихкод) Экспорт
	//++ Локализация
	Перем Параметры, ТоварыКВыгрузке;
	
	ПолучитьПараметрыУстройства(Параметры, ОфлайнОборудование);
	
	Если Параметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.ПравилоОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ЧастичнаяВыгрузка", Ложь);
	Параметры.Вставить("ВыгружатьГруппыТоваров", Ложь);
	
	ДанныеТоваровДляВыгрузки(ТоварыКВыгрузке, ОфлайнОборудование, Параметры, Истина);
	ЗаполнитьСтруктуруПрайсЛистаИзДанныхКВыгрузке(ПрайсЛист, ТоварыКВыгрузке);
	//-- Локализация
КонецПроцедуры

Процедура УдалитьРегистрациюПрайсЛистаПослеВыгрузки(ОфлайнОборудование) Экспорт
	//++ Локализация
	Перем Параметры, ТоварыКВыгрузке;
	
	ПолучитьПараметрыУстройства(Параметры, ОфлайнОборудование);
	Параметры.Вставить("ЧастичнаяВыгрузка", Истина);
	Параметры.Вставить("ВыгружатьГруппыТоваров", Ложь);
	
	ДанныеТоваровДляВыгрузки(ТоварыКВыгрузке, ОфлайнОборудование, Параметры, Истина);
	
	СтруктураДанных = ?(Параметры.ВыгружатьИзменения, Новый Структура("МассивКодовSKU", ТоварыКВыгрузке.ВыгрузитьКолонку("Код")), Неопределено);
	ПриВыгрузкеТоваровВУстройство(ОфлайнОборудование, СтруктураДанных, Истина, Истина);
	//-- Локализация
КонецПроцедуры

Процедура ЗагрузитьОтчетыОПродажахИзККМ(Устройство, ДанныеОПродажах, Отказ, СообщениеОбОшибке) Экспорт
	//++ Локализация
	
	ПараметрыПодключаемогоОборудования = ПолучитьПараметрыПодключаемогоОборудования(Устройство);
	Если ПараметрыПодключаемогоОборудования = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЧекиНаВозвратВнеСмены(ДанныеОПродажах);
	
	ТаблицаТоваров = ПустаяТаблицаТоваров();	
	ТаблицаШтрихкодовАкцизов = ПустаяТаблицаШтрихкодовАкцизов();	
	ТаблицаОплат = ПустаяТаблицаОплат();
	
	ТаблицаТоваровВозврат =  ПустаяТаблицаТоваров();
	ТаблицаШтрихкодовАкцизовВозврат = ПустаяТаблицаШтрихкодовАкцизов();	
	ТаблицаОплатВозврат = ПустаяТаблицаОплат();
	
	ТаблицаКассовыхСмен = Новый ТаблицаЗначений;
	ТаблицаКассовыхСмен.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаКассовыхСмен.Колонки.Добавить("ДатаОткрытияСмены", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаКассовыхСмен.Колонки.Добавить("ДатаЗакрытияСмены", Новый ОписаниеТипов("Дата",,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаКассовыхСмен.Колонки.Добавить("НомерСмены", Новый ОписаниеТипов("Строка"));
	ТаблицаКассовыхСмен.Колонки.Добавить("СтатусСмены", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКассовойСмены"));
	ТаблицаКассовыхСмен.Колонки.Добавить("КассоваяСмена", Новый ОписаниеТипов("ДокументСсылка.КассоваяСмена"));
	ТаблицаКассовыхСмен.Колонки.Добавить("ЕстьВозвратыВнеСмены", Новый ОписаниеТипов("Булево"));
	ТаблицаКассовыхСмен.Колонки.Добавить("КоличествоЧеков", Новый ОписаниеТипов("Число"));
	
	ТаблицаКассовыхСмен.Колонки.Добавить("ОтчетОРозничныхПродажах", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));
	ТаблицаКассовыхСмен.Колонки.Добавить("ОтчетОРозничныхВозвратах", Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхВозвратах"));
	ТаблицаКассовыхСмен.Индексы.Добавить("НомерСмены");
	
	Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		НоваяСтрокаКассовыхСмен = ТаблицаКассовыхСмен.Добавить();
		НоваяСтрокаКассовыхСмен.УникальныйИдентификатор = ОтчетОПродажах.УникальныйИдентификатор;
		НоваяСтрокаКассовыхСмен.ДатаЗакрытияСмены		= ОтчетОПродажах.ДатаЗакрытияСмены;
		НоваяСтрокаКассовыхСмен.ДатаОткрытияСмены		= ОтчетОПродажах.ДатаОткрытияСмены;
		НоваяСтрокаКассовыхСмен.НомерСмены				= ОтчетОПродажах.НомерСмены;
		НоваяСтрокаКассовыхСмен.СтатусСмены				= ОтчетОПродажах.СтатусСмены;
		НоваяСтрокаКассовыхСмен.КоличествоЧеков			= ОтчетОПродажах.Чеки.Количество();
		
		Для Каждого ЧекККМ Из ОтчетОПродажах.Чеки Цикл
			ЭтоЧекНаВозвратВнеСмены = Ложь;
			ОтчетОРозничныхПродажахДляЧекаНаВозвратВнеСмены = Неопределено;
			Если ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Ложь;
			ИначеЕсли ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
				ЭтоЧекНаВозврат = Истина;
				ЭтоЧекНаВозвратВнеСмены = ЧекККМ.ВозвратВнеСмены;
				ДанныеЧекаОснования = ОтчетОПродажах.СвязанныеДокументыДляЧековНаВозвратВнеСмены[ЧекККМ.НомерЧека];
				Если ЭтоЧекНаВозвратВнеСмены 
					И ДанныеЧекаОснования <> Неопределено 
					И ЗначениеЗаполнено(ДанныеЧекаОснования.НомерСмены) Тогда
					// Оборудование может хранить данные по нескольким своим кассовым сменам.
					СостояниеКассовойСменыЧекаОснования = РозничныеПродажи.ПолучитьСостояниеКассовойСменыПоНомеру(Устройство, ДанныеЧекаОснования.НомерСмены);
					// Найдем Отчет о розничных продажах, связанный с кассовой сменой чека основания.
					Если ЗначениеЗаполнено(СостояниеКассовойСменыЧекаОснования.КассоваяСмена) Тогда
						ОтчетОРозничныхПродажахДляЧекаНаВозвратВнеСмены = РозничныеПродажи.НайтиОтчетОРозничныхПродажах(СостояниеКассовойСменыЧекаОснования.КассоваяСмена, СостояниеКассовойСменыЧекаОснования.НалогообложениеНДС, Истина);
					КонецЕсли;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из ЧекККМ.Товары Цикл
				
				Если НЕ (СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаБезОплаты
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой
					ИЛИ СтрокаТЧ.ПризнакСпособаРасчета = Перечисления.ПризнакиСпособаРасчета.ПередачаСЧастичнойОплатой) Тогда
					
					Продолжить;
				КонецЕсли;
				
				МножительДляОтраженияВозврата = 1;
				Если ЭтоЧекНаВозвратВнеСмены Тогда
					НоваяСтрока = ТаблицаТоваровВозврат.Добавить();
					Если ЗначениеЗаполнено(ОтчетОРозничныхПродажахДляЧекаНаВозвратВнеСмены) Тогда
						НоваяСтрока.ДокументРеализации = ОтчетОРозничныхПродажахДляЧекаНаВозвратВнеСмены;
					КонецЕсли;
				Иначе
					Если ЭтоЧекНаВозврат Тогда
						МножительДляОтраженияВозврата = -1;
					КонецЕсли;	
					НоваяСтрока = ТаблицаТоваров.Добавить();
				КонецЕсли;
				
				// Преобразование кода
				НоваяСтрока.Код = СтрокаТЧ.Код;
				Если НоваяСтрока.Код <= ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара() Тогда
					НоваяСтрока.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодВесовогоТовараПоКоду(НоваяСтрока.Код,,Истина);
					НоваяСтрока.Весовой = Истина;
				КонецЕсли;
				НоваяСтрока.Количество 	= МножительДляОтраженияВозврата*СтрокаТЧ.Количество;
				НоваяСтрока.Сумма 		= МножительДляОтраженияВозврата*СтрокаТЧ.Сумма;
				НоваяСтрока.Цена 		= СтрокаТЧ.Цена;
				НоваяСтрока.СтавкаНДС 	= ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС);
				НоваяСтрока.УникальныйИдентификатор = ОтчетОПродажах.УникальныйИдентификатор;
				НоваяСтрока.НомерСмены  = ОтчетОПродажах.НомерСмены;
				Для Каждого ШтрихкодАлкогольнойМарки Из СтрокаТЧ.ШтрихкодыМаркированнойПродукции Цикл
					Если Не ЭтоЧекНаВозврат Тогда
						НоваяСтрокаШтрихкод = ТаблицаШтрихкодовАкцизов.Добавить();
						НоваяСтрокаШтрихкод.УникальныйИдентификатор = НоваяСтрока.УникальныйИдентификатор;
						НоваяСтрокаШтрихкод.Код = НоваяСтрока.Код;
						НоваяСтрокаШтрихкод.ШтрихкодАлкогольнойМарки = ШтрихкодАлкогольнойМарки;
						НоваяСтрокаШтрихкод.ДатаЧека = ЧекККМ.ДатаЧека;
						НоваяСтрокаШтрихкод.НомерСмены = ОтчетОПродажах.НомерСмены;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого СтрокаТЧ Из ЧекККМ.Оплаты Цикл
				
				МножительДляОтраженияВозврата = 1;
				Если ЭтоЧекНаВозвратВнеСмены Тогда
					НоваяСтрока = ТаблицаОплатВозврат.Добавить();	
				Иначе
					Если ЭтоЧекНаВозврат Тогда
						МножительДляОтраженияВозврата = -1;
					КонецЕсли;	
					НоваяСтрока = ТаблицаОплат.Добавить();
				КонецЕсли;
				
				НоваяСтрока.УникальныйИдентификатор = ОтчетОПродажах.УникальныйИдентификатор;
				НоваяСтрока.НомерСмены  = ОтчетОПродажах.НомерСмены;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.КодВидаЭлектроннойОплаты) Тогда
					НоваяСтрока.КодВидаОплаты = СтрокаТЧ.КодВидаЭлектроннойОплаты;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТЧ.СуммаНаличнойОплаты) Тогда
					
					НоваяСтрока.Сумма = МножительДляОтраженияВозврата*СтрокаТЧ.СуммаНаличнойОплаты;
					НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.СуммаЭлектроннойОплаты) Тогда
					
					НоваяСтрока.Сумма = МножительДляОтраженияВозврата*СтрокаТЧ.СуммаЭлектроннойОплаты;
					НоваяСтрока.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаОплат.Свернуть("НомерСмены, УникальныйИдентификатор, ТипОплаты", "Сумма");
	ТаблицаОплат.Сортировать("НомерСмены, УникальныйИдентификатор, ТипОплаты");
	ТаблицаОплатВозврат.Сортировать("НомерСмены, УникальныйИдентификатор, ТипОплаты");
	
	ЗагрузкаАкцизныхМарок = Ложь;
	
	РезультатЗапросаПродажи = ПолучитьДанныеДляЗаполненияДокумента(ПараметрыПодключаемогоОборудования, ТаблицаТоваров, ТаблицаШтрихкодовАкцизов, ЗагрузкаАкцизныхМарок);
	РезультатЗапросаВозврат = ПолучитьДанныеДляЗаполненияДокумента(ПараметрыПодключаемогоОборудования, ТаблицаТоваровВозврат, ТаблицаШтрихкодовАкцизовВозврат, ЗагрузкаАкцизныхМарок);
		
	Если ЗагрузкаАкцизныхМарок <> Ложь Тогда
		ВыборкаПоСменам = РезультатЗапросаПродажи[РезультатЗапросаПродажи.Количество()-4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаАкцизныеМарки = РезультатЗапросаПродажи[РезультатЗапросаПродажи.Количество()-1].Выгрузить();
		ВыборкаПоСменамВозврат = РезультатЗапросаВозврат[РезультатЗапросаВозврат.Количество()-4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ТаблицаАкцизныеМаркиВозврат = РезультатЗапросаВозврат[РезультатЗапросаВозврат.Количество()-1].Выгрузить();
	Иначе
		ВыборкаПоСменам = РезультатЗапросаПродажи[РезультатЗапросаПродажи.Количество()-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаПоСменамВозврат = РезультатЗапросаВозврат[РезультатЗапросаВозврат.Количество()-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	ТаблицаКассовыхСмен.Сортировать("ДатаОткрытияСмены,НомерСмены");
	Для Каждого ПараметрыКассовойСмены Из ТаблицаКассовыхСмен Цикл
		
		Если Не ЗначениеЗаполнено(ПараметрыКассовойСмены.КассоваяСмена) Тогда
			// Попытаемся найти документ Кассовая смена по номеру, иначе создадим новый документ и заполним его.		
			КассоваяСмена = ЗаполнитьКассовуюСменуПоНомеру(ПараметрыПодключаемогоОборудования, ПараметрыКассовойСмены, Отказ, СообщениеОбОшибке);
			Если ЗначениеЗаполнено(КассоваяСмена) Тогда
				КассовыеСменыПоНомеру = ТаблицаКассовыхСмен.НайтиСтроки(Новый Структура("НомерСмены,ДатаОткрытияСмены,ДатаЗакрытияСмены", ПараметрыКассовойСмены.НомерСмены, ПараметрыКассовойСмены.ДатаОткрытияСмены, ПараметрыКассовойСмены.ДатаЗакрытияСмены));
				Для каждого КассоваяСменаПоНомеру Из КассовыеСменыПоНомеру Цикл
					КассоваяСменаПоНомеру.КассоваяСмена = КассоваяСмена; 
				КонецЦикла;
			Иначе
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		ОтчетОРозничныхВозвратах = ЗаполнитьОтчетОРозничныхВозвратах(ПараметрыПодключаемогоОборудования, ПараметрыКассовойСмены, ВыборкаПоСменамВозврат, ТаблицаАкцизныеМаркиВозврат, ТаблицаОплатВозврат, ЗагрузкаАкцизныхМарок);
		ОтчетОРозничныхПродажах = ЗаполнитьОтчетОРозничныхПродажах(ПараметрыПодключаемогоОборудования, ПараметрыКассовойСмены, ВыборкаПоСменам, ТаблицаАкцизныеМарки, ТаблицаОплат, ЗагрузкаАкцизныхМарок);
				
	КонецЦикла;
	//-- Локализация
КонецПроцедуры

Процедура ЗагрузитьДанныеОВскрытияхТарыИзККМ(Устройство, ДанныеОВскрытияхТары, Отказ, СообщениеОбОшибке) Экспорт

	//++ Локализация
	
	ПараметрыПодключаемогоОборудования = ПолучитьПараметрыПодключаемогоОборудования(Устройство);
	Если ПараметрыПодключаемогоОборудования = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
 	ТаблицаАкцизныхМарокДляПостановкиНаКран = ПустаяТаблицаШтрихкодовАкцизов();	
	Для Каждого ЧекККМ Из ДанныеОВскрытияхТары Цикл
		Если Не ЧекККМ.ПостановкаНаКран Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаТЧ Из ЧекККМ.Товары Цикл
			Для Каждого ШтрихкодАлкогольнойМарки Из СтрокаТЧ.ШтрихкодАлкогольнойПродукции Цикл
				НоваяСтрокаШтрихкод = ТаблицаАкцизныхМарокДляПостановкиНаКран.Добавить();
				// В поле УникальныйИдентификатор будем хранить НомерДокумента
				НоваяСтрокаШтрихкод.УникальныйИдентификатор = ЧекККМ.НомерДокумента;
				НоваяСтрокаШтрихкод.Код = СтрокаТЧ.Код;
				НоваяСтрокаШтрихкод.ШтрихкодАлкогольнойМарки = ШтрихкодАлкогольнойМарки;
				НоваяСтрокаШтрихкод.ДатаЧека = ЧекККМ.Дата;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаАкцизныхМарокДляПостановкиНаКран.Количество() Тогда
		ЗагрузкаАкцизныхМарок = Ложь;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = "";
		ПодключаемоеОборудованиеOfflineЛокализация.ДобавитьВТекстЗапросаИдентификациюАкцизныхМарок(Запрос, ТекстЗапроса, ЗагрузкаАкцизныхМарок, ПараметрыПодключаемогоОборудования, Ложь);

		Если ЗагрузкаАкцизныхМарок Тогда
			Запрос.Текст = ТекстЗапроса;
			Запрос.УстановитьПараметр("ПравилоОбмена",   ПараметрыПодключаемогоОборудования.ПравилоОбмена);
			Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаАкцизныхМарокДляПостановкиНаКран);
			АкцизныеМарки = Запрос.Выполнить().Выгрузить();
			
			АкцизныеМаркиНеНайдены = АкцизныеМарки.НайтиСтроки(Новый Структура("ЭтоРазливноеПиво,АкцизнаяМаркаНайдена", Истина, Ложь));
			Если АкцизныеМаркиНеНайдены.Количество() > 0 Тогда
				// Не удалось идентифицировать некоторые акцизные марки
				МассивСтрокТекстаОшибки = Новый Массив;
				ШаблонТекстаОшибки = НСтр("ru = 'При загрузке данных о вскрытии тары из %1 не удалось идентифицировать акцизные марки для постановки кеги на кран (%2 штук):'");			
				ТекстСообщения = СтрШаблон(ШаблонТекстаОшибки, ПараметрыПодключаемогоОборудования.КассаККМ, АкцизныеМаркиНеНайдены.Количество()); 
				МассивСтрокТекстаОшибки.Добавить(ТекстСообщения);
				Для Каждого АкцизнаяМарка Из АкцизныеМаркиНеНайдены Цикл
					Если ЗначениеЗаполнено(АкцизнаяМарка.Характеристика) Тогда
						ШаблонТекстаОшибки = НСтр("ru = '%1 (%2 %3)'");
						МассивСтрокТекстаОшибки.Добавить(СтрШаблон(ШаблонТекстаОшибки, 
											СокрП(АкцизнаяМарка.ШтрихкодАлкогольнойМарки), 
											АкцизнаяМарка.Номенклатура, 
											АкцизнаяМарка.Характеристика));
					Иначе
						ШаблонТекстаОшибки = НСтр("ru = '%1 (%2)'");
						МассивСтрокТекстаОшибки.Добавить(СтрШаблон(ШаблонТекстаОшибки, 
											СокрП(АкцизнаяМарка.ШтрихкодАлкогольнойМарки), 
											АкцизнаяМарка.Номенклатура));
					КонецЕсли;
				КонецЦикла;
				ТекстОшибки = СтрСоединить(МассивСтрокТекстаОшибки, Символы.ПС);
				РозничныеПродажи.ЗаписьВЖурналРегистрации(ТекстОшибки, "ЗагрузитьДанныеОВскрытияхТарыИзККМ");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения + Символы.ПС + НСтр("ru = 'Подробная информация в журнале регистрации.'"));
			КонецЕсли;

			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Организация", 	ПараметрыПодключаемогоОборудования.Организация);
			ДанныеЗаполнения.Вставить("Склад", 			ПараметрыПодключаемогоОборудования.Склад);
			ДанныеЗаполнения.Вставить("Ответственный", 	Пользователи.ТекущийПользователь());
			
			Для Каждого КегаРазливногоПива Из АкцизныеМарки.НайтиСтроки(Новый Структура("ЭтоРазливноеПиво,АкцизнаяМаркаНайдена", Истина, Истина)) Цикл
				Если КегаРазливногоПива.КегаНаОборудованииРозлива Тогда
					ШаблонТекстаОшибки = НСтр("ru = 'При загрузке данных о вскрытии тары из %1 (%2), кега %3 (%4) уже поставлена на кран.'");
					ТекстСообщения = СтрШаблон(ШаблонТекстаОшибки, 
								ПараметрыПодключаемогоОборудования.КассаККМ,
								СокрП(КегаРазливногоПива.УникальныйИдентификатор), 
								СокрП(КегаРазливногоПива.ШтрихкодАлкогольнойМарки), 
								КегаРазливногоПива.Номенклатура);
					РозничныеПродажи.ЗаписьВЖурналРегистрации(ТекстСообщения, "ЗагрузитьДанныеОВскрытияхТарыИзККМ",,УровеньЖурналаРегистрации.Предупреждение);
				Иначе

					ШаблонТекстаКомментария = НСтр("ru = 'ККМ офлайн, %1'"); 
					ДанныеЗаполнения.Вставить("Комментарий", 	СтрШаблон(ШаблонТекстаКомментария, СокрП(КегаРазливногоПива.УникальныйИдентификатор)));
					ДанныеЗаполнения.Вставить("Дата", 			КегаРазливногоПива.ДатаЧека);
					ДанныеЗаполнения.Вставить("ДатаПодключения",КегаРазливногоПива.ДатаЧека);
					ДанныеЗаполнения.Вставить("КодМаркировки",  КегаРазливногоПива.АкцизнаяМарка);
						
					ДокументПодключения = Документы.ПодключениеКегаКОборудованиюРозливаИСМП.СоздатьДокумент();
					ДокументПодключения.Заполнить(ДанныеЗаполнения);
					ЗаполнитьЗначенияСвойств(ДокументПодключения, ДанныеЗаполнения);
					
					ДокументПодключения.УстановитьСсылкуНового(Документы.ПодключениеКегаКОборудованиюРозливаИСМП.ПолучитьСсылку());
					Попытка
						ДокументПодключения.Записать(РежимЗаписиДокумента.Проведение);
					Исключение
						
						ШаблонТекстаОшибки = НСтр("ru = 'При загрузке данных о вскрытии тары из %1 (%2) не удалось провести документ %3 для акцизной марки %4:
						|%5'");
						
						ТекстОшибки =  СтрШаблон(ШаблонТекстаОшибки, 
													ПараметрыПодключаемогоОборудования.КассаККМ,
													СокрП(КегаРазливногоПива.УникальныйИдентификатор),
													Метаданные.Документы.ПодключениеКегаКОборудованиюРозливаИСМП.Синоним,
													СокрП(КегаРазливногоПива.АкцизнаяМарка),
													ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
						РозничныеПродажи.ЗаписьВЖурналРегистрации(ТекстОшибки, "ЗагрузитьДанныеОВскрытияхТарыИзККМ",, УровеньЖурналаРегистрации.Ошибка);
						ДокументПодключения.Записать(РежимЗаписиДокумента.Запись);
					КонецПопытки;
					
					ДанныеПодключения = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
					ЗаполнитьЗначенияСвойств(ДанныеПодключения, ДанныеЗаполнения);
					ДанныеПодключения.Статус   = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.ПодключеноВоВнешнейСистеме;
					ДанныеПодключения.Документ = ДокументПодключения.Ссылка;
					РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ЗаписатьВскрытиеПотребительскойУпаковки(ДанныеПодключения);
					
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			ШаблонТекстаОшибки = НСтр("ru = 'При загрузке данных о вскрытии тары из %1 не удалось найти организацию ЕГАИС по организации %2 и складу %3.'");			
			ТекстСообщения = СтрШаблон(ШаблонТекстаОшибки, ПараметрыПодключаемогоОборудования.КассаККМ, ПараметрыПодключаемогоОборудования.Организация, ПараметрыПодключаемогоОборудования.Склад); 
			РозничныеПродажи.ЗаписьВЖурналРегистрации(ТекстСообщения, "ЗагрузитьДанныеОВскрытияхТарыИзККМ");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЕсли;
	
	//-- Локализация
	
КонецПроцедуры

// Проверяет что переданное значение это тип офлайн оборудования ККМ.
//
// Параметры:
//  ТипПодключаемогоОборудования - ПеречислениеСсылка
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоТипОфлайнОборудованияККМ(ТипПодключаемогоОборудования) Экспорт
	
	Результат = Ложь;
	//++ Локализация
	Если ТипПодключаемогоОборудования = Перечисления.ТипыОфлайнОборудования.ККМ Тогда
		Результат = Истина;
	КонецЕсли;
	//-- Локализация
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ Локализация

Функция ПолучитьДанныеЧекаИзОтчетаОПродажахПоУникальномуИдентификатору(УникальныйИдентификатор, ОтчетОПродажах)
	ДанныеЧека = Неопределено;
	// Ищем УникальныйИдентификатор в текущей смене
	Для Каждого ЧекККМТекущейСмены Из ОтчетОПродажах.Чеки Цикл
		Если УникальныйИдентификатор = ЧекККМТекущейСмены.УникальныйИдентификатор Тогда
			ДанныеЧека = ЧекККМТекущейСмены;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ДанныеЧека;
КонецФункции

Функция ПолучитьДанныеЧекаПоУникальномуИдентификатору(УникальныйИдентификатор, ДанныеОПродажах)
	
	Результат = Новый Структура("Чек,НомерСмены,ИдентификаторДокументаОтчетОПродажах", Неопределено, Неопределено, Неопределено);
	
	Если ТипЗнч(ДанныеОПродажах) = Тип("Структура") Тогда
		Результат.Чек = ПолучитьДанныеЧекаИзОтчетаОПродажахПоУникальномуИдентификатору(УникальныйИдентификатор, ДанныеОПродажах);
		Результат.НомерСмены = ДанныеОПродажах.НомерСмены;
		Если ДанныеОПродажах.Свойство("ИдентификаторДокумента") Тогда
			Результат.ИдентификаторДокументаОтчетОПродажах = ДанныеОПродажах.ИдентификаторДокумента;
		ИначеЕсли ДанныеОПродажах.Свойство("УникальныйИдентификатор") Тогда
			Результат.ИдентификаторДокументаОтчетОПродажах = ДанныеОПродажах.УникальныйИдентификатор;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеОПродажах) = Тип("Массив") Тогда
		Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
			ДанныеЧека = ПолучитьДанныеЧекаИзОтчетаОПродажахПоУникальномуИдентификатору(УникальныйИдентификатор, ОтчетОПродажах);
			Если Не ДанныеЧека = Неопределено Тогда
				Результат.Чек = ДанныеЧека;
				Результат.НомерСмены = ОтчетОПродажах.НомерСмены;
				Если ОтчетОПродажах.Свойство("ИдентификаторДокумента") Тогда
					Результат.ИдентификаторДокументаОтчетОПродажах = ОтчетОПродажах.ИдентификаторДокумента;
				ИначеЕсли ОтчетОПродажах.Свойство("УникальныйИдентификатор") Тогда
					Результат.ИдентификаторДокументаОтчетОПродажах = ОтчетОПродажах.УникальныйИдентификатор;
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
 
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьЧекиНаВозвратВнеСмены(ДанныеОПродажах)
	
	Для Каждого ОтчетОПродажах Из ДанныеОПродажах Цикл
		ОтчетОПродажах.Вставить("СвязанныеДокументыДляЧековНаВозвратВнеСмены", Новый Соответствие);
		
		Для Каждого ЧекККМ Из ОтчетОПродажах.Чеки Цикл
			ЧекККМ.Вставить("ВозвратВнеСмены", Ложь);
			Если ЧекККМ.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств Тогда
				
				ДанныеЧекаОснования = Неопределено;
				Если ЗначениеЗаполнено(ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ) Тогда
					// Ищем УникальныйИдентификаторСвязанногоДокументаККМ в текущей смене (ОтчетОПродажах)
					ДанныеЧекаОснования = ПолучитьДанныеЧекаПоУникальномуИдентификатору(ЧекККМ.УникальныйИдентификаторСвязанногоДокументаККМ, ДанныеОПродажах);
					Если (ДанныеЧекаОснования.Чек = Неопределено) Тогда
						ЧекККМ.ВозвратВнеСмены = Истина;
					ИначеЕсли ДанныеЧекаОснования.НомерСмены <> ОтчетОПродажах.НомерСмены Тогда
						ЧекККМ.ВозвратВнеСмены = Истина;	
					КонецЕсли;
				Иначе
					ЧекККМ.ВозвратВнеСмены = Истина;
				КонецЕсли;
				
				Если ЧекККМ.ВозвратВнеСмены Тогда
					ОтчетОПродажах.СвязанныеДокументыДляЧековНаВозвратВнеСмены.Вставить(ЧекККМ.НомерЧека, ДанныеЧекаОснования);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеДляЗаполненияДокумента(ПодключаемоеОборудование, ТаблицаТоваров, ТаблицаШтрихкодовАкцизов, ЗагрузкаАкцизныхМарок)
	
	Запрос = Новый Запрос;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Код        КАК Код,
	|	Товары.Цена       КАК Цена,
	|	Товары.Количество КАК Количество,
	|	Товары.Скидка     КАК Скидка,
	|	Товары.Сумма      КАК Сумма,
	|	Товары.Весовой                            КАК Весовой,
	|	ВЫРАЗИТЬ(Товары.Штрихкод КАК Строка(200)) КАК Штрихкод,
	|	ВЫРАЗИТЬ(Товары.УникальныйИдентификатор КАК Строка(36)) КАК УникальныйИдентификатор,
	|	ВЫРАЗИТЬ(Товары.НомерСмены КАК Строка(50)) КАК НомерСмены,
	|	ВЫРАЗИТЬ(Товары.ДокументРеализации КАК Документ.ОтчетОРозничныхПродажах) КАК ДокументРеализации	
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТаблицаЗначений КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))             КАК Упаковка,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар, ЛОЖЬ) КАК ПодакцизныйТовар,
	|	Товары.УникальныйИдентификатор                                                                    КАК УникальныйИдентификатор,
	|	Товары.НомерСмены																				  КАК НомерСмены,
	|	Товары.Штрихкод																				  	  КАК Штрихкод,
	|	Товары.ДокументРеализации																		  КАК ДокументРеализации,
	|	Товары.ДокументРеализации.Организация.СтранаРегистрации											  КАК СтранаРегистрации,
	|	Товары.ДокументРеализации.Дата																	  КАК ДатаРеализации
	|ПОМЕСТИТЬ ВтТаблицаДанных
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО Товары.Код = КодыТоваровПодключаемогоОборудованияOffline.Код
	|			И КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|			И НЕ Товары.Весовой
	|ГДЕ
	|	Не Товары.Весовой
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))                 КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))             КАК Упаковка,
	|	
	|	Товары.Количество                                                                                 КАК КоличествоУпаковок,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) * Товары.Количество КАК Количество,
	|	Товары.Цена                                                                                       КАК Цена,
	|	Товары.Сумма                                                                                      КАК Сумма,
	|	Товары.Скидка                                                                                     КАК ПроцентРучнойСкидки,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар, ЛОЖЬ) КАК ПодакцизныйТовар,
	|	Товары.УникальныйИдентификатор                                                                    КАК УникальныйИдентификатор,
	|	Товары.НомерСмены																				  КАК НомерСмены,
	|	Товары.Штрихкод																				  	  КАК Штрихкод,
	|	Товары.ДокументРеализации																		  КАК ДокументРеализации,
	|	Товары.ДокументРеализации.Организация.СтранаРегистрации											  КАК СтранаРегистрации,
	|	Товары.ДокументРеализации.Дата																	  КАК ДатаРеализации
	|ИЗ
	|	Товары КАК Товары
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	|		ПО ПОДСТРОКА(Товары.Штрихкод, 3, 5) = ПОДСТРОКА(Штрихкоды.Штрихкод, 3, 5)
	|			И Штрихкоды.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\""
	|			И Товары.Весовой
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|			И Штрихкоды.Номенклатура   = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
	|			И Штрихкоды.Характеристика = КодыТоваровПодключаемогоОборудованияOffline.Характеристика
	|			И Штрихкоды.Упаковка       = КодыТоваровПодключаемогоОборудованияOffline.Упаковка
	|			И Товары.Весовой
	|
	|ГДЕ
	|	Товары.Весовой
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаДанных.СтранаРегистрации КАК Страна,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(СтавкиНДСНоменклатуры.Период) КАК Период
	|ПОМЕСТИТЬ ТаблицаПериодовСтавокНДСНоменклатуры
	|ИЗ
	|	ВтТаблицаДанных КАК ТаблицаДанных
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры КАК СтавкиНДСНоменклатуры
	|	ПО ТаблицаДанных.СтранаРегистрации = СтавкиНДСНоменклатуры.Страна
	|		И ТаблицаДанных.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		И ТаблицаДанных.ДатаРеализации >= СтавкиНДСНоменклатуры.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.СтранаРегистрации,
	|	ТаблицаДанных.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.СтранаРегистрации КАК Страна,
	|	МАКСИМУМ(ОсновныеСтавкиНДС.Период) КАК Период
	|ПОМЕСТИТЬ ТаблицаПериодовОсновныхСтавокНДС
	|ИЗ
	|	ВтТаблицаДанных КАК ТаблицаДанных
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС КАК ОсновныеСтавкиНДС
	|	ПО ТаблицаДанных.СтранаРегистрации = ОсновныеСтавкиНДС.Страна
	|		И ТаблицаДанных.ДатаРеализации >= ОсновныеСтавкиНДС.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанных.СтранаРегистрации
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	ТаблицаДанных.Упаковка КАК Упаковка,
	|	
	|	ТаблицаДанных.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ТаблицаДанных.Количество КАК Количество,
	|	ТаблицаДанных.Цена КАК Цена,
	|	ТаблицаДанных.Сумма КАК Сумма,
	|	ТаблицаДанных.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	ТаблицаДанных.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	ТаблицаДанных.УникальныйИдентификатор КАК УникальныйИдентификатор,
	|	ТаблицаДанных.НомерСмены КАК НомерСмены,
	|	ТаблицаДанных.Штрихкод КАК Штрихкод,
	|	ТаблицаДанных.ДокументРеализации КАК ДокументРеализации
	|ИЗ
	|	ВтТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодовСтавокНДСНоменклатуры КАК ТаблицаПериодовСтавокНДСНоменклатуры
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры КАК СтавкиНДСНоменклатуры
	|			ПО ТаблицаПериодовСтавокНДСНоменклатуры.Страна = СтавкиНДСНоменклатуры.Страна
	|				И ТаблицаПериодовСтавокНДСНоменклатуры.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|				И ТаблицаПериодовСтавокНДСНоменклатуры.Период = СтавкиНДСНоменклатуры.Период
	|		ПО ТаблицаДанных.СтранаРегистрации = ТаблицаПериодовСтавокНДСНоменклатуры.Страна
	|			И ТаблицаДанных.Номенклатура = ТаблицаПериодовСтавокНДСНоменклатуры.Номенклатура
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодовОсновныхСтавокНДС КАК ТаблицаПериодовОсновныхСтавокНДС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС КАК ОсновныеСтавкиНДС
	|			ПО ТаблицаПериодовОсновныхСтавокНДС.Страна = ОсновныеСтавкиНДС.Страна
	|				И ТаблицаПериодовОсновныхСтавокНДС.Период = ОсновныеСтавкиНДС.Период
	|		ПО ТаблицаДанных.СтранаРегистрации = ТаблицаПериодовОсновныхСтавокНДС.Страна
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка,
	|	Цена,
	|	ПроцентРучнойСкидки
	|
	|ИТОГИ ПО
	|	ТаблицаДанных.НомерСмены, ТаблицаДанных.УникальныйИдентификатор
	|";
	
	ПодключаемоеОборудованиеOfflineЛокализация.ДобавитьВТекстЗапросаИдентификациюАкцизныхМарок(Запрос, ТекстЗапроса, ЗагрузкаАкцизныхМарок, ПодключаемоеОборудование);

	Запрос.Текст = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
		"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Запрос.УстановитьПараметр("ПравилоОбмена",   ПодключаемоеОборудование.ПравилоОбмена);
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаШтрихкодов", ТаблицаШтрихкодовАкцизов);
	Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода("_", Истина));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Возврат РезультатЗапроса;
	
КонецФункции

Функция ЗаполнитьОтчетОРозничныхПродажах(ПараметрыПодключаемогоОборудования, ПараметрыКассовойСмены, ВыборкаПоСменам, ТаблицаАкцизныеМарки, ТаблицаОплат, ЗагрузкаАкцизныхМарок)
	
	Если ЗначениеЗаполнено(ПараметрыКассовойСмены.УникальныйИдентификатор) Тогда
		
		УИ = Новый УникальныйИдентификатор(ПараметрыКассовойСмены.УникальныйИдентификатор);
		
		ОтчетСсылка = Документы.ОтчетОРозничныхПродажах.ПолучитьСсылку(УИ);
		
		ДокументОбъект = ОтчетСсылка.ПолучитьОбъект();
	
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(ОтчетСсылка);
		Иначе
			ДокументОбъект.Товары.Очистить();
			ДокументОбъект.ОплатаПлатежнымиКартами.Очистить();
			ДокументОбъект.ВидыЗапасов.Очистить();
			ДокументОбъект.Серии.Очистить();
			ДокументОбъект.ПодарочныеСертификаты.Очистить();
			ДокументОбъект.НачислениеБонусныхБаллов.Очистить();
			ДокументОбъект.ОплатаБонуснымиБаллами.Очистить();
			ДокументОбъект.АкцизныеМарки.Очистить();
		КонецЕсли;
				
	Иначе
		
		ДокументОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПрограммноеЗаполнение", Истина);
	
	Если ЗначениеЗаполнено(ПараметрыКассовойСмены.ДатаЗакрытияСмены) Тогда
		ДокументОбъект.Дата = ПараметрыКассовойСмены.ДатаЗакрытияСмены;
	Иначе
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;	
	
	ДокументОбъект.Валюта             = ПараметрыПодключаемогоОборудования.Валюта;
	ДокументОбъект.ВидЦены            = ПараметрыПодключаемогоОборудования.ВидЦены;
	ДокументОбъект.КассаККМ           = ПараметрыПодключаемогоОборудования.КассаККМ;
	ДокументОбъект.Комментарий        = НСтр("ru = 'Загружено из ККМ Offline:'") + " " + ПараметрыПодключаемогоОборудования.Устройство;
	ДокументОбъект.НалогообложениеНДС = УчетНДСУП.ПараметрыУчетаПоОрганизации(ПараметрыПодключаемогоОборудования.Организация, ТекущаяДатаСеанса(), ПараметрыПодключаемогоОборудования.Склад).НалогообложениеНДСРозничнойПродажи;
	ДокументОбъект.Организация        = ПараметрыПодключаемогоОборудования.Организация;
	ДокументОбъект.Ответственный      = Пользователи.ТекущийПользователь();
	ДокументОбъект.Подразделение      = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	ДокументОбъект.Склад              = ПараметрыПодключаемогоОборудования.Склад;
	ДокументОбъект.ЦенаВключаетНДС    = ПараметрыПодключаемогоОборудования.ЦенаВключаетНДС;
	
	ДокументОбъект.КассоваяСмена		 = ПараметрыКассовойСмены.КассоваяСмена;
	
	СтавкаНДСПоНалогообложению = УчетНДСУП.СтавкаНДСПоТипуНалогообложения(
			ДокументОбъект.НалогообложениеНДС, 
			ДокументОбъект.Организация, 
			ДокументОбъект.Дата);
	
	ВыборкаПоСменам.Сбросить();
	НомерКассовойСменыДляПоиска = Лев(ПараметрыКассовойСмены.НомерСмены + "                                                   ", 50);
	УникальныйИдентификаторДляПоиска = Лев(ПараметрыКассовойСмены.УникальныйИдентификатор + "                                    ", 36);
	Если ВыборкаПоСменам.НайтиСледующий(Новый Структура("НомерСмены", НомерКассовойСменыДляПоиска)) Тогда
		ВыборкаПоИдентификаторам = ВыборкаПоСменам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаПоИдентификаторам.НайтиСледующий(Новый Структура("НомерСмены,УникальныйИдентификатор", НомерКассовойСменыДляПоиска, УникальныйИдентификаторДляПоиска)) Тогда
			
			// Заполнение товаров
			ТаблицаНаборов = Новый ТаблицаЗначений;
			ТаблицаНаборов.Колонки.Добавить("Номенклатура");
			ТаблицаНаборов.Колонки.Добавить("Характеристика");
			ТаблицаНаборов.Колонки.Добавить("Количество");
			ТаблицаНаборов.Колонки.Добавить("Цена");
			ТаблицаНаборов.Колонки.Добавить("ПроцентРучнойСкидки");
			ТаблицаНаборов.Колонки.Добавить("ПодакцизныйТовар");
			ТаблицаНаборов.Колонки.Добавить("СтавкаНДС");
			
			ВыборкаПоТоварам = ВыборкаПоИдентификаторам.Выбрать();
			Пока ВыборкаПоТоварам.Следующий() Цикл
				
				Если ВыборкаПоТоварам.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
					
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					НоваяСтрока.Номенклатура        = ВыборкаПоТоварам.Номенклатура;
					НоваяСтрока.Характеристика      = ВыборкаПоТоварам.Характеристика;
					НоваяСтрока.Упаковка            = ВыборкаПоТоварам.Упаковка;
					НоваяСтрока.Количество          = ВыборкаПоТоварам.Количество;
					НоваяСтрока.КоличествоУпаковок  = ВыборкаПоТоварам.КоличествоУпаковок;
					НоваяСтрока.Сумма               = ВыборкаПоТоварам.Сумма;
					НоваяСтрока.Цена                = ВыборкаПоТоварам.Сумма/ВыборкаПоТоварам.КоличествоУпаковок;
					
					Если ЗначениеЗаполнено(ВыборкаПоТоварам.Цена) Тогда
						НоваяСтрока.Цена                = ВыборкаПоТоварам.Цена;
						НоваяСтрока.ПроцентРучнойСкидки = Окр((ВыборкаПоТоварам.Цена - ВыборкаПоТоварам.Сумма/ВыборкаПоТоварам.КоличествоУпаковок) / ВыборкаПоТоварам.Цена * 100, 2);
					Иначе
						НоваяСтрока.Цена                = ВыборкаПоТоварам.Сумма/ВыборкаПоТоварам.КоличествоУпаковок;
						НоваяСтрока.ПроцентРучнойСкидки = ВыборкаПоТоварам.ПроцентРучнойСкидки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
						
						НоваяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(
							НоваяСтрока.Номенклатура,
							ДокументОбъект.НалогообложениеНДС,
							ДокументОбъект.Организация,
							ДокументОбъект.Дата);

					КонецЕсли;
					
					НоваяСтрока.СуммаРучнойСкидки   = НоваяСтрока.КоличествоУпаковок * НоваяСтрока.Цена - ВыборкаПоТоварам.Сумма;
					НоваяСтрока.СуммаНДС            = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, ПараметрыПодключаемогоОборудования.ЦенаВключаетНДС);
					НоваяСтрока.Партнер             = Справочники.Партнеры.РозничныйПокупатель;
					
				Иначе
					
					НоваяСтрока = ТаблицаНаборов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
					
				КонецЕсли;
				
			КонецЦикла;	
			
			// Дозаполняем Товары наборами
			Если ТаблицаНаборов.Количество() Тогда
				ТаблицаНаборов.Свернуть("Номенклатура,Характеристика,ПроцентРучнойСкидки,СтавкаНДС,Цена,ПодакцизныйТовар","Количество");
				
				Для Каждого СтрокаНабора Из ТаблицаНаборов Цикл

					МассивСтрокНабора = Новый Массив;
					
					ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
					ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ВыборкаПоТоварам);
					ПараметрыКомплектующих.НоменклатураНабора   = СтрокаНабора.Номенклатура;
					ПараметрыКомплектующих.ХарактеристикаНабора = СтрокаНабора.Характеристика;
					ПараметрыКомплектующих.Вставить("КоличествоУпаковок",    СтрокаНабора.Количество);
					ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("Дата",    ДокументОбъект.Дата);
					ДополнительныеПараметры.Вставить("Валюта",  ДокументОбъект.Валюта);
					ДополнительныеПараметры.Вставить("ВидЦены", ДокументОбъект.ВидЦены);
					ДополнительныеПараметры.Вставить("Цена",    СтрокаНабора.Цена);
					ДополнительныеПараметры.Вставить("Организация", ДокументОбъект.Организация);
					
					Данные = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);				
					Для Каждого СтрокаТЧ Из Данные Цикл
						
						НоваяСтрока = ДокументОбъект.Товары.Добавить();
						НоваяСтрока.НоменклатураНабора   = СтрокаНабора.Номенклатура;
						НоваяСтрока.ХарактеристикаНабора = СтрокаНабора.Характеристика;
						НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
						НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
						НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
						НоваяСтрока.КоличествоУпаковок   = СтрокаТЧ.КоличествоУпаковок;
						НоваяСтрока.Количество           = СтрокаТЧ.Количество * СтрокаТЧ.КоэффициентУпаковки;
						НоваяСтрока.ПроцентРучнойСкидки  = СтрокаНабора.ПроцентРучнойСкидки;
                        НоваяСтрока.Цена				 = СтрокаТЧ.Цена;
						НоваяСтрока.Партнер = Справочники.Партнеры.РозничныйПокупатель;
						
						Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
							НоваяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(
								НоваяСтрока.Номенклатура,
								ДокументОбъект.НалогообложениеНДС,
								ДокументОбъект.Организация,
								ДокументОбъект.Дата);
						КонецЕсли;
							
						МассивСтрокНабора.Добавить(НоваяСтрока);
					КонецЦикла;
						
					Отбор = Новый Структура;
					Отбор.Вставить("НоменклатураНабора", СтрокаНабора.Номенклатура);
					Отбор.Вставить("ХарактеристикаНабора", СтрокаНабора.Характеристика);
					
					ПараметрыЗаполнения = Новый Структура;
					ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.Дата);
					ПараметрыЗаполнения.Вставить("Валюта", ДокументОбъект.Валюта);
					ПараметрыЗаполнения.Вставить("ВидЦены", ДокументОбъект.ВидЦены);
					ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена");
					
					КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(
						ДокументОбъект.Товары.Выгрузить(Отбор),
						ПараметрыЗаполнения);
					
					ОбщаяСтоимость = 0;
					СуммаКРаспределению = СтрокаНабора.Цена * СтрокаНабора.Количество;
					
					СлужебнаяТЧ = Новый ТаблицаЗначений;
					СлужебнаяТЧ.Колонки.Добавить("СтрокаТЧ");
					СлужебнаяТЧ.Колонки.Добавить("Количество");
					СлужебнаяТЧ.Колонки.Добавить("Стоимость");
					
					Для Каждого ТекущаяСтрока Из МассивСтрокНабора Цикл
						
						Количество = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "КоличествоУпаковок"), ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
						КоэффициентыРаспределения = КоэффициентыПропорциональностиРасчетаЦенНаборов.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки");
						Если КоэффициентыРаспределения = Неопределено Тогда
							Стоимость = ТекущаяСтрока.Цена * Количество;
						Иначе
							Стоимость = КоэффициентыРаспределения.Цена;
						КонецЕсли;
						
						НоваяСтрока = СлужебнаяТЧ.Добавить();
						НоваяСтрока.СтрокаТЧ = ТекущаяСтрока;
						НоваяСтрока.Стоимость = Стоимость;
						НоваяСтрока.Количество = Количество;
						
						ОбщаяСтоимость = ОбщаяСтоимость + Стоимость;
					КонецЦикла;
					СлужебнаяТЧ.Сортировать("Количество УБЫВ");
					
					НомерСтроки = 0;
					КоличествоСтрок = СлужебнаяТЧ.Количество();
					Для Каждого СтрокаСлужебнойТЧ Из СлужебнаяТЧ Цикл
						
						НомерСтроки = НомерСтроки + 1;
						
						ТекущаяСтрока = СтрокаСлужебнойТЧ.СтрокаТЧ;
						Стоимость = СтрокаСлужебнойТЧ.Стоимость;
						Количество = СтрокаСлужебнойТЧ.Количество;
						
						Если Количество <> 0 И ОбщаяСтоимость <> 0 Тогда
							ТекущаяСтрока.Цена = Окр(((Стоимость / ОбщаяСтоимость) * СуммаКРаспределению) / Количество, 2);
						Иначе
							ТекущаяСтрока.Цена = 0;
						КонецЕсли;
						
						ОбщаяСтоимость = ОбщаяСтоимость - Стоимость;
						СуммаКРаспределению = СуммаКРаспределению - ТекущаяСтрока.Цена * Количество;
						
						Погрешность = 0;
						Если НомерСтроки = КоличествоСтрок Тогда
							Погрешность = СуммаКРаспределению;
						КонецЕсли;
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
						
						КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					КонецЦикла;
						
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение акцизных марок
	Если Не ТаблицаАкцизныеМарки = Неопределено Тогда
		ПодключаемоеОборудованиеOfflineЛокализация.ЗаполнитьТабличнуюЧастьАкцизныеМарки(ПараметрыКассовойСмены, ДокументОбъект, ТаблицаАкцизныеМарки, ЗагрузкаАкцизныхМарок);
	КонецЕсли;
	
	// Заполнение оплат.
	ЭквайринговыйТерминал = Неопределено;
	ДокументОбъект.ОплатаПлатежнымиКартами.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Если ЭквайринговыйТерминал = Неопределено Тогда
			РабочееМестоКассира = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();		
			ЭквайринговыйТерминал = ПолучитьЭквайринговыйТерминал(РабочееМестоКассира, ПараметрыПодключаемогоОборудования.Организация);
		КонецЕсли;
		
		ОтборПоТаблицеОплат = Новый Структура("НомерСмены,УникальныйИдентификатор", СокрЛП(ПараметрыКассовойСмены.НомерСмены), СокрЛП(ПараметрыКассовойСмены.УникальныйИдентификатор));
		Для каждого Оплата Из ТаблицаОплат.НайтиСтроки(ОтборПоТаблицеОплат) Цикл
			Если Оплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				НоваяСтрокаОплаты = ДокументОбъект.ОплатаПлатежнымиКартами.Добавить();
				НоваяСтрокаОплаты.ИдентификаторСтроки   = Новый УникальныйИдентификатор;
				НоваяСтрокаОплаты.Сумма                 = Оплата.Сумма;
				НоваяСтрокаОплаты.НомерПлатежнойКарты   = "0000000000000000";
				НоваяСтрокаОплаты.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				НоваяСтрокаОплаты.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.ПлатежнаяКарта;				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	НачатьТранзакцию();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		УзелОбъект = ПараметрыПодключаемогоОборудования.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
		УзелОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПодключаемоеОборудованиеOfflineЛокализация.ЗаполнитьСтатусыПоТабличнойЧастиАкцизныеМарки(ДокументОбъект, ЗагрузкаАкцизныхМарок);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СтандартнаяОбработка = Истина;
		ПредставлениеОшибки        = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодключаемоеОборудованиеOfflineЛокализация.ЗаписатьОшибкуВЖурналРегистрации(КраткоеПредставлениеОшибки, ПредставлениеОшибки, СтандартнаяОбработка);
		Если СтандартнаяОбработка Тогда
			ТекстОшибки = НСтр("ru = 'При завершении обмена с оборудованием произошла ошибка:
				|%1'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с offline оборудованием'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				УзелОбъект.Метаданные(),
				ПараметрыПодключаемогоОборудования.УзелИнформационнойБазы,
				ПредставлениеОшибки);

		КонецЕсли;

	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
КонецФункции

Функция ЗаполнитьОтчетОРозничныхВозвратах(ПараметрыПодключаемогоОборудования, ПараметрыКассовойСмены, ВыборкаПоСменам, ТаблицаАкцизныеМарки, ТаблицаОплат, ЗагрузкаАкцизныхМарок)
	
	Если ЗначениеЗаполнено(ПараметрыКассовойСмены.УникальныйИдентификатор) Тогда
		
		УИ = Новый УникальныйИдентификатор(ПараметрыКассовойСмены.УникальныйИдентификатор);
		
		ОтчетСсылка = Документы.ОтчетОРозничныхВозвратах.ПолучитьСсылку(УИ);
		
		ДокументОбъект = ОтчетСсылка.ПолучитьОбъект();
	
		Если ДокументОбъект = Неопределено Тогда
			ДокументОбъект = Документы.ОтчетОРозничныхВозвратах.СоздатьДокумент();
			ДокументОбъект.УстановитьСсылкуНового(ОтчетСсылка);
		Иначе
			ДокументОбъект.Товары.Очистить();
			ДокументОбъект.ОплатаПлатежнымиКартами.Очистить();
			ДокументОбъект.ВидыЗапасов.Очистить();
			ДокументОбъект.Серии.Очистить();
			ДокументОбъект.НачислениеБонусныхБаллов.Очистить();
			ДокументОбъект.ОплатаБонуснымиБаллами.Очистить();
			ДокументОбъект.АкцизныеМарки.Очистить();
		КонецЕсли;
		
	Иначе
		
		ДокументОбъект = Документы.ОтчетОРозничныхВозвратах.СоздатьДокумент();
		
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПрограммноеЗаполнение", Истина);
	
	Если ЗначениеЗаполнено(ПараметрыКассовойСмены.ДатаЗакрытияСмены) Тогда
		ДокументОбъект.Дата = ПараметрыКассовойСмены.ДатаЗакрытияСмены;
	Иначе
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДокументОбъект.Валюта             = ПараметрыПодключаемогоОборудования.Валюта;
	ДокументОбъект.ВидЦены            = ПараметрыПодключаемогоОборудования.ВидЦены;
	ДокументОбъект.КассаККМ           = ПараметрыПодключаемогоОборудования.КассаККМ;
	ДокументОбъект.Комментарий        = НСтр("ru = 'Загружено из ККМ Offline:'") + " " + ПараметрыПодключаемогоОборудования.Устройство;
	ДокументОбъект.НалогообложениеНДС = УчетНДСУП.ПараметрыУчетаПоОрганизации(ПараметрыПодключаемогоОборудования.Организация, ТекущаяДатаСеанса(), ПараметрыПодключаемогоОборудования.Склад).НалогообложениеНДСРозничнойПродажи;
	ДокументОбъект.Организация        = ПараметрыПодключаемогоОборудования.Организация;
	ДокументОбъект.Ответственный      = Пользователи.ТекущийПользователь();
	ДокументОбъект.Подразделение      = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Пользователи.ТекущийПользователь());
	ДокументОбъект.Склад              = ПараметрыПодключаемогоОборудования.Склад;
	ДокументОбъект.ЦенаВключаетНДС    = ПараметрыПодключаемогоОборудования.ЦенаВключаетНДС;
	
	ДокументОбъект.КассоваяСмена	  = ПараметрыКассовойСмены.КассоваяСмена;
	
	СтавкаНДСПоНалогообложению = УчетНДСУП.СтавкаНДСПоТипуНалогообложения(ДокументОбъект.НалогообложениеНДС, ДокументОбъект.Организация, ДокументОбъект.Дата);
	
	ВыборкаПоСменам.Сбросить();
	НомерКассовойСменыДляПоиска = Лев(ПараметрыКассовойСмены.НомерСмены + "                                                   ", 50);
	УникальныйИдентификаторДляПоиска = Лев(ПараметрыКассовойСмены.УникальныйИдентификатор + "                                    ", 36);	
	Если ВыборкаПоСменам.НайтиСледующий(Новый Структура("НомерСмены", НомерКассовойСменыДляПоиска)) Тогда
		ВыборкаПоИдентификаторам = ВыборкаПоСменам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ВыборкаПоИдентификаторам.НайтиСледующий(Новый Структура("НомерСмены,УникальныйИдентификатор", НомерКассовойСменыДляПоиска, УникальныйИдентификаторДляПоиска)) Тогда
			
			// Заполнение товаров
			ТаблицаНаборов = Новый ТаблицаЗначений;
			ТаблицаНаборов.Колонки.Добавить("Номенклатура");
			ТаблицаНаборов.Колонки.Добавить("Характеристика");
			ТаблицаНаборов.Колонки.Добавить("Количество");
			ТаблицаНаборов.Колонки.Добавить("Цена");
			ТаблицаНаборов.Колонки.Добавить("ПроцентРучнойСкидки");
			ТаблицаНаборов.Колонки.Добавить("ПодакцизныйТовар");
			ТаблицаНаборов.Колонки.Добавить("СтавкаНДС");
			ТаблицаНаборов.Колонки.Добавить("ДокументРеализации");			
			
			ВыборкаПоТоварам = ВыборкаПоИдентификаторам.Выбрать();
			Пока ВыборкаПоТоварам.Следующий() Цикл
				
				Если ВыборкаПоТоварам.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Набор Тогда
				
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					НоваяСтрока.Номенклатура        = ВыборкаПоТоварам.Номенклатура;
					НоваяСтрока.Характеристика      = ВыборкаПоТоварам.Характеристика;
					НоваяСтрока.Упаковка            = ВыборкаПоТоварам.Упаковка;
					НоваяСтрока.Количество          = ВыборкаПоТоварам.Количество;
					НоваяСтрока.КоличествоУпаковок  = ВыборкаПоТоварам.КоличествоУпаковок;
					НоваяСтрока.Сумма               = ВыборкаПоТоварам.Сумма;
					НоваяСтрока.Цена                = ВыборкаПоТоварам.Сумма/ВыборкаПоТоварам.КоличествоУпаковок;
					НоваяСтрока.ДокументРеализации	= ВыборкаПоТоварам.ДокументРеализации;
					
					Если ЗначениеЗаполнено(НоваяСтрока.ДокументРеализации) Тогда
						НоваяСтрока.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПродажи;
					Иначе
						НоваяСтрока.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимостиВозврата.ИзТекущегоДокумента;						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВыборкаПоТоварам.Цена) Тогда
						НоваяСтрока.Цена                = ВыборкаПоТоварам.Цена;
						НоваяСтрока.ПроцентРучнойСкидки = Окр((ВыборкаПоТоварам.Цена - ВыборкаПоТоварам.Сумма/ВыборкаПоТоварам.КоличествоУпаковок) / ВыборкаПоТоварам.Цена * 100, 2);
					Иначе
						НоваяСтрока.Цена                = ВыборкаПоТоварам.Сумма/ВыборкаПоТоварам.КоличествоУпаковок;
						НоваяСтрока.ПроцентРучнойСкидки = ВыборкаПоТоварам.ПроцентРучнойСкидки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
						
						НоваяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(
							НоваяСтрока.Номенклатура,
							ДокументОбъект.НалогообложениеНДС,
							ДокументОбъект.Организация,
							ДокументОбъект.Дата);

					КонецЕсли;
					
					НоваяСтрока.СуммаРучнойСкидки   = НоваяСтрока.КоличествоУпаковок * НоваяСтрока.Цена - ВыборкаПоТоварам.Сумма;
					НоваяСтрока.СуммаНДС            = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(НоваяСтрока.Сумма, НоваяСтрока.СтавкаНДС, ПараметрыПодключаемогоОборудования.ЦенаВключаетНДС);
					НоваяСтрока.Партнер             = Справочники.Партнеры.РозничныйПокупатель;
					
				Иначе
					
					НоваяСтрока = ТаблицаНаборов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
					
				КонецЕсли;	
			КонецЦикла;
			
			// Дозаполняем Товары наборами
			Если ТаблицаНаборов.Количество() Тогда
				ТаблицаНаборов.Свернуть("Номенклатура,Характеристика,ДокументРеализации,ПроцентРучнойСкидки,СтавкаНДС,Цена,ПодакцизныйТовар","Количество");
				
				Для Каждого СтрокаНабора Из ТаблицаНаборов Цикл
					
					МассивСтрокНабора = Новый Массив;
					
					ПараметрыКомплектующих = ПодборТоваровКлиентСервер.ПараметрыТовара();
					ЗаполнитьЗначенияСвойств(ПараметрыКомплектующих, ВыборкаПоТоварам);
					ПараметрыКомплектующих.НоменклатураНабора   = СтрокаНабора.Номенклатура;
					ПараметрыКомплектующих.ХарактеристикаНабора = СтрокаНабора.Характеристика;
					ПараметрыКомплектующих.Вставить("КоличествоУпаковок",    СтрокаНабора.Количество);
					ПараметрыКомплектующих.Вставить("ВариантКомплектацииНоменклатуры", Неопределено);
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("Дата",    ДокументОбъект.Дата);
					ДополнительныеПараметры.Вставить("Валюта",  ДокументОбъект.Валюта);
					ДополнительныеПараметры.Вставить("ВидЦены", ДокументОбъект.ВидЦены);
					ДополнительныеПараметры.Вставить("Цена",    СтрокаНабора.Цена);
					ДополнительныеПараметры.Вставить("Организация", ДокументОбъект.Организация);
					
					Данные = НаборыВызовСервера.Комплектующие(ПараметрыКомплектующих, ДополнительныеПараметры);				
					Для Каждого СтрокаТЧ Из Данные Цикл
						
						НоваяСтрока = ДокументОбъект.Товары.Добавить();
						НоваяСтрока.НоменклатураНабора   = СтрокаНабора.Номенклатура;
						НоваяСтрока.ХарактеристикаНабора = СтрокаНабора.Характеристика;
						НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
						НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
						НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
						НоваяСтрока.КоличествоУпаковок   = СтрокаТЧ.КоличествоУпаковок;
						НоваяСтрока.Количество           = СтрокаТЧ.Количество * СтрокаТЧ.КоэффициентУпаковки;
						НоваяСтрока.ПроцентРучнойСкидки  = СтрокаНабора.ПроцентРучнойСкидки;
                        НоваяСтрока.Цена				 = СтрокаТЧ.Цена;
						НоваяСтрока.Партнер 			 = Справочники.Партнеры.РозничныйПокупатель;
						НоваяСтрока.ДокументРеализации	 = СтрокаНабора.ДокументРеализации;
						
						Если ЗначениеЗаполнено(НоваяСтрока.ДокументРеализации) Тогда
							НоваяСтрока.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПродажи;
						Иначе
							НоваяСтрока.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимостиВозврата.ИзТекущегоДокумента;						
						КонецЕсли;
						
						Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
							НоваяСтрока.СтавкаНДС = УчетНДСУП.СтавкаНДСПоНоменклатуреИНалогообложению(
								НоваяСтрока.Номенклатура,
								ДокументОбъект.НалогообложениеНДС,
								ДокументОбъект.Организация,
								ДокументОбъект.Дата);
						КонецЕсли;
							
						МассивСтрокНабора.Добавить(НоваяСтрока);
					КонецЦикла;
					
					Отбор = Новый Структура;
					Отбор.Вставить("НоменклатураНабора", СтрокаНабора.Номенклатура);
					Отбор.Вставить("ХарактеристикаНабора", СтрокаНабора.Характеристика);
					Отбор.Вставить("ДокументРеализации", СтрокаНабора.ДокументРеализации);
					
					ПараметрыЗаполнения = Новый Структура;
					ПараметрыЗаполнения.Вставить("Дата", ДокументОбъект.Дата);
					ПараметрыЗаполнения.Вставить("Валюта", ДокументОбъект.Валюта);
					ПараметрыЗаполнения.Вставить("ВидЦены", ДокументОбъект.ВидЦены);
					ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена");
					
					КоэффициентыПропорциональностиРасчетаЦенНаборов = НаборыСервер.КоэффициентыРаспределения(
						ДокументОбъект.Товары.Выгрузить(Отбор),
						ПараметрыЗаполнения);
					
					ОбщаяСтоимость = 0;
					СуммаКРаспределению = СтрокаНабора.Цена * СтрокаНабора.Количество;
					
					СлужебнаяТЧ = Новый ТаблицаЗначений;
					СлужебнаяТЧ.Колонки.Добавить("СтрокаТЧ");
					СлужебнаяТЧ.Колонки.Добавить("Количество");
					СлужебнаяТЧ.Колонки.Добавить("Стоимость");
					Для Каждого ТекущаяСтрока Из МассивСтрокНабора Цикл
						
						Количество = ?(ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ТекущаяСтрока, "КоличествоУпаковок"), ТекущаяСтрока.КоличествоУпаковок, ТекущаяСтрока.Количество);
						КоэффициентыРаспределения = КоэффициентыПропорциональностиРасчетаЦенНаборов.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки");
						Если КоэффициентыРаспределения = Неопределено Тогда
							Стоимость = ТекущаяСтрока.Цена * Количество;
						Иначе
							Стоимость = КоэффициентыРаспределения.Цена;
						КонецЕсли;
						
						НоваяСтрока = СлужебнаяТЧ.Добавить();
						НоваяСтрока.СтрокаТЧ = ТекущаяСтрока;
						НоваяСтрока.Стоимость = Стоимость;
						НоваяСтрока.Количество = Количество;
						
						ОбщаяСтоимость = ОбщаяСтоимость + Стоимость;
						
					КонецЦикла;
					СлужебнаяТЧ.Сортировать("Количество УБЫВ");
					
					НомерСтроки = 0;
					КоличествоСтрок = СлужебнаяТЧ.Количество();
					Для Каждого СтрокаСлужебнойТЧ Из СлужебнаяТЧ Цикл
						
						НомерСтроки = НомерСтроки + 1;
						
						ТекущаяСтрока = СтрокаСлужебнойТЧ.СтрокаТЧ;
						Стоимость = СтрокаСлужебнойТЧ.Стоимость;
						Количество = СтрокаСлужебнойТЧ.Количество;
						
						Если Количество <> 0 И ОбщаяСтоимость <> 0 Тогда
							ТекущаяСтрока.Цена = Окр(((Стоимость / ОбщаяСтоимость) * СуммаКРаспределению) / Количество, 2);
						Иначе
							ТекущаяСтрока.Цена = 0;
						КонецЕсли;
						
						ОбщаяСтоимость = ОбщаяСтоимость - Стоимость;
						СуммаКРаспределению = СуммаКРаспределению - ТекущаяСтрока.Цена * Количество;
						
						Погрешность = 0;
						Если НомерСтроки = КоличествоСтрок Тогда
							Погрешность = СуммаКРаспределению;
						КонецЕсли;
						
						СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
						СтруктураДействий.Вставить("ПересчитатьСумму");
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
						СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомПогрешностиОкругления", Погрешность);
						
						КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
					
					КонецЦикла;
					
				КонецЦикла;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение акцизных марок
	Если Не ТаблицаАкцизныеМарки = Неопределено Тогда
		ПодключаемоеОборудованиеOfflineЛокализация.ЗаполнитьТабличнуюЧастьАкцизныеМарки(ПараметрыКассовойСмены, ДокументОбъект, ТаблицаАкцизныеМарки, ЗагрузкаАкцизныхМарок);
	КонецЕсли;
	
	// Заполнение оплат.
	ЭквайринговыйТерминал = Неопределено;
	ДокументОбъект.ОплатаПлатежнымиКартами.Очистить();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами") Тогда
		Если ЭквайринговыйТерминал = Неопределено Тогда
			РабочееМестоКассира = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();		
			ЭквайринговыйТерминал = ПолучитьЭквайринговыйТерминал(РабочееМестоКассира, ПараметрыПодключаемогоОборудования.Организация);
		КонецЕсли;
		
		ОтборПоТаблицеОплат = Новый Структура("НомерСмены,УникальныйИдентификатор", СокрЛП(ПараметрыКассовойСмены.НомерСмены), СокрЛП(ПараметрыКассовойСмены.УникальныйИдентификатор));
		Для каждого Оплата Из ТаблицаОплат.НайтиСтроки(ОтборПоТаблицеОплат) Цикл
			Если Оплата.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда
				НоваяСтрокаОплаты = ДокументОбъект.ОплатаПлатежнымиКартами.Добавить();
				НоваяСтрокаОплаты.ИдентификаторСтроки   = Новый УникальныйИдентификатор;
				НоваяСтрокаОплаты.Сумма                 = Оплата.Сумма;
				НоваяСтрокаОплаты.НомерПлатежнойКарты   = "0000000000000000";
				НоваяСтрокаОплаты.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				НоваяСтрокаОплаты.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.ПлатежнаяКарта;				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	Исключение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	НачатьТранзакцию();
	
	Попытка
		УстановитьПривилегированныйРежим(Истина);
		УзелОбъект = ПараметрыПодключаемогоОборудования.УзелИнформационнойБазы.ПолучитьОбъект();
		УзелОбъект.ДатаЗагрузки = ТекущаяДатаСеанса();
		УзелОбъект.Записать();
		УстановитьПривилегированныйРежим(Ложь);
		
		ПодключаемоеОборудованиеOfflineЛокализация.ЗаполнитьСтатусыПоТабличнойЧастиАкцизныеМарки(ДокументОбъект, ЗагрузкаАкцизныхМарок);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СтандартнаяОбработка = Истина;
		ПредставлениеОшибки        = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодключаемоеОборудованиеOfflineЛокализация.ЗаписатьОшибкуВЖурналРегистрации(КраткоеПредставлениеОшибки, ПредставлениеОшибки, СтандартнаяОбработка);
		Если СтандартнаяОбработка Тогда
			ТекстОшибки = НСтр("ru = 'При завершении обмена с оборудованием произошла ошибка:
				|%1'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с offline оборудованием'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				УзелОбъект.Метаданные(),
				ПараметрыПодключаемогоОборудования.УзелИнформационнойБазы,
				ПредставлениеОшибки);

		КонецЕсли;

	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
КонецФункции	

Функция ЗаполнитьКассовуюСменуПоНомеру(ПараметрыПодключаемогоОборудования, ПараметрыКассовойСмены, Отказ, ОписаниеОшибки = "")
	
	Результат = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КассаККМФискальноеУстройство = РозничныеПродажи.КассаККМФискальноеУстройство(ПараметрыПодключаемогоОборудования.Устройство);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.НомерСменыККТ = &НомерСменыККТ	
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.НомерСменыККТ = &НомерСменыККТ	
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.НомерСменыККТ = &НомерСменыККТ	
	|	И КассоваяСмена.Проведен
	|";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство",   ФискальноеУстройство);
	
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    ПараметрыКассовойСмены.ДатаОткрытияСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ПараметрыКассовойСмены.ДатаЗакрытияСмены);
	Запрос.УстановитьПараметр("НомерСменыККТ",          Число(ПараметрыКассовойСмены.НомерСмены));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЭтоНовыйДокументКассоваяСмена = Истина;
	Если Выборка.Следующий() Тогда
		КассоваяСменаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЭтоНовыйДокументКассоваяСмена = Ложь;		
	Иначе
		КассоваяСменаОбъект = Документы.КассоваяСмена.СоздатьДокумент();	
	КонецЕсли;
	
	ДатаОткрытияКассовойСмены = ?(ЗначениеЗаполнено(ПараметрыКассовойСмены.ДатаОткрытияСмены), ПараметрыКассовойСмены.ДатаОткрытияСмены, ТекущаяДатаСеанса()); 
		
	КассоваяСменаОбъект.Заполнить(Новый Структура("КассаККМ", КассаККМ));
	
	КассоваяСменаОбъект.КассаККМ               = КассаККМ;
	КассоваяСменаОбъект.Дата                   = ДатаОткрытияКассовойСмены;
	КассоваяСменаОбъект.Статус                 = ПараметрыКассовойСмены.СтатусСмены;
	КассоваяСменаОбъект.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
	КассоваяСменаОбъект.ОкончаниеКассовойСмены = ПараметрыКассовойСмены.ДатаЗакрытияСмены;
	
	КассоваяСменаОбъект.НомерСменыККТ   	   = Число(ПараметрыКассовойСмены.НомерСмены);
	
	КассоваяСменаОбъект.ФискальноеУстройство   = ФискальноеУстройство;
	КассоваяСменаОбъект.КоличествоЧеков		   = ПараметрыКассовойСмены.КоличествоЧеков;
	
	Попытка
		
		Если КассоваяСменаОбъект.ПроверитьЗаполнение() Тогда
			Если КассоваяСменаОбъект.Проведен Или ЭтоНовыйДокументКассоваяСмена Тогда			
				КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Иначе
			ТекстОшибки = НСтр("ru = 'При проверке заполнения документа Кассовая смена с номером смены ККТ %1 произошла ошибка.'");
			ВызватьИсключение СтрШаблон(ТекстОшибки, ПараметрыКассовойСмены.НомерСмены);	
		КонецЕсли;
		Результат = КассоваяСменаОбъект.Ссылка;
		
	Исключение
		Отказ = Истина;
		
		СтандартнаяОбработка = Истина;
		ПредставлениеОшибки        = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КраткоеПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ПодключаемоеОборудованиеOfflineЛокализация.ЗаписатьОшибкуВЖурналРегистрации(КраткоеПредставлениеОшибки, ПредставлениеОшибки, СтандартнаяОбработка);
		Если СтандартнаяОбработка Тогда
			ТекстОшибки = НСтр("ru = 'При записи документа Кассовая смена с номером смены ККТ %2 произошла ошибка:
				|%1'");
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, КраткоеПредставлениеОшибки, ПараметрыКассовойСмены.НомерСмены));
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен с offline оборудованием'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				КассоваяСменаОбъект.Метаданные(),
				ПараметрыПодключаемогоОборудования.УзелИнформационнойБазы,
				ПредставлениеОшибки);
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьЭквайринговыйТерминал(РабочееМестоКассира, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭквайринговыеТерминалы.Ссылка КАК ЭквайринговыйТерминалПоОрганизации
	|ПОМЕСТИТЬ ВтЭквайринговыеТерминалы
	|ИЗ
	|	Справочник.ЭквайринговыеТерминалы КАК ЭквайринговыеТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыЭквайринга КАК ДоговорыЭквайринга
	|		ПО ЭквайринговыеТерминалы.Владелец = ДоговорыЭквайринга.Ссылка
	|ГДЕ
	|	ДоговорыЭквайринга.Организация = &Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭквайринговыйТерминалПоОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкиРМКЭквайринговыеТерминалы.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
	|	ВЫБОР
	|		КОГДА НастройкиРМКЭквайринговыеТерминалы.ИспользоватьБезПодключенияОборудования
	|		И
	|			НастройкиРМКЭквайринговыеТерминалы.ПодключаемоеОборудованиеККТ = ЗНАЧЕНИЕ(Справочник.ПодключаемоеОборудование.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.НастройкиРМК.ЭквайринговыеТерминалы КАК НастройкиРМКЭквайринговыеТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЭквайринговыеТерминалы КАК ВтЭквайринговыеТерминалы
	|		ПО НастройкиРМКЭквайринговыеТерминалы.ЭквайринговыйТерминал = ВтЭквайринговыеТерминалы.ЭквайринговыйТерминалПоОрганизации
	|ГДЕ
	|	НастройкиРМКЭквайринговыеТерминалы.Ссылка.РабочееМесто = &РабочееМесто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМестоКассира);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.ЭквайринговыйТерминал;
	Иначе
		Возврат Справочники.ЭквайринговыеТерминалы.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПолучитьЭквайринговыйТерминал()

Функция ПустаяТаблицаОплат()
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("КодВидаОплаты",           Новый ОписаниеТипов("Строка"), Новый КвалификаторыСтроки(50));
	ТаблицаОплат.Колонки.Добавить("Сумма",                   Новый ОписаниеТипов("Число"));
	ТаблицаОплат.Колонки.Добавить("ТипОплаты",               Новый ОписаниеТипов("ПеречислениеСсылка.ТипыОплатыККТ"));
	ТаблицаОплат.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТаблицаОплат.Колонки.Добавить("НомерСмены",              Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаОплат;
	
КонецФункции

Функция ПустаяТаблицаТоваров()
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Код",                     Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Цена",                    Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Количество",              Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Скидка",                  Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Сумма",                   Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",                 Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",                Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("ДокументРеализации",      Новый ОписаниеТипов("ДокументСсылка.ОтчетОРозничныхПродажах"));	
	ТаблицаТоваров.Колонки.Добавить("СтавкаНДС",               Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
	ТаблицаТоваров.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НомерСмены",              Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаТоваров;
КонецФункции

Функция ПустаяТаблицаШтрихкодовАкцизов()
	
	ТаблицаШтрихкодовАкцизов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("Код",  Новый ОписаниеТипов("Число"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("ШтрихкодАлкогольнойМарки", Новый ОписаниеТипов("Строка"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("УникальныйИдентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("НомерСмены",				 Новый ОписаниеТипов("Строка"));
	ТаблицаШтрихкодовАкцизов.Колонки.Добавить("ДатаЧека",				 Новый ОписаниеТипов("Дата"));
	
	Возврат ТаблицаШтрихкодовАкцизов;
КонецФункции

Функция ПолучитьСтавкуНДС(СтавкаНДСККМ)
	
	СоответствиеСтавокНСД = УчетНДСРФ.СоответствиеСтавокНДССтроковымЗначениям();
	
	Если СтавкаНДСККМ = МенеджерОфлайнОборудования.СтавкаБезНДС() Тогда
		Возврат Справочники.СтавкиНДС.БезНДС;
	Иначе
		Возврат СоответствиеСтавокНСД.Получить(СтавкаНДСККМ);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтавкуНДСККМ(СтавкаНДС)
	
	Если СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		Возврат МенеджерОфлайнОборудования.СтавкаБезНДС();
	Иначе
		Возврат Строка(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтавкаНДС, "Ставка"));
	КонецЕсли;
	
КонецФункции

// Получает данные о подключаемом оборудовании.
//
// Параметры:
//  Устройство - СправочникСсылка.ПодключаемоеОборудование, СправочникСсылка.ОфлайнОборудование - 
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса
Функция ПолучитьПараметрыПодключаемогоОборудования(Устройство)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КассыККМ.КассаККМ КАК КассаККМ,
	|	КассыККМ.КассаККМ.ВалютаДенежныхСредств КАК Валюта,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад КАК Склад,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены КАК ВидЦены,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КассыККМ.КассаККМ.Владелец КАК Организация,
	|	СправочникПодключаемоеОборудование.Ссылка КАК Устройство
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК СправочникПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|		ПО КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка
	|ГДЕ
	|	СправочникПодключаемоеОборудование.Ссылка = &Устройство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СправочникПодключаемоеОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	СправочникПодключаемоеОборудование.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КассыККМ.КассаККМ КАК КассаККМ,
	|	КассыККМ.КассаККМ.ВалютаДенежныхСредств КАК Валюта,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад КАК Склад,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены КАК ВидЦены,
	|	СправочникПодключаемоеОборудование.ПравилоОбмена.Склад.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КассыККМ.КассаККМ.Владелец КАК Организация,
	|	СправочникПодключаемоеОборудование.Ссылка КАК Устройство
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК СправочникПодключаемоеОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|		ПО КассыККМ.ПодключаемоеОборудование = СправочникПодключаемоеОборудование.Ссылка
	|ГДЕ
	|	СправочникПодключаемоеОборудование.Ссылка = &Устройство");
	
	Запрос.УстановитьПараметр("Устройство", Устройство);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПараметрыПодключаемогоОборудования = Результат.Выбрать();
	
	Если ПараметрыПодключаемогоОборудования.Следующий() Тогда
		Результат = ПараметрыПодключаемогоОборудования;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//-- Локализация

#Область ТекстыЗапросов

//++ Локализация
Функция ТекстЗапросаДанныеТоваровДляВыгрузки(Знач Параметры, Знач ИспользоватьСерииНоменклатуры)
	
	Тексты = Новый Массив();
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.ВНаличииОстаток
		|		- Запасы.РезервироватьНаСкладеОстаток
		|		- Запасы.РезервироватьПоМереПоступленияОстаток КАК Свободно
		|ПОМЕСТИТЬ ВтДоступныеТовары
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Склад ССЫЛКА Справочник.Склады
		|			И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И Склад = &ПравилоОбменаСклад) КАК Запасы
		|ГДЕ
		|	Запасы.ВНаличииОстаток
		|		- Запасы.РезервироватьНаСкладеОстаток
		|		- Запасы.РезервироватьПоМереПоступленияОстаток > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	""""                                            КАК КодГруппы,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Артикул,"""")            КАК Артикул,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.КодВидаНоменклатурнойКлассификации,"""") КАК КодВидаНоменклатурнойКлассификации,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование,"""")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Описание КАК Строка(1000)),"""") КАК ОписаниеТовара,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименованиеПолное,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.Код, """") КАК КодЕдиницыИзмерения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения, """") КАК ЕдиницаИзмерения,
	|	КодыТоваровПодключаемогоОборудованияOffline.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК КоэффициентУпаковки,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК Остаток,
	|	ВЫБОР
	|		КОГДА &ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Весовой,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	
	|	&ИспользованиеСерий,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинкиЕстьИзменения,
	|	
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция КАК Алкоголь,
	|	
	|	ВЫБОР
	|		КОГДА (КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|				И ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ))
	|				ИЛИ КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ОсобенностьУчета В (
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Бакалея),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МоторныеМасла),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазливноеПиво,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидАлкогольнойПродукции.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодВидаАлкогольнойПродукции,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ОбъемДАЛ * 10
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕмкостьТары,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Крепость
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Крепость,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПроизводительИмпортерКонтрагент.ИНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИННПроизводителя,
	|	
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПроизводительИмпортерКонтрагент.КПП
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КПППроизводителя
	|
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДоступныеТовары КАК СвободныеОстатки
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СвободныеОстатки.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = СвободныеОстатки.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваровПодключаемогоОборудованияOffline.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|			И &ВесыСПечатьюЭтикеток
	|			И (&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) ИЛИ ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\"")
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Изменения КАК КодыТоваровПодключаемогоОборудованияOfflineИзменения
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Код = КодыТоваровПодключаемогоОборудованияOfflineИзменения.Код
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&ТекущаяДата,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&ТекущаяДата, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ОписаниеНоменклатурыИС.Номенклатура = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА &ОтборПоШтрихкоду = ИСТИНА
	|				ТОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, &ПустаяСтрока) = &Штрихкод
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И &ТолькоИзмененные
	|УПОРЯДОЧИТЬ ПО
	|	Используется УБЫВ, Код
	|ИТОГИ
	|	МАКСИМУМ(Используется),
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));

	Если Параметры.ЧастичнаяВыгрузка Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ТолькоИзмененные",
						"И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
						|	И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ТолькоИзмененные","");
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИспользованиеСерий,","ВЫБОР КОГДА 1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК Т ГДЕ Т.Склад = &ПравилоОбменаСклад И Т.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу И Т.Ссылка = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидНоменклатуры) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УказыватьСерииПриОтгрузкеВРозницу,");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИспользованиеСерий,","");
	КонецЕсли;
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВесыСПечатьюЭтикеток","И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\""");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВесыСПечатьюЭтикеток","");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеТоваровДляВыгрузки25(Знач Параметры, Знач ИспользоватьСерииНоменклатуры)
	
	Тексты = Новый Массив();
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.ВНаличииОстаток
		|		- Запасы.РезервироватьНаСкладеОстаток
		|		- Запасы.РезервироватьПоМереПоступленияОстаток КАК Свободно
		|ПОМЕСТИТЬ ВтДоступныеТовары
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Склад ССЫЛКА Справочник.Склады
		|			И Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И Склад = &ПравилоОбменаСклад) КАК Запасы
		|ГДЕ
		|	Запасы.ВНаличииОстаток
		|		- Запасы.РезервироватьНаСкладеОстаток
		|		- Запасы.РезервироватьПоМереПоступленияОстаток > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	"""" КАК КодГруппы,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.КодВидаНоменклатурнойКлассификации, """") КАК
	|		КодВидаНоменклатурнойКлассификации,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное, """") КАК
	|		НоменклатураНаименованиеПолное,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Описание КАК СТРОКА(1000)), """") КАК
	|		ОписаниеТовара,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.НаименованиеПолное, """") КАК
	|		ХарактеристикаНаименованиеПолное,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.Код, """") КАК КодЕдиницыИзмерения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК
	|		НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ЕдиницаИзмерения, """") КАК ЕдиницаИзмерения,
	|	КодыТоваровПодключаемогоОборудованияOffline.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК КоэффициентУпаковки,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатурыСрезПоследних.Цена, 0) = 0
	|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) *
	|				ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) *
	|			ЕСТЬNULL(ИндивидуальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК Остаток,
	|	ВЫБОР
	|		КОГДА &ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Весовой,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	&ИспользованиеСерий,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинкиЕстьИзменения,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция КАК Алкоголь,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|		И ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|		ИЛИ КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ОсобенностьУчета В (
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Шины),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Фотоаппараты),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Духи),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Велосипеды),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КреслаКоляски),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.УпакованнаяВода),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Антисептики),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БАДы),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СоковаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольноеПиво),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхБезВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ВетеринарныеПрепараты),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ИгрыИИгрушкиДляДетей),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РадиоэлектроннаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТитановаяМеталлопродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияБезВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.РастительныеМасла),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОптоволокноИОптоволоконнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПечатнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.СтроительныеМатериалы),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ОтопительныеПриборы),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПиротехническиеИзделияИСредстваПожарнойБезопасности),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукцияДо9Процентов),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТелефоныИНоутбуки),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КабельнаяПродукция),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Бакалея),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МоторныеМасла),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.БезалкогольныеНапитки),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ТехническиеСредстваРеабилитации),
	|					ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МедицинскиеИзделия))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Маркируемый,
	|	ВЫБОР
	|		КОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия
	|				= ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РазливноеПиво,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ОсобенностьУчета КАК ОсобенностьУчета,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидАлкогольнойПродукции.Код
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КодВидаАлкогольнойПродукции,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ОбъемДАЛ * 10
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЕмкостьТары,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Крепость
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Крепость,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПроизводительИмпортерКонтрагент.ИНН
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИННПроизводителя,
	|	ВЫБОР
	|		КОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ПроизводительИмпортерКонтрагент.КПП
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КПППроизводителя
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДоступныеТовары КАК СвободныеОстатки
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СвободныеОстатки.Номенклатура
	|		И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = СвободныеОстатки.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|		И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|		И КодыТоваровПодключаемогоОборудованияOffline.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|		И &ВесыСПечатьюЭтикеток
	|		И (&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|		ИЛИ ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК	ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|		И (ВЫБОР
	|			КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|			ИНАЧЕ КодыТоваровПодключаемогоОборудованияOffline.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|		КОНЕЦ) = ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО
	|		И ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка) = ЦеныНоменклатурыСрезПоследних.СерияЦО
	|		И (ВЫБОР
	|			КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ИНАЧЕ КодыТоваровПодключаемогоОборудованияOffline.Упаковка
	|		КОНЕЦ) = ЦеныНоменклатурыСрезПоследних.УпаковкаЦО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ТекущаяДата,
	|			ВидЦены = &ИндивидуальныйВидЦены) КАК ИндивидуальныеЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ИндивидуальныеЦеныНоменклатурыСрезПоследних.Номенклатура
	|		И (ВЫБОР
	|			КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|			ИНАЧЕ КодыТоваровПодключаемогоОборудованияOffline.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|		КОНЕЦ) = ИндивидуальныеЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО
	|		И ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка) = ИндивидуальныеЦеныНоменклатурыСрезПоследних.СерияЦО
	|		И (ВЫБОР
	|			КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ИНАЧЕ КодыТоваровПодключаемогоОборудованияOffline.Упаковка
	|		КОНЕЦ) = ИндивидуальныеЦеныНоменклатурыСрезПоследних.УпаковкаЦО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Изменения КАК
	|			КодыТоваровПодключаемогоОборудованияOfflineИзменения
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Код = КодыТоваровПодключаемогоОборудованияOfflineИзменения.Код
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
	|		И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&ТекущаяДата,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&ТекущаяДата, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО ОписаниеНоменклатурыИС.Номенклатура = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|	И КодыТоваровПодключаемогоОборудованияOffline.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И ВЫБОР
	|		КОГДА &ОтборПоШтрихкоду = ИСТИНА
	|			ТОГДА ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, &ПустаяСтрока) = &Штрихкод
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И &ТолькоИзмененные
	|УПОРЯДОЧИТЬ ПО
	|	Используется УБЫВ, Код
	|ИТОГИ
	|	МАКСИМУМ(Используется),
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ИндивидуальныеЦеныНоменклатурыСрезПоследних.Упаковка",
			"ИндивидуальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));

	Если Параметры.ЧастичнаяВыгрузка Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ТолькоИзмененные",
						"И КодыТоваровПодключаемогоОборудованияOfflineИзменения.ПравилоОбмена = &ПравилоОбмена
						|	И КодыТоваровПодключаемогоОборудованияOfflineИзменения.Узел = &УзелИнформационнойБазы");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ТолькоИзмененные","");
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИспользованиеСерий,","ВЫБОР КОГДА 1 В (ВЫБРАТЬ ПЕРВЫЕ 1 1 ИЗ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК Т ГДЕ Т.Склад = &ПравилоОбменаСклад И Т.ПолитикаУчетаСерий.УказыватьПриОтгрузкеВРозницу И Т.Ссылка = КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.ВидНоменклатуры) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК УказыватьСерииПриОтгрузкеВРозницу,");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИспользованиеСерий,","");
	КонецЕсли;
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВесыСПечатьюЭтикеток","И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\""");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВесыСПечатьюЭтикеток","");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеТоваровПоПравилуОбмена(Знач Параметры)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование, """")       КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное, """") КАК НоменклатураНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """")       КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.НаименованиеПолное, """") КАК ХарактеристикаНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВЫБОР
	|		КОГДА &ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Весовой
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваровПодключаемогоОборудованияOffline.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|			И &ВесыСПечатьюЭтикеток
	|			И (&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес) ИЛИ ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\"")
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВесыСПечатьюЭтикеток","И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\""");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВесыСПечатьюЭтикеток","");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДанныеТоваровПоПравилуОбмена25(Знач Параметры)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КодыТоваровПодключаемогоОборудованияOffline.Используется КАК Используется,
	|	КодыТоваровПодключаемогоОборудованияOffline.Код КАК Код,
	|	КодыТоваровПодключаемогоОборудованияOffline.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.Наименование, """") КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Номенклатура.НаименованиеПолное, """") КАК
	|		НоменклатураНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.Наименование, """") КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Характеристика.НаименованиеПолное, """") КАК
	|		ХарактеристикаНаименованиеПолное,
	|	КодыТоваровПодключаемогоОборудованияOffline.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваровПодключаемогоОборудованияOffline.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатурыСрезПоследних.Цена, 0) = 0
	|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) *
	|				ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) *
	|			ЕСТЬNULL(ИндивидуальныеЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА &ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Весовой
	|ИЗ
	|	РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline КАК КодыТоваровПодключаемогоОборудованияOffline
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура)
	|		И (КодыТоваровПодключаемогоОборудованияOffline.Характеристика = ШтрихкодыНоменклатуры.Характеристика)
	|		И (КодыТоваровПодключаемогоОборудованияOffline.Упаковка = ШтрихкодыНоменклатуры.Упаковка)
	|		И (&ВесыСПечатьюЭтикеток)
	|		И (&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения <> ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|		ИЛИ ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК
	|			ЦеныНоменклатурыСрезПоследних
	|		ПО (КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура)
	|		И (КодыТоваровПодключаемогоОборудованияOffline.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО)
	|		И (ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка) = ЦеныНоменклатурыСрезПоследних.СерияЦО)
	|		И (ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) = ЦеныНоменклатурыСрезПоследних.УпаковкаЦО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&ТекущаяДата,
	|			ВидЦены = &ИндивидуальныйВидЦены) КАК ИндивидуальныеЦеныНоменклатурыСрезПоследних
	|		ПО (КодыТоваровПодключаемогоОборудованияOffline.Номенклатура = ИндивидуальныеЦеныНоменклатурыСрезПоследних.Номенклатура)
	|		И (КодыТоваровПодключаемогоОборудованияOffline.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования = ИндивидуальныеЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО)
	|		И (ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка) = ИндивидуальныеЦеныНоменклатурыСрезПоследних.СерияЦО)
	|		И (ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) = ИндивидуальныеЦеныНоменклатурыСрезПоследних.УпаковкаЦО)
	|ГДЕ
	|	КодыТоваровПодключаемогоОборудованияOffline.ПравилоОбмена = &ПравилоОбмена
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ИндивидуальныеЦеныНоменклатурыСрезПоследних.Упаковка",
			"ИндивидуальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"КодыТоваровПодключаемогоОборудованияOffline.Упаковка",
			"КодыТоваровПодключаемогоОборудованияOffline.Номенклатура"));
	
	Если Параметры.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И (&ВесыСПечатьюЭтикеток)","И ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\""");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И (&ВесыСПечатьюЭтикеток)","");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- Локализация

#КонецОбласти

#КонецОбласти


