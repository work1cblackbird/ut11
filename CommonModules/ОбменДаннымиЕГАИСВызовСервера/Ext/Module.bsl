#Область ПрограммныйИнтерфейс

// Возвращает доступные для текущего рабочего места настройки обмена с ЕГАИС на клиенте и на сервере
//
// Параметры:
//  ОрганизацииЕГАИС - Массив из СправочникСсылка.КлассификаторОрганизацийЕГАИС, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС для обмена.
//  ДатыПоследнегоЗапуска - Соответствие из КлючИЗначение - Даты последнего запуска обменов на клиенте по расписанию.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОбменНаСервере - Соответствие из КлючИЗначение - Настройки обмена на сервере, см. функцию ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС()
//   * ОбменНаКлиенте - Соответствие из КлючИЗначение - Настройки обмена на клиенте, см. функцию ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС()
//   * БезНастроек - Массив из СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС для которых нет настроек обмена.
//
Функция НастройкиОбменаЕГАИС(ОрганизацииЕГАИС = Неопределено, ДатыПоследнегоЗапуска = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОбменНаСервере", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ОбменНаКлиенте", Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("БезНастроек",    Новый Массив);
	
	ОбменНаКлиентеПоРасписанию = (ДатыПоследнегоЗапуска <> Неопределено);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлассификаторОрганизацийЕГАИС.Ссылка КАК ОрганизацияЕГАИС,
	|	
	|	ВЫБОР КОГДА НастройкиОбменаЕГАИС.ИдентификаторФСРАР ЕСТЬ NULL
	|		И ОбщиеНастройкиОбменаЕГАИС.ИдентификаторФСРАР ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ЕстьНастройкиОбменаЕГАИС,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.АдресУТМ ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.АдресУТМ
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.АдресУТМ ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.АдресУТМ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресУТМ,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ПортУТМ ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ПортУТМ
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ПортУТМ ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ПортУТМ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПортУТМ,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.Таймаут ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.Таймаут
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.Таймаут ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.Таймаут
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Таймаут,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ОбменНаСервере
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ОбменНаСервере ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ОбменНаСервере
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаСервере,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОбменНаКлиентеПоРасписанию,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ОбменНаКлиентеРасписание
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеРасписание ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеРасписание
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОбменНаКлиентеРасписание,
	|	
	|	ВЫБОР
	|		КОГДА НЕ НастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы ЕСТЬ NULL ТОГДА
	|			НастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы
	|		КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы ЕСТЬ NULL ТОГДА
	|			ОбщиеНастройкиОбменаЕГАИС.ЗагружатьВходящиеДокументы
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗагружатьВходящиеДокументы
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР)
	|			И (НастройкиОбменаЕГАИС.РабочееМесто = &РабочееМесто)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаЕГАИС КАК ОбщиеНастройкиОбменаЕГАИС
	|		ПО (КлассификаторОрганизацийЕГАИС.Код = ОбщиеНастройкиОбменаЕГАИС.ИдентификаторФСРАР)
	|			И (ОбщиеНастройкиОбменаЕГАИС.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
	|ГДЕ
	|	КлассификаторОрганизацийЕГАИС.СоответствуетОрганизации
	|");
	
	Если ОрганизацииЕГАИС <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"И КлассификаторОрганизацийЕГАИС.Ссылка В(&ОрганизацииЕГАИС)";
	КонецЕсли;
	
	Если ОбменНаКлиентеПоРасписанию Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС +
		"И ВЫБОР
		|	КОГДА НЕ НастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		НастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию
		|	КОГДА НЕ ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию ЕСТЬ NULL ТОГДА
		|		ОбщиеНастройкиОбменаЕГАИС.ОбменНаКлиентеПоРасписанию
		|	ИНАЧЕ ЛОЖЬ
		|КОНЕЦ
		|";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("ОрганизацииЕГАИС", ОрганизацииЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбменНаКлиентеПоРасписаниюТребуется = Ложь;
		Если ОбменНаКлиентеПоРасписанию Тогда
			Если Выборка.ОбменНаКлиентеПоРасписанию Тогда
				Расписание = Выборка.ОбменНаКлиентеРасписание.Получить();
				Если Расписание <> Неопределено Тогда
					ДатаПоследнегоЗапуска = ДатыПоследнегоЗапуска.Получить(Выборка.ОрганизацияЕГАИС);
					Если ДатаПоследнегоЗапуска = Неопределено
						Или Расписание.ТребуетсяВыполнение(ТекущаяДатаСеанса(), ДатаПоследнегоЗапуска) Тогда
						ОбменНаКлиентеПоРасписаниюТребуется = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ОбменНаКлиентеПоРасписанию
			И Не ОбменНаКлиентеПоРасписаниюТребуется Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выборка.ЕстьНастройкиОбменаЕГАИС Тогда
			
			НастройкаОбменаЕГАИС = ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС();
			НастройкаОбменаЕГАИС.АдресУТМ                   = Выборка.АдресУТМ;
			НастройкаОбменаЕГАИС.ПортУТМ                    = Выборка.ПортУТМ;
			НастройкаОбменаЕГАИС.Таймаут                    = Выборка.Таймаут;
			НастройкаОбменаЕГАИС.ЗагружатьВходящиеДокументы = Выборка.ЗагружатьВходящиеДокументы;
			
			Если Выборка.ОбменНаСервере Тогда
				ВозвращаемоеЗначение.ОбменНаСервере.Вставить(Выборка.ОрганизацияЕГАИС, НастройкаОбменаЕГАИС);
			Иначе
				ВозвращаемоеЗначение.ОбменНаКлиенте.Вставить(Выборка.ОрганизацияЕГАИС, НастройкаОбменаЕГАИС);
			КонецЕсли;
			
		Иначе
			
			Если ОрганизацииЕГАИС <> Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(Выборка.ОрганизацияЕГАИС);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОрганизацииЕГАИС <> Неопределено Тогда
		
		Если ТипЗнч(ОрганизацииЕГАИС) = Тип("СправочникСсылка.КлассификаторОрганизацийЕГАИС") Тогда
			ОрганизацииДляПроверки = Новый Массив;
			ОрганизацииДляПроверки.Добавить(ОрганизацииЕГАИС);
		Иначе
			ОрганизацииДляПроверки = ОрганизацииЕГАИС;
		КонецЕсли;
		
		Для Каждого ОрганизацияЕГАИС Из ОрганизацииДляПроверки Цикл
			Если ВозвращаемоеЗначение.ОбменНаКлиенте.Получить(ОрганизацияЕГАИС) = Неопределено
				И ВозвращаемоеЗначение.ОбменНаСервере.Получить(ОрганизацияЕГАИС) = Неопределено
				И ВозвращаемоеЗначение.БезНастроек.Найти(ОрганизацияЕГАИС) = Неопределено Тогда
				ВозвращаемоеЗначение.БезНастроек.Добавить(ОрганизацияЕГАИС);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет отправку подготовленных сообщений, загрузку новых документов, обработку ответов из ЕГАИС.
//
// Параметры:
//  ОрганизацииЕГАИС - Неопределено, Массив из СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//  ДатыПоследнегоЗапуска - Неопределено, Соответствие из КлючИЗначение - Даты последнего запуска обменов на клиенте по расписанию.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения - Массив из см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения.
//   * СообщенияXMLКПередаче - Массив из см. ОбменДаннымиЕГАИС.СтруктураСообщенияXML
//   * НастройкиОбменаЕГАИС - Соответствие из КлючИЗначение - Настройки обмена ЕГАИС на клиенте по организациям:
//     ** Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//     ** Значение - Структура - Настройки обмена ЕГАИС, см. ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС.
//   * ВыполнитьОбменПоРасписанию - Булево - Признак необходимости выполнения обмена (по расписанию), Истина, только если ДатыПоследнегоЗапуска <> Неопределено.
//   * ИдентификаторВладельца - Неопределено, УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
Функция ВыполнитьОбмен(ОрганизацииЕГАИС = Неопределено, ДатыПоследнегоЗапуска = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",                  Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче",      Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",       Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ИдентификаторВладельца",     ИдентификаторВладельца);
	ВозвращаемоеЗначение.Вставить("ВыполнитьОбменПоРасписанию", Ложь);
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС, ДатыПоследнегоЗапуска);
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	ВозвращаемоеЗначение.ВыполнитьОбменПоРасписанию = ДатыПоследнегоЗапуска <> Неопределено
	                                                  И (НастройкиОбменаЕГАИС.ОбменНаКлиенте.Количество() > 0
	                                                  Или НастройкиОбменаЕГАИС.ОбменНаСервере.Количество() > 0);
	
	// Передача сообщений на сервере и подготовка сообщений к отправке на клиенте
	РезультатОбработкиОчереди = ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС);
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.СообщенияXMLКПередаче Цикл
		ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(ЭлементДанных);
	КонецЦикла;
	
	// Загрузка входящих документов и ответов на запросы
	Результат = ПолучитьВходящиеДокументы(НастройкиОбменаЕГАИС.ОбменНаСервере);
	Для Каждого ЭлементДанных Из Результат.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Для Каждого ОрганизацияБезНастроек Из НастройкиОбменаЕГАИС.БезНастроек Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для организации ЕГАИС %1 не заданы настройки подключения к УТМ'"),
				ОрганизацияБезНастроек));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ПодготовкаСообщений

// Подготавливает сообщения к передаче в сервис ЕГАИС.
//
// Параметры:
//  ВходящиеДанные - Массив из ДокументСсылка, ДокументСсылка - Документы к передаче сообщений.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - выполняемая операция обмена.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//  Немедленно - Булево - Признак немедленной передачи сообщения в УТМ, без очереди сообщений.
//  ИдентификаторВладельца - Неопределено - ИдентификаторВладельца
// Возвращаемое значение:
//  Структура - см. ПодготовитьСообщенияКПередаче.
Функция ПодготовитьКПередаче(ВходящиеДанные, ДальнейшееДействие, ДополнительныеПараметры = Неопределено, Немедленно = Ложь, ИдентификаторВладельца = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Если ТипЗнч(ВходящиеДанные) = Тип("Массив") Тогда
		МассивДокументов = ВходящиеДанные;
	Иначе
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ВходящиеДанные);
	КонецЕсли;
	
	Сообщения = Новый Массив;
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		
		СообщенияДокумента = СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
		Для Каждого Сообщение Из СообщенияДокумента Цикл
			Сообщения.Добавить(Сообщение);
		КонецЦикла;
		
	КонецЦикла;
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения, Немедленно,, ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет подготовку запроса данных классификаторов ЕГАИС к передаче и
// передает запрос в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции .
//     Перечисление.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации.
//  ИмяПараметра - Строка - Имя параметра. Возможные значения: "ИНН", "КОД", "СИО".
//  ЗначениеПараметра - Строка - Значение параметра.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений обмена
// 
// Возвращаемое значение:
//  (См. ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьЗапросДанныхКлассификатораКПередаче(ОрганизацияЕГАИС, Операция, ИмяПараметра, ЗначениеПараметра, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ЗапросДанныхКлассификатораКПередачеXML(ОрганизацияЕГАИС, Операция, ИмяПараметра, ЗначениеПараметра);
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения,,,ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ПриемИПередачаСообщений

// Выполняет получение списка новых сообщений.
//
// Параметры:
//  ОрганизацииЕГАИС - Неопределено, Массив из СправочникСсылка.КлассификаторОрганизацийЕГАИС, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ДокументыКЗагрузке - Соответствие из КлючИЗначение -
//   * НастройкиОбменаЕГАИС - Соответствие из КлючИЗначение - Настройки обмена ЕГАИС на клиенте по организациям:
//     ** Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//     ** Значение - (См. ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС).
//   * ТекстОшибки - Строка - Текст сообщения об ошибке.
Функция ВходящиеСообщения(ОрганизацииЕГАИС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументыКЗагрузке",    Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",  Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",           "");
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС);
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	ВозвращаемоеЗначение.ДокументыКЗагрузке = ДокументыКЗагрузке(
		НастройкиОбменаЕГАИС.ОбменНаСервере,
		ВозвращаемоеЗначение);
	
	Для Каждого ОрганизацияБезНастроек Из НастройкиОбменаЕГАИС.БезНастроек Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для организации ЕГАИС %1 не заданы настройки подключения к УТМ'"),
				ОрганизацияБезНастроек));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обработать очередь передачи данных в ЕГАИС
//
// Параметры:
//  НастройкиОбменаЕГАИС - Структура - Настройки обмена ЕГАИС, см. функцию НастройкиОбменаЕГАИС()
//  СообщенияXMLКПередаче - Массив из см. ОбменДаннымиЕГАИС.СтруктураСообщенияXML - Массив структур к передаче
//  Немедленно - Булево - 
// Возвращаемое значение:
// Структура - со свойствами:
//  * Изменения - Массив из см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения - Результат передачи сообщений на сервере
//  * СообщенияXMLКПередаче - Массив из см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения - Массив структур к передаче на клиенте
//
Функция ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС, СообщенияXMLКПередаче = Неопределено, Немедленно = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",             Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче", Новый Массив);
	
	ОрганизацииЕГАИС = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОрганизацииЕГАИС, ОбменДаннымиЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС.ОбменНаСервере));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОрганизацииЕГАИС, ОбменДаннымиЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС.ОбменНаКлиенте));
	
	Если ОрганизацииЕГАИС.Количество() = 0 Тогда
		
		Если СообщенияXMLКПередаче <> Неопределено Тогда
			Для Каждого Сообщение Из СообщенияXMLКПередаче Цикл
				
				Если Сообщение.ПодготовленоКПередаче И Немедленно Тогда
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сообщение в ЕГАИС не может быть передано.
						           |Для организации %1 не настроено подключение к УТМ.'"),
						Сообщение.ОрганизацияЕГАИС);
				Иначе
					ТекстОшибки = Сообщение.ТекстОшибки;
				КонецЕсли;
				
				СтрокаРезультата = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
				СтрокаРезультата.ОрганизацияЕГАИС = Сообщение.ОрганизацияЕГАИС;
				СтрокаРезультата.Операция         = Сообщение.Операция;
				СтрокаРезультата.ФорматОбмена     = Сообщение.ФорматОбмена;
				
				СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
				СтрокаРезультата.ПодготовленоКПередаче = Сообщение.ПодготовленоКПередаче;
				СтрокаРезультата.ПереданоВУТМ          = Ложь;
				СтрокаРезультата.Принято               = Ложь;
				
				СтрокаРезультата.ИсходящееСообщение = Сообщение.ИсходящееСообщение;
				СтрокаРезультата.ВходящееСообщение  = Неопределено;
				
				СтрокаРезультата.Объект             = Сообщение.Объект;
				СтрокаРезультата.ДокументОснование  = Сообщение.ДокументОснование;
				СтрокаРезультата.НовыйСтатус        = Сообщение.НовыйСтатус;
				
				ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
				
			КонецЦикла;
		КонецЕсли;
		
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если СообщенияXMLКПередаче = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Очередь.Сообщение              КАК ИсходящееСообщение,
		|	Очередь.Сообщение.Операция     КАК Операция,
		|	Очередь.Сообщение.ФорматОбмена КАК ФорматОбмена,
		|	Очередь.ОрганизацияЕГАИС       КАК ОрганизацияЕГАИС,
		|	Истина                         КАК ПодготовленоКПередаче
		|ИЗ
		|	РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК Очередь
		|ГДЕ
		|	Очередь.ОрганизацияЕГАИС В(&ОрганизацииЕГАИС)
		|");
		
		Запрос.УстановитьПараметр("ОрганизацииЕГАИС", ОрганизацииЕГАИС);
		
		ТаблицаОчередь = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		ТаблицаОчередь = СообщенияXMLКПередаче;
		
	КонецЕсли;
	
	Для Каждого Выборка Из ТаблицаОчередь Цикл
		
		НастройкаОбменаНаСервере = НастройкиОбменаЕГАИС.ОбменНаСервере.Получить(Выборка.ОрганизацияЕГАИС);
		НастройкаОбменаНаКлиенте = НастройкиОбменаЕГАИС.ОбменНаКлиенте.Получить(Выборка.ОрганизацияЕГАИС);
		Если Выборка.ПодготовленоКПередаче И НастройкаОбменаНаСервере <> Неопределено Тогда
			
			АдресЗапроса = Перечисления.ВидыДокументовЕГАИС.АдресЗапроса(Выборка.Операция, Выборка.ФорматОбмена);
			
			РезультатыПередачиСообщений = ПередатьСообщениеВУТМ(Выборка.ИсходящееСообщение, АдресЗапроса, НастройкаОбменаНаСервере);
			
			РезультатыПередачиСообщенийПоОрганизациямЕГАИС = Новый Соответствие;
			РезультатыПередачиСообщенийПоОрганизациямЕГАИС.Вставить(Выборка.ОрганизацияЕГАИС, РезультатыПередачиСообщений);
			
			//@skip-check query-in-loop
			Изменения = ПриЗавершенииПередачиДанных(РезультатыПередачиСообщенийПоОрганизациямЕГАИС);
			Для Каждого ЭлементДанных Из Изменения Цикл
				ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
			КонецЦикла;
			
		ИначеЕсли Выборка.ПодготовленоКПередаче И НастройкаОбменаНаКлиенте <> Неопределено Тогда
			
			АдресЗапроса = Перечисления.ВидыДокументовЕГАИС.АдресЗапроса(Выборка.Операция, Выборка.ФорматОбмена);
			
			СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML(Истина);
			СообщениеXML.Ссылка            = Выборка.ИсходящееСообщение;
			СообщениеXML.ОрганизацияЕГАИС  = Выборка.ОрганизацияЕГАИС;
			СообщениеXML.ТекстСообщенияXML = ПротоколОбменаИС.ТекстСообщенияXMLИзПротокола(Выборка.ИсходящееСообщение);
			СообщениеXML.АдресЗапроса      = АдресЗапроса;
			
			ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(СообщениеXML);
			
		ИначеЕсли СообщенияXMLКПередаче <> Неопределено Тогда
			
			Если Выборка.ПодготовленоКПередаче И Немедленно Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Сообщение в ЕГАИС не может быть передано.
					           |Для организации %1 не настроено подключение к УТМ.'"),
					Выборка.ОрганизацияЕГАИС);
			Иначе
				ТекстОшибки = Выборка.ТекстОшибки;
			КонецЕсли;
			
			СтрокаРезультата = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ОрганизацияЕГАИС = Выборка.ОрганизацияЕГАИС;
			СтрокаРезультата.Операция         = Выборка.Операция;
			СтрокаРезультата.ФорматОбмена     = Выборка.ФорматОбмена;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Выборка.ПодготовленоКПередаче;
			СтрокаРезультата.ПереданоВУТМ          = Ложь;
			СтрокаРезультата.Принято               = Ложь;
			
			СтрокаРезультата.ИсходящееСообщение = Выборка.ИсходящееСообщение;
			СтрокаРезультата.ВходящееСообщение  = Неопределено;
			
			СтрокаРезультата.Объект             = Выборка.Объект;
			СтрокаРезультата.ДокументОснование  = Выборка.ДокументОснование;
			СтрокаРезультата.НовыйСтатус        = Выборка.НовыйСтатус;
			
			ВозвращаемоеЗначение.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

// Удаляет неотправленную операцию из очереди передачи данных в ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения().
//
Функция ОтменитьПередачу(ДокументСсылка) Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "ВОчереди");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ОчередьПередачиДанныхЕГАИС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Сообщение.Установить(ДанныеПоследнегоСообщения.Сообщение, Истина);
	
	ТекстОшибки = "";
	НачатьТранзакцию();
	Попытка
		НаборЗаписей.Записать();
		НовыйСтатус = ПротоколОбменаИС.ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
	КонецПопытки;
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ДанныеПоследнегоСообщения, ТекстОшибки, НовыйСтатус);
	
КонецФункции

// Отменяет последнюю операцию (например, если возникла ошибка передачи данных).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить операцию.
//
// Возвращаемое значение:
//  Массив - Массив структур, см. функцию ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения().
//
Функция ОтменитьПоследнююОперацию(ДокументСсылка) Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "ПереданоВУТМ");
	
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстОшибки = "";
	Попытка
		НовыйСтатус = ПротоколОбменаИС.ОтменитьОперацию(ДокументСсылка, ДанныеПоследнегоСообщения);
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ЗаполнитьИзменения(ДокументСсылка, ДанныеПоследнегоСообщения, ТекстОшибки, НовыйСтатус);
	
КонецФункции

// Восстанавливает статус документа по данным протокола обмена.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется восстановить статус.
//
Процедура ВосстановитьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = ОбменДаннымиЕГАИС.РассчитатьСтатус(ДокументСсылка);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция УдалитьВходящиеДокументы(ДокументыКУдалению) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ДокументыКУдалению",    Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",  Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",           "");
	
	ОрганизацииЕГАИС = Новый Массив;
	Для Каждого ЭлементДанных Из ДокументыКУдалению Цикл
		Если ОрганизацииЕГАИС.Найти(ЭлементДанных.ОрганизацияЕГАИС) = Неопределено Тогда
			ОрганизацииЕГАИС.Добавить(ЭлементДанных.ОрганизацияЕГАИС);
		КонецЕсли;
	КонецЦикла;
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС);
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	ДокументыКУдалениюНаСервере = Новый Массив;
	Для Каждого ЭлементДанных Из ДокументыКУдалению Цикл
		
		Если НастройкиОбменаЕГАИС.ОбменНаКлиенте.Получить(ЭлементДанных.ОрганизацияЕГАИС) <> Неопределено Тогда
			ВозвращаемоеЗначение.ДокументыКУдалению.Добавить(ЭлементДанных);
		ИначеЕсли НастройкиОбменаЕГАИС.ОбменНаСервере.Получить(ЭлементДанных.ОрганизацияЕГАИС) <> Неопределено Тогда
			ДокументыКУдалениюНаСервере.Добавить(ЭлементДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьДокументыИзУТМ(
		ДокументыКУдалениюНаСервере,
		НастройкиОбменаЕГАИС.ОбменНаСервере,
		ВозвращаемоеЗначение);
	
	Для Каждого ОрганизацияБезНастроек Из НастройкиОбменаЕГАИС.БезНастроек Цикл
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'Для организации ЕГАИС %1 не заданы настройки подключения к УТМ'"),
				ОрганизацияБезНастроек));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверить входящие документы в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - Неопределено, Массив из СправочникСсылка.КлассификаторОрганизацийЕГАИС, СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организации ЕГАИС, по которым необходимо выполнить обмен.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * АдресаURLВходящихДокументов - Массив из см. функцию ОбменДаннымиЕГАИСКлиентСервер.АдресаURLВходящихДокументов - массив адресов входящих документов
//   * НастройкиОбменаЕГАИС - см. ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС
//   * ТекстОшибки - Строка - Текст ошибки.
//   * ИдентификаторВладельца - Неопределено,УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
Функция ПроверитьВходящиеДокументы(ОрганизацииЕГАИС = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("АдресаURLВходящихДокументов", Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",        Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                 "");
	ВозвращаемоеЗначение.Вставить("ИдентификаторВладельца",      ИдентификаторВладельца);
	
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(ОрганизацииЕГАИС);
	
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	МассивОрганизацииЕГАИС = ОбменДаннымиЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС.ОбменНаСервере);
	Для Каждого ОрганизацияЕГАИС Из МассивОрганизацииЕГАИС Цикл
		
		АдресаURLВходящихДокументов = ОбменДаннымиЕГАИСКлиентСервер.АдресаURLВходящихДокументов(
			НастройкиОбменаЕГАИС.ОбменНаСервере, ОрганизацияЕГАИС);
		
		Если ЗначениеЗаполнено(АдресаURLВходящихДокументов.ТекстОшибки) Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось получить список входящих документов организации %1:
				           |По причине:
				           |%2'"),
				ОрганизацияЕГАИС,
				АдресаURLВходящихДокументов.ТекстОшибки);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС + ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ДанныеКПолучению Из АдресаURLВходящихДокументов.ДанныеОбработки Цикл
			ВозвращаемоеЗначение.АдресаURLВходящихДокументов.Добавить(ДанныеКПолучению);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает новые документы из УТМ.
//
// Параметры:
//  НастройкиОбменаЕГАИС - Соответствие из КлючИЗначение - Настройки обмена ЕГАИС по организациям:
//   * Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Значение - см. ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения - Массив из см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
//   * ТекстОшибки - Строка - Текст ошибки.
//
Функция ПолучитьВходящиеДокументы(НастройкиОбменаЕГАИС) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",   Новый Массив);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки", "");
	
	ДокументыКЗагрузке = ДокументыКЗагрузке(НастройкиОбменаЕГАИС, ВозвращаемоеЗначение);
	
	Результат = ОбработатьВходящиеДокументы(ДокументыКЗагрузке);
	
	Для Каждого ЭлементДанных Из Результат.Изменения Цикл
		
		УдалитьДокументыИзУТМ(ЭлементДанных.СлужебныеДанные, НастройкиОбменаЕГАИС, ВозвращаемоеЗначение);
		
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает список документов, полученных из УТМ.
//
// Параметры:
//  ДокументыКЗагрузке - Соответствие из КлючИЗначение - Сообщения XML к загрузке по организациям:
//   * Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Значение - Массив из см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента - Сообщения XML к загрузке
//	ИдентификаторВладельца - Неопределено -
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения - Массив из см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ОбработатьВходящиеДокументы(ДокументыКЗагрузке, ИдентификаторВладельца = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения", Новый Массив);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаСоответствияДокументовТипамЕГАИС = Перечисления.ВидыДокументовЕГАИС.ТаблицаСоответствияДокументовТипамЕГАИС();
	
	СоответствиеОрганизацииЕГАИСиКодаФСРАР = Новый Соответствие;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("СтопЛист",      Новый Соответствие);
	ДополнительныеПараметры.Вставить("ТекущийОбъект", Неопределено);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.ОбменДаннымиЕГАИСВызовСервера.ОбработатьВходящиеДокументы");
	
	Для Каждого КлючИЗначение Из ДокументыКЗагрузке Цикл
		
		ОрганизацияЕГАИС = КлючИЗначение.Ключ;
		
		Очередь = Новый ТаблицаЗначений;
		Очередь.Колонки.Добавить("Приоритет");
		Очередь.Колонки.Добавить("ДанныеДокумента");
		Очередь.Колонки.Добавить("ДополнительныеДанные");
		
		Для Каждого ВходящиеДанные Из КлючИЗначение.Значение Цикл
			
			ДанныеОбработки = ОбменДаннымиЕГАИС.ОбработатьОтветНаЗапросПолученияДокумента(ВходящиеДанные, ТаблицаСоответствияДокументовТипамЕГАИС);
			Если ДанныеОбработки.Результат = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеДокумента = ДанныеОбработки.Результат;
			
			ЭлементОчереди = Очередь.Добавить();
			ЭлементОчереди.ДанныеДокумента = ДанныеДокумента;
			
			Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "Result")
					И ДанныеДокумента.Объект.Result <> Неопределено Тогда
					ЭлементОчереди.Приоритет = 1; // ПолученЕГАИС
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "OperationResult")
					И ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
					ЭлементОчереди.Приоритет = 2; // ПроведенЕГАИС
				Иначе
					ЭлементОчереди.Приоритет = 3;
				КонецЕсли;
			Иначе
				ЭлементОчереди.Приоритет = 3;
			КонецЕсли;
			
			Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция
				И ДанныеДокумента.Объект <> Неопределено
				И ДанныеДокумента.Объект.DocType = "Route"
				И ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
				
				ПараметрыИдентификатораЗапросаV4 = ОбменДаннымиЕГАИС.ПараметрыИдентификатораЗапросаV4(ДанныеДокумента.ИдентификаторЗапроса);
				Если СоответствиеОрганизацииЕГАИСиКодаФСРАР[ОрганизацияЕГАИС] = Неопределено Тогда
					КодФСРАР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОрганизацияЕГАИС, "Код");
					СоответствиеОрганизацииЕГАИСиКодаФСРАР.Вставить(ОрганизацияЕГАИС, КодФСРАР);
				КонецЕсли;
				
				Если ПараметрыИдентификатораЗапросаV4.КодФСРАР <> СоответствиеОрганизацииЕГАИСиКодаФСРАР[ОрганизацияЕГАИС] Тогда
					
					WbRegID  = Неопределено;
					
					// WbRegID можно получить только из комментария к тикету...
					OperationComment = ДанныеДокумента.Объект.OperationResult.OperationComment;
					ЗаголовокНомерТТН = "ТТН № ";
					ДлинаЗаголовкаНомерТТН = СтрДлина(ЗаголовокНомерТТН);
					
					НомерИДействие = СтрРазделить(
						Сред(
							OperationComment,
							СтрНайти(OperationComment, ЗаголовокНомерТТН) + ДлинаЗаголовкаНомерТТН),
						" ", Ложь);
					
					Если НомерИДействие.Количество() = 2 Тогда
						WbRegID = НомерИДействие[0];
					КонецЕсли;
					
					Проведен = Неопределено;
					Если ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("Confirm") Тогда
						Проведен = Истина;
					ИначеЕсли ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("UnConfirm") Тогда
						Проведен = Ложь;
					КонецЕсли;
					
					Если WbRegID <> Неопределено Тогда
						ДополнительныеДанные = Новый Структура;
						ДополнительныеДанные.Вставить("WbRegID",      WbRegID);
						ДополнительныеДанные.Вставить("Проведен",     Проведен);
						ДополнительныеДанные.Вставить("ТипДокумента", "ТранспортнаяНакладная");
						
						ЭлементОчереди.ДополнительныеДанные = ДополнительныеДанные;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Очередь.Сортировать("Приоритет ВОЗР");
		
		МодульРасширеннойВерсии       = Неопределено;
		ПараметрыРасширеннойОбработки = Неопределено;
		
		Если ОбщегоНазначенияЕГАИС.ЭтоРасширеннаяВерсияГосИС() Тогда
			МодульРасширеннойВерсии = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияЕГАИС");
		КонецЕсли;
		
		
		Для Каждого ЭлементОчереди Из Очередь Цикл
			
			ДанныеДокумента = ЭлементОчереди.ДанныеДокумента;
			
			ДополнительныеПараметры.ТекущийОбъект = Неопределено;
			
			НачатьТранзакцию();
			
			Попытка
				
				Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросДанныхОрганизации Тогда
					
					ДанныеЗагруженногоДокумента = ОбменДаннымиЕГАИС.ЗагрузитьОтветНаЗапросДанныхОрганизации(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
				
				ИначеЕсли МодульРасширеннойВерсии <> Неопределено Тогда
					
					ДанныеЗагруженногоДокумента = МодульРасширеннойВерсии.ОбработатьЭлементОчередиВходящихДокументов(ДокументыКЗагрузке, ОрганизацияЕГАИС, ЭлементОчереди, ПараметрыРасширеннойОбработки, ДополнительныеПараметры);
					
				КонецЕсли;
				
				
				ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
					ОписаниеЗамера, 1, ДанныеДокумента.ТипЕГАИС);
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				Если ДополнительныеПараметры.ТекущийОбъект <> Неопределено Тогда
					ДополнительныеПараметры.СтопЛист.Вставить(ДополнительныеПараметры.ТекущийОбъект, Истина);
				КонецЕсли;
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'При загрузке документа %1 с типом %2 возникла ошибка:
					           |Текст ошибки: %3
					           |Текст XML см. в журнале регистрации.'"),
					ДанныеДокумента.АдресЗапроса,
					ДанныеДокумента.ТипЕГАИС,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				Если ОбменДаннымиЕГАИС.СообщатьОбОшибкахПриЗагрузкеДанных()
					Или ( СтрНайти(НРег(ТекстОшибки), НСтр("ru = 'не найден документ'")) = 0
						И СтрНайти(НРег(ТекстОшибки), НСтр("ru = 'не найден исходящий запрос'")) = 0) Тогда
					
					ТекстОшибкиЖурналРегистрации = СтрШаблон(
						НСтр("ru = 'При загрузке документа %1 с типом %2 возникла ошибка:
						           |Текст ошибки: %3
						           |Текст XML:
						           |%4'"),
						ДанныеДокумента.АдресЗапроса,
						ДанныеДокумента.ТипЕГАИС,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
						ДанныеДокумента.ТекстXML);
					
					ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации);
					
					ОбщегоНазначенияИС.СообщитьПользователюВФорму(ИдентификаторВладельца, ТекстОшибки);
					
				КонецЕсли;
				
			КонецПопытки;
			
			Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
				ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		Если МодульРасширеннойВерсии <> Неопределено
			И ПараметрыРасширеннойОбработки <> Неопределено Тогда
			МодульРасширеннойВерсии.ОбработатьВходящиеДокументы(
				ПараметрыРасширеннойОбработки,
				ВозвращаемоеЗначение,
				ОписаниеЗамера,
				ИдентификаторВладельца);
		КонецЕсли;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 0);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет возможность загрузки ответов из УТМ.
//
// Возвращаемое значение:
//  Булево - Доступно выполнение обмена на клиенте по расписанию
Функция ДоступноВыполнениеОбменаНаКлиентеПоРасписанию() Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукцииРМК") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.КлассификаторОрганизацийЕГАИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаЕГАИС) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ЕГАИСПрисоединенныеФайлы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыПроверкиНастроекВыполненияОбменаНаКлиентеПоРасписанию = Новый Соответствие;
	
	НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС(
		Неопределено,
		ПараметрыПроверкиНастроекВыполненияОбменаНаКлиентеПоРасписанию);
	
	Если НастройкиОбменаЕГАИС.ОбменНаКлиенте.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#Область РаботаССообщениями

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому формируется сообщение.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Массив из см. ОбменДаннымиЕГАИС.СтруктураСообщенияXML - Сообщения к передаче
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено)
	
	ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	ВозвращаемоеЗначение = МенеджерОбъекта.СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Подготавливает сообщения к передаче в ЕГАИС.
//
// Параметры:
//  Сообщения - Массив из Структура - содержит структуру сообщений, которые подготавливаются к передаче.
//  Немедленно - Булево - Признак немедленной передачи сообщения в УТМ, без очереди сообщений.
//  НастройкиОбменаЕГАИС - Структура, Неопределено - см. функцию НастройкиОбменаЕГАИС().
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Изменения - Массив из см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения - Массив структур
//   * СообщенияXMLКПередаче - Массив из см. ОбменДаннымиЕГАИС.СтруктураСообщенияXML - Массив структур к передаче на клиенте
//   * НастройкиОбменаЕГАИС - Соответствие из КлючИЗначение - Настройки обмена ЕГАИС на клиенте по организациям:
//     ** Ключ - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//     ** Значение - см. ОбменДаннымиЕГАИСКлиентСервер.НоваяНастройкаОбменаЕГАИС
//   * ИдентификаторВладельца - Неопределено, УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
//
Функция ПодготовитьСообщенияКПередаче(Сообщения, Немедленно = Ложь, НастройкиОбменаЕГАИС = Неопределено, ИдентификаторВладельца = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Изменения",              Новый Массив);
	ВозвращаемоеЗначение.Вставить("СообщенияXMLКПередаче",  Новый Массив);
	ВозвращаемоеЗначение.Вставить("НастройкиОбменаЕГАИС",   Новый Соответствие);
	ВозвращаемоеЗначение.Вставить("ИдентификаторВладельца", ИдентификаторВладельца);
	
	СообщенияКПередаче = Новый Массив;
	Для Каждого Сообщение Из Сообщения Цикл
		
		Если Не ЗначениеЗаполнено(Сообщение.ТекстОшибки) Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ТипСообщения",         Сообщение.ТипСообщения);
			Реквизиты.Вставить("Операция",             Сообщение.Операция);
			Реквизиты.Вставить("Документ",             Сообщение.Документ);
			Реквизиты.Вставить("СообщениеОснование",   Неопределено);
			Реквизиты.Вставить("Описание",             Сообщение.Описание);
			Реквизиты.Вставить("ИдентификаторЗапроса", Неопределено);
			Реквизиты.Вставить("ФорматОбмена",         Сообщение.ФорматОбмена);
			Реквизиты.Вставить("ОрганизацияЕГАИС",     Сообщение.ОрганизацияЕГАИС);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.КПередаче);
			Реквизиты.Вставить("Версия",               Сообщение.Версия);
			
			Попытка
				
				Результат = ОбменДаннымиЕГАИС.ПодготовитьСообщениеКПередаче(Сообщение.ТекстСообщенияXML, Реквизиты, Немедленно);
				
				ИсходящееСообщение = Результат.ИсходящееСообщение;
				
				НовыйСтатус           = Результат.НовыйСтатус;
				ТекстОшибки           = Результат.ТекстОшибки;
				ПодготовленоКПередаче = Не ЗначениеЗаполнено(ТекстОшибки);
				
			Исключение
				
				НовыйСтатус           = Неопределено;
				ТекстОшибки           = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ПодготовленоКПередаче = Ложь;
				
			КонецПопытки;
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение ""%1"" не подготовлено к отправке в ЕГАИС:
				           |%2'"),
				Сообщение.Описание,
				Сообщение.ТекстОшибки);
			ПодготовленоКПередаче = Ложь;
			
			ИсходящееСообщение = Неопределено;
			
		КонецЕсли;
		
		СтрокаРезультата = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
		СтрокаРезультата.ОрганизацияЕГАИС = Сообщение.ОрганизацияЕГАИС;
		СтрокаРезультата.Операция         = Сообщение.Операция;
		СтрокаРезультата.ФорматОбмена     = Сообщение.ФорматОбмена;
		
		СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
		СтрокаРезультата.ПодготовленоКПередаче = ПодготовленоКПередаче;
		СтрокаРезультата.ПереданоВУТМ          = Ложь;
		СтрокаРезультата.Принято               = Ложь;
		
		СтрокаРезультата.ИсходящееСообщение = ИсходящееСообщение;
		СтрокаРезультата.ВходящееСообщение  = Неопределено;
		
		СтрокаРезультата.Объект            = Сообщение.Документ;
		СтрокаРезультата.ДокументОснование = Сообщение.ДокументОснование;
		СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
		
		СообщенияКПередаче.Добавить(СтрокаРезультата);
		
	КонецЦикла;
	
	// Получение настроек обмена ЕГАИС для выполнения обмена на клиенте и сервере
	Если НастройкиОбменаЕГАИС = Неопределено Тогда
		НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС();
	КонецЕсли;
	
	ВозвращаемоеЗначение.НастройкиОбменаЕГАИС = НастройкиОбменаЕГАИС.ОбменНаКлиенте;
	
	// Передача сообщений на сервере и подготовка сообщений к отправке на клиенте
	РезультатОбработкиОчереди = ОбработатьОчередьПередачиДанных(НастройкиОбменаЕГАИС, СообщенияКПередаче, Немедленно);
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.Изменения Цикл
		ВозвращаемоеЗначение.Изменения.Добавить(ЭлементДанных);
	КонецЦикла;
	Для Каждого ЭлементДанных Из РезультатОбработкиОчереди.СообщенияXMLКПередаче Цикл
		ВозвращаемоеЗначение.СообщенияXMLКПередаче.Добавить(ЭлементДанных);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПередатьСообщениеВУТМ(ИсходящееСообщение, АдресЗапроса, НастройкаОбменаНаСервере)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстСообщенияXML = ПротоколОбменаИС.ТекстСообщенияXMLИзПротокола(ИсходящееСообщение);
	
	ПолеФормы = Новый Структура;
	ПолеФормы.Вставить("ИмяПоля",  "xml_file");
	ПолеФормы.Вставить("ИмяФайла", "data.xml");
	ПолеФормы.Вставить("Тип",      "text/xml; charset=utf-8");
	ПолеФормы.Вставить("Тело",     ТекстСообщенияXML);
	
	ПоляФормы = Новый Массив;
	ПоляФормы.Добавить(ПолеФормы);
	
	ДанныеПреобразования = ОбменДаннымиИСКлиентСервер.ДвоичныеДанныеPOSTЗапросаКакФорма(ПоляФормы);
	ТелоЗапроса = ДанныеПреобразования.ДвоичныеДанные;
	Размер      = ДанныеПреобразования.Размер;
	
	ЗаголовкиHTTP = Новый Соответствие;
	ЗаголовкиHTTP.Вставить("Content-Type",   "multipart/form-data; boundary=" + ДанныеПреобразования.Разделитель);
	ЗаголовкиHTTP.Вставить("Accept-Charset", "utf-8");
	ЗаголовкиHTTP.Вставить("Content-Lenght", Формат(Размер, "ЧН=0; ЧГ=0;"));
	
	ПараметрыHTTPЗапроса = ОбменДаннымиЕГАИСКлиентСервер.ПараметрыHTTPЗапроса(ТелоЗапроса, ЗаголовкиHTTP, АдресЗапроса);
	
	РезультатОтправкиHTTPЗапроса = ОбменДаннымиЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(НастройкаОбменаНаСервере, ПараметрыHTTPЗапроса);
	
	ЭлементДанных = Новый Структура;
	ЭлементДанных.Вставить("ИсходящееСообщение",           ИсходящееСообщение);
	ЭлементДанных.Вставить("РезультатОтправкиHTTPЗапроса", ОбменДаннымиЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса));
	
	ВозвращаемоеЗначение = Новый Массив;
	ВозвращаемоеЗначение.Добавить(ЭлементДанных);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции


// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацииЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Запрашиваемые данные.
//   Возможные значения:
//     Перечисление.ВидыДокументовЕГАИС.ЗапросАлкогольнойПродукции .
//     Перечисление.ВидыДокументовЕГАИС.ЗапросДанныхОрганизации.
//  ИмяПараметра - Строка - Имя параметра. Возможные значения: "ИНН", "КОД", "СИО".
//  ЗначениеПараметра - Строка - Значение параметра.
// 
// Возвращаемое значение:
//  Массив - Сообщения, к передаче в ЕГАИС. см. ОбменДаннымиЕГАИС.СтруктураСообщенияXML().
//
Функция ЗапросДанныхКлассификатораКПередачеXML(ОрганизацияЕГАИС, Операция, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код          КАК ИдентификаторФСРАР,
	|	Шапка.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
		
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryParameters");
	Parameters = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ЗапросXDTO, "Parameters");
	Parameter  = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(Parameters, "Parameter");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Name",  ИмяПараметра,      СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Parameter, "Value", ЗначениеПараметра, СообщениеXML);
	
	Parameters.Parameter.Добавить(Parameter);
	ЗапросXDTO.Parameters.Добавить(Parameters);
	
	#КонецОбласти
	
	ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Выполняет подготовку пакета данных об используемом формате обмена к передаче и
// передает данные в ЕГАИС, если есть действующее подключение к УТМ.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИспользуемыйФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Используемый формат обмена.
//  ИдентификаторВладельца - УникальныйИдентификатор - Уникальный идентификатор формы для сообщений пользователю.
// 
// Возвращаемое значение:
//  (См. ПодготовитьСообщенияКПередаче)
//
Функция ПодготовитьИнформациюОФорматеОбменаКПередаче(ОрганизацияЕГАИС, ИспользуемыйФорматОбмена, ИдентификаторВладельца = Неопределено) Экспорт
	
	Сообщения = ИнформацияОФорматеОбменаКПередачеXML(ОрганизацияЕГАИС, ИспользуемыйФорматОбмена);
	
	ВозвращаемоеЗначение = ПодготовитьСообщенияКПередаче(Сообщения,,, ИдентификаторВладельца);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Формирует массив сообщений в формате XML к передаче в УТМ.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС для которой выполняется запрос.
//  ИспользуемыйФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Используемый формат обмена.
// 
// Возвращаемое значение:
//  Массив Из (См. ОбменДаннымиЕГАИС.СтруктураСообщенияXML) - Сообщения, к передаче в ЕГАИС.
//
Функция ИнформацияОФорматеОбменаКПередачеXML(ОрганизацияЕГАИС, ИспользуемыйФорматОбмена) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ИнформацияОФорматеОбмена;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Шапка.Код КАК ИдентификаторФСРАР
	|ИЗ
	|	Справочник.КлассификаторОрганизацийЕГАИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ОрганизацияЕГАИС);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ОрганизацияЕГАИС);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ИспользуемыйФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ИспользуемыйФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ИспользуемыйФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	#Область Запрос
	
	ЗапросXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "InfoVersionTTN");
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "ClientId", Шапка.ИдентификаторФСРАР, СообщениеXML);
	
	Если ИспользуемыйФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "WBTypeUsed", "WayBill",    СообщениеXML);
	ИначеЕсли ИспользуемыйФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "WBTypeUsed", "WayBill_v2", СообщениеXML);
	ИначеЕсли ИспользуемыйФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "WBTypeUsed", "WayBill_v3", СообщениеXML);
	ИначеЕсли ИспользуемыйФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "WBTypeUsed", "WayBill_v4", СообщениеXML);
	КонецЕсли;
	
	#КонецОбласти
	
	ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ИспользуемыйФорматОбмена;
	СообщениеXML.Документ          = Неопределено;
	СообщениеXML.ДокументОснование = Неопределено;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область РаботаСДокументами

Функция ДокументыКЗагрузке(НастройкиОбменаЕГАИС, ВозвращаемоеЗначение)
	
	ДокументыКЗагрузке = Новый Соответствие;
	
	ОрганизацииЕГАИС = ОбменДаннымиЕГАИСКлиентСервер.ОрганизацииЕГАИС(НастройкиОбменаЕГАИС);
	Для Каждого ОрганизацияЕГАИС Из ОрганизацииЕГАИС Цикл
		
		НастройкаОбменаЕГАИС = НастройкиОбменаЕГАИС.Получить(ОрганизацияЕГАИС);
		
		Если Не НастройкаОбменаЕГАИС.ЗагружатьВходящиеДокументы Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументыКЗагрузке.Вставить(ОрганизацияЕГАИС, Новый Массив);
		
		АдресаURLВходящихДокументов = ОбменДаннымиЕГАИСКлиентСервер.АдресаURLВходящихДокументов(
			НастройкиОбменаЕГАИС, ОрганизацияЕГАИС);
		
		Если ЗначениеЗаполнено(АдресаURLВходящихДокументов.ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Не удалось получить список входящих документов организации %1:
					           |По причине:
					           |%2'"),
					ОрганизацияЕГАИС,
					АдресаURLВходящихДокументов.ТекстОшибки));
			
			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС
				                                 + АдресаURLВходящихДокументов.ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = АдресаURLВходящихДокументов.ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		Если АдресаURLВходящихДокументов.ДанныеОбработки <> Неопределено Тогда
			Для Каждого ДанныеКПолучению Из АдресаURLВходящихДокументов.ДанныеОбработки Цикл
				
				СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ДанныеКПолучению.АдресURL);
				
				РезультатОперации = ОбменДаннымиЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(
					ОбменДаннымиЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(
						НастройкаОбменаЕГАИС,
						ОбменДаннымиЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("GET", СтруктураURI.ПутьНаСервере)));
				
				Если РезультатОперации.ТекстСообщенияXMLПолучен Тогда
					
					ДокументыКЗагрузке[ОрганизацияЕГАИС].Добавить(
						ОбменДаннымиЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента(
							ОрганизацияЕГАИС,
							ДанныеКПолучению.ИдентификаторЗапроса,
							ДанныеКПолучению.АдресURL,
							РезультатОперации.ТекстВходящегоСообщенияXML));
					
				Иначе
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Не удалось получить входящий документ %1
						           |%2'"),
						ДанныеКПолучению.АдресURL,
						РезультатОперации.ТекстОшибки);
					
					Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
						ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
						                                 + Символы.ПС
						                                 + ТекстОшибки;
					Иначе
						ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДокументыКЗагрузке;
	
КонецФункции

Процедура УдалитьДокументыИзУТМ(ДокументыКУдалению, НастройкиОбменаЕГАИС, ВозвращаемоеЗначение)
	
	Для Каждого Данные Из ДокументыКУдалению Цикл
		
		Если Не ЗначениеЗаполнено(Данные.АдресЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаОбменаЕГАИС = НастройкиОбменаЕГАИС.Получить(Данные.ОрганизацияЕГАИС);
		
		РезультатОперации = Неопределено;
		Если НастройкаОбменаЕГАИС <> Неопределено Тогда
			
			СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(Данные.АдресЗапроса);
			
			РезультатОперации = ОбменДаннымиЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(
				ОбменДаннымиЕГАИСКлиентСервер.ОтправитьHTTPЗапрос(
					НастройкаОбменаЕГАИС,
					ОбменДаннымиЕГАИСКлиентСервер.СтруктураДанныхHTTPЗапроса("DELETE", СтруктураURI.ПутьНаСервере)));
			
		КонецЕсли;
		
		Если РезультатОперации = Неопределено
			Или Не РезультатОперации.ТекстСообщенияXMLПолучен Тогда
			
			ТекстОшибки = 
				СтрШаблон(НСтр("ru = 'Не удалось удалить входящий документ (%1)
					                 |%2'"),
					Данные.АдресЗапроса,
					РезультатОперации.ТекстОшибки);
			
			ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			Если ЗначениеЗаполнено(ВозвращаемоеЗначение.ТекстОшибки) Тогда
				ВозвращаемоеЗначение.ТекстОшибки = ВозвращаемоеЗначение.ТекстОшибки
				                                 + Символы.ПС
				                                 + ТекстОшибки;
			Иначе
				ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные документа, по которому было отправлено или получено сообщение.
//
// Параметры:
//  Сообщение - СправочникСсылка.ЕГАИСПрисоединенныеФайлы - сообщение, по которому получаются данные.
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Документ  - ДокументСсылка - документ, по которому было получено или отправлено сообщение.
//   * ДокументОснование - ДокументСсылка - основание документа, по которому было получено или отправлено сообщение.
//   * Операция  - ПеречислениеСсылка.ВидыДокументовЕГАИС - выполненная операция обмена.
//   * ФорматОбмена  - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Формат обмена.
//   * ОрганизацияЕГАИС  - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//
Функция ДанныеДокументаСообщения(Сообщение, ОрганизацияЕГАИС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("ДокументОснование");
	ВозвращаемоеЗначение.Вставить("Операция");
	ВозвращаемоеЗначение.Вставить("ФорматОбмена");
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Если ОрганизацияЕГАИС = "ПроверкаПодключенияКУТМ" Тогда
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ.ДокументОснование КАК ДокументОснование,
	|	ЕГАИСПрисоединенныеФайлы.Документ                   КАК Документ,
	|	ЕГАИСПрисоединенныеФайлы.ВладелецФайла              КАК ОрганизацияЕГАИС,
	|	ЕГАИСПрисоединенныеФайлы.ФорматОбмена               КАК ФорматОбмена,
	|	ЕГАИСПрисоединенныеФайлы.Операция                   КАК Операция
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Ссылка = &Сообщение
	|");
	
	Запрос.УстановитьПараметр("Сообщение", Сообщение);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение.Документ          = Выборка.Документ;
		ВозвращаемоеЗначение.ДокументОснование = Выборка.ДокументОснование;
		ВозвращаемоеЗначение.Операция          = Выборка.Операция;
		ВозвращаемоеЗначение.ФорматОбмена      = Выборка.ФорматОбмена;
		ВозвращаемоеЗначение.ОрганизацияЕГАИС  = Выборка.ОрганизацияЕГАИС;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполняет структуру изменений по документу.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется отменить передачу данных.
//  ЭлементОчереди - Неопределено,
//                   СтрокаТаблицыЗначений с колонками:
//                     ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - формат обмена.
//                     Операция  - ПеречислениеСсылка.ВидыДокументовЕГАИС    - операция обмена
//                     ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация.
//  ТекстОшибки - Строка.
//  НовыйСтатус - Неопределено.
// 
// Возвращаемое значение:
//  Массив из см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения()
Функция ЗаполнитьИзменения(ДокументСсылка, ДанныеПоследнегоСообщения = Неопределено, ТекстОшибки = "", НовыйСтатус = Неопределено)
	
	Изменения = Новый Массив;
	
	ДокументОснование = Неопределено;
	Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
		ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
	КонецЕсли;
	
	СтрокаРезультата = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	
	СтрокаРезультата.Объект            = ДокументСсылка;
	СтрокаРезультата.ДокументОснование = ДокументОснование;
	СтрокаРезультата.НовыйСтатус       = НовыйСтатус;
	СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Если ДанныеПоследнегоСообщения <> Неопределено Тогда
		СтрокаРезультата.ОрганизацияЕГАИС  = ДанныеПоследнегоСообщения.ОрганизацияЕГАИС;
		СтрокаРезультата.Операция          = ДанныеПоследнегоСообщения.Операция;
		СтрокаРезультата.ФорматОбмена      = ДанныеПоследнегоСообщения.ФорматОбмена;
	КонецЕсли;
	
	Изменения.Добавить(СтрокаРезультата);
	
	Возврат Изменения;
	
КонецФункции

#КонецОбласти

#Область ОбработкаРезультатов

Функция ОбработатьРезультатПередачиДанных(ИсходящееСообщение, РеквизитыИсходящегоСообщения, РезультатОтправкиЗапроса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатОбработкиОтвета = Новый Структура;
	РезультатОбработкиОтвета.Вставить("НовыйСтатус");
	РезультатОбработкиОтвета.Вставить("ТекстОшибки");
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("РезультатОтправкиЗапроса");
	ВозвращаемоеЗначение.Вставить("РезультатОбработкиОтвета", РезультатОбработкиОтвета);
	ВозвращаемоеЗначение.Вставить("ИсходящееСообщение");
	ВозвращаемоеЗначение.Вставить("ВходящееСообщение");
	ВозвращаемоеЗначение.Вставить("Документ");
	ВозвращаемоеЗначение.Вставить("ДокументОснование");
	
	// Результат чека ЕГАИС
	ВозвращаемоеЗначение.Вставить("ИдентификаторЗапроса");
	ВозвращаемоеЗначение.Вставить("Подпись");
	
	ДокументСсылка    = РеквизитыИсходящегоСообщения.Документ;
	ДокументОснование = РеквизитыИсходящегоСообщения.ДокументОснование;
	Операция          = РеквизитыИсходящегоСообщения.Операция;
	ФорматОбмена      = РеквизитыИсходящегоСообщения.ФорматОбмена;
	ОрганизацияЕГАИС  = РеквизитыИсходящегоСообщения.ОрганизацияЕГАИС;
	
	ВозвращаемоеЗначение.Документ          = ДокументСсылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОснование;
	
	ВозвращаемоеЗначение.РезультатОтправкиЗапроса = РезультатОтправкиЗапроса;
	
	Если РезультатОтправкиЗапроса.ТекстСообщенияXMLПолучен Тогда
		
		ТекстВходящегоСообщенияXML = РезультатОтправкиЗапроса.ТекстВходящегоСообщенияXML;
		
		ДанныеОбработки = ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML);
		
		Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Сообщение по документу %1 не принято УТМ:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ДанныеОбработки.ТекстОшибки);
		КонецЕсли;
		
		Если ОрганизацияЕГАИС = "ПроверкаПодключенияКУТМ" Тогда
			ВозвращаемоеЗначение.ВходящееСообщение  = ТекстВходящегоСообщенияXML;
			ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если ДанныеОбработки.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
			ИдентификаторЗапроса = "";
			Подпись              = "";
		Иначе
			ИдентификаторЗапроса = ДанныеОбработки.Результат.ИдентификаторЗапроса;
			Подпись              = ДанныеОбработки.Результат.Подпись;
		КонецЕсли;
		
		Если Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации Тогда
			ОперацияВходящегоСообщения = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации;
		Иначе
			ОперацияВходящегоСообщения = Операция;
		КонецЕсли;
		
		Реквизиты = Новый Структура;
		Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
		Реквизиты.Вставить("Операция",             ОперацияВходящегоСообщения);
		Реквизиты.Вставить("Документ",             ДокументСсылка);
		Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
		Реквизиты.Вставить("Описание",             ДанныеОбработки.ТекстОшибки);
		Реквизиты.Вставить("ИдентификаторЗапроса", ИдентификаторЗапроса);
		Реквизиты.Вставить("ФорматОбмена",         ФорматОбмена);
		Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
		Реквизиты.Вставить("СтатусОбработки",      ДанныеОбработки.СтатусОбработки);
		
		НачатьТранзакцию();
		
		Попытка
			
			ВходящееСообщение = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
				ТекстВходящегоСообщенияXML,
				Реквизиты).Ссылка;
			
			ОбменДаннымиЕГАИС.УдалитьСообщениеИзОчередиПередачиДанных(ИсходящееСообщение);
			
			Если ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
				ИсходящееСообщениеОбъект = ИсходящееСообщение.ПолучитьОбъект();
				ИсходящееСообщениеОбъект.ИдентификаторЗапроса = ИдентификаторЗапроса;
				ИсходящееСообщениеОбъект.Записать();
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументСсылка) Тогда
				
				ПараметрыОбновленияСтатуса = ОбменДаннымиЕГАИС.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = Реквизиты.ФорматОбмена;
				
				ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
				МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПередачиДанных(
					ДокументСсылка,
					Операция,
					ДанныеОбработки.СтатусОбработки, ПараметрыОбновленияСтатуса);
				
			Иначе
				НовыйСтатус = Неопределено;
			КонецЕсли;
			
			ВозвращаемоеЗначение.ВходящееСообщение                    = ВходящееСообщение;
			ВозвращаемоеЗначение.ИсходящееСообщение                   = ИсходящееСообщение;
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.НовыйСтатус = НовыйСтатус;
			
			ВозвращаемоеЗначение.ИдентификаторЗапроса = ИдентификаторЗапроса;
			ВозвращаемоеЗначение.Подпись              = Подпись;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При передаче сообщения по документу %1 возникла ошибка:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		
	Иначе
		
		Если ОрганизацияЕГАИС <> "ПроверкаПодключенияКУТМ" Тогда
			
			//@skip-check wrong-string-literal-content
			ОписаниеОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщение, "Описание");
			
			ВозвращаемоеЗначение.РезультатОбработкиОтвета.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Данные не переданы в УТМ:
					           |%1
					           |По причине:
					           |%2'"),
					ОписаниеОперации,
					РезультатОтправкиЗапроса.ТекстОшибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает ответ ЕГАИС на переданные данные.
//
// Параметры:
//  ТекстВходящегоСообщенияXML - Строка - Текст сообщения XML, содержащий ответ на переданные данные.
// 
// Возвращаемое значение:
//  Структура - результат обработки:
//   * Результат         - Неопределено, Структура - (См. ОбменДаннымиЕГАИСКлиентСервер.ОбработатьОтветНаПередачуДанных).
//   * ТекстОшибки       - Строка    - текст ошибки, в случае ее возникновения.
//   * ТекстСообщенияXML - Строка    - содержит ответ, полученный на запрос.
//   * СтатусОбработки   - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - статус обработки запроса.
//
Функция ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", Неопределено);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	
	ВозвращаемоеЗначение.ТекстСообщенияXML = ТекстВходящегоСообщенияXML;
	
	Попытка
		
		ДанныеОбработки = ОбменДаннымиЕГАИСКлиентСервер.ОбработатьОтветНаПередачуДанных(ТекстВходящегоСообщенияXML);
		
	Исключение
		
		ОбменДаннымиЕГАИС.ОбработатьОшибку(
			НСтр("ru = 'При разборе ответа на запрос передачи данных в УТМ возникла ошибка.
			           |Текст ошибки: %ТекстОшибки%'"),
			ИнформацияОбОшибке(),
			ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ДанныеОбработки.Ошибка) Тогда
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
		ВозвращаемоеЗначение.ТекстОшибки     = ДанныеОбработки.Ошибка;
	Иначе
		ВозвращаемоеЗначение.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
		ВозвращаемоеЗначение.Результат       = ДанныеОбработки;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// См. ОбменДаннымиЕГАИСКлиентСервер.ОбработатьОтветНаЗапросПолученияДокументов
Функция ОбработатьОтветНаЗапросПолученияДокументов(РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС) Экспорт
	
	Возврат ОбменДаннымиЕГАИСКлиентСервер.ОбработатьОтветНаЗапросПолученияДокументов(РезультатыПолученияСписковДокументовПоОрганизациямЕГАИС);
	
КонецФункции

// См. ОбменДаннымиЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса
Функция ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса) Экспорт
	
	Возврат ОбменДаннымиЕГАИСКлиентСервер.ОбработатьРезультатОтправкиHTTPЗапроса(РезультатОтправкиHTTPЗапроса);
	
КонецФункции

Функция ПриЗавершенииПередачиДанных(РезультатыПередачиСообщенийПоОрганизациямЕГАИС) Экспорт
	
	Изменения = Новый Массив;
	
	Для Каждого КлючИЗначение Из РезультатыПередачиСообщенийПоОрганизациямЕГАИС Цикл
		
		ОрганизацияЕГАИС = КлючИЗначение.Ключ;
		
		Для Каждого ЭлементДанных Из КлючИЗначение.Значение Цикл
			
			//@skip-check query-in-loop
			ЗначенияРеквизитов = ДанныеДокументаСообщения(ЭлементДанных.ИсходящееСообщение, ОрганизацияЕГАИС);
			
			Результат = ОбработатьРезультатПередачиДанных(
				ЭлементДанных.ИсходящееСообщение,
				ЗначенияРеквизитов,
				ЭлементДанных.РезультатОтправкиHTTPЗапроса);
			
			ТекстОшибки = "";
			Если ЗначениеЗаполнено(Результат.РезультатОбработкиОтвета.ТекстОшибки) Тогда
				ТекстОшибки = Результат.РезультатОбработкиОтвета.ТекстОшибки;
			ИначеЕсли ЗначениеЗаполнено(Результат.РезультатОтправкиЗапроса.ТекстОшибки) Тогда
				ТекстОшибки = Результат.РезультатОтправкиЗапроса.ТекстОшибки;
			КонецЕсли;
			
			СтрокаРезультата = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
			СтрокаРезультата.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
			СтрокаРезультата.Операция         = ЗначенияРеквизитов.Операция;
			СтрокаРезультата.ФорматОбмена     = ЗначенияРеквизитов.ФорматОбмена;
			
			СтрокаРезультата.ТекстОшибки           = ТекстОшибки;
			СтрокаРезультата.ПодготовленоКПередаче = Истина;
			СтрокаРезультата.ПереданоВУТМ          = Не ЗначениеЗаполнено(ТекстОшибки);
			СтрокаРезультата.Принято               = Ложь;
			
			СтрокаРезультата.ИсходящееСообщение = Результат.ИсходящееСообщение;
			СтрокаРезультата.ВходящееСообщение  = Результат.ВходящееСообщение;
			
			СтрокаРезультата.Объект            = Результат.Документ;
			СтрокаРезультата.ДокументОснование = Результат.ДокументОснование;
			СтрокаРезультата.НовыйСтатус       = Результат.РезультатОбработкиОтвета.НовыйСтатус;
			
			// Результат чека ЕГАИС
			СтрокаРезультата.ИдентификаторЗапроса = Результат.ИдентификаторЗапроса;
			СтрокаРезультата.Подпись              = Результат.Подпись;
			
			Изменения.Добавить(СтрокаРезультата);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Изменения;
	
КонецФункции

// Возвращает текст последней ошибки из протокола обмена
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, по которому требуется показать ошибку обмена
//
// Возвращаемое значение:
//  Строка - текст ошибки обмена.
//
Функция ТекстОшибкиИзПротокола(ДокументСсылка) Экспорт
	
	ДанныеПоследнегоСообщения = Справочники.ЕГАИСПрисоединенныеФайлы.ПоследнееСообщение(ДокументСсылка, "СОшибкой");
	Если ДанныеПоследнегоСообщения = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеПоследнегоСообщения.Сообщение, "Описание");
	
КонецФункции

#КонецОбласти

#КонецОбласти