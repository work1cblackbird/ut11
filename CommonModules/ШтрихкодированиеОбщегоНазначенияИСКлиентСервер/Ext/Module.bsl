#Область ПрограммныйИнтерфейс

#Область ПараметрыСканирования

// Инициализирует и возвращает общие параметры сканирования для всех видов продукции.
//
// Возвращаемое значение:
//  Структура - Описание:
// * ИдентификаторФормы - УникальныйИдентификатор - Уникальный идентификатор формы
// * СсылкаНаОбъект - ЛюбаяСсылка, Неопределено - Ссылка на объект из которого выполняется сканирование кодов маркировки
// * ИмяКолонкиШтрихкодУпаковки - Строка - Имя колонки хранения штрихкода упаковки в табличной части ИмяТабличнойЧастиШтрихкодыУпаковок
// * ИмяТабличнойЧастиШтрихкодыУпаковок - Строка - Наименование табличной части, где хранятся элементы штрихкодов упаковок
// * Склад - Неопределено - Место хранения
// * Организация - ОпределяемыйТип.Организация - Организация
// * Владелец - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - Организация или контргент (используется в механизме контроля кодов маркировки)
// * ДопустимыйСпособВводаВОборот - Неопределено - Допустимый способ ввода в оборот (используется в механизме контроля кодов маркировки)
// * ПараметрыУказанияСерий - Структура, Неопределено - Произвольные параметры указания серий (может использоваться в конфигурации-потребителе)
// * ОперацияКонтроляАкцизныхМарок - Строка - Доступные типы: "Продажа", "Возврат". "Продажа" - для документов, которые
//                                            отражает расход по складу, "Возврат" - для документов, отражающих приход.
// * ПроверятьДублиКодовМаркировки - Строка - Вариант проверки дублей кодов маркировки
// * КонтрольУникальностиКодовМаркировки - Булево - Признак необходимости контроля дублей кодов маркировки
// * ДополнительныеПараметры - Структура - Параметры необходимые для переопределения обработки прикладных объектов
// * ИспользуютсяДанныеВыбораПоМаркируемойПродукции - Булево - Истина, если данные выбора по маркируемой продукции используются
// * ДанныеВыбораПоМаркируемойПродукции - Структура, Неопределено - последние данные выбора, которые требовалось запомнить для последующего сканирования
// * ИспользуетсяСоответствиеШтрихкодовСтрокДерева - Булево - Признак наличия в форме дерева упаковок (только формы проверки и подбора)
// * АдресДанныхДокументаОснования - Строка, Неопределено - адрес во временном хранилище, где хранятся данные документа основания
// * КонтрольРасхожденийСДокументомОснованием - Булево - Истина, если необходимо выполнять контроль и сообщать
//                                                       об ошибках в случае несоответствия документу-основанию.
// * КэшированныеЗначения - Произвольный - Произвольная структура данных для кэширования значений
// * ТолькоМаркируемаяПродукция - Булево - Истина, если документ поддерживает работу только с маркируемой продукцией
// * ВозможнаЗагрузкаТСД - Булево - Истина, если контекст поддерживает работу с ТСД
// * ДокументОснование - ДокументСсылка, Неопределено - Ссылка на документ-основание
// * СоздаватьШтрихкодУпаковки - Булево - Если флаг установлен, то в момент сканирования кода маркировки создается запись в справочнике ШтрихкодыУпаковокТоваров
// * АдресСоответствияАкцизныхМарок - Строка, Неопределено - адрес во временном хранилище, где хранятся обработанные данные по штрихкодам
// * ДопустимыеВидыПродукции - Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Допустимые виды продукции, которые поддерживает контекст
// * ОтборПоВидуПродукции - Булево - Признак необходимости отбора кодов маркировки по виду продукции.
//                                   Используется при открытии форм проверки из документов конфигурации-потребителя
//                                   или при получении списка кодов маркировки из документов конфигурации-потребителя.
//                                   В документе конфигурации-потребителя может содержаться множество разных видов продукции.
// * КэшМаркируемойПродукции - Соответствие из КлючИЗначение, Неопределено - Используется для защиты от повторного сканирования кодов маркировки
// * РазрешенаОбработкаБезУказанияМарки - Булево - Признак возможности работы с товарами без указания кодов маркировки.
//                                                 Используется в формах сканирования кодов маркировки.
//                                                 Если флаг не установлен, то команда "Добавить без кода маркировки" скрывается.
// * РазрешенаОбработкаКодовСПустойНоменклатурой - Булево - Признак возможности обработки кодов маркировки без указания номенклатуры
// * РазрешеноЗапрашиватьКодМаркировки - Булево - Признак необходимости открытия формы сканирования кода маркировки после сканирования GTIN.
// * СопоставлятьНоменклатуру - Булево - Признак возможности сопоставления номенклатуры после сканирования кода маркировки.
// * ДоступнаПечатьЭтикеток - Булево - Признак доступности печати этикеток после сканирования EAN (Потоковая печать)
// * ДополнительныеВариантыСопоставленияНоменклатуры - Соответствие Из КлючИЗначение:
//    ** Ключ - Строка - Штрихкод EAN
//    ** Значение - Массив Из Структура:
//        *** Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура
//        *** Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика номенклатуры
//        *** Серия - ОпределяемыйТип.СерияНоменклатуры - Серия номенклатуры
// * ДанныеТаблицыТовары - Неопределено - Данные таблицы товары
// * РазрешенаОбработкаНеНайденныхЛогистическихУпаковок - Булево - Параметр используется в формах проверки и подбора в случае если документ
//                                                                 поддерживает операции агрегации.
// * ПоддерживаютсяОперацииАгрегации - Булево - Параметр работает в паре с параметром РазрешенаОбработкаНеНайденныхЛогистическихУпаковок.
//                                              Если для документ поддерживает операции агрегации, то в форме проверки разрешено работать
//                                              с пустыми упаковками.
// * КонтрольПустыхУпаковок - Булево - Признак необходимости контроля пустых упаковок при операциях сканирования.
//                                     Контроль выполняется для групповых и логистических упаковок.
// * ВыводитьСообщенияОбОшибках - Булево - Ложь, если вывод сообщений об ошибках запрещен
// * ПроверятьАлфавитКодовМаркировки - Булево - Признак необходимости проверки алфавита кодов маркировки
// * КонтролироватьСтандартнуюВложенность - Булево - Признак необходимости контроля стандартной вложенности
// * ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД - Булево - Истина, если необходимо пропускать коды маркировки с ошибками при работе с ТСД
// * ДетализацияСтруктурыХранения - Неопределено - Детализация данных сканирования.
// * ВосстанавливатьСтруктуруКодаМаркировки - Булево - Истина, если можно восстанавливать структуру полных кодов маркировки.
// * КонтролироватьСоставАгрегатов - Булево - 
// * ПроверятьСтруктуруКодовМаркировки - Булево - Признак проверки кода маркировки на полный состав
// * ПодсистемаИСМПСуществует - Булево - Признак включения в сборку подсистемы ИС МП
// * ЗапрашиватьКоличествоМерногоТовара - Булево -  Параметр работы с весовыми маркируемыми товарами:
//   Ложь - не запрашивать количество,
//   Истина - запрашивать количество.
// * СозданиеНаборов - Булево - Признак возможности создания наборов
// * РасширеннаяВерсияГосИС - Булево - Устанавливается при варианте сборки Расширенная
// * РежимБРМК - Булево - Режим работы штрихкодирования без открытия дополнительных форм
// * ЭтоМаркировкаТоваровИСМП - Булево - признак, что документ является документом Маркировка товаров ИС МП
Функция БазовыеПараметрыСканирования() Экспорт
	
	БазовыеПараметры = Новый Структура;
	
	БазовыеПараметры.Вставить("ДопустимыеВидыПродукции",                         Новый Массив);
	БазовыеПараметры.Вставить("ОтборПоВидуПродукции",                            Ложь);
	БазовыеПараметры.Вставить("КэшМаркируемойПродукции",                         Неопределено);
	БазовыеПараметры.Вставить("СоздаватьШтрихкодУпаковки",                       Истина);
	БазовыеПараметры.Вставить("ДокументОснование",                               Неопределено);
	БазовыеПараметры.Вставить("ВозможнаЗагрузкаТСД",                             Ложь);
	БазовыеПараметры.Вставить("ТолькоМаркируемаяПродукция",                      Ложь);
	БазовыеПараметры.Вставить("КэшированныеЗначения",                            Неопределено);
	БазовыеПараметры.Вставить("АдресДанныхДокументаОснования",                   Неопределено);
	БазовыеПараметры.Вставить("ИспользуетсяСоответствиеШтрихкодовСтрокДерева",   Ложь);
	БазовыеПараметры.Вставить("ДанныеВыбораПоМаркируемойПродукции",              Неопределено);
	БазовыеПараметры.Вставить("ИспользуютсяДанныеВыбораПоМаркируемойПродукции",  Ложь);
	БазовыеПараметры.Вставить("ДополнительныеВариантыСопоставленияНоменклатуры", Неопределено); // только для формы проверки и подбора
	БазовыеПараметры.Вставить("ДополнительныеПараметры",                         Новый Структура);
	БазовыеПараметры.Вставить("ОперацияКонтроляАкцизныхМарок",                   "");
	БазовыеПараметры.Вставить("ПараметрыУказанияСерий",                          Неопределено);
	БазовыеПараметры.Вставить("Склад",                                           Неопределено);
	БазовыеПараметры.Вставить("ИмяТабличнойЧастиШтрихкодыУпаковок",              "АкцизныеМарки");
	БазовыеПараметры.Вставить("ИмяКолонкиШтрихкодУпаковки",                      "АкцизнаяМарка");
	БазовыеПараметры.Вставить("КонтрольРасхожденийСДокументомОснованием",        Ложь);
	БазовыеПараметры.Вставить("РазрешенаОбработкаБезУказанияМарки",              Ложь);
	БазовыеПараметры.Вставить("РазрешеноЗапрашиватьКодМаркировки",               Истина);
	БазовыеПараметры.Вставить("СопоставлятьНоменклатуру",                        Истина);
	БазовыеПараметры.Вставить("Организация",                                     Неопределено);
	БазовыеПараметры.Вставить("ДоступнаПечатьЭтикеток",                          Ложь);
	БазовыеПараметры.Вставить("ДопустимыйСпособВводаВОборот",                    Неопределено);
	БазовыеПараметры.Вставить("ИдентификаторФормы",                              Неопределено);
	БазовыеПараметры.Вставить("Владелец",                                        Неопределено);
	БазовыеПараметры.Вставить("ПроверятьДублиКодовМаркировки",                   "НеПроверять");
	БазовыеПараметры.Вставить("ДанныеТаблицыТовары",                             Неопределено);
	БазовыеПараметры.Вставить("СсылкаНаОбъект",                                  Неопределено);
	БазовыеПараметры.Вставить("КонтрольУникальностиКодовМаркировки",             Истина);
	БазовыеПараметры.Вставить("РазрешенаОбработкаКодовСПустойНоменклатурой",     Ложь);
	БазовыеПараметры.Вставить("ДетализацияСтруктурыХранения",                    Неопределено);
	
	// Параметр работает в паре с параметром РазрешенаОбработкаНеНайденныхЛогистическихУпаковок.
	// Если для документ поддерживает операции агрегации, то в форме проверки разрешено работать
	// с пустыми упаковками.
	БазовыеПараметры.Вставить("ПоддерживаютсяОперацииАгрегации", Ложь);
	// Признак необходимости контроля пустых упаковок при операциях сканирования.
	// Контроль выполняется для групповых и логистических упаковок.
	БазовыеПараметры.Вставить("КонтрольПустыхУпаковок", Истина);
	// Параметр используется в формах проверки и подбора в случае если документ
	// поддерживает операции агрегации
	БазовыеПараметры.Вставить("РазрешенаОбработкаНеНайденныхЛогистическихУпаковок", Ложь);
	БазовыеПараметры.Вставить("КонтролироватьСоставАгрегатов", Ложь);
	
	БазовыеПараметры.Вставить("ВыводитьСообщенияОбОшибках",                Истина);
	БазовыеПараметры.Вставить("ПроверятьАлфавитКодовМаркировки",           Истина);
	БазовыеПараметры.Вставить("КонтролироватьСтандартнуюВложенность",      Ложь);
	БазовыеПараметры.Вставить("ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД", Ложь);
	БазовыеПараметры.Вставить("ПроверятьСтруктуруКодовМаркировки",         Истина);
	
	// Параметр работы с весовыми маркируемыми товарами:
	//   Ложь - не запрашивать количество,
	//   Истина - запрашивать количество.
	БазовыеПараметры.Вставить("ЗапрашиватьКоличествоМерногоТовара", Истина);
	
	// Доступность создания наборов
	БазовыеПараметры.Вставить("СозданиеНаборов", Ложь);
	
	БазовыеПараметры.Вставить("ПодсистемаИСМПСуществует", Истина);
	БазовыеПараметры.Вставить("РасширеннаяВерсияГосИС",   ОбщегоНазначенияИСКлиентСерверПовтИсп.ЭтоРасширеннаяВерсияГосИС());
	БазовыеПараметры.Вставить("РежимБРМК",                Ложь);
	
	// Частичное выбытие алкогольной продукции и маркирумой
	БазовыеПараметры.Вставить("ТребуетсяЧастичноеВыбытие",                Ложь);
	БазовыеПараметры.Вставить("ИмяКолонкиЧастичноеВыбытиеКоличество",     Неопределено);
	БазовыеПараметры.Вставить("ИмяКолонкиЧастичноеВыбытиеВариантУчета",   Неопределено);
	БазовыеПараметры.Вставить("ИмяКолонкиЧастичноеВыбытиеНоменклатура",   Неопределено);
	БазовыеПараметры.Вставить("ИмяКолонкиЧастичноеВыбытиеХарактеристика", Неопределено);
	
	//@skip-check constructor-function-return-section
	Возврат БазовыеПараметры;
	
КонецФункции

// Выполняет заполнение базовых параметров сканирования на основании данных контекста.
//  * Заполнение данных выбора (есть реквизит на форме, не выполняется групповая обработка)
//  * Заполнение кеша маркируемой продукции
//  * Заполнение параметров указания серий.
// 
// Параметры:
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  Контекст - ФормаКлиентскогоПриложения, ЛюбаяСсылка - контекст, данные которого будут использованы для заполнения параметров сканирования.
Процедура ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст) Экспорт
	
	Если ЭтоФормаПроверкиИПодбора(Контекст) Тогда
		ЗаполнитьБазовыеПараметрыСканирования(ПараметрыСканирования, Контекст.Контекст);
		Возврат;
	КонецЕсли;
		
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ПараметрыСканирования.Вставить("ИдентификаторФормы", Контекст.УникальныйИдентификатор);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ДанныеВыбораПоМаркируемойПродукции") Тогда
			ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции = Контекст.ДанныеВыбораПоМаркируемойПродукции;
			ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "КэшМаркируемойПродукции") Тогда
			ПараметрыСканирования.КэшМаркируемойПродукции = Контекст.КэшМаркируемойПродукции;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "ПараметрыУказанияСерий") Тогда
			ПараметрыСканирования.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
			ОбщегоНазначенияИСКлиентСерверПереопределяемый.ПриОпределенииПараметровУказанияСерий(
				ПараметрыСканирования.ПараметрыУказанияСерий, Контекст);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект")
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст.Объект, "Ссылка") Тогда
			ПараметрыСканирования.СсылкаНаОбъект = Контекст.Объект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ИсточникДанных = Контекст;
	Если Не Контекст = Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Контекст, "Объект") Тогда
		ИсточникДанных = Контекст.Объект;
	КонецЕсли;
	
	Если Не Контекст = Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Склад") Тогда
		ПараметрыСканирования.Склад = ИсточникДанных.Склад;
	КонецЕсли;
	
	Если Не Контекст = Неопределено И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникДанных, "Организация") Тогда
		ПараметрыСканирования.Владелец    = ИсточникДанных.Организация;
		ПараметрыСканирования.Организация = ИсточникДанных.Организация;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РазборШтрихкодов

// Дополняет штрихкод EAN лидирующими нулями.
//
// Параметры:
//  ШтрихкодEAN - Строка - Значение штрихкода EAN.
// Возвращаемое значение:
//  Строка - GTIN.
Функция GTINПоШтрихкодуEAN(Знач ШтрихкодEAN) Экспорт
	
	GTIN = ШтрихкодEAN;
	Пока СтрДлина(GTIN) < 14 Цикл
		GTIN = "0" + GTIN;
	КонецЦикла;
	
	Возврат GTIN;
	
КонецФункции

#КонецОбласти

#Область КодированиеДекодированиеBase64

Процедура ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода) Экспорт
	
	Если Не ДанныеШтрихкода.Свойство("ФорматBase64")
		Или (ДанныеШтрихкода.Свойство("ФорматBase64")
		И ДанныеШтрихкода.ФорматBase64 = Ложь) Тогда
		
		ДанныеШтрихкода.Штрихкод = ШтрихкодВBase64(ДанныеШтрихкода.Штрихкод);
		ДанныеШтрихкода.Вставить("ФорматBase64", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкода, СохранитьШтрихкодBase64 = Ложь) Экспорт
	
	Если ДанныеШтрихкода.Свойство("ФорматBase64")
		И ДанныеШтрихкода.ФорматBase64 = Истина Тогда
		
		ШтрихкодBase64 = ДанныеШтрихкода.Штрихкод;
		
		ДанныеШтрихкода.Штрихкод = Base64ВШтрихкод(ШтрихкодBase64);
		ДанныеШтрихкода.ФорматBase64 = Ложь;
		
		Если СохранитьШтрихкодBase64 Тогда
			ДанныеШтрихкода.Вставить("ШтрихкодBase64", ШтрихкодBase64);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Декодирует штрихкод по алгоритму Base64 в строковый формат.
// 
// Параметры:
//  ШтрихкодВBase64 - Строка - закодированный штрихкод.
// Возвращаемое значение:
//  Строка - Декодированный штрихкод.
Функция Base64ВШтрихкод(Знач ШтрихкодВBase64) Экспорт
	
	ДвоичныеДанные = Base64Значение(ШтрихкодВBase64);
	Если Не ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		Штрихкод = ШтрихкодВBase64;
	Иначе
		Штрихкод = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанные);
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Кодирует значение штрихкода по алгоритму Base64.
// 
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - штрихкод закодированный по алгоритму Base64.
Функция ШтрихкодВBase64(Знач Штрихкод) Экспорт
	
	ДвоичныеДанные  = ПолучитьДвоичныеДанныеИзСтроки(Штрихкод);
	ШтрихкодВBase64 = ОбщегоНазначенияИСКлиентСервер.ДвоичныеДанныеBase64(ДвоичныеДанные);
	
	Возврат ШтрихкодВBase64;
	
КонецФункции

#КонецОбласти

#Область Прочие

// Определяет допустимость обработки вида продукции по параметрам сканирования.
//
// Параметры:
//  ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования)
//  ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
// Возвращаемое значение:
//  Булево - Истина, если вид продукции допустим.
Функция ДопустимВидПродукции(ПараметрыСканирования, ВидПродукцииИС) Экспорт
	
	Если ПараметрыСканирования = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПараметрыСканирования.ДопустимыеВидыПродукции.Найти(ВидПродукцииИС) <> Неопределено;
	
КонецФункции

// Получает значение перечисления типа штрихкода по строке 
// 
// Параметры:
// 	ТипШтрихкодаСтрокой - Строка - тип штрихкода (например, Code128Формат1, GS1128, GS1DataBarExpandedStacked)
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыШтрихкодов - тип шаблона
Функция ТипШтрихкодаПоСтроке(ТипШтрихкодаСтрокой) Экспорт
	
	Если ТипШтрихкодаСтрокой = "SSCC" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC");
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
				Или ТипШтрихкодаСтрокой = "Code128Формат2" 
				Или ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128");	
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1_DataBarExpandedStacked" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked");
	ИначеЕсли ТипШтрихкодаСтрокой = "PDF417" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417");
	ИначеЕсли ТипШтрихкодаСтрокой = "QR" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.QR");
	ИначеЕсли ТипШтрихкодаСтрокой = "DataMatrix" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix");
	ИначеЕсли ТипШтрихкодаСтрокой = "EAN13" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.EAN13");
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1128" Тогда
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128");
	Иначе
		ЗначениеВозврата = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ЭтоСтрокаДанныхЧастичногоВыбытия(СтрокаДанных, ПараметрыСканирования, ВидПродукции = Неопределено, ПроверятьФлагВыбытия = Ложь) Экспорт
	
	Если ВидПродукции = Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ВидПродукции") Тогда
		ВидПродукции = СтрокаДанных.ВидПродукции;
	КонецЕсли;
	
	Если (ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ВидПродукции, Истина)
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"))
		И ПараметрыСканирования <> Неопределено
		И ПараметрыСканирования.Свойство("ТребуетсяЧастичноеВыбытие")
		И ПараметрыСканирования.ТребуетсяЧастичноеВыбытие
		И ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(
			ВидПродукции,
			ОперацияИС(ПараметрыСканирования, ВидПродукции))
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "ЧастичноеВыбытиеВариантУчета")
		И ЗначениеЗаполнено(СтрокаДанных.ЧастичноеВыбытиеВариантУчета) Тогда
		
		Если ПроверятьФлагВыбытия Тогда
			Возврат СтрокаДанных.ЧастичноеВыбытие;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОперацияИС(ПараметрыСканирования, ВидПродукции) Экспорт
	
	Операция = Неопределено;
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная") Тогда
		Если ПараметрыСканирования.Свойство("Операция") Тогда
			Операция = ПараметрыСканирования.Операция;
		КонецЕсли;
	ИначеЕсли ПараметрыСканирования.Свойство("ВидОперацииИСМП") Тогда
		Операция = ПараметрыСканирования.ВидОперацииИСМП;
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

// Возвращает сокращенное представление штрихкода маркируемой продукции
//
// Параметры:
//  Штрихкод - Строка - Штрихкод
// Возвращаемое значение:
//  Строка - Краткое представление штрихкода маркируемой продукции
Функция ПредставлениеШтрихкода(Штрихкод) Экспорт
	
	ПредставлениеШтрихкода = Штрихкод;
	Если СтрДлина(ПредставлениеШтрихкода) > 40 Тогда
		Если СтрНайти(Штрихкод, "(") = 1 Тогда
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 37) + "...";
		Иначе
			ПредставлениеШтрихкода =  Лев(ПредставлениеШтрихкода, 5) + "....." + Прав(ПредставлениеШтрихкода, 8);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеШтрихкода;
	
КонецФункции

Процедура ОбновитьНеобходимостьУточненияДанных(ДанныеШтрихкода) Экспорт
	
	Если ДанныеШтрихкода.Свойство("ТребуетсяВыборНоменклатуры")
		И ДанныеШтрихкода.ТребуетсяВыборНоменклатуры
		И ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		ДанныеШтрихкода.ТребуетсяВыборНоменклатуры = Ложь;
	КонецЕсли;
	
	Если ДанныеШтрихкода.Свойство("ТребуетсяВыборСерии")
		И ДанныеШтрихкода.ТребуетсяВыборСерии
		И ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		ДанныеШтрихкода.ТребуетсяВыборСерии = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Если код маркировки соответствует формату GS1 и может принадлежать альтернативной табачной продукции,
// то вид упаковки в некототорых случаях может быть пустым и принадлежать как потребительской, так и групповой упаковкам.
//
// Параметры:
//   ВидУпаковки - ПеречислениеСсылка.ВидыУпаковокИС - Вид упаковки
//   ДанныеРазбора - См. РазборКодаМаркировкиИССлужебныйКлиентСервер.НовыйРезультатРазбораКодаМаркировки
// Возвращаемое значение:
//   Булево - Истина, если Вид упаковки - групповая или если групповая упаковка возможна по данным разбора
Функция ВозможнаГрупповаяУпаковкаИлиНабор(ВидУпаковки, ДанныеРазбора) Экспорт
	
	Если ЗначениеЗаполнено(ВидУпаковки) Тогда
		Возврат (ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
			Или ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор"));
	КонецЕсли;
	
	Если ДанныеРазбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ДанныеРазбора.ВидыПродукции Цикл
		
		Если Не ОбщегоНазначенияИСКлиентСерверПовтИсп.ВидПродукцииИспользуетНаборыИлиГрупповыеУпаковки(ВидПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
			ВидПродукции, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"), ДанныеРазбора) Тогда
			Возврат Истина;
		ИначеЕсли РазборКодаМаркировкиИССлужебныйКлиентСервер.ВидУпаковкиСоответствуетРазбору(
			ВидПродукции, ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор"), ДанныеРазбора) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает параметры открытия формы уточнения данных у пользователя, таких как "Номенклатура", "Характеристика", "Серия".
// 
// Возвращаемое значение:
//  Структура - Описание:
// * ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// * ПараметрыУказанияСерий - Структура - данные для расчета серий.
// * ШтрихкодEAN - Строка - Штрихкода формата EAN.
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - Элемент Характеристика.
// * Номенклатура - ОпределяемыйТип.Номенклатура - Элемент Номенклатура.
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - Тип штрихкода кода маркировки.
// * КодМаркировки - Строка - Код маркировки.
// * ХешСуммаКодаМаркировки - Строка - Хэш кода маркировки.
Функция ПараметрыОткрытияФормыУточненияДанных() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("Операция",                               Неопределено);
	ПараметрыОткрытия.Вставить("ПараметрыСканирования",                  Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеДляУточненияСведенийПользователя", Неопределено);
	
	ПараметрыОткрытия.Вставить("ОбработатьБезМаркировки",          Ложь);
	ПараметрыОткрытия.Вставить("ЭтоШтрихкодНоменклатуры",          Ложь);
	ПараметрыОткрытия.Вставить("МаркируемаяПродукция",             Ложь);
	ПараметрыОткрытия.Вставить("КодМаркировки",                    Неопределено);
	ПараметрыОткрытия.Вставить("ТипШтрихкода",                     Неопределено);
	ПараметрыОткрытия.Вставить("ВидПродукции",                     Неопределено);
	ПараметрыОткрытия.Вставить("ВидУпаковки",                      Неопределено);
	
	ПараметрыОткрытия.Вставить("Номенклатура",                     Неопределено);
	ПараметрыОткрытия.Вставить("Характеристика",                   Неопределено);
	ПараметрыОткрытия.Вставить("ШтрихкодEAN",                      Неопределено);
	ПараметрыОткрытия.Вставить("GTIN",                             Неопределено);
	ПараметрыОткрытия.Вставить("Серия",                            Неопределено);
	ПараметрыОткрытия.Вставить("РежимПечатиЭтикеток",              Ложь);
	ПараметрыОткрытия.Вставить("ВозвращатьШаблонПриПечати",        Ложь);
	ПараметрыОткрытия.Вставить("ШаблонКодаМаркировки",             Неопределено);
	ПараметрыОткрытия.Вставить("ШаблонЭтикетки",                   Неопределено);
	ПараметрыОткрытия.Вставить("СразуНаПринтер",                   Ложь);
	ПараметрыОткрытия.Вставить("Шаблоны",                          Неопределено);
	ПараметрыОткрытия.Вставить("Документ",                         Неопределено);
	ПараметрыОткрытия.Вставить("ХешСуммаКодаМаркировки",           Неопределено);
	ПараметрыОткрытия.Вставить("ПредставлениеНоменклатуры",        Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеRFID",                       Неопределено);
	
	ПараметрыОткрытия.Вставить("Количество",                        1); // Коды маркировки переменного количества
	ПараметрыОткрытия.Вставить("КоличествоПотребительскихУпаковок", 0); // Для кодов ОСУ с выбором номенклатуры
	
	// Реквизиты молочной продукции ВетИС
	ПараметрыОткрытия.Вставить("ИдентификаторыПроисхожденияВЕТИС", Неопределено);
	ПараметрыОткрытия.Вставить("СкоропортящаясяПродукция",         Ложь);
	ПараметрыОткрытия.Вставить("ГоденДо",                          '00010101');
	
	// Режим подбора из заполненных строк документа
	ПараметрыОткрытия.Вставить("РежимПодбораИзДокумента",          Ложь);
	ПараметрыОткрытия.Вставить("РежимПроизвольногоВвода",          Истина);
	ПараметрыОткрытия.Вставить("ДанныеДокумента",                  Новый Массив);
	// Режим произвольного редактирования
	ПараметрыОткрытия.Вставить("ПроизвольноеРедактированиеРеквизитов", Ложь);
	// Для уточнения упаковок
	ПараметрыОткрытия.Вставить("АдресДереваУпаковок",              "");
	// Новый механизм - отдаем результат обработки кода маркировки
	ПараметрыОткрытия.Вставить("КодМаркировкиДляУточнения", Неопределено);
	ПараметрыОткрытия.Вставить("СоставКодаМаркировки",      Неопределено);
	
	// Частичное выбытие
	ПараметрыОткрытия.Вставить("ЧастичноеВыбытие",                    Ложь);
	ПараметрыОткрытия.Вставить("ЧастичноеВыбытиеВариантУчета",        Неопределено);
	ПараметрыОткрытия.Вставить("ЕмкостьПотребительскойУпаковки",      Неопределено);
	ПараметрыОткрытия.Вставить("ЧастичноеВыбытиеОстаток",             Неопределено);
	ПараметрыОткрытия.Вставить("ЧастичноеВыбытиеОстатокГИСМТ",        Неопределено);
	ПараметрыОткрытия.Вставить("ЧастичноеВыбытиеВыведено",            Неопределено);
	ПараметрыОткрытия.Вставить("ЧастичноеВыбытиеНеКорректныйОстаток", Неопределено);
	ПараметрыОткрытия.Вставить("ЧастичноеВыбытиеНоменклатура",        Неопределено);
	ПараметрыОткрытия.Вставить("ЧастичноеВыбытиеХарактеристика",      Неопределено);
	
	//@skip-check constructor-function-return-section
	Возврат ПараметрыОткрытия;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ТребуетсяИндивидуализацияRFID(ДанныеRFID, GTIN) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("НужноЗаписатьМетку", Ложь);
	Результат.Вставить("ТекстОшибки",        "");
	
	РезультатРасчетаНомера = МенеджерОборудованияКлиентСервер.ПолучитьСерийныйНомерПоTID(
		ДанныеRFID.TID,
		ДанныеRFID.EPC);
	
	СерийныйНомер = Неопределено;
	
	Если РезультатРасчетаНомера.Результат Тогда
		СерийныйНомер = Формат(РезультатРасчетаНомера.СерийныйНомер, "ЧГ=0");
	Иначе
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Номер серии должен быть сгенерирован по TID RFID-метки.
			           |При генерации произошла ошибка: %1. Обратитесь к администратору.'"),
			РезультатРасчетаНомера.ОписаниеОшибки);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(GTIN)
		Или GTIN = "00000000000000" Тогда
		Результат.НужноЗаписатьМетку = Истина;
	ИначеЕсли СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СерийныйНомер) <> Неопределено Тогда
		
		ДанныеEPC = МенеджерОборудованияКлиентСервер.СформироватьДанныеSGTIN96(
			GTIN, СерийныйНомер, 1);
		
		Если (Не МенеджерОборудованияКлиентСервер.ПустойEPC(ДанныеEPC)
			Или Не МенеджерОборудованияКлиентСервер.ПустойEPC(ДанныеRFID.EPC)) Тогда
			Результат.НужноЗаписатьМетку = ДанныеEPC <> ДанныеRFID.EPC;
		Иначе
			Результат.НужноЗаписатьМетку = Ложь;
		КонецЕсли;
		
	Иначе
		Результат.НужноЗаписатьМетку = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоФормаПроверкиИПодбора(Контекст) Экспорт
	
	Если ТипЗнч(Контекст)<> Тип("Структура") Тогда
		Возврат Ложь;
	ИначеЕсли Не Контекст.Свойство("ФормаПроверкиИПодбора") Тогда
		Возврат Ложь;
	ИначеЕсли Не Контекст.Свойство("Контекст") Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция КонтекстФормыПроверкиИПодбора(Форма, Контекст) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ФормаПроверкиИПодбора", Форма);
	Результат.Вставить("Контекст", Контекст);
	Возврат Результат;
	
КонецФункции

#КонецОбласти
