
#Область СлужебныйПрограммныйИнтерфейс

// Возвращает результат добавления штампов в документ.
//
// Параметры:
//   ПараметрыДобавленияШтампов - см. Интеграция1СШтампКлиентСервер.НовыеПараметрыДобавленияШтамповВДокумент
//   ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе - Число, Неопределено - Максимальное время ожидания получения
//                                                    результата из сервиса (не больше 600 сек). По умолчанию - 600 сек.
//
// Возвращаемое значение:
//  См. НовыйРезультатОбработкиДокумента
//
Функция РезультатДобавленияШтамповВДокумент(Знач ПараметрыДобавленияШтампов, Знач ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе = Неопределено) Экспорт
	
	// Создаем задание в очередь в сервисе
	ОтветСервиса = РезультатВыполненияЗапросаСоздатьЗаданиеВСервисеНаУстановкуШтамповВДокумент(ПараметрыДобавленияШтампов);
	
	Результат = НовыйРезультатОбработкиДокумента();
	
	Если Не ОтветСервиса.КодСостояния = Интеграция1СШтампКлиентСервер.КодСостоянияОжидание() Тогда
		Результат.ЕстьОшибки = Истина;
		Результат.ИнформацияОбОшибках = ОтветСервиса;
		Возврат Результат;
	КонецЕсли;
		
	Интервал     = ОтветСервиса.Интервал;
	URLРедиректа = ОтветСервиса.URLРедиректа;
	
	ДлительностьВыполненияЗапроса = ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе;
	МаксимальныйТаймаут = МаксимальнаяДлительностьВыполненияЗапроса();
	
	Если Не ЗначениеЗаполнено(ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе) Или
			ТаймаутПолученияСтатусаВыполненияЗаданияВСервисе > МаксимальныйТаймаут Тогда
				ДлительностьВыполненияЗапроса = МаксимальныйТаймаут;
	КонецЕсли;
	
	ГраничноеВремя = ТекущаяДатаСеанса() + ДлительностьВыполненияЗапроса;
	ОтветСервиса = РезультатПолученияСтатусаВыполненияЗадания(ГраничноеВремя, URLРедиректа, Интервал);
	
	Если ОтветСервиса = Неопределено Тогда
		
		ОписаниеОшибки = НСтр("ru='Превышена длительность ожидания получения результата добавления штампов в документ.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		
		Результат.ЕстьОшибки = Истина;
		Результат.ИнформацияОбОшибках.ТекстОшибки = ОписаниеОшибки;
				
		Возврат Результат;
		
	КонецЕсли;
	
	Если Не ОтветСервиса.КодСостояния = Интеграция1СШтампКлиентСервер.КодСостоянияВыполнено()
		И Не ОтветСервиса.КодСостояния = Интеграция1СШтампКлиентСервер.КодСостоянияРедиректаЗапроса() Тогда
			Результат.ЕстьОшибки = Истина;
			Результат.ИнформацияОбОшибках = ОтветСервиса;
		Возврат Результат;
	КонецЕсли;
	
	URLРедиректа = ОтветСервиса.URLРедиректа;
	
	ОтветСервиса = РезультатВыполненияЗапросаПолучитьРезультатВыполненияЗаданияУстановкиШтамповВДокумент(
		URLРедиректа);
	
	Если ОтветСервиса.КодСостояния <> Интеграция1СШтампКлиентСервер.КодСостоянияСоздано() Тогда
		
		Результат.ЕстьОшибки = Истина;
		Результат.ИнформацияОбОшибках = ОтветСервиса;
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтветСервиса.Данные) Тогда
		
		ОписаниеОшибки = НСтр("ru='Получен пустой результат ответа.'", 
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(НСтр("ru='Взаимодействие с сервисом 1С:Штамп.'", 
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ОписаниеОшибки);
		
		Результат.ЕстьОшибки = Истина;
		Результат.ИнформацияОбОшибках = ОтветСервиса;
		Результат.ИнформацияОбОшибках.ТекстОшибки = ОписаниеОшибки;
				
		Возврат Результат;
		
	КонецЕсли;
	
	Результат.ЕстьРезультат       = Истина;
	Результат.ИнформацияОбОшибках = ОтветСервиса;
	Результат.ДвоичныеДанные      = ИзвлеченнныйФайлИзАрхива(ОтветСервиса.Данные);
	
	Возврат Результат;
	
КонецФункции

// См. Интеграция1СШтампПовтИсп.ПараметрыСоединения
Функция ПараметрыСоединения(Знач АдресСервиса) Экспорт
	
	Если Не ЗначениеЗаполнено(АдресСервиса) Тогда
		ВызватьИсключение НСтр("ru = 'Не указан адрес сервиса'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	Результат = НовыеПараметрыСоединения(АдресСервиса, 443, Истина);
	Результат.Аутентификация = Ложь;
	Результат.Таймаут = 120;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыОбращенияКСервису

// Возвращает результат создания задания в очереди сервиса.
//
// Параметры:
//  ПараметрыДобавленияШтампов - см. Интеграция1СШтампКлиентСервер.НовыеПараметрыДобавленияШтамповВДокумент.
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияЗапроса
//
Функция РезультатВыполненияЗапросаСоздатьЗаданиеВСервисеНаУстановкуШтамповВДокумент(Знач  ПараметрыДобавленияШтампов)
	
	ТелоЗапроса = ТелоЗапросаДобавитьШтампыВДокумент(ПараметрыДобавленияШтампов);
	Результат = РезультатВыполненияПрикладныхПроверокПередОтправкойЗапроса(ТелоЗапроса);
	
	Если Не Результат.КодСостояния = Интеграция1СШтампКлиентСервер.КодСостоянияВыполнено() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗапросКСервису = ЗапросКСервисуДобавитьШтампыВДокумент(ТелоЗапроса);
	Результат = ВыполнитьЗапрос(ЗапросКСервису);
	
	Возврат Результат;
	
КонецФункции

// Возвращает статус задания в сервисе.
//
// Параметры:
//  АдресКРесурсу - Строка - URL для выполнения rest запроса;
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияЗапроса
//
Функция РезультатВыполненияЗапросаПолучитьСтатусЗаданияУстановкиШтамповВДокумент(Знач АдресКРесурсу)
	
	ЗапросКСервису = ЗапросКСервисуПолучитьСтатусВыполнения(АдресКРесурсу);
	Результат = ВыполнитьЗапрос(ЗапросКСервису);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результат выполнения задания в сервисе.
//
// Параметры:
//  АдресКРесурсу - Строка - URL для выполнения rest запроса;
// 
// Возвращаемое значение:
//  См. НовыйРезультатВыполненияЗапроса
//
Функция РезультатВыполненияЗапросаПолучитьРезультатВыполненияЗаданияУстановкиШтамповВДокумент(Знач АдресКРесурсу)
	
	ЗапросКСервису = ЗапросКСервисуПолучитьРезультатВыполнения(АдресКРесурсу);
	Результат = ВыполнитьЗапрос(ЗапросКСервису);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ВыполнениеЗапросов

Функция ЗапросКСервисуДобавитьШтампыВДокумент(Знач ТелоЗапроса)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = АдресЗапросаДобавитьШтамп();
	ЗапросСервиса.ТипПередаваемогоКонтента = ТипИсходящегоКонтентаДанныеДокументаИШтампов();	
	ЗапросСервиса.Метод                    = "POST";
	ЗапросСервиса.Данные                   = ТелоЗапроса;
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(Интеграция1СШтампКлиентСервер.КодСостоянияОжидание());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Добавление штампов в документ в сервисе 1С:Штамп'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросКСервисуПолучитьСтатусВыполнения(Знач АдресОбращения)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = АдресОбращения;
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(Интеграция1СШтампКлиентСервер.КодСостоянияВыполнено());
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(Интеграция1СШтампКлиентСервер.КодСостоянияРедиректаЗапроса());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение статуса добавления штампов в документ в сервисе 1С:Штамп'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ЗапросКСервисуПолучитьРезультатВыполнения(Знач АдресОбращения)
	
	ЗапросСервиса = НовыйЗапросСервиса();
	ЗапросСервиса.СтрокаЗапроса            = АдресОбращения;
	ЗапросСервиса.ТипВозвращаемогоКонтента = ТипВходящегоКонтентаРезультатШтампированияАрхивСДокументом();
	ЗапросСервиса.Метод                    = "GET";
	ЗапросСервиса.ДопустимыеКодыСостояния.Добавить(Интеграция1СШтампКлиентСервер.КодСостоянияСоздано());
	ЗапросСервиса.Наименование =
		НСтр("ru = 'Получение результата добавления штампов в документ в сервисе 1С:Штамп'", ОбщегоНазначения.КодОсновногоЯзыка());
		
	Возврат ЗапросСервиса;
	
КонецФункции

Функция ВыполнитьЗапрос(Знач ЗапросСервиса)
	
	Отказ = Ложь;
	ТекстОшибки  ="";
	
	РезультатВыполнения = НовыйРезультатВыполненияЗапроса();
		
	// Установка параметров соединения.
	
	ПараметрыСоединения = Интеграция1СШтампПовтИсп.ПараметрыСоединения(ЗапросСервиса.АдресСервиса);
	
	// Установка времени ожидания ответа.
	Если ЗапросСервиса.Свойство("Таймаут") И ЗапросСервиса.Таймаут <> 0 Тогда
		Таймаут = ЗапросСервиса.Таймаут;
	Иначе
		Таймаут = ПараметрыСоединения.Таймаут;
	КонецЕсли;
	
	// Инициализация соединения с сервисом.
	Попытка
		Соединение = Новый HTTPСоединение(ПараметрыСоединения.Сервер, ПараметрыСоединения.Порт,,,
			ПараметрыСоединения.Прокси, Таймаут, ПараметрыСоединения.ЗащищенноеСоединение);
	Исключение
		ТекстОшибки = НСтр("ru='Отсутствует соединение с сервисом 1С:Штамп. Подробности см. в журнале регистрации.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		РезультатВыполнения.ТекстОшибки  = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросСервиса, ТекстОшибки);
		РезультатВыполнения.КодСостояния = Интеграция1СШтампКлиентСервер.КодСостоянияСервисНеОтвечает();
		Возврат РезультатВыполнения;
	КонецПопытки;

	// Установка параметров запроса.
	HTTPЗапрос = Новый HTTPЗапрос(ЗапросСервиса.СтрокаЗапроса, ЗапросСервиса.Заголовки);
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ТипПередаваемогоКонтента) Тогда
		ИмяЗаголовкаТипПередаваемогоКонтента = НРег(ИмяЗаголовкаТипПередаваемогоКонтента());
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипПередаваемогоКонтента,
			ЗапросСервиса.ТипПередаваемогоКонтента);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗапросСервиса.ТипВозвращаемогоКонтента) Тогда
		ИмяЗаголовкаТипВозвращаемогоКонтента = НРег(ИмяЗаголовкаТипВозвращаемогоКонтента());
		HTTPЗапрос.Заголовки.Вставить(ИмяЗаголовкаТипВозвращаемогоКонтента,
			ЗапросСервиса.ТипВозвращаемогоКонтента);
	КонецЕсли;
	
	// Установка тела запроса.
	Если ЗначениеЗаполнено(ЗапросСервиса.Данные) Тогда
		Если ТипЗнч(ЗапросСервиса.Данные) = Тип("ДвоичныеДанные") Тогда
			HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ЗапросСервиса.Данные);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ЗапросСервиса.Данные, КодировкаТекста.UTF8,
				ИспользованиеByteOrderMark.НеИспользовать);
		КонецЕсли;
	КонецЕсли;
	
	// Выполнение запроса
	Попытка
		HTTPОтвет = Соединение.ВызватьHTTPМетод(ЗапросСервиса.Метод, HTTPЗапрос);
	Исключение
		ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатВыполнения.ТекстОшибки  = ЗафиксироватьОшибкуВЗапросе(Соединение, ЗапросСервиса, ПодробноеОписаниеОшибки, Отказ);
		РезультатВыполнения.КодСостояния = Интеграция1СШтампКлиентСервер.КодСостоянияСервисНеОтвечает();
		Возврат РезультатВыполнения;
	КонецПопытки;
	
	// Разбор тела ответа
	ОбработатьОтветСервиса(HTTPОтвет, ЗапросСервиса, РезультатВыполнения, Отказ);
	
	Если Отказ Или Не ПустаяСтрока(ТекстОшибки) Тогда
		РезультатВыполнения.ТекстОшибки = ЗафиксироватьОшибкуВЗапросе(ПараметрыСоединения, ЗапросСервиса, РезультатВыполнения.ТекстОшибки);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция НовыйЗапросСервиса()
	
	ЗапросСервиса = Новый Структура;
	ЗапросСервиса.Вставить("АдресСервиса"                 , АдресСервиса());
	ЗапросСервиса.Вставить("Наименование"                 , "");
	ЗапросСервиса.Вставить("СтрокаЗапроса"                , "");
	ЗапросСервиса.Вставить("Метод"                        , "");
	ЗапросСервиса.Вставить("Данные"                       , Неопределено);
	ЗапросСервиса.Вставить("Ошибки"                       , Новый Соответствие);
	ЗапросСервиса.Вставить("БлокироватьСообщенияОбОшибках", Ложь);
	ЗапросСервиса.Вставить("Заголовки"                    , Новый Соответствие);
	ЗапросСервиса.Вставить("ТипПередаваемогоКонтента"     , "");
	ЗапросСервиса.Вставить("ТипВозвращаемогоКонтента"     , "");
	ЗапросСервиса.Вставить("ДопустимыеКодыСостояния"      , Новый Массив());

	Возврат ЗапросСервиса;
	
КонецФункции

Функция ТелоЗапросаДобавитьШтампыВДокумент(ПараметрыДобавленияШтампов)
	
	СтруктураТелаЗапроса = НоваяСтруктураТелаJSON();
	
	РасширениеДокумента     = ПараметрыДобавленияШтампов.ПараметрыДокумента.Расширение;
	ДвоичныеДанныеДокумента = ПараметрыДобавленияШтампов.ПараметрыДокумента.ДвоичныеДанные;
	
	АрхивДанных = ДвоичныеДанныеФайлаВАрхиве(ДвоичныеДанныеДокумента, РасширениеДокумента);
	
	СтруктураТелаЗапроса.document.data      = Base64Строка(АрхивДанных);
	СтруктураТелаЗапроса.document.extension = РасширениеДокумента;
	
	СловарьЗначенийРазмещения = СловарьЗначенийРазмещения();
	СловарьПравилРасположений = СловарьПравилРасположений();
	
	МассивСвойствШтампов = Новый Массив;
	
	Для Каждого ПараметрыКартинкиШтампа Из ПараметрыДобавленияШтампов.ПараметрыШтампов Цикл
		
		СтруктураСвойствШтампа = НоваяСтруктураСвойствШтампаJSON();
		
		ДвоичныеДанныеКартинки = ПараметрыКартинкиШтампа.ПараметрыШтампа.ДвоичныеДанные;
		РасширениеКартинки     = ПараметрыКартинкиШтампа.ПараметрыШтампа.Расширение;
		
		АрхивДанных = ДвоичныеДанныеФайлаВАрхиве(ДвоичныеДанныеКартинки, РасширениеКартинки);
		
		СтруктураСвойствШтампа.stamp.data                        = Base64Строка(АрхивДанных);
		СтруктураСвойствШтампа.stamp.extension                   = РасширениеКартинки;
		
		СтруктураСвойствШтампа.location.position = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			СловарьЗначенийРазмещения,
			ПараметрыКартинкиШтампа.ПараметрыРазмещения.Расположение);
		
		СтруктураСвойствШтампа.location.coordinates.top          = ПараметрыКартинкиШтампа.ПараметрыРазмещения.Координаты.Верх;
		СтруктураСвойствШтампа.location.coordinates.left         = ПараметрыКартинкиШтампа.ПараметрыРазмещения.Координаты.Лево;
		
		СтруктураСвойствШтампа.rules.addingRule = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			СловарьПравилРасположений,
			ПараметрыКартинкиШтампа.ПравилаРасположения.ПравилоРасположения);
			
		СтруктураСвойствШтампа.rules.pageNumber                  = ПараметрыКартинкиШтампа.ПравилаРасположения.НомерСтраницы;
		
		СтруктураСвойствШтампа.coefficient                       = ПараметрыКартинкиШтампа.КоэффициентИзмененияРазмера;
		СтруктураСвойствШтампа.indentation                       = ПараметрыКартинкиШтампа.ОтступОтГраниц;
		СтруктураСвойствШтампа.settings.transparency.transparent = ПараметрыКартинкиШтампа.Настройки.Прозрачность.Прозрачный;
		СтруктураСвойствШтампа.settings.transparency.level       = ПараметрыКартинкиШтампа.Настройки.Прозрачность.Уровень;
		
		МассивСвойствШтампов.Добавить(СтруктураСвойствШтампа);
		
	КонецЦикла;
	
	СтруктураТелаЗапроса.stamps = МассивСвойствШтампов;
	
	Возврат ОбщегоНазначенияБЭД.JSONСтрока(СтруктураТелаЗапроса);
	
КонецФункции

Функция ЗафиксироватьОшибкуВЗапросе(Знач ПараметрыСоединения, Знач ЗапросСервиса,
	Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	ПодробноеОписаниеОшибки = "";
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка взаимодействия с сервисом 1С:Штамп'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Хост: %1'"), ПараметрыСоединения.Сервер));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Запрос: %1 %2.'"), ЗапросСервиса.Метод,
		ЗапросСервиса.СтрокаЗапроса));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	ПодробноеОписаниеОшибки = СтрСоединить(ПредставлениеОшибки, Символы.ПС);

	ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы());
	
	ПредставлениеОшибкиДляПользователя = НСтр("ru='Произошла ошибка работы с сервисом 1С:Штамп.
										|Подробности см. в журнале регистрации.'");
	
	ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибкиДляПользователя);

	Возврат ПодробноеОписаниеОшибки;

КонецФункции

Функция ОбработатьОтветСервиса(Знач HTTPОтвет, Знач ЗапросСервиса, Результат, Отказ)
	
	ТекстОшибки = "";
	Результат.КодСостояния = HTTPОтвет.КодСостояния;
	
	Если Не ЗапросВыполненКорректно(ЗапросСервиса, HTTPОтвет, ТекстОшибки) Тогда
		Результат.ТекстОшибки = ТекстОшибки;
		Отказ = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.КодСостояния <> 
		Интеграция1СШтампКлиентСервер.КодСостоянияСоздано() Тогда
			Результат.URLРедиректа = URLРедиректа(HTTPОтвет, ТекстОшибки);
			Результат.Интервал = ИнтервалПовторногоОбращения(HTTPОтвет, ТекстОшибки);
	КонецЕсли;
	
	Если Результат.КодСостояния = Интеграция1СШтампКлиентСервер.КодСостоянияРедиректаЗапроса() Тогда
		Результат.Интервал = 0;
	КонецЕсли;
	
	Результат.ТекстОшибки = ТекстОшибки;
	Результат.Данные = HTTPОтвет.ПолучитьТелоКакДвоичныеДанные();
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросВыполненКорректно(Знач ЗапросСервиса, Знач HTTPОтвет, ТекстОшибки = "")
	
	КодСостояния = HTTPОтвет.КодСостояния;
	
	Если ЗапросСервиса.ДопустимыеКодыСостояния.Количество() = 0
		Или ЗапросСервиса.ДопустимыеКодыСостояния.Найти(КодСостояния) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗапросСервиса.Ошибки.Получить(КодСостояния) <> Неопределено Тогда
		ТекстОшибки = ЗапросСервиса.Ошибки.Получить(КодСостояния);
		Возврат Ложь;
	КонецЕсли;
	
	КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	ПодстрокиОшибки = Новый Массив;
	Если ЕстьПодробноеОписаниеОшибки(HTTPОтвет) Тогда
		ОписаниеОшибки = ОбщегоНазначенияБЭД.JSONЗначение(HTTPОтвет.ПолучитьТелоКакПоток());
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Код состояния %1 - %2'", КодЯзыка),
			XMLСтрока(КодСостояния), ОписаниеОшибки.title));
		
		ИдентификаторТрассировки = ЗначениеКоллекцииПоАбсолютномуПути(ОписаниеОшибки, "traceId");
		Если ЗначениеЗаполнено(ИдентификаторТрассировки) Тогда
			ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Идентификатор трассировки: %1'", КодЯзыка),
			ИдентификаторТрассировки));
		КонецЕсли;
		
	Иначе
		ТекстОшибки = ИнтернетСоединениеБЭД.РасшифровкаКодаСостоянияHTTP(КодСостояния);
		Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
			Если КодСостояния >= 500 Тогда
				ТекстОшибки = НСтр("ru = 'внутренняя ошибка сервиса'", КодЯзыка);
			ИначеЕсли КодСостояния >= 400 Тогда
				ТекстОшибки = НСтр("ru = 'ошибка параметров запроса'", КодЯзыка);
			Иначе
				ТекстОшибки = НСтр("ru = 'неизвестная ошибка'", КодЯзыка);
			КонецЕсли;
		КонецЕсли;
		
		ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Код состояния %1 - %2'", КодЯзыка),
			XMLСтрока(КодСостояния), ТекстОшибки));
		
		Тело = "";
		Попытка
			Тело = HTTPОтвет.ПолучитьТелоКакСтроку();
			Если Не ПустаяСтрока(Тело) Тогда
				ПодстрокиОшибки.Добавить(СтрШаблон(НСтр("ru='Тело ответа: %1'", КодЯзыка), Тело));
			КонецЕсли;
		Исключение
			ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы());
		КонецПопытки;
	КонецЕсли;
	
	ТекстОшибки = СтрСоединить(ПодстрокиОшибки, Символы.ПС);
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьПодробноеОписаниеОшибки(Знач HTTPОтвет)
	
	ИмяЗаголовкаТипВозвращаемогоКонтента = НРег(ИмяЗаголовкаТипВозвращаемогоКонтента());
	Возврат HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаТипВозвращаемогоКонтента) = ТипВходящегоКонтентаОшибка();
	
КонецФункции

Функция URLРедиректа(Знач HTTPОтвет, ТекстОшибки = Неопределено)
	
	ИмяЗаголовкаРедиректа = НРег(ИмяЗаголовкаРедиректа());
	
	Результат = HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаРедиректа);

	Если Результат <> Неопределено Тогда
		Результат = СокрЛП(Результат);
		Если ПустаяСтрока(Результат) Тогда
			Результат = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при выполнении запроса %1. Некорректное перенаправление,
				 | отсутствует HTTP-заголовок ответа ""location"".'", ОбщегоНазначения.КодОсновногоЯзыка()), HTTPОтвет);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ИнтервалПовторногоОбращения(Знач HTTPОтвет, ТекстОшибки = Неопределено)
	
	ИмяЗаголовкаПериодОжидания = НРег(ИмяЗаголовкаПериодОжидания());
	
	Результат = HTTPОтвет.Заголовки.Получить(ИмяЗаголовкаПериодОжидания);

	Если Результат <> Неопределено Тогда
		Результат = СокрЛП(Результат);
		Если ПустаяСтрока(Результат) Тогда
			Результат = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если Результат = Неопределено Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при выполнении запроса %1.
				 | Отсутствует HTTP-заголовок ответа ""retry-after"".'", ОбщегоНазначения.КодОсновногоЯзыка()), HTTPОтвет);
	КонецЕсли;

	ЧисловойТип = Новый ОписаниеТипов("Число");
	Результат   = ЧисловойТип.ПривестиЗначение(Результат);

	Возврат Результат;
	
КонецФункции

// Возвращает конструктор параметров результата выполнения запроса
//
// Возвращаемое значение:
// 	Структура: 
//    * КодСостояния - Число     - Код состояния http ответа.
//    * Данные       - Структура - Данные ответа сервиса.
//    * URLРедиректа - Строка    - URL адрес для повторного обращения.
//    * Интервал     - Число     - Интервал (в секундах) для повторного обращения к сервису.
//    * ТекстОшибки  - Строка    - Текст ошибки на стороне сервиса.
//
Функция НовыйРезультатВыполненияЗапроса()
	
	Результат = Новый Структура;
	Результат.Вставить("КодСостояния"  , 200);
	Результат.Вставить("Данные"      );
	Результат.Вставить("URLРедиректа"  , "");
	Результат.Вставить("Интервал"      , 0);
	Результат.Вставить("ТекстОшибки"   , "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает конструктор параметров результата выполнения запроса
//
// Возвращаемое значение:
// 	Структура: 
//    * ЕстьОшибки          - Булево         - Признак наличия ошибок.
//    * ИнформацияОбОшибках - см. НовыйРезультатВыполненияЗапроса
//    * ЕстьРезультат       - Булево         - Признак успешного выполнения запроса.
//    * ДвоичныеДанные      - ДвоичныеДанные - Двоичные данные результата.
//
Функция НовыйРезультатОбработкиДокумента() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки"         , Ложь);
	Результат.Вставить("ИнформацияОбОшибках", НовыйРезультатВыполненияЗапроса());
	Результат.Вставить("ЕстьРезультат"      , Истина);
	Результат.Вставить("ДвоичныеДанные"     , Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатПолученияСтатусаВыполненияЗадания(Знач ГраничноеВремя, Знач URLРедиректа, Знач Интервал)
		
	Пока Истина Цикл
		
		Пауза(Интервал);
		
		Результат = РезультатВыполненияЗапросаПолучитьСтатусЗаданияУстановкиШтамповВДокумент(URLРедиректа);
		
		Если Результат.КодСостояния <> Интеграция1СШтампКлиентСервер.КодСостоянияВыполнено() Тогда
			Прервать;
		КонецЕсли;
		
		Если ГраничноеВремя <= ТекущаяДатаСеанса() Тогда
			ОписаниеОшибки = НСтр("ru='Превышена длительность ожидания получения файла.'");
			ЗаписьЖурналаРегистрации(НСтр("ru='Взаимодействие с сервисом 1С:Штамп.'", 
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ОписаниеОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		Таймаут = ТаймаутОжидания();
		Если Интервал > Таймаут Тогда
			Интервал = Таймаут;
		КонецЕсли;
		
		Интервал     = Результат.Интервал;
		URLРедиректа = Результат.URLРедиректа;
		
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПараметрыАдресаКСервису

Функция АдресСервиса()
	
	Возврат "stamp-api.1c.ru";
	
КонецФункции

Функция ИмяПодсистемы()
	
	Возврат ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().СервисШтампированияФайлов;
	
КонецФункции

Функция АдресЗапросаДобавитьШтамп()
	
	Возврат "stamp/hs/stamp";
	
КонецФункции 

#КонецОбласти

#Область Словарь

Функция ТипИсходящегоКонтентаДанныеДокументаИШтампов()
	
	Возврат "application/vnd.1cstamp.stamp.v2+json";
	
КонецФункции

Функция ТипВходящегоКонтентаРезультатШтампированияАрхивСДокументом()
	
	Возврат "application/vnd.1cstamp.stampResult+zip";
	
КонецФункции

Функция ТипВходящегоКонтентаОшибка()
	
	Возврат "application/problem+json";
	
КонецФункции

Функция ИмяЗаголовкаРедиректа()
	
	Возврат "Location";
	
КонецФункции

Функция ИмяЗаголовкаПериодОжидания()
	
	Возврат "Retry-After";
	
КонецФункции

Функция ИмяЗаголовкаТипПередаваемогоКонтента()
	
	Возврат "Content-Type";
	
КонецФункции

Функция ИмяЗаголовкаТипВозвращаемогоКонтента()
	
	Возврат "Accept";
	
КонецФункции

#КонецОбласти

Функция ДвоичныеДанныеФайлаВАрхиве(ДвоичныеДанные, РасширениеФайла)
	
	ПредставлениеОшибкиДляПользователя = НСтр("ru='Произошла ошибка работы с сервисом 1С:Штамп.
											|Подробности см. в журнале регистрации.'");
	ПараметрыЗаписиВЖурналРегистрации = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
	ПараметрыЗаписиВЖурналРегистрации.Данные = "ЭлектронныеДокументыЭДО.ПредставлениеДанныхДокумента";
	Если ПустаяСтрока(РасширениеФайла) Тогда
		
		ПодробноеОписаниеОшибки = НСтр("ru = 'Не указано расширение файла.'", ОбщегоНазначения.КодОсновногоЯзыка());

		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы()
			,, ПараметрыЗаписиВЖурналРегистрации);
	
		ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибкиДляПользователя);
			
		ВызватьИсключение ПодробноеОписаниеОшибки;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДвоичныеДанные) Тогда
		
		ПодробноеОписаниеОшибки = НСтр("ru = 'Не указаны двоичные данные файла.'", ОбщегоНазначения.КодОсновногоЯзыка());

		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы()
			,, ПараметрыЗаписиВЖурналРегистрации);
	
		ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибкиДляПользователя);
			
		ВызватьИсключение ПодробноеОписаниеОшибки;
		 
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	
	Попытка
	
		ДвоичныеДанные.Записать(ИмяФайла);
	
		ЗаписьZipФайла = Новый ЗаписьZipФайла();
		ЗаписьZipФайла.Добавить(ИмяФайла);
		Архив = ЗаписьZipФайла.ПолучитьДвоичныеДанные(,,, УровеньСжатияZIP.Максимальный)
		
		
	Исключение
		
		ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы()
			,, ПараметрыЗаписиВЖурналРегистрации);
	
		ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибкиДляПользователя);
			
		ВызватьИсключение ПодробноеОписаниеОшибки;
	КонецПопытки;
		
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ПодробноеОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
		ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ПодробноеОписаниеОшибки, ИмяПодсистемы()
			,, ПараметрыЗаписиВЖурналРегистрации);
	
		ПредставлениеОшибкиДляПользователя = НСтр("ru='Произошла ошибка работы с сервисом 1С:Штамп.
											|Подробности см. в журнале регистрации.'");
	
		ОбщегоНазначения.СообщитьПользователю(ПредставлениеОшибкиДляПользователя);
			
		ВызватьИсключение ПодробноеОписаниеОшибки;
	КонецПопытки;
	
	Возврат Архив;
	
КонецФункции

// Извлекает двоичные данные файла из архива.
//
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные - Двоичные данные архива.
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные файла в архиве.
//
Функция ИзвлеченнныйФайлИзАрхива(ДвоичныеДанные)
	
	Событие = НСтр("ru = 'Извлечение файла из архива. 1С:Штамп'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		
		ЧтениеZip = Новый ЧтениеZipФайла(ДвоичныеДанные.ОткрытьПотокДляЧтения());
		КоличествоФайлов = ЧтениеZip.Элементы.Количество();
		
		Если КоличествоФайлов = 0 Тогда
			ОписаниеОшибки = НСтр(
					"ru = 'Не найдены файлы в архиве.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
					
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;
		
		Если КоличествоФайлов > 1 Тогда
			ОписаниеОшибки = НСтр(
					"ru = 'Обнаружено более одного файла в архиве.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
					
			ВызватьИсключение ОписаниеОшибки;
			
		КонецЕсли;
		
		ИзвлекаемыйФайл = ЧтениеZip[0];
		
		ИмяФайла = ИзвлекаемыйФайл.Имя;
		Каталог  = ПолучитьИмяВременногоФайла();
		
		ЧтениеZip.Извлечь(ИзвлекаемыйФайл, Каталог);
		ЧтениеZip.Закрыть();
		
	Исключение
		
		ОписаниеОшибки = СтрШаблон(НСтр(
					"ru = 'Не удалось извлечь файл из архива по причине: %1.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			
		ВызватьИсключение ОписаниеОшибки;
		
	КонецПопытки;
	
	ДанныеФайла = Новый ДвоичныеДанные(Каталог + ПолучитьРазделительПути() + ИмяФайла);
	
	Событие = НСтр("ru = 'Удаление временных файлов'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	Попытка
		УдалитьФайлы(Каталог);
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
		ЗаписьЖурналаРегистрации(Событие,
			УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			
	КонецПопытки;

	Возврат ДанныеФайла;
	
КонецФункции

// Возвращает структуру тела запроса JSON.
//
// Возвращаемое значение:
//   Структура: 
//    * document   - Структура - Параметры документа:
//      ** data      - ДвоичныеДанные - Двоичные данные zip архива с данными документа.
//      ** extension - Строка         - Значение расширения файла. 
//    * stamps - Массив из  см. НоваяСтруктураСвойствШтампаJSON.
//
Функция НоваяСтруктураТелаJSON()
	
	СтруктураТела = Новый Структура;
	
	СтруктураТела.Вставить("document");
	СтруктураТела.Вставить("stamps");
	
	СвойстваДокумента = Новый Структура;
	
	СвойстваДокумента.Вставить("data");
	СвойстваДокумента.Вставить("extension");
	
	СтруктураТела.document = СвойстваДокумента;
	
	Возврат СтруктураТела;
	
КонецФункции

// Возвращает структуру свойств штампа в JSON.
//
// Возвращаемое значение:
//   Структура: 
//    * stamp       - Структура - Параметры файла картинки штампа:
//      ** data      - ДвоичныеДанные - Двоичные данные zip архива с данными картинки штампа.
//      ** extension - Строка         - Значение расширения картинки штампа.
//    * location   - Структура      - Параметры размещения картинки штампа на странице документа:
//       ** position    - Строка    - Значение расположения картинки штампа на странице документа.
//       ** coordinates - Структура - Данные координат размещения в пикселях:
//           *** top  - Число - Значение отступа в пикселях от верхней границы страницы документа.
//           *** left - Число - Значение отступа в пикселях от левой границы страницы документа.
//    * rules - Структура - Правила расположения картинки штампа на страницах документа:
//       ** addingRule - Строка- Значение правила размещения картинки штампа на страницах документа.
//       ** pageNumber - Число - Номер страницы документа для расположения картинки штампа.
//    * coefficient - Число         - Коэффициент изменения размера картинки штампа.
//    * indentation - Число         - Отступ от границ страницы документа в пикселях при установке картинки штампа.
//    * settings    - Структура     - Настройки картинки штампа на странице документа:
//       ** transparency - Структура - Настройки прозрачности картинки штампа:
//            *** transparent - Булево - Признак использования прозрачности.
//            *** level       - Число - Значение уровня прозрачности от 0 до 255, где 0 - 100% значение прозрачности. 
//
Функция НоваяСтруктураСвойствШтампаJSON()
	
	СтруктураШтампа = Новый Структура;
	
	СтруктураШтампа.Вставить("stamp");
	СтруктураШтампа.Вставить("location");
	СтруктураШтампа.Вставить("rules");
	СтруктураШтампа.Вставить("coefficient" , 1);
	СтруктураШтампа.Вставить("indentation" , 10);
	СтруктураШтампа.Вставить("settings");
	
	СвойстваШтампа = Новый Структура;
	
	СвойстваШтампа.Вставить("data"      , Неопределено);
	СвойстваШтампа.Вставить("extension" , "");
	
	СтруктураРазмещение = Новый Структура;
	
	СтруктураРазмещение.Вставить("coordinates");
	СтруктураРазмещение.Вставить("position", "");
	
	СтруктураКоординаты = Новый Структура;
	
	СтруктураКоординаты.Вставить("top", 0);
	СтруктураКоординаты.Вставить("left", 0);
	
	СтруктураРазмещение.coordinates = СтруктураКоординаты;
	
	СтруктураПравилаРасположения = Новый Структура;
	СтруктураПравилаРасположения.Вставить("addingRule" , "");
	СтруктураПравилаРасположения.Вставить("pageNumber" , 1);
	
	СтруктураНастройкиШтампа = Новый Структура;
	СтруктураНастройкиШтампа.Вставить("transparency");
	
	СтруктураНастройкиПрозрачности = Новый Структура;
	
	СтруктураНастройкиПрозрачности.Вставить("transparent", Ложь);
	СтруктураНастройкиПрозрачности.Вставить("level", 0);
	
	СтруктураНастройкиШтампа.transparency = СтруктураНастройкиПрозрачности;
	
	СтруктураШтампа.stamp    = СвойстваШтампа;
	СтруктураШтампа.location = СтруктураРазмещение;
	СтруктураШтампа.rules    = СтруктураПравилаРасположения;
	СтруктураШтампа.settings = СтруктураНастройкиШтампа;
	
	Возврат СтруктураШтампа;
	
КонецФункции

Функция СловарьЗначенийРазмещения()
	
	Соответствие = Новый Структура;
	
	Соответствие.Вставить("ЛевыйВерхнийУгол"    , "leftTop");
	Соответствие.Вставить("ПравыйВерхнийУгол"   , "rightTop");
	Соответствие.Вставить("ВверхуПоЦентру"      , "centerTop");
	Соответствие.Вставить("ЛевыйНижнийУгол"     , "leftBottom");
	Соответствие.Вставить("ПравыйНижнийУгол"    , "rightBottom");
	Соответствие.Вставить("ВнизуПоЦентру"       , "centerBottom");
	Соответствие.Вставить("ПоКоординатам"       , "byCoordinates");
	
	Возврат Соответствие;
	
КонецФункции 

Функция СловарьПравилРасположений()
	
	Соответствие = Новый Структура;
	
	Соответствие.Вставить("НаПервойСтранице"               , "firstPage");
	Соответствие.Вставить("НаПоследнейСтранице"            , "lastPage");
	Соответствие.Вставить("НаКаждойСтранице"               , "everyPage");
	Соответствие.Вставить("НаКаждойСтраницеКромеПоследней" , "everyPageExpectTheLast");
	Соответствие.Вставить("НаКонкретнойСтранице"           , "specificPage");
	
	Возврат Соответствие;
	
КонецФункции

// Возвращает параметры соединения.
// 
// Возвращаемое значение:
//  Структура - параметры соединения:
//   * Сервер - Строка - имя сервера.
//   * Порт - Число - порт соединения.
//   * Аутентификация - Булево - требуется аутентификация по токену.
//   * Таймаут - Число - длительность ожидания ответа в секундах.
//   * ЗащищенноеСоединение - ЗащищенноеСоединениеOpenSSL - объект защищенного соединения OpenSSL.
//                          - Неопределено - объект защищенного соединения не установлен.
//   * Прокси - ИнтернетПрокси - параметры прокси-сервера.
//
Функция НовыеПараметрыСоединения(Сервер = "", Порт = 80, ЗащищенноеСоединение = Ложь)

	Результат = Новый Структура;
	Результат.Вставить("Сервер"              , Сервер);
	Результат.Вставить("Порт"                , Порт);
	Результат.Вставить("Аутентификация"      , Ложь);
	Результат.Вставить("Таймаут"             , 30);
	Результат.Вставить("Прокси"              , Новый ИнтернетПрокси);
	Результат.Вставить("ЗащищенноеСоединение", Неопределено);
	
	Если ЗащищенноеСоединение Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(,
			Новый СертификатыУдостоверяющихЦентровОС);
		Результат.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
	Иначе
		Результат.Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Останавливает выполнение кода на заданное время. 
//
// Параметры:
//  Секунд - Число - время ожидания в секундах.
//
Процедура Пауза(Секунд) Экспорт
	
	ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
	ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
	
	Если ФоновоеЗадание = Неопределено Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Секунд);
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("Интеграция1СШтампСлужебный.Пауза", Параметры);
	КонецЕсли;
		
	ФоновоеЗадание.ОжидатьЗавершенияВыполнения(Секунд);
	
КонецПроцедуры

// Защита от непредсказуемого интервала, который может быть получен из сервиса
// Максимальный таймаут для повторного обращения - 300 сек.
//
Функция ТаймаутОжидания()
	
	Возврат 300;
	
КонецФункции

// Защита от бесконечных проверок статуса задания
// Максимальная длительность запроса - 10 мин.
//
Функция МаксимальнаяДлительностьВыполненияЗапроса()
	
	Возврат 600;
	
КонецФункции

#Область ПрикладныеПроверки

// Возвращает результат проверок перед отправкой запросав в сервис.
//
// Параметры:
//  ТелоЗапроса  - Строка - JSON строка тела запроса.
//
// Возвращаемое значение:
//   См. НовыйРезультатВыполненияЗапроса
//
Функция РезультатВыполненияПрикладныхПроверокПередОтправкойЗапроса(ТелоЗапроса)
	
	Результат = НовыйРезультатВыполненияЗапроса();
	
	// Проверка превышения допустимого размера тела запроса
	Если ПревышенДопустимыйРазмерТелаЗапроса(ТелоЗапроса) Тогда
		
		ОписаниеОшибки = НСтр(
					"ru = 'Тело запроса превышает допустимый размер.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
		
		Результат.КодСостояния = Интеграция1СШтампКлиентСервер.КодСостоянияСлишкомБольшойРазмерТелаЗапроса();
		Результат.ТекстОшибки  = ОписаниеОшибки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак превышения допустимого размера тела запроса.
//
// Параметры:
//  ТелоЗапроса  - Строка - JSON строка тела запроса.
//
// Возвращаемое значение:
//   Булево - Признак превышения размера.
//
Функция ПревышенДопустимыйРазмерТелаЗапроса(ТелоЗапроса)
	
	РазмерТела = ПолучитьДвоичныеДанныеИзСтроки(ТелоЗапроса).Размер();
	
	Возврат РазмерТела > Интеграция1СШтампСлужебныйКлиентСервер.ДопустимыйРазмерИсходящегоТелаЗапроса();
	
КонецФункции

#КонецОбласти

#Область РаботаСКоллекцией

// Получить значение данных коллекции в рекурсии.
//
// Параметры:
//  Значение - Произвольный - значения обработки.
//  СвойстваПути - Массив Из Строка - элементы пути, например pathToRoot[0]; categories.
//  ЕстьОшибки - Булево - признак ошибки при разборе.
//
Функция ЗначениеСвойстваКоллекцииВРекурсии(Знач Значение, Знач СвойстваПути, ЕстьОшибки = Ложь)
	
	Свойство = СвойстваПути[0];
	МеткаКоллекции = СтрНайти(Свойство, "[");
	ИндексКоллекции = Неопределено;
	Если МеткаКоллекции <> 0 Тогда
		ИндексКоллекции = Сред(Свойство, МеткаКоллекции + 1);
		ИндексКоллекции = Лев(ИндексКоллекции, СтрДлина(ИндексКоллекции) - 1);
		Свойство = Лев(Свойство, МеткаКоллекции - 1);
	КонецЕсли;
	
	// Проверка свойства структуры.
	Если Не ЭтоКоллекция(Значение) Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;

	Если ТипЗнч(Значение) = Тип("Структура") И Не Значение.Свойство(Свойство) 
		Или ТипЗнч(Значение) = Тип("Соответствие") И Значение.Получить(Свойство) = Неопределено Тогда
		ЕстьОшибки = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Поиск нового элемента
	Если МеткаКоллекции = 0 Тогда
		Значение = Значение[Свойство];
	Иначе
		Значение = Значение[Свойство][Число(ИндексКоллекции)];
	КонецЕсли;
	
	Если СвойстваПути.Количество() = 1 Тогда
		// Последний элемент пути.
		Возврат Значение;
	Иначе
		СвойстваПути.Удалить(0);
		Возврат ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	КонецЕсли;
	
КонецФункции

Функция ЗначениеКоллекцииПоАбсолютномуПути(Знач Значение, Знач Путь, ЕстьОшибки = Ложь) Экспорт
	
	СвойстваПути = СтрРазделить(Путь, ".", Ложь);
	
	Попытка
		Результат = ЗначениеСвойстваКоллекцииВРекурсии(Значение, СвойстваПути, ЕстьОшибки);
	Исключение
		Результат = Неопределено;
		ЕстьОшибки = Истина;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоКоллекция(Знач Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	Возврат ТипЗначения = Тип("Структура") Или ТипЗначения = Тип("Соответствие");
	
КонецФункции

#КонецОбласти

#КонецОбласти
