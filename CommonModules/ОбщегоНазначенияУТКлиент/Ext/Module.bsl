
#Область ПрограммныйИнтерфейс

#Область ИнтерактивныеДействия

// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода. 
//                              Может быть установлена пост-обработка в месте вызова после выбора периода.
// 
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли; 
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли; 
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры

// Позволяет выбрать период из выпадающего списка
//
// Параметры:
//  Форма				- Форма - форма, в которой выполняется выбор периода
//  Элемент				- ПолеФормы - элемент, рядом с которым нужно открыть выпадающий список
//	ВидПериода			- ПеречислениеСсылка.ДоступныеПериодыОтчета - вид выбираемого периода
//	НачалоПериода 		- Дата - Начало периода
//	ОбработчикВыбора	- ОписаниеОповещения - обработчик, расположенный в форме, который будет вызван после выбора.
//
Процедура ВыбратьПериодИзСписка(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора) Экспорт
	
	Если НачалоПериода = '00010101' Тогда
		НачалоПериода = ОбщегоНазначенияУТКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияУТВызовСервера.ДатаСеанса());
	КонецЕсли;
	
	ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора);
	
КонецПроцедуры

// Обработчик команды "Установить пометку удаления"
//
//	Параметры:
//		Список - ТаблицаФормы - 
//		ТипСписка - Строка - тип документов списка.
//		ОповещениеОЗавершении - ОписаниеОповещения - оповещение, которое должно быть вызвано после завершения попытки пометки на удаление.
//		ПараметрыОбновленияСписка - Неопределено, Структура - параметры обновления:
//		* Форма - ФормаКлиентскогоПриложения - форма, в которой располагается список документов
//		* ИмяСписка - Строка - имя реквизита динамического списка на форме
//		* ОбновитьСписок - Булево - признак необходимости обновления списка
//
Процедура УстановитьПометкуУдаления(Список, ТипСписка, ОповещениеОЗавершении = Неопределено, ПараметрыОбновленияСписка = Неопределено) Экспорт 
	
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		Возврат;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		
		Если ТипЗнч(ВыделенныеСтроки[0]) = Тип("ДанныеФормыСтруктура") Тогда
			ДанныеСтроки = ВыделенныеСтроки[0];
		Иначе
			ДанныеСтроки = Список.ДанныеСтроки(ВыделенныеСтроки[0]);
		КонецЕсли;
		
		Документ = ДанныеСтроки.Ссылка;
		ЕстьСтрокиПомеченныеНаУдаление = ДанныеСтроки.ПометкаУдаления;
		
		МассивСсылок = Новый Массив();
		МассивСсылок.Добавить(Документ);
		
		ТекстВопроса = ?(ДанныеСтроки.ПометкаУдаления,
			НСтр("ru='Снять с ""%Документ%"" пометку на удаление?'"),
			НСтр("ru='Пометить ""%Документ%"" на удаление?'"));
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Документ%", Документ);
		
	Иначе
		
		Результат = ОбщегоНазначенияУТВызовСервера.СсылкиОбъектовПомеченныхНаУдаление(ВыделенныеСтроки, "Ссылка");
		
		МассивСсылок = Результат.МассивСсылок;
		ЕстьСтрокиПомеченныеНаУдаление = Результат.ЕстьСтрокиПомеченныеНаУдаление;
		
		ТекстВопроса = ?(Результат.ЕстьСтрокиПомеченныеНаУдаление,
			НСтр("ru='Снять с выделенных элементов пометку на удаление?'"),
			НСтр("ru='Пометить выделенные элементы на удаление?'"));
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Список", 						Список);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", 			МассивСсылок);
	ДополнительныеПараметры.Вставить("ТипСписка", 					ТипСписка);
	ДополнительныеПараметры.Вставить("УстановкаПометкиУдаления", 	Не ЕстьСтрокиПомеченныеНаУдаление);
	ДополнительныеПараметры.Вставить("ОповещениеОЗавершении", 		ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("ПараметрыОбновленияСписка",	ПараметрыОбновленияСписка);
	
	Оповещение = Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

// Обработчик команды "Провести"
//
//	Параметры:
//		Список - ТаблицаФормы -
//		ТипСписка - Строка - тип документов списка.
//		ПараметрыОбновленияСписка - Неопределено, Структура - параметры обновления:
//		* Форма - ФормаКлиентскогоПриложения - форма, в которой располагается список документов
//		* ИмяСписка - Строка - имя реквизита динамического списка на форме
//		* ОбновитьСписок - Булево - признак необходимости обновления списка
Процедура ПровестиДокументы(Список, ТипСписка, ПараметрыОбновленияСписка = Неопределено) Экспорт
	
	ОчиститьСообщения();
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(МассивСсылок);
	
	НепроведенныеДокументы = ОбщегоНазначенияУТВызовСервера.ЗаписатьВЖурналСообщитьПользователюОРезультатахПроведения(ДанныеОНепроведенныхДокументах);
	ПроведенныеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСсылок, НепроведенныеДокументы);
	
	Если НепроведенныеДокументы.Количество() > 0 Тогда
		КнопкиДиалога = Новый СписокЗначений;
		КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК'"));
		
		ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Список", Список);
		ДополнительныеПараметры.Вставить("ПроведенныеДокументы", ПроведенныеДокументы);
		ДополнительныеПараметры.Вставить("ТипСписка", ТипСписка);
		ДополнительныеПараметры.Вставить("ПараметрыОбновленияСписка", ПараметрыОбновленияСписка);

		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПроведенностьДокументовЗавершение", ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстДиалога, КнопкиДиалога);
	Иначе
		ОповещениеПроведенияОтменыПроведенияДокумента(Список, МассивСсылок, ТипСписка, ПараметрыОбновленияСписка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Отмена проведения"
//
//	Параметры:
//		Список - ТаблицаФормы,
//		ТипСписка - Строка - тип документов списка
//		ПараметрыОбновленияСписка - Неопределено, Структура - параметры обновления:
//		* Форма - ФормаКлиентскогоПриложения - форма, в которой располагается список документов
//		* ИмяСписка - Строка - имя реквизита динамического списка на форме
//		* ОбновитьСписок - Булево - признак необходимости обновления списка
//
Процедура ОтменаПроведения(Список, ТипСписка, ПараметрыОбновленияСписка = Неопределено) Экспорт
	
	ОчиститьСообщения();
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РаспроведенныеДокументы = ОбщегоНазначенияУТВызовСервера.СсылкиРаспроведенныхДокументов(МассивСсылок);
	
	Если РаспроведенныеДокументы.Количество() > 0 Тогда
		ОповещениеПроведенияОтменыПроведенияДокумента(Список, РаспроведенныеДокументы, ТипСписка, ПараметрыОбновленияСписка);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при выборе даты актуальности или даты события.
// Изменяет значение даты актуальности или даты события в зависимости от выбранного значения.
//
// Параметры:
//	ВыбранноеЗначение - Строка - выбранное значение отбора.
//	СтандартнаяОбработка - Булево - флаг стандартной обработки события.
//	Форма - ФормаКлиентскогоПриложения - форма списка документов.
//	Список - ДинамическийСписок - список документов.
//	ИмяРеквизитаАктуальность - Строка - имя реквизита строки отбора по актуальности.
//	ИмяРеквизитаДатаСобытия - Строка - имя реквизита даты, на которую документ будет просрочен.
//
Процедура ПриВыбореОтбораПоАктуальности(ВыбранноеЗначение, СтандартнаяОбработка, Форма, Список, ИмяРеквизитаАктуальность, ИмяЭлементаАктуальность, ИмяРеквизитаДатаСобытия) Экспорт
	
	Если ВыбранноеЗначение = "ИстекаетНаДату" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("Список", Список);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаАктуальность", ИмяРеквизитаАктуальность);
		ДополнительныеПараметры.Вставить("ИмяЭлементаАктуальность", ИмяЭлементаАктуальность);
		ДополнительныеПараметры.Вставить("ИмяРеквизитаДатаСобытия", ИмяРеквизитаДатаСобытия);
		
		ПоясняющийТекст = НСтр("ru='Выберите дату для вывода просроченных документов:'") + " ";
		ПараметрыФормы = Новый Структура("ПоясняющийТекст, НачальноеЗначение", ПоясняющийТекст);
		Оповещение = Новый ОписаниеОповещения("ПриВыбореОтбораПоАктуальностиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("ОбщаяФорма.ВыборДаты",
			ПараметрыФормы, , , , ,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		Возврат;
		
	Иначе
		ДатаСобытия = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает диалог ввода даты. В случае ввода пустой даты - предлагает повторный диалог ввода даты.
//
// Параметры:
//	Дата - Дата - начальное значение даты диалога. В эту дату будет помещен результат диалога.
//	Подсказка - Строка - текст заголовка диалога ввода даты.
//	ЧастьДаты - ЧастиДаты - вариант использования значения типа 'Дата'.
//	ОповещениеОВыборе - ОписаниеОповещения - описание оповещения после выбора даты.
//
Процедура ВвестиДатуСКонтролемПустогоЗначения(Дата, Подсказка, ЧастьДаты, ОповещениеОВыборе) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Дата", Дата);
	ДополнительныеПараметры.Вставить("Подсказка", Подсказка);
	ДополнительныеПараметры.Вставить("ЧастьДаты", ЧастьДаты);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе", ОповещениеОВыборе);
	
	Оповещение = Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора", ЭтотОбъект,
		ДополнительныеПараметры);
	
	ПоказатьВводДаты(Оповещение, Дата, Подсказка, ЧастьДаты);
	
КонецПроцедуры

// Открывает форму ввода даты.
// Дата должна быть не пустая и в пределах указанного периода.
//
// Параметры:
//	Дата - Дата - начальное значение даты диалога.
//	Подсказка - Строка - заголовок диалога ввода даты.
//	ЧастьДаты - ЧастиДаты - вариант использования значения типа 'Дата'.
//	ОповещениеОВыборе - ОписаниеОповещения - описание оповещения после выбора даты.
//	НачалоПериода - Дата - начало периода, в котором должна быть дата.
//	КонецПериода - Дата - конец периода, в котором должна быть дата.
//
Процедура ПоказатьВыборДаты(Дата, Подсказка, ЧастьДаты, ОповещениеОВыборе, НачалоПериода = '000101010000', КонецПериода = '000101010000') Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", Дата);
	ПараметрыФормы.Вставить("Подсказка", Подсказка);
	ПараметрыФормы.Вставить("ЧастьДаты", ЧастьДаты);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыФормы.Вставить("КонецПериода", КонецПериода);
	
	ОткрытьФорму("ОбщаяФорма.ВводДаты", ПараметрыФормы,,,,, ОповещениеОВыборе);
	
КонецПроцедуры

// Обработчик команды "Изменить"
//
// Параметры:
//  Список - ТаблицаФормы - Таблица формы:
//  	* ТекущиеДанные - ДанныеФормыСтруктура - С полями:
//  		** Ссылка - ДокументСсылка - 
Процедура ИзменитьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Скопировать"
//
// Параметры:
//  Список - ТаблицаФормы - Таблица формы:
//  	* ТекущиеДанные - ДанныеФормыСтруктура - С полями:
//  		** Ссылка - ДокументСсылка - 
Процедура СкопироватьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Элемент = ТекущиеДанные.Ссылка;
				
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначениеКопирования", Элемент);
		
		ИмяФормыОбъекта = ОбщегоНазначенияУТВызовСервера.ПолноеИмяФормыОбъекта(Элемент);
				
		ОткрытьФорму(ИмяФормыОбъекта, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// Инициирует открытие формы выбора хоз операции и типа документа для дальнейшего создания нового.
//
// Параметры:
//  АдресДоступныхХозяйственныхОперацийИДокументов	 - Строка - адрес во временном хранилище с таблицей доступных хоз. операций и документов
//  КлючФормы										 - Строка - ключ формы
//  КлючНазначенияИспользования						 - Строка - ключ настроек
//  СтруктураОтбора									 - Структура - структура с отборами для заполнения в документе.
//
Процедура СоздатьДокументЧерезФормуВыбора(АдресДоступныхХозяйственныхОперацийИДокументов, КлючФормы, КлючНазначенияИспользования, СтруктураОтбора) Экспорт
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДоступныеХозяйственныеОперацииИДокументы", АдресДоступныхХозяйственныхОперацийИДокументов);
	ПараметрыФормы.Вставить("РежимСоздания", Истина);
	ПараметрыФормы.Вставить("КлючФормы", КлючФормы);
	ПараметрыФормы.Вставить("КлючНастроек", КлючНазначенияИспользования);
	ДополнительныеПараметрыОповещения = Новый Структура("ЗначенияЗаполнения",СтруктураОтбора);
	ОткрытьФорму("Справочник.НастройкиХозяйственныхОпераций.Форма.ФормаУстановкиОтбора",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("СоздатьПослеВыбораДокумента",
			ЭтотОбъект, ДополнительныеПараметрыОповещения));
	
КонецПроцедуры

// Обработчик оповещения, вызванный после работы процедуры СоздатьДокумент(...)
Процедура СоздатьПослеВыбораДокумента(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияЗаполнения = ДополнительныеПараметры.ЗначенияЗаполнения;
	
	ИмяДокумента = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение.ИдентификаторОбъектаМетаданных, "Имя");
	
	СоздатьДокумент(ВыбранноеЗначение.ХозяйственнаяОперация, ЗначенияЗаполнения, ИмяДокумента);
		
КонецПроцедуры

// Создает документ по специально именованной команде
//
// Параметры:
//  ИмяКоманды	 - Строка - имя команды, до этого программно сформированное, вида ПриемНаКомиссию_ПриобретениеТоваровУслуг,
//  СтруктураОтбора	- Структура - структура с отборами для заполнения в документе.
//
Процедура СоздатьДокументЧерезКоманду(Знач ИмяКоманды, СтруктураОтбора) Экспорт
			
	МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяКоманды,"___");
	
	ИмяЗначенияПеречисления 	= МассивИмен[1];
	ИмяДокумента 				= МассивИмен[2];
	
	ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации." + ИмяЗначенияПеречисления);

	СоздатьДокумент(ХозяйственнаяОперация, СтруктураОтбора, ИмяДокумента);
	
КонецПроцедуры

// Устанавливает статус для выделенных документов
//
// Параметры:
//  ИмяКоманды					 - Строка	 - Имя команды формы
//  СоответствиеКомандСтатусам	 - Соответствие	 - соответствие, которое хранится в реквизитах текущей формы
//  Список						 - ПолеФормы	 - список формы, в котором будет происходить изменение статусов
//  ПараметрыОбновленияСписка - Неопределено, Структура - параметры обновления:
//		* Форма - ФормаКлиентскогоПриложения - форма, в которой располагается список документов
//		* ИмяСписка - Строка - имя реквизита динамического списка на форме
//		* ОбновитьСписок - Булево - признак необходимости обновления списка
//
Процедура УстановитьСтатус(ИмяКоманды, СоответствиеКомандСтатусам, Список, ПараметрыОбновленияСписка = Неопределено)Экспорт 
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИмяКоманды", ИмяКоманды);
	
	НайденныйСтатус = СоответствиеКомандСтатусам.НайтиСтроки(Отбор);
	
	Если НайденныйСтатус.Количество() > 0 Тогда
		
		СтрокаСтатуса = НайденныйСтатус[0];
				
		ВыделенныеСтроки = ВыбратьИзВыделенныхСтрокСпискаДокументыПоИмениМетаданных(СтрокаСтатуса.ДокументСтрока, Список);
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не выделено ни одного документа, для которого можно установить выбранный статус'"));
			Возврат;
		КонецЕсли;
		
		ВыделенныеСтрокиСодержатОтгрузку = Ложь;
		ВыделенныеСтрокиСодержатНеТолькоОтгрузку = Ложь;
		Если СтрокаСтатуса.Статус = ПредопределенноеЗначение("Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено") Тогда
			СтруктураСписка = ПродажиВызовСервера.СформироватьСтруктуруСпискаДокументов(ВыделенныеСтроки);
			ВыделенныеСтрокиСодержатОтгрузку = СтруктураСписка.ВыделенныеСтрокиСодержатОтгрузку;
			ВыделенныеСтрокиСодержатНеТолькоОтгрузку = СтруктураСписка.ВыделенныеСтрокиСодержатНеТолькоОтгрузку;
		КонецЕсли;
		
		Если ВыделенныеСтрокиСодержатОтгрузку Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("ДатаПереходаПраваСобственности", ОбщегоНазначенияКлиент.ДатаСеанса());
			ПараметрыФормы.Вставить("ВыделенныеСтрокиСодержатНеТолькоОтгрузку", ВыделенныеСтрокиСодержатНеТолькоОтгрузку);
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
			СтруктураПараметров.Вставить("ОбрабатываемыйСписок", 	Список);
			СтруктураПараметров.Вставить("СтатусПредставление", 	СтрокаСтатуса.СтатусПредставление);
			СтруктураПараметров.Вставить("СтатусИмяЗначения", 		СтрокаСтатуса.СтатусИмяЗначения);
			СтруктураПараметров.Вставить("ПараметрыОбновленияСписка", ПараметрыОбновленияСписка);
			
			ОткрытьФорму("Документ.РеализацияТоваровУслуг.Форма.ВопросОСменеСтатуса", 
				ПараметрыФормы,,,,,
				Новый ОписаниеОповещения("УстановитьСтатусРеализованоЗавершение", 
					ЭтотОбъект,
					СтруктураПараметров),
				РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Иначе
			ТекстВопроса = НСтр("ru='У выделенных в списке документов будет установлен статус ""%ПредставлениеСтатуса%"". Продолжить?'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ПредставлениеСтатуса%", СтрокаСтатуса.СтатусПредставление);
			
			Режим = Новый СписокЗначений;
			Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Установить'"));
			Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не устанавливать'"));
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ВыделенныеСтроки", 		ВыделенныеСтроки);
			ДопПараметры.Вставить("СтатусПредставление", 	СтрокаСтатуса.СтатусПредставление);
			ДопПараметры.Вставить("СтатусИмяЗначения", 		СтрокаСтатуса.СтатусИмяЗначения);
			ДопПараметры.Вставить("Список", 				Список);
			ДопПараметры.Вставить("ПараметрыОбновленияСписка", ПараметрыОбновленияСписка);
			
			ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДопПараметры), ТекстВопроса,Режим);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик оповещения, вызванного после завершения работы процедуры УстановитьСтатус(...).
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	СтатусПредставление = ДополнительныеПараметры.СтатусПредставление;
	СтатусИмяЗначения = ДополнительныеПараметры.СтатусИмяЗначения;
	Список = ДополнительныеПараметры.Список;
	ПараметрыОбновленияСписка = ДополнительныеПараметры.ПараметрыОбновленияСписка;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусЗавершениеФрагмент(ВыделенныеСтроки, СтатусИмяЗначения, СтатусПредставление, Список, Неопределено, ПараметрыОбновленияСписка);
	
КонецПроцедуры

Процедура УстановитьСтатусЗавершениеФрагмент(Знач ВыделенныеСтроки, СтатусИмяЗначения, Знач СтатусПредставление, Знач Список, ДопПараметры = Неопределено, ПараметрыОбновленияСписка = Неопределено)
	
	Перем КоличествоОбработанных;
	
	ОчиститьСообщения();
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, СтатусИмяЗначения, ДопПараметры);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), СтатусПредставление, ПараметрыОбновленияСписка);

КонецПроцедуры

// Обработчик оповещения, вызванного после завершения работы процедуры УстановитьСтатус(...).
Процедура УстановитьСтатусРеализованоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	ОбрабатываемыйСписок = ДополнительныеПараметры.ОбрабатываемыйСписок;
	СтатусПредставление = ДополнительныеПараметры.СтатусПредставление;
	СтатусИмяЗначения = ДополнительныеПараметры.СтатусИмяЗначения;
	ПараметрыОбновленияСписка = ДополнительныеПараметры.ПараметрыОбновленияСписка;
	
	СтруктураОтвета = Результат;
	Если СтруктураОтвета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусЗавершениеФрагмент(ВыделенныеСтроки, СтатусИмяЗначения, СтатусПредставление, ОбрабатываемыйСписок, СтруктураОтвета, ПараметрыОбновленияСписка);
	
КонецПроцедуры

// Обрабатывает отсканированный штрихкод
//
// Параметры:
//  Штрихкод			 - 	Строка -
//  ДанныеПоШтрихКоду	 - 	Структура - структура с ключом "КлючЗаписи" регистра сведений РеестрДокументов
//  Форма				 - 	ФормаКлиентскогоПриложения - форма со списком
//  ИмяСписка			 - 	Строка - имя списка, в котором должно произойти позиционирование.
//
Процедура ОбработатьШтрихкоды(Штрихкод, ДанныеПоШтрихКоду, Форма, ИмяСписка) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеПоШтрихКоду) Тогда
		Если ЗначениеЗаполнено(ДанныеПоШтрихКоду.КлючЗаписи) Тогда
			ТаблицаФормы = Форма.Элементы[ИмяСписка]; // ТаблицаФормы - 
			ТаблицаФормы.ТекущаяСтрока = ДанныеПоШтрихКоду.КлючЗаписи;
		КонецЕсли;
		ПоказатьЗначение(Неопределено, ДанныеПоШтрихКоду.Ссылка);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды "Установить пометку удаления", вызываемой из формы документа. Имитирует стандартную команду.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения	- форма документа
//
Процедура УстановитьПометкуУдаленияДокументаВопрос(Форма)
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	НоваяПометкаУдаления = НЕ Форма.Объект.ПометкаУдаления;
	
	ЗаголовокВопроса = НСтр("ru = 'Изменение пометки удаления'");
	Если НоваяПометкаУдаления Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пометить ""%1"" на удаление?'"),Форма.Объект.Ссылка);
	Иначе
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),Форма.Объект.Ссылка);
	КонецЕсли; 
	
	Дополнительныепараметры = Новый Структура;
	Дополнительныепараметры.Вставить("НоваяПометкаУдаления",НоваяПометкаУдаления);
	Дополнительныепараметры.Вставить("ДокументПроведен",Форма.Объект.Проведен);
	Дополнительныепараметры.Вставить("Форма",Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьПометкуУдаленияДокументаВопросЗавершение", ЭтотОбъект, Дополнительныепараметры);
	
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет,60,,ЗаголовокВопроса);
	
КонецПроцедуры

// Обработчик оповещения ответа на вопрос об установке/снятии пометки удаления документа
//
//	Параметры:
//		РезультатВопроса 		- КодВозвратаДиалога 	- результат ответа на вопрос,
//		ДополнительныеПараметры - Структура 			- дополнительные параметры.
//
Процедура УстановитьПометкуУдаленияДокументаВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Перем НоваяПометкаУдаления, ДокументПроведен, Форма;
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ДополнительныеПараметры.Свойство("НоваяПометкаУдаления", НоваяПометкаУдаления) Тогда
		НоваяПометкаУдаления = Ложь;
	КонецЕсли; 
	Если НЕ ДополнительныеПараметры.Свойство("ДокументПроведен", ДокументПроведен) Тогда
		ДокументПроведен = Ложь;
	КонецЕсли; 
	ДополнительныеПараметры.Свойство("Форма", Форма);
	
	Если НоваяПометкаУдаления И ДокументПроведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	Иначе
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли; 
	
	Форма.Объект.ПометкаУдаления = НоваяПометкаУдаления;
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.Вставить("РежимЗаписи",РежимЗаписи);
	Попытка
		ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	Исключение
		Форма.Объект.ПометкаУдаления = НЕ НоваяПометкаУдаления;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Кратко = ОбработкаОшибок.ПредставлениеОшибкиДляПользователя(ИнформацияОбОшибке);
		ВызватьИсключение Кратко;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет проведение документов с помощью фонового задания.
//
// Параметры:
//  Список - ДинамическийСписок - Список документов.
//  ИмяФормы - Строка - Форма в которой реализовано фоновое проведение документов.
//
Процедура ПровестиДокументыВФономЗадании(Список, ИмяФормы) Экспорт

	ОчиститьСообщения();
	ВыделенныеСтроки = ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДляПроведения(ВыделенныеСтроки);
	
	Если Результат.ЕстьПомеченныеНаУдаление И Результат.МассивСсылок.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Помеченный на удаление документ не может быть проведен'");
		ПоказатьПредупреждение(,ТекстСообщения);
	ИначеЕсли Результат.МожноПровести Тогда
		ПараметрыФормы = Новый Структура("СписокДокументов", Результат.МассивСсылок);
		ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

// Сообщает о результате проведения в фоном задании.
// 
// Параметры:
//  РезультатПроведения - Структура - содержит:
//		* ЕстьОшибки - Булево -
//		* ИнформацияОбОшибке - ИнформацияОбОшибке, Неопределено -
//	ДействиеПриОшибке - Строка, ОписаниеОповещения -
Процедура СообщитьОРезультатеПроведенияВФономЗадании(РезультатПроведения, ДействиеПриОшибке = Неопределено) Экспорт
	
	Если РезультатПроведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатПроведения.ЕстьОшибки Тогда
		
		Если РезультатПроведения.ИнформацияОбОшибке <> Неопределено И ТипЗнч(РезультатПроведения.ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			
			ОбработкаОшибок.ПоказатьИнформациюОбОшибке(РезультатПроведения.ИнформацияОбОшибке);
		
		Иначе
			
			Если ДействиеПриОшибке <> Неопределено Тогда
				ТекстПояснения = НСтр("ru = 'При проведении возникли ошибки (нажмите для просмотра)'");
			Иначе
				ТекстПояснения = НСтр("ru = 'При проведении возникли ошибки'");
			КонецЕсли;
			
			КартинкаОповещения = БиблиотекаКартинок.Внимание32;
			ПоказатьОповещениеПользователя(, ДействиеПриОшибке, ТекстПояснения, КартинкаОповещения);
			
		КонецЕсли;
		
	Иначе
		
		ТекстПояснения = НСтр("ru = 'Проведение выполнено'");
		КартинкаОповещения = БиблиотекаКартинок.ЗеленаяГалка;
		ПоказатьОповещениеПользователя(,, ТекстПояснения, КартинкаОповещения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольНесогласованныхИзменений

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 		Форма - ФормаКлиентскогоПриложения - форма элемента или документа.
// Возвращаемое значение:
// 		Булево - признак отказа выполнения дальнейших действий.
Функция ПриДействииСЭлементомЗависящимОтСтатуса(Форма) Экспорт
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ОжидаетсяОповещение = Истина;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Согласован") Тогда
		Форма.Объект.Согласован = Ложь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Служебная процедура.
//
Процедура КонтрольНеСогласованныхИзмененийВызватьИсключение(Форма, Элемент) Экспорт
	ВызватьИсключение НСтр("ru = 'Внутренняя ошибка подсистемы контроля несогласованных изменений.'");
КонецПроцедуры

// Вызывается в формах документов и справочников для отказа от изменения значения реквизита.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма элемента или документа
// 	Элемент - ПолеФормы - Элемент формы
// 	ОбработанныеЭлементы - Массив - Служебное, содержит массив уже обработанных элементов
//
Процедура ВернутьПредыдущееЗначениеРеквизита(Форма, Элемент, ОбработанныеЭлементы = Неопределено) Экспорт
	
	Если ОбработанныеЭлементы = Неопределено Тогда
		ОбработанныеЭлементы = Новый Массив;
	КонецЕсли;
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Данные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента];
		ИначеЕсли ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Если Не Таблица.ТекущиеДанные = Неопределено Тогда
				Таблица.ТекущиеДанные[СтрокаМассива] = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяТаблицы][СтрокаМассива];
			КонецЕсли;
			Прервать;
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	СвязиПараметровВыбора = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.СвязиПараметровВыбора.Получить(ПутьКДанным);
	Если Не СвязиПараметровВыбора = Неопределено Тогда
		Для Каждого СвязьПараметровВыбора Из СвязиПараметровВыбора Цикл
			Если ОбработанныеЭлементы.Найти(СвязьПараметровВыбора) = Неопределено Тогда
				ОбработанныеЭлементы.Добавить(СвязьПараметровВыбора);
				ВернутьПредыдущееЗначениеРеквизита(Форма, Форма.Элементы[СвязьПараметровВыбора], ОбработанныеЭлементы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в формах документов и справочников для сохранения предыдущего значения элемента.
// Вызывается при действиях с элементами, зависящими от статуса.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма элемента или документа
// 	Элемент - ПолеФормы - Элемент формы.
//
Процедура СохранитьЗначениеРеквизита(Форма, Элемент) Экспорт
	
	ИмяЭлемента = Элемент.Имя;
	Таблица = ПолеВнутриТаблицы(Форма, Элемент);
	Если НЕ Таблица = Неопределено Тогда
		ИмяТаблицы = Таблица.Имя;
	Иначе
		ИмяТаблицы = "";
	КонецЕсли;
	
	Если Форма.СтруктураДействийКонтрольНеСогласованныхИзменений <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			Возврат;
		Иначе
			Если Не Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов.Свойство(ИмяЭлемента) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПутьКДанным = Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ПутьКДанным[ИмяЭлемента];
	
	Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПутьКДанным, ".");
	Данные = Форма;
	Количество = Массив.Количество();
	Индекс = 1;
	Для Каждого СтрокаМассива Из Массив Цикл
		Если ТипЗнч(Данные) = Тип("ДанныеФормыСтруктура") И Индекс = Количество Тогда
			Форма.СтруктураДействийКонтрольНеСогласованныхИзменений.ЗначенияРеквизитов[ИмяЭлемента] = Данные[СтрокаМассива];
		Иначе
			Данные = Данные[СтрокаМассива];
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в формах документов и справочников при действиях с элементами, зависящими от статуса
// в механизме контроля несогласованных изменений.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма элемента или документа.
//
Процедура ПослеИзмененияРеквизитаЗависящегоОтСтатуса(Форма) Экспорт
	
	Форма.СтруктураДействийКонтрольНеСогласованныхИзменений = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОповещениеПользователейПриИзменении

// Процедура показывает оповещение после обработки статусов выделенных в списке документов.
//
// Параметры:
//	СписокДокументов  - ТаблицаФормы - элемент формы
//	КоличествоОбработанных - Число - количество успешно обработанных документов
//	КоличествоВсего - Число - количество выделенных в списке документов
//	Статус - Строка - устанавливаемый статус
//	ПараметрыОбновленияСписка - Неопределено, Структура - параметры обновления:
//		* Форма - ФормаКлиентскогоПриложения - форма, в которой располагается список документов
//		* ИмяСписка - Строка - имя реквизита динамического списка на форме
//		* ОбновитьСписок - Булево - признак необходимости обновления списка
//
Процедура ОповеститьПользователяОбУстановкеСтатуса(СписокДокументов, КоличествоОбработанных, КоличествоВсего, Статус, ПараметрыОбновленияСписка = Неопределено) Экспорт
	
	Если КоличествоОбработанных > 0 Тогда
		
		Если СписокДокументов <> Неопределено Тогда
			
			Если ПараметрыОбновленияСписка = Неопределено Тогда
				ОбновитьСписок = Истина;
			Иначе
				ОбновитьСписок = ПараметрыОбновленияСписка.ОбновитьСписок;
			КонецЕсли;
			
			Если ОбновитьСписок Тогда
				СписокДокументов.Обновить();
			Иначе
				РаботаСЖурналамиДокументовКлиент.УстановитьПризнакОтображенияНеактуальныхДанныхВСписке(
					ПараметрыОбновленияСписка.Форма, ПараметрыОбновленияСписка.ИмяСписка);
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);

	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура оповещение и записывает в историю пользователя изменение объекта, как делает платформа.
//
// Параметры:
//	СсылкаНаОбъект       - ЛюбаяСсылка - измененный объект.
//	ТекстЗаголовка - Строка - Текст заголовка
Процедура ОповеститьПользователяОбИзмененииОбъекта(СсылкаНаОбъект, ТекстЗаголовка = "") Экспорт
	
	Если ПустаяСтрока(ТекстЗаголовка) Тогда	
		ТекстЗаголовка = НСтр("ru='Изменение:'");
	КонецЕсли;
	ТекстСообщения = Строка(СсылкаНаОбъект);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(СсылкаНаОбъект);
	ПоказатьОповещениеПользователя(ТекстЗаголовка, НавигационнаяСсылка, ТекстСообщения, БиблиотекаКартинок.Информация32);

	ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	
КонецПроцедуры

// Выполняет оповещение пользователя об осуществленной установке пометки на удаление
// или снятия пометки с удаления документа, а также записывает в историю информацию об изменениях объекта.
//
//	Параметры:
//		РезультатВопроса - КодВозвратаДиалога - результат ответа на вопрос,
//		ДополнительныеПараметры - Структура - дополнительные параметры:
//			* Список - ТаблицаФормы - 
//			* ТипСписка - Строка -
//			* ВыделенныеСтроки - Массив из ДокументСсылка - 
//			* УстановкаПометкиУдаления - Булево - 
//			* ОповещениеОЗавершении - ОписаниеОповещения - 
//			* ПараметрыОбновленияСписка - Неопределено, Структура - 
Процедура УстановитьПометкуУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОповещениеОЗавершении = ДополнительныеПараметры.ОповещениеОЗавершении;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ОчиститьСообщения();
		
		Список = ДополнительныеПараметры.Список;
		ТипСписка = ДополнительныеПараметры.ТипСписка;
		МассивСсылок = ДополнительныеПараметры.ВыделенныеСтроки;
		ПометитьНаУдаление = ДополнительныеПараметры.УстановкаПометкиУдаления;
		ПараметрыОбновленияСписка = ДополнительныеПараметры.ПараметрыОбновленияСписка;
		
		ОбщегоНазначенияУТВызовСервера.УстановитьПометкуУдаленияЗавершениеСервер(МассивСсылок, ПометитьНаУдаление);
		
		НавигационнаяСсылка = Неопределено;
		Если МассивСсылок.Количество() > 1 Тогда
			Документ = ТипСписка;
			ТекстОповещения = ?(Не ПометитьНаУдаление, 
				НСтр("ru='Пометка удаления снята (%КоличествоДокументов%)'"),
				НСтр("ru='Пометка удаления установлена (%КоличествоДокументов%)'"));
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", МассивСсылок.Количество());
		Иначе
			Документ = МассивСсылок[0];
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Документ);
			ТекстОповещения = ?(Не ПометитьНаУдаление,
				НСтр("ru='Пометка удаления снята'"),
				НСтр("ru='Пометка удаления установлена'"));
		КонецЕсли;
		
		Если ПараметрыОбновленияСписка <> Неопределено Тогда
			ОбновитьСписок = ПараметрыОбновленияСписка.ОбновитьСписок;
		Иначе
			ОбновитьСписок = Истина;
		КонецЕсли;

		Если ОбновитьСписок Тогда
			Список.Обновить();
		Иначе
			РаботаСЖурналамиДокументовКлиент.УстановитьПризнакОтображенияНеактуальныхДанныхВСписке(
					ПараметрыОбновленияСписка.Форма, ПараметрыОбновленияСписка.ИмяСписка);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, Строка(Документ),
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если ОповещениеОЗавершении <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВопроса);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет оповещение пользователя об осуществленном проведении документов
// а также обновляет информацию об измененных данных динамического списка.
//
//	Параметры:
//		РезультатВопроса - Кнопка - результат ответа на вопрос,
//		ДополнительныеПараметры - Структура - дополнительные параметры:
//			* Список - ТаблицаФормы - 
//			* ТипСписка - Строка -
//
Процедура ПроверитьПроведенностьДокументовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> Неопределено Тогда
		Список = ДополнительныеПараметры.Список;
		ТипСписка = ДополнительныеПараметры.ТипСписка;
		ПроведенныеДокументы = ДополнительныеПараметры.ПроведенныеДокументы;
		ПараметрыОбновленияСписка = ДополнительныеПараметры.ПараметрыОбновленияСписка;
		
		Если ПроведенныеДокументы.Количество() > 0 Тогда
			ОповещениеПроведенияОтменыПроведенияДокумента(Список, ПроведенныеДокументы, ТипСписка, ПараметрыОбновленияСписка);
		Иначе
			Если ПараметрыОбновленияСписка <> Неопределено Тогда
				ОбновитьСписок = ПараметрыОбновленияСписка.ОбновитьСписок;
			Иначе
				ОбновитьСписок = Истина;
			КонецЕсли;
			
			Если ОбновитьСписок Тогда
				Список.Обновить();
			Иначе
				РаботаСЖурналамиДокументовКлиент.УстановитьПризнакОтображенияНеактуальныхДанныхВСписке(
					ПараметрыОбновленияСписка.Форма, ПараметрыОбновленияСписка.ИмяСписка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура завершения для ВвестиДатуСКонтролемПустогоЗначения().
// Выполняет оповещение пользователя об осуществленном корректном вводе даты, в противном случае выводится 
// сообщение о том, что значение даты не было заполнено и предлагается выполнить повторный ввод.
//
// Параметры:
//	ВыбраннаяДата - Дата - введенное пользователем значение даты в результате диалога.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора(ВыбраннаяДата, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяДата = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
	Иначе
		Если ВыбраннаяДата <> Дата('00010101000000') Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбраннаяДата);
		Иначе
			Оповещение = Новый ОписаниеОповещения("ВвестиДатуСКонтролемПустогоЗначенияПослеПредупреждения", ЭтотОбъект,
				ДополнительныеПараметры);
			ПоказатьПредупреждение(Оповещение, НСтр("ru='Поле ""Дата"" не заполнено'"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура завершения для ВвестиДатуСКонтролемПустогоЗначенияПослеВыбора().
// Выполняет оповещение пользователя о том, что значение даты не было заполнено и предлагается выполнить повторный ввод.
//
// Параметры:
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ВвестиДатуСКонтролемПустогоЗначенияПослеПредупреждения(ДополнительныеПараметры) Экспорт
	
	ВвестиДатуСКонтролемПустогоЗначения(ДополнительныеПараметры.Дата, ДополнительныеПараметры.Подсказка,
		ДополнительныеПараметры.ЧастьДаты, ДополнительныеПараметры.ОповещениеОВыборе);
	
КонецПроцедуры

#КонецОбласти

#Область РедактированиеЗаблокированныхРеквизитов

// Вызывается в формах объектов для разблокировки заблокированных реквизитов.
// 
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма объекта:
//     	* Объект - ДокументОбъект -
//	Параметры - см. ПараметрыРазрешенияРедактированияРеквизитовОбъекта
//
Процедура РазрешитьРедактированиеРеквизитовОбъекта(Форма, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = ПараметрыРазрешенияРедактированияРеквизитовОбъекта();
	КонецЕсли;
	
	ОписаниеОбъекта = ?(Параметры.Объект = Неопределено, Форма.Объект, Параметры.Объект);
	
	Если НЕ ЗначениеЗаполнено(ОписаниеОбъекта.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыРазблокировки = Параметры.ИмяФормыРазблокировки;
	
	Если Не ЗначениеЗаполнено(ИмяФормыРазблокировки) Тогда
		МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Форма.ИмяФормы, ".");
		МассивИмениФормы[3] = "РазблокированиеРеквизитов";
		ИмяФормыРазблокировки = СтрСоединить(МассивИмениФормы, ".");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма",Форма);
	ДополнительныеПараметры.Вставить("ТолькоВидимые", Параметры.ТолькоВидимые);
	Если Параметры.ОповещениеОРазблокировке <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеОРазблокировке", Параметры.ОповещениеОРазблокировке);
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("РазрешитьРедактированиеРеквизитовОбъектаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(ИмяФормыРазблокировки, 
		Новый Структура("Объект, ПараметрыЗапретаРедактированияРеквизитов", ОписаниеОбъекта.Ссылка, Форма.ПараметрыЗапретаРедактированияРеквизитов),
		,
		,
		,
		,
		Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Параметры разрешения редактирования реквизитов объекта.
// 
// Возвращаемое значение:
//  Структура - Параметры разрешения редактирования реквизитов объекта:
// 		* ИмяФормыРазблокировки - Строка - Имя формы разблокировки.
// 		* ОповещениеОРазблокировке - ОписаниеОповещения, Неопределено -
// 		* Объект - Неопределено - взять объект из реквизита формы "Объект",
//               - ДанныеФормыСтруктура - по типу объекта.
// 		* ТолькоВидимые - Булево - Чтобы получить и разблокировать все реквизиты объекта, нужно указать Ложь.
Функция ПараметрыРазрешенияРедактированияРеквизитовОбъекта() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяФормыРазблокировки", "");
	Параметры.Вставить("ОповещениеОРазблокировке", Неопределено);
	Параметры.Вставить("Объект", Неопределено);
	Параметры.Вставить("ТолькоВидимые", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Служебная процедура.
//
Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	Если Результат = Истина Тогда
		
		ТолькоВидимые = Истина;
		Если ДополнительныеПараметры.Свойство("ТолькоВидимые") Тогда
			ТолькоВидимые = ДополнительныеПараметры.ТолькоВидимые;
		КонецЕсли;
		
		ЗаблокированныеРеквизиты = ЗапретРедактированияРеквизитовОбъектовКлиент.Реквизиты(Форма,, ТолькоВидимые);
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьРазрешенностьРедактированияРеквизитов(Форма, ЗаблокированныеРеквизиты);
		ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеОРазблокировке") Тогда
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОРазблокировке, Результат);
		
	КонецЕсли; 

КонецПроцедуры

#КонецОбласти

#Область Прочие

// Выполняется при интерактивном начале работы пользователя с областью данных или в локальном режиме.
// Соответствует обработчику ПриНачалеРаботыСистемы.
//
// см. ОбщегоНазначенияКлиентПереопределяемый.ПриНачалеРаботыСистемы 
//
Процедура ПриНачалеРаботыСистемы(Параметры) Экспорт
	
	ПланГлобальногоПоиска = ГлобальныйПоиск.ПолучитьПлан();
	ПланГлобальногоПоиска.Добавить("НайтиДокументВРеестре", "ОбщегоНазначенияУТ", Истина, , 5);
	ГлобальныйПоиск.УстановитьПлан(ПланГлобальногоПоиска);
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботыКлиента.ЗадатьВопросОПереходеНаОнлайнВзаиморасчеты Тогда
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не сейчас'"));
		Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Нет'"));
		ОбработчикОтвета = Новый ОписаниеОповещения("ЗавершениеВопросаОПереходе", ОбщегоНазначенияУТКлиент);
		ТекстВопроса = НСтр("ru = 'Рекомендуется перейти на новый режим «онлайн» учета взаиморасчетов. 
			|Это ускорит печать документов и откроет новые возможности в отчетах. 
			|Выполнить переход?'");
		ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, Кнопки);
	КонецЕсли;
	
	#Если МобильныйКлиент Тогда
		Если ОбменМобильныеВызовПК.ТребуетсяОбменДаннымиСАвтономнымПриложением() Тогда
			Если ОсновнойСерверДоступен() = Истина Тогда
				ОбменМобильныеАвтономныйКлиент.НачатьОбмен();
			КонецЕсли;
			ПодключитьОбработчикОжидания("ПроверкаНеобходимостиСинхронизации", 10);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Выполняет обработку ответа на вопрос о переходе на новые взаиморасчеты
//
// Параметры:
// 	Результат - КодВозвратаДиалога
// 	ДополнительныеПараметры - Структура
//
Процедура ЗавершениеВопросаОПереходе(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НачальнаяСтраница = ПолучитьОкна()[1];
		ВладелецФормы = Неопределено;
		Если НачальнаяСтраница.Содержимое.Количество() > 0 Тогда
			ВладелецФормы = НачальнаяСтраница.Содержимое[0];
		КонецЕсли;
		ОткрытьФорму("ОбщаяФорма.ФормаПереходаНаНовуюАрхитектуруВзаиморасчетов",,ВладелецФормы);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Прервать Тогда
		ВзаиморасчетыВызовСервера.ОтключитьВопросПереходаНаОнлайнВзаиморасчеты();
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие выделенных в списке строк.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Булево - Ложь - в списке нет выделенных строк.
//
Функция ПроверитьНаличиеВыделенныхВСпискеСтрок(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие выделенных в списке строк и возвращает массив их ссылок.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Массив - массив ссылок выделенных в списке строк.
//
Функция ПроверитьПолучитьВыделенныеВСпискеСсылки(Список) Экспорт
	
	МассивСсылок = Новый Массив;
	
	Для Итератор = 0 По Список.ВыделенныеСтроки.Количество() - 1 Цикл
		Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Если ТипЗнч(Список.ВыделенныеСтроки[Итератор]) = Тип("КлючСтрокиДинамическогоСписка") Тогда
				МассивСсылок.Добавить(Список.ДанныеСтроки(Список.ВыделенныеСтроки[Итератор]));
			Иначе
				МассивСсылок.Добавить(Список.ВыделенныеСтроки[Итератор]);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСсылок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Команда не может быть выполнена для указанного объекта!'"));
	КонецЕсли;
	
	Возврат МассивСсылок;
	
КонецФункции

// Проверяет наличие записей в списке.
//
// Параметры:
//	Список - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//	ПредставлениеСписка - ДинамическийСписок - список, в котором осуществляется проверка на наличие выделенных строк.
//
// Возвращаемое значение:
//	Булево - Истина - список содержит записи.
//
Функция ПроверитьНаличиеСтрокВСписке(Список, ПредставлениеСписка) Экспорт
	
	Если Список.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""%ПредставлениеСписка%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСписка%", ПредставлениеСписка);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, выбрано ли распоряжение для оформления накладной
//
// Параметры:
//  ТекущиеСтроки		 - 	ДанныеФормыСтруктура, Массив - массив идентификаторов выделенных строк, либо текущие данные выделенной строки.
//  ПараметрыЖурнала	 - 	Структура - структура с параметрами журнала (рабочего места).
// 
// Возвращаемое значение:
//  Булево - Истина
//
Функция ВыбраныДокументыКОформлению(ТекущиеСтроки, ПараметрыЖурнала) Экспорт
	
	Если Не ТипЗнч(ТекущиеСтроки) = Тип("Массив") Тогда
		МассивСтрок = Новый Массив;
		Если Не ТекущиеСтроки = Неопределено Тогда
			МассивСтрок.Добавить(ТекущиеСтроки);
		КонецЕсли;
	Иначе
		МассивСтрок = ТекущиеСтроки;
	КонецЕсли;
	
	Если Не МассивСтрок.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПоказатьВопросНеВыбраноРаспоряжение(ПараметрыЖурнала);
	
	Возврат Ложь;
	
КонецФункции

// Открывает форму обработки (журнала)
//
// Параметры:
//  Параметры	 - Структура	 - структура, один из ключей которой  "ИмяРабочегоМеста".
//
Процедура ОткрытьЖурнал(Параметры) Экспорт
	
	ОткрытьФорму("Обработка." + Параметры.ИмяРабочегоМеста + ".Форма", Параметры);
	
КонецПроцедуры

// Сохраняет в реквизит КэшДанныхМеханизмов формы данные, необходимые для работы механизма.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма
// 	ИмяМеханизма - Строка - Имя механизма, который сохраняет данные
// 	ДанныеДляКэширования - Произвольный - Кэшируемые данные
//
Процедура СохранитьДанныеМеханизмаВКэшФормы(Форма, ИмяМеханизма, ДанныеДляКэширования) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КэшДанныхМеханизмов") Тогда
		ДобавляемыеРеквизиты = Новый Массив;
		ДобавляемыеРеквизиты.Добавить(Форма.КэшДанныхМеханизмов);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Форма.КэшДанныхМеханизмов = Новый Структура;
	КонецЕсли;
	Форма.КэшДанныхМеханизмов.Вставить(ИмяМеханизма, ДанныеДляКэширования);
	
КонецПроцедуры

// Возвращает параметры для передачи в общую форму ВопросДаНетОтмена
// 
// Возвращаемое значение:
//  Структура - структура с полями:
//   * ТекстВопроса - Строка - текст вопроса
//   * СписокКнопок - СписокЗначений Из Строка - список кнопок.
//   * ЗаголовокВопроса - Строка - заголовок.
//   * ОтображатьКнопкуЗакрытия - Булево - есть закрытие окна.
//
Функция ПараметрыФормыВопросДаНетОтмена() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ТекстВопроса", "");
	Результат.Вставить("СписокКнопок", Новый СписокЗначений());
	Результат.Вставить("ЗаголовокВопроса", "");
	Результат.Вставить("ОтображатьКнопкуЗакрытия", Истина);
	Возврат Результат;
	
КонецФункции

#Область ЗаписьОбъектов

// Записать объект и замерить длительность его записи.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Записать(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Записать объект, замерить длительность его записи и закрыть форму объекта.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура ЗаписатьИЗакрыть(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Провести документ и замерить длительность его проведения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при записи могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура Провести(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъект(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Провести документ, замерить длительность его проведения и закрыть форму документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма в которой выполняется вызов этой функции.
//  ЕстьВопросыПередЗаписью - Булево - Истина, если при проведении могут отображаться вопросы пользователю.
//  ДействиеПослеЗаписи - ОписаниеОповещения - обработчик, выполняемый после записи объекта.
//
Процедура ПровестиИЗакрыть(Форма, ЕстьВопросыПередЗаписью = Ложь, ДействиеПослеЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаписи = СтруктураПараметровЗаписиОбъекта();
	ПараметрыЗаписи.ЕстьВопросыПередЗаписью = ЕстьВопросыПередЗаписью;
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи);
	
КонецПроцедуры

// Установить пометку удаления документа, имитирует стандартную команду пометки удаления документа.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа в которой выполняется вызов этой функции:
//  	* Объект - ДокументОбъект -
//
Процедура УстановитьПометкуУдаленияДокумента(Форма) Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	УстановитьПометкуУдаленияДокументаВопрос(Форма);
	
КонецПроцедуры


// Выполняет запись документа в форме
//
// Параметры:
//  Форма - РасширениеУправляемойФормыДляОбъектов - Форма документа в которой выполняется вызов этой функции:
//  	* Объект - ДокументОбъект -
//	ПараметрыЗаписи - Структура - 
//
Функция ЗаписатьОбъект(Форма, ПараметрыЗаписи)
	
	Перем Проведен, ДействиеПослеЗаписи;
	
	ОчиститьСообщения();
	
	Если Не ПараметрыЗаписи.ЕстьВопросыПередЗаписью Тогда
		Если Не Форма.Объект.Свойство("Проведен", Проведен) Тогда
			Проведен =  Ложь;
		КонецЕсли;
		
		Если Проведен И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		КонецЕсли;
		
		НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи);
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Форма.Записать(ПараметрыЗаписи);
	
	Если ДействиеПослеЗаписи <> Неопределено Тогда
		Если Результат Тогда
			ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
		КонецЕсли;
		
		ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДействиеПослеЗаписи);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет запись документа в форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма документа в которой выполняется вызов этой функции:
//  	* Объект - ДокументОбъект -
//	ПараметрыЗаписи - Структура - 
//
Процедура ЗаписатьОбъектИЗакрыть(Форма, ПараметрыЗаписи)
	
	ПараметрыЗаписи.ПринудительноЗакрытьФорму = Истина;
	ОчиститьСообщения();
	
	Если ПараметрыЗаписи.ЕстьВопросыПередЗаписью Тогда
		ПараметрыЗаписи.НовыйОбъект = Не ЗначениеЗаполнено(Форма.Объект.Ссылка);
		Форма.ПринудительноЗакрытьФорму = ПараметрыЗаписи.ПринудительноЗакрытьФорму;
		Форма.Записать(ПараметрыЗаписи);
	Иначе
		Если ЗаписатьОбъект(Форма, ПараметрыЗаписи) Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураПараметровЗаписиОбъекта()
	
	ПараметрыЗаписи = Новый Структура;
	
	ПараметрыЗаписи.Вставить("ЕстьВопросыПередЗаписью", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Ложь);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Запись);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

Процедура НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи)
	
	Перем ПринудительноЗакрытьФорму;
	Перем РежимЗаписи;
	
	Если Не ПараметрыЗаписи.Свойство("ПринудительноЗакрытьФорму", ПринудительноЗакрытьФорму) Тогда
		ПринудительноЗакрытьФорму = Ложь;
	КонецЕсли;
	
	Если Не ПараметрыЗаписи.Свойство("РежимЗаписи", РежимЗаписи) Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Запись И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "Записать.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ЗаписатьИЗакрыть.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "Провести.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ПровестиИЗакрыть.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Не ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведение.%1";
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И ПринудительноЗакрытьФорму Тогда
		ШаблонКлючевойОперации = "ОтменитьПроведениеИЗакрыть.%1";
	КонецЕсли;
	
	ИмяКлючевойОперации = СтрШаблон(ШаблонКлючевойОперации, Форма.ИмяФормы);
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяКлючевойОперации);
	
КонецПроцедуры

#КонецОбласти

// Открывает форму после того, как проверит, что данные в форме-владельце не модифицированы
//  Если данные модифицированы - задается вопрос и данные записываются в форме-владельце.
//  Потом открывается форма.
//
// Параметры:
//  ИмяФормы - Строка -
//  ПараметрыФормы  - Структура -
//  ФормаВладелец - ФормаКлиентскогоПриложения - 
//  РежимОткрытияФормы - Строка - значение по умолчанию "Независимый"
//  ИмяПараметраСсылка - Строка - если параметр передан, то в ПараметрыФормы после проведения документа объекта из ФормаВладелец
//                                     помещается ссылка на записанный документ.
//
Процедура ОткрытьФормуПослеПроверкиПроведенностиДокумента(ИмяФормы, ПараметрыФормы, ФормаВладелец, РежимОткрытияФормы = "Независимый", ИмяПараметраСсылка = "") Экспорт
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиОткрытияФормыПослеПроверкиПроведенностиДокумента();
	ДополнительныеПараметры.ИмяФормы = ИмяФормы;
	ДополнительныеПараметры.ПараметрыФормы = ПараметрыФормы;
	ДополнительныеПараметры.ФормаВладелец = ФормаВладелец;
	ДополнительныеПараметры.ИмяПараметраСсылка = ИмяПараметраСсылка;
	
	Если ВРег(РежимОткрытияФормы) =  ВРег("Независимый") Тогда	
		ДополнительныеПараметры.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
		
	ИначеЕсли  ВРег(РежимОткрытияФормы) = ВРег("БлокироватьОкноВладельца") Тогда
		ДополнительныеПараметры.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли  ВРег(РежимОткрытияФормы) =  ВРег("БлокироватьВесьИнтерфейс") Тогда
		ДополнительныеПараметры.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Неизвестное значение параметра %1'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, "РежимОткрытияФормы");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПослеПроверкиПроведенностиДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокумента(ФормаВладелец, ОписаниеОповещения);
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - Описание:
// * ИмяПараметраСсылка -Строка - 
// * ФормаВладелец - ФормаКлиентскогоПриложения - Свойства:
// 		** Объект - ДокументОбъект - 
// * ПараметрыФормы - Структура - 
// * ИмяФормы - Строка -
Функция ДополнительныеПараметрыОбработкиОткрытияФормыПослеПроверкиПроведенностиДокумента()
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФормы");
	ДополнительныеПараметры.Вставить("ПараметрыФормы");
	ДополнительныеПараметры.Вставить("ФормаВладелец");
	ДополнительныеПараметры.Вставить("ИмяПараметраСсылка");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции


// Проверяет модифицированность и проведенность документе. Если не проведен или модифицирован
// задает пользователю вопрос и проводит документ в форме. Затем выполняется оповещение.
// В результат выполняемого оповещения помещается ссылка на проведенный документ.
//
// Параметры:
//  Форма		 - ФормаКлиентскогоПриложения 
//  Оповещение	 - ОписаниеОповещения 
//
Процедура ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокумента(Форма, Оповещение) Экспорт
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Ссылка)
		Или Не Форма.Объект.Проведен
		Или Форма.Модифицированность Тогда
		
		ДополнительныеПараметры = Новый Структура("Оповещение, Форма", Оповещение, Форма);
		ОповещениеВопроса = Новый ОписаниеОповещения(
			"ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокументаЗавершение",
			ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Для продолжения необходимо провести документ. Провести?'");
		ПоказатьВопрос(ОповещениеВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Форма.Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеОбработчикиСобытий

// Универсальный обработчик изменения реквизитов
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения - форма, где выполняется обработчик
//  ИмяРеквизита			 - Строка, Массив Из Строка	 - имя обрабатываемого реквизита
//  ТребуетсяВызовСервера	 - Булево			 - признак необходимости вызова сервера
//  ПараметрыОбработки		 - Структура		 - дополнительные параметры обработки
//
Процедура ПродолжитьИзменениеРеквизита(Форма, ИмяРеквизита = "", ТребуетсяВызовСервера = Ложь, Знач ПараметрыОбработки = Неопределено) Экспорт
	
	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = Новый Структура;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ТребуетсяВызовСервера, ПараметрыОбработки", ТребуетсяВызовСервера, ПараметрыОбработки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииИзмененияРеквизитаЛокализации", Форма, ПараметрыОповещения);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИмяРеквизита);
	
КонецПроцедуры

// Универсальный обработчик команд формы
//
// Параметры:
//  Форма					 - ФормаКлиентскогоПриложения	 - форма, где выполняется обработчик
//  ИмяКоманды				 - Строка, Массив	 - имя выполняемой команды
//  ТребуетсяВызовСервера	 - Булево			 - признак необходимости вызова сервера
//  ПараметрыОбработки		 - Структура		 - дополнительные параметры обработки
//
Процедура ПродолжитьВыполнениеКоманды(Форма, ИмяКоманды = "", ТребуетсяВызовСервера = Ложь, Знач ПараметрыОбработки = Неопределено) Экспорт
	
	Если ПараметрыОбработки = Неопределено Тогда
		ПараметрыОбработки = Новый Структура;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ТребуетсяВызовСервера, ПараметрыОбработки", ТребуетсяВызовСервера, ПараметрыОбработки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыЛокализации", Форма, ПараметрыОповещения);
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, ИмяКоманды);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСПериодомРегистрации

// Возвращает строковое представление периода.
//
// Параметры:
//  ПериодРегистрации - Дата   - Дата внутри месяца или квартала, представление которых нужно получить
//  КалендарныйПериод - Строка - "Месяц" или "Квартал".
//
// Возвращаемое значение:
//  Строка - Представление месяца или квартала, внутри которых находится значение ПериодРегистрации.
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод = "Месяц") Экспорт
	
	Возврат ОбщегоНазначенияУТКлиентСервер.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод);
	
КонецФункции

// Увеличивает или уменьшает значение периода на одно значение.
//
// Параметры:
//  Направление                     - Число  - "1", если шагаем на следующий месяц, "-1", если шагаем в предыдущий месяц
//  СтандартнаяОбработка            - Булево - Признак стандартной обработки события
//  ПериодРегистрации               - Дата   - Переменная, в которую помещается значение следующего или предыдущего месяца
//  ПредставлениеПериодаРегистрации - Строка - Представление месяца ПериодаРегистрации.
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;

	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Выбирает период из списка возможных периодов.
//
// Параметры:
//  Элемент - ПолеФормы - Поле формы, в котором наступает событие "НачалоВыбора".
//  СтандартнаяОбработка - Булево     - Признак стандартной обработки события
//  ПериодРегистрации - Дата       - Переменная, в которую помещается выбранное значение
//  Форма - ФормаКлиентскогоПриложения - Управляемая форма, в которой происходит событие "Начало выбора"
//  ОповещениеОВыборе - ОписаниеОповещения - Описание оповещения о выборе периода
//  НачальноеЗначение - Дата - Начальная дата для выбора периода
//  КалендарныйПериод - Строка - "Месяц" или "Квартал" - шаг периода.
//
Процедура НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, Форма, ОповещениеОВыборе, НачальноеЗначение = Неопределено, КалендарныйПериод = "Месяц") Экспорт

	СтандартнаяОбработка = Ложь;

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли;

	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, НСтр("ru='ДФ=''yyyy'''")) + "..."));
	НачалоПериодаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	
	Если КалендарныйПериод = "Месяц" Тогда
		КоличествоПериодовВГоду = 12;
		КоличествоМесяцевВПериоде = 1;
	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
		КоличествоПериодовВГоду = 4;
		КоличествоМесяцевВПериоде = 3;
	КонецЕсли;
	
	Для Счетчик = 1 По КоличествоПериодовВГоду Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоПериодаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоПериодаЗаполнения, КалендарныйПериод));
		Если НачальноеЗначение = НачалоПериодаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли;
		НачалоПериодаЗаполнения = ДобавитьМесяц(НачалоПериодаЗаполнения, КоличествоМесяцевВПериоде);
	КонецЦикла;
	
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, НСтр("ru='ДФ=''yyyy'''")) + "..."));
	
	ДополнительныеПараметры = ДополнительныеПараметрыВыбораПериодаРегистрации();
	ДополнительныеПараметры.Элемент = Элемент;
	ДополнительныеПараметры.СтандартнаяОбработка = СтандартнаяОбработка;
	ДополнительныеПараметры.ПериодРегистрации = ПериодРегистрации;
	ДополнительныеПараметры.Форма             = Форма;
	ДополнительныеПараметры.ОповещениеОВыборе = ОповещениеОВыборе;
	ДополнительныеПараметры.НачальноеЗначение = НачальноеЗначение;
	ДополнительныеПараметры.КалендарныйПериод = КалендарныйПериод;
	
	Оповещение = Новый ОписаниеОповещения("НачалоВыбораПредставленияПериодаРегистрацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
КонецПроцедуры


// Возвращает доп. параметры выбора периода
// 
// Возвращаемое значение:
// 	Структура - Описание:
// 		* КалендарныйПериод - Строка - "Месяц", "Квартал"
// 		* НачальноеЗначение  - Дата - 
// 		* ОповещениеОВыборе - ОписаниеОповещения - 
// 		* Форма - ФормаКлиентскогоПриложения - 
// 		* ПериодРегистрации - Дата -
// 		* СтандартнаяОбработка - Булево -
// 		* Элемент - ПолеФормы - 
Функция ДополнительныеПараметрыВыбораПериодаРегистрации()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент");
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка");
	ДополнительныеПараметры.Вставить("ПериодРегистрации");
	ДополнительныеПараметры.Вставить("Форма");
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе");
	ДополнительныеПараметры.Вставить("НачальноеЗначение");
	ДополнительныеПараметры.Вставить("КалендарныйПериод");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Описание
// 
// Параметры:
// 	ВыбранныйЭлемент - ЭлементСпискаЗначений - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыВыбораПериодаРегистрации
Процедура НачалоВыбораПредставленияПериодаРегистрацииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДополнительныеПараметры.НачальноеЗначение) Тогда
		НачалоВыбораПредставленияПериодаРегистрации(
			ДополнительныеПараметры.Элемент, 
			ДополнительныеПараметры.СтандартнаяОбработка, 
			ДополнительныеПараметры.ПериодРегистрации,
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.ОповещениеОВыборе,
			ВыбранныйЭлемент.Значение, 
			ДополнительныеПараметры.КалендарныйПериод);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

#КонецОбласти

#Область ВыборПериодаИзСписка

Процедура ВыбратьПериодОтчета(Форма, Элемент, ВидПериода, НачалоПериода, ОбработчикВыбора)
	
	Список = ОбщегоНазначенияУТКлиентСервер.ДоступныеЗначенияПериодаПоВидуПериода(НачалоПериода, ВидПериода);
	Если Список.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСписка = Список.НайтиПоЗначению(НачалоПериода);
	
	ДополнительныеПараметры = ДополнительныеПараметрыОбработкиВыбораПериода();
	ДополнительныеПараметры.Форма = Форма;
	ДополнительныеПараметры.Элемент = Элемент;
	ДополнительныеПараметры.ВидПериода = ВидПериода;
	ДополнительныеПараметры.НачалоПериода = НачалоПериода;
	ДополнительныеПараметры.Список = Список;
	ДополнительныеПараметры.ОбработчикВыбора = ОбработчикВыбора;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодОтчетаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Форма.ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, ЭлементСписка);
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура - Описание:
// * ОбработчикВыбора - ОписаниеОповещения - 
// * Список - СписокЗначений - 
// * НачалоПериода - Дата -
// * ВидПериода - ПеречислениеСсылка.ДоступныеПериодыОтчета - 
// * Элемент - ПолеФормы - 
// * Форма - ФормаКлиентскогоПриложения - 
Функция ДополнительныеПараметрыОбработкиВыбораПериода()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма");
	ДополнительныеПараметры.Вставить("Элемент");
	ДополнительныеПараметры.Вставить("ВидПериода");
	ДополнительныеПараметры.Вставить("НачалоПериода");
	ДополнительныеПараметры.Вставить("Список");
	ДополнительныеПараметры.Вставить("ОбработчикВыбора");
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

// Служебная процедура.
//
// Параметры:
// 	ВыбранныйПериод - ЭлементСпискаЗначений - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиВыбораПериода
Процедура ВыбратьПериодОтчетаЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт

	Если ВыбранныйПериод = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Индекс = ДополнительныеПараметры.Список.Индекс(ВыбранныйПериод);
	Если Индекс = 0 ИЛИ Индекс = ДополнительныеПараметры.Список.Количество() - 1 Тогда
		ВыбратьПериодОтчета(ДополнительныеПараметры.Форма, 
							ДополнительныеПараметры.Элемент, 
							ДополнительныеПараметры.ВидПериода, 
							ВыбранныйПериод.Значение, 
							ДополнительныеПараметры.ОбработчикВыбора);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикВыбора, ВыбранныйПериод);
	
КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод.
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт 

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли; 
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочие

Процедура ЗаписатьОбъектПриНеобходимости(Форма, ПараметрыЗаписи, Отказ = Ложь, ПроверкиПройдены = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПараметрыДляЗаписи   = ПараметрыЗаписи;
	НеобходимаОтложеннаяЗапись = ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи");
	Если НеобходимаОтложеннаяЗапись Или ПроверкиПройдены Тогда
		Отказ = Истина;
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ОбработатьЗаписьОбъекта", 0.1, Истина);
	Иначе
		НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	Форма - РасширениеУправляемойФормыДляОбъектов - Форма документа:
// 		* Объект - ДокументОбъект - 
// 	ПараметрыЗаписи - Структура - 
// 	Отказ - Булево - Описание
// Возвращаемое значение:
// 	Булево - Описание
Функция ОбработатьЗаписьОбъектаВФорме(Форма, ПараметрыЗаписи, Отказ = Ложь) Экспорт
	
	ДействиеПослеЗаписи = Неопределено;
	Если ПараметрыЗаписи.Свойство("ДействиеПослеЗаписи", ДействиеПослеЗаписи) Тогда
		ПараметрыЗаписи.Удалить("ДействиеПослеЗаписи");
	КонецЕсли;
	
	Результат = Ложь;
	
	Если Отказ Тогда
		Возврат Результат;
	КонецЕсли;
	
	НачатьЗамерВремениЗаписиОбъекта(Форма, ПараметрыЗаписи);
	Форма.НеВыполнятьПроверкуПередЗаписью = Истина;
	
	Отказ = Истина;
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Форма.ПринудительноЗакрытьФорму);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Форма.Объект.Ссылка));
	Результат = Форма.Записать(ПараметрыЗаписи);
	
	Форма.ПринудительноЗакрытьФорму = Ложь;
	Форма.НеВыполнятьПроверкуПередЗаписью = Ложь;
	
	Если Результат И ДействиеПослеЗаписи <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


// Описание
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма документа:
// 		* Объект - ДокументОбъект -
// 	Объект - ДокументОбъект - 
// 	ПараметрыЗаписи  - Структура - 
Процедура ВыполнитьДействияПослеЗаписи(Форма, Объект, ПараметрыЗаписи) Экспорт
	
	Если Не ПараметрыЗаписи.Свойство("НовыйОбъект") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаписи.НовыйОбъект Тогда
		ТекстЗаголовка = НСтр("ru='Создание:'");
	Иначе
		ТекстЗаголовка = НСтр("ru='Изменение:'");
	КонецЕсли;
	ОповеститьПользователяОбИзмененииОбъекта(Объект.Ссылка, ТекстЗаголовка);
	
	Если Форма.ПринудительноЗакрытьФорму Тогда
		Форма.ПодключитьОбработчикОжидания("Подключаемый_ЗакрытьФорму", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Оповещает об изменении регистра РеестрДокументов, который используется в журналах документов.
// Используется для обновления списка.
// 
Процедура ОповеститьОЗаписиДокументаВЖурнал() Экспорт

	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.РеестрДокументов"));
	
КонецПроцедуры

Процедура ПриОпределенииВозможностиОбновления() Экспорт
	
	МинимальноДопустимаяВерсия = МинимальноДопустимаяВерсия();
	
	ПараметрыКлиента = Новый Структура;
	ОбщегоНазначенияУТВызовСервера.ПараметрыРаботыКлиентаПриЗапуске(ПараметрыКлиента);
	
	Если ПараметрыКлиента.ВерсияДанных = "0.0.0.0" Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим допустимость обновления
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ПараметрыКлиента.ВерсияДанных, МинимальноДопустимаяВерсия) < 0 Тогда
		Сообщение =
			НСтр("ru = 'Обновление на текущую версию допустимо только с версии %1 и выше.
			|(Недопустимая попытка обновления с версии %2)
			|Необходимо восстановить информационную базу из резервной копии
			|и повторить обновление согласно файлу 1cv8upd.htm'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение,
			МинимальноДопустимаяВерсия,
			ПараметрыКлиента.ВерсияДанных);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	 
КонецПроцедуры

// Возвращает минимально допустимую версию для обновления
// 
// Возвращаемое значение:
// 	Строка - Минимально допустимая версия для обновления
//
Функция МинимальноДопустимаяВерсия() Экспорт
	
	МинимальноДопустимаяВерсия = "11.5.17.74"; // для УТ11
	
	
	
	Возврат МинимальноДопустимаяВерсия;
	
КонецФункции

// Выполняет оповещение пользователя о проведении или отмене проведения документов,
// а также записывает в историю информацию об изменениях объекта.
//
//	Параметры:
//		Список - ТаблицаФормы - 
//		ВыделенныеСтроки - Массив Из ДокументСсылка - массив ссылок документов,
//		ТипСписка - Строка - тип документов списка
//		ПараметрыОбновленияСписка - Неопределено, Структура - параметры обновления:
//		* Форма - ФормаКлиентскогоПриложения - форма, в которой располагается список документов
//		* ИмяСписка - Строка - имя реквизита динамического списка на форме
//		* ОбновитьСписок - Булево - признак необходимости обновления списка
//
Процедура ОповещениеПроведенияОтменыПроведенияДокумента(Список, ВыделенныеСтроки, ТипСписка, ПараметрыОбновленияСписка = Неопределено)
	
	НавигационнаяСсылка = Неопределено;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Документ = ТипСписка;
		ТекстОповещения = НСтр("ru='Изменение (%КоличествоДокументов%)'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", ВыделенныеСтроки.Количество());
	Иначе
		Документ = ВыделенныеСтроки[0];
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Документ);
		ТекстОповещения = НСтр("ru='Изменение'");
	КонецЕсли;
	
	Если ПараметрыОбновленияСписка <> Неопределено Тогда
		ОбновитьСписок = ПараметрыОбновленияСписка.ОбновитьСписок;
	Иначе
		ОбновитьСписок = Истина;
	КонецЕсли;
	
	Если ОбновитьСписок Тогда
		Список.Обновить();
	Иначе
		РаботаСЖурналамиДокументовКлиент.УстановитьПризнакОтображенияНеактуальныхДанныхВСписке(
					ПараметрыОбновленияСписка.Форма, ПараметрыОбновленияСписка.ИмяСписка);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, Строка(Документ),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Процедура завершения для ПриВыбореОтбораПоАктуальности().
// Устанавливает в форме списка отбор по дате актуальности. Изменяет значение даты актуальности 
// в зависимости от строки актуальности.
//
// Параметры:
//	ДатаВыбора - Дата - введенное пользователем значение даты в результате диалога.
//	ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ПриВыбореОтбораПоАктуальностиЗавершение(ДатаВыбора, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если ЗначениеЗаполнено(ДатаВыбора) Тогда
		Форма[ДополнительныеПараметры.ИмяРеквизитаДатаСобытия] = ДатаВыбора;
		Представление = НСтр("ru='Истекает на %Дата%'");
		Представление = СтрЗаменить(Представление, "%Дата%", Формат(ДатаВыбора, "ДЛФ=D"));
		Форма[ДополнительныеПараметры.ИмяРеквизитаАктуальность] = Представление;
		Форма.Элементы[ДополнительныеПараметры.ИмяЭлементаАктуальность].СписокВыбора.НайтиПоЗначению("ИстекаетНаДату").Представление = Представление;
	КонецЕсли;
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(ДополнительныеПараметры.Список,
		Форма[ДополнительныеПараметры.ИмяРеквизитаАктуальность], Форма[ДополнительныеПараметры.ИмяРеквизитаДатаСобытия], 
		Форма.Элементы[ДополнительныеПараметры.ИмяЭлементаАктуальность].СписокВыбора);
	
	Форма.ОбновитьОтображениеДанных();
	
КонецПроцедуры


// Описание
// 
// Параметры:
// 	ИмяДокумента - Строка -
//  Список - ТаблицаФормы - Таблица формы 
// Возвращаемое значение:
// 	Массив - Описание
Функция ВыбратьИзВыделенныхСтрокСпискаДокументыПоИмениМетаданных(ИмяДокумента, Список)
	
	ВыделенныеСтроки = Список.ВыделенныеСтроки;
	
	ПодходящиеДокументы = Новый Массив();
	
	Тип = Тип("ДокументСсылка." + ИмяДокумента);
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Список.ДанныеСтроки(Строка);
		
		Если ТипЗнч(ДанныеСтроки["Ссылка"]) = Тип Тогда
			ПодходящиеДокументы.Добавить(ДанныеСтроки["Ссылка"]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПодходящиеДокументы;
	
КонецФункции

Процедура СоздатьДокумент(ХозяйственнаяОперация, ЗначенияЗаполнения, ИмяДокумента)
				
	ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
 	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", СтруктураПараметров);
	
КонецПроцедуры

Процедура ПоказатьВопросНеВыбраноРаспоряжение(Параметры)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросНеВыбраноРаспоряжение", ЭтотОбъект, Параметры);
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не выбрано распоряжение для оформления документа.
			|Для создания документа без распоряжения необходимо перейти в журнал ""%1"".'"),
		Параметры.СинонимЖурнала);
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Перейти в журнал'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		ТекстВопроса,Кнопки,
		,
		КодВозвратаДиалога.Отмена,
		НСтр("ru = 'Не выбрано распоряжение'"));
	
КонецПроцедуры

Процедура ОбработатьВопросНеВыбраноРаспоряжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Ок Тогда
		
		ОткрытьЖурнал(Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеВнутриТаблицы(Форма, Элемент)
	
	Если ТипЗнч(Элемент.Родитель) = Тип("ТаблицаФормы") Тогда
		Возврат Элемент.Родитель;
	ИначеЕсли ТипЗнч(Элемент.Родитель) = Тип("ФормаКлиентскогоПриложения") Тогда
		Возврат Неопределено;
	Иначе	
		Возврат ПолеВнутриТаблицы(Форма, Элемент.Родитель);
	КонецЕсли;
	
КонецФункции

// Служебный метод
// 
// Параметры:
// 	Результат - Произвольный - 
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиОткрытияФормыПослеПроверкиПроведенностиДокумента
Процедура ОткрытьФормуПослеПроверкиПроведенностиДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИмяПараметраСсылка) Тогда
		ДокументСсылка = ДополнительныеПараметры.ФормаВладелец.Объект.Ссылка;
		
		ДополнительныеПараметры.ПараметрыФормы.Вставить(ДополнительныеПараметры.ИмяПараметраСсылка, ДокументСсылка);
	КонецЕсли;
	
	ОткрытьФорму(ДополнительныеПараметры.ИмяФормы,
				ДополнительныеПараметры.ПараметрыФормы,
				ДополнительныеПараметры.ФормаВладелец,
				,
				,
				,
				,
				ДополнительныеПараметры.РежимОткрытияОкнаФормы);
	
КонецПроцедуры

Процедура ВыполнитьОбработкуОповещенияПослеПроверкиПроведенностиДокументаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ДокументПроведен = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСообщения();
		Попытка
			Форма = ДополнительныеПараметры.Форма; // РасширениеУправляемойФормыДляОбъектов
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НеВыполнятьПроверкуПередЗаписью") Тогда
				// Если есть этот реквизит, значит задействована механика записи через обработку оповещения
				// Т.е. эта процедура объект не запишет, и обработку оповещения будет выполнять фукнция ОбработатьЗаписьОбъектаВФорме
				ПараметрыЗаписи.Вставить("ДействиеПослеЗаписи", ДополнительныеПараметры.Оповещение);
			КонецЕсли;
			ДокументПроведен = Форма.Записать(ПараметрыЗаписи);
		Исключение
			ПоказатьПредупреждение(,НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецПопытки;
	КонецЕсли;
	
	Если ДокументПроведен Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение, ДокументПроведен);
	КонецЕсли;
	
КонецПроцедуры

// Функция-конструктор параметров способа определения себестоимости, 
// которые передаются между формами документа "Возврат товаров от клиента".
// 
// Возвращаемое значение:
// 	Структура - данные строк товаров:
// 		* СтрокиТаблицыТовары - Неопределено
//
Функция НоваяСтруктураТовары() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("СтрокиТаблицыТовары");
	Возврат Результат;
	
КонецФункции

// Функция-конструктор параметров способа определения себестоимости, 
// которые передаются между формами документа "Возврат товаров от клиента".
// 
// Возвращаемое значение:
// 	Структура - состав полей:
// * СебестоимостьВР                       - Число
// * СебестоимостьПР                       - Число
// * СебестоимостьРегл                     - Число
// * СебестоимостьБезНДС                   - Число
// * Себестоимость                         - Число 
// * ДатаЗаполненияСебестоимостиПоВидуЦены - Дата 
// * ВидЦеныСебестоимости                  - СправочникСсылка.ВидыЦен 
// * Идентификатор                         - Число
// * ДокументРеализации                    - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ОтчетОРозничныхПродажах -
// * СпособОпределенияСебестоимости        - ПеречислениеСсылка.СпособыОпределенияСебестоимостиВозврата
//  
Функция НовыйЭлементМассивТовары() Экспорт
	
	Результат = Новый Структура();
	
	Результат.Вставить("СпособОпределенияСебестоимости");
	Результат.Вставить("ДокументРеализации");
	Результат.Вставить("Идентификатор");
	
	Результат.Вставить("ВидЦеныСебестоимости");
	Результат.Вставить("ДатаЗаполненияСебестоимостиПоВидуЦены");
	Результат.Вставить("Себестоимость");
	Результат.Вставить("СебестоимостьБезНДС");
	
	Результат.Вставить("СебестоимостьРегл");
	Результат.Вставить("СебестоимостьПР");
	Результат.Вставить("СебестоимостьВР");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти
