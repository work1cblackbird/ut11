////////////////////////////////////////////////////////////////////////////////
// ОбменССайтомПереопределяемый: механизм обмена с сайтом
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ФормаУзлаОбмена

// Определяет имя формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  ВыбраннаяФорма - ФормаКлиентскогоПриложения - форма для узла плана обмена.
//
Процедура ПереопределитьФормуУзла(ВыбраннаяФорма) Экспорт
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - узел плана обмена "ОбменССайтом".
//
Процедура ФормаУзлаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	//++ НЕ ГОСИС
	ОбменССайтамиУТ.ФормаУзлаОбменаСоглашениеПриИзмененииНаСервере(Форма, Истина);
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")) И ТекущийОбъект.ОбменЗаказами Тогда
		Форма.Объект.ОбменЗаказами = Ложь;
		Форма.Элементы.СтраницаОбменЗаказами.Видимость = Ложь;
	КонецЕсли;
	
	Форма.ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Форма.ИспользуютсяГруппыДоступаПартнеров   = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаПартнеров");
	
	ОбменССайтомКлиентСерверПереопределяемый.УстановитьДоступностьЭлементовФормыУзла(Форма, ТекущийОбъект);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ФормаУзлаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	Если НЕ ЗначениеЗаполнено(Форма.СпособИдентификацииКонтрагентов)  Тогда
		
		Форма.СпособИдентификацииКонтрагентов = Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП;
		
	КонецЕсли;
	
	Если Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		Форма.Элементы.ГруппаДоступаПартнеров.Заголовок = НСтр("ru = 'Группа доступа создаваемых контрагентов'");
	Иначе
		Форма.Элементы.ГруппаДоступаПартнеров.Заголовок = НСтр("ru = 'Группа доступа создаваемых партнеров'");
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  Отказ - Булево - признак отказа от выполнения действия.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ФормаУзлаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт	
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы узла плана обмена "Обмен с сайтом".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
//  ТекущийОбъект - ПланОбменаОбъект - записываемый объект.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//
Процедура ФормаУзлаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

// В данной процедуре можно изменить условное оформление формы узла обмена с сайтом.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма узла обмена с сайтом.
//
Процедура УстановитьУсловноеОформлениеФормаУзлаОбмена(Форма) Экспорт
	//++ НЕ ГОСИС
	ОбменССайтамиУТ.УстановитьУсловноеОформление(Форма);
	//-- НЕ ГОСИС
КонецПроцедуры

// В данной процедуре можно изменить видимость элементов формы узла обмена с сайтом
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения - форма узла обмена с сайтом.
//
Процедура УстановитьВидимостьЭлементовФормыУзла(Форма) Экспорт
	//++ НЕ ГОСИС
	Форма.Элементы.ГруппаСоответствиеСтатусов.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	//-- НЕ ГОСИС
КонецПроцедуры

// Корректирует проверяемые при записи реквизиты формы узла 
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма плана узла обмена, в которой выполняется запись.
//  ПроверяемыеРеквизиты  - Массив - массив имен проверяемых на заполненность реквизитов формы.
//  ОбменТоварами         - Булево - признак того, что будет выполняться обмен товарами.
//  ОбменЗаказами         - Булево - признак того, что будет выполняться обмен заказами.
//
Процедура СкорректироватьПроверяемыеРеквизитыФормыУзла(Форма, ПроверяемыеРеквизиты, ОбменТоварами, ОбменЗаказами) Экспорт
	
	//++ НЕ ГОСИС
	РеквизитыОбменаЗаказами = ОбменССайтамиУТ.РеквизитыОбменаЗаказами();
	
	Если Не ОбменЗаказами Тогда
		НепроверяемыеРеквизиты = РеквизитыОбменаЗаказами;
	Иначе
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПроверяемыеРеквизиты, РеквизитыОбменаЗаказами);
		
		НепроверяемыеРеквизиты = Новый Массив;
		НепроверяемыеРеквизиты.Добавить("ГруппаДляНовойНоменклатуры");
		НепроверяемыеРеквизиты.Добавить("Менеджер");
		НепроверяемыеРеквизиты.Добавить("СоответствиеСтатусовЗаказов");
		Если Не Форма.ИспользуютсяГруппыДоступаПартнеров 
			Или (НЕ Форма.ИспользоватьПартнеровКакКонтрагентов И НЕ Форма.СоздаватьПартнеровДляНовыхКонтрагентов) Тогда
			
			НепроверяемыеРеквизиты.Добавить("ГруппаДоступаПартнеров");
		КонецЕсли;
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов") Тогда
			НепроверяемыеРеквизиты.Добавить("Склад");
		КонецЕсли;
		
		Если Не Форма.ЗагружатьФормыОплаты Тогда
			НепроверяемыеРеквизиты.Добавить("СоответствиеФормОплат");
		КонецЕсли;
		
		Если Не Форма.ОнлайнОплаты Тогда
			НепроверяемыеРеквизиты.Добавить("СоответствиеОнлайнОплат");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Обработчик события ПриИзменении флажка формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - ФормаКлиентскогоПриложения - Форма узла обмена.
//
Процедура ПолеВводаПриИзмененииНаСервере(ЭлементИмя, Форма) Экспорт
	
	//++ НЕ ГОСИС
	Если ВРег(ЭлементИмя) = ВРег("Соглашение") Тогда
		
		ОбменССайтамиУТ.ФормаУзлаОбменаСоглашениеПриИзмененииНаСервере(Форма);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - ФормаКлиентскогоПриложения - Форма узла обмена.
//
Процедура ПолеФлажкаПриИзмененииНаСервере(ЭлементИмя, Форма) Экспорт
	

	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования табличной части формы узла обмена.
//
// Параметры:
//  ЭлементИмя - Строка - наименование элемента формы.
//  Форма - ФормаКлиентскогоПриложения - Форма узла обмена.
//  НоваяСтрока - Булево - Истина, если строка была добавлена или скопирована.
//  ОтменаРедактирования - Булево - Истина, если произошла отмена редактирования.
//  Отказ - Булево - Признак отказа от записи объекта.
//
Процедура ТаблицаФормыПередОкончаниемРедактированияНаСервере(ЭлементИмя, НоваяСтрока, ОтменаРедактирования, Отказ, Форма) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДанных

// Формирует текст запроса, который позволит получить таблицу значений, описанную 
// в макете "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом".
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаОбновлениеПакетаПредложений(ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	Тексты = Новый Массив();
	ТекстЗапроса = ПолучитьТекстЗапросаВтНоменклатура() + 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад,
	|	Склады.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склад}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
	|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
	|	СоглашенияСКлиентами.Валюта КАК Валюта,
	|	СоглашенияСКлиентами.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашения
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|ГДЕ
	|	СоглашенияСКлиентами.Типовое
	|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям
	|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
	|{ГДЕ
	|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен
	|ПОМЕСТИТЬ ВидыЦен
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентами.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиТовары.ВидЦены
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|ИЗ
	|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = ТекстВтДоступныеТовары();
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	втНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоступныеСоглашенияСоглашения.Ссылка КАК ТипЦены,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) = 0
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|			ИНАЧЕ ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0)
	|		КОНЕЦ / ВЫБОР
	|			КОГДА СоглашенияСКлиентамиТовары.Упаковка ЕСТЬ НЕ NULL 
	|					И СоглашенияСКлиентамиТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ВЫБОР
	|						КОГДА &ТекстЗапросаКоэффициентУпаковки1 = 0
	|							ТОГДА 1
	|						ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
	|						ТОГДА 1
	|					ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
	|				КОНЕЦ
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаЗаЕдиницу,
	|	ДоступныеСклады.Склад КАК Склад,
	|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК ОстатокНаСкладе,
	|	ВЫБОР
	|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
	|				И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ДоступныеСоглашенияСоглашения.Валюта) КАК Справочник.Валюты).Код
	|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Код
	|	КОНЕЦ КАК ТипЦеныВалютаКод,
	|	ЕСТЬNULL(втНоменклатура.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение, """") КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
	|	втНоменклатура.Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	Характеристика.*,
	|	ТипЦены.*,
	|	ЦенаЗаЕдиницу,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ТипЦеныВалютаКод,
	|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
	|	ТипЦеныЕдиницаЦеныКоэффициент,
	|	НоменклатураВидНоменклатуры.*}
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДоступныеТовары КАК СвободныеОстатки
	|		ПО СвободныеОстатки.Номенклатура = ВтНоменклатура.Номенклатура
	|			И (СвободныеОстатки.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И СвободныеОстатки.Склад = ДоступныеСклады.Склад
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
	|		ПО (ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка)
	|			И (СоглашенияСКлиентамиТовары.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И (СоглашенияСКлиентамиТовары.Номенклатура = втНоменклатура.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
	|		ПО (ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка)
	|			И (втНоменклатура.Номенклатура.ЦеноваяГруппа = СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				ВидЦены В
	|					(ВЫБРАТЬ
	|						ВидыЦен.ВидЦен
	|					ИЗ
	|						ВидыЦен КАК ВидыЦен) {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ИСТИНА)
	|			И (ЦеныНоменклатурыСрезПоследних.Номенклатура = втНоменклатура.Номенклатура)
	|			И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И (ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) > 0
	|					ТОГДА ЛОЖЬ
	|				КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиТовары.ВидЦены
	|				КОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|					ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
	|				ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ втНоменклатура.Номенклатура ЕСТЬ NULL
	|{ГДЕ
	|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК ОстатокНаСкладе}";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашенияСКлиентамиТовары.Упаковка",
		"СоглашенияСКлиентамиТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыСрезПоследних.Упаковка",
		"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаОбновлениеПакетаПредложений или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрыСхемыКомпоновкиДанных - параметры, которые могли появиться в тексте запроса
//                                                      в процедуре ПолучитьТекстЗапросаОбновлениеПакетаПредложений.
//
Процедура УстановитьПараметрыЗапросаОбновлениеПакетаПредложений(ПрикладныеПараметры, ПараметрыКомпоновки)  Экспорт
	
	//++ НЕ ГОСИС
	ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет структуру полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете 
// "СхемаВыгрузкиОбновлениеПакетаПредложений" плана обмена "Обмен с сайтом".
// Параметры:
//  ПоляОтбора - Структура - сюда добавляются поля отбора.
//		* Ключ - Наименование поля отбора;
//		* Значение - Описание типа значения добавляемого поля.
//
Процедура ЗаполнитьПоляОтбораОбновленияПакетаПредложений(ПоляОтбора) Экспорт
	
	//++ НЕ ГОСИС
	ПоляЦеныИОстатки = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	
	НоваяСтрока = ПоляЦеныИОстатки.Добавить(); 
	НоваяСтрока.Наименование = "Соглашение";
	НоваяСтрока.Синоним = НСтр("ru = 'Соглашение'");
	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСоглашения();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		НоваяСтрока = ПоляЦеныИОстатки.Добавить(); 
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru = 'Сегмент номенклатуры'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		
	КонецЕсли;
	
	ПоляОтбора.Вставить("ЦеныИОстатки", ПоляЦеныИОстатки);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Формирует тексты запросов, которые позволяют получить таблицу значений,
// описанные в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// Параметры:
//  ТекстыЗапросов - структура - тексты запросов;
//    * Цены - поле, в которое нужно поместить текст запроса для заполнения источника данных "Цены"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом";
//    * Остатки - поле, в которое нужно поместить текст запроса для заполнения источника данных "Остатки"
//					макета "СхемаВыгрузкиПакетПредложений" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстыЗапросовПакетаПредложений(ТекстыЗапросов) Экспорт
	
	//++ НЕ ГОСИС
	ТекстыЗапросов.Цены = ПолучитьТекстЗапросаВтНоменклатура() + ПолучитьТекстЗапросаЦены();
		
	Тексты = Новый Массив();
	ТекстЗапроса = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Склады.Ссылка КАК Склад,
	|	Склады.Наименование КАК Наименование
	|ПОМЕСТИТЬ ДоступныеСклады
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ГДЕ
	|	НЕ Склады.ЭтоГруппа
	|{ГДЕ
	|	Склады.Ссылка.* КАК Склад}";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = ТекстВтДоступныеТовары();
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК Характеристика,
	|	втНоменклатура.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДоступныеСклады.Склад КАК Склад,
	|	ДоступныеСклады.Наименование КАК СкладНаименование,
	|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК ОстатокНаСкладе
	|{ВЫБРАТЬ
	|	Номенклатура,
	|	Характеристика.*,
	|	Склад.*,
	|	ОстатокНаСкладе,
	|	ЕдиницаИзмерения,
	|	СкладНаименование}
	|ИЗ
	|	ДоступныеСклады КАК ДоступныеСклады
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
	|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДоступныеТовары КАК СвободныеОстатки
	|		ПО СвободныеОстатки.Номенклатура = втНоменклатура.Номенклатура
	|			И (СвободныеОстатки.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
	|			И СвободныеОстатки.Склад = ДоступныеСклады.Склад
	|ГДЕ
	|	НЕ втНоменклатура.Номенклатура ЕСТЬ NULL
	|{ГДЕ
	|	ЕСТЬNULL(СвободныеОстатки.Свободно, 0) КАК ОстатокНаСкладе}";
	Тексты.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстыЗапросов.Остатки = ТекстЗапроса;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получить текст запроса цены.
// 
// Возвращаемое значение:
//  Строка - Получить текст запроса цены
Функция ПолучитьТекстЗапросаЦены() Экспорт

	//++ НЕ ГОСИС
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		
		ТекстЗапросаЦены = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
		|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
		|	СоглашенияСКлиентами.ИндивидуальныйВидЦены КАК ИндивидуальныйВидЦен,
		|	СоглашенияСКлиентами.Валюта КАК Валюта,
		|	СоглашенияСКлиентами.Наименование КАК Наименование
		|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашения
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Типовое
		|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям
		|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|{ГДЕ
		|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоступныеСоглашенияСоглашения.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашенияВидыЦен
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоступныеСоглашенияСоглашения.ИндивидуальныйВидЦен
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыСрезПоследних.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		КОГДА
		|			ЦеныНоменклатурыСрезПоследних.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ВидНоменклатуры
		|		КОГДА
		|			ЦеныНоменклатурыСрезПоследних.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА ЦеныНоменклатурыСрезПоследних.Номенклатура.ВладелецХарактеристик
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВладелецХарактеристик,
		|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
		|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена,
		|	ЦеныНоменклатурыСрезПоследних.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ЦеныНоменклатурыПредварительные
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Период, ВидЦены В
		|		(ВЫБРАТЬ
		|			ДоступныеСоглашенияСоглашенияВидыЦен.ВидЦен
		|		ИЗ
		|			ДоступныеСоглашенияСоглашенияВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
		|ГДЕ
		|	ЦеныНоменклатурыСрезПоследних.СерияЦО = ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
		|	И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ХарактеристикаЦО,
		|	ВладелецХарактеристик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК
		|		Характеристика,
		|	ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
		|	ЦеныНоменклатуры.Валюта КАК Валюта,
		|	ЦеныНоменклатуры.Цена КАК Цена,
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	ЦеныНоменклатурыПредварительные КАК ЦеныНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ХарактеристикиНоменклатуры.Владелец = ЦеныНоменклатуры.ВладелецХарактеристик)
		|ГДЕ
		|	ЦеныНоменклатуры.ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	ЦеныНоменклатуры.ВидЦены,
		|	ЦеныНоменклатуры.Валюта,
		|	ЦеныНоменклатуры.Цена,
		|	ЦеныНоменклатуры.Упаковка
		|ИЗ
		|	ЦеныНоменклатурыПредварительные КАК ЦеныНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО ЦеныНоменклатуры.ХарактеристикаЦО = ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
		|ГДЕ
		|	ЦеныНоменклатуры.ХарактеристикаЦО <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ВидЦены
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНоменклатура.Номенклатура КАК Номенклатура,
		|	втНоменклатура.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	втНоменклатура.Номенклатура.Артикул КАК НоменклатураАртикул,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК
		|		Характеристика,
		|	ДоступныеСоглашенияСоглашения.Ссылка КАК ТипЦены,
		|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
		|	ДоступныеСоглашенияСоглашения.ЦенаВключаетНДС КАК ТипЦеныЦенаВключаетНДС,
		|	ДоступныеСоглашенияСоглашения.Наименование КАК ТипЦеныНаименование,
		|	ВЫБОР
		|		КОГДА НЕ ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена ЕСТЬ NULL
		|		И ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена <> 0
		|			ТОГДА ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Валюта.Наименование
		|		КОГДА НЕ ЦеныНоменклатурыПоОсновномуВидуЦен.Цена ЕСТЬ NULL
		|		И ЦеныНоменклатурыПоОсновномуВидуЦен.Цена <> 0
		|			ТОГДА ЦеныНоменклатурыПоОсновномуВидуЦен.Валюта.Наименование
		|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Наименование
		|	КОНЕЦ КАК ТипЦеныВалютаКод,
		|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена, 0) = 0
		|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыПоОсновномуВидуЦен.Цена, 0) / ВЫБОР
		|				КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|			КОНЕЦ
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена, 0) / ВЫБОР
		|			КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|		КОНЕЦ
		|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаЗаЕдиницу,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
		|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕдиницыИзмерения.МеждународноеСокращение КАК СТРОКА(3)), """") КАК ЕдиницаИзмеренияМеждународноеСокращение,
		|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияПересчетЕдиница,
		|	ЕдиницыИзмерения.ПометкаУдаления КАК НоменклатураПометкаУдаления,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения
		|{ВЫБРАТЬ
		|	Номенклатура,
		|	Характеристика.*,
		|	НоменклатураНаименование,
		|	НоменклатураАртикул,
		|	ЕдиницаИзмерения.*,
		|	ЕдиницаИзмеренияКод,
		|	ЕдиницаИзмеренияНаименованиеПолное,
		|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
		|	ЕдиницаИзмеренияМеждународноеСокращение,
		|	ЕдиницаИзмеренияПересчетКоэф,
		|	ЕдиницаИзмеренияПересчетЕдиница,
		|	НоменклатураПометкаУдаления,
		|	ТипЦены.*,
		|	ТипЦеныЦенаВключаетНДС,
		|	ТипЦеныНаименование,
		|	ТипЦеныВалютаКод,
		|	ТипЦеныЕдиницаЦеныКоэффициент,
		|	ЦенаЗаЕдиницу}
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО (втНоменклатура.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатурыПоОсновномуВидуЦен
		|		ПО (ИСТИНА)
		|		И (ЦеныНоменклатурыПоОсновномуВидуЦен.Номенклатура = втНоменклатура.Номенклатура)
		|		И (ЦеныНоменклатурыПоОсновномуВидуЦен.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
		|		И (ЦеныНоменклатурыПоОсновномуВидуЦен.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатурыПоИндивидуальномуВидуЦен
		|		ПО (ИСТИНА)
		|		И (ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Номенклатура = втНоменклатура.Номенклатура)
		|		И (ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
		|		И (ЦеныНоменклатурыПоИндивидуальномуВидуЦен.ВидЦены = ДоступныеСоглашенияСоглашения.ИндивидуальныйВидЦен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ТаблицаКомплектующих
		|		ПО (втНоменклатура.Номенклатура = ТаблицаКомплектующих.Ссылка.Владелец)
		|		И (ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТаблицаКомплектующих.Ссылка.Характеристика)
		|		И
		|			(ТаблицаКомплектующих.Ссылка.ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих))
		|		И (НЕ ТаблицаКомплектующих.Ссылка.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		ПО (втНоменклатура.Номенклатура = ТаблицаНоменклатуры.Ссылка)
		|ГДЕ
		|	ТаблицаКомплектующих.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втНоменклатура.Номенклатура,
		|	втНоменклатура.Номенклатура.Наименование,
		|	втНоменклатура.Номенклатура.Артикул,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	ДоступныеСоглашенияСоглашения.Ссылка,
		|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """"),
		|	ДоступныеСоглашенияСоглашения.ЦенаВключаетНДС,
		|	ДоступныеСоглашенияСоглашения.Наименование,
		|	ВЫБОР
		|		КОГДА НЕ ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена ЕСТЬ NULL
		|		И ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена <> 0
		|			ТОГДА ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Валюта.Наименование
		|		КОГДА НЕ ЦеныНоменклатурыПоОсновномуВидуЦен.Цена ЕСТЬ NULL
		|		И ЦеныНоменклатурыПоОсновномуВидуЦен.Цена <> 0
		|			ТОГДА ЦеныНоменклатурыПоОсновномуВидуЦен.Валюта.Наименование
		|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Наименование
		|	КОНЕЦ,
		|	1,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА ЕСТЬNULL(ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена, 0) = 0
		|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыПоОсновномуВидуЦен.Цена, 0) / ВЫБОР
		|				КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|			КОНЕЦ
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена, 0) / ВЫБОР
		|			КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|		КОНЕЦ
		|	КОНЕЦ КАК ЧИСЛО(15, 2)) * ТаблицаКомплектующих.КоличествоУпаковок),
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """"),
		|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """"),
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕдиницыИзмерения.МеждународноеСокращение КАК СТРОКА(3)), """"),
		|	1,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """"),
		|	ЕдиницыИзмерения.ПометкаУдаления,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО (втНоменклатура.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ТаблицаКомплектующих
		|		ПО (втНоменклатура.Номенклатура = ТаблицаКомплектующих.Ссылка.Владелец)
		|		И (ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТаблицаКомплектующих.Ссылка.Характеристика)
		|		И
		|			(ТаблицаКомплектующих.Ссылка.ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих))
		|		И (НЕ ТаблицаКомплектующих.Ссылка.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатурыПоОсновномуВидуЦен
		|		ПО (ИСТИНА)
		|		И (ЦеныНоменклатурыПоОсновномуВидуЦен.Номенклатура = ТаблицаКомплектующих.Номенклатура)
		|		И (ЦеныНоменклатурыПоОсновномуВидуЦен.Характеристика = ТаблицаКомплектующих.Характеристика)
		|		И (ЦеныНоменклатурыПоОсновномуВидуЦен.Упаковка = ТаблицаКомплектующих.Упаковка)
		|		И (ЦеныНоменклатурыПоОсновномуВидуЦен.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатурыПоИндивидуальномуВидуЦен
		|		ПО (ИСТИНА)
		|		И (ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Номенклатура = ТаблицаКомплектующих.Номенклатура)
		|		И (ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Характеристика = ТаблицаКомплектующих.Характеристика)
		|		И (ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Упаковка = ТаблицаКомплектующих.Упаковка)
		|		И (ЦеныНоменклатурыПоИндивидуальномуВидуЦен.ВидЦены = ДоступныеСоглашенияСоглашения.ИндивидуальныйВидЦен)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		ПО (втНоменклатура.Номенклатура = ТаблицаНоменклатуры.Ссылка)
		|СГРУППИРОВАТЬ ПО
		|	втНоменклатура.Номенклатура,
		|	втНоменклатура.Номенклатура.Наименование,
		|	втНоменклатура.Номенклатура.Артикул,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	ДоступныеСоглашенияСоглашения.Ссылка,
		|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """"),
		|	ДоступныеСоглашенияСоглашения.ЦенаВключаетНДС,
		|	ДоступныеСоглашенияСоглашения.Наименование,
		|	ВЫБОР
		|		КОГДА НЕ ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена ЕСТЬ NULL
		|		И ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Цена <> 0
		|			ТОГДА ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Валюта.Наименование
		|		КОГДА НЕ ЦеныНоменклатурыПоОсновномуВидуЦен.Цена ЕСТЬ NULL
		|		И ЦеныНоменклатурыПоОсновномуВидуЦен.Цена <> 0
		|			ТОГДА ЦеныНоменклатурыПоОсновномуВидуЦен.Валюта.Наименование
		|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Наименование
		|	КОНЕЦ, 
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕдиницыИзмерения.МеждународноеСокращение КАК СТРОКА(3)), """"),
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """"),
		|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """"),
		|	ЕдиницыИзмерения.ПометкаУдаления,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ЕСТЬNULL(ЦеныНоменклатурыПоОсновномуВидуЦен.Номенклатура,
		|		ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Номенклатура) ЕСТЬ NULL) = ЛОЖЬ";

		ТекстЗапросаЦены = СтрЗаменить(ТекстЗапросаЦены,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Упаковка",
			"ЦеныНоменклатурыПоИндивидуальномуВидуЦен.Номенклатура"));
			
		ТекстЗапросаЦены = СтрЗаменить(ТекстЗапросаЦены,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыПоОсновномуВидуЦен.Упаковка",
			"ЦеныНоменклатурыПоОсновномуВидуЦен.Номенклатура"));

	Иначе
		
		ТекстЗапросаЦены = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашенияСКлиентами.Ссылка КАК Ссылка,
		|	СоглашенияСКлиентами.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен,
		|	СоглашенияСКлиентами.Валюта КАК Валюта,
		|	СоглашенияСКлиентами.Наименование КАК Наименование
		|ПОМЕСТИТЬ ДоступныеСоглашенияСоглашения
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Типовое
		|	И СоглашенияСКлиентами.ДоступноВнешнимПользователям
		|	И СоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
		|	И СоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|{ГДЕ
		|	СоглашенияСКлиентами.Ссылка.* КАК Соглашение}
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоглашенияСКлиентами.ВидЦен КАК ВидЦен
		|ПОМЕСТИТЬ ВидыЦен
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентами.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияСКлиентамиТовары.ВидЦены
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
		|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
		|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидЦен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНоменклатура.Номенклатура КАК Номенклатура,
		|	втНоменклатура.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	втНоменклатура.Номенклатура.Артикул КАК НоменклатураАртикул,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК
		|		Характеристика,
		|	ДоступныеСоглашенияСоглашения.Ссылка КАК ТипЦены,
		|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """") КАК ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
		|	ДоступныеСоглашенияСоглашения.ЦенаВключаетНДС КАК ТипЦеныЦенаВключаетНДС,
		|	ДоступныеСоглашенияСоглашения.Наименование КАК ТипЦеныНаименование,
		|	ВЫБОР
		|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
		|		ИЛИ СоглашенияСКлиентамиТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ДоступныеСоглашенияСоглашения.Валюта) КАК
		|				Справочник.Валюты).Наименование
		|		КОГДА НЕ СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ТОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен.ВалютаЦены.Наименование
		|		КОГДА НЕ СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
		|			ТОГДА СоглашенияСКлиентамиТовары.ВидЦены.ВалютаЦены.Наименование
		|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Наименование
		|	КОНЕЦ КАК ТипЦеныВалютаКод,
		|	1 КАК ТипЦеныЕдиницаЦеныКоэффициент,
		|	ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) = 0
		|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|		ИНАЧЕ ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0)
		|	КОНЕЦ / ВЫБОР
		|		КОГДА СоглашенияСКлиентамиТовары.Упаковка ЕСТЬ НЕ NULL
		|		И СоглашенияСКлиентамиТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|				КОГДА &ТекстЗапросаКоэффициентУпаковки1 = 0
		|					ТОГДА 1
		|				ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
		|			КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|		КОНЕЦ
		|	КОНЕЦ КАК ЧИСЛО(15, 2)) КАК ЦенаЗаЕдиницу,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
		|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕдиницыИзмерения.МеждународноеСокращение КАК СТРОКА(3)), """") КАК ЕдиницаИзмеренияМеждународноеСокращение,
		|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияПересчетЕдиница,
		|	ЕдиницыИзмерения.ПометкаУдаления КАК НоменклатураПометкаУдаления,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения
		|{ВЫБРАТЬ
		|	Номенклатура,
		|	Характеристика.*,
		|	НоменклатураНаименование,
		|	НоменклатураАртикул,
		|	ЕдиницаИзмерения.*,
		|	ЕдиницаИзмеренияКод,
		|	ЕдиницаИзмеренияНаименованиеПолное,
		|	ТипЦеныЕдиницаЦеныНаименованиеСокращенное,
		|	ЕдиницаИзмеренияМеждународноеСокращение,
		|	ЕдиницаИзмеренияПересчетКоэф,
		|	ЕдиницаИзмеренияПересчетЕдиница,
		|	НоменклатураПометкаУдаления,
		|	ТипЦены.*,
		|	ТипЦеныЦенаВключаетНДС,
		|	ТипЦеныНаименование,
		|	ТипЦеныВалютаКод,
		|	ТипЦеныЕдиницаЦеныКоэффициент,
		|	ЦенаЗаЕдиницу}
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО (втНоменклатура.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
		|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка
		|		И (СоглашенияСКлиентамиТовары.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
		|		И (СоглашенияСКлиентамиТовары.Номенклатура = втНоменклатура.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
		|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка
		|		И (втНоменклатура.Номенклатура.ЦеноваяГруппа = СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены В
		|			(ВЫБРАТЬ
		|				ВидыЦен.ВидЦен
		|			ИЗ
		|				ВидыЦен КАК ВидыЦен) {(Номенклатура).* КАК Номенклатура}) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО (ИСТИНА)
		|		И (ЦеныНоменклатурыСрезПоследних.Номенклатура = втНоменклатура.Номенклатура)
		|		И (ЦеныНоменклатурыСрезПоследних.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
		|		И (ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) > 0
		|				ТОГДА ЛОЖЬ
		|			КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.ВидЦены,
		|				ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиТовары.ВидЦены
		|			КОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
		|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен
		|		КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ТаблицаКомплектующих
		|		ПО (втНоменклатура.Номенклатура = ТаблицаКомплектующих.Ссылка.Владелец)
		|		И (ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТаблицаКомплектующих.Ссылка.Характеристика)
		|		И
		|			(ТаблицаКомплектующих.Ссылка.ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих))
		|		И (НЕ ТаблицаКомплектующих.Ссылка.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		ПО (втНоменклатура.Номенклатура = ТаблицаНоменклатуры.Ссылка)
		|ГДЕ
		|	ТаблицаКомплектующих.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втНоменклатура.Номенклатура,
		|	втНоменклатура.Номенклатура.Наименование,
		|	втНоменклатура.Номенклатура.Артикул,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	ДоступныеСоглашенияСоглашения.Ссылка,
		|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """"),
		|	ДоступныеСоглашенияСоглашения.ЦенаВключаетНДС,
		|	ДоступныеСоглашенияСоглашения.Наименование,
		|	ВЫБОР
		|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
		|		ИЛИ СоглашенияСКлиентамиТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ДоступныеСоглашенияСоглашения.Валюта) КАК
		|				Справочник.Валюты).Наименование
		|		КОГДА НЕ СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ТОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен.ВалютаЦены.Наименование
		|		КОГДА НЕ СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
		|			ТОГДА СоглашенияСКлиентамиТовары.ВидЦены.ВалютаЦены.Наименование
		|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Наименование
		|	КОНЕЦ,
		|	1,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) = 0
		|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|		ИНАЧЕ ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0)
		|	КОНЕЦ / ВЫБОР
		|		КОГДА СоглашенияСКлиентамиТовары.Упаковка ЕСТЬ НЕ NULL
		|		И СоглашенияСКлиентамиТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|				КОГДА &ТекстЗапросаКоэффициентУпаковки1 = 0
		|					ТОГДА 1
		|				ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
		|			КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) = 0
		|				ТОГДА 1
		|			ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)
		|		КОНЕЦ
		|	КОНЕЦ КАК ЧИСЛО(15, 2)) * ТаблицаКомплектующих.КоличествоУпаковок),
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """"),
		|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """"),
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕдиницыИзмерения.МеждународноеСокращение КАК СТРОКА(3)), """"),
		|	1,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """"),
		|	ЕдиницыИзмерения.ПометкаУдаления,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|ИЗ
		|	ДоступныеСоглашенияСоглашения КАК ДоступныеСоглашенияСоглашения
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВидНоменклатуры
		|			КОГДА
		|				втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|				ТОГДА ХарактеристикиНоменклатуры.Владелец = втНоменклатура.Номенклатура.ВладелецХарактеристик
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
		|		ПО (втНоменклатура.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашенияСКлиентамиТовары
		|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиТовары.Ссылка
		|		И (СоглашенияСКлиентамиТовары.Характеристика = ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)))
		|		И (СоглашенияСКлиентамиТовары.Номенклатура = втНоменклатура.Номенклатура)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашенияСКлиентамиЦеновыеГруппы
		|		ПО ДоступныеСоглашенияСоглашения.Ссылка = СоглашенияСКлиентамиЦеновыеГруппы.Ссылка
		|		И (втНоменклатура.Номенклатура.ЦеноваяГруппа = СоглашенияСКлиентамиЦеновыеГруппы.ЦеноваяГруппа)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ТаблицаКомплектующих
		|		ПО (втНоменклатура.Номенклатура = ТаблицаКомплектующих.Ссылка.Владелец)
		|		И (ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка,
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) = ТаблицаКомплектующих.Ссылка.Характеристика)
		|		И
		|			(ТаблицаКомплектующих.Ссылка.ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих))
		|		И (НЕ ТаблицаКомплектующих.Ссылка.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ВидЦены В
		|			(ВЫБРАТЬ
		|				ВидыЦен.ВидЦен
		|			ИЗ
		|				ВидыЦен КАК ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО (ИСТИНА)
		|		И (ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаКомплектующих.Номенклатура)
		|		И (ЦеныНоменклатурыСрезПоследних.Характеристика = ТаблицаКомплектующих.Характеристика)
		|		И (ЦеныНоменклатурыСрезПоследних.Упаковка = ТаблицаКомплектующих.Упаковка)
		|		И (ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.Цена, 0) > 0
		|				ТОГДА ЛОЖЬ
		|			КОГДА ЕСТЬNULL(СоглашенияСКлиентамиТовары.ВидЦены,
		|				ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиТовары.ВидЦены
		|			КОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|				ТОГДА ЦеныНоменклатурыСрезПоследних.ВидЦены = СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен
		|			ИНАЧЕ ЦеныНоменклатурыСрезПоследних.ВидЦены = ДоступныеСоглашенияСоглашения.ВидЦен
		|		КОНЕЦ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблицаНоменклатуры
		|		ПО (втНоменклатура.Номенклатура = ТаблицаНоменклатуры.Ссылка)
		|СГРУППИРОВАТЬ ПО
		|	втНоменклатура.Номенклатура,
		|	втНоменклатура.Номенклатура.Наименование,
		|	втНоменклатура.Номенклатура.Артикул,
		|	ЕСТЬNULL(ХарактеристикиНоменклатуры.Ссылка, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)),
		|	ДоступныеСоглашенияСоглашения.Ссылка,
		|	ЕСТЬNULL(ЕдиницыИзмерения.МеждународноеСокращение, """"),
		|	ДоступныеСоглашенияСоглашения.ЦенаВключаетНДС,
		|	ДоступныеСоглашенияСоглашения.Наименование,
		|	ВЫБОР
		|		КОГДА СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
		|		ИЛИ СоглашенияСКлиентамиТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		И СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, ДоступныеСоглашенияСоглашения.Валюта) КАК
		|				Справочник.Валюты).Наименование
		|		КОГДА НЕ СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ТОГДА СоглашенияСКлиентамиЦеновыеГруппы.ВидЦен.ВалютаЦены.Наименование
		|		КОГДА НЕ СоглашенияСКлиентамиТовары.ВидЦены ЕСТЬ NULL
		|			ТОГДА СоглашенияСКлиентамиТовары.ВидЦены.ВалютаЦены.Наименование
		|		ИНАЧЕ ДоступныеСоглашенияСоглашения.Валюта.Наименование
		|	КОНЕЦ,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕдиницыИзмерения.МеждународноеСокращение КАК СТРОКА(3)), """"),
		|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """"),
		|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """"),
		|	ЕдиницыИзмерения.ПометкаУдаления,
		|	ЕСТЬNULL(ЕдиницыИзмерения.Ссылка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Номенклатура ЕСТЬ NULL) = ЛОЖЬ";

		ТекстЗапросаЦены = СтрЗаменить(ТекстЗапросаЦены,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"СоглашенияСКлиентамиТовары.Упаковка",
				"СоглашенияСКлиентамиТовары.Номенклатура"));
			
		ТекстЗапросаЦены = СтрЗаменить(ТекстЗапросаЦены,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ЦеныНоменклатурыСрезПоследних.Упаковка",
				"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
			
	КонецЕсли;
		
	Возврат ТекстЗапросаЦены;
	//-- НЕ ГОСИС
	
КонецФункции

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаПакетПредложений или быть особенностью прикладного решения.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыСхемыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаПакетПредложений.
//
Процедура УстановитьПараметрыЗапросаПакетПредложений(ПрикладныеПараметры, ПараметрыСхемыКомпоновки) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрСегмент = ПараметрыСхемыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыСхемыКомпоновки, "Период", ТекущаяДатаСеанса());
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет соответствие полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете 
// "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// Поля в соответствии хранятся с привязкой к набору данных, к которому они относятся.
//
// Параметры:
//   ПоляОтбора - Соответствие - соответствие полей отбора:
//    * Ключ - Строка - имя набора данных из макета "СхемаВыгрузкиПакетПредложений".
//    * Значение - ТаблицаЗначений - таблица, в которую добавляются поля отбора:
//      * Наименование - Строка - имя поля.
//      * Синоним - Строка - пользовательское представление.
//      * ТипЗначения - ОписаниеТипов - тип значения поля.
//      * Отбор - Массив Из Структура - описание отбора, необходимого при открытии формы выбора поля.
//
Процедура ЗаполнитьПоляОтбораПакетаПредложений(ПоляОтбора) Экспорт
	
	//++ НЕ ГОСИС
	ПоляЦены = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
	
	НоваяСтрока = ПоляЦены.Добавить();
	НоваяСтрока.Наименование = "Соглашение";
	НоваяСтрока.Синоним = НСтр("ru = 'Соглашение'");
	НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами");
	НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСоглашения();
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		НоваяСтрока = ПоляЦены.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru = 'Сегмент номенклатуры'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОстатки = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
		НоваяСтрока = ПоляОстатки.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru = 'Сегмент номенклатуры'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОтбора.Вставить("Остатки", ПоляОстатки);
		
	КонецЕсли;
	
	ПоляОтбора.Вставить("Цены", ПоляЦены);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Формирует тексты запросов, которые позволят получить таблицы значений, описанные в макете "СхемаВыгрузкиКаталог"
// плана обмена "Обмен с сайтом".
//
// Параметры:
//	ТекстыЗапросов - Структура - тексты запросов:
//    * Номенклатура - поле, в которое нужно поместить текст запроса для заполнения источника данных "Номенклатура"
//                     макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Свойства - поле, в которое нужно поместить текст запроса для заполнения источника данных "Свойства"
//                 макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Файлы - поле, в которое нужно поместить текст запроса для заполнения источника данных "Файлы"
//              макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//    * Характеристики - поле, необязательное поле, поле в которое нужно поместить текст запроса для заполнения источника данных "Характеристики"
//                       макета "СхемаВыгрузкиКаталог" плана обмена "ОбменССайтом".
//
Процедура ПолучитьТекстыЗапросовКаталог(ТекстыЗапросов) Экспорт
	
	//++ НЕ ГОСИС
	ТекстыЗапросов.Номенклатура = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ
	|	НоменклатураСправочник.Ссылка КАК Номенклатура,
	|	НоменклатураСправочник.ПометкаУдаления КАК НоменклатураПометкаУдаления,
	|	ВЫБОР
	|		КОГДА &КлассифицироватьПоВиду
	|			ТОГДА НоменклатураСправочник.ВидНоменклатуры
	|		ИНАЧЕ НоменклатураСправочник.Родитель
	|	КОНЕЦ КАК НоменклатураРодитель,
	|	НоменклатураСправочник.ЭтоГруппа КАК НоменклатураЭтоГруппа,
	|	НоменклатураСправочник.Код КАК НоменклатураКод,
	|	НоменклатураСправочник.Наименование КАК НоменклатураНаименование,
	|	НоменклатураСправочник.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	НоменклатураСправочник.Артикул КАК НоменклатураАртикул,
	|	ВЫБОР
	|		КОГДА НоменклатураСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА НоменклатураСправочник.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	КОНЕЦ КАК НоменклатураТипНоменклатуры,
	|	НоменклатураСправочник.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	НоменклатураСправочник.Описание КАК НоменклатураОписание,
	|	НоменклатураСправочник.ФайлКартинки КАК НоменклатураОсновноеИзображение,
	|	НоменклатураСправочник.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """") КАК ЕдиницаИзмеренияКод,
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """") КАК ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕдиницыИзмерения.МеждународноеСокращение КАК СТРОКА(3)), """") КАК ЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ЕдиницаИзмеренияПересчетКоэф,
	|	НоменклатураСправочник.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияПересчетЕдиница,
	|	МАКСИМУМ(ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """")) КАК НоменклатураШтрихкод,
	|	НоменклатураСправочник.Производитель КАК НоменклатураПроизводитель,
	|	НоменклатураСправочник.СтавкаНДС КАК НоменклатураСтавкаНДСЗначение,
	|	ВЫБОР
	|		КОГДА &ВыгружатьПрочиеФайлы
	|			ТОГДА НоменклатураСправочник.ФайлОписанияДляСайта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураФайлОписанияHTML
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураПометкаУдаления,
	|	НоменклатураРодитель.*,
	|	НоменклатураЭтоГруппа,
	|	НоменклатураКод,
	|	НоменклатураНаименование,
	|	НоменклатураНаименованиеПолное,
	|	НоменклатураАртикул,
	|	НоменклатураТипНоменклатуры.*,
	|	НоменклатураВидНоменклатуры.*,
	|	НоменклатураОписание,
	|	НоменклатураОсновноеИзображение.*,
	|	ЕдиницаИзмерения.*,
	|	ЕдиницаИзмеренияКод,
	|	ЕдиницаИзмеренияНаименованиеПолное,
	|	ЕдиницаИзмеренияПересчетКоэф,
	|	ЕдиницаИзмеренияМеждународноеСокращение,
	|	ЕдиницаИзмеренияПересчетЕдиница,
	|	НоменклатураШтрихкод,
	|	НоменклатураПроизводитель.*,
	|	НоменклатураСтавкаНДСЗначение.*,
	|	НоменклатураФайлОписанияHTML.*}
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО втНоменклатура.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И (ШтрихкодыНоменклатуры.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|			И (ШтрихкодыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО втНоменклатура.Номенклатура = НоменклатураСправочник.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО (втНоменклатура.Номенклатура.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураСправочник.Ссылка,
	|	НоменклатураСправочник.ПометкаУдаления,
	|	НоменклатураСправочник.ЭтоГруппа,
	|	НоменклатураСправочник.Код,
	|	НоменклатураСправочник.Наименование,
	|	НоменклатураСправочник.НаименованиеПолное,
	|	НоменклатураСправочник.Артикул,
	|	НоменклатураСправочник.ВидНоменклатуры,
	|	НоменклатураСправочник.Описание,
	|	НоменклатураСправочник.ФайлКартинки,
	|	НоменклатураСправочник.ЕдиницаИзмерения,
	|	НоменклатураСправочник.ЕдиницаИзмерения.Код,
	|	НоменклатураСправочник.Производитель,
	|	НоменклатураСправочник.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА &КлассифицироватьПоВиду
	|			ТОГДА НоменклатураСправочник.ВидНоменклатуры
	|		ИНАЧЕ НоменклатураСправочник.Родитель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НоменклатураСправочник.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА НоменклатураСправочник.ТипНоменклатуры
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	КОНЕЦ,
	|	ЕСТЬNULL(ЕдиницыИзмерения.Код, """"),
	|	ЕСТЬNULL(ЕдиницыИзмерения.НаименованиеПолное, """"),
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ЕдиницыИзмерения.МеждународноеСокращение КАК СТРОКА(3)), """"),
	|	ВЫБОР
	|		КОГДА &ВыгружатьПрочиеФайлы
	|			ТОГДА НоменклатураСправочник.ФайлОписанияДляСайта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ТекстыЗапросов.Вставить("Характеристики");
		
		ТекстыЗапросов.Характеристики = ПолучитьТекстЗапросаВтНоменклатура() +
		"ВЫБРАТЬ
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.Наименование КАК ХарактеристикаНаименование,
		|	втНоменклатура.Номенклатура КАК Номенклатура
		|{ВЫБРАТЬ
		|	Характеристика.*,
		|	ХарактеристикаНаименование,
		|	Номенклатура.*}
		|ИЗ
		|	втНоменклатура КАК втНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (ВЫБОР
		|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|					ТОГДА втНоменклатура.Номенклатура
		|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|					ТОГДА втНоменклатура.Номенклатура.ВладелецХарактеристик
		|				КОГДА втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|					ТОГДА втНоменклатура.Номенклатура.ВидНоменклатуры
		|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	НЕ втНоменклатура.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)";
		
	КонецЕсли;
	
	ТекстыЗапросов.Свойства = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения) КАК СвойствоНоменклатуры,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеСвойства
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	СвойствоНоменклатуры.*,
	|	ЗначениеСвойства.*}
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|		ПО втНоменклатура.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
	|{ГДЕ
	|	(ВЫРАЗИТЬ(НоменклатураДополнительныеРеквизиты.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения)).* КАК СвойствоНоменклатуры}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втНоменклатура.Номенклатура,
	|	ВЫРАЗИТЬ(ДополнительныеСведения.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения),
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	втНоменклатура КАК втНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО втНоменклатура.Номенклатура = ДополнительныеСведения.Объект
	|ГДЕ
	|	ДополнительныеСведения.Объект ССЫЛКА Справочник.Номенклатура
	|{ГДЕ
	|	(ВЫРАЗИТЬ(ДополнительныеСведения.Свойство КАК ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения)).* КАК СвойствоНоменклатуры}";
	
	ТекстыЗапросов.Файлы = ПолучитьТекстЗапросаВтНоменклатура() +
	"ВЫБРАТЬ
	|	втНоменклатура.Номенклатура КАК Номенклатура,
	|	НоменклатураПрисоединенныеФайлы.Ссылка КАК НоменклатураФайл,
	|	&ДвоичныеДанныеФайла КАК НоменклатураФайлДанныеФайла,
	|	НоменклатураПрисоединенныеФайлы.Том КАК НоменклатураФайлТом,
	|	НоменклатураПрисоединенныеФайлы.Расширение КАК НоменклатураФайлРасширение,
	|	НоменклатураПрисоединенныеФайлы.ПутьКФайлу КАК НоменклатураФайлПутьКФайлу,
	|	НоменклатураПрисоединенныеФайлы.ТипХраненияФайла КАК НоменклатураФайлТипХраненияФайла,
	|	НоменклатураПрисоединенныеФайлы.Описание КАК НоменклатураФайлОписание
	|{ВЫБРАТЬ
	|	Номенклатура.*,
	|	НоменклатураФайл.*,
	|	НоменклатураФайлДанныеФайла,
	|	НоменклатураФайлТом.*,
	|	НоменклатураФайлРасширение,
	|	НоменклатураФайлПутьКФайлу,
	|	НоменклатураФайлТипХраненияФайла.*,
	|	НоменклатураФайлОписание}
	|ИЗ
	|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ХранилищеФайлов КАК ПрисоединенныеФайлы
	|		ПО &УсловиеСоединения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНоменклатура КАК втНоменклатура
	|		ПО НоменклатураПрисоединенныеФайлы.ВладелецФайла = втНоменклатура.Номенклатура
	|			И (ВЫБОР
	|				КОГДА &ВыгружатьПрочиеФайлы
	|						И &ВыгружатьКартинки
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|							КОГДА &ВыгружатьКартинки
	|								ТОГДА НоменклатураПрисоединенныеФайлы.Расширение В (&МассивРасширенийКартинок)
	|							КОГДА &ВыгружатьПрочиеФайлы
	|								ТОГДА НЕ НоменклатураПрисоединенныеФайлы.Расширение В (&МассивРасширенийКартинок)
	|							ИНАЧЕ ЛОЖЬ
	|						КОНЕЦ
	|						ИЛИ втНоменклатура.Номенклатура.ФайлОписанияДляСайта = НоменклатураПрисоединенныеФайлы.Ссылка
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ НоменклатураПрисоединенныеФайлы.ПометкаУдаления";
	
	ДвоичныеДанныеФайла = 
	"ВЫБОР КОГДА ПрисоединенныеФайлы.Файл ЕСТЬ NULL
	|		ТОГДА ДвоичныеДанныеФайлов.ДвоичныеДанныеФайла
	|		ИНАЧЕ ПрисоединенныеФайлы.ХранилищеДвоичныхДанных.ДвоичныеДанные
	|	КОНЕЦ";
	УсловиеСоединения = 
	"НоменклатураПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.Файл
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьДвоичныеДанныеФайлов КАК ДвоичныеДанныеФайлов
	|		ПО НоменклатураПрисоединенныеФайлы.Ссылка = ДвоичныеДанныеФайлов.Файл";
			
	Если ОбменССайтамиУТ.ДедупликацияВыполнена() Тогда
			
		ДвоичныеДанныеФайла = "ПрисоединенныеФайлы.ХранилищеДвоичныхДанных.ДвоичныеДанные";
		УсловиеСоединения = "НоменклатураПрисоединенныеФайлы.Ссылка = ПрисоединенныеФайлы.Файл";
			
	КонецЕсли;
	
	ТекстыЗапросов.Файлы = СтрЗаменить(ТекстыЗапросов.Файлы,"&ДвоичныеДанныеФайла" , ДвоичныеДанныеФайла);
	ТекстыЗапросов.Файлы = СтрЗаменить(ТекстыЗапросов.Файлы,"&УсловиеСоединения" , УсловиеСоединения);
	//-- НЕ ГОСИС

КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре 
// ПолучитьТекстыЗапросовКаталог или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстыЗапросовКаталог.
//
Процедура УстановитьПараметрыЗапросаКаталог(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрСегмент = ПараметрыКомпоновки.Добавить();
	ПараметрСегмент.Имя = "ИспользуетсяОтборПоСегментуНоменклатуры";
	ПараметрСегмент.ТипЗначения = Новый ОписаниеТипов("Булево");
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "МассивРасширенийКартинок", ОбменССайтамиУТ.МассивДопустимыхРасширенийИзображений());
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ВыгружатьПрочиеФайлы", 
		?(ПрикладныеПараметры.Свойство("ВыгружатьФайлы"),ПрикладныеПараметры.ВыгружатьФайлы, Ложь));
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ВыгружатьКартинки",
		?(ПрикладныеПараметры.Свойство("ВыгружатьКартинки"),ПрикладныеПараметры.ВыгружатьКартинки, Ложь));
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "КлассифицироватьПоВиду", ПрикладныеПараметры.КлассифицироватьПоВидамНоменклатуры);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет соответствие полями, которые должны быть добавлены в отбор настройки каталога.
// Указанные поля будут добавлены к предопределенными полям, заданным в макете "СхемаВыгрузкиКаталог" 
// плана обмена "Обмен с сайтом". Поля в соответствии хранятся с привязкой к набору данных, к которому они относятся.
//
// Параметры:
//  ПоляОтбора - Соответствие -  в которую добавляются поля отбора:
//    * Наименование - Строка - имя поля.
//    * Синоним - Строка - пользовательское представление.
//    * ТипЗначения - ОписаниеТипов - тип значения поля.
//    * Отбор - Массив - содержит структуры отборов, необходимых при открытии формы выбора поля.
//
Процедура ЗаполнитьПоляОтбораКаталога(ПоляОтбора) Экспорт
	
	//++ НЕ ГОСИС
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		ПоляНоменклатуры = ОбменССайтамиУТ.ДобавляемыеПоляОтбора();
		
		НоваяСтрока = ПоляНоменклатуры.Добавить();
		НоваяСтрока.Наименование = "СегментНоменклатуры";
		НоваяСтрока.Синоним = НСтр("ru = 'Сегмент номенклатуры'");
		НоваяСтрока.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры");
		НоваяСтрока.Отбор = ОбменССайтамиУТ.ПараметрыОтбораСегмента();
		
		ПоляОтбора.Вставить("Номенклатура", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Свойства", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Файлы", ПоляНоменклатуры);
		ПоляОтбора.Вставить("Характеристики", ПоляНоменклатуры);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Позволяет внести изменения в компоновщик настроек СКД после загрузки в нее настроек при получении данных для выгрузки.
//
// Параметры:
//  КомпоновщикНастроек  - КомпоновщикНастроекКомпоновкиДанных - компоновщик настроек, в который можно внести изменения.
//  ИмяМакета  - Строка - имя макета выполняемой СКД которая выполняется.
//
Процедура КомпоновщикНастроекСхемыФормированияДанныхПослеЗагрузкиНастроек(КомпоновщикНастроек, ИмяМакета) Экспорт
	
	//++ НЕ ГОСИС
	Если ВРег(ИмяМакета) = ВРег("Каталог") 
		ИЛИ ВРег(ИмяМакета) = ВРег("ПакетПредложений")
		ИЛИ ВРег(ИмяМакета) = ВРег("ОбновлениеПакетаПредложений") Тогда
		СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек, Истина);
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Формирует текст запроса, который позволит получить таблицу значений, описанную в макете "СхемаВыгрузкиЗаказов"
// плана обмена "Обмен с сайтом".
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса.
//
Процедура ПолучитьТекстЗапросаЗаказы(ТекстЗапроса) Экспорт
	
	//++ НЕ ГОСИС
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Ссылка КАК Заказ,
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение КАК НомерЗаказаНаСайте,
	|	СостоянияЗаказовКлиентов.Состояние КАК СостояниеЗаказа,
	|	ЗаказКлиента.СуммаДокумента - ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты, 0) КАК ЗаказКОплатеОстаток,
	|	ЗаказКлиента.СуммаДокумента - ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки, 0) КАК ЗаказКОтгрузкеОстаток,
	|	ЗаказКлиента.НалогообложениеНДС,
	|	ЗаказКлиента.Валюта
	|ПОМЕСТИТЬ ЗаказыДляВыгрузки
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|		ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиента.Ссылка
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство = &НомерНаСайте
	|	И ЗаказКлиентаДополнительныеРеквизиты.Значение <> """"""""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ЗаказОтгрузка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыДляВыгрузки.Заказ КАК Заказ,
	|		МАКСИМУМ(Оформлено.Регистратор) КАК Регистратор
	|	ИЗ
	|		ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РаспоряженияНаОтгрузку КАК Оформлено
	|			ПО ЗаказыДляВыгрузки.Заказ = Оформлено.Распоряжение
	|			 И Оформлено.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыДляВыгрузки.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Заказ,
	|	ВложенныйЗапрос.Регистратор.Дата КАК Дата,
	|	ВложенныйЗапрос.Регистратор.Номер КАК Номер
	|ПОМЕСТИТЬ ЗаказОплата
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыДляВыгрузки.Заказ КАК Заказ,
	|		МАКСИМУМ(РасчетыСКлиентами.Регистратор) КАК Регистратор
	|	ИЗ
	|		ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|			ПО ОбъектыРасчетов.Объект = ЗаказыДляВыгрузки.Заказ
	|			И НЕ ОбъектыРасчетов.ПометкаУдаления
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|			ПО ОбъектыРасчетов.Ссылка = РасчетыСКлиентами.ОбъектРасчетов
	|				И (РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|				И (РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ПоступлениеБезналичныхДенежныхСредств
	|					ИЛИ РасчетыСКлиентами.Регистратор ССЫЛКА Документ.ОперацияПоПлатежнойКарте)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказыДляВыгрузки.Заказ) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыДляВыгрузки.Заказ,
	|	ЗаказыДляВыгрузки.НомерЗаказаНаСайте КАК ЗаказНомерНаСайте,
	|	ЕСТЬNULL(ЗаказКлиентаДополнительныеРеквизиты.Значение, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаНаСайте,
	|	ЗаказыДляВыгрузки.ЗаказКОплатеОстаток,
	|	ЗаказыДляВыгрузки.ЗаказКОтгрузкеОстаток,
	|	ЗаказКлиента.Номер КАК ЗаказНомер,
	|	ЗаказКлиента.Дата КАК ЗаказДата,
	|	ЗаказКлиента.ПометкаУдаления КАК ЗаказПометкаУдаления,
	|	ЗаказКлиента.Проведен КАК ЗаказПроведен,
	|	ЗаказКлиента.ПометкаУдаления,
	|	ЕСТЬNULL(ЗаказОплата.Номер, """") КАК ЗаказНомерОплаты,
	|	ЕСТЬNULL(ЗаказОплата.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОплаты,
	|	ЕСТЬNULL(ЗаказОтгрузка.Номер, """") КАК ЗаказНомерОтгрузки,
	|	ЕСТЬNULL(ЗаказОтгрузка.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ЗаказДатаОтгрузки,
	|	ЕСТЬNULL(Валюты.Код, """") КАК ЗаказВалютаКод,
	|	ЗаказКлиента.НалогообложениеНДС КАК ЗаказНалогообложениеНДС,
	|	ЗаказКлиента.ЦенаВключаетНДС КАК ЗаказСуммаВключаетНДС,
	|	ЗаказыДляВыгрузки.СостояниеЗаказа КАК ЗаказСостояниеЗаказа,
	|	ЗаказыДляВыгрузки.СостояниеЗаказа КАК ЗаказСтатусЗаказа,
	|	ЛОЖЬ КАК ЗаказЗакрыт,
	|	ЗаказКлиента.Комментарий КАК ЗаказКомментарий,
	|	ЗаказКлиента.Контрагент КАК ЗаказКонтрагент,
	|	ЕСТЬNULL(КурсыВалютСрезПоследних.КурсЧислитель / КурсыВалютСрезПоследних.КурсЗнаменатель, 1) КАК ЗаказКурс,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК ТоварыНоменклатура,
	|	ЕСТЬNULL(ДанныеНоменлатуры.Артикул, """") КАК ТоварыНоменклатураАртикул,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|					ИЛИ ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)
	|					ИЛИ ЗаказКлиентаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				ТОГДА ""Товар""
	|			ИНАЧЕ ""Услуга""
	|		КОНЕЦ, """") КАК ТоварыНоменклатураТипНоменклатуры,
	|	&ТекстЗапросаЕдиницаИзмерения КАК ТоварыЕдиницаИзмерения,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияКод,
	|	&ТекстЗапросаНаименованиеЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияНаименование,
	|	&ТекстЗапросаНаименованиеПолноеЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ВЫРАЗИТЬ(&ТекстЗапросаМеждународноеСокращениеЕдиницыИзмерения КАК СТРОКА(3)) КАК ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	1 КАК ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	&ТекстЗапросаКодЕдиницыИзмерения КАК ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.КоличествоУпаковок, 0) КАК ТоварыКоличество,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Цена, 0) КАК ТоварыЦена,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Сумма, 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)) КАК ТоварыСтавкаНДС,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаНДС, 0) КАК ТоварыСуммаНДС,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаСНДС, 0) КАК ТоварыВсего,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.ПроцентРучнойСкидки, 0) + ЕСТЬNULL(ЗаказКлиентаТовары.ПроцентАвтоматическойСкидки, 0) КАК ТоварыПроцентСкидки,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.Характеристика, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ТоварыХарактеристика,
	|	ЕСТЬNULL(ЗаказКлиента.СуммаДокумента, 0) КАК ЗаказСуммаДокумента,
	|	ЕСТЬNULL(ЗаказКлиентаТовары.СуммаРучнойСкидки, 0) + ЕСТЬNULL(ЗаказКлиентаТовары.СуммаАвтоматическойСкидки, 0) КАК ТоварыСуммаСкидки,
	|	ЗаказКлиента.Контрагент,
	|	ЕСТЬNULL(Контрагенты.Наименование, """") КАК КонтрагентНаименование,
	|	ЕСТЬNULL(Контрагенты.НаименованиеПолное, """") КАК КонтрагентНаименованиеПолное,
	|	ЕСТЬNULL(Контрагенты.ЮрФизЛицо, ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ПустаяСсылка)) КАК КонтрагентЮрФизЛицо,
	|	ЕСТЬNULL(Контрагенты.ИНН, """") КАК КонтрагентИНН,
	|	ЕСТЬNULL(Контрагенты.КПП, """") КАК КонтрагентКПП,
	|	ЕСТЬNULL(Контрагенты.КодПоОКПО, """") КАК КонтрагентКодПоОКПО
	|{ВЫБРАТЬ
	|	Заказ.*,
	|	ЗаказНомерНаСайте.*,
	|	ЗаказДатаНаСайте.*,
	|	ЗаказКОплатеОстаток,
	|	ЗаказКОтгрузкеОстаток,
	|	ЗаказНомер,
	|	ЗаказДата,
	|	ЗаказПроведен,
	|	ПометкаУдаления,
	|	ЗаказНомерОплаты,
	|	ЗаказДатаОплаты,
	|	ЗаказНомерОтгрузки,
	|	ЗаказДатаОтгрузки,
	|	ЗаказВалютаКод,
	|	ЗаказНалогообложениеНДС.*,
	|	ЗаказСуммаВключаетНДС,
	|	ЗаказСостояниеЗаказа.*,
	|	ЗаказСтатусЗаказа.*,
	|	ЗаказЗакрыт,
	|	ЗаказКомментарий,
	|	ЗаказКонтрагент.*,
	|	ЗаказКурс,
	|	ТоварыНоменклатура.*,
	|	ТоварыНоменклатураАртикул,
	|	ТоварыНоменклатураТипНоменклатуры,
	|	ТоварыЕдиницаИзмерения.*,
	|	ТоварыЕдиницаИзмеренияКод,
	|	ТоварыЕдиницаИзмеренияНаименование,
	|	ТоварыЕдиницаИзмеренияНаименованиеПолное,
	|	ТоварыЕдиницаИзмеренияМеждународноеСокращение,
	|	ТоварыЕдиницаИзмеренияПересчетКоэффициент,
	|	ТоварыЕдиницаИзмеренияПересчетЕдиницаКод,
	|	ТоварыКоличество,
	|	ТоварыЦена,
	|	ТоварыСумма,
	|	ТоварыСтавкаНДС.*,
	|	ТоварыСуммаНДС,
	|	ТоварыВсего,
	|	ТоварыПроцентСкидки,
	|	ТоварыХарактеристика.*,
	|	ЗаказСуммаДокумента,
	|	ТоварыСуммаСкидки,
	|	Контрагент.*,
	|	КонтрагентНаименование,
	|	КонтрагентНаименованиеПолное,
	|	КонтрагентЮрФизЛицо.*,
	|	КонтрагентИНН,
	|	КонтрагентКПП,
	|	КонтрагентКодПоОКПО}
	|ИЗ
	|	ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказОплата КАК ЗаказОплата
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказОплата.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказОтгрузка КАК ЗаказОтгрузка
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказОтгрузка.Заказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиентаДополнительныеРеквизиты.Ссылка
	|			И (ЗаказКлиентаДополнительныеРеквизиты.Свойство = &ДатаНаСайте)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО ЗаказКлиента.Контрагент = Контрагенты.Ссылка
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ЗаказыДляВыгрузки.Валюта = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|				&Период,
	|				(Валюта, БазоваяВалюта) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ЗаказыДляВыгрузки.Валюта,
	|						ЗаказыДляВыгрузки.Заказ.Организация.ВалютаРегламентированногоУчета
	|					ИЗ
	|						ЗаказыДляВыгрузки КАК ЗаказыДляВыгрузки)) КАК КурсыВалютСрезПоследних
	|		ПО ЗаказыДляВыгрузки.Валюта = КурсыВалютСрезПоследних.Валюта
	|			И ЗаказыДляВыгрузки.Заказ.Организация.ВалютаРегламентированногоУчета = КурсыВалютСрезПоследних.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|		ПО ЗаказыДляВыгрузки.Заказ = ЗаказКлиентаТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменлатуры
	|		ПО (ЗаказКлиентаТовары.Номенклатура = ДанныеНоменлатуры.Ссылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаЕдиницаИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Ссылка", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКодЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Код", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
			
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаНаименованиеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"Наименование", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаНаименованиеПолноеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"НаименованиеПолное", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаМеждународноеСокращениеЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"МеждународноеСокращение", "ЗаказКлиентаТовары.Упаковка", "ДанныеНоменлатуры"));
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет параметры схемы компоновки, которые могли появиться в тексте запроса в процедуре
// ПолучитьТекстЗапросаЗаказы или быть особенностью прикладного решения.
//
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ПараметрыКомпоновки - ПараметрСхемыКомпоновкиДанных - параметры схемы компоновки текста запроса в процедуре
//                                                        ПолучитьТекстЗапросаЗаказы.
//
Процедура УстановитьПараметрыТекстаЗапросаЗаказы(ПрикладныеПараметры, ПараметрыКомпоновки) Экспорт
	
	//++ НЕ ГОСИС
	Если ПрикладныеПараметры.Свойство("ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте") Тогда
		ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "НомерНаСайте", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте);
	КонецЕсли;

	Если ПрикладныеПараметры.Свойство("ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте") Тогда
		ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "ДатаНаСайте", ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте);
	КонецЕсли;
	
	ОбменССайтамиУТ.УстановитьПараметрКомпоновки(ПараметрыКомпоновки, "Период", ТекущаяДатаСеанса());
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиКаталог" плана обмена "Обмен с сайтом".
//
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораКаталог(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
// 
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораПакетПредложений(УдаляемыеПоля) Экспорт
	
	//++ НЕ ГОСИС
	УдаляемыеПоля.Добавить("ТипЦены");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет массив полями, которые должны быть удалены из отбора
// в макете "СхемаВыгрузкиПакетПредложений" плана обмена "Обмен с сайтом".
//
// Параметры:
//  УдаляемыеПоля - Массив - наименованием полей, которые должны быть удалены из отбора.
//
Процедура ЗаполнитьУдаляемыеПоляОтбораОбновлениеПакетаПредложений(УдаляемыеПоля) Экспорт
	
КонецПроцедуры

// В данной процедуре возможно изменить параметры обмена перед началом обмена
//
// Параметры:
//  ПараметрыОбмена  - Структура - текущие параметры обмена, имеет следующие свойства:
//    * УзелОбмена - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//    * НастройкиПодключения - структура настроек для подключения к сайту, содержит следующие свойства:
//        * Пользователь - Строка - имя пользователя для подключения к сайту.
//        * АдресСайта - Строка - адрес сайта.
//        * Пароль - Строка - пароль для подключения.
//    * ВыгружатьИзменения - Булево - если Истина, то будут выгружаться только измененные объекты.
//    * ОтборГруппыКатегорииНоменклатуры  - ПеречислениеСсылка.ВидыОтборовНоменклатуры - режим отбора номенклатуры
//                                                                                       (по группам или категориям).
//    * РазмерПорции - Число - количество товаров, данные о которых будут выгружены на сайт в одной порции данных.
//    * КоличествоПовторов - Число - количество попыток выгрузки данных на сайт в случае сбоя в обмене.
//    * ВладелецКаталога - ОпределяемыйТип.Организация - организация, от имени которой будет публиковаться каталог товаров
//    * ОбменЗаказами - Булево - определяет, загружать ли с сайта заказы.
//    * ОбменТоварами - Булево - определяет, выгружать ли на сайт данные, связанные с товарами.
//    * ВыгружатьТовары - Булево - определяет, выгружать ли на сайт каталог товаров.
//    * ВыгружатьЦеныОстатки - Булево - определяет, выгружать ли на сайт данные по ценам.
//    * ВыгружатьОбновленияЦенИОстатков - Булево - определяет, выгружать ли на сайт информацию об изменении цен и остатков товаров.
//    * КаталогВыгрузки - Строка - каталог на диске, в который будут сохранены файлы обмена.
//    * ВыгружатьНаСайт - Булево - если Истина, то выгрузка будет производиться непосредственно на сайт, а не в каталог выгрузки.
//    * ВыгружатьКартинки - Булево - определяет, выполнять ли выгрузку изображений номенклатуры.
//    * РазрешенныеТипыКартинок - Массив - содержит допустимые расширения файлов картинок.
//    * НаименованиеНалога - Строка - наименование налога, применяемого к товару.
//    * ИспользоватьХарактеристики - Булево - определяет, используются ли характеристики.
//    * РежимЗапускаОбмена - Строка - строка, поясняющая был ли обмен запущен интерактивно
//                                    или через регл. задание.
//    * ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                        подсистемы в прикладное решение.
//    * ФайлЗагрузки - Строка - путь к файлу XML, из которого будут загружаться заказы.
//    * СтруктураИзменений - Структура - имеет следующие свойства:
//        * Заказы - Массив - массив ссылок на заказы, подлежащие выгрузке.
//        * Товары - Массив - массив ссылок на товары, подлежащие выгрузке.
//  УзелОбмена  - ПланОбмена.ОбменССайтом - план обмена, для которого будет выполнен обмен.
//
Процедура ИзменитьПараметрыОбмена(ПараметрыОбмена, УзелОбмена) Экспорт

	//++ НЕ ГОСИС
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов")) И ПараметрыОбмена.ОбменЗаказами Тогда
		ПараметрыОбмена.ОбменЗаказами = Ложь;
	КонецЕсли;
	
	КлассифицироватьПоВидамНоменклатуры = Ложь;
	Если ПараметрыОбмена.ВидОтбораПоНоменклатуре = Перечисления.ВидыОтборовНоменклатуры.КатегорииНоменклатуры Тогда
		КлассифицироватьПоВидамНоменклатуры = Истина;
	КонецЕсли;
	
	ПараметрыОбмена.ПрикладныеПараметры.Вставить("КлассифицироватьПоВидамНоменклатуры", КлассифицироватьПоВидамНоменклатуры);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Процедура записывает в БП информацию о номера и дате заказа на сайте.
//
// Параметры:
//  ТаблицаЗаказов - ТаблицаЗначений - информация о заказах, загруженных с сайта:
//    * Заказ - Ссылка - ссылка на документ Заказ покупателя;
//    * НомерЗаказа - Строка - номер заказа на сайте;
//    * ДатаЗаказа - Дата - дата заказа на сайте;
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//
Процедура ЗаписатьДатуНомерЗаказовССайта(ТаблицаЗаказов, ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Заполняет информацию о складах.
// 
// Параметры:
//	СписокТочекСамовывоза - СписокЗначений - точки самовывоза, указанные в узле обмена.
//	СписокСкладов - СписокЗначений - склады полученные в результате выполнения запроса (при выгрузке пакета предложений).
//	ИнформацияОТочкахСамовывоза - ТаблицаЗначений - таблица, в которой будет храниться информация о точках самовывоза и складах.
//    * Склад - Ссылка, ссылка на элемент справочника (склады или точки самовывоза).
//    * СкладНаименование - наименование склада.
//    * СкладАдрес - Адресная информация о складе - Структура СкладАдрес.
//    * СкладКонтактнаяИнформация - Контактная информация о складе  -структура "СкладКонтактнаяИнформация".
//	СкладАдрес - Структура - структура, в которой необходимо представить адресную информацию о складе:
//    ** ПочтовыйИндекс - Строка - почтовый индекс. 
//    ** Страна - Строка - наименование страны. 
//    ** Регион - Строка - наименование региона. 
//    ** Район - Строка - наименование района. 
//    ** НаселенныйПункт - Строка - наименование населенного пункта. 
//    ** Город - Строка - наименование города.
//    ** Улица - Строка - наименование улицы. 
//    ** Дом - Строка - номер дома. 
//    ** Корпус - Строка - номер корпуса. 
//    ** Квартира - Строка - номер квартиры.
//	СкладКонтактнаяИнформация - Структура - структура, в которой необходимо представить контактную информацию о складе:
//    ** ТелефонРабочий - Строка - номер телефона, 
//    ** Почта- Строка - адрес электронной почты, 
//    ** КоординатыНаКарте- Строка - координаты, 
//    ** Прочее - Строка - дополнительная информация.
//
Процедура ЗаполнитьИнформациюОСкладахИТочкахСамовывоза(СписокТочекСамовывоза, СписокСкладов,
	ИнформацияОТочкахСамовывоза, СкладАдрес, СкладКонтактнаяИнформация) Экспорт

	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Склады.Ссылка КАК Ссылка,
	|	Склады.Наименование КАК Наименование,
	|	ЕСТЬNULL(АдресСклада.Представление, """") КАК АдресСклада,
	|	ЕСТЬNULL(АдресСклада.ЗначенияПолей, """") КАК ЗначенияПолей,
	|	ЕСТЬNULL(ТелефонСклада.Представление, """") КАК ТелефонСклада
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК АдресСклада
	|		ПО Склады.Ссылка = АдресСклада.Ссылка
	|			И (АдресСклада.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК ТелефонСклада
	|		ПО Склады.Ссылка = ТелефонСклада.Ссылка
	|			И (ТелефонСклада.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонСклада))
	|ГДЕ
	|	(Склады.Ссылка В (&СписокТочекСамовывоза)
	|			ИЛИ Склады.Ссылка В (&СписокСкладов))";
	
	Запрос.УстановитьПараметр("СписокТочекСамовывоза", СписокТочекСамовывоза);
	Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ИнформацияОТочкахСамовывоза.Добавить();
		СтрокаТаблицы.Склад                     = Выборка.Ссылка;
		СтрокаТаблицы.СкладНаименование         = Выборка.Наименование;
		СтрокаТаблицы.СкладАдрес                = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СкладАдрес);
		СтрокаТаблицы.СкладКонтактнаяИнформация = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СкладКонтактнаяИнформация);
		
		СтранаРоссия = Справочники.СтраныМира.Россия;
		
		Если ЗначениеЗаполнено(Выборка.АдресСклада) Тогда
			
			Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Выборка.ЗначенияПолей) Тогда
				РезультатыЧтения = Новый Структура;
				XDTOКонтактная = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(Выборка.ЗначенияПолей, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
				Если РезультатыЧтения.Свойство("ТекстОшибки") Тогда
					// Распознали с ошибками, сообщим при открытии.
					XDTOКонтактная.Представление = Выборка.АдресСклада;
					XDTOКонтактная.Состав.Страна = Строка(СтранаРоссия);
				КонецЕсли;
			Иначе
				XDTOКонтактная = УправлениеКонтактнойИнформациейЛокализация.АдресXMLВXDTO(Выборка.ЗначенияПолей, Выборка.АдресСклада, );
			КонецЕсли;
			
			ОбменССайтамиУТ.ЗаполнитьСтруктуруПолейАдресаПоЗначениюПолей(СтрокаТаблицы.СкладАдрес, XDTOКонтактная);
			
			СтрокаТаблицы.СкладКонтактнаяИнформация.Почта = Выборка.АдресСклада;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.ТелефонСклада) Тогда
			СтрокаТаблицы.СкладКонтактнаяИнформация.ТелефонРабочий = Выборка.ТелефонСклада;
		КонецЕсли;
		
	КонецЦикла;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В зависимости от значения функциональной опции "Использовать статусы заказов" устанавливается
// видимость табличной части "Соответствия заказов".
//
// Параметры:
//  Видимость - Булево - признак видимости табличной части.
//
Процедура УстановитьВидимостьТабличнойЧастиСоответствиеЗаказовФормыУзлаПланаОбмена(Видимость) Экспорт
	
	//++ НЕ ГОСИС
	Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// В зависимости от типа регистрируемых данных определяет данные, которые необходимо зарегистрировать в плане обмена.
//
// Параметры:
//  Объект - СправочникОбъект, ДокументОбъект - регистрируемый объект данных, например, НоменклатураОбъект, ЗаказОбъект.
//  МассивУзловТовары - Массив - массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект
//                               в том случае если он является Номенклатурой.
//  МассивУзловЗаказы - Массив - массив узлов плана обмена "Обмен с сайтом" в которых необходимо регистрировать объект
//                               в том случае если он является Заказом.
//  Замещение - Булево - замещение данных регистрации.
//
Процедура ЗарегистрироватьИзмененияВУзлах(Объект, МассивУзловТовары, МассивУзловЗаказы, Замещение = Ложь) Экспорт
	
	//++ НЕ ГОСИС
	Если МассивУзловТовары.Количество() = 0 И МассивУзловЗаказы.Количество() =0 Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(Объект);
	
	Если ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатуры25")
		ИЛИ ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.РаспределениеЗапасов") Тогда
		
		Если Замещение Тогда
			
			ОбъектМетаданных = Объект.Метаданные();
			
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
			
			Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
				
				СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
				
			Иначе
				
				Возврат;
				
			КонецЕсли;
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
				
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			Для каждого Запись Из СтарыйНаборЗаписей Цикл
			
				// Записи регистра Распредление запасов регистрируются, только если они влияют на свободный остаток.
				Если ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.РаспределениеЗапасов") Тогда
					Если Запись.Свободно = 0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Запись Из Объект Цикл
			
			// Записи регистра Распредление запасов регистрируются, только если они влияют на свободный остаток.
			Если ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.РаспределениеЗапасов") Тогда
				Если Запись.Свободно = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Запись.Номенклатура);
			
		КонецЦикла;
	
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.Номенклатура") Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Ссылка);
		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.НоменклатураПрисоединенныеФайлы") Тогда
		
		Если НЕ ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			Возврат;
			
		КонецЕсли;
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.ВладелецФайла);

		
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		
		Если ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловТовары, Объект.Владелец);
			
		КонецЕсли;
		
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ЗаказКлиента") Тогда 
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
			
			СтруктураРеквизитовЗаказаНаСайте = Новый Структура;
			РеквизитыЗаказаНаСайте(Объект.Ссылка, УзелОбмена, СтруктураРеквизитовЗаказаНаСайте);
			Если СтруктураРеквизитовЗаказаНаСайте <> Неопределено Тогда
				
				Если Объект.ПометкаУдаления Тогда
					 ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, Объект.Ссылка);
				Иначе
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Объект.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипОбъекта = Тип("РегистрСведенийНаборЗаписей.СостоянияЗаказовКлиентов") Тогда
		
		Если Объект.Отбор.Найти("Заказ") = Неопределено 
			Или Не ЗначениеЗаполнено(Объект.Отбор.Заказ.Значение)
			Или ТипЗнч(Объект.Отбор.Заказ.Значение) <> Тип("ДокументСсылка.ЗаказКлиента") Тогда
			Возврат;
		КонецЕсли;
		
		Если Замещение Тогда
			
			Если Объект.Отбор.Количество() <> 1 Тогда
				Возврат;
			КонецЕсли;
			
			ДокументЗаказ = Объект.Отбор[0].Значение;
			
			МассивУзловКРегистрации = Новый Массив;
			Для Каждого УзелОбмена Из МассивУзловЗаказы Цикл
				
				СтруктураРеквизитовЗаказаНаСайте = Новый Структура;
				РеквизитыЗаказаНаСайте(ДокументЗаказ, УзелОбмена, СтруктураРеквизитовЗаказаНаСайте);
				Если СтруктураРеквизитовЗаказаНаСайте <> Неопределено Тогда
					Если СтруктураРеквизитовЗаказаНаСайте.Свойство("НомерЗаказаНаСайте")
						И ЗначениеЗаполнено(СтруктураРеквизитовЗаказаНаСайте.НомерЗаказаНаСайте) Тогда
						
						МассивУзловКРегистрации.Добавить(УзелОбмена);
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Объект.Количество() <> 1 Тогда
				
				ПланыОбмена.УдалитьРегистрациюИзменений(МассивУзловКРегистрации, ДокументЗаказ);
				Возврат;
				
			КонецЕсли;
			
			ЭлементОтбора = Объект.Отбор[0];
			Если ЭлементОтбора.Использование = Ложь Тогда
				Возврат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументЗаказ) Тогда
				Возврат;
			КонецЕсли;
			
			Если МассивУзловКРегистрации.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			НовоеСостояниеЗаказа = Объект[0].Состояние;
			Если НовоеСостояниеЗаказа = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
				
				
				Запрос = Новый Запрос;
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	СостоянияЗаказовКлиентов.Состояние
				|ИЗ
				|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
				|ГДЕ
				|	СостоянияЗаказовКлиентов.Заказ = &Заказ";
				
				Запрос.УстановитьПараметр("Заказ", ДокументЗаказ);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					Если Выборка.Состояние = Перечисления.СостоянияЗаказовКлиентов.Закрыт Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловКРегистрации, ДокументЗаказ);
			
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет статус контрагента по значению перечисления.
//
// Параметры:
//  ДанныеКонтрагентаЮрФизЛицо - ПеречислениеСсылка - определяет юридический статус контрагента.
//                               В зависимости от статуса контрагента при выгрузке на сайт
//                               будут по разному заполняется данные о контрагенте.
//  ЭтоЮрЛицо - Булево - если это юридическое лицо заполняется ИНН, КПП, если это физическое лицо, то наименование.
//
Процедура ОпределитьЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо, ЭтоЮрЛицо) Экспорт
	
	//++ НЕ ГОСИС
	ЭтоЮрЛицо = ПартнерыИКонтрагенты.ЭтоЮрЛицо(ДанныеКонтрагентаЮрФизЛицо);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// К ИД номенклатуры добавляет ИД характеристики, если она задана.
//
// Параметры:
//	Номенклатура - Ссылка - например, СправочникСсылка.Номенклатура.
//	Характеристика - Ссылка - например, СправочникСсылка.ХарактеристикиНоменклатуры.
//  Ид - Строка - идентификатор.
//
Процедура ДополнитьИдНоменклатурыХарактеристикой(Номенклатура, Характеристика, Ид) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И ТипЗнч(Характеристика) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры")
		И (НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЭтоГруппа"))
		И ЗначениеЗаполнено(Характеристика) Тогда
		
		Ид = Ид + "#" + Строка(Характеристика.УникальныйИдентификатор());
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Получает заказы, загруженные с сайта.
// 
// Параметры:
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ТаблицаНомераИДатыЗаказов - ТаблицаЗначений - таблица содержащая номера и даты заказов, загруженных с сайта;
//    * НомерЗаказа - строка - номер заказа;
//    * ДатаЗаказа - строка - дата заказа.
//  Результат - ТаблицаЗначений - информация о заказах;
//    * ЗаказПокупателя - ссылка на документ Заказ.
//    * НомерЗаказаНаСайте - номер заказа.
//    * НеОбновлятьЗаказ - признак того, что Заказ не должен перезаписываться. 
// 
Процедура ПолучитьРанееЗагруженныеДокументы(ПрикладныеПараметры, ТаблицаНомераИДатыЗаказов, Результат) Экспорт
	
	//++ НЕ ГОСИС
	НомерНаСайте = ПрикладныеПараметры.ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте;
	МассивНомеров = ТаблицаНомераИДатыЗаказов.ВыгрузитьКолонку("НомерЗаказа");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивНомеров", МассивНомеров);
	Запрос.УстановитьПараметр("НомерНаСайте", НомерНаСайте);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК ЗаказПокупателя,
	|	ВложенныйЗапрос.Значение КАК НомерЗаказаНаСайте,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.КодСтроки = -1
	|				ИЛИ ВложенныйЗапрос.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеОбновлятьЗаказ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказКлиентаДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|		ЗаказКлиентаДополнительныеРеквизиты.Значение КАК Значение,
	|		ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ВЫБОР
	|				КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			КОНЕЦ) КАК Состояние,
	|		МАКСИМУМ(ЕСТЬNULL(ЗаказКлиентаТовары.КодСтроки, -1)) КАК КодСтроки
	|	ИЗ
	|		Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|			ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = СостоянияЗаказовКлиентов.Заказ
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
	|			ПО ЗаказКлиентаДополнительныеРеквизиты.Ссылка = ЗаказКлиентаТовары.Ссылка
	|				И (НЕ ЗаказКлиентаТовары.Отменено)
	|	ГДЕ
	|		ЗаказКлиентаДополнительныеРеквизиты.Свойство = &НомерНаСайте
	|		И ЗаказКлиентаДополнительныеРеквизиты.Значение В(&МассивНомеров)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗаказКлиентаДополнительныеРеквизиты.Ссылка,
	|		ЗаказКлиентаДополнительныеРеквизиты.Значение,
	|		ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ВЫБОР
	|				КОГДА ЗаказКлиентаТовары.Ссылка.Проведен
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
	|			КОНЕЦ)) КАК ВложенныйЗапрос";
	
	Результат = Запрос.Выполнить().Выгрузить();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Создает новый документ "Заказ покупателя".
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - выходной параметр, заполняется созданным объектом документа Заказ.
//
Процедура СоздатьНовыйДокументЗаказ(ДокументОбъект) Экспорт
	
	//++ НЕ ГОСИС
	ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет документ заказ данными с сайта.
// 
// Параметры:
//  ДокументОбъект - ДокументОбъект - объект документа Заказ покупателя.
//  РеквизитыЗаказа - Структура - содержит значения реквизитов заказа, загруженных с сайта:
//     * Ид - Идентификатор заказа, очень часто тоже что и номер.
//     * Дата				- дата создания заказа на сайте.
//     * Номер				- номер заказа на сайте.
//     * ДатаОтгрузки		- дата отгрузки товара по заказу.
//     * ВалютаДокументаКод	- трехзначный идентификатор валюты.
//     * ВидЦенНаименование	- наименование вида цены.
//     * СуммаВключаетНДС	- признак включения НДС.
//     * НаименованиеСкидки	- наименование скидки.
//     * ПроцентСкидки		- процент скидки.
//     * СуммаСкидки		- сумма скидки по заказу.
//     * СкладНаименование 	- наименование склада, точки самовывоза.
//     * ПодразделениеНаименование - наименование подразделения.
//     * Контрагент			- ссылка на контрагента, который уже был идентифицирован в базе.
//     * АдресДоставки      - строка адреса доставки.
//     * ТочкаСамовывоза	- ссылка на элемент справочника, который в прикладном решении является справочником точек самовывоза или Неопределено.
//     * Товары				- табличная часть документа.
//     * Комментарий		- текстовый комментарий.
//  СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//  ПрикладныеПараметры - Структура - содержит параметры прикладного решения, добавленные на форму узла плана обмена.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//  Успешно - Булево - признак заполнения документа.
//
Процедура ЗаполнитьЗаказ(ДокументОбъект, РеквизитыЗаказа, СвойстваЗаказа, ПрикладныеПараметры, ОписаниеОшибки, Успешно) Экспорт

	//++ НЕ ГОСИС
	Валюта = Неопределено;
	ОбменССайтамиУТ.ОбработатьВалютуXML(Валюта, РеквизитыЗаказа.ВалютаДокументаКод);
	
	ДокументОбъект.Дата            = РеквизитыЗаказа.Дата;
	ДокументОбъект.Валюта          = Валюта;
	ДокументОбъект.Соглашение      = ПрикладныеПараметры.Соглашение;
	ДокументОбъект.Организация     = ПрикладныеПараметры.Организация;
	ДокументОбъект.Менеджер        = ПрикладныеПараметры.Менеджер;
	ДокументОбъект.Контрагент      = РеквизитыЗаказа.Контрагент;
	ДокументОбъект.Партнер         = РеквизитыЗаказа.Партнер;
	ДокументОбъект.ЦенаВключаетНДС = РеквизитыЗаказа.СуммаВключаетНДС;
	ДокументОбъект.Склад           = ?(ЗначениеЗаполнено(РеквизитыЗаказа.ТочкаСамовывоза),
	                                   РеквизитыЗаказа.ТочкаСамовывоза, 
	                                   ПрикладныеПараметры.Склад);
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(ПрикладныеПараметры.Соглашение);
	
	Если НЕ ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
		ИЛИ НЕ УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		ДокументОбъект.ОплатаВВалюте = УсловияПродаж.ОплатаВВалюте;
	Иначе
		ДокументОбъект.ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "ОплатаВВалюте");
	КонецЕсли;
	
	ДокументОбъект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	ЗаполнитьЗначенияСвойств(ДокументОбъект,
	                         УсловияПродаж,
	                        "ХозяйственнаяОперация, ГруппаФинансовогоУчета,
	                        |ТребуетсяЗалогЗаТару, ФормаОплаты, ГрафикОплаты");
	Если ЗначениеЗаполнено(ДокументОбъект.ГрафикОплаты) И НЕ ЗначениеЗаполнено(ДокументОбъект.ФормаОплаты) Тогда
		ДокументОбъект.ФормаОплаты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ГрафикОплаты, "ФормаОплаты");
	КонецЕсли;

	Если ПрикладныеПараметры.ЗагружатьФормыОплаты Тогда
	
		МетодОплатыИД = СвойстваЗаказа.Получить("Метод оплаты ИД");
		МетодОплаты   = СвойстваЗаказа.Получить("Метод оплаты");
		
		Если Не МетодОплатыИД = Неопределено Тогда
			
			ТаблицаФормОплат = ПрикладныеПараметры.СоответствиеФормОплат;
			ЗначениеФормыОплаты = ТаблицаФормОплат.Найти(МетодОплатыИД, "КодОплатыНаСайте");
			Если ЗначениеФормыОплаты = Неопределено Тогда
				ЗначениеФормыОплаты = ТаблицаФормОплат.Найти(МетодОплаты, "ВидОплатыНаСайте");
			КонецЕсли;
			Если ЗначениеФормыОплаты = Неопределено Тогда
				ШаблонСообщения = НСтр("ru = 'Методу оплаты с сайта ""%1"" с кодом ""%2"" не поставлена в соответствие форма оплаты.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, МетодОплаты, МетодОплатыИД);
				ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
			Иначе
				ДокументОбъект.ФормаОплаты = ЗначениеФормыОплаты.ФормаОплаты;
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ДокументОбъект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	ДокументОбъект.Приоритет = ЗначениеНастроекПовтИсп.ПолучитьПриоритетПоУмолчанию(ДокументОбъект.Приоритет);
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ДокументОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ДокументОбъект,
		                                                                  УсловияПродаж.ХозяйственнаяОперация,
		                                                                  Валюта);
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ДокументОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ДокументОбъект.НалогообложениеНДС, ПараметрыЗаполнения);
	
	Комментарий = "";
	Если Не ПустаяСтрока(РеквизитыЗаказа.Комментарий) Тогда
		Комментарий = Комментарий + НСтр("ru = 'Комментарий менеджера на сайте'") + ": " +РеквизитыЗаказа.Комментарий;
	КонецЕсли;
	
	КомментарийПокупателя = СвойстваЗаказа.Получить("Комментарии покупателя");
	Если Не КомментарийПокупателя = Неопределено И Не ПустаяСтрока(КомментарийПокупателя) Тогда
		Комментарий = Комментарий + ?(ПустаяСтрока(Комментарий),"",Символы.ПС) + НСтр("ru = 'Комментарий покупателя на сайте'") + ": " + КомментарийПокупателя;
	КонецЕсли;
	
	ДокументОбъект.Комментарий   = Комментарий;
	
	СтатусЗаказа = СвойстваЗаказа.Получить("Статус заказа");
	Если Не СтатусЗаказа = Неопределено Тогда
		
		ТаблицаСтатусов = ПрикладныеПараметры.СоответствиеСтатусовЗаказов;
		ЗначениеСтатуса = ТаблицаСтатусов.Найти(СтатусЗаказа, "СтатусЗаказаНаСайте");
		
		Если Не ЗначениеСтатуса = Неопределено Тогда
			ДокументОбъект.Статус = ЗначениеСтатуса.СтатусЗаказаВБазе;
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		КонецЕсли;
		
	Иначе
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		
	КонецЕсли;
	
	ТаблицаНоменклатура = Неопределено;
	
	Если РеквизитыЗаказа.Свойство("ДатаОтгрузки")
		и ЗначениеЗаполнено(РеквизитыЗаказа.ДатаОтгрузки) Тогда
		ДокументОбъект.ДатаОтгрузки = РеквизитыЗаказа.ДатаОтгрузки;
		ДокументОбъект.НеОтгружатьЧастями = Истина;
	КонецЕсли;
	
	ОбменССайтамиУТ.ЗаполнитьТабличнуюЧастьДокумента(ДокументОбъект, РеквизитыЗаказа.Товары, ПрикладныеПараметры);
	ДокументОбъект.СуммаДокумента = ДокументОбъект.ПолучитьСуммуЗаказанныхСтрок();
	
	ОбменССайтамиУТ.ЗаполнитьНомерИДатуЗаказаДополнительныеРеквизиты(ДокументОбъект, РеквизитыЗаказа, ПрикладныеПараметры);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой")
		и НЕ ЗначениеЗаполнено(ДокументОбъект.СпособДоставки) Тогда
		ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	КонецЕсли;
	
	Если ДокументОбъект.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда
		ДокументОбъект.АдресДоставки = РеквизитыЗаказа.АдресДоставки;	
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах") Тогда
		ДокументОбъект.СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Успешно = Истина;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Поиск контрагента по настройкам плана обмена.
//
// Параметры:
//	СтруктураСвойстваЗаказа - Структура - содержит реквизиты заказа, загруженные с сайта. В данной структуре необходимо
//                                        заполнить поле "Контрагент".
//  ДанныеКонтрагента - Структура - содержит реквизита контрагента, загруженная с заказа, по данным реквизитам будет
//                                  происходить поиск существующего контрагента или создание нового:
//    * ЮрЛицо - Тип Булево. Признак наличия статуса Юр. лицо у контрагента.
//    * ОфициальноеНаименование - Тип строка.Официальное Наименование контрагента Юр. лица.
//    * ПолноеНаименование - Тип строка. Полное наименование контрагента Юр. лица.
//    * Наименование - Тип строка. Наименование контрагента.
//    * ФИО - ФИО контрагента, если он Физ. лицо.
//    * ОКПО - код ОКПО
//    * ИНН - код ИНН
//    * КПП - код КПП
//    * РасчетныеСчета - Массив - элементами массива является структура, в которой описаны свойства
//                                расчетного счета (необязательное поле):
//        ** НомерСчета - Строка - Номер банковского счета контрагента
//        ** ДанныеБанка - Структура - Данные банка расчетного счета:
//             *** Наименование - Строка
//             *** БИК - Строка
//             *** SWIFT - Строка
//             *** КоррСчет - Строка
//             *** Адрес - Строка
//             *** Город - Строка
//    * ИнформацияПоКонтрагенту - ТаблицаЗначений - содержит строковое представление и значение
//                                                  контактной информации о контрагенте:
//        ** Вид - Вид контактной информации.
//        ** Значение - значение контактной информации.
//  ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//  ОписаниеОшибки - Строка - текстовое представление ошибки.
//
//	Пример: 
//   Заполнение таблицы ИнформацияПоКонтрагенту:
//			Вид						Значение
//			"Наименование"			Администратор
//			"Полное наименование"	Администратор
//			"Юр./Физ. лицо"			Физ. лицо
//			"Юридический адрес"		Ул. Ленина
//			"Почта"					email@example.com
//			"Контактные лица"		Администратор
//
Процедура ИдентифицироватьКонтрагента(СтруктураСвойстваЗаказа, ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки) Экспорт

	//++ НЕ ГОСИС
	СтруктураСвойстваЗаказа.Вставить("Партнер", Неопределено);
	
	Наименование  = ДанныеКонтрагента.Наименование;
	ЮрЛицо        = ДанныеКонтрагента.ЮрЛицо;
	ИНН           = ДанныеКонтрагента.ИНН;
	КПП           = ДанныеКонтрагента.КПП;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	|			ТОГДА 1
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	|			ТОГДА 2
	|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	|			ТОГДА 3
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КонтрагентЮрФизЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	&УсловияОтбора";
	
	Если ПустаяСтрока(Наименование) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Наименование контрагента должно быть заполнено!'"));
		
		Возврат ;
		
	КонецЕсли;
	
	КонтрагентСсылка = Неопределено;
	
	ТекстСообщенияНайденоНесколькоКонтрагентов = "";
	
	ТекстУсловияОтбора = "ИСТИНА";
	
	Если ЮрЛицо Тогда
		
		ТекстУсловияОтбора = "Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)";
		
	Иначе
		
		ТекстУсловияОтбора = "Контрагенты.ЮрФизЛицо В (ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо), ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель))"; 
		
	КонецЕсли;
	
	Если ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления.СпособыИдентификацииКонтрагентов.Наименование ИЛИ ПустаяСтрока(ИНН) Тогда
		
		ТекстСообщенияНайденоНесколькоКонтрагентов = " " + НСтр("ru = 'по наименованию:'")+ " " + Наименование;
		
		ТекстУсловияОтбора = ТекстУсловияОтбора + Символы.ПС + Символы.Таб +  " И Контрагенты.Наименование = &Наименование ";
		
		Запрос.УстановитьПараметр("Наименование", Наименование);
		
	ИначеЕсли ПрикладныеПараметры.СпособИдентификацииКонтрагентов 
			= Перечисления.СпособыИдентификацииКонтрагентов.ИННКПП Тогда
			
		Если Не ТипЗнч(ИНН) = Тип("Строка") Тогда
			
			ИНН = "";
			ШаблонСообщения = НСтр("ru = 'У контрагента %1 не корректно указан ИНН'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Наименование);
			ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
			
		КонецЕсли;
		
		Если ЮрЛицо Тогда
			
			Если Не ТипЗнч(КПП) = Тип("Строка") Тогда
				КПП = "";
				ШаблонСообщения = НСтр("ru = 'У контрагента %1 не корректно указан КПП'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Наименование);
				ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, ТекстОшибки);
				
			КонецЕсли;
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                            " " + НСтр("ru = 'по ИНН: %1, КПП: %2'"),
			                            ИНН, КПП);
			
			ТекстУсловияОтбора = ТекстУсловияОтбора + Символы.ПС + Символы.Таб + " И Контрагенты.ИНН = &ИНН И Контрагенты.КПП = &КПП ";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			Запрос.УстановитьПараметр("КПП", КПП);
			
		Иначе // у физического лица КПП не бывает
			
			ТекстСообщенияНайденоНесколькоКонтрагентов = " " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'по ИНН: %1'"), КПП);
			
			ТекстУсловияОтбора = ТекстУсловияОтбора + Символы.ПС + Символы.Таб + " И Контрагенты.ИНН = &ИНН ";
			
			Запрос.УстановитьПараметр("ИНН", ИНН);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияОтбора", ТекстУсловияОтбора);
	
	ТекстУпорядочивания = "
	|УПОРЯДОЧИТЬ ПО
	|	КонтрагентЮрФизЛицо";
	
	Если Не ЮрЛицо И ЗначениеЗаполнено(ИНН) Тогда
		
		ТекстУпорядочивания = "
		|УПОРЯДОЧИТЬ ПО
		|	КонтрагентЮрФизЛицо Убыв";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ТекстУпорядочивания;
	
	КонтрагентСсылка = Неопределено;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		
		КонтрагентСсылка = ОбменССайтамиУТ.СоздатьКонтрагента(ДанныеКонтрагента, ПрикладныеПараметры, ОписаниеОшибки, СтруктураСвойстваЗаказа);
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		КонтрагентСсылка = Выборка.Контрагент;
		СтруктураСвойстваЗаказа.Партнер = Выборка.Партнер;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтрагентСсылка) Тогда
		
		ОбменССайтом.ДобавитьОписаниеОшибки(ОписаниеОшибки, 
		НСтр("ru = 'Не удалось найти или создать контрагента!'"));
		
		Возврат ;
		
	КонецЕсли;
	
	СтруктураСвойстваЗаказа.Контрагент = КонтрагентСсылка;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Ищет номенклатуру по ИД, если не находит - ищет по артикулу и наименованию, если не находит - создает новую.
//
// Параметры:
//   Номенклатура - Ссылка - Ссылка на найденную или новую номенклатуру.
//   ДанныеНоменклатуры - Структура - Структура, содержащая информацию о номенклатуре, загруженной с сайта,
//     по данным которой необходимо провести поиск существующей номенклатуры или создать новую.
//     * Ид - Строка - внутренний идентификатор номенклатуры.
//     * АртикулНоменклатуры - Строка - Артикул номенклатуры.
//     * НаименованиеНоменклатуры - Строка - Наименование номенклатуры.
//     * ЕдиницаИзмерения - Справочник.ЕдиницыИзмерения - ссылка на единицу измерения товара.
//     * ЭтоУслуга - Булево - признак услуги.
//     * СтавкаНДС - Перечисление.СтавкиНДС - ставка НДС номенклатуры.
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//   ОписаниеОшибки - Строка - текстовое представление ошибки.
//
Процедура НайтиСоздатьНоменклатуру(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, ОписаниеОшибки) Экспорт
	
	//++ НЕ ГОСИС
	УникальныйИдентификаторКорректен = Истина;
	
	Если ОбменССайтамиУТ.УспешноНайденТоварПоСсылке(Номенклатура, ДанныеНоменклатуры, ПрикладныеПараметры, УникальныйИдентификаторКорректен) Тогда
		Возврат;
	КонецЕсли;
	
	// Попробуем найти номенклатуру по артикулу.
	Номенклатура = ОбменССайтамиУТ.НоменклатураПоАртикулу(ДанныеНоменклатуры.АртикулНоменклатуры);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	// Попробуем найти номенклатуру по наименованию и виду номенклатуры.
	ВидНоменклатуры = ?(ДанныеНоменклатуры.ЭтоУслуга, ПрикладныеПараметры.ВидНоменклатурыУслуга, ПрикладныеПараметры.ВидНоменклатурыТовар);
	
	Номенклатура = ОбменССайтамиУТ.НоменклатураПоНаименованиюИВиду(ДанныеНоменклатуры.НаименованиеНоменклатуры, ВидНоменклатуры);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ЕдиницаПоКлассификатору = Неопределено;
	
	Если ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдиницаИзмерения.КодБазовойЕдиницы) Тогда
		
		ЕдиницаПоКлассификатору = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(ДанныеНоменклатуры.ЕдиницаИзмерения.КодБазовойЕдиницы);
		
	КонецЕсли;
	
	Если ЕдиницаПоКлассификатору = Неопределено 
		И ЗначениеЗаполнено(ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеБазовойЕдиницы) Тогда
		
		ЕдиницаПоКлассификатору = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(ДанныеНоменклатуры.ЕдиницаИзмерения.НаименованиеБазовойЕдиницы, Истина);
		
	КонецЕсли;
	
	Если ЕдиницаПоКлассификатору = Неопределено Тогда
		ЕдиницаПоКлассификатору = ПрикладныеПараметры.ЕдиницаИзмеренияНовойНоменклатуры;
	КонецЕсли;
	
	НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
	НоменклатураОбъект.ВидНоменклатуры    = ВидНоменклатуры;

	Справочники.Номенклатура.ЗаполнитьРеквизитыПоВидуНоменклатуры(НоменклатураОбъект);
	
	НоменклатураОбъект.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(ЕдиницаПоКлассификатору), ЕдиницаПоКлассификатору, НоменклатураОбъект.ЕдиницаИзмерения);
	НоменклатураОбъект.Родитель           = ПрикладныеПараметры.ГруппаДляНовойНоменклатуры;
	НоменклатураОбъект.Наименование       = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	НоменклатураОбъект.НаименованиеПолное = ДанныеНоменклатуры.НаименованиеНоменклатуры;
	
	СтавкаНДС = ОбменССайтамиУТ.СтавкаНДСПоЗначениюПриЗагрузке(ДанныеНоменклатуры.СтавкаНДС);
	НоменклатураОбъект.СтавкаНДС          = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, НоменклатураОбъект.СтавкаНДС);
	
	Если УникальныйИдентификаторКорректен Тогда
		НоменклатураОбъект.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеНоменклатуры.Ид)));
	КонецЕсли;
	
	НоменклатураОбъект.Записать();
	Номенклатура = НоменклатураОбъект.Ссылка;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Поиск единицы измерения товара по коду.
//
// Параметры:
//  КодУпаковки - Строка - код упаковки товара.
//  Упаковка - СправочникСсылка - ссылка на упаковку.
//
Процедура НайтиСоздатьУпаковку(КодУпаковки, Упаковка) Экспорт
	
	//++ НЕ ГОСИС
	Упаковка = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоКоду(КодУпаковки);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Создает новый элемент справочника являющегося в прикладном решении точками самовывоза, например, Склады, Магазины.
//
// Параметры:
//  ДанныеТочки - Структура - параметры точки:
//    * Ид - Строка - идентификатор точки самовывоза.
//    * Адрес - Структура - структура с полями "ТипАдреса" и "ЗначениеАдреса".
//    * Контакты - Структура - структура с полями "ТипКонтакта" и "ЗначениеКонтакта".
//    * Наименование - Строка - наименование точки самовывоза.
//  ТочкаСамовывоза - СправочникСсылка - ссылка на элемент справочника,который в прикладном решении является точкой самовывоза.
//
Процедура СоздатьТочкуСамовывоза(ДанныеТочки, ТочкаСамовывоза) Экспорт
	
	
КонецПроцедуры

// Вычисляет значение ставки НДС по переданному элементу справочника или перечисления.
//
// Параметры:
//   СтавкаНДС - ПеречислениеСсылка, СправочникСсылка - ставка НДС, выраженная элементом объекта метаданных прикладного решения.
//   ЗначениеСтавкиНДС - Число - Значение ставки НДС выраженное числом.
//
Процедура ПолучитьПоСтавкеНДСЗначениеДляВыгрузки(СтавкаНДС, ЗначениеСтавкиНДС) Экспорт
	
	//++ НЕ ГОСИС
	ЗначениеСтавкиНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Записывает в регистр сведений дополнительные сведения о заказе.
//
// Параметры:
//   ОбновленыСвойстваЗаказа - Булево - признак успешного выполнения процедуры.
//   ПрикладныеПараметры - Структура - прикладные параметры обмена.
//   ЗаказПокупателя - ДокументСсылка - ссылка на документ ЗаказПокупателя.
//   СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//   ОписаниеОшибки - Строка - текстовое представление ошибки.
//
Процедура ОбновитьСоздатьДополнительныеСведенияЗаказа(ОбновленыСвойстваЗаказа,
														ПрикладныеПараметры,
														ЗаказПокупателя,
														СвойстваЗаказа,
														ОписаниеОшибки) Экспорт
	
КонецПроцедуры

// Выполняет дополнительные процедуры после записи заказа.
//
// Параметры:
//   ЗаказПокупателя - ДокументСсылка - ссылка на документ ЗаказПокупателя.
//   ПрикладныеПараметры - Структура - прикладные параметры обмена.
//   СвойстваЗаказа - Соответствие - содержит строковое представления свойств (ключ) и значений (значение) заказа.
//
Процедура ПослеЗаписиЗаказа(ЗаказПокупателя, ПрикладныеПараметры, СвойстваЗаказа) Экспорт
	
	ОбменССайтамиУТ.ПослеЗаписиЗаказа(ЗаказПокупателя, ПрикладныеПараметры, СвойстваЗаказа);
	
КонецПроцедуры

// В зависимости от настроек прикладного решения установка флага использования характеристик.
//
// Параметры:
//  ИспользоватьХарактеристики - Булево - установка признака использования характеристик.
//
// Пример:
//  ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики").
//
Процедура УстановитьПризнакИспользоватьХарактеристики(ИспользоватьХарактеристики) Экспорт
	
	//++ НЕ ГОСИС
	ИспользоватьХарактеристики = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Меняет статус заказа на "Отменен".
// Параметры:
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                    подсистемы в прикладное решение.
//   ДокументСсылка - Ссылка - ссылка на документ Заказ, у которого нужно поменять статус.
Процедура ОтменитьЗаказ(ПрикладныеПараметры, ДокументСсылка) Экспорт
	
	//++ НЕ ГОСИС
	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ОбъектЗаказ = ДокументСсылка.ПолучитьОбъект();
	ЕстьИзменения = Ложь;
	Для Каждого СтрокаТовары Из ОбъектЗаказ.Товары Цикл
		Если НЕ СтрокаТовары.Отменено Тогда
			СтрокаТовары.Отменено = Истина;
			Если ИспользоватьПричиныОтменыЗаказовКлиентов Тогда
				СтрокаТовары.ПричинаОтмены = ПрикладныеПараметры.ПричинаОтменыЗаказа;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(ОбъектЗаказ);
		ОбъектЗаказ.Записать(?(ОбъектЗаказ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Проверяет была ли оплата по заказу.
//
// Параметры: 
//   ЗаказОплачен - Булево - признак того, что заказ был оплачен, влияет на статус оплаты заказа на сайте.
//   СтатусЗаказа - ПеречислениеСсылка - статус заказа в прикладном решении.
//   ДанныеДокументаКОплатеОстаток - Число - не оплаченный остаток денег по заказу.
//
Процедура ОпределитьСтатусОплатыЗаказа(ЗаказОплачен, СтатусЗаказа, 
	                                    ДанныеДокументаКОплатеОстаток) Экспорт
	//++ НЕ ГОСИС
	ЗаказОплачен = НЕ (ДанныеДокументаКОплатеОстаток > 0);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Проверяет текущее состояние заказа.
//
// Параметры:
//   ЗаказВРаботе - Булево - Признак того, что заказ был "обработан" в прикладном решении (т.е. поменял свой статус после загрузки с сайта).
//                           Данный признак влияет на статус заказа на сайте.
//   ДанныеДокументаСостояниеЗаказа - ПеречислениеСсылка, СправочникСсылка - статус заказа, который он может принимать в прикладном решении.
Процедура ОпределитьСтатусСостоянияЗаказаЗаказВРаботе(ЗаказВРаботе, ДанныеДокументаСостояниеЗаказа) Экспорт
	//++ НЕ ГОСИС
	ЗаказВРаботе = ДанныеДокументаСостояниеЗаказа <> Перечисления.СостоянияЗаказовКлиентов.Закрыт;
	//-- НЕ ГОСИС
КонецПроцедуры

// Определяет была ли отгрузка товара по заказу.
//
// Параметры:
//   ЗаказОтгружен - Булево - признак того, что товар по заказу был отгружен. Влияет на статус отгрузки заказа на сайте.
//   ДанныеДокументаСтатусЗаказа - ПеречислениеСсылка, СправочникСсылка - статус, который может иметь заказ в прикладном решении.
//   ДанныеДокументаКОтгрузкеОстаток - Число - неотгруженный остаток по заказу (заказано было 7, а отгрузили 5).
Процедура ОпределитьСтатусОтгрузкиЗаказа(ЗаказОтгружен, ДанныеДокументаСтатусЗаказа,
											ДанныеДокументаКОтгрузкеОстаток) Экспорт
	//++ НЕ ГОСИС
	ЗаказОтгружен =  НЕ (ДанныеДокументаКОтгрузкеОстаток > 0);
	//-- НЕ ГОСИС
КонецПроцедуры

// Определение нужно ли считать НДС.
//
// Параметры:
//  СчитатьНДС - Булево - признак о необходимости считать НДС по заказу.
//  ВыборкаДокументовНалогообложениеНДС - ПеречислениеСсылка, СправочникСсылка - ссылка на объект.
//
Процедура ОпределитьНеобходимостьНДСВЗаказе(СчитатьНДС, ВыборкаДокументовНалогообложениеНДС) Экспорт
	
	//++ НЕ ГОСИС
	СчитатьНДС = (ВыборкаДокументовНалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеДокументов - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                          и реальных имен документов, используемых в прикладном решении. 
//                                          Обязательно должно содержать ключ "ЗаказПокупателя".
//
Процедура ПолучитьСоответствиеДокументов(СоответствиеДокументов) Экспорт
	
	//++ НЕ ГОСИС
	СоответствиеДокументов.Вставить("ЗаказПокупателя","ЗаказКлиента");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеСправочников - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                          и реальных имен справочников, используемых в прикладном решении. 
//                                          Обязательно должно содержать ключи "Номенклатура", "ТочкиСамовывоза",
//                                          "ХарактеристикиНоменклатуры", "Организации", 
//                                          "НоменклатураПрисоединенныеФайлы", "ВидыЦен", "Склады", "ВидыНоменклатуры".
//
Процедура ПолучитьСоответствиеСправочников(СоответствиеСправочников) Экспорт
	
	//++ НЕ ГОСИС
	СоответствиеСправочников.Вставить("Номенклатура", "Номенклатура");
	СоответствиеСправочников.Вставить("ВидыНоменклатуры", "ВидыНоменклатуры");
	СоответствиеСправочников.Вставить("ХарактеристикиНоменклатуры", "ХарактеристикиНоменклатуры");
	СоответствиеСправочников.Вставить("НаборыДополнительныхРеквизитовИСведений", "НаборыДополнительныхРеквизитовИСведений");
	СоответствиеСправочников.Вставить("ВидыЦен", "ВидыЦен");
	СоответствиеСправочников.Вставить("НоменклатураПрисоединенныеФайлы", "НоменклатураПрисоединенныеФайлы");
	СоответствиеСправочников.Вставить("Склады", "Склады");
	СоответствиеСправочников.Вставить("ТочкиСамовывоза", "Склады");
	СоответствиеСправочников.Вставить("Контрагенты", "Контрагенты");
	СоответствиеСправочников.Вставить("Организации", "Организации");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения, в случае различий в наименовании справочников.
//
// Параметры:
//  СоответствиеПВХ - Соответствие - определяет соответствие служебных имен, используемых в библиотеке и
//                                   и реальных имен планов видов характеристик, используемых в прикладном решении.
//                                   Обязательно должно содержать ключ "ДополнительныеРеквизитыИСведения".
//
Процедура ПолучитьСоответствиеПВХ(СоответствиеПВХ) Экспорт
	
	//++ НЕ ГОСИС
	СоответствиеПВХ.Вставить("ДополнительныеРеквизитыИСведения", "ДополнительныеРеквизитыИСведения");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет соответствие форм библиотеки и прикладного решения.
// Параметры:
//   СоответствиеФорм - Соответствие - используется для переопределения форм, вызываемых библиотекой.
//                                     Обязательно должно содержать ключ "ФормаВыбораТочекСамовывоза".
Процедура ПолучитьСоответствиеФорм(СоответствиеФорм) Экспорт
	
	//++ НЕ ГОСИС
	СоответствиеФорм.Вставить("ФормаВыбораТочекСамовывоза","Справочник.Склады.ФормаВыбора");
	//-- НЕ ГОСИС
	
КонецПроцедуры

// формирует прокси по настройкам прокси (передаваемому параметру).
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие - настройка прокси-сервера:
//    * ИспользоватьПрокси - Булево - использовать ли прокси-сервер.
//    * НеИспользоватьПроксиДляЛокальныхАдресов - Булево - использовать ли прокси-сервер для локальных адресов.
//    * ИспользоватьСистемныеНастройки - Булево - использовать ли системные настройки прокси-сервера.
//    * Сервер       - Строка - адрес прокси-сервера.
//    * Порт         - Число - порт прокси-сервера.
//    * Пользователь - Строка - имя пользователя для авторизации на прокси-сервере.
//    * Пароль       - Строка - пароль пользователя.
//
Процедура ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
	//++ НЕ ГОСИС
#Если Клиент Тогда
	НастройкаПроксиСервера = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().НастройкиПроксиСервера;
#Иначе
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
#КонецЕсли
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Заполняет номер и дату заказа на сайте.
//
// Параметры:
//	ДокСсылка - Ссылка - ссылка на документ Заказ.
//	УзелОбмена - Структура - параметры прикладного решения, размещенные в форме узла плана обмена.
//  ДанныеССайта - структура - заполняется в процедуре.
//     * НомерЗаказаНаСайте - Строка - номер заказа на сайте.
//     * ДатаЗаказаНаСайте - Дата - дата заказа на сайте.
//
Процедура РеквизитыЗаказаНаСайте(ДокСсылка, УзелОбмена, ДанныеССайта) Экспорт
	//++ НЕ ГОСИС
	ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте = 
	           ОбменССайтамиУТ.РеквизитПрикладногоРешения(УзелОбмена, "ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте");
	ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте = 
	           ОбменССайтамиУТ.РеквизитПрикладногоРешения(УзелОбмена, "ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказКлиентаДополнительныеРеквизиты.Значение,
	|	ЗаказКлиентаДополнительныеРеквизиты.Свойство
	|ИЗ
	|	Документ.ЗаказКлиента.ДополнительныеРеквизиты КАК ЗаказКлиентаДополнительныеРеквизиты
	|ГДЕ
	|	ЗаказКлиентаДополнительныеРеквизиты.Ссылка = &ЗаказКлиента
	|	И (ЗаказКлиентаДополнительныеРеквизиты.Свойство = &СвойствоНомерЗаказа
	|			ИЛИ ЗаказКлиентаДополнительныеРеквизиты.Свойство = &СвойствоДатаЗаказа)";
	
	Запрос.УстановитьПараметр("СвойствоНомерЗаказа", ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте);
	Запрос.УстановитьПараметр("СвойствоДатаЗаказа", ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте);
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокСсылка);
	
	Результат = Запрос.Выполнить();
	
	ДанныеССайта = Новый Структура;
	ДанныеССайта.Вставить("НомерЗаказаНаСайте", "");
	ДанныеССайта.Вставить("ДатаЗаказаНаСайте", Дата(1,1,1));
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Свойство = ДополнительныйРеквизитЗаказаКлиентаНомерЗаказаНаСайте Тогда
			ДанныеССайта.НомерЗаказаНаСайте = Выборка.Значение;
		КонецЕсли;
		Если Выборка.Свойство = ДополнительныйРеквизитЗаказаКлиентаДатаЗаказаНаСайте Тогда
			ДанныеССайта.ДатаЗаказаНаСайте = Выборка.Значение;
		КонецЕсли;
	КонецЦикла;
	//-- НЕ ГОСИС
КонецПроцедуры 

// Заполняет массив реквизитов формы, значение которых должно быть сохранено.
//
// Параметры:
//  МассивРеквизитов - Массив - реквизиты для заполнения.
//
Процедура ЗаполнитьПрикладныеРеквизитыФормыУзлаОбменССайтом(МассивРеквизитов) Экспорт
	//++ НЕ ГОСИС
	РеквизитыТоваров = ОбменССайтамиУТ.РеквизитыОбменаТоварами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыТоваров);
	
	РеквизитыЗаказов = ОбменССайтамиУТ.РеквизитыОбменаЗаказами();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивРеквизитов, РеквизитыЗаказов);
	//-- НЕ ГОСИС
КонецПроцедуры

// Добавляет произвольные поля в структуру ПрикладныеПараметры.
//
// Параметры:
//   ПрикладныеПараметры - Структура - параметры обмена которые были добавлены в форму узла при встраивании
//                                     подсистемы в прикладное решение.
//	
Процедура ДополнитьПараметрыПрикладногоРешения(ПрикладныеПараметры) Экспорт
	
КонецПроцедуры

// Выполняет логику прикладного решения при обновлении конфигурации.
//
// Параметры:
//  ИмяОбработчика - Строка - представление обработчика обновления, вызвавшего процедуру.
//
Процедура ОбработчикОбновленияПереопределяемый(ИмяОбработчика) Экспорт
	
	
	
КонецПроцедуры

// В форму узла плана обмена добавляются реквизиты прикладного решения и элементы формы к ним.
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма узла плана обмена "Обмен с сайтом".
//  ТекущийОбъект - ПланОбменаОбъект - Объект плана обмена "Обмен с сайтом".
//
Процедура ДобавитьРеквизитыФормыУзла(Форма, ТекущийОбъект) Экспорт
	//++ НЕ ГОСИС
	ОбменССайтамиУТ.ДобавитьРеквизитыФормыНастройки(Форма);
	//-- НЕ ГОСИС
КонецПроцедуры

#Область ПомощникПодключенияЮМИ

// Процедура, вызываемая из одноименного обработчика события формы "Помощник подключения ЮМИ" обработки "Обмен с сайтами".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры.
// 
Процедура ПриСозданииНаСервереФормаПомощникПодключенияЮМИ(Форма) Экспорт
	
	//++ НЕ ГОСИС
	ОбменССайтамиУТ.ПриСозданииНаСервереФормаСоздатьСайт(Форма);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстВтДоступныеТовары()
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Запасы.Номенклатура КАК Номенклатура,
		|	Запасы.Характеристика КАК Характеристика,
		|	Запасы.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток < 0
		|			ТОГДА
		|				Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА Запасы.ВНаличииОстаток
		|						- Запасы.РезервироватьНаСкладеОстаток
		|						- Запасы.РезервироватьПоМереПоступленияОстаток > 0
		|					ТОГДА
		|						Запасы.ВНаличииОстаток
		|							- Запасы.РезервироватьНаСкладеОстаток
		|							- Запасы.РезервироватьПоМереПоступленияОстаток
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК Свободно
		|ПОМЕСТИТЬ ВтДоступныеТовары
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
		|		Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|			И Склад ССЫЛКА Справочник.Склады
		|			И Номенклатура В(
		|				ВЫБРАТЬ
		|					ОтборНоменклатура.Номенклатура КАК Номенклатура
		|				ИЗ
		|					втНоменклатура КАК ОтборНоменклатура)
		|			{Номенклатура.* КАК Номенклатура, Склад.* КАК Склад}) КАК Запасы
		|ГДЕ
		|	(Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток < 0)
		|		ИЛИ (Запасы.ВНаличииОстаток - Запасы.РезервироватьНаСкладеОстаток - Запасы.РезервироватьПоМереПоступленияОстаток > 0)
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад";
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запроса для формирования временной таблицы "втНоменклатура".
// Таблица содержит ссылки на номенклатуру с учетом отборов, накладываемых компоновщиком настроек.
//
Функция ПолучитьТекстЗапросаВтНоменклатура()
	
	//++ НЕ ГОСИС
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ПризнакИспользования
	|ПОМЕСТИТЬ втИспользуетсяОтборПоСегменту
	|{ГДЕ 
	|	НЕ &ИспользуетсяОтборПоСегментуНоменклатуры = ИСТИНА}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втНоменклатура
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НЕ ЛОЖЬ В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					втИспользуетсяОтборПоСегменту.ПризнакИспользования
	|				ИЗ
	|					втИспользуетсяОтборПоСегменту)
	|{ГДЕ
	|	НоменклатураСегмента.Номенклатура.*,
	|	НоменклатураСегмента.Сегмент.* КАК СегментНоменклатуры}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И ЛОЖЬ В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				втИспользуетсяОтборПоСегменту.ПризнакИспользования
	|			ИЗ
	|				втИспользуетсяОтборПоСегменту)
	|{ГДЕ
	|	Номенклатура.Ссылка.* КАК Номенклатура}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
	ТекстЗапроса = ТекстЗапроса +
	"
	|;
	|/////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	//-- НЕ ГОСИС
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#КонецОбласти



