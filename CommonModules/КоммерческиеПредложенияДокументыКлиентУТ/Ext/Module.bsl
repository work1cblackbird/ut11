////////////////////////////////////////////////////////////////////////////////
// Подсистема "Объекты УТ11, КА2, УП2".
// ОбщийМодуль.КоммерческиеПредложенияДокументыКлиентУТ.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийИзмененияЭлементовФормы

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииНоменклатуры.
//
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
	КоммерческиеПредложенияДокументыКлиентЛокализация.ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииХарактеристики.
//
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииХарактеристики(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов)
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЕдиницыИзмерения.
//
Процедура ПриИзмененииЕдиницыИзмерения(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииЕдиницыИзмерения(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииКоличества.
//
Процедура ПриИзмененииКоличества(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииКоличества(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииВидаЦены.
//
Процедура ПриИзмененииВидаЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииВидаЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСумма.
//
Процедура ПриИзмененииСумма(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииСумма(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСуммыНДС.
//
Процедура ПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЦены.
//
Процедура ПриИзмененииЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСтавкаНДС.
//
Процедура ПриИзмененииСтавкаНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииСтавкаНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииПроцентаРучнойСкидки.
//
Процедура ПриИзмененииПроцентаРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииПроцентаРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСуммыРучнойСкидки.
//
Процедура ПриИзмененииСуммыРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииСуммыРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииПартнера.
//
Процедура ПриИзмененииПартнера(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииПартнера(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииОрганизации.
//
Процедура ПриИзмененииОрганизации(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииОрганизации(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииХозяйственнойОперации.
//
Процедура ПриИзмененииХозяйственнойОперации(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперации(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииМенеджера.
//
Процедура ПриИзмененииМенеджера(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииМенеджера(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииНалогообложенияНДС.
//
Процедура ПриИзмененииНалогообложенияНДС(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДС(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииЦенаВключаетНДС.
//
Процедура ПриИзмененииЦенаВключаетНДС(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДС(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииВалюты.
//
Процедура ПриИзмененииВалюты(Форма, ТребуетсяСерверныйВызов) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриИзмененииПриИзмененииВалюты(Форма, ТребуетсяСерверныйВызов);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТабличнаяЧастьВыбор.
//
Процедура ТабличнаяЧастьВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
	
		КоммерческоеПредложениеКлиентуТоварыВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТабличнаяЧастьВыбор.
//
Процедура ПослеВыполненияТоварыВыбор(Форма, ИмяПоля, РезультатОбработки) Экспорт
	
		
	Если РезультатОбработки <> Неопределено Тогда
		
		Если ИмяПоля <> "ТоварыКомментарийДляПокупателя"
			Или ИмяПоля <> "ТоварыКомментарийВнутренний" Тогда
			
			ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", РезультатОбработки, Форма, Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТабличнаяЧастьВыбор.
//
Процедура ТоварыПередУдалением(Форма, Элемент, ТекущиеДанные, Отказ) Экспорт
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(Форма, "Товары", Отказ, Ложь, "Подключаемый_ОбработкаРезультатаПодбораНоменклатуры");
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСтатуса.
//
Процедура ПриИзмененииСтатуса(Форма, ТекущаяДата, ТребуетсяСерверныйВызов) Экспорт
	
	КоммерческиеПредложенияДокументыКлиентСерверУТ.СформироватьПредставлениеСостоянияПоСтатусу(Форма, Форма.Объект.Статус, ТекущаяДата);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриИзмененииСрокаДействияКоммерческогоПредложения.
//
Процедура ПриИзмененииСрокаДействияКоммерческогоПредложения(Форма, ТекущаяДата, ТребуетсяСерверныйВызов) Экспорт
	
	КоммерческиеПредложенияДокументыКлиентСерверУТ.СформироватьПредставлениеСостоянияПоСтатусу(Форма, Форма.Объект.Статус, ТекущаяДата);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФорм

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПередЗаписью
//
Процедура ПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПередЗаписью(Форма, Отказ, ПараметрыЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриОткрытии
//
Процедура ПриОткрытии(Форма, Отказ) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриОткрытии(Форма, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриЗакрытии
//
Процедура ПриЗакрытии(Форма, ЗавершениеРаботы) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриЗакрытии(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ВнешнееСобытие
//
Процедура ВнешнееСобытие(Форма, Источник, Событие, Данные) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуВнешнееСобытие(Форма, Источник, Событие, Данные);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры.
//
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении);
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОткрытьФормуЗагрузкиИзВнешнихФайлов.
//
Процедура ОткрытьФормуЗагрузкиИзВнешнихФайлов(Форма, ОповещениеПриЗавершении) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуОткрытьФормуЗагрузкиИзВнешнихФайлов(Форма, ОповещениеПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполнениеКомандыЗаполнитьУсловияОплаты.
//
Процедура ПриВыполнениеКомандыЗаполнитьУсловияОплаты(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не ПустаяСтрока(Объект.УсловияОплатыТекст) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ТекстВопроса = НСтр("ru = 'Условия оплаты будут перезаполнены. Продолжить?'");
		ОповещениеПослеОтветаНаВопрос = Новый ОписаниеОповещения("ПослеОтветНаВопросОбПерезаполненииУсловийОплаты", 
		                                                         ЭтотОбъект, 
		                                                         ДополнительныеПараметры);
		
		ПоказатьВопрос(ОповещениеПослеОтветаНаВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыбратьИсточникУсловийОплаты(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыЗаполнитьВидыЦенПоставщика.
//
Процедура ПриВыполненииКомандыЗаполнитьВидыЦенПоставщика(Форма, ОписаниеОповещения) Экспорт
	
	Отбор = Новый Структура;
	
	Отбор.Вставить("Владелец",        Форма.Объект.Поставщик);
	Отбор.Вставить("Валюта",          Форма.Объект.Валюта);
	Отбор.Вставить("ЦенаВключаетНДС", Форма.Объект.ЦенаВключаетНДС);
	
	ПараметрыФормы = Новый Структура("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.ВидыЦенПоставщиков.ФормаВыбора", ПараметрыФормы, Форма, , , , ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборНоменклатуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры.
//
Процедура ОбработкаВыбораПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт

	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
			КоммерческоеПредложениеКлиентуОбработкаВыбораПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаТоваровИзВнешнихФайлов.Форма.Форма" Тогда
			
			КоммерческоеПредложениеКлиентуОбработкаВыбораЗагрузкаИзВнешнихФайлов(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаОповещенияПодборНоменклатуры.
//
Процедура ОбработкаОповещенияПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуОбработкаОповещенияПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОповещенияПодбораНоменклатуры.
//
Процедура ПослеОповещенияПодбораНоменклатуры(Форма, Результат, ДополнительныеПараметры, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентПослеОповещенияПодбораНоменклатуры(Форма, Результат, ДополнительныеПараметры, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОбработкиОповещенияПодбораНоменклатуры.
//
Процедура ПослеОбработкиОповещенияПодбораНоменклатуры(Форма, ВыбранноеЗначение, РезультатОбработки, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентПослеОбработкиОповещенияПодбораНоменклатуры(Форма, ВыбранноеЗначение, РезультатОбработки, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры.
//
Процедура ПоказатьВводШтрихкода(Оповещение) Экспорт
	
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОбработкиШтриховыхКодов.
//
Процедура ПослеОбработкиШтриховыхКодов(Форма, РезультатОбработки) Экспорт
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(РезультатОбработки, РезультатОбработки.КэшированныеЗначения, Форма);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.НачатьЗагрузкуДанныхИзТСД.
//
Процедура НачатьЗагрузкуДанныхИзТСД(Форма, ОповещениеОЗавершении) Экспорт
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		ОповещениеОЗавершении, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриПолученииДанныхИзТСД.
//
Процедура ПриПолученииДанныхИзТСД(ОповещениеОЗавершении, ЭтотОбъект, РезультатВыполнения) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения.ТаблицаТоваров);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыЗаполнитьЦеныПоВидуЦен.
//
Процедура ПриВыполненииКомандыЗаполнитьЦеныПоВидуЦен(Форма, ОповещениеОВыборе) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЦеныПредприятияЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru = 'Товары'")) Тогда
		
		ПараметрыВыбораЦен = ЦеныПредприятияЗаполнениеКлиент.НовыйПараметрыЗаполненияВыбратьВидЦен();
		ПараметрыВыбораЦен.ОписаниеОповещения =ОповещениеОВыборе;
		ПараметрыВыбораЦен.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораЦен.ИспользоватьПриПродаже = Истина;
		ЦеныПредприятияЗаполнениеКлиент.ВыбратьВидЦен(ПараметрыВыбораЦен);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыЗаполнитьЦеныПоУсловиямПродаж.
//
Процедура ПриВыполненииКомандыЗаполнитьЦеныПоУсловиямПродаж(Форма, ОповещениеОВыборе) Экспорт
	
	Объект = Форма.Объект;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана валюта. Цены не могут быть заполнены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Валюта", "Объект", Отказ);
		
	КонецЕсли;
		
	Если Объект.Товары.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Табличная часть ""Товары"" пустая. Цены не могут быть заполнены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Товары", "Объект", Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан клиент. Цены не могут быть заполнены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Клиент", "Объект", Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указана операция. Цены не могут быть заполнены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ХозяйственнаяОперация", "Объект", Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДатаДокумента",         Объект.Дата);
	ПараметрыОткрытия.Вставить("Партнер",               Объект.Клиент);
	ПараметрыОткрытия.Вставить("ХозяйственнаяОперация", 
		КоммерческиеПредложенияДокументыКлиентСерверУТ.ХозяйственнаяОперацияДокументаКоммерческоеПредложениеКлиенту(Объект.ХозяйственнаяОперация));
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора", ПараметрыОткрытия, Форма,,,,
	             ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыРазбитьСтроку.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения.
//  ТекущаяСтрока         - ДанныеФормыЭлементКоллекции.
//  ОповещениеОЗавершении - ОписаниеОповещения.
//
Процедура ПриВыполненииКомандыРазбитьСтроку(Форма, ТекущаяСтрока, ОповещениеОЗавершении) Экспорт
	
	ТаблицаФормы  = Форма.Элементы.Товары;
	ДанныеТаблицы = Форма.Объект.Товары;
	
	ПараметрыРазбиенияСтроки = РаботаСТабличнымиЧастямиКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество          = "Количество";
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(
		ДанныеТаблицы,
		ТаблицаФормы,
		ОповещениеОЗавершении,
		ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыРазбитьСтроку.
//
Процедура ПриВыполненииКомандыРассчитатьСкидки(Форма, ТребуетсяСерверныйВызов) Экспорт
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОткрытьИнформациюОСкидках.
//
Процедура ПриВыполненииКомандыОткрытьИнформациюОСкидках(Форма, ТребуетсяСерверныйВызов) Экспорт
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОткрытьИнформациюОСкидках.
//
Процедура ПриВыполненииКомандыНазначитьРучнуюСкидку(Форма, ВыделенныеСтроки, СтандартнаяОбработка, ТребуетсяСерверныйВызов) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Объект = Форма.Объект;

	Если СкидкиНаценкиЗаполнениеКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru = 'Товары'")) Тогда
		ТребуетсяСерверныйВызов = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыНазначитьАвтоматическиеСкидки.
//
Процедура ПриВыполненииКомандыНазначитьАвтоматическиеСкидки(Форма, ОповещениеОЗавершении, ТребуетсяСерверныйВызов) Экспорт
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеНазначенияАвтоматическойСкидки.
//
Процедура ПослеНазначенияАвтоматическойСкидки(Форма, Результат, ТребуетсяСерверныйВызов) Экспорт
	
	Форма.УправляемыеСкидки = Результат;
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеРасчетаНазначенныхАвтоматическихСкидок.
//
Процедура ПослеРасчетаНазначенныхАвтоматическихСкидок(Форма, Результат) Экспорт
	
	Если ТипЗнч("Результат") = Тип("Структура") 
		И Результат.Свойство("Сообщения")
		И Результат.Сообщения.Количество() > 0 
		И Результат.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", Результат, Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
		
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеПодготовкиНазначенияАвтоматическихСкидок.
//
Процедура ПослеПодготовкиНазначенияАвтоматическихСкидок(Форма, ОповещениеОЗавершении, Результат) Экспорт
	
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(Результат, ОповещениеОЗавершении);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеПодготовкиНазначенияРучныхСкидок.
//
// Параметры:
//  Форма                                 - ФормаКлиентскогоПриложения.
//  ВыделенныеСтроки                      - Массив.
//  ОповещениеПослеНазначенияРучнойСкидки - ОписаниеОповещения.
//  РезультатОбработки                    - Произвольный.
//
Процедура ПослеПодготовкиНазначенияРучныхСкидок(Форма, ВыделенныеСтроки, ОповещениеПослеНазначенияРучнойСкидки, РезультатОбработки) Экспорт
	
	ОповещениеПослеНазначенияРучнойСкидки.ДополнительныеПараметры.Вставить("АдресВоВременномХранилище", РезультатОбработки);
	ОповещениеПослеНазначенияРучнойСкидки.ДополнительныеПараметры.Вставить("СтандартнаяОбработка",      Ложь);
	ОповещениеПослеНазначенияРучнойСкидки.ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов",   Истина);
	
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		РезультатОбработки,
		Форма.Объект.Валюта,
		ОповещениеПослеНазначенияРучнойСкидки);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеЗавершенияНазначенияРучныхСкидок.
//
Процедура ПослеЗавершенияНазначенияРучныхСкидок(Форма, ВыделенныеСтроки, Результат) Экспорт
	
	Объект = Форма.Объект;
	
	СкидкиНаценкиЗаполнениеКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(Результат, Объект.Валюта);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииКомандыОткрытьИнформациюОСкидках.
//
Процедура ПриВыполненииКомандыОтменитьРучныеСкидки(Форма, ВыделенныеСтроки, ЦенаВключаетНДС, Налогообложение, ТребуетсяСерверныйВызов) Экспорт
	
	Объект = Форма.Объект;
	
	Если СкидкиНаценкиЗаполнениеКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru = 'Товары'")) Тогда
		ТребуетсяСерверныйВызов = Истина;
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеОтменыРучныхСкидок.
//
Процедура ПослеОтменыРучныхСкидок(Форма, ВыделенныеСтроки, РезультатОбработки) Экспорт
	
	 СкидкиНаценкиЗаполнениеКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииПереопределяемойКоманды.
//
Процедура ПриВыполненииПереопределяемойКоманды(Форма, Команда, ТребуетсяСерверныйВызов) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПриВыполненииПереопределяемойКоманды(Форма, Команда, ТребуетсяСерверныйВызов);
		
	КонецЕсли;
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(Форма, Команда);
		
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ВыполнитьПодключаемуюКомандуИнтеграции.
//
Процедура ВыполнитьПодключаемуюКомандуИнтеграции(Команда, Форма, Объект) Экспорт
	
	КоммерческиеПредложенияДокументыКлиентЛокализация.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, Форма, Объект);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПредложитьПользователюРассчитатьСкидки.
//
Процедура ПредложитьПользователюРассчитатьСкидки(ЭтотОбъект, Отказ, ОповещениеПослеЗакрытия) Экспорт
	
	СкидкиНаценкиЗаполнениеКлиент.ПредложитьПользователюРассчитатьСкидки(ОповещениеПослеЗакрытия);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеВыполненияПереопределяемойКоманды.
//
Процедура ПослеВыполненияПереопределяемойКоманды(Форма, Команда, Результат) Экспорт
	
	Если Форма.ИмяФормы = "Документ.КоммерческоеПредложениеКлиенту.Форма.ФормаДокумента" Тогда
		
		КоммерческоеПредложениеКлиентуПослеВыполненияПереопределяемойКоманды(Форма, Команда, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеРасчетаСкидок.
//
Процедура ПослеРасчетаСкидок(Форма, РезультатРасчета) Экспорт
	
	Если РезультатРасчета.Сообщения.Количество() > 0 И РезультатРасчета.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", РезультатРасчета, Форма, Форма.УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеПодготовкиОткрытияИнформацииОСкидках.
//
Процедура ПослеПодготовкиОткрытияИнформацииОСкидках(Форма, Результат) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Сообщения")
		И Результат.Сообщения.Количество() > 0 
		И Результат.АвтоматическиОткрывать Тогда
		
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", Результат, Форма, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяКолонкиКоличество", "Количество");
	СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, Форма, ПараметрыОткрытия);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ОткрытьФормуСпискаЗаказаПоставщику.
//
Процедура ОткрытьФормуСпискаЗаказаПоставщику(Знач МассивСсылок) Экспорт

	ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ФиксированныеНастройки.Отбор,
				"Ссылка",
				МассивСсылок,
				ВидСравненияКомпоновкиДанных.ВСписке);
	
	ПараметрыОткрытия = Новый Структура("ФиксированныеНастройки, ТолькоПросмотр", ФиксированныеНастройки, Истина);
	
	ОткрытьФорму("Документ.ЗаказПоставщику.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КоммерческоеПредложениеКлиенту

Процедура КоммерческоеПредложениеКлиентуПриОткрытии(Форма, Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, Форма, "СканерШтрихкода");
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриЗакрытии(Форма)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуВнешнееСобытие(Форма, Источник, Событие, Данные)
	
	Если Не Форма.ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Источник", Источник);
	ОписаниеСобытия.Вставить("Событие" , Событие);
	ОписаниеСобытия.Вставить("Данные"  , Данные);
	
	Результат = МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства(ОписаниеСобытия); // МенеджерОборудованияКлиент.ПолучитьСобытиеОтУстройства
	
	Если Результат <> Неопределено
		И Результат.Источник = "ПодключаемоеОборудование"
		И Результат.ИмяСобытия = "ScanData"
		И Найти(Форма.ПоддерживаемыеТипыПодключаемогоОборудования, "СканерШтрихкода") > 0 Тогда
		
		Результат = МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Результат.Параметр);
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", Форма), Результат);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПередЗаписью(Форма, Отказ, ПараметрыЗаписи)
	
	Если Форма.НастройкиУчета.ИспользуютсяАвтоматическиеСкидкиВПродажах
		И Не Форма.Объект.СкидкиРассчитаны Тогда
		ПараметрыЗаписи.ТребуетсяВопросОРасчетеСкидок = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыЗаполнитьСтавкуНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект);  
	ПараметрыЗаполнитьСтавкуНДС.НалогообложениеНДС = Форма.НалогообложениеНДС;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",          ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу",       ТекущаяСтрока.ЕдиницаИзмерения);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",             Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",                          ПараметрыЗаполнитьСтавкуНДС);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",    СтруктураПереопределяемыеДействия(Форма));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	ТекущаяСтрокаСтруктура.Вставить("Упаковка", ТекущаяСтрока.ЕдиницаИзмерения);
	ТекущаяСтрокаСтруктура.Вставить("КоличествоУпаковок", ТекущаяСтрока.Количество);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);
	ТекущаяСтрока.ЕдиницаИзмерения    = ТекущаяСтрокаСтруктура.Упаковка;
	ТекущаяСтрока.КоличествоВременное = ТекущаяСтрокаСтруктура.Количество;
	ТекущаяСтрока.Количество          = ТекущаяСтрокаСтруктура.КоличествоУпаковок;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииХарактеристики(Форма, ТекущаяСтрока, ТекущийЭлемент, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый",  СтруктураПереопределяемыеДействия(Форма));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииЕдиницыИзмерения(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;

	Если ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураЗаполненияЦены = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект);
		СтруктураЗаполненияЦены.Вставить("ИмяКолонкиУпаковка", "Упаковка");
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	ИначеЕсли ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.КоличествоВременное);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));

	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	ТекущаяСтрокаСтруктура.Вставить("Упаковка", ТекущаяСтрока.ЕдиницаИзмерения);
	ТекущаяСтрокаСтруктура.Вставить("КоличествоУпаковок", ТекущаяСтрока.Количество);
	ТекущаяСтрокаСтруктура.Количество = ТекущаяСтрока.КоличествоВременное;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);

	ТекущаяСтрока.КоличествоВременное = ТекущаяСтрокаСтруктура.Количество;
	ТекущаяСтрока.Количество = ТекущаяСтрокаСтруктура.КоличествоУпаковок;
	ТекущаяСтрока.ЕдиницаИзмерения = ТекущаяСтрокаСтруктура.Упаковка;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма)
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииКоличества(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	ТекущаяСтрокаСтруктура.Вставить("Упаковка", ТекущаяСтрока.ЕдиницаИзмерения);
	ТекущаяСтрокаСтруктура.Вставить("КоличествоУпаковок", ТекущаяСтрока.Количество);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);

	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);

	ТекущаяСтрока.КоличествоВременное = ТекущаяСтрокаСтруктура.Количество;
	ТекущаяСтрока.Количество = ТекущаяСтрокаСтруктура.КоличествоУпаковок;

	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииВидаЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий);
	ТекущаяСтрокаСтруктура.Вставить("Упаковка", ТекущаяСтрока.ЕдиницаИзмерения);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, Неопределено);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТекущаяСтрокаСтруктура);

	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииЦены(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи",                        ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииСтавкаНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Истина, "Количество"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииСумма(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект = Форма.Объект;
	
	ЭтоПередачаТоваров = Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию");
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, ЭтоПередачаТоваров);
	СтруктураПересчетаЦены.Вставить("ИмяКоличества", "Количество");
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                   СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                  СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииСуммыНДС(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииПроцентаРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов)
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки",                "Количество");
	СтруктураДействий.Вставить("ПересчитатьСумму",                            "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать, ИмяКоличества", Ложь,   "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                         СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                        СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииСуммыРучнойСкидки(Форма, ТекущаяСтрока, ТребуетсяСерверныйВызов) 
	
	Объект                  = Форма.Объект;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки",               "Количество");
	СтруктураДействий.Вставить("ПересчитатьСумму",                             "Количество");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",          Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки, ИмяКоличества",
	                                                                                           Ложь, Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",  Новый Структура("Очищать, ИмяКоличества", Ложь, "Количество"));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",                          СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",                         СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ТабличнаяЧастьВыбор.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения.
//  Элемент              - ТаблицаФормы.
//  ВыбраннаяСтрока      - Число.
//  Поле                 - ПолеФормы.
//  СтандартнаяОбработка - Булево.
//  ТребуетсяСерверныйВызов - Булево.
//
Процедура КоммерческоеПредложениеКлиентуТоварыВыбор(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ТребуетсяСерверныйВызов)
	
	Объект = Форма.Объект; // ДокументОбъект.КоммерческоеПредложениеКлиенту
	
	Если Элемент.Имя = "Товары" Тогда
	
		Если ЗначениеЗаполнено(Форма.Элементы.Товары.ТекущиеДанные.НоменклатураНабора) Тогда
			
			Если Поле.Имя <> "ТоварыКомментарийДляПокупателя"
				Или Поле.Имя <> "ТоварыКомментарийВнутренний" Тогда
			
				ТребуетсяСерверныйВызов = Истина;
				
			КонецЕсли;
			
		Иначе
			
			Если Поле.Имя = "ТоварыЦена" Тогда
			
				Если ЗначениеЗаполнено(Форма.Элементы.Товары.ТекущиеДанные.НоменклатураНабора) Тогда
					ТребуетсяСерверныйВызов = Истина;
					Возврат;
				КонецЕсли;
				
				ТекущиеДанные = Форма.Элементы.Товары.ТекущиеДанные;
				Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
					ОчиститьСообщения();
					ОбщегоНазначенияКлиент.СообщитьПользователю(
						НСтр("ru = 'Для редактирования цены очистите вид цены'"),
						Объект.Ссылка,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииПартнера(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииНалогообложенияНДС(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииЦенаВключаетНДС(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииПриИзмененииВалюты(Форма, ТребуетсяСерверныйВызов)
	
	Объект = Форма.Объект;
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, Форма.ВалютаДокумента) Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(Форма.ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	Если Не ТребуетсяСерверныйВызов Тогда
		Форма.ВалютаДокумента = Объект.Валюта;
	КонецЕсли;
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);

КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииОрганизации(Форма, ТребуетсяСерверныйВызов)
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииХозяйственнойОперации(Форма, ТребуетсяСерверныйВызов);
	
	ТребуетсяСерверныйВызов = Истина;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуПриИзмененииМенеджера(Форма, ТребуетсяСерверныйВызов)

	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);

КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении)
	
	Объект = Форма.Объект; // ДокументОбъект
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта");
		Возврат;
	КонецЕсли;
	
	Если Форма.НастройкиУчета.ИспользуютсяВидыЦен Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
		
		ОповещениеПослеВыбораЦеныДляПодбора = Новый ОписаниеОповещения("ПослеВыбораЦенДляПодбора", ЭтотОбъект, ДополнительныеПараметры);
		
		ВидЦеныПрайсЛист = ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист();
		Если ВидЦеныПрайсЛист <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОповещениеПослеВыбораЦеныДляПодбора, ВидЦеныПрайсЛист);
			Возврат;
		КонецЕсли;
		
		СтруктураОтбор = Новый Структура;
		СтруктураОтбор.Вставить("ЦенаВключаетНДС",        Объект.ЦенаВключаетНДС);
		СтруктураОтбор.Вставить("ИспользоватьПриПродаже", Истина);
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбор);
		ПараметрыОткрытияФормы.Вставить("Заголовок", НСтр("ru = 'Вид цены для отображения в подборе'"));
		
		ОткрытьФорму("Справочник.ВидыЦен.ФормаВыбора",
		             ПараметрыОткрытияФормы,,,,,
		             ОповещениеПослеВыбораЦеныДляПодбора);
		
	Иначе
		
		КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(Форма, ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"), ОповещениеПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеВыбораЦенДляПодбора(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
	Иначе
		ВидЦены = Результат;
	КонецЕсли;
	
	КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(ДополнительныеПараметры.Форма, 
	                                                                         ВидЦены, 
	                                                                         ДополнительныеПараметры.ОповещениеПриЗавершении);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОткрытьФормуПодбораНоменклатурыПродолжение(Форма, ВидЦены, ОповещениеПриЗавершении) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'коммерческое предложение клиенту'"));
	КонецЕсли;
	
	НалогообложениеНДС              = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	МассивОтборовПоТипуНоменклатуры = КоммерческиеПредложенияДокументыКлиентСерверУТ.МассивОтборовПоТипуНоменклатуры(Объект.ХозяйственнаяОперация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",                         Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС",                     Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС",                  НалогообложениеНДС);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",             МассивОтборовПоТипуНоменклатуры);
	ПараметрыФормы.Вставить("СкрыватьРучныеСкидки",                Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ВидыОперацийКоммерческихПредложений.ПриемНаКомиссию"));
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                Истина);
	ПараметрыФормы.Вставить("Валюта",                              Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок",                           ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                            Объект.Ссылка);
	ПараметрыФормы.Вставить("ВидЦены",                             ВидЦены);
	ПараметрыФормы.Вставить("РежимПодбораБезСоглашенийСКлиентами", Истина);
	
	Если Форма.ПоЗапросу Тогда
		
		ПараметрыФормы.Вставить("НеРазбиватьНаборыПоКомплектующим",Истина);
		
		ВариантыПредставленияНабораВПечатныхФормах = Новый Массив;
		ВариантыПредставленияНабораВПечатныхФормах.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка"));
		ВариантыПредставленияНабораВПечатныхФормах.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор"));
		
		ПараметрыФормы.Вставить("ОтборПоВариантуПредставленияНабораВПечатныхФормах", ВариантыПредставленияНабораВПечатныхФормах);
		
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, Форма, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОбработкаВыбораПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора)
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОбработкаВыбораЗагрузкаИзВнешнихФайлов(Форма, ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора);
	
	СкидкиНаценкиЗаполнениеКлиент.СброситьФлагСкидкиРассчитаны(Форма);
	ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ЗагрузитьИзВнешнегоФайлаЗавершение", Форма), ВыбранноеЗначение);
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОбработкаОповещенияПодборНоменклатуры(Форма, ОповещениеПриЗавершении, ИмяСобытия, Параметр, Источник)
	
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ВыполнитьОбработкуОповещения(Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", Форма), ДанныеШтрихкодов);
		
	ИначеЕсли ИмяСобытия = "Закрытие_РедактированиеКомплекта"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		Параметр.Вставить("РедактированиеНабора", Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Параметр);
		
	ИначеЕсли ИмяСобытия = "РедактироватьНабор"
		И Параметр.ФормаВладелец = Форма.УникальныйИдентификатор Тогда
		
		Параметр.Вставить("РедактироватьНабор", Истина);
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентПослеОповещенияПодбораНоменклатуры(Форма, Результат, ДополнительныеПараметры, ТребуетсяСерверныйВызов)
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		Если НаборыКлиент.ДействиеРедактироватьНабор(Результат) Тогда
			НаборыКлиент.ПриУдаленииКомплектующих(Форма, "Товары", ДополнительныеПараметры)
		ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Результат) Тогда
			ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.Свойство("АдресТоваровВХранилище") Тогда
			ТребуетсяСерверныйВызов = Истина;
		ИначеЕсли Результат.Свойство("РедактированиеНабора") Тогда
			ТребуетсяСерверныйВызов = Истина;
		ИначеЕсли Результат.Свойство("РедактироватьНабор") Тогда
			ТребуетсяСерверныйВызов = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентПослеОбработкиОповещенияПодбораНоменклатуры(Форма, ВыбранноеЗначение, РезультатОбработки, ДополнительныеПараметры)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("РедактироватьНабор") Тогда
		
			Если РезультатОбработки <> Неопределено Тогда
				
				ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", РезультатОбработки, Форма, Форма.УникальныйИдентификатор);
				
			КонецЕсли;
			
		ИначеЕсли ВыбранноеЗначение.Свойство("РедактированиеНабора") Тогда
			
			Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ВыбранноеЗначение.Свойство("АдресТоваровВХранилище") Тогда
			
			Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
			Форма.Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка")
		И ВыбранноеЗначение = "УдалитьВесьНабор" Тогда
		
		Форма.Подключаемый_РассчитатьИтоговыеПоказателиФормы();
		Форма.Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоммерческоеПредложениеКлиентуОткрытьФормуЗагрузкиИзВнешнихФайлов(Форма, ОповещениеПриЗавершении)
	
	Объект = Форма.Объект;
	
	НалогообложениеНДС              = КоммерческиеПредложенияДокументыКлиентСерверУТ.НалогообложениеНДСПоНалогообложениюКоммерческихПредложений(Объект.Налогообложение);
	МассивОтборовПоТипуНоменклатуры = КоммерческиеПредложенияДокументыКлиентСерверУТ.МассивОтборовПоТипуНоменклатуры(Объект.ХозяйственнаяОперация);
	
	ПараметрыФормы = РаботаСТабличнымиЧастямиКлиент.ПараметрыЗагрузкиНоменклатуры();
	
	ПараметрыФормы.ЗагружатьЦены      = Истина;
	ПараметрыФормы.ЦенаВключаетНДС    = Объект.ЦенаВключаетНДС;
	ПараметрыФормы.Организация        = Объект.Организация;
	ПараметрыФормы.НалогообложениеНДС = НалогообложениеНДС;
	ПараметрыФормы.ДатаЗаполнения     = Объект.Дата;
	ПараметрыФормы.ПараметрыОтбора.Вставить("ТипНоменклатуры", Новый ФиксированныйМассив(МассивОтборовПоТипуНоменклатуры));
	
	РаботаСТабличнымиЧастямиКлиент.ПоказатьФормуЗагрузкиНоменклатуры(ПараметрыФормы, ОповещениеПриЗавершении);
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПриВыполненииПереопределяемойКоманды.
//
// Параметры:
//  Форма                   - ФормаКлиентскогоПриложения.
//  Команда                 - КомандаФормы.
//  ТребуетсяСерверныйВызов - Булево.
//
Процедура КоммерческоеПредложениеКлиентуПриВыполненииПереопределяемойКоманды(Форма, Команда, ТребуетсяСерверныйВызов)
	
	Элементы = Форма.Элементы;
	
	Если Команда.Имя = "ПоказатьСообщения" Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		
	ИначеЕсли Команда.Имя = "ПоказатьНаборы" Тогда
		
		Элементы.ТоварыГруппаНаборы.Видимость = Не Элементы.ТоварыГруппаНаборы.Видимость;
		Элементы.ПоказатьНаборы.Пометка       = Не Элементы.ПоказатьНаборы.Пометка;
		
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		
		ТребуетсяСерверныйВызов = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// См. КоммерческиеПредложенияДокументыКлиентПереопределяемый.ПослеВыполненияПереопределяемойКоманды.
//
// Параметры:
//  Форма      - ФормаКлиентскогоПриложения.
//  Команда    - КомандаФормы.
//  Результат  - Произвольный.
//
Процедура КоммерческоеПредложениеКлиентуПослеВыполненияПереопределяемойКоманды(Форма, Команда, Результат)

	Если Команда.Имя = "ПоказатьСообщения" Тогда
		
		СкидкиНаценкиЗаполнениеКлиент.ОткрытьФормуСообщений(Результат, Форма);
		
	ИначеЕсли Команда.Имя = "СоставНабора" Тогда
		
		Если Результат <> Неопределено Тогда
			
			ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", Результат, Форма, Форма.УникальныйИдентификатор);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция СтруктураПереопределяемыеДействия(Форма) Экспорт
	
	СтруктураПереопределяемыеДействия = Новый Структура;
	СтруктураПереопределяемыеДействия.Вставить("ИмяФормы",          Форма.ИмяФормы);
	СтруктураПереопределяемыеДействия.Вставить("ИмяТабличнойЧасти", "Товары");
	
	Возврат СтруктураПереопределяемыеДействия;
	
КонецФункции

Процедура ВыбратьИсточникУсловийОплаты(Форма)
	
	Объект = Форма.Объект;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	
	ОписаниеОВыбореУсловий = Новый ОписаниеОповещения("ПослеВыбораУсловийОплаты", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Форма.ИспользоватьСоглашенияСКлиентами Тогда
		
		Отказ = Ложь;
		
		Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указана валюта. Цены не могут быть заполнены.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Валюта", "Объект", Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Клиент) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указан клиент. Цены не могут быть заполнены.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Клиент", "Объект", Отказ);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указана операция. Цены не могут быть заполнены.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ХозяйственнаяОперация", "Объект", Отказ);
			
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДатаДокумента",         Объект.Дата);
		ПараметрыОткрытия.Вставить("Партнер",               Объект.Клиент);
		ПараметрыОткрытия.Вставить("ХозяйственнаяОперация", 
		КоммерческиеПредложенияДокументыКлиентСерверУТ.ХозяйственнаяОперацияДокументаКоммерческоеПредложениеКлиенту(Объект.ХозяйственнаяОперация));
		ПараметрыОткрытия.Вставить("Организация",           Объект.Организация);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		
		ПараметрыОткрытия.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора", ПараметрыОткрытия, Форма,,,,
		              ОписаниеОВыбореУсловий, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Форма.ИспользоватьГрафикиОплаты Тогда
		
		ОткрытьФорму("Справочник.ГрафикиОплаты.ФормаВыбора", ПараметрыОткрытия, Форма,,,,
		              ОписаниеОВыбореУсловий, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОтветНаВопросОбПерезаполненииУсловийОплаты(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыбратьИсточникУсловийОплаты(ДополнительныеПараметры.Форма);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПослеВыбораУсловийОплаты(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		
		Форма.Объект.УсловияОплатыТекст = КоммерческиеПредложенияДокументыУТВызовСервера.УсловияОплатыТекстом(Результат);
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий)
	Перем СтруктураПараметровДействия;

	СтруктураПолейТЧ = Новый Структура;

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьСтатьюАналитикуРасходов") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоВременное", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("НомерГТД");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоПоРНПТ");
		СтруктураПолейТЧ.Вставить("ВедетсяУчетПоРНПТ");
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.МестоХраненияВТабличнойЧасти Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИмяПоляМестоХранения);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", СтруктураПараметровДействия)
	   И СтруктураПараметровДействия <> Неопределено 
	   И СтруктураПараметровДействия.Свойство("НужноОкруглять")
	   И ТекущаяСтрока.Свойство("НужноОкруглять") Тогда
		СтруктураПолейТЧ.Вставить("НужноОкруглять");	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницВЕТИС", СтруктураПараметровДействия)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницПоВЕТИС", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВЕТИС");
		СтруктураПолейТЧ.Вставить("Количество" + СтруктураПараметровДействия.Суффикс + "ВЕТИС", 0);
		СтруктураПолейТЧ.Вставить("Количество" + СтруктураПараметровДействия.Суффикс, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("GTIN");
		
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс    , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоФакт", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"		  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Количество"+Суффикс, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяКолонкиУпаковка") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяКолонкиУпаковка);
		Иначе
			СтруктураПолейТЧ.Вставить("Упаковка");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		 ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Склад");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакМаркируемаяАлкогольнаяПродукция", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовОбязательна", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовОбязательна");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАналитикаРасходовЗаказРеализация", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизита") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизита"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходовЗаказРеализация");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
	
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда

		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовПоУмолчанию", СтруктураПараметровДействия) Тогда
		
		Если Не СтруктураПараметровДействия = Неопределено И СтруктураПараметровДействия.Свойство("ИмяРеквизитаСтатьиРасходов") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия["ИмяРеквизитаСтатьиРасходов"]);
		Иначе
			СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		КонецЕсли;
		СтруктураПолейТЧ.Вставить("АналитикаРасходов");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
		СтруктураПолейТЧ.Вставить("Склад");
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечение") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		
		Если СтруктураДействий.ПроверитьЗаполнитьОбеспечение.Свойство("ПроверитьЗаполнитьНазначениеОтправителя") Тогда	
			СтруктураПолейТЧ.Вставить("НазначениеОтправителя")
		Иначе
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
	 ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	

	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьИндексАкцизнойМарки", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
		СтруктураПолейТЧ.Вставить("ИндексАкцизнойМарки");
		СтруктураПолейТЧ.Вставить("КоличествоАкцизныхМарок");
		СтруктураПолейТЧ.Вставить("Количество");
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Если СтруктураПараметровДействия.Свойство("ИмяКолонкиКоличество") Тогда
				СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ИмяКолонкиКоличество);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруЕГАИС", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("НоменклатураЕГАИС");
		СтруктураПолейТЧ.Вставить("МаркируемаяПродукция");
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеАлкогольнаяПродукция");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьАлкогольнуюПродукцию", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("АлкогольнаяПродукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеАлкогольнаяПродукция");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродукциюВЕТИС", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Продукция");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("НоменклатураДляВыбора");
		СтруктураПолейТЧ.Вставить("СопоставлениеТекст");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВЕТИС");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
		
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				ИменаПолей = ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство(ИменаПолей.Серия) Тогда
					СтруктураПолейТЧ.Вставить(ИменаПолей.Серия);
					СтруктураПолейТЧ.Вставить(ИменаПолей.Номенклатура);
					СтруктураПолейТЧ.Вставить(ИменаПолей.Характеристика);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество, 0);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Назначение") Тогда
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДС");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДС");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
		СтруктураПолейТЧ.Вставить("ПоВинеСтороннейКомпании");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		СтруктураПолейТЧ.Вставить("Штрихкод");
		СтруктураПолейТЧ.Вставить("ШтрихкодНеОпределен");
		СтруктураПолейТЧ.Вставить("ЭтоУпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("УпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоличествоЗаполненныхПодчиненныхПозиций");
		СтруктураПолейТЧ.Вставить("ТребуетсяОбработка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("НазначениеОтправителя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакиКатегорииЭксплуатации") Тогда
		СтруктураПолейТЧ.Вставить("КатегорияЭксплуатации");
		СтруктураПолейТЧ.Вставить("ИнвентарныйУчет");
		СтруктураПолейТЧ.Вставить("СпособПогашенияСтоимостиБУ");
		СтруктураПолейТЧ.Вставить("СтатьяРасходов");
		СтруктураПолейТЧ.Вставить("СрокЭксплуатации");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия + "ДвиженияПоСкладскимРегистрам");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("ДатаОтгрузкиОбязательна");
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Отменено");
		
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуУслугиЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги"       , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСуммуЗаказДавальца),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСуммуЗаказДавальца), 0);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги",                0);
		СтруктураПолейТЧ.Вставить("СуммаСобственныхМатериалов", 0);
		СтруктураПолейТЧ.Вставить("Сумма",                      0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации") Тогда
		
		СтруктураПолейТЧ.Вставить("ВариантОтражения");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД") Тогда
		СтруктураПолейТЧ.Вставить("СтранаПроисхождения");
	КонецЕсли;
	
	
	

	
	
	ОбработкаТабличнойЧастиКлиентЛокализация.ПолучитьТекущуюСтрокуСтруктурой(СтруктураДействий, СтруктураПолейТЧ);

	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции

Функция ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус)
	
	СтруктураВозврата = Новый Структура("Серия, Номенклатура, Характеристика");
	
	Если ИмяПоляСтатус = "СтатусУказанияСерий" Тогда
		СтруктураВозврата.Серия = "Серия";
		СтруктураВозврата.Номенклатура = "Номенклатура"; 
		СтруктураВозврата.Характеристика = "Характеристика";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийОтправитель" Тогда
		СтруктураВозврата.Серия = "СерияОтправитель";
		СтруктураВозврата.Номенклатура = "НоменклатураОтправитель";
		СтруктураВозврата.Характеристика = "ХарактеристикаОтправитель";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийПолучатель" Тогда
		СтруктураВозврата.Серия = "СерияПолучатель";
		СтруктураВозврата.Номенклатура = "НоменклатураПолучатель";
		СтруктураВозврата.Характеристика = "ХарактеристикаПолучатель";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийОприходование" Тогда
		СтруктураВозврата.Серия = "СерияОприходование";
		СтруктураВозврата.Номенклатура = "НоменклатураОприходование";
		СтруктураВозврата.Характеристика = "ХарактеристикаОприходование";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийНаСкладах" Тогда
		СтруктураВозврата.Серия = "СерияНаСкладах";
		СтруктураВозврата.Номенклатура = "НоменклатураНаСкладах";
		СтруктураВозврата.Характеристика = "ХарактеристикаНаСкладах";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийТоварыУПартнеров" Тогда
		СтруктураВозврата.Серия = "СерияТоварыУПартнеров";
		СтруктураВозврата.Номенклатура = "НоменклатураТоварыУПартнеров";
		СтруктураВозврата.Характеристика = "ХарактеристикаТоварыУПартнеров";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийПереданныхТоваров" Тогда
		СтруктураВозврата.Серия = "СерияПереданныхТоваров";
		СтруктураВозврата.Номенклатура = "НоменклатураПереданныхТоваров";
		СтруктураВозврата.Характеристика = "ХарактеристикаПереданныхТоваров";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийСписываемаяСерия" Тогда
		СтруктураВозврата.Серия = "СерияСписываемаяСерия";
		СтруктураВозврата.Номенклатура = "НоменклатураСписываемаяСерия";
		СтруктураВозврата.Характеристика = "ХарактеристикаСписываемаяСерия";
	КонецЕсли;
	
	Возврат СтруктураВозврата
	
КонецФункции

#КонецОбласти
