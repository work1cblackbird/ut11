#Область СлужебныйПрограммныйИнтерфейс

// Заполняет реквизит 'ЕдиницаИзмерения' справочника 'ЕдиницыИзмеренияВЕТИС' по ОКЕИ.
//
// Параметры:
//  СправочникОбъект - СправочникОбъект.ЕдиницыИзмеренияВЕТИС - Единица измерения ВЕТИС.
Процедура ЗаполнитьЕдиницуИзмеренияПоКлассификаторам(СправочникОбъект) Экспорт
	
	//++ НЕ ГОСИС
	Если СправочникОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКлассификатораВЕТИС = ИнтеграцияВЕТИСПовтИсп.ДанныеСтрокиКлассификатораЕдиницИзмеренияВЕТИС(СправочникОбъект.Идентификатор);
	
	Если СтрокаКлассификатораВЕТИС <> Неопределено
		И ЗначениеЗаполнено(СтрокаКлассификатораВЕТИС.КодОКЕИ) Тогда
		
		КодОКЕИ = СтрокаКлассификатораВЕТИС.КодОКЕИ;
		ЕдиницаИзмерения = ИнтеграцияВЕТИСУТ.ЕдиницаИзмеренияОКЕИ(КодОКЕИ);
		
		Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			СправочникОбъект.ЕдиницаИзмерения = ЕдиницаИзмерения;
		Иначе
			СправочникОбъект.ЕдиницаИзмерения = ИнтеграцияВЕТИСУТ.СоздатьЕдиницуИзмеренияПоКлассификаторуОКЕИ(КодОКЕИ);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область ОбработчикиСобытийДокументов

// Вызывается при вводе документа на основании, при выполнении метода Заполнить или при интерактивном вводе нового.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - заполняемый документ,
//  ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения,
//  ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
Процедура ОбработкаЗаполненияДокумента(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
	
	ТипОбъекта = ТипЗнч(ДокументОбъект);
	Если ТипОбъекта = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
		ИнтеграцияВЕТИСУТ.ОбработкаЗаполненияДокументаИнвентаризацияПродукцииВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		ИнтеграцияВЕТИСУТ.ОбработкаЗаполненияДокументаИсходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		ИнтеграцияВЕТИСУТ.ОбработкаЗаполненияДокументаВходящаяТранспортнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипОбъекта = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		ИнтеграцияВЕТИСУТ.ОбработкаЗаполненияДокументаПроизводственнаяОперацияВЕТИС(ДокументОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
	Если ТипОбъекта = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС")
		Или ТипОбъекта = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС")
		Или ТипОбъекта = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС")Тогда
		Если ИнтеграцияИСУТ.СерииУказываютсяПоFEFO(ДанныеЗаполнения) Тогда
			Документы[ДокументОбъект.Метаданные().Имя].ЗаполнитьЗаписиСкладскогоЖурнала(ДокументОбъект);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Вызывается расширением формы при необходимости проверки заполнения реквизитов при записи или при проведении документа в форме,
// а также при выполнении метода ПроверитьЗаполнение.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проверяемый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  ПроверяемыеРеквизиты - Массив - массив путей к реквизитам, для которых будет выполнена проверка заполнения,
//  МассивНепроверяемыхРеквизитов - Массив - массив путей к реквизитам, для которых не будет выполнена проверка заполнения.
Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	//++ НЕ ГОСИС
	Если ТипЗнч(ДокументОбъект) = Тип("ФормаКлиентскогоПриложения") И ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.Вставить("ПутьКДаннымТаблицыФормы", "");
		ПараметрыПроверки.Вставить("ИмяТЧ", "ТоварыУточнение");
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыУказанияСерий = ДокументОбъект.ПараметрыУказанияСерий;
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ВыдаватьСообщения = ДокументОбъект.Товары.Количество() > 1;
		ПараметрыПроверки.ОтборПроверяемыхСтрок.Вставить("ЕстьУточнения", Ложь);
		ХарактеристикиНеЗаполнены = Ложь;
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, ХарактеристикиНеЗаполнены, ПараметрыПроверки);
		Если ХарактеристикиНеЗаполнены Тогда
			Отказ = Истина;
			Если ДокументОбъект.Товары.Количество() = 1 Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнена характеристика.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ПредставлениеХарактеристика",, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ВходящаяТранспортнаяОперацияВЕТИС);
		ПараметрыУказанияСерий.Товары.ОтборПроверяемыхСтрок = Новый Структура("ЕстьУточнения", Ложь);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий.Товары, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗапросСкладскогоЖурналаВЕТИС") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ЗапросСкладскогоЖурналаВЕТИС);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИнвентаризацияПродукцииВЕТИС") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ИнвентаризацияПродукцииВЕТИС);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОбъединениеЗаписейСкладскогоЖурналаВЕТИС") Тогда
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПроизводственнаяОперацияВЕТИС") Тогда
		
		ИнтеграцияВЕТИСУТ.ПроверитьЗаполнениеИдентификатораПартии(ДокументОбъект, Отказ, МассивНепроверяемыхРеквизитов);
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ);
		
		ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
		ПараметрыПроверки.ИмяТЧ = "Сырье";
		
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ДокументОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ПроизводственнаяОперацияВЕТИС);
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий.Товары, Отказ, МассивНепроверяемыхРеквизитов);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий.Сырье, Отказ, МассивНепроверяемыхРеквизитов);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Вызывается при проведении документа. Выполняется в транзакции записи.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - проводимый документ,
//  Отказ - Булево - признак отказа от проведения документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения.
Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Создает временную таблицу "ДокументыИнформационнойБазы", для дальнейшего использования в методе
// ЗаполнениеДокументовВЕТИС.ДокументОснованиеПоДаннымСвязанныхДокументов.
// Содержит колонки:
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовВЕТИС - тип документа ВЕТИС, служит для определения типа связи со связанными документами;
// * ПоказательУпорядочивания - ПроизвольныйТип - при определении документа основания, служит для определения приоритета найденных документов;
// * Документ - ДокументСсылка - документ, который будет определяться как документ-основание;
// * Дата - Дата - дата входящего документа, по которой будут сопоставляться данные документов ИБ и данные связанных документов;
// * Номер - Строка - номер входящего документа, по которому будут сопоставляться данные документов ИБ и данные связанных документов;
//Параметры:
//  ВременныеТаблицы - МенеджерВременныхТаблиц - менеджер временных таблиц запроса, в который будет добавлена создаваемая временная таблица.
Процедура ЗаполнитьВременнуюТаблицуСвязанныхДокументовИнформационнойБазы(ВременныеТаблицы) Экспорт
	
	//++ НЕ ГОСИС
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	
	МассивТекстовЗапросаДокументыПоЗаказу = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Заказ,
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата
	|ПОМЕСТИТЬ ДокументыПоЗаказу
	|ГДЕ
	|	ЛОЖЬ";
	
	МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
	
	МассивТекстовЗапросаДокументыИнформационнойБазы = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.ПустаяСсылка) КАК ТипДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ПоказательУпорядочивания,
	|	НЕОПРЕДЕЛЕНО КАК Документ,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
	|	"""" КАК Номер
	|ПОМЕСТИТЬ ДокументыИнформационнойБазы
	|ГДЕ
	|	ЛОЖЬ";
	МассивТекстовЗапросаДокументыИнформационнойБазы.Добавить(ТекстЗапроса);
	
	
	АнализируемыеТипыСсылок = Новый Массив;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровОтКлиента) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента) Тогда
		АнализируемыеТипыСсылок.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.РеестрДокументов) И АнализируемыеТипыСсылок.Количество() Тогда
			
		Если ПравоДоступа("Чтение", Метаданные.Документы.ПриобретениеТоваровУслуг) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументыПоЗаказу.ЗаказПоставщику КАК Заказ,
			|	ДокументыПоЗаказу.Ссылка КАК Ссылка,
			|	ДокументыПоЗаказу.Дата КАК Дата
			|ИЗ
			|	Документ.ПриобретениеТоваровУслуг КАК ДокументыПоЗаказу
			|ГДЕ
			|	ДокументыПоЗаказу.Проведен";
			
			МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
			
		КонецЕсли;
		
		Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДокументыПоЗаказу.ЗаказКлиента КАК Заказ,
			|	ДокументыПоЗаказу.Ссылка КАК Ссылка,
			|	ДокументыПоЗаказу.Дата КАК Дата
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК ДокументыПоЗаказу
			|ГДЕ
			|	ДокументыПоЗаказу.Проведен";
			
			МассивТекстовЗапросаДокументыПоЗаказу.Добавить(ТекстЗапроса);
			
		КонецЕсли;
				
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (ТИП(Документ.ЗаказПоставщику), ТИП(Документ.ЗаказКлиента))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.Заказ)
		|		КОГДА ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (ТИП(Документ.ПриобретениеТоваровУслуг), ТИП(Документ.ВозвратТоваровОтКлиента), ТИП(Документ.РеализацияТоваровУслуг))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.Торг12)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДокументовВЕТИС.ПустаяСсылка)
		|	КОНЕЦ КАК ТипДокумента,
		|	ЕСТЬNULL(ДокументыПоЗаказу.Дата, РеестрДокументов.ДатаДокументаИБ) КАК ПоказательУпорядочивания,
		|	ЕСТЬNULL(ДокументыПоЗаказу.Ссылка, РеестрДокументов.Ссылка) КАК Документ,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.ДатаПервичногоДокумента = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА РеестрДокументов.ДатаДокументаИБ
		|		ИНАЧЕ РеестрДокументов.ДатаПервичногоДокумента
		|	КОНЕЦ КАК Дата,
		|	ВЫБОР
		|		КОГДА РеестрДокументов.НомерПервичногоДокумента = """"
		|			ТОГДА РеестрДокументов.НомерДокументаИБ
		|		ИНАЧЕ РеестрДокументов.НомерПервичногоДокумента
		|	КОНЕЦ КАК Номер
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыПоЗаказу КАК ДокументыПоЗаказу
		|		ПО РеестрДокументов.Ссылка = ДокументыПоЗаказу.Заказ
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка) В (&АнализируемыеТипыСсылок)";
		
		МассивТекстовЗапросаДокументыИнформационнойБазы.Добавить(ТекстЗапроса);	
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АнализируемыеТипыСсылок", АнализируемыеТипыСсылок);
	
	ТекстЗапросаДокументыПоЗаказу = СтрСоединить(МассивТекстовЗапросаДокументыПоЗаказу,
		ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстЗапросаДокументыПоЗаказу = ТекстЗапросаДокументыПоЗаказу + Символы.ПС +
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ";
	
	ТекстЗапросаДокументыИнформационнойБазы = СтрСоединить(МассивТекстовЗапросаДокументыИнформационнойБазы,
		ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстЗапросаДокументыИнформационнойБазы = ТекстЗапросаДокументыИнформационнойБазы + Символы.ПС +
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипДокумента,
	|	Дата,
	|	Номер";
	
	
	МассивТекстовЗапроса = Новый Массив;
	МассивТекстовЗапроса.Добавить(ТекстЗапросаДокументыПоЗаказу);
	МассивТекстовЗапроса.Добавить(ТекстЗапросаДокументыИнформационнойБазы);
	МассивТекстовЗапроса.Добавить("УНИЧТОЖИТЬ ДокументыПоЗаказу");
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Выполнить();
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ОрганизацииИКонтрагенты

// Определяет заданы ли настройки подключения к сервису интернет поддержки пользователей.
//
Процедура НастройкиПодключенияКСервисуИППЗаданы(НастройкиЗаданы) Экспорт

	//++ НЕ ГОСИС
	НастройкиЗаданы = ИнтернетПоддержкаПользователей.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет параметры поиска хозяйствующего субъекта по элементу справочника конфигурации
//
// Параметры:
//  ДанныеКонтрагента - (См. ИнтеграцияВЕТИС.ДанныеКонтрагентаДляПоискаХозяйствующегоСубъекта)
//  Контрагент        - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на контрагента информационной базы
Процедура ЗаполнитьДанныеКонтрагентаДляПоискаХозяйствующегоСубъекта(ДанныеКонтрагента, Контрагент) Экспорт
	
	//++ НЕ ГОСИС
	Запрос = Новый Запрос;
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Контрагенты.ИНН          КАК ИНН,
		|	Контрагенты.КПП          КАК КПП,
		|	""""                     КАК ОГРН,
		|	Контрагенты.Наименование КАК Наименование,
		|	""""                     КАК НаименованиеПолное,
		|	ВЫБОР
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ИЛИ  Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо)
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель)
		|		КОГДА Контрагенты.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо)
		|	КОНЕЦ КАК Тип
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Ссылка = &Контрагент";
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Организации.ИНН          КАК ИНН,
		|	Организации.КПП          КАК КПП,
		|	""""                     КАК ОГРН,
		|	Организации.Наименование КАК Наименование,
		|	""""                     КАК НаименованиеПолное,
		|	ВЫБОР
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
		|			ИЛИ  Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ЮридическоеЛицо)
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ИндивидуальныйПредприниматель)
		|		КОГДА Организации.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыХозяйствующихСубъектовВЕТИС.ФизическоеЛицо)
		|	КОНЕЦ КАК Тип
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Контрагент";
	КонецЕсли;
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеКонтрагента, Выборка);
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ФизическиеЛица

// Заполняет значения реквизитов из справочника физических лиц используемые для создания пользователя ВетИС
//
// Параметры:
//  ДанныеФизЛица  - (См. ИнтеграцияВЕТИС.ДанныеФизическогоЛица)
//  ФизическоеЛицо - ОпределяемыйТип.ФизическоеЛицо - ссылка на физическое лицо информационной базы
Процедура ЗаполнитьДанныеФизическогоЛица(ДанныеФизЛица, ФизическоеЛицо) Экспорт
	
	//++ НЕ ГОСИС
	ДанныеФизЛица.ГражданствоСтрана = Справочники.СтраныМира.Россия;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ФИОФизическихЛицСрезПоследних.Фамилия
	|		КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя
	|		КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|		КАК Отчество,
	|	ФизическиеЛица.ДатаРождения                      КАК ДатаРождения,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ДокументВид,
	|	ДокументыФизическихЛицСрезПоследних.Серия        КАК ДокументСерия,
	|	ДокументыФизическихЛицСрезПоследних.Номер        КАК ДокументНомер
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|		ПО ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|		ПО ДокументыФизическихЛицСрезПоследних.Физлицо = ФизическиеЛица.Ссылка
	|		 И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизическоеЛицо
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеФизЛица, Выборка);
	КонецЕсли;
	
	Если ДанныеФизЛица.ДокументВид = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
		ДанныеФизЛица.ДокументТип = Перечисления.ТипыДокументовВЕТИС.ПаспортГражданинаРФ;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Процедура вызывается при изменении статуса обработки документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - ссылка на документ,
//  ПредыдущийСтатус - ПеречислениеСсылка - предыдущий статус обработки,
//  НовыйСтатус - ПеречислениеСсылка - новый статус обработки.
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	// Оформление передачи товаров между организациями - автогашение полученных ВСД
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")
		И ПредыдущийСтатус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Обрабатывается
		И НовыйСтатус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформлены Тогда
		Основание = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
			
			ЗапросВСД = Новый Запрос;
			ЗапросВСД.УстановитьПараметр("Ссылка", ДокументСсылка);
			ЗапросВСД.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
			|	Товары.ВетеринарноСопроводительныйДокумент КАК Ссылка
			|ИЗ
			|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка";
			
			ДокументПогашенияВСД = Документы.ВходящаяТранспортнаяОперацияВЕТИС.СоздатьДокумент();
			ДокументПогашенияВСД.Заполнить(ЗапросВСД.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
			ДокументПогашенияВСД.Дата = ТекущаяДатаСеанса();
			ДокументПогашенияВСД.ДокументОснование = Основание;
			
			Если ДокументПогашенияВСД.ПроверитьЗаполнение() Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;
			//@skip-check empty-except-statement
			Попытка
				ДокументПогашенияВСД.Записать(РежимЗаписи);
			Исключение
			КонецПопытки;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре необходимо определить значения по умолчанию, которые будут подставляться в
// реквизиты не сопоставленных элементов справочника.
//
// Параметры:
//  СобственнаяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - значение по умолчанию для собственной организации,
//  СторонняяОрганизация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - значение по умолчанию для сторонней организации.
Процедура ЗначенияПоУмолчаниюНеСопоставленныхОбъектов(СобственнаяОрганизация,
		                                              СобственныйТорговыйОбъект,
		                                              СобственныйПроизводственныйОбъект,
		                                              СторонняяОрганизация,
		                                              СтороннийТорговыйОбъект) Экспорт
	
	//++ НЕ ГОСИС
	СобственнаяОрганизация            = Справочники.Организации.ПустаяСсылка();
	СобственныйТорговыйОбъект         = Справочники.Склады.ПустаяСсылка();
	СобственныйПроизводственныйОбъект = Справочники.СтруктураПредприятия.ПустаяСсылка();
	СторонняяОрганизация              = Справочники.Контрагенты.ПустаяСсылка();
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		СтороннийТорговыйОбъект = Справочники.Партнеры.ПустаяСсылка();
	Иначе
		СтороннийТорговыйОбъект = Неопределено;
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// В процедуре необходимо реализовать запись сопоставления хозяйствующих субъектов и предприятий с прикладными
//   справочниками конфигурации
//
// Параметры:
//  ДокументОснование - ДокументСсылка, ДокументОбъект - прикладной документ конфигурации,
//  ДокументОбъект    - ДокументСсылка, ДокументОбъект - связанный с ним документ библиотеки.
//
Процедура ЗаполнитьСоответствиеШапкиОбъектов(ДокументОснование, ДокументОбъект) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияВЕТИСУТ.ЗаполнитьСоответствиеШапкиОбъектов(ДокументОснование, ДокументОбъект);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры


// Заполняет структуру данных транспортной накладной для входящей или исходящей транспортной операции по документу-основанию:
//  * Номер - Строка, Неопределено - номер транспортной накладной. Неопределено, если транспортная накладная не найдена.
//  * Дата - Дата, Неопределено - дата транспортной накладной. Неопределено, если транспортная накладная не найдена.
//
// Параметры:
//  ДанныеТТН         - Структура      - Заполняемые поля.
//  ДокументОснование - ДокументСсылка - Ссылка на документ-основание транспортной операции.
Процедура ЗаполнитьДанныеТТНДляТранспортнойОперацииПоОснованию(ДанныеТТН, ДокументОснование) Экспорт
	
	//++ НЕ ГОСИС
	ДанныеТранспортныхНакладных = Документы.ТранспортнаяНакладная.ТранспортныеНакладныеДокументовОснований(ДокументОснование);
	Если ДанныеТранспортныхНакладных.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеТТН, ДанныеТранспортныхНакладных[0]);
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#Область ТабличнаяЧастьТовары

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, в которой нужно установить параметры выбора.
//  ИмяПоляВвода - Строка - Имя поля ввода номенклатуры.
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора, Ложь);
	
	ПараметрыВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар));
	
	ОсобенностиУчетаНоменклатурыВетИС = Новый Массив;
	ОсобенностиУчетаНоменклатурыВетИС.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС);
	ОсобенностиУчетаНоменклатурыВетИС.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	ОсобенностиУчетаНоменклатурыВетИС.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС);
	ОсобенностиУчетаНоменклатурыВетИС.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС);
	ОсобенностиУчетаНоменклатурыВетИС.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС);
	ОсобенностиУчетаНоменклатурыВетИС.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС);
	ОсобенностиУчетаНоменклатурыВетИС.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС);
	ОсобенностиУчетаНоменклатурыВетИС.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС);
	
	ПараметрыВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.ОсобенностьУчета", ОсобенностиУчетаНоменклатурыВетИС));
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет количество номенклатуры по количеству ВетИС:
//   * Имя колонки с количеством ВетИС откуда идет пересчет: <Количество[суффикс]ВЕТИС>,
//   * Имя колонки с прикладным количеством: <Количество[суффикс]>.
//
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции	- Строка табличной части объекта.
//  Суффикс - Строка - Окончание наименования колонки, содержащей количество.
Процедура ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИС(ТекущаяСтрока, Суффикс = "") Экспорт
	
	//++ НЕ ГОСИС
	ПересчитатьКоличествоЕдиницПоВЕТИС = Новый Структура("ЕдиницаИзмеренияВЕТИС, Суффикс");
	ЗаполнитьЗначенияСвойств(ПересчитатьКоличествоЕдиницПоВЕТИС, ТекущаяСтрока);
	ПересчитатьКоличествоЕдиницПоВЕТИС.Суффикс = Суффикс;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницПоВЕТИС", ПересчитатьКоличествоЕдиницПоВЕТИС);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет количество номенклатуры по количеству ВЕТИС.
//
// Параметры:
//  ТабличнаяЧасть   - ДокументТабличнаяЧасть - табличная часть документа.
//  Суффикс          - Строка                 - суффикс полей "Количество" табличной части
//
Процедура ЗаполнитьКоличествоНоменклатурыПоКоличествуВЕТИСВТаблице(ТабличнаяЧасть, Суффикс = "") Экспорт
	
	//++ НЕ ГОСИС
	ДанныеДляПересчета = ИнтеграцияВЕТИСУТ.КоэффициентыЕдиницИзмеренияПоВЕТИС(ТабличнаяЧасть);
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
			Продолжить;
		ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС) Тогда
			Продолжить;
		Иначе
			ДанныеЕдиницыИзмерения = ДанныеДляПересчета.Получить(СтрокаТабличнойЧасти.Номенклатура).Получить(СтрокаТабличнойЧасти.ЕдиницаИзмеренияВЕТИС);
			Если ДанныеЕдиницыИзмерения.КодОшибки <> 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаТабличнойЧасти["Количество"+Суффикс] = СтрокаТабличнойЧасти["Количество"+Суффикс+"ВЕТИС"] * ДанныеЕдиницыИзмерения.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет статус указания серий и проверяет серию в строке табличной части объекта.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Документ, для которого необходимо заполнить статус указания серии.
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - Строка табличной части объекта.
Процедура ПроверитьСериюРассчитатьСтатус(ДокументОбъект, ТекущаяСтрока) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ДокументОбъект,
								ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ДокументОбъект.Метаданные().ПолноеИмя()));
	
	Если ПараметрыУказанияСерий.Свойство("Товары") Тогда
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий.Товары, Неопределено);
	Иначе
		ПроверитьСериюРассчитатьСтатус = Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерий, Неопределено);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Заполняет идентификатор партии по данным серии в строке табличной части объекта.
//
// Параметры:
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - Строка табличной части объекта.
//  Серия - СправочникСсылка - Ссылка на справочник серий, в которой определен реквизит ИдентификаторПартииВЕТИС
Процедура ЗаполнитьИдентификаторПартии(ТекущаяСтрока, Серия) Экспорт
	
	//++ НЕ ГОСИС
	Если Не ЗначениеЗаполнено(Серия) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ИдентификаторПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Серия,
		"ИдентификаторПартииВЕТИС");
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Устанавливает служебный признак необходимости заполнения идентификатора партии в строке табличной части объекта.
//
// Параметры:
//  ТабличнаяЧастьТовары - ДанныеФормыКоллекция - Товарная табличная часть объекта.
Процедура ЗаполнитьИспользованиеИдентификаторовПартий(ТабличнаяЧастьТовары) Экспорт
	
	//++ НЕ ГОСИС
	ИнтеграцияВЕТИСУТ.ЗаполнитьИспользованиеИдентификаторовПартий(ТабличнаяЧастьТовары);
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Возвращает текст запроса для движений по регистру накопления СерииНоменклатуры.
//
// Возвращаемое значение:
//  Строка - текст запроса.
Процедура ЗаполнитьТекстЗапросаДвижениеСерийТоваров(ТекстЗапроса, МетаданныеДокумента) Экспорт
	
	//++ НЕ ГОСИС
	Если МетаданныеДокумента = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Номенклатура, ТаблицаСерии.Номенклатура) КАК Номенклатура,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Характеристика, ТаблицаСерии.Характеристика) КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Серия, ТаблицаСерии.Серия) КАК Серия,
		|	ЕСТЬNULL(ТаблицаСерииУточнение.Количество, ТаблицаСерии.Количество) КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ВходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаСерии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВходящаяТранспортнаяОперацияВЕТИС.ТоварыУточнение КАК ТаблицаСерииУточнение
		|		ПО ТаблицаСерии.ИдентификаторСтроки = ТаблицаСерииУточнение.ИдентификаторСтроки
		|		И ТаблицаСерииУточнение.Количество > 0
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ЕСТЬNULL(ТаблицаСерииУточнение.Серия, ТаблицаСерии.Серия) <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.Количество КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура,
		|	ТаблицаСерии.Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
		|	ТаблицаСерии.Серия,
		|	ТаблицаСерии.Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС),
		|	&Ссылка,
		|	&Период,
		|	&Ссылка,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ПроизводственнаяОперацияВЕТИС.Сырье КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ВЫБОР
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Добавление) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Изменение) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		КОГДА ТаблицаСерии.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииИнвентаризацииПродукцииВЕТИС.Удаление) ТОГДА
		|			ТаблицаСерии.КоличествоИзменение
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.ИнвентаризацияПродукцииВЕТИС.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаСерии.Номенклатура КАК Номенклатура,
		|	ТаблицаСерии.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ТаблицаСерии.Серия КАК Серия,
		|	ТаблицаСерии.Количество КАК Количество,
		|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ВзаимодействиеСВЕТИС) КАК СкладскаяОперация,
		|	&Ссылка КАК Документ,
		|	&Период КАК Период,
		|	&Ссылка КАК Регистратор,
		|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
		|ИЗ
		|	Документ.%ИмяДокумента%.Товары КАК ТаблицаСерии
		|ГДЕ
		|	ТаблицаСерии.Ссылка = &Ссылка
		|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяДокумента%", МетаданныеДокумента.Имя);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет, при необходимости создает серии в документе ВетИС или его выделенных строках
//
// Параметры:
//  Контекст  - (см. ИнтеграцияВЕТИС.СгенерироватьСерии)
//  Результат - (см. ИнтеграцияВЕТИС.СтруктураРезультатЗаполненияСерий)
Процедура ЗаполнитьСгенерироватьСерии(Контекст, Результат) Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыЗаполнения = ИнтеграцияВЕТИСУТ.ПараметрыЗаполненияСерий();
	ПараметрыЗаполнения.ПараметрыУказанияСерий = Контекст.ПараметрыУказанияСерий;
	
	Склад = Контекст.Объект.ТорговыйОбъект;
	Если Склад = Метаданные.ОпределяемыеТипы.Склад.Тип.ПривестиЗначение(Склад) Тогда
		ИнтеграцияВЕТИСУТ.ЗаполнитьПараметрЗаполненияСклад(Контекст.Объект, ПараметрыЗаполнения);
	КонецЕсли;
	
	РезультатЗаполнения = ИнтеграцияВЕТИСУТ.ЗаполнитьСгенерироватьСерии(
		Контекст.Товары,
		Контекст.МассивСтрок,
		ПараметрыЗаполнения,
		Контекст.ТоварыУточнение);
	
	ЗаполнитьЗначенияСвойств(Результат, РезультатЗаполнения);
	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

// Заполняет, при необходимости создает серии в документе ВетИС или его выделенных строках
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - объект для заполнения
//  Товары - ДанныеФормыКоллекция, ТаблицаЗначений - ТЧ документа
//  ВыделенныеСтроки - Массив - выделенные строки документа
//  ПараметрыУказанияСерий - см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий
//  ТоварыУточнение - Неопределено, ДанныеФормыКоллекция - Дополнительная ТЧ, содержащая расшифровку строк товаров
//  РезультатЗаполненияСерий - см. ИнтеграцияВетис.СтруктураРезультатЗаполненияСерий.
Процедура ПриГенерацииСерий(Объект, Товары, ВыделенныеСтроки, ПараметрыУказанияСерий, ТоварыУточнение, РезультатЗаполненияСерий) Экспорт

	//++ НЕ ГОСИС
	МассивСтрок = Новый Массив;

	Если ТипЗнч(Товары) = Тип("ДанныеФормыКоллекция") Тогда
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Товары.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Товары) = Тип("ТаблицаЗначений") Тогда
		Для Каждого Строка Из ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Товары[Строка]);
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра Товары метода СгенерироватьСерии'");
	КонецЕсли;

	КонтекстЗаполненияСерий = Новый Структура;
	КонтекстЗаполненияСерий.Вставить("Объект",                 Объект);
	КонтекстЗаполненияСерий.Вставить("Товары",                 Товары);
	КонтекстЗаполненияСерий.Вставить("МассивСтрок",            МассивСтрок);
	КонтекстЗаполненияСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	КонтекстЗаполненияСерий.Вставить("ТоварыУточнение",        ТоварыУточнение);

	ЗаполнитьСгенерироватьСерии(КонтекстЗаполненияСерий, РезультатЗаполненияСерий);
	//-- НЕ ГОСИС
	Возврат;

КонецПроцедуры

#КонецОбласти

#Область ДокументОснованиеПроизводственнойОперации

// Возникает при изменении документа-основания производственной операции ВетИС в форме документа.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - редактируемый документ "производственная операция ВетИС"
Процедура ПриИзмененииДокументаОснованияПроизводственнойОперации(Объект) Экспорт
	
	//++ НЕ ГОСИС
	
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Процедура заполняет признак использования комиссии при закупках или производства из давальческого сырья.
//
// Параметры:
//  Используется - Булево - Признак использования комиссии при закупках или производства из давальческого сырья.
Процедура ИспользуетсяКомиссияПриЗакупкахИлиПереработкаДавальческогоСырья(Используется) Экспорт
	
	//++ НЕ ГОСИС
	
	Используется = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках");
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура заполняет признак использования производства на стороне.
//
// Параметры:
//  Используется - Булево - Признак использования производства на стороне.
Процедура ИспользуетсяПереработкаНаСтороне(Используется) Экспорт
	
	//++ НЕ ГОСИС
	
	Используется = Истина;
	
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура заполняет использование идентификатора партии в сериях в разрезе номенклатуры.
//
// Параметры:
//  Требуется    - Булево                       - Признак использования идентификатора партии в сериях номенклатуры.
//  Номенклатура - ОпределяемыйТип.Номенклатура - элемент номенклатуры.
Процедура ТребуетсяУказаниеИдентификатораПартииНоменклатуры(Требуется, Номенклатура) Экспорт
	
	//++ НЕ ГОСИС
	ИспользоватьИдентификаторПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры.ИспользоватьИдентификаторПартииВЕТИССерии");
	
	Если ИспользоватьИдентификаторПартии = Неопределено Тогда
		Требуется = Ложь;
	ИначеЕсли ИспользоватьИдентификаторПартии = NULL Тогда
		Требуется = Ложь;
	Иначе
		Требуется = ИспользоватьИдентификаторПартии;
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Процедура определяет использование транспортных средств
//
// Параметры:
//  Указывается - Булево - Признак использования транспортных средств.
Процедура УказываетсяТранспортноеСредство(Указывается) Экспорт
	
	//++ НЕ ГОСИС
	Указывается = Истина;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Заполняет данные реквизитов пункта маршрута ВетИС получаемые из транспортного средства
//
// Параметры:
//  Реквизиты - Структура - возможные реквизиты пункта маршрута ВетИС с данными транспортного средства
//  ТранспортноеСредство - ОпределяемыйТип.ТранспортныеСредстваВЕТИС - транспортное средство
Процедура ПриОпределенииРеквизитовТранспортногоСредства(Реквизиты, ТранспортноеСредство) Экспорт
	
	//++ НЕ ГОСИС
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТранспортноеСредство, "Код, ГосударственныйНомерПрицепа");
		
		// Группы символов, разделяемые пробелами для ВЕТИС
		ГруппаСимволовЦифры = "0123456789";
		ГруппаСимволовРусские = "АВЕКМНОРСТУХ";
		
		// Латинские символы в российских госномерах, подменяемые русскими
		Замена = Новый Соответствие;
		Замена.Вставить("A","А");
		Замена.Вставить("B","В");
		Замена.Вставить("E","Е");
		Замена.Вставить("K","К");
		Замена.Вставить("M","М");
		Замена.Вставить("H","Н");
		Замена.Вставить("O","О");
		Замена.Вставить("P","Р");
		Замена.Вставить("C","С");
		Замена.Вставить("T","Т");
		Замена.Вставить("Y","У");
		Замена.Вставить("X","Х");
		
		НомерДоРазбиенияПоГруппам = СтрЗаменить(ВРег(ЗначенияРеквизитов.Код), " ", "");
		ЭтоРоссийскийНомер = Прав(НомерДоРазбиенияПоГруппам,3) = "RUS";
		Номер = "";
		ВидСимволаГруппы = -1;
		Для Индекс = 1 По СтрДлина(НомерДоРазбиенияПоГруппам) Цикл
			Символ = Сред(НомерДоРазбиенияПоГруппам, Индекс, 1);
			Если ЭтоРоссийскийНомер И Замена.Получить(Символ)<>Неопределено Тогда
				Символ = Замена.Получить(Символ);
			КонецЕсли;
			ВидСимвола = 0;
			Если СтрНайти(ГруппаСимволовЦифры, Символ)>0 Тогда
				ВидСимвола = 1;
			ИначеЕсли СтрНайти(ГруппаСимволовРусские, Символ)>0 Тогда
				ВидСимвола = 2;
			КонецЕсли;
			Номер = Номер + ?(ВидСимволаГруппы = ВидСимвола,""," ") + Символ;
			ВидСимволаГруппы = ВидСимвола;
		КонецЦикла;
		Реквизиты.НомерТранспортногоСредства = Сред(Номер, 2);
		
		НомерДоРазбиенияПоГруппам = СтрЗаменить(ВРег(ЗначенияРеквизитов.ГосударственныйНомерПрицепа), " ", "");
		Номер = "";
		ВидСимволаГруппы = -1;
		Для Индекс = 1 По СтрДлина(НомерДоРазбиенияПоГруппам) Цикл
			Символ = Сред(НомерДоРазбиенияПоГруппам, Индекс, 1);
			Если ЭтоРоссийскийНомер И Замена.Получить(Символ)<>Неопределено Тогда
				Символ = Замена.Получить(Символ);
			КонецЕсли;
			ВидСимвола = 0;
			Если СтрНайти(ГруппаСимволовЦифры, Символ)>0 Тогда
				ВидСимвола = 1;
			ИначеЕсли СтрНайти(ГруппаСимволовРусские, Символ)>0 Тогда
				ВидСимвола = 2;
			КонецЕсли;
			Номер = Номер + ?(ВидСимволаГруппы = ВидСимвола,""," ") + Символ;
			ВидСимволаГруппы = ВидСимвола;
		КонецЦикла;
		Реквизиты.НомерАвтомобильногоПрицепа = Сред(Номер, 2);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Используется для тестирования проблемы рассинхронизации данных между информационной базой и ФГИС Меркурий
// при получении ошибки 408 (Таймаут)
//
// Пример кода:
// РезультатОтправкиЗапроса = Новый Структура;
// РезультатОтправкиЗапроса.Вставить("ТекстСообщенияXMLОтправлен",  Ложь);
// РезультатОтправкиЗапроса.Вставить("ТекстСообщенияXMLПолучен",    Ложь);
// РезультатОтправкиЗапроса.Вставить("КодСостояния",                408);
// РезультатОтправкиЗапроса.Вставить("ТекстОшибки",                 НСтр("ru = 'Эмуляция ошибки HTTP 408: Таймаут'"));
// РезультатОтправкиЗапроса.Вставить("ТекстВходящегоСообщенияSOAP", "");
//
// Параметры:
//  ТекстСообщенияXML - Строка - Сообщение XML.
//  Операция - ПеречислениеСсылка - Операция.
//  ПараметрыЗапроса - Структура - Параметры запроса.
//  ПараметрыОбмена - Структура - Параметры обмена.
//  РезультатОтправкиЗапроса - Структура - Возвращаемое значение.
Процедура ПередОтправкойЗапроса(ТекстСообщенияXML, Операция, ПараметрыЗапроса, ПараметрыОбмена, РезультатОтправкиЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Используется для тестирования проблемы рассинхронизации данных между информационной базой и ФГИС Меркурий
// при получении ошибок APLM и т.п.
//
// Пример кода:
// Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала
//	Или Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД Тогда
//		Если СтрНайти(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP, "COMPLETED") > 0
//			Или СтрНайти(РезультатОтправкиЗапроса.ТекстВходящегоСообщенияSOAP, "REJECTED") > 0 Тогда
//		Тестирование_ПолучитьAPLM0012(РезультатОтправкиЗапроса, ПараметрыЗапроса, Операция, ПараметрыОбмена);
//		КонецЕсли;
//	КонецЕсли;
// 
// Параметры:
//  ТекстСообщенияXML - Строка - Сообщение XML.
//  Операция - ПеречислениеСсылка - Операция.
//  ПараметрыЗапроса - Структура - Параметры запроса.
//  ПараметрыОбмена - Структура - Параметры обмена.
//  РезультатОтправкиЗапроса - Структура - Возвращаемое значение.
Процедура ПослеОтправкиЗапроса(ТекстСообщенияXML, Операция, ПараметрыЗапроса, ПараметрыОбмена, РезультатОтправкиЗапроса) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти
