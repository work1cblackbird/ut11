
#Область СлужебныйПрограммныйИнтерфейс

// Добавляет в список поставляемые драйверы в составе конфигурации.
// 
// Параметры:
//  ДрайвераОборудования - см. МенеджерОборудования.НоваяТаблицаПоставляемыхДрайверовОборудования
//
Процедура ОбновитьПоставляемыеДрайвера(ДрайвераОборудования) Экспорт
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "Драйвер1СДисплейПокупателя";
	Драйвер.Наименование = НСтр("ru = '1С:Дисплей покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "CustomerDisplayEx"; 
	Драйвер.ВерсияДрайвера = "5.1.3.4";
	Драйвер.РекомендуемоеИспользование = Истина;
	
	// ++ НеМобильноеПриложение
	// ++ Локализация  
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверАТОЛДисплеиПокупателя8X";
	Драйвер.Наименование = НСтр("ru = 'АТОЛ:Дисплеи покупателя 8.X'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "ATOL_Line_1CInt"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверPOSUAДисплеиПокупателя";
	Драйвер.Наименование = НСтр("ru = 'POSUA:Дисплеи покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "LPOSVFD"; 
	Драйвер.ВерсияДрайвера = "1.0.8.0"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "Драйвер1СРарусДисплеиПокупателя";
	Драйвер.Наименование = НСтр("ru = '1С-Рарус:Дисплеи покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "d_android1c83"; 
	Драйвер.ВерсияДрайвера = "1.0.15.54"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверСканкодДисплеиПокупателяNative";
	Драйвер.Наименование = НСтр("ru = 'Сканкод:Дисплеи покупателя (Native API)'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "DSPPromag8"; 
	Драйвер.ВерсияДрайвера = "1.0.0.3"; 
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверКристаллСервисДисплеиПокупателяVikiVision";
	Драйвер.Наименование = НСтр("ru = 'Кристалл Сервис:Дисплей покупателя Viki Vision'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "VikiVision"; 
	Драйвер.ВерсияДрайвера = "1.03"; 

	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверККСДисплеиПокупателя";
	Драйвер.Наименование = НСтр("ru = 'ККС:Дисплеи покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "VFCD220E"; 
	Драйвер.ВерсияДрайвера = "1.0.1.1"; 
	Драйвер.СнятСПоддержки = Истина;
	
	Драйвер = ДрайвераОборудования.Добавить();
	Драйвер.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя;
	Драйвер.ИмяДрайвера  = "ДрайверЭвоторДисплейПокупателя";
	Драйвер.Наименование = НСтр("ru = 'Эвотор:Дисплей покупателя'", ОбщегоНазначенияБПО.КодОсновногоЯзыка());
	Драйвер.ИдентификаторОбъекта = "EvoKKMExtension36"; 
	Драйвер.ВерсияДрайвера = "1.9.412.3006"; 
	Драйвер.ИмяМакетаДрайвера = "ДрайверЭвоторККТ54ФЗ";
	// -- Локализация      
	// -- НеМобильноеПриложение     
	
КонецПроцедуры

// Подготовить данные операции.
// 
// Параметры:
//  ПараметрыПодключения - Структура -Параметры подключения
//  Команда - Строка - Команда
//  ПараметрыОперации - Структура -Параметры операции
// 
// Возвращаемое значение:
//  Неопределено.
Функция ПодготовитьДанныеОперации(ПараметрыПодключения, Команда, ПараметрыОперации) Экспорт
	
	ДанныеОперации = ПараметрыОперацииДисплеиПокупателя(); 
	ДанныеОперации.ТекстHTML = "<p>No information</p>";
	ДанныеОперации.СтатусОперации = ПараметрыОперации.СтатусОперации;
	ДанныеОперации.СтрокиТекста = ПараметрыОперации.СтрокиТекста;

	// ++ НеМобильноеПриложение
	Если Команда = "DisplayInfo" Тогда      
		
		Если ПараметрыОперации.Операция = "СервисныйРежим" Тогда
			СтраницаСервисныйРежим(ПараметрыПодключения, ДанныеОперации, ПараметрыОперации);
		ИначеЕсли ПараметрыОперации.Операция = "Информация" Тогда   
			СтраницаИнформация(ПараметрыПодключения, ДанныеОперации, ПараметрыОперации);
		ИначеЕсли ПараметрыОперации.Операция = "ПлатежнаяОперация" Тогда   
			СтраницаПлатежнаяОперация(ПараметрыПодключения, ДанныеОперации, ПараметрыОперации);
		ИначеЕсли ПараметрыОперации.Операция = "СписокТоваров" Тогда 
			СтраницаСписокТоваров(ПараметрыПодключения, ДанныеОперации, ПараметрыОперации);
		ИначеЕсли ПараметрыОперации.Операция = "ФискальныйЧек" Тогда
			СтраницаФискальныйЧек(ПараметрыПодключения, ДанныеОперации, ПараметрыОперации);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПараметрыОперации.ЗначениеQRКода) Тогда
			ДанныеОперации.ЗначениеQRКода = ПараметрыОперации.ЗначениеQRКода;
		КонецЕсли;
			
	КонецЕсли;
	
	ДанныеОперации.Вставить("КодСтатусОперации", СтатусОперацииНаДисплее(ПараметрыОперации.СтатусОперации));
	ДанныеОперации.Вставить("КодСтатусаРабочегоМеста", ПараметрыОперации.КодСтатусаРабочегоМеста);
	// -- НеМобильноеПриложение 
	
	Возврат ДанныеОперации;       
	
КонецФункции

Процедура ОбработатьДанныеОперации(ПараметрыПодключения, Команда, РезультатВыполнения, ДанныеОперации) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции   

// Заполнить структуру операции
// 
// Возвращаемое значение:
//  Структура - Параметры операции:
// * Результат - Булево.
// * ТекстОшибки - Строка.
Функция ПараметрыОперацииДисплеиПокупателя()
	
	ПараметрыОперации = Новый Структура();
	ПараметрыОперации.Вставить("Результат", Истина); 
	ПараметрыОперации.Вставить("СтрокиТекста");    
	ПараметрыОперации.Вставить("ЗначениеQRКода"); // Строка - значение QR кода
	ПараметрыОперации.Вставить("КартинкаQRКода"); // Строка - строка с base64 представлением png картинки логотипа.      
	ПараметрыОперации.Вставить("СтатусОперации", 0); // Число - Статус: 0-Не установлены, 1-Выполнено успешно, 2-Операция не выполнена
	ПараметрыОперации.Вставить("КодСтатусаРабочегоМеста");
	ПараметрыОперации.Вставить("ТекстОшибки");     
	ПараметрыОперации.Вставить("ТекстHTML");
	Возврат ПараметрыОперации;
	
КонецФункции 

// ++ НеМобильноеПриложение 

// Код статуса операции на дисплее.
// 
// Параметры:    
//   СтатусОперации - ПеречислениеСсылка.СтатусОперацииНаДисплее - Cтатус операции на дисплее
//   
// Возвращаемое значение:
//   Число - Код статуса.
//
Функция СтатусОперацииНаДисплее(СтатусОперации) Экспорт
	
	Если СтатусОперации = Неопределено Тогда
		КодСтатуса = 0
	Иначе
		СтатусыОперации = Новый Соответствие(); 
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно   , 0);
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно   , 1);
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.ОперацияНеВыполнена, 2);
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации   , 3);
		СтатусыОперации.Вставить(Перечисления.СтатусОперацииНаДисплее.Информация         , 4);
		КодСтатуса = СтатусыОперации.Получить(СтатусОперации);
	КонецЕсли;
	
	Возврат КодСтатуса;
	
КонецФункции

#Область ВывестиИнформацию

Функция ПараметрыШаблонаДисплеяПокупателя()
	
	Результат = Новый Структура();
	Результат.Вставить("ЗаголовокСтраницы", "");
	Результат.Вставить("Заголовок", "");
	Результат.Вставить("Операция", "");
	Результат.Вставить("Описание", "");
	Результат.Вставить("Информация", "");
	Результат.Вставить("Комментарий", "");
	Результат.Вставить("QRКод", "");
	Результат.Вставить("СтатусОперации", Перечисления.СтатусОперацииНаДисплее.ПустаяСсылка());
	Результат.Вставить("ПриложениеМойНалог", Ложь);
	Результат.Вставить("ТекстПриложениеМойНалог", "");
	Результат.Вставить("ИконкаМойНалог", Ложь);
	Результат.Вставить("КнопкаМойНалог", Ложь);
	Результат.Вставить("ТекстКнопкаМойНалог", "");
	Результат.Вставить("Кнопки", Новый Массив());
	Возврат Результат;
	
КонецФункции

Функция ТекстHTMLПоШаблонуДисплеяПокупателя(ПараметрыПодключения, ПараметрыШаблона)
	
	ДисплейОтрабатываетНажатия = ПараметрыПодключения.ДисплейОтрабатываетНажатия;
	Шаблон = МенеджерОборудованияПовтИсп.СодержимоеОбщегоМакета("ШаблонДисплеяПокупателя");
	Шаблон = СтрЗаменить(Шаблон, "%TITLE%", ПараметрыШаблона.ЗаголовокСтраницы);
	Шаблон = СтрЗаменить(Шаблон, "%CAPTION%", ПараметрыШаблона.Заголовок);
	Шаблон = СтрЗаменить(Шаблон, "%OPERATION%", ПараметрыШаблона.Операция);
	Шаблон = СтрЗаменить(Шаблон, "%DESC%", ПараметрыШаблона.Описание);
	Шаблон = СтрЗаменить(Шаблон, "%INFO%", ПараметрыШаблона.Информация);
	Шаблон = СтрЗаменить(Шаблон, "%COMMENT%", ПараметрыШаблона.Комментарий);
	Шаблон = СтрЗаменить(Шаблон, "%QR%", ПараметрыШаблона.QRКод);
	// ++ Локализация
	Если ПараметрыШаблона.ПриложениеМойНалог Тогда
		Шаблон = СтрЗаменить(Шаблон, "%MP_INFO%", ПараметрыШаблона.ТекстПриложениеМойНалог);
		Шаблон = СтрЗаменить(Шаблон, "<!--MY_TAX_APP", "");
		Шаблон = СтрЗаменить(Шаблон, "MY_TAX_APP-->", "");
	КонецЕсли;
	Если ДисплейОтрабатываетНажатия И ПараметрыШаблона.КнопкаМойНалог Тогда
		Шаблон = СтрЗаменить(Шаблон, "%PRINT_CHEQUE%", ПараметрыШаблона.ТекстКнопкаМойНалог);
		Шаблон = СтрЗаменить(Шаблон, "<!--PRINT_CHEQUE", "");
		Шаблон = СтрЗаменить(Шаблон, "PRINT_CHEQUE-->", "");
	ИначеЕсли ПараметрыШаблона.ИконкаМойНалог Тогда
		Шаблон = СтрЗаменить(Шаблон, "<!--MY_TAX_ICON", "");
		Шаблон = СтрЗаменить(Шаблон, "MY_TAX_ICON-->", "");
	КонецЕсли;
	// -- Локализация
	
	Если ПустаяСтрока(ПараметрыШаблона.QRКод) Тогда
		СтатусОперации = ПараметрыШаблона.СтатусОперации;
		Если СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно Тогда
			Шаблон = СтрЗаменить(Шаблон, "<!--STATUS_OK", "");
			Шаблон = СтрЗаменить(Шаблон, "STATUS_OK-->", "");
		ИначеЕсли СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОперацияНеВыполнена Тогда
			Шаблон = СтрЗаменить(Шаблон, "<!--STATUS_FAIL", "");
			Шаблон = СтрЗаменить(Шаблон, "STATUS_FAIL-->", "");
		ИначеЕсли СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации Тогда
			Шаблон = СтрЗаменить(Шаблон, "<!--STATUS_WAIT", "");
			Шаблон = СтрЗаменить(Шаблон, "STATUS_WAIT-->", "");
		ИначеЕсли СтатусОперации = Перечисления.СтатусОперацииНаДисплее.Информация Тогда
			Шаблон = СтрЗаменить(Шаблон, "<!--STATUS_INFO", "");
			Шаблон = СтрЗаменить(Шаблон, "STATUS_INFO-->", "");
		КонецЕсли;
	КонецЕсли;
	
	ШаблонКнопок = "";
	Если ПараметрыПодключения.ДисплейОтрабатываетНажатия Тогда
		
		Если ПараметрыШаблона.Кнопки.Количество()>0 Тогда
			СимволовВКнопке = 10; // минимальный размер кнопки
			Для Каждого Кнопка Из ПараметрыШаблона.Кнопки Цикл // Структура
				СимволовВКнопке = Макс(СимволовВКнопке, СтрДлина(Кнопка.Наименование));
			КонецЦикла;
			ОптимальнаяШиринаКнопки = СимволовВКнопке * 20;
			ШаблонОднойКнопки = "<button style=""width: %1px"" onclick = ""%2"">%3</button>";
			ШаблонРазделитель = "<span class=""button_separate"">&nbsp</span>";
			
			Индекс = 0;
			Для Каждого Кнопка Из ПараметрыШаблона.Кнопки Цикл
				ШаблонКнопок = ШаблонКнопок + СтрШаблон(ШаблонОднойКнопки, ОптимальнаяШиринаКнопки, Кнопка.Идентификатор, Кнопка.Наименование);
				Если Индекс < ПараметрыШаблона.Кнопки.ВГраница() Тогда
					ШаблонКнопок = ШаблонКнопок + ШаблонРазделитель;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	Шаблон = СтрЗаменить(Шаблон, "%BUTTONS%", ШаблонКнопок);
	
	Возврат Шаблон;
	
	
КонецФункции

Процедура СтраницаСервисныйРежим(Знач ПараметрыПодключения, Знач ДанныеОперации, Знач ПараметрыОперации)
	
	Параметры = ПараметрыШаблонаДисплеяПокупателя();
	Параметры.Заголовок = XMLСтрока(ПараметрыОперации.НазваниеОрганизации);
	Если ПараметрыОперации.ГотовностьКРаботе Тогда
		Параметры.Операция = НСтр("ru = 'ГОТОВ К ПРОДАЖЕ'");
		Параметры.Информация = НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'"); // АПК: 374 - интерфейсная особенность
		Параметры.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно;
	ИначеЕсли НЕ ПараметрыОперации.ГотовностьКРаботе Тогда
		Параметры.Операция = НСтр("ru = 'НЕДОСТУПНО'");
		Параметры.Информация = НСтр("ru='КАССА НЕ РАБОТАЕТ!'"); // АПК: 374 - интерфейсная особенность
		Параметры.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОперацияНеВыполнена;
	Иначе
		Параметры.Операция = НСтр("ru = 'НЕДОСТУПНО'");
		Параметры.Информация = НСтр("ru='СЕРВИСНЫЙ РЕЖИМ'");
		Параметры.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации;
	КонецЕсли;
	
	// ++ Локализация
	Параметры.ПриложениеМойНалог = Истина;
	Параметры.ТекстПриложениеМойНалог = НСтр("ru = 'Для поверки чеков используйте<br>Мои чеки онлайн'");
	// -- Локализация
	
	ДанныеОперации.ТекстHTML = ТекстHTMLПоШаблонуДисплеяПокупателя(ПараметрыПодключения, Параметры);
	ДанныеОперации.СтатусОперации = Параметры.СтатусОперации;
	// Текст на обычный дисплей покупателя
	Если ПустаяСтрока(ПараметрыОперации.СтрокиТекста) Тогда
		ДанныеОперации.СтрокиТекста = Параметры.Информация; 
	КонецЕсли;
	
КонецПроцедуры

Процедура СтраницаИнформация(Знач ПараметрыПодключения, Знач ДанныеОперации, Знач ПараметрыОперации)
	
	СтрокиТекста = ПараметрыОперации.СтрокиТекста;
	СтрокиТекста = СтрЗаменить(СтрокиТекста, Символы.ПС, "<br>"); 
	
	Параметры = ПараметрыШаблонаДисплеяПокупателя();
	Параметры.Заголовок = XMLСтрока(ПараметрыОперации.НазваниеОрганизации);
	Параметры.Операция = НСтр("ru = 'ИНФОРМАЦИЯ'");
	Параметры.Информация = СтрокиТекста;
	Параметры.QRКод = ПараметрыОперации.КартинкаBase64;
	Параметры.СтатусОперации = ПараметрыОперации.СтатусОперации;
	Для каждого Кнопка Из ПараметрыОперации.Кнопки Цикл
		Параметры.Кнопки.Добавить(Кнопка);
	КонецЦикла;
	ДанныеОперации.ТекстHTML = ТекстHTMLПоШаблонуДисплеяПокупателя(ПараметрыПодключения, Параметры);
	
КонецПроцедуры

Процедура СтраницаФискальныйЧек(Знач ПараметрыПодключения, Знач ДанныеОперации, Знач ПараметрыОперации)
	
	КартинкаBase64 = "";
	Если ЗначениеЗаполнено(ПараметрыОперации.ЗначениеQRКода) Тогда
		Размер = 400;
		КартинкаBase64 = КартинкаQRКодаBase64(ПараметрыОперации.ЗначениеQRКода, Размер);
	КонецЕсли;
	
	Параметры = ПараметрыШаблонаДисплеяПокупателя();
	Параметры.Заголовок = НСтр("ru='Получите электронный чек'");
	Параметры.Операция = НСтр("ru='СПАСИБО ЗА ПОКУПКУ'");
	Параметры.Описание = НСтр("ru='Сканируйте QR-код <br> в мобильном приложении'");
	Параметры.QRКод = КартинкаBase64;
	Параметры.ИконкаМойНалог = Истина;
	Параметры.КнопкаМойНалог = Истина;
	Параметры.ТекстКнопкаМойНалог = НСтр("ru = 'Напечатать копию чека'");
	ДанныеОперации.ТекстHTML = ТекстHTMLПоШаблонуДисплеяПокупателя(ПараметрыПодключения, Параметры);
	
	Если ПустаяСтрока(ПараметрыОперации.СтрокиТекста) Тогда
		ДанныеОперации.СтрокиТекста = НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'");
	КонецЕсли;
	
КонецПроцедуры

Процедура СтраницаСписокТоваров(Знач ПараметрыПодключения, Знач ДанныеОперации, Знач ПараметрыОперации)
	
	Ширина = 10;
	ШаблонСтроки = "";  
	ШаблонЗаголовка = "<tr>"; 
	ВыводитьПодвалСкидка = Ложь;
	ФорматЧисла = ФорматЧисла(ПараметрыПодключения.ДисплейОтображаетHTML);
	ФорматЧислаТаблица = ФорматЧислаТаблицы(ПараметрыПодключения.ДисплейОтображаетHTML);
	
	КолонкиТабличнойЧасти = ПараметрыОперации.КолонкиТабличнойЧасти;
	Для Каждого КолонкаТабличнойЧасти Из ПараметрыОперации.КолонкиТабличнойЧасти Цикл                                        
		Если ВРег(КолонкаТабличнойЧасти.Имя) = НСтр("ru = 'СКИДКА'") Тогда
			ВыводитьПодвалСкидка = Истина;
		КонецЕсли;
		Ширина       = Строка(?(КолонкаТабличнойЧасти.Ширина > 0, КолонкаТабличнойЧасти.Ширина, 10));
		Заголовок    = КолонкаТабличнойЧасти.Заголовок;
		ИмяКолонки   = КолонкаТабличнойЧасти.Имя;
		Выравнивание = СтрокаВыравнивания(КолонкаТабличнойЧасти.Выравнивание);
		
		ШаблонЗаголовка = ШаблонЗаголовка
			+ СтрШаблон("<td %1 width=""%2"">%3</td>", Выравнивание, Ширина + "%", Заголовок);
		ШаблонСтроки = ШаблонСтроки 
			+ СтрШаблон("<td %1 width=""%2"">%3</td>", Выравнивание, Ширина + "%", "%" + ИмяКолонки + "%");
	КонецЦикла;                                                        
	ШаблонЗаголовка = ШаблонЗаголовка  + "</tr>";
	
	ТабличнаяЧасть = "";
	ТекущаяСтрока = 1;
	КоличествоСтрок = ПараметрыОперации.ТабличнаяЧасть.Количество();
	Для Каждого СтрокаТабличнаяЧасть Из ПараметрыОперации.ТабличнаяЧасть Цикл 
		
		ЭтоПоследняяСтрока = (ТекущаяСтрока = КоличествоСтрок);
		ТекстСтроки = СтрШаблон("<tr %1>", ?(ЭтоПоследняяСтрока, "position_anchor=""true"" style=""background: #D5EAFF""", "")) + ШаблонСтроки;
		Для Каждого СтрокаТаблицы Из СтрокаТабличнаяЧасть Цикл    
			ТекстСтроки = СтрЗаменить(ТекстСтроки, "%" + СтрокаТаблицы.Ключ + "%", СтрокаТаблицы.Значение);
		КонецЦикла;            
		ТекстСтроки = ТекстСтроки + "</tr>";
		ТабличнаяЧасть = ТабличнаяЧасть + ТекстСтроки;
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;     
	
	ПодвалСкидка = "";
	Если ВыводитьПодвалСкидка Или ПараметрыОперации.ПодвалСкидка > 0 Тогда
		ПодвалСкидка = СтрШаблон("<tr><td align=""right"" colspan=""%1"">%2</td><td align=""right"" width=""%3"">%4</td></tr>", 
			КолонкиТабличнойЧасти.Количество() - 1, 
			НСтр("ru='Скидка'"),
			Ширина + "%",
			Формат(ПараметрыОперации.ПодвалСкидка, ФорматЧислаТаблица));
	КонецЕсли;
	ПодвалТаблицы = ПодвалСкидка + СтрШаблон("<tr><td align=""right"" colspan=""%1"">%2</td><td align=""right"" width=""%3"">%4</td></tr>", 
		КолонкиТабличнойЧасти.Количество() - 1, 
		НСтр("ru='Итого'"),
		Ширина + "%",
		Формат(ПараметрыОперации.ПодвалСумма, ФорматЧислаТаблица));
	
	ШаблонДисплеиПокупателя = МенеджерОборудованияПовтИсп.СодержимоеОбщегоМакета("ШаблонДисплеяПокупателяЧек");
	ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--Head-->" , ШаблонЗаголовка);
	ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--Table-->", ТабличнаяЧасть);
	ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "<!--Foot-->" , ПодвалТаблицы);
	ШаблонДисплеиПокупателя = СтрЗаменить(ШаблонДисплеиПокупателя, "%COMMENT%", "");
	
	ДанныеОперации.ТекстHTML = ШаблонДисплеиПокупателя;
	// Текст на обычный дисплей покупателя
	Если ПустаяСтрока(ПараметрыОперации.СтрокиТекста) Тогда
		ДанныеОперации.СтрокиТекста = НСтр("ru='ИТОГО:'") + " " + Формат(ПараметрыОперации.ПодвалСумма, ФорматЧисла);  
	КонецЕсли;

КонецПроцедуры

Процедура СтраницаПлатежнаяОперация(Знач ПараметрыПодключения, Знач ДанныеОперации, Знач ПараметрыОперации)
	
	Параметры = ПараметрыШаблонаДисплеяПокупателя();
	Параметры.Операция = ТекстСтатуса(ПараметрыОперации);
	Параметры.Заголовок = ТекстТипаПлатежнойСистемы(ПараметрыОперации);
	
	ОплатаЧерезСервис = Ложь;
	Если ПараметрыОперации.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей  Тогда
		Параметры.Комментарий = НСтр("ru='Для совершения платежа отсканируйте QR-код'");
		ОплатаЧерезСервис = Истина;
	ИначеЕсли ПараметрыОперации.ТипПлатежнойСистемы = Перечисления.ТипыПлатежнойСистемыККТ.ЮКасса Тогда
		Параметры.Комментарий = НСтр("ru='Для входа в личный кабинет отсканируйте QR-код'");
		ОплатаЧерезСервис = Истина;
	КонецЕсли;
	
	Параметры.СтатусОперации = ПараметрыОперации.СтатусОперации;
	Если ОплатаЧерезСервис 
		И ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации Тогда
		Если ЗначениеЗаполнено(ПараметрыОперации.ЗначениеQRКода) Тогда
			Размер = 300;
			Параметры.QRКод = КартинкаQRКодаBase64(ПараметрыОперации.ЗначениеQRКода, Размер);
		КонецЕсли;
	КонецЕсли; 
	
	Если ПустаяСтрока(ПараметрыОперации.ДополнительныйТекст) Тогда
		ФорматЧисла = ФорматЧисла(ПараметрыПодключения.ДисплейОтображаетHTML);
		Если ВывестиСдачу(ПараметрыОперации) Тогда
			Параметры.Описание = НСтр("ru='СДАЧА'");
			Параметры.Информация = Формат(ПараметрыОперации.Сдача, ФорматЧисла);
		Иначе
			Параметры.Описание = НСтр("ru='СУММА'");
			Параметры.Информация = Формат(ПараметрыОперации.Сумма, ФорматЧисла);
		КонецЕсли;   
	Иначе
		Параметры.Описание = ПараметрыОперации.ДополнительныйТекст;
	КонецЕсли;
	
	ДанныеОперации.ТекстHTML = ТекстHTMLПоШаблонуДисплеяПокупателя(ПараметрыПодключения, Параметры);
	// Текст на обычный дисплей покупателя
	Если ПустаяСтрока(ПараметрыОперации.СтрокиТекста) Тогда
		ДанныеОперации.СтрокиТекста = НСтр("ru='ПЛАТЕЖНАЯ ОПЕРАЦИЯ'") + Символы.ПС + Параметры.Операция;
	КонецЕсли;

КонецПроцедуры

Функция ВывестиСдачу(ПараметрыОперации)
	
	Результат = (ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно
		Или ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации);
	Результат = Результат И ПараметрыОперации.НаличнаяОплата И ПараметрыОперации.Сдача > 0;
	Возврат Результат;
	
КонецФункции

Функция ТекстТипаПлатежнойСистемы(Знач ПараметрыОперации)
	
	ТипПлатежнойСистемы = "";
	Если ПараметрыОперации.НаличнаяОплата Тогда
		Если ПараметрыОперации.Возврат Тогда
			ТипПлатежнойСистемы = НСтр("ru='НАЛИЧНЫЕ'"); 
		Иначе
			ТипПлатежнойСистемы = НСтр("ru='НАЛИЧНАЯ ОПЛАТА'"); 
		КонецЕсли;
	ИначеЕсли Не ПустаяСтрока(ПараметрыОперации.ТипПлатежнойСистемы) Тогда
		ТипПлатежнойСистемы = Строка(ПараметрыОперации.ТипПлатежнойСистемы)
	Иначе
		Если ПараметрыОперации.Возврат Тогда
			ТипПлатежнойСистемы = НСтр("ru='БЕЗНАЛИЧНЫЙ ВОЗВРАТ'"); 
		Иначе
			ТипПлатежнойСистемы = НСтр("ru='БЕЗНАЛИЧНАЯ ОПЛАТА'");      
		КонецЕсли;
	КонецЕсли;
	Возврат ТипПлатежнойСистемы;

КонецФункции

Функция ТекстСтатуса(Знач ПараметрыОперации)
	
	СтатусТекст = "";
	Если ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ВыполненоУспешно Тогда
		СтатусТекст = НСтр("ru='УСПЕШНО'");
	ИначеЕсли ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОперацияНеВыполнена Тогда
		СтатусТекст = НСтр("ru='ОТКАЗ'");
	ИначеЕсли ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.ОжиданиеОперации Тогда
		Если ПараметрыОперации.Возврат Тогда
			СтатусТекст = НСтр("ru='ОЖИДАНИЕ ВОЗВРАТА ОПЛАТЫ'");
		Иначе
			СтатусТекст = НСтр("ru='ОЖИДАНИЕ ОПЛАТЫ'");
		КонецЕсли;
	ИначеЕсли ПараметрыОперации.СтатусОперации = Перечисления.СтатусОперацииНаДисплее.Информация Тогда
		СтатусТекст = НСтр("ru='ИНФОРМАЦИЯ'");
	КонецЕсли;
	Возврат СтатусТекст;

КонецФункции

Функция СтрокаВыравнивания(Выравнивание)
	
	Если Выравнивание = ГоризонтальноеПоложение.Лево Тогда 
		Результат = "align=""left""";
	ИначеЕсли Выравнивание = ГоризонтальноеПоложение.Право Тогда 
		Результат = "align=""right""";
	Иначе
		Результат = "align=""center""";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФорматЧисла(Знач ДисплейОтображаетHTML)
	
	Если ДисплейОтображаетHTML Тогда
		ФорматЧисла = "ЧДЦ=2; ЧРД=.; ЧН=0.00";
	Иначе
		ФорматЧисла = "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0";
	КонецЕсли;
	
	Возврат ФорматЧисла;
	
КонецФункции

Функция ФорматЧислаТаблицы(Знач ДисплейОтображаетHTML)
	
	Если ДисплейОтображаетHTML Тогда
		ФорматЧислаТаблица = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	Иначе
		ФорматЧислаТаблица = "ЧРД=.;ЧЦ=12;ЧДЦ=2;ЧН=0.00;ЧГ=0";
	КонецЕсли;
	
	Возврат ФорматЧислаТаблица;
	
КонецФункции

Функция КартинкаQRКодаBase64(Знач ЗначениеQRКода, Знач Размер)
	
	ПараметрыШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ПараметрыШтрихкода.Ширина = Размер;
	ПараметрыШтрихкода.Высота = Размер;
	ПараметрыШтрихкода.ТипКода = 16; // QR
	ПараметрыШтрихкода.Штрихкод = ЗначениеQRКода;
	ПараметрыШтрихкода.УбратьЛишнийФон = Истина;
	РезультатШтрихкод = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыШтрихкода);
	КартинкаBase64 = Base64Строка(РезультатШтрихкод.ДвоичныеДанные);
	Возврат КартинкаBase64;

КонецФункции

#КонецОбласти

// -- НеМобильноеПриложение 

#КонецОбласти