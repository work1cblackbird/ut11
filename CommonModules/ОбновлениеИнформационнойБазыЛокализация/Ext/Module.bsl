#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "Локализация" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", "");
	Описание.Версия = "2.5.20.68";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроек(Параметры) Экспорт
	
	//++ Локализация
	
	Объекты = Параметры.ОбъектыСНачальнымЗаполнением;
	
	ЭлектронноеВзаимодействие.ПриОпределенииНастроекОбновленияИнформационнойБазы(Параметры);
	
	
	//-- Локализация
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	//++ Локализация
	
	ОбновлениеИнформационнойБазыЛокализация.ПриДобавленииОбработчиковОбновленияЛокализация(Обработчики);
	
	РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СоответствияОбъектовМаркетплейсов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Константы.НастройкиСервисаПрогнозирования.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	ОрганизацииЛокализация.ДобавитьОбработчикЗаполнениеРеквизитовКрупнейшегоНалогоплательщика(Обработчики);
	
	РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ДетализацияПартийТоваровДляНДСиУСН2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииЗатратНаВыпуск.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииПроизводственныхЗатрат.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииРасходовНаСебестоимостьТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПартииТоваровОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	
	
	РегистрыСведений.НастройкиУчетаНДСПриУСН.ПриДобавленииОбработчиковОбновления(Обработчики);
		
	//-- Локализация
	
КонецПроцедуры

// Позволяет переопределить очередь отложенных обработчиков обновления, выполняемых в
// параллельном режиме. Может понадобиться, когда отложенные обработчики библиотек
// обрабатывают те же данные, что и обработчики основной конфигурации.
// Например, есть обработчики библиотеки и конфигурации, которые обрабатывают справочник
// Контрагенты, при этом обработчик конфигурации должен выполниться раньше, чтобы данные
// обновились корректно. В таком случае в данной процедуре нужно указать новый номер очереди
// для обработчика библиотеки, который будет больше, чем у обработчика конфигурации.
//
// Параметры:
//  ОбработчикИОчередь - Соответствие - где:
//    * Ключ     - Строка - полное имя обработчика обновления.
//    * Значение - Число  - номер очереди, который необходимо установить обработчику.
//
Процедура ПриФормированииОчередейОтложенныхОбработчиков(ОбработчикИОчередь) Экспорт

	//++ Локализация
	//-- Локализация
	Возврат;

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура:
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	
КонецПроцедуры

// см. ОбновлениеИнформационнойБазыПереопределяемый.ПриЗаполненииОбъектовПланируемыхКУдалению
//
Процедура ПриЗаполненииОбъектовПланируемыхКУдалению(Объекты) Экспорт
	
	//++ Локализация
	
	
	ОбновлениеИнформационнойБазы.ДобавитьОбъектПланируемыйКУдалению(Объекты,
		"Документ.УдалитьВводОстатковПрослеживаемыхИмпортныхТоваров");
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных.
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	//++ Локализация
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.3.1.13",
		"Роль.БазовыеПраваЕГАИС",
		"Роль.ВыполнениеСинхронизацииСЕГАИС",
		ОписаниеПодсистемы.Имя);

	//-- Локализация
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УП (ERP).
//
Процедура ПервыйЗапуск() Экспорт
	
	//++ Локализация
	Справочники.КодыВалютныхОпераций.ЗаполнитьПредопределенныеЭлементы();
	ИнициализироватьПоддержкаПлатежейРФ();

	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

//++ Локализация

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияЛокализация(Обработчики) Экспорт

#Область ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = "";

#КонецОбласти


КонецПроцедуры

Процедура ИнициализироватьПоддержкаПлатежейРФ() Экспорт
	
	Если Константы.ПоддержкаПлатежейРФ.Получить() = Ложь Тогда
		МенеджерЗначения = Константы.ПоддержкаПлатежейРФ.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
//-- Локализация

#КонецОбласти

#КонецОбласти
