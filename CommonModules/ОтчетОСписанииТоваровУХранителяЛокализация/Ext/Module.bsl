
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
		УчетПрослеживаемыхТоваровЛокализация.ПроверитьДанныеПрослеживаемостиНомеровГТД(Объект, Объект.Товары, Объект.Дата);
	
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	
	// Акт о списании товаров (ТОРГ-16)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТОРГ16";
	КомандаПечати.Идентификатор = "ТОРГ16";
	КомандаПечати.Представление = НСтр("ru = 'Акт о списании товаров (ТОРГ-16)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

//++ Локализация

// Функция получает данные для формирования печатной формы ТОРГ-16.
//
//	Параметры:
//		ПараметрыПечати   - Структура                                - структура дополнительных параметров печати.
//		ДокументОснование - ДокументСсылка.ОтчетОСписанииТоваровУХранителя - ссылка на документ, который нужно распечатать.
//
//	Возвращаемое значение:
//		Структура - структура с данными для печати формы ТОРГ-16.
//
Функция ПолучитьДанныеДляПечатнойФормыТОРГ16(ПараметрыПечати, ДокументОснование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросПредварительныхДанных = Новый Запрос;
	ЗапросПредварительныхДанных.Текст =
	"ВЫБРАТЬ
	|	СписаниеТоваров.Дата        КАК ДатаИсправительногоДокумента,
	|	ЕСТЬNULL(СписаниеТоваров.ИсправляемыйДокумент.Дата, СписаниеТоваров.Дата) КАК ДатаДокумента,
	|	СписаниеТоваров.Организация КАК Организация,
	|	СписаниеТоваров.Партнер     КАК Партнер,
	|	СписаниеТоваров.ИсточникИнформацииОЦенахДляПечати КАК ИсточникИнформацииОЦенахДляПечати,
	|	СписаниеТоваров.ВидЦены     КАК ВидЦен,
	|	РасчетСебестоимостиТоваровОрганизации.Ссылка.ПредварительныйРасчет КАК ПредварительныйРасчет,
	|	СписаниеТоваров.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ОтчетОСписанииТоваровУХранителя КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
	|		ПО СписаниеТоваров.Организация = РасчетСебестоимостиТоваровОрганизации.Организация
	|			И РасчетСебестоимостиТоваровОрганизации.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(СписаниеТоваров.Дата, МЕСЯЦ) И КОНЕЦПЕРИОДА(СписаниеТоваров.Дата, МЕСЯЦ)
	|			И РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ДокументОснование";
	
	ЗапросПредварительныхДанных.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ПредварительныеДанныеРезультат = ЗапросПредварительныхДанных.Выполнить().Выбрать();
	
	ПредварительныеДанныеРезультат.Следующий();
	
	ДатаДокумента                     = ПредварительныеДанныеРезультат.ДатаДокумента;
	ДатаИсправительногоДокумента      = ПредварительныеДанныеРезультат.ДатаИсправительногоДокумента;
	Партнер                           = ПредварительныеДанныеРезультат.Партнер;
	Организация                       = ПредварительныеДанныеРезультат.Организация;
	ИсточникИнформацииОЦенахДляПечати = ПредварительныеДанныеРезультат.ИсточникИнформацииОЦенахДляПечати;
	ВидЦены                           = ПредварительныеДанныеРезультат.ВидЦен;
	ПредварительныйРасчет             = ПредварительныеДанныеРезультат.ПредварительныйРасчет;
	ХозяйственнаяОперация             = ПредварительныеДанныеРезультат.ХозяйственнаяОперация;
	
	ДопКолонка             = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	ИспользуетсяДопКолонка = ЗначениеЗаполнено(ДопКолонка);
	
	// Ответственные лица в печатной форме
	СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация,
																							КонецДня(ДатаДокумента));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен",               ДатаИсправительногоДокумента);
	Запрос.УстановитьПараметр("ТекущийДокумент",       ДокументОснование);
	Запрос.УстановитьПараметр("Руководитель",          СтруктураОтветственных.Руководитель);
	Запрос.УстановитьПараметр("ДолжностьРуководителя", СтруктураОтветственных.РуководительДолжность);
	Запрос.УстановитьПараметр("ГлавныйБухгалтер",      СтруктураОтветственных.ГлавныйБухгалтер);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДокументСписания.Ссылка      КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                 КАК ДокументОснование,
	|	ДокументСписания.Номер       КАК Номер,
	|	ДокументСписания.Дата        КАК ДатаДокумента,
	|	ДокументСписания.Партнер     КАК Партнер,
	|	ДокументСписания.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ДокументСписания.Организация.НаименованиеСокращенное) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ДокументСписания.Организация.КодПоОКПО)               КАК ОрганизацияПоОКПО,
	|	ПРЕДСТАВЛЕНИЕ(ДокументСписания.Организация.Префикс)                 КАК Префикс,
	|	ДокументСписания.Подразделение                КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ДокументСписания.Подразделение) КАК ПодразделениеПредставление,
	|	НЕОПРЕДЕЛЕНО                                  КАК Кладовщик,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДолжностьКладовщика,
	|	ДокументСписания.Ответственный.ФизическоеЛицо КАК Ответственный,
	|	&Руководитель           КАК Руководитель,
	|	&ДолжностьРуководителя  КАК ДолжностьРуководителя,
	|	&ГлавныйБухгалтер       КАК ГлавныйБухгалтер,
	|	""""                    КАК ОснованиеДата,
	|	""""                    КАК НомерОснования
	|ИЗ
	|	Документ.ОтчетОСписанииТоваровУХранителя КАК ДокументСписания
	|ГДЕ
	|	ДокументСписания.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНедостачЗаСчетКомитента Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыСписания.НомерСтроки                                  КАК НомерСтроки,
		|	&ТекстЗапросаТоварКод                                       КАК ТоварКод,
		|	ТоварыСписания.Номенклатура                                 КАК Номенклатура,
		|	ТоварыСписания.Номенклатура.НаименованиеПолное              КАК НоменклатураПредставление,
		|	ТоварыСписания.Характеристика.НаименованиеПолное            КАК ХарактеристикаПредставление,
		|	ТоварыСписания.Номенклатура.ЕдиницаИзмерения.Код            КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ПРЕДСТАВЛЕНИЕ(ТоварыСписания.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	&ТекстЗапросаВес                                            КАК МассаОдногоМеста,
		|	ТоварыСписания.Количество                                   КАК КоличествоМест,
		|	ТоварыСписания.Цена                                         КАК Цена,
		|	ТоварыСписания.Сумма                                        КАК Сумма
		|ИЗ
		|	Документ.ОтчетОСписанииТоваровУХранителя.Товары КАК ТоварыСписания
		|ГДЕ
		|	ТоварыСписания.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыСписания.НомерСтроки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаВес",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
										"ТоварыСписания.Номенклатура.ЕдиницаИзмерения",
										"ТоварыСписания.Номенклатура"));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаТоварКод",
									"ТоварыСписания.Номенклатура." + ?(ИспользуетсяДопКолонка, ДопКолонка, "Код"));
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидЦен", ВидЦены);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		РезультатПоШапке    = Результаты[0];
		РезультатПоДатам    = Результаты[1];
		РезультатПоТоварам  = Результаты[1];
		РезультатКурсыВалют = ТаблицаКурсовВалют(ДокументОснование);
	
	ИначеЕсли ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен Тогда
		
		ИспользуетсяЦенообразование25 = 
							ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ДатаИсправительногоДокумента);
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыСписания.НомерСтроки                                  КАК НомерСтроки,
		|	&ТекстЗапросаТоварКод                                       КАК ТоварКод,
		|	ТоварыСписания.Номенклатура                                 КАК Номенклатура,
		|	ТоварыСписания.Характеристика                               КАК Характеристика,
		|	ТоварыСписания.Номенклатура.НаименованиеПолное              КАК НоменклатураПредставление,
		|	ТоварыСписания.Характеристика.НаименованиеПолное            КАК ХарактеристикаПредставление,
		|	ТоварыСписания.Номенклатура.ЕдиницаИзмерения.Код            КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ПРЕДСТАВЛЕНИЕ(ТоварыСписания.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	&ТекстЗапросаВес                                            КАК МассаОдногоМеста,
		|	&ПоляДляЦенообразованияВыборка,
		|	ТоварыСписания.Количество                                   КАК КоличествоМест
		|ПОМЕСТИТЬ ТоварыСписания
		|ИЗ
		|	Документ.ОтчетОСписанииТоваровУХранителя.Товары КАК ТоварыСписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ВидыНоменклатуры.Ссылка = ТоварыСписания.Номенклатура.ВидНоменклатуры
		|ГДЕ
		|	ТоварыСписания.Ссылка = &ТекущийДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыСписания.НомерСтроки                                  КАК НомерСтроки,
		|	ТоварыСписания.ТоварКод                                     КАК ТоварКод,
		|	ТоварыСписания.Номенклатура                                 КАК Номенклатура,
		|	ТоварыСписания.НоменклатураПредставление                    КАК НоменклатураПредставление,
		|	ТоварыСписания.ХарактеристикаПредставление                  КАК ХарактеристикаПредставление,
		|	ТоварыСписания.ЕдиницаИзмеренияКодПоОКЕИ                    КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ТоварыСписания.ЕдиницаИзмеренияПредставление                КАК ЕдиницаИзмеренияПредставление,
		|	ТоварыСписания.МассаОдногоМеста                             КАК МассаОдногоМеста,
		|	ТоварыСписания.КоличествоМест                               КАК КоличествоМест,
		|	ВЫБОР
		|		КОГДА НЕ &ТекстЗапросаКоэффициентУпаковки ЕСТЬ NULL
		|				И &ТекстЗапросаКоэффициентУпаковки <> 0
		|			ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ                                                       КАК Цена
		|ИЗ
		|	ТоварыСписания КАК ТоварыСписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ &ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатуры
		|		ПО 
		|			&УсловиеСоедиенияЦеныНоменклатурыСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыСписания.НомерСтроки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаКоэффициентУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
										"ЦеныНоменклатуры.Упаковка",
										"ЦеныНоменклатуры.Номенклатура"));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаВес",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
										"ТоварыСписания.Номенклатура.ЕдиницаИзмерения",
										"ТоварыСписания.Номенклатура"));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаТоварКод",
									"ТоварыСписания.Номенклатура." + ?(ИспользуетсяДопКолонка, ДопКолонка, "Код"));
		
		НастройкаЦенообразования = ЦенообразованиеКлиентСервер.НастройкиДляВременнойТаблицыСДополнениемДляЦенообразования();
		НастройкаЦенообразования.ИсточникТоваров = "ТоварыСписания";
		НастройкаЦенообразования.ПолеУпаковка = "";
		
		ТекстЗамены = ЦенообразованиеКлиентСервер.ТекстПолейДляЦенообразования(НастройкаЦенообразования,
																				,
																				ИспользуетсяЦенообразование25);
		Если ЗначениеЗаполнено(ТекстЗамены) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка", ТекстЗамены);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляДляЦенообразованияВыборка,", "");
		КонецЕсли;

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ЦеныНоменклатурыСрезПоследних",
			ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры(
								"ТоварыСписания",
								"&ДатаЦен",
								Новый Структура("ВТаблице", "&ВидЦен"), ИспользуетсяЦенообразование25));
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&УсловиеСоедиенияЦеныНоменклатурыСрезПоследних",
			ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
			"ТоварыСписания",
			"ЦеныНоменклатуры",,ИспользуетсяЦенообразование25));

		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидЦен", ВидЦены);
		
		Результаты = Запрос.ВыполнитьПакет();
		
		РезультатПоШапке    = Результаты[0];
		РезультатПоДатам    = Результаты[2];
		РезультатПоТоварам  = Результаты[2];
		РезультатКурсыВалют = ТаблицаКурсовВалют(ДокументОснование);
		
	ИначеЕсли ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости Тогда
		
		Если ПредварительныйРасчет = Null Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось получить цены по себестоимости для документа %Документ%: на %Период% не произведен расчет себестоимости.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДокументОснование);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Формат(НачалоМесяца(ДатаИсправительногоДокумента),"ДЛФ=DD"));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Партнер",     Партнер);
		
		Если ПредварительныйРасчет Тогда
			
			ТекстСообщения = НСтр("ru = 'При печати документа %Документ% использовались данные предварительного расчета себестоимости.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", ДокументОснование);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	СписываемыеВидыЗапасов.НомерСтроки КАК НомерСтроки,
			|	КлючиАналитики.Номенклатура        КАК Номенклатура,
			|	КлючиАналитики.Характеристика      КАК Характеристика,
			|	СписываемыеВидыЗапасов.ВидЗапасов  КАК ВидЗапасов,
			|	КлючиАналитики.Ссылка              КАК КлючАналитикиУчетаНоменклатуры,
			|	СписываемыеВидыЗапасов.Количество  КАК Количество
			|ПОМЕСТИТЬ ТаблицаКлючейАналитики
			|ИЗ
			|	Документ.ОтчетОСписанииТоваровУХранителя.ВидыЗапасов КАК СписываемыеВидыЗапасов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
			|		ПО КлючиАналитики.Ссылка = СписываемыеВидыЗапасов.АналитикаУчетаНоменклатуры
			|			И КлючиАналитики.МестоХранения = &Партнер
			|ГДЕ
			|	СписываемыеВидыЗапасов.Ссылка = &ТекущийДокумент
			|	И СписываемыеВидыЗапасов.Ссылка.Проведен
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючАналитикиУчетаНоменклатуры,
			|	ВидЗапасов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЦеныНоменклатуры.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
			|	ЦеныНоменклатуры.Организация                КАК Организация,
			|	ЦеныНоменклатуры.ВидЗапасов                 КАК ВидЗапасов,
			|	(ЦеныНоменклатуры.СтоимостьРегл
			|		+ ЦеныНоменклатуры.ДопРасходыРегл
			|		+ ЦеныНоменклатуры.ТрудозатратыРегл
			|		+ ЦеныНоменклатуры.ПостатейныеПостоянныеРегл
			|		+ ЦеныНоменклатуры.ПостатейныеПеременныеРегл) КАК Цена
			|ПОМЕСТИТЬ ЦеныНоменклатуры
			|ИЗ
			|	РегистрСведений.СтоимостьТоваров.СрезПоследних(КОНЕЦПЕРИОДА(&ДатаЦен, ДЕНЬ),
			|		(АналитикаУчетаНоменклатуры, Организация, ВидЗапасов) В
			|			(ВЫБРАТЬ
			|				Таблица.КлючАналитикиУчетаНоменклатуры,
			|				&Организация,
			|				Таблица.ВидЗапасов
			|			ИЗ
			|				ТаблицаКлючейАналитики КАК Таблица)) КАК ЦеныНоменклатуры
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	АналитикаУчетаНоменклатуры,
			|	ВидЗапасов,
			|	Организация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТоварыСписания.НомерСтроки                                  КАК НомерСтроки,
			|	ТоварыСписания.Номенклатура                                 КАК Номенклатура,
			|	&НоменклатураКод                                            КАК ТоварКод,
			|	ТоварыСписания.Номенклатура.НаименованиеПолное              КАК НоменклатураПредставление,
			|	ТоварыСписания.Характеристика.НаименованиеПолное            КАК ХарактеристикаПредставление,
			|	ТоварыСписания.Номенклатура.ЕдиницаИзмерения.Код            КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	ПРЕДСТАВЛЕНИЕ(ТоварыСписания.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
			|	&ТекстЗапросаВес                                            КАК МассаОдногоМеста,
			|	ТоварыСписания.Количество                                   КАК КоличествоМест,
			|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)                          КАК Цена
			|ИЗ
			|	ТаблицаКлючейАналитики КАК ТоварыСписания
			|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
			|		ПО ТоварыСписания.КлючАналитикиУчетаНоменклатуры = ЦеныНоменклатуры.АналитикаУчетаНоменклатуры
			|			И ТоварыСписания.ВидЗапасов = ЦеныНоменклатуры.ВидЗапасов
			|			И ЦеныНоменклатуры.Организация = &Организация
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТоварыСписания.НомерСтроки";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
										"&НоменклатураКод",
										"ТоварыСписания.Номенклатура." + ?(ИспользуетсяДопКолонка, ДопКолонка, "Код"));
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
										"&ТекстЗапросаВес",
										Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
											"ТоварыСписания.Номенклатура.ЕдиницаИзмерения",
											"ТоварыСписания.Номенклатура"));
			
			Запрос.Текст = ТекстЗапроса;
			
			Результаты = Запрос.ВыполнитьПакет();
			
			РезультатПоШапке    = Результаты[0];
			РезультатПоДатам    = Результаты[3];
			РезультатПоТоварам  = Результаты[3];
			РезультатКурсыВалют = ТаблицаКурсовВалют(ДокументОснование);
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	СписываемыеВидыЗапасов.НомерСтроки                               КАК НомерСтроки,
			|	СписываемыеВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
			|	СписываемыеВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
			|	СписываемыеВидыЗапасов.ВидЗапасов                                КАК ВидЗапасов,
			|	СписываемыеВидыЗапасов.АналитикаУчетаНоменклатуры                КАК КлючАналитикиУчетаНоменклатуры,
			|	СписываемыеВидыЗапасов.Количество                                КАК Количество
			|ПОМЕСТИТЬ ТаблицаИнвентаризации
			|ИЗ
			|	Документ.ОтчетОСписанииТоваровУХранителя.ВидыЗапасов КАК СписываемыеВидыЗапасов
			|ГДЕ
			|	СписываемыеВидыЗапасов.Ссылка = &ТекущийДокумент
			|	И СписываемыеВидыЗапасов.Ссылка.Проведен
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючАналитикиУчетаНоменклатуры,
			|	ВидЗапасов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаИнвентаризации.КлючАналитикиУчетаНоменклатуры КАК КлючАналитикиУчетаНоменклатуры,
			|	ТаблицаИнвентаризации.ВидЗапасов                     КАК ВидЗапасов,
			|	ВЫБОР
			|		КОГДА СУММА(ЕСТЬNULL(СебестоимостьТоваровПоРегистратору.Количество, 0)) = 0
			|			ТОГДА 0
			|		ИНАЧЕ СУММА(ЕСТЬNULL(СебестоимостьТоваровПоРегистратору.СтоимостьРегл, 0)
			|				+ ЕСТЬNULL(СебестоимостьТоваровПоРегистратору.ДопРасходыРегл, 0)
			|				+ ЕСТЬNULL(СебестоимостьТоваровПоРегистратору.ТрудозатратыРегл, 0)
			|				+ ЕСТЬNULL(СебестоимостьТоваровПоРегистратору.ПостатейныеПостоянныеРегл, 0)
			|				+ ЕСТЬNULL(СебестоимостьТоваровПоРегистратору.ПостатейныеПеременныеРегл, 0))
			|			/ СУММА(СебестоимостьТоваровПоРегистратору.Количество)
			|	КОНЕЦ                                                КАК Цена
			|ПОМЕСТИТЬ ТаблицаЦен
			|ИЗ
			|	ТаблицаИнвентаризации КАК ТаблицаИнвентаризации
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваровПоРегистратору
			|		ПО ТаблицаИнвентаризации.КлючАналитикиУчетаНоменклатуры = СебестоимостьТоваровПоРегистратору.АналитикаУчетаНоменклатуры
			|			И ТаблицаИнвентаризации.ВидЗапасов = СебестоимостьТоваровПоРегистратору.ВидЗапасов
			|			И СебестоимостьТоваровПоРегистратору.Регистратор = &ТекущийДокумент
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаИнвентаризации.КлючАналитикиУчетаНоменклатуры,
			|	СебестоимостьТоваровПоРегистратору.АналитикаУчетаНоменклатуры,
			|	ТаблицаИнвентаризации.ВидЗапасов
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	КлючАналитикиУчетаНоменклатуры,
			|	ВидЗапасов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаИнвентаризации.НомерСтроки                       КАК НомерСтроки,
			|	ТаблицаИнвентаризации.Номенклатура                      КАК Номенклатура,
			|	&НоменклатураКод                                        КАК ТоварКод,
			|	ТаблицаИнвентаризации.Номенклатура.НаименованиеПолное   КАК НоменклатураПредставление,
			|	ВЫРАЗИТЬ(ТаблицаИнвентаризации.Характеристика КАК Справочник.ХарактеристикиНоменклатуры).НаименованиеПолное КАК ХарактеристикаПредставление,
			|	ТаблицаИнвентаризации.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
			|	ПРЕДСТАВЛЕНИЕ(ВЫРАЗИТЬ(ТаблицаИнвентаризации.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
			|	&ТекстЗапросаВес                                        КАК МассаОдногоМеста,
			|	ТаблицаИнвентаризации.Количество                        КАК КоличествоМест,
			|	ТаблицаЦен.Цена                                         КАК Цена
			|ИЗ
			|	ТаблицаИнвентаризации КАК ТаблицаИнвентаризации
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаЦен КАК ТаблицаЦен
			|		ПО ТаблицаИнвентаризации.КлючАналитикиУчетаНоменклатуры = ТаблицаЦен.КлючАналитикиУчетаНоменклатуры
			|			И ТаблицаИнвентаризации.ВидЗапасов = ТаблицаЦен.ВидЗапасов
			|
			|УПОРЯДОЧИТЬ ПО
			|	ТаблицаИнвентаризации.НомерСтроки";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
										"&НоменклатураКод",
										"ТаблицаИнвентаризации.Номенклатура." + ?(ИспользуетсяДопКолонка, ДопКолонка, "Код"));
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
										"&ТекстЗапросаВес",
										Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
											"ТаблицаИнвентаризации.Номенклатура.ЕдиницаИзмерения",
											"ТаблицаИнвентаризации.Номенклатура"));
			
			Запрос.Текст = ТекстЗапроса;
			
			Результаты = Запрос.ВыполнитьПакет();
			
			РезультатПоШапке    = Результаты[0];
			РезультатПоДатам    = Результаты[3];
			РезультатПоТоварам  = Результаты[3];
			РезультатКурсыВалют = ТаблицаКурсовВалют(ДокументОснование);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("РезультатПоШапке",    РезультатПоШапке);
	СтруктураВозврата.Вставить("РезультатПоДатам",    РезультатПоДатам);
	СтруктураВозврата.Вставить("РезультатПоТоварам",  РезультатПоТоварам);
	СтруктураВозврата.Вставить("РезультатКурсыВалют", РезультатКурсыВалют);
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция формирует таблицу курсов валют по дням.
//
//	Параметры:
//		МассивДокументов - Массив - массив ссылок на документы, на даты которых нужно получить курсы валют.
//
Функция ТаблицаКурсовВалют(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеТоваров.Ссылка                    КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(СписаниеТоваров.Дата, ДЕНЬ) КАК Дата,
	|	СписаниеТоваров.ВидЦены.ВалютаЦены        КАК Валюта,
	|	СписаниеТоваров.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ИЗ
	|	Документ.ОтчетОСписанииТоваровУХранителя КАК СписаниеТоваров
	|ГДЕ
	|	СписаниеТоваров.Ссылка В(&МассивДокументов)
	|	И СписаниеТоваров.ВидЦены.ВалютаЦены <> СписаниеТоваров.Ссылка.Организация.ВалютаРегламентированногоУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюта,
	|	Дата";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Ссылка",    Новый ОписаниеТипов("ДокументСсылка.ОтчетОСписанииТоваровУХранителя"));
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЧислитель", Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЗнаменатель", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата, Выборка.ВалютаРегламентированногоУчета);
		НоваяСтрока.КурсЧислитель = КурсыВалюты.КурсЧислитель;
		НоваяСтрока.КурсЗнаменатель = КурсыВалюты.КурсЗнаменатель;
	КонецЦикла;
	
	Возврат ТаблицаКурсовВалют;
	
КонецФункции

//-- Локализация

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация


	//-- Локализация
	
КонецПроцедуры

//++ Локализация


//-- Локализация

#КонецОбласти

#Область Прочее

#КонецОбласти

//++ Локализация


//-- Локализация

#КонецОбласти
