// strict-types

#Область СлужебныйПрограммныйИнтерфейс

#Область КонтрактМенеджераДействийЭДО

// Параметры:
//  МенеджерыДействийЭДО - Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор интеграции ЭДО.
//  * Значение - ОбщийМодуль
Процедура ПриОпределенииМенеджеровДействийЭДО(МенеджерыДействийЭДО) Экспорт
	
	МенеджерыДействийЭДО.Вставить(
		ИнтеграцияОблачногоЭДОКлиентСервер.ИдентификаторМенеджераДействийЭДО(),
		ИнтеграцияОблачногоЭДОКлиент);
	
КонецПроцедуры

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат: см. ИнтерфейсДокументовЭДОКлиент.НовыйРезультатОбработкиДействийИнтеграцииЭДО
//  РезультатВыполненияДействий - см. ИнтеграцияОблачногоЭДО.РезультатВыполненияДействийЭДОДляКлиента
//  СостояниеВыполненияДействий - см. НовоеСостояниеВыполненияДействийЭДО
//  ИсходныйНаборДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
Процедура ОбработатьРезультатВыполненияДействийЭДО(ОповещениеОЗавершении, РезультатВыполненияДействий, СостояниеВыполненияДействий, ИсходныйНаборДействийЭДО, ПаролиСертификатов) Экспорт
	
	КонтекстОбработки = НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО();
	КонтекстОбработки.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстОбработки.АсинхронныеОперации = РезультатВыполненияДействий.АсинхронныеОперации;
	КонтекстОбработки.РезультатыДействий = РезультатВыполненияДействий.РезультатыДействий;
	КонтекстОбработки.ИсходныйНаборДействийЭДО = ИсходныйНаборДействийЭДО;
	КонтекстОбработки.КонтекстДиагностики = РезультатВыполненияДействий.КонтекстДиагностики;
	КонтекстОбработки.ПаролиСертификатов = ПаролиСертификатов;
	
	Если ЗначениеЗаполнено(СостояниеВыполненияДействий) Тогда
		КонтекстОбработки.СостояниеВыполненияДействий = СостояниеВыполненияДействий;
	Иначе
		КонтекстОбработки.СостояниеВыполненияДействий = НовоеСостояниеВыполненияДействийЭДО();
	КонецЕсли;
	
	АсинхронныеОперации = КонтекстОбработки.АсинхронныеОперации;
	
	Если Не ЗначениеЗаполнено(АсинхронныеОперации) Тогда
		
		ОбработатьРезультатВыполненияДействийЭДОПослеОжиданияДействийЭДО(Новый Соответствие, КонтекстОбработки);
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияДействийЭДОПослеОжиданияДействийЭДО",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстОбработки);
	
	ОжидатьВыполненияДействийЭДО(Оповещение, АсинхронныеОперации, КонтекстОбработки.КонтекстДиагностики);
	
КонецПроцедуры

#КонецОбласти

#Область Приглашения

// Отправляет приглашения через сервис облачного ЭДО.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
Процедура ОтправитьПриглашения(ОповещениеОЗавершении, Приглашения) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьПриглашенияПослеАвторизацииВСервисеЭДО", ЭтотОбъект,
		ПараметрыДействияСПриглашениями(ОповещениеОЗавершении, Приглашения));
	
	АвторизоватьсяВСервисеЭДОПоПриглашениям(Оповещение, Приглашения);
	
КонецПроцедуры

// Принимает приглашения через сервис облачного ЭДО.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  Приглашения - Массив из см. ПриглашенияЭДОКлиент.НовоеВходящееПриглашение
Процедура ПринятьПриглашения(ОповещениеОЗавершении, Приглашения) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПринятьПриглашенияПослеАвторизацииВСервисеЭДО", ЭтотОбъект,
		ПараметрыДействияСПриглашениями(ОповещениеОЗавершении, Приглашения));
	
	АвторизоватьсяВСервисеЭДОПоПриглашениям(Оповещение, Приглашения);
	
КонецПроцедуры

// Отклоняет приглашения через сервис облачного ЭДО.
// 
// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  Приглашения - Массив из см. ПриглашенияЭДОКлиент.НовоеВходящееПриглашение
Процедура ОтклонитьПриглашения(ОповещениеОЗавершении, Приглашения) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ОтклонитьПриглашенияПослеАвторизацииВСервисеЭДО", ЭтотОбъект,
		ПараметрыДействияСПриглашениями(ОповещениеОЗавершении, Приглашения));
	
	АвторизоватьсяВСервисеЭДОПоПриглашениям(Оповещение, Приглашения);
	
КонецПроцедуры

#КонецОбласти

#Область УчетныеЗаписиЭДО

// Возвращаемое значение:
//  Структура:
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * ИдентификаторОрганизации - Строка
//  * ОператорЭДО - Строка
//  * АдресОрганизации - Строка
//  * КодНалоговогоОргана - Строка
//  * ЭлектроннаяПочта - Строка
//  * СертификатДляПодписания - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * СертификатыДляРегистрации - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Доверенности - Соответствие из КлючИЗначение:
//  ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Функция НовыеПараметрыРегистрацииСертификатовВЭДО() Экспорт
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Организация", Неопределено);
	ПараметрыРегистрации.Вставить("ИдентификаторОрганизации", "");
	ПараметрыРегистрации.Вставить("ОператорЭДО", "");
	ПараметрыРегистрации.Вставить("АдресОрганизации", "");
	ПараметрыРегистрации.Вставить("КодНалоговогоОргана", "");
	ПараметрыРегистрации.Вставить("ЭлектроннаяПочта", "");
	ПараметрыРегистрации.Вставить("СертификатДляПодписания",
		ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка"));
	ПараметрыРегистрации.Вставить("СертификатыДляРегистрации", Новый Массив);
	ПараметрыРегистрации.Вставить("Доверенности", Новый Соответствие);
	Возврат ПараметрыРегистрации;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ПараметрыРегистрации - см. НовыеПараметрыРегистрацииСертификатовВЭДО
//  ФормаВладелец - ФормаКлиентскогоПриложения
Процедура НачатьОтправкуСертификатовДляРегистрацииВЭДО(ОповещениеОЗавершении, ПараметрыРегистрации, ФормаВладелец) Экспорт
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДОВФоне(
		ПараметрыРегистрации, ФормаВладелец.УникальныйИдентификатор);

	КонтекстРегистрации = НовыйКонтекстРегистрацииСертификатовВЭДО();
	КонтекстРегистрации.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстРегистрации.ФормаВладелец = ФормаВладелец;
	КонтекстРегистрации.Доверенности = ПараметрыРегистрации.Доверенности;
	КонтекстРегистрации.Организация = ПараметрыРегистрации.Организация;
	
	Оповещение = Новый ОписаниеОповещения("ПодписатьДанныеНаРегистрациюВЭДОПослеПодготовки",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстРегистрации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
// * Успех - Булево
// * СертификатыУжеЗарегистрированы - Булево
// * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
// * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
// * ИдентификаторЗаявки - Строка
Функция НовыйРезультатОтправкиСертификатовДляРегистрацииВЭДО() Экспорт
	РезультатОтправки = Новый Структура;
	РезультатОтправки.Вставить("Успех", Ложь);
	РезультатОтправки.Вставить("СертификатыУжеЗарегистрированы", Ложь);
	РезультатОтправки.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	РезультатОтправки.Вставить("ПаролиСертификатов", Новый Соответствие);
	РезультатОтправки.Вставить("ИдентификаторЗаявки", "");
	Возврат РезультатОтправки;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ИдентификаторыЗаявокПоОрганизациям - Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.Организация
//  * Значение - Массив из Строка
//  ФормаВладелец - ФормаКлиентскогоПриложения
Процедура НачатьПолучениеРезультатаРегистрацииСертификатовЭДО(ОповещениеОЗавершении, ИдентификаторыЗаявокПоОрганизациям, ФормаВладелец) Экспорт
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ПроверитьОбработкуРегистрационныхПакетовЭДОВФоне(
		ИдентификаторыЗаявокПоОрганизациям, ФормаВладелец.УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатыРегистрацииСертификатовЭДО",
		ИнтеграцияОблачногоЭДОКлиент, ОповещениеОЗавершении);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторыЭДО - Соответствие из КлючИЗначение:
//  ** Ключ - Строка - идентификатор заявки.
//  ** Значение - Строка - идентификатор ЭДО.
//  * ЗаявкиВОбрабоке - Соответствие из КлючИЗначение:
//  ** Ключ - ОпределяемыйТип.Организация
//  ** Значение - Массив из Строка
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
Функция НовыйРезультатРегистрацииСертификатовВЭДО() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИдентификаторыЭДО", Новый Соответствие);
	Результат.Вставить("ЗаявкиВОбрабоке", Новый Соответствие);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * ИдентификаторУчетнойЗаписиЭДО - Строка
//  * ПараметрыУведомлений - см. УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыУведомлений
//  * ВыбранныйСертификат - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  * ФормаВладелец - Неопределено,ФормаКлиентскогоПриложения
Функция НовыеПараметрыОбновленияНастройкиУведомленийУчетнойЗаписиЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ИдентификаторУчетнойЗаписиЭДО", "");
	Параметры.Вставить("ПараметрыУведомлений", Новый Структура);
	Параметры.Вставить("ВыбранныйСертификат", Неопределено);
	Параметры.Вставить("ПаролиСертификатов", Новый Соответствие);
	Параметры.Вставить("ФормаВладелец", Неопределено);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыОбновления - см. НовыеПараметрыОбновленияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ОбновитьНастройкиУведомленийУчетнойЗаписиЭДО(ПараметрыОбновления) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОПослеАвторизацииВСервисеЭДО",
		ЭтотОбъект, ПараметрыОбновления);
	
	ПараметрыАвторизации = НовыеПараметрыАвторизацииВСервисеЭДО();
	ПараметрыАвторизации.ОповещениеОЗавершении = Оповещение;
	ПараметрыАвторизации.ИдентификаторыУчетныхЗаписейЭДО.Добавить(ПараметрыОбновления.ИдентификаторУчетнойЗаписиЭДО);
	ПараметрыАвторизации.ПаролиСертификатов = ПараметрыОбновления.ПаролиСертификатов;
	ПараметрыАвторизации.Организация = ПараметрыОбновления.Организация;
	ПараметрыАвторизации.ВыбранныйСертификат = ПараметрыОбновления.ВыбранныйСертификат;
	
	АвторизоватьсяВСервисеЭДО(ПараметрыАвторизации);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * ИдентификаторУчетнойЗаписиЭДО - Строка
//  * ВыбранныйСертификат - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  * ФормаВладелец - Неопределено,ФормаКлиентскогоПриложения
Функция НовыеПараметрыПолученияНастройкиУведомленийУчетнойЗаписиЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Параметры.Вставить("Организация", Неопределено);
	Параметры.Вставить("ИдентификаторУчетнойЗаписиЭДО", "");
	Параметры.Вставить("ВыбранныйСертификат", Неопределено);
	Параметры.Вставить("ПаролиСертификатов", Новый Соответствие);
	Параметры.Вставить("ФормаВладелец", Неопределено);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ПараметрыПолучения - см. НовыеПараметрыПолученияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ПолучитьНастройкиУведомленийУчетнойЗаписиЭДО(ПараметрыПолучения) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиУведомленийУчетнойЗаписиЭДОПослеАвторизацииВСервисеЭДО",
		ЭтотОбъект, ПараметрыПолучения);
	
	ПараметрыАвторизации = НовыеПараметрыАвторизацииВСервисеЭДО();
	ПараметрыАвторизации.ОповещениеОЗавершении = Оповещение;
	ПараметрыАвторизации.ИдентификаторыУчетныхЗаписейЭДО.Добавить(ПараметрыПолучения.ИдентификаторУчетнойЗаписиЭДО);
	ПараметрыАвторизации.ПаролиСертификатов = ПараметрыПолучения.ПаролиСертификатов;
	ПараметрыАвторизации.Организация = ПараметрыПолучения.Организация;
	ПараметрыАвторизации.ВыбранныйСертификат = ПараметрыПолучения.ВыбранныйСертификат;
	
	АвторизоватьсяВСервисеЭДО(ПараметрыАвторизации);
	
КонецПроцедуры

// Параметры:
//  ИдентификаторУчетнойЗаписиЭДО - Строка
//  ОповещениеОЗавершении - ОписаниеОповещения
//  ФормаВладелец - ФормаКлиентскогоПриложения
Процедура ОбновитьИнформациюОбУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписиЭДО, ОповещениеОЗавершении, ФормаВладелец) Экспорт
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ОбновитьИнформациюОбУчетнойЗаписиЭДОВФоне(
		ИдентификаторУчетнойЗаписиЭДО, ФормаВладелец.УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьИнформациюОбУчетнойЗаписиЭДОЗавершение",
		ЭтотОбъект, ОповещениеОЗавершении);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщегоНазначения

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭД.НовыйКонтекстДиагностики
//  ВидОперации - Строка
//  ТекстОшибки - Строка
Процедура ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки) Экспорт
	Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
		ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстОшибки, ТекстОшибки);
	ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
		ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
КонецПроцедуры

#КонецОбласти

#Область ОбработкаРезультатаВыполненияДействийЭДО

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * АсинхронныеОперации - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  * РезультатыДействий - см. ИнтеграцияОблачногоЭДО.НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО
//  * СостояниеВыполненияДействий - см. НовоеСостояниеВыполненияДействийЭДО
//  * ИсходныйНаборДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * РасшифрованныеМаркерыПоУчетнымЗаписям - см. НовыеРасшифрованныеМаркерыПоУчетнымЗаписям
//  * ПодписиДанныхПоУчетнымЗаписям - см. НовыеПодписиДанныхПоУчетнымЗаписям
Функция НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("АсинхронныеОперации", Новый Массив);
	Контекст.Вставить("РезультатыДействий", Новый Соответствие);
	Контекст.Вставить("СостояниеВыполненияДействий", Новый Структура);
	Контекст.Вставить("ИсходныйНаборДействийЭДО", ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО());
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Контекст.Вставить("РасшифрованныеМаркерыПоУчетнымЗаписям", НовыеРасшифрованныеМаркерыПоУчетнымЗаписям());
	Контекст.Вставить("ПодписиДанныхПоУчетнымЗаписям", НовыеПодписиДанныхПоУчетнымЗаписям());
	Возврат Контекст;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ВыполненныеДействияПоУчетнымЗаписям - см. НовыеВыполненныеДействияПоУчетнымЗаписям
Функция НовоеСостояниеВыполненияДействийЭДО()
	Состояние = Новый Структура;
	Состояние.Вставить("ВыполненныеДействияПоУчетнымЗаписям", НовыеВыполненныеДействияПоУчетнымЗаписям());
	Возврат Состояние;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  * Значение - Массив из ПеречислениеСсылка.ДействияПоЭДО
Функция НовыеВыполненныеДействияПоУчетнымЗаписям()
	Возврат Новый Соответствие;
КонецФункции

// Параметры:
//  РезультатыДействий - см. ИнтеграцияОблачногоЭДО.НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ОбработатьРезультатВыполненияДействийЭДОПослеОжиданияДействийЭДО(РезультатыДействий, КонтекстОбработки) Экспорт
	
	Если ЗначениеЗаполнено(РезультатыДействий) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(КонтекстОбработки.РезультатыДействий, РезультатыДействий);
	КонецЕсли;
	
	ЗашифрованныеМаркерыПоУчетнымЗаписям = НовыеЗашифрованныеМаркерыПоУчетнымЗаписям();
	
	Для Каждого РезультатДействийПоУчетнойЗаписи Из КонтекстОбработки.РезультатыДействий Цикл
		
		ИдентификаторУчетнойЗаписи = РезультатДействийПоУчетнойЗаписи.Ключ;
		РезультатДействий = РезультатДействийПоУчетнойЗаписи.Значение;
		ЗашифрованныеМаркеры = РезультатДействий.ЗашифрованныеМаркеры;
		
		Если ЗначениеЗаполнено(ЗашифрованныеМаркеры) Тогда
			ЗашифрованныеМаркерыПоУчетнымЗаписям.Вставить(ИдентификаторУчетнойЗаписи, ЗашифрованныеМаркеры);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ЗашифрованныеМаркерыПоУчетнымЗаписям) Тогда
		
		ОбработатьРезультатВыполненияДействийЭДОПослеРасшифровки(ЗашифрованныеМаркерыПоУчетнымЗаписям, КонтекстОбработки);
		Возврат;
		
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияДействийЭДОПослеРасшифровки",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстОбработки);
	
	РасшифроватьМаркерыПоУчетнымЗаписям(Оповещение, ЗашифрованныеМаркерыПоУчетнымЗаписям,
		КонтекстОбработки.ПаролиСертификатов, КонтекстОбработки.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  РасшифрованныеМаркерыПоУчетнымЗаписям - см. НовыеРасшифрованныеМаркерыПоУчетнымЗаписям
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ОбработатьРезультатВыполненияДействийЭДОПослеРасшифровки(РасшифрованныеМаркерыПоУчетнымЗаписям, КонтекстОбработки) Экспорт
	
	Если ЗначениеЗаполнено(РасшифрованныеМаркерыПоУчетнымЗаписям) Тогда
		КонтекстОбработки.РасшифрованныеМаркерыПоУчетнымЗаписям = РасшифрованныеМаркерыПоУчетнымЗаписям;
	КонецЕсли;
	
	ДанныеДляВыбораСертификатов = НовыеДанныеДляПодписанияПоУчетнымЗаписям();
	
	Для Каждого РезультатДействийПоУчетнойЗаписи Из КонтекстОбработки.РезультатыДействий Цикл
		
		ИдентификаторУчетнойЗаписи = РезультатДействийПоУчетнойЗаписи.Ключ;
		РезультатДействий = РезультатДействийПоУчетнойЗаписи.Значение;
		
		ДанныеДляПодписания = РезультатДействий.ДанныеДляПодписания;
		Если Не ЗначениеЗаполнено(ДанныеДляПодписания) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеНабораДанных Из ДанныеДляПодписания Цикл
			ОписаниеНабораДанныхПоУчетнойЗаписи = НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи();
			ЗаполнитьЗначенияСвойств(ОписаниеНабораДанныхПоУчетнойЗаписи, ОписаниеНабораДанных);
			ОписаниеНабораДанныхПоУчетнойЗаписи.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
			ДанныеДляВыбораСертификатов.Добавить(ОписаниеНабораДанныхПоУчетнойЗаписи);
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ДанныеДляВыбораСертификатов) Тогда
		
		ЗавершитьОбработкуРезультатаВыполненияДействийЭДО(КонтекстОбработки);
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияДействийЭДОПослеВыбораСертификатов",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстОбработки);
	
	ВыбратьСертификатыДляПодписанияПоУчетнымЗаписям(Оповещение, ДанныеДляВыбораСертификатов,
		КонтекстОбработки.ПаролиСертификатов, КонтекстОбработки.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ДанныеДляЗаполненияПоУчетнымЗаписям - Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ОбработатьРезультатВыполненияДействийЭДОПослеВыбораСертификатов(ДанныеДляЗаполненияПоУчетнымЗаписям, КонтекстОбработки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияПоУчетнымЗаписям) Тогда
		
		ЗавершитьОбработкуРезультатаВыполненияДействийЭДО(КонтекстОбработки);
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияДействийЭДОПослеЗаполненияПоСертификатам",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстОбработки);
	
	ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам(Оповещение, ДанныеДляЗаполненияПоУчетнымЗаписям,
		КонтекстОбработки.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ДанныеДляПодписанияПоУчетнымЗаписям - Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ОбработатьРезультатВыполненияДействийЭДОПослеЗаполненияПоСертификатам(ДанныеДляПодписанияПоУчетнымЗаписям, КонтекстОбработки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеДляПодписанияПоУчетнымЗаписям) Тогда
		
		ЗавершитьОбработкуРезультатаВыполненияДействийЭДО(КонтекстОбработки);
		Возврат;
		
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияДействийЭДОПослеСозданияПодписей",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстОбработки);
	
	СоздатьПодписиПоВыбраннымСертификатам(Оповещение, ДанныеДляПодписанияПоУчетнымЗаписям,
		КонтекстОбработки.ПаролиСертификатов, КонтекстОбработки.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ПодписиДанныхПоУчетнымЗаписям - см. НовыеПодписиДанныхПоУчетнымЗаписям
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ОбработатьРезультатВыполненияДействийЭДОПослеСозданияПодписей(ПодписиДанныхПоУчетнымЗаписям, КонтекстОбработки) Экспорт
	
	Если ЗначениеЗаполнено(ПодписиДанныхПоУчетнымЗаписям) Тогда
		КонтекстОбработки.ПодписиДанныхПоУчетнымЗаписям = ПодписиДанныхПоУчетнымЗаписям;
	КонецЕсли;
	
	ЗавершитьОбработкуРезультатаВыполненияДействийЭДО(КонтекстОбработки);
	
КонецПроцедуры

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Процедура ЗавершитьОбработкуРезультатаВыполненияДействийЭДО(КонтекстОбработки)
	
	РезультатОбработки = РезультатОбработкиДействийИнтеграцииЭДО(КонтекстОбработки);
	
	// См. ОбработатьРезультатВыполненияДействийЭДО.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстОбработки.ОповещениеОЗавершении, РезультатОбработки);
	
КонецПроцедуры

#Область ОжиданиеВыполненияДействийЭДО

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - см. РасшифроватьМаркерыПоУчетнымЗаписям.ОповещениеОЗавершении
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйКонтекстОжиданияВыполненияДействийПоЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("КонтекстДиагностики", Новый Структура);
	Возврат Контекст;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат: см. ИнтеграцияОблачногоЭДОВызовСервера.РезультатыДействийЭДОАсинхронно
//  АсинхронныеОперации - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ОжидатьВыполненияДействийЭДО(ОповещениеОЗавершении, АсинхронныеОперации, КонтекстДиагностики)
	
	КонтекстОжидания = НовыйКонтекстОжиданияВыполненияДействийПоЭДО();
	КонтекстОжидания.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстОжидания.КонтекстДиагностики = КонтекстДиагностики;
	
	Оповещение = Новый ОписаниеОповещения("ОжидатьВыполненияДействийЭДОПослеАсинхронныхОпераций",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстОжидания);
	
	СервисОблачногоЭДОКлиент.ОжидатьЗавершенияАсинхронныхОпераций(Оповещение, АсинхронныеОперации);
	
КонецПроцедуры

// Параметры:
//  АсинхронныеОперации - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  КонтекстОжидания - см. НовыйКонтекстОжиданияВыполненияДействийПоЭДО
Процедура ОжидатьВыполненияДействийЭДОПослеАсинхронныхОпераций(АсинхронныеОперации, КонтекстОжидания) Экспорт
	
	АдресаРезультатов = СервисОблачногоЭДОКлиент.АдресаРезультатовАсинхронныхОпераций(
		АсинхронныеОперации, КонтекстОжидания.КонтекстДиагностики);
	
	РезультатыДействийЭДО = ИнтеграцияОблачногоЭДОВызовСервера.РезультатыДействийЭДОАсинхронно(АдресаРезультатов);
	
	// См. ОжидатьВыполненияДействийЭДО.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстОжидания.ОповещениеОЗавершении, РезультатыДействийЭДО);
	
КонецПроцедуры

#КонецОбласти

#Область РасшифроватьМаркерыПоУчетнымЗаписям

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  * Значение - см. КриптографияБЭДКлиентСервер.НовыйНаборДанныхДляРасшифровки
Функция НовыеЗашифрованныеМаркерыПоУчетнымЗаписям()
	Возврат Новый Соответствие;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  * Значение - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
Функция НовыеРасшифрованныеМаркерыПоУчетнымЗаписям()
	Возврат Новый Соответствие;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - см. РасшифроватьМаркерыПоУчетнымЗаписям.ОповещениеОЗавершении
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ЗашифрованныеМаркерыПоУчетнымЗаписям - см. НовыеЗашифрованныеМаркерыПоУчетнымЗаписям()
//  * ОбработанныеУчетныеЗаписи - Массив из Строка
//  * ИдентификаторУчетнойЗаписи - Строка
//  * ЗашифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * РасшифрованныеМаркерыПоУчетнымЗаписям - см. НовыеРасшифрованныеМаркерыПоУчетнымЗаписям
Функция НовыйКонтекстРасшифровкиМаркеровПоУчетнымЗаписям()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("КонтекстДиагностики", Новый Структура);
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("ЗашифрованныеМаркерыПоУчетнымЗаписям", НовыеЗашифрованныеМаркерыПоУчетнымЗаписям());
	Контекст.Вставить("ОбработанныеУчетныеЗаписи", Новый Массив);
	Контекст.Вставить("ИдентификаторУчетнойЗаписи", "");
	Контекст.Вставить("ЗашифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных());
	Контекст.Вставить("РасшифрованныеМаркерыПоУчетнымЗаписям", НовыеРасшифрованныеМаркерыПоУчетнымЗаписям());
	Возврат Контекст;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат см. НовыеРасшифрованныеМаркерыПоУчетнымЗаписям
//  ЗашифрованныеМаркерыПоУчетнымЗаписям - см. НовыеЗашифрованныеМаркерыПоУчетнымЗаписям()
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура РасшифроватьМаркерыПоУчетнымЗаписям(ОповещениеОЗавершении, ЗашифрованныеМаркерыПоУчетнымЗаписям, ПаролиСертификатов, КонтекстДиагностики)
	
	КонтекстРасшифровки = НовыйКонтекстРасшифровкиМаркеровПоУчетнымЗаписям();
	КонтекстРасшифровки.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстРасшифровки.ЗашифрованныеМаркерыПоУчетнымЗаписям = ЗашифрованныеМаркерыПоУчетнымЗаписям;
	КонтекстРасшифровки.ПаролиСертификатов = ПаролиСертификатов;
	КонтекстРасшифровки.КонтекстДиагностики = КонтекстДиагностики;
	
	РасшифроватьМаркерыПоУчетнымЗаписямПослеПодготовкиКонтекста(КонтекстРасшифровки);
	
КонецПроцедуры

// Параметры:
//  КонтекстРасшифровки - см. НовыйКонтекстРасшифровкиМаркеровПоУчетнымЗаписям
Процедура РасшифроватьМаркерыПоУчетнымЗаписямПослеПодготовкиКонтекста(КонтекстРасшифровки)
	
	Установлен = УстановитьЗашифрованныйМаркерПоУчетннойЗаписиДляРасшифровки(КонтекстРасшифровки);
	
	Если Не Установлен Тогда
		РасшифроватьМаркерыПоУчетнымЗаписямЗавершение(КонтекстРасшифровки);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РасшифроватьМаркерыПоУчетнымЗаписямПослеОбработкиДанных",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстРасшифровки);
	
	КриптографияБЭДКлиент.НачатьРасшифровкуНабораДанных(Оповещение,
		КонтекстРасшифровки.ЗашифрованныеМаркеры, КонтекстРасшифровки.ПаролиСертификатов,
		КонтекстРасшифровки.КонтекстДиагностики);
	
КонецПроцедуры

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  КонтекстРасшифровки - см. НовыйКонтекстРасшифровкиМаркеровПоУчетнымЗаписям
Процедура РасшифроватьМаркерыПоУчетнымЗаписямПослеОбработкиДанных(ИтогРасшифровки, КонтекстРасшифровки) Экспорт
	
	КонтекстРасшифровки.РасшифрованныеМаркерыПоУчетнымЗаписям.Вставить(
		КонтекстРасшифровки.ИдентификаторУчетнойЗаписи, ИтогРасшифровки.НаборРасшифрованныхДанных);
	
	РасшифроватьМаркерыПоУчетнымЗаписямПослеПодготовкиКонтекста(КонтекстРасшифровки);
	
КонецПроцедуры

// Параметры:
//  КонтекстРасшифровки - см. НовыйКонтекстРасшифровкиМаркеровПоУчетнымЗаписям
Процедура РасшифроватьМаркерыПоУчетнымЗаписямЗавершение(КонтекстРасшифровки)
	
	// См. РасшифроватьМаркерыПоУчетнымЗаписям.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстРасшифровки.ОповещениеОЗавершении,
		КонтекстРасшифровки.РасшифрованныеМаркерыПоУчетнымЗаписям);
	
КонецПроцедуры

// Параметры:
//  КонтекстРасшифровки - см. НовыйКонтекстРасшифровкиМаркеровПоУчетнымЗаписям
// 
// Возвращаемое значение:
//  Булево
Функция УстановитьЗашифрованныйМаркерПоУчетннойЗаписиДляРасшифровки(КонтекстРасшифровки)
	
	Установлен = Ложь;
	
	ОбработанныеУчетныеЗаписи = КонтекстРасшифровки.ОбработанныеУчетныеЗаписи;
	
	Для Каждого ЗашифрованныйМаркерПоУчетннойЗаписи Из КонтекстРасшифровки.ЗашифрованныеМаркерыПоУчетнымЗаписям Цикл
		ИдентификаторУчетнойЗаписи = ЗашифрованныйМаркерПоУчетннойЗаписи.Ключ;
		Если ОбработанныеУчетныеЗаписи.Найти(ИдентификаторУчетнойЗаписи) = Неопределено Тогда
			КонтекстРасшифровки.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
			КонтекстРасшифровки.ЗашифрованныеМаркеры = ЗашифрованныйМаркерПоУчетннойЗаписи.Значение;
			ОбработанныеУчетныеЗаписи.Добавить(ИдентификаторУчетнойЗаписи);
			Установлен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Установлен;
	
КонецФункции

#КонецОбласти

#Область ВыборСертификатовДляПодписанияПоУчетнымЗаписям

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - см. ВыбратьСертификатыДляПодписанияПоУчетнымЗаписям.ОповещениеОЗавершении
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ИндексНабораДанных - Число
//  * ДанныеДляВыбораСертификатов - см. НовыеДанныеДляПодписанияПоУчетнымЗаписям
//  * ДанныеДляЗаполненияПоСертификатам - см. НовыеДанныеДляПодписанияПоУчетнымЗаписям
Функция НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("КонтекстДиагностики", Новый Структура);
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("ИндексНабораДанных", 0);
	Контекст.Вставить("ДанныеДляВыбораСертификатов", Новый Массив);
	Контекст.Вставить("ДанныеДляЗаполненияПоСертификатам", Новый Массив);
	Возврат Контекст;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат см. НовыеДанныеДляПодписанияВыбраннымиСертификатамиПоУчетнымЗаписям
//  ДанныеДляВыбораСертификатов - см. НовыеДанныеДляПодписанияПоУчетнымЗаписям;
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ВыбратьСертификатыДляПодписанияПоУчетнымЗаписям(ОповещениеОЗавершении, ДанныеДляВыбораСертификатов, ПаролиСертификатов, КонтекстДиагностики)
	
	КонтекстВыбораСертификатов = НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям();
	КонтекстВыбораСертификатов.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстВыбораСертификатов.ПаролиСертификатов = ПаролиСертификатов;
	КонтекстВыбораСертификатов.КонтекстДиагностики = КонтекстДиагностики;
	КонтекстВыбораСертификатов.ДанныеДляВыбораСертификатов = ДанныеДляВыбораСертификатов;
	
	ВыбратьСертификатыДляПодписанияПоУчетнымЗаписямПослеПодготовкиКонтекста(КонтекстВыбораСертификатов);
	
КонецПроцедуры

// Параметры:
//  КонтекстВыбораСертификатов - см. НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям
Процедура ВыбратьСертификатыДляПодписанияПоУчетнымЗаписямПослеПодготовкиКонтекста(КонтекстВыбораСертификатов)
	
	ОписаниеНабораДанныхДляВыбора = ОписаниеНабораДанныхДляВыбораСертификатаПоКонтексту(КонтекстВыбораСертификатов);
	
	Если ОписаниеНабораДанныхДляВыбора = Неопределено Тогда
		ВыбратьСертификатыДляПодписанияПоУчетнымЗаписямЗавершение(КонтекстВыбораСертификатов);
		Возврат;
	КонецЕсли;
	
	ОписаниеДанных = ОписаниеДанныхДляПодписанияЧерезБСП(ОписаниеНабораДанныхДляВыбора);
	
	ДанныеДляВыбораСертификата = Новый Структура("Данные", ПолучитьДвоичныеДанныеИзСтроки(""));
	
	ОписаниеДанных.НаборДанных = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляВыбораСертификата);
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьСертификатыДляПодписанияПоУчетнымЗаписямПослеВыполнения",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстВыбораСертификатов);
	
	КриптографияБЭДКлиент.Подписать(ОписаниеДанных, КонтекстВыбораСертификатов.КонтекстДиагностики,,
		Оповещение, КонтекстВыбораСертификатов.ПаролиСертификатов);
	
КонецПроцедуры

// Параметры:
//  Результат               - Структура:
//  * ЗаголовокДанных       - Строка
//  * СообщитьОЗавершении   - Булево
//  * ПоказатьКомментарий   - Булево
//  * КонтекстОперации      - Неопределено,Произвольный
//  * ПрекратитьВыполнение  - Булево
//  * БезПодтверждения      - Булево
//  * ОтборСертификатов     - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных           - Массив из Структура:
//    ** ПрисоединенныйФайл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//    ** Данные             - ДвоичныеДанные
//    ** Представление      - Структура:
//       *** Значение       - ДокументСсылка.СообщениеЭДО
//       *** Представление  - Строка
//    ** ТребуетсяЗаполнитьПодписанта - Булево
//    ** ДанныеИзменены     - Булево
//    ** АдресДанныхДляОбновления - Строка
//    ** СвойстваПодписи    - Строка,
//                            См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Операция              - Строка
//  * Успех                 - Булево
//  * Отказ                 - Булево
//  * ВыбранныйСертификат   - Структура:
//    ** Ссылка             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Отпечаток          - Строка - отпечаток сертификата в формате строки Base64.
//    ** Данные             - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  * ПаролиСертификатов    - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ТекущийЭлементНабораДанных - Структура
//  * ПользовательНажалКнопкуПодписать - Булево
//  КонтекстВыбораСертификатов - См. НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям
Процедура ВыбратьСертификатыДляПодписанияПоУчетнымЗаписямПослеВыполнения(Результат, КонтекстВыбораСертификатов) Экспорт
	
	Если Результат = Неопределено
		ИЛИ Не Результат.Успех Тогда
		ВыбратьСледующийСертификатДляПодписанияПоУчетнымЗаписям(КонтекстВыбораСертификатов);
		Возврат;
	КонецЕсли;
	
	Сертификат = Результат.ВыбранныйСертификат.Ссылка;
	
	ДанныеДляВыбораСертификатов = КонтекстВыбораСертификатов.ДанныеДляВыбораСертификатов;
	ИндексНабораДанных = КонтекстВыбораСертификатов.ИндексНабораДанных;
	
	ОписаниеНабораДанныхДляВыбора = ДанныеДляВыбораСертификатов[ИндексНабораДанных];
	
	ОтсутствуетДоверенность = Ложь;
	
	Для Каждого ОписаниеДанных Из ОписаниеНабораДанныхДляВыбора.НаборДанных Цикл
		
		Если ОписаниеДанных.ТребуетсяДоверенность
			И ОписаниеДанных.ДоверенностиПоСертификатам[Сертификат] = Неопределено Тогда
			ОтсутствуетДоверенность = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтсутствуетДоверенность Тогда
		ВыбратьДругойСертификатПоУчетнымЗаписямПередПодписанием(Сертификат, КонтекстВыбораСертификатов);
		Возврат;
	КонецЕсли;
	
	ОписаниеНабораДанныхДляЗаполнения = НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи();
	ЗаполнитьЗначенияСвойств(ОписаниеНабораДанныхДляЗаполнения, ОписаниеНабораДанныхДляВыбора);
	ОписаниеНабораДанныхДляЗаполнения.Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сертификат);
	
	КонтекстВыбораСертификатов.ДанныеДляЗаполненияПоСертификатам.Добавить(ОписаниеНабораДанныхДляЗаполнения);
	
	ВыбратьСледующийСертификатДляПодписанияПоУчетнымЗаписям(КонтекстВыбораСертификатов);
	
КонецПроцедуры

// Параметры:
//  КонтекстВыбораСертификатов - см. НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям
Процедура ВыбратьСертификатыДляПодписанияПоУчетнымЗаписямЗавершение(КонтекстВыбораСертификатов)
	
	// См. ВыбратьСертификатыДляПодписанияПоУчетнымЗаписям.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстВыбораСертификатов.ОповещениеОЗавершении,
		КонтекстВыбораСертификатов.ДанныеДляЗаполненияПоСертификатам);
	
КонецПроцедуры

// Параметры:
//  КонтекстВыбораСертификатов - см. НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям
Процедура ВыбратьСледующийСертификатДляПодписанияПоУчетнымЗаписям(КонтекстВыбораСертификатов)
	
	КонтекстВыбораСертификатов.ИндексНабораДанных = КонтекстВыбораСертификатов.ИндексНабораДанных + 1;
	
	ВыбратьСертификатыДляПодписанияПоУчетнымЗаписямПослеПодготовкиКонтекста(КонтекстВыбораСертификатов);
	
КонецПроцедуры

// Параметры:
//  ВыбранныйСертификат - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  КонтекстВыбораСертификатов - см. НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям
Процедура ВыбратьДругойСертификатПоУчетнымЗаписямПередПодписанием(ВыбранныйСертификат, КонтекстВыбораСертификатов)
	
	КонтекстВыбораСертификатов.ПаролиСертификатов.Удалить(ВыбранныйСертификат);
	
	ТекстВопроса = НСтр("ru = 'Сертификатом <a href = ""%1"">%2</a> можно подписать только по доверенности. 
		|Для выбранного сертификата в программе нет подходящей машиночитаемой доверенности. 
		|Повторите подписание, выбрав другой сертификат или передайте документ на подпись руководителю.'");
		
	ТекстВопроса = СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстВопроса,
		ПолучитьНавигационнуюСсылку(ВыбранныйСертификат), ВыбранныйСертификат);
	Оповещение = Новый ОписаниеОповещения("ВыбратьДругойСертификатПоУчетнымЗаписямПередПодписаниемПослеВопроса",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстВыбораСертификатов);
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
	
КонецПроцедуры

// Параметры:
//  Ответ - КодВозвратаДиалога
//  КонтекстВыбораСертификатов - см. НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям
Процедура ВыбратьДругойСертификатПоУчетнымЗаписямПередПодписаниемПослеВопроса(Ответ, КонтекстВыбораСертификатов) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Повторить Тогда
		ВыбратьСертификатыДляПодписанияПоУчетнымЗаписямПослеПодготовкиКонтекста(КонтекстВыбораСертификатов);
	Иначе
		ВыбратьСледующийСертификатДляПодписанияПоУчетнымЗаписям(КонтекстВыбораСертификатов);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  КонтекстВыбораСертификатов - см. НовыйКонтекстВыбораСертификатовДляПодписанияПоУчетнымЗаписям
//  
// Возвращаемое значение:
//  - Неопределено
//  - См. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
Функция ОписаниеНабораДанныхДляВыбораСертификатаПоКонтексту(КонтекстВыбораСертификатов)
	
	ОписаниеНабораДанныхДляВыбора = Неопределено;
	
	ДанныеДляВыбораСертификатов = КонтекстВыбораСертификатов.ДанныеДляВыбораСертификатов;
	ИндексНабораДанных = КонтекстВыбораСертификатов.ИндексНабораДанных;
	
	ПаролиСертификатов = КонтекстВыбораСертификатов.ПаролиСертификатов;
	ДанныеДляЗаполненияПоСертификатам = КонтекстВыбораСертификатов.ДанныеДляЗаполненияПоСертификатам;
	КоличествоНаборовДанныхДляВыбораСертификатов = ДанныеДляВыбораСертификатов.Количество();
	
	Пока ИндексНабораДанных < КоличествоНаборовДанныхДляВыбораСертификатов Цикл
		
		ОписаниеНабораДанных = ДанныеДляВыбораСертификатов[ИндексНабораДанных];
		
		СертификатыСПаролем = КриптографияБЭДКлиент.СертификатыСПаролемИзНабора(
			ПаролиСертификатов, ОписаниеНабораДанных.Сертификаты);
		
		Если Не ЗначениеЗаполнено(СертификатыСПаролем) Тогда
			
			ОписаниеНабораДанныхДляВыбора = ОписаниеНабораДанных;
			Прервать;
		
		ИначеЕсли ОписаниеНабораДанных.Сертификаты.Количество() = 1 Тогда
			
			ДанныеДляЗаполненияПоСертификатам.Добавить(ОписаниеНабораДанных);
			
		Иначе
			
			ОписаниеНабораДанныхДляЗаполнения = НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи();
			ЗаполнитьЗначенияСвойств(ОписаниеНабораДанныхДляЗаполнения, ОписаниеНабораДанных);
			ОписаниеНабораДанныхДляЗаполнения.Сертификаты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				СертификатыСПаролем[0]);
			ДанныеДляЗаполненияПоСертификатам.Добавить(ОписаниеНабораДанныхДляЗаполнения);
			
		КонецЕсли;
		
		ИндексНабораДанных = ИндексНабораДанных + 1;
		
	КонецЦикла;
	
	КонтекстВыбораСертификатов.ИндексНабораДанных = ИндексНабораДанных;
	
	Возврат ОписаниеНабораДанныхДляВыбора;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДанныхДляПодписанияПоВыбраннымСертификатам

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - см. ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам.ОповещениеОЗавершении
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ДанныеДляЗаполненияПоУчетнымЗаписям - Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
//  * ЗаполненныеДанныеПоУчетнымЗаписям - Соответствие из КлючИЗначение
Функция НовыйКонтекстЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("КонтекстДиагностики", Новый Структура);
	Контекст.Вставить("ДанныеДляЗаполненияПоУчетнымЗаписям", Новый Массив);
	Контекст.Вставить("ЗаполненныеДанныеПоУчетнымЗаписям", Новый Соответствие);
	Возврат Контекст;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат: см. НовыеДанныеДляПодписанияВыбраннымиСертификатамиПоУчетнымЗаписям
//  ДанныеДляЗаполненияПоУчетнымЗаписям - Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам(ОповещениеОЗавершении, ДанныеДляЗаполненияПоУчетнымЗаписям, КонтекстДиагностики)
	
	КонтекстЗаполнения = НовыйКонтекстЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам();
	КонтекстЗаполнения.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстЗаполнения.ДанныеДляЗаполненияПоУчетнымЗаписям = ДанныеДляЗаполненияПоУчетнымЗаписям;
	КонтекстЗаполнения.КонтекстДиагностики = КонтекстДиагностики;
	
	ДанныеДляЗаполненияНаСервере = ДанныеДляЗаполненияПоВыбраннымСертификатамНаСервере(
		ДанныеДляЗаполненияПоУчетнымЗаписям);
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияНаСервере) Тогда
		ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамЗавершение(КонтекстЗаполнения);
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамВФоне(
		ДанныеДляЗаполненияНаСервере);
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамПослеДлительнойОперации",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстЗаполнения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстЗаполнения - см. НовыйКонтекстЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам
Процедура ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамПослеДлительнойОперации(ДлительнаяОперация, КонтекстЗаполнения) Экспорт
	
	АдресРезультата = АдресРезультатаДлительнойОперации(ДлительнаяОперация, КонтекстЗаполнения.КонтекстДиагностики);
	Если ПустаяСтрока(АдресРезультата) Тогда
		ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамЗавершение(КонтекстЗаполнения);
		Возврат;
	КонецЕсли;
	
	РезультатЗаполнения = 
		ИнтеграцияОблачногоЭДОВызовСервера.РезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатамВФоне(
			АдресРезультата);
	
	ДополнитьКонтекстЗаполненияПоВыбраннымСертификатам(КонтекстЗаполнения, РезультатЗаполнения);
	
	Если Не ЗначениеЗаполнено(РезультатЗаполнения.АсинхронныеОперации) Тогда
		ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамЗавершение(КонтекстЗаполнения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамПослеАсинхронныхОпераций",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстЗаполнения);
	
	СервисОблачногоЭДОКлиент.ОжидатьЗавершенияАсинхронныхОпераций(Оповещение, РезультатЗаполнения.АсинхронныеОперации);
	
КонецПроцедуры

// Параметры:
//  АсинхронныеОперации - Массив из см. СервисОблачногоЭДО.НоваяАсинхроннаяОперация
//  КонтекстЗаполнения - см. НовыйКонтекстЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам
Процедура ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамПослеАсинхронныхОпераций(АсинхронныеОперации, КонтекстЗаполнения) Экспорт
	
	АдресаРезультатов = СервисОблачногоЭДОКлиент.АдресаРезультатовАсинхронныхОпераций(
		АсинхронныеОперации, КонтекстЗаполнения.КонтекстДиагностики);
	
	РезультатЗаполнения = 
		ИнтеграцияОблачногоЭДОВызовСервера.РезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатамАсинхронно(
			АдресаРезультатов);
	
	ДополнитьКонтекстЗаполненияПоВыбраннымСертификатам(КонтекстЗаполнения, РезультатЗаполнения);
	
	ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамЗавершение(КонтекстЗаполнения);
	
КонецПроцедуры

// Параметры:
//  КонтекстЗаполнения - см. НовыйКонтекстЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам
Процедура ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатамЗавершение(КонтекстЗаполнения)
	
	ДанныеДляПодписанияПоУчетнымЗаписям = Новый Массив;
	ЗаполненныеДанныеПоУчетнымЗаписям = КонтекстЗаполнения.ЗаполненныеДанныеПоУчетнымЗаписям;
	
	Для Каждого ОписаниеНабораДанныхДляЗаполнения Из КонтекстЗаполнения.ДанныеДляЗаполненияПоУчетнымЗаписям Цикл
		
		ИдентификаторУчетнойЗаписи = ОписаниеНабораДанныхДляЗаполнения.ИдентификаторУчетнойЗаписи;
		
		ОписаниеНабораДанныхДляПодписания = НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи();
		ОписаниеНабораДанныхДляПодписания.ИдентификаторУчетнойЗаписи = ИдентификаторУчетнойЗаписи;
		ОписаниеНабораДанныхДляПодписания.Сертификаты = ОписаниеНабораДанныхДляЗаполнения.Сертификаты;
		
		НаборДанныхДляПодписания = ОписаниеНабораДанныхДляПодписания.НаборДанных;
		
		ЗаполненныеДанные = ЗаполненныеДанныеПоУчетнымЗаписям[ИдентификаторУчетнойЗаписи]; // см. ИнтеграцияОблачногоЭДО.ОбработатьРезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам
		
		Для Каждого ОписаниеДанных Из ОписаниеНабораДанныхДляЗаполнения.НаборДанных Цикл
			
			Если Не ОписаниеДанных.ТребуетсяЗаполнитьПодписанта Тогда
				НаборДанныхДляПодписания.Добавить(ОписаниеДанных);
				Продолжить;
			КонецЕсли;
			
			Если ЗаполненныеДанные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = ЗаполненныеДанные[ОписаниеДанных.ИдентификаторДанных];
			
			Если Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОписаниеДанных.Данные = Данные;
			
			НаборДанныхДляПодписания.Добавить(ОписаниеДанных);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НаборДанныхДляПодписания) Тогда
			ДанныеДляПодписанияПоУчетнымЗаписям.Добавить(ОписаниеНабораДанныхДляПодписания);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(КонтекстЗаполнения.ОповещениеОЗавершении, ДанныеДляПодписанияПоУчетнымЗаписям);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Сертификат - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НомерДоверенности - Строка
//  * ИдентификаторыДанных - Массив из Строка
Функция ОписаниеНабораДанныхДляЗаполненияПоСертификатуНаСервере()
	Описание = Новый Структура;
	Описание.Вставить("Сертификат", Неопределено);
	Описание.Вставить("НомерДоверенности", "");
	Описание.Вставить("ИдентификаторыДанных", Новый Массив);
	Возврат Описание;
КонецФункции

// Параметры:
//  ДанныеДляЗаполненияПоУчетнымЗаписям - см. ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам.ДанныеДляЗаполненияПоУчетнымЗаписям
// 
// Возвращаемое значение:
//  См. ИнтеграцияОблачногоЭДО.ЗаполнитьДанныеДляПодписанияПоВыбраннымСертификатам.ДанныеДляЗаполненияПоУчетнымЗаписям
Функция ДанныеДляЗаполненияПоВыбраннымСертификатамНаСервере(ДанныеДляЗаполненияПоУчетнымЗаписям)
	
	ДанныеДляЗаполненияНаСервере = Новый Соответствие;;
	
	ОписанияНаборовПоУчетнымЗаписям = Новый Соответствие;	
	
	Для Каждого ОписаниеНабораДанных Из ДанныеДляЗаполненияПоУчетнымЗаписям Цикл
		
		Если Не ЗначениеЗаполнено(ОписаниеНабораДанных.Сертификаты) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ОписаниеДанных Из ОписаниеНабораДанных.НаборДанных Цикл
			
			Если Не ОписаниеДанных.ТребуетсяЗаполнитьПодписанта Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторУчетнойЗаписи = ОписаниеНабораДанных.ИдентификаторУчетнойЗаписи;
			
			ОписанияНаборовПоСертификатам = ОписанияНаборовПоУчетнымЗаписям[ИдентификаторУчетнойЗаписи];
			Если ОписанияНаборовПоСертификатам = Неопределено Тогда
				ОписанияНаборовПоСертификатам = Новый Соответствие;
				ОписанияНаборовПоУчетнымЗаписям.Вставить(ИдентификаторУчетнойЗаписи, ОписанияНаборовПоСертификатам);
			КонецЕсли;
			
			Сертификат = ОписаниеНабораДанных.Сертификаты[0];
			
			ОписанияНаборовСертификатаПоДоверенностям = ОписанияНаборовПоСертификатам[Сертификат];
			Если ОписанияНаборовСертификатаПоДоверенностям = Неопределено Тогда
				ОписанияНаборовСертификатаПоДоверенностям = Новый Соответствие;
				ОписанияНаборовПоСертификатам.Вставить(Сертификат, ОписанияНаборовСертификатаПоДоверенностям);
			КонецЕсли;
			
			НомерДоверенности = ОписаниеДанных.ДоверенностиПоСертификатам[Сертификат];
			Если НомерДоверенности = Неопределено Тогда
				НомерДоверенности = "";
			КонецЕсли;
			
			ОписаниеНабораДанныхДляЗаполненияНаСервере = ОписанияНаборовСертификатаПоДоверенностям[НомерДоверенности];
			Если ОписаниеНабораДанныхДляЗаполненияНаСервере = Неопределено Тогда
				ОписаниеНабораДанныхДляЗаполненияНаСервере = ОписаниеНабораДанныхДляЗаполненияПоСертификатуНаСервере();
				ОписаниеНабораДанныхДляЗаполненияНаСервере.Сертификат = Сертификат;
				ОписаниеНабораДанныхДляЗаполненияНаСервере.НомерДоверенности = НомерДоверенности;
				ОписанияНаборовСертификатаПоДоверенностям.Вставить(
					НомерДоверенности, ОписаниеНабораДанныхДляЗаполненияНаСервере);
				ДанныеДляЗаполненияНаСервере.Вставить(ИдентификаторУчетнойЗаписи,
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОписаниеНабораДанныхДляЗаполненияНаСервере));
			КонецЕсли;
			
			ОписаниеНабораДанныхДляЗаполненияНаСервере.ИдентификаторыДанных.Добавить(ОписаниеДанных.ИдентификаторДанных);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДанныеДляЗаполненияНаСервере;
	
КонецФункции

// Параметры:
//  КонтекстЗаполнения - см. НовыйКонтекстЗаполненияДанныхДляПодписанияПоВыбраннымСертификатам
//  РезультатЗаполнения - см. ИнтеграцияОблачногоЭДОВызовСервера.РезультатЗаполненияДанныхДляПодписанияПоВыбраннымСертификатамАсинхронно
Процедура ДополнитьКонтекстЗаполненияПоВыбраннымСертификатам(КонтекстЗаполнения, РезультатЗаполнения)
	
	ОбработкаНеисправностейБЭДКлиент.ДополнитьКонтекстДиагностики(
		КонтекстЗаполнения.КонтекстДиагностики,
		РезультатЗаполнения.КонтекстДиагностики);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		КонтекстЗаполнения.ЗаполненныеДанныеПоУчетнымЗаписям,
		РезультатЗаполнения.ЗаполненныеДанныеПоУчетнымЗаписям);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация    - См. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстДиагностики - См. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//
// Возвращаемое значение:
//  Строка - адрес временного хранилища
Функция АдресРезультатаДлительнойОперации(ДлительнаяОперация, КонтекстДиагностики)
		
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат "";
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось выполнить действия по ЭДО.'");
		ПодробныйТекстОшибки = ТекстОшибки;
		Если ЗначениеЗаполнено(ДлительнаяОперация.ПодробноеПредставлениеОшибки) Тогда
			ПодробныйТекстОшибки = ПодробныйТекстОшибки + Символы.ПС + ДлительнаяОперация.ПодробноеПредставлениеОшибки;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДлительнаяОперация.КраткоеПредставлениеОшибки) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
		КонецЕсли;
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(НСтр("ru = 'Выполнение действий по ЭДО.'"),
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ПодробныйТекстОшибки, ТекстОшибки);
		ПодсистемыБЭД = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД();
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(КонтекстДиагностики, Ошибка,
			ПодсистемыБЭД.ИнтеграцияОблачногоЭДО);
		Возврат "";
	КонецЕсли;
	
	Возврат ДлительнаяОперация.АдресРезультата;
	
КонецФункции

#КонецОбласти

#Область СозданиеПодписейПоВыбраннымСертификатам

// Возвращаемое значение:
//  Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
Функция НовыеДанныеДляПодписанияПоУчетнымЗаписям()
	Возврат Новый Массив;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * Сертификаты - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных - Массив из см. ИнтеграцияОблачногоЭДО.НовыеДанныеСообщенияДляИнтерактивногоПодписания
//  * ИдентификаторУчетнойЗаписи - Строка
Функция НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи()
	ОписаниеНабораДанных = ИнтеграцияОблачногоЭДОКлиентСервер.НовоеОписаниеНабораДанныхДляИнтерактивногоПодписания();
	ОписаниеНабораДанных.Вставить("ИдентификаторУчетнойЗаписи", "");
	Возврат ОписаниеНабораДанных;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  * Значение - Массив из см. НоваяПодписьДанных
Функция НовыеПодписиДанныхПоУчетнымЗаписям()
	Возврат Новый Соответствие;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ИдентификаторДанных - Строка
//  * Подпись - Неопределено,ДвоичныеДанные
Функция НоваяПодписьДанных()
	ПодписьДанных = Новый Структура;
	ПодписьДанных.Вставить("ИдентификаторДанных", "");
	ПодписьДанных.Вставить("Подпись", Неопределено);
	Возврат ПодписьДанных;
КонецФункции

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - см. ВыбратьСертификатыДляПодписанияПоУчетнымЗаписям.ОповещениеОЗавершении
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ИндексНабораДанных - Число
//  * ДанныеДляПодписанияПоУчетнымЗаписям - Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
Функция НовыйКонтекстСозданияПодписейПоВыбраннымСертификатам()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("КонтекстДиагностики", Новый Структура);
	Контекст.Вставить("ПаролиСертификатов", КриптографияБЭДКлиент.НовыеПаролиСертификатов());
	Контекст.Вставить("ИндексНабораДанных", 0);
	Контекст.Вставить("ДанныеДляПодписанияПоУчетнымЗаписям", Новый Массив);
	Контекст.Вставить("ПодписиДанныхПоУчетнымЗаписям", НовыеПодписиДанныхПоУчетнымЗаписям());
	Возврат Контекст;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения - результат: см. НовыеДанныеДляПодписанияВыбраннымиСертификатамиПоУчетнымЗаписям
//  ДанныеДляПодписанияПоУчетнымЗаписям - Массив из см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
//  ПаролиСертификатов - см. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Процедура СоздатьПодписиПоВыбраннымСертификатам(ОповещениеОЗавершении, ДанныеДляПодписанияПоУчетнымЗаписям, ПаролиСертификатов, КонтекстДиагностики)

	КонтекстСозданияПодписей = НовыйКонтекстСозданияПодписейПоВыбраннымСертификатам();
	КонтекстСозданияПодписей.ОповещениеОЗавершении = ОповещениеОЗавершении;
	КонтекстСозданияПодписей.ДанныеДляПодписанияПоУчетнымЗаписям = ДанныеДляПодписанияПоУчетнымЗаписям;
	КонтекстСозданияПодписей.ПаролиСертификатов = ПаролиСертификатов;
	КонтекстСозданияПодписей.КонтекстДиагностики = КонтекстДиагностики;
	
	СоздатьПодписиПоВыбраннымСертификатамПослеПодготовкиКонтекста(КонтекстСозданияПодписей);
	
КонецПроцедуры

// Параметры:
//  КонтекстСозданияПодписей - см. НовыйКонтекстСозданияПодписейПоВыбраннымСертификатам
Процедура СоздатьПодписиПоВыбраннымСертификатамПослеПодготовкиКонтекста(КонтекстСозданияПодписей)
	
	ДанныеДляПодписания = КонтекстСозданияПодписей.ДанныеДляПодписанияПоУчетнымЗаписям;
	ИндексНабораДанных = КонтекстСозданияПодписей.ИндексНабораДанных;
	
	Если ИндексНабораДанных > ДанныеДляПодписания.ВГраница() Тогда
		СоздатьПодписиПоВыбраннымСертификатамЗавершение(КонтекстСозданияПодписей);
		Возврат;
	КонецЕсли;
	
	ОписаниеНабораДанных = ДанныеДляПодписания[ИндексНабораДанных];
	
	ОписаниеДанных = ОписаниеДанныхДляПодписанияЧерезБСП(ОписаниеНабораДанных);
	
	Оповещение = Новый ОписаниеОповещения("СоздатьПодписиПоВыбраннымСертификатамПослеВыполнения",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстСозданияПодписей);
	
	КриптографияБЭДКлиент.Подписать(ОписаниеДанных, КонтекстСозданияПодписей.КонтекстДиагностики,,
		Оповещение, КонтекстСозданияПодписей.ПаролиСертификатов);
	
КонецПроцедуры

// Параметры:
//  РезультатПодписания     - Структура:
//  * ЗаголовокДанных       - Строка
//  * СообщитьОЗавершении   - Булево
//  * ПоказатьКомментарий   - Булево
//  * КонтекстОперации      - Неопределено,Произвольный
//  * ПрекратитьВыполнение  - Булево
//  * БезПодтверждения      - Булево
//  * ОтборСертификатов     - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных           - Массив из Структура:
//    ** ИдентификаторДанных - Строка
//    ** Данные             - ДвоичныеДанные
//    ** Представление      - Структура:
//       *** Значение       - ДокументСсылка.СообщениеЭДО
//       *** Представление  - Строка
//    ** ТребуетсяЗаполнитьПодписанта - Булево
//    ** СвойстваПодписи    - Строка,
//                            См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Операция              - Строка
//  * Успех                 - Булево
//  * Отказ                 - Булево
//  * ВыбранныйСертификат   - Структура:
//    ** Ссылка             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Отпечаток          - Строка - отпечаток сертификата в формате строки Base64.
//    ** Данные             - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  * ПаролиСертификатов    - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ТекущийЭлементНабораДанных - Структура
//  * ПользовательНажалКнопкуПодписать - Булево
//  КонтекстСозданияПодписей - См. НовыйКонтекстСозданияПодписейПоВыбраннымСертификатам
Процедура СоздатьПодписиПоВыбраннымСертификатамПослеВыполнения(РезультатПодписания, КонтекстСозданияПодписей) Экспорт
	
	Если РезультатПодписания = Неопределено
		ИЛИ Не РезультатПодписания.Успех Тогда
		ВыбратьСледующиеДанныеДляСозданияПодписиПоВыбраннымСертификатам(КонтекстСозданияПодписей);
		Возврат;
	КонецЕсли;
	
	ДанныеДляПодписанияПоУчетнымЗаписям = КонтекстСозданияПодписей.ДанныеДляПодписанияПоУчетнымЗаписям;
	ИндексНабораДанных = КонтекстСозданияПодписей.ИндексНабораДанных;
	ОписаниеНабораДанных = ДанныеДляПодписанияПоУчетнымЗаписям[ИндексНабораДанных];
	
	ПодписиДанныхПоУчетнымЗаписям = КонтекстСозданияПодписей.ПодписиДанныхПоУчетнымЗаписям;
	НаборПодписейДанных = ПодписиДанныхПоУчетнымЗаписям[ОписаниеНабораДанных.ИдентификаторУчетнойЗаписи];
	Если НаборПодписейДанных = Неопределено Тогда
		НаборПодписейДанных = Новый Массив; // См. Массив из см. НоваяПодписьДанных
		ПодписиДанныхПоУчетнымЗаписям.Вставить(ОписаниеНабораДанных.ИдентификаторУчетнойЗаписи, НаборПодписейДанных);
	КонецЕсли;
	
	Для Каждого ОписаниеДанных Из РезультатПодписания.НаборДанных Цикл
		
		Если Не ОписаниеДанных.Свойство("СвойстваПодписи") Тогда
			Продолжить;
		КонецЕсли;
		
		ПодписьДанных = НоваяПодписьДанных();
		ПодписьДанных.ИдентификаторДанных = ОписаниеДанных.ИдентификаторДанных;
		ПодписьДанных.Подпись = ОписаниеДанных.СвойстваПодписи.Подпись;
		
		НаборПодписейДанных.Добавить(ПодписьДанных);
		
	КонецЦикла;
	
	ВыбратьСледующиеДанныеДляСозданияПодписиПоВыбраннымСертификатам(КонтекстСозданияПодписей);
	
КонецПроцедуры

// Параметры:
//  КонтекстСозданияПодписей - см. НовыйКонтекстСозданияПодписейПоВыбраннымСертификатам
Процедура ВыбратьСледующиеДанныеДляСозданияПодписиПоВыбраннымСертификатам(КонтекстСозданияПодписей)
	
	КонтекстСозданияПодписей.ИндексНабораДанных = КонтекстСозданияПодписей.ИндексНабораДанных + 1;
	
	СоздатьПодписиПоВыбраннымСертификатамПослеПодготовкиКонтекста(КонтекстСозданияПодписей);
	
КонецПроцедуры

// Параметры:
//  КонтекстСозданияПодписей - см. НовыйКонтекстСозданияПодписейПоВыбраннымСертификатам
Процедура СоздатьПодписиПоВыбраннымСертификатамЗавершение(КонтекстСозданияПодписей)
	
	// См. СоздатьПодписиПоВыбраннымСертификатам.ОповещениеОЗавершении
	ВыполнитьОбработкуОповещения(КонтекстСозданияПодписей.ОповещениеОЗавершении,
		КонтекстСозданияПодписей.ПодписиДанныхПоУчетнымЗаписям);
	
КонецПроцедуры

// Параметры:
//  ОписаниеНабораДанных - см. НовоеОписаниеНабораДанныхДляИнтерактивногоПодписанияПоУчетнойЗаписи
// 
// Возвращаемое значение:
//  Структура -  Описание данных для подписания через БСП:
// * ЗаголовокДанных - Строка
// * СообщитьОЗавершении - Булево
// * ПоказатьКомментарий - Булево
// * КонтекстОперации - Неопределено
// * ПрекратитьВыполнение - Булево
// * БезПодтверждения - Булево
// * ОтборСертификатов - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
// * НаборДанных - Массив из см. ИнтеграцияОблачногоЭДО.НовыеДанныеСообщенияДляИнтерактивногоПодписания
// * Операция - Строка
// * ПредставлениеНабора - Строка
Функция ОписаниеДанныхДляПодписанияЧерезБСП(ОписаниеНабораДанных)
	
	Сертификаты = ОписаниеНабораДанных.Сертификаты;
	НаборДанных = ОписаниеНабораДанных.НаборДанных;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("ЗаголовокДанных",      НСтр("ru = 'Документ'"));
	ОписаниеДанных.Вставить("СообщитьОЗавершении",  Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий",  Ложь);
	ОписаниеДанных.Вставить("КонтекстОперации",     Неопределено);
	ОписаниеДанных.Вставить("ПрекратитьВыполнение", Истина);
	ОписаниеДанных.Вставить("БезПодтверждения",     Истина);
	ОписаниеДанных.Вставить("ОтборСертификатов",    Сертификаты);
	ОписаниеДанных.Вставить("НаборДанных",          НаборДанных);
	
	КоличествоДанных = НаборДанных.Количество();
	Если КоличествоДанных = 1 Тогда
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание электронного документа'"));
	Иначе
		ОписаниеДанных.Вставить("Операция", НСтр("ru = 'Подписание электронных документов'"));
		ОписаниеДанных.Вставить("ПредставлениеНабора",
			СтрШаблон(НСтр("ru = 'Электронные документы (%1)'"), КоличествоДанных));
	КонецЕсли;
	
	Возврат ОписаниеДанных;
	
КонецФункции

#КонецОбласти

#Область РезультатОбработкиДействийЭДО

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
Функция РезультатОбработкиДействийИнтеграцииЭДО(КонтекстОбработки)
	
	РезультатОбработки = ИнтерфейсДокументовЭДОКлиент.НовыйРезультатОбработкиДействийИнтеграцииЭДО();
	
	РезультатОбработки.КонтекстДиагностики = КонтекстОбработки.КонтекстДиагностики;
	
	РезультатыДействий = КонтекстОбработки.РезультатыДействий;
	
	ДополнитьИтогВыполненияПоРезультамДействийЭДО(РезультатОбработки.ИтогВыполненияДействий, РезультатыДействий);
	
	ДополнитьВыполненныеДействияПоРезультамДействийЭДО(
		КонтекстОбработки.СостояниеВыполненияДействий.ВыполненныеДействияПоУчетнымЗаписям, РезультатыДействий);
	
	ДополнитьДокументыДляОбработкиИзвещенийПоРезультамДействийЭДО(
		РезультатОбработки.ДокументыДляОбработкиИзвещений, РезультатыДействий);
	
	НаборДействийДляПродолженияПоУчетнымЗаписям = НаборДействийДляПродолженияПоУчетнымЗаписям(
		КонтекстОбработки.ИсходныйНаборДействийЭДО, КонтекстОбработки.СостояниеВыполненияДействий.ВыполненныеДействияПоУчетнымЗаписям);
	
	РезультатОбработки.ПродолжитьВыполнениеДействий =
		ЗначениеЗаполнено(КонтекстОбработки.РасшифрованныеМаркерыПоУчетнымЗаписям)
		ИЛИ ЗначениеЗаполнено(КонтекстОбработки.ПодписиДанныхПоУчетнымЗаписям)
		ИЛИ ЗначениеЗаполнено(НаборДействийДляПродолженияПоУчетнымЗаписям);
	
	Если РезультатОбработки.ПродолжитьВыполнениеДействий Тогда
		РезультатОбработки.ПараметрыПродолженияДействий = ПараметрыПродолженияВыполненияДействийЭДОПоУчетнымЗаписям(
			КонтекстОбработки, НаборДействийДляПродолженияПоУчетнымЗаписям);
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

// Параметры:
//  ИтогДействийЭДО - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйИтогВыполненияДействийПоЭДО
//  РезультатыДействийПоУчетнымЗаписям - см. ИнтеграцияОблачногоЭДО.НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО
Процедура ДополнитьИтогВыполненияПоРезультамДействийЭДО(ИтогДействийЭДО, РезультатыДействийПоУчетнымЗаписям)
	
	Для Каждого РезультатДействийПоУчетнойЗаписи Из РезультатыДействийПоУчетнымЗаписям Цикл
		РезультатДействий = РезультатДействийПоУчетнойЗаписи.Значение;
		ИнтерфейсДокументовЭДОКлиентСервер.ДополнитьИтогВыполненияДействийПоЭДО(ИтогДействийЭДО, РезультатДействий.Итог);
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ВыполненныеДействияПоУчетнымЗаписям - см. НовыеВыполненныеДействияПоУчетнымЗаписям
//  РезультатыДействийПоУчетнымЗаписям - см. ИнтеграцияОблачногоЭДО.НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО
Процедура ДополнитьВыполненныеДействияПоРезультамДействийЭДО(ВыполненныеДействияПоУчетнымЗаписям, РезультатыДействийПоУчетнымЗаписям)
	
	Для Каждого РезультатДействийПоУчетнойЗаписи Из РезультатыДействийПоУчетнымЗаписям Цикл
		
		ИдентификаторУчетнойЗаписи = РезультатДействийПоУчетнойЗаписи.Ключ;
		РезультатДействий = РезультатДействийПоУчетнойЗаписи.Значение;
		
		ВыполненныеДействия = ВыполненныеДействияПоУчетнымЗаписям[ИдентификаторУчетнойЗаписи];
		Если ВыполненныеДействия = Неопределено Тогда
			ВыполненныеДействия = Новый Массив; // Массив из ПеречислениеСсылка.ДействияПоЭДО
			ВыполненныеДействияПоУчетнымЗаписям.Вставить(ИдентификаторУчетнойЗаписи, ВыполненныеДействия);
		КонецЕсли;
		
		Для Каждого ОбработаноПоДействию Из РезультатДействий.Итог.ОбработаноПоДействиям Цикл
			ВыполненныеДействия.Добавить(ОбработаноПоДействию.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДокументыДляОбработкиИзвещений - Соответствие из КлючИЗначение:
//  * Ключ - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * Значение - Булево
//  РезультатыДействийПоУчетнымЗаписям - см. ИнтеграцияОблачногоЭДО.НовыеРезультатыДействийПоУчетнымЗаписямОблачногоЭДО
Процедура ДополнитьДокументыДляОбработкиИзвещенийПоРезультамДействийЭДО(ДокументыДляОбработкиИзвещений, РезультатыДействийПоУчетнымЗаписям)
	
	Для Каждого РезультатДействийПоУчетнойЗаписи Из РезультатыДействийПоУчетнымЗаписям Цикл
		РезультатДействий = РезультатДействийПоУчетнойЗаписи.Значение;
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
			ДокументыДляОбработкиИзвещений, РезультатДействий.ДокументыДляОбработкиИзвещений, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ПодписиДанных - Массив из см. НоваяПодписьДанных
//  * РасшифрованныеМаркеры - см. КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных
//  * НаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
Функция НовыеПараметрыПродолженияВыполненияДействийЭДО() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("ПодписиДанных", Новый Массив);
	Параметры.Вставить("РасшифрованныеМаркеры", КриптографияБЭДКлиентСервер.НовыйНаборРасшифрованныхДанных());
	Параметры.Вставить("НаборДействий", ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО());
	Возврат Параметры;
КонецФункции

// Параметры:
//  ИсходныйНаборДействий - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
//  ВыполненныеДействияПоУчетнымЗаписям - см. НовыеВыполненныеДействияПоУчетнымЗаписям
//
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  * Значение - см. ИнтерфейсДокументовЭДОКлиентСервер.НовыйНаборДействийПоЭДО
Функция НаборДействийДляПродолженияПоУчетнымЗаписям(ИсходныйНаборДействий, ВыполненныеДействияПоУчетнымЗаписям)
	
	НаборДействийПоУчетнымЗаписям = Новый Соответствие;
	
	Для Каждого ВыполненныеДействияПоУчетнойЗаписи Из ВыполненныеДействияПоУчетнымЗаписям Цикл
		
		ИдентификаторУчетнойЗаписи = ВыполненныеДействияПоУчетнойЗаписи.Ключ;
		ВыполненныеДействия = ВыполненныеДействияПоУчетнойЗаписи.Значение;
		
		НаборДействийДляПродолжения = ИнтерфейсДокументовЭДОКлиент.НаборДействийПослеПодписанияРасшифровки(ИсходныйНаборДействий, ВыполненныеДействия);
		
		Если ЗначениеЗаполнено(НаборДействийДляПродолжения) Тогда
			НаборДействийПоУчетнымЗаписям.Вставить(ИдентификаторУчетнойЗаписи, НаборДействийДляПродолжения);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборДействийПоУчетнымЗаписям;
	
КонецФункции

// Параметры:
//  КонтекстОбработки - см. НовыйКонтекстОбработкиРезультатаВыполненияДействийЭДО
//  НаборДействийДляПродолженияПоУчетнымЗаписям - см. НаборДействийДляПродолженияПоУчетнымЗаписям
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка - идентификатор учетной записи облачного ЭДО.
//  * Значение - Массив из см. НовыеПараметрыПродолженияВыполненияДействийЭДО
Функция ПараметрыПродолженияВыполненияДействийЭДОПоУчетнымЗаписям(КонтекстОбработки, НаборДействийДляПродолженияПоУчетнымЗаписям)
	
	ПродолженияВыполненияПоУчетнымЗаписям = Новый Соответствие;
	
	ПодписиДанныхПоУчетнымЗаписям = КонтекстОбработки.ПодписиДанныхПоУчетнымЗаписям;
	РасшифрованныеМаркерыПоУчетнымЗаписям = КонтекстОбработки.РасшифрованныеМаркерыПоУчетнымЗаписям;
	
	Для Каждого РезультатДействийПоУчетнойЗаписи Из КонтекстОбработки.РезультатыДействий Цикл
		
		ИдентификаторУчетнойЗаписи = РезультатДействийПоУчетнойЗаписи.Ключ;
		
		ПодписиДанных = ПодписиДанныхПоУчетнымЗаписям[ИдентификаторУчетнойЗаписи];
		РасшифрованныеМаркеры = РасшифрованныеМаркерыПоУчетнымЗаписям[ИдентификаторУчетнойЗаписи];
		
		Если Не ЗначениеЗаполнено(ПодписиДанных)
			И Не ЗначениеЗаполнено(РасшифрованныеМаркеры) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПродолжения = НовыеПараметрыПродолженияВыполненияДействийЭДО();
		
		Если ПодписиДанных <> Неопределено Тогда
			ПараметрыПродолжения.ПодписиДанных = ПодписиДанных;
		КонецЕсли;
		
		Если РасшифрованныеМаркеры <> Неопределено Тогда
			ПараметрыПродолжения.РасшифрованныеМаркеры = РасшифрованныеМаркеры;
		КонецЕсли;
		
		НаборДействийДляПродолжения = НаборДействийДляПродолженияПоУчетнымЗаписям[ИдентификаторУчетнойЗаписи];
		
		Если НаборДействийДляПродолжения <> Неопределено Тогда
			ПараметрыПродолжения.НаборДействий = НаборДействийДляПродолжения;
		КонецЕсли;
		
		ПродолженияВыполненияПоУчетнымЗаписям.Вставить(ИдентификаторУчетнойЗаписи, ПараметрыПродолжения);
		
	КонецЦикла;
	
	Возврат ПродолженияВыполненияПоУчетнымЗаписям;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Приглашения

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
//                - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеВходящееПриглашение
Функция НовыеПараметрыДействияСПриглашениями()
	Параметры = Новый Структура;
	Параметры.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Параметры.Вставить("Приглашения", Новый Массив);
	Возврат Параметры;
КонецФункции

// Возвращаемое значение:
//  См. НовыеПараметрыДействияСПриглашениями
Функция ПараметрыДействияСПриглашениями(Оповещение, Приглашения)
	Параметры = НовыеПараметрыДействияСПриглашениями();
	Параметры.ОповещениеОЗавершении = Оповещение;
	Параметры.Приглашения = Приглашения;
	Возврат Параметры;
КонецФункции

// Параметры:
//  ОповещениеОЗавершении - ОписаниеОповещения
//  Приглашения - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеИсходящееПриглашение
//                - Массив из см. ПриглашенияЭДОКлиентСервер.НовоеВходящееПриглашение
Процедура АвторизоватьсяВСервисеЭДОПоПриглашениям(ОповещениеОЗавершении, Приглашения)
	
	ИдентификаторыУчетныхЗаписейЭДО = ОбщегоНазначенияБЭДКлиент.ВыгрузитьКолонку(Приглашения,
		 "ИдентификаторОрганизации", Истина); // см. АвторизоватьсяВСервисеЭДО.ИдентификаторыУчетныхЗаписейЭДО
	
	ПараметрыАвторизации = НовыеПараметрыАвторизацииВСервисеЭДО();
	ПараметрыАвторизации.ОповещениеОЗавершении = ОповещениеОЗавершении;
	ПараметрыАвторизации.ИдентификаторыУчетныхЗаписейЭДО = ИдентификаторыУчетныхЗаписейЭДО;
	
	АвторизоватьсяВСервисеЭДО(ПараметрыАвторизации);
	
КонецПроцедуры

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  ПараметрыДействия - см. НовыеПараметрыДействияСПриглашениями
Процедура ОтправитьПриглашенияПослеАвторизацииВСервисеЭДО(ИтогРасшифровки, ПараметрыДействия) Экспорт
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ОтправитьПриглашенияВФоне(
		ПараметрыДействия.Приглашения, ИтогРасшифровки.НаборРасшифрованныхДанных);
	
	ОжидатьЗавершениеДействияСПриглашениями(ДлительнаяОперация, ПараметрыДействия);
	
КонецПроцедуры

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  ПараметрыДействия - см. НовыеПараметрыДействияСПриглашениями
Процедура ПринятьПриглашенияПослеАвторизацииВСервисеЭДО(ИтогРасшифровки, ПараметрыДействия) Экспорт
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ПринятьПриглашенияВФоне(
		ПараметрыДействия.Приглашения, ИтогРасшифровки.НаборРасшифрованныхДанных);
	
	ОжидатьЗавершениеДействияСПриглашениями(ДлительнаяОперация, ПараметрыДействия);
	
КонецПроцедуры

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  ПараметрыДействия - см. НовыеПараметрыДействияСПриглашениями
Процедура ОтклонитьПриглашенияПослеАвторизацииВСервисеЭДО(ИтогРасшифровки, ПараметрыДействия) Экспорт
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ОтклонитьПриглашенияВФоне(
		ПараметрыДействия.Приглашения, ИтогРасшифровки.НаборРасшифрованныхДанных);
	
	ОжидатьЗавершениеДействияСПриглашениями(ДлительнаяОперация, ПараметрыДействия);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ПараметрыДействия - см. НовыеПараметрыДействияСПриглашениями
Процедура ОжидатьЗавершениеДействияСПриглашениями(ДлительнаяОперация, ПараметрыДействия)
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатДействияСПриглашениями", ЭтотОбъект, ПараметрыДействия);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ПараметрыДействия - см. НовыеПараметрыДействияСПриглашениями
Процедура ОбработатьРезультатДействияСПриглашениями(ДлительнаяОперация, ПараметрыДействия) Экспорт
	
	Результат = ИнтеграцияОблачногоЭДОВызовСервера.РезультатДействияСПриглашениямиВФоне(ДлительнаяОперация);
	
	ВыполнитьОбработкуОповещения(ПараметрыДействия.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

#КонецОбласти

#Область УчетныеЗаписиЭДО

// Возвращаемое значение:
//  Структура - Новый контекст регистрации сертификатов ВЭДО:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ФормаВладелец - Неопределено,ФормаКлиентскогоПриложения
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  * Доверенности - Соответствие из КлючИЗначение:
//  ** Ключ - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  ** Значение - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * Организация - Неопределено,ОпределяемыйТип.Организация
//  * ИдентификаторЗаявки - Строка
Функция НовыйКонтекстРегистрацииСертификатовВЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ФормаВладелец", Неопределено);
	Контекст.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Контекст.Вставить("ПаролиСертификатов", Новый Соответствие);
	Контекст.Вставить("Доверенности", Новый Соответствие);
	Контекст.Вставить("Организация", Неопределено);
	Контекст.Вставить("ИдентификаторЗаявки", "");
	Возврат Контекст;
КонецФункции

// Параметры:
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
// 
// Возвращаемое значение:
//  см. НовыйРезультатОтправкиСертификатовДляРегистрацииВЭДО
Функция РезультатОтправкиСертификатовДляРегистрацииВЭДО(КонтекстРегистрации)
	Результат = НовыйРезультатОтправкиСертификатовДляРегистрацииВЭДО();
	Результат.КонтекстДиагностики = КонтекстРегистрации.КонтекстДиагностики;
	Результат.ПаролиСертификатов = КонтекстРегистрации.ПаролиСертификатов;
	Результат.ИдентификаторЗаявки = КонтекстРегистрации.ИдентификаторЗаявки;
	Возврат Результат;
КонецФункции

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
Процедура ПодписатьДанныеНаРегистрациюВЭДОПослеПодготовки(ДлительнаяОперация, КонтекстРегистрации) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось подготовить данные регистрационного пакета.'")
			+ Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	Иначе
		РезультатПодготовкиДанных = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // См. ИнтеграцияОблачногоЭДО.ПодготовитьДанныеДляПодписанияНаРегистрациюВЭДО
		ТекстОшибки = РезультатПодготовкиДанных.ТекстОшибки;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда  
		РезультатОперации = РезультатОтправкиСертификатовДляРегистрацииВЭДО(КонтекстРегистрации);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ВыполнитьОбработкуОповещения(КонтекстРегистрации.ОповещениеОЗавершении, РезультатОперации);
		Возврат;
	КонецЕсли;
	
	Если РезультатПодготовкиДанных.СертификатыУжеЗарегистрированы Тогда
		РезультатОперации = РезультатОтправкиСертификатовДляРегистрацииВЭДО(КонтекстРегистрации);
		РезультатОперации.СертификатыУжеЗарегистрированы = Истина;
		ВыполнитьОбработкуОповещения(КонтекстРегистрации.ОповещениеОЗавершении, РезультатОперации);
		Возврат;
	КонецЕсли;
	
	КонтекстРегистрации.ИдентификаторЗаявки = РезультатПодготовкиДанных.ИдентификаторЗаявки;
	
	ОписаниеДанныхДляИнтерактивногоПодписания = ОписаниеДанныхДляИнтерактивногоПодписанияНаРегистрациюВЭДО(
		РезультатПодготовкиДанных.ДанныеДляПодписания, КонтекстРегистрации);
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьРегистрационныйПакетЭДОПослеПодписания",
		ИнтеграцияОблачногоЭДОКлиент, КонтекстРегистрации);
	
	КриптографияБЭДКлиент.Подписать(ОписаниеДанныхДляИнтерактивногоПодписания,
		КонтекстРегистрации.КонтекстДиагностики, КонтекстРегистрации.ФормаВладелец, Оповещение);
	
КонецПроцедуры

// Параметры:
//  ДанныеДляПодписания - см. ИнтеграцияОблачногоЭДО.НовыеДанныеДляПодписанияНаРегистрациюВЭДО
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
// 
// Возвращаемое значение:
//  Структура:
//  * Операция - Строка
//  * ОтборСертификатов - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * ПередВыполнением - Неопределено,ОписаниеОповещения
//  * НаборДанных - Массив из Структура
//  * ПредставлениеНабора - Строка
//  * СписокПредставлений - СписокЗначений из ОписаниеОповещения
//  * ЗаголовокДанных - Строка
//  * БезПодтверждения - Булево
//  * ПоказатьКомментарий - Булево
//  
Функция ОписаниеДанныхДляИнтерактивногоПодписанияНаРегистрациюВЭДО(ДанныеДляПодписания, КонтекстРегистрации)
	
	Операция = НСтр("ru = 'Подписание регистрационных данных на подключение к сервису 1С-ЭДО'");
	ПредставлениеНабора = НСтр("ru = 'Пользовательское соглашение, Данные для регистрации у оператора ЭДО'");
	
	Если ЗначениеЗаполнено(ДанныеДляПодписания.СертификатДляПодписания) Тогда
		ОтборСертификатов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДляПодписания.СертификатДляПодписания); // Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
		ОбработчикЗаполненияПодписанта = Неопределено;
	Иначе
		ОтборСертификатов = ДанныеДляПодписания.СертификатыДляВыбора;
		ОбработчикЗаполненияПодписанта = Новый ОписаниеОповещения("ЗаполнитьПодписантаДанныхНаРегистрациюВЭДО",
			ИнтеграцияОблачногоЭДОКлиент, КонтекстРегистрации);
	КонецЕсли;
	
	НаборДанных = Новый Массив; // Массив из Структура
	ОписаниеДанныхСоглашения = Новый Структура("Идентификатор, Данные",
		ИдентификаторДанныхСоглашенияНаПодключениеЭДО(), ДанныеДляПодписания.ДанныеСоглашения);
	НаборДанных.Добавить(ОписаниеДанныхСоглашения);
	ОписаниеДанныхДляРегистрации = Новый Структура("Идентификатор, Данные",
		ИдентификаторДанныхДляРегистрацииЭДО(), ДанныеДляПодписания.ДанныеДляРегистрации);
	НаборДанных.Добавить(ОписаниеДанныхДляРегистрации);
	
	СписокПредставлений = Новый СписокЗначений; // СписокЗначений из ОписаниеОповещения
	
	ПредставлениеДанныхСоглашения = НСтр("ru = 'Пользовательское соглашение на подключение к сервису 1С-ЭДО'");
	ОбработчикВизуализацииСоглашения = Новый ОписаниеОповещения("ПоказатьСоглашениеНаРегистрациюВЭДО",
		ИнтеграцияОблачногоЭДОКлиент);
	СписокПредставлений.Добавить(ОбработчикВизуализацииСоглашения, ПредставлениеДанныхСоглашения);
	
	ФайлДанныхДляРегистрации = РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла();
	ФайлДанныхДляРегистрации.ДвоичныеДанные = ДанныеДляПодписания.ДанныеДляРегистрации;
	ФайлДанныхДляРегистрации.ИмяФайла = СтрШаблон(НСтр("ru = 'Данные для регистрации у оператора ЭДО_%1.xml'"),
		КонтекстРегистрации.ИдентификаторЗаявки);
	
	ПараметрыВизуализацииДанных = Новый Структура("ФайлДанныхДляРегистрации, ИдентификаторФормы",
		ФайлДанныхДляРегистрации, КонтекстРегистрации.ФормаВладелец.УникальныйИдентификатор);
	
	ПредставлениеДанныхДляРегистрации = НСтр("ru = 'Данные для регистрации учетной записи у оператора ЭДО'");
	ОбработчикВизуализацииЗаявки = Новый ОписаниеОповещения("ПоказатьДанныеДляРегистрацииВЭДО",
		ИнтеграцияОблачногоЭДОКлиент, ПараметрыВизуализацииДанных);
	СписокПредставлений.Добавить(ОбработчикВизуализацииЗаявки, ПредставлениеДанныхДляРегистрации);
	
	Результат = Новый Структура;
	Результат.Вставить("Операция", Операция);
	Результат.Вставить("ОтборСертификатов", ОтборСертификатов);
	Результат.Вставить("ПередВыполнением", ОбработчикЗаполненияПодписанта);
	Результат.Вставить("НаборДанных", НаборДанных);
	Результат.Вставить("ПредставлениеНабора", ПредставлениеНабора);
	Результат.Вставить("СписокПредставлений", СписокПредставлений);
	Результат.Вставить("ЗаголовокДанных", "");
	Результат.Вставить("БезПодтверждения", Истина);
	Результат.Вставить("ПоказатьКомментарий", Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторДанныхСоглашенияНаПодключениеЭДО()
	Возврат "СоглашениеНаПодключениеЭДО";
КонецФункции

// Возвращаемое значение:
//  Строка
Функция ИдентификаторДанныхДляРегистрацииЭДО()
	Возврат "ДанныеДляРегистрацииЭДО";
КонецФункции

// Параметры:
//  РезультатВыбораСертификата - Структура:
//  * Оповещение - ОписаниеОповещения
//  * ОписаниеДанных - Структура:
//    ** ТекущийЭлементНабораДанных - Структура:
//    *** Данные - ДвоичныеДанные
//    ** ЗаголовокДанных - Строка
//    ** СообщитьОЗавершении - Булево
//    ** ПоказатьКомментарий - Булево
//    ** КонтекстОперации - Неопределено,Произвольный
//    ** ПрекратитьВыполнение - Булево
//    ** БезПодтверждения - Булево
//    ** ОтборСертификатов - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** НаборДанных - Массив из см. ДанныеДляПодписанияРегистрационногоПакета
//    ** ВыбранныйСертификат - Структура:
//       *** Ссылка    - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//       *** Отпечаток - Строка - отпечаток сертификата в формате строки Base64.
//       *** Данные    - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
Процедура ЗаполнитьПодписантаДанныхНаРегистрациюВЭДО(РезультатВыбораСертификата, КонтекстРегистрации) Экспорт
	
	ВыбранныйСертификат = РезультатВыбораСертификата.ОписаниеДанных.ВыбранныйСертификат.Ссылка;
	
	РезультатЗаполнения = ИнтеграцияОблачногоЭДОВызовСервера.ЗаполнитьДанныеДляПодписанияНаРегистрациюВЭДОПоСертификату(
		КонтекстРегистрации.Организация, КонтекстРегистрации.ИдентификаторЗаявки, ВыбранныйСертификат);
	
	ОписаниеДанных = Новый Структура("Данные", РезультатЗаполнения.ДанныеДляПодписания);
	ВыполнитьОбработкуОповещения(РезультатВыбораСертификата.Оповещение, ОписаниеДанных);
	
КонецПроцедуры

// Параметры:
//  РезультатПодписания - см. УчетныеЗаписиЭДОКлиент.РезультатОперацииВСервисе1СЭДО
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
Процедура ОтправитьРегистрационныйПакетЭДОПослеПодписания(РезультатПодписания, КонтекстРегистрации) Экспорт
	
	Подписи = ОбработатьРезультатПодписанияРегистрационногоПакетаЭДО(РезультатПодписания, КонтекстРегистрации);
	
	Если Подписи.ПодписьДанныхДляРегистрации = Неопределено
		ИЛИ Подписи.ПодписьСоглашения = Неопределено Тогда
		ОбработатьРезультатОтправкиРегистрационногоПакетаЭДО(Неопределено, КонтекстРегистрации);
		Возврат;
	КонецЕсли;
	
	ИдентификаторЗаявки = КонтекстРегистрации.ИдентификаторЗаявки;
	ФормаВладелец = КонтекстРегистрации.ФормаВладелец;
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ОтправитьРегистрационныйПакетЭДОВФоне(
		КонтекстРегистрации.Организация, ИдентификаторЗаявки, Подписи, ФормаВладелец.УникальныйИдентификатор);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатОтправкиРегистрационногоПакетаЭДО", 
		ИнтеграцияОблачногоЭДОКлиент, КонтекстРегистрации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  РезультатПодписания - Структура:
//  * ЗаголовокДанных       - Строка
//  * СообщитьОЗавершении   - Булево
//  * ПоказатьКомментарий   - Булево
//  * КонтекстОперации      - Неопределено,Произвольный
//  * ПрекратитьВыполнение  - Булево
//  * БезПодтверждения      - Булево
//  * ОтборСертификатов     - Массив из СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * НаборДанных           - Массив из Структура:
//    ** Идентификатор      - Строка
//    ** Данные             - ДвоичныеДанные
//    ** СвойстваПодписи    - Строка
//                          - См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
//  * Операция              - Строка
//  * Успех                 - Булево
//  * Отказ                 - Булево
//  * ВыбранныйСертификат   - Структура:
//    ** Ссылка             - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//    ** Отпечаток          - Строка - отпечаток сертификата в формате строки Base64.
//    ** Данные             - Строка - адрес временного хранилища, содержащего двоичные данные сертификата.
//  * ПаролиСертификатов    - См. КриптографияБЭДКлиент.НовыеПаролиСертификатов
//  * ПользовательНажалКнопкуПодписать - Булево
//  КонтекстРегистрации - см. НовыйКонтекстОжиданияЗавершенияРегистрацииСертификатовВЭДО
//  
// Возвращаемое значение:
//  - Неопределено
//  - Структура:
//  * ПодписьСоглашения - Неопределено,ДвоичныеДанные
//  * ПодписьДанныхДляРегистрации - Неопределено,ДвоичныеДанные
//  * Доверенность - Неопределено,СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Функция ОбработатьРезультатПодписанияРегистрационногоПакетаЭДО(РезультатПодписания, КонтекстРегистрации)
	
	Подписи = Новый Структура;
	Подписи.Вставить("ПодписьСоглашения", Неопределено);
	Подписи.Вставить("ПодписьДанныхДляРегистрации", Неопределено);
	Подписи.Вставить("Доверенность", Неопределено);
	
	Если РезультатПодписания = Неопределено
		ИЛИ РезультатПодписания.Отказ
		ИЛИ Не РезультатПодписания.Свойство("НаборДанных") Тогда
		Возврат Подписи;
	КонецЕсли;
	
	Если РезультатПодписания.Свойство("ПаролиСертификатов") Тогда
		КонтекстРегистрации.ПаролиСертификатов = РезультатПодписания.ПаролиСертификатов;
	КонецЕсли;
	
	ВыбранныйСертификат = РезультатПодписания.ВыбранныйСертификат.Ссылка;
	Подписи.Доверенность = КонтекстРегистрации.Доверенности[ВыбранныйСертификат];
	
	Для Каждого ПодписанныеДанные Из РезультатПодписания.НаборДанных Цикл
		
		Если Не ПодписанныеДанные.Свойство("СвойстваПодписи") Тогда
			Продолжить
		КонецЕсли;
		
		Если ТипЗнч(ПодписанныеДанные.СвойстваПодписи) = Тип("Строка") Тогда
			СтруктураПодписи = ПолучитьИзВременногоХранилища(ПодписанныеДанные.СвойстваПодписи); // См. КриптографияБЭДКлиентСервер.НовыеСвойстваПодписи
		Иначе
			СтруктураПодписи = ПодписанныеДанные.СвойстваПодписи;
		КонецЕсли;
		
		Если ПодписанныеДанные.Идентификатор = ИдентификаторДанныхСоглашенияНаПодключениеЭДО() Тогда
			Подписи.ПодписьСоглашения = СтруктураПодписи.Подпись;
		КонецЕсли;
		
		Если ПодписанныеДанные.Идентификатор = ИдентификаторДанныхДляРегистрацииЭДО() Тогда
			Подписи.ПодписьДанныхДляРегистрации = СтруктураПодписи.Подпись;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат Подписи;
	
КонецФункции

// Параметры:
//  ДлительнаяОперация - Неопределено
//                     - см. ДлительныеОперации.ВыполнитьФункцию
//  КонтекстРегистрации - см. НовыйКонтекстРегистрацииСертификатовВЭДО
Процедура ОбработатьРезультатОтправкиРегистрационногоПакетаЭДО(ДлительнаяОперация, КонтекстРегистрации) Экспорт
	
	РезультатОтправки = РезультатОтправкиСертификатовДляРегистрацииВЭДО(КонтекстРегистрации);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Ошибка = НСтр("ru = 'Не удалось отправить регистрационный пакет.'");
	ИначеЕсли ДлительнаяОперация.Статус <> "Выполнено" Тогда
		Ошибка = ДлительнаяОперация.КраткоеПредставлениеОшибки;
	Иначе
		РезультатОпреации = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // см. ИнтеграцияОблачногоЭДО.ОтправитьРегистрационныйПакетЭДО
		Ошибка = РезультатОпреации.Ошибка;
		РезультатОтправки.Успех = РезультатОпреации.Успех;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		ДобавитьОшибкуРегистрацииСертификатаВЭДО(РезультатОтправки.КонтекстДиагностики, Ошибка);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(КонтекстРегистрации.ОповещениеОЗавершении, РезультатОтправки);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ОповещениеОЗавершении - ОписаниеОповещения
Процедура ОбработатьРезультатыРегистрацииСертификатовЭДО(ДлительнаяОперация, ОповещениеОЗавершении) Экспорт
	
	РезультатРегистрацииСертификатов = НовыйРезультатРегистрацииСертификатовВЭДО();
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
			
		ТекстОшибки = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось отправить регистрационный пакет.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ДобавитьОшибкуРегистрацииСертификатаВЭДО(РезультатРегистрацииСертификатов.КонтекстДиагностики, ТекстОшибки);
		
	Иначе
		РезультатОпреации = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ЗаполнитьЗначенияСвойств(РезультатРегистрацииСертификатов, РезультатОпреации); 
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатРегистрацииСертификатов);
	
КонецПроцедуры

// Показать данные для регистрации ВЭДО.
// 
// Параметры:
//  Результат - Неопределено
//  ПараметрыВизуализации - Структура:
//  * ФайлДанныхДляРегистрации - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
//  * ИдентификаторФормы - Неопределено,УникальныйИдентификатор
Процедура ПоказатьДанныеДляРегистрацииВЭДО(Результат, ПараметрыВизуализации) Экспорт
	
	Если ПараметрыВизуализации.ИдентификаторФормы = Неопределено Тогда
		УникальныйИдентификатор = Новый УникальныйИдентификатор;
	Иначе
		УникальныйИдентификатор = ПараметрыВизуализации.ИдентификаторФормы;
	КонецЕсли;
	
	ФайлДанныхДляРегистрации = ПараметрыВизуализации.ФайлДанныхДляРегистрации;
	
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(
		ФайлДанныхДляРегистрации.ДвоичныеДанные, УникальныйИдентификатор);
	
	ФайловаяСистемаКлиент.ОткрытьФайл(СсылкаНаДвоичныеДанныеФайла,, ФайлДанныхДляРегистрации.ИмяФайла);
	
КонецПроцедуры

// Параметры:
//  Результат - Неопределено
//  Контекст - Неопределено
Процедура ПоказатьСоглашениеНаРегистрациюВЭДО(Результат = Неопределено, Контекст = Неопределено) Экспорт
	
	ОткрытьПользовательскоеСоглашение1СЭДО();
	
КонецПроцедуры

// Открывает пользовательское соглашение сервиса 1С-ЭДО.
// 
Процедура ОткрытьПользовательскоеСоглашение1СЭДО()
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://portal.1c.ru/applications/30/licenseAgreement");
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * Успех - Булево
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО()
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  ПараметрыОбновления - см. НовыеПараметрыОбновленияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОПослеАвторизацииВСервисеЭДО(ИтогРасшифровки, ПараметрыОбновления) Экспорт
	
	Если Не ЗначениеЗаполнено(ИтогРасшифровки.НаборРасшифрованныхДанных) Тогда
		Результат = НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО();
		ВыполнитьОбработкуОповещения(ПараметрыОбновления.ОповещениеОЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	ФормаВладелец = ПараметрыОбновления.ФормаВладелец;
	
	ИдентификаторФормы = ?(ФормаВладелец = Неопределено, Неопределено, ФормаВладелец.УникальныйИдентификатор);
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОВФоне(
		ПараметрыОбновления.ИдентификаторУчетнойЗаписиЭДО, ПараметрыОбновления.ПараметрыУведомлений,
		ИтогРасшифровки.НаборРасшифрованныхДанных, ИдентификаторФормы);
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОЗавершение",
		ИнтеграцияОблачногоЭДОКлиент, ПараметрыОбновления);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ПараметрыОбновления - см. НовыеПараметрыОбновленияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ОбновитьНастройкиУведомленийУчетнойЗаписиЭДОЗавершение(ДлительнаяОперация, ПараметрыОбновления) Экспорт

	Результат = НовыйРезультатОбновленияНастройкиУведомленийУчетнойЗаписиЭДО();
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		
		ВидОперации = НСтр("ru = 'Обновление настройки уведомлений учетной записи ЭДО'");
		ТекстСообщения = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось обновить настройки уведомлений учетной записи ЭДО.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		Ошибка = ОбработкаНеисправностейБЭДКлиент.НоваяОшибка(ВидОперации,
			ОбработкаНеисправностейБЭДКлиентСервер.ВидОшибкиНеизвестнаяОшибка(), ТекстСообщения, ТекстСообщения);
		ОбработкаНеисправностейБЭДКлиент.ДобавитьОшибку(Результат.КонтекстДиагностики, Ошибка,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ИнтеграцияОблачногоЭДО);
		
	Иначе
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // см. ИнтеграцияОблачногоЭДО.ОбновитьНастройкиУведомленийУчетнойЗаписиЭДО
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыОбновления.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура:
//  * ПараметрыУведомлений - Неопределено
//                         - см. УчетныеЗаписиЭДОКлиентСервер.НовыеПараметрыУведомлений
//  * КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
Функция НовыйРезультатПолученияНастройкиУведомленийУчетнойЗаписиЭДО()
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыУведомлений", Неопределено);
	Результат.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
	Возврат Результат;
КонецФункции

// Параметры:
//  ИтогРасшифровки - см. КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных
//  ПараметрыПолучения - см. НовыеПараметрыПолученияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ПолучитьНастройкиУведомленийУчетнойЗаписиЭДОПослеАвторизацииВСервисеЭДО(ИтогРасшифровки, ПараметрыПолучения) Экспорт
	
	Если Не ЗначениеЗаполнено(ИтогРасшифровки.НаборРасшифрованныхДанных) Тогда
		Результат = НовыйРезультатПолученияНастройкиУведомленийУчетнойЗаписиЭДО();
		ВыполнитьОбработкуОповещения(ПараметрыПолучения.ОповещениеОЗавершении, Результат);
		Возврат;
	КонецЕсли;
	
	ФормаВладелец = ПараметрыПолучения.ФормаВладелец;
	
	ИдентификаторФормы = ?(ФормаВладелец = Неопределено, Неопределено, ФормаВладелец.УникальныйИдентификатор);
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.НастройкиУведомленийУчетнойЗаписиЭДОВФоне(
		ПараметрыПолучения.ИдентификаторУчетнойЗаписиЭДО,
		ИтогРасшифровки.НаборРасшифрованныхДанных,
		ПараметрыПолучения.Организация,
		ИдентификаторФормы);
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкиУведомленийУчетнойЗаписиЭДОЗавершение",
		ИнтеграцияОблачногоЭДОКлиент, ПараметрыПолучения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ФормаВладелец);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ПараметрыПолучения - см. НовыеПараметрыПолученияНастройкиУведомленийУчетнойЗаписиЭДО
Процедура ПолучитьНастройкиУведомленийУчетнойЗаписиЭДОЗавершение(ДлительнаяОперация, ПараметрыПолучения) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		
		Результат = НовыйРезультатПолученияНастройкиУведомленийУчетнойЗаписиЭДО();
		
		ВидОперации = НСтр("ru = 'Получение настройки уведомлений учетной записи ЭДО'");
		ТекстОшибки = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось получить настройки уведомлений учетной записи ЭДО.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ДобавитьНеизвестнуюОшибку(Результат.КонтекстДиагностики, ВидОперации, ТекстОшибки);
		
	Иначе
		Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // см. ИнтеграцияОблачногоЭДО.НастройкиУведомленийУчетнойЗаписиЭДО
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыПолучения.ОповещениеОЗавершении, Результат);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ОповещениеОЗавершении - ОписаниеОповещения
Процедура ОбновитьИнформациюОбУчетнойЗаписиЭДОЗавершение(ДлительнаяОперация, ОповещениеОЗавершении) Экспорт
	
	Если ДлительнаяОперация = Неопределено
		ИЛИ ДлительнаяОперация.Статус <> "Выполнено" Тогда
		
		РезультатОбновления = Новый Структура;
		РезультатОбновления.Вставить("Успех", Ложь);
		РезультатОбновления.Вставить("КонтекстДиагностики", ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики());
		
		ВидОперации = НСтр("ru = 'Обновление информации об учетной записи ЭДО'");
		ТекстОшибки = ?(ДлительнаяОперация = Неопределено, 
			НСтр("ru = 'Не удалось обновить информацию об учетной записи ЭДО.'"),
			ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ДобавитьНеизвестнуюОшибку(РезультатОбновления.КонтекстДиагностики, ВидОперации, ТекстОшибки);
		
	Иначе
		РезультатОбновления = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата); // см. ИнтеграцияОблачногоЭДО.ОбновитьИнформациюОбУчетнойЗаписиЭДО
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатОбновления);
	
КонецПроцедуры

// Параметры:
//  КонтекстДиагностики - см. ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики
//  ТекстОшибки - Строка
Процедура ДобавитьОшибкуРегистрацииСертификатаВЭДО(КонтекстДиагностики, ТекстОшибки)
	ВидОперации = НСтр("ru = 'Регистрация сертификата в сервисе ЭДО.'");
	ДобавитьНеизвестнуюОшибку(КонтекстДиагностики, ВидОперации, ТекстОшибки);
КонецПроцедуры

// Параметры:
//  Оповещение - ОписаниеОповещения - Результат: Неопределено, Массив из см. РегистрСведений.УчетныеЗаписиОблачногоЭДО.Идентификатор
//  Владелец - Неопределено,ФормаКлиентскогоПриложения
//  Заголовок - Неопределено,Строка
Процедура ОткрытьФормуВыбораУчетныхЗаписейОблачногоЭДО(Оповещение, Владелец, Заголовок) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	Если ЗначениеЗаполнено(Заголовок) Тогда
		ПараметрыФормы.Вставить("Заголовок", Заголовок);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиОблачногоЭДО.Форма.ФормаСписка",ПараметрыФормы,Владелец,,,,Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область АвторизацияВСервисеЭДО

// Возвращаемое значение:
//  Структура:
//  * ОповещениеОЗавершении - ОписаниеОповещения
//  * ИдентификаторыУчетныхЗаписейЭДО - Массив из Строка
//  * ПаролиСертификатов - см. КриптографияБЭД.ПаролиСертификатов
//  * Организация - Неопределено - организация будет определяться по индентификатору учетной записи ЭДО.
//                - ОпределяемыйТип.Организация
//  * ВыбранныйСертификат - Неопределено - сертификат будет определяться по индентификатору учетной записи ЭДО.
//               - СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
Функция НовыеПараметрыАвторизацииВСервисеЭДО()
	Контекст = Новый Структура;
	Контекст.Вставить("ОповещениеОЗавершении", Новый ОписаниеОповещения);
	Контекст.Вставить("ИдентификаторыУчетныхЗаписейЭДО", Новый Массив);
	Контекст.Вставить("ПаролиСертификатов", Новый Соответствие);
	Контекст.Вставить("Организация", Неопределено);
	Контекст.Вставить("ВыбранныйСертификат", Неопределено);
	Возврат Контекст;
КонецФункции

// Параметры:
//  ПараметрыАвторизации - см. НовыеПараметрыАвторизацииВСервисеЭДО
Процедура АвторизоватьсяВСервисеЭДО(ПараметрыАвторизации)
	
	Оповещение = Новый ОписаниеОповещения("АвторизоватьсяВСервисеЭДОПослеПолученияОтпечатков", ЭтотОбъект,
		ПараметрыАвторизации);
	
	КриптографияБЭДКлиент.ПолучитьОтпечаткиСертификатов(Оповещение);
	
КонецПроцедуры

// Параметры:
//  ОтпечаткиПоКонтекстам - см. КриптографияБЭДКлиентСервер.НовыеРезультатыПолученияОтпечатков
//  ПараметрыАвторизации - см. НовыеПараметрыАвторизацииВСервисеЭДО
Процедура АвторизоватьсяВСервисеЭДОПослеПолученияОтпечатков(ОтпечаткиПоКонтекстам, ПараметрыАвторизации) Экспорт
	
	ДлительнаяОперация = ИнтеграцияОблачногоЭДОВызовСервера.АвторизоватьсяВСервисеЭДОВФоне(
		ПараметрыАвторизации.ИдентификаторыУчетныхЗаписейЭДО, ОтпечаткиПоКонтекстам,
		ПараметрыАвторизации.Организация, ПараметрыАвторизации.ВыбранныйСертификат);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатАвторизацииВСервисеЭДО", ЭтотОбъект, ПараметрыАвторизации);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

// Параметры:
//  ДлительнаяОперация - см. ДлительныеОперации.ВыполнитьФункцию
//  ПараметрыАвторизации - см. НовыеПараметрыАвторизацииВСервисеЭДО
Процедура ОбработатьРезультатАвторизацииВСервисеЭДО(ДлительнаяОперация, ПараметрыАвторизации) Экспорт
	
	РезультатАвторизации = ИнтеграцияОблачногоЭДОВызовСервера.РезультатАвторизацииВСервисеЭДОВФоне(ДлительнаяОперация);
	
	Если ЗначениеЗаполнено(РезультатАвторизации.ЗашифрованныеМаркеры) Тогда
		КриптографияБЭДКлиент.НачатьРасшифровкуНабораДанных(ПараметрыАвторизации.ОповещениеОЗавершении,
			РезультатАвторизации.ЗашифрованныеМаркеры, ПараметрыАвторизации.ПаролиСертификатов,
			РезультатАвторизации.КонтекстДиагностики);
	Иначе
		ИтогРасшифровки = КриптографияБЭДКлиент.НовыйИтогРасшифровкиНабораДанных();
		ИтогРасшифровки.ПаролиСертификатов = ПараметрыАвторизации.ПаролиСертификатов;
		ВыполнитьОбработкуОповещения(ПараметрыАвторизации.ОповещениеОЗавершении, ИтогРасшифровки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
