#Область ПрограммныйИнтерфейс

#Область СобытияФормИСМП

Процедура МодификацияРеквизитовФормы(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты, ВидПродукции) Экспорт
	
	ПараметрыИнтеграцииФормыПроверкиИПодбора = ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, ВидПродукции);
	Если ТипЗнч(ПараметрыИнтеграцииФормыПроверкиИПодбора)<>Тип("Массив") Тогда
		ПараметрыИнтеграцииФормыПроверкиИПодбора = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыИнтеграцииФормыПроверкиИПодбора);
	КонецЕсли;
	
	Для Каждого ПараметрыИнтеграцииФормыПроверки Из ПараметрыИнтеграцииФормыПроверкиИПодбора Цикл
		Если ЗначениеЗаполнено(ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормы) Тогда
			ПараметрыИнтеграции.Вставить(ВидПродукции, ПараметрыИнтеграцииФормыПроверкиИПодбора);
			
			Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьСтатусПроверкиПодбораДокумента Тогда
				
				ПроверкаИПодборПродукцииИС.ДобавитьТаблицуСтатусовПроверки(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
				
			КонецЕсли;
			
			Если ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
				
				Если ПараметрыИнтеграцииФормыПроверки.РазмещатьЭлементыИнтерфейса Тогда
					
					Если ПараметрыИнтеграцииФормыПроверки.ДоступныОбъемноСортовыеКоды Тогда
						ПараметрыИнтеграции.Вставить("ДоступныОбъемноСортовыеКоды", Истина);
					КонецЕсли;
					ПутьКРеквизиту = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект+"."+ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
					ПроверкаИПодборПродукцииИС.ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграции, ПутьКРеквизиту, ДобавляемыеРеквизиты);
					
				КонецЕсли;
				
				ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграции, ДобавляемыеРеквизиты);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура МодификацияЭлементовФормы(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП");
	Если ПараметрыИнтеграции = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПараметрыИнтеграции.ВидыПродукции Цикл
		НастройкиМассивом = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если НастройкиМассивом = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Настройки Из НастройкиМассивом Цикл
			Если Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
				Продолжить;
			КонецЕсли;
			ПроверкаИПодборПродукцииИС.ДобавитьКоманднуюПанельИПодменюПроверкиИПодбора(Форма, Настройки);
			ПроверкаИПодборПродукцииИС.ДобавитьКнопкуПроверкиИПодбора(Форма, Настройки, ВидПродукции);
			ПроверкаИПодборПродукцииИС.ДобавитьКолонкуСтатусаПроверкиПодбора(Форма, Настройки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#Область ПризнакАвтоматическийОСУИС

Процедура ЗаполнитьПризнакАвтоматическийОСУИСВСтроке(СтрокаТовары) Экспорт
	
	СтрокаТовары.АвтоматическийОСУИС = Ложь;
	Если Не ОбщегоНазначенияИСКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(СтрокаТовары.ВидПродукцииИС) Тогда 
		Возврат;
	КонецЕсли;
	
	МассивGTIN = Новый Массив;
	СоответствиеGTIN = Новый Соответствие;
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Таблица.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	Таблица.Колонки.Добавить("ПодходитGTIN", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	СтрокаТаблицы = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовары);
	Таблица.Колонки.Добавить();
	
	ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьПроверяемыеGTIN(Таблица, МассивGTIN, СоответствиеGTIN, Ложь);
	
	Если МассивGTIN.Количество() Тогда
		ОписаниеGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(МассивGTIN);
	КонецЕсли;
	
	Для Каждого GTIN Из МассивGTIN Цикл
		Описание = ОписаниеGTIN.Получить(GTIN);
		Если Описание <> Неопределено И Описание.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы.ПодходитGTIN = СтрокаТаблицы.ПодходитGTIN + 1;
	КонецЦикла;
	
	СтрокаТовары.АвтоматическийОСУИС = СтрокаТаблицы.ПодходитGTIN = 1;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакАвтоматическийОСУИСВТаблице(ТаблицаТовары, ЗаполнитьКолонкуGTIN = Ложь) Экспорт
	
	Если ИнтеграцияИС.ХарактеристикиИспользуются() Тогда
		Поля = "Номенклатура,Характеристика";
	Иначе
		Поля = "Номенклатура";
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаТовары) = Тип("ТаблицаЗначений") Тогда
		Таблица = ТаблицаТовары.Скопировать(Новый Структура("Номенклатура", Ложь), Поля);
	Иначе
		Таблица = ТаблицаТовары.Выгрузить(Новый Структура("Номенклатура", Ложь), Поля);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл
		Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(СтрокаТЧ.ВидПродукцииИС) Тогда
			ЗаполнитьЗначенияСвойств(Таблица.Добавить(), СтрокаТЧ);
		Иначе 
			СтрокаТЧ.АвтоматическийОСУИС = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Таблица.Свернуть(Поля);
	Таблица.Индексы.Добавить(Поля);
	Таблица.Колонки.Добавить("ПодходитGTIN", ОбщегоНазначения.ОписаниеТипаЧисло(1));
	Таблица.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
	
	МассивGTIN = Новый Массив;
	СоответствиеGTIN = Новый Соответствие;
	
	ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьПроверяемыеGTIN(Таблица, МассивGTIN, СоответствиеGTIN, Ложь);
	Поиск = Новый Структура(Поля);
	
	Если МассивGTIN.Количество() Тогда
		Описание = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(МассивGTIN);
	КонецЕсли;
	
	Для Каждого Штрихкод Из МассивGTIN Цикл
		ОписаниеШтрихкода = Описание.Получить(Штрихкод);
		Если ОписаниеШтрихкода <> Неопределено И ОписаниеШтрихкода.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Поиск,СоответствиеGTIN.Получить(Штрихкод));
		ИсходнаяСтрока = Таблица.НайтиСтроки(Поиск)[0];
		ИсходнаяСтрока.ПодходитGTIN = ИсходнаяСтрока.ПодходитGTIN + 1;
		ИсходнаяСтрока.GTIN = Штрихкод;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл
		Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(СтрокаТЧ.ВидПродукцииИС) Тогда
			ЗаполнитьЗначенияСвойств(Поиск,СтрокаТЧ);
			СтрокаТаблицы = Таблица.НайтиСтроки(Поиск)[0];
			СтрокаТЧ.АвтоматическийОСУИС = СтрокаТаблицы.ПодходитGTIN = 1;
			Если ЗаполнитьКолонкуGTIN Тогда
				СтрокаТЧ.GTIN = СтрокаТаблицы.GTIN;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВстраиваниеФормыПроверкиИПодбора

// Возвращает структуру, заполненную значениями по умолчанию, используемую для интеграции формы проверки и подбора
//   в прикладные документы конфигураци - потребителя библиотеки ГосИС. Если передана форма - сразу заполняет ее
//   специфику в переопределяемом модуле.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения, Неопределено - форма для которой возвращаются параметры интеграции
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - вид продукции для определения параметров интеграции
//
// Возвращаемое значение:
//  Структура - (См. ПроверкаИПодборПродукцииИС.ПараметрыИнтеграцииФормПроверкиИПодбора).
//
Функция ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма = Неопределено, ВидПродукции = Неопределено) Экспорт
	
	ВидПродукцииРодительный = ВидПродукцииРодительный(ВидПродукции);
	ВидПродукцииВинительный = ВидПродукцииВинительный(ВидПродукции);
	
	ПараметрыИнтеграции = ПроверкаИПодборПродукцииИС.ПараметрыИнтеграцииФормПроверкиИПодбора();
	
	ПараметрыИнтеграции.ИнформацияДляПользователяОБлокировке = НСтр(
		"ru = 'До окончания работы в форме сканирования и проверки маркируемой продукции внесение изменений в данной форме недоступно.'");
	ПараметрыИнтеграции.ИнформацияДляПользователяОПроверке = НСтр(
		"ru = 'Выполняется проверка маркируемой продукции. При окончании работы в форме проверки табличная часть может быть изменена.'");
	
	ПараметрыИнтеграции.Заголовки[0] = СтрШаблон(НСтр("ru = 'Проверить поступившую %1'"),             ВидПродукцииВинительный);
	ПараметрыИнтеграции.Заголовки[1] = СтрШаблон(НСтр("ru = 'Подобрать и проверить %1'"),             ВидПродукцииВинительный);
	ПараметрыИнтеграции.Заголовки[2] = СтрШаблон(НСтр("ru = 'Продолжить проверку поступившей %1'"),   ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[3] = СтрШаблон(НСтр("ru = 'Продолжить подбор и проверку %1'"),      ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[4] = СтрШаблон(НСтр("ru = 'Результаты проверки %1'"),               ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[5] = СтрШаблон(НСтр("ru = 'Результаты подбора %1'"),                ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[6] = СтрШаблон(НСтр("ru = 'Промежуточные результаты проверки %1'"), ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[7] = СтрШаблон(НСтр("ru = 'Промежуточные результаты подбора %1'"),  ВидПродукцииРодительный);
	ПараметрыИнтеграции.Заголовки[8] = СтрШаблон(НСтр("ru = 'Возобновить проверку %1'"),              ВидПродукцииРодительный);
	
	// Меняем окончание в словах: поступившую(ие) и поступившей(их)
	Если ИнтеграцияИСКлиентСервер.ПредставлениеВидаПродукцииВоМножественномЧисле(ВидПродукции) Тогда
		ПараметрыИнтеграции.Заголовки[0] = СтрШаблон(НСтр("ru = 'Проверить поступившие %1'"),           ВидПродукцииВинительный);
		ПараметрыИнтеграции.Заголовки[2] = СтрШаблон(НСтр("ru = 'Продолжить проверку поступивших %1'"), ВидПродукцииРодительный);
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
		ПараметрыИнтеграции.Заголовки[0] = СтрШаблон(НСтр("ru = 'Проверить поступившее %1'"),            ВидПродукцииВинительный);
		ПараметрыИнтеграции.Заголовки[2] = СтрШаблон(НСтр("ru = 'Продолжить проверку поступившего %1'"), ВидПродукцииРодительный);
	КонецЕсли;
	
	ПараметрыИнтеграции.Вставить("ОтображатьОшибкиПроверкиСредствамиККТ", Ложь);
	
	Если Форма <> Неопределено Тогда
		ПриОпределенииПараметровИнтеграцииФормыПроверкиИПодбора(Форма, ПараметрыИнтеграции, ВидПродукции);
	КонецЕсли;
	
	Возврат ПараметрыИнтеграции;
	
КонецФункции

// Вызывается при закрытии формы проверки и подбора маркируемой продукции из форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС и при инициализации формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС
//  ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - настраиваемый вид продукции
//  ВидимостьЭлементов - Булево - флаг видимости соответствующего блока по виду продукции
//  ПараметрыИнтеграции - См. ПараметрыИнтеграцииФормыПроверкиИПодбора
//
Процедура УправлениеЭлементамиОткрытияФормыПроверкиИПодбора(Форма, ВидПродукции, ВидимостьЭлементов, ПараметрыИнтеграции) Экспорт
	
	Объект = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	
	СтатусПроверкиИПодбора  = ПроверкаИПодборПродукцииИС.СтатусПроверкиИПодбораДокумента(Объект.Ссылка, ВидПродукции, ПараметрыИнтеграции.Сценарий);
	
	Если ПараметрыИнтеграции.ИспользоватьСтатусПроверкиПодбораДокумента Тогда
		
		ПроверкаИПодборПродукцииИС.УстановитьСтатусПоВидуПродукции(Форма, ВидПродукции, СтатусПроверкиИПодбора, ПараметрыИнтеграции.Сценарий);
		ПроверкаИПодборПродукцииИС.ОбновитьИнтерфейсПоВидуПродукции(Форма, ВидПродукции, СтатусПроверкиИПодбора, ПараметрыИнтеграции);
		ПроверкаИПодборПродукцииИС.УстановитьВидимостьЭлементов(Форма, ВидПродукции, ВидимостьЭлементов, ПараметрыИнтеграции.Сценарий);
		
		Если ПараметрыИнтеграции.ОтображатьОшибкиПроверкиСредствамиККТ Тогда
			ДополнитьПредставлениеКомандыПроверкиИПодбораНаличиемОшибокСредствамиККТ(Форма, ВидПродукции, ПараметрыИнтеграции.Сценарий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОкончаниеПроверкиИПодбора

// Удаляет пустые упаковки из дерева маркируемой продукции.
// 
// Параметры:
//  ДеревоМаркированнойПродукции - ДеревоЗначений - дерево упаковок маркируемой продукции из формы проверки и подбора.
//  ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции.
//
Процедура УдалитьПустыеУпаковкиДерева(ДеревоМаркированнойПродукции) Экспорт
	
	УдалитьПустыеУпаковкиВСтрокахДерева(ДеревоМаркированнойПродукции.Строки);
	
КонецПроцедуры

// Формирует пустую таблицу информации о проверенных и под, сформированную в форме проверки и подбора.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - содержит следующие колонки:
//  * Номенклатура        - ОпределяемыйТип.Номенклатура - Номекнлатура.
//  * Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//  * Серия               - ОпределяемыйТип.СерияНоменклатуры - Серия.
//  * Количество          - Число - количество по документу.
//  * КоличествоПодобрано - Число - фактическое (учетное) количество по результатам проверки и подбора.
//  * КоличествоПотребительскихУпаковок - Число - фактическое количество (потребительских кодов маркировки) по
//      результатам проверки и подбора. Заполняется если товар не штучный.
//  * GTIN                - ОпределяемыйТип.GTIN - GTIN.
Функция ПустаяТаблицаПодобраннойПровереннойПродукции() Экспорт
	
	ТаблицаПодобраннойПровереннойПродукции = Новый ТаблицаЗначений;
	
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Номенклатура",        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Характеристика",      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Серия",               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Количество",          ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("КоличествоПодобрано", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("GTIN",                Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("КоличествоПотребительскихУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат ТаблицаПодобраннойПровереннойПродукции;
	
КонецФункции

// Формирует пустую таблицу информации о GTIN, сопоставлении с номенклатурой, коэффициентах групповых упаковок.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// 	* GTIN                - ОпределяемыйТип.GTIN                       - GTIN.
//  * Номенклатура        - ОпределяемыйТип.Номенклатура               - Номекнлатура.
//  * Характеристика      - ОпределяемыйТип.ХарактеристикаНоменклатуры - Характеристика.
//  * Серия               - ОпределяемыйТип.СерияНоменклатуры          - Серия.
//  * Упаковка            - ОпределяемыйТип.Упаковка                   - Упаковка.
//  * ВидУпаковки         - ПеречислениеСсылка.ВидыУпаковокИС          - Вид упаковки.
//  * Коэффициент         - Число                                      - Коэффициент групповой упаковки.
Функция ПустаяТаблицаОписанияGTIN() Экспорт
	
	ТаблицаПодобраннойПровереннойПродукции = Новый ТаблицаЗначений;
	
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("GTIN",                               Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Номенклатура",                       Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Характеристика",                     Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Серия",                              Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Упаковка",                           Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("Коэффициент",                        ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("КоличествоПотребительскихУпаковок",  ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("ВидУпаковки",                        Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("ЕмкостьПотребительскойУпаковки",     ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаПодобраннойПровереннойПродукции.Колонки.Добавить("КоличествоВПотребительскойУпаковке", ОбщегоНазначения.ОписаниеТипаЧисло(18, 8));
	
	ТаблицаПодобраннойПровереннойПродукции.Индексы.Добавить("GTIN, ВидУпаковки");
	
	Возврат ТаблицаПодобраннойПровереннойПродукции;
	
КонецФункции

// Заполняет таблицу описания GTIN уникальными значениями из дерева упаковок.
// 
// Параметры:
// 	ТаблицаОписанияGTIN - см. ПустаяТаблицаОписанияGTIN.
// 	ДеревоМаркированнойПродукции - ДеревоЗначений - содержит результаты проверки и подбора с иерархией упаковок.
Процедура ЗаполнитьТаблицуОписанияGTINПоДеревуУпаковок(ТаблицаОписанияGTIN, ДеревоМаркированнойПродукции) Экспорт
	
	ЗаполнитьТаблицуОписанияGTINПоДеревуУпаковокРекурсивно(ТаблицаОписанияGTIN, ДеревоМаркированнойПродукции);
	
КонецПроцедуры

#Область РаботаСоСтатусамиПроверкиПодбораСтрок

// Заполнить кеш штрихкодов упаковок.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Сценарий - Неопределено - кеш на все сценарии,
//           - Число - кеш на определенный сценарий документа.
//
Процедура ЗаполнитьКешШтрихкодовУпаковок(Форма, Сценарий = Неопределено) Экспорт
	
	ПараметрыИнтеграцииМассив = Неопределено;
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
		ПараметрыИнтеграцииМассив = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если ПараметрыИнтеграцииМассив<>Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыИнтеграцииМассив = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрыИнтеграцииФормыПроверки Из ПараметрыИнтеграцииМассив Цикл
		
		Если НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сценарий <> Неопределено И Сценарий <> ПараметрыИнтеграцииФормыПроверки.Сценарий Тогда
			Продолжить;
		КонецЕсли;
	
		Настройки                  = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
		Настройки.Сценарий         = ПараметрыИнтеграцииФормыПроверки.Сценарий;
		Настройки.Объект           = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
		Настройки.Штрихкоды        = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок;
		Настройки.ШтрихкодУпаковки = ПараметрыИнтеграцииФормыПроверки.ИмяКолонкиШтрихкодУпаковки;
		Настройки.ЧастичноеВыбытие = ПараметрыИнтеграцииФормыПроверки.ДоступноЧастичноеВыбытие;
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, Настройки);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьКешШтрихкодовУпаковок(Форма, ОбновлениеТаблицыТоваров = Ложь, Сценарий = Неопределено) Экспорт

	ПараметрыИнтеграцииМассив = Неопределено;
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина) Цикл
		ПараметрыИнтеграцииМассив = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если ПараметрыИнтеграцииМассив<>Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыИнтеграцииМассив = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ПараметрыИнтеграцииФормыПроверки Из ПараметрыИнтеграцииМассив Цикл
		
		Если НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
			Возврат;
		КонецЕсли;
	
		Если Сценарий <> Неопределено И Сценарий <> ПараметрыИнтеграцииФормыПроверки.Сценарий Тогда
			Продолжить;
		КонецЕсли;
	
		Настройки = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
		Настройки.Сценарий         = ПараметрыИнтеграцииФормыПроверки.Сценарий;
		Настройки.Объект           = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
		Настройки.Штрихкоды        = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок;
		Настройки.ШтрихкодУпаковки = ПараметрыИнтеграцииФормыПроверки.ИмяКолонкиШтрихкодУпаковки;
		Настройки.Товары           = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары;
		Настройки.Серии            = ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиСерии;
		Настройки.ЧастичноеВыбытие = ПараметрыИнтеграцииФормыПроверки.ДоступноЧастичноеВыбытие;
		Настройки.ИспользоватьОСУ  = ПараметрыИнтеграцииФормыПроверки.ДоступныОбъемноСортовыеКоды;
		
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, Настройки, ОбновлениеТаблицыТоваров);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Формирует пустую таблицу о штриховых кодах верхнего уровня, для дальнейшего наполнения информацией из формы проверки и подбора.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров 
// * Штрихкод - Строка 
//
Функция ПустаяТаблицаШтрихкодовВерхнегоУровня() Экспорт
	
	ТаблицаШтрихкодовВерхнегоУровня = Новый ТаблицаЗначений;
	
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("ШтрихкодУпаковки",           Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаШтрихкодовВерхнегоУровня.Колонки.Добавить("Штрихкод",                   ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Возврат ТаблицаШтрихкодовВерхнегоУровня;
	
КонецФункции

// Фиксирует результаты сканирования в форме проверки и подбора в документе, из которого она была вызвана.
//
// Параметры:
//   РезультатПроверки - см. ПараметрыОкончанияПроверки.
//
Процедура ЗафиксироватьРезультатПроверкиИПодбора(РезультатПроверки) Экспорт
	
	ЗафиксироватьОписаниеGTIN(РезультатПроверки);
	
	МетаданныеДокумента = РезультатПроверки.ПроверяемыйДокумент.Метаданные();
	
	Если ИнтеграцияИС.СодержитсяВПодсистеме("ГосИС", МетаданныеДокумента) Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
		МенеджерДокумента.ОтразитьРезультатыПроверкиИПодбора(РезультатПроверки);
	Иначе
		ПроверкаИПодборПродукцииИСМППереопределяемый.ОтразитьРезультатыСканированияВДокументе(РезультатПроверки);
	КонецЕсли;
	
	ШтрихкодированиеИСМПСлужебный.СинхронизироватьРезультатПроверкиСредствамиККТ(
		РезультатПроверки.ДеревоМаркированнойПродукции,
		РезультатПроверки.ВидПродукцииИС,
		РезультатПроверки.ПроверяемыйДокумент);
		
КонецПроцедуры

// Инициализирует структуру параметров завершения проверки и подбора маркируемой продукции (ИС МП)
// 
// Возвращаемое значение:
//   Структура - содержит следующие поля:
//     * ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции для которого требуется зафиксировать результат проверки и подбора
//     * СоздаватьАктОРасхождениях       - Булево - признак, того что требуется создания документа "Акт о расхождениях".
//     * СозданныйАктОРасхождениях       - ДокументСсылка - в данный параметр требуется поместить созданный документ "Акт о расхождениях".
//     * ПроверяемыйДокумент             - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
//     * ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - содержит следующие колонки:
//        ** ШтрихкодУпаковки - СправочникСсылка.ШтрихкодыУпаковокТоваров - Штрихкод упаковки
//        ** Штрихкод - Строка - Значение штрихкода
//     * ТаблицаПодобраннойПровереннойПродукции - см. ПустаяТаблицаПодобраннойПровереннойПродукции.
//     * ТаблицаРасхожденийШтриховыхКодов - ТаблицаЗначений - содержит расхождения при проверке маркируемой продукции
//     * ТаблицаОписанияGTIN - см. ПустаяТаблицаОписанияGTIN.
//     * Сценарий - Число - ключ сценария проверки маркируемой продукции в документе.
//
Функция ПараметрыОкончанияПроверки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидПродукцииИС",            Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	Результат.Вставить("СоздаватьАктОРасхождениях", Ложь);
	Результат.Вставить("СозданныйАктОРасхождениях");
	Результат.Вставить("ПроверяемыйДокумент");
	Результат.Вставить("ТаблицаШтрихкодовВерхнегоУровня");
	Результат.Вставить("ТаблицаШтрихкодовОбщая");
	Результат.Вставить("ТаблицаПодобраннойПровереннойПродукции");
	Результат.Вставить("ТаблицаРасхожденийШтриховыхКодов");
	Результат.Вставить("ТаблицаОписанияGTIN");
	Результат.Вставить("ТаблицаУпаковкиПоДокументу");
	Результат.Вставить("ШтрихкодыУпаковокПланЭДО");
	Результат.Вставить("ШтрихкодыУпаковокФактЭДО");
	Результат.Вставить("ШтрихкодыУпаковокРасхождения");
	Результат.Вставить("ДеревоМаркированнойПродукции");
	Результат.Вставить("Сценарий", 0);
	
	Возврат Результат;
	
КонецФункции

//Возвращает сформированный ранее Акт о расхождениях для переданного документа.
// 
//Параметры:
//   Документ - ДокументСсылка - ссылка на документ, для которого необходимо получить Акт о расхождениях:
//Возвращаемое значение:
//   Неопределено, ДокументСсылка - ссылка на Акт о расхождениях
Функция СформированныйАктОРасхождениях(Документ) Экспорт
	
	АктОРасхождениях = Неопределено;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПолучитьСформированныйАктОРасхождениях(Документ, АктОРасхождениях);
	
	Возврат АктОРасхождениях;
	
КонецФункции

//Возвращает для переданного документа таблицу его товаров, являющихся маркируемой продукцией требуемого вида.
//
//Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка - документ, маркируемую продукцию которого необходимо получить.
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид получаемой маркируемой продукции.
//  Сценарий - Число - номер сценария проверки.
//  ПараметрыСканирования - Неопределено, Структура - параметры сканирования.
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с подобранной продукцией переданного документа:
//   * GTIN           - ОпределяемыйТип.GTIN                       - штрихкод
//   * Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//   * Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
//   * Количество     - Число                                      - количество.
//
Функция ТаблицаМаркируемойПродукцииДокумента(Контекст, ВидМаркируемойПродукции, Сценарий = 0, ПараметрыСканирования = Неопределено) Экспорт
	
	ТаблицаМаркируемойПродукции = НоваяТаблицаМаркируемойПродукции();
	
	ДополнитьКолонкамиПоВидуПродукции(ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции,
		ПараметрыСканирования <> Неопределено И ПараметрыСканирования.ЗаполнятьСрокГодности);
	
	Если ТипЗнч(Контекст) = Тип("ДанныеФормыСтруктура") Тогда
		
		ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
			Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции, Сценарий);
		
	Иначе
		
		МетаданныеДокумента = Контекст.Метаданные();
		
		Если ИнтеграцияИС.СодержитсяВПодсистеме("ГосИС.ИСМП", МетаданныеДокумента) Тогда
			МенеджерДокумента = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
			МенеджерДокумента.ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, Контекст);
		ИначеЕсли МетаданныеДокумента.Имя = "ОтчетОбИмпортеЕГАИС"
				Или МетаданныеДокумента.Имя = "ОтчетОПроизводствеЕГАИС" Тогда
			МенеджерДокумента = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(МетаданныеДокумента.ПолноеИмя());
			МенеджерДокумента.ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ВидМаркируемойПродукции, Контекст);
		Иначе
			ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
				Контекст, ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции, Сценарий);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаМаркируемойПродукции;
	
КонецФункции

Функция ДанныеРезультатовПроверки(Форма) Экспорт
	
	РезультатыСканированияМаркируемойПродукции = Новый Структура;
	РезультатыСканированияМаркируемойПродукции.Вставить("ДеревоМаркированнойПродукции",          ДанныеФормыВЗначение(Форма.ДеревоМаркированнойПродукции, Тип("ДеревоЗначений")));
	РезультатыСканированияМаркируемойПродукции.Вставить("ПодобраннаяМаркируемаяПродукция",       ДанныеФормыВЗначение(Форма.ПодобраннаяМаркируемаяПродукция, Тип("ТаблицаЗначений")));
	РезультатыСканированияМаркируемойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",      Форма.ПараметрыПроверкиКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки", Форма.КоличествоНедопустимыхКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("УпаковкиДокумента",                     Форма.УпаковкиДокумента);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДетализацияСтруктурыХранения",          Форма.ДетализацияСтруктурыХранения);
	РезультатыСканированияМаркируемойПродукции.Вставить("РежимПроверки",                         Форма.РежимПроверки);
	РезультатыСканированияМаркируемойПродукции.Вставить("РежимДобавленияКодовМаркировки",        Форма.РежимДобавленияКодовМаркировки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДобавленныеУпаковки",                   Форма.ДобавленныеУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",          Форма.ДоступныеДляПроверкиУпаковки);
	РезультатыСканированияМаркируемойПродукции.Вставить("СледующийСтикерОтложено",               Форма.СледующийСтикерОтложено);
	РезультатыСканированияМаркируемойПродукции.Вставить("СодержимоеУпаковокНедоступно",          Форма.СодержимоеУпаковокНедоступно);
	РезультатыСканированияМаркируемойПродукции.Вставить("СохраненВыборПоМаркируемойПродукции",   Форма.СохраненВыборПоМаркируемойПродукции);
	РезультатыСканированияМаркируемойПродукции.Вставить("ДанныеВыбораПоМаркируемойПродукции",    Форма.ДанныеВыбораПоМаркируемойПродукции);
	РезультатыСканированияМаркируемойПродукции.Вставить("ШтрихкодТекущейПроверяемойУпаковки",    ШтрихкодТекущейПроверяемойУпаковки(Форма));
	РезультатыСканированияМаркируемойПродукции.Вставить("Контейнер",                             Форма.Контейнер);
	
	РезультатыСканированияМаркируемойПродукции.Вставить("ДанныеРанееСгенерированныхШтрихкодов",
		?(ЭтоАдресВременногоХранилища(Форма.АдресПредыдущихШтрихкодов),
			ПолучитьИзВременногоХранилища(Форма.АдресПредыдущихШтрихкодов),
			Неопределено)
	);
	
	РезультатыСканированияМаркируемойПродукции.Вставить("КоличествоПоДокументуСУчетомВидаПродукции",
		ДанныеФормыВЗначение(Форма.КоличествоПоДокументуСУчетомВидаПродукции, Тип("ТаблицаЗначений")));
	
	РезультатыСканированияМаркируемойПродукции.Вставить("ПродукцияПоДокументу",
		ДанныеФормыВЗначение(Форма.ПродукцияПоДокументу, Тип("ТаблицаЗначений")));
	
	Возврат РезультатыСканированияМаркируемойПродукции;
	
КонецФункции

Функция ШтрихкодТекущейПроверяемойУпаковки(Форма)

	Если Форма.ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		Возврат "";
	Иначе
		СтрокаСПроверяемойУпаковкой = Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
		
		Если СтрокаСПроверяемойУпаковкой = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат СтрокаСПроверяемойУпаковкой.Штрихкод;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

Функция РезультатыПроверкиУспешноСохранены(Форма, ВидПродукцииИС, ТекстОшибки) Экспорт
	
	Попытка
		
		ДанныеРезультатовПроверки = ДанныеРезультатовПроверки(Форма);
		
		РегистрыСведений.СтатусыПроверкиИПодбораДокументовИС.СохранитьПромежуточныеРезультатыПроверкиДокумента(
			Форма.ПроверяемыйДокумент,
			ВидПродукцииИС,
			Новый ХранилищеЗначения(ДанныеРезультатовПроверки),
			Форма.Сценарий);
		
	Исключение
		СобытияДляЖурналаРегистрации = Новый СписокЗначений();
		НовоеСобытие = Новый Структура();
		НовоеСобытие.Вставить("ИмяСобытия", "ПроверкаИПодборПродукцииИСМП");
		НовоеСобытие.Вставить("ПредставлениеУровня", "Ошибка");
		НовоеСобытие.Вставить("Комментарий", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

		СобытияДляЖурналаРегистрации.Добавить();
		
		ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СобытияДляЖурналаРегистрации);
		
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьРекурсивноКоличествоПоДаннымИБПоКолонкеКоличество(СтрокиДерева, СтрокиДереваНаборов) Экспорт
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			
			// Количество для мультитоварных наборов и монотоварных наборов с отдельной номенклатурой требуется рассчитать заново
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
				СтрокаДерева.Количество = 0;
				СтрокиДереваНаборов.Добавить(СтрокаДерева);
			ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
				И СтрокаДерева.Строки.Количество()
				И СтрокаДерева.Номенклатура <> СтрокаДерева.Строки[0].Номенклатура Тогда
				СтрокаДерева.Количество = 0;
				СтрокиДереваНаборов.Добавить(СтрокаДерева);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() Тогда
			ЗаполнитьРекурсивноКоличествоПоДаннымИБПоКолонкеКоличество(СтрокаДерева.Строки, СтрокиДереваНаборов);
		Иначе
			СтрокаДерева.КоличествоПотребительскихУпаковокПоДаннымИБ = СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок;
			СтрокаДерева.КоличествоПоДаннымИБ                        = СтрокаДерева.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область СерииНоменклатуры

Функция ЕстьПравоДобавлениеСерий() Экспорт
	
	ПравоДобавлениеСерий = Ложь;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ОпределитьПравоДобавлениеСерий(ПравоДобавлениеСерий);
	
	Возврат ПравоДобавлениеСерий;
	
КонецФункции

#КонецОбласти

Процедура ДополнитьТаблицуШтрихкодовКолонкамиЧастичногоВыбытия(Таблица) Экспорт
	
	Таблица.Колонки.Добавить("ЧастичноеВыбытиеКоличество",     ОбщегоНазначения.ОписаниеТипаЧисло(18, 8));
	Таблица.Колонки.Добавить("ЧастичноеВыбытиеВариантУчета",   Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
	Таблица.Колонки.Добавить("ЧастичноеВыбытиеНоменклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Таблица.Колонки.Добавить("ЧастичноеВыбытиеХарактеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
КонецПроцедуры

Функция ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидМаркируемойПродукции) Экспорт
	
	ЕстьМаркируемаяПродукция = Ложь;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидМаркируемойПродукции, ЕстьМаркируемаяПродукция);
	
	Возврат ЕстьМаркируемаяПродукция;
	
КонецФункции

Функция КонтрагентНеРезидент(Контрагент) Экспорт
	
	НеРезидент = Ложь;
	
	Если Контрагент <> Неопределено Тогда
		ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииКонтрагентНеРезидент(Контрагент, НеРезидент);
	КонецЕсли;
	
	Возврат НеРезидент;
	
КонецФункции

Процедура ДополнитьGTINПодобраннойПродукцииПоМаркируемымТоварам(ДанныеДокумента, МаркированныеТовары) Экспорт
	
	Если ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Количество()= 0 Или МаркированныеТовары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АнализируемыйТовар = Новый Соответствие;
	Для Каждого Строка Из МаркированныеТовары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуемыеХарактеристикиИGTIN = АнализируемыйТовар[Строка.Номенклатура];
		Если ИспользуемыеХарактеристикиИGTIN = Неопределено Тогда
			ИспользуемыеХарактеристикиИGTIN = Новый Соответствие;
			АнализируемыйТовар.Вставить(Строка.Номенклатура, ИспользуемыеХарактеристикиИGTIN);
		КонецЕсли;
		
		ИспользуемыеGTIN = ИспользуемыеХарактеристикиИGTIN[Строка.Характеристика];
		Если ИспользуемыеGTIN = Неопределено Тогда
			ИспользуемыеGTIN = Новый Соответствие;
			ИспользуемыеХарактеристикиИGTIN.Вставить(Строка.Характеристика, ИспользуемыеGTIN);
		КонецЕсли;
		
		Если ИспользуемыеGTIN[Строка.GTIN] = Неопределено Тогда
			ИспользуемыеGTIN.Вставить(Строка.GTIN, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если АнализируемыйТовар.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьПродукцияПоДокументу = Ложь;
	
	Для Каждого СтрокаПодобраннойПродукции Из ДанныеДокумента.ПодобраннаяМаркируемаяПродукция Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		ИспользуемыеХарактеристикиИGTIN = АнализируемыйТовар[СтрокаПодобраннойПродукции.Номенклатура];
		Если ИспользуемыеХарактеристикиИGTIN = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ИспользуемыеGTIN = ИспользуемыеХарактеристикиИGTIN[СтрокаПодобраннойПродукции.Характеристика];
		Если ИспользуемыеGTIN = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущиеGTIN = Новый Соответствие;
		Для Каждого ЭлементСписка Из СтрокаПодобраннойПродукции.КодыGTIN Цикл
			ТекущиеGTIN.Вставить(ЭлементСписка.Значение, Истина);
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ИспользуемыеGTIN Цикл
			GTIN = КлючЗначение.Ключ;
			Если ТекущиеGTIN[GTIN] = Неопределено Тогда
				СтрокаПодобраннойПродукции.КодыGTIN.Добавить(GTIN);
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаПодобраннойПродукции.КодыGTIN.Количество() > ТекущиеGTIN.Количество() Тогда
			
			СтрокаПодобраннойПродукции.ПредставлениеGTIN = ПроверкаИПодборПродукцииИСМПКлиентСервер.ПредставлениеМассиваGTIN(СтрокаПодобраннойПродукции.КодыGTIN);
			Если СтрокаПодобраннойПродукции.КодыGTIN.Количество() = 1 Тогда
				СтрокаПодобраннойПродукции.GTIN = СтрокаПодобраннойПродукции.КодыGTIN[0].Значение;
			ИначеЕсли СтрокаПодобраннойПродукции.КодыGTIN.Количество() > 1 Тогда
				СтрокаПодобраннойПродукции.GTIN = "";
			КонецЕсли;
			
			ПерезаполнитьПродукцияПоДокументу = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПерезаполнитьПродукцияПоДокументу Тогда
		
		ПродукцияПоДокументу = ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.СкопироватьКолонки();
		
		Для Каждого СтрокаПодобраннойПродукции Из ДанныеДокумента.ПодобраннаяМаркируемаяПродукция Цикл
			
			Если СтрокаПодобраннойПродукции.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(
				ПродукцияПоДокументу.Добавить(), СтрокаПодобраннойПродукции);
			
		КонецЦикла;
		
		ДанныеДокумента.Вставить("ПродукцияПоДокументу", ПродукцияПоДокументу);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОчисткеСопоставленияМаркированнойПродукции(Форма, ИдентификаторыДереваМаркированнойПродукции, КэшированныеЗначения) Экспорт
	
	ПредставленияGTIN                  = Новый Соответствие;
	ТаблицаПредставлениеОстаточныхGTIN = ИнициализироватьТаблицуПредставлениеОстаточныхGTIN("ПредставлениеНоменклатуры");
	
	МассивСтрокДерева = Новый Массив;
	
	Для Каждого ИдентификаторИзмененойСтроки Из ИдентификаторыДереваМаркированнойПродукции Цикл
		
		СтрокаДерева = Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
		
		Если СтрокаДерева = Неопределено
			Или Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
			Или СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
			Или СтрокаДерева.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСтрокДерева.Добавить(СтрокаДерева);
		
		Если ПредставленияGTIN[СтрокаДерева.GTIN] = Неопределено
			И Не ЗначениеЗаполнено(СтрокаДерева.ПредставлениеСодержимогоДоСопоставления) Тогда
			
			ПредставленияGTIN[СтрокаДерева.GTIN] = НСтр("ru = '<Не сопоставлено>'");
			Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДерева.GTIN) Тогда
				СтрокаТаблицы      = ТаблицаПредставлениеОстаточныхGTIN.Добавить();
				СтрокаТаблицы.GTIN = СтрокаДерева.GTIN;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
		ТаблицаПредставлениеОстаточныхGTIN,, Форма.ВидМаркируемойПродукции, "ПредставлениеНоменклатуры");
	
	Для Каждого СтрокаТаблицыПредставлений Из ТаблицаПредставлениеОстаточныхGTIN Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыПредставлений.ПредставлениеНоменклатуры) Тогда
			ПредставленияGTIN[СтрокаТаблицыПредставлений.GTIN] = СтрокаТаблицыПредставлений.ПредставлениеНоменклатуры;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаБезСопоставления = ИнициализироватьПустуюСтруктуруСтрокиДляОчисткиСопоставления();
	
	ПодобраннаяПродукцияДляОчисткиСопоставления = Новый ТаблицаЗначений;
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("GTIN",                            Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Номенклатура",                    Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Характеристика",                  Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Серия",                           Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("ПредставлениеНоменклатуры",       Новый ОписаниеТипов("Строка"));
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("Изменение",                       Новый ОписаниеТипов("Число"));
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("СтатусПроверки",                  Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("ГоденДо",                         Новый ОписаниеТипов("Дата"));
	ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("СкоропортящаясяПродукция",        Новый ОписаниеТипов("Булево"));
	
	Если Форма.ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("МРЦ",         Новый ОписаниеТипов("Число"));
		ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки.Добавить("ВключаетМРЦ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
		
		ЭтоШтрихкодВводаОстатков = РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаДерева.GTIN);
		
		Если Не (ЭтоШтрихкодВводаОстатков Или ЗначениеЗаполнено(СтрокаДерева.Серия)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДляОчисткиСопоставления = ПодобраннаяПродукцияДляОчисткиСопоставления.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДляОчисткиСопоставления, СтрокаДерева);
		СтрокаДляОчисткиСопоставления.ПредставлениеНоменклатуры = ПредставленияGTIN[СтрокаДерева.GTIN];
		СтрокаДляОчисткиСопоставления.Изменение                 = 1;
		
		Если ЭтоШтрихкодВводаОстатков Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаБезСопоставления);
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаБезСопоставления, "Серия");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ПредставлениеСодержимогоДоСопоставления) Тогда
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = СтрокаДерева.ПредставлениеСодержимогоДоСопоставления;
		Иначе
			СтрокаДерева.ПредставлениеСодержимоеУпаковки = ПредставленияGTIN[СтрокаДерева.GTIN];
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПодобраннаяПродукцияДляОчисткиСопоставления.Количество() > 0 Тогда
		
		КолонкиГруппировок  = Новый Массив;
		КолонкиСуммирования = "Изменение";
		Для Каждого КолонкаТаблицы Из ПодобраннаяПродукцияДляОчисткиСопоставления.Колонки Цикл
			Если НРег(КолонкаТаблицы.Имя) = НРег(КолонкиСуммирования) Тогда
				Продолжить;
			КонецЕсли;
			КолонкиГруппировок.Добавить(КолонкаТаблицы.Имя);
		КонецЦикла;
		ПодобраннаяПродукцияДляОчисткиСопоставления.Свернуть(СтрСоединить(КолонкиГруппировок, ","), КолонкиСуммирования);
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриОчисткиСопоставления(
			Форма, ПодобраннаяПродукцияДляОчисткиСопоставления, ПроверкаИПодборПродукцииИСМП, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидПродукцииРодительный(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Возврат НСтр("ru = 'молока и молочной продукции (ВетИС)'");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		Возврат НСтр("ru = 'молока и молочной продукции (неподконтрольной ВетИС)'");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
		Возврат НСтр("ru = 'БАДов'");
	КонецЕсли;
	Возврат НРег(ПолучитьСклоненияСтроки(ВидПродукции, "Л=ru_RU", "ПД=Родительный")[0]);
	
КонецФункции

Функция ВидПродукцииВинительный(ВидПродукции) Экспорт
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Возврат НСтр("ru = 'молоко и молочную продукцию (ВетИС)'");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		Возврат НСтр("ru = 'молоко и молочную продукцию (неподконтрольную ВетИС)'");
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы Тогда
		Возврат НСтр("ru = 'БАДы'");
	КонецЕсли;
	Возврат НРег(ПолучитьСклоненияСтроки(ВидПродукции, "Л=ru_RU", "ПД=Винительный")[0]);
КонецФункции

Процедура ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаАгрегатор, КэшированныеЗначения) Экспорт
	Если ТипЗнч(Форма) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(Форма, СтрокаАгрегатор, КэшированныеЗначения, Форма.ПараметрыУказанияСерий);
КонецПроцедуры

Процедура ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, КэшированныеЗначения) Экспорт
	Если ТипЗнч(Форма) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	СобытияФормИСМППереопределяемый.ПриИзмененииКоличества(Форма, СтрокаАгрегатор, КэшированныеЗначения, Форма.ПараметрыУказанияСерий);
КонецПроцедуры

#Область ИнформацияОПроблемахУПД

Функция ДанныеНоменклатурыПоДаннымУПД(Документ, ВидПродукции) Экспорт
	
	ДанныеНоменклатурыПоДаннымУПД = Новый Структура;
	ДанныеНоменклатурыПоДаннымУПД.Вставить("Товары",                       Новый ТаблицаЗначений);
	ДанныеНоменклатурыПоДаннымУПД.Вставить("ТоварныеГруппы",               Новый Массив);
	ДанныеНоменклатурыПоДаннымУПД.Вставить("СтрокиТекущейТоварнойГруппы",  Новый Массив);
	ДанныеНоменклатурыПоДаннымУПД.Вставить("СтрокиНеМаркируемойПродукции", Новый Массив);
	ДанныеНоменклатурыПоДаннымУПД.Вставить("ШтрихкодНоменклатура",         Новый Соответствие);
	ДанныеНоменклатурыПоДаннымУПД.Вставить("ШтрихкодНоменклатураТаблица",  Неопределено);
	
	ШтрихкодНоменклатура        = ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыПоДаннымУПД(Документ);
	ШтрихкодНоменклатураТаблица = ШтрихкодированиеИСМПСлужебный.ДанныеМаркируемойНоменклатурыКодовМаркировкиПоДаннымЭДО(Документ);
	
	Если ШтрихкодНоменклатура.Количество() = 0 Тогда
		Возврат ДанныеНоменклатурыПоДаннымУПД;
	КонецЕсли;
	
	ТоварыПоУПД = Новый ТаблицаЗначений;
	ТоварыПоУПД.Колонки.Добавить("Штрихкод",               ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТоварыПоУПД.Колонки.Добавить("Номенклатура",           Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТоварыПоУПД.Колонки.Добавить("Характеристика",         Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТоварыПоУПД.Колонки.Добавить("ВидУпаковки",            Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ТоварыПоУПД.Колонки.Добавить("МультитоварнаяУпаковка", Новый ОписаниеТипов("Булево"));
	ТоварыПоУПД.Колонки.Добавить("МаркируемаяПродукция",   Новый ОписаниеТипов("Булево"));
	ТоварыПоУПД.Колонки.Добавить("ВидПродукции",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Если ШтрихкодНоменклатураТаблица = Неопределено Тогда
		Для Каждого КлючИЗначение Из ШтрихкодНоменклатура Цикл
			
			Штрихкод     = КлючИЗначение.Ключ;
			СтрокаТовары = КлючИЗначение.Значение;
			
			НоваяСтрока = ТоварыПоУПД.Добавить();
			НоваяСтрока.Штрихкод               = Штрихкод;
			НоваяСтрока.Номенклатура           = СтрокаТовары.Номенклатура;
			НоваяСтрока.Характеристика         = СтрокаТовары.Характеристика;
			НоваяСтрока.ВидУпаковки            = СтрокаТовары.ВидУпаковки;
			НоваяСтрока.МультитоварнаяУпаковка = СтрокаТовары.МультитоварнаяУпаковка;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТовары Из ШтрихкодНоменклатураТаблица Цикл
			
			НоваяСтрока = ТоварыПоУПД.Добавить();
			НоваяСтрока.Штрихкод       = СтрокаТовары.ЗначениеШтрихкода;
			НоваяСтрока.Номенклатура   = СтрокаТовары.Номенклатура;
			НоваяСтрока.Характеристика = СтрокаТовары.Характеристика;
			
			ДопСведения = ШтрихкодНоменклатура[СтрокаТовары.ЗначениеШтрихкода];
			Если ДопСведения <> Неопределено Тогда
				НоваяСтрока.ВидУпаковки            = ДопСведения.ВидУпаковки;
				НоваяСтрока.МультитоварнаяУпаковка = ДопСведения.МультитоварнаяУпаковка;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТоварыПоУПД.Количество() = 0 Тогда
		Возврат ДанныеНоменклатурыПоДаннымУПД;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Штрихкод               КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура           КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика         КАК Характеристика,
	|	ШтрихкодыУпаковок.ВидУпаковки            КАК ВидУпаковки,
	|	ШтрихкодыУпаковок.МультитоварнаяУпаковка КАК МультитоварнаяУпаковка
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&ТоварыПоУПД КАК ШтрихкодыУпаковок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Штрихкод                 КАК Штрихкод,
	|	ДанныеШтрихкодовУпаковок.Номенклатура             КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика           КАК Характеристика,
	|	ДанныеШтрихкодовУпаковок.ВидУпаковки              КАК ВидУпаковки,
	|	ДанныеШтрихкодовУпаковок.МультитоварнаяУпаковка   КАК МультитоварнаяУпаковка,
	|	ЕСТЬNULL(СвойстваМаркируемойПродукции.МаркируемаяПродукция, ЛОЖЬ) КАК МаркируемаяПродукция,
	|	ЕСТЬNULL(СвойстваМаркируемойПродукции.ВидПродукции,         ЛОЖЬ) КАК ВидПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
	|		ПО ДанныеШтрихкодовУпаковок.Номенклатура = СвойстваМаркируемойПродукции.Номенклатура";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварыПоУПД", ТоварыПоУПД);
	ТоварыПоУПД = Запрос.Выполнить().Выгрузить();
	
	НаличиеТоварныхГрупп         = Новый Соответствие;
	ТоварныеГруппы               = Новый Массив;
	СтрокиТекущейТоварнойГруппы  = Новый Массив;
	СтрокиНеМаркируемойПродукции = Новый Массив;
	
	Для Каждого СтрокаПоУПД Из ТоварыПоУПД Цикл
		
		Если СтрокаПоУПД.МаркируемаяПродукция Тогда
			
			Если НаличиеТоварныхГрупп[СтрокаПоУПД.ВидПродукции] = Неопределено Тогда
				НаличиеТоварныхГрупп[СтрокаПоУПД.ВидПродукции] = Истина;
				ТоварныеГруппы.Добавить(СтрокаПоУПД.ВидПродукции);
			КонецЕсли;
			
			Если СтрокаПоУПД.ВидПродукции = ВидПродукции Тогда
				СтрокиТекущейТоварнойГруппы.Добавить(СтрокаПоУПД);
			КонецЕсли;
			
		Иначе
			
			СтрокиНеМаркируемойПродукции.Добавить(СтрокаПоУПД);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеНоменклатурыПоДаннымУПД.Товары                       = ТоварыПоУПД;
	ДанныеНоменклатурыПоДаннымУПД.ТоварныеГруппы               = ТоварныеГруппы;
	ДанныеНоменклатурыПоДаннымУПД.СтрокиТекущейТоварнойГруппы  = СтрокиТекущейТоварнойГруппы;
	ДанныеНоменклатурыПоДаннымУПД.СтрокиНеМаркируемойПродукции = СтрокиНеМаркируемойПродукции;
	ДанныеНоменклатурыПоДаннымУПД.ШтрихкодНоменклатура         = ШтрихкодНоменклатура;
	ДанныеНоменклатурыПоДаннымУПД.ШтрихкодНоменклатураТаблица  = ШтрихкодНоменклатураТаблица;
	
	Возврат ДанныеНоменклатурыПоДаннымУПД;
	
КонецФункции

Процедура ПроверитьДанныеУПДНаНаличиеОшибок(ДанныеДокумента, ДанныеНоменклатурыПоДаннымУПД) Экспорт
	
	СтрокиНеМаркируемойПродукции = Новый Массив;
	
	Для Каждого Строка Из ДанныеНоменклатурыПоДаннымУПД.СтрокиНеМаркируемойПродукции Цикл
		СтрокиНеМаркируемойПродукции.Добавить(
			Новый Структура("Штрихкод, Номенклатура", Строка.Штрихкод, Строка.Номенклатура));
	КонецЦикла;
	
	СтрокиСОтсутствующимиВидамиПродукцииВДокументе = Новый Массив;
	
	ОтсутствующиеТоварныеГруппы = ТоварныеГруппыУПДОтсутствующиеВДокументе(
		ДанныеДокумента.ПроверяемыйДокумент, ДанныеДокумента.ВидМаркируемойПродукции, ДанныеНоменклатурыПоДаннымУПД.ТоварныеГруппы);
	
	Для Каждого ТоварнаяГруппа Из ОтсутствующиеТоварныеГруппы Цикл
		СтрокиТоварнойГруппы = ДанныеНоменклатурыПоДаннымУПД.Товары.НайтиСтроки(Новый Структура("ВидПродукции", ТоварнаяГруппа));
		
		СтрокиМаркируемойПродукции = Новый Массив;
		Для Каждого Строка Из СтрокиТоварнойГруппы Цикл
			СтрокиМаркируемойПродукции.Добавить(
				Новый Структура("Штрихкод, Номенклатура", Строка.Штрихкод, Строка.Номенклатура));
		КонецЦикла;
		
		СтрокиСОтсутствующимиВидамиПродукцииВДокументе.Добавить(
			Новый Структура("ВидПродукции, Строки", ТоварнаяГруппа, СтрокиМаркируемойПродукции));
		
	КонецЦикла;
	
	ОшибкиПоУПД = Новый Структура;
	
	Если СтрокиНеМаркируемойПродукции.Количество() > 0 Тогда
		ОшибкиПоУПД.Вставить("СтрокиНеМаркируемойПродукции", СтрокиНеМаркируемойПродукции);
	КонецЕсли;
	
	Если СтрокиСОтсутствующимиВидамиПродукцииВДокументе.Количество() > 0 Тогда
		ОшибкиПоУПД.Вставить("СтрокиСОтсутствующимиВидамиПродукцииВДокументе", СтрокиСОтсутствующимиВидамиПродукцииВДокументе);
	КонецЕсли;
	
	Если ОшибкиПоУПД.Количество() > 0 Тогда
		ДанныеДокумента.Вставить("ОшибкиПоУПД", ОшибкиПоУПД);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИнформациюОПроблемахУПД(ОшибкиПоУПД, ВидПродукции, УникальныйИдентификаторФормы) Экспорт
	
	НаименованиеСправочника = Метаданные.Справочники.НоменклатураКонтрагентов.Синоним;
	
	Если ОшибкиПоУПД.Свойство("СтрокиНеМаркируемойПродукции") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Коды маркировки %1 сопоставлены с позицией номенклатуры ""%2"" (в справочнике ""%3"").
		                             |Данная номенклатура является не маркируемой, поэтому коды не могут быть отображены в структуре упаковок формы проверки и подбора %4.'");
		
		ВидПродукцииРодительный = ВидПродукцииРодительный(ВидПродукции);
		
		ВывестиИнформациюОПроблемахУПДПоТовару(ОшибкиПоУПД.СтрокиНеМаркируемойПродукции, ВидПродукцииРодительный, ШаблонСообщения, НаименованиеСправочника, УникальныйИдентификаторФормы);
		
	КонецЕсли;
	
	Если ОшибкиПоУПД.Свойство("СтрокиСОтсутствующимиВидамиПродукцииВДокументе") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Коды маркировки %1 сопоставлены с позицией номенклатуры ""%2"" (в справочнике ""%3"").
		                             |Данная номенклатура относится к виду продукции: %4, такой вид продукции отсутствует в документе.'");
		
		Для Каждого СтрокаТоварнойГруппе Из ОшибкиПоУПД.СтрокиСОтсутствующимиВидамиПродукцииВДокументе Цикл
			ВывестиИнформациюОПроблемахУПДПоТовару(СтрокаТоварнойГруппе.Строки, СтрокаТоварнойГруппе.ВидПродукции, ШаблонСообщения, НаименованиеСправочника, УникальныйИдентификаторФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращает сохраненную в хранилище настроек данных форм детализацию отображения структуры упаковок в формах проверки и подбора ИСМП.
// 
// Параметры:
// 	РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе.
// Возвращаемое значение:
// 	ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - сохраненная детализация отображения структуры упаковок
Функция СохраненнаяДетализацияСтруктурыХранения(РежимПодбораСуществующихУпаковок) Экспорт
	
	ПолноеИмяФормы = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП.Формы.ПроверкаИПодбор.ПолноеИмя();
	
	СохраненнаяДетализация = Неопределено;
	СохраненныеНастройки   = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ПолноеИмяФормы, "");
	
	Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
		Если РежимПодбораСуществующихУпаковок
			И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
			СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХранения;
		ИначеЕсли Не РежимПодбораСуществующихУпаковок
			И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХраненияПриобретение") Тогда
			СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХраненияПриобретение;
		ИначеЕсли СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
			СохраненнаяДетализация = СохраненныеНастройки.ДетализацияСтруктурыХранения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДетализацияСтруктурыХраненияИС(СохраненнаяДетализация);
	
КонецФункции

// Сохраняет в хранилище настроек данных форм детализацию отображения структуры упаковок в формах проверки и подбора ИСМП.
// 
// Параметры:
// 	СохраняемыеНастройки - Структура - сохраняемые настройки структуры хранения.
Процедура СохранитьДетализациюСтруктурыХранения(СохраняемыеНастройки) Экспорт
	
	ПолноеИмяФормы = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП.Формы.ПроверкаИПодбор.ПолноеИмя();
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ПолноеИмяФормы, "", СохраняемыеНастройки);
	
КонецПроцедуры

// Выполняет конвертацию детализации структуры хранения
// 
// Параметры:
// 	ДетализацияСтруктурыХранения - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП,
// 	                               ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП,
// 	                               ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Старая детализация
// Возвращаемое значение:
// 	ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - Новая детализация
Функция ДетализацияСтруктурыХраненияИС(ДетализацияСтруктурыХранения) Экспорт
	
	Если ТипЗнч(ДетализацияСтруктурыХранения) = Тип("ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС") Тогда
		Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
			Возврат Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки;
		КонецЕсли;
		Возврат ДетализацияСтруктурыХранения;
	КонецЕсли;
	
	НоваяДетализация = Неопределено;
	
	Если ТипЗнч(ДетализацияСтруктурыХранения) = Тип("ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП") Тогда
		
		Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная Тогда
			НоваяДетализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
		ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
			НоваяДетализация =  Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковкиСПотребительскими;
		ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Коробки Тогда
			НоваяДетализация =  Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами;
		ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками Тогда
			НоваяДетализация =  Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
		ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
			НоваяДетализация =  Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДетализацияСтруктурыХранения) = Тип("ПеречислениеСсылка.ДетализацияСтруктурыХраненияПродукцииИСМП") Тогда
		
		Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.Полная Тогда
			НоваяДетализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная;
		ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.КоробаПотребительскиеУпаковки Тогда
			НоваяДетализация =  Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
		ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияПродукцииИСМП.ПотребительскиеУпаковки Тогда
			НоваяДетализация =  Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяДетализация;
	
КонецФункции

Функция ПрерватьОбработкуЗагрузкиДанных(ДанныеДокумента, ПараметрыСканирования, ДанныеНоменклатурыПоДаннымУПД, РезультатПолученияДанных, ВосстановлениеДетализацииТребуетОбращенияКСервису) Экспорт
	
	Если РезультатПолученияДанных.ТребуетсяОбновлениеКлючаСессии Тогда
		
		ДанныеДокумента.ДополнительноеДействиеЗагрузки = "ПродолжитьСЗапросомДанныхИАвторизацией";
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТребуетсяПрерватьОбработкуЗагрузкиДанных = Ложь;
	
	ДеревоУпаковок = РезультатПолученияДанных.ВложенныеШтрихкоды.ДеревоУпаковок;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.GTIN)
			И ДанныеДокумента.ВозможностьЗагрузкиДанныхБезПодключенияМОТП = Истина Тогда
			
			ТребуетсяПрерватьОбработкуЗагрузкиДанных = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяПрерватьОбработкуЗагрузкиДанных Тогда
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеДокумента.ВидМаркируемойПродукции) Тогда
			ПараметрыЗапросаКлючаСессии = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(ДанныеДокумента.Организация);
		Иначе
			ПараметрыЗапросаКлючаСессии = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(ДанныеДокумента.Организация);
		КонецЕсли;
		
		КлючСессии = ИнтерфейсАвторизацииИСМПСлужебный.ПроверитьОбновитьКлючСессии(ПараметрыЗапросаКлючаСессии);
		
		Если КлючСессии = Неопределено Тогда
			ДанныеДокумента.ДополнительноеДействиеЗагрузки = "ПродолжитьСЗапросомДанныхИАвторизацией";
		Иначе
			ДанныеДокумента.ДополнительноеДействиеЗагрузки = "ПродолжитьСЗапросомДанныхБезАвторизации";
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	ДанныеGTIN = Новый Соответствие;
	УточнениеКоэффициентовУпаковок = Новый Массив;
	ПроверитьКоэффициентыУпаковок(
		ДеревоУпаковок, УточнениеКоэффициентовУпаковок, ДанныеGTIN, ДанныеДокумента);
	
	Если РезультатПолученияДанных.ДанныеКодовМаркировки <> Неопределено Тогда
		
		УникальныеGTIN = Новый Соответствие;
		СписокGTIN = Новый Массив;
		
		Для Каждого СтрокаДанных Из РезультатПолученияДанных.ДанныеКодовМаркировки Цикл
			
			Если Не СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN Тогда
				Продолжить;
			КонецЕсли;
			
			Если УникальныеGTIN[СтрокаДанных.GTIN] = Неопределено Тогда
				УникальныеGTIN.Вставить(СтрокаДанных.GTIN, Истина);
				СписокGTIN.Добавить(СтрокаДанных.GTIN);
			КонецЕсли;
			
		КонецЦикла;
		
		ОписанияGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(СписокGTIN);
		
		Для Каждого СтрокаДанных Из РезультатПолученияДанных.ДанныеКодовМаркировки Цикл
			
			Если Не СтрокаДанных.ТребуетсяУказаниеПлановогоКоличестваПотребительскихУпаковокПоGTIN
				Или ОписанияGTIN[СтрокаДанных.GTIN] <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеУточнения = ДанныеGTIN[СтрокаДанных.GTIN];
			Если ДанныеУточнения <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанныхПоGTIN = Новый Структура;
			СтрокаДанныхПоGTIN.Вставить("GTIN",                              СтрокаДанных.GTIN);
			СтрокаДанныхПоGTIN.Вставить("ВидУпаковки",                       СтрокаДанных.ВидУпаковки);
			СтрокаДанныхПоGTIN.Вставить("ВидПродукции",                      СтрокаДанных.ВидПродукции);
			СтрокаДанныхПоGTIN.Вставить("КоличествоПотребительскихУпаковок", 0);
			
			СтрокаДанныхПоGTIN.Вставить("Номенклатура",   СтрокаДанных.Номенклатура);
			СтрокаДанныхПоGTIN.Вставить("Характеристика", СтрокаДанных.Характеристика);
			СтрокаДанныхПоGTIN.Вставить("Серия",          СтрокаДанных.Серия);
			СтрокаДанныхПоGTIN.Вставить("Упаковка",       СтрокаДанных.Упаковка);
			СтрокаДанныхПоGTIN.Вставить(
				"ПредставлениеСодержимоеУпаковки",
				ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
					СтрокаДанных.Номенклатура,
					СтрокаДанных.Характеристика));
			
			ДанныеGTIN.Вставить(СтрокаДанных.GTIN, СтрокаДанныхПоGTIN);
			УточнениеКоэффициентовУпаковок.Добавить(СтрокаДанныхПоGTIN);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если УточнениеКоэффициентовУпаковок.Количество() Тогда
		
		ШтрихкодированиеМОТП.РасчетКоэффициентовПоСтатистике(
			ДеревоУпаковок,
			УточнениеКоэффициентовУпаковок,
			ПараметрыСканирования);
		
		ДанныеДокумента.УточнениеКоэффициентовУпаковок = УточнениеКоэффициентовУпаковок;
		ДанныеДокумента.ДополнительноеДействиеЗагрузки = "УточнитьКоэффициентыУпаковок";
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПроверитьКоэффициентыУпаковок(СтрокаДерева, УточнениеКоэффициентовУпаковок, ДанныеGTIN, ДанныеДокумента)
	
	Для Каждого ВложеннаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		
		Если ЗначениеЗаполнено(ВложеннаяСтрокаДерева.GTIN)
			И ДанныеДокумента.ВидМаркируемойПродукции = ВложеннаяСтрокаДерева.ВидПродукции Тогда
			
			ТребуетсяУточнение       = Ложь;
			ТребуетсяУточнениеGTIN02 = Ложь;
			
			ДанныеУточнения = ДанныеGTIN[ВложеннаяСтрокаДерева.GTIN];
			Если ДанныеУточнения = Неопределено Тогда
				Если Не ЗначениеЗаполнено(ВложеннаяСтрокаДерева.ВидУпаковки) Тогда // АТП - пачка или блок
					ТребуетсяУточнение = Не ЗначениеЗаполнено(ВложеннаяСтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок);
				ИначеЕсли ВложеннаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая // Для набора уточнять плановое количество не требуется
					Или ВложеннаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
					
					ЕстьGTINВСоставеКода = ВложеннаяСтрокаДерева.СоставКодаМаркировки <> Неопределено
						И ВложеннаяСтрокаДерева.СоставКодаМаркировки.Свойство("GTIN")
						И ВложеннаяСтрокаДерева.СоставКодаМаркировки.GTIN <> Неопределено;
					
					ЭтоGTIN02 = ВложеннаяСтрокаДерева.СоставКодаМаркировки <> Неопределено
						И ВложеннаяСтрокаДерева.СоставКодаМаркировки.Свойство("КоличествоВложенныхЕдиниц")
						И ВложеннаяСтрокаДерева.СоставКодаМаркировки.КоличествоВложенныхЕдиниц <> Неопределено;
					
					ТребуетсяУточнение = Не ЗначениеЗаполнено(ВложеннаяСтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок)
						И Не ЭтоGTIN02
						И ЕстьGTINВСоставеКода;
					
					ТребуетсяУточнениеGTIN02 = Не ЗначениеЗаполнено(ВложеннаяСтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок)
						И ЭтоGTIN02 И ВложеннаяСтрокаДерева.Строки.Количество() = 0
						И ЕстьGTINВСоставеКода;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ТребуетсяУточнение Тогда
				
				СтрокаДанныхПоGTIN = Новый Структура;
				СтрокаДанныхПоGTIN.Вставить("GTIN",                              ВложеннаяСтрокаДерева.GTIN);
				СтрокаДанныхПоGTIN.Вставить("ВидУпаковки",                       ВложеннаяСтрокаДерева.ВидУпаковки);
				СтрокаДанныхПоGTIN.Вставить("ВидПродукции",                      ВложеннаяСтрокаДерева.ВидПродукции);
				СтрокаДанныхПоGTIN.Вставить("КоличествоПотребительскихУпаковок", ВложеннаяСтрокаДерева.КоличествоПотребительскихУпаковок);
				
				СтрокаДанныхПоGTIN.Вставить("Номенклатура",   ВложеннаяСтрокаДерева.Номенклатура);
				СтрокаДанныхПоGTIN.Вставить("Характеристика", ВложеннаяСтрокаДерева.Характеристика);
				СтрокаДанныхПоGTIN.Вставить("Серия",          ВложеннаяСтрокаДерева.Серия);
				СтрокаДанныхПоGTIN.Вставить("Упаковка",       ВложеннаяСтрокаДерева.Упаковка);
				СтрокаДанныхПоGTIN.Вставить(
					"ПредставлениеСодержимоеУпаковки",
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
						ВложеннаяСтрокаДерева.Номенклатура,
						ВложеннаяСтрокаДерева.Характеристика));
				
				ДанныеGTIN.Вставить(ВложеннаяСтрокаДерева.GTIN, СтрокаДанныхПоGTIN);
				УточнениеКоэффициентовУпаковок.Добавить(СтрокаДанныхПоGTIN);
				
			ИначеЕсли ТребуетсяУточнениеGTIN02 Тогда
				
				СтрокаДанныхПоGTIN = Новый Структура;
				СтрокаДанныхПоGTIN.Вставить("GTIN",                              ВложеннаяСтрокаДерева.GTIN);
				СтрокаДанныхПоGTIN.Вставить("ВидУпаковки",                       Перечисления.ВидыУпаковокИС.ПустаяСсылка());
				СтрокаДанныхПоGTIN.Вставить("ВидПродукции",                      ВложеннаяСтрокаДерева.ВидПродукции);
				СтрокаДанныхПоGTIN.Вставить("КоличествоПотребительскихУпаковок", 0);
				
				СтрокаДанныхПоGTIN.Вставить("Номенклатура",   ВложеннаяСтрокаДерева.Номенклатура);
				СтрокаДанныхПоGTIN.Вставить("Характеристика", ВложеннаяСтрокаДерева.Характеристика);
				СтрокаДанныхПоGTIN.Вставить("Серия",          ВложеннаяСтрокаДерева.Серия);
				СтрокаДанныхПоGTIN.Вставить("Упаковка",       ВложеннаяСтрокаДерева.Упаковка);
				СтрокаДанныхПоGTIN.Вставить(
					"ПредставлениеСодержимоеУпаковки",
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
						ВложеннаяСтрокаДерева.Номенклатура,
						ВложеннаяСтрокаДерева.Характеристика));
				
				ДанныеGTIN.Вставить(ВложеннаяСтрокаДерева.GTIN, СтрокаДанныхПоGTIN);
				УточнениеКоэффициентовУпаковок.Добавить(СтрокаДанныхПоGTIN);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВложеннаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
			Или ВложеннаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или ВложеннаяСтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			ПроверитьКоэффициентыУпаковок(
				ВложеннаяСтрокаДерева, УточнениеКоэффициентовУпаковок, ДанныеGTIN, ДанныеДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаСтрокиЧастичногоВыбытияПриВосстановленииДанных(СтрокаПриемника, СтрокаИсточника, ПараметрыСканирования, ВидПродукции) Экспорт
	
	Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
		СтрокаИсточника, ПараметрыСканирования,, Истина) Тогда
		
		Если СтрокаИсточника.ЧастичноеВыбытие Тогда
			
			Если СтрокаИсточника.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
				СтрокаПриемника.Номенклатура             = СтрокаИсточника.ЧастичноеВыбытиеНоменклатура;
				СтрокаПриемника.Характеристика           = СтрокаИсточника.ЧастичноеВыбытиеХарактеристика;
			КонецЕсли;
			
			СтрокаПриемника.ПроизвольнаяЕдиницаУчета = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ТаблицаПодобраннойПродукцииФормыПроверкиИПодбора

Процедура СвязатьТаблицыПодобраннойПродукции(ДанныеДокумента, ПоляСвязи) Экспорт
	
	ПоляСвязиМассив = СтрРазделить(ПоляСвязи, ",");
	Для Каждого СтрокаПодобраннойПродукции Из ДанныеДокумента.ПодобраннаяМаркируемаяПродукция Цикл
		
		Если ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
			КлючПоиска = "Номенклатура,Характеристика";
		Иначе
			КлючПоиска = "GTIN";
		КонецЕсли;
		
		Отбор = Новый Структура(КлючПоиска);
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаПодобраннойПродукции);
		СтрокиДокумента = ДанныеДокумента.МаркируемаяПродукция.НайтиСтроки(Отбор);
		Для Каждого СтрокаДокумента Из СтрокиДокумента Цикл
			Подходит = Истина;
			Для Каждого ПолеСвязи Из ПоляСвязиМассив Цикл
				Если ЗначениеЗаполнено(СтрокаДокумента[ПолеСвязи])
						И СтрокаПодобраннойПродукции[ПолеСвязи] <> СтрокаДокумента[ПолеСвязи] Тогда
					Подходит = Ложь;
				КонецЕсли;
			КонецЦикла;
			Если Подходит Тогда
				СтрокаПодобраннойПродукции.СтрокиМаркируемаяПродукция.Добавить(СтрокаДокумента.Идентификатор);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетХешСумм

//Пересчитывает хеш-суммы всех упаковок формы и проверяется необходимость перемаркировки.
//
//Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма проверки и подбора маркируемой продкуции.
//
Процедура ПересчитатьХешСуммыВсехУпаковок(Форма) Экспорт

	Если Не Форма.ПроверятьНеобходимостьПеремаркировки Тогда
		Возврат;
	КонецЕсли;

	Если Форма.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки Тогда
		Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0;
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
		Возврат;
	КонецЕсли;
	
	ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
	
	Для Каждого СтрокаДерева Из Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
			Или СтрокаДерева.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			
			ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, Истина);
			
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ОбъемноСортовойУчет Тогда
			
			Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если ПодчиненнаяСтрока.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
					ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(ПодчиненнаяСтрока, ТаблицаХешСумм, Истина);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодИДанныеУпаковки = Неопределено;
	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИС.ТаблицаПеремаркировки(ТаблицаХешСумм, ШтрихкодИДанныеУпаковки);
	
	// Обход ошибки расчета хеш суммы без учета поля ХешСуммыНормализации
	Для Каждого СтрокаПеремаркировки Из ТаблицаПеремаркировки Цикл
		
		Если СтрокаПеремаркировки.ТребуетсяПеремаркировка Тогда
			
			ТаблицаХешСуммБезУчетаХешСуммыНормализации = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
			СтрокаДерева = Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(СтрокаПеремаркировки.ИдентификаторВДереве);
			Если СтрокаДерева = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСуммБезУчетаХешСуммыНормализации, Истина,, Ложь);
			
			Для Каждого СтрокаХешСуммы Из ТаблицаХешСуммБезУчетаХешСуммыНормализации Цикл
				
				ДанныеУпаковки = ШтрихкодИДанныеУпаковки[СтрокаХешСуммы.Штрихкод];
				Если ДанныеУпаковки = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаХешСуммы.ХешСумма = ДанныеУпаковки.ХешСумма
					И ПустаяСтрока(СтрокаХешСуммы.ХешСумма) Тогда
					СтрокаПеремаркировки.ТребуетсяПеремаркировка = (СтрокаХешСуммы.СодержимоеОтсутствует
						И (ДанныеУпаковки.Количество <> 0 Или ДанныеУпаковки.КоличествоПотребительскихУпаковок <> 0));
				Иначе
					СтрокаПеремаркировки.ТребуетсяПеремаркировка = (СтрокаХешСуммы.ХешСумма <> ДанныеУпаковки.ХешСумма);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИС.ОбработататьТаблицуПеремаркировкиСУчетомДетализации(Форма, ТаблицаПеремаркировки, ШтрихкодИДанныеУпаковки);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, Ложь);
	
КонецПроцедуры

#КонецОбласти

Функция КодыМаркировкиДляПовторнойОтправки(ДеревоМаркированнойПродукции, КодыМаркировки = Неопределено) Экспорт
	
	Если КодыМаркировки = Неопределено Тогда
		КодыМаркировки = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаМаркированнойПродукции Из ДеревоМаркированнойПродукции.Строки Цикл
		
		Если СтрокаМаркированнойПродукции.ОбработанСОшибкойВГИСМТ Тогда
			КодыМаркировки.Добавить(СтрокаМаркированнойПродукции.ШтрихкодУпаковки);
		КонецЕсли;
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаМаркированнойПродукции.ТипУпаковки)
			Или СтрокаМаркированнойПродукции.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиПотребительскиеУпаковкиБезУпаковки()
			Или СтрокаМаркированнойПродукции.ТипУпаковки = ПроверкаИПодборПродукцииИСМПКлиентСервер.ТипУпаковкиГрупповыеУпаковкиБезКоробки() Тогда
			КодыМаркировкиДляПовторнойОтправки(СтрокаМаркированнойПродукции, КодыМаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодыМаркировки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции


//Формирует пустую таблицу маркируемой продукции
//
//Возвращаемое значение:
//  ТаблицаЗначений - таблица определяющая состав маркируемой продукции документа:
//    GTIN           - ОпределяемыйТип.GTIN                       - штрихкод
//    Номенклатура   - ОпределяемыйТип.Номенклатура               - номенклатура
//    Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - характеристика
//    Серия          - ОпределяемыйТип.СерияНоменклатуры          - серия
//    Количество     - Число                                      - количество.
//    КодыGTIN       - СписокЗначений из ОпределяемыйТип.GTIN     - штрихкоды номенклатура.
//
Функция НоваяТаблицаМаркируемойПродукции()
	
	ТаблицаМаркируемойПродукции = Новый ТаблицаЗначений();
	ТаблицаМаркируемойПродукции.Колонки.Добавить("GTIN",           Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Серия",          Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаМаркируемойПродукции.Колонки.Добавить("Количество",     Новый ОписаниеТипов("Число"));
	ТаблицаМаркируемойПродукции.Колонки.Добавить("КодыGTIN",       Новый ОписаниеТипов("СписокЗначений"));
	ТаблицаМаркируемойПродукции.Колонки.Добавить("КоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаМаркируемойПродукции;
	
КонецФункции

Функция ИнициализироватьТаблицуПредставлениеОстаточныхGTIN(ИмяКолонкиПредставление = "ПредставлениеGTINОстатки") Экспорт
	
	ТаблицаПредставлениеОстаточныхGTIN = Новый ТаблицаЗначений;
	ТаблицаПредставлениеОстаточныхGTIN.Колонки.Добавить("Номенклатура",             Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаПредставлениеОстаточныхGTIN.Колонки.Добавить("GTIN",                     Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаПредставлениеОстаточныхGTIN.Колонки.Добавить(ИмяКолонкиПредставление,    Новый ОписаниеТипов("Строка"));
	ТаблицаПредставлениеОстаточныхGTIN.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	Возврат ТаблицаПредставлениеОстаточныхGTIN;
	
КонецФункции

Функция ИнициализироватьПустуюСтруктуруСтрокиДляОчисткиСопоставления() Экспорт
	
	СтрокаБезСопоставления = Новый Структура;
	СтрокаБезСопоставления.Вставить("Номенклатура",   ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	СтрокаБезСопоставления.Вставить("Характеристика", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	СтрокаБезСопоставления.Вставить("Серия",          ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Возврат СтрокаБезСопоставления;
	
КонецФункции

Процедура ДополнитьКолонкамиПоВидуПродукции(ВидМаркируемойПродукции, ТаблицаМаркируемойПродукции, ЗаполнятьСрокГодночти = Ложь)
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(ВидМаркируемойПродукции) Тогда
		
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС",  Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ИдентификаторыПроисхожденияВЕТИС", Новый ОписаниеТипов("Массив"));
		ТаблицаМаркируемойПродукции.Колонки.Добавить("СкоропортящаясяПродукция",         Новый ОписаниеТипов("Булево"));
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ГоденДо",                          Новый ОписаниеТипов("Дата"));
		
	ИначеЕсли ВидМаркируемойПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		
		ТаблицаМаркируемойПродукции.Колонки.Добавить("СкоропортящаясяПродукция",         Новый ОписаниеТипов("Булево"));
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ГоденДо",                          Новый ОписаниеТипов("Дата"));
		
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ВидМаркируемойПродукции, Ложь)
		Или ЗаполнятьСрокГодночти Тогда
		
		ТаблицаМаркируемойПродукции.Колонки.Добавить("ГоденДо",                          Новый ОписаниеТипов("Дата"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПустыеУпаковкиВСтрокахДерева(СтрокиДерева)
	
	КоличествоСтрок = СтрокиДерева.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		СтрокаДерева = СтрокиДерева[КоличествоСтрок - ОбратныйИндекс];
		
		Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ПодчиненныеСтроки = СтрокаДерева.Строки;
			
			Если ПодчиненныеСтроки.Количество() > 0 Тогда
				УдалитьПустыеУпаковкиВСтрокахДерева(ПодчиненныеСтроки);
			КонецЕсли;
			
			Если ПодчиненныеСтроки.Количество() = 0
				И СтрокаДерева.КоличествоПодчиненныхПотребительскихУпаковок = 0 Тогда
				СтрокиДерева.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуОписанияGTINПоДеревуУпаковокРекурсивно(ТаблицаОписанияGTIN, УзелДерева) Экспорт
	
	Для Каждого СтрокаДерева Из УзелДерева.Строки Цикл
		
		Если СтрокаДерева.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			ЗаполнитьТаблицуОписанияGTINПоДеревуУпаковокРекурсивно(ТаблицаОписанияGTIN, СтрокаДерева);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("GTIN",        СтрокаДерева.GTIN);
		СтруктураПоиска.Вставить("ВидУпаковки", СтрокаДерева.ВидУпаковки);
		
		ПоискСтрок = ТаблицаОписанияGTIN.НайтиСтроки(СтруктураПоиска);
		
		Если ПоискСтрок.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОписанияGTIN.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
	КонецЦикла;
	
КонецПроцедуры

// Фиксирует результаты сопоставления GTIN с номенклатурой и информацию о групповых упаковках.
//
// Параметры:
//   РезультатПроверки - См. ПараметрыОкончанияПроверки.
//
Процедура ЗафиксироватьОписаниеGTIN(РезультатПроверки)
	
	Если РезультатПроверки.ТаблицаОписанияGTIN = Неопределено
		Или РезультатПроверки.ТаблицаОписанияGTIN.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ЗафиксироватьОписаниеGTIN(РезультатПроверки.ТаблицаОписанияGTIN);
	
КонецПроцедуры

#Область ВстраиваниеФормыПроверкиИПодбора

Процедура УправлениеВидимостьюЭлементовПроверкиИПодбора(Форма) Экспорт
	
	ПараметрыИнтеграции = Форма.ПараметрыИнтеграцииГосИС.Получить("ИСМП");
	Если (ПараметрыИнтеграции = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленыЭлементыПодбора = Ложь;
	
	Для Каждого ВидПродукции Из ПараметрыИнтеграции.ВидыПродукции Цикл
		
		НастройкиМассив = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
		Если НастройкиМассив = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Настройки Из НастройкиМассив Цикл
			
			Если Не Настройки.РазмещатьЭлементыИнтерфейса Тогда
				Продолжить;
			КонецЕсли;
			
			Объект = Форма[Настройки.ИмяРеквизитаФормыОбъект];
			ТабличнаяЧастьТовары = Объект[Настройки.ИмяТабличнойЧастиТовары];
			
			ВидимостьЭлементов = Настройки.ИспользоватьБезМаркируемойПродукции
				Или ЕстьМаркируемаяПродукцияВКоллекции(ТабличнаяЧастьТовары, ВидПродукции);
			
			ДобавленыЭлементыПодбора = ДобавленыЭлементыПодбора Или ВидимостьЭлементов;
			
			УправлениеЭлементамиОткрытияФормыПроверкиИПодбора(Форма, ВидПродукции, ВидимостьЭлементов, Настройки);
			
		КонецЦикла;
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриПримененииПараметровИнтеграцииФормыПроверкиИПодбора(Форма);
	
КонецПроцедуры

Процедура ПриОпределенииПараметровИнтеграцииФормыПроверкиИПодбора(Форма, ПараметрыИнтеграции, ВидПродукции)
	
	Если Форма.ИмяФормы = "Документ.ОтчетОбИмпортеЕГАИС.Форма.ФормаДокумента" Тогда
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы                 = "ГруппаТоварыСписком";
		ПараметрыИнтеграции.РазмещатьЭлементыИнтерфейса                = Истина;
		ПараметрыИнтеграции.ИспользоватьБезМаркируемойПродукции        = Истина;
		ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена        = Ложь;
		ПараметрыИнтеграции.ЕстьПравоИзменение                         = ПравоДоступа("Изменение", Форма.Объект.Ссылка.Метаданные());
		ПараметрыИнтеграции.ИмяТабличнойЧастиСерии                     = Неопределено;
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтчетОПроизводствеЕГАИС.Форма.ФормаДокумента" Тогда
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы                 = "ГруппаТоварыСписком";
		ПараметрыИнтеграции.РазмещатьЭлементыИнтерфейса                = Истина;
		ПараметрыИнтеграции.ИспользоватьБезМаркируемойПродукции        = Истина;
		ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена        = Ложь;
		ПараметрыИнтеграции.ЕстьПравоИзменение                         = ПравоДоступа("Изменение", Форма.Объект.Ссылка.Метаданные());
		ПараметрыИнтеграции.ИмяТабличнойЧастиСерии                     = Неопределено;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииПараметровИнтеграцииФормыПроверкиИПодбора(
		Форма, ПараметрыИнтеграции, ВидПродукции);
КонецПроцедуры

#КонецОбласти

#Область ИнформацияОПроблемахУПД

Функция ТоварныеГруппыУПДОтсутствующиеВДокументе(Документ, ВидПродукции, ТоварныеГруппыУПД)
	
	Если ТоварныеГруппыУПД.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ВидыПродукцииИСМП = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	
	ТоварыДокумента = ЭлектронноеВзаимодействиеИСМП.ТаблицаМаркируемойПродукцииДокумента(Документ, ВидыПродукцииИСМП);
	
	Если ТоварыДокумента.Количество() = 0 Тогда
		Возврат ТоварныеГруппыУПД;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыУпаковок.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеШтрихкодовУпаковок
	|ИЗ
	|	&ТоварыДокумента КАК ШтрихкодыУпаковок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|/////////////////////////////////////////////
	|"
	+
	ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции()
	+
	"
	|;
	|/////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвойстваМаркируемойПродукции.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварыДокумента", ТоварыДокумента);
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	ТоварныеГруппыДокумента = Выгрузка.ВыгрузитьКолонку("ВидПродукции");
	
	Возврат ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТоварныеГруппыУПД, ТоварныеГруппыДокумента);
	
КонецФункции

Процедура ВывестиИнформациюОПроблемахУПДПоТовару(СтрокиНоменклатураШтрихкод, ВидПродукции, ШаблонСообщения, НаименованиеСправочника, УникальныйИдентификаторФормы, КоличествоВыводимыхШтрихкодов = 3)
	
	СписокНоменклатур      = Новый СписокЗначений;
	НоменклатураИШтрихкоды = Новый Соответствие;
	
	Для Каждого Строка Из СтрокиНоменклатураШтрихкод Цикл
		ШтрихкодыСтрокиНоменклатуры = НоменклатураИШтрихкоды[Строка.Номенклатура];
		Если ШтрихкодыСтрокиНоменклатуры = Неопределено Тогда
			ШтрихкодыСтрокиНоменклатуры = Новый Массив;
			НоменклатураИШтрихкоды[Строка.Номенклатура] = ШтрихкодыСтрокиНоменклатуры;
			СписокНоменклатур.Добавить(Строка.Номенклатура);
		КонецЕсли;
		ШтрихкодыСтрокиНоменклатуры.Добавить(Строка.Штрихкод);
	КонецЦикла;
	
	СписокНоменклатур.СортироватьПоЗначению();
	
	ШаблонСообщенияПустойНоменклатуры = НСтр("ru = 'Коды маркировки %1 не сопоставлены с маркируемой продукцией (в справочнике ""%2"").
	                                               |Данная продукция является не маркируемой, поэтому коды не могут быть отображены в структуре упаковок формы проверки и подбора %3.'");
	
	Для Каждого ЭлементСписка Из СписокНоменклатур Цикл
		
		Номенклатура                = ЭлементСписка.Значение;
		ШтрихкодыСтрокиНоменклатуры = НоменклатураИШтрихкоды[Номенклатура];
		
		ШтрихкодыСтрокой = ПолучитьПроблемныеШтрихкодыИзУПДСтрокой(ШтрихкодыСтрокиНоменклатуры, КоличествоВыводимыхШтрихкодов);
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ШтрихкодыСтрокой, Номенклатура, НаименованиеСправочника, ВидПродукции);
		Иначе
			ТекстСообщения = СтрШаблон(ШаблонСообщенияПустойНоменклатуры, ШтрихкодыСтрокой, НаименованиеСправочника, ВидПродукции);
		КонецЕсли;
		
		ОбщегоНазначенияИС.СообщитьПользователюВФорму(УникальныйИдентификаторФормы, ТекстСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПроблемныеШтрихкодыИзУПДСтрокой(ШтрихкодыСтрокиНоменклатуры, КоличествоВыводимыхШтрихкодов)
	
	ШтрихкодыСтрокой = "";
	
	Разделитель = "," + " ";
	Если ШтрихкодыСтрокиНоменклатуры.Количество() <= КоличествоВыводимыхШтрихкодов Тогда
		
		ШтрихкодыСтрокой = СтрСоединить(ШтрихкодыСтрокиНоменклатуры, Разделитель);
		
	Иначе
		
		Штрихкоды = Новый Массив;
		Для Сч = 0 По КоличествоВыводимыхШтрихкодов - 1 Цикл
			Штрихкоды.Добавить(ШтрихкодыСтрокиНоменклатуры[Сч]);
		КонецЦикла;
		
		ШтрихкодыСтрокой = СтрШаблон(
			НСтр("ru = '%1 (+ еще %2)'"),
			СтрСоединить(Штрихкоды, Разделитель),
			ШтрихкодыСтрокиНоменклатуры.Количество() - КоличествоВыводимыхШтрихкодов);
		
	КонецЕсли;
	
	Возврат ШтрихкодыСтрокой;
	
КонецФункции

#КонецОбласти

Процедура ДополнитьПредставлениеКомандыПроверкиИПодбораНаличиемОшибокСредствамиККТ(Форма, ВидПродукции, Сценарий)
	
	ИмяКомандыПроверкаПодбор  = ПроверкаИПодборПродукцииИС.ИмяКнопкиИКоманды(Сценарий, ВидПродукции);
	ПараметрыИнтеграцииМассив = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидПродукции);
	Для Каждого Параметры Из ПараметрыИнтеграцииМассив Цикл
		Если Параметры.Сценарий <> Сценарий Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыИнтеграции = Параметры;
	КонецЦикла;
	
	Объект = Форма[ПараметрыИнтеграции.ИмяРеквизитаФормыОбъект];
	
	Если Форма.Элементы.Найти(ИмяКомандыПроверкаПодбор) = Неопределено
		Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	КнопкаФормы = Форма.Элементы[ИмяКомандыПроверкаПодбор];
	
	ТекстЗапросаПлатежныхДокументов = Неопределено;
	ИнтеграцияИСМППереопределяемый.ПриОпределенииТекстаЗапросаПлатежныхДокументовПоДокументуПродажиИлиВозврата(
		Объект.Ссылка,
		ТекстЗапросаПлатежныхДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	&СсылкаНаДокумент КАК СсылкаНаДокумент
		|ПОМЕСТИТЬ СсылкиНаДокументы
		|
		|"
		+ ?(ЗначениеЗаполнено(ТекстЗапросаПлатежныхДокументов),
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|" + ТекстЗапросаПлатежныхДокументов, "") +
		"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РезультатыПроверкиСредствамиККТИСМП.ШтрихкодУпаковки) КАК Количество
		|ИЗ
		|	РегистрСведений.РезультатыПроверкиСредствамиККТИСМП КАК РезультатыПроверкиСредствамиККТИСМП
		|ГДЕ
		|	РезультатыПроверкиСредствамиККТИСМП.Документ В (ВЫБРАТЬ
		|			СсылкиНаДокументы.СсылкаНаДокумент
		|		ИЗ
		|			СсылкиНаДокументы КАК СсылкиНаДокументы)
		|	И РезультатыПроверкиСредствамиККТИСМП.ВидПродукции = &ВидПродукции";
	
	Запрос.УстановитьПараметр("ВидПродукции",     ВидПродукции);
	Запрос.УстановитьПараметр("СсылкаНаДокумент", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзРезультатаЗапроса.Следующий()
		И ЗначениеЗаполнено(ВыборкаИзРезультатаЗапроса.Количество) Тогда
		
		КнопкаФормы.Заголовок = СтрШаблон(
			НСтр("ru = '%1 (Есть ошибки проверки ККТ: %2)'"),
			КнопкаФормы.Заголовок,
			ВыборкаИзРезультатаЗапроса.Количество);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойМаркируемойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента, ВидПродукции, ПараметрыСканирования) Экспорт
	
	Если ТаблицаМаркируемойПродукции.Количество() = 0 И ДанныеДокумента.ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыИзменений = СформироватьТаблицуИзмененийПодобраннойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента, ПараметрыСканирования, ВидПродукции);
	
	ДополнитьGTINПодобраннойПродукцииПоМаркируемымТоварам(ДанныеДокумента, ТаблицыИзменений.ТаблицаИзмененийПодобраннойПродукции);
	ДополнитьGTINПодобраннойПродукцииПоМаркируемымТоварам(ДанныеДокумента, ТаблицыИзменений.ТаблицаИзмененийПодобраннойПродукцииМерныйТоварСПустымКоличеством);
	
	ДополнитьGTINПодобраннойПродукцииПоМаркируемымТоварам(ДанныеДокумента, ТаблицыИзменений.ТаблицаИзмененийПодобраннойПродукцииОСУ);
	ДополнитьGTINПодобраннойПродукцииПоМаркируемымТоварам(ДанныеДокумента, ТаблицыИзменений.ТаблицаИзмененийПодобраннойПродукцииОСУМерныйТоварСПустымКоличеством);
	
	ДопустимаПроизвольнаяЕдиницаУчета = ИнтеграцияИС.ЕстьПроизвольныеЕдиницыУчета(ВидПродукции)
		Или ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции, ПараметрыСканирования.ВидОперацииИСМП);
	
	ПоддерживаетсяОбъемноСортовойУчет = ОбщегоНазначенияИСКлиентСерверПовтИсп.ВидПродукцииПоддерживаетОбъемноСортовойУчет(ВидПродукции)
		И ПараметрыСканирования.ПоддерживаетсяОбъемноСортовойУчет;
	
	Контекст = Новый Структура;
	Контекст.Вставить("ПодобраннаяМаркируемаяПродукция",   ДанныеДокумента.ПодобраннаяМаркируемаяПродукция);
	Контекст.Вставить("ВидМаркируемойПродукции",           ВидПродукции);
	Контекст.Вставить("РежимПодбораСуществующихУпаковок",  ДанныеДокумента.РежимПодбораСуществующихУпаковок);
	Контекст.Вставить("ПроверяемыйДокумент",               ДанныеДокумента.ПроверяемыйДокумент);
	Контекст.Вставить("ДопустимаПроизвольнаяЕдиницаУчета", ДопустимаПроизвольнаяЕдиницаУчета);
	Контекст.Вставить("ДопустимУчетМерныхТоваров",         ОбщегоНазначенияИС.ЕстьПродукцияТребующаяВзвешивания());
	Контекст.Вставить("ПараметрыПроверкиКодовМаркировки",  Новый Структура("ЗапрашиватьКоличествоМерногоТовара", Ложь));
	Контекст.Вставить("ПоддерживаетсяОбъемноСортовойУчет", ПоддерживаетсяОбъемноСортовойУчет);
	Контекст.Вставить("ПараметрыСканирования",             ПараметрыСканирования);
	
	ДополнительныеПараметры = ПроверкаИПодборПродукцииИСМПКлиентСервер.ПараметрыДобавленияСтрокиПодобраннойПродукции();
	ДополнительныеПараметры.ЭтоЗагрузкаДанныхДокументаПриОткрытииФормы = Истина;
	ДополнительныеПараметры.УточнитьКоличествоИС = Не ДанныеДокумента.РежимПодбораСуществующихУпаковок;
	
	КэшированныеЗначения = Неопределено;
	
	Для Каждого СтрокаТаблицы Из ТаблицыИзменений.ТаблицаИзмененийПодобраннойПродукции Цикл
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриДобавленииСтроки(
			Контекст, СтрокаТаблицы, СтрокаТаблицы.Изменение, ПроверкаИПодборПродукцииИСМП, ДополнительныеПараметры, КэшированныеЗначения);
		
	КонецЦикла;
	
	ДополнительныеПараметры.ЭтоУпаковкаОбъемноСортовогоУчета = Истина;
	Для Каждого СтрокаТаблицы Из ТаблицыИзменений.ТаблицаИзмененийПодобраннойПродукцииОСУ Цикл
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриДобавленииСтроки(
			Контекст, СтрокаТаблицы, СтрокаТаблицы.Изменение, ПроверкаИПодборПродукцииИСМП, ДополнительныеПараметры, КэшированныеЗначения);
		
	КонецЦикла;
	
	ДополнительныеПараметры.ЭтоУпаковкаОбъемноСортовогоУчета = Ложь;
	Для Каждого СтрокаТаблицы Из ТаблицыИзменений.ТаблицаИзмененийПодобраннойПродукцииМерныйТоварСПустымКоличеством Цикл
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриДобавленииСтроки(
			Контекст, СтрокаТаблицы, СтрокаТаблицы.Изменение, ПроверкаИПодборПродукцииИСМП, ДополнительныеПараметры, КэшированныеЗначения);
		
	КонецЦикла;
	
	ДополнительныеПараметры.ЭтоУпаковкаОбъемноСортовогоУчета = ДанныеДокумента.РежимПодбораСуществующихУпаковок;
	Для Каждого СтрокаТаблицы Из ТаблицыИзменений.ТаблицаИзмененийПодобраннойПродукцииОСУМерныйТоварСПустымКоличеством Цикл
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПодобраннаяПродукцияПриДобавленииСтроки(
			Контекст, СтрокаТаблицы, СтрокаТаблицы.Изменение, ПроверкаИПодборПродукцииИСМП, ДополнительныеПараметры, КэшированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьТаблицуИзмененийПодобраннойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента, ПараметрыСканирования, ВидПродукции)
	
	КолонкиТаблицы = КолонкиДляТаблицыИзмененийПодобраннойПродукции(ВидПродукции, ПараметрыСканирования);
	
	ТаблицаИзмененийПодобраннойПродукции = Новый ТаблицаЗначений;
	
	Для Каждого ОписаниеКолонки Из КолонкиТаблицы Цикл
		ТаблицаИзмененийПодобраннойПродукции.Колонки.Добавить(ОписаниеКолонки.Имя, ОписаниеКолонки.ОписаниеТипов);
	КонецЦикла;
	
	ТаблицаИзмененийПодобраннойПродукцииМерныйТоварСПустымКоличеством    = ТаблицаИзмененийПодобраннойПродукции.СкопироватьКолонки();
	ТаблицаИзмененийПодобраннойПродукцииОСУ                              = ТаблицаИзмененийПодобраннойПродукции.СкопироватьКолонки();
	ТаблицаИзмененийПодобраннойПродукцииОСУМерныйТоварСПустымКоличеством = ТаблицаИзмененийПодобраннойПродукции.СкопироватьКолонки();
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаИзмененийПодобраннойПродукции",                                 ТаблицаИзмененийПодобраннойПродукции);
	Результат.Вставить("ТаблицаИзмененийПодобраннойПродукцииМерныйТоварСПустымКоличеством",    ТаблицаИзмененийПодобраннойПродукцииМерныйТоварСПустымКоличеством);
	Результат.Вставить("ТаблицаИзмененийПодобраннойПродукцииОСУ",                              ТаблицаИзмененийПодобраннойПродукцииОСУ);
	Результат.Вставить("ТаблицаИзмененийПодобраннойПродукцииОСУМерныйТоварСПустымКоличеством", ТаблицаИзмененийПодобраннойПродукцииОСУМерныйТоварСПустымКоличеством);
	
	Если ТаблицаМаркируемойПродукции.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПустаяХарактеристикаНоменклатуры = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	ПустаяСерияНоменклатуры          = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры");
	ПустаяНоменклатура               = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	
	СписокСвойствВидаПродукции             = Новый Массив;
	СвойстваВидаПродукцииЗаполнятьИзДерева = Ложь;
	НастройкиСканирования                  = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		Если НастройкиСканирования.УчитыватьМРЦ Тогда
			ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "МРЦ", Ложь);
			СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
			ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ВключаетМРЦ", Ложь);
			СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
		КонецЕсли;
		СвойстваВидаПродукцииЗаполнятьИзДерева = Истина;
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ПрисутствуютВДанныхДокумента = Ложь;
		Если ПроверкаИПодборПродукцииИСМПКлиентСервер.ДокументИспользуетДанныеВЕТИС(ДанныеДокумента.ПроверяемыйДокумент)
			И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП Тогда
			ПрисутствуютВДанныхДокумента = Истина;
			ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ИдентификаторПроисхожденияВЕТИС", ПрисутствуютВДанныхДокумента);
			СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
		КонецЕсли;
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ГоденДо", ПрисутствуютВДанныхДокумента);
		СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "СкоропортящаясяПродукция", ПрисутствуютВДанныхДокумента);
		СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС Тогда
		ПрисутствуютВДанныхДокумента = ПроверкаИПодборПродукцииИСМПКлиентСервер.ДокументИспользуетДанныеВЕТИС(ДанныеДокумента.ПроверяемыйДокумент)
			И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП;
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ГоденДо", ПрисутствуютВДанныхДокумента);
		СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "СкоропортящаясяПродукция", ПрисутствуютВДанныхДокумента);
		СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС Тогда
		ПрисутствуютВДанныхДокумента = Ложь;
		Если ПроверкаИПодборПродукцииИСМПКлиентСервер.ДокументИспользуетДанныеВЕТИС(ДанныеДокумента.ПроверяемыйДокумент)
			И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП Тогда
			ПрисутствуютВДанныхДокумента = Истина;
			ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ИдентификаторПроисхожденияВЕТИС", ПрисутствуютВДанныхДокумента);
			СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
		КонецЕсли;
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ГоденДо", ПрисутствуютВДанныхДокумента);
		СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции, Ложь)
		Или ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступенСрокГодностиПриПриемкеОтгрузке(
			ПараметрыСканирования.ВидОперацииИСМП, ВидПродукции) Тогда
		ПрисутствуютВДанныхДокумента = ПроверкаИПодборПродукцииИСМПКлиентСервер.ДокументИспользуетДанныеВЕТИС(ДанныеДокумента.ПроверяемыйДокумент)
			И Не ПараметрыСканирования.ЭтоАгрегацияКодовМаркировкиИСМП;
		ОписаниеСвойства = Новый Структура("Имя, ПрисутствуетВДанныхДокумента", "ГоденДо", ПрисутствуютВДанныхДокумента);
		СписокСвойствВидаПродукции.Добавить(ОписаниеСвойства);
	КонецЕсли;
	
	Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
		
		ОбработкаСтрокиЧастичногоВыбытияПриВосстановленииДанных(
			СтрокаИсточника,
			СтрокаИсточника,
			ПараметрыСканирования,
			ВидПродукции);
		
		СтрокаИсточника.GTIN = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаИсточника.GTIN);
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.GTIN);
		
		Если ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) Тогда
			
			СтруктураПоиска.Вставить("Номенклатура", СтрокаИсточника.Номенклатура);
			
			Если ЗначениеЗаполнено(СтрокаИсточника.Характеристика) Тогда
				СтруктураПоиска.Вставить("Характеристика", СтрокаИсточника.Характеристика);
			Иначе
				СтруктураПоиска.Вставить("Характеристика", ПустаяХарактеристикаНоменклатуры);
			КонецЕсли;
			
			Если ДанныеДокумента.РежимПодбораСуществующихУпаковок Тогда
				Если ЗначениеЗаполнено(СтрокаИсточника.Серия) Тогда
					СтруктураПоиска.Вставить("Серия", СтрокаИсточника.Серия);
				Иначе
					СтруктураПоиска.Вставить("Серия", ПустаяСерияНоменклатуры);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			СтруктураПоиска.Вставить("Номенклатура", ПустаяНоменклатура);
			
		КонецЕсли;
		
		Для Каждого ОписаниеСвойства Из СписокСвойствВидаПродукции Цикл
			
			Если СвойстваВидаПродукцииЗаполнятьИзДерева Тогда
				СтрокаДанных = СтрокаИсточника.СтрокаДерева;
			Иначе
				СтрокаДанных = СтрокаИсточника;
			КонецЕсли;
			
			Если ОписаниеСвойства.Имя = "ВключаетМРЦ" Тогда
				ЗначениеСвойства = Ложь;
				Если СтрокаДанных["МРЦ"] > 0 Тогда
					ЗначениеСвойства = Истина;
				ИначеЕсли СтрокаДанных.ДанныеРазбора <> Неопределено Тогда
					Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
						Или СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
						ЗначениеСвойства = СтрокаДанных.ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
							И СтрокаДанных.ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЗначениеСвойства = СтрокаДанных[ОписаниеСвойства.Имя];
			КонецЕсли;
			
			СтруктураПоиска.Вставить(ОписаниеСвойства.Имя, ЗначениеСвойства);
			
		КонецЦикла;
		
		Если СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			Если СтрокаИсточника.ТребуетВзвешивания И СтрокаИсточника.Количество = 0 Тогда
				ТаблицаАгрегации = ТаблицаИзмененийПодобраннойПродукцииОСУМерныйТоварСПустымКоличеством;
			Иначе
				ТаблицаАгрегации = ТаблицаИзмененийПодобраннойПродукцииОСУ;
			КонецЕсли;
			
		Иначе
			
			Если СтрокаИсточника.ТребуетВзвешивания И СтрокаИсточника.Количество = 0 Тогда
				ТаблицаАгрегации = ТаблицаИзмененийПодобраннойПродукцииМерныйТоварСПустымКоличеством;
			Иначе
				ТаблицаАгрегации = ТаблицаИзмененийПодобраннойПродукции;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокиПродукцииИСМП = ТаблицаАгрегации.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПродукцииИСМП.Количество() = 0 Тогда
			СтрокаПродукцииИСМП = ТаблицаАгрегации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПродукцииИСМП, СтруктураПоиска);
			СтрокаПродукцииИСМП.ПредставлениеНоменклатуры     = СтрокаИсточника.ПредставлениеНоменклатуры;
		Иначе
			СтрокаПродукцииИСМП = СтрокиПродукцииИСМП[0];
		КонецЕсли;
		
		Если СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			КоличествоИзменение = 1;
		Иначе
			КоличествоИзменение = СтрокаИсточника.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		СтрокаПродукцииИСМП.Изменение = СтрокаПродукцииИСМП.Изменение + КоличествоИзменение;
		
		Если СтрокаИсточника.ПроизвольнаяЕдиницаУчета Тогда
			СтрокаПродукцииИСМП.ПроизвольнаяЕдиницаУчета = Истина;
			СтрокаПродукцииИСМП.ТребуетВзвешивания       = СтрокаИсточника.ТребуетВзвешивания;
		КонецЕсли;
		
		СтрокаПродукцииИСМП.Количество = СтрокаПродукцииИСМП.Количество + СтрокаИсточника.Количество;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция КолонкиДляТаблицыИзмененийПодобраннойПродукции(ВидПродукции, ПараметрыСканирования) Экспорт
	
	ОписаниеСвойства = "Имя, ОписаниеТипов";
	
	ОписаниеСвойств = Новый Массив;
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "Номенклатура",              Метаданные.ОпределяемыеТипы.Номенклатура.Тип));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "Характеристика",            Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "Серия",                     Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "GTIN",                      Метаданные.ОпределяемыеТипы.GTIN.Тип));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ТипУпаковки",               Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок")));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ВидУпаковки",               Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС")));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ПредставлениеНоменклатуры", Новый ОписаниеТипов("Строка")));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "Изменение",                 Новый ОписаниеТипов("Число")));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "Количество",                Новый ОписаниеТипов("Число")));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ПроизвольнаяЕдиницаУчета",  Новый ОписаниеТипов("Булево")));
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ТребуетВзвешивания",        Новый ОписаниеТипов("Булево")));
	
	ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "НеПересчитыватьКоличествоПотребительскихУпаковок", Новый ОписаниеТипов("Булево")));
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции)
		Или ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(ВидПродукции) Тогда
		
		ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип));
		ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ГоденДо",                         Новый ОписаниеТипов("Дата")));
		ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "СкоропортящаясяПродукция",        Новый ОписаниеТипов("Булево")));
		
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
		
		ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "МРЦ",         Новый ОписаниеТипов("Число")));
		ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ВключаетМРЦ", Новый ОписаниеТипов("Булево")));
		
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции, Ложь)
		Или ПараметрыСканирования.ЗаполнятьСрокГодности Тогда
		
		ОписаниеСвойств.Добавить(Новый Структура(ОписаниеСвойства, "ГоденДо", Новый ОписаниеТипов("Дата")));
		
	КонецЕсли;
	
	Возврат ОписаниеСвойств;
	
КонецФункции

Процедура СвернутьТаблицуИзмененийПодобраннойПродукции(ТаблицаИзменений, ВидПродукции, ПараметрыСканирования) Экспорт
	
	Если ТипЗнч(ТаблицаИзменений) = Тип("Массив") Тогда
		ТаблицаИзмененийПодобраннойПродукции         = Новый ТаблицаЗначений;
		ЗначенияСтрокиПоУмолчаниюДляТаблицыИзменений = Новый Структура;
		Для Каждого ОписаниеКолонки Из КолонкиДляТаблицыИзмененийПодобраннойПродукции(ВидПродукции, ПараметрыСканирования) Цикл
			ТаблицаИзмененийПодобраннойПродукции.Колонки.Добавить(ОписаниеКолонки.Имя, ОписаниеКолонки.ОписаниеТипов);
			ЗначенияСтрокиПоУмолчаниюДляТаблицыИзменений.Вставить(ОписаниеКолонки.Имя, ОписаниеКолонки.ОписаниеТипов.ПривестиЗначение());
		КонецЦикла;
		ЗначенияСтрокиПоУмолчаниюДляТаблицыИзмененийПодобраннойПродукции = Новый ФиксированнаяСтруктура(ЗначенияСтрокиПоУмолчаниюДляТаблицыИзменений);
		Для Каждого ЗначенияСтроки Из ТаблицаИзменений Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаИзмененийПодобраннойПродукции.Добавить(), ЗначенияСтроки);
		КонецЦикла;
	Иначе
		ТаблицаИзмененийПодобраннойПродукции = ТаблицаИзменений;
	КонецЕсли;
	
	КолонкиГруппировок = Новый Массив;
	КолонкаСуммированияИзменение  = "Изменение";
	КолонкаСуммированияКоличество = "Количество";
	
	Для Каждого КолонкаТаблицы Из ТаблицаИзмененийПодобраннойПродукции.Колонки Цикл
		Если НРег(КолонкаТаблицы.Имя) = НРег(КолонкаСуммированияИзменение)
			Или НРег(КолонкаТаблицы.Имя) = НРег(КолонкаСуммированияКоличество) Тогда
			Продолжить;
		КонецЕсли;
		КолонкиГруппировок.Добавить(КолонкаТаблицы.Имя);
	КонецЦикла;
	
	ТаблицаИзмененийПодобраннойПродукции.Свернуть(
		СтрСоединить(КолонкиГруппировок, ","),
		СтрШаблон("%1,%2", КолонкаСуммированияИзменение, КолонкаСуммированияКоличество));
	
	Если ТаблицаИзмененийПодобраннойПродукции.Количество() = ТаблицаИзменений.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаИзменений) = Тип("Массив") Тогда
		ТаблицаИзменений = Новый Массив;
		Для Каждого СтрокаТаблицы Из ТаблицаИзмененийПодобраннойПродукции Цикл
			ЗначенияСтроки = Новый Структура(ЗначенияСтрокиПоУмолчаниюДляТаблицыИзмененийПодобраннойПродукции);
			ЗаполнитьЗначенияСвойств(ЗначенияСтроки, СтрокаТаблицы);
			ТаблицаИзменений.Добавить(ЗначенияСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
