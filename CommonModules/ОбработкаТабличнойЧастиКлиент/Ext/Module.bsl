
#Область ПрограммныйИнтерфейс

// Обработка строки табличной части - вызывается из форм документов.
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия, Значение - Структура - параметры действия.
// 		Возможно передавать следующие поля:
//		"ПроверитьХарактеристикуПоВладельцу", Характеристика.
//		"ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Упаковка.
//		"ПересчитатьКоличествоЕдиниц",
//		"ПересчитатьКоличествоЕдиницСуффикс", Суффикс
//		"ПересчитатьКоличествоУпаковок", Имя
//		"ПересчитатьКоличествоУпаковокСуффикс", Суффикс
//		"ПересчитатьКоличествоУпаковокСуффиксИзОтклонения", Суффикс
//		"ПересчитатьВесОбъем",
//		"ПересчитатьКоличествоУпаковокПоВесу",
//		"ПересчитатьКоличествоУпаковокПоОбъему",
//		"ЗаполнитьЦенуПродажи"              , СтруктураПараметровДействия.
//		"ПересчитатьСумму". ИмяКоличества
//		"ПересчитатьСуммуСУчетомРучнойСкидки"     , СтруктураПараметровДействия.
//		"ПересчитатьСуммуСУчетомАвтоматическойСкидки"     , СтруктураПараметровДействия.
//		"ПересчитатьЦенуСкидкуПоСуммеВОприходовании"
//		"ПересчитатьЦенуЗаУпаковку"         , КоличествоЕдиницДоПересчета.
//		"ПересчитатьСуммуНДС".
//		"ЗаполнитьСтавкуНДС".
//		"ЗаполнитьСтавкуНДССуффикс",
//		"ОбработатьШтрихкоды".
//		"ЗаполнитьУсловияПродажВСтрокеТЧ"
//		"ЗаполнитьЦенуПродажиРозница" , СтруктураПараметровДействия.
//		"ПересчитатьСуммуРучнойСкидки".
//		"ПересчитатьПроцентРучнойСкидки".
//		"ОчиститьСтатьюАналитикуРасходов", СтруктураПараметровДействия.
//		"ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки", СтруктураПараметровДействия.
//		"ЗаполнитьНастройкуСчетовУчетаПоУмолчанию", СтруктураПараметровДействия.
//		"ЗаполнитьПредставлениеНастройкиСчетовУчета", СтруктураПараметровДействия.
//		"ЗаполнитьФлагИзлишекПорча"
//		"ЗаполнитьФлагРасхождение"
//		"ПересчитатьКоличествоУпаковокОтклонение"
//		"ОчиститьСуммуВзаиморасчетов"
//		"ПересчитатьКоличествоНеОтгружать".
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке
//  ДополнительныеПараметрыЗаполнения - Структура, Неопределено - дополонительные параметры заполнения.
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения = Неопределено) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НеобходимВызовСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Тогда
		
		ТекущаяСтрокаСтруктура = ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока,СтруктураДействий, ДополнительныеПараметрыЗаполнения);
		
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ТекущаяСтрокаСтруктура, СтруктураДействий, КэшированныеЗначения);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ТекущаяСтрокаСтруктура);
		
		Возврат;
	КонецЕсли;
	
	ТМЦВЭксплуатацииКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ДополнительныеПараметрыЗаполнения);

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(												ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(											ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьТипНомераГТДПоУмолчанию(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтрануПроисхожденияДляНомераГТДПоУмолчанию(		ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоНеОтгружатьСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоФактуВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксИзОтклоненияВСтрокеТЧ(	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоПоРНПТСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоОтклонение(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоВесу(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьКоличествоУпаковокПоОбъему(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьВесОбъемВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВидЦеныВСтрокеТЧ(									ТекущаяСтрока, СтруктураДействий); 
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЦенуПродажиРозницаВСтрокеТЧ(															ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияПродажВСтрокеТЧ(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ(														ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьТипМестаХраненияПоУмолчанию(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСтавкуНДСВСтрокеТЧ(																	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьПроцентРучнойСкидкиВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРучнойСкидкиВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуАвтоматическойСкидкиВСтрокеТЧ(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСуффиксВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВСтрокеТЧРасхождения(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВПродажахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуСкидкуПоСуммеВЗакупкахВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПоСуммеВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(																	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНДССуффиксВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДССуффиксВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСРеглВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСУпрВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСРеглСуффиксВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуБезНДСУпрСуффиксВСтрокеТЧ(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуНУВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуВРВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьНДСРеглВСтрокеТЧ(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуПродажиНДСВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.УстановитьАктивностьСтроки(									ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьПолучитьВариантКомплектации(															ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагиРасхождениеИИзлишекПорча(						ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВзаиморасчетовСуффиксВСтрокеТЧ(				ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьАвтоматическуюСкидкуВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ОчиститьСуммуВознагражденияВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПартнера(											ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакБезВозвратнойТары(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакОтмененоБезВозвратнойТары(					ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакАктивностьБезВозвратнойТары(				ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьДубликатыЗависимыхРеквизитов(						ТекущаяСтрока, СтруктураДействий);
	ПроверитьСериюРассчитатьСтатус(																	ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьВариантОтраженияКорректировкиРеализации(			ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.НоменклатураПриИзмененииПереопределяемый(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ХарактеристикаПриИзмененииПереопределяемый(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеОтгрузки(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхожденияПослеПриемки(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьРасхождения(										ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияПриемка(					ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментарияОтгрузка(					ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакНаличияКомментария(							ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьПризнакТоварногоМестаТребуетсяОбработка(			ТекущаяСтрока, СтруктураДействий);
	ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ПроверитьЗаполнитьНазначениеВСтрокеТЧ(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьФлагОбособленноПоНазначению(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ПриИзмененииНазначенияВСтрокеТЧ(							ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимости(					ТекущаяСтрока, СтруктураДействий);
	ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСпособОпределенияСебестоимостиСтрокой(				ТекущаяСтрока, СтруктураДействий);

	ЗаполнитьНаправлениеДеятельности(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПодразделениеВСтрокеТЧ(																ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПризнакРасхождениеЗаказ(                                                               ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ОбработкаТабличнойЧастиКлиентЛокализация.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыПересчетаИЗаполнения

Процедура ПроверитьПолучитьВариантКомплектации(ТекущаяСтрока, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
	 Или Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) И ТекущаяСтрока.ХарактеристикиИспользуются Тогда

		ТекущаяСтрока.ВариантКомплектации = Неопределено;

	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		ТекущаяСтрока.Характеристика             = Неопределено;
		ТекущаяСтрока.ХарактеристикиИспользуются = Ложь;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		ТекущаяСтрока.Упаковка = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС") Тогда
		ТекущаяСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		НалогообложениеНДС = Неопределено;
		СтруктураПараметровДействия.Свойство("НалогообложениеНДС", НалогообложениеНДС);
		
		СтавкаНДС = Неопределено;
		Если Не СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			ТекущаяСтрока.Сумма,
			ТекПроцентНДС,
			СтруктураПараметровДействия.ЦенаВключаетНДС,
			НалогообложениеНДС);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		
		Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
			ТекущаяСтрока.ВидЦены = ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка");
		КонецЕсли;
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияРозничныхПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияРозничныхПродаж") Тогда		
		ТекущаяСтрока.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВидНоменклатуры") Тогда
		ТекущаяСтрока.ВидНоменклатуры = ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.ПустаяСсылка");
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения") Тогда
		ТекущаяСтрока.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины") Тогда
		ТекущаяСтрока.ТипИзмеряемойВеличины = ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки") Тогда
		ТекущаяСтрока.ВесУпаковки = 0;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки") Тогда
		ТекущаяСтрока.ОбъемУпаковки = 0;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса") Тогда
		ТекущаяСтрока.ЕдиницаИзмеренияВеса = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема") Тогда
		ТекущаяСтрока.ЕдиницаИзмеренияОбъема = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются") Тогда
		ТекущаяСтрока.ХарактеристикиИспользуются = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД") Тогда
		ТекущаяСтрока.ВедетсяУчетПоГТД = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияНоменклатуры") Тогда
		ТекущаяСтрока.СтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ") Тогда
		ТекущаяСтрока.ВедетсяУчетПоРНПТ = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияТНВЭД") Тогда
		ТекущаяСтрока.ЕдиницаИзмеренияТНВЭД = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга") Тогда
		ТекущаяСтрока.ЭтоУслуга = Ложь;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул") Тогда
		ТекущаяСтрока.Артикул = "";
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод") Тогда
		ТекущаяСтрока.Код = "";
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание") Тогда
		ТекущаяСтрока.Описание = "";
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются") Тогда
		ТекущаяСтрока.СерииИспользуются = Ложь;
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиентЛокализация.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьЦенуПродажиРозницаВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиРозница") Тогда
		ТекущаяСтрока.Цена = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьСериюРассчитатьСтатус(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрыДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",ПараметрыДействия) Тогда
		Если ПараметрыДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			ТекущаяСтрока.Серия = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
			ТекущаяСтрока.СтатусУказанияСерий = 0;
		Иначе
			Для Каждого ИмяПоляСтатус Из ПараметрыДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				ИмяПоляСерия = ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус).Серия;
				ТекущаяСтрока[ИмяПоляСтатус] = 0;
				
				Если ТекущаяСтрока.Свойство(ИмяПоляСерия) Тогда
					ТекущаяСтрока[ИмяПоляСерия] = ПредопределенноеЗначение("Справочник.СерииНоменклатуры.ПустаяСсылка");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЕстьПризнакУказанияСерий = ПараметрыДействия.ПараметрыУказанияСерий.ПоляСвязи.Найти("УказыватьСерии") <> Неопределено;
		Если ЕстьПризнакУказанияСерий Тогда
			ТекущаяСтрока.УказыватьСерии = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус)
	
	СтруктураВозврата = Новый Структура("Серия, Номенклатура, Характеристика");
	
	Если ИмяПоляСтатус = "СтатусУказанияСерий" Тогда
		СтруктураВозврата.Серия = "Серия";
		СтруктураВозврата.Номенклатура = "Номенклатура"; 
		СтруктураВозврата.Характеристика = "Характеристика";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийОтправитель" Тогда
		СтруктураВозврата.Серия = "СерияОтправитель";
		СтруктураВозврата.Номенклатура = "НоменклатураОтправитель";
		СтруктураВозврата.Характеристика = "ХарактеристикаОтправитель";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийПолучатель" Тогда
		СтруктураВозврата.Серия = "СерияПолучатель";
		СтруктураВозврата.Номенклатура = "НоменклатураПолучатель";
		СтруктураВозврата.Характеристика = "ХарактеристикаПолучатель";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийОприходование" Тогда
		СтруктураВозврата.Серия = "СерияОприходование";
		СтруктураВозврата.Номенклатура = "НоменклатураОприходование";
		СтруктураВозврата.Характеристика = "ХарактеристикаОприходование";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийНаСкладах" Тогда
		СтруктураВозврата.Серия = "СерияНаСкладах";
		СтруктураВозврата.Номенклатура = "НоменклатураНаСкладах";
		СтруктураВозврата.Характеристика = "ХарактеристикаНаСкладах";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийТоварыУПартнеров" Тогда
		СтруктураВозврата.Серия = "СерияТоварыУПартнеров";
		СтруктураВозврата.Номенклатура = "НоменклатураТоварыУПартнеров";
		СтруктураВозврата.Характеристика = "ХарактеристикаТоварыУПартнеров";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийПереданныхТоваров" Тогда
		СтруктураВозврата.Серия = "СерияПереданныхТоваров";
		СтруктураВозврата.Номенклатура = "НоменклатураПереданныхТоваров";
		СтруктураВозврата.Характеристика = "ХарактеристикаПереданныхТоваров";
	ИначеЕсли ИмяПоляСтатус = "СтатусУказанияСерийСписываемаяСерия" Тогда
		СтруктураВозврата.Серия = "СерияСписываемаяСерия";
		СтруктураВозврата.Номенклатура = "НоменклатураСписываемаяСерия";
		СтруктураВозврата.Характеристика = "ХарактеристикаСписываемаяСерия";
	КонецЕсли;
	
	Возврат СтруктураВозврата
	
КонецФункции

Процедура ЗаполнитьПризнакДвиженияПоСкладскимРегистрам(ТекущаяСтрока, СтруктураДействий)
	Перем ИмяПоля;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", ИмяПоля) Тогда
		ТекущаяСтрока[ИмяПоля] = Ложь;
	КонецЕсли;
	
КонецПроцедуры



// Заполняет служебный реквизит "РасхождениеЗаказ" в строке
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия,
//  														   Значение - Структура - параметры действия.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыЗаполнения;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПризнакРасхождениеЗаказ", ПараметрыЗаполнения) Тогда
		Возврат;
	КонецЕсли;

	ЗаказыКлиент.ЗаполнитьПризнакРасхождениеЗаказ(ТекущаяСтрока, ПараметрыЗаполнения, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедуры

Функция НеобходимВызовСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно")
			Или СтруктураДействий.Свойство("ЗаполнитьКолонкуДоступно")
			Или СтруктураДействий.Свойство("ОбновитьКэшНоменклатура") Тогда
		
			Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("НеобходимоОбработатьВсюТЧ")
		И СтруктураДействий.НеобходимоОбработатьВсюТЧ Тогда
		ТекстИсключения = НСтр("ru = 'Для обработки всей ТЧ, необходимо сделать контекстный вызов серверной функции ""%Функция%""'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Функция%", "ОбработкаТабличнойЧастиСервер.ОбработатьТЧ");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УпаковкаНоменклатура = Неопределено;
	
	Если (СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", УпаковкаНоменклатура)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему")) Тогда
		
		ПараметрыПересчета = ОбработкаТабличнойЧастиКлиентСервер.НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура);
		
		КлючКоэффициента = ОбработкаТабличнойЧастиКлиентСервер.КлючКэшаУпаковки(ПараметрыПересчета.Номенклатура, ПараметрыПересчета.Упаковка);
		
		Если ЗначениеЗаполнено(ПараметрыПересчета.Упаковка)
			И ЗначениеЗаполнено(ПараметрыПересчета.Номенклатура)
			И КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента] = Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему")
		Или СтруктураДействий.Свойство("ПересчитатьВесОбъем")) Тогда
		
		КлючКоэффициента = ОбработкаТабличнойЧастиКлиентСервер.КлючКэшаУпаковки(Неопределено, ТекущаяСтрока.ЕдиницаИзмеренияВеса);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмеренияВеса)
			И КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента] = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		КлючКоэффициента = ОбработкаТабличнойЧастиКлиентСервер.КлючКэшаУпаковки(Неопределено, ТекущаяСтрока.ЕдиницаИзмеренияОбъема);
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмеренияОбъема)
			И КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента] = Неопределено Тогда
				Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПересчета = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ", ПараметрыПересчета) Тогда
		КлючКоэффициента = ОбработкаТабличнойЧастиКлиентСервер.КлючКэшаКоэффициентРНПТ(ТекущаяСтрока, ПараметрыПересчета);
		
		Кэш = КэшированныеЗначения.КоэффициентыРНПТ[КлючКоэффициента];
		
		Если Кэш = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПересчета = Неопределено;
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТСуффикс", ПараметрыПересчета) Тогда
		КлючКоэффициента = ОбработкаТабличнойЧастиКлиентСервер.КлючКэшаКоэффициентРНПТ(ТекущаяСтрока, ПараметрыПересчета);
		
		Кэш = КэшированныеЗначения.КоэффициентыРНПТ[КлючКоэффициента];
		
		Если Кэш = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Партнер)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС", СтруктураПараметровДействия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССуффикс", СтруктураПараметровДействия) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия)
		И (ЗначениеЗаполнено(СтруктураПараметровДействия.Соглашение) Или ЗначениеЗаполнено(СтруктураПараметровДействия.Партнер)) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияРозничныхПродаж", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.ОбъектХраненияУсловийПродаж) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Валюта)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПартнера) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия)
		И Не СтруктураПараметровДействия.НеВыполнятьПроверкуДляПользователя
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураПартнера)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВидНоменклатуры")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакИспользованияХарактеристик")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока[СтруктураПараметровДействия.Номенклатура])
		И Не ЗначениеЗаполнено(ТекущаяСтрока.СтранаПроисхождения) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНомераГТД")
		И ЗначениеЗаполнено(ТекущаяСтрока.НомерГТД) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияТНВЭД")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ИспользоватьАвтоматическиеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьАвтоматическиеСкидки") Тогда
				ИспользоватьАвтоматическиеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если (ИспользоватьРучныеСкидки 
			И КэшированныеЗначения.ИспользоватьРучныеСкидкиВПродажах = Неопределено)
			Или (ИспользоватьАвтоматическиеСкидки 
			И КэшированныеЗначения.ИспользоватьАвтоматическиеСкидкиВПродажах = Неопределено) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", СтруктураПараметровДействия) Тогда
		
		ИспользоватьРучныеСкидки = Ложь;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			Если СтруктураПараметровДействия.Свойство("ИспользоватьРучныеСкидки") Тогда
				ИспользоватьРучныеСкидки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ИспользоватьРучныеСкидки  <> Неопределено 
			И КэшированныеЗначения.ИспользоватьРучныеСкидкиВЗакупках = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И (ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) 
		И ТекущаяСтрока.ХарактеристикиИспользуются
		Или Не ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) 
		И Не ТекущаяСтрока.ХарактеристикиИспользуются) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПараметрыДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры", ПараметрыДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И ЗначениеЗаполнено(ПараметрыДействия.Организация)
		И ЗначениеЗаполнено(ПараметрыДействия.Подразделение)
		И Не ЗначениеЗаполнено(ТекущаяСтрока[ПараметрыДействия.СтатьяРасходов]) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСтатьюАналитикуРасходов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНастройкуСчетовУчетаПоУмолчанию") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеНастройкиСчетовУчета") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание")
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия.Склад)
		И СтруктураПараметровДействия.ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
		И Не(ТекущаяСтрока.Свойство("Отменено") 
		И ТекущаяСтрока.Отменено)
		И Не(ТекущаяСтрока.Свойство("ВариантОбеспечения") 
			И ТекущаяСтрока.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить")
			И ТекущаяСтрока.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.СоСклада")) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0
			И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			Возврат Истина;
		Иначе
			Для Каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				ИменаПолей = ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство(ИменаПолей.Номенклатура)
					И ЗначениеЗаполнено(ТекущаяСтрока[ИменаПолей.Номенклатура]) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("НоменклатураПриИзмененииПереопределяемый", ПараметрыДействия)
		И МодификацияКонфигурацииКлиентПереопределяемый.ОбработкаТабличнойЧастиНеобходимВызовСервера("НоменклатураПриИзмененииПереопределяемый",ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ХарактеристикаПриИзмененииПереопределяемый", ПараметрыДействия)
		И МодификацияКонфигурацииКлиентПереопределяемый.ОбработкаТабличнойЧастиНеобходимВызовСервера("ХарактеристикаПриИзмененииПереопределяемый",ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи", ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация", ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКолонкуДоступно", ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства", ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения", ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры", ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", ПараметрыДействия) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД", ПараметрыДействия) Тогда
		Если ПараметрыДействия <> Неопределено
			И ПараметрыДействия.Свойство("НомерГТД")
			И ЗначениеЗаполнено(ПараметрыДействия.НомерГТД) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЕсли;

	

	Если СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", СтруктураПараметровДействия)
	   И ЗначениеЗаполнено(ТекущаяСтрока.Назначение)
	   И КэшированныеЗначения.СвойстваНазначений.Получить(ТекущаяСтрока.Назначение) = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ЗаполнитьСлужебныеРеквизитыПоНазначению") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПартиюТМЦВЭксплуатации", ПараметрыДействия)
		И ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура)
		И ЗначениеЗаполнено(ТекущаяСтрока.ФизическоеЛицо) Тогда
		
		Если ПараметрыДействия = Неопределено
			ИЛИ ЗначениеЗаполнено(ПараметрыДействия.Дата)
				И ЗначениеЗаполнено(ПараметрыДействия.Организация)
				И ЗначениеЗаполнено(ПараметрыДействия.Подразделение)
				И (Не ПараметрыДействия.Свойство("ХозяйственнаяОперация")
					Или (ЗначениеЗаполнено(ПараметрыДействия.ХозяйственнаяОперация)
						И ПараметрыДействия.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратИзЭксплуатации"))) Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОрдерногоСклада", СтруктураПараметровДействия) Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТМЦВЭксплуатацииКлиент.НеобходимВызовСервераДляОбработкиСтрокиТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОбработкаТабличнойЧастиКлиентЛокализация.НеобходимВызовСервера(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецФункции

Функция ПолучитьТекущуюСтрокуСтруктурой(ТекущаяСтрока, СтруктураДействий, ДополнительныеПараметрыЗаполнения)
	Перем СтруктураПараметровДействия;
	
	СтруктураПолейТЧ = Новый Структура;
	
	ТМЦВЭксплуатацииКлиент.ДополнитьТекущуюСтрокуСтруктурой(СтруктураПолейТЧ, ТекущаяСтрока, СтруктураДействий, ДополнительныеПараметрыЗаполнения);
	
	Если СтруктураДействий.Свойство("ПроверитьНеобходимостьОбновленияКолонкиДоступно")
			Или СтруктураДействий.Свойство("ЗаполнитьКолонкуДоступно")
			Или СтруктураДействий.Свойство("ОбновитьКэшНоменклатура") Тогда
		
		ТекущаяСтруктура = ОбеспечениеВДокументахКлиент.СтруктураПолейПроверитьНеобходимостьОбновленияКолонкиДоступно();
		Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			ТекущаяСтруктура.Вставить("ИдентификаторСтрокиПолученный", ТекущаяСтрока.ПолучитьИдентификатор());
		Иначе
			ТекущаяСтруктура.Вставить("ИдентификаторСтрокиПолученный", Неопределено);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураПолейТЧ, ТекущаяСтруктура);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтгрузитьДляВариантаОформленияЗаказПлюсРеализация") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформления");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства") Тогда
		СтруктураПолейТЧ.Вставить("Обособленно");
		СтруктураПолейТЧ.Вставить("Производится");
		СтруктураПолейТЧ.Вставить("НазначениеОбеспечения");
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНазначениеВЭтапеПроизводства") Тогда
		СтруктураПолейТЧ.Вставить("Обособленно");
		СтруктураПолейТЧ.Вставить("НазначениеОбеспечения");
		СтруктураПолейТЧ.Вставить("Назначение");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСтатьюАналитикуРасходов", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.СтатьяРасходов);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.АналитикаРасходов);
		Для каждого Колонка Из СтруктураПараметровДействия.ДополнительныеКолонки Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ИнициализироватьСтатьюИАналитикуПослеДобавленияСтроки", СтруктураПараметровДействия) Тогда
		Для каждого Колонка Из СтруктураПараметровДействия.КолонкиТабличнойЧасти Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНастройкуСчетовУчетаПоУмолчанию", СтруктураПараметровДействия) Тогда
		Для каждого Колонка Из СтруктураПараметровДействия.КолонкиТабличнойЧасти Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПредставлениеНастройкиСчетовУчета", СтруктураПараметровДействия) Тогда
		Для каждого Колонка Из СтруктураПараметровДействия.КолонкиТабличнойЧасти Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц")
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТ") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("НомерГТД");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоПоРНПТ");
		СтруктураПолейТЧ.Вставить("ВедетсяУчетПоРНПТ");
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.МестоХраненияВТабличнойЧасти Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИмяПоляМестоХранения);
		КонецЕсли;
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТ.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИменаПолейССуффиксом) Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТ.ИменаПолейССуффиксом.КоличествоПоРНПТ);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоПоРНПТСуффикс") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("НомерГТД");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("КоличествоПоРНПТ");
		СтруктураПолейТЧ.Вставить("ВедетсяУчетПоРНПТ");
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТСуффикс.МестоХраненияВТабличнойЧасти Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ПересчитатьКоличествоПоРНПТСуффикс.ИмяПоляМестоХранения);
		КонецЕсли;
		Если СтруктураДействий.ПересчитатьКоличествоПоРНПТСуффикс.Свойство("ИменаПолейССуффиксом")
			И ЗначениеЗаполнено(СтруктураДействий.ПересчитатьКоличествоПоРНПТСуффикс.ИменаПолейССуффиксом) Тогда
			Для Каждого ИмяПоля Из СтруктураДействий.ПересчитатьКоличествоПоРНПТСуффикс.ИменаПолейССуффиксом Цикл
				СтруктураПолейТЧ.Вставить(ИмяПоля.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияТНВЭД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакРасхождениеЗаказ") Тогда
		СтруктураПолейТЧ.Вставить("РасхождениеЗаказ");
		СтруктураПолейТЧ.Вставить("КодСтроки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", СтруктураПараметровДействия)
	   И СтруктураПараметровДействия <> Неопределено 
	   И СтруктураПараметровДействия.Свойство("НужноОкруглять")
	   И ТекущаяСтрока.Свойство("НужноОкруглять") Тогда
	   	СтруктураПолейТЧ.Вставить("НужноОкруглять");	
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьGTINВСтроке", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("GTIN");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДССуффикс", СтруктураПараметровДействия) Тогда
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Суффикс = СтруктураПараметровДействия.Суффикс;
		Иначе
			Суффикс = СтруктураПараметровДействия;
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.Сумма, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаСНДС, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаНДС, 0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСРегл", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСУпр", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Сумма", 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДСУпр", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСРеглСуффикс", СтруктураПараметровДействия) Тогда
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Суффикс = СтруктураПараметровДействия.Суффикс;
		Иначе
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.Сумма, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаСНДС, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаНДС, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаБезНДСРегл, 0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДСУпрСуффикс", СтруктураПараметровДействия) Тогда
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Суффикс = СтруктураПараметровДействия.Суффикс;
		Иначе
			Суффикс = "";
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.Сумма, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаСНДС, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаНДС, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаБезНДСУпр, 0);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		КоличествоССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		СтруктураПолейТЧ.Вставить(КоличествоССуффиксом.Количество, 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоОтклонение") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		СтруктураПолейТЧ.Вставить("КоличествоФакт", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт", 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли; 
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффиксИзОтклонения",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение", 0);
		КоличествоССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьВесОбъем",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		КоличествоССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоВесу",Суффикс)
		Или СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоОбъему",Суффикс) Тогда
		СтруктураПолейТЧ.Вставить("ВесУпаковки", 0);
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки", 0);
		КоличествоССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(КоличествоССуффиксом.КоличествоУпаковок, 0);
		СтруктураПолейТЧ.Вставить(КоличествоССуффиксом.Количество, 0);
		СтруктураПолейТЧ.Вставить("Вес", 0);
		СтруктураПолейТЧ.Вставить("Объем", 0);
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидЦены") Тогда
		Если СтруктураДействий.ЗаполнитьВидЦены.Свойство("ИмяПоляВидЦены") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ЗаполнитьВидЦены.ИмяПоляВидЦены);
		Иначе
			СтруктураПолейТЧ.Вставить("ВидЦены");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяКолонкиУпаковка") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяКолонкиУпаковка);
		Иначе
			СтруктураПолейТЧ.Вставить("Упаковка");
		КонецЕсли;
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяКолонкиВидЦены") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяКолонкиВидЦены);
		Иначе
			СтруктураПолейТЧ.Вставить("ВидЦены");
		КонецЕсли;
		Если СтруктураДействий.ЗаполнитьЦенуПродажи.Свойство("ИмяПоляЦена") Тогда
			СтруктураПолейТЧ.Вставить(СтруктураДействий.ЗаполнитьЦенуПродажи.ИмяПоляЦена, 0);
		Иначе
			СтруктураПолейТЧ.Вставить("Цена", 0);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуПродажиПоАссортименту") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЦенуЗакупки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияЗакупок") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВидЦеныПоставщика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПоНоменклатуреПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьНоменклатуруПартнераПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСопоставленнуюНоменклатуруПартнера") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("НоменклатураПартнера");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДС")
		 ИЛИ СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("ДатаОтгрузки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДССуффикс", СтруктураПараметровДействия) Тогда
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Суффикс = СтруктураПараметровДействия.Суффикс;
		Иначе
			Суффикс = СтруктураПараметровДействия;
		КонецЕсли;
		СтавкаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СтавкаССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить(СтавкаССуффиксом.СтавкаНДС);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКодТНВЭД") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары") Тогда
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС", 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаСНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаРегл"    , 0);
		СтруктураПолейТЧ.Вставить("СуммаБезНДС", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл") Тогда
		СтруктураПолейТЧ.Вставить("СуммаНДС" , 0);
		СтруктураПолейТЧ.Вставить("НДСРегл", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьСумму") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"             , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСумму),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСумму), 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСуффикс",СтруктураПараметровДействия) Тогда
		ИмяКоличества = "";
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Суффикс = СтруктураПараметровДействия.Суффикс;
			ИмяКоличества = СтруктураПараметровДействия.ИмяКоличества;
		Иначе
			Суффикс = СтруктураПараметровДействия;
		КонецЕсли;
		
		КоличествоССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.КоличествоССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(ИмяКоличества),КоличествоССуффиксом.КоличествоУпаковок,КоличествоССуффиксом[ИмяКоличества]), 0);
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.Сумма, 0);
		
		ИмяПоляЦена = ОбработкаТабличнойЧастиКлиентСервер.ЦенаССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(ИмяПоляЦена, 0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДССуффикс", СтруктураПараметровДействия) Тогда
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Суффикс = СтруктураПараметровДействия.Суффикс;
		Иначе
			Суффикс = СтруктураПараметровДействия;
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.Сумма, 0);
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаНДС, 0);
		
		СтавкаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СтавкаССуффиксом(Суффикс);
		
		СтруктураПолейТЧ.Вставить(СтавкаССуффиксом.СтавкаНДС , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"              , 0);
		СтруктураПолейТЧ.Вставить("Количество"         , 0);
		СтруктураПолейТЧ.Вставить("Цена      "         , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами") Тогда
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписанию"                , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюПоЗаказу"        , 0);
		СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалютеПоЗаказу" , 0);
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок"                          , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВЗаказе"                   , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("Цена"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаЗаказа"      , 0);
		СтруктураПолейТЧ.Вставить("Количество", 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВПродажах") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки"  , 0);
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки", 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"  			   , 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		Если СтруктураДействий.ПересчитатьЦенуСкидкуПоСуммеВПродажах.Свойство("ИспользоватьБонусныеБаллы") Тогда
			СтруктураПолейТЧ.Вставить("СуммаБонусныхБалловКСписаниюВВалюте"  , 0);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСкидкуПоСуммеВЗакупках") Тогда
		СтруктураПолейТЧ.Вставить("Цена"                       , 0);
		СтруктураПолейТЧ.Вставить("Сумма"                      , 0);
		СтруктураПолейТЧ.Вставить("СуммаРучнойСкидки"          , 0);
		СтруктураПолейТЧ.Вставить("ПроцентРучнойСкидки"        , 0);
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок "        , 0);
		СтруктураПолейТЧ.Вставить("Количество"   		       , 0);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДаннымУчета", 0);
		СтруктураПолейТЧ.Вставить("КоличествоПоДаннымУчета"        , 0);
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		
		ИмяПоляСклад = "Склад";
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура")
			И СтруктураПараметровДействия.Свойство("ИмяПоляСклад") Тогда
			ИмяПоляСклад = СтруктураПараметровДействия.ИмяПоляСклад;
		КонецЕсли;
		СтруктураПолейТЧ.Вставить(ИмяПоляСклад);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОрдерногоСклада", СтруктураПараметровДействия) Тогда
		
		ИмяПоляПризнака = "ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач";
		ИмяПоляСклад    = "Склад";
		
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура")
			И СтруктураПараметровДействия.Свойство("ИмяПоляСклад") Тогда
			ИмяПоляСклад = СтруктураПараметровДействия.ИмяПоляСклад;
		КонецЕсли;
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура")
			И СтруктураПараметровДействия.Свойство("ИмяПоляПризнака") Тогда
			ИмяПоляПризнака = СтруктураПараметровДействия.ИмяПоляПризнака;
		КонецЕсли;
		
		СтруктураПолейТЧ.Вставить(ИмяПоляСклад);
		СтруктураПолейТЧ.Вставить(ИмяПоляПризнака);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		СтруктураПолейТЧ.Вставить("СрокПоставки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияРозничныхПродаж") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Серия");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("Цена", 0);
		СтруктураПолейТЧ.Вставить("ВидЦены");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("ВестиУчетПоГТД");
		СтруктураПолейТЧ.Вставить("ЭтоУслуга");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВидНоменклатуры", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЕдиницаИзмерения", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипИзмеряемойВеличины", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВесУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ВесУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемУпаковки") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ОбъемУпаковки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияВеса") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияВеса");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЕдиницуИзмеренияОбъема") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Упаковка");
		СтруктураПолейТЧ.Вставить("ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакСерииИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("ВедетсяУчетПоГТД");
		СтруктураПолейТЧ.Вставить("СтранаПроисхождения");
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоРНПТ", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипНомераГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("НомерГТД");
		СтруктураПолейТЧ.Вставить("ТипНомераГТД");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		СтруктураПолейТЧ.Вставить("Активность");
		СтруктураПолейТЧ.Вставить("ИндексКартинки");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьХарактеристикуНекачественногоТовара") 
		ИЛИ СтруктураДействий.Свойство("ЗаполнитьУпаковкуНекачественногоТовара") Тогда
		СтруктураПолейТЧ.Вставить("НоменклатураИсходногоКачества");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьВариантКомплектацииПоВладельцу") Тогда

		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ВариантКомплектации");
		СтруктураПолейТЧ.Вставить("ХарактеристикиИспользуются");

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагРасхождение") Тогда

		СтруктураПолейТЧ.Вставить("Расхождение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРасхождения") Тогда
	
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокОтклонение") Тогда

		СтруктураПолейТЧ.Вставить("КоличествоУпаковокОтклонение");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьФлагИзлишекПорча") Тогда

		СтруктураПолейТЧ.Вставить("ИзлишекПорча");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетов") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаВзаиморасчетов");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ОчиститьСуммуВзаиморасчетовСуффикс", СтруктураПараметровДействия) Тогда
		Если ТипЗнч(СтруктураПараметровДействия) = Тип("Структура") Тогда
			Суффикс = СтруктураПараметровДействия.Суффикс;
		Иначе
			Суффикс = СтруктураПараметровДействия;
		КонецЕсли;
		
		СуммаССуффиксом = ОбработкаТабличнойЧастиКлиентСервер.СуммаССуффиксом(Суффикс);
		
		СтруктураПолейТЧ.Вставить(СуммаССуффиксом.СуммаВзаиморасчетов);
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ОчиститьАвтоматическуюСкидку") Тогда
		
		СтруктураПолейТЧ.Вставить("ПроцентАвтоматическойСкидки");
		СтруктураПолейТЧ.Вставить("СуммаАвтоматическойСкидки");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСодержание") Тогда
		СтруктураПолейТЧ.Вставить("Содержание");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", СтруктураПараметровДействия) Тогда
		Для Каждого ПолеСтруктуры Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(ПолеСтруктуры.Ключ);
			ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
			Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ+ПолеСтруктуры.Ключ, 0);
				СтруктураПолейТЧ.Вставить(Реквизит.Ключ, 0);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ОчиститьСуммуВознаграждения") Тогда
		СтруктураПолейТЧ.Вставить("СуммаВознаграждения");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтатьюАналитикуРасходовНоменклатуры", СтруктураПараметровДействия) Тогда
		
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.СтатьяРасходов);
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.АналитикаРасходов);
		
		Для каждого Колонка Из СтруктураПараметровДействия.ДополнительныеКолонки Цикл
			СтруктураПолейТЧ.Вставить(Колонка);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ВариантОформленияПродажи");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоНеОтгружать") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументе");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокНеОтгружать");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокВДокументеНеотгружаемые");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи") Тогда
		СтруктураПолейТЧ.Вставить("ЦенаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажи");
		СтруктураПолейТЧ.Вставить("СуммаПродажиНДС");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьОбеспечениеВДокументеПродажи") Тогда
		
		ПараметрыДействия = СтруктураДействий.ПроверитьЗаполнитьОбеспечениеВДокументеПродажи;
		
		Если Не СтруктураПолейТЧ.Свойство("ДанныеПрограммногоОбъекта") Тогда
			
			ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
				ПараметрыДействия,
				ТекущаяСтрока);
			
			// Эти данные нужно подать на вход серверной процедуры
			СтруктураПолейТЧ.Вставить("ДанныеПрограммногоОбъекта", ДанныеПрограммногоОбъекта);
			
		КонецЕсли;
		
		ПараметрыДействия.Удалить("Форма");
		
		// Эти поля будут заполнены серверной процедурой
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		СтруктураПолейТЧ.Вставить("Обособленно");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКолонкуДоступно") Тогда
		
		ПараметрыДействия = СтруктураДействий.ЗаполнитьКолонкуДоступно;
		
		Если Не СтруктураПолейТЧ.Свойство("ДанныеПрограммногоОбъекта") Тогда
			
			ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
				ПараметрыДействия,
				ТекущаяСтрока);
			
			// Эти данные нужно подать на вход серверной процедуры
			СтруктураПолейТЧ.Вставить("ДанныеПрограммногоОбъекта", ДанныеПрограммногоОбъекта);
			
		КонецЕсли;
		
		ПараметрыДействия.Удалить("Форма");
		
		// Эти поля будут заполнены серверной процедурой
		СтруктураПолейТЧ.Вставить("Доступно");
		СтруктураПолейТЧ.Вставить("ПерераспределятьЗапасы");
		СтруктураПолейТЧ.Вставить("ОтгружатьЕслиДоступно");
		
	КонецЕсли;
	
	
	Если СтруктураДействий.Свойство("ПересчитатьУчетноеКоличествоНоменклатуры")
	 ИЛИ СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокПоФакту") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокФакт");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокУчет");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ИндексСовместноПродаваемыеТовары");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьАссортиментСтроки") Тогда
		СтруктураПолейТЧ.Вставить("НомерСтроки");
		СтруктураПолейТЧ.Вставить("Номенклатура");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("БезВозвратнойТары");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОтмененоБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("ОтмененоБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Отменено");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАктивностьБезВозвратнойТары", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("АктивностьБезВозвратнойТары");
		СтруктураПолейТЧ.Вставить("Активность");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия) 
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакКод", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьПризнакОписание", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда

		Для Каждого Поле Из СтруктураПараметровДействия Цикл
			СтруктураПолейТЧ.Вставить(Поле.Ключ);
			СтруктураПолейТЧ.Вставить(Поле.Значение);
		КонецЦикла;
	КонецЕсли;
	

	
	Если СтруктураДействий.Свойство("ЗаполнитьПомещение", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Помещение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПродавца", СтруктураПараметровДействия)  Тогда
		
		СтруктураПолейТЧ.Вставить("Продавец");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус",СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Количество() = 0 Тогда
			СтруктураПолейТЧ.Вставить("Серия");
			СтруктураПолейТЧ.Вставить("Номенклатура");
			СтруктураПолейТЧ.Вставить("Характеристика");
		
			СтруктураПолейТЧ.Вставить("СтатусУказанияСерий");
		Иначе
			Для Каждого ИмяПоляСтатус Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий Цикл
				ИменаПолей = ИменаПолейПоСтатусуУказанияСерий(ИмяПоляСтатус);
				СтруктураПолейТЧ.Вставить(ИмяПоляСтатус);
				Если ТекущаяСтрока.Свойство(ИменаПолей.Серия) Тогда
					СтруктураПолейТЧ.Вставить(ИменаПолей.Серия);
					СтруктураПолейТЧ.Вставить(ИменаПолей.Номенклатура);
					СтруктураПолейТЧ.Вставить(ИменаПолей.Характеристика);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ПоляСвязи Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Для Каждого СтрМас Из СтруктураПараметровДействия.ПараметрыУказанияСерий.ИменаПолейДополнительные Цикл
			СтруктураПолейТЧ.Вставить(СтрМас);
		КонецЦикла;
		
		Если СтруктураПараметровДействия.ПараметрыУказанияСерий.ЭтоЗаказ Тогда
			СтруктураПолейТЧ.Вставить("Отменено");
			СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество) Тогда
			СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия.ПараметрыУказанияСерий.ИмяПоляКоличество, 0);
		КонецЕсли;
		
		Если ТекущаяСтрока.Свойство("Назначение") Тогда
			СтруктураПолейТЧ.Вставить("Назначение");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеОтгрузки") Тогда
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаНДС");
		СтруктураПолейТЧ.Вставить("СуммаСНДС");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхожденияПослеПриемки") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаНДСРасхождения");
		СтруктураПолейТЧ.Вставить("СуммаСНДСРасхождения");
		
		СтруктураПолейТЧ.Вставить("Цена");
		СтруктураПолейТЧ.Вставить("СтавкаНДС");
		
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("СуммаПоДокументу");
		СтруктураПолейТЧ.Вставить("Сумма");
		СтруктураПолейТЧ.Вставить("СуммаНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаНДС");
		СтруктураПолейТЧ.Вставить("СуммаСНДСПоДокументу");
		СтруктураПолейТЧ.Вставить("СуммаСНДС");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
		СтруктураПолейТЧ.Вставить("ПоВинеСтороннейКомпании");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьРасхождения") Тогда
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокРасхождения");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковокПоДокументу");
		СтруктураПолейТЧ.Вставить("КоличествоПоДокументу");
		СтруктураПолейТЧ.Вставить("ЕстьРасхождения");
		СтруктураПолейТЧ.Вставить("Действие");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТовМестаТребуетсяОбработка") Тогда
		СтруктураПолейТЧ.Вставить("Штрихкод");
		СтруктураПолейТЧ.Вставить("ШтрихкодНеОпределен");
		СтруктураПолейТЧ.Вставить("ЭтоУпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("УпаковочныйЛист");
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("КоличествоЗаполненныхПодчиненныхПозиций");
		СтруктураПолейТЧ.Вставить("ТребуетсяОбработка");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьНазначение") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
	КонецЕсли;
	ИмяРеквизитаОтгружатьОбособленно = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьФлагОбособленноПоНазначению", ИмяРеквизитаОтгружатьОбособленно) Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить(ИмяРеквизитаОтгружатьОбособленно);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииНазначения") Тогда
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("НазначениеОтправителя");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакДвиженияПоСкладскимРегистрам", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить(СтруктураПараметровДействия);
	КонецЕсли;
	
	ПризнакНазначения = Неопределено;
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакНазначения", ПризнакНазначения) Тогда
		СтруктураПолейТЧ.Вставить(ПризнакНазначения);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатуры") Тогда
		
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Отменено");
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения") Тогда
		
		ПараметрыДействия = СтруктураДействий.ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения;
		
		Если Не СтруктураПолейТЧ.Свойство("ДанныеПрограммногоОбъекта") Тогда
			
			ДанныеПрограммногоОбъекта = ОбеспечениеВДокументахКлиентСервер.ДанныеПрограммногоОбъекта(
				ПараметрыДействия,
				ТекущаяСтрока);
			
			// Эти данные нужно подать на вход серверной процедуры
			СтруктураПолейТЧ.Вставить("ДанныеПрограммногоОбъекта", ДанныеПрограммногоОбъекта);
			
		КонецЕсли;
		ПараметрыДействия.Удалить("Форма");
		
		// Эти данные нужно подать на вход серверной процедуры.
		СтруктураПолейТЧ.Вставить("ТипНоменклатуры");
		СтруктураПолейТЧ.Вставить("Отменено");
		СтруктураПолейТЧ.Вставить("ВариантОбеспечения");
		
		// Эти поля будут заполнены серверной процедурой.
		СтруктураПолейТЧ.Вставить("ДатаОтгрузкиОбязательна");
		СтруктураПолейТЧ.Вставить("СкладОбязателен");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуУслугиЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги"       , 0);
		СтруктураПолейТЧ.Вставить("Цена"              , 0);
		СтруктураПолейТЧ.Вставить(?(ПустаяСтрока(СтруктураДействий.ПересчитатьСуммуЗаказДавальца),"КоличествоУпаковок",СтруктураДействий.ПересчитатьСуммуЗаказДавальца), 0);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуЗаказДавальца") Тогда
		
		СтруктураПолейТЧ.Вставить("СуммаУслуги",                0);
		СтруктураПолейТЧ.Вставить("СуммаСобственныхМатериалов", 0);
		СтруктураПолейТЧ.Вставить("Сумма",                      0);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВариантОтраженияКорректировкиРеализации") Тогда
		
		СтруктураПолейТЧ.Вставить("ВариантОтражения");
		
	КонецЕсли;

	Если СтруктураДействий.Свойство("ЗаполнитьСтрануПроисхожденияДляНомераГТД") Тогда
		СтруктураПолейТЧ.Вставить("СтранаПроисхождения");
	КонецЕсли;
	
	
	

	
	
	Если СтруктураДействий.Свойство("ЗаполнитьТипМестаХраненияПоУмолчанию") Тогда
		СтруктураПолейТЧ.Вставить("ТипМестаХранения");
	КонецЕсли;
	

	Если СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", СтруктураПараметровДействия) Тогда
		СтруктураПолейТЧ.Вставить("НаправлениеДеятельности");
		СтруктураПолейТЧ.Вставить("Назначение");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСлужебныеРеквизитыПоНазначению") Тогда
		
		СтруктураПолейТЧ.Вставить("Назначение");
		СтруктураПолейТЧ.Вставить("ТипНазначения");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках") Тогда
		
		СтруктураПолейТЧ.Вставить("Поставщик");
		СтруктураПолейТЧ.Вставить("ТипДокументаПриобретения");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПодразделениеВСтрокеТЧ") Тогда
		
		СтруктураПолейТЧ.Вставить("Подразделение");
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПартиюТМЦВЭксплуатации") Тогда
		СтруктураПолейТЧ.Вставить("Номенклатура");
		СтруктураПолейТЧ.Вставить("Характеристика");
		СтруктураПолейТЧ.Вставить("ФизическоеЛицо");
		СтруктураПолейТЧ.Вставить("Партия");
		СтруктураПолейТЧ.Вставить("ИнвентарныйУчет");
		СтруктураПолейТЧ.Вставить("УчетПоФизЛицам");
		СтруктураПолейТЧ.Вставить("КоличествоУпаковок");
		СтруктураПолейТЧ.Вставить("Количество");
		СтруктураПолейТЧ.Вставить("Упаковка");
	КонецЕсли;
	
	
	ОбработкаТабличнойЧастиКлиентЛокализация.ПолучитьТекущуюСтрокуСтруктурой(СтруктураДействий, СтруктураПолейТЧ);

	ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ТекущаяСтрока);
	
	Если Не ДополнительныеПараметрыЗаполнения = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПолейТЧ, ДополнительныеПараметрыЗаполнения);
	КонецЕсли;
	
	Возврат СтруктураПолейТЧ;
	
КонецФункции


Процедура ЗаполнитьНаправлениеДеятельности(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыДействия;

	Если Не СтруктураДействий.Свойство("ЗаполнитьНаправлениеДеятельности", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;

	НаправленияДеятельностиКлиент.ЗаполнитьНаправлениеДеятельности(
		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ПараметрыДействия);

КонецПроцедуры

Процедура ЗаполнитьПодразделениеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем ПараметрыДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьПодразделениеВСтрокеТЧ", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТипов = ПродажиКлиент.ТипыНоменклатурыСАналитикойПодразделение();
	Если СписокТипов.НайтиПоЗначению(ТекущаяСтрока.ТипНоменклатуры) = Неопределено Тогда
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Подразделение = ПараметрыДействия.Подразделение;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#КонецОбласти
