#Область ПрограммныйИнтерфейс

#Область РаспределеннаяФискализации

// Подключает обработчики системы оповещения, для использования в распределенной фискализации
//
// Параметры:
//  ИдентификаторОбсуждения - ИдентификаторОбсужденияСистемыВзаимодействия
//
Процедура ПодключениеСистемыВзаимодействия(ИдентификаторОбсуждения) Экспорт
	
	Если ИдентификаторОбсуждения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не МобильноеПриложениеКлиент Тогда 
		Если ИдентификаторОбсуждения <> Неопределено Тогда 
			ОписаниеОповещенияПодключенияОбработчика = 
				Новый ОписаниеОповещения("ОбработкаОповещенияПодключенияСообщенийФискализации", РаспределеннаяФискализацияКлиент,);
			ОписаниеОповещенияСерверныхСообщенийБезКонтекста = 
				Новый ОписаниеОповещения("ОбработкаОповещенияСообщенийФискализации", РаспределеннаяФискализацияКлиент,);
			СистемаВзаимодействия.НачатьПодключениеОбработчикаНовыхСообщений(
				ОписаниеОповещенияПодключенияОбработчика, 
				ИдентификаторОбсуждения, 
				ОписаниеОповещенияСерверныхСообщенийБезКонтекста);
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

// Завершение подключения обработчика системы оповещения
// 
// Параметры:
//  ДополнительныеПараметры - Произвольный
// 
Процедура ОбработкаОповещенияПодключенияСообщенийФискализации(ДополнительныеПараметры) Экспорт
	
	Оповестить("ПодключенияСообщенийФискализации");
	
КонецПроцедуры

// Обработчик появлении новых сообщений в обсуждении 
//
// Параметры:
//  Сообщение - СообщениеСистемыВзаимодействия
//  ДополнительныеПараметры - Произвольный
// 
Процедура ОбработкаОповещенияСообщенийФискализации(Сообщение, ДополнительныеПараметры) Экспорт
	
	// АПК: 1391-выкл Особенность. текст сообщения приходит из системы оповещения.
	Если СтрНачинаетсяС(Сообщение.Текст, НСтр("ru='Фискализация чека'")) Тогда 
		Оповестить("ФискализацияЧека", Сообщение.Текст);
		ФискализацияЧековВОчереди(Ложь);
	КонецЕсли;
	// АПК: 1391-вкл
	
КонецПроцедуры

// Обработчик после открытия чека.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчереди_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ФискализацияЧековВОчередиПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	
	Если ПараметрыВыполнения.Свойство("ДанныеОтправленыВЕГАИС") Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

// Обработчик после ошибки печати чека.
//
// Параметры:
//  ПараметрыВыполнения - Структура - Параметры выполнения команды
//  ДополнительныеПараметры - Произвольный
//
Процедура ФискализацияЧековВОчереди_ПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	МенеджерОборудованияКлиентПереопределяемый.ФискализацияЧековВОчередиПослеОшибкиПечатиЧека(ПараметрыВыполнения, ДополнительныеПараметры);
	
КонецПроцедуры

// Завершение фискализации чеков в очереди
// 
// Параметры:
//  РезультатВыполнения - Структура
//  ОбщиеПараметры - ОбщиеПараметры
// 
Процедура ФискализацияЧековВОчереди_Завершение(РезультатВыполнения, ОбщиеПараметры) Экспорт
	
	СтатусыОперацийВСервисе = Неопределено;
	Если Не РезультатВыполнения.Свойство("СтатусВОблачнойКассе") Тогда
		РезультатВыполнения.Вставить("СтатусВОблачнойКассе", "");
	КонецЕсли;
	Если РезультатВыполнения.Результат Тогда
		Если РезультатВыполнения.СтатусВОблачнойКассе = "Выполняется" Тогда 
			СтатусыОперацийВСервисе = ПредопределенноеЗначение("Перечисление.СтатусыОперацийВСервисеОблачныхКасс.Выполняется");
			СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализируется");
		Иначе
			Если РезультатВыполнения.СтатусВОблачнойКассе = "Выполнена" Тогда
				СтатусыОперацийВСервисе = ПредопределенноеЗначение("Перечисление.СтатусыОперацийВСервисеОблачныхКасс.Выполнена");
			КонецЕсли;
			СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
			ТекстСообщения = "";
		КонецЕсли;
	Иначе
		Если РезультатВыполнения.СтатусВОблачнойКассе = "Ошибка" Тогда
			СтатусыОперацийВСервисе = ПредопределенноеЗначение("Перечисление.СтатусыОперацийВСервисеОблачныхКасс.Ошибка");
		КонецЕсли;
		СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка");
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ДополнительныеПараметры") Тогда
		ОбщиеПараметры.Вставить("ДополнительныеПараметры", РезультатВыполнения.ДополнительныеПараметры);
	КонецЕсли;
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
		РаспределеннаяФискализацияВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, Неопределено, ТекстСообщения, СтатусыОперацийВСервисе);
	КонецЕсли;
	
	Оповестить("ФискализированЧек", РезультатВыполнения);
	
	ФискализацияЧековВОчереди_Начало();
	
КонецПроцедуры

// Завершение фискализации пакетной операции в очереди
// 
// Параметры:
//  РезультатВыполнения - см. ОборудованиеЧекопечатающиеУстройстваКлиент.РезультатПродажаСВыдачейНаличных
//  ОбщиеПараметры - ОбщиеПараметры
// 
Процедура ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации(РезультатВыполнения, ОбщиеПараметры) Экспорт
	
	ПараметрыПакетнойОперации = ОбщиеПараметры.ПараметрыПакетнойОперации;
	
	РезультатВыполнения.Вставить("ПараметрыЭквайринговойОперации",   ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации);
	РезультатВыполнения.Вставить("ПараметрыПродажаСВыдачейНаличных", ПараметрыПакетнойОперации.ПараметрыПродажаСВыдачейНаличных);
	РезультатВыполнения.Вставить("ИдентификаторЗаписи",              ПараметрыПакетнойОперации.ИдентификаторЗаписи);
	
	ОбщиеПараметры.Удалить("ПараметрыПакетнойОперации");
	ОбщиеПараметры.Вставить("РезультатВыполненияПакетнойОперации", РезультатВыполнения);

	Если РезультатВыполнения.РезультатФискализацииЧека <> Неопределено 
		И РезультатВыполнения.РезультатФискализацииЧека.Свойство("ДополнительныеПараметры") Тогда
		РезультатФискализацииЧека = РезультатВыполнения.РезультатФискализацииЧека; // Структура
		РезультатВыполнения.Вставить("ДополнительныеПараметры", РезультатФискализацииЧека.ДополнительныеПараметры);
	КонецЕсли;
	
	ФискализацияЧековВОчереди_Завершение(РезультатВыполнения, ОбщиеПараметры);
	
КонецПроцедуры

// Начать фискализацию чеков в очереди
// 
// Параметры:
//  Параметры - см. ПараметрыФискализацииОчередиЧеков
Процедура ФискализацияЧековВОчереди_Начало(Параметры = Неопределено) Экспорт
	
	ПодключаемоеОборудование = МенеджерОборудованияКлиент.ПодключаемоеОборудование();
	ДанныеОчереди =  ПодключаемоеОборудование.ДанныеОчереди;
	
	Если ДанныеОчереди.НомерЧека < ДанныеОчереди.ЧекиВОчереди.Количество() Тогда
		
		ЧекВОчереди = ДанныеОчереди.ЧекиВОчереди[ДанныеОчереди.НомерЧека];
		ДанныеОчереди.НомерЧека = ДанныеОчереди.НомерЧека + 1;
		
		Если ЧекВОчереди.ДанныеЧека <> Неопределено Тогда
			ОбщиеПараметры = ЧекВОчереди.ДанныеЧека;
			ОбщиеПараметры.ИдентификаторФискальнойЗаписи = ЧекВОчереди.ИдентификаторЗаписи;
			СтатусДокументаИзменен = Ложь; 
			РаспределеннаяФискализацияВызовСервера.ПроверитьСтатусДокументаОснования(ОбщиеПараметры, СтатусДокументаИзменен);
			Если СтатусДокументаИзменен Тогда
				ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализирован");
			КонецЕсли;
		Иначе
			ФискализацияЧековВОчереди_Начало();
			Возврат;
		КонецЕсли;
	
		Если ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Новый") 
			Или ЧекВОчереди.СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка") Тогда
			
			Если ПустаяСтрока(ОбщиеПараметры.Кассир) Тогда
				ОбщиеПараметры.Кассир = ДанныеОчереди.Кассир;
				ОбщиеПараметры.КассирИНН = ДанныеОчереди.КассирИНН;
			КонецЕсли;
			
			ИдентификаторУстройстваККТ = ПолучитьДоступноеККТДляФискализации(ОбщиеПараметры, ДанныеОчереди.СписокУстройств);
			
			Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
				
				МодульОборудованиеЧекопечатающиеУстройстваВызовСервера = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваВызовСервера");
				МодульОборудованиеЧекопечатающиеУстройстваКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиент");
			
				Если НЕ ЗначениеЗаполнено(ИдентификаторУстройстваККТ) И ЧекВОчереди.ДанныеЧека.Свойство("АвтономнаяККТ") И Не ЧекВОчереди.ДанныеЧека.АвтономнаяККТ Тогда
					ТекстСообщения = НСтр("ru='Нет доступных ККТ для фискализации чека.'");
					СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Ошибка");
					МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, Неопределено, ТекстСообщения);
				Иначе
					СтатусЧека = ПредопределенноеЗначение("Перечисление.СтатусЧекаККТВОчереди.Фискализируется");
					МодульОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьСтатусЧекаВОчереди(ОбщиеПараметры, СтатусЧека, ИдентификаторУстройстваККТ);
					
					Если ОбщиеПараметры.Свойство("ЕстьАлкогольнаяПродукцияЕГАИС") И ОбщиеПараметры.ЕстьАлкогольнаяПродукцияЕГАИС 
						И ОбщиеПараметры.Свойство("АвтономнаяККТ") И Не ОбщиеПараметры.АвтономнаяККТ Тогда
						ОповещениеПослеОткрытииЧека = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ПослеОткрытияЧека", ЭтотОбъект, ОбщиеПараметры);
						ОповещениеПриОшибкеПечатиЧека = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ПослеОшибкиПечатиЧека", ЭтотОбъект, ОбщиеПараметры);
						ДополнительныеПараметры = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации();
						ДополнительныеПараметры.Вставить("ОповещениеПослеОткрытииЧека", ОповещениеПослеОткрытииЧека);
						ДополнительныеПараметры.Вставить("ОповещениеПриОшибкеПечатиЧека", ОповещениеПриОшибкеПечатиЧека);
					ИначеЕсли ОбщиеПараметры.Свойство("АвтономнаяККТ") И ОбщиеПараметры.АвтономнаяККТ Тогда
						Если Параметры.Свойство("Форма") Тогда
							ДополнительныеПараметры = Новый Структура;
							ДополнительныеПараметры.Вставить("Форма", Параметры.Форма);
						КонецЕсли;
					Иначе
						ДополнительныеПараметры = Неопределено;
					КонецЕсли;
					
					Если ЧекВОчереди.ТипПакетнойОперации = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ФискализацияЧекаСОплатойКартой") Тогда
						
						ПараметрыПакетнойОперации = ЧекВОчереди.ПараметрыПакетнойОперации;
						
						ПараметрыОперации = МодульОборудованиеЧекопечатающиеУстройстваКлиент.ПараметрыФискализацияЧекаСОплатойКартой();
						ПараметрыОперации.СлипЧекВТелеФискального   = ПараметрыПакетнойОперации.СлипЧекВТелеФискального;
						ПараметрыОперации.РеквизитыКартыQR          = ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.РеквизитыКартыQR;
						ПараметрыОперации.ПараметрыФискализацииЧека = ОбщиеПараметры;
						
						ПараметрыПакетнойОперации.Вставить("ИдентификаторЗаписи", ЧекВОчереди.ИдентификаторЗаписи);
						ОбщиеПараметры.Вставить("ПараметрыПакетнойОперации", ПараметрыПакетнойОперации);
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации", ЭтотОбъект, ОбщиеПараметры);
						МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаСОплатойКартой(
							ОписаниеОповещения,
							,
							ИдентификаторУстройстваККТ,
							ЧекВОчереди.ЭквайринговыйТерминал,
							ПараметрыОперации,
							ДополнительныеПараметры);
						
					ИначеЕсли ЧекВОчереди.ТипПакетнойОперации = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПокупкаСЗачислением") Тогда
						
						ПараметрыПакетнойОперации = ЧекВОчереди.ПараметрыПакетнойОперации;
						
						ПараметрыОперации = МодульОборудованиеЧекопечатающиеУстройстваКлиент.ПараметрыФискализацияЧекаСОплатойКартой();
						ПараметрыОперации.СлипЧекВТелеФискального   = ПараметрыПакетнойОперации.СлипЧекВТелеФискального;
						ПараметрыОперации.РеквизитыКартыQR          = ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.РеквизитыКартыQR;
						ПараметрыОперации.ПараметрыФискализацииЧека = ОбщиеПараметры;
						
						ПараметрыПакетнойОперации.Вставить("ИдентификаторЗаписи", ЧекВОчереди.ИдентификаторЗаписи);
						ОбщиеПараметры.Вставить("ПараметрыПакетнойОперации", ПараметрыПакетнойОперации);
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации", ЭтотОбъект, ОбщиеПараметры);
						МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПокупкаСЗачислением(
							ОписаниеОповещения,
							,
							ИдентификаторУстройстваККТ,
							ЧекВОчереди.ЭквайринговыйТерминал,
							ПараметрыОперации,
							ДополнительныеПараметры);
						
					ИначеЕсли ЧекВОчереди.ТипПакетнойОперации = ПредопределенноеЗначение("Перечисление.ТипыПакетнойОперацииВОчередиЧеков.ПродажаСВыдачейНаличных") Тогда
						
						ПараметрыПакетнойОперации = ЧекВОчереди.ПараметрыПакетнойОперации;
						
						ПараметрыОперации = МодульОборудованиеЧекопечатающиеУстройстваКлиент.ПараметрыПродажаСВыдачейНаличных();
						ПараметрыОперации.ПараметрыФискализацииЧека = ОбщиеПараметры;
						ПараметрыОперации.СлипЧекВТелеФискального   = ПараметрыПакетнойОперации.СлипЧекВТелеФискального;
						ПараметрыОперации.РеквизитыКартыQR          = ПараметрыПакетнойОперации.ПараметрыЭквайринговойОперации.РеквизитыКартыQR;
						ЗаполнитьЗначенияСвойств(ПараметрыОперации, ПараметрыПакетнойОперации.ПараметрыПродажаСВыдачейНаличных);
						
						ПараметрыПакетнойОперации.Вставить("ИдентификаторЗаписи", ЧекВОчереди.ИдентификаторЗаписи);
						ОбщиеПараметры.Вставить("ПараметрыПакетнойОперации", ПараметрыПакетнойОперации);
						
						ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_ЗавершениеПакетнойОперации", ЭтотОбъект, ОбщиеПараметры);
						МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПродажаСВыдачейНаличных(
							ОписаниеОповещения,
							,
							ИдентификаторУстройстваККТ,
							ЧекВОчереди.ЭквайринговыйТерминал,
							ПараметрыОперации,
							ДополнительныеПараметры);
						
					Иначе
						ОписаниеОповещения = Новый ОписаниеОповещения("ФискализацияЧековВОчереди_Завершение", ЭтотОбъект, ОбщиеПараметры);
						УникальныйИдентификатор = Новый УникальныйИдентификатор;
						Если ОбщиеПараметры.Свойство("СформироватьЧекКоррекции") И ОбщиеПараметры.СформироватьЧекКоррекции Тогда
							МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(ОписаниеОповещения, УникальныйИдентификатор, ИдентификаторУстройстваККТ, ОбщиеПараметры, ДополнительныеПараметры);
						Иначе
							МодульОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(ОписаниеОповещения, УникальныйИдентификатор, ИдентификаторУстройстваККТ, ОбщиеПараметры, ДополнительныеПараметры);
						КонецЕсли;
					КонецЕсли;

					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ФискализацияЧековВОчереди_Начало(Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров для выполнения фискализации очереди чеков
// 
// Возвращаемое значение:
//  Структура:
//   * Форма - ФормаКлиентскогоПриложения
//   * КассаККМ - ОпределяемыйТип.КассаБПО
Функция ПараметрыФискализацииОчередиЧеков() Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Форма", Неопределено);
	Параметры.Вставить("КассаККМ", Неопределено);
	Возврат Параметры;
	
КонецФункции

// Выполнить фискализацию чеков в очереди
//
// Параметры:
//  РазрешенаАвтоматическаяФискализация - Булево
//  Параметры - см. ПараметрыФискализацииОчередиЧеков.
Процедура ФискализацияЧековВОчереди(РазрешенаАвтоматическаяФискализация = Истина, Параметры = Неопределено) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ФискализацияЧековВОчереди";
	УИДЗамера = ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация);
#КонецЕсли
	
	ПоддерживаемыеТипы = МенеджерОборудованияКлиентСервер.ПараметрыТипыОборудования();
	ПоддерживаемыеТипы.ПринтерЧеков = Истина;
	ПоддерживаемыеТипы.ККТ = Истина;
	ПоддерживаемыеТипы.ОблачнаяККТ = Истина;
	
	СписокОтбор = МенеджерОборудованияКлиентСервер.СписокОборудованияОтбор();
	СписокОтбор.ТипыПО = ПоддерживаемыеТипы;
	СписокОтбор.РазрешенаАвтоматическаяФискализация = РазрешенаАвтоматическаяФискализация;
	СписокУстройств = МенеджерОборудованияВызовСервера.СписокОборудования(СписокОтбор);
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
		Если Параметры = Неопределено Тогда
			КассаККМ = Неопределено;
		Иначе
			КассаККМ = Параметры.КассаККМ;
		КонецЕсли;
		ЧекиВОчереди = РаспределеннаяФискализацияВызовСервера.ЧекиВОчередиНаФискализацию(КассаККМ);
		Если ЧекиВОчереди.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийКассир = МенеджерОборудованияКлиентСервер.ТекущийКассирДляФискальныхОпераций();
	
	ДанныеОчереди = Новый Структура();
	ДанныеОчереди.Вставить("Кассир"         , ТекущийКассир.Кассир);
	ДанныеОчереди.Вставить("КассирИНН"      , ТекущийКассир.КассирИНН);
	ДанныеОчереди.Вставить("ЧекиВОчереди"   , ЧекиВОчереди);
	ДанныеОчереди.Вставить("СписокУстройств", СписокУстройств);
	ДанныеОчереди.Вставить("НомерЧека"      , 0);
	ПодключаемоеОборудование = МенеджерОборудованияКлиент.ПодключаемоеОборудование();
	ПодключаемоеОборудование.ДанныеОчереди = ДанныеОчереди;
	
	ФискализацияЧековВОчереди_Начало(Параметры); 
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	ОбщегоНазначенияБПОКлиент.ЗавершитьЗамерВремениБПО(УИДЗамера);
#КонецЕсли
	
КонецПроцедуры

// Открытие формы списка операций очереди чеков
//
// Параметры:
//  ПараметрКоманды - Произвольный - источник, в котором реализована команда
//  ПараметрыВыполненияКоманды - ПараметрыВыполненияКоманды
//
Процедура ОткрытьОчередьЧеков(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
#Если Не МобильноеПриложениеКлиент Тогда 
	// Замер производительности.
	КлючеваяОперация = "ОбщийМодуль.МенеджерОборудованияКлиент.ОткрытьОчередьЧеков";
	ОбщегоНазначенияБПОКлиент.ЗамерВремениБПО(КлючеваяОперация, Неопределено, Ложь, Истина);
#КонецЕсли
	
	ПараметрыФормы = Новый Структура();
	ОткрытьФорму("РегистрСведений.ОчередьЧековККТ.ФормаСписка", 
		ПараметрыФормы, 
		ПараметрыВыполненияКоманды.Источник, 
		ПараметрыВыполненияКоманды.Уникальность, 
		ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств)
	
	ИдентификаторУстройстваККТ = Неопределено;
	СтандартнаяОбработка = Истина;
	
	МенеджерОборудованияКлиентПереопределяемый.ДоступноеККТДляФискализации(РеквизитыЧека, СписокУстройств, ИдентификаторУстройстваККТ, СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат ИдентификаторУстройстваККТ;
	КонецЕсли;
	
	Для Каждого Устройство Из СписокУстройств Цикл
		Если  Устройство.ПараметрыРегистрации.Свойство("ОрганизацияИНН") И Устройство.ПараметрыРегистрации.Свойство("КодыСистемыНалогообложения") Тогда 
			УстройствоОрганизацияИНН = Устройство.ПараметрыРегистрации.ОрганизацияИНН; 
			УстройствоКодыНалогообложения = СтрРазделить(Устройство.ПараметрыРегистрации.КодыСистемыНалогообложения, ",");
			ОрганизацияИНН = РеквизитыЧека.ОрганизацияИНН;
			
			Если ОбщегоНазначенияБПОКлиент.ИспользуетсяЧекопечатающиеУстройства() Тогда
				
				МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("ОборудованиеЧекопечатающиеУстройстваКлиентСервер");
				Если Устройство.ИспользуетсяФН36 И РеквизитыЧека.СистемаНалогообложения = ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ОСН") Тогда
					СистемаНалогообложения = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(ПредопределенноеЗначение("Перечисление.ТипыСистемНалогообложенияККТ.ЕНВД"));
				Иначе
					СистемаНалогообложения = МодульОборудованиеЧекопечатающиеУстройстваКлиентСервер.КодСистемыНалогообложенияККТ(РеквизитыЧека.СистемаНалогообложения);
				КонецЕсли;
				
			КонецЕсли;
			
			Если УстройствоКодыНалогообложения.Найти(Строка(СистемаНалогообложения)) <> Неопределено 
				И УстройствоОрганизацияИНН = ОрганизацияИНН Тогда
					ИдентификаторУстройстваККТ = Устройство.Ссылка;
					Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИдентификаторУстройстваККТ;
	
КонецФункции

#КонецОбласти
