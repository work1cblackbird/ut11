#Область СлужебныйПрограммныйИнтерфейс

Процедура ПродолжитьВыполнениеОбмена(Форма, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	РезультатОбмена = ИнтеграцияЗЕРНОВызовСервера.ПродолжитьВыполнениеОбмена(
		Неопределено, Форма.АдресРезультатаОбменаВоВременномХранилище);
	
	ОбработатьРезультатОбмена(РезультатОбмена, Форма, Контекст, ОповещениеПриЗавершении, ВыводитьОкноОжидания);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обмен

Процедура ОбработатьРезультатОбмена(РезультатОбмена, Форма, Контекст = Неопределено, ОповещениеПриЗавершении = Неопределено, ВыводитьОкноОжидания = Истина) Экспорт
	
	Если РезультатОбмена.ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
		ПараметрыОжидания.ТекстСообщения             = НСтр("ru='Выполняется обмен с ФГИС ""Зерно""'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания       = ВыводитьОкноОжидания;
		ПараметрыОжидания.ВыводитьСообщения          = Истина;
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			ПараметрыОжидания.Интервал = РезультатОбмена.Ожидать;
		КонецЕсли;
		
		ПараметрыЗавершенияДлительнойОперации = ПараметрыЗавершенияДлительнойОперации();
		ПараметрыЗавершенияДлительнойОперации.Форма                   = Форма;
		ПараметрыЗавершенияДлительнойОперации.Контекст                = Контекст;
		ПараметрыЗавершенияДлительнойОперации.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			РезультатОбмена.ДлительнаяОперация,
			Новый ОписаниеОповещения("ПослеЗавершенияДлительнойОперации", ИнтеграцияЗЕРНОСлужебныйКлиент, ПараметрыЗавершенияДлительнойОперации),
			ПараметрыОжидания);
		
	Иначе
		
		Если РезультатОбмена.Ожидать <> Неопределено Тогда
			
			Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
			
		Иначе
			
			ПараметрыЗавершенияДлительнойОперации = ПараметрыЗавершенияДлительнойОперации();
			ПараметрыЗавершенияДлительнойОперации.Форма                   = Форма;
			ПараметрыЗавершенияДлительнойОперации.Контекст                = Контекст;
			ПараметрыЗавершенияДлительнойОперации.ОповещениеПриЗавершении = ОповещениеПриЗавершении;
			
			ОбработатьРезультатОбменаСлужебный(РезультатОбмена, ПараметрыЗавершенияДлительнойОперации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
// Вызывается из: ОповещениеПослеЗавершенииОбмена
Процедура ПослеЗавершенияДлительнойОперации(Результат, ДополнительныеПараметрыДлительнойОперации) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Если ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Результат.Сообщения <> Неопределено Тогда
		Для Каждого СообщениеПользователю Из Результат.Сообщения Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатОбмена = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		ОбработатьРезультатОбменаСлужебный(РезультатОбмена, ДополнительныеПараметрыДлительнойОперации);
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
		Если ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении, Новый Массив);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования.
Процедура ОбработатьРезультатОбменаСлужебный(РезультатОбмена, ДополнительныеПараметрыДлительнойОперации)
	
	Форма                                     = ДополнительныеПараметрыДлительнойОперации.Форма;
	ОповещениеПриЗавершении                   = ДополнительныеПараметрыДлительнойОперации.ОповещениеПриЗавершении;
	АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
	
	Если РезультатОбмена.ИзвлекатьДанныеЛогаЗапросов Тогда
		ИнтеграцияЗЕРНОВызовСервера.ИзвлечьЛогЗапросовИзРезультатаОбмена(РезультатОбмена);
	КонецЕсли;
	
	Если РезультатОбмена.Ожидать <> Неопределено Тогда
		
		Форма.АдресРезультатаОбменаВоВременномХранилище = РезультатОбмена.АдресВоВременномХранилище;
		Попытка
			Форма.ПодключитьОбработчикОжидания("Подключаемый_ВыполнитьОбменОбработкаОжидания", РезультатОбмена.Ожидать, Истина);
		Исключение
			
			РасширенноеСообщениеОбОшибке = СтрШаблон(
				НСтр("ru = 'Ошибка подключения обработчика ожидания Подключаемый_ВыполнитьОбменОбработкаОжидания:
				           |Значение ожидания: %1
				           |Тип значения: %2'"),
				РезультатОбмена.Ожидать,
				Строка(ТипЗнч(РезультатОбмена.Ожидать)));
			
			ВызватьИсключение РасширенноеСообщениеОбОшибке;
			
		КонецПопытки;
		
	Иначе
		
		НаборДанныхДляПодписанияПоОрганизациям = Новый Соответствие;
		Если РезультатОбмена.ТребуетсяПодписание <> Неопределено Тогда
			
			Для Каждого КлючИЗначение Из РезультатОбмена.ТребуетсяПодписание Цикл
				
				Организация = КлючИЗначение.Ключ;
				Сообщения   = КлючИЗначение.Значение;
				
				ДополнитьНаборДляПодписанияПоСообщениям(НаборДанныхДляПодписанияПоОрганизациям, Организация, Сообщения);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НаборДанныхДляПодписанияПоОрганизациям.Количество() > 0 Тогда
			
			Для Каждого КлючИЗначение Из НаборДанныхДляПодписанияПоОрганизациям Цикл
				
				Организация              = КлючИЗначение.Ключ;
				НаборДанныхДляПодписания = КлючИЗначение.Значение;
				
				Если РезультатОбмена.СообщенияПослеПодписания <> Неопределено Тогда
					СообщенияПослеПодписания = РезультатОбмена.СообщенияПослеПодписания[Организация];
				КонецЕсли;
				
				Контекст = Новый Структура;
				Контекст.Вставить("Форма",                   Форма);
				Контекст.Вставить("Организация",             Организация);
				Контекст.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
				
				Контекст.Вставить("НаборДанныхДляПодписанияПоОрганизациям",    НаборДанныхДляПодписанияПоОрганизациям);
				Контекст.Вставить("ПодписанныеСообщенияПоОрганизациям",        Новый Соответствие);
				Контекст.Вставить("ДоступныеСертификаты",                      РезультатОбмена.ДоступныеСертификаты);
				Контекст.Вставить("АдресРезультатаОбменаВоВременномХранилище", АдресРезультатаОбменаВоВременномХранилище);
				Контекст.Вставить("СообщенияПослеПодписания",                  СообщенияПослеПодписания);
				
				ДоступныеСертификаты = РезультатОбмена.ДоступныеСертификаты.Получить(Организация);
				
				Подписать(
					НаборДанныхДляПодписания,
					Организация,
					ДоступныеСертификаты,
					Новый ОписаниеОповещения("ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи", ЭтотОбъект, Контекст),
					СообщенияПослеПодписания);
				
				Прервать;
				
			КонецЦикла;
			
		Иначе
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Форма",                   Форма);
			ДополнительныеПараметры.Вставить("Контекст",                Неопределено);
			ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении", ОповещениеПриЗавершении);
			
			ПослеЗавершенияОбмена(
				РезультатОбмена.Изменения,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьНаборДляПодписанияПоСообщениям(НаборДанныхДляПодписанияПоОрганизациям, Организация, Сообщения) Экспорт
	
	Для Каждого Сообщение Из Сообщения Цикл
		
		Для Каждого ПараметрыСообщения Из ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ПараметрыЦиклаСообщения(Сообщение.ПодписываемоеТекущееДействие) Цикл
			
			Если ПараметрыСообщения.ОперацияСообщения = ПредопределенноеЗначение("Перечисление.ДействиеССообщениемЗЕРНО.ПодтверждениеПолучения")
				И Не ЗначениеЗаполнено(Сообщение[ПараметрыСообщения.ИмяПоляСообщения]) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Новый Структура;
			Данные.Вставить("КонвертSOAP",      Сообщение[ПараметрыСообщения.ИмяПоляСообщения]);
			Данные.Вставить("Сообщение",        Сообщение);
			Данные.Вставить("ПараметрыXMLDSig", ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыXMLDSig());
			
			ДополнительныеПараметрыОповещения = Новый Структура();
			ДополнительныеПараметрыОповещения.Вставить("Сообщение",         Сообщение);
			ДополнительныеПараметрыОповещения.Вставить("ИмяПоляСообщения",  ПараметрыСообщения.ИмяПоляСообщения);
			ДополнительныеПараметрыОповещения.Вставить("ОперацияСообщения", ПараметрыСообщения.ОперацияСообщения);
			
			ПредставлениеОперации = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ОписаниеОперацииПоДействиюССообщением(
				Сообщение.Операция,
				ПараметрыСообщения.ОперацияСообщения,
				Сообщение.ДополнительноеОписание,,
				ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПредставлениеНомераСтраницы(Сообщение.НомерСтраницы));
			
			ПредставлениеДанных = Новый Структура;
			ПредставлениеДанных.Вставить("Значение",          Новый ОписаниеОповещения("ПодписатьПоказатьТекстСообщенияXML", ЭтотОбъект, ДополнительныеПараметрыОповещения));
			ПредставлениеДанных.Вставить("Представление",     ПредставлениеОперации);
			ПредставлениеДанных.Вставить("ОперацияСообщения", ПараметрыСообщения.ОперацияСообщения);
			ПредставлениеДанных.Вставить("ИмяПоляСообщения",  ПараметрыСообщения.ИмяПоляСообщения);
			
			СтруктураДанные = Новый Структура;
			СтруктураДанные.Вставить("Данные",        Данные);
			СтруктураДанные.Вставить("Представление", ПредставлениеДанных);
			
			Если НаборДанныхДляПодписанияПоОрганизациям[Организация] = Неопределено Тогда
				НаборДанныхДляПодписанияПоОрганизациям.Вставить(Организация, Новый Массив);
			КонецЕсли;
			
			НаборДанныхДляПодписанияПоОрганизациям[Организация].Добавить(СтруктураДанные);
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

//Только для внутреннего использования.
// Вызывается из: ПослеЗавершенияОбмена.
Процедура ОткрытьРезультатВыполненияОбмена(ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Изменения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.РезультатВыполненияОбменаЗЕРНО", ДополнительныеПараметры);
	
КонецПроцедуры

//Только для внутреннего использования.
// Вызывается из: ОповещениеПослеЗавершенииОбмена.
Процедура ПослеЗавершенияОбмена(Изменения, ДополнительныеПараметры) Экспорт
	
	СоответствиеДокументыОснования  = Новый Соответствие;
	СоответствиеДокументыСтатусы    = Новый Соответствие;
	СоответствиеИзмененныеДокументы = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из Изменения Цикл
		
		Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
			УникальныйИдентификатор = Неопределено;
			Если ДополнительныеПараметры.Свойство("Форма") Тогда
				УникальныйИдентификатор = ДополнительныеПараметры.Форма.УникальныйИдентификатор;
			КонецЕсли;
			
			ОбщегоНазначенияИСКлиент.СообщитьПользователюВФорму(УникальныйИдентификатор, ЭлементДанных.ТекстОшибки);
		КонецЕсли;
		
		Если ТипЗнч(ЭлементДанных.Объект)<>Тип("Массив") Тогда
			СоответствиеДокументыОснования.Вставить(ЭлементДанных.Объект, ЭлементДанных.ДокументОснование);
		ИначеЕсли ЗначениеЗаполнено(ЭлементДанных.Объект) Тогда
			
			Для Каждого Объект Из ЭлементДанных.Объект Цикл
				СоответствиеДокументыОснования.Вставить(Объект, ЭлементДанных.ДокументОснование);
				СоответствиеИзмененныеДокументы.Вставить(Объект, Истина);
				СоответствиеДокументыСтатусы.Вставить(Объект, Неопределено);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из СоответствиеДокументыОснования Цикл
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("Ссылка",        КлючИЗначение.Ключ);
		ПараметрОповещения.Вставить("Основание",     КлючИЗначение.Значение);
		ПараметрОповещения.Вставить("ОбъектИзменен", Истина);
		
		Оповестить(ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы()), ПараметрОповещения);
		
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныеПараметры.Контекст) = Тип("ТаблицаФормы") Тогда
		
		// Выполнено действие из динамического списка
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Для %1 из %2 выделенных в списке документов выполнено действие: %3'"),
			СоответствиеДокументыСтатусы.Количество(),
			ДополнительныеПараметры.Контекст.ВыделенныеСтроки.Количество(),
			ДополнительныеПараметры.ДальнейшееДействие);
			
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнено действие'"),,
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.Контекст) Тогда
		
		// Выполнено действие из формы документа
		Для Каждого КлючИЗначение Из СоответствиеДокументыСтатусы Цикл
			
			Если КлючИЗначение.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru='Для документа %1 изменен статус ФГИС ""Зерно"": %2.'"),
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Выполнено действие'"),
				ПолучитьНавигационнуюСсылку(КлючИЗначение.Ключ),
				ТекстСообщения,
				БиблиотекаКартинок.Информация32);
			
		КонецЦикла;
		
	Иначе
		
		// Выполнен обмен с ЗЕРНО
		ДополнительныеПараметрыОповещения = Новый Структура;
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыОснования", СоответствиеДокументыОснования);
		ДополнительныеПараметрыОповещения.Вставить("СоответствиеДокументыСтатусы",   СоответствиеДокументыСтатусы);
		ДополнительныеПараметрыОповещения.Вставить("Изменения",                      Изменения);
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Изменено объектов: %1'"), СоответствиеДокументыСтатусы.Количество());
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Выполнен обмен с ФГИС ""Зерно""'"),
			Новый ОписаниеОповещения("ОткрытьРезультатВыполненияОбмена", ИнтеграцияЗЕРНОСлужебныйКлиент, ДополнительныеПараметрыОповещения),
			ТекстСообщения,
			БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ОповещениеПриЗавершении <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Изменения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыЗавершенияДлительнойОперации() Экспорт
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Форма");
	ПараметрыЗавершения.Вставить("Контекст");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

Функция ПараметрыЗавершенияОбмена() Экспорт
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("Контекст");
	ПараметрыЗавершения.Вставить("ОповещениеПриЗавершении");
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

Функция ИмяПодсистемы() Экспорт
	
	Возврат "ЗЕРНО";
	
КонецФункции

Функция ПредставлениеПодсистемы() Экспорт
	
	Возврат "ФГИС ""Зерно""";
	
КонецФункции

#КонецОбласти

#Область Подпись

Процедура Подписать(НаборДанныхДляПодписания, Организация, ДоступныеСертификаты, ОповещениеПриЗавершении, СообщенияПослеПодписания = Неопределено, БезПодтверждения = Истина) Экспорт
	
	КоличествоСообщений = НаборДанныхДляПодписания.Количество();
	Если КоличествоСообщений = 1 Тогда
		ЗаголовокДанных = НСтр("ru = 'Сообщение'");
	Иначе
		ЗаголовокДанных = НСтр("ru = 'Сообщения'");
	КонецЕсли;
	
	ОписаниеДанных = Новый Структура;
	ОписаниеДанных.Вставить("Операция",            НСтр("ru = 'Обмен с ФГИС ""Зерно""'"));
	ОписаниеДанных.Вставить("ЗаголовокДанных",     ЗаголовокДанных);
	ОписаниеДанных.Вставить("СообщитьОЗавершении", Ложь);
	ОписаниеДанных.Вставить("ПоказатьКомментарий", Ложь);
	
	Если ДоступныеСертификаты.Количество() > 0 Тогда
		ОписаниеДанных.Вставить("ОтборСертификатов", ДоступныеСертификаты);
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(
				НСтр("ru = 'В информационной базе для пользователя %1 не найдено зарегистрированных сертификатов
				            |электронной подписи, связанных с организацией %2.'"),
				ПользователиКлиент.АвторизованныйПользователь(), Организация));
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	ОписаниеДанных.Вставить("БезПодтверждения",    БезПодтверждения);
	ОписаниеДанных.Вставить("ВыполнятьНаСервере",  Неопределено);
	ОписаниеДанных.Вставить("НаборДанных",         НаборДанныхДляПодписания);
	ОписаниеДанных.Вставить("ПредставлениеНабора", СтрШаблон(НСтр("ru = 'Показать (%1)'"), КоличествоСообщений));
	
	ДанныеДляОповещения = Новый Структура;
	ДанныеДляОповещения.Вставить("ОповещениеПриЗавершении",  ОповещениеПриЗавершении);
	ДанныеДляОповещения.Вставить("Организация",              Организация);
	ДанныеДляОповещения.Вставить("НаборДанныхДляПодписания", НаборДанныхДляПодписания);
	ДанныеДляОповещения.Вставить("СообщенияПослеПодписания", СообщенияПослеПодписания);
	
	ФормаИлиИдентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОповещениеПриЗавершении.ДополнительныеПараметры, "Форма", Новый УникальныйИдентификатор);
	ПодписатьЗавершение  = Новый ОписаниеОповещения("ПодписатьЗавершение", ЭтотОбъект, ДанныеДляОповещения);
	ОбщегоНазначенияИСКлиент.Подписать(ОписаниеДанных, ФормаИлиИдентификатор, ПодписатьЗавершение);
	
КонецПроцедуры

// Обработчик завершения подписи при непосредственном получении входящих документов, по ранее полученному списку
// документов к загрузке.
//
// Параметры:
//  Сообщения                - Массив - содержит передаваемые сообщения.
//  ДополнительныеПараметры  - Структура - содержит дополнительные параметры обработчика.
//
Процедура ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи(ПодписанныеСообщенияПоОрганизациям, Контекст) Экспорт
	
	Если ПодписанныеСообщенияПоОрганизациям = Неопределено Тогда
		ПараметрОповещения = Новый Структура("ОбновлятьСтатусВФормахДокументов", Истина);
		Оповестить(
			ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИмяПодсистемы()),
			ПараметрОповещения);
		Возврат;
	КонецЕсли;
	
	Контекст.ПодписанныеСообщенияПоОрганизациям.Вставить(Контекст.Организация, ПодписанныеСообщенияПоОрганизациям);
	Контекст.НаборДанныхДляПодписанияПоОрганизациям.Удалить(Контекст.Организация);
	
	Если Контекст.НаборДанныхДляПодписанияПоОрганизациям.Количество() > 0 Тогда
		
		Для Каждого КлючИЗначение Из Контекст.НаборДанныхДляПодписанияПоОрганизациям Цикл
			
			Организация              = КлючИЗначение.Ключ;
			НаборДанныхДляПодписания = КлючИЗначение.Значение;
			
			НовыйКонтекст = Новый Структура;
			НовыйКонтекст.Вставить("Форма",                                  Контекст.Форма);
			НовыйКонтекст.Вставить("Организация",                            Организация);
			НовыйКонтекст.Вставить("ОповещениеПриЗавершении",                Контекст.ОповещениеПриЗавершении);
			
			НовыйКонтекст.Вставить("НаборДанныхДляПодписанияПоОрганизациям",    Контекст.НаборДанныхДляПодписанияПоОрганизациям);
			НовыйКонтекст.Вставить("ПодписанныеСообщенияПоОрганизациям",        Контекст.ПодписанныеСообщенияПоОрганизациям);
			НовыйКонтекст.Вставить("ДоступныеСертификаты",                      Контекст.ДоступныеСертификаты);
			НовыйКонтекст.Вставить("АдресРезультатаОбменаВоВременномХранилище", Контекст.АдресРезультатаОбменаВоВременномХранилище);
			НовыйКонтекст.Вставить("СообщенияПослеПодписания",                  Контекст.СообщенияПослеПодписания);
			
			ДоступныеСертификаты = Контекст.ДоступныеСертификаты.Получить(Организация);
			
			Подписать(
				НаборДанныхДляПодписания,
				Организация,
				ДоступныеСертификаты,
				Новый ОписаниеОповещения(
					"ОбработатьСообщенияНаПолучениеВходящихДокументов_ПриЗавершенииОперацииПодписи",
					ЭтотОбъект,
					НовыйКонтекст),
				Контекст.СообщенияПослеПодписания);
			
			Прервать;
			
		КонецЦикла;
		
	Иначе
		
		РезультатОбмена = ИнтеграцияЗЕРНОВызовСервера.ПродолжитьВыполнениеОбмена(
			Контекст.ПодписанныеСообщенияПоОрганизациям,
			Контекст.АдресРезультатаОбменаВоВременномХранилище);
		
		ОбработатьРезультатОбмена(
			РезультатОбмена,
			Контекст.Форма, Контекст, Контекст.ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения подписи.
//
// Параметры:
//  Результат - Структура - содержит свойство "Успех", оно установлено в Истина, если подпись была выполнена.
//  ДополнительныеПараметры - Структура - содержит дополнительные параметры обработчика.
//
Процедура ПодписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Успех Тогда
		
		Сообщения              = Новый Массив;
		ДобавленныеСообщения   = Новый Соответствие();
		ОрганизацияСертификата = Неопределено;
		
		Для Каждого ТекущийЭлементНабораДанных Из Результат.НаборДанных Цикл
			
			СвойстваПодписи = ТекущийЭлементНабораДанных.СвойстваПодписи;
			Если ЭтоАдресВременногоХранилища(СвойстваПодписи) Тогда
				СвойстваПодписи = ПолучитьИзВременногоХранилища(СвойстваПодписи);
			КонецЕсли;
			
			Сообщение                                                            = ТекущийЭлементНабораДанных.Данные.Сообщение;
			Сообщение[ТекущийЭлементНабораДанных.Представление.ИмяПоляСообщения] = СвойстваПодписи.Подпись;
			Сообщение.Сертификат                                                 = Результат.ВыбранныйСертификат.Ссылка;
			
			Если Не ЗначениеЗаполнено(Сообщение.Организация) Тогда
				Если ОрганизацияСертификата = Неопределено Тогда
					ОрганизацияСертификата = ИнтеграцияИСВызовСервера.ЗначениеРеквизитаОбъекта(Результат.ВыбранныйСертификат.Ссылка, "Организация");
				КонецЕсли;
				Сообщение.Организация = ОрганизацияСертификата;
			КонецЕсли;
			Если ДобавленныеСообщения[Сообщение] = Неопределено Тогда
				Сообщения.Добавить(Сообщение);
				ДобавленныеСообщения.Вставить(Сообщение, Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДополнительныеПараметры.СообщенияПослеПодписания <> Неопределено Тогда
			Для Каждого Сообщение Из ДополнительныеПараметры.СообщенияПослеПодписания Цикл
				Сообщения.Добавить(Сообщение);
			КонецЦикла;
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Сообщения);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПриЗавершении, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения подписи, который отображает форму передаваемого сообщения в формате XML/.
//
// Параметры:
//  Результат	  - Булево    - не анализируется в данной процедуре.
//  ДополнительныеПараметры - Структура - см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
Процедура ПодписатьПоказатьТекстСообщенияXML(Результат, ДополнительныеПараметры) Экспорт
	
	Сообщение      = ДополнительныеПараметры.Сообщение;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Сообщение",              Сообщение);
	ПараметрыФормы.Вставить("ИмяПоляСообщения",       ДополнительныеПараметры.ИмяПоляСообщения);
	ПараметрыФормы.Вставить("ОперацияСообщения",      ДополнительныеПараметры.ОперацияСообщения);
	ПараметрыФормы.Вставить("ДополнительноеОписание", Сообщение.ДополнительноеОписание);
	ПараметрыФормы.Вставить("НомерВерсии",            Сообщение.Версия);
	ПараметрыФормы.Вставить("НомерСтраницы",          Сообщение.НомерСтраницы);
	
	ОткрытьФорму("Справочник.ЗЕРНОПрисоединенныеФайлы.Форма.ФормаПодписываемоеСообщение", ПараметрыФормы);
	
КонецПроцедуры

// Периодическое получение данных обработать данные для подписания.
// 
// Параметры:
//  Результат - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.РезультатПериодическогоПолученияДанных
//  ПараметрПриложения - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыПриложенияОтветственныеЗаПодписаниеСообщений
Процедура ПериодическоеПолучениеДанныхОбработатьДанныеДляПодписания(Результат, ПараметрПриложения) Экспорт
	
	НаборДанныхДляПодписанияПоОрганизациям = Новый Соответствие();
	ИсходныеДатыМодификацииПоСообщениям    = Новый Соответствие();
	ДоступныеСертификатыПоОрганизациям     = Новый Соответствие();
	
	Если Результат.ДанныеАвтоподписания <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из Результат.ДанныеАвтоподписания Цикл
			
			Организация = КлючИЗначение.Ключ;
			
			СертификатАвтоподписания = Неопределено;
			
			Для Каждого Сертификат Из Результат.ДоступныеСертификаты[Организация] Цикл
				
				Если ОбщегоНазначенияИСКлиент.ПарольСертификатаУстановлен(Сертификат) Тогда
					
					СертификатАвтоподписания = Сертификат;
					СертификатыПоОрганизации = ДоступныеСертификатыПоОрганизациям[Организация];
					Если СертификатыПоОрганизации = Неопределено Тогда
						СертификатыПоОрганизации = Новый Массив();
						ДоступныеСертификатыПоОрганизациям[Организация] = СертификатыПоОрганизации;
					КонецЕсли;
					ДоступныеСертификатыПоОрганизациям[Организация].Добавить(СертификатАвтоподписания);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СертификатАвтоподписания = Неопределено Тогда
				
				Для Каждого ДанныеСообщения Из КлючИЗначение.Значение Цикл
					
					ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ДобавитьМинимальнуюДатуСообщенияПоОранизации(
						Результат.ОрганизацииИмеющиеСообщения,
						ДанныеСообщения)
					
				КонецЦикла;
				
				Продолжить;
				
			КонецЕсли;
			
			СообщенияДляПодписания = Новый Массив();
			Для Каждого ДанныеСообщения Из КлючИЗначение.Значение Цикл
				
				СообщенияДляПодписания.Добавить(ДанныеСообщения.РеквизитыИсходящегоСообщения);
				ИсходныеДатыМодификацииПоСообщениям.Вставить(ДанныеСообщения.Сообщение, ДанныеСообщения.ДатаМодификацииУниверсальная);
				
			КонецЦикла;
			
			Если СообщенияДляПодписания.Количество()Тогда
				ДополнитьНаборДляПодписанияПоСообщениям(
					НаборДанныхДляПодписанияПоОрганизациям,
					Организация,
					СообщенияДляПодписания);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из НаборДанныхДляПодписанияПоОрганизациям Цикл
		
		Организация              = КлючИЗначение.Ключ;
		НаборДанныхДляПодписания = КлючИЗначение.Значение;
		
		Контекст = Новый Структура;
		Контекст.Вставить("ИсходныеДатыМодификацииПоСообщениям",    ИсходныеДатыМодификацииПоСообщениям);
		Контекст.Вставить("РезультатПериодическогоПолученияДанных", Результат);
		Контекст.Вставить("Организация",                            Организация);
		Контекст.Вставить("НаборДанныхДляПодписания",               НаборДанныхДляПодписания);
		Контекст.Вставить("ОткрытьФормуСпискаСообщений",            ЗначениеЗаполнено(Результат.ОрганизацииИмеющиеСообщения));
		
		ОповещениеПослеПодписания = Новый ОписаниеОповещения(
			"ПодписаниеПериодическогоПолучениеДанныхЗавершение",
			ЭтотОбъект,
			Контекст);
		
		ДоступныеСертификаты = ДоступныеСертификатыПоОрганизациям[Организация];
		
		Подписать(
			НаборДанныхДляПодписания,
			Организация,
			ДоступныеСертификаты,
			ОповещениеПослеПодписания);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Результат.ОрганизацииИмеющиеСообщения)
		И НаборДанныхДляПодписанияПоОрганизациям.Количество() = 0 Тогда
		
		ОткрытьФормуСпискаСообщенийДляПодписания(Результат);
		Оповестить("ЗЕРНО.ОбновитьКоличествоСообщенийКПодписанию");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуСпискаСообщенийДляПодписания(РезультатПериодическогоПолученияДанных)
	
	ИменаПараметров    = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ИменаПараметровПериодическогоПолученияДанных();
	ПараметрПриложения = ПараметрыПриложения[ИменаПараметров.ИмяПараметраПриложения]; // - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыПриложенияОтветственныеЗаПодписаниеСообщений
	//@skip-check use-non-recommended-method
	ТекущаяДата        = ТекущаяДата();
	
	Если ЗначениеЗаполнено(ПараметрПриложения.ВремяСледующейПроверки)
		И ПараметрПриложения.ВремяСледующейПроверки > ТекущаяДата
		Или Не ЗначениеЗаполнено(РезультатПериодическогоПолученияДанных.ОрганизацииИмеющиеСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Организации = Новый Массив();
	
	Для Каждого КлючИЗначениеОрганизации Из РезультатПериодическогоПолученияДанных.ОрганизацииИмеющиеСообщения Цикл
		
		Организация          = КлючИЗначениеОрганизации.Ключ;
		ВремяПоПодразделеням = КлючИЗначениеОрганизации.Значение;
		
		Для Каждого КлючИЗначение Из ВремяПоПодразделеням Цикл
			
			Подразделение            = КлючИЗначение.Ключ;
			МинимальнаяДатаСообщения = КлючИЗначение.Значение;
			
			КоллекцияИнтервалов = Новый Массив();
			КоллекцияИнтервалов.Добавить(ПараметрПриложения.НастройкиОтветственного.ВсеОрганизацииВсеПодразделения);
			КоллекцияИнтервалов.Добавить(ПараметрПриложения.НастройкиОтветственного.ОрганизацииПоВсемПодразделениям[Организация]);
			КоллекцияИнтервалов.Добавить(ПараметрПриложения.НастройкиОтветственного.ПодразделенияПоВсемОрганизациям[Подразделение]);
			
			Подразделения = ПараметрПриложения.НастройкиОтветственного.ОрганизацииИПодразделения[Организация];
			Если Подразделения <> Неопределено Тогда
				КоллекцияИнтервалов.Добавить(Подразделения[Подразделение]);
			КонецЕсли;
			
			Для Каждого ВремяВСекундах Из КоллекцияИнтервалов Цикл
				Если ДобавитьОрганициюПоВремениПодписанияСообщенияОтветственным(
					Организации, Организация, МинимальнаяДатаСообщения, ВремяВСекундах) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Организации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрПриложения.ОткрытаФормаСообщений Тогда
		
		Оповестить(ИменаПараметров.ПоступилиНовыеСообщенияДляПодписания, Организации);
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("РежимНапоминания",        Истина);
		ПараметрыОткрытия.Вставить("СтруктураБыстрогоОтбора", Новый Структура());
		ПараметрыОткрытия.СтруктураБыстрогоОтбора.Вставить("Организации", Новый СписокЗначений());
		ПараметрыОткрытия.СтруктураБыстрогоОтбора.Организации.ЗагрузитьЗначения(Организации);
		
		ОткрытьФорму(
			"РегистрСведений.ОчередьСообщенийЗЕРНО.Форма.СообщенияКПодписаниюЗЕРНО",
			ПараметрыОткрытия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодписаниеПериодическогоПолучениеДанныхЗавершение(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Успех = ИнтеграцияЗЕРНОВызовСервера.ЗаписатьРезультаПодписиВОчередьСообщений(
		Результат, Контекст.ИсходныеДатыМодификацииПоСообщениям);
	
	ОткрытьФормуСпискаСообщений = Контекст.ОткрытьФормуСпискаСообщений;
	ИменаПараметров             = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ИменаПараметровПериодическогоПолученияДанных();
	ПараметрПриложения          = ПараметрыПриложения[ИменаПараметров.ИмяПараметраПриложения]; // - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыПриложенияОтветственныеЗаПодписаниеСообщений
		
	Если Не Успех Тогда
		
		Для Каждого ДанныеСообщения Из Контекст.НаборДанныхДляПодписания Цикл
			ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ДобавитьМинимальнуюДатуСообщенияПоОранизации(
				Контекст.РезультатПериодическогоПолученияДанных.ОрганизацииИмеющиеСообщения,
				ДанныеСообщения);
		КонецЦикла;
		
		ОткрытьФормуСпискаСообщений = Истина;
		
	КонецЕсли;
	
	Если ОткрытьФормуСпискаСообщений Тогда
		
		ОткрытьФормуСпискаСообщенийДляПодписания(Контекст.РезультатПериодическогоПолученияДанных);
		Оповестить("ЗЕРНО.ОбновитьКоличествоСообщенийКПодписанию");
		
	Иначе
		
		Если ПараметрПриложения.ОткрытаФормаСообщений Тогда
			Оповестить(ИменаПараметров.ВыполненоАвтоподписание);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьОрганициюПоВремениПодписанияСообщенияОтветственным(КоллекцияОрганизаций, Организация, МинимальнаяДатаСообщения, ВремяВСекундах)
	
	ВозвращаемоеЗначение = Ложь;
	Если ВремяВСекундах <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(МинимальнаяДатаСообщения)
			Или (ТекущаяДата() - МестноеВремя(МинимальнаяДатаСообщения)) >= ВремяВСекундах  Тогда
			КоллекцияОрганизаций.Добавить(Организация);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ПронумероватьТаблицу(Форма, ИмяТЧ) Экспорт
	
	НомерСтроки = 1;
	Для каждого Строка Из Форма[ИмяТЧ] Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура АннулироватьСДИЗ(СДИЗ, Форма, ОписаниеОповещения = Неопределено) Экспорт
	
	ВходящиеДанные = Новый Массив();
		
	ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
	ПараметрыОбработкиСообщений.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию");
	ПараметрыОбработкиСообщений.Операция           = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.АннулированиеСДИЗ");
	ПараметрыОбработкиСообщений.Ссылка             = СДИЗ;
	
	ВходящиеДанные.Добавить(ПараметрыОбработкиСообщений);
		
	РезультатОбмена = ИнтеграцияЗЕРНОВызовСервера.ПодготовитьКПередаче(ВходящиеДанные, Форма.УникальныйИдентификатор);
	
	ОбработатьРезультатОбмена(РезультатОбмена, Форма,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

// См. СтандартныеПодсистемыКлиент.ПриПолученииСерверногоОповещения
Процедура ПриПолученииСерверногоОповещения(ИмяОповещения, Результат) Экспорт
	
	Если ИмяОповещения =  ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ИмяСерверногоОповещенияВыполненОбменДанныим() Тогда
	
		СоответствиеДокументыОснования  = Новый Соответствие;
		СоответствиеДокументыСтатусы    = Новый Соответствие;
		СоответствиеИзмененныеДокументы = Новый Соответствие;
		
		Для Каждого ЭлементДанных Из Результат.Изменения Цикл
			
			Если ЗначениеЗаполнено(ЭлементДанных.ТекстОшибки) Тогда
				ОбщегоНазначенияИСКлиент.СообщитьПользователюВФорму(ЭлементДанных.ИдентификаторФормы, ЭлементДанных.ТекстОшибки);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементДанных.Объект) Тогда
				
				Для Каждого Объект Из ЭлементДанных.Объект Цикл
					СоответствиеДокументыОснования.Вставить(Объект, ЭлементДанных.ДокументОснование);
					СоответствиеИзмененныеДокументы.Вставить(Объект, Истина);
					СоответствиеДокументыСтатусы.Вставить(Объект, Неопределено);
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СоответствиеДокументыОснования Цикл
			
			ПараметрОповещения = Новый Структура;
			ПараметрОповещения.Вставить("Ссылка",        КлючИЗначение.Ключ);
			ПараметрОповещения.Вставить("Основание",     КлючИЗначение.Значение);
			ПараметрОповещения.Вставить("ОбъектИзменен", Истина);
			
			Оповестить(ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы()), ПараметрОповещения);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОткрытияФормыУказанияТранспортныхСредств() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Перевозчик",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ПеревозчикИБ",          Неопределено);
	ВозвращаемоеЗначение.Вставить("Подразделение",         Неопределено);
	ВозвращаемоеЗначение.Вставить("КэшПеревозчикиИБ",      Новый Массив());
	ВозвращаемоеЗначение.Вставить("ТранспортныеСредства",  Новый Массив());
	ВозвращаемоеЗначение.Вставить("МестаПерегрузки",       Новый Массив());
	ВозвращаемоеЗначение.Вставить("РежимОткрытия",         "Маршрут");
	ВозвращаемоеЗначение.Вставить("ТолькоПросмотр",        Ложь);
	ВозвращаемоеЗначение.Вставить("РежимОтметки",          Ложь);
	ВозвращаемоеЗначение.Вставить("ПеревозчикВШапке",      Истина);
	ВозвращаемоеЗначение.Вставить("СДИЗ",                  Неопределено);
	ВозвращаемоеЗначение.Вставить("ИспользоватьТранспортныеСредства", Ложь);
	ВозвращаемоеЗначение.Вставить("ПодразделенияИспользуются",        Ложь);
	ВозвращаемоеЗначение.Вставить("ПеревозчикПоУмолчанию",            Неопределено);
	ВозвращаемоеЗначение.Вставить("ПодразделениеПоУмолчанию",         Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОткрытьФормуУказанияТранспортныхСредств(ПараметрыОткрытияФормы, ВладелецФормы, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОткрытьФорму(
		"ОбщаяФорма.ПунктыМаршрутаЗЕРНО",
		ПараметрыОткрытияФормы,
		ВладелецФормы,,,,
		ОповещениеПриЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьФормуСопоставленнойНоменклатурыПоПартии(Партия, ВладелецФормы) Экспорт
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Отбор", Новый Структура());
	ПараметрыОткрытияФормы.Отбор.Вставить("Партия", Партия);
	
	ОткрытьФорму(
		"РегистрСведений.СоответствиеПартийЗЕРНО.ФормаСписка",
		ПараметрыОткрытияФормы,
		ВладелецФормы,
		Партия);
	
КонецПроцедуры

Функция ПараметрыОткрытияФормыЗапросаСправочника() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Идентификатор",  Неопределено);
	ВозвращаемоеЗначение.Вставить("СсылкаНаОбъект", Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",   ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно"));
	ВозвращаемоеЗначение.Вставить("Организация",    Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидЗапроса",     Неопределено);
	ВозвращаемоеЗначение.Вставить("ТипЗапроса",     "СДИЗ");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОткрытьФормуЗапросаСправочника(ПараметрыОткрытияФормы, ВладелецФормы, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОткрытьФорму(
		"ОбщаяФорма.ЗапросСправочниковЗЕРНО",
		ПараметрыОткрытияФормы,
		ВладелецФормы,,,,
		ОповещениеПриЗавершении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти