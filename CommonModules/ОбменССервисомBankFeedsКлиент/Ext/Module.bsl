////////////////////////////////////////////////////////////////////////////////
// ОбменССервисомBankFeedsКлиент: список функций на клиенте
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область СинхронизацияBankFeeds                  

// Вызывается при синхронизации BankFeeds.
// Автоматически загружаются транзакции и выгружаются платежные поручения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  НачалоПериода - Дата
//  КонецПериода - Дата
//
Процедура СинхронизироватьBankFeeds(Форма, НачалоПериода,КонецПериода) Экспорт    
	
	Если ЗначениеЗаполнено(Форма.БанковскийСчетОтбор) Тогда 
		
		БанковскийСчетПодключенКСервису = ПроверитьПодключениеКСервису(Форма.БанковскийСчетОтбор);
		
		Если Не БанковскийСчетПодключенКСервису Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					 НСтр("ru = 'Банковский счет %1 не подключен к'") + " BankFeeds", Форма.БанковскийСчетОтбор);
			
			ПоказатьПредупреждение(,ТекстСообщения);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("АдресБанковскихСчетов", "");
	ПараметрыЗагрузки.Вставить("ДатаНачала", НачалоПериода);
	ПараметрыЗагрузки.Вставить("ДатаОкончания", КонецПериода);
	ПараметрыЗагрузки.Вставить("СоздаватьКонтрагентов", Истина);
	ПараметрыЗагрузки.Вставить("ПроводитьДокументы", Истина);     
	ПараметрыЗагрузки.Вставить("БанковскийСчет", Форма.БанковскийСчетОтбор);     
	ПараметрыЗагрузки.Вставить("ЗагрузкаВыполняетсяПриСинхронизации", Истина);

	ЗагрузитьТранзакции(ПараметрыЗагрузки, Форма);	
	
КонецПроцедуры

#КонецОбласти

#Область ПрочитатьБанковскиеСчетаВСервисе

// Вызывается при команде Прочитать счета организации в сервисе
//
// Параметры:
//  ПараметрыЗаполнения - Структура - параметры заполнения
//  Форма - ФормаКлиентскогоПриложения
//
Процедура ПрочитатьСчетаОрганизацииВСервисе(ПараметрыЗаполнения, Форма) Экспорт

	ДлительнаяОперация = ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияПрочитатьСчетаПоОрганизации(
		Форма.УникальныйИдентификатор, ПараметрыЗаполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Прочитать банковские счета по организации'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Счета прочитаны'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = "BankFeeds";
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Организация", ПараметрыЗаполнения.Организация);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеЧтенияБанковскихСчетовПоОрганизацииВСервисе",
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Вызывается при команде Прочитать счета организации в сервисе
//
// Параметры:
//  Результат - Структура - параметры заполнения
//  ДополнительныеПараметры - Структура - дополнительные параметры
//
Процедура ЗавершениеЧтенияБанковскихСчетовПоОрганизацииВСервисе(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеДобавленияСчетовИзBankFeeds", ЭтотОбъект, ДополнительныеПараметры);
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка добавления нового счета'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		
		ОткрытьФорму("ОбщаяФорма.ТаблицаСчетовBankFeeds",
			Новый Структура("БанковскийСчет, РезультатОтветаОтСервиса", Форма.БанковскийСчет, Результат),
			Форма,,,,ОбработчикОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;
		
КонецПроцедуры

// Вызывается после добавления счетов в программу из Сервиса BankFeeds 
//
// Параметры:
//  Результат - Структура - параметры заполнения
//  Параметры - Структура - параметры 
//
Процедура ПослеДобавленияСчетовИзBankFeeds(Результат, Параметры) Экспорт

	Форма = Параметры.Форма;

	Форма.Закрыть(Результат);
	
КонецПроцедуры

#КонецОбласти 

#Область СостояниеПлатежногоДокумента

// Вызывается при нажатии на кнопку в Платежном документа 
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Форма - ФормаКлиентскогоПриложения
//  СтандартнаяОбработка - Булево - 
//
Процедура ОбработатьНажатиеНаСостояниеДокумента(ДокументСсылка, Форма, СтандартнаяОбработка) Экспорт
	
	Если Форма.СостояниеBankFeeds <> "Проведено" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуКлиентБанка(ДокументСсылка, Форма);

	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#Область ПроверкаПодключения

// Вызывается проверке подключения к сервису 
//
// Параметры:
//  ПараметрыЗаполнения - ДокументСсылка - Ссылка на документ
//  Форма - ФормаКлиентскогоПриложения - форма
//
Процедура ПроверитьПодключениеСервиса(ПараметрыЗаполнения, Форма) Экспорт

	ДлительнаяОперация = ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияНаПроверкуПодключения(
		Форма.УникальныйИдентификатор, ПараметрыЗаполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Ложь;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Проверка настроек подключения'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Проверка подключения успешна'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = "BankFeeds";
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеПроверкиПодключенияBankFeeds", 
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

	
КонецПроцедуры

// Вызывается при завершении авторизации пользователя на форме сервиса
// 
// Параметры:
//   Результат - Структура - параметры результата
//   ДополнительныеПараметры - Структура - дополнительные параметры
//
Процедура ЗавершениеПроверкиПодключенияBankFeeds(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	Иначе 
		РезультатОтветаОтСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если РезультатОтветаОтСервиса.СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ОтветПолучен Тогда
			
			ТекстСообщения = НСтр("ru = 'Соединение устанавливается успешно!'");   
			
			ПоказатьОповещениеПользователя(ТекстСообщения,,,,СтатусОповещенияПользователя.Важное);
			
		Иначе 
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Connection check failed'"));
			
			Для Каждого ТекущаяОшибка Из РезультатОтветаОтСервиса.МассивОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка: %1'"), ТекущаяОшибка);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КонецЦикла;	
			
		КонецЕсли;	 
		
	КонецЕсли;	
	
КонецПроцедуры
	
#КонецОбласти 

#Область ПодключениеКСервису

// Запускает процедуру подключения к сервису фоном
// 
// Параметры:
//   ПараметрыЗаполнения - Структура - параметры заполнения
//  Форма - ФормаКлиентскогоПриложения - форма
//
Процедура ПодключитьСервисНаКлиенте(ПараметрыЗаполнения, Форма) Экспорт

	ДлительнаяОперация = ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияНаАвторизациюПользователя(
		Форма.УникальныйИдентификатор, ПараметрыЗаполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Установка соединения с'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Подключение к авторизации'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Текст = "BankFeeds";
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеАвторизацииПользователяНаСервису", 
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Вызывается при завершении авторизации пользователя на форме сервиса
// 
// Параметры:
//   Результат - Структура - параметры результата
//   ДополнительныеПараметры - Структура - дополнительные параметры
//
Процедура ЗавершениеАвторизацииПользователяНаСервису(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	Иначе 
		РезультатОтветаОтСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
		Форма = ДополнительныеПараметры.Форма;
		
		Если РезультатОтветаОтСервиса.СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ОтветПолучен Тогда
			
			Форма.ЗаполнитьДаннымиФормуАвторизацииНаСервисе(
										РезультатОтветаОтСервиса.СсылкаНаАвторизацию, ПараметрыЗаполнения);	
			
		ИначеЕсли РезультатОтветаОтСервиса.СтатусОтвета = 
				ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ЗапросНеНуженДанныеГотовы Тогда 
			
			Форма.ЗакрытиеФормыАвторизацииВSaltEdge(КодВозвратаДиалога.ОК, ДополнительныеПараметры);
			
		Иначе 
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Авторизация банка не выполнена'"));
			
			Для Каждого ТекущаяОшибка Из РезультатОтветаОтСервиса.МассивОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка: %1'"), ТекущаяОшибка);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КонецЦикла;	
			
		КонецЕсли;	 
		
		Оповестить("ОбновитьФормуСпискаПодключенияКБанкамBankFeeds",, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбновлениеСтатусаСоединения

// Проверяет статус соединения и согласия на сервисе
// 
// Параметры:
//   ПараметрыЗаполнения - Структура - параметры заполнения
//  Форма - ФормаКлиентскогоПриложения - форма
//
Процедура ПроверитьСтатусыСоединенияИСогласияCервисаНаКлиенте(ПараметрыЗаполнения, Форма) Экспорт
	
	ДлительнаяОперация = ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияНаПроверкуСтатусовСоединенияИСогласия(
		Форма.УникальныйИдентификатор, ПараметрыЗаполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеПроверкиСтатусовСоединенияИСогласияСервиса", 
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры	

// Вызывается при завершении проверки статуса соединения и согласия на форме 
// 
// Параметры:
//   Результат - Структура - параметры результата
//   ДополнительныеПараметры - Структура - дополнительные параметры
//
Процедура ЗавершениеПроверкиСтатусовСоединенияИСогласияСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	Иначе 
		РезультатОтветаОтСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Форма = ДополнительныеПараметры.Форма;
		
		Если РезультатОтветаОтСервиса.СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ОтветПолучен Тогда
			
			Форма.ИнформацияОПодключении = РезультатОтветаОтСервиса.ИнформацияОПодключении;
			Форма.ВыполняетсяПроверкаСтатусов = Ложь; 
			Форма.СоедниенениеИСогласиеАктивно =  
				РезультатОтветаОтСервиса.СоединениеАктивно И РезультатОтветаОтСервиса.СоединениеАктивно;
			Форма.УправлениеФормой();
			
		Иначе 
			
			Форма.ИнформацияОПодключении = РезультатОтветаОтСервиса.ИнформацияОПодключении;
			Форма.ВыполняетсяПроверкаСтатусов = Ложь; 
			Форма.СоедниенениеИСогласиеАктивно =  
				РезультатОтветаОтСервиса.СоединениеАктивно И РезультатОтветаОтСервиса.СоединениеАктивно;
			Форма.УправлениеФормой();
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Проверка статуса соединения и согласия не выполнена'"));
			
			Для Каждого ТекущаяОшибка Из РезультатОтветаОтСервиса.МассивОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка: %1'"), ТекущаяОшибка);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КонецЦикла;	
			
		КонецЕсли;	 
			
	КонецЕсли;	
			
КонецПроцедуры			

#КонецОбласти 

#Область ОбновлениеСоединения

// Запускает процедуру обновления соединения на сервисе фоном
// 
// Параметры:
//   ПараметрыЗаполнения - Структура - параметры заполнения
//  Форма - ФормаКлиентскогоПриложения - форма
//
Процедура ОбновитьСоединениеСервисаНаКлиенте(ПараметрыЗаполнения, Форма) Экспорт
	
	ДлительнаяОперация = ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияНаОбновлениеСоединения(
		Форма.УникальныйИдентификатор, ПараметрыЗаполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Обновление соединения'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Обновление соединения'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Текст = "BankFeeds";
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОбновленияСоединенияСервиса", 
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры	

// Вызывается при завершении обновления соединения на форме сервиса
// 
// Параметры:
//   Результат - Структура - параметры результата
//   ДополнительныеПараметры - Структура - дополнительные параметры
//
Процедура ЗавершениеОбновленияСоединенияСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	Иначе 
		РезультатОтветаОтСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗаполнения;
		
		Если РезультатОтветаОтСервиса.СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ОтветПолучен Тогда
			
			ОбработчикОповещения = Новый ОписаниеОповещения("ПослеОбновленияСоединенияBankFeeds", 
																				ЭтотОбъект, ДополнительныеПараметры);
		
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Организация", ПараметрыЗаполнения.Организация);
			ПараметрыФормы.Вставить("Банк", ПараметрыЗаполнения.Банк);
			ПараметрыФормы.Вставить("ЭтоОбновлениеСоединения", Истина);
			ПараметрыФормы.Вставить("СсылкаНаАвторизацию", РезультатОтветаОтСервиса.СсылкаНаОбновлениеСоединения);
			ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
			ОткрытьФорму("РегистрСведений.ПодключенияКБанкамBankFeeds.Форма.ФормаПодключения", ПараметрыФормы, , , , ,
				ОбработчикОповещения);
			
		Иначе 
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Авторизация банка не выполнена'"));
			
			Для Каждого ТекущаяОшибка Из РезультатОтветаОтСервиса.МассивОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка: %1'"), ТекущаяОшибка);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КонецЦикла;	
			
		КонецЕсли;	 
			
	КонецЕсли;	
			
КонецПроцедуры			

// Вызывается при завершении проверки соединения на форме сервиса
// 
// Параметры:
//   Результат - Структура - параметры результата
//   ДополнительныеПараметры - Структура - дополнительные параметры
//
Процедура ПослеОбновленияСоединенияBankFeeds(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат <> Неопределено 
		И Результат = "Соединение подключено" Тогда
			Форма.ЗапуститьПроверкуСтатусаСоединенияИСогласия();
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти 

#Область ОтзывСогласия

Процедура ОтозватьСогласиеПоСоединениюСервисаНаКлиенте(ПараметрыЗаполнения, Форма) Экспорт
	
	ДлительнаяОперация = ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияНаОтзывСогласия(
		Форма.УникальныйИдентификатор, ПараметрыЗаполнения);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Отзыв согласия'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Отзыв согласия'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Текст = "BankFeeds";
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеОтзываСогласияСервиса", 
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры	

Процедура ЗавершениеОтзываСогласияСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	Иначе 
		РезультатОтветаОтСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Форма = ДополнительныеПараметры.Форма;
		
		Если РезультатОтветаОтСервиса.СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ОтветПолучен Тогда
			
			Если РезультатОтветаОтСервиса.СтатусСогласия = "revoked" Тогда

				Форма.ЗапуститьПроверкуСтатусаСоединенияИСогласия();
				
			Иначе
				
				ПоказатьПредупреждение(, НСтр("ru = 'Соединение не закрыто'"));     
			КонецЕсли;
			
		Иначе 
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Отзыв согласия не выполнен'"));
			
			Для Каждого ТекущаяОшибка Из РезультатОтветаОтСервиса.МассивОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка: %1'"), ТекущаяОшибка);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КонецЦикла;	
			
		КонецЕсли;	 
			
	КонецЕсли;	
			
КонецПроцедуры			

#КонецОбласти 

 #Область ЗагрузкаТранзакций

// Запускает процедуру загрузки транзакций из сервиса
// 
// Параметры:
//   ПараметрыЗагрузки - Структура - параметры заполнения
//  Форма - ФормаКлиентскогоПриложения - форма
//
Процедура ЗагрузитьТранзакции(ПараметрыЗагрузки, Форма) Экспорт

	ДлительнаяОперация = ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияНаЗагрузкуТранзакций(
		Форма.УникальныйИдентификатор, ПараметрыЗагрузки);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ФормаВладелец = Форма;
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Загрузка транзакций из'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Транзакции загружены'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = "BankFeeds";
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыЗагрузки", ПараметрыЗагрузки);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеЗагрузкиТранзакцийИзСервиса", 
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Вызывается при завершении загрузки транзакции на форме сервиса
// 
// Параметры:
//   Результат - Структура - параметры результата
//   ДополнительныеПараметры - Структура - дополнительные параметры
//
Процедура ЗавершениеЗагрузкиТранзакцийИзСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;               
	
	ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыЗагрузки;
	Форма = ДополнительныеПараметры.Форма;
	ТаблицаРезультатов = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ЕстьПолученныеОтветы = Ложь;
	
	Если ТаблицаРезультатов = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого ТекущаяСтрокаРезульта Из ТаблицаРезультатов Цикл
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
		ИначеЕсли ТекущаяСтрокаРезульта.СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ОтветНеПолучен Тогда
		
			Для Каждого ТекущаяОшибка Из ТекущаяСтрокаРезульта.МассивОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По счету %1 ошибка: %2. Загрузка транзакций не выполнена'")
						, ТекущаяСтрокаРезульта.ПараметрыЗаполнения.БанковскийСчет, ТекущаяОшибка); 
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
			КонецЦикла;	
		
		ИначеЕсли ТекущаяСтрокаРезульта.СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ОтветПолучен Тогда
			
			ЕстьПолученныеОтветы = Истина;
		
			Для Каждого ТекущаяОшибка Из ТекущаяСтрокаРезульта.МассивОшибок Цикл
			
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По счету %1 ошибка: %2. Загрузка транзакций не выполнена'")
						, ТекущаяСтрокаРезульта.ПараметрыЗаполнения.БанковскийСчет, ТекущаяОшибка); 
				
				ЕстьПолученныеОтветы = Ложь;
			КонецЦикла;	
		
		КонецЕсли;	                                       
	
	КонецЦикла;
	
	Если ДополнительныеПараметры.ПараметрыЗагрузки.ЗагрузкаВыполняетсяПриСинхронизации Тогда

		Если ТекущаяСтрокаРезульта <> Неопределено 
			И ТекущаяСтрокаРезульта.Свойство("КоличествоТранзакций") Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загружено транзакций: %1'"), ТекущаяСтрокаРезульта.КоличествоТранзакций);
			ПоказатьОповещениеПользователя(ТекстСообщения,,,,СтатусОповещенияПользователя.Важное);
			
		КонецЕсли;	

		ПараметрыВыгрузки = Новый Структура(); 
		ПараметрыВыгрузки.Вставить("ВыгрузкаВыполняетсяПриСинхронизации", Истина);
		ПараметрыВыгрузки.Вставить("АдресДокументыКВыгрузке", "");
		ПараметрыВыгрузки.Вставить("АдресБанковскиеСчета", "");
		ПараметрыВыгрузки.Вставить("БанковскийСчет", ПараметрыЗаполнения.БанковскийСчет);
		
		ВыгрузитьПлатежныеДокументы(ПараметрыВыгрузки, Форма);	                      
		
	ИначеЕсли ЕстьПолученныеОтветы Тогда

		//@skip-check dynamic-feature-access-translation-ambiguity
		Форма.Элементы.ЗагруженныеДокументы.Обновить();
				
		Если ТекущаяСтрокаРезульта <> Неопределено 
			И ТекущаяСтрокаРезульта.Свойство("КоличествоТранзакций") Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загружено транзакций: %1'"), ТекущаяСтрокаРезульта.КоличествоТранзакций);
			ПоказатьОповещениеПользователя(ТекстСообщения,,,,СтатусОповещенияПользователя.Важное);
			
		Иначе
					
		ТекстСообщения = НСтр("ru = 'Транзакции загружены'");
		ПоказатьОповещениеПользователя(ТекстСообщения,,НСтр("ru = 'Загрузка транзакций'"),,СтатусОповещенияПользователя.Важное);
		КонецЕсли;	
				
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаПлатежныхДокументов

// Запускает процедуру выгрузки платежных документов в сервис
// 
// Параметры:
//   ПараметрыВыгрузки - Структура - параметры заполнения
//   Форма - ФормаКлиентскогоПриложения - форма
//
Процедура ВыгрузитьПлатежныеДокументы(ПараметрыВыгрузки, Форма) Экспорт
	
	ДлительнаяОперация = 
		ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияНаВыгрузкуПлатежныхДокументов(
																	Форма.УникальныйИдентификатор, ПараметрыВыгрузки);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выгрузка платежных документов'") + " BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Платежные документы выгружены'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = "BankFeeds";
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("ПараметрыВыгрузки", ПараметрыВыгрузки);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеВыгрузкиПлатежныхДокументовВСервис", 
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

// Преобразует строку таблицы значений в структуру
// 
// Параметры:
//   СтрокаТаблицыЗначений - СтрокаТаблицыЗначений - строка таблицы значений
//   
// Возвращаемое значение:
// 		Структура - набор значений:
// 		* КолонкаИмя - Строка
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Структура = Новый Структура;
	Для каждого Колонка Из СтрокаТаблицыЗначений.Владелец().Колонки Цикл
		Структура.Вставить(Колонка.Имя, СтрокаТаблицыЗначений[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

// Вызывается при завершении выгрузки платежных документов на форме сервиса
// 
// Параметры:
//   Результат - Структура - параметры результата
//   ДополнительныеПараметры - Структура - дополнительные параметры
//
Процедура ЗавершениеВыгрузкиПлатежныхДокументовВСервис(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов();
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	Иначе 
		РезультатОтветаОтСервиса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		ПараметрыЗаполнения = ДополнительныеПараметры.ПараметрыВыгрузки;
		Форма = ДополнительныеПараметры.Форма;
		
		ЕстьОшибки = Ложь;
		
		Для Каждого ТекущаяСтрокаРезульта Из РезультатОтветаОтСервиса Цикл
			
			Если Результат.Статус = "Ошибка" Тогда
				
				ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
				
			ИначеЕсли ТекущаяСтрокаРезульта.СтатусОтвета = ОбменССервисомBankFeedsВызовСервера.СтатусыОтветов().ОтветНеПолучен Тогда
				
				Для Каждого ТекущаяОшибка Из ТекущаяСтрокаРезульта.МассивОшибок Цикл
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По счету %1 ошибка: %2. Выгрузка платежных документов прервана'")
					, ТекущаяСтрокаРезульта.ПараметрыЗаполнения.БанковскийСчет, ТекущаяОшибка); 
					
					ЕстьОшибки = Истина;
					
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
					
				КонецЦикла;	
			
			КонецЕсли;	                                       
			
		КонецЦикла;
		
		Если РезультатОтветаОтСервиса.Количество() > 0
			И НЕ ЕстьОшибки Тогда

			ЕстьОшибки = Ложь;
			Для Каждого ТекущийРезультат Из РезультатОтветаОтСервиса Цикл
				
				Если ТекущийРезультат.СтатусОтвета = СтатусОтвета.ОтветНеПолучен Тогда
				
					Для Каждого ТекущаяОшибка Из ТекущийРезультат.МассивОшибок Цикл
			
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Ошибка: %1. Выгрузка платежных документов не выполнена'"), ТекущаяОшибка);
						ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
						ЕстьОшибки = Истина;
					КонецЦикла;	
					
				КонецЕсли;	
			
			КонецЦикла;
			
			Если НЕ ЕстьОшибки Тогда
			
				ПараметрыОткрытияФормы = Новый Структура("МассивСсылкокНаПодтверждениеПлатежей", РезультатОтветаОтСервиса);

				ПараметрыОткрытияФормы.Вставить("АдресБанковскиеСчета", ДополнительныеПараметры.ПараметрыВыгрузки.АдресБанковскиеСчета);
				ПараметрыОткрытияФормы.Вставить("АдресДокументыКВыгрузке", ДополнительныеПараметры.ПараметрыВыгрузки.АдресДокументыКВыгрузке);
				ПараметрыОткрытияФормы.Вставить("ВыгрузкаВыполняетсяПриСинхронизации", 
				ДополнительныеПараметры.ПараметрыВыгрузки.ВыгрузкаВыполняетсяПриСинхронизации);  
				Если ДополнительныеПараметры.ПараметрыВыгрузки.Свойство("БанковскийСчет") Тогда	
					ПараметрыОткрытияФормы.Вставить("БанковскийСчет", 
						ДополнительныеПараметры.ПараметрыВыгрузки.БанковскийСчет);
				КонецЕсли;		
			
				ДополнительныеПараметры.Вставить("МассивПлатежныхДокументов", РезультатОтветаОтСервиса);

				ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ЗакрытиеФормыПодтверждениеПлатежаВSaltEdge", 
					Форма, ДополнительныеПараметры);
			
				ОткрытьФорму("Справочник.ИнтеграцияBankFeeds.Форма.ФормаПодтверждениеПлатежаВСервисе", 
					ПараметрыОткрытияФормы,,,,, ОповещениеОЗакрытииФормы);
			Иначе		
				ОбменССервисомBankFeedsКлиент.ПроверитьСтатусПлатежейПослеОтправки(Форма);	
				
			КонецЕсли;		
			
		Иначе
				
				ОбменССервисомBankFeedsКлиент.ПроверитьСтатусПлатежейПослеОтправки(Форма);	
				Если ПараметрыЗаполнения.ВыгрузкаВыполняетсяПриСинхронизации Тогда
					Оповестить("ОбновитьЖурналДокументовБезналичныеПлатежи",, ЭтотОбъект);
				КонецЕсли;	
				
		КонецЕсли;	 
		
		Если Не ПараметрыЗаполнения.ВыгрузкаВыполняетсяПриСинхронизации Тогда
		
			Оповестить("ОбновитьФормуСпискаПодключенияКБанкамBankFeeds",, ЭтотОбъект);
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСтатусаПлатежныхДокументовПослеОтправкиВСервис

// Запускаются действия по проверке статуса платежей в сервисе
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма
//   ПередаваемыеПараметры - Структура - параметры заполнения
//
Процедура ПроверитьСтатусПлатежейПослеОтправки(Форма, ПередаваемыеПараметры = Неопределено) Экспорт
	
	ДлительнаяОперация = 
			ОбменССервисомBankFeedsВызовСервера.ЗаполнитьПараметрыФоновогоЗаданияНаПроверкуСтатусаПлатежныхДокументов(
												Форма.УникальныйИдентификатор);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Проверка статуса платежных документов'") + "BankFeeds";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Статусы платежных документов проверены'");
	ПараметрыОжидания.ОповещениеПользователя.Текст = "BankFeeds";
	
	ДополнительныеПараметры = Новый Структура(); 
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("МассивДокументов", Новый Массив()); 
	
	Если ЗначениеЗаполнено(ПередаваемыеПараметры) 
		И ПередаваемыеПараметры.ПараметрыВыгрузки.ВыгрузкаВыполняетсяПриСинхронизации 
		И ПередаваемыеПараметры.Свойство("МассивПлатежныхДокументов") Тогда
			ДополнительныеПараметры.МассивДокументов = ПередаваемыеПараметры.МассивПлатежныхДокументов;
	КонецЕсли;	
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеПроверкиСтатусаПлатежныхДокументовВСервисе", 
		ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры	

// Процедура запускается после проверки статуса оплаты в сервисе
// 
// Параметры:
//   Результат - Структура - результат запуска 
//   ДополнительныеПараметры - Структура - 
//
Процедура ЗавершениеПроверкиСтатусаПлатежныхДокументовВСервисе(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат ;
	КонецЕсли;	
	
	Форма = ДополнительныеПараметры.Форма; 
	
	Оповестить("ОбновитьФормуСпискаВыгрузкаПлатежныхДокументовBankFeeds",, Форма);
	
	// Если имя формы ФормаПодтверждениеПлатежаВСервисе тогда запустим обработчик после проверки статуса платежа
	Если Форма.ИмяФормы = "Справочник.ИнтеграцияBankFeeds.Форма.ФормаПодтверждениеПлатежаВСервисе" Тогда
		
		Форма.ОбновитьСписокПлатежей();
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.МассивДокументов.Количество() > 0 Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отправлено по %1: %2'"), "BankFeeds", 
					ОбменССервисомBankFeedsВызовСервера.КоличествоДокументовОтправленныхВБанк(ДополнительныеПараметры.МассивДокументов));
			ПоказатьОповещениеПользователя(ТекстСообщения,,,,СтатусОповещенияПользователя.Важное);
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура отключает подключение счета к BankFeeds
//
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма
//
Процедура ОтключитьПодключениеКСервису(Форма) Экспорт 
	
	Объект = Форма.Объект;
	
	Если Форма.ИспользоватьОбменСБанкамиBankFeeds 
		И ЗначениеЗаполнено(Объект.ИдентификаторСчетаBankFeeds) Тогда
		
		Объект.ИдентификаторСчетаBankFeeds = "";
		
		Оповестить("ОбновитьСтраницуBankFeeds",, ЭтотОбъект);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Выполняет проверку подключения к сервису
// 
// Параметры:
// 	БанковскийСчет - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет
// 
// Возвращаемое значение:
// Булево - Истина, если банковский счет подключен к сервису
//
Функция ПроверитьПодключениеКСервису(БанковскийСчет)
	
   Возврат ОбменССервисомBankFeedsВызовСервера.ПроверитьПодключениеКСервису(БанковскийСчет);
	
КонецФункции	

// Вызывается при открытии формы выгрузки платежного документа 
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ 
//  Форма - ФормаКлиентскогоПриложения
//
Процедура ОткрытьФормуКлиентБанка(ДокументСсылка, Форма)

	ОткрытьФорму("Обработка.КлиентБанкBankFeeds.Форма.ВыгрузкаПлатежныхДокументов",
		Новый Структура("БанковскийСчет, ПлатежныйДокумент", Форма.Объект.БанковскийСчет, ДокументСсылка),);
	
КонецПроцедуры	

#КонецОбласти
