////////////////////////////////////////////////////////////////////////////////
// Подсистема "Коммерческие предложения".
// ОбщийМодуль.КоммерческиеПредложенияСлужебныйПовтИсп.
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция ЗапросКоммерческихПредложенийОбработчикиСобытийПереопределяемые(Знач Документ) Экспорт
	
	ОбработчикиСобытийПереопределяемые =
		КоммерческиеПредложенияСлужебный.ЗапросКоммерческихПредложенийОбработчикиСобытийПереопределяемые();
	
	ПолноеИмя = Документ.Метаданные().ПолноеИмя();
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	МенеджерОбъекта.ОбработчикиСобытийКоммерческихПредложений(ОбработчикиСобытийПереопределяемые);
	
	Возврат ОбработчикиСобытийПереопределяемые;
	
КонецФункции

Функция ПредставлениеИсходящихВидовЭлектронныхДокументов() Экспорт
	
	ПредставлениеВидов = Новый Соответствие;
	
	ВстроенЗапросКоммерческихПредложенийПоставщиков = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.ЗапросКоммерческихПредложенийПоставщиков");
	
	ВстроеноКоммерческоеПредложениеКлиенту = ОбщегоНазначения.ПодсистемаСуществует(
		"ЭлектронноеВзаимодействие.КоммерческиеПредложения.КоммерческиеПредложенияДокументы.КоммерческоеПредложениеКлиенту");
	
	ПредставлениеДокументов = Новый Структура;
	ПредставлениеДокументов.Вставить("ЗапросКоммерческихПредложений", "");
	ПредставлениеДокументов.Вставить("КоммерческоеПредложение",       "");
	
	Если Не ВстроенЗапросКоммерческихПредложенийПоставщиков
		Или Не ВстроеноКоммерческоеПредложениеКлиенту Тогда
		КоммерческиеПредложенияПереопределяемый.ОпределитьПредставлениеИсходящихЭлектронныхДокументов1СЭДО(
			ПредставлениеДокументов);
	КонецЕсли;
	
	Если ВстроенЗапросКоммерческихПредложенийПоставщиков Тогда
		ПредставлениеВидов.Вставить(Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений,
			НСтр("ru = 'Запрос коммерческих предложений у поставщиков'"));
	Иначе
		ПредставлениеВидов.Вставить(Перечисления.ТипыДокументовЭДО.ЗапросКоммерческихПредложений,
			ПредставлениеДокументов.ЗапросКоммерческихПредложений);
	КонецЕсли;
	
	Если ВстроеноКоммерческоеПредложениеКлиенту Тогда
		ПредставлениеВидов.Вставить(Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение,
			НСтр("ru = 'Коммерческое предложение клиенту'"));
	Иначе
		ПредставлениеВидов.Вставить(Перечисления.ТипыДокументовЭДО.КоммерческоеПредложение,
			ПредставлениеДокументов.КоммерческоеПредложение);
	КонецЕсли;
	
	Возврат ПредставлениеВидов;
	
КонецФункции

Функция ТипыДанных() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Простой",   Новый ОписаниеТипов("Строка, Булево, Число, Дата, Null"));
	Результат.Вставить("Булево",    Новый ОписаниеТипов("Булево, Null"));
	Результат.Вставить("Число",     Новый ОписаниеТипов("Число, Null"));
	Результат.Вставить("Дата",      Новый ОписаниеТипов("Дата, Null"));
	Результат.Вставить("Строка",    Новый ОписаниеТипов("Строка, Null"));
	Результат.Вставить("Структура", Новый ОписаниеТипов("Структура, Null"));
	Результат.Вставить("Массив",    Новый ОписаниеТипов("Массив, Null"));
	Результат.Вставить("Таблица",   Новый ОписаниеТипов("ТаблицаЗначений, Null"));
	Результат.Вставить("Цена",      Новый ОписаниеТипов("Число, Null", 
		Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный)));
		
	Результат.Вставить("Ссылка",    Неопределено);
	Результат.Вставить("Номенклатура",   Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип);
	Результат.Вставить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатурыБЭД.Тип);
	Результат.Вставить("Упаковка",       Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип);
	Результат.Вставить("ПрайсЛист",      Метаданные.ОпределяемыеТипы.ТорговоеПредложение.Тип);
	Результат.Вставить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Результат.Вставить("ОбъектСопоставления", Метаданные.ОпределяемыеТипы.ВидНоменклатурыРаботаСНоменклатурой.Тип);
	Иначе 
		Результат.Вставить("ОбъектСопоставления", Неопределено);
	КонецЕсли;
	
	ИмяСправочникаЕдиницыИзмерения = ОбщегоНазначенияБЭД.ИмяПрикладногоСправочника("ЕдиницыИзмерения");
	Результат.Вставить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка." + ИмяСправочникаЕдиницыИзмерения));
	
	Возврат Результат;
	
КонецФункции

// Получение валюты по коду.
//
// Параметры:
//  Код - Число - международный код валюты.
// 
// Возвращаемое значение:
//  СправочникСсылка, Строка - ссылка на элемент справочника Валюты или строковое представление сервиса.
//
Функция ПолучитьВалюту(Код) Экспорт
	
	Результат = Неопределено;
	
	// Получение представление единицы измерения в информационной базе.
	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение ставки НДС по коду.
//
// Параметры:
//  СтавкаСтрокой	 - Строка - наименование ставки НДС (БезНДС, НДС10, НДС18).
// 
// Возвращаемое значение:
//  СправочникСсылка, ПеречислениеСсылка - значение ставки НДС.
//
Функция ПолучитьСтавкуНДС(СтавкаСтрокой) Экспорт
	
	НовоеЗначение = Неопределено;
	ТорговыеПредложенияПереопределяемый.ПолучитьЗначениеСтавкиНДС(СтавкаСтрокой, НовоеЗначение);
	
	Возврат НовоеЗначение;
	
КонецФункции

#КонецОбласти