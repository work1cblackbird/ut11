#Область СлужебныйПрограммныйИнтерфейс

// Определяет, доступен ли раздел виджета пользователю по правам
// 
// Параметры:
// 	РазделВиджета - ПеречислениеСсылка.РазделыВиджетовEDI - раздел виджета, для которого требуется определить доступность.
// Возвращаемое значение:
// 	Булево - признак доступности раздела виджета.
//
Функция РазделВиджетаДоступенПоПравам(РазделВиджета) Экспорт
	
	Доступен = Ложь;
	
	СервисEDIПереопределяемый.ПриОпределенииДоступностиРазделаВиджетаПоПравам(РазделВиджета, Доступен);
	
	Возврат Доступен;
	
КонецФункции

// Возвращает массив виджетов по умолчанию.
// 
// Возвращаемое значение:
// 	Массив - массив массив виджетов по умолчанию.
//
Функция ВиджетыПоУмолчанию() Экспорт
	
	МассивВиджетовПоУмолчанию      = Новый Массив;
	ВиджетыНеВключаемыеПоУмолчанию = ВиджетыНеВключаемыеПоУмолчанию();
	
	Для Инд =1 По Перечисления.ДоступныеВиджетыТекущихДелEDI.Количество() Цикл
		
		ЗначениеПеречисления = Перечисления.ДоступныеВиджетыТекущихДелEDI.Получить(Инд - 1);
		Если ВиджетыНеВключаемыеПоУмолчанию.Найти(ЗначениеПеречисления) = Неопределено
			И ТекущиеДелаEDI.ВиджетДоступенПоПравам(ЗначениеПеречисления) Тогда
			МассивВиджетовПоУмолчанию.Добавить(ЗначениеПеречисления);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВиджетовПоУмолчанию;
	
КонецФункции

// Возвращает массив разделов виджетов по умолчанию.
// 
// Возвращаемое значение:
// 	Массив - массив массив разделов по умолчанию.
//
Функция РазделыПоУмолчанию(Виджет) Экспорт
	
	Возврат ТекущиеДелаEDIКлиентСервер.РазделыВиджета(Виджет);
	
КонецФункции

// Возвращает массив доступных по правам групп виджетов.
// 
// Возвращаемое значение:
// 	Массив - массив доступных по правам групп виджетов.
//
Функция МассивДоступныхГруппВиджетов() Экспорт
	
	МассивГрупп = Новый Массив;
	МассивГрупп.Добавить(Перечисления.ГруппыВиджетовEDI.Закупки);
	МассивГрупп.Добавить(Перечисления.ГруппыВиджетовEDI.Продажи);
	МассивГрупп.Добавить(Перечисления.ГруппыВиджетовEDI.Прочее);
	
	Возврат МассивГрупп;
	
КонецФункции

// Возвращает массив виджетов группы.
// 
// Возвращаемое значение:
// 	Массив - массив виджетов группы.
//
Функция МассивВиджетовГруппы(ГруппаВиджетов) Экспорт
	
	Если ГруппаВиджетов = Перечисления.ГруппыВиджетовEDI.Закупки Тогда
		Возврат МассивВиджетовЗакупки();
	ИначеЕсли ГруппаВиджетов = Перечисления.ГруппыВиджетовEDI.Продажи Тогда
		Возврат МассивВиджетовПродажи();
	ИначеЕсли ГруппаВиджетов = Перечисления.ГруппыВиджетовEDI.Прочее Тогда
		Возврат МассивВиджетовПрочее();
	КонецЕсли;
	
	Возврат Новый Массив;
	
КонецФункции

// Возвращает соответствие групп виджетов группам формы текущих дел.
// 
// Возвращаемое значение:
// 	Соответствие - соответствие групп виджетов группам формы текущих дел..
//
Функция СоответствиеГруппВиджетовГруппамФормы() Экспорт
	
	ВозвращаемыеДанные = Новый Соответствие;
	ВозвращаемыеДанные.Вставить(Перечисления.ГруппыВиджетовEDI.Закупки, "ГруппаЛеваяКолонка");
	ВозвращаемыеДанные.Вставить(Перечисления.ГруппыВиджетовEDI.Продажи, "ГруппаЦентральнаяКолонка");
	ВозвращаемыеДанные.Вставить(Перечисления.ГруппыВиджетовEDI.Прочее,  "ГруппаПраваяКолонка");
	
	Возврат ВозвращаемыеДанные
	
КонецФункции

// Подготавливает данные запроса по разделу виджета
// 
// Параметры:
// 	ПараметрыФормирования - Структура - 
// 	Раздел                - ПеречислениеСсылка.РазделыВиджетовEDI - раздел виджета.
//
Процедура ПодготовитьДанныеЗапросаПоРазделу(ПараметрыФормирования, Раздел) Экспорт
	
	Если Раздел = Перечисления.РазделыВиджетовEDI.АрхивЗакупки Тогда
		ПодготовитьДанныеЗапросаПоРазделуАрхивЗакупки(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ВРаботеЗакупки Тогда
		ПодготовитьДанныеЗапросаПоРазделуВРаботеЗакупки(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ОтклоненияПриВыполненииЗакупки Тогда
		ПодготовитьДанныеЗапросаПоРазделуОтклоненияПриВыполненииЗакупки(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ПоследниеСобытияЗакупки Тогда
		ПодготовитьДанныеЗапросаПоРазделуПоследниеСобытияЗакупки(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ЗаказыПоставщикуДоступныеДляОтправки Тогда
		ПодготовитьДанныеЗапросаПоРазделуЗаказыПоставщикуДоступныеДляОтправки(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.АрхивПродажи Тогда
		ПодготовитьДанныеЗапросаПоРазделуАрхивПродажи(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ВРаботеПродажи Тогда
		ПодготовитьДанныеЗапросаПоРазделуВРаботеПродажи(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ОтклоненияПриВыполненииПродажи Тогда
		ПодготовитьДанныеЗапросаПоРазделуОтклоненияПриВыполненииПродажи(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ПоследниеСобытияПродажи Тогда
		ПодготовитьДанныеЗапросаПоРазделуПоследниеСобытияПродажи(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийПросрочено Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийПросрочено(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийСегодня Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийСегодня(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийЗавтра Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийЗавтра(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийТриДня Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийТриДня(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийНеделя Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийНеделя(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокПросрочено Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокПросрочено(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокСегодня Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокСегодня(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокЗавтра Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокЗавтра(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокТриДня Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокТриДня(ПараметрыФормирования, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокНеделя Тогда
		ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокНеделя(ПараметрыФормирования, Раздел);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные разделов виджета по результатам выполненного пакета запросов
// 
// Параметры:
// 	ПараметрыФормирования - Структура    - параметры формирования данных
// 	ДанныеДляВиджетов     - Соответствие - полученные в результате выполнение запросов данные.
// 	Раздел                - ПеречислениеСсылка.РазделыВиджетовEDI - раздел, для которого подготавливаются данные.
//
Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделу(ПараметрыФормирования, ДанныеДляВиджетов, Раздел) Экспорт
	
	Если Раздел = Перечисления.РазделыВиджетовEDI.АрхивЗакупки Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуАрхивЗакупки(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ВРаботеЗакупки Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуВРаботеЗакупки(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ОтклоненияПриВыполненииЗакупки Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуОтклоненияПриВыполненииЗакупки(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ПоследниеСобытияЗакупки Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуПоследниеСобытия(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ЗаказыПоставщикуДоступныеДляОтправки Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуЗаказыПоставщикуДоступныеДляОтправки(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.АрхивПродажи Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуАрхивПродажи(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ВРаботеПродажи Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуВРаботеПродажи(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ОтклоненияПриВыполненииПродажи Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуОтклоненияПриВыполненииПродажи(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.ПоследниеСобытияПродажи Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуПоследниеСобытия(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийПросрочено Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийПросрочено(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийСегодня Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийСегодня(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийЗавтра Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийЗавтра(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийТриДня Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийТриДня(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийНеделя Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийНеделя(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокПросрочено Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокПросрочено(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокСегодня Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокСегодня(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокЗавтра Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокЗавтра(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокТриДня Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокТриДня(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокНеделя Тогда
		ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокНеделя(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные по доступности 
// 
// Параметры:
// 	ДанныеДляВиджетов - Соответствие       - данные для виджетов.
// 	Раздел            - ПеречислениеСсылка - раздел для которого определяется право доступа
//
Процедура ПодготовитьДанныеПравоДоступаПоРазделу(ДанныеДляВиджетов, Раздел) Экспорт
	
	Если Раздел = Перечисления.РазделыВиджетовEDI.Контрагенты Тогда
		
		ПодготовитьДанныеРазделаПоПравуДоступа(ДанныеДляВиджетов, Раздел, Метаданные.ОпределяемыеТипы.ОрганизацияEDI, "Чтение");
		
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.Номенклатура Тогда
		
		ПодготовитьДанныеРазделаПоПравуДоступа(ДанныеДляВиджетов, Раздел, Метаданные.ОпределяемыеТипы.НоменклатураEDI, "Чтение");
		
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.НоменклатураКонтрагентов Тогда
		
		ПодготовитьДанныеРазделаПоПравуДоступа(ДанныеДляВиджетов, Раздел, Метаданные.ОпределяемыеТипы.НоменклатураКонтрагентаEDI, "Чтение");
		
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.Настройки Тогда
		
		ПодготовитьДанныеРазделаПоПравуДоступа(ДанныеДляВиджетов, Раздел, Метаданные.РегистрыСведений.НастройкиПоставщикаEDI, "Чтение");
		
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.СоздатьЗаказПоставщику Тогда
		
		ПодготовитьДанныеРазделаПоПравуДоступа(ДанныеДляВиджетов, Раздел, Перечисления.ТипыДокументовEDI.ЗаказПоставщику, "Добавление");
		
	ИначеЕсли Раздел = Перечисления.РазделыВиджетовEDI.НайтиТорговоеПредложение Тогда
		
	КонецЕсли;
		
КонецПроцедуры

// Выводит информацию по виджету в форму текущих дел
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения                        - форма текущих дел.
// 	Виджет - ПеречислениеСсылка.ДоступныеВиджетыТекущихДелEDI - виджет, по которому выводится информация.
// 	ПараметрыВыводаВиджетов - Структура                       - параметры вывода виджетов.
//
Процедура ВывестиИнформациюПоВиджету(Форма, Виджет, ПараметрыВыводаВиджетов) Экспорт
	
	Если Виджет = Перечисления.ДоступныеВиджетыТекущихДелEDI.Закупки Тогда
		
		ВывестиИнформациюПоВиджетуЗакупки(Форма, ПараметрыВыводаВиджетов, Виджет);
		
	ИначеЕсли Виджет = Перечисления.ДоступныеВиджетыТекущихДелEDI.Купить Тогда
		
		ВывестиИнформациюПоВиджетуКупить(Форма, ПараметрыВыводаВиджетов, Виджет);
		
	ИначеЕсли Виджет = Перечисления.ДоступныеВиджетыТекущихДелEDI.Продажи Тогда
		
		ВывестиИнформациюПоВиджетуПродажи(Форма, ПараметрыВыводаВиджетов, Виджет);
		
	ИначеЕсли Виджет = Перечисления.ДоступныеВиджетыТекущихДелEDI.КонтрольПоступлений Тогда
		
		ВывестиИнформациюПоВиджетуКонтрольПоступлений(Форма, ПараметрыВыводаВиджетов, Виджет);
		
	ИначеЕсли Виджет = Перечисления.ДоступныеВиджетыТекущихДелEDI.КонтрольОтгрузок Тогда
		
		ВывестиИнформациюПоВиджетуКонтрольОтгрузок(Форма, ПараметрыВыводаВиджетов, Виджет);
		
	ИначеЕсли Виджет = Перечисления.ДоступныеВиджетыТекущихДелEDI.НастройкиСправочники Тогда
		
		ВывестиИнформациюПоВиджетуНастройкиСправочники(Форма, ПараметрыВыводаВиджетов, Виджет);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив идентификаторов документов закупки.
// 
// Возвращаемое значение:
// 	Массив - массив идентификаторов документов закупки.
//
Функция ИдентификаторыДокументовЗакупки() Экспорт
	
	Возврат ДокументыEDI.МассивИдентификаторовДокументовЗакупки();
	
КонецФункции

// Возвращает массив идентификаторов документов продажи.
// 
// Возвращаемое значение:
// 	Массив - массив идентификаторов документов продажи.
//
Функция ИдентификаторыДокументовПродажи() Экспорт
	
	Возврат ДокументыEDI.МассивИдентификаторовДокументовПродажи();
	
КонецФункции

// Возвращает текущего менеджера
// 
// Возвращаемое значение:
// 	СправочникСсылка.ВнешниеПользователи, СправочникСсылка.Пользователи - текущий менеджер
//
Функция ТекущийМенеджер() Экспорт
	
	Возврат Пользователи.АвторизованныйПользователь();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыводИнформацииВВиджеты

Процедура ВывестиИнформациюПоВиджетуКупить(Форма, ПараметрыВыводаВиджетов, Виджет)
	
	ЕстьРазделыДляОтображения = Ложь;
	Элементы                  = Форма.Элементы;
	
	Для Каждого РазделВиджета Из ТекущиеДелаEDIКлиентСервер.РазделыВиджета(Виджет) Цикл
		
		Если ПараметрыВыводаВиджетов.ИспользуемыеРазделы.НайтиПоЗначению(РазделВиджета) = Неопределено Тогда
			ДанныеРаздела = Неопределено;
		Иначе
			ДанныеРаздела = ПараметрыВыводаВиджетов.ДанныеДляВиджетов.Получить(РазделВиджета);
		КонецЕсли;
		
		ВыводитьРаздел = ДанныеРаздела <> Неопределено 
		                 И ДанныеРаздела.ЕстьПраво;
		
		Если ВыводитьРаздел Тогда
			ЕстьРазделыДляОтображения = Истина;
		КонецЕсли;
		
		Если РазделВиджета = Перечисления.РазделыВиджетовEDI.СоздатьЗаказПоставщику Тогда
			Элементы.ДекорацияКупитьСоздатьЗаказПоставщику.Видимость = ВыводитьРаздел;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.НайтиТорговоеПредложение Тогда
			Элементы.ДекорацияКупитьНайтиТорговоеПредложение.Видимость = ВыводитьРаздел;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРазделыДляОтображения Тогда
		Элементы.СтраницыКупить.ТекущаяСтраница = Элементы.СтраницаКупитьЕстьРазделыДляОтображения;
	Иначе
		Элементы.СтраницыКупить.ТекущаяСтраница = Элементы.СтраницаКупитьНетРазделовДляОтображения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИнформациюПоВиджетуЗакупки(Форма, ПараметрыВыводаВиджетов, Виджет)
	
	ЕстьРазделыДляОтображения = Ложь;
	Элементы = Форма.Элементы;
	
	Для Каждого РазделВиджета Из ТекущиеДелаEDIКлиентСервер.РазделыВиджета(Виджет) Цикл
		
		Если ПараметрыВыводаВиджетов.ИспользуемыеРазделы.НайтиПоЗначению(РазделВиджета) = Неопределено Тогда
			ДанныеРаздела = Неопределено;
		Иначе
			ДанныеРаздела = ПараметрыВыводаВиджетов.ДанныеДляВиджетов.Получить(РазделВиджета);
		КонецЕсли;
		
		Если РазделВиджета = Перечисления.РазделыВиджетовEDI.ПоследниеСобытияЗакупки Тогда
			
			ВывестиИнформациюПоРазделуПоследниеСобытияЗакупки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
			
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.АрхивЗакупки Тогда
			
			ВывестиИнформациюПоРазделуАрхивЗакупки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
			
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.ВРаботеЗакупки Тогда
			
			ВывестиИнформациюПоРазделуВРаботеЗакупки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
			
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.ОтклоненияПриВыполненииЗакупки Тогда
			
			ВывестиИнформациюПоРазделуОтклоненияПриВыполненииЗакупки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
			
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.ЗаказыПоставщикуДоступныеДляОтправки Тогда
			
			ВывестиИнформациюПоРазделуЗаказыПоставщикуДоступныеДляОтправки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРазделыДляОтображения Тогда
		Элементы.СтраницыЗакупки.ТекущаяСтраница = Элементы.СтраницаЗакупкиЕстьРазделыДляОтображения;
	Иначе
		Элементы.СтраницыЗакупки.ТекущаяСтраница = Элементы.СтраницаЗакупкиНетРазделовДляОтображения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИнформациюПоВиджетуКонтрольПоступлений(Форма, ПараметрыВыводаВиджетов, Виджет)
	
	ЕстьРазделыДляОтображения = Ложь;
	Элементы = Форма.Элементы;
	ПостфиксДекорации   = "Первая";
	ИмяДекорации        = "ДекорацияКонтрольПоступленийОтборыЗакупки";
	ИмяТекущейДекорации = ИмяДекорации + ПостфиксДекорации;
	
	Для Каждого РазделВиджета Из ТекущиеДелаEDIКлиентСервер.РазделыВиджета(Виджет) Цикл
		
		Если ПараметрыВыводаВиджетов.ИспользуемыеРазделы.НайтиПоЗначению(РазделВиджета) = Неопределено Тогда
			ДанныеРаздела = Неопределено;
		Иначе
			ДанныеРаздела = ПараметрыВыводаВиджетов.ДанныеДляВиджетов.Получить(РазделВиджета);
		КонецЕсли;
		
		Если ДанныеРаздела = Неопределено
			Или ДанныеРаздела.Количество = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЕстьРазделыДляОтображения = Истина;
		
		Если РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийПросрочено Тогда
			Заголовок = НСтр("ru = 'Просрочено'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияКрасныйEDI;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийСегодня Тогда
			Заголовок = НСтр("ru = 'Сегодня'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияЖелтыйEDI;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийЗавтра Тогда
			Заголовок = НСтр("ru = 'Завтра'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияЗеленыйEDI;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийТриДня Тогда
			Заголовок = НСтр("ru = 'В ближайшие три дня'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияЗеленыйEDI;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольПоступленийНеделя Тогда
			Заголовок = НСтр("ru = 'В ближайшую неделю'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияЗеленыйEDI;
		КонецЕсли;
		
		Заголовок = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), Заголовок, ДанныеРаздела.Количество),
		                                        ,
		                                        ЦветТекста,
		                                        ,
		                                        ОбщегоНазначения.ИмяЗначенияПеречисления(РазделВиджета));
		
		Элементы[ИмяТекущейДекорации].Заголовок = Новый ФорматированнаяСтрока("   ", Заголовок);
		Элементы[ИмяТекущейДекорации].Видимость = Истина;
		
		ТекущиеДелаEDI.ОпределитьИмяСледующейДекорации(ИмяТекущейДекорации, ИмяДекорации, ПостфиксДекорации);
		
	КонецЦикла;
	
	ТекущиеДелаEDI.ОтключитьВидимостьДекорацийГруппыНачинаяСПостфикса(Элементы.ГруппаКонтрольПоступленийОтборыЗакупки, ИмяДекорации, ПостфиксДекорации);
	
	Если ЕстьРазделыДляОтображения Тогда
		Элементы.СтраницыКонтрольПоступлений.ТекущаяСтраница = Элементы.СтраницаКонтрольПоступленийЕстьРазделыДляОтображения;
	Иначе
		Элементы.СтраницыКонтрольПоступлений.ТекущаяСтраница = Элементы.СтраницаКонтрольПоступленийНетРазделовДляОтображения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИнформациюПоВиджетуКонтрольОтгрузок(Форма, ПараметрыВыводаВиджетов, Виджет)
	
	ЕстьРазделыДляОтображения = Ложь;
	Элементы = Форма.Элементы;
	ПостфиксДекорации   = "Первая";
	ИмяДекорации        = "ДекорацияКонтрольОтгрузокОтборыПродажи";
	ИмяТекущейДекорации = ИмяДекорации + ПостфиксДекорации;
	
	Для Каждого РазделВиджета Из ТекущиеДелаEDIКлиентСервер.РазделыВиджета(Виджет) Цикл
		
		Если ПараметрыВыводаВиджетов.ИспользуемыеРазделы.НайтиПоЗначению(РазделВиджета) = Неопределено Тогда
			ДанныеРаздела = Неопределено;
		Иначе
			ДанныеРаздела = ПараметрыВыводаВиджетов.ДанныеДляВиджетов.Получить(РазделВиджета);
		КонецЕсли;
		
		Если ДанныеРаздела = Неопределено
			Или ДанныеРаздела.Количество = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЕстьРазделыДляОтображения = Истина;
		
		Если РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокПросрочено Тогда
			Заголовок = НСтр("ru = 'Просрочено'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияКрасныйEDI;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокСегодня Тогда
			Заголовок = НСтр("ru = 'Сегодня'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияЖелтыйEDI;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокЗавтра Тогда
			Заголовок = НСтр("ru = 'Завтра'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияЗеленыйEDI;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокТриДня Тогда
			Заголовок = НСтр("ru = 'В ближайшие три дня'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияЗеленыйEDI;
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.КонтрольОтгрузокНеделя Тогда
			Заголовок = НСтр("ru = 'В ближайшую неделю'");
			ЦветТекста = ЦветаСтиля.ЦветДатаВыполненияЗеленыйEDI;
		КонецЕсли;
		
		Заголовок = Новый ФорматированнаяСтрока(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), Заголовок, ДанныеРаздела.Количество),
		                                        ,
		                                        ЦветТекста,
		                                        ,
		                                        ОбщегоНазначения.ИмяЗначенияПеречисления(РазделВиджета));
		
		Элементы[ИмяТекущейДекорации].Заголовок = Новый ФорматированнаяСтрока("   ", Заголовок);
		Элементы[ИмяТекущейДекорации].Видимость = Истина;
		
		ТекущиеДелаEDI.ОпределитьИмяСледующейДекорации(ИмяТекущейДекорации, ИмяДекорации, ПостфиксДекорации);
		
	КонецЦикла;
	
	ТекущиеДелаEDI.ОтключитьВидимостьДекорацийГруппыНачинаяСПостфикса(Элементы.ГруппаКонтрольОтгрузокПродажи, ИмяДекорации, ПостфиксДекорации);
	
	Если ЕстьРазделыДляОтображения Тогда
		Элементы.СтраницыКонтрольОтгрузок.ТекущаяСтраница = Элементы.СтраницаКонтрольОтгрузокЕстьРазделыДляОтображения;
	Иначе
		Элементы.СтраницыКонтрольОтгрузок.ТекущаяСтраница = Элементы.СтраницаКонтрольОтгрузокНетРазделовДляОтображения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИнформациюПоВиджетуПродажи(Форма, ПараметрыВыводаВиджетов, Виджет)
	
	ЕстьРазделыДляОтображения = Ложь;
	Элементы = Форма.Элементы;
	
	Для Каждого РазделВиджета Из ТекущиеДелаEDIКлиентСервер.РазделыВиджета(Виджет) Цикл
		
		Если ПараметрыВыводаВиджетов.ИспользуемыеРазделы.НайтиПоЗначению(РазделВиджета) = Неопределено Тогда
			ДанныеРаздела = Неопределено;
		Иначе
			ДанныеРаздела = ПараметрыВыводаВиджетов.ДанныеДляВиджетов.Получить(РазделВиджета);
		КонецЕсли;
		
		Если РазделВиджета = Перечисления.РазделыВиджетовEDI.АрхивПродажи Тогда
			
			ВывестиИнформациюПоРазделуАрхивПродажи(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
		
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.ВРаботеПродажи Тогда
			
			ВывестиИнформациюПоРазделуВРаботеПродажи(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
			
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.ОтклоненияПриВыполненииПродажи Тогда
			
			ВывестиИнформациюПоРазделуОтклоненияПриВыполненииПродажи(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
			
		ИначеЕсли РазделВиджета = Перечисления.РазделыВиджетовEDI.ПоследниеСобытияПродажи Тогда
			
			ВывестиИнформациюПоРазделПоследниеСобытияПродажи(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРазделыДляОтображения Тогда
		Элементы.СтраницыПродажи.ТекущаяСтраница      = Элементы.СтраницаПродажиЕстьРазделыДляОтображения;
	Иначе
		Элементы.СтраницыПродажи.ТекущаяСтраница      = Элементы.СтраницаПродажиНетРазделовДляОтображения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиИнформациюПоВиджетуНастройкиСправочники(Форма, ПараметрыВыводаВиджетов, Виджет)

	ЕстьРазделыДляОтображения = Ложь;
	Элементы = Форма.Элементы;
	
	ПостфиксДекорации   = "Первая";
	ИмяДекорации        = "ДекорацияНастройкиСправочники";
	ИмяТекущейДекорации = ИмяДекорации + ПостфиксДекорации;
	
	Для Каждого РазделВиджета Из ТекущиеДелаEDIКлиентСервер.РазделыВиджета(Виджет) Цикл
		
		Если ПараметрыВыводаВиджетов.ИспользуемыеРазделы.НайтиПоЗначению(РазделВиджета) = Неопределено Тогда
			ДанныеРаздела = Неопределено;
		Иначе
			ДанныеРаздела = ПараметрыВыводаВиджетов.ДанныеДляВиджетов.Получить(РазделВиджета);
		КонецЕсли;
		
		ВыводитьРаздел = ДанныеРаздела <> Неопределено 
		                 И ДанныеРаздела.ЕстьПраво;
		
		Если ВыводитьРаздел Тогда
			ЕстьРазделыДляОтображения = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Заголовок = Новый ФорматированнаяСтрока(Строка(РазделВиджета),
		                                        ,
		                                        ,
		                                        ,
		                                        ОбщегоНазначения.ИмяЗначенияПеречисления(РазделВиджета));
		
		Элементы[ИмяТекущейДекорации].Заголовок = Новый ФорматированнаяСтрока("   ", Заголовок);
		Элементы[ИмяТекущейДекорации].Видимость = Истина;
		
		ТекущиеДелаEDI.ОпределитьИмяСледующейДекорации(ИмяТекущейДекорации, ИмяДекорации, ПостфиксДекорации);
		
	КонецЦикла;
	
	ТекущиеДелаEDI.ОтключитьВидимостьДекорацийГруппыНачинаяСПостфикса(Элементы.ГруппаНастройкиСправочникиДействия, ИмяДекорации, ПостфиксДекорации);
	
	Если ЕстьРазделыДляОтображения Тогда
		Элементы.СтраницыНастройкиСправочники.ТекущаяСтраница = Элементы.СтраницаНастройкиСправочникиЕстьРазделыДляОтображения;
	Иначе
		Элементы.СтраницыНастройкиСправочники.ТекущаяСтраница = Элементы.СтраницаНастройкиСправочникиНетРазделовДляОтображения;
	КонецЕсли;

КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуПоследниеСобытия(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения)
	
	Элементы = Форма.Элементы;
	
	Если ПараметрыВывода.ДанныеРаздела = Неопределено Тогда
		Элементы[ПараметрыВывода.ИмяГруппы].Видимость = Ложь;
		ТекущиеДелаEDI.УдалитьГруппуИзТаблицыЗависимостей(Форма, ПараметрыВывода.ИмяГруппыПредыдущие);
		Возврат;
	КонецЕсли;
	
	Если ПараметрыВывода.ДанныеРаздела.Количество() = 0 Тогда
		Элементы[ПараметрыВывода.ИмяГруппы].Видимость = Ложь;
		ТекущиеДелаEDI.УдалитьГруппуИзТаблицыЗависимостей(Форма, ПараметрыВывода.ИмяГруппыПредыдущие);
		Возврат;
	КонецЕсли;
	
	Элементы[ПараметрыВывода.ИмяГруппы].Видимость = Истина;
	
	ЕстьРазделыДляОтображения = Истина;
	
	ПараметрыСтрокиТаблицыЗависимостей = ТекущиеДелаEDI.ПараметрыСтрокиТаблицыЗависимостей();
	ПараметрыСтрокиТаблицыЗависимостей.Виджет                    = ПараметрыВывода.Виджет;
	ПараметрыСтрокиТаблицыЗависимостей.ИмяСворачиваемогоЭлемента = ПараметрыВывода.ИмяЭлементаПризнакСвернутости;
	ПараметрыСтрокиТаблицыЗависимостей.ИмяПодчиненнойГруппы      = ПараметрыВывода.ИмяГруппыПредыдущие;
	ПараметрыСтрокиТаблицыЗависимостей.Включена                  = Ложь;
	ТекущиеДелаEDI.ДобавитьСтрокуТаблицыЗависимостей(Форма, ПараметрыСтрокиТаблицыЗависимостей);
	
	ПостфиксДекорации   = "Первая";
	ИмяДекорации        = ПараметрыВывода.ИмяДекорации;
	ИмяТекущейДекорации = ИмяДекорации + ПостфиксДекорации;
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	НачалоТекущейНедели = НачалоНедели(ТекущаяДата);
	
	Для Каждого СтрокаТаблицы Из ПараметрыВывода.ДанныеРаздела Цикл
		
		ИмяГиперссылки = ПараметрыВывода.ИмяГиперссылки + ПостфиксДекорации;
		НоваяСтрокаТаблицыКоманд = Форма.КомандыПоследнихСобытий.Добавить();
		НоваяСтрокаТаблицыКоманд.ИмяКоманды = ИмяГиперссылки;
		НоваяСтрокаТаблицыКоманд.Дата       = СтрокаТаблицы.ДатаСобытия;
		
		ДатаСтрокой  = ДатаСтрокойДляВыводаСобытия(ТекущаяДата, НачалоТекущейНедели, СтрокаТаблицы.ДатаСобытия);
		
		Если ПостфиксДекорации = "Первая" Тогда
			
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'События за %1 (%2)'"), 
			                                                                    НРег(ДатаСтрокой), 
			                                                                    СтрокаТаблицы.Количество);
			
			Заголовок = Новый ФорматированнаяСтрока(ТекстЗаголовка,,ЦветаСтиля.ЦветАкцента,, ИмяГиперссылки);
			
		Иначе
			
			ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), 
			                                                                         ДатаСтрокой, 
			                                                                         СтрокаТаблицы.Количество);
			
			Заголовок = Новый ФорматированнаяСтрока(ТекстЗаголовка,,,, ИмяГиперссылки);
			Заголовок = Новый ФорматированнаяСтрока("     ", Заголовок);
			
		КонецЕсли;
			
			Элементы[ИмяТекущейДекорации].Заголовок = Заголовок;
			Элементы[ИмяТекущейДекорации].Видимость = Истина;
			
			ТекущиеДелаEDI.ОпределитьИмяСледующейДекорации(ИмяТекущейДекорации, ИмяДекорации, ПостфиксДекорации);
		
	КонецЦикла;
		
	ТекущиеДелаEDI.ОтключитьВидимостьДекорацийГруппыНачинаяСПостфикса(Элементы[ПараметрыВывода.ИмяГруппыПредыдущие], ИмяДекорации, ПостфиксДекорации, 1);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуПоследниеСобытияЗакупки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДанныеРаздела",                 ДанныеРаздела);
	ПараметрыВывода.Вставить("ИмяГруппы",                     "ГруппаСобытияЗакупки");
	ПараметрыВывода.Вставить("ИмяДекорации",                  "ДекорацияСобытияЗакупки");
	ПараметрыВывода.Вставить("ИмяЭлементаПризнакСвернутости", "ДекорацияСобытияЗакупкиПризнакСвернутости");
	ПараметрыВывода.Вставить("ИмяГиперссылки",                "СобытияЗакупки");
	ПараметрыВывода.Вставить("ИмяГруппыПредыдущие",           "ГруппаСобытияЗакупкиПредыдущие");
	ПараметрыВывода.Вставить("Виджет",                        Перечисления.ДоступныеВиджетыТекущихДелEDI.Закупки);
	
	
	ВывестиИнформациюПоРазделуПоследниеСобытия(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения);
	
КонецПроцедуры

Функция ДатаСтрокойДляВыводаСобытия(ТекущаяДата, НачалоТекущейНедели, ДатаСобытия)
	
	Если ДатаСобытия = ТекущаяДата Тогда
		Возврат НСтр("ru = 'Сегодня'");
	ИначеЕсли ДатаСобытия < НачалоТекущейНедели Тогда
		Возврат Формат(ДатаСобытия, "ДЛФ=DD");
	Иначе
		НомерДняНедели = ДеньНедели(ДатаСобытия);
		Если НомерДняНедели = 1 Тогда
			Возврат НСтр("ru = 'Понедельник'");
		ИначеЕсли  НомерДняНедели = 2 Тогда
			Возврат НСтр("ru = 'Вторник'");
		ИначеЕсли  НомерДняНедели = 3 Тогда
			Возврат НСтр("ru = 'Среду'");
		ИначеЕсли  НомерДняНедели = 4 Тогда
			Возврат НСтр("ru = 'Четверг'");
		ИначеЕсли  НомерДняНедели = 5 Тогда
			Возврат НСтр("ru = 'Пятницу'");
		ИначеЕсли  НомерДняНедели = 6 Тогда
			Возврат НСтр("ru = 'Субботу'");
		ИначеЕсли  НомерДняНедели = 7 Тогда
			Возврат НСтр("ru = 'Воскресенье'");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ВывестиИнформациюПоРазделуАрхивЗакупки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДанныеРаздела",                  ДанныеРаздела);
	ПараметрыВывода.Вставить("ИмяГруппы",                      "ГруппаАрхивЗакупки");
	ПараметрыВывода.Вставить("ИмяДекорации",                   "ДекорацияАрхивПоСтатусамЗакупки");
	ПараметрыВывода.Вставить("ИмяЭлементаПризнакСвернутости",  "ДекорацияАрхивЗакупкиПризнакСвернутости");
	ПараметрыВывода.Вставить("ПрефиксГиперссылки",             "Закупки");
	ПараметрыВывода.Вставить("ИмяГруппыИтогиПоСтатусам",       "ГруппаАрхивПоСтатусамЗакупки");
	ПараметрыВывода.Вставить("Виджет",                         Перечисления.ДоступныеВиджетыТекущихДелEDI.Закупки);
	
	ВывестиИнформациюПоРазделуАрхив(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуАрхивПродажи(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДанныеРаздела",                 ДанныеРаздела);
	ПараметрыВывода.Вставить("ИмяГруппы",                     "ГруппаАрхивПродажи");
	ПараметрыВывода.Вставить("ИмяДекорации",                  "ДекорацияАрхивПоСтатусамПродажи");
	ПараметрыВывода.Вставить("ИмяЭлементаПризнакСвернутости", "ДекорацияАрхивПродажиПризнакСвернутости");
	ПараметрыВывода.Вставить("ПрефиксГиперссылки",            "Продажи");
	ПараметрыВывода.Вставить("ИмяГруппыИтогиПоСтатусам",      "ГруппаАрхивПоСтатусамПродажи");
	ПараметрыВывода.Вставить("Виджет",                        Перечисления.ДоступныеВиджетыТекущихДелEDI.Продажи);
	
	ВывестиИнформациюПоРазделуАрхив(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуВРаботеЗакупки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДанныеРаздела",                 ДанныеРаздела);
	ПараметрыВывода.Вставить("ИмяГруппы",                     "ГруппаВРаботеЗакупки");
	ПараметрыВывода.Вставить("ИмяДекорации",                  "ДекорацияВРаботеПоСтатусамЗакупки");
	ПараметрыВывода.Вставить("МассивСтатусов",                ДокументыEDIКлиентСервер.МассивСтатусовВРаботе());
	ПараметрыВывода.Вставить("ПрефиксГиперссылки",            "Закупки");
	ПараметрыВывода.Вставить("ИмяДекорацииИтоги",             "ДекорацияВРаботеВсеЗакупки");
	ПараметрыВывода.Вставить("ИмяИтоговойГруппы",             НСтр("ru = 'В работе'"));
	ПараметрыВывода.Вставить("ИмяГруппыИтогиПоСтатусам",      "ГруппаВРаботеПоСтатусамЗакупки");
	ПараметрыВывода.Вставить("ИмяЭлементаПризнакСвернутости", "ДекорацияВРаботеВсеЗакупкиПризнакСвернутости");
	ПараметрыВывода.Вставить("ИмяГиперссылкиИтоги",           "ЗакупкиВРаботе");
	ПараметрыВывода.Вставить("Виджет",                        Перечисления.ДоступныеВиджетыТекущихДелEDI.Закупки);
	
	ВывестиИнформациюПоРазделуСтатусы(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделПоследниеСобытияПродажи(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДанныеРаздела",                 ДанныеРаздела);
	ПараметрыВывода.Вставить("ИмяГруппы",                     "ГруппаСобытияПродажи");
	ПараметрыВывода.Вставить("ИмяДекорации",                  "ДекорацияСобытияПродажи");
	ПараметрыВывода.Вставить("ИмяЭлементаПризнакСвернутости", "ДекорацияСобытияПродажиПризнакСвернутости");
	ПараметрыВывода.Вставить("ИмяГиперссылки",                "СобытияПродажи");
	ПараметрыВывода.Вставить("ИмяГруппыПредыдущие",           "ГруппаСобытияПродажиПредыдущие");
	ПараметрыВывода.Вставить("Виджет",                        Перечисления.ДоступныеВиджетыТекущихДелEDI.Продажи);
	
	ВывестиИнформациюПоРазделуПоследниеСобытия(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуОтклоненияПриВыполненииЗакупки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДанныеРаздела",                 ДанныеРаздела);
	ПараметрыВывода.Вставить("ИмяГруппы",                     "ГруппаОтклоненияПриВыполненииЗакупки");
	ПараметрыВывода.Вставить("ИмяДекорации",                  "ДекорацияОтклоненияПриВыполненииПоСтатусамЗакупки");
	ПараметрыВывода.Вставить("МассивСтатусов",                ДокументыEDIКлиентСервер.МассивСтатусовОтклоненияПриВыполнении());
	ПараметрыВывода.Вставить("ПрефиксГиперссылки",            "Закупки");
	ПараметрыВывода.Вставить("ИмяДекорацииИтоги",             "ДекорацияОтклоненияПриВыполненииВсеЗакупки");
	ПараметрыВывода.Вставить("ИмяИтоговойГруппы",             НСтр("ru = 'Отклонения при выполнении'"));
	ПараметрыВывода.Вставить("ИмяГруппыИтогиПоСтатусам",      "ГруппаОтклоненияПриВыполненииПоСтатусамЗакупки");
	ПараметрыВывода.Вставить("ИмяЭлементаПризнакСвернутости", "ДекорацияОтклоненияПриВыполненииЗакупкиПризнакСвернутости");
	ПараметрыВывода.Вставить("ИмяГиперссылкиИтоги",           "ЗакупкиОтклоненияПриВыполнении");
	ПараметрыВывода.Вставить("Виджет",                         Перечисления.ДоступныеВиджетыТекущихДелEDI.Закупки);
	
	ВывестиИнформациюПоРазделуСтатусы(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуВРаботеПродажи(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДанныеРаздела",                 ДанныеРаздела);
	ПараметрыВывода.Вставить("ИмяГруппы",                     "ГруппаВРаботеПродажи");
	ПараметрыВывода.Вставить("ИмяДекорации",                  "ДекорацияВРаботеПоСтатусамПродажи");
	ПараметрыВывода.Вставить("МассивСтатусов",                ДокументыEDIКлиентСервер.МассивСтатусовВРаботе());
	ПараметрыВывода.Вставить("ПрефиксГиперссылки",            "Продажи");
	ПараметрыВывода.Вставить("ИмяДекорацииИтоги",             "ДекорацияВРаботеВсеПродажи");
	ПараметрыВывода.Вставить("ИмяИтоговойГруппы",             НСтр("ru = 'В работе'"));
	ПараметрыВывода.Вставить("ИмяГруппыИтогиПоСтатусам",      "ГруппаВРаботеПоСтатусамПродажи");
	ПараметрыВывода.Вставить("ИмяЭлементаПризнакСвернутости", "ДекорацияВРаботеВсеПродажиПризнакСвернутости");
	ПараметрыВывода.Вставить("ИмяГиперссылкиИтоги",           "ПродажиВРаботе");
	ПараметрыВывода.Вставить("Виджет",                         Перечисления.ДоступныеВиджетыТекущихДелEDI.Продажи);
	
	ВывестиИнформациюПоРазделуСтатусы(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуОтклоненияПриВыполненииПродажи(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ДанныеРаздела",                 ДанныеРаздела);
	ПараметрыВывода.Вставить("ИмяГруппы",                     "ГруппаОтклоненияПриВыполненииПродажи");
	ПараметрыВывода.Вставить("ИмяДекорации",                  "ДекорацияОтклоненияПриВыполненииПоСтатусамПродажи");
	ПараметрыВывода.Вставить("МассивСтатусов",                ДокументыEDIКлиентСервер.МассивСтатусовОтклоненияПриВыполнении());
	ПараметрыВывода.Вставить("ПрефиксГиперссылки",            "Закупки");
	ПараметрыВывода.Вставить("ИмяДекорацииИтоги",             "ДекорацияОтклоненияПриВыполненииВсеПродажи");
	ПараметрыВывода.Вставить("ИмяИтоговойГруппы",             НСтр("ru = 'Отклонения при выполнении'"));
	ПараметрыВывода.Вставить("ИмяГруппыИтогиПоСтатусам",      "ГруппаОтклоненияПриВыполненииПоСтатусамПродажи");
	ПараметрыВывода.Вставить("ИмяЭлементаПризнакСвернутости", "ДекорацияОтклоненияПриВыполненииПродажиПризнакСвернутости");
	ПараметрыВывода.Вставить("ИмяГиперссылкиИтоги",           "ПродажиОтклоненияПриВыполнении");
	ПараметрыВывода.Вставить("Виджет",                        Перечисления.ДоступныеВиджетыТекущихДелEDI.Продажи);
	
	ВывестиИнформациюПоРазделуСтатусы(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуАрхив(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения)
	
	Элементы = Форма.Элементы;
	
	Если ПараметрыВывода.ДанныеРаздела = Неопределено Тогда
		Элементы[ПараметрыВывода.ИмяГруппы].Видимость = Ложь;
		ТекущиеДелаEDI.УдалитьГруппуИзТаблицыЗависимостей(Форма, ПараметрыВывода.ИмяГруппыИтогиПоСтатусам);
		Возврат;
	КонецЕсли;
	
	ЕстьХотьОдинЭлементДляВывода = ПараметрыВывода.ДанныеРаздела.ЕстьВыполнен 
	                               Или ПараметрыВывода.ДанныеРаздела.ЕстьОтменен;
	
	Элементы[ПараметрыВывода.ИмяГруппы].Видимость = ЕстьХотьОдинЭлементДляВывода;
	
	Если Не ЕстьХотьОдинЭлементДляВывода Тогда
		ТекущиеДелаEDI.УдалитьГруппуИзТаблицыЗависимостей(Форма, ПараметрыВывода.ИмяГруппыИтогиПоСтатусам);
		Возврат;
	КонецЕсли;
	
	ПараметрыСтрокиТаблицыЗависимостей = ТекущиеДелаEDI.ПараметрыСтрокиТаблицыЗависимостей();
	ПараметрыСтрокиТаблицыЗависимостей.Виджет                    = ПараметрыВывода.Виджет;
	ПараметрыСтрокиТаблицыЗависимостей.ИмяСворачиваемогоЭлемента = ПараметрыВывода.ИмяЭлементаПризнакСвернутости;
	ПараметрыСтрокиТаблицыЗависимостей.ИмяПодчиненнойГруппы      = ПараметрыВывода.ИмяГруппыИтогиПоСтатусам;
	ПараметрыСтрокиТаблицыЗависимостей.Включена                  = Ложь;
	ТекущиеДелаEDI.ДобавитьСтрокуТаблицыЗависимостей(Форма, ПараметрыСтрокиТаблицыЗависимостей);
	
	ЕстьРазделыДляОтображения = Истина;
	
	ПостфиксДекорации   = "Первая";
	ИмяДекорации        = ПараметрыВывода.ИмяДекорации;
	ИмяТекущейДекорации = ИмяДекорации + ПостфиксДекорации;
	
	Если ПараметрыВывода.ДанныеРаздела.ЕстьВыполнен Тогда
		
		ТекущиеДелаEDI.ВывестиДекорацию(Форма, НСтр("ru = 'Выполнен'"), ПараметрыВывода.ПрефиксГиперссылки + "Выполнен", ИмяТекущейДекорации);
		ТекущиеДелаEDI.ОпределитьИмяСледующейДекорации(ИмяТекущейДекорации, ИмяДекорации, ПостфиксДекорации);
		
	КонецЕсли;
	
	Если ПараметрыВывода.ДанныеРаздела.ЕстьОтменен Тогда
		
		ТекущиеДелаEDI.ВывестиДекорацию(Форма, НСтр("ru = 'Отменен'"), ПараметрыВывода.ПрефиксГиперссылки + "Отменен", ИмяТекущейДекорации);
		ТекущиеДелаEDI.ОпределитьИмяСледующейДекорации(ИмяТекущейДекорации, ИмяДекорации, ПостфиксДекорации);
		
	КонецЕсли;
	
	ТекущиеДелаEDI.ОтключитьВидимостьДекорацийГруппыНачинаяСПостфикса(Элементы[ПараметрыВывода.ИмяГруппыИтогиПоСтатусам], ИмяДекорации, ПостфиксДекорации);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуСтатусы(Форма, ПараметрыВывода, ЕстьРазделыДляОтображения)
	
	Элементы = Форма.Элементы;
	
	Если ПараметрыВывода.ДанныеРаздела = Неопределено Тогда
		Элементы[ПараметрыВывода.ИмяГруппы].Видимость = Ложь;
		ТекущиеДелаEDI.УдалитьГруппуИзТаблицыЗависимостей(Форма, ПараметрыВывода.ИмяГруппыИтогиПоСтатусам);
		Возврат;
	КонецЕсли;
	
	ЕстьХотьОдинЭлементДляВывода = ПараметрыВывода.ДанныеРаздела.Количество() <> 0;
	
	Элементы[ПараметрыВывода.ИмяГруппы].Видимость = ЕстьХотьОдинЭлементДляВывода;
	
	Если Не ЕстьХотьОдинЭлементДляВывода Тогда
		ТекущиеДелаEDI.УдалитьГруппуИзТаблицыЗависимостей(Форма, ПараметрыВывода.ИмяГруппыИтогиПоСтатусам);
		Возврат;
	КонецЕсли;
	
	ЕстьРазделыДляОтображения = Истина;
	
	ПараметрыСтрокиТаблицыЗависимостей = ТекущиеДелаEDI.ПараметрыСтрокиТаблицыЗависимостей();
	ПараметрыСтрокиТаблицыЗависимостей.Виджет                    = ПараметрыВывода.Виджет;
	ПараметрыСтрокиТаблицыЗависимостей.ИмяСворачиваемогоЭлемента = ПараметрыВывода.ИмяЭлементаПризнакСвернутости;
	ПараметрыСтрокиТаблицыЗависимостей.ИмяПодчиненнойГруппы      = ПараметрыВывода.ИмяГруппыИтогиПоСтатусам;
	ПараметрыСтрокиТаблицыЗависимостей.Включена                  = Ложь;
	ТекущиеДелаEDI.ДобавитьСтрокуТаблицыЗависимостей(Форма, ПараметрыСтрокиТаблицыЗависимостей);
	
	ПостфиксДекорации   = "Первая";
	ИмяДекорации        = ПараметрыВывода.ИмяДекорации;
	ИмяТекущейДекорации = ИмяДекорации + ПостфиксДекорации;
	
	КоличествоВсего = 0;
	
	Для Каждого Статус Из ПараметрыВывода.МассивСтатусов Цикл
		
		КоличествоПоСтатусу = ПараметрыВывода.ДанныеРаздела.Получить(Статус);
		
		Если КоличествоПоСтатусу = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + КоличествоПоСтатусу;
		
		ИмяСтатуса = ОбщегоНазначения.ИмяЗначенияПеречисления(Статус);
		ПредставлениеСтатуса = Строка(Статус);
		
		ИмяГиперссылки = ПараметрыВывода.ПрефиксГиперссылки + ИмяСтатуса;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), ПредставлениеСтатуса, КоличествоПоСтатусу);
		
		ТекущиеДелаEDI.ВывестиДекорацию(Форма, Заголовок, ИмяГиперссылки, ИмяТекущейДекорации);
		ТекущиеДелаEDI.ОпределитьИмяСледующейДекорации(ИмяТекущейДекорации, ИмяДекорации, ПостфиксДекорации);
		
	КонецЦикла;
	
	ТекущиеДелаEDI.ОтключитьВидимостьДекорацийГруппыНачинаяСПостфикса(Элементы[ПараметрыВывода.ИмяГруппыИтогиПоСтатусам], ИмяДекорации, ПостфиксДекорации);
	
	ЗаголовокГруппы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (%2)'"), ПараметрыВывода.ИмяИтоговойГруппы, КоличествоВсего);
	Элементы[ПараметрыВывода.ИмяДекорацииИтоги].Заголовок = Новый ФорматированнаяСтрока(ЗаголовокГруппы,,ЦветаСтиля.ЦветАкцента, , ПараметрыВывода.ИмяГиперссылкиИтоги);
	
КонецПроцедуры

Процедура ВывестиИнформациюПоРазделуЗаказыПоставщикуДоступныеДляОтправки(Форма, ДанныеРаздела, Виджет, ЕстьРазделыДляОтображения)
	
	Элементы = Форма.Элементы;
	
	Если ДанныеРаздела = Неопределено 
		Или ДанныеРаздела = 0 Тогда
		
		Элементы.ДекорацияЗаказПоставщикуДоступныеДляОтправки.Видимость = Ложь;
		Возврат;
		
	КонецЕсли;
	
	ЕстьРазделыДляОтображения = Истина;
	
	Элементы.ДекорацияЗаказПоставщикуДоступныеДляОтправки.Видимость = Истина;
	Элементы.ДекорацияЗаказПоставщикуДоступныеДляОтправки.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заказов, готовых к отправке (%1)'"), ДанныеРаздела);
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхЗапросовПоРазделамВиджетов

Процедура ПодготовитьДанныеЗапросаПоРазделуАрхивЗакупки(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе КАК Ссылка
	|ПОМЕСТИТЬ ЗакупкиВыполнен
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В (&ХэшДокументыЗакупкиВыполнено)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе КАК Ссылка
	|ПОМЕСТИТЬ ЗакупкиОтменен
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В (&ХэшДокументыЗакупкиОтменен)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕстьNULL(МАКСИМУМ(ДанныеПоАрхивам.ЕстьВыполнен), ЛОЖЬ) КАК ЕстьВыполнен,
	|	ЕстьNULL(МАКСИМУМ(ДанныеПоАрхивам.ЕстьОтменен),  ЛОЖЬ) КАК ЕстьОтменен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК ЕстьВыполнен,
	|		ЛОЖЬ КАК ЕстьОтменен
	|	ИЗ
	|		ЗакупкиВыполнен КАК ЗакупкиВыполнен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		ЗакупкиОтменен КАК ЗакупкиОтменен) КАК ДанныеПоАрхивам";
	
	МассивДокументовЗакупки = ДокументыEDI.МассивИдентификаторовДокументовЗакупки();
	
	СтатусыВыполнен = Новый Массив;
	СтатусыВыполнен.Добавить(Перечисления.СтатусыЗаказаEDI.Выполнен);
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыЗакупкиВыполнено", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовЗакупки, СтатусыВыполнен));
	
	СтатусыОтменен = Новый Массив;
	СтатусыОтменен.Добавить(Перечисления.СтатусыЗаказаEDI.Отменен);
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыЗакупкиОтменен", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовЗакупки, СтатусыОтменен));
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 3);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуВРаботеЗакупки(ПараметрыФормирования, Раздел)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество,
	|	СостоянияДокументовEDI.ТекущийСтатус                               КАК ТекущийСтатус
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыЗакупкиВРаботе)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияДокументовEDI.ТекущийСтатус
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ТекущийСтатус";
	
	МассивДокументовЗакупки = ДокументыEDI.МассивИдентификаторовДокументовЗакупки();
	МассивСтатусовВРаботе   = ДокументыEDIКлиентСервер.МассивСтатусовВРаботе();
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыЗакупкиВРаботе", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовЗакупки, МассивСтатусовВРаботе));
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуОтклоненияПриВыполненииЗакупки(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество,
	|	СостоянияДокументовEDI.ТекущийСтатус                               КАК ТекущийСтатус
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыЗакупкиОтклоненияПриВыполнении)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияДокументовEDI.ТекущийСтатус";
	
	МассивДокументовЗакупки               = ДокументыEDI.МассивИдентификаторовДокументовЗакупки();
	МассивСтатусовОтклоненияПриВыполнении = ДокументыEDIКлиентСервер.МассивСтатусовОтклоненияПриВыполнении();
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыЗакупкиОтклоненияПриВыполнении", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовЗакупки, МассивСтатусовОтклоненияПриВыполнении));
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуПоследниеСобытияЗакупки(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 4
	|	ИтогиПоследнихСобытийEDI.Дата              КАК ДатаСобытия,
	|	ИтогиПоследнихСобытийEDI.КоличествоСобытий КАК Количество
	|ИЗ
	|	РегистрСведений.ИтогиПоследнихСобытийEDI КАК ИтогиПоследнихСобытийEDI
	|ГДЕ
	|	ИтогиПоследнихСобытийEDI.ТипДокумента В(&ДокументыЗакупкиВсе)
	|	И ИтогиПоследнихСобытийEDI.Менеджер = &ТекущийПользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия УБЫВ";
	
	ТипыДокументовЗакупки = ДокументыEDIИнтеграция.МассивТиповДокументовДоступныхПоПравам(ДокументыEDIИнтеграция.МассивИдентификаторовДокументовЗакупки());
	ПараметрыФормирования.Запрос.УстановитьПараметр("ДокументыЗакупкиВсе", ТипыДокументовЗакупки);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуЗаказыПоставщикуДоступныеДляОтправки(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ НеОтправленныеПрикладныеОбъектыEDI.ПрикладнойОбъект) КАК Количество
	|ИЗ
	|	РегистрСведений.НеОтправленныеПрикладныеОбъектыEDI КАК НеОтправленныеПрикладныеОбъектыEDI
	|ГДЕ
	|	НеОтправленныеПрикладныеОбъектыEDI.Менеджер = &ТекущийПользователь
	|	И НЕ НеОтправленныеПрикладныеОбъектыEDI.НеПредлагатьКОтправке";
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуАрхивПродажи(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе КАК Ссылка
	|ПОМЕСТИТЬ ПродажиВыполнен
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В (&ХэшДокументыПродажиВыполнено)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе КАК Ссылка
	|ПОМЕСТИТЬ ПродажиОтменен
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В (&ХэшДокументыПродажиОтменен)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕстьNULL(МАКСИМУМ(ДанныеПоАрхивам.ЕстьВыполнен), ЛОЖЬ) КАК ЕстьВыполнен,
	|	ЕстьNULL(МАКСИМУМ(ДанныеПоАрхивам.ЕстьОтменен),  ЛОЖЬ) КАК ЕстьОтменен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК ЕстьВыполнен,
	|		ЛОЖЬ КАК ЕстьОтменен
	|	ИЗ
	|		ПродажиВыполнен КАК ЗакупкиВыполнен
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		ПродажиОтменен КАК ЗакупкиОтменен) КАК ДанныеПоАрхивам";
	
	МассивДокументовПродажи = ДокументыEDI.МассивИдентификаторовДокументовПродажи();
	
	СтатусыВыполнен = Новый Массив;
	СтатусыВыполнен.Добавить(Перечисления.СтатусыЗаказаEDI.Выполнен);
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыПродажиВыполнено", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовПродажи, СтатусыВыполнен));
	
	СтатусыОтменен = Новый Массив;
	СтатусыОтменен.Добавить(Перечисления.СтатусыЗаказаEDI.Отменен);
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыПродажиОтменен", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовПродажи, СтатусыОтменен));
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 3);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуВРаботеПродажи(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество,
	|	СостоянияДокументовEDI.ТекущийСтатус                               КАК ТекущийСтатус
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыПродажиВРаботе)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияДокументовEDI.ТекущийСтатус";
	
	МассивДокументовПродажи = ДокументыEDI.МассивИдентификаторовДокументовПродажи();
	МассивСтатусовВРаботе   = ДокументыEDIКлиентСервер.МассивСтатусовВРаботе();
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыПродажиВРаботе", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовПродажи, МассивСтатусовВРаботе));
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуОтклоненияПриВыполненииПродажи(ПараметрыФормирования, Раздел)

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество,
	|	СостоянияДокументовEDI.ТекущийСтатус                               КАК ТекущийСтатус
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыПродажиОтклоненияПриВыполнении)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияДокументовEDI.ТекущийСтатус";
	
	МассивДокументовПродажи               = ДокументыEDI.МассивИдентификаторовДокументовПродажи();
	МассивСтатусовОтклоненияПриВыполнении = ДокументыEDIКлиентСервер.МассивСтатусовОтклоненияПриВыполнении();
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыПродажиОтклоненияПриВыполнении", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовПродажи, МассивСтатусовОтклоненияПриВыполнении));
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);

КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуПоследниеСобытияПродажи(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 4
	|	ИтогиПоследнихСобытийEDI.Дата              КАК ДатаСобытия,
	|	ИтогиПоследнихСобытийEDI.КоличествоСобытий КАК Количество
	|ИЗ
	|	РегистрСведений.ИтогиПоследнихСобытийEDI КАК ИтогиПоследнихСобытийEDI
	|ГДЕ
	|	ИтогиПоследнихСобытийEDI.ТипДокумента В(&ДокументыПродажиВсе)
	|	И ИтогиПоследнихСобытийEDI.Менеджер = &ТекущийПользователь
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытия УБЫВ";
	
	ТипыДокументовПродажи = ДокументыEDIИнтеграция.МассивТиповДокументовДоступныхПоПравам(ДокументыEDIИнтеграция.МассивИдентификаторовДокументовПродажи());
	ПараметрыФормирования.Запрос.УстановитьПараметр("ДокументыПродажиВсе", ТипыДокументовПродажи);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийПросрочено(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыЗакупкиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения < &НачалоТекущейДаты
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыЗакупкиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийСегодня(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыЗакупкиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения = &НачалоТекущейДаты
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыЗакупкиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийЗавтра(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыЗакупкиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения = ДОБАВИТЬКДАТЕ(&НачалоТекущейДаты, ДЕНЬ, 1)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыЗакупкиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийТриДня(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыЗакупкиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения > &НачалоТекущейДаты
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения <= ДОБАВИТЬКДАТЕ(&НачалоТекущейДаты, ДЕНЬ, 2)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыЗакупкиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольПоступленийНеделя(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыЗакупкиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения > &НачалоТекущейДаты
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения <= ДОБАВИТЬКДАТЕ(&НачалоТекущейДаты, ДЕНЬ, 6)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыЗакупкиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокПросрочено(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыПродажиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения < &НачалоТекущейДаты
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыПродажиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокСегодня(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыПродажиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения = &НачалоТекущейДаты
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыПродажиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокЗавтра(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыПродажиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения = ДОБАВИТЬКДАТЕ(&НачалоТекущейДаты, ДЕНЬ, 1)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыПродажиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокТриДня(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыПродажиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения > &НачалоТекущейДаты
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения <= ДОБАВИТЬКДАТЕ(&НачалоТекущейДаты, ДЕНЬ, 2)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыПродажиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ПодготовитьДанныеЗапросаПоРазделуКонтрольОтгрузокНеделя(ПараметрыФормирования, Раздел)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияДокументовEDI.ИдентификаторВСервисе) КАК Количество
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ХэшТипаДокументаИСтатуса В(&ХэшДокументыПродажиВыполняется)
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения > &НачалоТекущейДаты
	|	И СостоянияДокументовEDI.ПлановаяДатаВыполнения <= ДОБАВИТЬКДАТЕ(&НачалоТекущейДаты, ДЕНЬ, 6)
	|	И СостоянияДокументовEDI.Менеджер = &ТекущийПользователь";

	ДобавитьПараметрХэшДокументыПродажиВыполняется(ПараметрыФормирования);
	
	ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, 1);
	
КонецПроцедуры

Процедура ДополнитьДанныеЗапросаПоРазделу(ПараметрыФормирования, ТекстЗапроса, Раздел, КоличествоЗапросов)
	
	ДобавитьРазделительПакетаЗапросаЕслиТребуется(ТекстЗапроса, ПараметрыФормирования);
	ПараметрыФормирования.ТекущийНомерЗапроса = ПараметрыФормирования.ТекущийНомерЗапроса +КоличествоЗапросов;
	ПараметрыФормирования.РазделыЗапросы.Вставить(Раздел, ПараметрыФормирования.ТекущийНомерЗапроса);
	ПараметрыФормирования.Запрос.Текст = ПараметрыФормирования.Запрос.Текст + ТекстЗапроса;
	
КонецПроцедуры

Процедура ДобавитьРазделительПакетаЗапросаЕслиТребуется(ТекстЗапроса, ПараметрыФормирования)
	
	Если ПараметрыФормирования.ТекущийНомерЗапроса > -1 Тогда
		
		ТекстЗапроса = "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////" + ТекстЗапроса;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПараметрХэшДокументыЗакупкиВыполняется(ПараметрыФормирования)

	МассивДокументовЗакупки   = ДокументыEDI.МассивИдентификаторовДокументовЗакупки();
	МассивСтатусовВыполняется = ДокументыEDIКлиентСервер.МассивСтатусовВыполняется();
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыЗакупкиВыполняется", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовЗакупки, МассивСтатусовВыполняется));

КонецПроцедуры

Процедура ДобавитьПараметрХэшДокументыПродажиВыполняется(ПараметрыФормирования)

	МассивДокументовПродажи   = ДокументыEDI.МассивИдентификаторовДокументовПродажи();
	МассивСтатусовВыполняется = ДокументыEDIКлиентСервер.МассивСтатусовВыполняется();
	
	ПараметрыФормирования.Запрос.УстановитьПараметр("ХэшДокументыПродажиВыполняется", 
	                                                ДокументыEDI.МассивХэшСуммИдентификаторовТиповДокументовИСтатусов(МассивДокументовПродажи, МассивСтатусовВыполняется));

КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхРазделовПоРезультатамЗапроса

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуАрхивЗакупки(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоРазделуАрхивСтатусы(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуВРаботеЗакупки(ПараметрыФормирования, ДанныеДляВиджетов, Раздел) 
	
	ПодготовитьДанныеДляВиджетаПоВыборкеСтатусов(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуОтклоненияПриВыполненииЗакупки(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоВыборкеСтатусов(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуЗаказыПоставщикуДоступныеДляОтправки(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	НомерПакета = ПараметрыФормирования.РазделыЗапросы.Получить(Раздел);
	Если НомерПакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПараметрыФормирования.РезультатЗапроса[НомерПакета];
	
	КоличествоДокументов = 0;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		КоличествоДокументов = Выборка.Количество;
	КонецЕсли;;
	
	ДанныеДляВиджетов.Вставить(Раздел, КоличествоДокументов);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуАрхивПродажи(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоРазделуАрхивСтатусы(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляВиджетаПоРазделуАрхивСтатусы(ПараметрыФормирования, ДанныеДляВиджетов, Раздел) 
	
	НомерПакета = ПараметрыФормирования.РазделыЗапросы.Получить(Раздел);
	Если НомерПакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПараметрыФормирования.РезультатЗапроса[НомерПакета];
	
	ДанныеРаздела = Новый Структура;
	ДанныеРаздела.Вставить("ЕстьВыполнен", Ложь);
	ДанныеРаздела.Вставить("ЕстьОтменен",  Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРаздела, Выборка);
	КонецЕсли;
	
	ДанныеДляВиджетов.Вставить(Раздел, ДанныеРаздела);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуВРаботеПродажи(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоВыборкеСтатусов(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуОтклоненияПриВыполненииПродажи(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)

	ПодготовитьДанныеДляВиджетаПоВыборкеСтатусов(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);

КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийПросрочено(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийСегодня(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийЗавтра(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийТриДня(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольПоступленийНеделя(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокПросрочено(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокСегодня(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокЗавтра(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокТриДня(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуКонтрольОтгрузокНеделя(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел);
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляВиджетаПоКоличеству(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	НомерПакета = ПараметрыФормирования.РазделыЗапросы.Получить(Раздел);
	Если НомерПакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПараметрыФормирования.РезультатЗапроса[НомерПакета];
	
	ДанныеРаздела = Новый Структура;
	ДанныеРаздела.Вставить("Количество", 0);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРаздела, Выборка);
	КонецЕсли;
	
	ДанныеДляВиджетов.Вставить(Раздел, ДанныеРаздела);
	
КонецПроцедуры

Процедура ПодготовитьДанныеДляВиджетаПоВыборкеСтатусов(ПараметрыФормирования, ДанныеДляВиджетов, Раздел)
	
	НомерПакета = ПараметрыФормирования.РазделыЗапросы.Получить(Раздел);
	Если НомерПакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПараметрыФормирования.РезультатЗапроса[НомерПакета];
	
	ДанныеРаздела = Новый Соответствие;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеРаздела.Вставить(Выборка.ТекущийСтатус, Выборка.Количество);
	КонецЦикла;
	
	ДанныеДляВиджетов.Вставить(Раздел, ДанныеРаздела);
	
КонецПроцедуры

Процедура ПодготовитьДанныеПоРезультатамЗапросаПоРазделуПоследниеСобытия(ПараметрыФормирования, ДанныеДляВиджетов, Раздел) 
	
	НомерПакета = ПараметрыФормирования.РазделыЗапросы.Получить(Раздел);
	Если НомерПакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПараметрыФормирования.РезультатЗапроса[НомерПакета];
	
	ДанныеДляВиджетов.Вставить(Раздел, РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ПодготовкаДанныхПоПравамДоступа

Процедура ПодготовитьДанныеРазделаПоПравуДоступа(ДанныеДляВиджетов, Раздел, ОбъектДоступа, ПравоДоступа)
	
	ЕстьПраво = Ложь;
	НастройкиУчета = НастройкиEDI.НастройкиУчета();
	
	Если ТипЗнч(ОбъектДоступа) = Тип("ОбъектМетаданных") Тогда
		
		Если ЭтоОпределяемыйТип(ОбъектДоступа) Тогда
			
			ЕстьПраво = ЕстьПравоДоступаОбъектуОпределяемогоТипа(ОбъектДоступа, ПравоДоступа);
			
		ИначеЕсли ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектДоступа)
			Или ОбщегоНазначения.ЭтоРегистрСведений(ОбъектДоступа) Тогда
			
			ЕстьПраво = ПравоДоступа(ПравоДоступа, ОбъектДоступа);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектДоступа) = Тип("ПеречислениеСсылка.ТипыДокументовEDI") Тогда
		
		ТипПрикладногоДокумента = НастройкиУчета.СоответствиеДокументовEDIПрикладнымОбъектам.Получить(ОбъектДоступа);
		Если ТипПрикладногоДокумента <> Неопределено Тогда
			
			ЕстьПраво = ПравоДоступаПоТипуМетаданных(ТипПрикладногоДокумента, ПравоДоступа);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеРаздела = Новый Структура;
	ДанныеРаздела.Вставить("ЕстьПраво", ЕстьПраво);
	
	ДанныеДляВиджетов.Вставить(Раздел, ДанныеРаздела);
	
КонецПроцедуры

Функция ВиджетыНеВключаемыеПоУмолчанию()
	
	МассивВиджетов = Новый Массив;
	
	МассивВиджетов.Добавить(Перечисления.ДоступныеВиджетыТекущихДелEDI.Продать);
	МассивВиджетов.Добавить(Перечисления.ДоступныеВиджетыТекущихДелEDI.НастройкиСправочники);
	
	Возврат МассивВиджетов;
	
КонецФункции

Функция МассивВиджетовЗакупки()
	
	МассивВиджетов = Новый Массив;
	
	ДобавитьВиджетВМассивЕслиДоступенПоПравам(МассивВиджетов, Перечисления.ДоступныеВиджетыТекущихДелEDI.Закупки);
	ДобавитьВиджетВМассивЕслиДоступенПоПравам(МассивВиджетов, Перечисления.ДоступныеВиджетыТекущихДелEDI.Купить);
	ДобавитьВиджетВМассивЕслиДоступенПоПравам(МассивВиджетов, Перечисления.ДоступныеВиджетыТекущихДелEDI.КонтрольПоступлений);
	
	Возврат МассивВиджетов;
	
КонецФункции

Функция МассивВиджетовПродажи()
	
	МассивВиджетов = Новый Массив;
	
	ДобавитьВиджетВМассивЕслиДоступенПоПравам(МассивВиджетов, Перечисления.ДоступныеВиджетыТекущихДелEDI.Продажи);
	ДобавитьВиджетВМассивЕслиДоступенПоПравам(МассивВиджетов, Перечисления.ДоступныеВиджетыТекущихДелEDI.КонтрольОтгрузок);
	
	Возврат МассивВиджетов;
	
КонецФункции

Функция МассивВиджетовПрочее()
	
	МассивВиджетов = Новый Массив;
	
	ДобавитьВиджетВМассивЕслиДоступенПоПравам(МассивВиджетов, Перечисления.ДоступныеВиджетыТекущихДелEDI.НастройкиСправочники);
	
	Возврат МассивВиджетов;
	
КонецФункции

Процедура ДобавитьВиджетВМассивЕслиДоступенПоПравам(МассивВиджетов, Виджет)
	
	Если ТекущиеДелаEDI.ВиджетДоступенПоПравам(Виджет) Тогда
		МассивВиджетов.Добавить(Виджет);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КлиентскаяБиблиотека

Функция ЭтоОпределяемыйТип(ОбъектМетаданных)
	
	ИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
	Позиция = СтрНайти(ИмяОбъектаМетаданных, ".");
	Если Позиция > 0 Тогда 
		ИмяБазовогоТипа = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		Возврат ИмяБазовогоТипа = "ОпределяемыйТип";
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЕстьПравоДоступаОбъектуОпределяемогоТипа(ОпределяемыйТип, ПравоДоступа)
	
	ЕстьПраво = Ложь;
	
	Для Каждого ДоступныйТип Из ОпределяемыйТип.Тип.Типы() Цикл
		
		ЕстьПраво = ПравоДоступаПоТипуМетаданных(ДоступныйТип, ПравоДоступа);
		
		Если ЕстьПраво Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьПраво;
	
КонецФункции

Функция ПравоДоступаПоТипуМетаданных(ТипМетаданных, ПравоДоступа)
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипМетаданных);
	Если МетаданныеТипа = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеТипа) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПравоДоступа(ПравоДоступа, МетаданныеТипа);
	
КонецФункции

#КонецОбласти

#КонецОбласти
