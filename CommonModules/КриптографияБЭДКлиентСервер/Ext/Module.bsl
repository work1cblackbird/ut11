#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкаКвалифицированногоСертификата

// Параметры:
//  ДвоичныеДанныеСертификата - ДвоичныеДанные
//  РезультатПроверкиСредствамиКриптографии - Строка, Булево -
//  Подпись - ДвоичныеДанные - данные подписи, указывается если сертификат проверяется в контексте проверки подписи
//                             (в таком случае при наличии меток доверенного времени проверки будут выполняться
//                             на дату подписания).
// 
// Возвращаемое значение:
//  Структура:
// * ДвоичныеДанныеСертификата - ДвоичныеДанные
// * РезультатПроверкиСредствамиКриптографии - Строка, Булево -
// * Подпись - Неопределено, ДвоичныеДанные - 
Функция НовыйКонтекстПроверкиКвалифицированногоСертификата(ДвоичныеДанныеСертификата, РезультатПроверкиСредствамиКриптографии, Подпись = Неопределено) Экспорт
	Возврат Новый Структура("ДвоичныеДанныеСертификата, РезультатПроверкиСредствамиКриптографии, Подпись",
		ДвоичныеДанныеСертификата, РезультатПроверкиСредствамиКриптографии, Подпись);
КонецФункции

// Параметры:
//  Сертификат - СертификатКриптографии
//  КонтекстПроверки - См. НовыйКонтекстПроверкиКвалифицированногоСертификата
// 
// Возвращаемое значение:
//  Структура:
//  * Протокол - См. ПротоколПроверкиКвалификацииСертификата
//  * Успех - Булево
Функция ПроверитьКвалифицировнныйСертификат(Сертификат, КонтекстПроверки) Экспорт
	Протокол = ПротоколПроверкиКвалификацииСертификата(Сертификат, КонтекстПроверки);
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Протокол", Протокол);
	РезультатПроверки.Вставить("Успех", ВсеКритерииКвалификацииПройдены(Протокол));
	Возврат РезультатПроверки;
КонецФункции

// Параметры:
//  Сертификат - СертификатКриптографии
//  Протокол - См. ПротоколПроверкиКвалификацииСертификата
// 
// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НоваяОшибка
Функция СформироватьОшибкуПоПротоколуПроверкиКвалификации(Сертификат, Протокол) Экспорт
	ЭтоПроверкаПодписи = Протокол.Контекст.Подпись <> Неопределено;
	Если ЭтоПроверкаПодписи Тогда
		Возврат СформироватьОшибкуПроверкиПодписи(Сертификат, Протокол);
	Иначе
		Возврат СформироватьОшибкуПроверкиСертификата(Сертификат, Протокол);
	КонецЕсли;
КонецФункции

#КонецОбласти //ПроверкаКвалифицированногоСертификата

// Возвращаемое значение:
//  См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиПодписьНеверна() Экспорт
	
	ВидОшибки = ВидОшибкиКриптография();
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Ложь;
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Не удалось обработать объект'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru = 'Объект содержит невалидные подписи'");
	ОписаниеРешения = НСтр("ru = '<a href = ""Выполните"">Выполните</a> диагностику криптографии. Если это не помогло решить проблему,
			|ознакомьтесь со статьями <a href = ""http://1c-edo.ru/handbook/24/2595/#1"">здесь</a> и <a href = ""https://its.1c.ru/db/metbud81#content:5784:hdoc"">здесь</a>.'");
	ВидОшибки.ОписаниеРешения = ОписаниеРешения;
	ВидОшибки.ОбработчикиНажатия.Вставить("Выполните", "ОбработкаНеисправностейБЭДКлиент.ОткрытьМастерДиагностики");
	
	Возврат ВидОшибки;
	
КонецФункции

// Возвращает сертификат подписавшей стороны из коллекции сертификатов, извлеченной из данных подписи. 
// Поиск происходит с учетом того, что CN Субъекта и Издателя могут быть равны.
//
// Параметры:
//  СертификатыПодписи - Массив из СертификатКриптографии - сертификаты, извлеченные из данных подписи,
//                                                          см. метод платформы ПолучитьСертификатыИзПодписи.
// 
// Возвращаемое значение:
// СертификатКриптографии, Неопределено - сертификат, с помощью которого была произведена подпись.
//
Функция СертификатПодписавшейСтороны(Знач СертификатыПодписи) Экспорт
	
	Возврат КриптографияБЭДСлужебныйКлиентСервер.НайтиСертификатПодписавшейСтороныРекурсивно(СертификатыПодписи);
	
КонецФункции

// Возвращает пустой результат получения отпечатков сертификатов.
// 
// Возвращаемое значение:
// 	Структура:
// * Отпечатки - Массив из Строка
// * Ошибка - Булево - при получении отпечатков произошла ошибка.
// * Доступность - Булево - используется ли криптография в контекстах: клиент, сервер, облачный сервис криптографии.
// * ТекстОшибки - Строка
Функция НовыйРезультатПолученияОтпечатков() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("Доступность", Ложь);
	Результат.Вставить("Отпечатки", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Возвращает результаты получения отпечатков сертификатов в контекстах: Клиент, Сервер, Облако.
// 
// Возвращаемое значение:
// 	Структура:
// * Клиент - Неопределено - получение отпечатков не выполнялось.
//          - см. НовыйРезультатПолученияОтпечатков
// * Сервер - Неопределено - получение отпечатков не выполнялось.
//          - см. НовыйРезультатПолученияОтпечатков
// * Облако - Неопределено - получение отпечатков не выполнялось.
//          - см. НовыйРезультатПолученияОтпечатков
Функция НовыеРезультатыПолученияОтпечатков() Экспорт
	
	Результаты = Новый Структура;
	Результаты.Вставить("Клиент", Неопределено);
	Результаты.Вставить("Сервер", Неопределено);
	Результаты.Вставить("Облако", Неопределено);
	
	Возврат Результаты;
	
КонецФункции

// Возвращает описание подписи.
// 
// Возвращаемое значение:
//  Структура:
//  * Подпись - ДвоичныеДанные
//  * Сертификат - ДвоичныеДанные
//  * Отпечаток - Строка
//  * КомуВыданСертификат - Строка
//  * УстановившийПодпись - СправочникСсылка.Пользователи
//  * ДатаПроверкиПодписи - Дата
//  * ПодписьВерна - Булево
//  * ИмяФайлаПодписи - Строка
//  * ДатаПодписи - Дата
//  * Комментарий - Строка
//  * ТипПодписи - ПеречислениеСсылка.ТипыЭлектроннойПодписи
//  * ПропуститьПриПродлении - Булево
//  * СрокДействияПоследнейМеткиВремени - Дата - срок действия сертификата, которым подписана
//                                    последняя метка времени (или пустая дата, если нет метки времени)
//  * ПорядковыйНомер - Число - идентификатор подписи, по которому можно упорядочивать их в списке.
//                      Не заполнен, если подпись не связана с объектом.
//  * ПодписанныйОбъект - ОпределяемыйТип.ПодписанныйОбъект - идентификатор подписи, по которому можно
//                        упорядочивать их в списке. Не заполнен, если подпись не связана с объектом.
//  * ОшибкаПриАвтоматическомПродлении - Булево - служебный, заполняется регламентным заданием.
//  * ОписаниеСертификата - Структура - свойство, требуемое для сертификатов, которые
//                          не могут быть переданы в метод платформы СертификатКриптографии, со свойствами:
//  ** СерийныйНомер - Строка - серийный номер сертификата, как у объекта платформы СертификатКриптографии.
//  ** КемВыдан      - Строка - как возвращает функция ПредставлениеИздателя.
//  ** КомуВыдан     - Строка - как возвращает функция ПредставлениеСубъекта.
//  ** ДатаНачала    - Строка - дата сертификата, как у объекта платформы СертификатКриптографии в формате "ДЛФ=D".
//  ** ДатаОкончания - Строка - дата сертификата, как у объекта платформы СертификатКриптографии в формате "ДЛФ=D".
//  * ДатаПодписиИзМетки - Дата, Неопределено - самый ранний штамп времени: CADES-T, если его нет, но есть другие штампы,
//               дата заполняется только с помощью менеджера криптографии.
//  * ТипПодписи  - ПеречислениеСсылка.ТипыПодписиКриптографии
Функция НовыеСвойстваПодписи() Экспорт
	
	СвойстваПодписи = Новый Структура;
	СвойстваПодписи.Вставить("Подпись");
	СвойстваПодписи.Вставить("Сертификат");
	СвойстваПодписи.Вставить("Отпечаток", "");
	СвойстваПодписи.Вставить("КомуВыданСертификат", "");
	СвойстваПодписи.Вставить("ДатаПодписи", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("ИмяФайлаПодписи", "");
	СвойстваПодписи.Вставить("ПодписьВерна", Ложь);
	СвойстваПодписи.Вставить("ДатаПроверкиПодписи", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("УстановившийПодпись",
		ПредопределенноеЗначение("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка"));
	СвойстваПодписи.Вставить("Комментарий", "");
	СвойстваПодписи.Вставить("ТипПодписи");
	СвойстваПодписи.Вставить("ПропуститьПриПродлении", Ложь);
	СвойстваПодписи.Вставить("СрокДействияПоследнейМеткиВремени");
	СвойстваПодписи.Вставить("ПорядковыйНомер");
	СвойстваПодписи.Вставить("ПодписанныйОбъект");
	СвойстваПодписи.Вставить("ОшибкаПриАвтоматическомПродлении");
	СвойстваПодписи.Вставить("ОписаниеСертификата");
	СвойстваПодписи.Вставить("ДатаПодписиИзМетки", Дата(1, 1, 1));
	СвойстваПодписи.Вставить("ТипПодписи", ПредопределенноеЗначение("Перечисление.ТипыПодписиКриптографии.ПустаяСсылка"));
	
	Возврат СвойстваПодписи;
	
КонецФункции

// Возвращает результат проверки подписи.
// 
// Возвращаемое значение:
//  Структура:
// * ОписаниеОшибки - Строка
// * ОшибкаИнициализацииПроверки - Булево
// * СвойстваПодписи - см. НовыеСвойстваПодписи
Функция НовыйРезультатПроверкиПодписи() Экспорт
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("ОписаниеОшибки", "");
	РезультатПроверки.Вставить("ОшибкаИнициализацииПроверки", Ложь);
	РезультатПроверки.Вставить("СвойстваПодписи", НовыеСвойстваПодписи());
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает структуру видов сертификатов электронной подписи.
// 
// Возвращаемое значение:
//  Структура:
//  * СертификатДолжностногоЛицаГосОрганаУЦ - Строка 
//  * СертификатЮЛ - Строка
//  * СертификатИП - Строка
//  * СертификатФЛ - Строка
//
Функция ВидыСертификатовЭлектроннойПодписи() Экспорт
	
	ВидыСертификатов = Новый Структура;

	ВидыСертификатов.Вставить("СертификатДолжностногоЛицаГосОрганаУЦ", 
		НСтр("ru = 'Сертификат должностного лица гос. органа, являющегося удостоверяющим центром'"));
	ВидыСертификатов.Вставить("СертификатЮЛ", НСтр("ru = 'Сертификат юридического лица'"));
	ВидыСертификатов.Вставить("СертификатИП", НСтр("ru = 'Сертификат индивидуального предпринимателя'"));
	ВидыСертификатов.Вставить("СертификатФЛ", НСтр("ru = 'Сертификат физического лица'"));
	
	Возврат ВидыСертификатов;
	
КонецФункции

#Область ОбработкаНеисправностей

// Возвращает вид ошибки, возникающей при проблемах с криптографией.
// 
// Возвращаемое значение:
// 	См. ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки
Функция ВидОшибкиКриптография() Экспорт
	
	ОбработчикВыполненияДиагностики = "ОбработкаНеисправностейБЭДКлиент.ОткрытьМастерДиагностики";
	
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "ОшибкаКриптографии";
	ВидОшибки.ВыполнятьОбработчикАвтоматически = Истина;
	ВидОшибки.АвтоматическиВыполняемыйОбработчик = ОбработчикВыполненияДиагностики;
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru = 'Ошибка криптографии'");
	ВидОшибки.ОписаниеРешения = НСтр("ru = '<a href = ""Выполните"">Выполните</a> диагностику криптографии'");
	ВидОшибки.ОбработчикиНажатия.Вставить("Выполните", ОбработчикВыполненияДиагностики);
	
	Возврат ВидОшибки;
	
КонецФункции

#КонецОбласти

#Область РасшифровкаНабораДанных

// Возвращаемое значение:
//  Структура:
//  * Сертификат - Неопределено,СправочникСсылка.СертификатыКлючейЭлектроннойПодписиИШифрования
//  * Данные - Неопределено,ДвоичныеДанные
Функция НовыеДанныеРасшифровки() Экспорт
	ДанныеРасшифровки = Новый Структура;
	ДанныеРасшифровки.Вставить("Сертификат", Неопределено);
	ДанныеРасшифровки.Вставить("Данные", Неопределено);
	Возврат ДанныеРасшифровки;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - Массив из см. НовыеДанныеРасшифровки
Функция НовыйНаборДанныхДляРасшифровки() Экспорт
	Возврат Новый Соответствие;
КонецФункции

// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - Строка
//  * Значение - см. НовыеДанныеРасшифровки
Функция НовыйНаборРасшифрованныхДанных() Экспорт
	Возврат Новый Соответствие;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеМетоды

Функция Граница(Значение, Включая = Истина)
	Возврат Новый Структура("Значение, Включая", Значение, Включая);
КонецФункции

Функция Отрезок(ЛевоеЗначение, ПравоеЗначение)
	Возврат Новый Структура("ЛеваяГраница, ПраваяГраница", Граница(ЛевоеЗначение), Граница(ПравоеЗначение));
КонецФункции

Функция ЗначениеЛежитНаПромежутке(Значение, Промежуток)
	ЗначениеПравееЛевойГраницы = Промежуток.ЛеваяГраница.Значение = Неопределено Или ?(Промежуток.ЛеваяГраница.Включая,
		Значение >= Промежуток.ЛеваяГраница.Значение, Значение > Промежуток.ЛеваяГраница.Значение);
	ЗначениеЛевееПравойГраницы = Промежуток.ПраваяГраница.Значение = Неопределено Или ?(
		Промежуток.ПраваяГраница.Включая, Значение <= Промежуток.ПраваяГраница.Значение, Значение
		< Промежуток.ПраваяГраница.Значение);
	Возврат ЗначениеПравееЛевойГраницы И ЗначениеЛевееПравойГраницы;
КонецФункции

Функция Вариант(Значение, АльтернативноеЗначение)
	Возврат ?(Значение = Неопределено, АльтернативноеЗначение, Значение);
КонецФункции

Функция МодульЭлектроннаяПодпись()
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ЭлектроннаяПодпись;
#Иначе
	Возврат ЭлектроннаяПодписьКлиент;
#КонецЕсли
КонецФункции

Функция МодульОбработкаНеисправностейБЭД()
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ОбработкаНеисправностейБЭД;
#Иначе
	Возврат ОбработкаНеисправностейБЭДКлиент;
#КонецЕсли
КонецФункции

Функция МодульЭлектроннаяПодписьПовторногоИспользования()
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Возврат ЭлектроннаяПодписьСлужебныйПовтИсп;
#Иначе
	Возврат ЭлектроннаяПодписьСлужебныйКлиентПовтИсп;
#КонецЕсли
КонецФункции

#КонецОбласти // ОбщиеМетоды

#Область ПроверкаКвалифицированногоСертификата

Функция ВидОшибкиПодписаниеНеквалифицированнымСертификатом()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НеквалифицированныйСертификат";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru='Сертификат не прошел проверку'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru='Документ нельзя подписать выбранным сертификатом'");
	ВидОшибки.ОписаниеРешения = НСтр("ru='Повторите подписание другим сертификатом.
									 |Используйте, например, сертификат физического лица и машиночитаемую доверенность
									 |или сертификат директора.'");
	Возврат ВидОшибки;
КонецФункции

Функция ВидОшибкиНеквалифицированнаяЭлектроннаяПодпись()
	ВидОшибки = ОбработкаНеисправностейБЭДКлиентСервер.НовоеОписаниеВидаОшибки();
	ВидОшибки.Идентификатор = "НеквалифицированнаяЭлектроннаяПодпись";
	ВидОшибки.ЗаголовокПроблемы = НСтр("ru='Подпись не прошла проверку'");
	ВидОшибки.ОписаниеПроблемы = НСтр("ru='Документ подписан неквалифицированным сертификатом'");
	ВидОшибки.ОписаниеРешения = НСтр("ru='Повторите подписание другим сертификатом.
									 |Используйте, например, сертификат физического лица и машиночитаемую доверенность
									 |или сертификат директора.'");
	Возврат ВидОшибки;
КонецФункции

Процедура ЗаполнитьОписаниеОшибкиПроваленнымиКритериями(ЧастиТекстаОшибки, Сертификат, Протокол,
	ФразаДатыПроверкиВВинительномПадеже)
	Критерии = Протокол.Критерии;
	Если Не Критерии.Общие.СертификатПроходитПроверкуМенеджераКриптографии Тогда
		ЧастиТекстаОшибки.Добавить(СтрШаблон(НСтр(
			"ru=' • сертификат не прошел проверку средствами криптографии:
			|	%1'"), Протокол.Контекст.РезультатПроверкиСредствамиКриптографии));
	КонецЕсли;

	Если Не Критерии.Общие.СертификатДействуетНаДатуПроверки Тогда
		ЧастиТекстаОшибки.Добавить(СтрШаблон(НСтр("ru=' • сертификат не действует на дату %1'"),
			ФразаДатыПроверкиВВинительномПадеже));
	КонецЕсли;

	Если Не Критерии.Общие.КлючЭлектроннойПодписиДействуетНаДатуПроверки Тогда
		ЧастиТекстаОшибки.Добавить(СтрШаблон(НСтр("ru=' • ключ электронной подписи не действует на дату %1'"),
			ФразаДатыПроверкиВВинительномПадеже));
	КонецЕсли;

	Если Не Критерии.Общие.АккредитацияУЦДействуетНаДатуПроверки Тогда
		ЧастиТекстаОшибки.Добавить(СтрШаблон(НСтр(
			"ru=' • удостоверяющий центр, выдавший сертификат, не аккредитован на дату %1';"),
			ФразаДатыПроверкиВВинительномПадеже));
	КонецЕсли;

	Если Не Критерии.Общие.АккредитацияУЦДействуетНаДатуВыдачиСертификата Тогда
		СвойстваСертификата = ДополнительныеСвойстваСертификата(Сертификат,
			Протокол.Контекст.ДвоичныеДанныеСертификата, Протокол.Контекст.Кеш);
		ЧастиТекстаОшибки.Добавить(СтрШаблон(НСтр(
			"ru=' • удостоверяющий центр, выдавший сертификат, не аккредитован на дату выдачи сертификата (%1)';"),
			ОбщегоНазначенияБЭДКлиентСервер.ДатаВремяБезСекунд(СвойстваСертификата.ДатаНачала)));
	КонецЕсли;

	Если ЗначениеЗаполнено(Критерии.ИндивидуальногоПредпринимателя) И Не Критерии.ИндивидуальногоПредпринимателя.ВыданОрганомИсполнительнойВласти
		Или ЗначениеЗаполнено(Критерии.РуководителяЮридическогоЛица) И Не Критерии.РуководителяЮридическогоЛица.ВыданОрганомИсполнительнойВласти
		Или ЗначениеЗаполнено(Критерии.ОбезличенногоСертификата)
		И Не Критерии.ОбезличенногоСертификата.ВыданОрганомИсполнительнойВласти Тогда
		ЧастиТекстаОшибки.Добавить(НСтр("ru=' • сертификат выдан коммерческим удостоверяющим центром'"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Критерии.СертификатаСотрудника) Тогда
		Если Не Критерии.СертификатаСотрудника.ВыданДо31082023 Тогда
			ЧастиТекстаОшибки.Добавить(СтрШаблон(НСтр(
				"ru=' • сертификат сотрудника выдан удостоверяющим центром после %1';"), Формат(Дата(2023, 8, 31),
				"ДЛФ=D;")));
		КонецЕсли;
		Если Не Критерии.СертификатаСотрудника.ИспользуетсяДо01092024 Тогда
			Шаблон = НСтр("ru=' • запрещено использование сертификата сотрудника после %1';");
			ЧастиТекстаОшибки.Добавить(СтрШаблон(Шаблон, Формат(Дата(2024, 9, 1), "ДЛФ=D")));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция СформироватьОшибкуПроверкиСертификата(Сертификат, Протокол)
	ЧастиТекстаОшибки = Новый Массив; // Массив Из Строка
	ЗаполнитьОписаниеОшибкиПроваленнымиКритериями(ЧастиТекстаОшибки, Сертификат, Протокол, НСтр("ru='проверки'"));
	ШаблонОшибки = НСтр("ru='Сертификат не признан квалифицированным на дату проверки %1 по %2:
						|%3'");
	ФразаПричиныВНужномЧисле = ?(ЧастиТекстаОшибки.Количество() = 1, НСтр("ru='причине'"), НСтр(
		"ru='следующим причинам'"));
	ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбщегоНазначенияБЭДКлиентСервер.ДатаВремяБезСекунд(Протокол.Контекст.ДатаПроверки), ФразаПричиныВНужномЧисле,
		СтрСоединить(ЧастиТекстаОшибки, Символы.ПС));
	ВидОперации = СтрШаблон(НСтр("ru='Проверка сертификата:
								 |%1'"), МодульЭлектроннаяПодпись().ПредставлениеСертификата(
		Сертификат));
	ВидОшибки = ВидОшибкиПодписаниеНеквалифицированнымСертификатом();
	Ошибка = МодульОбработкаНеисправностейБЭД().НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
	Возврат Ошибка;
КонецФункции

Функция СформироватьОшибкуПроверкиПодписи(Сертификат, Протокол)
	ЕстьМеткаВремени = Протокол.Контекст.ДостовернаяДатаПодписания <> Неопределено;
	ЧастиТекстаОшибки = Новый Массив; // Массив Из Строка
	ЗаполнитьОписаниеОшибкиПроваленнымиКритериями(ЧастиТекстаОшибки, Сертификат, Протокол, ?(ЕстьМеткаВремени, НСтр(
		"ru='подписания'"), НСтр("ru='проверки'")));
	Если ЕстьМеткаВремени Тогда
		ШаблонОшибки = НСтр("ru='Сертификат не признан квалифицированным на дату подписания %1 по %2:
							|%3'");
	Иначе
		ШаблонОшибки = НСтр("ru='Сертификат не признан квалифицированным на дату проверки* %1 по %2:
							|%3
							|
							|* действительность подписи вычисляется на дату проверки, так как момент подписания документа неопределен
							|(в данных подписи отсутствует метка доверенного времени)'");
	КонецЕсли;
	ФразаПричиныВНужномЧисле = ?(ЧастиТекстаОшибки.Количество() = 1, НСтр("ru='причине'"), НСтр(
		"ru='следующим причинам'"));
	ТекстОшибки = СтрШаблон(ШаблонОшибки, ОбщегоНазначенияБЭДКлиентСервер.ДатаВремяБезСекунд(Протокол.Контекст.ДатаПроверки), ФразаПричиныВНужномЧисле,
		СтрСоединить(ЧастиТекстаОшибки, Символы.ПС));
	ВидОперации = СтрШаблон(НСтр("ru='Проверка подписи, выполненной сертификатом:
								 |%1'"), МодульЭлектроннаяПодпись().ПредставлениеСертификата(
		Сертификат));
	ВидОшибки = ВидОшибкиНеквалифицированнаяЭлектроннаяПодпись();
	Ошибка = МодульОбработкаНеисправностейБЭД().НоваяОшибка(ВидОперации, ВидОшибки, ТекстОшибки, ТекстОшибки);
	Возврат Ошибка;
КонецФункции

Функция РазницаСУниверсальнымВременем()
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата();
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ДатаСеанса() - ОбщегоНазначенияКлиент.ДатаУниверсальная();
	#КонецЕсли
КонецФункции

Функция ДостовернаяДатаПодписания(Подпись)
	Если Подпись = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	СвойстваПодписи = ЭлектроннаяПодписьСлужебныйКлиентСервер.СвойстваПодписиИзДвоичныхДанных(Подпись, РазницаСУниверсальнымВременем());
	Возврат СвойстваПодписи.ДатаШтампаВремени;
КонецФункции

Функция ДополнительныеСвойстваСертификата(Сертификат, ДвоичныеДанныеСертификата, Кеш)
	Ключ = "ДополнительныеСвойстваСертификата";
	ДополнительныеСвойства = Кеш.Получить(Ключ);
	Если ДополнительныеСвойства = Неопределено Тогда
		ДополнительныеСвойства = ЭлектроннаяПодписьСлужебныйКлиентСервер.СвойстваСертификата(Сертификат,
			РазницаСУниверсальнымВременем(), ДвоичныеДанныеСертификата);
		Кеш.Вставить(Ключ, ДополнительныеСвойства);
	КонецЕсли;
	Возврат ДополнительныеСвойства;
КонецФункции

Функция ПериодДействияКлючаЭлектроннойПодписи(Сертификат, КонтекстПроверки)
	ДополнительныеСвойстваСертификата = ДополнительныеСвойстваСертификата(Сертификат, КонтекстПроверки.ДвоичныеДанныеСертификата, КонтекстПроверки.Кеш);
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДополнительныеСвойстваСертификата.ДатаНачалаЗакрытогоКлюча,
		ДополнительныеСвойстваСертификата.ДатаОкончанияЗакрытогоКлюча);
КонецФункции

Функция СертификатДействуетНаДату(Сертификат, ДатаПроверки, Контекст)
	ДополнительныеСвойстваСертификата = ДополнительныеСвойстваСертификата(Сертификат, Контекст.ДвоичныеДанныеСертификата, Контекст.Кеш);
	Возврат ЗначениеЛежитНаПромежутке(ДатаПроверки, Отрезок(ДополнительныеСвойстваСертификата.ДатаНачала, ДополнительныеСвойстваСертификата.ДатаОкончания));
КонецФункции

Функция КлючЭлектроннойПодписиДействуетНаДату(Сертификат, ДатаПроверки, Контекст)
	ПериодКлюча = ПериодДействияКлючаЭлектроннойПодписи(Сертификат, Контекст);
	Возврат ЗначениеЛежитНаПромежутке(ДатаПроверки, Отрезок(ПериодКлюча.ДатаНачала, ПериодКлюча.ДатаОкончания));
КонецФункции

Функция ДанныеУдостоверяющегоЦентра(Сертификат, Кеш)
	Ключ = "ДанныеУдостоверяющегоЦентра";
	ДанныеУдостоверяющегоЦентра = Кеш.Получить(Ключ);
	Если ДанныеУдостоверяющегоЦентра = Неопределено Тогда
		ДанныеДляПроверкиУЦ = ЭлектроннаяПодписьКлиентСерверЛокализация.ДанныеДляПроверкиУдостоверяющегоЦентра(
			Сертификат);
		ДанныеУдостоверяющегоЦентра = МодульЭлектроннаяПодписьПовторногоИспользования().ДанныеУдостоверяющегоЦентра(
			ДанныеДляПроверкиУЦ.ЗначенияПоиска);
		Кеш.Вставить(Ключ, ДанныеУдостоверяющегоЦентра);
	КонецЕсли;
	Возврат ДанныеУдостоверяющегоЦентра;
КонецФункции

Функция ПериодыДействияУЦ(Сертификат, Контекст)
	ДанныеУЦ = ДанныеУдостоверяющегоЦентра(Сертификат, Контекст.Кеш);
	Если ДанныеУц = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Возврат ДанныеУЦ.ПериодыДействия;
КонецФункции

Функция АккредитацияУЦДействуетНаДату(Сертификат, ДатаПроверки, Контекст)
	ПериодыДействияУЦ = ПериодыДействияУЦ(Сертификат, Контекст);
	Для Каждого Период Из ПериодыДействияУЦ Цикл
		Если ЗначениеЛежитНаПромежутке(ДатаПроверки, Отрезок(Период.ДатаС, Период.ДатаПо)) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция ПроверитьОбщиеКритерииКвалификацииСертификата(Сертификат, Контекст)
	ОбщиеКритерии = Новый Структура;
	Попытка
		ОбщиеКритерии.Вставить("СертификатПроходитПроверкуМенеджераКриптографии", Контекст.РезультатПроверкиСредствамиКриптографии = Истина);
	Исключение
		ОбщиеКритерии.Вставить("СертификатПроходитПроверкуМенеджераКриптографии", Ложь);
	КонецПопытки;

	ОбщиеКритерии.Вставить("СертификатДействуетНаДатуПроверки", СертификатДействуетНаДату(Сертификат,
		Контекст.ДатаПроверки, Контекст));
	ОбщиеКритерии.Вставить("КлючЭлектроннойПодписиДействуетНаДатуПроверки", КлючЭлектроннойПодписиДействуетНаДату(
		Сертификат, Контекст.ДатаПроверки, Контекст));
	ДополнительныеСвойстваСертификата = ДополнительныеСвойстваСертификата(Сертификат, Контекст.ДвоичныеДанныеСертификата, Контекст.Кеш);
	ОбщиеКритерии.Вставить("АккредитацияУЦДействуетНаДатуВыдачиСертификата", АккредитацияУЦДействуетНаДату(Сертификат,
		ДополнительныеСвойстваСертификата.ДатаНачала, Контекст));
	ОбщиеКритерии.Вставить("АккредитацияУЦДействуетНаДатуПроверки", АккредитацияУЦДействуетНаДату(Сертификат,
		Контекст.ДатаПроверки, Контекст));
	Возврат ОбщиеКритерии;
КонецФункции

Функция СвойстваСубъектаСертификата(Сертификат, Кеш)
	Ключ = "СвойстваСубъектаСертификата";
	СвойстваСубъектаСертификата = Кеш.Получить(Ключ);
	Если СвойстваСубъектаСертификата = Неопределено Тогда
		СвойстваСубъектаСертификата = МодульЭлектроннаяПодпись().СвойстваСубъектаСертификата(Сертификат);
		Кеш.Вставить(Ключ, СвойстваСубъектаСертификата);
	КонецЕсли;
	Возврат СвойстваСубъектаСертификата;
КонецФункции

Функция ЭтоСертификатФизическогоЛица(Сертификат, Контекст)
	СвойстваСубъекта = СвойстваСубъектаСертификата(Сертификат, Контекст.Кеш);
	Возврат Не ЗначениеЗаполнено(СвойстваСубъекта.ОГРНИП) И Не ЗначениеЗаполнено(СвойстваСубъекта.ОГРН);
КонецФункции

Функция ПроверитьКритерииКвалификацииСертификатаФизическогоЛица(Сертификат, Контекст)
	КритерииСертификатаФизическогоЛица = Новый Структура;
	Если ЭтоСертификатФизическогоЛица(Сертификат, Контекст) Тогда
		ДополнительныеСвойстваСертификата = ДополнительныеСвойстваСертификата(Сертификат,
			Контекст.ДвоичныеДанныеСертификата, Контекст.Кеш);
		КритерииСертификатаФизическогоЛица.Вставить("ВыданАккредитованнымУЦ", АккредитацияУЦДействуетНаДату(Сертификат,
			ДополнительныеСвойстваСертификата.ДатаНачала, Контекст));
	КонецЕсли;
	Возврат КритерииСертификатаФизическогоЛица;
КонецФункции

Функция ИздательГосударственныйУЦ(Сертификат, Контекст)
	ДанныеУЦ = ДанныеУдостоверяющегоЦентра(Сертификат, Контекст.Кеш);
	Возврат ДанныеУЦ.Государственный;
КонецФункции

Функция ЭтоСертификатРуководителяЮридическогоЛица(Сертификат, Контекст)
	СвойстваСубъекта = СвойстваСубъектаСертификата(Сертификат, Контекст.Кеш);
	Возврат ЗначениеЗаполнено(СвойстваСубъекта.ОГРН) И ЗначениеЗаполнено(СвойстваСубъекта.Фамилия)
		И ИздательГосударственныйУЦ(Сертификат, Контекст);
КонецФункции

Функция ПроверитьКритерииКвалификацииСертификатаРуководителяЮридическогоЛица(Сертификат, Контекст)
	КритерииСертификатаЮридическогоЛица = Новый Структура;
	Если ЭтоСертификатРуководителяЮридическогоЛица(Сертификат, Контекст) Тогда
		КритерииСертификатаЮридическогоЛица.Вставить("ВыданОрганомИсполнительнойВласти", ИздательГосударственныйУЦ(
			Сертификат, Контекст));
	КонецЕсли;
	Возврат КритерииСертификатаЮридическогоЛица;
КонецФункции

Функция ЭтоСертификатИндивидуальногоПредпринимателя(Сертификат, Контекст)
	СвойстваСубъекта = СвойстваСубъектаСертификата(Сертификат, Контекст.Кеш);
	Возврат ЗначениеЗаполнено(СвойстваСубъекта.ОГРНИП) И ИздательГосударственныйУЦ(Сертификат, Контекст);
КонецФункции

Функция ПроверитьКритерииКвалификацииСертификатаИндивидуальногоПредпринимателя(Сертификат, Контекст)
	КритерииСертификатаИндивидуальногоПредпринимателя = Новый Структура;
	Если ЭтоСертификатИндивидуальногоПредпринимателя(Сертификат, Контекст) Тогда
		КритерииСертификатаИндивидуальногоПредпринимателя.Вставить("ВыданОрганомИсполнительнойВласти",
			ИздательГосударственныйУЦ(Сертификат, Контекст));
	КонецЕсли;
	Возврат КритерииСертификатаИндивидуальногоПредпринимателя;
КонецФункции

Функция ЭтоОбезличенныйСертификат(Сертификат, Контекст)
	СвойстваСубъекта = СвойстваСубъектаСертификата(Сертификат, Контекст.Кеш);
	Возврат ЗначениеЗаполнено(СвойстваСубъекта.ОГРН) И Не ЗначениеЗаполнено(СвойстваСубъекта.Фамилия);
КонецФункции

Функция ПроверитьКритерииКвалификацииОбезличенногоСертификата(Сертификат, Контекст)
	КритерииОбезличенногоСертификата = Новый Структура;
	Если ЭтоОбезличенныйСертификат(Сертификат, Контекст) Тогда
		КритерииОбезличенногоСертификата.Вставить("ВыданОрганомИсполнительнойВласти", ИздательГосударственныйУЦ(
			Сертификат, Контекст));
	КонецЕсли;
	Возврат КритерииОбезличенногоСертификата;
КонецФункции

Функция ЭтоСертификатСотрудника(Сертификат, Контекст)
	СвойстваСубъекта = СвойстваСубъектаСертификата(Сертификат, Контекст.Кеш);
	Возврат ЗначениеЗаполнено(СвойстваСубъекта.ОГРН) И ЗначениеЗаполнено(СвойстваСубъекта.Фамилия)
		И Не ИздательГосударственныйУЦ(Сертификат, Контекст);
КонецФункции

Функция СертификатВыданДо(Сертификат, Дата, Контекст)
	ДополнительныеСвойстваСертификата = ДополнительныеСвойстваСертификата(Сертификат, Контекст.ДвоичныеДанныеСертификата, Контекст.Кеш);
	Возврат ЗначениеЛежитНаПромежутке(ДополнительныеСвойстваСертификата.ДатаНачала, Отрезок(Неопределено, Дата));
КонецФункции

Функция СертификатИспользуетсяДо(Сертификат, Дата, Контекст)
	Возврат ЗначениеЛежитНаПромежутке(Контекст.ДатаПроверки, Отрезок(Неопределено, Дата));
КонецФункции

Функция ПроверитьКритерииКвалификацииСертификатаСотрудника(Сертификат, Контекст)
	КритерииСертификатаСотрудника = Новый Структура;
	Если ЭтоСертификатСотрудника(Сертификат, Контекст) Тогда
		КритерииСертификатаСотрудника.Вставить("ВыданДо31082023", СертификатВыданДо(Сертификат, Дата(2023, 8, 31),
			Контекст));
		КритерииСертификатаСотрудника.Вставить("ИспользуетсяДо01092024", СертификатИспользуетсяДо(Сертификат, Дата(
			2024, 9, 1), Контекст));
	КонецЕсли;
	Возврат КритерииСертификатаСотрудника;
КонецФункции

// Параметры:
//  Сертификат - См. ПроверитьКвалифицировнныйСертификат.Сертификат
//  КонтекстПроверки - См. ПроверитьКвалифицировнныйСертификат.КонтекстПроверки
// 
// Возвращаемое значение:
//  Структура:
// * Контекст - Структура:
// ** ДостовернаяДатаПодписания - Дата - Если проверка в контексте подписи и в подписи есть метка времени
//                              - Неопределено - Если проверка вне контектса подписи или в подписи нет метки времени
// ** ДатаПроверки - Дата - ДостоваренаяДатаПодписания если в подписи есть метка времени или текущая дата сеанса 
// ** Подпись - ДвоичныеДанные, Неопределено -
// ** ДвоичныеДанныеСертификата - ДвоичныеДанные
// ** РезультатПроверкиСредствамиКриптографии - Булево, Строка - 
// ** Кеш - Соответствие Из КлючИЗначение- служебное поле
// * Критерии - Структура:
// ** Общие - Структура:
// *** СертификатПроходитПроверкуМенеджераКриптографии - Булево 
// *** СертификатДействуетНаДатуПроверки - Булево
// *** КлючЭлектроннойПодписиДействуетНаДатуПроверки - Булево
// *** АккредитацияУЦДействуетНаДатуВыдачиСертификата - Булево
// *** АккредитацияУЦДействуетНаДатуПроверки - Булево
// ** ФизическогоЛица - Структура - пустая структура, если сертификат не являеся сертификатом ФЛ
//                    - Структура:
// *** ВыданАккредитованнымУЦ - Булево
// ** РуководителяЮридическогоЛица - Структура - пустая структура, если сертификат не является сертификатом ЮЛ
//                                 - Структура:
// *** ВыданОрганомИсполнительнойВласти - Булево 
// ** ИндивидуальногоПредпринимателя - Структура - пустая структура, если сертификат не является сертификатом ИП
//                                   - Структура:
// *** ВыданОрганомИсполнительнойВласти - Булево
// ** ОбезличенногоСертификата - Структура - пустая структура, если если сертификат не является обезличенным
//                             - Структура:
// *** ВыданОрганомИсполнительнойВласти - Булево
// ** СертификатаСотрудника - Структура - пустая структура, если сертификат не является сертификатом сотрудника
//                          - Структура:
// *** ВыданДо31082023 - Булево
// *** ИспользуетсяДо01092024 - Булево
Функция ПротоколПроверкиКвалификацииСертификата(Сертификат, КонтекстПроверки)
	Контекст = Новый Структура;
	Контекст.Вставить("ДостовернаяДатаПодписания", ДостовернаяДатаПодписания(КонтекстПроверки.Подпись));
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Контекст.Вставить("ДатаПроверки", Вариант(Контекст.ДостовернаяДатаПодписания, ТекущаяДатаСеанса()));
#Иначе
	Контекст.Вставить("ДатаПроверки", Вариант(Контекст.ДостовернаяДатаПодписания, ОбщегоНазначенияКлиент.ДатаСеанса()));
#КонецЕсли
	Контекст.Вставить("РезультатПроверкиСредствамиКриптографии", КонтекстПроверки.РезультатПроверкиСредствамиКриптографии);
	Контекст.Вставить("Подпись", КонтекстПроверки.Подпись);
	Контекст.Вставить("ДвоичныеДанныеСертификата", КонтекстПроверки.ДвоичныеДанныеСертификата);
	Контекст.Вставить("Кеш", Новый Соответствие);

	Критерии = Новый Структура;
	Критерии.Вставить("Общие", ПроверитьОбщиеКритерииКвалификацииСертификата(Сертификат, Контекст));
	Критерии.Вставить("ФизическогоЛица", ПроверитьКритерииКвалификацииСертификатаФизическогоЛица(Сертификат, Контекст));
	Критерии.Вставить("РуководителяЮридическогоЛица",
		ПроверитьКритерииКвалификацииСертификатаРуководителяЮридическогоЛица(Сертификат, Контекст));
	Критерии.Вставить("ИндивидуальногоПредпринимателя",
		ПроверитьКритерииКвалификацииСертификатаИндивидуальногоПредпринимателя(Сертификат, Контекст));
	Критерии.Вставить("ОбезличенногоСертификата", ПроверитьКритерииКвалификацииОбезличенногоСертификата(Сертификат,
		Контекст));
	Критерии.Вставить("СертификатаСотрудника", ПроверитьКритерииКвалификацииСертификатаСотрудника(Сертификат, Контекст));

	Протокол = Новый Структура;
	Протокол.Вставить("Контекст", Контекст);
	Протокол.Вставить("Критерии", Критерии);
	Возврат Протокол;
КонецФункции

// Параметры:
//  Протокол - См. ПротоколПроверкиКвалификацииСертификата
// 
// Возвращаемое значение:
//  Булево
Функция ВсеКритерииКвалификацииПройдены(Протокол)
	Для Каждого ИмяИНаборКритериев Из Протокол.Критерии Цикл
		НаборКритериев = ИмяИНаборКритериев.Значение;
		Для Каждого ИмяИЗначениеКритерия Из НаборКритериев Цикл
			ЗначениеКритерия = ИмяИЗначениеКритерия.Значение;
			Если ЗначениеКритерия = Ложь Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
КонецФункции

#КонецОбласти //ПроверкаКвалифицированногоСертификата

#КонецОбласти // СлужебныеПроцедурыИФункции
