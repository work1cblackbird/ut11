
#Область ПрограммныйИнтерфейс

#Область ФискальныеОперации

// Инициирует структуру данных электронного чека
// 
// Возвращаемое значение:
// 	Структура - Описание: Структура данных электронного чека
Функция СтруктураДанныеФискальнойОперации() Экспорт
	
	ДанныеФискальнойОперации = Новый Структура;
	ДанныеФискальнойОперации.Вставить("ОтправлятьEmailЧерезОФД",          Константы.ОтправлятьЭлектронныеЧекиПоEmailЧерезОФД.Получить());
	ДанныеФискальнойОперации.Вставить("ОтправлятьSMSЧерезОФД",            Константы.ОтправлятьЭлектронныеЧекиПоSMSЧерезОФД.Получить());
	ДанныеФискальнойОперации.Вставить("НеПечататьФискальныйЧек",          ПолучитьФункциональнуюОпцию("НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателю"));
	ДанныеФискальнойОперации.Вставить("ОтправительEmail");
	ДанныеФискальнойОперации.Вставить("ВариантОтправкиЭлектронногоЧека");
	ДанныеФискальнойОперации.Вставить("КонтактныеДанныеЭлектронногоЧека");
	
	ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации);
	
	Возврат ДанныеФискальнойОперации;
	
КонецФункции

Процедура ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации) Экспорт
	
	ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ПустаяСсылка();
	ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = "";
	
КонецПроцедуры

// Возвращает версию ФФД ККТ
// 
// Параметры:
//  ИдентификаторУстройства - Строка - Идентификатор устройства
// 
// Возвращаемое значение:
//  Строка -- Версия ФФДККТ
Функция ВерсияФФДККТ(ИдентификаторУстройства) Экспорт
	
	ПараметрыРегистрацииУстройства = ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
	
	ВерсияФФДФН = "";
	Если ТипЗнч(ПараметрыРегистрацииУстройства) = Тип("Структура")
		И ПараметрыРегистрацииУстройства.Свойство("ВерсияФФДФН") Тогда
		
		ВерсияФФДФН = ПараметрыРегистрацииУстройства.ВерсияФФДФН;
	КонецЕсли;
	
	Возврат ВерсияФФДФН;
	
КонецФункции

// Возвращает статус, можно ли указывать в документе маркированные товары без кодов маркировки
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ссылка
// 
// Возвращаемое значение:
//  Булево - Истина, допустимы марикрованные товары без марок в документе
Функция ДопустимыТоварыБезМарокВДокументе(ДокументСсылка) Экспорт
	
	ДопустимыТоварыБезМарокДляДокумента = Ложь;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
		
		ДопустимыТоварыБезМарокДляДокумента = Истина;
	КонецЕсли;
	
	Возврат ДопустимыТоварыБезМарокДляДокумента;
	
КонецФункции

// Возвращает наименование торгового объекта. Если параметр ТорговыйОбъект заполнен, возвращается наименование торгового
// объекта, иначе возвращается сокращенное наименование организации.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация
//  ТорговыйОбъект - СправочникСсылка.Склады, Неопределено - Торговый объект
// 
// Возвращаемое значение:
//  Произвольный - Торговый объект ККТ
Функция ТорговыйОбъектККТ(Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	ТорговыйОбъектНаименование = "";
	Если ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		ТорговыйОбъектНаименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТорговыйОбъект, "Наименование");
	Иначе
		СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ТекущаяДатаСеанса());
		ТорговыйОбъектНаименование = СведенияОЮрФизЛице.СокращенноеНаименование;
	КонецЕсли;
	
	Возврат ТорговыйОбъектНаименование;
	
КонецФункции

// Возвращает место расчетов ККТ.
// 
// Параметры:
//  ОборудованиеККТ - СправочникСсылка.ПодключаемоеОборудование - Оборудование ККТ
// 
// Возвращаемое значение:
//  Строка - Место расчетов ККТ
Функция МестоРасчетовККТ(ОборудованиеККТ) Экспорт
	
	ТорговыйОбъектМестоРасчетов = "";
	
	ПараметрыРегистрацииККТ = ОборудованиеЧекопечатающиеУстройства.ПараметрыРегистрацииУстройства(ОборудованиеККТ);
	Если ТипЗнч(ПараметрыРегистрацииККТ) = Тип("Структура") Тогда
		Если ПараметрыРегистрацииККТ.Свойство("МестоПроведенияРасчетов") Тогда
			ТорговыйОбъектМестоРасчетов = ПараметрыРегистрацииККТ.МестоПроведенияРасчетов;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТорговыйОбъектМестоРасчетов;
	
КонецФункции

// Возвращает адрес расчетов ККТ. Если параметры регистрации кассы содержат адрес проведения расчетов, то 
// возвращается адрес проведения расчетов, иначе возвращается фактический адрес организации. 
// 
// Параметры:
//  ОборудованиеККТ - СправочникСсылка.ПодключаемоеОборудование - Оборудование ККТ
//  Организация - СправочникСсылка.Организации - Организация
// 
// Возвращаемое значение:
//  Строка - Адрес расчетов ККТ
Функция АдресРасчетовККТ(ОборудованиеККТ, Организация) Экспорт
	
	ТорговыйОбъектАдресРасчетов = "";
	
	ПараметрыРегистрацииККТ = ОборудованиеЧекопечатающиеУстройства.ПараметрыРегистрацииУстройства(ОборудованиеККТ);
	Если ТипЗнч(ПараметрыРегистрацииККТ) = Тип("Структура") Тогда
		Если ПараметрыРегистрацииККТ.Свойство("АдресПроведенияРасчетов") Тогда
			ТорговыйОбъектАдресРасчетов = ПараметрыРегистрацииККТ.АдресПроведенияРасчетов;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТорговыйОбъектАдресРасчетов) Тогда
		СведенияОЮрФизЛице = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Организация, ТекущаяДатаСеанса());
		ТорговыйОбъектАдресРасчетов = СведенияОЮрФизЛице.ФактическийАдрес;
	КонецЕсли;
	
	Возврат ТорговыйОбъектАдресРасчетов;
	
КонецФункции

// Возвращает код единицы измерения
// 
// Параметры:
//  ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения, Строка, Неопределено - Единица измерения
// 
// Возвращаемое значение:
//  Строка - Код единицы измерения параметра чека
Функция КодЕдиницыИзмеренияПараметраЧека(ЕдиницаИзмерения) Экспорт
	
	КодЕдиницыИзмерения = "";
	
	Если ТипЗнч(ЕдиницаИзмерения) = Тип("Строка")
		И ЕдиницаИзмерения = "шт." Тогда
		
		КодЕдиницыИзмерения = "796";
		
	ИначеЕсли ТипЗнч(ЕдиницаИзмерения) = Тип("СправочникСсылка.УпаковкиЕдиницыИзмерения")
		И НЕ ЕдиницаИзмерения.Пустая() Тогда
		
		ЕдиницаИзмеренияКлассификатора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "ЕдиницаИзмерения");
		Если ЕдиницаИзмеренияКлассификатора.Пустая() Тогда
			ЕдиницаИзмеренияКлассификатора = ЕдиницаИзмерения;
		КонецЕсли;
		КодЕдиницыИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмеренияКлассификатора, "Код");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодЕдиницыИзмерения) Тогда
		КодЕдиницыИзмерения = "796";
	КонецЕсли;
	
	Возврат СокрЛП(КодЕдиницыИзмерения);
	
КонецФункции

// Возвращает гражданство покупателя по паспорту.
// 
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
//  НаДату - Дата, Неопределено - На дату
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира - гражданство покупателя
Функция ПокупательГражданство(ФизическоеЛицо, НаДату = Неопределено) Экспорт
	
	ПокупательГражданство = Справочники.СтраныМира.ПустаяСсылка();
	НаДату = ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату);
	
	КодыМВД = Новый Массив;
	КодыМВД.Добавить("10");
	КодыМВД.Добавить("21");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВидыДокументовФизическихЛиц
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|ГДЕ
	|	ВидыДокументовФизическихЛиц.КодМВД В(&КодыМВД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.СтранаВыдачи КАК Страна
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаСреза, Физлицо = &ФизЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка";
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(НаДату));
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("КодыМВД", КодыМВД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПокупательГражданство = Выборка.Страна;
	КонецЕсли;
	
	Возврат ПокупательГражданство;
	
КонецФункции

// Возвращает дату рождения физического лица
// 
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
// 
// Возвращаемое значение:
//  Строка - дата рождения покупателя
Функция ПокупательДатаРождения(ФизическоеЛицо) Экспорт
	
	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ДатаРождения"));
	
КонецФункции

// Возвращает ИНН физического лица
// 
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
// 
// Возвращаемое значение:
//  Строка - ИНН покупателя
Функция ПокупательИНН(ФизическоеЛицо) Экспорт
	
	Возврат СокрЛП(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФизическоеЛицо, "ИНН"));
	
КонецФункции

// Возвращает паспортные данные покупателя одной строкой.
// 
// Параметры:
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - Физическое лицо
//  НаДату - Дата, Неопределено - На дату
// 
// Возвращаемое значение:
//  Строка - паспортные данные покупателя
Функция ПокупательПаспортныеДанные(ФизическоеЛицо, НаДату = Неопределено) Экспорт
	
	ПокупательПерсональныеДанные = "";
	НаДату = ?(НаДату = Неопределено, ТекущаяДатаСеанса(), НаДату);
	
	КодыМВД = Новый Массив;
	КодыМВД.Добавить("10");
	КодыМВД.Добавить("21");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДокументовФизическихЛиц.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВидыДокументовФизическихЛиц
	|ИЗ
	|	Справочник.ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|ГДЕ
	|	ВидыДокументовФизическихЛиц.КодМВД В(&КодыМВД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛицСрезПоследних.Период КАК Период,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия КАК СрокДействия,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения КАК КодПодразделения,
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность КАК ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК Представление,
	|	ДокументыФизическихЛицСрезПоследних.УдалитьВидДокумента КАК УдалитьВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.ФамилияЛатиницей КАК ФамилияЛатиницей,
	|	ДокументыФизическихЛицСрезПоследних.ИмяЛатиницей КАК ИмяЛатиницей,
	|	ДокументыФизическихЛицСрезПоследних.СтранаВыдачи КАК СтранаВыдачи
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаСреза, Физлицо = &ФизЛицо) КАК ДокументыФизическихЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВидыДокументовФизическихЛиц КАК ВидыДокументовФизическихЛиц
	|		ПО ДокументыФизическихЛицСрезПоследних.ВидДокумента = ВидыДокументовФизическихЛиц.Ссылка";
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(НаДату));
	Запрос.УстановитьПараметр("ФизЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("КодыМВД", КодыМВД);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПокупательПерсональныеДанные = СокрЛП(Выборка.Серия) + " " + СокрЛП(Выборка.Номер) + " " + СокрЛП(Выборка.КемВыдан)
			+ " " + Формат(Выборка.ДатаВыдачи, НСтр("ru='ДФ=dd.MM.yyyy'")) + " " + Формат(Выборка.СрокДействия, НСтр("ru='ДФ=dd.MM.yyyy'"));
	КонецЕсли;
	
	Возврат ПокупательПерсональныеДанные;
	
КонецФункции

// Возвращает статус является ли покупатель физическим лицом.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент
// 
// Возвращаемое значение:
//  Булево - Истина, если покупатель это физическое лицо
Функция ПокупательФизическоеЛицо(Контрагент) Экспорт
	
	КонтрагентЮрФизЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ЮрФизЛицо");
	Возврат КонтрагентЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	
КонецФункции


// Записывает объект формы, 
// 
// Параметры:
//  Форма - РасширениеУправляемойФормыДляОбъектов -
//  ПараметрыФискализации - Структура -
//  ПараметрыЗаписи - Структура -
//  
// Возвращаемое значение:
//  Булево - 
//
Функция ЗаписатьФискальнуюОперациюНаСервере(Форма, ПараметрыФискализации, ПараметрыЗаписи) Экспорт
	
	УспешноЗаписанДокумент = Истина;
	Результат = Истина;
	УстановитьПривилегированныйРежим(Истина);
	
	Объект = Форма.Объект; // ДокументОбъект
	Объект.Дата = ТекущаяДатаСеанса();
	
	МетаданныеОбъекта = Объект.Ссылка.Метаданные();
	ЭтоЧекККМКоррекции = (ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЧекККМКоррекции"));
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = МетаданныеОбъекта.ПолноеИмя();
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратПодарочныхСертификатов")
			Или ТипЗнч(Объект.Ссылка) = Тип("ДокументССылка.РеализацияПодарочныхСертификатов") Тогда
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		КонецЕсли;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		
		НужноЗаписатьФискальнуюОперацию = Ложь;
		НужноЗаписатьФискальнуюОперациюКоррекции = Ложь;
		Если ПараметрыФискализации <> Неопределено Тогда
			Если Не ПараметрыФискализации.ОперацияЗаписана Тогда
				НужноЗаписатьФискальнуюОперацию = Истина;
				Если ЗначениеЗаполнено(ПараметрыФискализации.ДокументОснование) Тогда
					ЭлементБлокировки = Блокировка.Добавить();
					ЭлементБлокировки.Область = "РегистрСведений.ФискальныеОперации";
					
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВозвратПодарочныхСертификатов")
						Или ТипЗнч(Объект.Ссылка) = Тип("ДокументССылка.РеализацияПодарочныхСертификатов") Тогда
							ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					КонецЕсли;
					
					ЭлементБлокировки.УстановитьЗначение("ДокументОснование", ПараметрыФискализации.ДокументОснование);
				КонецЕсли;
			КонецЕсли;
			Если ЭтоЧекККМКоррекции = Истина
				И ПараметрыФискализации.Свойство("ЧекКоррекцииСторно") 
				И ЗначениеЗаполнено(ПараметрыФискализации.ЧекКоррекцииСторно)
				И Не ПараметрыФискализации.ЧекКоррекцииСторно.ОперацияЗаписана Тогда
					НужноЗаписатьФискальнуюОперациюКоррекции = Истина;
					Если ЗначениеЗаполнено(ПараметрыФискализации.ЧекКоррекцииСторно.ДокументОснование) Тогда
						ЭлементБлокировки = Блокировка.Добавить();
						ЭлементБлокировки.Область = "РегистрСведений.ФискальныеОперации";
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						ЭлементБлокировки.УстановитьЗначение("ДокументОснование", ПараметрыФискализации.ЧекКоррекцииСторно.ДокументОснование);
					КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		Блокировка.Заблокировать();
		
		Если НужноЗаписатьФискальнуюОперацию Тогда
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации);
		КонецЕсли;
		
		Если НужноЗаписатьФискальнуюОперациюКоррекции Тогда
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ЗаписатьФискальнуюОперацию(ПараметрыФискализации.ЧекКоррекцииСторно);
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыЗаписи) <> Тип("Структура") 
			Или ПараметрыЗаписи.Количество() = 0 Тогда
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Оперативный);
			ПараметрыЗаписи.Вставить("РежимТранзакции", Истина);
		КонецЕсли;
		
		УспешноЗаписанДокумент = Форма.Записать(ПараметрыЗаписи);
		
		РозничныеПродажиЛокализация.ЗаписатьФискальнуюОперацию(Форма, ПараметрыФискализации, ПараметрыЗаписи, УспешноЗаписанДокумент);
		
		Если Не УспешноЗаписанДокумент Тогда
			Если ЭтоЧекККМКоррекции Тогда
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать документ: %1'"), Объект.Ссылка);
				ВызватьИсключение ОписаниеОшибки;
			Иначе
				ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Данные фискальной операции записаны, не удалось записать документ: %1'"), Объект.Ссылка);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		МассивСтрокОписанияОшибки = Новый Массив();
		Если Не УспешноЗаписанДокумент И ЭтоЧекККМКоррекции Тогда
			МассивСтрокОписанияОшибки.Добавить(ИнформацияОбОшибке.Описание);
		Иначе
			МассивСтрокОписанияОшибки.Добавить(НСтр("ru = 'При записи документа %1 произошла ошибка.'"));
		КонецЕсли;
		Если НужноЗаписатьФискальнуюОперацию Тогда
			МассивСтрокОписанияОшибки.Добавить(НСтр("ru = 'Данные фискальной операции не записаны.'"));
		КонецЕсли;
		Если НужноЗаписатьФискальнуюОперациюКоррекции Тогда
			МассивСтрокОписанияОшибки.Добавить(НСтр("ru = 'Данные сторно фискальной операции не записаны.'"));
		КонецЕсли;
		Если УспешноЗаписанДокумент Или Не ЭтоЧекККМКоррекции Тогда
			МассивСтрокОписанияОшибки.Добавить(НСтр("ru = 'Дополнительное описание:
							|%2'"));
		КонецЕсли;
		ОписаниеОшибки = СтрСоединить(МассивСтрокОписанияОшибки, Символы.ПС);
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, Объект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПроцедурыВнесенияИВыемкиДС

// Создает документ ВнесениеДенежныхСредствВКассуККМ.
//
// Параметры:
//  ВходныеДанные - Структура - Структура данных с реквизитами создаваемого документа.
//
// Возвращаемое значение:
//  ДокументСсылка.ВнесениеДенежныхСредствВКассуККМ - Созданный документ.
//
Функция СоздатьДокументВнесениеДенежныхСредствВКассуККМ(ВходныеДанные) Экспорт
	
	НовыйДокумент = Документы.ВнесениеДенежныхСредствВКассуККМ.СоздатьДокумент();
	
	НовыйДокумент.Дата              = ТекущаяДатаСеанса();
	НовыйДокумент.Организация       = ВходныеДанные.Организация;
	НовыйДокумент.Касса             = ВходныеДанные.Касса;
	НовыйДокумент.КассаККМ          = ВходныеДанные.КассаККМ;
	НовыйДокумент.СуммаДокумента    = ВходныеДанные.СуммаДокумента;
	НовыйДокумент.Валюта            = ВходныеДанные.Валюта;
	НовыйДокумент.ДокументОснование = ВходныеДанные.ДокументОснование;
	НовыйДокумент.Кассир            = Пользователи.ТекущийПользователь();
	
	НовыйДокумент.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(НовыйДокумент.Организация);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

// Создает документ ВыемкаДенежныхСредствИзКассыККМ.
//
// Параметры:
//  ВходныеДанные - Структура - Структура данных с реквизитами создаваемого документа.
//
// Возвращаемое значение:
//  ДокументСсылка.ВыемкаДенежныхСредствИзКассыККМ - Созданный документ.
//
Функция СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(ВходныеДанные) Экспорт
	
	НовыйДокумент = Документы.ВыемкаДенежныхСредствИзКассыККМ.СоздатьДокумент();
	
	НовыйДокумент.Дата           = ТекущаяДатаСеанса();
	НовыйДокумент.Организация    = ВходныеДанные.Организация;
	НовыйДокумент.Валюта         = ВходныеДанные.Валюта;
	НовыйДокумент.КассаККМ       = ВходныеДанные.КассаККМ;
	НовыйДокумент.СуммаДокумента = ВходныеДанные.СуммаДокумента;
	НовыйДокумент.Кассир         = Пользователи.ТекущийПользователь();
	
	НовыйДокумент.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(НовыйДокумент.Организация);
	НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Перегруппировать кнопки формы
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
//  ЭлементыНаПерегруппировку - Массив из КнопкаФормы - Массив элементов формы на перегруппировку.
//
Процедура ПерегруппироватьКнопкиФормы(Форма, ЭлементыНаПерегруппировку) Экспорт
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельОперацииНадЧеком",   Новый Массив);
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельКонтекстныеКоманды", Новый Массив);
	Соответствие.Вставить("ГруппаНижняяКоманднаяПанельОплата",             Новый Массив);
	
	УдаленныеЭлементы = Новый Массив;
	Для Каждого Элемент Из ЭлементыНаПерегруппировку Цикл
		Если УдаленныеЭлементы.Найти(ЭлементыНаПерегруппировку.Найти(Элемент)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// Удаление добавленных ранее элементов формы
		Декорация = Форма.Элементы.Найти(Элемент.Имя + "Декорация" + "Дубль");
		Если Декорация <> Неопределено Тогда
			Индекс = ЭлементыНаПерегруппировку.Найти(Декорация);
			Если Индекс <> Неопределено Тогда
				УдаленныеЭлементы.Добавить(Индекс);
			КонецЕсли;
			Форма.Элементы.Удалить(Декорация);
		КонецЕсли;
		Если СтрЗаканчиваетсяНа(Элемент.Имя, "ДекорацияДубль") Тогда
			Форма.Элементы.Удалить(Элемент);
			Продолжить;
		КонецЕсли;
		Для Каждого КлючИЗначение Из Соответствие Цикл
			Если Найти(Элемент.Родитель.Имя, КлючИЗначение.Ключ) Тогда
				КлючИЗначение.Значение.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Соответствие Цикл
	
		Индекс = 0;
		НомерГруппы = 1;
		ИзмененыЭлементы = Ложь;
		Для Каждого Элемент Из КлючИЗначение.Значение Цикл
			
			Форма.Элементы.Переместить(Элемент, Форма.Элементы[КлючИЗначение.Ключ + НомерГруппы]);
			
			Если Не Элемент.Видимость Тогда
				Продолжить;
			КонецЕсли;
			
			ИзмененыЭлементы = Истина;
			Индекс = 1 - Индекс;
			Если Индекс = 0 Тогда
				НомерГруппы = НомерГруппы + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзмененыЭлементы И Индекс = 1 Тогда
			СозданныйЭлемент = ДобавитьЭлемент(Форма, Элемент.Имя + "ДекорацияДубль", КлючИЗначение.Ключ, НомерГруппы);
			СозданныйЭлемент.ИмяКоманды = Элемент.ИмяКоманды;
			СозданныйЭлемент.Ширина = Элемент.Ширина;
			СозданныйЭлемент.Высота = Элемент.Высота;
			СозданныйЭлемент.ЦветФона = Элемент.ЦветФона;
			СозданныйЭлемент.Видимость = Истина;
			СозданныйЭлемент.Доступность = Ложь;
			СозданныйЭлемент.Заголовок = " ";
		КонецЕсли;
		
		Если Не ИзмененыЭлементы Тогда
			Дельта = 0;
		Иначе
			Дельта = 1;
		КонецЕсли;
		
		Если НомерГруппы < 4 Тогда
			Для Индекс = НомерГруппы + Дельта По 4 Цикл
				ИмяЭлемента = КлючИЗначение.Ключ + Индекс;
				Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
					Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НомерГруппы + Дельта = 1 Тогда
			Если КлючИЗначение.Ключ = "ГруппаНижняяКоманднаяПанельОперацииНадЧеком" Тогда
				ИмяЭлемента = "РазделительГруппаНижняяКоманднаяПанельОперацииНадЧеком";
			ИначеЕсли КлючИЗначение.Ключ = "ГруппаНижняяКоманднаяПанельКонтекстныеКоманды" Тогда
				ИмяЭлемента = "РазделительГруппаНижняяКоманднаяПанельКонтекстныеКоманды";
			ИначеЕсли КлючИЗначение.Ключ = "ГруппаНижняяКоманднаяПанельОплата" Тогда
				ИмяЭлемента = "РазделительГруппаНижняяКоманднаяПанельОплата";
			КонецЕсли;
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Элементы, ИмяЭлемента) Тогда
				Форма.Элементы[ИмяЭлемента].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоместитьКомандыПечатиВоВсеДействия(ГруппаФормы, КнопкиПечати)
	
	Для Каждого КнопкаПечати Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(КнопкаПечати) = Тип("ГруппаФормы") Тогда
			ПоместитьКомандыПечатиВоВсеДействия(КнопкаПечати, КнопкиПечати);
		Иначе
			КнопкиПечати.Добавить(КнопкаПечати);
			КнопкаПечати.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Настроить команды печати
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//  ГруппаКоманд - ГруппаКоманд
//
Процедура НастроитьКомандыПечати(Форма, ГруппаКоманд) Экспорт
	
	КнопкиПечати = Новый Массив;
	ПоместитьКомандыПечатиВоВсеДействия(ГруппаКоманд, КнопкиПечати);
	
	КомандыПечати = Новый Массив;
	Для Каждого КнопкаПечати Из КнопкиПечати Цикл
		КомандаФормы = Форма.Команды[КнопкаПечати.ИмяКоманды]; // КомандаФормы
		КомандыПечати.Добавить(
			Новый Структура("Заголовок, ИмяКоманды", КомандаФормы.Заголовок, КнопкаПечати.ИмяКоманды));
	КонецЦикла;
	Форма.АдресКомандПечатиВоВременномХранилище = ПоместитьВоВременноеХранилище(КомандыПечати, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

// Настроить быстрые товары и горячие клавиши
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  Выборка - ВыборкаИзРезультатаЗапроса
//
Процедура НастроитьБыстрыеТоварыИГорячиеКлавиши(Форма, Выборка) Экспорт
	
	Если Форма.ГорячиеКлавишиНастроены Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "БыстрыеТовары")
		И Форма.БыстрыеТовары.Количество() = 0 Тогда
		
		ВыборкаБыстрыеТовары = Выборка.БыстрыеТовары; // ХранилищеЗначения
		БыстрыеТовары = ВыборкаБыстрыеТовары.Получить(); // ТаблицаЗначений - см. Справочники.ГорячиеКлавиши.ФормаЭлемента.БыстрыеТовары
		
		Если БыстрыеТовары.Количество() > 0 Тогда
			
			Для Каждого СтрокаТЧ Из БыстрыеТовары Цикл
				
				Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					
					ИмяКнопки = "БыстрыйТовар_" + БыстрыеТовары.Индекс(СтрокаТЧ);
					
					НоваяКоманда = Форма.ЭтотОбъект.Команды.Добавить(ИмяКнопки);
					НоваяКоманда.Действие = "ВыбранБыстрыйТовар";
					Если ЗначениеЗаполнено(СтрокаТЧ.Заголовок) Тогда
						НоваяКоманда.Заголовок = СтрокаТЧ.Заголовок;
					Иначе
						НоваяКоманда.Заголовок = Строка(СтрокаТЧ.Номенклатура);
					КонецЕсли;
					НоваяКоманда.Отображение               = ОтображениеКнопки.Текст;
					НоваяКоманда.ИзменяетСохраняемыеДанные = Истина;
					НоваяКоманда.СочетаниеКлавиш           = Новый СочетаниеКлавиш(Клавиша[СтрокаТЧ.Клавиша], СтрокаТЧ.Alt, СтрокаТЧ.Ctrl, СтрокаТЧ.Shift);
					
					НоваяКнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Форма.Элементы.ФормаГорячиеКлавишиБыстрыеТовары);
					НоваяКнопка.ТолькоВоВсехДействиях = Истина;
					НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
					
					НовыйТовар = Форма.БыстрыеТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НовыйТовар, СтрокаТЧ);
					НовыйТовар.ИмяКоманды = НоваяКоманда.Имя;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗапросДополнительныеДанныеОБыстрыхТоварах = Новый Запрос(
			"ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура
			|ПОМЕСТИТЬ Товары
			|ИЗ
			|	&Товары КАК Товары
			|;
			|ВЫБРАТЬ
			|	Товары.Номенклатура КАК Номенклатура,
			|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры
			|ИЗ
			|	Товары КАК Товары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
			|		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка");
			
			ЗапросДополнительныеДанныеОБыстрыхТоварах.УстановитьПараметр("Товары", Форма.БыстрыеТовары.Выгрузить(,"Номенклатура"));
			
			ВыборкаДополнительныеДанныеОБыстрыхТоварах = ЗапросДополнительныеДанныеОБыстрыхТоварах.Выполнить().Выбрать();
			
			Пока ВыборкаДополнительныеДанныеОБыстрыхТоварах.Следующий() Цикл
				
				Отбор = Новый Структура("Номенклатура", ВыборкаДополнительныеДанныеОБыстрыхТоварах.Номенклатура);
				НайденныеСтрокиБыстрыеТовары = Форма.БыстрыеТовары.НайтиСтроки(Отбор);
				Для Каждого СтрокаБыстрогоТовара Из НайденныеСтрокиБыстрыеТовары Цикл
					СтрокаБыстрогоТовара.ТипНоменклатуры = ВыборкаДополнительныеДанныеОБыстрыхТоварах.ТипНоменклатуры;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормыСКомандами = Новый ТаблицаЗначений;
	ЭлементыФормыСКомандами.Колонки.Добавить("Элемент");
	ЭлементыФормыСКомандами.Колонки.Добавить("ИмяКоманды");
	Для каждого ЭлементФормы Из Форма.Элементы Цикл
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ЭлементФормы, "ИмяКоманды") И ЗначениеЗаполнено(ЭлементФормы.ИмяКоманды) Тогда
			НоваяСтрока = ЭлементыФормыСКомандами.Добавить();
			НоваяСтрока.Элемент = ЭлементФормы;
			НоваяСтрока.ИмяКоманды = ЭлементФормы.ИмяКоманды;
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаКомандыФормы = Выборка.КомандыФормы; // ХранилищеЗначения
	КомандыФормы = ВыборкаКомандыФормы.Получить(); // ТаблицаЗначений - см. Справочники.ГорячиеКлавиши.ФормаЭлемента.КомандыФормы
	Для Каждого СтрокаТЧ Из КомандыФормы Цикл
		
		Команда = Форма.Команды.Найти(СтрокаТЧ.Команда);
		Если Команда = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовоеСочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша[СтрокаТЧ.Клавиша], СтрокаТЧ.Alt, СтрокаТЧ.Ctrl, СтрокаТЧ.Shift);
		СтароеСочетаниеКлавишПредставление = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(Команда.СочетаниеКлавиш);
		НовоеСочетаниеКлавишПредставление  = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(НовоеСочетаниеКлавиш);
		
		НоваяКоманда = Команда;
		Если НовоеСочетаниеКлавишПредставление <> СтароеСочетаниеКлавишПредставление Тогда
			
			НоваяКоманда = Форма.ЭтотОбъект.Команды.Добавить(СтрокаТЧ.Команда + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_"));
			НоваяКоманда.Действие                  = Команда.Действие;
			НоваяКоманда.ИзменяетСохраняемыеДанные = Команда.ИзменяетСохраняемыеДанные;
			НоваяКоманда.Картинка                  = Команда.Картинка;
			НоваяКоманда.Отображение               = Команда.Отображение;
			НоваяКоманда.Подсказка                 = Команда.Подсказка;
			НоваяКоманда.Заголовок                 = СтрЗаменить(Команда.Заголовок, СтароеСочетаниеКлавишПредставление, НовоеСочетаниеКлавишПредставление);
			НоваяКоманда.СочетаниеКлавиш           = НовоеСочетаниеКлавиш;
			
			НайденныеЭлементыФормы = ЭлементыФормыСКомандами.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
			Для Каждого ЭлементФормы Из НайденныеЭлементыФормы Цикл
				ЭлементФормы.ИмяКоманды = НоваяКоманда.Имя;
				ЭлементФормы.Элемент.ИмяКоманды = НоваяКоманда.Имя;
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаТЧ.Скрывать Тогда
			
			НайденныеЭлементыФормы = ЭлементыФормыСКомандами.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
			Для Каждого ЭлементФормы Из НайденныеЭлементыФормы Цикл
				ЭлементФормы.Элемент.Видимость = Ложь;
			КонецЦикла;
			
			ИмяКнопки = "ГорячаяКлавиша_" + КомандыФормы.Индекс(СтрокаТЧ);
			
			НоваяКнопка = Форма.Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Форма.Элементы.ФормаГорячиеКлавиши);
			НоваяКнопка.ТолькоВоВсехДействиях = Истина;
			НоваяКнопка.ИмяКоманды = НоваяКоманда.Имя;
			НоваяКоманда.Заголовок = СтрЗаменить(Команда.Заголовок, СтароеСочетаниеКлавишПредставление, "");
			НоваяКоманда.Заголовок = СокрЛП(НоваяКоманда.Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ГорячиеКлавишиНастроены = Истина;
	
КонецПроцедуры

// Процедура - Подписать горячие клавиши на кнопках
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма.
//
Процедура ПодписатьГорячиеКлавишиНаКнопках(Форма) Экспорт
	
	Для каждого Команда Из Форма.Команды Цикл
		ПодписатьГорячуюКлавишуНаКнопке(Команда);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Подписать комбинацию горячих клавиш на кнопке
//
// Параметры:
//  Команда - ОбъектМетаданныхКоманда - команда формы.
//
Процедура ПодписатьГорячуюКлавишуНаКнопке(Команда) Экспорт
	
	ПредставлениеСочетанияКлавиш = ОбщегоНазначенияУТ.ПредставлениеСочетанияКлавиш(Команда.СочетаниеКлавиш);
	Если СтрНайти(Команда.Заголовок, ПредставлениеСочетанияКлавиш) = 0 Тогда
		Команда.Заголовок = Команда.Заголовок + Символы.ПС + ПредставлениеСочетанияКлавиш;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает ссылку на документ Отчет о розничных продажах по чеку
//
// Параметры:
//  ЧекККМ  - ДокументСсылка.ЧекККМ - Чек ККМ, для которого требуется получить отчет о розничных продажах.
//
// Возвращаемое значение:
//   ДокументСсылка.ОтчетОРозничныхПродажах - Найденный документ или пустая ссылка на отчет о розничных продажах.
//
Функция ПолучитьОтчетОРозничныхПродажахПоЧекуККМ(ЧекККМ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ЧекККМ.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка
	|	И ЧекККМ.НалогообложениеНДС =  ОтчетОРозничныхПродажах.НалогообложениеНДС";
	
	Запрос.УстановитьПараметр("Ссылка", ЧекККМ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументРеализации;
	Иначе
		Возврат Документы.ОтчетОРозничныхПродажах.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Процедура проверяет заполнение табличной части "ОплатаПлатежнымиКартами".
//
// Параметры:
//  Объект - ДокументОбъект - Текущий документ.
//  Отказ - Булево - Признак отказа от проведения документа.
//
Процедура ПроверитьЗаполнениеОплатыПлатежнымиКартами(Объект, Отказ) Экспорт
	
	КлючДанных = Объект;
	Если Объект.ДополнительныеСвойства.Свойство("ПрограммноеЗаполнение") И Объект.ДополнительныеСвойства.ПрограммноеЗаполнение = Истина Тогда
		КлючДанных = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхВозвратах") 
		Или ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда

		СуммаОплатыПлатежнымиКартами = Объект.ОплатаПлатежнымиКартами.Итог("Сумма");
		Если Объект.ОплатаПлатежнымиКартами.Количество() > 0
			И СуммаОплатыПлатежнымиКартами <> 0
			И СуммаОплатыПлатежнымиКартами > ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС) Тогда
			
			ТекстОшибки = НСтр("ru='Сумма оплаты платежными картами превышает сумму документа'");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, КлючДанных, "ОплатаПлатежнымиКартами", , Отказ);
			ЗаписьВЖурналРегистрации(ТекстОшибки, "ПроверитьЗаполнениеОплатыПлатежнымиКартами", Объект.Ссылка);
			
		КонецЕсли;
				
	КонецЕсли;
	
	ИмяТабличнойЧастиОплатаПлатежнымиКартами = Объект.Метаданные().ТабличныеЧасти.ОплатаПлатежнымиКартами.Синоним;
	
	Для Каждого СтрокаТЧ Из Объект.ОплатаПлатежнымиКартами Цикл
		
		Если (ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхВозвратах")
			Или ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах"))
			И Не ЗначениеЗаполнено(СтрокаТЧ.ВидОплаты) Тогда
			
			Текст = НСтр("ru = 'В строке %НомерСтроки% табличной части ""%ИмяТабличнойЧасти%"" необходимо указать вид оплаты.'");
			Текст = СтрЗаменить(Текст, "%НомерСтроки%",       СтрокаТЧ.НомерСтроки);
			Текст = СтрЗаменить(Текст, "%ИмяТабличнойЧасти%", ИмяТабличнойЧастиОплатаПлатежнымиКартами);
			
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				КлючДанных,
				?(КлючДанных=Неопределено, "", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОплатаПлатежнымиКартами", СтрокаТЧ.НомерСтроки, "ВидОплаты")),
				,
				Отказ);
		
		КонецЕсли;
	
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ЭквайринговыйТерминал)
			И (СтрокаТЧ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.ПлатежнаяКарта
			Или СтрокаТЧ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.СертификатНСПК) Тогда
			
			Текст = НСтр("ru='В строке %НомерСтроки% табличной части ""%ИмяТабличнойЧасти%"" необходимо указать эквайринговый терминал.'");
			Текст = СтрЗаменить(Текст, "%НомерСтроки%",       СтрокаТЧ.НомерСтроки);
			Текст = СтрЗаменить(Текст, "%ИмяТабличнойЧасти%", ИмяТабличнойЧастиОплатаПлатежнымиКартами);
			
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				КлючДанных,
				?(КлючДанных=Неопределено, "", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОплатаПлатежнымиКартами", СтрокаТЧ.НомерСтроки, "ЭквайринговыйТерминал")),
				,
				Отказ);
			
		КонецЕсли;

		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМ") 
			Или ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМВозврат")
			Или ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекККМКоррекции")
			Или ТипЗнч(Объект) = Тип("ДокументОбъект.РеализацияПодарочныхСертификатов")
			Или ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхВозвратах")
			Или ТипЗнч(Объект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ДоговорПодключения)
				И СтрокаТЧ.ВидОплаты = Перечисления.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей Тогда
				
				Текст = НСтр("ru='В строке %НомерСтроки% табличной части ""%ИмяТабличнойЧасти%"" необходимо указать договор подключения.'");
				Текст = СтрЗаменить(Текст, "%НомерСтроки%",       СтрокаТЧ.НомерСтроки);
				Текст = СтрЗаменить(Текст, "%ИмяТабличнойЧасти%", ИмяТабличнойЧастиОплатаПлатежнымиКартами);
			
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					КлючДанных,
					?(КлючДанных=Неопределено, "", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОплатаПлатежнымиКартами", СтрокаТЧ.НомерСтроки, "ДоговорПодключения")),
					,
					Отказ);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура дополняет обработку проверки заполнения.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  Отказ - Булево - Признак отказа от проведения документа
//  ПроверяемыеРеквизиты - Массив Из Строка - 
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт

	Объект = Форма.Объект;
	Если ТипЗнч(Объект.Ссылка) = Тип("СправочникСсылка.Партнеры") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов")
		И Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов <> Неопределено Тогда
		
		Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо")
			 И ЗначениеЗаполнено(Объект.ВариантОтправкиЭлектронногоЧека)
			 И Не Объект.ВариантОтправкиЭлектронногоЧека = ПредопределенноеЗначение("Перечисление.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять") Тогда
			 
			КонтактнаяИнформацияДляПроверки = Новый Соответствие;
			Для Каждого СтрокаКонтактнойИнформации Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
				Если СтрокаКонтактнойИнформации.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты")
					И Не ПустаяСтрока(СтрокаКонтактнойИнформации.Представление) Тогда
					КонтактнаяИнформацияДляПроверки.Вставить(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"),СтрокаКонтактнойИнформации.Представление);
				ИначеЕсли СтрокаКонтактнойИнформации.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") 
					И Не ПустаяСтрока(СтрокаКонтактнойИнформации.Представление) Тогда
					КонтактнаяИнформацияДляПроверки.Вставить(ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"),СтрокаКонтактнойИнформации.Представление);
		    	КонецЕсли;
			КонецЦикла;

			РозничныеПродажиКлиентСервер.ПроверитьУказаниеКонтактнойИнформацииПартнера(Объект.ВариантОтправкиЭлектронногоЧека, КонтактнаяИнформацияДляПроверки, Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

// Выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура АрхивированиеЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АрхивированиеЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.СтатусРегламентныхОпераций В (ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчет))
	|");
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное архивирование чеков ККМ.'"));
			
		ПараметрыЗадания = НовыйПараметрыЗаданияЗакрытияКассовойСмены();
		ПараметрыЗадания.КассоваяСмена = Результат.Выгрузить().ВыгрузитьКолонку("КассоваяСмена");
		ПараметрыЗадания.ПоказатьОшибкуПользователю = Ложь;
		
		ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончено регламентное архивирование чеков ККМ.'"));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет удаление чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Дата < &ДатаХраненияЧеков
	|	И КассоваяСмена.СтатусРегламентныхОпераций В (ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчет),
	|                                                 ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы))
	|";
	
	КоличествоДнейХраненияЧеков = Константы.КоличествоДнейХраненияЗаархивированныхЧеков.Получить() * 86400;
	ДатаХраненияЧеков = ТекущаяДатаСеанса() - КоличествоДнейХраненияЧеков;
	
	Запрос.УстановитьПараметр("ДатаХраненияЧеков", ДатаХраненияЧеков);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Начато регламентное удаление чеков ККМ.'"));
		
		ПараметрыЗадания = НовыйПараметрыЗаданияЗакрытияКассовойСмены();
		ПараметрыЗадания.КассоваяСмена = Результат.Выгрузить().ВыгрузитьКолонку("КассоваяСмена");
		ПараметрыЗадания.ПоказатьОшибкуПользователю = Ложь;
		
		ВыполнитьУдалениеЧековККМ(ПараметрыЗадания);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация, , ,
			НСтр("ru = 'Закончено регламентное удаление чеков ККМ.'"));
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет архивирование чеков ККМ с регистрацией события в журнале регистрации.
// Вызывается регламентным заданием.
//
Процедура УдалениеОтложенныхЧековККМ() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалениеОтложенныхЧековККМ);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Начато регламентное удаление отложенных чеков ККМ.'"));
	
	НачатьТранзакцию();
	Попытка
		
		Выборка = ВыбратьОтложенныеЧекиККМДляУдаления();
		Пока Выборка.Следующий() Цикл
			
			ЧекККМОбъект = Выборка.Ссылка.ПолучитьОбъект(); // ДокументОбъект
			ЧекККМОбъект.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		                         УровеньЖурналаРегистрации.Ошибка, , ,
		                         НСтр("ru = 'Во время регламентного удаления отложенных чеков ККМ произошла ошибка.'")
		                         + Символы.ПС + ПодробноеПредставлениеОшибки);
		Возврат;
		
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление отложенных чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
	                         УровеньЖурналаРегистрации.Информация, , ,
	                         НСтр("ru = 'Закончено регламентное удаление отложенных чеков ККМ.'"));
	
КонецПроцедуры

// Выполняет архивацию чеков ККМ по кассовой смене.
//
// Параметры:
//  ПараметрыЗадания  - см. НовыйПараметрыЗаданияЗакрытияКассовойСмены
//  АдресХранилища - Строка - Адрес во временном хранилище.
//  ВключатьНепроведенныеЧеки - Булево - По умолчанию - ложь.
//
Процедура ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания, АдресХранилища="", ВключатьНепроведенныеЧеки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМ.Ссылка КАК Ссылка,
	|	ЧекККМ.КассоваяСмена КАК КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	НЕ ЧекККМ.Архивный
	|	И (ЧекККМ.Проведен
	|		ИЛИ &ВключатьНепроведенныеЧеки)
	|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМ.КассоваяСмена В(&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозврат.Ссылка,
	|	ЧекККМВозврат.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
	|ГДЕ
	|	НЕ ЧекККМВозврат.Архивный
	|	И (ЧекККМВозврат.Проведен
	|		ИЛИ &ВключатьНепроведенныеЧеки)
	|	И ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМВозврат.КассоваяСмена В(&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМКоррекции.Ссылка КАК Ссылка,
	|	ЧекККМКоррекции.КассоваяСмена КАК КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
	|ГДЕ
	|	НЕ ЧекККМКоррекции.Архивный
	|	И (ЧекККМКоррекции.Проведен
	|		ИЛИ &ВключатьНепроведенныеЧеки)
	|	И ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМКоррекции.КассоваяСмена В(&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОтчетОРозничныхВозвратах.Ссылка, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхВозвратах.ПустаяСсылка)) КАК Ссылка,
	|	ДокументКассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК ДокументКассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|		ПО ДокументКассоваяСмена.Ссылка = ОтчетОРозничныхВозвратах.КассоваяСмена
	|ГДЕ
	|	ДокументКассоваяСмена.Ссылка В (&КассоваяСмена)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)) КАК Ссылка,
	|	ДокументКассоваяСмена.Ссылка КАК КассоваяСмена
	|ИЗ
	|	Документ.КассоваяСмена КАК ДокументКассоваяСмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ДокументКассоваяСмена.Ссылка = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ДокументКассоваяСмена.Ссылка В (&КассоваяСмена)
	|
	|ИТОГИ ПО
	|	КассоваяСмена");
	
	Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыЗадания.КассоваяСмена);
	Запрос.УстановитьПараметр("ВключатьНепроведенныеЧеки", ВключатьНепроведенныеЧеки);
	ВыборкаКассовыхСмен = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКассовыхСмен.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Отказ = Ложь;
			
			// Первый этап. Статус смены - Закрыта, чеки заархивированы.
			КассоваяСменаОбъект = ВыборкаКассовыхСмен.КассоваяСмена.ПолучитьОбъект(); // ДокументОбъект.КассоваяСмена
			КассоваяСменаОбъект.СтатусРегламентныхОпераций = Перечисления.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы;
			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			// Второй этап. Архивирование чеков и полное проведение отчета о розничных продажах и отчета о розничных возвратах.
			ВыборкаДокументов = ВыборкаКассовыхСмен.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				
				БлокировкаДанных = Новый БлокировкаДанных;
				ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ДенежныеСредстваВКассахККМ.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ДенежныеСредстваВПути.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаДокументов.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				БлокировкаДанных.Заблокировать();
				
			КонецЦикла;
			
			ВыборкаДокументов.Сбросить();
			Пока ВыборкаДокументов.Следующий() Цикл
				Если НЕ ВыборкаДокументов.Ссылка.Пустая() Тогда
					ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
					Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ")
						ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМВозврат")
						ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМКоррекции") Тогда
						
						ДокументОбъект.Архивный = Истина;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						
					ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") 
							Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхВозвратах") Тогда

						// При выполнении операции автоматического архивирования чеков контролировать обеспечение не нужно. 
                        Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
							ДокументОбъект.ДополнительныеСвойства.Вставить("КонтролироватьОбеспечение", Ложь);
						КонецЕсли;

						ДокументОбъект.ПометкаУдаления = Ложь;
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
				ИначеЕсли Не ТипЗнч(ВыборкаДокументов.Ссылка) = Тип("ДокументСсылка.ОтчетОРозничныхВозвратах") Тогда
					Отказ = Истина;
					ОписаниеОшибки = НСтр("ru = 'По документу %КассоваяСмена% не создано документов %Синоним%'",  ОбщегоНазначения.КодОсновногоЯзыка());
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КассоваяСмена%", ВыборкаДокументов.КассоваяСмена);
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Синоним%", ВыборкаДокументов.Ссылка.Метаданные().Синоним);
					ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка, , ,
							НСтр("ru = 'Во время регламентного архивирования чеков ККМ произошла ошибка.'", ОбщегоНазначения.КодОсновногоЯзыка())
							+ Символы.ПС + ОписаниеОшибки);
					Если ПараметрыЗадания.ПоказатьОшибкуПользователю Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
					КонецЕсли;
				КонецЕсли
			КонецЦикла;
			
			Если Отказ Тогда
				ОтменитьТранзакцию();
				Результат = Ложь;
				
				Если ТранзакцияАктивна() Тогда
					ВызватьИсключение ОписаниеОшибки;
				КонецЕсли; 
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Архивирование чеков ККМ'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка, , ,
					ПодробноеПредставлениеОшибки);
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение ПодробноеПредставлениеОшибки;
			КонецЕсли; 
			
			Результат = Ложь;
			
			Если ПараметрыЗадания.ПоказатьОшибкуПользователю Тогда
				ОписаниеОшибки = НСтр("ru = 'При архивации чеков ККМ произошла ошибка.
			                      |Архивация чеков ККМ не выполнена.
			                      |Дополнительное описание:
			                      |%ДополнительноеОписание%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	ПараметрыЗадания.ОбработкаВыполнена = Результат;
	
	Если НЕ ПустаяСтрока(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Конструктор параметра методов ВыполнитьУдалениеЧековККМ() и ВыполнитьАрхивациюЧековККМ()
// Возвращаемое значение:
// Структура:
//	*ОбработкаВыполнена - Булево - признак успешного завершения
//	*КассоваяСмена - ДокументСсылка.КассоваяСмена,Массив из ДокументСсылка.КассоваяСмена
//	*ПоказатьОшибкуПользователю - Булево
Функция НовыйПараметрыЗаданияЗакрытияКассовойСмены() Экспорт
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ОбработкаВыполнена", Ложь);
	ПараметрыЗадания.Вставить("КассоваяСмена", Новый Массив);
	ПараметрыЗадания.Вставить("ПоказатьОшибкуПользователю", Истина);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Выполняет удаление чеков ККМ по кассовой смене.
//
// Параметры:
//  ПараметрыЗадания  - см. НовыйПараметрыЗаданияЗакрытияКассовойСмены
//  АдресХранилища - Строка - Адрес во временном хранилище.
//  ВключатьНепроведенныеЧеки - Булево - По умолчанию - ложь.
//
Процедура ВыполнитьУдалениеЧековККМ(ПараметрыЗадания, АдресХранилища = "", ВключатьНепроведенныеЧеки = Ложь) Экспорт
	
	ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания, АдресХранилища, ВключатьНепроведенныеЧеки);
	
	УстановитьПривилегированныйРежим(Истина);
	
	УдалениеВыполнено = ПараметрыЗадания.ОбработкаВыполнена;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВозвратТоваровОтКлиента.Ссылка КАК Ссылка,
		|	ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
		|ГДЕ
		|	ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка,
		|	ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|ГДЕ
		|	ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ЗаявкаНаВозвратТоваровОтКлиента.ЧекККМ.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМ.Ссылка КАК Ссылка,
		|	ЧекККМ.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	(ЧекККМ.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМ.КассоваяСмена В(&КассоваяСмена)
		|	И ЧекККМ.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.Ссылка,
		|	ЧекККМВозврат.КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	(ЧекККМВозврат.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМВозврат.КассоваяСмена В(&КассоваяСмена)
		|	И ЧекККМВозврат.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМКоррекции.Ссылка КАК Ссылка,
		|	ЧекККМКоррекции.КассоваяСмена КАК КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
		|ГДЕ
		|	(ЧекККМКоррекции.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМКоррекции.КассоваяСмена В(&КассоваяСмена)
		|	И ЧекККМКоррекции.КассоваяСмена.СтатусРегламентныхОпераций = 
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчетЧекиЗаархивированы)
		|ИТОГИ ПО
		|	КассоваяСмена");

	Запрос.УстановитьПараметр("КассоваяСмена", ПараметрыЗадания.КассоваяСмена);
	Запрос.УстановитьПараметр("ВключатьНепроведенныеЧеки", ВключатьНепроведенныеЧеки);
	Результат = Запрос.Выполнить();
	
	ВыборкаКассовыхСмен = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКассовыхСмен.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			// Первый этап. Удаление чеков, отчетов о розничных продажах, чеков из возвратов.
			ВыборкаДокументов = ВыборкаКассовыхСмен.Выбрать();
			Пока ВыборкаДокументов.Следующий() Цикл
				ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект(); // ДокументОбъект
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
					
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.ЧекККМ = Неопределено;
					ДокументОбъект.Записать();
										
				ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМ") 
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМВозврат")
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЧекККМКоррекции") Тогда
					
					ДокументОбъект.Удалить();
					
				КонецЕсли;
			КонецЦикла;
			
			// Документ Кассовая смена не удаляем. Необходим для вычисления связи между Отчетом о розничных продажах и Отчетом о розничных возвратах
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();

			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Удаление чеков ККМ'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка, , ,
				ПодробноеПредставлениеОшибки);
			Если ТранзакцияАктивна() Тогда
				ВызватьИсключение ПодробноеПредставлениеОшибки;
			КонецЕсли; 
			
			Если ПараметрыЗадания.ПоказатьОшибкуПользователю Тогда
				ШаблонОшибки = НСтр("ru = 'При удалении чеков ККМ произошла ошибка.
			                      |Удаление чеков ККМ не выполнено.
			                      |Дополнительное описание:
			                      |%ДополнительноеОписание%'");
				ОписаниеОшибки = СтрЗаменить(
					ШаблонОшибки, 
					"%ДополнительноеОписание%", 
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
			УдалениеВыполнено = Ложь;
			
		КонецПопытки;
	КонецЦикла;
	
	ПараметрыЗадания.ОбработкаВыполнена = УдалениеВыполнено;
	
	Если НЕ ПустаяСтрока(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыЗадания, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОткрытияИЗакрытияКассовойСмены

// Выполняет открытие кассовой смены.
//
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Параметры регламентного задания
//  ДополнительныеПараметры - Структура - 
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  Булево - Истина, Если операция выполнена успешно.
//
Функция ОткрытьКассовуюСмену(КассаККМ, ДополнительныеПараметры, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
	
	ДатаОткрытияКассовойСмены = ТекущаяДатаСеанса();
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
		
		// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
		Если СтруктураСостояниеКассовойСмены.Ошибка24Часа Тогда
			
			Результат = Ложь;
			// Вероятно, что смена была не закрыта.
			ОписаниеОшибки = ОписаниеОшибки24Часа();
			ЗаписьВЖурналРегистрации(ОписаниеОшибки, "ОткрытьКассовуюСмену", КассаККМ);
			
		КонецЕсли;
		
	Иначе
		
		// Смена закрыта. Откроем новую кассовую смену.
		
		НоваяКассоваяСмена = Документы.КассоваяСмена.СоздатьДокумент();
		НоваяКассоваяСмена.Заполнить(Новый Структура("КассаККМ", КассаККМ));
		
		НоваяКассоваяСмена.Организация            = СтруктураСостояниеКассовойСмены.Организация;
		НоваяКассоваяСмена.КассаККМ               = КассаККМ;
		НоваяКассоваяСмена.Дата                   = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.Статус                 = Перечисления.СтатусыКассовойСмены.Открыта;
		НоваяКассоваяСмена.НачалоКассовойСмены    = ДатаОткрытияКассовойСмены;
		НоваяКассоваяСмена.ОкончаниеКассовойСмены = '00010101';
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			Если ДополнительныеПараметры.Свойство("АдресРасчетов")
				И ЗначениеЗаполнено(ДополнительныеПараметры.АдресРасчетов) Тогда
        		НоваяКассоваяСмена.АдресРасчетов = ДополнительныеПараметры.АдресРасчетов;
			КонецЕсли;
			Если ДополнительныеПараметры.Свойство("МестоРасчетов")
				И ЗначениеЗаполнено(ДополнительныеПараметры.МестоРасчетов) Тогда
        		НоваяКассоваяСмена.МестоРасчетов = ДополнительныеПараметры.МестоРасчетов;
			КонецЕсли;
		КонецЕсли;
		
		Если НоваяКассоваяСмена.ПроверитьЗаполнение() Тогда
			НоваяКассоваяСмена.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Результат = Ложь;
			ОписаниеОшибки = ПолучитьТекстОшибкиЗаполненияОтчета();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет закрытие кассовой смены.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Касса ККМ.
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  ДокументСсылка.КассоваяСмена, Неопределено - Закрытая кассовая смена.
//
Функция ЗакрытьКассовуюСмену(Объект, ОписаниеОшибки = "") Экспорт
	
	Результат = Неопределено;

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураСостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(Объект);
	
	Если СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта
		Или (СтруктураСостояниеКассовойСмены.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Закрыта
		  И  СтруктураСостояниеКассовойСмены.СтатусРегламентныхОпераций = Перечисления.СтатусыРегламентныхОперацийКассовойСмены.ПустаяСсылка()) Тогда
		
		Если СтруктураСостояниеКассовойСмены.ДатаИзмененияСтатуса <= ТекущаяДатаСеанса() Тогда
		
			КассоваяСменаОбъект = СтруктураСостояниеКассовойСмены.КассоваяСмена.ПолучитьОбъект();
			КассоваяСменаОбъект.Статус                     = Перечисления.СтатусыКассовойСмены.Закрыта;
			КассоваяСменаОбъект.СтатусРегламентныхОпераций = Перечисления.СтатусыРегламентныхОперацийКассовойСмены.СозданОтчет;
			КассоваяСменаОбъект.ОкончаниеКассовойСмены     = ТекущаяДатаСеанса();

			КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			Результат = СтруктураСостояниеКассовойСмены.КассоваяСмена;
			
		Иначе

			ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
			                            |Подробное описание:
			                            |Дата закрытия кассовой смены меньше даты последнего изменения статуса кассовой смены.'");

		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураСостояниеКассовойСмены.КассоваяСмена) Тогда

        // Нет ни одной кассовой смены
		ОписаниеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка.
		|Подробное описание:
		|Не найдено ни одной кассовой смены.'");

	Иначе
		
		// Смена не открыта.
		Результат = СтруктураСостояниеКассовойСмены.КассоваяСмена;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
// Параметры:
//  СостояниеКассовойСмены - см. ОписаниеКассовойСмены.
//	НалогообложениеНДС - ПеречислениеСсылка - Тип налогообложения НДс в соответствии с котором необходимо заполнить Отчеты о розничных продажх/возвратах.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхПродажах - Ссылка на отчет, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(СостояниеКассовойСмены, НалогообложениеНДС, МенеджерВременныхТаблиц, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск отчета о розничных продажах по типу налогообложения
	ОтчетОРозничныхПродажах = НайтиОтчетОРозничныхПродажах(СостояниеКассовойСмены.КассоваяСмена, НалогообложениеНДС);
	ОбновлятьОтчеты = СостояниеКассовойСмены.ОбновлятьОтчеты;
	Если ОтчетОРозничныхПродажах = Неопределено Тогда
		ОтчетОРозничныхПродажахОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
		ОбновлятьОтчеты = Истина;
	Иначе
		ОтчетОРозничныхПродажахОбъект = ОтчетОРозничныхПродажах.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбновлятьОтчеты Тогда
		ОтчетОРозничныхПродажахОбъект.ДополнительныеСвойства.Вставить("ПрограммноеЗаполнение", Истина);
		Возврат ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, СостояниеКассовойСмены, НалогообложениеНДС, МенеджерВременныхТаблиц, , ОписаниеОшибки);
	Иначе
		Возврат ОтчетОРозничныхПродажах;
	КонецЕсли;
	
КонецФункции

// Выполняет заполнение Отчета о розничных продажах по кассовой смене.
//
// Параметры:
//  ОтчетОРозничныхПродажахОбъект - ДокументОбъект.ОтчетОРозничныхПродажах - Заполняемый документ.
//  СостояниеКассовойСмены - см. ОписаниеКассовойСмены.
//	НалогообложениеНДС - ПеречислениеСсылка - Тип налогообложения НДс в соответствии с котором необходимо заполнить Отчеты о розничных продажх/возвратах.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//	ТолькоЗаполнить - Булево - Признак, определяющий будет ли выполнена попытка проведения/записи после заполнения.
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхПродажах - Ссылка на отчет, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхПродажах(ОтчетОРозничныхПродажахОбъект, СостояниеКассовойСмены, НалогообложениеНДС, МенеджерВременныхТаблиц, ТолькоЗаполнить = Ложь, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение отчета о розничных продажах
	Попытка
		
		ЭтоПопыткаПроведенияДокумента = Ложь;
		
		// Подготовка данных.
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварыРозничныхПродаж.ЧекККМ КАК ЧекККМ
		|ПОМЕСТИТЬ ЧекиККМПоКоторымОформленВозвратВСмену
		|ИЗ
		|	ТоварыРозничныхПродаж КАК ТоварыРозничныхПродаж
		|ГДЕ
		|	ТоварыРозничныхПродаж.Ссылка ССЫЛКА Документ.ЧекККМВозврат 
		|	И ТоварыРозничныхПродаж.НалогообложениеНДС = &НалогообложениеНДС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЧекККМ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЧекККМТовары.ПоЧекуКоррекции	КАК ПоЧекуКоррекции,
		|	ЧекККМТовары.Ссылка               КАК Ссылка,
		|	ЧекККМТовары.ЧекККМ               КАК ЧекККМ,
		|	ЧекККМТовары.Дата                 КАК Дата,
		|	ЧекККМТовары.НоменклатураНабора   КАК НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура       КАК Номенклатура,
		|	ЧекККМТовары.Характеристика     КАК Характеристика,
		|	ЧекККМТовары.Серия              КАК Серия,
		
		|	ВЫБОР КОГДА ЧекиККМПоКоторымОформленВозвратВСмену.ЧекККМ ЕСТЬ NULL 
		|		ТОГДА ЧекККМТовары.Упаковка 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|	КОНЕЦ КАК Упаковка,
		|	ЧекККМТовары.Цена               КАК Цена,
		|	ЧекККМТовары.СтавкаНДС          КАК СтавкаНДС,
		|	ВЫБОР КОГДА ЧекиККМПоКоторымОформленВозвратВСмену.ЧекККМ ЕСТЬ NULL 
		|		ТОГДА ЧекККМТовары.КоличествоУпаковок 
		|		ИНАЧЕ 
		|			ВЫБОР КОГДА ЧекККМТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
		|				ТОГДА ЧекККМТовары.КоличествоУпаковок 
		|			ИНАЧЕ ЧекККМТовары.Количество КОНЕЦ
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество         КАК Количество,
		|	ЧекККМТовары.Сумма              КАК Сумма,
		|	ЧекККМТовары.СуммаНДС           КАК СуммаНДС,
		|	ЧекККМТовары.Склад              КАК Склад,
		|	ЧекККМТовары.Партнер            КАК Партнер,
		|	ЧекККМТовары.Помещение          КАК Помещение,
		|	ЧекККМТовары.Продавец           КАК Продавец,
		|	ЧекККМТовары.Валюта             КАК Валюта,
		|	ЧекККМТовары.ВидЦены            КАК ВидЦены,
		|	ЧекККМТовары.КассаККМ           КАК КассаККМ,
		|	ЧекККМТовары.Организация        КАК Организация,
		|	ЧекККМТовары.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЧекККМТовары.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|	ЧекККМТовары.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|	
		|ПОМЕСТИТЬ СписокТоваров
		|ИЗ
		|	ТоварыРозничныхПродаж КАК ЧекККМТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМПоКоторымОформленВозвратВСмену КАК ЧекиККМПоКоторымОформленВозвратВСмену
		|	ПО ЧекККМТовары.ЧекККМ = ЧекиККМПоКоторымОформленВозвратВСмену.ЧекККМ
		|
		|ГДЕ 
		|	ЧекККМТовары.НалогообложениеНДС = &НалогообложениеНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.ПоЧекуКоррекции КАК ПоЧекуКоррекции,
		|	СписокТоваров.Ссылка КАК Ссылка,
		|	СписокТоваров.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|	СписокТоваров.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.Склад КАК Склад,
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|	СписокТоваров.Партнер КАК Партнер,
		|	СписокТоваров.Дата КАК Дата,
		|	СписокТоваров.ЧекККМ КАК ЧекККМ
		|ПОМЕСТИТЬ ЧекиККМ
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|ВЫБРАТЬ 
		|	ЧекиККМДокументыРеализации.КассоваяСмена КАК КассоваяСмена,
		|	ЧекиККМДокументыРеализации.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЧекиККМДокументыРеализации.ДокументРеализации КАК ДокументРеализации
		|ИЗ ЧекиККМДокументыРеализации КАК ЧекиККМДокументыРеализации
		|ГДЕ 
		|	НЕ ЧекиККМДокументыРеализации.ДокументРеализации = НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|	СписокТоваров.Склад КАК Склад
		|ИЗ
		|	ЧекиККМ КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.НоменклатураНабора   КАК НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Серия КАК Серия,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КассоваяСмена", СостояниеКассовойСмены.КассоваяСмена);
		Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаДокументовРеализации = МассивРезультатов[3].Выгрузить();
		ТаблицаДокументовРеализации.Индексы.Добавить("КассоваяСмена,НалогообложениеНДС");
		
		// Формирование таблиц индексов по аналитике и номенклатуре
		ТаблицаИндексовПоАналитике = МассивРезультатов[4].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоАналитике,"Индекс");
		
		ТаблицаИндексовПоНоменклатуре = МассивРезультатов[5].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоНоменклатуре,"Индекс");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоАналитике,
		|	ТаблицаИндексов.Валюта КАК Валюта,
		|	ТаблицаИндексов.ВидЦены КАК ВидЦены,
		|	ТаблицаИндексов.КассаККМ КАК КассаККМ,
		|	ТаблицаИндексов.Организация КАК Организация,
		|	ТаблицаИндексов.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ТаблицаИндексов.Склад КАК Склад
		|ПОМЕСТИТЬ ИндексыПоАналитике
		|ИЗ
		|	&ТаблицаИндексовПоАналитике КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта,
		|	ВидЦены,
		|	КассаККМ,
		|	Организация,
		|	НалогообложениеНДС,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоНоменклатуре,
		|	ТаблицаИндексов.НоменклатураНабора   КАК НоменклатураНабора,
		|	ТаблицаИндексов.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ТаблицаИндексов.Номенклатура КАК Номенклатура,
		|	ТаблицаИндексов.Характеристика КАК Характеристика,
		|	ТаблицаИндексов.Серия КАК Серия,
		|	ТаблицаИндексов.Упаковка КАК Упаковка,
		|	ТаблицаИндексов.Цена КАК Цена,
		|	ТаблицаИндексов.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ИндексыПоНоменклатуре
		|ИЗ
		|	&ТаблицаИндексовПоНоменклатуре КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураНабора,
		|	ХарактеристикаНабора,
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Упаковка,
		|	Цена,
		|	СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокТоваров.ПоЧекуКоррекции		КАК ПоЧекуКоррекции,		
		|	СписокТоваров.НоменклатураНабора   КАК НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Серия КАК Серия,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.Партнер КАК Партнер,
		|	СписокТоваров.Помещение КАК Помещение,
		|	СписокТоваров.Продавец КАК Продавец,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(СписокТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(СписокТоваров.Количество) КАК Количество,
		|	СУММА(СписокТоваров.Сумма) КАК Сумма,
		|	СУММА(СписокТоваров.СуммаНДС) КАК СуммаНДС,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре КАК ИндексПоНоменклатуре,
		|	СписокТоваров.Склад КАК Склад,
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|	СписокТоваров.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|	СписокТоваров.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокТоваров.ПоЧекуКоррекции	   КАК ПоЧекуКоррекции,		
		|		СписокТоваров.НоменклатураНабора   КАК НоменклатураНабора,
		|		СписокТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|		СписокТоваров.Номенклатура КАК Номенклатура,
		|		СписокТоваров.Характеристика КАК Характеристика,
		|		СписокТоваров.Серия КАК Серия,
		|		СписокТоваров.Упаковка КАК Упаковка,
		|		ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА СписокТоваров.КоличествоУпаковок = 0
		|				ТОГДА СписокТоваров.Сумма
		|			ИНАЧЕ СписокТоваров.Сумма / СписокТоваров.КоличествоУпаковок
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		|		СписокТоваров.Партнер КАК Партнер,
		|		СписокТоваров.Помещение КАК Помещение,
		|		СписокТоваров.Продавец КАК Продавец,
		|		СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|		СписокТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
		|		СписокТоваров.Количество КАК Количество,
		|		СписокТоваров.Сумма КАК Сумма,
		|		СписокТоваров.СуммаНДС КАК СуммаНДС,
		|		СписокТоваров.Склад КАК Склад,
		|		СписокТоваров.Валюта КАК Валюта,
		|		СписокТоваров.ВидЦены КАК ВидЦены,
		|		СписокТоваров.КассаККМ КАК КассаККМ,
		|		СписокТоваров.Организация КАК Организация,
		|		СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|		СписокТоваров.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|		СписокТоваров.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|	ИЗ
		|		СписокТоваров КАК СписокТоваров) КАК СписокТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО СписокТоваров.Склад = ИндексыПоАналитике.Склад
		|			И СписокТоваров.Валюта = ИндексыПоАналитике.Валюта
		|			И СписокТоваров.ВидЦены = ИндексыПоАналитике.ВидЦены
		|			И СписокТоваров.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И СписокТоваров.Организация = ИндексыПоАналитике.Организация
		|			И СписокТоваров.НалогообложениеНДС = ИндексыПоАналитике.НалогообложениеНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоНоменклатуре КАК ИндексыПоНоменклатуре
		|		ПО СписокТоваров.Номенклатура = ИндексыПоНоменклатуре.Номенклатура
		|			И СписокТоваров.НоменклатураНабора = ИндексыПоНоменклатуре.НоменклатураНабора
		|			И СписокТоваров.ХарактеристикаНабора = ИндексыПоНоменклатуре.ХарактеристикаНабора
		|			И СписокТоваров.Характеристика = ИндексыПоНоменклатуре.Характеристика
		|			И СписокТоваров.Серия = ИндексыПоНоменклатуре.Серия
		|			И СписокТоваров.Упаковка = ИндексыПоНоменклатуре.Упаковка
		|			И СписокТоваров.Цена = ИндексыПоНоменклатуре.Цена
		|			И СписокТоваров.СтавкаНДС = ИндексыПоНоменклатуре.СтавкаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокТоваров.ПоЧекуКоррекции,		
		|	СписокТоваров.НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура,
		|	СписокТоваров.Характеристика,
		|	СписокТоваров.Серия,
		|	СписокТоваров.СтавкаНДС,
		|	СписокТоваров.Упаковка,
		|	СписокТоваров.Цена,
		|	СписокТоваров.Партнер,
		|	СписокТоваров.Помещение,
		|	СписокТоваров.Продавец,
		|	ИндексыПоНоменклатуре.СтавкаНДС,
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре,
		|	СписокТоваров.Склад,
		|	СписокТоваров.Валюта,
		|	СписокТоваров.ВидЦены,
		|	СписокТоваров.КассаККМ,
		|	СписокТоваров.Организация,
		|	СписокТоваров.НалогообложениеНДС,
		|	СписокТоваров.ЧекККМНалогообложениеНДС,
		|	СписокТоваров.ЧекККМКассоваяСмена
		|ИМЕЮЩИЕ СУММА(СписокТоваров.Количество) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Упаковка,
		|	ВидЦены,
		|	Цена,
		|	Партнер,
		|	Продавец,
		|	ИндексПоАналитике,
		|	ПоЧекуКоррекции
		|
		|ИТОГИ
		|	МАКСИМУМ(НоменклатураНабора),
		|	МАКСИМУМ(ХарактеристикаНабора),
		|	МАКСИМУМ(Номенклатура),
		|	МАКСИМУМ(Характеристика),
		|	МАКСИМУМ(Серия),
		|	МАКСИМУМ(Упаковка),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Партнер),
		|	МАКСИМУМ(Помещение),
		|	МАКСИМУМ(Продавец),
		|	МАКСИМУМ(СтавкаНДС),
		|	МАКСИМУМ(КоличествоУпаковок),
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(СуммаНДС),
		|	МАКСИМУМ(Склад),
		|	МАКСИМУМ(Валюта),
		|	МАКСИМУМ(ВидЦены),
		|	МАКСИМУМ(КассаККМ),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(НалогообложениеНДС)
		|ПО
		|	ИндексПоАналитике,
		|	ИндексПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.КодАвторизации КАК КодАвторизации,
		|	ОплатаПлатежнымиКартами.ДоговорПодключения КАК ДоговорПодключения,		
		|	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК Сумма,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМОплатаПлатежнымиКартами.Ссылка КАК Ссылка,
		|		ЧекККМОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
		|		ЧекККМОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|		ЧекККМОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|		ЧекККМОплатаПлатежнымиКартами.КодАвторизации КАК КодАвторизации,
		|		ЧекККМОплатаПлатежнымиКартами.ДоговорПодключения КАК ДоговорПодключения,		
		|		ЧекККМОплатаПлатежнымиКартами.Сумма КАК Сумма,
		|		ЧекиККМ.КассаККМ 					КАК КассаККМ,
		|		ЧекиККМ.Организация 				КАК Организация,
		|		ЧекиККМ.Склад 						КАК Склад,
		|		ЧекиККМ.Валюта 						КАК Валюта,
		|		ЧекиККМ.ВидЦены 					КАК ВидЦены
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ЧекККМОплатаПлатежнымиКартами
		|		ПО ЧекККМОплатаПлатежнымиКартами.Ссылка = ЧекиККМ.Ссылка
		|	ГДЕ
		|		ЧекиККМ.ПоЧекуКоррекции = ЛОЖЬ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекиККМ.ЧекККМ КАК Ссылка,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.КодАвторизации,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ДоговорПодключения,		
		|		-ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
		|		ЧекиККМ.КассаККМ,
		|		ЧекиККМ.Организация,
		|		ЧекиККМ.Склад,
		|		ЧекиККМ.Валюта,
		|		ЧекиККМ.ВидЦены
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК ЧекККМВозвратОплатаПлатежнымиКартами
		|		ПО ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка = ЧекиККМ.Ссылка		
		|	ГДЕ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ОплатаОтменена
		|	) КАК ОплатаПлатежнымиКартами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО ОплатаПлатежнымиКартами.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И ОплатаПлатежнымиКартами.Организация = ИндексыПоАналитике.Организация
		|			И ОплатаПлатежнымиКартами.Склад = ИндексыПоАналитике.Склад
		|			И ОплатаПлатежнымиКартами.Валюта = ИндексыПоАналитике.Валюта
		|			И ОплатаПлатежнымиКартами.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ОплатаПлатежнымиКартами.ВидОплаты,
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.КодАвторизации,
		|	ОплатаПлатежнымиКартами.ДоговорПодключения,
		|	ИндексыПоАналитике.ИндексПоАналитике
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОплаты,
		|	ЭквайринговыйТерминал,
		|	ИндексПоАналитике,
		|	НомерПлатежнойКарты,
		|	КодАвторизации,
		|	ДоговорПодключения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Помещение                      КАК Помещение,
		|	Серии.Серия                          КАК Серия,
		|	Серии.Номенклатура                   КАК Номенклатура,
		|	Серии.Характеристика                 КАК Характеристика,
		|	СУММА(Серии.Количество)              КАК Количество,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике		
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМСерии.Помещение КАК Помещение,
		|		ЧекККМСерии.Серия КАК Серия,
		|		ЧекККМСерии.Номенклатура КАК Номенклатура,
		|		ЧекККМСерии.Характеристика КАК Характеристика,
		|		ЧекККМСерии.Количество КАК Количество,
		|		ЧекиККМ.КассаККМ КАК КассаККМ,
		|		ЧекиККМ.Организация КАК Организация,
		|		ЧекиККМ.Склад КАК Склад,
		|		ЧекиККМ.Валюта КАК Валюта,
		|		ЧекиККМ.ВидЦены КАК ВидЦены
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Серии КАК ЧекККМСерии
		|		ПО ЧекККМСерии.Ссылка = ЧекиККМ.Ссылка
		|	ГДЕ
		|		ЧекиККМ.ПоЧекуКоррекции = ЛОЖЬ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМВозвратСерии.Помещение,
		|		ЧекККМВозвратСерии.Серия,
		|		ЧекККМВозвратСерии.Номенклатура,
		|		ЧекККМВозвратСерии.Характеристика,
		|		-ЧекККМВозвратСерии.Количество,
		|		ЧекиККМ.КассаККМ,
		|		ЧекиККМ.Организация,
		|		ЧекиККМ.Склад,
		|		ЧекиККМ.Валюта,
		|		ЧекиККМ.ВидЦены		
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.Серии КАК ЧекККМВозвратСерии
		|		ПО ЧекККМВозвратСерии.Ссылка = ЧекиККМ.Ссылка
		|	ГДЕ
		|		ЧекиККМ.ПоЧекуКоррекции = ЛОЖЬ
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМСерии.Помещение КАК Помещение,
		|		ЧекККМСерии.Серия КАК Серия,
		|		ЧекККМСерии.Номенклатура КАК Номенклатура,
		|		ЧекККМСерии.Характеристика КАК Характеристика,
		|		-ЧекККМСерии.Количество КАК Количество,
		|		ЧекиККМ.КассаККМ 		КАК КассаККМ,
		|		ЧекиККМ.Организация 	КАК Организация,
		|		ЧекиККМ.Склад 			КАК Склад,
		|		ЧекиККМ.Валюта 			КАК Валюта,
		|		ЧекиККМ.ВидЦены 		КАК ВидЦены		
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Серии КАК ЧекККМСерии
		|		ПО ЧекККМСерии.Ссылка = ЧекиККМ.Ссылка
		|	ГДЕ
		|		ЧекиККМ.ПоЧекуКоррекции = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМКоррекцииСерии.Помещение КАК Помещение,
		|		ЧекККМКоррекцииСерии.Серия КАК Серия,
		|		ЧекККМКоррекцииСерии.Номенклатура КАК Номенклатура,
		|		ЧекККМКоррекцииСерии.Характеристика КАК Характеристика,
		|		ЧекККМКоррекцииСерии.Количество КАК Количество,
		|		ЧекиККМ.КассаККМ КАК КассаККМ,
		|		ЧекиККМ.Организация КАК Организация,
		|		ЧекиККМ.Склад КАК Склад,
		|		ЧекиККМ.Валюта КАК Валюта,
		|		ЧекиККМ.ВидЦены КАК ВидЦены
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМКоррекции.Серии КАК ЧекККМКоррекцииСерии
		|		ПО ЧекККМКоррекцииСерии.Ссылка = ЧекиККМ.Ссылка
		|	ГДЕ
		|		ЧекиККМ.ПоЧекуКоррекции = ИСТИНА
		|) КАК Серии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО Серии.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И Серии.Организация = ИндексыПоАналитике.Организация
		|			И Серии.Склад = ИндексыПоАналитике.Склад
		|			И Серии.Валюта = ИндексыПоАналитике.Валюта
		|			И Серии.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	Серии.Помещение,
		|	Серии.Серия,
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	ИндексыПоАналитике.ИндексПоАналитике
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИндексПоАналитике,
		|	Помещение,
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодарочныеСертификаты.ПодарочныйСертификат           КАК ПодарочныйСертификат,
		|	СУММА(ПодарочныеСертификаты.Количество)              КАК Количество,
		|	СУММА(ПодарочныеСертификаты.Сумма)                   КАК Сумма,
		|	СУММА(ПодарочныеСертификаты.СуммаВВалютеСертификата) КАК СуммаВВалютеСертификата,
		|	ИндексыПоАналитике.ИндексПоАналитике                 КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМПодарочныеСертификаты.ПодарочныйСертификат    КАК ПодарочныйСертификат,
		|		1                                                   КАК Количество,
		|		ЧекККМПодарочныеСертификаты.Сумма                   КАК Сумма,
		|		ЧекККМПодарочныеСертификаты.СуммаВВалютеСертификата КАК СуммаВВалютеСертификата,
		|		ЧекиККМ.КассаККМ 									КАК КассаККМ,
		|		ЧекиККМ.Организация 								КАК Организация,
		|		ЧекиККМ.Склад 										КАК Склад,
		|		ЧекиККМ.Валюта 										КАК Валюта,
		|		ЧекиККМ.ВидЦены 									КАК ВидЦены
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.ПодарочныеСертификаты КАК ЧекККМПодарочныеСертификаты
		|		ПО ЧекККМПодарочныеСертификаты.Ссылка = ЧекиККМ.Ссылка
		|	ГДЕ
		|		ЧекиККМ.ПоЧекуКоррекции = ЛОЖЬ
		|	) КАК ПодарочныеСертификаты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО ПодарочныеСертификаты.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И ПодарочныеСертификаты.Организация = ИндексыПоАналитике.Организация
		|			И ПодарочныеСертификаты.Склад = ИндексыПоАналитике.Склад
		|			И ПодарочныеСертификаты.Валюта = ИндексыПоАналитике.Валюта
		|			И ПодарочныеСертификаты.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ПодарочныеСертификаты.ПодарочныйСертификат,
		|	ИндексыПоАналитике.ИндексПоАналитике
		|ИМЕЮЩИЕ(СУММА(ПодарочныеСертификаты.Количество) <> 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПодарочныйСертификат,
		|	ИндексПоАналитике
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике          КАК ИндексПоАналитике,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности     КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления                  КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                    КАК ДатаСписания,
		|	БонусныеБаллы.Партнер                         КАК Партнер,
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов)      КАК СуммаБонусныхБаллов
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	ЧекиККМ.КассаККМ                          КАК КассаККМ,
		|	ЧекиККМ.Организация                       КАК Организация,
		|	ЧекиККМ.Склад                             КАК Склад,
		|	ЧекиККМ.Валюта                            КАК Валюта,
		|	ЧекиККМ.ВидЦены                           КАК ВидЦены,
		|	ЧекиККМ.Партнер                           КАК Партнер,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления              КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                КАК ДатаСписания,
		|	БонусныеБаллы.СуммаБонусныхБаллов         КАК СуммаБонусныхБаллов
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.БонусныеБаллы КАК БонусныеБаллы
		|	ПО БонусныеБаллы.Ссылка = ЧекиККМ.Ссылка
		|ГДЕ
		|	ЧекиККМ.ПоЧекуКоррекции = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекиККМ.КассаККМ    КАК КассаККМ,
		|	ЧекиККМ.Организация КАК Организация,
		|	ЧекиККМ.Склад       КАК Склад,
		|	ЧекиККМ.Валюта      КАК Валюта,
		|	ЧекиККМ.ВидЦены     КАК ВидЦены,
		|	ЧекиККМ.Партнер     КАК Партнер,
		
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления              КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                КАК ДатаСписания,
		|	-БонусныеБаллы.СуммаБонусныхБаллов        КАК СуммаБонусныхБаллов
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.БонусныеБаллы КАК БонусныеБаллы
		|	ПО БонусныеБаллы.Ссылка = ЧекиККМ.Ссылка		
		|) КАК БонусныеБаллы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО БонусныеБаллы.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И БонусныеБаллы.Организация = ИндексыПоАналитике.Организация
		|			И БонусныеБаллы.Склад = ИндексыПоАналитике.Склад
		|			И БонусныеБаллы.Валюта = ИндексыПоАналитике.Валюта
		|			И БонусныеБаллы.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	БонусныеБаллы.ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.Партнер
		|ИМЕЮЩИЕ
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Партнер,
		|	БонуснаяПрограммаЛояльности,
		|	ИндексПоАналитике,
		|	ДатаНачисления,
		|	ДатаСписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике          КАК ИндексПоАналитике,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности     КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаОплаты                  КАК ДатаОплаты,
		|	БонусныеБаллы.Партнер                         КАК Партнер,
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов)      КАК СуммаБонусныхБаллов
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	ЧекиККМ.КассаККМ    КАК КассаККМ,
		|	ЧекиККМ.Организация КАК Организация,
		|	ЧекиККМ.Склад       КАК Склад,
		|	ЧекиККМ.Валюта      КАК Валюта,
		|	ЧекиККМ.ВидЦены     КАК ВидЦены,
		|	ЧекиККМ.Партнер     КАК Партнер,
		|
		|	Таблица.Ссылка.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	НАЧАЛОПЕРИОДА(ЧекиККМ.Дата, ДЕНЬ)                                   КАК ДатаОплаты,
		|	Таблица.СуммаБонусныхБалловКСписанию                                КАК СуммаБонусныхБаллов
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК Таблица
		|	ПО Таблица.Ссылка = ЧекиККМ.Ссылка
		|ГДЕ
		|	ЧекиККМ.ПоЧекуКоррекции = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЧекККМВозврат.КассаККМ    КАК КассаККМ,
		|	ЧекККМВозврат.Организация КАК Организация,
		|	ЧекККМВозврат.Склад       КАК Склад,
		|	ЧекККМВозврат.Валюта      КАК Валюта,
		|	ЧекККМВозврат.ВидЦены     КАК ВидЦены,
		|	ЧекККМВозврат.Партнер     КАК Партнер,
		
		|	ЧекККМВозврат.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	НАЧАЛОПЕРИОДА(ЧекККМВозврат.Дата, ДЕНЬ)                            КАК ДатаОплаты,
		|	-ЧекККМВозврат.СуммаБонусныхБалловКВозврату                        КАК СуммаБонусныхБаллов
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|	ПО ЧекККМВозврат.Ссылка = ЧекиККМ.Ссылка
		|) КАК БонусныеБаллы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО БонусныеБаллы.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И БонусныеБаллы.Организация = ИндексыПоАналитике.Организация
		|			И БонусныеБаллы.Склад = ИндексыПоАналитике.Склад
		|			И БонусныеБаллы.Валюта = ИндексыПоАналитике.Валюта
		|			И БонусныеБаллы.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	БонусныеБаллы.ДатаОплаты,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.Партнер
		|ИМЕЮЩИЕ
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Партнер,
		|	БонуснаяПрограммаЛояльности,
		|	ИндексПоАналитике,
		|	ДатаОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	АкцизныеМарки.Справка2               КАК Справка2,
		|	АкцизныеМарки.АкцизнаяМарка          КАК АкцизнаяМарка
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		ЧекиККМ.КассаККМ           КАК КассаККМ,
		|		ЧекиККМ.Организация        КАК Организация,
		|		ЧекиККМ.Склад              КАК Склад,
		|		ЧекиККМ.Валюта             КАК Валюта,
		|		ЧекиККМ.ВидЦены            КАК ВидЦены,
		|		Таблица.Справка2           КАК Справка2,
		|		Таблица.АкцизнаяМарка      КАК АкцизнаяМарка,
		|		1                          КАК КоличествоАкцизов
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК Таблица
		|		ПО Таблица.Ссылка = ЧекиККМ.Ссылка
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		ЧекиККМ.КассаККМ           КАК КассаККМ,
		|		ЧекиККМ.Организация        КАК Организация,
		|		ЧекиККМ.Склад              КАК Склад,
		|		ЧекиККМ.Валюта             КАК Валюта,
		|		ЧекиККМ.ВидЦены            КАК ВидЦены,
		|		Таблица.Справка2           КАК Справка2,
		|		Таблица.АкцизнаяМарка      КАК АкцизнаяМарка,
		|		-1                         КАК КоличествоАкцизов
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.АкцизныеМарки КАК Таблица
		|		ПО Таблица.Ссылка = ЧекиККМ.Ссылка
		|	) КАК АкцизныеМарки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО АкцизныеМарки.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И АкцизныеМарки.Организация = ИндексыПоАналитике.Организация
		|			И АкцизныеМарки.Склад = ИндексыПоАналитике.Склад
		|			И АкцизныеМарки.Валюта = ИндексыПоАналитике.Валюта
		|			И АкцизныеМарки.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	АкцизныеМарки.Справка2,
		|	АкцизныеМарки.АкцизнаяМарка
		|ИМЕЮЩИЕ
		|	СУММА(АкцизныеМарки.КоличествоАкцизов) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИндексПоАналитике,
		|	АкцизнаяМарка
		|;
		|УНИЧТОЖИТЬ СписокТоваров
		|;
		|УНИЧТОЖИТЬ ЧекиККМ		
		|;
		|УНИЧТОЖИТЬ ИндексыПоАналитике
		|;
		|УНИЧТОЖИТЬ ИндексыПоНоменклатуре		
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаИндексовПоАналитике", ТаблицаИндексовПоАналитике);
		Запрос.УстановитьПараметр("ТаблицаИндексовПоНоменклатуре", ТаблицаИндексовПоНоменклатуре);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ОплатаПлатежнымиКартами = Результат[3].Выгрузить(); // ТаблицаЗначений
		Серии                   = Результат[4].Выгрузить(); // ТаблицаЗначений
		ПодарочныеСертификаты   = Результат[5].Выгрузить(); // ТаблицаЗначений
		БонусныеБаллы           = Результат[6].Выгрузить(); // ТаблицаЗначений
		ОплатаБонуснымиБаллами  = Результат[7].Выгрузить(); // ТаблицаЗначений
		АкцизныеМарки           = Результат[8].Выгрузить(); // ТаблицаЗначений
	
		ОплатаПлатежнымиКартами.Индексы.Добавить("ИндексПоАналитике");
		Серии.Индексы.Добавить("ИндексПоАналитике");
		ПодарочныеСертификаты.Индексы.Добавить("ИндексПоАналитике");
		БонусныеБаллы.Индексы.Добавить("ИндексПоАналитике");
		ОплатаБонуснымиБаллами.Индексы.Добавить("ИндексПоАналитике");
		АкцизныеМарки.Индексы.Добавить("ИндексПоАналитике");
		
		ВыборкаПоАналитике = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		// Очистим табличные части документа.
		ОтчетОРозничныхПродажахОбъект.Товары.Очистить();
		ОтчетОРозничныхПродажахОбъект.Серии.Очистить();
		ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Очистить();
		ОтчетОРозничныхПродажахОбъект.ВидыЗапасов.Очистить();
		ОтчетОРозничныхПродажахОбъект.ПодарочныеСертификаты.Очистить();
		ОтчетОРозничныхПродажахОбъект.НачислениеБонусныхБаллов.Очистить();
		ОтчетОРозничныхПродажахОбъект.ОплатаБонуснымиБаллами.Очистить();
		ОтчетОРозничныхПродажахОбъект.АкцизныеМарки.Очистить();
	
		Если ВыборкаПоАналитике.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажахОбъект, ВыборкаПоАналитике);
			
			ВыборкаПоАналитикеНоменклатуры = ВыборкаПоАналитике.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоАналитикеНоменклатуры.Следующий() Цикл
				
				ВыборкаДетальныеЗаписи = ВыборкаПоАналитикеНоменклатуры.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					СтрокаТабличнойЧастиТовары = ОтчетОРозничныхПродажахОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТовары, ВыборкаДетальныеЗаписи);
					СтрокаТабличнойЧастиТоварыКоличествоУпаковок = ?(СтрокаТабличнойЧастиТовары.КоличествоУпаковок = 0, ВыборкаДетальныеЗаписи.Количество, СтрокаТабличнойЧастиТовары.КоличествоУпаковок);
					СтрокаТабличнойЧастиТовары.Цена = Окр(СтрокаТабличнойЧастиТовары.Сумма / СтрокаТабличнойЧастиТоварыКоличествоУпаковок, 15, 2);
					ПодобратьЗаполнитьДокументРеализацииВСтроке(СтрокаТабличнойЧастиТовары, ТаблицаДокументовРеализации, СостояниеКассовойСмены, ВыборкаДетальныеЗаписи, Истина);
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Заполнение табличной части "Оплата платежными картами".
			МассивСтрок = ОплатаПлатежнымиКартами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаПлатежнымиКартами.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "Серии".
			МассивСтрок = Серии.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Количество <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "Подарочные сертификаты".
			МассивСтрок = ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ПодарочныеСертификаты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "БонусныеБаллы".
			МассивСтрок = БонусныеБаллы.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.НачислениеБонусныхБаллов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			// Заполнение табличной части "ОплатаБонуснымиБаллами".
			МассивСтрок = ОплатаБонуснымиБаллами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.ОплатаБонуснымиБаллами.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			// Заполнение табличной части "АкцизныеМарки".
			МассивСтрок = АкцизныеМарки.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхПродажахОбъект.АкцизныеМарки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			ОтчетОРозничныхПродажахОбъект.Дата            = СостояниеКассовойСмены.ДатаИзмененияСтатуса;
			ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС = СостояниеКассовойСмены.ЦенаВключаетНДС;
			ОтчетОРозничныхПродажахОбъект.КассоваяСмена   = СостояниеКассовойСмены.КассоваяСмена;
			ОтчетОРозничныхПродажахОбъект.Подразделение   = СостояниеКассовойСмены.Подразделение;
			
			ОтчетОРозничныхПродажахОбъект.СуммаДокумента  = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажахОбъект.Товары, ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС);
			
			ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОтчетОРозничныхПродажахОбъект);
			
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
				ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
				ОтчетОРозничныхПродажахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхПродажахОбъект.Ответственный, ОтчетОРозничныхПродажахОбъект.Подразделение);
			КонецЕсли;
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект, ПараметрыУказанияСерий);
						
		Иначе
			// По кассовой смене не продано товара		
			// Заполняет отчет о розничных продажах данными по текущей кассовой смене.
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхПродажахОбъект, СостояниеКассовойСмены, , "НалогообложениеНДС");
			
			ОтчетОРозничныхПродажахОбъект.Дата           		= СостояниеКассовойСмены.ДатаИзмененияСтатуса;
			ОтчетОРозничныхПродажахОбъект.НалогообложениеНДС  	= НалогообложениеНДС;
			
			ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОтчетОРозничныхПродажахОбъект);
					
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ответственный) Тогда
				ОтчетОРозничныхПродажахОбъект.Ответственный = Пользователи.ТекущийПользователь();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Подразделение) Тогда
				ОтчетОРозничныхПродажахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхПродажахОбъект.Ответственный, ОтчетОРозничныхПродажахОбъект.Подразделение);
			КонецЕсли;
			
			ОтчетОРозничныхПродажахОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхПродажахОбъект.Товары, ОтчетОРозничныхПродажахОбъект.ЦенаВключаетНДС);
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхПродажах.ПараметрыУказанияСерий(ОтчетОРозничныхПродажахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхПродажахОбъект, ПараметрыУказанияСерий);
						
		КонецЕсли;
		
		ОтчетОРозничныхПродажахЛокализация.ОбработкаЗаполнения(ОтчетОРозничныхПродажахОбъект, Неопределено, Ложь);
		
		Если Не ТолькоЗаполнить Тогда
			
			ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Запись);
			Если ОтчетОРозничныхПродажахОбъект.ПроверитьЗаполнение() Тогда
				ЭтоПопыткаПроведенияДокумента = Истина;
				ОтчетОРозничныхПродажахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОписаниеОшибки = НСтр("ru = 'При проверке заполнения перед проведением документа %Документ% по кассовой смене %КассоваяСмена% произошла ошибка. Документ записан, но не проведен.'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КассоваяСмена%", СостояниеКассовойСмены.КассоваяСмена);
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Документ%", ОтчетОРозничныхПродажахОбъект.Ссылка);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ОтчетОРозничныхПродажахОбъект.Ссылка;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru = 'При создании отчета о розничных продажах по кассовой смене %КассоваяСмена% произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КассоваяСмена%", СостояниеКассовойСмены.КассоваяСмена);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		
		Возврат ?(Не ТолькоЗаполнить И ЭтоПопыткаПроведенияДокумента И ЗначениеЗаполнено(ОтчетОРозничныхПродажахОбъект.Ссылка), ОтчетОРозничныхПродажахОбъект.Ссылка, Неопределено);
		
	КонецПопытки;
	
КонецФункции 

// Выполняет заполнение Отчета о розничных возвратах по кассовой смене.
//
// Параметры:
//  СостояниеКассовойСмены - см. ОписаниеКассовойСмены.
//	НалогообложениеНДС - ПеречислениеСсылка - Тип налогообложения НДс в соответствии с котором необходимо заполнить Отчеты о розничных продажх/возвратах.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -  
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхВозвратах - Ссылка на отчет, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхВозвратахПоКассовойСмене(СостояниеКассовойСмены, НалогообложениеНДС, МенеджерВременныхТаблиц, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Поиск отчета о розничных возвратах по типу налогообложения
	ОтчетОРозничныхВозвратах = НайтиОтчетОРозничныхВозвратах(СостояниеКассовойСмены.КассоваяСмена, НалогообложениеНДС);
	ОбновлятьОтчеты = СостояниеКассовойСмены.ОбновлятьОтчеты;
	Если ОтчетОРозничныхВозвратах = Неопределено Тогда
		ОтчетОРозничныхВозвратахОбъект = Документы.ОтчетОРозничныхВозвратах.СоздатьДокумент();
		ОбновлятьОтчеты = Истина;
	Иначе
		ОтчетОРозничныхВозвратахОбъект = ОтчетОРозничныхВозвратах.ПолучитьОбъект();
	КонецЕсли;
	
	Если ОбновлятьОтчеты Тогда
		ОтчетОРозничныхВозвратахОбъект.ДополнительныеСвойства.Вставить("ПрограммноеЗаполнение", Истина);
		Возврат ЗаполнитьОтчетОРозничныхВозвратах(ОтчетОРозничныхВозвратахОбъект, СостояниеКассовойСмены, НалогообложениеНДС, МенеджерВременныхТаблиц, , ОписаниеОшибки);
	Иначе
		Возврат ОтчетОРозничныхВозвратах;
	КонецЕсли;
	
КонецФункции

// Выполняет заполнение Отчета о розничных возвратах по кассовой смене.
//
// Параметры:
//  ОтчетОРозничныхВозвратахОбъект - ДокументОбъект.ОтчетОРозничныхВозвратах - Заполняемый документ.
//  СостояниеКассовойСмены - см. ОписаниеКассовойСмены.
//	НалогообложениеНДС - ПеречислениеСсылка - Тип налогообложения НДс в соответствии с котором необходимо заполнить Отчеты о розничных продажх/возвратах.
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//	ТолькоЗаполнить - Булево - Признак, определяющий будет ли выполнена попытка проведения/записи после заполнения.
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхВозвратах - Ссылка на отчет, если операция выполнена успешно. Иначе - Неопределено.
//
Функция ЗаполнитьОтчетОРозничныхВозвратах(ОтчетОРозничныхВозвратахОбъект, СостояниеКассовойСмены, НалогообложениеНДС, МенеджерВременныхТаблиц, ТолькоЗаполнить = Ложь, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполнение отчета о розничных возвратах, 
	// попадают чеки ККМ возврат вне смены продажи или без чека продажи, 
	// чеки ККМ коррекции с основанием вне смены продажи.
	Попытка
		
		ЭтоПопыткаПроведенияДокумента = Ложь;
		
		// Подготовка данных. 
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЧекККМТовары.ПоЧекуКоррекции	КАК ПоЧекуКоррекции,
		|	ЧекККМТовары.Ссылка             КАК Ссылка,
		|	ЧекККМТовары.ЧекККМСсылка		КАК ЧекККМСсылка,	
		|	ЧекККМТовары.НоменклатураНабора   КАК НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура       КАК Номенклатура,
		|	ЧекККМТовары.Характеристика     КАК Характеристика,
		|	ЧекККМТовары.Серия              КАК Серия,
		|	ЧекККМТовары.Упаковка           КАК Упаковка,
		|	ЧекККМТовары.Цена               КАК Цена,
		|	ЧекККМТовары.СтавкаНДС          КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество         КАК Количество,
		|	ЧекККМТовары.Сумма              КАК Сумма,
		|	ЧекККМТовары.СуммаНДС           КАК СуммаНДС,
		|	ЧекККМТовары.Склад              КАК Склад,
		|	ЧекККМТовары.Партнер            КАК Партнер,
		|	ЧекККМТовары.Помещение          КАК Помещение,
		|	ЧекККМТовары.Продавец           КАК Продавец,
		|	ЧекККМТовары.Валюта             КАК Валюта,
		|	ЧекККМТовары.ВидЦены            КАК ВидЦены,
		|	ЧекККМТовары.КассаККМ           КАК КассаККМ,
		|	ЧекККМТовары.Организация        КАК Организация,
		|	ЧекККМТовары.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЧекККМТовары.СпособОпределенияСебестоимости КАК СпособОпределенияСебестоимости,
		|	ЧекККМТовары.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|	ЧекККМТовары.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|	
		|ПОМЕСТИТЬ СписокТоваров
		|ИЗ
		|	ТоварыРозничныхВозвратов КАК ЧекККМТовары
		|ГДЕ 
		|	ЧекККМТовары.НалогообложениеНДС = &НалогообложениеНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.ПоЧекуКоррекции КАК ПоЧекуКоррекции,
		|	СписокТоваров.Ссылка КАК Ссылка,
		|	СписокТоваров.СпособОпределенияСебестоимости КАК СпособОпределенияСебестоимости,
		|	СписокТоваров.ЧекККМСсылка КАК ЧекККМСсылка,		
		|	СписокТоваров.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|	СписокТоваров.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|ПОМЕСТИТЬ ЧекиККМ
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|ВЫБРАТЬ 
		|   ЧекиККМДокументыРеализации.КассоваяСмена КАК КассоваяСмена,
		|   ЧекиККМДокументыРеализации.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЧекиККМДокументыРеализации.ДокументРеализации КАК ДокументРеализации
		|ИЗ ЧекиККМДокументыРеализации КАК ЧекиККМДокументыРеализации
		|ГДЕ 
		|	НЕ ЧекиККМДокументыРеализации.ДокументРеализации = НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|	СписокТоваров.Склад КАК Склад
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокТоваров.НоменклатураНабора КАК НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Серия КАК Серия,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	СписокТоваров КАК СписокТоваров
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("КассоваяСмена", СостояниеКассовойСмены.КассоваяСмена);
		Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		ТаблицаДокументовРеализации = МассивРезультатов[2].Выгрузить();
		ТаблицаДокументовРеализации.Индексы.Добавить("КассоваяСмена,НалогообложениеНДС");
		
		// Формирование таблиц индексов по аналитике и номенклатуре
		ТаблицаИндексовПоАналитике = МассивРезультатов[3].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоАналитике,"Индекс");
		
		ТаблицаИндексовПоНоменклатуре = МассивРезультатов[4].Выгрузить();
		ОбщегоНазначенияУТ.ПронумероватьТаблицуЗначений(ТаблицаИндексовПоНоменклатуре,"Индекс");
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоАналитике,
		|	ТаблицаИндексов.Валюта КАК Валюта,
		|	ТаблицаИндексов.ВидЦены КАК ВидЦены,
		|	ТаблицаИндексов.КассаККМ КАК КассаККМ,
		|	ТаблицаИндексов.Организация КАК Организация,
		|	ТаблицаИндексов.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ТаблицаИндексов.Склад КАК Склад
		|ПОМЕСТИТЬ ИндексыПоАналитике
		|ИЗ
		|	&ТаблицаИндексовПоАналитике КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта,
		|	ВидЦены,
		|	КассаККМ,
		|	Организация,
		|	НалогообложениеНДС,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаИндексов.Индекс КАК ИндексПоНоменклатуре,
		|	ТаблицаИндексов.НоменклатураНабора   КАК НоменклатураНабора,
		|	ТаблицаИндексов.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ТаблицаИндексов.Номенклатура КАК Номенклатура,
		|	ТаблицаИндексов.Характеристика КАК Характеристика,
		|	ТаблицаИндексов.Серия КАК Серия,
		|	ТаблицаИндексов.Упаковка КАК Упаковка,
		|	ТаблицаИндексов.Цена КАК Цена,
		|	ТаблицаИндексов.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ИндексыПоНоменклатуре
		|ИЗ
		|	&ТаблицаИндексовПоНоменклатуре КАК ТаблицаИндексов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураНабора,
		|	ХарактеристикаНабора,
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Упаковка,
		|	Цена,
		|	СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокТоваров.ПоЧекуКоррекции		КАК ПоЧекуКоррекции,			
		|	СписокТоваров.НоменклатураНабора	КАК НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора	КАК ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура КАК Номенклатура,
		|	СписокТоваров.Характеристика КАК Характеристика,
		|	СписокТоваров.Серия КАК Серия,
		|	СписокТоваров.Упаковка КАК Упаковка,
		|	СписокТоваров.Цена КАК Цена,
		|	СписокТоваров.Партнер КАК Партнер,
		|	СписокТоваров.Помещение КАК Помещение,
		|	СписокТоваров.Продавец КАК Продавец,
		|	СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(СписокТоваров.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(СписокТоваров.Количество) КАК Количество,
		|	СУММА(СписокТоваров.Сумма) КАК Сумма,
		|	СУММА(СписокТоваров.СуммаНДС) КАК СуммаНДС,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре КАК ИндексПоНоменклатуре,
		|	СписокТоваров.Склад КАК Склад,
		|	СписокТоваров.Валюта КАК Валюта,
		|	СписокТоваров.ВидЦены КАК ВидЦены,
		|	СписокТоваров.КассаККМ КАК КассаККМ,
		|	СписокТоваров.Организация КАК Организация,
		|	СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|	СписокТоваров.СпособОпределенияСебестоимости КАК СпособОпределенияСебестоимости,
		|	СписокТоваров.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|	СписокТоваров.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|ИЗ
		|	(ВЫБРАТЬ
		|		СписокТоваров.ПоЧекуКоррекции		КАК ПоЧекуКоррекции,		
		|		СписокТоваров.НоменклатураНабора	КАК НоменклатураНабора,
		|		СписокТоваров.ХарактеристикаНабора	КАК ХарактеристикаНабора,
		|		СписокТоваров.Номенклатура КАК Номенклатура,
		|		СписокТоваров.Характеристика КАК Характеристика,
		|		СписокТоваров.Серия КАК Серия,
		|		СписокТоваров.Упаковка КАК Упаковка,
		|		СписокТоваров.Цена КАК Цена,
		|		СписокТоваров.Партнер КАК Партнер,
		|		СписокТоваров.Помещение КАК Помещение,
		|		СписокТоваров.Продавец КАК Продавец,
		|		СписокТоваров.СтавкаНДС КАК СтавкаНДС,
		|		СписокТоваров.КоличествоУпаковок КАК КоличествоУпаковок,
		|		СписокТоваров.Количество КАК Количество,
		|		СписокТоваров.Сумма КАК Сумма,
		|		СписокТоваров.СуммаНДС КАК СуммаНДС,
		|		СписокТоваров.Склад КАК Склад,
		|		СписокТоваров.Валюта КАК Валюта,
		|		СписокТоваров.ВидЦены КАК ВидЦены,
		|		СписокТоваров.КассаККМ КАК КассаККМ,
		|		СписокТоваров.Организация КАК Организация,
		|		СписокТоваров.НалогообложениеНДС КАК НалогообложениеНДС,
		|		СписокТоваров.СпособОпределенияСебестоимости КАК СпособОпределенияСебестоимости,
		|		СписокТоваров.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|		СписокТоваров.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|	ИЗ
		|		СписокТоваров КАК СписокТоваров) КАК СписокТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО СписокТоваров.Склад = ИндексыПоАналитике.Склад
		|			И СписокТоваров.Валюта = ИндексыПоАналитике.Валюта
		|			И СписокТоваров.ВидЦены = ИндексыПоАналитике.ВидЦены
		|			И СписокТоваров.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И СписокТоваров.Организация = ИндексыПоАналитике.Организация
		|			И СписокТоваров.НалогообложениеНДС = ИндексыПоАналитике.НалогообложениеНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоНоменклатуре КАК ИндексыПоНоменклатуре
		|		ПО СписокТоваров.Номенклатура = ИндексыПоНоменклатуре.Номенклатура
		|			И СписокТоваров.НоменклатураНабора = ИндексыПоНоменклатуре.НоменклатураНабора
		|			И СписокТоваров.ХарактеристикаНабора = ИндексыПоНоменклатуре.ХарактеристикаНабора
		|			И СписокТоваров.Характеристика = ИндексыПоНоменклатуре.Характеристика
		|			И СписокТоваров.Серия = ИндексыПоНоменклатуре.Серия
		|			И СписокТоваров.Упаковка = ИндексыПоНоменклатуре.Упаковка
		|			И СписокТоваров.Цена = ИндексыПоНоменклатуре.Цена
		|			И СписокТоваров.СтавкаНДС = ИндексыПоНоменклатуре.СтавкаНДС
		|
		|СГРУППИРОВАТЬ ПО
		|	СписокТоваров.ПоЧекуКоррекции,
		|	СписокТоваров.НоменклатураНабора,
		|	СписокТоваров.ХарактеристикаНабора,
		|	СписокТоваров.Номенклатура,
		|	СписокТоваров.Характеристика,
		|	СписокТоваров.Серия,
		|	СписокТоваров.СтавкаНДС,
		|	СписокТоваров.Упаковка,
		|	СписокТоваров.Цена,
		|	СписокТоваров.Партнер,
		|	СписокТоваров.Помещение,
		|	СписокТоваров.Продавец,
		|	ИндексыПоНоменклатуре.СтавкаНДС,
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	ИндексыПоНоменклатуре.ИндексПоНоменклатуре,
		|	СписокТоваров.Склад,
		|	СписокТоваров.Валюта,
		|	СписокТоваров.ВидЦены,
		|	СписокТоваров.КассаККМ,
		|	СписокТоваров.Организация,
		|	СписокТоваров.НалогообложениеНДС,
		|	СписокТоваров.СпособОпределенияСебестоимости,
		|	СписокТоваров.ЧекККМНалогообложениеНДС,
		|	СписокТоваров.ЧекККМКассоваяСмена
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Упаковка,
		|	ВидЦены,
		|	Цена,
		|	Партнер,
		|	Продавец,
		|	ИндексПоАналитике,
		|	ПоЧекуКоррекции
		|
		|ИТОГИ
		|	МАКСИМУМ(ПоЧекуКоррекции),		
		|	МАКСИМУМ(НоменклатураНабора),
		|	МАКСИМУМ(ХарактеристикаНабора),
		|	МАКСИМУМ(Номенклатура),
		|	МАКСИМУМ(Характеристика),
		|	МАКСИМУМ(Серия),
		|	МАКСИМУМ(Упаковка),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Партнер),
		|	МАКСИМУМ(Помещение),
		|	МАКСИМУМ(Продавец),
		|	МАКСИМУМ(СтавкаНДС),
		|	МАКСИМУМ(КоличествоУпаковок),
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(СуммаНДС),
		|	МАКСИМУМ(Склад),
		|	МАКСИМУМ(Валюта),
		|	МАКСИМУМ(ВидЦены),
		|	МАКСИМУМ(КассаККМ),
		|	МАКСИМУМ(Организация),
		|	МАКСИМУМ(НалогообложениеНДС)
		|ПО
		|	ИндексПоАналитике,
		|	ИндексПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал КАК ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.КодАвторизации КАК КодАвторизации,
		|	ОплатаПлатежнымиКартами.ДоговорПодключения КАК ДоговорПодключения,		
		|	СУММА(ОплатаПлатежнымиКартами.Сумма) КАК Сумма,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка КАК Ссылка,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ВидОплаты КАК ВидОплаты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.КодАвторизации,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ДоговорПодключения,		
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Сумма,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.КассаККМ,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Организация,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Склад,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.Валюта,
		|		ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка.ВидЦены
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.ОплатаПлатежнымиКартами КАК ЧекККМВозвратОплатаПлатежнымиКартами
		|		ПО ЧекККМВозвратОплатаПлатежнымиКартами.Ссылка = ЧекиККМ.Ссылка
		|	ГДЕ
		|		ЧекККМВозвратОплатаПлатежнымиКартами.ОплатаОтменена
		|	) КАК ОплатаПлатежнымиКартами
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО ОплатаПлатежнымиКартами.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И ОплатаПлатежнымиКартами.Организация = ИндексыПоАналитике.Организация
		|			И ОплатаПлатежнымиКартами.Склад = ИндексыПоАналитике.Склад
		|			И ОплатаПлатежнымиКартами.Валюта = ИндексыПоАналитике.Валюта
		|			И ОплатаПлатежнымиКартами.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ОплатаПлатежнымиКартами.ВидОплаты,
		|	ОплатаПлатежнымиКартами.ЭквайринговыйТерминал,
		|	ОплатаПлатежнымиКартами.НомерПлатежнойКарты,
		|	ОплатаПлатежнымиКартами.КодАвторизации,
		|	ОплатаПлатежнымиКартами.ДоговорПодключения,				
		|	ИндексыПоАналитике.ИндексПоАналитике
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОплаты,
		|	ЭквайринговыйТерминал,
		|	ИндексПоАналитике,
		|	НомерПлатежнойКарты,
		|	КодАвторизации,
		|	ДоговорПодключения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Серии.Помещение                      КАК Помещение,
		|	Серии.Серия                          КАК Серия,
		|	Серии.Номенклатура                   КАК Номенклатура,
		|	Серии.Характеристика                 КАК Характеристика,
		|	СУММА(Серии.Количество)              КАК Количество,
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	Серии.ПоЧекуКоррекции 				 КАК ПоЧекуКоррекции,
		|	Серии.СпособОпределенияСебестоимости КАК СпособОпределенияСебестоимости,
		|	Серии.ЧекККМНалогообложениеНДС       КАК ЧекККМНалогообложениеНДС,
		|	Серии.ЧекККМКассоваяСмена            КАК ЧекККМКассоваяСмена
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЧекККМВозвратСерии.Помещение,
		|		ЧекККМВозвратСерии.Серия,
		|		ЧекККМВозвратСерии.Номенклатура,
		|		ЧекККМВозвратСерии.Характеристика,
		|		ЧекККМВозвратСерии.Количество,
		|		ЧекККМВозвратСерии.Ссылка.КассаККМ,
		|		ЧекККМВозвратСерии.Ссылка.Организация,
		|		ЧекККМВозвратСерии.Ссылка.Склад,
		|		ЧекККМВозвратСерии.Ссылка.Валюта,
		|		ЧекККМВозвратСерии.Ссылка.ВидЦены,
		|		ЧекиККМ.ПоЧекуКоррекции КАК ПоЧекуКоррекции,
		|		ЧекиККМ.СпособОпределенияСебестоимости КАК СпособОпределенияСебестоимости,
		|		ЧекиККМ.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|		ЧекиККМ.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.Серии КАК ЧекККМВозвратСерии
		|		ПО ЧекККМВозвратСерии.Ссылка = ЧекиККМ.ЧекККМСсылка
		|	ГДЕ
		|		ЧекиККМ.ПоЧекуКоррекции = ЛОЖЬ
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЧекККМСерии.Помещение КАК Помещение,
		|		ЧекККМСерии.Серия КАК Серия,
		|		ЧекККМСерии.Номенклатура КАК Номенклатура,
		|		ЧекККМСерии.Характеристика КАК Характеристика,
		|		ЧекККМСерии.Количество КАК Количество,
		|		ЧекККМСерии.Ссылка.КассаККМ КАК КассаККМ,
		|		ЧекККМСерии.Ссылка.Организация КАК Организация,
		|		ЧекККМСерии.Ссылка.Склад КАК Склад,
		|		ЧекККМСерии.Ссылка.Валюта КАК Валюта,
		|		ЧекККМСерии.Ссылка.ВидЦены КАК ВидЦены,
		|		ЧекиККМ.ПоЧекуКоррекции КАК ПоЧекуКоррекции,
		|		ЧекиККМ.СпособОпределенияСебестоимости КАК СпособОпределенияСебестоимости,
		|		ЧекиККМ.ЧекККМНалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|		ЧекиККМ.ЧекККМКассоваяСмена КАК ЧекККМКассоваяСмена
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Серии КАК ЧекККМСерии
		|		ПО ЧекККМСерии.Ссылка = ЧекиККМ.ЧекККМСсылка
		|	ГДЕ
		|		ЧекиККМ.ПоЧекуКоррекции = ИСТИНА
		|) КАК Серии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО Серии.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И Серии.Организация = ИндексыПоАналитике.Организация
		|			И Серии.Склад = ИндексыПоАналитике.Склад
		|			И Серии.Валюта = ИндексыПоАналитике.Валюта
		|			И Серии.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	Серии.Помещение,
		|	Серии.Серия,
		|	Серии.Номенклатура,
		|	Серии.Характеристика,
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	Серии.ПоЧекуКоррекции,
		|	Серии.СпособОпределенияСебестоимости,
		|	Серии.ЧекККМНалогообложениеНДС,
		|	Серии.ЧекККМКассоваяСмена
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИндексПоАналитике,
		|	Помещение,
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	СпособОпределенияСебестоимости,
		|	ЧекККМКассоваяСмена,
		|	ЧекККМНалогообложениеНДС,
		|	ПоЧекуКоррекции
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике          КАК ИндексПоАналитике,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности     КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления                  КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                    КАК ДатаСписания,
		|	БонусныеБаллы.Партнер                         КАК Партнер,
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов)      КАК СуммаБонусныхБаллов
		|ИЗ
		|(ВЫБРАТЬ
		|	БонусныеБаллы.Ссылка.КассаККМ    КАК КассаККМ,
		|	БонусныеБаллы.Ссылка.Организация КАК Организация,
		|	БонусныеБаллы.Ссылка.Склад       КАК Склад,
		|	БонусныеБаллы.Ссылка.Валюта      КАК Валюта,
		|	БонусныеБаллы.Ссылка.ВидЦены     КАК ВидЦены,
		|	БонусныеБаллы.Ссылка.Партнер     КАК Партнер,		
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаНачисления              КАК ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания                КАК ДатаСписания,
		|	БонусныеБаллы.СуммаБонусныхБаллов        КАК СуммаБонусныхБаллов
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.БонусныеБаллы КАК БонусныеБаллы
		|	ПО БонусныеБаллы.Ссылка = ЧекиККМ.Ссылка
		|) КАК БонусныеБаллы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО БонусныеБаллы.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И БонусныеБаллы.Организация = ИндексыПоАналитике.Организация
		|			И БонусныеБаллы.Склад = ИндексыПоАналитике.Склад
		|			И БонусныеБаллы.Валюта = ИндексыПоАналитике.Валюта
		|			И БонусныеБаллы.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	БонусныеБаллы.ДатаНачисления,
		|	БонусныеБаллы.ДатаСписания,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.Партнер
		|ИМЕЮЩИЕ
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Партнер,
		|	БонуснаяПрограммаЛояльности,
		|	ИндексПоАналитике,
		|	ДатаНачисления,
		|	ДатаСписания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике          КАК ИндексПоАналитике,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности     КАК БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.ДатаОплаты                  КАК ДатаОплаты,
		|	БонусныеБаллы.Партнер                         КАК Партнер,
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов)      КАК СуммаБонусныхБаллов
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	ЧекККМВозврат.КассаККМ    КАК КассаККМ,
		|	ЧекККМВозврат.Организация КАК Организация,
		|	ЧекККМВозврат.Склад       КАК Склад,
		|	ЧекККМВозврат.Валюта      КАК Валюта,
		|	ЧекККМВозврат.ВидЦены     КАК ВидЦены,
		|	ЧекККМВозврат.Партнер     КАК Партнер,
		
		|	ЧекККМВозврат.КартаЛояльности.Владелец.БонуснаяПрограммаЛояльности КАК БонуснаяПрограммаЛояльности,
		|	ЧекККМВозврат.Дата                                                 КАК ДатаОплаты,
		|	ЧекККМВозврат.СуммаБонусныхБалловКВозврату                        КАК СуммаБонусныхБаллов
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|	ПО ЧекККМВозврат.Ссылка = ЧекиККМ.Ссылка
		|) КАК БонусныеБаллы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО БонусныеБаллы.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И БонусныеБаллы.Организация = ИндексыПоАналитике.Организация
		|			И БонусныеБаллы.Склад = ИндексыПоАналитике.Склад
		|			И БонусныеБаллы.Валюта = ИндексыПоАналитике.Валюта
		|			И БонусныеБаллы.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	БонусныеБаллы.ДатаОплаты,
		|	БонусныеБаллы.БонуснаяПрограммаЛояльности,
		|	БонусныеБаллы.Партнер
		|ИМЕЮЩИЕ
		|	СУММА(БонусныеБаллы.СуммаБонусныхБаллов) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Партнер,
		|	БонуснаяПрограммаЛояльности,
		|	ИндексПоАналитике,
		|	ДатаОплаты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИндексыПоАналитике.ИндексПоАналитике КАК ИндексПоАналитике,
		|	АкцизныеМарки.Справка2               КАК Справка2,
		|	АкцизныеМарки.АкцизнаяМарка          КАК АкцизнаяМарка
		|ИЗ
		|(
		|	ВЫБРАТЬ
		|		Таблица.Ссылка.КассаККМ    КАК КассаККМ,
		|		Таблица.Ссылка.Организация КАК Организация,
		|		Таблица.Ссылка.Склад       КАК Склад,
		|		Таблица.Ссылка.Валюта      КАК Валюта,
		|		Таблица.Ссылка.ВидЦены     КАК ВидЦены,
		|		Таблица.Справка2           КАК Справка2,
		|		Таблица.АкцизнаяМарка      КАК АкцизнаяМарка,
		|		1                          КАК КоличествоАкцизов
		|	ИЗ
		|		ЧекиККМ КАК ЧекиККМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.АкцизныеМарки КАК Таблица
		|		ПО Таблица.Ссылка = ЧекиККМ.Ссылка
		|	) КАК АкцизныеМарки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ИндексыПоАналитике КАК ИндексыПоАналитике
		|		ПО АкцизныеМарки.КассаККМ = ИндексыПоАналитике.КассаККМ
		|			И АкцизныеМарки.Организация = ИндексыПоАналитике.Организация
		|			И АкцизныеМарки.Склад = ИндексыПоАналитике.Склад
		|			И АкцизныеМарки.Валюта = ИндексыПоАналитике.Валюта
		|			И АкцизныеМарки.ВидЦены = ИндексыПоАналитике.ВидЦены
		|СГРУППИРОВАТЬ ПО
		|	ИндексыПоАналитике.ИндексПоАналитике,
		|	АкцизныеМарки.Справка2,
		|	АкцизныеМарки.АкцизнаяМарка
		|ИМЕЮЩИЕ
		|	СУММА(АкцизныеМарки.КоличествоАкцизов) > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИндексПоАналитике,
		|	АкцизнаяМарка
		|;
		|УНИЧТОЖИТЬ СписокТоваров
		|;
		|УНИЧТОЖИТЬ ЧекиККМ
		|;
		|УНИЧТОЖИТЬ ИндексыПоАналитике
		|;
		|УНИЧТОЖИТЬ ИндексыПоНоменклатуре
		|";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТаблицаИндексовПоАналитике", ТаблицаИндексовПоАналитике);
		Запрос.УстановитьПараметр("ТаблицаИндексовПоНоменклатуре", ТаблицаИндексовПоНоменклатуре);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ОплатаПлатежнымиКартами = Результат[3].Выгрузить(); // ТаблицаЗначений
		Серии                   = Результат[4].Выгрузить(); // ТаблицаЗначений
		БонусныеБаллы           = Результат[5].Выгрузить(); // ТаблицаЗначений
		ОплатаБонуснымиБаллами  = Результат[6].Выгрузить(); // ТаблицаЗначений
		АкцизныеМарки           = Результат[7].Выгрузить(); // ТаблицаЗначений
		
		ОплатаПлатежнымиКартами.Индексы.Добавить("ИндексПоАналитике");
		Серии.Индексы.Добавить("ИндексПоАналитике");
		БонусныеБаллы.Индексы.Добавить("ИндексПоАналитике");
		ОплатаБонуснымиБаллами.Индексы.Добавить("ИндексПоАналитике");
		АкцизныеМарки.Индексы.Добавить("ИндексПоАналитике");
		
		ВыборкаПоАналитике = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		// Очистим табличные части документа.
		ОтчетОРозничныхВозвратахОбъект.Товары.Очистить();
		ОтчетОРозничныхВозвратахОбъект.Серии.Очистить();
		ОтчетОРозничныхВозвратахОбъект.ОплатаПлатежнымиКартами.Очистить();
		ОтчетОРозничныхВозвратахОбъект.ВидыЗапасов.Очистить();
		ОтчетОРозничныхВозвратахОбъект.НачислениеБонусныхБаллов.Очистить();
		ОтчетОРозничныхВозвратахОбъект.ОплатаБонуснымиБаллами.Очистить();
		ОтчетОРозничныхВозвратахОбъект.АкцизныеМарки.Очистить();
	
		Если ВыборкаПоАналитике.Следующий() Тогда
			
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхВозвратахОбъект, ВыборкаПоАналитике);
			
			ВыборкаПоАналитикеНоменклатуры = ВыборкаПоАналитике.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоАналитикеНоменклатуры.Следующий() Цикл
				
				ВыборкаДетальныеЗаписи = ВыборкаПоАналитикеНоменклатуры.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.Количество <> 0 Тогда
						
						СтрокаТабличнойЧастиТовары = ОтчетОРозничныхВозвратахОбъект.Товары.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧастиТовары, ВыборкаДетальныеЗаписи);
						СтрокаТабличнойЧастиТоварыКоличествоУпаковок = ?(СтрокаТабличнойЧастиТовары.КоличествоУпаковок = 0, ВыборкаДетальныеЗаписи.Количество, СтрокаТабличнойЧастиТовары.КоличествоУпаковок);
						СтрокаТабличнойЧастиТовары.Цена = Окр(СтрокаТабличнойЧастиТовары.Сумма / СтрокаТабличнойЧастиТоварыКоличествоУпаковок, 15, 2);
						ПодобратьЗаполнитьДокументРеализацииВСтроке(СтрокаТабличнойЧастиТовары, ТаблицаДокументовРеализации, СостояниеКассовойСмены, ВыборкаДетальныеЗаписи, Истина);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// Заполнение табличной части "Оплата платежными картами".
			МассивСтрок = ОплатаПлатежнымиКартами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Сумма <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхВозвратахОбъект.ОплатаПлатежнымиКартами.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
			// Заполнение табличной части "Серии".
			МассивСтрок = Серии.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				Если СтрокаТЧ.Количество <> 0 Тогда
					СтрокаТабличнойЧасти = ОтчетОРозничныхВозвратахОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
					ПодобратьЗаполнитьДокументРеализацииВСтроке(СтрокаТабличнойЧасти, ТаблицаДокументовРеализации, СостояниеКассовойСмены, СтрокаТЧ, Ложь);
				КонецЕсли;
				
			КонецЦикла;
						
			// Заполнение табличной части "БонусныеБаллы".
			МассивСтрок = БонусныеБаллы.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхВозвратахОбъект.НачислениеБонусныхБаллов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			// Заполнение табличной части "ОплатаБонуснымиБаллами".
			МассивСтрок = ОплатаБонуснымиБаллами.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхВозвратахОбъект.ОплатаБонуснымиБаллами.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			// Заполнение табличной части "АкцизныеМарки".
			МассивСтрок = АкцизныеМарки.НайтиСтроки(Новый Структура("ИндексПоАналитике", ВыборкаПоАналитике.ИндексПоАналитике));
			Для Каждого СтрокаТЧ Из МассивСтрок Цикл
				
				СтрокаТабличнойЧасти = ОтчетОРозничныхВозвратахОбъект.АкцизныеМарки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЧ);
				
			КонецЦикла;
			
			ОтчетОРозничныхВозвратахОбъект.Дата            = СостояниеКассовойСмены.ДатаИзмененияСтатуса;
			ОтчетОРозничныхВозвратахОбъект.ЦенаВключаетНДС = СостояниеКассовойСмены.ЦенаВключаетНДС;
			ОтчетОРозничныхВозвратахОбъект.КассоваяСмена   = СостояниеКассовойСмены.КассоваяСмена;
			ОтчетОРозничныхВозвратахОбъект.Подразделение   = СостояниеКассовойСмены.Подразделение;
			
		Иначе	
			// По кассовой смене не продано товара			
			// Заполняет отчет о розничных продажах данными по текущей кассовой смене.
			ЗаполнитьЗначенияСвойств(ОтчетОРозничныхВозвратахОбъект, СостояниеКассовойСмены, , "НалогообложениеНДС");
			
			ОтчетОРозничныхВозвратахОбъект.Дата           = СостояниеКассовойСмены.ДатаИзмененияСтатуса;
			ОтчетОРозничныхВозвратахОбъект.НалогообложениеНДС  = НалогообложениеНДС;
			
		КонецЕсли;

		ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(ОтчетОРозничныхВозвратахОбъект);
					
		Если Не ЗначениеЗаполнено(ОтчетОРозничныхВозвратахОбъект.Ответственный) Тогда
			ОтчетОРозничныхВозвратахОбъект.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОтчетОРозничныхВозвратахОбъект.Подразделение) Тогда
			ОтчетОРозничныхВозвратахОбъект.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(ОтчетОРозничныхВозвратахОбъект.Ответственный, ОтчетОРозничныхВозвратахОбъект.Подразделение);
		КонецЕсли;
		
		ОтчетОРозничныхВозвратахОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ОтчетОРозничныхВозвратахОбъект.Товары, ОтчетОРозничныхВозвратахОбъект.ЦенаВключаетНДС);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") И ОтчетОРозничныхВозвратахОбъект.Товары.Количество() Тогда
			
			ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(Документы.ОтчетОРозничныхВозвратах.ПараметрыУказанияСерий(ОтчетОРозничныхВозвратахОбъект));
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхВозвратахОбъект, ПараметрыУказанияСерий);
			
			// Необходимо серии с политикой учета "При планировании отгрузки" указать в отдельной табличной части.
			НужноСвернутьТабличныеЧасти = Ложь;
			Для Каждого СтрокаТовары Из ОтчетОРозничныхВозвратахОбъект.Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТовары.Серия) 
					И НоменклатураКлиентСервер.ВЭтомСтатусеСерииУказываютсяВТЧСерии(СтрокаТовары.СтатусУказанияСерий, ПараметрыУказанияСерий) Тогда
					НоваяСтрокаСерии = ОтчетОРозничныхВозвратахОбъект.Серии.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерии, СтрокаТовары);
					СтрокаТовары.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
					НужноСвернутьТабличныеЧасти = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НужноСвернутьТабличныеЧасти Тогда
				ОбщегоНазначенияУТ.СвернутьТабличнуюЧасть(ОтчетОРозничныхВозвратахОбъект, "Серии");
				ЧисловыеКолонкиДляГруппировки = Новый Массив;
				ЧисловыеКолонкиДляГруппировки.Добавить("Цена");
				ЧисловыеКолонкиДляГруппировки.Добавить("СтатусУказанияСерий");
				ОбщегоНазначенияУТ.СвернутьТабличнуюЧасть(ОтчетОРозничныхВозвратахОбъект, "Товары", ЧисловыеКолонкиДляГруппировки);
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОтчетОРозничныхВозвратахОбъект, ПараметрыУказанияСерий);
			КонецЕсли;
			
		КонецЕсли;
		
		ОтчетОРозничныхВозвратахЛокализация.ОбработкаЗаполнения(ОтчетОРозничныхВозвратахОбъект, Неопределено, Ложь);
		
		Если Не ТолькоЗаполнить Тогда
			
			ОтчетОРозничныхВозвратахОбъект.Записать(РежимЗаписиДокумента.Запись);
			Если ОтчетОРозничныхВозвратахОбъект.ПроверитьЗаполнение() Тогда
				ЭтоПопыткаПроведенияДокумента = Истина;
				ОтчетОРозничныхВозвратахОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Иначе
				ОписаниеОшибки = НСтр("ru = 'При проверке заполнения перед проведением документа %Документ% по кассовой смене %КассоваяСмена% произошла ошибка. Документ записан, но не проведен.'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КассоваяСмена%", СостояниеКассовойСмены.КассоваяСмена);
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Документ%", ОтчетОРозничныхВозвратахОбъект.Ссылка);
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
			КонецЕсли;

		КонецЕсли;
		
		Возврат ОтчетОРозничныхВозвратахОбъект.Ссылка;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru = 'При создании отчета о розничных возвратах по кассовой смене %КассоваяСмена% произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%КассоваяСмена%", СостояниеКассовойСмены.КассоваяСмена);
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ОписаниеОшибки);
		
		Возврат ?(Не ТолькоЗаполнить И ЭтоПопыткаПроведенияДокумента И ЗначениеЗаполнено(ОтчетОРозничныхВозвратахОбъект.Ссылка), ОтчетОРозничныхВозвратахОбъект.Ссылка, Неопределено);
		
	КонецПопытки;
	
КонецФункции 

// Выполняет подготовку данных по чекам кассовой смены.
//
// Параметры:
//  СостояниеКассовойСмены - см. ОписаниеКассовойСмены
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//  ВключатьНепроведенныеЧеки - Булево - По умолчанию - ложь
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений заполнена типами налогообложения НДС, которые используются в рамках кассовой смены:
//  * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
//
Функция ПодготовитьДанныеПоЧекамКассовойСмены(СостояниеКассовойСмены, МенеджерВременныхТаблиц, ВключатьНепроведенныеЧеки = Ложь) Экспорт
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	КонецЕсли;
	
	// Выясним сколько было использовано вариантов налогообложения в кассовой смене.
	// Подготовим временные таблицы ТоварыРозничныхПродаж, ТоварыРозничныхВозвратов, 
	// которые будут использоваться для заполнения документов по каждому типу налогообложения.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ПоЧекуКоррекции,
		|	ЧекККМТовары.Ссылка КАК Ссылка,
		|	ЧекККМТовары.Ссылка КАК ЧекККМ,
		|	ЧекККМТовары.КлючСвязи КАК КлючСвязи,
		|	ЧекККМТовары.НоменклатураНабора КАК НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Характеристика КАК Характеристика,
		|	ЧекККМТовары.Серия КАК Серия,
		|	ЧекККМТовары.Упаковка КАК Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЧекККМТовары.СуммаРучнойСкидки + ЧекККМТовары.СуммаАвтоматическойСкидки = 0
		|					ИЛИ ЧекККМТовары.КоличествоУпаковок = 0
		|				ТОГДА ЧекККМТовары.Цена
		|			ИНАЧЕ ЧекККМТовары.Сумма / ЧекККМТовары.КоличествоУпаковок
		|		КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена,
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество КАК Количество,
		|	ЧекККМТовары.Сумма КАК Сумма,
		|	ЧекККМТовары.СуммаНДС КАК СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад КАК Склад,
		|	ЧекККМТовары.Ссылка.Партнер КАК Партнер,
		|	ЧекККМТовары.Помещение КАК Помещение,
		|	ЧекККМТовары.Продавец КАК Продавец,
		|	ЧекККМТовары.Ссылка.Дата КАК Дата,
		|	ЧекККМТовары.Ссылка.Валюта КАК Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены КАК ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ КАК КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация КАК Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
		|	НЕОПРЕДЕЛЕНО КАК ЧекККМНалогообложениеНДС,
		|	НЕОПРЕДЕЛЕНО КАК ЧекККМКассоваяСмена
		|ПОМЕСТИТЬ ТоварыРозничныхПродаж
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И (ЧекККМТовары.Ссылка.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.Ссылка.ЧекККМ,
		|	0,
		|	ЧекККМТовары.НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Серия,
		|	ЧекККМТовары.Упаковка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.СтавкаНДС,
		|	-ЧекККМТовары.КоличествоУпаковок,
		|	-ЧекККМТовары.Количество,
		|	-ЧекККМТовары.Сумма,
		|	-ЧекККМТовары.СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад,
		|	ЧекККМТовары.Ссылка.Партнер,
		|	ЧекККМТовары.Помещение,
		|	ЧекККМТовары.Продавец,
		|	ЧекККМТовары.Ссылка.Дата,
		|	ЧекККМТовары.Ссылка.Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И (ЧекККМТовары.Ссылка.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И НЕ ЧекККМТовары.Ссылка.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|	И ЧекККМТовары.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМТовары.КоличествоУпаковок <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЛОЖЬ,
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.КлючСвязи,
		|	ЧекККМТовары.НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Серия,
		|	ЧекККМТовары.Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЧекККМТовары.СуммаРучнойСкидки + ЧекККМТовары.СуммаАвтоматическойСкидки = 0
		|					ИЛИ ЧекККМТовары.КоличествоУпаковок = 0
		|				ТОГДА ЧекККМТовары.Цена
		|			ИНАЧЕ ЧекККМТовары.Сумма / ЧекККМТовары.КоличествоУпаковок
		|		КОНЕЦ КАК ЧИСЛО(31, 2)),
		|	ЧекККМТовары.СтавкаНДС,
		|	-ЧекККМТовары.КоличествоУпаковок,
		|	-ЧекККМТовары.Количество,
		|	-ЧекККМТовары.Сумма,
		|	-ЧекККМТовары.СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад,
		|	ЧекККМТовары.Ссылка.Партнер,
		|	ЧекККМТовары.Помещение,
		|	ЧекККМТовары.Продавец,
		|	ЧекККМТовары.Ссылка.Дата,
		|	ЧекККМТовары.Ссылка.Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|	ПО (ЧекККМКоррекции.ЧекККМ = ЧекККМТовары.Ссылка)
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И ЧекККМКоррекции.КассоваяСмена = &КассоваяСмена
		|	И (ЧекККМКоррекции.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМКоррекции.Ссылка.ВидКоррекции = 0
		|	И ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЧекККМТовары.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.Ссылка.ЧекККМ,
		|	0,
		|	ЧекККМТовары.НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Серия,
		|	ЧекККМТовары.Упаковка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок,
		|	ЧекККМТовары.Количество,
		|	ЧекККМТовары.Сумма,
		|	ЧекККМТовары.СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад,
		|	ЧекККМТовары.Ссылка.Партнер,
		|	ЧекККМТовары.Помещение,
		|	ЧекККМТовары.Продавец,
		|	ЧекККМТовары.Ссылка.Дата,
		|	ЧекККМТовары.Ссылка.Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС,
		|	ЧекККМТовары.Ссылка.ЧекККМ.НалогообложениеНДС,
		|	ЧекККМТовары.Ссылка.ЧекККМ.КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМКоррекции.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И (ЧекККМТовары.Ссылка.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ПоЧекуКоррекции,
		|	ЧекККМТовары.Ссылка КАК Ссылка,
		|	ЧекККМТовары.Ссылка КАК ЧекККМСсылка,
		|	ЧекККМТовары.НоменклатураНабора КАК НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Характеристика КАК Характеристика,
		|	ЧекККМТовары.Серия КАК Серия,
		|	ЧекККМТовары.Упаковка КАК Упаковка,
		|	ЧекККМТовары.Цена КАК Цена,
		|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок КАК КоличествоУпаковок,
		|	ЧекККМТовары.Количество КАК Количество,
		|	ЧекККМТовары.Сумма КАК Сумма,
		|	ЧекККМТовары.СуммаНДС КАК СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад КАК Склад,
		|	ЧекККМТовары.Ссылка.Партнер КАК Партнер,
		|	ЧекККМТовары.Помещение КАК Помещение,
		|	ЧекККМТовары.Продавец КАК Продавец,
		|	ЧекККМТовары.Ссылка.Валюта КАК Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены КАК ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ КАК КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация КАК Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА ЧекККМТовары.Ссылка.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзТекущегоДокумента)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПродажи)
		|	КОНЕЦ КАК СпособОпределенияСебестоимости,
		|	ВЫБОР
		|		КОГДА ЧекККМТовары.Ссылка.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ЧекККМТовары.Ссылка.ЧекККМ.НалогообложениеНДС
		|	КОНЕЦ КАК ЧекККМНалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА ЧекККМТовары.Ссылка.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ЧекККМТовары.Ссылка.ЧекККМ.КассоваяСмена
		|	КОНЕЦ КАК ЧекККМКассоваяСмена
		|ПОМЕСТИТЬ ТоварыРозничныхВозвратов
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК ЧекККМТовары
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена = &КассоваяСмена
		|	И (ЧекККМТовары.Ссылка.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И (ЧекККМТовары.Ссылка.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ИЛИ (НЕ ЧекККМТовары.Ссылка.ЧекККМ.КассоваяСмена = &КассоваяСмена))
		|	И ЧекККМТовары.КоличествоУпаковок <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА,
		|	ЧекККМКоррекции.Ссылка,
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.НоменклатураНабора,
		|	ЧекККМТовары.ХарактеристикаНабора,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Серия,
		|	ЧекККМТовары.Упаковка,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЧекККМТовары.СуммаРучнойСкидки + ЧекККМТовары.СуммаАвтоматическойСкидки = 0
		|					ИЛИ ЧекККМТовары.КоличествоУпаковок = 0
		|				ТОГДА ЧекККМТовары.Цена
		|			ИНАЧЕ ЧекККМТовары.Сумма / ЧекККМТовары.КоличествоУпаковок
		|		КОНЕЦ КАК ЧИСЛО(31, 2)),
		|	ЧекККМТовары.СтавкаНДС,
		|	ЧекККМТовары.КоличествоУпаковок,
		|	ЧекККМТовары.Количество,
		|	ЧекККМТовары.Сумма,
		|	ЧекККМТовары.СуммаНДС,
		|	ЧекККМТовары.Ссылка.Склад,
		|	ЧекККМТовары.Ссылка.Партнер,
		|	ЧекККМТовары.Помещение,
		|	ЧекККМТовары.Продавец,
		|	ЧекККМТовары.Ссылка.Валюта,
		|	ЧекККМТовары.Ссылка.ВидЦены,
		|	ЧекККМТовары.Ссылка.КассаККМ,
		|	ЧекККМТовары.Ссылка.Организация,
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС,
		|	ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПродажи),
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС,
		|	ЧекККМТовары.Ссылка.КассоваяСмена
		|ИЗ
		|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ПО (ЧекККМКоррекции.ЧекККМ = ЧекККМТовары.Ссылка)
		|ГДЕ
		|	ЧекККМТовары.Ссылка.КассоваяСмена <> &КассоваяСмена
		|	И ЧекККМКоррекции.КассоваяСмена = &КассоваяСмена
		|	И (ЧекККМКоррекции.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМКоррекции.Ссылка.ВидКоррекции = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЧекККМ.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЧекККМ.НалогообложениеНДС КАК ЧекККМНалогообложениеНДС,
		|	НЕОПРЕДЕЛЕНО КАК ЧекККМКассоваяСмена
		|ПОМЕСТИТЬ ЧекиККМНалогообложениеНДС
		|ИЗ
		|	Документ.ЧекККМ КАК ЧекККМ
		|ГДЕ
		|	(ЧекККМ.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМ.КассоваяСмена = &КассоваяСмена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЧекККМКоррекции.НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА ЧекККМКоррекции.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ТОГДА ЧекККМКоррекции.НалогообложениеНДС
		|		ИНАЧЕ ЧекККМКоррекции.ЧекККМ.НалогообложениеНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЧекККМКоррекции.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ЧекККМКоррекции.ЧекККМ.КассоваяСмена
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
		|ГДЕ
		|	(ЧекККМКоррекции.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМКоррекции.КассоваяСмена = &КассоваяСмена
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЧекККМВозврат.НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА ЧекККМВозврат.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ТОГДА ЧекККМВозврат.НалогообложениеНДС
		|		ИНАЧЕ ЧекККМВозврат.ЧекККМ.НалогообложениеНДС
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЧекККМВозврат.ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка)
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ ЧекККМВозврат.ЧекККМ.КассоваяСмена
		|	КОНЕЦ
		|ИЗ
		|	Документ.ЧекККМВозврат КАК ЧекККМВозврат
		|ГДЕ
		|	(ЧекККМВозврат.Проведен
		|		ИЛИ &ВключатьНепроведенныеЧеки)
		|	И ЧекККМВозврат.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
		|	И ЧекККМВозврат.КассоваяСмена = &КассоваяСмена
		|;
		|
		|ВЫБРАТЬ 
		|	ЧекиККМНалогообложениеНДС.ЧекККМКассоваяСмена КАК КассоваяСмена,
		|	ЧекиККМНалогообложениеНДС.ЧекККМНалогообложениеНДС КАК НалогообложениеНДС,
		|	ЕСТЬNULL(ОтчетОРозничныхПродажах.Ссылка, НЕОПРЕДЕЛЕНО) КАК ДокументРеализации
		|ПОМЕСТИТЬ ЧекиККМДокументыРеализации
		|ИЗ ЧекиККМНалогообложениеНДС КАК ЧекиККМНалогообложениеНДС
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|	ПО ЧекиККМНалогообложениеНДС.ЧекККМКассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
		|		И ЧекиККМНалогообложениеНДС.ЧекККМНалогообложениеНДС = ОтчетОРозничныхПродажах.НалогообложениеНДС
		|		И НЕ ОтчетОРозничныхПродажах.ПометкаУдаления
		|ГДЕ 
		|	НЕ ЧекиККМНалогообложениеНДС.ЧекККМКассоваяСмена = НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА &НалогообложениеНДС = НЕОПРЕДЕЛЕНО
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|			ИНАЧЕ &НалогообложениеНДС
		|		КОНЕЦ КАК Перечисление.ТипыНалогообложенияНДС) КАК НалогообложениеНДС
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЧекиККМ.НалогообложениеНДС
		|ИЗ
		|	ЧекиККМНалогообложениеНДС КАК ЧекиККМ
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЧекиККМ.ЧекККМНалогообложениеНДС
		|ИЗ
		|	ЧекиККМНалогообложениеНДС КАК ЧекиККМ";
				   
	Запрос.УстановитьПараметр("КассоваяСмена", СостояниеКассовойСмены.КассоваяСмена);
	Запрос.УстановитьПараметр("НалогообложениеНДС", СостояниеКассовойСмены.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ВключатьНепроведенныеЧеки", ВключатьНепроведенныеЧеки);
		
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Выполняет заполнение Отчетов о розничных возвратах/продажах по кассовой смене по всем типам налогообложения в рамках этой кассовой смены.
//
// Параметры:
//  СостояниеКассовойСмены - см. ОписаниеКассовойСмены
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//  ВключатьНепроведенныеЧеки - Булево - По умолчанию - ложь
//
// Возвращаемое значение:
//  Булево - Если при заполнении документов не возникло ошибок, то будет возвращено значение Истина.
//
Функция ЗаполнитьОтчетыОРозничныхПродажахИВозвратах(СостояниеКассовойСмены, ОписаниеОшибки, ВключатьНепроведенныеЧеки = Ложь) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"ОбщийМодуль.РозничныеПродажи.ЗаполнитьОтчетыОРозничныхПродажахИВозвратах");
	
	КоличествоОбработанныхДанных = 0;
	
	// Заполним по каждому типу налогообложения пару документов: Отчет о розничных продажах, Отчет о розничных возвратах
	ПарыДокументовСформированы = Истина;
	
	ОписаниеОшибок = Новый Массив;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;		
	ТипыНалогообложенияНДСПоКассовойСмене = ПодготовитьДанныеПоЧекамКассовойСмены(СостояниеКассовойСмены, МенеджерВременныхТаблиц, ВключатьНепроведенныеЧеки);
	
	Для Каждого ТипНалогообложенияНДС Из ТипыНалогообложенияНДСПоКассовойСмене Цикл
		
		ОписаниеОшибкиЗаполнения = "";
		// Заполнение отчета о розничных возвратах
		ОтчетОРозничныхВозвратах = ЗаполнитьОтчетОРозничныхВозвратахПоКассовойСмене(СостояниеКассовойСмены, ТипНалогообложенияНДС.НалогообложениеНДС, МенеджерВременныхТаблиц, ОписаниеОшибкиЗаполнения);
		Если Не ПустаяСтрока(ОписаниеОшибкиЗаполнения) Тогда
			ОписаниеОшибок.Добавить(ОписаниеОшибкиЗаполнения);
		КонецЕсли;
	
		ОписаниеОшибкиЗаполнения = "";
		// Заполнение отчета о розничных продажах
		ОтчетОРозничныхПродажах = ЗаполнитьОтчетОРозничныхПродажахПоКассовойСмене(СостояниеКассовойСмены, ТипНалогообложенияНДС.НалогообложениеНДС, МенеджерВременныхТаблиц, ОписаниеОшибкиЗаполнения);
		Если Не ПустаяСтрока(ОписаниеОшибкиЗаполнения) Тогда
			ОписаниеОшибок.Добавить(ОписаниеОшибкиЗаполнения);
		КонецЕсли;
	
		Если ОтчетОРозничныхВозвратах = Неопределено Или ОтчетОРозничныхПродажах = Неопределено Или ОписаниеОшибок.Количество() > 0 Тогда
			
			ПарыДокументовСформированы = Ложь;
			Если ОписаниеОшибок.Количество() > 0 Тогда
				ОписаниеОшибки = СтрСоединить(ОписаниеОшибок, Символы.ПС);
			КонецЕсли;
			Прервать;
			
		КонецЕсли;
		
		КоличествоОбработанныхДанных = 	КоличествоОбработанныхДанных + 1;
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанныхДанных);
	
	Возврат ПарыДокументовСформированы;
	
КонецФункции	

// Выполняет закрытие кассовой смены.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Касса ККМ.
//  ОшибкаПриСнятииZОтчета - Булево - Флаг, при закрытии смены возникла ошибка.
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  Массив из ДокументСсылка.КассоваяСмена - Массив созданных отчетов о розничных продажах.
//
Функция ВыполнитьОперациюЗакрытияКассовойСмены(Объект, ОшибкаПриСнятииZОтчета, ОписаниеОшибки = "") Экспорт
	
	МассивДокументов = Новый Массив;
	
	КассаККМФискальноеУстройство = РозничныеПродажи.КассаККМФискальноеУстройство(Объект);
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	// Закрытие кассовой смены
	НачатьТранзакцию();
	Попытка
		
		КассоваяСмена = ЗакрытьКассовуюСмену(Объект, ОписаниеОшибки);
		Если Не ЗначениеЗаполнено(КассоваяСмена) Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КассаККМ) Тогда
			ИнкассацияВыполнена = ВыполнитьАвтоматическуюИнкассациюДС(КассаККМ, ОшибкаПриСнятииZОтчета);
		Иначе
			ПроверитьОперациюПриЗакрытииКассовойСменыПоказатьРекомендацию();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Закрытие кассовой смены'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки);
		
		Если ТранзакцияАктивна() Тогда
			ВызватьИсключение ПодробноеПредставлениеОшибки;
		КонецЕсли;

		КраткоеПредставлениеОшибки = НСтр("ru = 'При закрытии кассовой смены произошла ошибка. Подробное описание находится в журнале регистрации.'");
		ОписаниеОшибки = КраткоеПредставлениеОшибки;
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки);

		Возврат МассивДокументов;
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		
		// Получим состояние кассовой смены
		СостояниеКассовойСмены = ПолучитьСостояниеКассовойСмены(КассаККМ);
		
		// Удаление отложенных и чеков, по которым был зарезервирован товар.
		УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки);
		
		МассивДокументов.Добавить(СостояниеКассовойСмены.КассоваяСмена);
		
		СформироватьДокументыДляОперацииЗакрытияКассовойСмены(СостояниеКассовойСмены, ОписаниеОшибки);
		
	КонецЕсли;
	
	Возврат МассивДокументов;
	
КонецФункции

// Формирует документы при закрытии кассовой смены.
//
// Параметры:
//  СостояниеКассовойСмены - см. ПолучитьСостояниеКассовойСмены
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки
//  ВключатьНепроведенныеЧеки - Булево - По умолчанию - ложь
//
Процедура СформироватьДокументыДляОперацииЗакрытияКассовойСмены(СостояниеКассовойСмены, ОписаниеОшибки, ВключатьНепроведенныеЧеки = Ложь) Экспорт
	
	// Заполним по каждому типу налогообложения пару документов: Отчет о розничных продажах, Отчет о розничных возвратах
	ОписаниеОшибкиПриФормированииДокументов = "";
	ПарыДокументовСформированы = ЗаполнитьОтчетыОРозничныхПродажахИВозвратах(СостояниеКассовойСмены, ОписаниеОшибкиПриФормированииДокументов, ВключатьНепроведенныеЧеки);
	
	Если Не ПарыДокументовСформированы Тогда
		
		МассивСтрокОписанияОшибки = Новый Массив;
		Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
			МассивСтрокОписанияОшибки.Добавить(ОписаниеОшибки);
		КонецЕсли;
		МассивСтрокОписанияОшибки.Добавить(СтрШаблон(НСтр("ru = 'При формировании документов для операции закрытия кассовой смены %1 возникла ошибка.'"), СостояниеКассовойСмены.КассоваяСмена));
		Если Не ПустаяСтрока(ОписаниеОшибкиПриФормированииДокументов) Тогда
			МассивСтрокОписанияОшибки.Добавить(НСтр("ru = 'Дополнительное описание:'"));
			МассивСтрокОписанияОшибки.Добавить(ОписаниеОшибкиПриФормированииДокументов);
		КонецЕсли;
		
		ОписаниеОшибки = СтрСоединить(МассивСтрокОписанияОшибки, Символы.ПС);
		
	Иначе
		
		ПроверитьОперациюПриЗакрытииКассовойСменыПоказатьРекомендацию();
		
		// Архивация чеков ККМ
		Если Константы.ОперацияПриЗакрытииКассовойСмены.Получить() = Перечисления.ОперацииПриЗакрытииКассовойСмены.АрхивацияЧековККМ Тогда
			
			ПараметрыЗадания = НовыйПараметрыЗаданияЗакрытияКассовойСмены();
			ПараметрыЗадания.КассоваяСмена = СостояниеКассовойСмены.КассоваяСмена;
			
			ВыполнитьАрхивациюЧековККМ(ПараметрыЗадания, , ВключатьНепроведенныеЧеки);
			
		КонецЕсли;
		
		// Удаление чеков ККМ
		Если Константы.ОперацияПриЗакрытииКассовойСмены.Получить() = Перечисления.ОперацииПриЗакрытииКассовойСмены.УдалениеЧековККМ Тогда
			
			ПараметрыЗадания = НовыйПараметрыЗаданияЗакрытияКассовойСмены();
			ПараметрыЗадания.КассоваяСмена= СостояниеКассовойСмены.КассоваяСмена;
			
			ВыполнитьУдалениеЧековККМ(ПараметрыЗадания, , ВключатьНепроведенныеЧеки);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Функция-конструктор структуры состояния кассовой смены.
//
// Возвращаемое значение:
// 	Структура - содержит:
// * СистемаНалогообложения - ПеречислениеСсылка.ТипыСистемНалогообложенияККТ -
// * СерийныйНомерККМ - Строка -
// * СведенияООрганизации - Строка - 
// * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - 
// * ЦенаВключаетНДС - Булево - 
// * АдресСклада - Строка -
// * Склад - СправочникСсылка.Склады - 
// * Кассир - СправочникСсылка.Пользователи - 
// * ВидЦены - СправочникСсылка.ВидыЦен - 
// * ВалютаПредставление - Строка - 
// * Валюта - СправочникСсылка.Валюты - 
// * ФискальноеУстройство - СправочникСсылка.ПодключаемоеОборудование - 
// * КассаККМ - ОпределяемыйТип.КассаБПО - 
// * Организация - ОпределяемыйТип.ОрганизацияБПО - 
// * ОбновлятьОтчеты - Булево - 
// * ОписаниеОшибки - Строка -
// * Ошибка24Часа - Булево -
// * СменаОткрыта - Булево -
// * НомерКассовойСмены - Строка - 
// * НаличностьВКассе - Неопределено -
// * КассоваяСмена - ДокументСсылка.КассоваяСмена - 
// * СтатусРегламентныхОпераций - ПеречислениеСсылка.СтатусыРегламентныхОперацийКассовойСмены - 
// * СтатусКассовойСмены - ПеречислениеСсылка.СтатусыКассовойСмены - 
// * ДатаИзмененияСтатуса - Дата - 
// * РазъезднаяТорговля - Булево -
// * АдресМагазина - Строка -
// 
Функция ОписаниеКассовойСмены() Экспорт
	
	СостояниеКассовойСмены = Новый Структура;
	СостояниеКассовойСмены.Вставить("ДатаИзмененияСтатуса");
	СостояниеКассовойСмены.Вставить("СтатусКассовойСмены");
	СостояниеКассовойСмены.Вставить("СтатусРегламентныхОпераций");
	СостояниеКассовойСмены.Вставить("КассоваяСмена");
	СостояниеКассовойСмены.Вставить("НаличностьВКассе");
	СостояниеКассовойСмены.Вставить("НомерКассовойСмены");
	СостояниеКассовойСмены.Вставить("СменаОткрыта", Ложь);
	СостояниеКассовойСмены.Вставить("Ошибка24Часа", Ложь);
	СостояниеКассовойСмены.Вставить("ОписаниеОшибки", "");
	СостояниеКассовойСмены.Вставить("ОбновлятьОтчеты", Истина);
	
	// Описание реквизитов кассовой смены
	СостояниеКассовойСмены.Вставить("Организация");
	СостояниеКассовойСмены.Вставить("КассаККМ");
	СостояниеКассовойСмены.Вставить("ФискальноеУстройство");
	
	СостояниеКассовойСмены.Вставить("Валюта");
	СостояниеКассовойСмены.Вставить("ВалютаПредставление");
	СостояниеКассовойСмены.Вставить("ВидЦены");
	СостояниеКассовойСмены.Вставить("Кассир");
	СостояниеКассовойСмены.Вставить("Склад");
	СостояниеКассовойСмены.Вставить("Подразделение");
	СостояниеКассовойСмены.Вставить("АдресСклада", "");
	СостояниеКассовойСмены.Вставить("ЦенаВключаетНДС");
	СостояниеКассовойСмены.Вставить("НалогообложениеНДС");
	СостояниеКассовойСмены.Вставить("РазъезднаяТорговля", Ложь);
	СостояниеКассовойСмены.Вставить("АдресРасчетов", "");
	СостояниеКассовойСмены.Вставить("МестоРасчетов", "");
	
	// Прочее
	СостояниеКассовойСмены.Вставить("СведенияООрганизации");
	СостояниеКассовойСмены.Вставить("СерийныйНомерККМ",       "");
	СостояниеКассовойСмены.Вставить("СистемаНалогообложения", Перечисления.ТипыСистемНалогообложенияККТ.ПустаяСсылка());
	
	Возврат СостояниеКассовойСмены;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанныхПродаж

// Получает данные о розничных продажах за период.
//
// Параметры:
//  ПараметрыРасчета - Структура - параметры получения продаж: Организация, НачалоПериода, КонецПериода
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//		Организация, Период, ТипНоменклатуры, СтавкаНДС, СуммаБезНДС, СуммаНДС
//
Функция ПолучитьДанныеПродажЗаПериод(ПараметрыРасчета) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ КассовыеСменыСОтчетами
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Организация В(&МассивОрганизаций)
	|	И ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхВозвратах.КассоваяСмена КАК КассоваяСмена
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Организация В(&МассивОрганизаций)
	|	И ОтчетОРозничныхВозвратах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетОРозничныхВозвратах.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КассоваяСмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ КассовыеСменыСОтчетамиДляОтбораЧеков
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Организация В(&МассивОрганизаций)
	|	И ОтчетОРозничныхПродажах.Дата >= &НачалоПериода
	|	И ОтчетОРозничныхПродажах.Проведен
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхВозвратах.КассоваяСмена КАК КассоваяСмена
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Организация В(&МассивОрганизаций)
	|	И ОтчетОРозничныхВозвратах.Дата >= &НачалоПериода
	|	И ОтчетОРозничныхВозвратах.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КассоваяСмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеПродажи.Организация     КАК Организация,
	|	РозничныеПродажи.Период          КАК Период,
	|	РозничныеПродажи.ТипНоменклатуры КАК ТипНоменклатуры,
	|	РозничныеПродажи.СтавкаНДС       КАК СтавкаНДС,
	|	СУММА(РозничныеПродажи.Сумма)    КАК Сумма,
	|	СУММА(РозничныеПродажи.СуммаНДС) КАК СуммаНДС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМТовары.Ссылка.Организация КАК Организация,
	|		НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, МЕСЯЦ) КАК Период,
	|		ЧекККМТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА ЧекККМТовары.Сумма - ЧекККМТовары.СуммаНДС
	|			ИНАЧЕ ЧекККМТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ЧекККМТовары.СуммаНДС КАК СуммаНДС
	|	ИЗ
	|		Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|	ГДЕ
	|		ЧекККМТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ЧекККМТовары.Ссылка.Проведен
	|		И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|		И ЧекККМТовары.Ссылка.Организация В (&МассивОрганизаций)
	|		И НЕ ЧекККМТовары.Ссылка.КассоваяСмена В (ВЫБРАТЬ Т.КассоваяСмена ИЗ КассовыеСменыСОтчетамиДляОтбораЧеков КАК Т)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, МЕСЯЦ),
	|		ЧекККМТовары.Номенклатура.ТипНоменклатуры,
	|		ЧекККМТовары.СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА - ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС
	|			ИНАЧЕ - ЧекККМТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		-ЧекККМТовары.СуммаНДС
	|	ИЗ
	|		Документ.ЧекККМВозврат.Товары КАК ЧекККМТовары
	|	ГДЕ
	|		ЧекККМТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ЧекККМТовары.Ссылка.Проведен
	|		И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|		И ЧекККМТовары.Ссылка.Организация В (&МассивОрганизаций)
	|		И НЕ ЧекККМТовары.Ссылка.КассоваяСмена В (ВЫБРАТЬ Т.КассоваяСмена ИЗ КассовыеСменыСОтчетамиДляОтбораЧеков КАК Т)
	|		И ЧекККМТовары.КоличествоУпаковок <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, МЕСЯЦ),
	|		ЧекККМТовары.Номенклатура.ТипНоменклатуры,
	|		ЧекККМТовары.СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА - ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС
	|			ИНАЧЕ - ЧекККМТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		-ЧекККМТовары.СуммаНДС
	|	ИЗ
	|		Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
	|			ПО (ЧекККМКоррекции.ЧекККМ = ЧекККМТовары.Ссылка)
	|				И (ЧекККМКоррекции.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И (ЧекККМКоррекции.Проведен)
	|				И (ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|	ГДЕ
	|		ЧекККМТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ЧекККМТовары.Ссылка.Организация В (&МассивОрганизаций)
	|		И НЕ ЧекККМТовары.Ссылка.КассоваяСмена В (ВЫБРАТЬ Т.КассоваяСмена ИЗ КассовыеСменыСОтчетамиДляОтбораЧеков КАК Т)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, МЕСЯЦ),
	|		ЧекККМТовары.Номенклатура.ТипНоменклатуры,
	|		ЧекККМТовары.СтавкаНДС,
	|		СУММА(ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА ЧекККМТовары.Сумма - ЧекККМТовары.СуммаНДС
	|			ИНАЧЕ ЧекККМТовары.Сумма
	|		КОНЕЦ) КАК Сумма,
	|		СУММА(ЧекККМТовары.СуммаНДС)
	|	ИЗ
	|		Документ.ЧекККМКоррекции.Товары КАК ЧекККМТовары
	|	ГДЕ
	|		ЧекККМТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ЧекККМТовары.Ссылка.ЧекККМ.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ЧекККМТовары.Ссылка.Проведен
	|		И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|		И ЧекККМТовары.Ссылка.Организация В (&МассивОрганизаций)
	|		И НЕ ЧекККМТовары.Ссылка.КассоваяСмена В (ВЫБРАТЬ Т.КассоваяСмена ИЗ КассовыеСменыСОтчетамиДляОтбораЧеков КАК Т)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЧекККМТовары.Ссылка,
	|		ЧекККМТовары.Номенклатура.ТипНоменклатуры,
	|		ЧекККМТовары.СтавкаНДС
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхПродажахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхПродажахТовары.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхПродажахТовары.СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажахТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА ОтчетОРозничныхПродажахТовары.Сумма - ОтчетОРозничныхПродажахТовары.СуммаНДС
	|			ИНАЧЕ ОтчетОРозничныхПродажахТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ОтчетОРозничныхПродажахТовары.СуммаНДС
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхПродажахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхПродажахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
	|		И ОтчетОРозничныхПродажахТовары.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхПродажахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхПродажахТовары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхПродажахТовары.СтавкаНДС,
	|		ОтчетОРозничныхПродажахТовары.СуммаСНДС - ОтчетОРозничныхПродажахТовары.СуммаНДС КАК Сумма,
	|		ОтчетОРозничныхПродажахТовары.СуммаНДС
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ВидыЗапасов КАК ОтчетОРозничныхПродажахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхПродажахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхПродажахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
	|		И ОтчетОРозничныхПродажахТовары.ВидЗапасов.ТипЗапасов В (&ТипыЗапасовСобственные)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионераТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетКомиссионераТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетКомиссионераТовары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры,
	|		ОтчетКомиссионераТовары.СтавкаНДС,
	|		ЕСТЬNULL(СуммыДокументовВВалютеРегл.БазаНДСРегл, ОтчетКомиссионераТовары.СуммаСНДС - ОтчетКомиссионераТовары.СуммаНДС) КАК Сумма,
	|		ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаНДСРегл, ОтчетКомиссионераТовары.СуммаНДС)
	|	ИЗ
	|		Документ.ОтчетКомиссионера.ВидыЗапасов КАК ОтчетКомиссионераТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютеРегл
	|			ПО СуммыДокументовВВалютеРегл.Регистратор = ОтчетКомиссионераТовары.Ссылка
	|			 И СуммыДокументовВВалютеРегл.ИдентификаторСтроки = ОтчетКомиссионераТовары.ИдентификаторСтроки
	|	ГДЕ
	|		ОтчетКомиссионераТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетКомиссионераТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетКомиссионераТовары.Ссылка.Проведен
	|		И ОтчетКомиссионераТовары.ВидЗапасов.ТипЗапасов В (&ТипыЗапасовСобственные)
	|		И (НЕ ОтчетКомиссионераТовары.Покупатель.ЮрФизЛицо В
	|			(ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо), ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель))
	|			ИЛИ ОтчетКомиссионераТовары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		И ОтчетКомиссионераТовары.НомерСчетаФактурыКомиссионера = """"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионераТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетКомиссионераТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетКомиссионераТовары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры,
	|		ОтчетКомиссионераТовары.СтавкаНДС,
	|		ЕСТЬNULL(СуммыДокументовВВалютеРегл.БазаНДСРегл, ОтчетКомиссионераТовары.СуммаСНДС - ОтчетКомиссионераТовары.СуммаНДС) КАК Сумма,
	|		ЕСТЬNULL(СуммыДокументовВВалютеРегл.СуммаНДСРегл, ОтчетКомиссионераТовары.СуммаНДС)
	|	ИЗ
	|		Документ.ОтчетКомиссионера.Товары КАК ОтчетКомиссионераТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютеРегл
	|			ПО СуммыДокументовВВалютеРегл.Регистратор = ОтчетКомиссионераТовары.Ссылка
	|			 И СуммыДокументовВВалютеРегл.ИдентификаторСтроки = ОтчетКомиссионераТовары.ИдентификаторСтроки
	|	ГДЕ
	|		ОтчетКомиссионераТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетКомиссионераТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетКомиссионераТовары.Ссылка.Проведен
	|		И ОтчетКомиссионераТовары.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|		И (НЕ ОтчетКомиссионераТовары.Покупатель.ЮрФизЛицо В
	|			(ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо), ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель))
	|			ИЛИ ОтчетКомиссионераТовары.Покупатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		И ОтчетКомиссионераТовары.НомерСчетаФактурыКомиссионера = """"
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхВозвратахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхВозвратахТовары.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхВозвратахТовары.СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ОтчетОРозничныхВозвратахТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА - ОтчетОРозничныхВозвратахТовары.Сумма + ОтчетОРозничныхВозвратахТовары.СуммаНДС
	|			ИНАЧЕ - ОтчетОРозничныхВозвратахТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		- ОтчетОРозничныхВозвратахТовары.СуммаНДС
	|	ИЗ
	|		Документ.ОтчетОРозничныхВозвратах.Товары КАК ОтчетОРозничныхВозвратахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхВозвратахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Проведен
	|		И ОтчетОРозничныхВозвратахТовары.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|		И ОтчетОРозничныхВозвратахТовары.ПоЧекуКоррекции
	|		И ОтчетОРозничныхВозвратахТовары.ДокументРеализации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхВозвратахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхВозвратахТовары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхВозвратахТовары.СтавкаНДС,
	|		- ОтчетОРозничныхВозвратахТовары.СуммаСНДС + ОтчетОРозничныхВозвратахТовары.СуммаНДС КАК Сумма,
	|		- ОтчетОРозничныхВозвратахТовары.СуммаНДС
	|	ИЗ
	|		Документ.ОтчетОРозничныхВозвратах.ВидыЗапасов КАК ОтчетОРозничныхВозвратахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхВозвратахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Проведен
	|		И ОтчетОРозничныхВозвратахТовары.ВидЗапасов.ТипЗапасов В (&ТипыЗапасовСобственные)
	|		И ОтчетОРозничныхВозвратахТовары.ПоЧекуКоррекции
	|		И ОтчетОРозничныхВозвратахТовары.ДокументРеализации.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|) КАК РозничныеПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничныеПродажи.Организация,
	|	РозничныеПродажи.Период,
	|	РозничныеПродажи.СтавкаНДС,
	|	РозничныеПродажи.ТипНоменклатуры";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("ТипыЗапасовСобственные", Перечисления.ТипыЗапасов.ТипыЗапасовСобственные());
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПродаж = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПродаж;
	
КонецФункции

// Получает данные об исправлениях данных розничных продаж за предыдущие периоды в текущем периоде.
//
// Параметры:
//  ПараметрыРасчета - Структура - параметры получения продаж: Организация, НачалоПериода, КонецПериода
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//		Организация, Период, ИсправляемыйПериод, ТипНоменклатуры, СтавкаНДС, СуммаБезНДС, СуммаНДС
//
Функция ПолучитьДанныеИсправленийПродажЗаПериод(ПараметрыРасчета) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ КассовыеСменыСОтчетами
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.Организация В(&МассивОрганизаций)
	|	И ОтчетОРозничныхПродажах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетОРозничныхПродажах.Проведен
	|	
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхВозвратах.КассоваяСмена КАК КассоваяСмена
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Организация В(&МассивОрганизаций)
	|	И ОтчетОРозничныхВозвратах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетОРозничныхВозвратах.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КассоваяСмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеПродажи.Организация        КАК Организация,
	|	РозничныеПродажи.Период             КАК Период,
	|	РозничныеПродажи.ТипНоменклатуры    КАК ТипНоменклатуры,
	|	РозничныеПродажи.СтавкаНДС          КАК СтавкаНДС,
	|	СУММА(РозничныеПродажи.Сумма)       КАК Сумма,
	|	СУММА(РозничныеПродажи.СуммаНДС)    КАК СуммаНДС,
	|	РозничныеПродажи.ИсправляемыйПериод КАК ИсправляемыйПериод
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЧекККМТовары.Ссылка.Организация КАК Организация,
	|		НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, МЕСЯЦ) КАК Период,
	|		ЧекККМТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА - ЧекККМТовары.Сумма + ЧекККМТовары.СуммаНДС
	|			ИНАЧЕ - ЧекККМТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		-ЧекККМТовары.СуммаНДС КАК СуммаНДС,
	|		НАЧАЛОПЕРИОДА(ЧекККМКоррекции.ДатаИсходнойПродажи, МЕСЯЦ) КАК ИсправляемыйПериод
	|	ИЗ
	|		Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМКоррекции КАК ЧекККМКоррекции
	|			ПО (ЧекККМКоррекции.ЧекККМ = ЧекККМТовары.Ссылка)
	|				И (ЧекККМКоррекции.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|				И (ЧекККМКоррекции.Проведен)
	|				И (ЧекККМКоррекции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит))
	|	ГДЕ
	|		ЧекККМТовары.Ссылка.Дата < &НачалоПериода
	|		И ЧекККМТовары.Ссылка.Организация В (&МассивОрганизаций)
	|		И НЕ ЧекККМТовары.Ссылка.КассоваяСмена В (ВЫБРАТЬ Т.КассоваяСмена ИЗ КассовыеСменыСОтчетами КАК Т)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЧекККМТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.Дата, МЕСЯЦ),
	|		ЧекККМТовары.Номенклатура.ТипНоменклатуры,
	|		ЧекККМТовары.СтавкаНДС,
	|		СУММА(ВЫБОР
	|			КОГДА ЧекККМТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА ЧекККМТовары.Сумма - ЧекККМТовары.СуммаНДС
	|			ИНАЧЕ ЧекККМТовары.Сумма
	|		КОНЕЦ) КАК Сумма,
	|		СУММА(ЧекККМТовары.СуммаНДС),
	|		НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.ДатаИсходнойПродажи, МЕСЯЦ)
	|	ИЗ
	|		Документ.ЧекККМКоррекции.Товары КАК ЧекККМТовары
	|	ГДЕ
	|		ЧекККМТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ЧекККМТовары.Ссылка.ЧекККМ.Дата < &НачалоПериода
	|		И ЧекККМТовары.Ссылка.Проведен
	|		И ЧекККМТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|		И ЧекККМТовары.Ссылка.Организация В (&МассивОрганизаций)
	|		И НЕ ЧекККМТовары.Ссылка.КассоваяСмена В (ВЫБРАТЬ Т.КассоваяСмена ИЗ КассовыеСменыСОтчетами КАК Т)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЧекККМТовары.Ссылка,
	|		ЧекККМТовары.Номенклатура.ТипНоменклатуры,
	|		ЧекККМТовары.СтавкаНДС,
	|		НАЧАЛОПЕРИОДА(ЧекККМТовары.Ссылка.ДатаИсходнойПродажи, МЕСЯЦ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхПродажахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхПродажахТовары.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхПродажахТовары.СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ОтчетОРозничныхПродажахТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА ОтчетОРозничныхПродажахТовары.Сумма - ОтчетОРозничныхПродажахТовары.СуммаНДС
	|			ИНАЧЕ ОтчетОРозничныхПродажахТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ОтчетОРозничныхПродажахТовары.СуммаНДС,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахТовары.ДокументРеализации.Дата, МЕСЯЦ)
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхПродажахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхПродажахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
	|		И ОтчетОРозничныхПродажахТовары.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|		И ОтчетОРозничныхПродажахТовары.ПоЧекуКоррекции
	|		И ОтчетОРозничныхПродажахТовары.ДокументРеализации.Дата < &НачалоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхПродажахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхПродажахТовары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхПродажахТовары.СтавкаНДС,
	|		ОтчетОРозничныхПродажахТовары.СуммаСНДС - ОтчетОРозничныхПродажахТовары.СуммаНДС КАК Сумма,
	|		ОтчетОРозничныхПродажахТовары.СуммаНДС,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхПродажахТовары.ДокументРеализации.Дата, МЕСЯЦ)
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах.ВидыЗапасов КАК ОтчетОРозничныхПродажахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхПродажахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхПродажахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхПродажахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
	|		И ОтчетОРозничныхПродажахТовары.ВидЗапасов.ТипЗапасов В (&ТипыЗапасовСобственные)
	|		И ОтчетОРозничныхПродажахТовары.ПоЧекуКоррекции
	|		И ОтчетОРозничныхПродажахТовары.ДокументРеализации.Дата < &НачалоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхВозвратахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхВозвратахТовары.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхВозвратахТовары.СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ОтчетОРозничныхВозвратахТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА - ОтчетОРозничныхВозвратахТовары.Сумма + ОтчетОРозничныхВозвратахТовары.СуммаНДС
	|			ИНАЧЕ - ОтчетОРозничныхВозвратахТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		- ОтчетОРозничныхВозвратахТовары.СуммаНДС,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхВозвратахТовары.ДокументРеализации.Дата, МЕСЯЦ)
	|	ИЗ
	|		Документ.ОтчетОРозничныхВозвратах.Товары КАК ОтчетОРозничныхВозвратахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхВозвратахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Проведен
	|		И ОтчетОРозничныхВозвратахТовары.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|		И ОтчетОРозничныхВозвратахТовары.ПоЧекуКоррекции
	|		И ОтчетОРозничныхВозвратахТовары.ДокументРеализации.Дата < &НачалоПериода
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхВозвратахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхВозвратахТовары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхВозвратахТовары.СтавкаНДС,
	|		- ОтчетОРозничныхВозвратахТовары.СуммаСНДС + ОтчетОРозничныхВозвратахТовары.СуммаНДС КАК Сумма,
	|		- ОтчетОРозничныхВозвратахТовары.СуммаНДС,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхВозвратахТовары.ДокументРеализации.Дата, МЕСЯЦ)
	|	ИЗ
	|		Документ.ОтчетОРозничныхВозвратах.ВидыЗапасов КАК ОтчетОРозничныхВозвратахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхВозвратахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Проведен
	|		И ОтчетОРозничныхВозвратахТовары.ВидЗапасов.ТипЗапасов В (&ТипыЗапасовСобственные)
	|		И ОтчетОРозничныхВозвратахТовары.ПоЧекуКоррекции
	|		И ОтчетОРозничныхВозвратахТовары.ДокументРеализации.Дата < &НачалоПериода
	|) КАК РозничныеПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничныеПродажи.Организация,
	|	РозничныеПродажи.Период,
	|	РозничныеПродажи.СтавкаНДС,
	|	РозничныеПродажи.ТипНоменклатуры,
	|	РозничныеПродажи.ИсправляемыйПериод";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("ТипыЗапасовСобственные", Перечисления.ТипыЗапасов.ТипыЗапасовСобственные());
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПродаж = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПродаж;
	
КонецФункции


// Получает данные о розничных возвратах за период.
//
// Параметры:
//  ПараметрыРасчета - Структура - параметры получения продаж: Организация, НачалоПериода, КонецПериода
//
// Возвращаемое значение:
//  ТаблицаЗначений - с колонками:
//		Организация, Период, ТипНоменклатуры, СтавкаНДС, СуммаБезНДС, СуммаНДС
//
Функция ПолучитьДанныеВозвратовЗаПериод(ПараметрыРасчета) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетОРозничныхВозвратах.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ КассовыеСменыСОтчетами
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.Организация В(&МассивОрганизаций)
	|	И ОтчетОРозничныхВозвратах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетОРозничныхВозвратах.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КассоваяСмена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РозничныеВозвраты.Организация        КАК Организация,
	|	РозничныеВозвраты.Период             КАК Период,
	|	РозничныеВозвраты.ТипНоменклатуры    КАК ТипНоменклатуры,
	|	РозничныеВозвраты.СтавкаНДС          КАК СтавкаНДС,
	|	СУММА(РозничныеВозвраты.Сумма)       КАК Сумма,
	|	СУММА(РозничныеВозвраты.СуммаНДС)    КАК СуммаНДС,
	|	РозничныеВозвраты.ДокументРеализации КАК КорректируемыйДокумент
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация КАК Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхВозвратахТовары.Ссылка.Дата, МЕСЯЦ) КАК Период,
	|		ОтчетОРозничныхВозвратахТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|		ОтчетОРозничныхВозвратахТовары.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ОтчетОРозничныхВозвратахТовары.Ссылка.ЦенаВключаетНДС
	|				ТОГДА ОтчетОРозничныхВозвратахТовары.Сумма - ОтчетОРозничныхВозвратахТовары.СуммаНДС
	|			ИНАЧЕ ОтчетОРозничныхВозвратахТовары.Сумма
	|		КОНЕЦ КАК Сумма,
	|		ОтчетОРозничныхВозвратахТовары.СуммаНДС КАК СуммаНДС,
	|		ОтчетОРозничныхВозвратахТовары.ДокументРеализации КАК ДокументРеализации
	|	ИЗ
	|		Документ.ОтчетОРозничныхВозвратах.Товары КАК ОтчетОРозничныхВозвратахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхВозвратахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Проведен
	|		И НЕ ОтчетОРозничныхВозвратахТовары.ПоЧекуКоррекции
	|		И ОтчетОРозничныхВозвратахТовары.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|		И ОтчетОРозничныхВозвратахТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация,
	|		НАЧАЛОПЕРИОДА(ОтчетОРозничныхВозвратахТовары.Ссылка.Дата, МЕСЯЦ),
	|		ОтчетОРозничныхВозвратахТовары.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры,
	|		ОтчетОРозничныхВозвратахТовары.СтавкаНДС,
	|		ОтчетОРозничныхВозвратахТовары.СуммаСНДС - ОтчетОРозничныхВозвратахТовары.СуммаНДС,
	|		ОтчетОРозничныхВозвратахТовары.СуммаНДС,
	|		ОтчетОРозничныхВозвратахТовары.ДокументРеализации
	|	ИЗ
	|		Документ.ОтчетОРозничныхВозвратах.ВидыЗапасов КАК ОтчетОРозничныхВозвратахТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ КассовыеСменыСОтчетами КАК КассовыеСменыСОтчетами
	|			ПО КассовыеСменыСОтчетами.КассоваяСмена = ОтчетОРозничныхВозвратахТовары.Ссылка.КассоваяСмена
	|	ГДЕ
	|		ОтчетОРозничныхВозвратахТовары.Ссылка.Организация В(&МассивОрганизаций)
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|		И ОтчетОРозничныхВозвратахТовары.Ссылка.Проведен
	|		И НЕ ОтчетОРозничныхВозвратахТовары.ПоЧекуКоррекции
	|		И ОтчетОРозничныхВозвратахТовары.ВидЗапасов.ТипЗапасов В (&ТипыЗапасовСобственные)
	|		И ОтчетОРозничныхВозвратахТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
	|) КАК РозничныеВозвраты
	|
	|СГРУППИРОВАТЬ ПО
	|	РозничныеВозвраты.Организация,
	|	РозничныеВозвраты.Период,
	|	РозничныеВозвраты.СтавкаНДС,
	|	РозничныеВозвраты.ТипНоменклатуры,
	|	РозничныеВозвраты.ДокументРеализации";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивОрганизаций", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыРасчета.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", ПараметрыРасчета.КонецПериода);
	Запрос.УстановитьПараметр("ТипыЗапасовСобственные", Перечисления.ТипыЗапасов.ТипыЗапасовСобственные());
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаВозвратов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаВозвратов;
	
КонецФункции

#КонецОбласти

#Область ФункцииПроверкиСостоянияКассовойСмены

// Функция возвращает структуру, характеризующую состояние последней кассовой смены по кассе ККМ.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Ссылка на кассу ККМ.
//  КассоваяСмена - ДокументСсылка.КассоваяСмена, Неопределено - Ссылка на документ Кассовая смена описание которой необходимо получить.
//
// Возвращаемое значение:
//  см. ОписаниеКассовойСмены
//
Функция ПолучитьСостояниеКассовойСмены(Объект, КассоваяСмена = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер                      КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка                     КАК КассоваяСмена,
	|	КассоваяСмена.Статус                     КАК СтатусКассовойСмены,
	|	КассоваяСмена.СтатусРегламентныхОпераций КАК СтатусРегламентныхОпераций,
	|	
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	КассоваяСмена.АдресРасчетов КАК АдресРасчетов,
	|	КассоваяСмена.МестоРасчетов КАК МестоРасчетов
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И (&КассоваяСмена = Неопределено ИЛИ &КассоваяСмена <> Неопределено И КассоваяСмена.Ссылка = &КассоваяСмена)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КассоваяСмена.Дата УБЫВ,
	|	КассоваяСмена УБЫВ";
	
	Запрос.УстановитьПараметр("КассаККМ",             КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
	Запрос.УстановитьПараметр("КассоваяСмена",		  КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ОписаниеКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		
		Если (ТекущаяДатаСеанса() - ОписаниеКассовойСмены.ДатаИзмененияСтатуса >= 86400)
			И Выборка.СменаОткрыта Тогда
			ОписаниеКассовойСмены.Ошибка24Часа = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ЗаполнитьОписаниеКассовойСменыПоКассеККМ(ОписаниеКассовойСмены, КассаККМ);
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция возвращает структуру, характеризующую состояние кассовой смены с определенным номером по кассе ККМ.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Ссылка на кассу ККМ.
//  НомерСмены - Число - Номер кассовой смены.
//
// Возвращаемое значение:
//  см. ОписаниеКассовойСмены
//
Функция ПолучитьСостояниеКассовойСменыПоНомеру(Объект, НомерСмены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер                      КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка                     КАК КассоваяСмена,
	|	КассоваяСмена.Статус                     КАК СтатусКассовойСмены,
	|	КассоваяСмена.СтатусРегламентныхОпераций КАК СтатусРегламентныхОпераций,
	|	
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	КассоваяСмена.АдресРасчетов КАК АдресРасчетов,
	|	КассоваяСмена.МестоРасчетов КАК МестоРасчетов
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И (КассоваяСмена.Номер = &НомерСмены)	
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))";
	
	Запрос.УстановитьПараметр("КассаККМ",             КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
	Запрос.УстановитьПараметр("НомерСмены",           НомерСмены);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ОписаниеКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		
		Если (ТекущаяДатаСеанса() - ОписаниеКассовойСмены.ДатаИзмененияСтатуса >= 86400)
			И Выборка.СменаОткрыта Тогда
			ОписаниеКассовойСмены.Ошибка24Часа = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ЗаполнитьОписаниеКассовойСменыПоКассеККМ(ОписаниеКассовойСмены, КассаККМ);
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция возвращает структуру, характеризующую состояние кассовой смены на дату.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Ссылка на кассу ККМ
//  ДатаВремя - Дата - Дата, на которую необходимо получить описание кассовой смены.
//
// Возвращаемое значение:
//  см. ОписаниеКассовойСмены
//
Функция ПолучитьРеквизитыКассовойСменыНаДату(Объект, ДатаВремя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Номер  КАК НомерКассовойСмены,
	|	КассоваяСмена.Ссылка КАК КассоваяСмена,
	|	КассоваяСмена.Статус                     КАК СтатусКассовойСмены,
	|	КассоваяСмена.СтатусРегламентныхОпераций КАК СтатусРегламентныхОпераций,
	|	
	|	КассоваяСмена.Организация          КАК Организация,
	|	КассоваяСмена.КассаККМ             КАК КассаККМ,
	|	КассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СменаОткрыта,
	|	
	|	ВЫБОР
	|		КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|			ТОГДА КассоваяСмена.НачалоКассовойСмены
	|		ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	КассоваяСмена.АдресРасчетов КАК АдресРасчетов,
	|	КассоваяСмена.МестоРасчетов КАК МестоРасчетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ) КАК ДатаИзмененияСтатуса,
	|		КассоваяСмена.КассаККМ КАК КассаККМ,
	|		КассоваяСмена.ФискальноеУстройство КАК ФискальноеУстройство
	|	ИЗ
	|		Документ.КассоваяСмена КАК КассоваяСмена
	|	ГДЕ
	|		КассоваяСмена.Проведен
	|		И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|		ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|		И ВЫБОР
	|				КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ <= &ДатаВремя
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КассоваяСмена.КассаККМ,
	|		КассоваяСмена.ФискальноеУстройство) КАК КассовыеСмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КассоваяСмена КАК КассоваяСмена
	|		ПО КассовыеСмены.КассаККМ = КассоваяСмена.КассаККМ
	|		 И КассовыеСмены.ФискальноеУстройство = КассоваяСмена.ФискальноеУстройство
	|			И КассоваяСмена.Проведен 
	|			И (КассовыеСмены.ДатаИзмененияСтатуса = ВЫБОР
	|				КОГДА КассоваяСмена.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)
	|					ТОГДА КассоваяСмена.НачалоКассовойСмены
	|				ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены
	|			КОНЕЦ)
	|";
	
	Запрос.УстановитьПараметр("КассаККМ",             КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
	
	Запрос.УстановитьПараметр("ДатаВремя",            ДатаВремя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ОписаниеКассовойСмены = ОписаниеКассовойСмены();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ОписаниеКассовойСмены, Выборка);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КассаККМ) Тогда
		ЗаполнитьОписаниеКассовойСменыПоКассеККМ(ОписаниеКассовойСмены, КассаККМ);
	КонецЕсли;
	
	Возврат ОписаниеКассовойСмены;
	
КонецФункции

// Функция получает открытую кассовую смену по Кассе ККМ в заданный период.
// Используется для контроля пересечения кассовых смен.
// За один период может одновременно существовать только одна кассовая смена.
//
// Параметры:
//  Объект - СправочникСсылка.КассыККМ, СправочникСсылка.ПодключаемоеОборудование - Ссылка на кассу ККМ
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Ссылка на кассовую смену,
//                если указана, то проверяется наличие любой другой кассовой смены
//  НачалоКассовойСмены - Дата - Дата начала кассовой смены
//  ОкончаниеКассовойСмены - Дата - Дата окончания кассовой смены.
//
// Возвращаемое значение:
//  ДокументСсылка.КассоваяСмена - Открытая кассовая смена на заданный период. Или неопределено если открытой смены нет.
//
Функция ПолучитьОткрытуюКассовуюСмену(Объект, КассоваяСмена, НачалоКассовойСмены, ОкончаниеКассовойСмены) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	КассаККМФискальноеУстройство = КассаККМФискальноеУстройство(Объект);
	ФискальноеУстройство = КассаККМФискальноеУстройство.ФискальноеУстройство;
	КассаККМ             = КассаККМФискальноеУстройство.КассаККМ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.НачалоКассовойСмены <= &НачалоКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &НачалоКассовойСмены
	|		КОНЕЦ
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены <= &ОкончаниеКассовойСмены
	|	И ВЫБОР
	|			КОГДА КассоваяСмена.ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ КассоваяСмена.ОкончаниеКассовойСмены >= &ОкончаниеКассовойСмены
	|		КОНЕЦ
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КассоваяСмена.Ссылка
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	&ОкончаниеКассовойСмены = ДАТАВРЕМЯ(1, 1, 1)
	|	И КассоваяСмена.НачалоКассовойСмены >= &НачалоКассовойСмены
	|	И ((КассоваяСмена.КассаККМ = &КассаККМ И &КассаККМ <> Неопределено)
	|	ИЛИ (КассоваяСмена.ФискальноеУстройство = &ФискальноеУстройство И &ФискальноеУстройство <> Неопределено))
	|	И КассоваяСмена.Ссылка <> &КассоваяСмена
	|	И КассоваяСмена.Проведен
	|";
	
	Запрос.УстановитьПараметр("КассаККМ",               КассаККМ);
	Запрос.УстановитьПараметр("ФискальноеУстройство",   ФискальноеУстройство);
	
	Запрос.УстановитьПараметр("НачалоКассовойСмены",    НачалоКассовойСмены);
	Запрос.УстановитьПараметр("ОкончаниеКассовойСмены", ОкончаниеКассовойСмены);
	Запрос.УстановитьПараметр("КассоваяСмена",          КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет состояние кассовой смены на дату. Если смена не открыта - возвращается описание ошибки.
//
// Параметры:
//  КассоваяСмена - ДокументСсылка.КассоваяСмена - Ссылка на кассовую смену
//  Дата - Дата - Дата проверки
//  ОписаниеОшибки - Строка - Возвращаемое описание ошибки.
//
// Возвращаемое значение:
//  Булево - Истина, если на указанную дату кассовая смена открыта.
//
Функция СменаОткрыта(КассоваяСмена, Дата, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СменаОткрыта = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КассоваяСмена.Статус                 КАК СтатусКассовойСмены,
	|	КассоваяСмена.НачалоКассовойСмены    КАК НачалоКассовойСмены,
	|	КассоваяСмена.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены
	|ИЗ
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ГДЕ
	|	КассоваяСмена.Проведен
	|	И КассоваяСмена.Ссылка = &КассоваяСмена";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта Тогда
			
			// Если смена открыта, то с момента открытия должно пройти не больше чем 24 часа.
			Если Дата - Выборка.НачалоКассовойСмены < 86400 Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = ОписаниеОшибки24Часа();
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Выборка.СтатусКассовойСмены) Тогда
			
			Если Выборка.ОкончаниеКассовойСмены >= Дата И Выборка.НачалоКассовойСмены <= Дата Тогда
				
				СменаОткрыта = Истина;
				
			Иначе
				
				ОписаниеОшибки = НСтр("ru = 'Кассовая смена закрыта.'");
				СменаОткрыта = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ОписаниеОшибки = НСтр("ru = 'Кассовая смена не открыта.'");
		СменаОткрыта = Ложь;
		
	КонецЕсли;
	
	Возврат СменаОткрыта;
	
КонецФункции

#КонецОбласти

#Область РаботаСКонтрактнойИнформациейФЗ54

// Заполнить параметры отправки электронного чека по партнеру.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма (ФормаОплатыНаличными или ФормаСмешаннойОплаты).
//
Процедура ЗаполнитьПараметрыОтправкиЭлектронногоЧекаПоПартнеру(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	
	Если ЗначениеЗаполнено(Форма.Партнер) И Форма.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
		ВариантОтправкиЭлектронногоЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Партнер,
														 Метаданные.Справочники.Партнеры.Реквизиты.ВариантОтправкиЭлектронногоЧека.Имя);
		
		ИсточникиКонтактнойИнформации = Новый Массив;
		ИсточникиКонтактнойИнформации.Добавить(Форма.Партнер);
		
		ВидыКонтактнойИнформации = Новый Массив;
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
		
		КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(ИсточникиКонтактнойИнформации,, ВидыКонтактнойИнформации, ТекущаяДатаСеанса());
		
		АдресEmail = "";
		Телефон10Знаков = "";
		Телефон = "";
		Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформацияОбъекта Цикл
			Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
				Телефон10Знаков = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ЭлементКонтактнойИнформации.Представление);
				Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Телефон10Знаков);
				Форма.Элементы.Телефон.СписокВыбора.Добавить(Телефон);
			КонецЕсли;
			Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
				АдресEmail = ЭлементКонтактнойИнформации.Представление;
				Форма.Элементы.Email.СписокВыбора.Добавить(АдресEmail);
			КонецЕсли;
		КонецЦикла;
		
		Если Форма.Элементы.Телефон.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Телефон.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
		Если Форма.Элементы.Email.СписокВыбора.Количество() > 0 Тогда
			Форма.Элементы.Email.КнопкаВыпадающегоСписка = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВариантОтправкиЭлектронногоЧека) Тогда
			ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
			Если Не ПолучитьФункциональнуюОпцию("ПечататьБумажныйЧек") Тогда
				Если Не ПустаяСтрока(АдресEmail) Тогда
					ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail;
				ИначеЕсли Не ПустаяСтрока(Телефон10Знаков) Тогда
					ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS;	
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
		
		Если ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail Тогда
			Если Не ПустаяСтрока(АдресEmail) Тогда
				Форма.Email = АдресEmail;
			КонецЕсли;
		ИначеЕсли ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS Тогда
			Если Не ПустаяСтрока(Телефон10Знаков) Тогда
				Форма.Телефон10Знаков = Телефон10Знаков;
				Форма.Телефон = Телефон;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
		
	РозничныеПродажиКлиентСервер.УстановитьВариантОтправкиЭлектронногоЧека(Форма, ВариантОтправкиЭлектронногоЧека);
	
КонецПроцедуры

// Обработать данные электронного чека.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма (ФормаОплатыНаличными или ФормаСмешаннойОплаты).
// 
// Возвращаемое значение:
//  см. РозничныеПродажиКлиентСервер.ДанныеЭлектронногоЧека
//
Функция ОбработатьДанныеЭлектронногоЧека(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
	
		ДанныеЭлектронногоЧека = РозничныеПродажиКлиентСервер.ДанныеЭлектронногоЧека(Форма);
		РезультатПроверки = РозничныеПродажиКлиентСервер.ПроверитьНеобходимостьОбработкиДанныхЭлектронногоЧека(Форма);
		
		Если РезультатПроверки.ТребуетсяСоздатьПартнера Тогда
			
			ДанныеЭлектронногоЧека.Партнер = СоздатьПартнераВладельцаКонтактнойИнформацииЭлектронногоЧека(ДанныеЭлектронногоЧека);
			ОбновитьКонтактнуюИнформациюПартнера(ДанныеЭлектронногоЧека);
			
		Иначе
			
			Если РезультатПроверки.ТребуетсяОбновитьКонтактнуюИнформацию Тогда
				
				ОбновитьКонтактнуюИнформациюПартнера(ДанныеЭлектронногоЧека);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеЭлектронногоЧека.Партнер)
				И РезультатПроверки.ТребуетсяОбновитьВариантОтправкиЭлектронногоЧекаПартнера Тогда
				
				ПартнерОбъект = ДанныеЭлектронногоЧека.Партнер.ПолучитьОбъект();
				ПартнерОбъект.ВариантОтправкиЭлектронногоЧека = ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека;
				ПартнерОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ДанныеЭлектронногоЧека;
	
КонецФункции

// Процедура создает партнера с 
// наименованием "Держатель карты лояльности" на основании
// переданной структуры с данными карты лояльности.
//
// Параметры:
//  СтруктураДанныхКарты - Данные карты лояльности, см. КартыЛояльностиСервер.ИнициализироватьДанныеКартыЛояльности.
//
// Возвращаемое значение:
//  СправочникСсылка.Партнеры - Партнер.
//
Функция СоздатьПартнераВладельцаКонтактнойИнформацииЭлектронногоЧека(ДанныеЭлектронногоЧека)
	
	ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	
	Если ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail Тогда
		
		ПартнерОбъект.Наименование = СтрШаблон(
			НСтр("ru = 'Владелец E-mail %1'"),
			ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека);
		
	ИначеЕсли ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS Тогда
		
		ПартнерОбъект.Наименование = СтрШаблон(
			НСтр("ru = 'Владелец телефона %1'"),
			РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(
				РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека)));
		
	КонецЕсли;
	
	ПартнерОбъект.НаименованиеПолное = ПартнерОбъект.Наименование;
	ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	ПартнерОбъект.Клиент = Истина;
	ПартнерОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
	ПартнерОбъект.ВариантОтправкиЭлектронногоЧека = ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека;
	ПартнерОбъект.ГруппаДоступа = Константы.ГруппаДоступаПартнераПриАвтоматическомСоздании.Получить();
	ПартнерОбъект.Записать();
	
	Возврат ПартнерОбъект.Ссылка;
	
КонецФункции

Процедура ОбновитьКонтактнуюИнформациюПартнера(ДанныеЭлектронногоЧека)
	
	Замещать = Ложь;
	
	Если ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail Тогда
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			ДанныеЭлектронногоЧека.Партнер,
			ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека,
			Справочники.ВидыКонтактнойИнформации.EmailПартнера,,
			Замещать);
		
	ИначеЕсли ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS Тогда
		
		УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(
			ДанныеЭлектронногоЧека.Партнер,
			РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(
				РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека)),
			Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,,
			Замещать);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвразает параметры отправки электронного чека по партнеру.
// 
// Параметры:
//  Партнер - СправочникСсылка.Партнеры
//  
// Возвращаемое значение:
//  Структура:
//		* ВариантОтправкиЭлектронногоЧека - ПеречислениеСсылка.ВариантыОтправкиЭлектронногоЧекаПокупателю
//		* КонтактПолучателяЭлектронногоЧека - Строка
//
Функция ПолучитьПараметрыОтправкиЭлектронногоЧекаПоПартнеру(Партнер) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВариантОтправкиЭлектронногоЧека");
	Результат.Вставить("КонтактПолучателяЭлектронногоЧека");
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВариантОтправкиЭлектронногоЧека = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "ВариантОтправкиЭлектронногоЧека");
	Если Не ЗначениеЗаполнено(ВариантОтправкиЭлектронногоЧека) Тогда
		ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
	КонецЕсли;
	
	Результат.Вставить("ВариантОтправкиЭлектронногоЧека", ВариантОтправкиЭлектронногоЧека);
	Если ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять Тогда
		Возврат Результат;
	КонецЕсли;
		
	ИсточникиКонтактнойИнформации = Новый Массив;
	ИсточникиКонтактнойИнформации.Добавить(Партнер);
		
	ВидыКонтактнойИнформации = Новый Массив;
	Если ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьEmail Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	ИначеЕсли ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.ОтправитьSMS Тогда
		ВидыКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	КонецЕсли;
		
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ИсточникиКонтактнойИнформации,, ВидыКонтактнойИнформации, ТекущаяДатаСеанса());
		
	Для Каждого ЭлементКонтактнойИнформации Из КонтактнаяИнформацияОбъекта Цикл
			
		Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			Телефон10Знаков = РозничныеПродажиКлиентСервер.НомерТелефонаВФормате10Знаков(ЭлементКонтактнойИнформации.Представление);
			Телефон = РозничныеПродажиКлиентСервер.ОтформатироватьНомерТелефона(Телефон10Знаков);
			Результат.Вставить("КонтактПолучателяЭлектронногоЧека", Телефон);
			Прервать;
		КонецЕсли;
		
		Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailПартнера Тогда
			ЭлектроннаяПочта = ЭлементКонтактнойИнформации.Представление;
			Результат.Вставить("КонтактПолучателяЭлектронногоЧека", ЭлектроннаяПочта);
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Ищет последний документ оплаты/отгрузки по переданному распоряжению
// и ставит документ в очередь чеков на удаленную фискализацию.
//
// Параметры:
//	Распоряжение - ДокументСсылка.ЗаказКлиента
// 
// Возвращаемое значение:
// 	Булево
//
Функция ДобавитьДокументыПоРаспоряжениюВОчередьЧековККТ(Распоряжение) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ОбъектРасчетов = ВзаиморасчетыСервер.ОбъектРасчетовПоСсылке(Распоряжение);
	
	Запрос = Новый Запрос;
	Запрос.Текст = РозничныеПродажиЛокализация.ТекстЗапросаДокументыПоРаспоряжению();
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	ВыборкаПоДням = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДням.Следующий() Цикл
		
		ВыборкаПоДокументам = ВыборкаПоДням.Выбрать();
		
		Пока ВыборкаПоДокументам.Следующий() Цикл
			
			ДокументДляФискализации = ВыборкаПоДокументам.Ссылка;
			
			Если НЕ ФормированиеФискальныхЧековВызовСервера.РазрешеноПробитиеФискальныхЧековПоДокументу(ДокументДляФискализации) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ФормированиеФискальныхЧековВызовСервера.ПробитФискальныйЧекПоДокументу(ДокументДляФискализации) Тогда
				Прервать;
			КонецЕсли; 
			
			ПараметрыОперацииФискализацииЧека = 
				ФормированиеПараметровФискальногоЧекаСервер.ПараметрыОперацииФискализацииЧекаПакетныйРежим(ДокументДляФискализации);
				
			ПараметрыОперацииФискализацииЧека.ИдентификаторФискальнойЗаписи = Строка(ДокументДляФискализации.УникальныйИдентификатор());
			
			ОборудованиеЧекопечатающиеУстройстваВызовСервера.ДобавитьЧекВОчередьЧековККТ(ПараметрыОперацииФискализацииЧека);
			
			Прервать;
			
		 КонецЦикла;
		 
	 КонецЦикла;
	
	Возврат Истина;

КонецФункции

#Область ПакетнаяОбработкаТабличныхЧастей

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения условий розничных продаж.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаЗаполнитьУсловияРозничныхПродаж(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	ТребуетсяВыполнитьДействия = ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие("ЗаполнитьУсловияРозничныхПродаж",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыДействия);
	
	Если ТребуетсяВыполнитьДействия Тогда
		
		ЗаполнятьПоФорматуМагазинов = ТипЗнч(ПараметрыДействия.ОбъектХраненияУсловийПродаж) = Тип("Справочникссылка.ФорматыМагазинов");
		
		СписокЗапросов = ТекстыЗапросовУсловияРозничныхПродажПакетнаяОбработка(ЗаполнятьПоФорматуМагазинов);
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ОбъектХраненияУсловийПродаж" , ПараметрыДействия.ОбъектХраненияУсловийПродаж);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Дата", ПараметрыДействия.Дата);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Валюта", ПараметрыДействия.Валюта);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыВнесенияИВыемкиДс

// Выполнить автоматическую инкассацию ДС.
// 
// Параметры:
//  КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ
//  ОшибкаПриСнятииZОтчета - Булево - Ошибка при снятии z отчета
// 
// Возвращаемое значение:
//  Булево - Выполнить автоматическую инкассацию ДС
Функция ВыполнитьАвтоматическуюИнкассациюДС(КассаККМ, ОшибкаПриСнятииZОтчета) Экспорт
	
	Результат = Истина;
	
	Если Не ОшибкаПриСнятииZОтчета Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиРМККассыККМ.КассаККМ.Владелец                      КАК Организация,
		|	НастройкиРМККассыККМ.КассаККМ.ВалютаДенежныхСредств         КАК Валюта,
		|	НастройкиРМККассыККМ.КассаККМ                               КАК КассаККМ,
		|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК СуммаДокумента,
		|	НастройкиРМККассыККМ.АвтоматическаяИнкассация               КАК АвтоматическаяИнкассация
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК НастройкиРМККассыККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
		|		ПО ДенежныеСредстваВКассахККМОстатки.КассаККМ = НастройкиРМККассыККМ.КассаККМ
		|ГДЕ
		|	НастройкиРМККассыККМ.КассаККМ = &КассаККМ
		|	И НастройкиРМККассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|";
		
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() И Выборка.АвтоматическаяИнкассация И Выборка.СуммаДокумента > 0 Тогда
			СоздатьДокументВыемкаДенежныхСредствИзКассыККМ(Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыОткрытияИЗакрытияКассовойСмены

// Функция возвращает текст описания ошибки заполнения отчета о розничных продажах.
//
Функция ПолучитьТекстОшибкиЗаполненияОтчета()
	
	Возврат НСтр("ru = 'Проверьте настройки розничного склада и кассы ККМ.'");
	
КонецФункции

// Проверяет, что текущее значение операции при закрытии кассовой смены поддерживается.
// Если не поддерживается, то показывает текст рекомендации о переходе на режим архивирования чеков.
//
Процедура ПроверитьОперациюПриЗакрытииКассовойСменыПоказатьРекомендацию()

	Если Константы.ОперацияПриЗакрытииКассовойСмены.Получить() = Перечисления.ОперацииПриЗакрытииКассовойСмены.Нет Тогда
	
		ШаблонРекомендации = НСтр("ru = 'Согласно текущим настройкам при закрытии кассовой смены архивирование чеков не производится.
							|Этот режим работы не является рекомендуемым и более не поддерживается.
							|Рекомендуем включить режим ""%1"" при закрытии кассовой смены.
							|При архивации чеков ККМ все движения денежных средств и изменения остатков в складском учете, которые в течение смены отражаются документами ""%2""
							|и ""%3"", после закрытия кассовой смены агрегируются в документах ""%4"" и ""%5"".'");
		ТекстРекомендации = СтрШаблон(ШаблонРекомендации, 
										Метаданные.Перечисления.ОперацииПриЗакрытииКассовойСмены.ЗначенияПеречисления.АрхивацияЧековККМ.Синоним,
										Метаданные.Документы.ЧекККМ.Синоним,
										Метаданные.Документы.ЧекККМВозврат.Синоним,
										Метаданные.Документы.ОтчетОРозничныхПродажах.Синоним,
										Метаданные.Документы.ОтчетОРозничныхВозвратах.Синоним);
		ОбщегоНазначения.СообщитьПользователю(ТекстРекомендации);
	
	КонецЕсли;
	
КонецПроцедуры	

// Функция выполняет поиск отчета о розничных продажах по кассовой смене.
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхПродажах, Неопределено - 
//
Функция НайтиОтчетОРозничныхПродажах(КассоваяСмена, НалогообложениеНДС, Проведен = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетОРозничныхПродажах = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхПродажах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхПродажах.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|ГДЕ
	|	ОтчетОРозничныхПродажах.КассоваяСмена = &КассоваяСмена
	|	И ОтчетОРозничныхПродажах.НалогообложениеНДС = &НалогообложениеНДС
	|	И (&Проведен = Неопределено ИЛИ ОтчетОРозничныхПродажах.Проведен = &Проведен)";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("Проведен", Проведен);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетОРозничныхПродажах = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат ОтчетОРозничныхПродажах;
	
КонецФункции

// Функция выполняет поиск отчета о розничных возвратах по кассовой смене.
//
// Возвращаемое значение:
//  ДокументСсылка.ОтчетОРозничныхВозвратах, Неопределено - 
//
Функция НайтиОтчетОРозничныхВозвратах(КассоваяСмена, НалогообложениеНДС, Проведен = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтчетОРозничныхВозвратах = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтчетОРозничныхВозвратах.Ссылка КАК Ссылка,
	|	ОтчетОРозничныхВозвратах.НалогообложениеНДС КАК НалогообложениеНДС	
	|ИЗ
	|	Документ.ОтчетОРозничныхВозвратах КАК ОтчетОРозничныхВозвратах
	|ГДЕ
	|	ОтчетОРозничныхВозвратах.КассоваяСмена = &КассоваяСмена
	|	И ОтчетОРозничныхВозвратах.НалогообложениеНДС = &НалогообложениеНДС
	|	И (&Проведен = Неопределено ИЛИ ОтчетОРозничныхВозвратах.Проведен = &Проведен)";
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	Запрос.УстановитьПараметр("НалогообложениеНДС", НалогообложениеНДС);
	Запрос.УстановитьПараметр("Проведен", Проведен);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетОРозничныхВозвратах = Выборка.Ссылка;	
	КонецЕсли;
	
	Возврат ОтчетОРозничныхВозвратах;
	
КонецФункции

// Функция выполняет удаление отложенных чеков.
//
Функция УдалитьОтложенныеЧеки(КассоваяСмена, ОписаниеОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Истина;
	
	НачатьТранзакцию();
	Попытка
		
		ВыборкаЧековККМ = ВыбратьОтложенныеЧекиККМДляУдаления(КассоваяСмена);
		
		Пока ВыборкаЧековККМ.Следующий() Цикл
			ЧекККМОбъект = ВыборкаЧековККМ.Ссылка.ПолучитьОбъект(); // ДокументОбъект
			ЧекККМОбъект.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Результат = Ложь;
		
		ОписаниеОшибки = НСтр("ru = 'При удалении отложенных чеков произошла ошибка.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ПодобратьЗаполнитьДокументРеализацииВСтроке(СтрокаТабличнойЧастиТовары, ТаблицаДокументовРеализации, СостояниеКассовойСмены, ВыборкаДетальныеЗаписи, СообщатьОбОшибке = Ложь)
	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ЧекККМКассоваяСмена) Тогда
		ОтборПоискаДокументаРеализации = Новый Структура("КассоваяСмена,НалогообложениеНДС", ВыборкаДетальныеЗаписи.ЧекККМКассоваяСмена, ВыборкаДетальныеЗаписи.ЧекККМНалогообложениеНДС);
		НайденныеДокументы = ТаблицаДокументовРеализации.НайтиСтроки(ОтборПоискаДокументаРеализации);
		Если НайденныеДокументы.Количество() = 0 Тогда
			
			ОписаниеОшибки = НСтр("ru = 'При создании отчета о розничных продажах по кассовой смене %1 в строке %2 по чеку коррекции не удалось подобрать документ реализации по кассовой смене %3.'");
			Если ТипЗнч(СтрокаТабличнойЧастиТовары) = Тип("ДокументТабличнаяЧастьСтрока.ОтчетОРозничныхВозвратах.Товары") Тогда
				СтрокаТабличнойЧастиТовары.СпособОпределенияСебестоимости = Перечисления.СпособыОпределенияСебестоимостиВозврата.ИзТекущегоДокумента;
				ОписаниеОшибки = НСтр("ru = 'При создании отчета о розничных возвратах по кассовой смене %1 в строке %2 не удалось подобрать документ реализации по кассовой смене %3. Способ определения себестоимости в строке изменен на %4.'");
				ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, СостояниеКассовойСмены.КассоваяСмена, СтрокаТабличнойЧастиТовары.НомерСтроки, ВыборкаДетальныеЗаписи.ЧекККМКассоваяСмена, Перечисления.СпособыОпределенияСебестоимостиВозврата.ИзТекущегоДокумента);
			Иначе
				ОписаниеОшибки = СтрШаблон(ОписаниеОшибки, СостояниеКассовойСмены.КассоваяСмена, СтрокаТабличнойЧастиТовары.НомерСтроки, ВыборкаДетальныеЗаписи.ЧекККМКассоваяСмена);
			КонецЕсли;

			ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Предупреждение, , , ОписаниеОшибки);

			Если СообщатьОбОшибке = Истина Тогда
				ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
			КонецЕсли;
			
		Иначе
			СтрокаТабличнойЧастиТовары.ДокументРеализации = НайденныеДокументы[0].ДокументРеализации;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФункцииПроверкиСостоянияКассовойСмены

// Определяется по кассе ККМ фискальное устройство или по фискальному устройсту - касса ККМ.
// 
// Параметры:
//  Объект - СправочникСсылка.ПодключаемоеОборудование, СправочникСсылка.КассыККМ - Объект
// 
// Возвращаемое значение:
//  Структура - Касса ККМФискальное устройство:
// * ФискальноеУстройство - СправочникСсылка.ПодключаемоеОборудование - 
// * КассаККМ - СправочникСсылка.КассыККМ - 
Функция КассаККМФискальноеУстройство(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ФискальноеУстройство = Неопределено;
	КассаККМ             = Неопределено;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.КассыККМ") Тогда
		
		КассаККМ = Объект;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КассыККМ.ПодключаемоеОборудование КАК ФискальноеУстройство
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.КассаККМ = &КассаККМ
		|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
		|	И КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|");
		
		Запрос.УстановитьПараметр("КассаККМ",     КассаККМ);
		Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ФискальноеУстройство = Выборка.ФискальноеУстройство;
		
	Иначе
		
		ФискальноеУстройство = Объект;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КассыККМ.КассаККМ КАК КассаККМ
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.ПодключаемоеОборудование = &ФискальноеУстройство
		|	И КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|");
		
		Запрос.УстановитьПараметр("ФискальноеУстройство", ФискальноеУстройство);
		Запрос.УстановитьПараметр("РабочееМесто",         МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		КассаККМ = Выборка.КассаККМ;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ФискальноеУстройство", ФискальноеУстройство);
	ВозвращаемоеЗначение.Вставить("КассаККМ",             КассаККМ);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получает описание кассовой смены ко кассе ККМ
// 
// Параметры:
// 	ОписаниеКассовойСмены - Структура - Структура данных для кассовой смены
// 	КассаККМ - СправочникСсылка.КассыККМ - Касса ККМ для получения описания 
Процедура ЗаполнитьОписаниеКассовойСменыПоКассеККМ(ОписаниеКассовойСмены, КассаККМ)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ДенежныеСредстваВКассахККМОстатки.СуммаОстаток, 0) КАК НаличностьВКассе,
	|	КассыККМ.ВалютаДенежныхСредств                              КАК Валюта,
	|	КассыККМ.ВалютаДенежныхСредств.Представление                КАК ВалютаПредставление,
	|	КассыККМ.Склад                                  КАК Склад,
	|	КассыККМ.Склад.РозничныйВидЦены                 КАК ВидЦены,
	|	КассыККМ.Склад.РозничныйВидЦены.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	КассыККМ.Владелец                               КАК Организация,
	|	КассыККМ.Подразделение                          КАК Подразделение,
	|	КассыККМ.РазъезднаяТорговля                     КАК РазъезднаяТорговля
	|ИЗ
	|	Справочник.КассыККМ КАК КассыККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВКассахККМ.Остатки(, КассаККМ = &КассаККМ) КАК ДенежныеСредстваВКассахККМОстатки
	|		ПО (ДенежныеСредстваВКассахККМОстатки.КассаККМ = КассыККМ.Ссылка)
	|ГДЕ
	|	КассыККМ.Ссылка = &КассаККМ");
		
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ОписаниеКассовойСмены.КассаККМ            = КассаККМ;
	ОписаниеКассовойСмены.Склад               = Выборка.Склад;
	ОписаниеКассовойСмены.ВидЦены             = Выборка.ВидЦены;
	ОписаниеКассовойСмены.ЦенаВключаетНДС     = Выборка.ЦенаВключаетНДС;
	ОписаниеКассовойСмены.Организация         = Выборка.Организация;
	ОписаниеКассовойСмены.НаличностьВКассе    = Выборка.НаличностьВКассе;
	ОписаниеКассовойСмены.Валюта              = Выборка.Валюта;
	ОписаниеКассовойСмены.ВалютаПредставление = Выборка.ВалютаПредставление;
	ОписаниеКассовойСмены.Подразделение       = Выборка.Подразделение;
	
	ОписаниеКассовойСмены.СведенияООрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Выборка.Организация, ТекущаяДатаСеанса());
	ОписаниеКассовойСмены.АдресСклада          = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Выборка.Склад, Справочники.ВидыКонтактнойИнформации.АдресСклада);
	
	ОписаниеКассовойСмены.РазъезднаяТорговля  = Выборка.РазъезднаяТорговля;

	ОписаниеКассовойСмены.НалогообложениеНДС = УчетНДСУП.ПараметрыУчетаПоОрганизации(
		Выборка.Организация,
		ТекущаяДатаСеанса(),
		Выборка.Склад, Выборка.Подразделение).НалогообложениеНДСРозничнойПродажи;
		
	Если ОписаниеКассовойСмены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту Тогда
		ОписаниеКассовойСмены.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.Патент;
	ИначеЕсли ОписаниеКассовойСмены.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
		ОписаниеКассовойСмены.СистемаНалогообложения = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	Иначе
		ОписаниеКассовойСмены.СистемаНалогообложения = РозничныеПродажиЛокализация.СистемаНалогообложенияФискальнойОперации(Выборка.Организация);
	КонецЕсли;
	
КонецПроцедуры

// Описание ошибки24 часа
// 
// Возвращаемое значение:
//  Строка - Описание ошибки
//
Функция ОписаниеОшибки24Часа() Экспорт
	
	Возврат НСтр("ru = 'С момента открытия кассовой смены истекло более 24 часов. Необходимо выполнить закрытие кассовой смены.'");
	
КонецФункции

#КонецОбласти

#Область Прочее

// Заполнить реквизит формы "РеквизитыКассира".
//
// Параметры:
//  Кассир - СправочникСсылка.Пользователи - Кассир.
//  Организация - СправочникСсылка.Организации - Организация для отбора в справочнике ОтветственныеЛицаОрганизаций.
//  ДатаВремя - Дата - Для отбора по периоду ДатаНачала - ДатаОкончания в справочнике ОтветственныеЛицаОрганизаций.
//
// Возвращаемое значение:
// Структура:
// 	*ИНН - Строка - 
// 	*Наименование - Строка - ФИО кассира.
// 	*Должность - Строка - Должность кассира.
// 
Функция РеквизитыКассира(Кассир, Организация = Неопределено, ДатаВремя = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Пользователи.ФизическоеЛицо КАК ФизическоеЛицо,	
	|	ЕСТЬNULL(Пользователи.ФизическоеЛицо.ИНН, """") КАК ИНН,
	|	ЕСТЬNULL(Пользователи.ФизическоеЛицо.Наименование, """") КАК Наименование,
	|	"""" КАК Должность
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Ссылка = &Кассир");
	Запрос.УстановитьПараметр("Кассир", Кассир);
	
	РеквизитыКассира = Новый Структура;
	РеквизитыКассира.Вставить("ИНН", "");
	РеквизитыКассира.Вставить("Наименование", НСтр("ru = 'Администратор'"));
	РеквизитыКассира.Вставить("Должность", "");
	
	ВыборкаРеквизитыКассира = Запрос.Выполнить().Выбрать();
	Если ВыборкаРеквизитыКассира.Следующий() Тогда
		
		Если ЗначениеЗаполнено(ВыборкаРеквизитыКассира.Наименование) Тогда
			РеквизитыКассира.Наименование = СокрЛП(ВыборкаРеквизитыКассира.Наименование);
		КонецЕсли;
		
		РеквизитыКассира.ИНН = ВыборкаРеквизитыКассира.ИНН;
		
		Если ЗначениеЗаполнено(ВыборкаРеквизитыКассира.ФизическоеЛицо)
			И ЗначениеЗаполнено(Организация)	Тогда
			Если Не ЗначениеЗаполнено(ДатаВремя) Тогда
				ДатаВремя = ТекущаяДатаСеанса();
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Владелец", Организация);
			ПараметрыОтбора.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Кассир);
			ПараметрыОтбора.Вставить("Дата", ДатаВремя); 
			КассирыОрганизации = ОтветственныеЛицаСервер.ПолучитьТаблицуОтветственныхЛицПоОтбору(ПараметрыОтбора);
			
			ДанныеОтветственногоЛица = КассирыОрганизации.НайтиСтроки(Новый Структура("ФизическоеЛицо", ВыборкаРеквизитыКассира.ФизическоеЛицо));			
			Если ДанныеОтветственногоЛица.Количество() Тогда
				РеквизитыКассира.Должность = ДанныеОтветственногоЛица[0].Должность;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат РеквизитыКассира;
	
КонецФункции

Функция ДобавитьЭлемент(Форма, ИмяКоманды, Родитель, Индекс)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Элементы, ИмяКоманды) Тогда
		Возврат Форма.Элементы[ИмяКоманды];
	КонецЕсли;
	НоваяКнопка = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Форма.Элементы[Родитель + Индекс]);
	
	Возврат НоваяКнопка;
	
КонецФункции

Функция ВыбратьОтложенныеЧекиККМДляУдаления(КассоваяСмена = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЧекККМОплатаПлатежнымиКартами.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ЧекиККМЗапрещенныеКУдалению
	|ИЗ
	|	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ЧекККМОплатаПлатежнымиКартами
	|ГДЕ
	|	ЧекККМОплатаПлатежнымиКартами.Ссылка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И ЧекККМОплатаПлатежнымиКартами.ВидОплаты = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежнойСистемыККТ.СистемаБыстрыхПлатежей)
	|	И НЕ (ЧекККМОплатаПлатежнымиКартами.СтатусОплатыСБП = ЗНАЧЕНИЕ(Перечисление.ТипыСтатусовОплатыСБП.ПустаяСсылка)
	|			ИЛИ ЧекККМОплатаПлатежнымиКартами.СтатусОплатыСБП = ЗНАЧЕНИЕ(Перечисление.ТипыСтатусовОплатыСБП.Отменена))
	|	И (ЧекККМОплатаПлатежнымиКартами.Ссылка.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.ОтложенДо КАК ОтложенДо,
	|	Документ.КассоваяСмена КАК КассоваяСмена
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|	И НЕ Документ.Ссылка В (ВЫБРАТЬ
	|								Ссылка КАК Ссылка
	|							ИЗ ЧекиККМЗапрещенныеКУдалению КАК ЧекиККМЗапрещенныеКУдалению)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка,
	|	Документ.Дата,
	|	Документ.КассоваяСмена.ОкончаниеКассовойСмены,
	|	Документ.КассоваяСмена
	|ИЗ
	|	Документ.ЧекККМВозврат КАК Документ
	|ГДЕ
	|	Документ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЧековККМ.Пробит)
	|	И (Документ.КассоваяСмена = &КассоваяСмена
	|			ИЛИ &КассоваяСмена = НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.ОтложенДо <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЧекККМ.ОтложенДо < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение > 0
	|	И ДОБАВИТЬКДАТЕ(ЧекККМ.Дата, ДЕНЬ, КоличествоДнейХраненияОтложенныхЧеков.Значение) < &ТекущееВремя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЧекККМ.Ссылка
	|ИЗ
	|	ЧекиККМ КАК ЧекККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.КоличествоДнейХраненияОтложенныхЧеков КАК КоличествоДнейХраненияОтложенныхЧеков
	|		ПО (ИСТИНА)
	|ГДЕ
	|	КоличествоДнейХраненияОтложенныхЧеков.Значение = 0
	|	И ЧекККМ.КассоваяСмена.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыКассовойСмены.Открыта)");
	
	Запрос.УстановитьПараметр("КассоваяСмена", КассоваяСмена);
	Запрос.УстановитьПараметр("ТекущееВремя",  ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выбрать();
	
КонецФункции

Функция ПредставлениеУстройства(СтрокаТЧ)
	
	Представление = "";
	
	Если СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Представление = НСтр("ru = 'Весы с печатью этикеток'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ДисплейПокупателя Тогда
		Представление = НСтр("ru = 'Дисплей покупателя'");
	ИначеЕсли ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЭтоТипОфлайнОборудованияККМ(СтрокаТЧ.ТипОборудования) Тогда
		Представление = НСтр("ru = 'ККМ Offline'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СканерШтрихкода Тогда
		Представление = НСтр("ru = 'Сканер штрихкода'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.СчитывательМагнитныхКарт Тогда
		Представление = НСтр("ru = 'Считыватель магнитных карт'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ТерминалСбораДанных Тогда
		Представление = НСтр("ru = 'Терминал сбора данных'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ФискальныйРегистратор Тогда
		Представление = НСтр("ru = 'Фискальный регистратор'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭквайринговыйТерминал Тогда
		Представление = НСтр("ru = 'Эквайринговый терминал'");
	ИначеЕсли СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ЭлектронныеВесы Тогда
		Представление = НСтр("ru = 'Электронные весы'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Заполнить таблицу оборудование на форме
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма, содержит в том числе:
//  	* Оборудование - ТаблицаЗначений - 
//  ПоддерживаемыеТипыПодключаемогоОборудования - Строка - Поддерживаемые типы оборудования.
//
Процедура ЗаполнитьТаблицуОборудование(Форма, ПоддерживаемыеТипыПодключаемогоОборудования) Экспорт
	
	ТипыПО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоддерживаемыеТипыПодключаемогоОборудования, ",", Истина, Истина);
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	СписокОборудования = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(
		ТипыПО,
		Неопределено,
		РабочееМесто);
	
	Для Каждого СтрокаТЧ Из СписокОборудования Цикл
		Если СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ
			Или СтрокаТЧ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ПринтерЧеков Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Форма.Оборудование.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.Подключено    = 1;
		НоваяСтрока.Представление = ПредставлениеУстройства(НоваяСтрока);
	КонецЦикла;
	
	Если ТипыПО.Найти("ФискальныйРегистратор") <> Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КассыККМ.КассаККМ КАК Объект,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор) КАК ТипОборудования,
		|	КассыККМ.ПодключаемоеОборудование КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
		|ГДЕ
		|	КассыККМ.Ссылка.РабочееМесто = &РабочееМесто
		|	И КассыККМ.КассаККМ.ТипКассы = ЗНАЧЕНИЕ(Перечисление.ТипыКассККМ.ФискальныйРегистратор)
		|	И НЕ КассыККМ.ИспользоватьБезПодключенияОборудования
		|");
		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Форма.Оборудование.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Подключено    = 1;
			НоваяСтрока.Представление = ПредставлениеУстройства(НоваяСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРегистрацииУстройства(Знач ИдентификаторУстройства)
	
	Возврат ОборудованиеЧекопечатающиеУстройства.ПараметрыРегистрацииУстройства(ИдентификаторУстройства);
	
КонецФункции

// Подготавливает структуру параметров для обработки состояния кассовой смены
//
// Параметры:
// 	Оборудование - СправочникСсылка.ПодключаемоеОборудование
// 
// Возвращаемое значение:
// 	Структура
//
Функция ПолучитьПараметрыОбработкиСостоянияСмены(Оборудование) Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("СтруктураСостояниеКассовойСмены", 
				РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Оборудование));
	Результат.Вставить("ПраваДоступа", НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователи.ТекущийПользователь()));
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//	ТекстОшибки - Строка - текст ошибки (локализованный)
//	Событие - Строка - имя события (локализованное) или метод, откуда произошел вызов
//	Данные - ЛюбаяСсылка, ДокументОбъект - ссылка или объект с которыми связана ошибка
//	Уровень - Строка - возможные варианты: "Ошибка", "Предупреждение"
Процедура ЗаписьВЖурналРегистрации(Знач ТекстОшибки, Знач Событие, Данные = Неопределено, Знач Уровень = "Ошибка") Экспорт
	
	Если НРег(Уровень) = НРег("Предупреждение") Тогда
		УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
	Иначе
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	ТранзакцияАктивна = ТранзакцияАктивна();
	ЗаписьЖурналаРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Розничные продажи.%1'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			Событие), 
		УровеньЖР, 
		?(ТранзакцияАктивна Или Данные = Неопределено, Неопределено, Данные.Метаданные()), 
		?(ТранзакцияАктивна Или Данные = Неопределено, Неопределено, Данные), 
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область ПакетнаяОбработкаТабличныхЧастейСлужебная

Функция ТекстЗапросаИсточникаУсловияРозничныхПродаж(Знач ЗаполнятьПоФорматуМагазинов)
	
	Если ЗаполнятьПоФорматуМагазинов Тогда
		
		ТекстЗапроса =
		"(ВЫБРАТЬ
		|	ФорматыМагазинов.ИндивидуальныйВидЦены КАК ВидЦены,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.ФорматыМагазинов КАК ФорматыМагазинов
		|ГДЕ
		|	ФорматыМагазинов.Ссылка = &ОбъектХраненияУсловийПродаж
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ФорматыМагазинов.РозничныйВидЦены,
		|	2
		|ИЗ
		|	Справочник.ФорматыМагазинов КАК ФорматыМагазинов
		|ГДЕ
		|	ФорматыМагазинов.Ссылка = &ОбъектХраненияУсловийПродаж)";
		
	Иначе
		
		ТекстЗапроса =
		"(ВЫБРАТЬ
		|	Склады.ИндивидуальныйВидЦены КАК ВидЦены,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ОбъектХраненияУсловийПродаж
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Склады.РозничныйВидЦены,
		|	2
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка = &ОбъектХраненияУсловийПродаж)";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает список запросов для получения условий розничных продаж.
//
// Параметры:
// 	ЗаполнятьПоФорматуМагазинов - Булево.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ТекстыЗапросовУсловияРозничныхПродажПакетнаяОбработка(Знач ЗаполнятьПоФорматуМагазинов) Экспорт
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ВтИсточникДанных.Номенклатура КАК Номенклатура,
	|	ВтИсточникДанных.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ВтИсточникДанных.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ КАК ХарактеристикаЦО,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
	|			ИНАЧЕ ВтИсточникДанных.Серия.СерияНоменклатурыДляЦенообразования
	|		КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ ВтИсточникДанных.Упаковка
	|	КОНЕЦ КАК УпаковкаЦО
	|ПОМЕСТИТЬ ТаблицаТоварыДоп
	|ИЗ
	|	ВтИсточникДанных КАК ВтИсточникДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = ВтИсточникДанных.Номенклатура.ВидНоменклатуры)";
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаТоварыДоп");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	|	МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВременнаяТаблицаВидыЦен
	|ИЗ
	|	&ТекстЗапросаИсточникаУсловияПродаж КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ВидЦены";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаИсточникаУсловияПродаж",
		ТекстЗапросаИсточникаУсловияРозничныхПродаж(ЗаполнятьПоФорматуМагазинов));
	
	Результат.Добавить(ТекстЗапроса, "ВременнаяТаблицаВидыЦен");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОтбора.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОтбора.Упаковка КАК Упаковка,
	|	ТаблицаОтбора.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО КАК СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО КАК УпаковкаЦО,
	|	ВременнаяТаблицаВидыЦен.ВидЦены КАК ВидЦены,
	|	МИНИМУМ(ВременнаяТаблицаВидыЦен.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	ТаблицаТоварыДоп КАК ТаблицаОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВидыЦен КАК ВременнаяТаблицаВидыЦен
	|		ПО (ИСТИНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.ИдентификаторСтрокиВТ,
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.Упаковка,
	|	ТаблицаОтбора.ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО,
	|	ВременнаяТаблицаВидыЦен.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтрокиВТ,
	|	Номенклатура,
	|	Упаковка,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены";
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаОтбора");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюта КАК Валюта,
	|	КурсЧислитель КАК КурсЧислитель,
	|	КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ ТаблицаКурсовВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта";
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаКурсовВалют");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОтбора.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|						ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЦеныНоменклатурыСрезПоследних.СерияЦО КАК СерияЦО,
	|	ЦеныНоменклатурыСрезПоследних.УпаковкаЦО КАК УпаковкаЦО,
	|	ТаблицаОтбора.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаРезультата
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|			(Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО, ВидЦены) В
	|				(ВЫБРАТЬ
	|					Т.Номенклатура,
	|					Т.ХарактеристикаЦО,
	|					Т.СерияЦО,
	|					Т.УпаковкаЦО,
	|					Т.ВидЦены
	|				ИЗ
	|					ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютыЦены
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалюты
	|		ПО КурсыВалюты.Валюта = &Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаОтбора.Номенклатура
	|			И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ТаблицаОтбора.ХарактеристикаЦО
	|			И ЦеныНоменклатурыСрезПоследних.СерияЦО = ТаблицаОтбора.СерияЦО
	|			И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ТаблицаОтбора.УпаковкаЦО
	|			И ЦеныНоменклатурыСрезПоследних.ВидЦены = ТаблицаОтбора.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтрокиВТ,
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВЫРАЗИТЬ(ТаблицаОтбора.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
			"ВЫРАЗИТЬ(ТаблицаОтбора.Номенклатура КАК Справочник.Номенклатура)"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаРезультата");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРезультата.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТаблицаРезультата.Номенклатура КАК Номенклатура,
	|	ТаблицаРезультата.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаРезультата.СерияЦО КАК СерияЦО,
	|	ТаблицаРезультата.УпаковкаЦО КАК УпаковкаЦО,
	|	МИНИМУМ(ТаблицаРезультата.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаРезультатаПриоритеты
	|ИЗ
	|	ТаблицаРезультата КАК ТаблицаРезультата
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРезультата.ИдентификаторСтрокиВТ,
	|	ТаблицаРезультата.Номенклатура,
	|	ТаблицаРезультата.ХарактеристикаЦО,
	|	ТаблицаРезультата.СерияЦО,
	|	ТаблицаРезультата.УпаковкаЦО";
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаРезультатаПриоритеты");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРезультата.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТаблицаРезультата.ВидЦены КАК ВидЦены,
	|	ТаблицаРезультата.Цена КАК Цена
	|ИЗ
	|	ТаблицаРезультатаПриоритеты КАК ТаблицаРезультатаПриоритеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРезультата КАК ТаблицаРезультата
	|		ПО ТаблицаРезультатаПриоритеты.ИдентификаторСтрокиВТ = ТаблицаРезультата.ИдентификаторСтрокиВТ
	|		И ТаблицаРезультатаПриоритеты.Номенклатура = ТаблицаРезультата.Номенклатура
	|		И ТаблицаРезультатаПриоритеты.ХарактеристикаЦО = ТаблицаРезультата.ХарактеристикаЦО
	|		И ТаблицаРезультатаПриоритеты.СерияЦО = ТаблицаРезультата.СерияЦО
	|		И ТаблицаРезультатаПриоритеты.УпаковкаЦО = ТаблицаРезультата.УпаковкаЦО
	|		И ТаблицаРезультатаПриоритеты.Приоритет = ТаблицаРезультата.Приоритет";
	
	Результат.Добавить(ТекстЗапроса, "ЗаполнитьУсловияРозничныхПродаж");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
