///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сообщения в службу технической поддержки".
// ОбщийМодуль.СообщенияВСлужбуТехническойПоддержкиКлиентСервер.
//
// Клиент-серверные процедуры и функции отправки сообщений в 
// службу технической поддержки:
//  - проверка параметров сообщений;
//  - общие процедуры и функции подсистемы.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Данные сообщения для отправки в техническую поддержку.
// 
// Возвращаемое значение:
//  Структура - данные для формирования сообщения:
//    *Тема - Строка - тема сообщения;
//    *Сообщение  - Строка - тело текст сообщения для отправки;
//    *ИспользоватьСтандартныйШаблон - Булево - признак использования стандартного шаблона сообщения в техподдержку;
//    *Получатель - Строка - условное имя получателя сообщения;
//    *ИНН - Строка - ИНН организации;
//    *РегистрационныйНомер - Строка - регистрационный номер;
//    *НастройкиПоискаГотовогоОтвета - Структура - настройки поиска готового ответа. См. НастройкиПоискаГотовогоОтвета;
//    *ДанныеТехническойИнформации - Структура - данные технической информации. См. ОписаниеТехническойИнформации;
//    *НастройкиТехническойИнформации - Структура - данные технической информации. См. НастройкиТехническойИнформации.
//
Функция ДанныеСообщения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Тема", "");
	Результат.Вставить("Сообщение", "");
	Результат.Вставить("ИспользоватьСтандартныйШаблон", Истина);
	Результат.Вставить("Получатель", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("РегистрационныйНомер", "");
	Результат.Вставить("НастройкиПоискаГотовогоОтвета", НастройкиПоискаГотовогоОтвета());
	Результат.Вставить("ДанныеТехническойИнформации", ОписаниеТехническойИнформации());
	Результат.Вставить("НастройкиТехническойИнформации", НастройкиТехническойИнформации());
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет заполнение настроек поиска ответов на основании текста ошибки.
//
// Параметры:
//  ТекстСообщения - Строка - текст сообщения об ошибке.
//  НастройкиПоиска - Структура - см. НастройкиПоискаГотовогоОтвета
//
Процедура ЗаполнитьНастройкиПоискаГотовогоОтвета(
		ТекстСообщения,
		НастройкиПоиска) Экспорт
	
	Если ЗначениеЗаполнено(НастройкиПоиска.Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНайти(ТекстСообщения, "Couldn't resolve host name") <> 0 Тогда
		НастройкиПоиска.Текст = "Couldn't resolve host name";
	ИначеЕсли СтрНайти(ТекстСообщения, "SSL-соединения") <> 0 Тогда
		НастройкиПоиска.Текст = "Ошибка инициализации SSL-соединения";
	ИначеЕсли СтрНайти(ТекстСообщения, "Удаленный узел") <> 0 Тогда
		НастройкиПоиска.Текст = "Узел не прошел проверку";
	ИначеЕсли СтрНайти(ТекстСообщения, "Failure when receiving data from the peer") <> 0 Тогда
		НастройкиПоиска.Текст = "Failure when receiving data from the peer";
	ИначеЕсли СтрНайти(ТекстСообщения, "404 Not Found") <> 0 И СтрНайти(ТекстСообщения, ".eu") <> 0 Тогда
		НастройкиПоиска.Текст = "не загружаются файлы";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиПоиска.Текст) Тогда
		НастройкиПоиска.ИдентификаторПрограммы = "ISL";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает новый результат операции отправки сообщения
// в службу технической поддержки.
//
// Возвращаемое значение:
//
//  Структура - результат отправки сообщения:
//   *КодОшибки - Строка - идентификатор ошибки при отправки:
//   *СообщениеОбОшибке - Строка, ФорматированнаяСтрока - сообщение об ошибке для пользователя.
//
Функция НовыйРезультатОперации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КодОшибки",         "");
	Результат.Вставить("СообщениеОбОшибке", "");
	
	Возврат Результат;
	
КонецФункции

// Возвращает код ошибки "НеверныйФорматЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиНеверныйФорматЗапроса() Экспорт
	
	Возврат "НеверныйФорматЗапроса";
	
КонецФункции

// Возвращает код ошибки "ОтсутствуетОбязательныйПараметрЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиОтсутствуетОбязательныйПараметрЗапроса() Экспорт
	
	Возврат "ОтсутствуетОбязательныйПараметрЗапроса";
	
КонецФункции

// Возвращает код ошибки "ПустойПараметрЗапроса".
//
// Возвращаемое значение:
//  Строка - код ошибки.
//
Функция КодОшибкиПустойПараметрЗапроса() Экспорт
	
	Возврат "ПустойПараметрЗапроса";
	
КонецФункции

// Проверяет правильность заполнения параметров запроса на отправку сообщений
// в службу технической поддержки.
//
// Параметры:
//  ДанныеСообщения - Структура - данные для формирования сообщения,
//                    См. ДанныеСообщения;
//  Вложения - Массив Из Структура, Неопределено - файлы вложений.  Важно: допускаются только
//             текстовые вложения (*.txt, *.json, *.xml). Поля структуры элемента вложения:
//    *Представление - Строка - представление вложения. Например, "Вложение 1.txt";
//    *ВидДанных - Строка - определяет преобразование переданных данных.
//                Возможна передача одного из значений:
//                  - ИмяФайла - Строка - полное имя файла вложения;
//                  - Адрес - Строка - адрес во временном хранилище значения типа ДвоичныеДанные;
//                  - Текст - Строка - текст вложения;
//    *Данные - Строка - данные для формирования вложения;
//  ОтборЖурналаРегистрации - Структура, Неопределено - настройки выгрузки журнала регистрации:
//    *ДатаНачала    - Дата - начало периода журнала;
//    *ДатаОкончания - Дата - конец периода журнала;
//    *События       - Массив - список событий;
//    *Метаданные    - Массив, Неопределено - массив метаданных для отбора;
//    *Уровень       - Строка - уровень важности событий журнала регистрации. Возможные значения:
//       - "Ошибка" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Ошибка;
//       - "Предупреждение" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Предупреждение;
//       - "Информация" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Информация;
//       - "Примечание" - будет выполнен отбор по событиям с УровеньЖурналаРегистрации.Примечание.
//
// Возвращаемое значение:
//  Структура - см. НовыйРезультатОперации.
//
Функция РезультатПроверкиПараметровОтправки(
		ДанныеСообщения,
		Вложения,
		ОтборЖурналаРегистрации) Экспорт
	
	Результат = НовыйРезультатОперации();
	
	Если Не ЗначениеЗаполнено(ДанныеСообщения.Получатель) Тогда
		Результат.КодОшибки         = КодОшибкиПустойПараметрЗапроса();
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не заполнен получатель сообщения.'");
		Возврат Результат;
	КонецЕсли;
	
	Если Не ДанныеСообщения.Свойство("ИспользоватьСтандартныйШаблон") Тогда
		Результат.КодОшибки         = КодОшибкиОтсутствуетОбязательныйПараметрЗапроса();
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не заполнено использование стандартного шаблона.'");
		Возврат Результат;
	КонецЕсли;
	
	Если Не ДанныеСообщения.Свойство("НастройкиПоискаГотовогоОтвета") Тогда
		Результат.КодОшибки         = КодОшибкиОтсутствуетОбязательныйПараметрЗапроса();
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не заполнены настройки поиска готового ответа.'");
		Возврат Результат;
	КонецЕсли;
	
	Если Не ДанныеСообщения.Свойство("ДанныеТехническойИнформации") Тогда
		Результат.КодОшибки         = КодОшибкиОтсутствуетОбязательныйПараметрЗапроса();
		Результат.СообщениеОбОшибке = НСтр("ru = 'Не заполнены данные технической информации.'");
		Возврат Результат;
	КонецЕсли;
	
	Если Вложения <> Неопределено Тогда
		
		Для Каждого ОписаниеФайла Из Вложения Цикл
			
			Если Не ЗначениеЗаполнено(ОписаниеФайла.Представление) Тогда
				Результат.КодОшибки         = КодОшибкиОтсутствуетОбязательныйПараметрЗапроса();
				Результат.СообщениеОбОшибке = НСтр("ru = 'Не заполнено представление вложения.'");
				Возврат Результат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОписаниеФайла.ВидДанных) Тогда
				Результат.КодОшибки         = КодОшибкиОтсутствуетОбязательныйПараметрЗапроса();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнен вид данных вложения %1.'"),
					ОписаниеФайла.Представление);
				Возврат Результат;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ОписаниеФайла.Данные) Тогда
				Результат.КодОшибки         = КодОшибкиОтсутствуетОбязательныйПараметрЗапроса();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнены данные вложения %1.'"),
					ОписаниеФайла.Представление);
				Возврат Результат;
			КонецЕсли;
			
			Если ОписаниеФайла.ВидДанных <> "Адрес"
				И ОписаниеФайла.ВидДанных <> "ИмяФайла"
				И ОписаниеФайла.ВидДанных <> "Текст" Тогда
				Результат.КодОшибки         = КодОшибкиНеверныйФорматЗапроса();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Передан неверный вид данных вложения %1.'"),
					ОписаниеФайла.ВидДанных);
				Возврат Результат;
			КонецЕсли;
			
			НедопустимыеСимволы = ОбщегоНазначенияКлиентСервер.НайтиНедопустимыеСимволыВИмениФайла(
				ОписаниеФайла.Представление);
			Если СтрНайти(ОписаниеФайла.Представление, "@") <> 0 Тогда
				НедопустимыеСимволы.Добавить("@");
			КонецЕсли;
			
			Если НедопустимыеСимволы.Количество() > 0 Тогда
				Результат.КодОшибки         = КодОшибкиНеверныйФорматЗапроса();
				Результат.СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В представлении обнаружены недопустимые символы: %1.'"),
					СтрСоединить(НедопустимыеСимволы, ","));
				Возврат Результат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОтборЖурналаРегистрации <> Неопределено Тогда
		Если ОтборЖурналаРегистрации.ДатаНачала > ОтборЖурналаРегистрации.ДатаОкончания Тогда
			Результат.КодОшибки         = КодОшибкиНеверныйФорматЗапроса();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Некорректный отбор данных журнала регистрации. Дата начала отбора меньше даты окончания.'");
			Возврат Результат;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтборЖурналаРегистрации.Уровень)
			И ОтборЖурналаРегистрации.Уровень <> "Ошибка"
			И ОтборЖурналаРегистрации.Уровень <> "Предупреждение"
			И ОтборЖурналаРегистрации.Уровень <> "Информация"
			И ОтборЖурналаРегистрации.Уровень <> "Примечание" Тогда
			Результат.КодОшибки         = КодОшибкиНеверныйФорматЗапроса();
			Результат.СообщениеОбОшибке =
				НСтр("ru = 'Недопустимый отбор данных журнала регистрации. Некорректный уровень событий журнала регистрации.'");
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки поиска готового ответа.
// 
// Возвращаемое значение:
//  Структура - настройки поиска:
//    *Текст - Строка - текст для поиска;
//    *ИдентификаторПрограммы - Строка - идентификатор программы.
//
Функция НастройкиПоискаГотовогоОтвета()
	
	Результат = Новый Структура;
	Результат.Вставить("Текст", "");
	Результат.Вставить("ИдентификаторПрограммы", "");
	
	Возврат Результат;
	
КонецФункции

// Описание технической информации.
//
// Возвращаемое значение:
//  Структура:
//    *ОписаниеПрограммы - Структура, Неопределено - См. СообщенияВСлужбуТехническойПоддержки.ОписаниеПрограммы;
//    *ТекущаяСессия - Структура, Неопределено - См. СообщенияВСлужбуТехническойПоддержки.ОписаниеТекущейСессии;
//    *ДанныеРасширений - Массив из РасширениеКонфигурации, Массив из Структура, Неопределено - данные расширений конфигурации;
//    *ДанныеПодсистем - Массив, Неопределено - описание всех библиотек конфигурации, См. ОбщегоНазначения.ОписанияПодсистем;
//    *НастройкиИнтернетПоддержки - Структура, Неопределено - См. СообщенияВСлужбуТехническойПоддержки.НастройкиИнтернетПоддержки;
//    *ИнтернетНастройки - Структура, Неопределено - СообщенияВСлужбуТехническойПоддержки.ИнтернетНастройки;
//    *СистемнаяИнформацияКлиента - Структура - См. ОписаниеСистемнойИнформации;
//    *СистемнаяИнформацияКлиента - Структура - См. ОписаниеСистемнойИнформации.
//
Функция ОписаниеТехническойИнформации() Экспорт
	
	Результат = Новый Структура(
		"ОписаниеПрограммы,
		|ТекущаяСессия,
		|ДанныеРасширений,
		|ДанныеПодсистем,
		|НастройкиИнтернетПоддержки,
		|ИнтернетНастройки");
	
	Результат.Вставить("СистемнаяИнформацияКлиента", ОписаниеСистемнойИнформации());
	Результат.Вставить("СистемнаяИнформацияСервера", ОписаниеСистемнойИнформации());
	
	Возврат Результат;
	
КонецФункции

// Описание системной информации.
//
// Возвращаемое значение:
//  Структура:
//    *ТипПлатформы - Строка, Неопределено - тип платформы, в рамках которой осуществляется работа;
//    *ВерсияПриложения - Строка, Неопределено - версия используемого 1С:Предприятия 8;
//    *ВерсияОС - Строка, Неопределено - версия операционной системы.
//
Функция ОписаниеСистемнойИнформации()
	
	Результат = Новый Структура(
		"ТипПлатформы,
		|ВерсияПриложения,
		|ВерсияОС");
	
	Возврат Результат;
	
КонецФункции

// Заполняет системную информацию.
//
// Параметры:
//  ОписаниеСистемнойИнформации - Структура - См. ОписаниеСистемнойИнформации.
//
Процедура ЗаполнитьСистемнуюИнформацию(ОписаниеСистемнойИнформации) Экспорт
	
	ЗаполнитьЗначенияСвойств(
		ОписаниеСистемнойИнформации,
		Новый СистемнаяИнформация);
	ОписаниеСистемнойИнформации.ТипПлатформы =
		ОбщегоНазначенияКлиентСервер.ИмяТипаПлатформы(ОписаниеСистемнойИнформации.ТипПлатформы);
	
КонецПроцедуры

// Возвращает настройки подготовки технической информации.
// 
// Возвращаемое значение:
//  Структура - настройки технической информации:
//    *ОтправкаИдентификатораКонфигурации - Булево - признак отправки идентификатора конфигурации.
//
Функция НастройкиТехническойИнформации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОтправкаИдентификатораКонфигурации", Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
