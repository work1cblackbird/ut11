///////////////////////////////////////////////////////////////////////////////
// Модуль "ПодборТоваровСервер", содержит процедуры и функции необходимые для
// работы форм подбора товаров. Модуль содержит основные функции которые отвечают
// за установку и снятие отборов, переключение страниц номенклатуры/характеристик,
// функции работы с поиском.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСКорзиной

// Вызывается при изменении данных в корзине подобранных товаров в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ПриИзмененииКорзины(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
	Если (ЭтоФормаПодбораВДокументыПродажи
		И Не Форма.РежимПодбораБезСуммовыхПараметров) Тогда
		
		ПодборТоваровКлиентСервер.УстановитьВидимостьКомандыПодбораНоменклатурыПродаваемойСовместно(Форма, Форма.Объект);
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
			
			Если ПодборТоваровКлиентСервер.ЕстьТоварыПродаваемыеСовместно(Форма, Форма.Объект) Тогда
				УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
			Иначе
				Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии;
				ПриИзмененииВариантаНавигации(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИнформацииОЦенеОстаткахТоваровИзФормПодборов

// Возвращает структуру, данные об остатках товара.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура товара;
//	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика товара;
//	Склады - Массив, Неопределено - массив складов.
//
// Возвращаемое значение:
//	Структура:
//		* ТекущиеОстатки - Число - текущее количество остатков номенклатуры;
//		* ПланируемыеОстатки - Число - планируемое количество остатков номенклатуры;
//
Функция ОстаткиНоменклатуры(Номенклатура, Характеристика, Склады = Неопределено) Экспорт
	
	СоставРазделовЗапроса = Новый Массив;
	Запрос = Новый Запрос();
	
	Если Склады = Неопределено Тогда
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(Не Склады.ЭтоГруппа)");
		
		МассивСкладов = ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад");
		Запрос.УстановитьПараметр("Склады", МассивСкладов);
		
	Иначе
		Запрос.УстановитьПараметр("Склады", Склады);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	Запрос.Текст = ОбеспечениеВДокументахСервер.ТекстЗапросаДоступныхОстатковПоДатамДляПодбора(ЗначениеЗаполнено(Характеристика),
		СоставРазделовЗапроса);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Планируемые остатки
	Результат = МассивРезультатов[СоставРазделовЗапроса.Найти("ПланируемыеОстатки")]; // РезультатЗапроса
	Выборка = Результат.Выбрать();
	
	ТекущиеОстатки     = Новый Массив;
	ПланируемыеОстатки = Новый Массив;
	ТекущийСклад = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Склад <> ТекущийСклад Тогда
			
			НоваяСтрока = Новый Структура("Склад, ВНаличии, Свободно");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Свободно = ?(Выборка.Состояние = 0, Выборка.Доступно, 0);
			ТекущиеОстатки.Добавить(НоваяСтрока);
			
			ТекущийСклад = Выборка.Склад;
			ДоступноКДате = 0;
			
		КонецЕсли;
		
		ДоступноКДате = ДоступноКДате + Выборка.Доступно;
		
		Если Выборка.Состояние = 1 Тогда
			
			НоваяСтрока = Новый Структура("Склад, Период, Доступно");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Доступно = ДоступноКДате;
			ПланируемыеОстатки.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("ТекущиеОстатки, ПланируемыеОстатки", ТекущиеОстатки, ПланируемыеОстатки);
	
КонецФункции

// Переносит данные установленных значений отборов из дерева отборов по
//  свойствам вида номенклатуры в таблицу значений и помещает ее во временное
//  хранилище.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - форма подбора.
// 
// Возвращаемое значение:
//  Строка - Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыПараметровДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов        = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				
				СтрокаЗначенияОтбора = ПодчиненныеСтроки[0];
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

// Переносит данные установленных значений отборов из дерева отборов по
//  свойствам вида номенклатуры в таблицу значений и помещает ее во временное хранилище.
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - форма подбора.
// 
// Возвращаемое значение:
//  Строка - Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыСопоставленияДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалОт");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалДо");
	ТаблицаПараметров.Колонки.Добавить("Интервал");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			Если СтрокаДереваОтборов.ИнтервалОт <> Неопределено Тогда
				СтрокаТаблицы.Интервал = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			СтрокаТаблицы.Интервал = Ложь;
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаЗначенияОтбора Из ПодчиненныеСтроки Цикл
				
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
				СтрокаТаблицы.Интервал = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

#КонецОбласти

#Область НавигацияПоХарактеристикамВФормахПодборов

// Устанавливает текущей страницу со списком номенклатуры.
// Используется в формах подборов (в документ продажи, закупки).
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ПерейтиКСпискуНоменклатуры(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если ЭтоФормаПодбора Тогда
		
		Если Форма.НавигацияПоХарактеристикам Тогда
			
			ИмяСтраницыНоменклатуры = ПодборТоваровКлиентСервер.ИмяСтраницыНоменклатурыПоВариантуПоиска(Форма);
			Элементы.СтраницыСписков.ТекущаяСтраница = Элементы[ИмяСтраницыНоменклатуры];
			
			Форма.НавигацияПоХарактеристикам = Ложь;
			Элементы.СегментНоменклатуры.ТолькоПросмотр = Ложь;
			
			ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
			
			Если ЗначениеЗаполнено(Форма.СтрокаПоискаНоменклатура) Тогда
				Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
			Иначе
				Форма.ТекущийЭлемент = Форма.Элементы[ИмяСпискаНоменклатуры];
			КонецЕсли;
			
			Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьНоменклатуру;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеОбработчикиСобытийФорм

// Вызывается из обработчика события "ПриСозданииНаСервере" форм списков.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, формы выбора.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Форма.ЕстьПравоНастройкиВидовНоменклатуры = ПравоДоступа("Изменение", Метаданные.Справочники.ВидыНоменклатуры);
	Форма.ЦветТекстаФормы = ЦветаСтиля.ЦветТекстаФормы;	
	
	УстановитьЗначенияПоНастройкамФормы(Форма);
	
	Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров = Константы.ИспользоватьСтандартныйПоискПриПодбореТоваров.Получить();
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда 
		Для Каждого Элемент Из Форма.Параметры.Отбор Цикл
			
			Если Элемент.Ключ = "ТипНоменклатуры" Тогда
				УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Ключ = "ВидНоменклатуры" Тогда
				УстановитьОтборПоВидНоменклатурыПоПараметрам(Форма);
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Ключ = "Владелец" Тогда
				Продолжить;
			КонецЕсли;

			Если Элемент.Ключ = "МаркируемаяПродукция" Тогда
				НоменклатураЛокализация.УстановитьОтборПоПризнакуМаркируемойПродукцииПоПараметрам(Форма);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Элемент.Значение) = Тип("ФиксированныйМассив") Тогда
				ДобавитьЭлементОтбора(ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура), 
				Элемент.Ключ, Элемент.Значение, ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоУмолчанию");
			Иначе
				ДобавитьЭлементОтбора(ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура), 
				Элемент.Ключ, Элемент.Значение, ВидСравненияКомпоновкиДанных.Равно, "ОтборПоУмолчанию");
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
		ПодборТоваровКлиентСервер.НазначитьКнопкуВыбораПоУмолчанию(Форма);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ИзменениеТекстаЗапросаСпискаДляТекущегоЯзыка(Форма, "СписокНоменклатура");
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	
КонецПроцедуры

// Вызывается из обработчика события "ПриСозданииНаСервере" форм подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, где:
//		* Элементы - ВсеЭлементыФормы - где:
//			** КорзинаЦена - ТаблицаФормы
//			** ТолькоВНаличии - ПолеФормы
//			** СегментНоменклатуры - ПолеФормы
//			** ВидНоменклатуры - ПолеФормы
//			** ВидыНоменклатуры - ТаблицаФормы - где:
//				*** ТекущиеДанные - ДинамическийСписок - где:
//					**** Ссылка - СправочникСсылка.ВидыНоменклатуры
//			** ИспользоватьФильтры - ПолеФормы
//			** СтандартныйПоискКоманднаяПанельУстановитьФильтр - ГруппаФормы
//			** РасширенныйПоискКоманднаяПанельУстановитьФильтр - ГруппаФормы
//			** СписокРасширенныйПоискНоменклатураКонтекстноеМенюНоменклатураСАналогичнымиСвойствами - КнопкаФормы
//			** СписокРасширенныйПоискНоменклатураКонтекстноеМенюТоварыДругогоКачества - КнопкаФормы
//			** СписокСтандартныйПоискНоменклатураКонтекстноеМенюНоменклатураСАналогичнымиСвойствами - КнопкаФормы
//			** СписокСтандартныйПоискНоменклатураКонтекстноеМенюТоварыДругогоКачества - КнопкаФормы
//			** СписокСтандартныйПоискНоменклатураВНаличииОстаток - ПолеФормы 
//			** СписокРасширенныйПоискНоменклатураВНаличииОстаток - ПолеФормы
//			** СписокРасширенныйПоискНоменклатураДоступно - ПолеФормы
//			** СписокСтандартныйПоискНоменклатураДоступно - ПолеФормы
//			** СписокРасширенныйПоискНоменклатураЦена - ПолеФормы
//			** СписокСтандартныйПоискНоменклатураЦена - ПолеФормы
//			** СписокРасширенныйПоискХарактеристикиЦена - ПолеФормы
//			** СписокСтандартныйПоискХарактеристикиЦена - ПолеФормы
//			** СписокРасширенныйПоискХарактеристикиВНаличииОстаток - ПолеФормы
//			** СписокСтандартныйПоискХарактеристикиВНаличииОстаток - ПолеФормы
//			** СписокРасширенныйПоискХарактеристикиДоступно - ПолеФормы
//			** СписокСтандартныйПоискХарактеристикиДоступно - ПолеФормы
//			** СписокРасширенныйПоискНоменклатураПартнера - ПолеФормы
//			** СписокСтандартныйПоискНоменклатураПартнера - ПолеФормы
//			** СписокРасширенныйПоискНоменклатураПартнераНоменклатура - ПолеФормы
//			** СписокСтандартныйПоискНоменклатураПартнераНоменклатура - ПолеФормы
//			** ИерархияНоменклатуры - ТаблицаФормы
//			** ИерархияНоменклатурыПартнера - ТаблицаФормы
//			** СтрокаПоискаНоменклатура - ПолеФормы
//			** СтрокаПоискаХарактеристики - ПолеФормы
//			** ОстаткиТоваровПериодОписание - ПолеФормы
//			** ОстаткиТоваров - ПолеФормы
//			** ОстаткиТоваровПоставщика - ПолеФормы
//			** ДеревоОтборов - ТаблицаФормы
//			** ДеревоОтборовОтбор - ПолеФормы
//			** ДеревоОтборовПредставление - ПолеФормы
//			** ДеревоОтборовПредставлениеОтбора - ПолеФормы
//			** СписокКачества - ТаблицаФормы
//			** ОтборЦенаОт - ПолеФормы
//			** ОтборЦенаДо - ПолеФормы
//			** КоманднаяПанельВариантНавигации - КнопкаФормы
//			** НадписьВариантНавигации - ПолеФормы
//			** НоменклатураИсходногоКачества - ПолеФормы
//			** ИерархияНоменклатуры - ТаблицаФормы
//			** КоманднаяПанельСоздатьНоменклатуру - ГруппаФормы
//			** КоманднаяПанельСоздатьХарактеристику - ГруппаФормы
//		* Команды - КомандыФормы - где:
//			** ПеренестиВДокумент - КомандаФормы
//		* ТаблицаПараметровОтбора - ДанныеФормыКоллекция
//		* СписокНоменклатура - ДинамическийСписок - где:
//			** Параметры - ЗначенияПараметровДанныхКомпоновкиДанных
//		* СписокХарактеристики - ДинамическийСписок - где:
//			** Параметры - ЗначенияПараметровДанныхКомпоновкиДанных
//		* СписокНоменклатураПартнера - ДинамическийСписок - где:
//			** Параметры - ЗначенияПараметровДанныхКомпоновкиДанных
//		* НоваяХарактеристика - см. ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик
//		* ОстаткиТоваров - ДанныеФормыЭлементДерева
//		* ОстаткиТоваровПоставщика - ДанныеФормыЭлементДерева
//		
//
Процедура ПриСозданииФормыПодбораНаСервере(Форма) Экспорт
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	АвторизованВнешнийПользователь = ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь();
	
#Область ПолучитьЗначенияФункциональныхОпций
	
	Форма.ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	Форма.ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров = Константы.ИспользоватьСтандартныйПоискПриПодбореТоваров.Получить();
	Форма.ИспользоватьПартнеровИКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
		
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		Если Параметры.Свойство("ИспользуетсяЦенообразование25") Тогда
			Форма.ИспользуетсяЦенообразование25 = Параметры.ИспользуетсяЦенообразование25;
		Иначе			
			Форма.ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(Параметры.Дата);
		КонецЕсли;
		Форма.ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах")
		                                          И НЕ АвторизованВнешнийПользователь;
		Форма.ИспользоватьНоменклатуруПродаваемуюСовместно = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
		Если Не Форма.РежимПодбораБезСоглашенийСКлиентами	Тогда	
			Форма.ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
		КонецЕсли;
		Если Не Форма.ИспользоватьСоглашенияСКлиентами Тогда
			ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
			ПараметрыВыбораВидаЦены.ЦенаВключаетНДС = Форма.Объект.ЦенаВключаетНДС;
			ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
			ПараметрыВыбораВидаЦены.Статус = Перечисления.СтатусыДействияВидовЦен.Действует;
			
			ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
			Форма.ЕдинственныйВидЦенПродажи = Не ВидЦеныПоУмолчанию.Пустая();
		КонецЕсли;
	ИначеЕсли ЭтоФормаПодбораВДокументыЗакупки Тогда
		Форма.ИспользоватьРучныеСкидкиВЗакупках = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВЗакупках");
		Форма.ИспользоватьНоменклатуруПартнеров = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров");
	КонецЕсли;
#КонецОбласти

	
#Область УстановитьСвойстваФормыПоПараметрам
	
	#Область УстановитьСкладскиеНастройкиПоПараметрам
	
	ПереданСписокСкладов = ТипЗнч(Параметры.Склад) = Тип("СписокЗначений");
	ЭтоГруппаСкладов = Не ПереданСписокСкладов И Справочники.Склады.ЭтоГруппа(Параметры.Склад);

	
	Если ЗначениеЗаполнено(Параметры.Склад)
		И ЭтоГруппаСкладов Тогда
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
		|	И Склады.ВыборГруппы В(&ВыборГруппыСкладов)
		|	И НЕ Склады.ЭтоГруппа");
		
		ВыборГруппыСкладов = Новый Массив();
		ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных);
		
		Если Не Параметры.РежимПодбораИсключитьГруппыДоступныеВЗаказах Тогда
			
			ВыборГруппыСкладов.Добавить(Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах);
			
		КонецЕсли;
		
		
		ЗапросПоСкладам.УстановитьПараметр("Склад", Параметры.Склад);
		ЗапросПоСкладам.УстановитьПараметр("ВыборГруппыСкладов", ВыборГруппыСкладов);
		
		Форма.Склады.ЗагрузитьЗначения(ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
		
	ИначеЕсли ПереданСписокСкладов Тогда
		
		Форма.Склады.ЗагрузитьЗначения(Параметры.Склад.ВыгрузитьЗначения());
		
	Иначе
		
		Если ЗначениеЗаполнено(Параметры.Склад) Тогда
			Форма.Склады.Добавить(Параметры.Склад);
		КонецЕсли;
		
	КонецЕсли;
	
	// Если склад не выбран, то заполнить список складов всеми разрешенными складами.
	Если Форма.Склады.Количество() = 0
		И Не ПереданСписокСкладов
		И Параметры.Свойство("ОстаткиПоВсемСкладам")
		И Параметры.ОстаткиПоВсемСкладам Тогда
		
		Форма.ОстаткиПоВсемСкладам = Истина;
		
		ЗапросПоСкладам = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	(Не Склады.ЭтоГруппа)");
		
		Форма.Склады.ЗагрузитьЗначения(ЗапросПоСкладам.Выполнить().Выгрузить().ВыгрузитьКолонку("Склад"));
		
	КонецЕсли;
	
	Если Форма.Склады.Количество() = 0 Тогда
		СкладПараметр = Справочники.Склады.ПустаяСсылка();
	ИначеЕсли Форма.Склады.Количество() = 1 Тогда
		СкладПараметр = Форма.Склады[0].Значение;
	Иначе
		СкладПараметр = Форма.Склады.ВыгрузитьЗначения();
	КонецЕсли;
	
	КоличествоСкладов = Форма.Склады.Количество();
	НесколькоСкладов = (КоличествоСкладов > 1);
	
	// Заполнить список выбора доступных складов в корзине.
	Элементы.КорзинаСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.КорзинаСклад, "Ссылка", Форма.Склады.ВыгрузитьЗначения());
	Элементы.КорзинаСклад.Видимость = (НесколькоСкладов И Параметры.РежимПодбораИспользоватьСкладыВТабличнойЧасти);
	
	Если КоличествоСкладов = 0 Тогда
		
		Форма.ТолькоВНаличии = Ложь;
		Форма.ОтображатьОстатки = Ложь;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Склад) Тогда 
		
		Форма.ТолькоВНаличии = Ложь;
		
	КонецЕсли;
	
	Форма.ОтображатьОстаткиНадпись = ?(Форма.ОтображатьОстатки, 
	НСтр("ru = 'Подробная информация об остатках (скрыть)'"),
	НСтр("ru = 'Подробная информация об остатках (показать)'"));
	
	Элементы.КорзинаСклад.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрВыбора(Элементы.КорзинаСклад, "Ссылка", СкладПараметр);
	
	#КонецОбласти
	
	#Область УстановитьСвойстваФормыПодбораПоНалогообложениюНДС
		Если Параметры.Свойство("НалогообложениеНДС")
			И ЗначениеЗаполнено(Параметры.НалогообложениеНДС) Тогда
			Ограничения = УчетНДСУП.ОграничениеТоваровПоНалогообложению(Параметры.НалогообложениеНДС);
			Для Каждого Ограничение Из Ограничения Цикл
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура,
																						"Номенклатура." + Ограничение.Реквизит,
																						Ограничение.Значение,
																						Ограничение.ВидСравнения,
																						"ОтборПоУмолчанию",
																						Истина);
				Если Ограничение.Реквизит = "ПодакцизныйТовар" Тогда
					Элементы.ДекорацияПодакцизныйТовар.Видимость = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	#КонецОбласти
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		#Область УстановитьСвойстваФормыПодбораВДокументыЗакупкиПоПараметрам
		
		ЗаполнитьЗначенияСвойств(Форма, Параметры,
		"Валюта, Дата, Соглашение, Партнер,
		|РежимПодбораИспользоватьСкладыВТабличнойЧасти,
		|ПроверятьЗаполнение");
		Форма.ПоставщикПартнер = Параметры.Партнер;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Параметры, "ВидЦеныПоставщика") Тогда
			Форма.ВидЦеныПоставщика = Параметры.ВидЦеныПоставщика;
		КонецЕсли;
		
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Параметры, "ЦенаВключаетНДС") Тогда
			Форма.Объект.ЦенаВключаетНДС = Параметры.ЦенаВключаетНДС;
		КонецЕсли;
		
		Форма.ЕстьЦеныНоменклатурыПоставщиковВБудущем = ЕстьЗначенияЦенНоменклатурыПозжеДатыПодбора(Форма.Дата);
		
		Форма.Объект.Склад = Параметры.Склад;
		Если ЗначениеЗаполнено(Параметры.Соглашение) Тогда
			Форма.Объект.Соглашение = Параметры.Соглашение;
			Форма.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Соглашение, "Организация");
		КонецЕсли;
		Форма.Объект.Партнер = Параметры.Партнер;
		
		// Установить свойства элементов формы по переданным параметрам.
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.ИерархияНоменклатурыПартнера, "Владелец", Форма.ПоставщикПартнер);
		
		// Заполнить значения реквизитов формы и объекта по переданным параметрам.
		Элементы.КорзинаСклад.Видимость = Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти И (Форма.Склады.Количество() > 1);
		
		Если Не (Параметры.РежимПодбораБезКоличественныхПараметров = Неопределено) Тогда
			Форма.РежимПодбораБезКоличественныхПараметров = Параметры.РежимПодбораБезКоличественныхПараметров;
		КонецЕсли;
		
		Если Не (Параметры.РежимПодбораБезСуммовыхПараметров = Неопределено) Тогда
			Форма.РежимПодбораБезСуммовыхПараметров = Параметры.РежимПодбораБезСуммовыхПараметров;
		КонецЕсли;
		
		Если Не (Параметры.СкрыватьРучныеСкидки = Неопределено) Тогда
			Форма.СкрыватьРучныеСкидки = Параметры.СкрыватьРучныеСкидки;
		КонецЕсли;
		
		Если Не Форма.РежимПодбораБезСуммовыхПараметров И Не ЗначениеЗаполнено(Форма.Валюта) Тогда
			Форма.Валюта = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
		КонецЕсли;
		
		// Установить свойства элементов формы по переданным параметрам.
		Элементы.КорзинаЦена.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Цена (%1)'"), Форма.Валюта);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатураПартнера, "Владелец", Параметры.Партнер, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоУмолчанию", ЗначениеЗаполнено(Параметры.Партнер));
		
		Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
			Форма.АвтоЗаголовок = Ложь;
			Форма.Заголовок = Параметры.Заголовок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
			Форма.Команды.ПеренестиВДокумент.Заголовок = Параметры.ЗаголовокКнопкиПеренести;
			Форма.Команды.ПеренестиВДокумент.Подсказка = Параметры.ЗаголовокКнопкиПеренести;
			Форма.Элементы.КоманднаяПанельПеренести.Ширина = 24;
		КонецЕсли;
		
		Если Параметры.РежимПодбораБезКоличественныхПараметров Тогда
			Элементы.КорзинаКоличественныеПараметры.Видимость = Ложь;
		КонецЕсли;
		
		ОтображатьОстаткиНаСкладах = Не Параметры.СкрыватьКомандуОстаткиНаСкладах И Не (Форма.Склады.Количество() = 0);
		Форма.СкрыватьКомандуОстаткиНаСкладах = Параметры.СкрыватьКомандуОстаткиНаСкладах;
		Форма.ОтображатьОстаткиНаСкладах = ОтображатьОстаткиНаСкладах;
		
		Элементы.ОтображатьОстаткиНадпись.Видимость = ОтображатьОстаткиНаСкладах;
		Элементы.ОтображатьОстаткиНоменклатурыПартнераНадпись.Видимость = ОтображатьОстаткиНаСкладах;
		
		Если ПервоеОткрытиеФормы(Форма.КодФормы) Тогда
			УстановитьПараметрыДереваОтбораКачествоНовый(Форма);
			Форма.ОтображатьОстатки = Истина;
		КонецЕсли;
		
		Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки И ОтображатьОстаткиНаСкладах И Не Форма.РежимПодбораБезКоличественныхПараметров;
		Элементы.ОстаткиТоваровПоставщика.Видимость = Форма.ОтображатьОстатки И ОтображатьОстаткиНаСкладах И Не Форма.СкрыватьКомандуОстаткиНаСкладах;
		
		// Установить видимость элементов отображения остатков.
		
		Элементы.ТолькоВНаличии.Видимость = ОтображатьОстаткиНаСкладах;
		
		Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Видимость = Не Параметры.СкрыватьКомандуОстаткиНаСкладах;
		Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Видимость = Не Параметры.СкрыватьКомандуОстаткиНаСкладах;
		
		Элементы.СписокСтандартныйПоискНоменклатураДоступно.Видимость = ОтображатьОстаткиНаСкладах;
		Элементы.СписокРасширенныйПоискНоменклатураДоступно.Видимость = ОтображатьОстаткиНаСкладах;
		Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Видимость = Не Параметры.СкрыватьКомандуОстаткиНаСкладах;
		Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Видимость = ОтображатьОстаткиНаСкладах;
		Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Видимость = Не Параметры.СкрыватьКомандуОстаткиНаСкладах;
		Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Видимость = ОтображатьОстаткиНаСкладах;
		
		// Установить видимость элементов отображения цен.
		ВидимостьЭлементовОтображенияЦен = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		
		Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюПерейтиКЦенамНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокСтандартныйПоискХарактеристикиКонтекстноеМенюЦеныНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюПерейтиКЦенамНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокРасширенныйПоискХарактеристикиКонтекстноеМенюЦеныНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокСтандартныйПоискНоменклатураПартнераКонтекстноеМенюПерейтиКЦенамНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		Элементы.СписокРасширенныйПоискНоменклатураПартнераКонтекстноеМенюПерейтиКЦенамНоменклатуры.Видимость = ВидимостьЭлементовОтображенияЦен;
		
		Если Параметры.РежимПодбораБезСуммовыхПараметров Тогда
			Элементы.КорзинаСуммаРучнойСкидки.Видимость                         = Ложь;
			Элементы.КорзинаПроцентРучнойСкидки.Видимость                       = Ложь;
			Элементы.КорзинаСумма.Видимость                                     = Ложь;
			Элементы.КорзинаЦена.Видимость                                      = Ложь;
			Элементы.СписокСтандартныйПоискНоменклатураЦена.Видимость           = Ложь;
			Элементы.СписокРасширенныйПоискНоменклатураЦена.Видимость           = Ложь;
			Элементы.СписокРасширенныйПоискХарактеристикиЦена.Видимость         = Ложь;
			Элементы.СписокСтандартныйПоискХарактеристикиЦена.Видимость         = Ложь;
			Элементы.СписокСтандартныйПоискНоменклатураПартнераЦена.Видимость   = Ложь;
			Элементы.СписокРасширенныйПоискНоменклатураПартнераЦена.Видимость   = Ложь;
			Элементы.ГруппаФильтрПоЦене.Видимость                               = Ложь;
			Элементы.ВидЦеныПоставщикаНоменклатура.Видимость                    = Ложь;
			Элементы.ВидЦеныПоставщика.Видимость                                = Ложь;
			Элементы.КорзинаВидЦеныПоставщика.Видимость                         = Ложь;
		КонецЕсли;
		
		Если Параметры.СкрыватьРучныеСкидки Тогда
			Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
		КонецЕсли;
		
		Если Не (Параметры.ЗапрашиватьКоличество = Неопределено) Тогда
			Форма.ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
		КонецЕсли;
		
		Элементы.ЗапрашиватьКоличествоЦену.Видимость = Не Параметры.СкрыватьКнопкуЗапрашиватьКоличество;
		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество;
		
		Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
			Элементы.ЗапрашиватьКоличествоЦену.Заголовок = НСтр("ru = 'Запрашивать количество'");
		КонецЕсли;
		
		Если Не Форма.ИспользоватьНоменклатуруПартнеров Или Не ЗначениеЗаполнено(Параметры.Партнер) Тогда
			Элементы.СтраницаНоменклатураПартнера.Видимость = Ложь;
			Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.НоменклатураПартнера.Видимость = Ложь;
		КонецЕсли;
		
		Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
		
		Элементы.СтраницаСоздатьНоменклатуру.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
		Элементы.СтраницаСоздатьХарактеристику.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.ХарактеристикиНоменклатуры);
		
		#КонецОбласти
		
	ИначеЕсли ЭтоФормаПодбораВДокументыПродажи Тогда
		
		#Область УстановитьСвойстваФормыПодбораВДокументыПродажиПоПараметрам
		
		ПервоеОткрытиеФормы = ПервоеОткрытиеФормы(Форма.КодФормы);
		Если ПервоеОткрытиеФормы Тогда
			УстановитьПараметрыДереваОтбораКачествоНовый(Форма);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Соглашение) Тогда
			СегментНоменклатуры = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Параметры.Соглашение, "СегментНоменклатуры");
			Форма.СегментНоменклатуры = СегментНоменклатуры;
		Иначе 
			Форма.СегментНоменклатуры = Справочники.СегментыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		Элементы.СегментНоменклатуры.Доступность = ПравоДоступа("Просмотр", Метаданные.Справочники.СегментыНоменклатуры); 
		
		Элементы.КорзинаНоменклатура.ТолькоПросмотр = Параметры.СкрыватьВыборНоменклатуры;
		
		Форма.Валюта = Параметры.Валюта;
		Форма.Дата = Параметры.Дата;
		Форма.Объект.Склад = Параметры.Склад;
		Форма.Партнер = Параметры.Партнер;
		Форма.Соглашение = Параметры.Соглашение;
		Форма.Объект.Соглашение = Параметры.Соглашение;
		Форма.Объект.НалогообложениеНДС = Параметры.НалогообложениеНДС;
		Форма.Объект.ЦенаВключаетНДС = Параметры.ЦенаВключаетНДС;
		Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти = Параметры.РежимПодбораИспользоватьСкладыВТабличнойЧасти;
		Форма.ВозвращатьМногооборотнуюТару = Параметры.ВозвращатьМногооборотнуюТару;
		
		Форма.ВидЦены = Параметры.ВидЦены;
		
		Форма.РежимПодбораБезКоличественныхПараметров = Параметры.РежимПодбораБезКоличественныхПараметров;
		
		Форма.РежимПодбораБезСуммовыхПараметров = Параметры.РежимПодбораБезСуммовыхПараметров;
		
		Форма.РежимПодбораБезСоглашенийСКлиентами = Параметры.РежимПодбораБезСоглашенийСКлиентами;
		
		Форма.СкрыватьРучныеСкидки = Параметры.СкрыватьРучныеСкидки;
		
		Форма.ИспользоватьДатыОтгрузки = Параметры.ИспользоватьДатыОтгрузки;
		
		Форма.НеРазбиватьНаборыПоКомплектующим = Параметры.НеРазбиватьНаборыПоКомплектующим;
		
		Форма.ВариантАнализаНоменклатурыПродаваемойСовместно = Параметры.ВариантАнализаНоменклатурыПродаваемойСовместно;
		
		ВидыЦенОбъектаХраненияУсловийПродаж = Неопределено;
		
		ВидыЦен = Новый Массив();
		
		Если Не Форма.РежимПодбораБезСуммовыхПараметров Тогда
			Если Форма.РежимОтбораПоАссортименту Тогда
				Форма.ОбъектПланированияАссортимента = АссортиментСервер.ОбъектПланирования(СкладПараметр, Форма.Дата);
				
				ОтборВидовЦен = Новый Структура;
				ОтборВидовЦен.Вставить("РазрешеныПродажи", Истина);
				
				ВидыЦен = АссортиментСервер.ВидыЦенПоАссортименту(Форма.ОбъектПланированияАссортимента, Форма.Дата, ОтборВидовЦен);
				Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен, Форма.ИспользуетсяЦенообразование25);
			ИначеЕсли Форма.РежимОтбораДляРозничныхПродаж Тогда
				Если Форма.ИспользуетсяЦенообразование25 Тогда
					Форма.ОбъектХраненияУсловийПродаж = АссортиментСерверПовтИсп.ФорматМагазинаПоСкладу(СкладПараметр, Форма.Дата);
					ВидыЦен.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ОбъектХраненияУсловийПродаж, "РозничныйВидЦены"));
					Форма.ВидЦенИндивидуальный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ОбъектХраненияУсловийПродаж, "ИндивидуальныйВидЦены");
					Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен, Форма.ИспользуетсяЦенообразование25);
				КонецЕсли;
			ИначеЕсли Форма.РежимПодбораБезСоглашенийСКлиентами Тогда
				ВидыЦен.Добавить(Форма.ВидЦены);
				Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен, Форма.ИспользуетсяЦенообразование25);
			ИначеЕсли Не Форма.ИспользоватьСоглашенияСКлиентами Тогда
				Форма.ОбъектХраненияУсловийПродаж = Форма.Партнер;
				Если Форма.ИспользуетсяЦенообразование25 Тогда
					ВидыЦен.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ОбъектХраненияУсловийПродаж, "ВидЦен"));
					Форма.ВидЦенИндивидуальный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ОбъектХраненияУсловийПродаж, "ИндивидуальныйВидЦены");
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВидыЦен) Тогда
					ВидыЦен = ВидыЦенПоУмолчанию(Форма.Объект.ЦенаВключаетНДС);
				КонецЕсли;
				Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен, Форма.ИспользуетсяЦенообразование25);
			Иначе
				Форма.ОбъектХраненияУсловийПродаж = Форма.Соглашение;
				Если Форма.ИспользуетсяЦенообразование25 Тогда
					ВидыЦен.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ОбъектХраненияУсловийПродаж, "ВидЦен"));
					Форма.ВидЦенИндивидуальный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ОбъектХраненияУсловийПродаж, "ИндивидуальныйВидЦены");
				Иначе
					ВидыЦен = ВидыЦенПоСоглашениюСКлиентом(Форма.Соглашение);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ВидыЦен) Тогда
					ВидыЦен = ВидыЦенПоУмолчанию(Форма.Объект.ЦенаВключаетНДС);
				КонецЕсли;
				Форма.ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(Форма.Дата, ВидыЦен, Форма.ИспользуетсяЦенообразование25);
			КонецЕсли;
		КонецЕсли;
		
		Форма.ВидыЦен.ЗагрузитьЗначения(ВидыЦен);
		
		Если НЕ ВидыЦенОбъектаХраненияУсловийПродаж = Неопределено Тогда
			Если ВидыЦенОбъектаХраненияУсловийПродаж.Свойство("ВидЦен") Тогда
				Форма.ВидЦенОсновной = ВидыЦенОбъектаХраненияУсловийПродаж.ВидЦен;
			ИначеЕсли ВидыЦенОбъектаХраненияУсловийПродаж.Свойство("РозничныйВидЦены") Тогда 
				Форма.ВидЦенОсновной = ВидыЦенОбъектаХраненияУсловийПродаж.РозничныйВидЦены;
			Иначе
				Форма.ВидЦенОсновной = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;
			
			Если ВидыЦенОбъектаХраненияУсловийПродаж.Свойство("ИндивидуальныйВидЦены") Тогда
				Форма.ВидЦенИндивидуальный = ВидыЦенОбъектаХраненияУсловийПродаж.ИндивидуальныйВидЦены;
			Иначе
				Форма.ВидЦенИндивидуальный = Справочники.ВидыЦен.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Форма.НеИспользоватьВидыЦенПоУсловиюПродаж = Истина;
		КонецЕсли;
		
		Если Форма.ИспользуетсяЦенообразование25 Тогда
			Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
				Форма.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен;
			ИначеЕсли (Не Форма.ИспользоватьСоглашенияСКлиентами ИЛИ Форма.РежимПодбораБезСоглашенийСКлиентами) 
				И Не Форма.РежимОтбораДляРозничныхПродаж Тогда
				Форма.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке;
			Иначе
				Форма.ВариантРасчетаЦен = ВариантРасчетаЦен(Форма);
			КонецЕсли;
		Иначе
			Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
				Форма.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен;
			ИначеЕсли НЕ Форма.ИспользоватьСоглашенияСКлиентами
				Или Форма.РежимПодбораБезСоглашенийСКлиентами Тогда	
				Форма.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке;
			Иначе
				Форма.ВариантРасчетаЦен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Соглашение, "ВариантРасчетаЦен");
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Форма.ВариантРасчетаЦен) Тогда
			Форма.ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Форма.ВариантАнализаНоменклатурыПродаваемойСовместно) Тогда
			Форма.ВариантАнализаНоменклатурыПродаваемойСовместно = Перечисления.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля;
		КонецЕсли;
		
		Элементы.КорзинаДатаОтгрузки.Видимость = Форма.ИспользоватьДатыОтгрузки;
		
		Если Не Форма.РежимПодбораБезСуммовыхПараметров Тогда
			Если Не ЗначениеЗаполнено(Форма.Валюта) Тогда
				Форма.Валюта = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.РежимПодбораБезКоличественныхПараметров Тогда
			Элементы.КорзинаКоличественныеПараметры.Видимость = Ложь;
		КонецЕсли;
		
		УстановкаЦенНоменклатуры = Ложь;
		БезОтбораПоИспользоватьПриПродажеВЦену = Ложь;
		Если Параметры.Свойство("Документ") Тогда
			Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
				УстановкаЦенНоменклатуры = Истина;
			КонецЕсли;
			
			Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ВводОстатковТоваров") Тогда
				НовыеПараметры = Новый Массив;
				НовыеПараметры.Добавить(Новый ПараметрВыбора("ВыводитьПроизвольныйВидЦен", Истина));
				НовыеПараметры.Добавить(Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДействияВидовЦен.Действует));
				Элементы.КорзинаВидЦены.ПараметрыВыбора = Новый ФиксированныйМассив(НовыеПараметры);
				
				БезОтбораПоИспользоватьПриПродажеВЦену = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ТолкающееНазначение = Неопределено;
		Если ЗначениеЗаполнено(Параметры.НаправлениеДеятельности) Тогда
			ТолкающееНазначение = НаправленияДеятельностиСервер.ТолкающееНазначение(Параметры.НаправлениеДеятельности);
		КонецЕсли;
		РежимПодбораОстатковПоНаправлениюДеятельности = ЗначениеЗаполнено(ТолкающееНазначение);
		Форма.Обособленно = РежимПодбораОстатковПоНаправлениюДеятельности;
		Форма.ОтборПоНазначению = ТолкающееНазначение;
		Форма.ОтборПоНазначениюТекущий = ТолкающееНазначение;
		Форма.РежимПодбораОстатковПоНаправлениюДеятельности = РежимПодбораОстатковПоНаправлениюДеятельности;
		Элементы.ОбособленноСтандартныйПоискНоменклатура.Видимость = РежимПодбораОстатковПоНаправлениюДеятельности;
		Элементы.ОбособленноРасширенныйПоискНоменклатура.Видимость = РежимПодбораОстатковПоНаправлениюДеятельности;
		Элементы.ОбособленноСтандартныйПоискХарактеристики.Видимость = РежимПодбораОстатковПоНаправлениюДеятельности;
		Элементы.ОбособленноРасширенныйПоискХарактеристики.Видимость = РежимПодбораОстатковПоНаправлениюДеятельности;
		Элементы.КорзинаОбособленно.Видимость = РежимПодбораОстатковПоНаправлениюДеятельности
			Или Форма.ПодборВариантовОбеспечения
				И Не Форма.ОграничиватьВариантыОбеспечения;
		Элементы.КорзинаВариантОбеспечения.Видимость = Форма.ПодборВариантовОбеспечения
			И Не Форма.ОграничиватьВариантыОбеспечения;
		
		Если Форма.ПодборВариантовОбеспечения
			И Не Форма.ОграничиватьВариантыОбеспечения Тогда
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Очистить();
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить);
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.СоСклада);
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.КОбеспечению);
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления);
			Элементы.КорзинаВариантОбеспечения.СписокВыбора.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется);
		КонецЕсли;
		
		
		ОтображатьОстаткиНаСкладах = Не Параметры.СкрыватьКомандуОстаткиНаСкладах И Не (Форма.Склады.Количество() = 0);
		Форма.СкрыватьКомандуОстаткиНаСкладах = Параметры.СкрыватьКомандуОстаткиНаСкладах;
		Форма.ОтображатьОстаткиНаСкладах = ОтображатьОстаткиНаСкладах;
		
		Если ПервоеОткрытиеФормы Тогда
			Форма.ОтображатьОстатки = Истина;
		КонецЕсли;
		
		// Остатки в форме подбора.
		Элементы.ОтображатьОстаткиНадпись.Видимость = ОтображатьОстаткиНаСкладах
			И Не ЗначениеЗаполнено(Параметры.НаправлениеДеятельности);
		Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки
			И ОтображатьОстаткиНаСкладах
			И Не ЗначениеЗаполнено(Параметры.НаправлениеДеятельности);
		Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Видимость = Не Форма.СкрыватьКомандуОстаткиНаСкладах;
		Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Видимость = Не Форма.СкрыватьКомандуОстаткиНаСкладах;
		Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Видимость = Не Форма.СкрыватьКомандуОстаткиНаСкладах;
		Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Видимость = Не Форма.СкрыватьКомандуОстаткиНаСкладах;
		УстановитьВидимостьДоступныхОстатковПодбораВДокументПродажи(Форма);
		
		Элементы.ТолькоВНаличии.Видимость = ОтображатьОстаткиНаСкладах;
		
		Если ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
			Элементы.ТолькоВНаличии.Видимость = Ложь;
		КонецЕсли;
		
		Если Параметры.РежимПодбораБезСуммовыхПараметров Тогда
			Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаСумма.Видимость = Ложь;
			Элементы.КорзинаЦена.Видимость = Ложь;
			Элементы.СписокСтандартныйПоискНоменклатураЦена.Видимость = Ложь;
			Элементы.СписокРасширенныйПоискНоменклатураЦена.Видимость = Ложь;
			Элементы.СписокРасширенныйПоискХарактеристикиЦена.Видимость = Ложь;
			Элементы.СписокСтандартныйПоискХарактеристикиЦена.Видимость = Ложь;
			Элементы.ГруппаФильтрПоЦене.Видимость = Ложь;
			
			Элементы.КорзинаКонтекстноеМенюЗаполнитьЦеныПоСоглашению.Видимость            = Ложь;
			Элементы.КорзинаКонтекстноеМенюЗаполнитьЦеныВыделенныхСтрокПоВидуЦен.Видимость = Ложь;
			Элементы.КорзинаКонтекстноеМенюНазначитьРучнуюСкидку.Видимость                = Ложь;
			Элементы.КорзинаКонтекстноеМенюНазначитьРучнуюСкидкуВыделенныхСтрок.Видимость = Ложь;
			Элементы.КорзинаКонтекстноеМенюОтменитьРучныеСкидки.Видимость                 = Ложь;
		КонецЕсли;
		
		Если Параметры.СкрыватьРучныеСкидки Тогда
			Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
			Элементы.КорзинаКонтекстноеМенюНазначитьРучнуюСкидку.Видимость                = Ложь;
			Элементы.КорзинаКонтекстноеМенюНазначитьРучнуюСкидкуВыделенныхСтрок.Видимость = Ложь;
			Элементы.КорзинаКонтекстноеМенюОтменитьРучныеСкидки.Видимость                 = Ложь;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
			Форма.АвтоЗаголовок = Ложь;
			Форма.Заголовок = Параметры.Заголовок;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
			Форма.Команды.ПеренестиВДокумент.Заголовок = Параметры.ЗаголовокКнопкиПеренести;
			Форма.Команды.ПеренестиВДокумент.Подсказка = Параметры.ЗаголовокКнопкиПеренести;
		КонецЕсли;
		
		Если Параметры.ЗапрашиватьКоличество <> Неопределено Тогда
			Форма.ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
		КонецЕсли;
		
		Элементы.НеЗапрашиватьКоличество.Видимость = Не Параметры.СкрыватьКнопкуЗапрашиватьКоличество И Не Форма.РежимПодбораБезСуммовыхПараметров;
		Элементы.ЗапрашиватьКоличествоЦену.Видимость = Не Параметры.СкрыватьКнопкуЗапрашиватьКоличество И Не Форма.РежимПодбораБезСуммовыхПараметров;
		Элементы.ЗапрашиватьКоличество.Видимость = Не Параметры.СкрыватьКнопкуЗапрашиватьКоличество;
		
		Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюЦеныНоменклатуры.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюЦеныНоменклатуры.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.СписокРасширенныйПоискХарактеристикиКонтекстноеМенюЦеныНоменклатуры.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.СписокСтандартныйПоискХарактеристикиКонтекстноеМенюЦеныНоменклатуры.Видимость = Не Параметры.СкрыватьКомандуЦеныНоменклатуры;
		Элементы.КорзинаВидЦены.Видимость = Не (Параметры.РежимПодбораБезСуммовыхПараметров Или Параметры.СкрыватьКолонкуВидЦены);
		
		Элементы.КорзинаКонтекстноеМенюЗаполнитьЦеныПоСоглашению.Видимость            = Не (Параметры.РежимПодбораБезСуммовыхПараметров Или Параметры.СкрыватьКолонкуВидЦены);
		Элементы.КорзинаКонтекстноеМенюЗаполнитьЦеныВыделенныхСтрокПоВидуЦен.Видимость = Не (Параметры.РежимПодбораБезСуммовыхПараметров Или Параметры.СкрыватьКолонкуВидЦены);
		
		Элементы.КорзинаИндексСовместноПродаваемыеТовары.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
		
		Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
		
		Элементы.СтраницаСоздатьНоменклатуру.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
		Элементы.СтраницаСоздатьХарактеристику.Видимость = ПравоДоступа("Добавление", Метаданные.Справочники.ХарактеристикиНоменклатуры);
		
		Форма.ЗапретРедактированияСоставаНабора = Параметры.ЗапретРедактированияСоставаНабора;
		Форма.ЗапретРедактированияЦеныНабора    = Параметры.ЗапретРедактированияЦеныНабора;
		
		Форма.БезОтбораПоВключениюНДСВЦену      = Параметры.БезОтбораПоВключениюНДСВЦену;
		Форма.ЗапретРедактированияСоставаНабора = Параметры.ЗапретРедактированияСоставаНабора;
		Форма.ЗапретРедактированияЦеныНабора    = Параметры.ЗапретРедактированияЦеныНабора;
		Форма.БезОтбораПоИспользоватьПриПродажеВЦену    = БезОтбораПоИспользоватьПриПродажеВЦену;
		
		Форма.РежимПодбораДляДокументовЦенообразования = Параметры.РежимПодбораДляДокументовЦенообразования;
		
		#КонецОбласти
		
	КонецЕсли;
	
#КонецОбласти
	УстановитьЗначенияПоНастройкамФормы(Форма);
	
#Область УстановитьЗначенияПоНастройкамФормыПодбора
	
	Форма.ТолькоВНаличии = Ложь;
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы,  "");
	
	Если Не (Настройки = Неопределено) Тогда
		
		Если Настройки.Свойство("ТолькоВНаличии") Тогда
			Форма.ТолькоВНаличии = Настройки.ТолькоВНаличии И Форма.ОтображатьОстаткиНаСкладах;
		КонецЕсли;
		
		Если Форма.СкрыватьКомандуОстаткиНаСкладах Тогда
			Форма.ТолькоВНаличии = Ложь;
		КонецЕсли; 
		
		// Остатки в форме подбора.
		Если Настройки.Свойство("ОтображатьОстатки") Тогда
			Форма.ОтображатьОстатки = Настройки.ОтображатьОстатки;
			Форма.ОтображатьОстаткиНадпись = ?(Форма.ОтображатьОстатки,
				НСтр("ru = 'Подробная информация об остатках (скрыть)'"),
				НСтр("ru = 'Подробная информация об остатках (показать)'"));
			
			Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки
				И Не (Форма.РежимПодбораБезКоличественныхПараметров
					Или Форма.СкрыватьКомандуОстаткиНаСкладах)
				И Форма.ОтображатьОстаткиНаСкладах
				И (ЭтоФормаПодбораВДокументыЗакупки Или Не ЗначениеЗаполнено(Параметры.НаправлениеДеятельности));
			
			Если ЭтоФормаПодбораВДокументыЗакупки Тогда
				Элементы.ОстаткиТоваровПоставщика.Видимость = Форма.ОтображатьОстатки
					И Не Форма.СкрыватьКомандуОстаткиНаСкладах;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			
			Форма.ПоказыватьПодобранныеТовары = Настройки.ПоказыватьПодобранныеТовары;
			
		КонецЕсли;
		
		Если ЭтоФормаПодбораВДокументыПродажи Тогда
			Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
				Форма.ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
			Иначе
				Форма.ЗапрашиватьКоличество = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
			КонецЕсли;
			
			Если Настройки.Свойство("ЗапрашиватьЦену") Тогда
				Форма.ЗапрашиватьЦену = Настройки.ЗапрашиватьЦену;
			Иначе
				Форма.ЗапрашиватьЦену = Истина;
			КонецЕсли;
		Иначе
			Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
				Форма.ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество;
	Иначе
		Элементы.НеЗапрашиватьКоличество.Пометка = Не Форма.ЗапрашиватьКоличество;
		Элементы.ЗапрашиватьКоличество.Пометка = Форма.ЗапрашиватьКоличество И (Не Форма.ЗапрашиватьЦену Или Форма.РежимПодбораБезСуммовыхПараметров);
		Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество И Форма.ЗапрашиватьЦену;
	КонецЕсли;

#КонецОбласти	

	УстановитьОтборТолькоВНаличии(Форма);

	#Область УстановитьЗаголовкиЭлементовФормыПоПараметрам
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
		
	ТекстЗаголовка = НСтр("ru = 'Цена'");
	
	Если ЗначениеЗаполнено(Форма.Валюта) Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Цена (%1)'"), Форма.Валюта);
	КонецЕсли;
	
	ПолеФормыНоменклатураЦена = Форма.Элементы[ИмяСпискаНоменклатуры].ПодчиненныеЭлементы[ИмяСпискаНоменклатуры+"Цена"]; // ПолеФормы
	ПолеФормыХарактеристикаЦена = Форма.Элементы[ИмяСпискаХарактеристик].ПодчиненныеЭлементы[ИмяСпискаХарактеристик+"Цена"]; // ПолеФормы
	
	ПолеФормыНоменклатураЦена.Заголовок = ТекстЗаголовка;
	ПолеФормыХарактеристикаЦена.Заголовок = ТекстЗаголовка;
	
	Элементы.КорзинаЦена.Заголовок = ТекстЗаголовка;
	ВыбранаГруппаСкладов = Не ПереданСписокСкладов И Справочники.Склады.ЭтоГруппа(Параметры.Склад);
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(ВыбранаГруппаСкладов,
		НСтр("ru = 'Только в наличии на группе складов ""%1""'"),
		?(Не ПереданСписокСкладов И ЗначениеЗаполнено(Параметры.Склад),
			НСтр("ru = 'Только в наличии на складе ""%1""'"), НСтр("ru = 'Только в наличии'"))),
		Параметры.Склад);
	
	Если Параметры.Свойство("Документ") Тогда
		Если ТипЗнч(Параметры.Документ) <> Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
			Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
		КонецЕсли;
	Иначе
		Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
	КонецЕсли;
#КонецОбласти

	УстановитьЭлементыСпискаЗначенийКачества(Форма);
	УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма);
	
#Область УстановитьОтборПоВариантуРасчетаЦенНаборов
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		Если Параметры.ОтборПоВариантуРасчетаЦенНаборов <> Неопределено Тогда
			ОтборПоВариантуРасчетаЦенНаборов = Параметры.ОтборПоВариантуРасчетаЦенНаборов;
			Отбор = Новый СписокЗначений;
			Отбор.ЗагрузитьЗначения(ОтборПоВариантуРасчетаЦенНаборов);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокНоменклатура, "ВариантРасчетаЦеныНабора", Отбор, 
				ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоВариантуРасчетаЦенНаборов", (Отбор.Количество() > 0));
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокХарактеристики, "ВариантРасчетаЦеныНабора", Отбор, 
				ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоВариантуРасчетаЦенНаборов", (Отбор.Количество() > 0));
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти

#Область УстановитьОтборОсобенностьУчета
	Если Параметры.Свойство("ОсобенностьУчета") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Ссылка.ОсобенностьУчета", Параметры.ОсобенностьУчета, 
			ВидСравненияКомпоновкиДанных.ВСписке, "ОтборОсобенностьУчета",ЗначениеЗаполнено(Параметры.ОсобенностьУчета));
	КонецЕсли;

#КонецОбласти

#Область УстановитьОтборОсобенностьУчета

	Если Параметры.Свойство("КоллекцияНоменклатуры") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Ссылка.КоллекцияНоменклатуры", Параметры.КоллекцияНоменклатуры, 
			ВидСравненияКомпоновкиДанных.Равно, "ОтборКоллекцияНоменклатуры",ЗначениеЗаполнено(Параметры.КоллекцияНоменклатуры));
	КонецЕсли;

#КонецОбласти

	Форма.ТекущаяСтрокаНоменклатуры = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
	Форма.ТекущаяСтрокаХарактеристик = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	
	УстановитьТекстыЗапросовСписковФормыПодбора(Форма);

	#Область УстановитьПараметрыСписковФормыПодбора
	
	СписокНоменклатура = Форма.СписокНоменклатура;
	СписокХарактеристики = Форма.СписокХарактеристики;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		СписокНоменклатураПартнера = Форма.СписокНоменклатураПартнера;
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
					
		Если Форма.РежимОтбораПоАссортименту Тогда
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ОбъектПланирования", Форма.ОбъектПланированияАссортимента);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ОбъектПланирования", Форма.ОбъектПланированияАссортимента);
		КонецЕсли;
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "СегментНоменклатуры", Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
		Если Форма.ИспользоватьСоглашенияСКлиентами
			И Не Форма.РежимПодбораБезСоглашенийСКлиентами Тогда
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Соглашение", Форма.Соглашение);
		КонецЕсли;
			
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Валюта", Форма.Валюта);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Дата", Форма.Дата);
		
		Если Форма.ВидыЦен.Количество() = 0 Тогда
			ВидыЦенПараметр = Справочники.ВидыЦен.ПустаяСсылка();
		ИначеЕсли Форма.ВидыЦен.Количество() = 1 Тогда
			ВидыЦенПараметр = Форма.ВидыЦен[0].Значение;
		Иначе
			ВидыЦенПараметр = Форма.ВидыЦен.ВыгрузитьЗначения();
		КонецЕсли;
			
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ВидыЦен", ВидыЦенПараметр);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Назначение", Форма.ОтборПоНазначениюТекущий);
		
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ВидЦенОсновной", Форма.ВидЦенОсновной);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ВидЦенИндивидуальный", Форма.ВидЦенИндивидуальный);
		
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "СегментНоменклатуры", Справочники.СегментыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "НоменклатураСегмента", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
			Если Форма.ИспользоватьСоглашенияСКлиентами
				И Не Форма.РежимПодбораБезСоглашенийСКлиентами Тогда
				ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Соглашение", Форма.Соглашение);
			КонецЕсли;
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Валюта", Форма.Валюта);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Дата", Форма.Дата);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидыЦен", ВидыЦенПараметр);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидЦенОсновной", Форма.ВидЦенОсновной);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидЦенИндивидуальный", Форма.ВидЦенИндивидуальный);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ЦеноваяГруппа", Справочники.ЦеновыеГруппы.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Назначение", Форма.ОтборПоНазначениюТекущий);
			
		КонецЕсли;
		
		Если Не ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Склад", СкладПараметр);
			
			Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
				ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Склад", СкладПараметр);
			КонецЕсли;
			
		КонецЕсли;
				
	ИначеЕсли ЭтоФормаПодбораВДокументыЗакупки Тогда
				
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Дата", Форма.Дата);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Склад", СкладПараметр);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Валюта", Форма.Валюта);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Соглашение", Форма.Соглашение);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ВидЦеныПоставщика", Форма.ВидЦеныПоставщика);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "СегментНоменклатуры", Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
		
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидЦеныПоставщика", Форма.ВидЦеныПоставщика);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "СегментНоменклатуры", Форма.СегментНоменклатуры);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "НоменклатураСегмента", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Соглашение", Форма.Соглашение);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Валюта", Форма.Валюта);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Дата", Форма.Дата);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ЕдиницаИзмерения", Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Склад", СкладПараметр);
			
		КонецЕсли;
		
		Если Форма.ИспользоватьНоменклатуруПартнеров Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатураПартнера, "ВидЦеныПоставщика", Форма.ВидЦеныПоставщика);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатураПартнера, "Соглашение", Форма.Параметры.Соглашение);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатураПартнера, "Валюта", Форма.Параметры.Валюта);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатураПартнера, "Дата", Форма.Параметры.Дата);
			
		КонецЕсли;

	КонецЕсли;

	//++ Локализация
	ИнтеграцияСМаркетплейсамиСерверЛокализация.УстановитьПараметрыДинамическогоСписка(Форма, СписокНоменклатура, СписокХарактеристики);
	//-- Локализация

#КонецОбласти
	
	НастройкиФормыПриОткрытии = НастройкиФормыПодбора(Форма);
	СтруктураСохраняемыхНастроекФормы = Новый Структура("ТребуетсяСохранение");
	Для Каждого Настройка Из НастройкиФормыПриОткрытии Цикл
		Если Не ТипЗнч(Настройка.Значение) = Тип("ТаблицаЗначений") Тогда
			СтруктураСохраняемыхНастроекФормы.Вставить(Настройка.Ключ);
		КонецЕсли;
	КонецЦикла;
	Форма.НастройкиФормыПриОткрытии = СтруктураСохраняемыхНастроекФормы;
	
	ПодборТоваровКлиентСервер.УстановитьТекущиеСтраницыПоВариантуПоиска(Форма);
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ИзменениеТекстаЗапросаСпискаДляТекущегоЯзыка(Форма, "СписокНоменклатура");
	МультиязычностьСервер.ИзменениеТекстаЗапросаСпискаДляТекущегоЯзыка(Форма, "СписокХарактеристики");
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецОбласти

#Область УправлениеВидимостью

// Устанавливает видимость колонок связанных с отображением доступных остатков.
// Используется в форме подбора в документ продажи.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьВидимостьДоступныхОстатковПодбораВДокументПродажи(Форма) Экспорт
	
	ВидимостьОстатков = Форма.ОтображатьОстаткиНаСкладах И Не ЗначениеЗаполнено(Форма.ОтборПоНазначениюТекущий);
	Форма.Элементы.СписокСтандартныйПоискНоменклатураДоступно.Видимость = ВидимостьОстатков;
	Форма.Элементы.СписокРасширенныйПоискНоменклатураДоступно.Видимость = ВидимостьОстатков;
	Форма.Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Видимость = ВидимостьОстатков;
	Форма.Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Видимость = ВидимостьОстатков;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентские функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентские функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура СписокКачестваПометкаПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	УстановитьОтборПоКачествуНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентские функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура НоменклатураИсходногоКачестваПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЭлементыСпискаЗначенийКачества(Форма);
	УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	УстановитьПометкуГрадацииКачества(Форма);
	УстановитьОтборПоКачествуНоменклатуры(Форма);
	
КонецПроцедуры

// Заполняет дерево отборов характеристик по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовХарактеристик(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Истина);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает текущей страницу со списком характеристик.
// Используется при стандартном сценарии - когда выполняется выбор строки
// списка номенклатуры, и если по номенклатуре ведется учет характеристик,
// то выполняется переход к списку характеристик.
//
// Используется в формах подборов (в документах продажи, закупки).
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ПерейтиКСпискуХарактеристик(Форма) Экспорт
	
	// Очистить параметры новой номенклатуры, чтобы при добавлении новой характеристики
	// было можно понять, для какой номенклатуры добавляется характеристика.
	Форма.НоваяНоменклатура = Неопределено;
	
	ПриПереходеКСпискуХарактеристик(Форма, Форма.ТекущаяСтрокаНоменклатуры)
	
КонецПроцедуры

// Устанавливает отбор по владельцу характеристик. Используется в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоВладельцуХарактеристик(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список, "Владелец", Форма.ВладелецХарактеристик, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоВладельцуХарактеристик", Истина);
	
КонецПроцедуры

// Вызывается при нажатии кнопки команды СПодобраннойНоменклатуройСовместноПродается из форм
// подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма помощника продаж.
//
Процедура ПриУстановкеОтбораПоНоменклатуреПродаваемойСовместно(Форма) Экспорт
		
	УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;
		
КонецПроцедуры

// Устанавливает отбор на список номенклатуры по товарам продаваемым совместно
// с заданной номенклатурой.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма) Экспорт
	
	Форма.ИспользоватьФильтры = Истина;
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	Если Форма.ВариантНавигации <> Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
		ВариантНавигацииДоИзменения = Форма.ВариантНавигации;
	КонецЕсли;
	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
	УстановитьСтраницуВариантаНавигации(Форма, ВариантНавигацииДоИзменения);
	
	// Установить фильтр по номенклатуре, продаваемой совместно.
	Форма.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.Очистить();
	
	Корзина = Форма.Объект.Корзина;
	
	Отбор = Новый Структура("Номенклатура, Характеристика");
	
	Для Каждого СтрокаТаблицыКорзина Из Корзина Цикл
		
		Если СтрокаТаблицыКорзина.ИндексСовместноПродаваемыеТовары = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицыКорзина);
			МассивСтрок = Форма.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.НайтиСтроки(Отбор);
			
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = Форма.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыКорзина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(
			Корзина.Выгрузить(,"Номенклатура, Характеристика"), 
			Форма.ВариантАнализаНоменклатурыПродаваемойСовместно);
	
	Форма.ТаблицаНоменклатураПродаваемаяСовместно.Загрузить(Товары);
	
	СовместноПродаваемыеТовары = Товары.ВыгрузитьКолонку("Номенклатура");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Номенклатура", СовместноПродаваемыеТовары, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ПоНоменклатуреПродаваемойСовместно", Истина);
	
КонецПроцедуры

// Устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреИсходногоКачества(Форма) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыДругогоКачества.НоменклатураБрак
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ГруппаОтборПоТоварамИсходногоКачества = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ГруппаОтборПоТоварамИсходногоКачества",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	МассивТоваров = Таблица.ВыгрузитьКолонку("НоменклатураБрак");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборПоТоварамИсходногоКачества, "Ссылка", МассивТоваров, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ГруппаОтборПоТоварамИсходногоКачества", Истина);
	
КонецПроцедуры

// Устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоКачествуНоменклатуры(Форма) Экспорт
	
	МассивКачества = Новый Массив;
	
	Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивКачества.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивКачества.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокНоменклатура, "Качество", МассивКачества, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет отбор в указанную коллекцию области отбора.
//
// Параметры:
//	ОбластьОтбора - ОтборКомпоновкиДанных - отбор динамического списка,
//	ЛевоеЗначение - Строка - путь к данным поля отбора,
//	ПравоеЗначение - Произвольный - значение отбора,
//	ВидОтбора - ВидСравненияКомпоновкиДанных - вид сравнения,
//	Представление - Строка - представление элемента отбора.
//
Процедура ДобавитьЭлементОтбора(ОбластьОтбора, ЛевоеЗначение, ПравоеЗначение, ВидОтбора, Представление = "") Экспорт
	
	ЭлементОтбора                   = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ПравоеЗначение    = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ВидСравнения      = ВидОтбора;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементОтбора.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт

	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		
		УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
		
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Если (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
			
			Форма.ВидНоменклатурыДоИзменения = Неопределено;
			
			Если Форма.ИспользоватьФильтры Тогда
				УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
			Иначе
				УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
			КонецЕсли;
			
			ПриИзмененииВидаНоменклатуры(Форма);
			
		Иначе
			
			Если Форма.ИспользоватьФильтры Тогда
				
				Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
					
					УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
					ПодборТоваровКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
					
				ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
					
					УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
					
				ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
					
					УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
					УстановитьОтборПоКачествуНоменклатуры(Форма);
					
				КонецЕсли;
				
			Иначе
				
				ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
				УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
				
				Если Не ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) 
					Или Не Форма.ВыборТовараДругогоКачества Тогда
					УдалитьОтборПоКачествуНоменклатуры(Форма);
				КонецЕсли;
				
				УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
				
				Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
					ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
					Форма.СписокНоменклатура,,"ПоНоменклатуреПродаваемойСовместно");
				КонецЕсли;
				
			КонецЕсли;
			
			ПерейтиКСпискуНоменклатуры(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении варианта навигации.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииВариантаНавигации(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	УстановитьСтраницуВариантаНавигации(Форма);
	ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		
		ПодборТоваровКлиентСервер.УстановитьОтборПоИерархииНоменклатуры(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам 
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам
			Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
		
		УстановитьОтборПоНоменклатуреПродаваемойСовместно(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
		
		УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
		УстановитьОтборПоКачествуНоменклатуры(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из форм подбора при изменении вида номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка, форма выбора.
//
Процедура ПриИзмененииВидаНоменклатуры(Форма) Экспорт
	
	Если Форма.ВидНоменклатуры = Форма.ВидНоменклатурыДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если Не ЗначениеЗаполнено(Форма.ВидНоменклатуры)
		Или Не Форма.ИспользоватьФильтры Тогда
		
		ОчиститьДеревоОтборов(Форма);
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоВидуНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Если ЭтоФормаПодбора
			Или	ЭтоФормаСпискаНоменклатуры
			Или ЭтоФормаВыбораНоменклатуры Тогда
			
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			
		Иначе
			
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			
		КонецЕсли;
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку в таблицу параметров отбора, используется при работе варианта навигации
// по товарам "альтернативного" качества.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка, форма выбора
//
Процедура УстановитьПараметрыДереваОтбораКачествоНовый(Форма) Экспорт
	
	СтрокаТаблицыПараметровОтбора = Форма.ТаблицаПараметровОтбора.Добавить();
	
	СтрокаТаблицыПараметровОтбора.ИмяРеквизита = "Качество";
	СтрокаТаблицыПараметровОтбора.ЗначениеОтбора = Перечисления.ГрадацииКачества.Новый;
	СтрокаТаблицыПараметровОтбора.Представление = "Новый";
	СтрокаТаблицыПараметровОтбора.ФиксированноеЗначение = Ложь;
	СтрокаТаблицыПараметровОтбора.Отбор = Истина;
	
КонецПроцедуры

// Вызывается из форм подборов при изменении значения сегмента номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииВидаЦеныПоставщика(Форма) Экспорт
	
	Если Не ВидЦеныПоставщикаИзменился(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоВидЦеныПоставщика(Форма);
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦенПоставщика(Форма);
	
КонецПроцедуры

// Для сброса флажков для свойств номенклатуры в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура СброситьОтборыПоСвойствам(Форма) Экспорт
	
	Для Каждого ОтборПервыйУровень Из Форма.ДеревоОтборов.ПолучитьЭлементы() Цикл
		
		Если ОтборПервыйУровень.Отбор Тогда
			
			ОтборПервыйУровень.Отбор = Ложь;
			
			Для Каждого ОтборВторойУровень Из ОтборПервыйУровень.ПолучитьЭлементы() Цикл
				ОтборВторойУровень.Отбор = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ТаблицаПараметровОтбора.Очистить();	
	
	УстановитьНеобходимостьСохраненияНастроек(Форма);
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при выполнении команды отображения товаров другого качества
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора
//
Процедура УстановитьОтборПоНоменклатуреДругогоКачества(Форма) Экспорт
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	ТаблицаФормыНоменклатура = Форма.Элементы[ИмяСпискаНоменклатуры]; // ТаблицаФормы
	СтрокаТаблицыНоменклатуры = ТаблицаФормыНоменклатура.ТекущаяСтрока;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьФильтры = Истина;
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	ВариантНавигацииДоИзменения = Форма.ВариантНавигации;

	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества;
	Форма.НоменклатураИсходногоКачества = СтрокаТаблицыНоменклатуры.Ссылка;

	УстановитьСтраницуВариантаНавигации(Форма, ВариантНавигацииДоИзменения);
	ПодборТоваровКлиентСервер.УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
	НоменклатураИсходногоКачестваПриИзменении(Форма);
	ПерейтиКСпискуНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении значения сегмента номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииСегментаНоменклатуры(Форма) Экспорт
	
	Если Не СегментНоменклатурыИзменился(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоСегментуНоменклатуры(Форма);
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(Форма);
	
КонецПроцедуры

// Вызывается при выполнении команды отображения товаров с аналогичными свойствами
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура ПриИзмененииОтображенияНоменклатураСАналогичнымиСвойствами(Форма) Экспорт
	
	ТаблицаФормыНоменклатура = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)]; // ТаблицаФормы
	
	ТекущаяСтрока = ТаблицаФормыНоменклатура.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтфильтроватьПоАналогичнымСвойствам(Форма, ТекущаяСтрока.Ссылка);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
		
		Форма.Элементы.ВидыНоменклатуры.ТекущаяСтрока = Форма.ВидНоменклатуры;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыПоНаличиюПоЦенам

// Устанавливает отбор "Только в наличии" на список номенклатуры
// и характеристик в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборТолькоВНаличии(Форма) Экспорт
	
	// Для списка номенклатуры.
	ГруппаОтбораТолькоВНаличииНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ГруппаТолькоВНаличии", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбораТолькоВНаличииНоменклатура,
		"ВНаличииВБазовыхЕдиницах", 0, ВидСравненияКомпоновкиДанных.Больше,,Форма.ТолькоВНаличии);
		
	// Для списка характеристик.
	ГруппаОтбораТолькоВНаличииХарактеристики = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
		"ГруппаТолькоВНаличии", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбораТолькоВНаличииХарактеристики,
		"ВНаличииВБазовыхЕдиницах", 0, ВидСравненияКомпоновкиДанных.Больше,,Форма.ТолькоВНаличии);
	
	УстановитьАктивныйСписокНаФорме(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыВспомогательные

// Возвращает массив свойств по которым устанавливается отбор при отображении
//  списка товаров с аналогичными свойствами в формах подборов.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура - номенклатура для которой формируется массив свойств.
// 
// Возвращаемое значение:
//  Массив - Массив свойств и значений свойств элемента номенклатуры по которым нужно
//  будет отобрать товары.
//
Функция СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура) Экспорт
	
	ДополнительныеРеквизиты = Новый Массив;
	Свойства = Новый Массив;
	
	// Получить имена и значения реквизитов которые используются для отбора.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита   КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство       КАК Свойство,
	|	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
	|ГДЕ
	|	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры"));
	
	КоличествоПолей = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ *";
	ТекстЗапроса = Лев(ТекстЗапроса, 7);
	
	РеквизитыБыстрогоОтбораНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из РеквизитыБыстрогоОтбораНоменклатуры Цикл
		
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			ДополнительныеРеквизиты.Добавить(СтрокаТЧ.Свойство);
		Иначе
			
			КоличествоПолей = КоличествоПолей + 1;
			
			Если КоличествоПолей = 1 Тогда
				ТекстЗапроса = ТекстЗапроса + " " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			Иначе
				ТекстЗапроса = ТекстЗапроса + ", " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПолей > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса +" " + "Из Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка = &Номенклатура";
		
		Запрос = Новый Запрос(
		ТекстЗапроса +
		";
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство           КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение           КАК Значение,
		|	НоменклатураДополнительныеРеквизиты.Свойство.Заголовок КАК Представление
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		Результат = МассивРезультатов[0]; // РезультатЗапроса
		
		Выборка = Результат.Выбрать(); // обход реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из Результат.Колонки Цикл
				
				НоваяСтрока = Новый Структура("ИмяРеквизита, Значение, Представление");
				
				НоваяСтрока.ИмяРеквизита = Колонка.Имя;
				НоваяСтрока.Значение     = Выборка[Колонка.Имя];
				
				Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(Колонка.Имя);
				
				НоваяСтрока.Представление = Реквизит.Синоним;
				
				Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение реквизита элемента номенклатуры
				
			КонецЦикла;
			
		КонецЦикла;
		
		Результат = МассивРезультатов[1]; // РезультатЗапроса
		Выборка = Результат.Выбрать(); // обход дополнительных реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.Представление) Тогда
				НоваяСтрока.Представление = Строка(Выборка.Свойство);
			КонецЕсли;
			
			Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение доп.реквизита вида номенклатуры
			
		КонецЦикла;
		
	Иначе
		
		// В том случае, если реквизиты вида номенклатуры не включены в панель быстрого отбора,
		// то в выходной массив добавляются только значения доп.реквизитов вида номенклатуры.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство           КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение           КАК Значение,
		|	НоменклатураДополнительныеРеквизиты.Свойство.Заголовок КАК Представление
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если Не ЗначениеЗаполнено(Выборка.Представление) Тогда
				НоваяСтрока.Представление = Строка(Выборка.Свойство);
			КонецЕсли;
			
			Свойства.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Устанавливает отбор на список номенклатуры по аналогичным свойствам вида номенклатуры переданного товара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - товар по значениям свойств которого необходимо установить отбор списка номенклатуры.
//
Процедура ОтфильтроватьПоАналогичнымСвойствам(Форма, Номенклатура) Экспорт
	
	// Включить использование фильтров.
	Форма.ИспользоватьФильтры = Истина;
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	// Установить вариант навигации - "по свойствам".
	Если Не (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
		Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	КонецЕсли;
	
	УстановитьСтраницуВариантаНавигации(Форма);
	
	// Установить вид номенклатуры и заполнить дерево отборов.
	РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "Наименование, ВидНоменклатуры");
	Форма.ВидНоменклатуры = РеквизитыНоменклатуры.ВидНоменклатуры;
	Форма.ВидНоменклатурыДоИзменения = РеквизитыНоменклатуры.ВидНоменклатуры;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	
	// Получить список свойств и значений вида номенклатуры текущего товара..
	СвойстваДляПодбораТоваровСАналогичнымиСвойствами = СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура);
	
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	ТаблицаПараметровОтбора.Очистить();
	
	Если СвойстваДляПодбораТоваровСАналогичнымиСвойствами.Количество() = 0 Тогда

		ТекстСообщения = НСтр("ru = 'У номенклатуры ""%1"" не указаны значения реквизитов для быстрого отбора в списках. Установка фильтра отменена.'");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ТекстСообщения, РеквизитыНоменклатуры.Наименование));

	Иначе

		ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");

		// Пройти по полученному списку свойств, проставить флажки использования.
		Для Каждого ДополнительноеСвойство Из СвойстваДляПодбораТоваровСАналогичнымиСвойствами Цикл
			
			Для Каждого Свойство Из ДеревоОтборов.Строки Цикл
				
				Если Не (ДополнительноеСвойство.Представление = Свойство.Представление) Тогда
					Продолжить;
				КонецЕсли;
				
				// Включить использование свойства в отборе, если значение дерева отбора аналогично 
				// значению списка свойств вида текущей номенклатуры.
				Если Свойство.ЗначениеОтбора = ДополнительноеСвойство.Значение Тогда
					Свойство.Отбор = Истина;
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Свойство);
				Иначе
					
					Если Свойство.Строки.Количество() > 0 Тогда
					
						Для Каждого ЗначениеСвойства Из Свойство.Строки Цикл
							
							ЗначениеСвойства.Отбор = (ЗначениеСвойства.ЗначениеОтбора = ДополнительноеСвойство.Значение);
							
							Если ЗначениеСвойства.Отбор Тогда
								Свойство.Отбор = Истина;
								
								НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеСвойства);
							КонецЕсли;
							
						КонецЦикла;
						
					Иначе
							
						Свойство.ЗначениеОтбора = ДополнительноеСвойство.Значение;
						Свойство.ПредставлениеОтбора = Свойство.ЗначениеОтбора;
						Свойство.Отбор = Истина;
						НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Свойство);
							
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;

		Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");

	КонецЕсли;

	Форма.ТаблицаПараметровОтбора.Загрузить(ТаблицаПараметровОтбора);
	
	УстановитьНеобходимостьСохраненияНастроек(Форма);
	
	// Флажки расставлены, теперь применить отборы к списку номенклатуры.
	УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискНаФормахПодборов

// Выполняет поиск номенклатуры по строке поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Булево - Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискНоменклатуры(Форма) Экспорт
	
	ПоискВыполнен = ВыполнитьПоиск(Форма, "Номенклатура");
	Возврат ПоискВыполнен;
	
КонецФункции

// Выполняет поиск характеристик по строке поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
// Возвращаемое значение:
//	Булево - Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискХарактеристик(Форма) Экспорт
	
	ПоискВыполнен = ВыполнитьПоиск(Форма, "ХарактеристикиНоменклатуры");
	Возврат ПоискВыполнен;
	
КонецФункции

// Выполняет поиск номенклатуры партнера по строке поиска.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	Булево - Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискНоменклатурыПартнера(Форма) Экспорт
	
	ПоискВыполнен = ВыполнитьПоиск(Форма, "НоменклатураКонтрагентов");
	Возврат ПоискВыполнен;
	
КонецФункции

Функция ВыполнитьПоиск(Форма, ИмяСпискаПоиска)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ТочноеСоотвествие");
	ПараметрыПоиска.Вставить("СтрокаПоиска");
	ПараметрыПоиска.Вставить("ОбластиПоиска");
	ПараметрыПоиска.Вставить("ИмяРеквизитаПоискНеудачный");
	ПараметрыПоиска.Вставить("ИмяРеквизитаСписок");
	ПараметрыПоиска.Вставить("ИмяСпискаПоиска", ИмяСпискаПоиска);
	
	Если ИмяСпискаПоиска = "Номенклатура" Тогда
		ПараметрыПоиска.ТочноеСоотвествие = Форма.НайтиНоменклатуруПоТочномуСоответствию;
		ПараметрыПоиска.СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаНоменклатура,
																Форма.ИспользоватьПолнотекстовыйПоиск,
																ПараметрыПоиска.ТочноеСоотвествие);
		ПараметрыПоиска.ИмяРеквизитаПоискНеудачный = "ПоискНоменклатурыНеУдачный";
		ПараметрыПоиска.ИмяРеквизитаСписок = "СписокНоменклатура";
		
		Если Форма.ИспользоватьФильтры Тогда
			ДополнительныеУсловия   = Новый Массив;
			ДополнительныеПараметры = Новый Соответствие;
			
			Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
				ДополнительныеУсловия.Добавить("(СправочникНоменклатура.ВидНоменклатуры = &ОтборПоВидуНоменклатуры)");
				ДополнительныеПараметры.Вставить("ОтборПоВидуНоменклатуры", Форма.ВидНоменклатуры);
				
			ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
				ДополнительныеУсловия.Добавить("(СправочникНоменклатура.Родитель = &ОтборПоИерархииНоменклатуры)");
				ДополнительныеПараметры.Вставить("ОтборПоИерархииНоменклатуры", Форма.ТекущаяИерархияНоменклатуры);
				
			ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
				Товары = НоменклатураПродаваемаяСовместно.ПолучитьДанныеОНоменклатуреПродаваемойСовместно(
							Форма.Объект.Корзина.Выгрузить(,"Номенклатура, Характеристика"), 
							Форма.ВариантАнализаНоменклатурыПродаваемойСовместно);

				ДополнительныеУсловия.Добавить("(СправочникНоменклатура.Ссылка В (&ОтборПоНоменклатуреПродаваемойСовместно))");
				ДополнительныеПараметры.Вставить("ОтборПоНоменклатуреПродаваемойСовместно", Товары.ВыгрузитьКолонку("Номенклатура"));
				
			ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
				Запрос = Новый Запрос;	
				Запрос.Текст = "ВЫБРАТЬ
							   |	ТоварыДругогоКачества.НоменклатураБрак
							   |ИЗ
							   |	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
							   |ГДЕ
							   |	ТоварыДругогоКачества.Номенклатура = &Номенклатура";
				
				Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
				Таблица = Запрос.Выполнить().Выгрузить();

				ДополнительныеУсловия.Добавить("(СправочникНоменклатура.Ссылка В (&ОтборПоТоварамДругогоКачества))");
				ДополнительныеПараметры.Вставить("ОтборПоТоварамДругогоКачества", Таблица.ВыгрузитьКолонку("НоменклатураБрак"));
				
				МассивКачества = Новый Массив;					
				Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
					Если ЭлементСписка.Пометка Тогда
						МассивКачества.Добавить(ЭлементСписка.Значение);
					КонецЕсли;
				КонецЦикла;
				
				Если МассивКачества.Количество() > 0 Тогда
					ДополнительныеУсловия.Добавить("(СправочникНоменклатура.Качество В (&ОтборПоТоварамИсходногоКачества))");
					ДополнительныеПараметры.Вставить("ОтборПоТоварамИсходногоКачества", МассивКачества);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
				ДополнительныеУсловия.Добавить("(СправочникНоменклатура.Ссылка В
											   |	(ВЫБРАТЬ
											   |		Сегменты.Номенклатура
											   |	ИЗ
											   |		РегистрСведений.НоменклатураСегмента КАК Сегменты
											   |	ГДЕ
											   |		Сегменты.Сегмент = &ОтборПоСегментуНоменклатуры))");
				ДополнительныеПараметры.Вставить("ОтборПоСегментуНоменклатуры", Форма.СегментНоменклатуры);
	        КонецЕсли;
			
			Если ДополнительныеУсловия.Количество() > 0 Тогда
				ПараметрыПоиска.Вставить("ДополнительныеУсловия",   ДополнительныеУсловия);
				ПараметрыПоиска.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСпискаПоиска = "ХарактеристикиНоменклатуры" Тогда
		ПараметрыПоиска.ТочноеСоотвествие = Форма.НайтиХарактеристикиПоТочномуСоответствию;
		ПараметрыПоиска.СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаХарактеристики,
																Форма.ИспользоватьПолнотекстовыйПоиск,
																ПараметрыПоиска.ТочноеСоотвествие);
		ПараметрыПоиска.ИмяРеквизитаПоискНеудачный = "ПоискХарактеристикНеУдачный";
		ПараметрыПоиска.ИмяРеквизитаСписок = "СписокХарактеристики";
		
	ИначеЕсли ИмяСпискаПоиска = "НоменклатураКонтрагентов" Тогда	
		ПараметрыПоиска.ТочноеСоотвествие = Форма.НайтиНоменклатуруПартнераПоТочномуСоответствию;
		ПараметрыПоиска.СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаНоменклатураПартнера,
																Форма.ИспользоватьПолнотекстовыйПоиск,
																ПараметрыПоиска.ТочноеСоотвествие);
		ПараметрыПоиска.ИмяРеквизитаПоискНеудачный = "ПоискНоменклатурыПартнераНеУдачный";
		ПараметрыПоиска.ИмяРеквизитаСписок = "СписокНоменклатураПартнера";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'Неизвестное значение параметра %1'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, "ИмяСпискаПоиска");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ПараметрыПоиска.ОбластиПоиска = ОписанияОбластейПоиска(Форма, ПараметрыПоиска);
	
	ПоискВыполнен = Ложь;
	
	Форма[ПараметрыПоиска.ИмяРеквизитаПоискНеудачный] = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	Если ЗначениеЗаполнено(ПараметрыПоиска.СтрокаПоиска) Тогда
		
		Если Не Форма.ИспользоватьПолнотекстовыйПоиск 
			Или ПараметрыПоиска.ТочноеСоотвествие Тогда
			РезультатПоиска = РезультатНеполнотекстовогоПоиска(Форма, ПараметрыПоиска);
		Иначе
			РезультатПоиска = РезультатПолнотекстовогоПоиска(Форма, ПараметрыПоиска);
		КонецЕсли;
		
		Если ПараметрыПоиска.ИмяСпискаПоиска = "Номенклатура" Тогда 
			ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
		КонецЕсли;
		
		ПоискВыполнен = Истина;
	Иначе
		РезультатПоиска = РезультатыПоиска(ПараметрыПоиска.ОбластиПоиска);
	КонецЕсли;
	
	Форма[ПараметрыПоиска.ИмяРеквизитаПоискНеудачный] = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	Если ПоискВыполнен Тогда
		ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
			ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма[ПараметрыПоиска.ИмяРеквизитаСписок]).Элементы,
			РезультатПоиска[ИмяСпискаПоиска], 
			Истина);
	Иначе
		ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
			ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма[ПараметрыПоиска.ИмяРеквизитаСписок]).Элементы,
			Новый СписокЗначений,
			Ложь);
	КонецЕсли;
	
	Если ПараметрыПоиска.ИмяСпискаПоиска = "Номенклатура" Тогда
		Форма.ЕстьФильтрПоПоискуНоменклатуры = ПоискВыполнен;
		Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
			ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(Форма);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоискВыполнен;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Сохраняет значения реквизитов на форме в хранилище общих настроек.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора.
//
Процедура СохранитьНастройкиФормы(Форма) Экспорт
	
	НастройкиФормы = НастройкиФормы(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормы);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	СохранитьСпискиВыбора(Форма);
	
КонецПроцедуры

// Сохраняет значения реквизитов на форме подбора в хранилище общих настроек.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура СохранитьНастройкиФормыПодбора(Форма) Экспорт
	
	НастройкиФормыПодбора = НастройкиФормыПодбора(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормыПодбора);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОповещенийИзПомощниковДобавленияНовойНоменклатуры
// и новой характеристики.

// Вызывается при обработке оповещения создания новой номенклатуры из помощника
// добавления новой номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - источник события.
//
Процедура ПриЗаписиНовойНоменклатуры(Форма, Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФормыНоменклатура = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)]; // ТаблицаФормы
	ТаблицаФормыНоменклатура.ТекущаяСтрока = Номенклатура;
	
	ЗаполнитьПараметрыНовойНоменклатуры(Форма, Номенклатура);
	
	СоответствуетОтборуПоТипуНоменклатуры = НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма);
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры 
		И Форма.НоваяНоменклатура.ХарактеристикиИспользуются Тогда
		
		Если СоответствуетОтборуПоТипуНоменклатуры Тогда
			ПерейтиКСпискуХарактеристикНовойНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Форма.ТоварДляДобавленияВКорзину = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяНоменклатура);
		ЗаполнитьСкладТовараДляДобавленияВКорзину(Форма);
		
		Форма.ТоварДляДобавленияВКорзину.КоличествоУпаковок = 1;
		
		Если Не СоответствуетОтборуПоТипуНоменклатуры Тогда
			Форма.ТоварДляДобавленияВКорзину = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при обработке оповещения создания новой характеристики из помощника
// добавления новой характеристики.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - источник события.
//
Процедура ПриЗаписиНовойХарактеристики(Форма, Характеристика) Экспорт
	
	Если Не ЗначениеЗаполнено(Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФормыХарактеристика = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)]; // ТаблицаФормы
	ТаблицаФормыХарактеристика.ТекущаяСтрока = Характеристика;
	
	ЗаполнитьПараметрыНовойХарактеристики(Форма, Характеристика);
	
	Форма.ТоварДляДобавленияВКорзину = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	ЗаполнитьЗначенияСвойств(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяХарактеристика);
	ЗаполнитьСвойстваТовараДляДобавленияВКорзинуПоТипуНоменклатуры(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяХарактеристика.ТипНоменклатуры);
	ЗаполнитьСкладТовараДляДобавленияВКорзину(Форма);
	
	Форма.ТоварДляДобавленияВКорзину.КоличествоУпаковок = 1;
	
	// Проверить, если новый товар не соответствует отбору по типу номенклатуры, то не добавлять его в корзину.
	Если Не НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма) Тогда
		Форма.ТоварДляДобавленияВКорзину = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Выполняет попытку загрузить настройки из общего хранилища настроек
// по имени ключа объекта. Если настройки в общем хранилище есть, значит форма
// уже открывалась, если нет, значит это первое открытие формы.
//
// Параметры:
//	КлючОбъекта - Строка - ключ объекта настроек формы.
//
// Возвращаемое значение:
//	Булево - Истина - признак первого открытия формы.
//
Функция ПервоеОткрытиеФормы(КлючОбъекта) Экспорт
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, "");
	
	Если НастройкиФормы = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру параметров для создания новой номенклатуры из форм подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
// Возвращаемое значение:
//	Структура - параметры создания новой номенклатуры из форм подборов:
//		* Родитель					- СправочникСсылка.Номенклатура		- родитель новой номенклатуры;
//		* ВидНоменклатуры			- СправочникСсылка.ВидыНоменклатуры	- вид номенклатуры новой номенклатуры;
//		* АдресТаблицыПараметров	- Строка							- адрес таблицы параметров во временном хранилище;
//		* АдресТаблицыСопоставления	- Строка							- адрес таблицы сопоставления во временном хранилище.
//
Функция ПараметрыСозданияНовойНоменклатуры(Форма) Экспорт
	
	ПараметрыСозданияВФорму = Новый Структура("Родитель, ВидНоменклатуры, АдресТаблицыПараметров, АдресТаблицыСопоставления");
	
	Если Форма.ИспользоватьФильтры Тогда
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
			
			ПараметрыСозданияВФорму.Родитель = ?(ЗначениеЗаполнено(Форма.ТекущаяИерархияНоменклатуры), Форма.ТекущаяИерархияНоменклатуры, Справочники.Номенклатура.ПустаяСсылка());
			
		ИначеЕсли (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
					Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам)Тогда
			
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыСозданияВФорму.ВидНоменклатуры = Форма.ВидНоменклатуры;
				ПараметрыСозданияВФорму.АдресТаблицыПараметров = АдресТаблицыПараметровДереваОтборов(Форма);
				ПараметрыСозданияВФорму.АдресТаблицыСопоставления = АдресТаблицыСопоставленияДереваОтборов(Форма)
			КонецЕсли;
			
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыСозданияВФорму.ВидНоменклатуры = Форма.ВидНоменклатуры;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыСозданияВФорму;
	
КонецФункции

// Возвращает структуру параметров для создания новой характеристики из форм подборов.
//
// Параметры:
//	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
//
// Возвращаемое значение:
//	Структура - параметры создания новой номенклатуры из форм подборов:
//		* Владелец - СправочникСсылка.Номенклатура, СправочникСсылка.ВидыНоменклатуры - родитель новой характеристики;
//		* ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры	- вид номенклатуры новой характеристики;
//		* АдресТаблицы - Строка - адрес таблицы во временном хранилище.
//
Функция ПараметрыСозданияНовойХарактеристики(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Владелец, ВидНоменклатуры, АдресТаблицыПараметров");
	
	// Параметры создания новой характеристики можно получить из параметров
	// динамического списка характеристик, т.к. в общем случае отбор может быть
	// наложен как по номенклатуре отображенной в списке номенклатуры,
	// так и по новой номенклатуре, которая в списке не отобразилась.
	
	ПараметрыСпискаХарактеристик = Форма.СписокХарактеристики.Параметры.Элементы;
	
	// ... получить значение параметра номенклатуры.
	Параметр = ПараметрыСпискаХарактеристик.Найти("Номенклатура");
	
	Если Не (Параметр = Неопределено) Тогда
		ПараметрыФормы.Владелец = ВладелецХарактеристикНоменклатуры(Параметр.Значение);
	КонецЕсли;
	
	// ... получить значение параметра вида номенклатуры.
	Параметр = ПараметрыСпискаХарактеристик.Найти("ВидНоменклатуры");
	
	Если Не (Параметр = Неопределено) Тогда
		ПараметрыФормы.ВидНоменклатуры = Параметр.Значение;
	КонецЕсли;
	
	Если Форма.ИспользоватьФильтры Тогда
		Если (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам)Тогда
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыФормы.АдресТаблицыПараметров = АдресТаблицыПараметровДереваОтборов(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ФормированиеТекстовЗапросовДинамическихСписковНаФормахПодборов

// Возвращает текст запроса для получения информации о цене продажи товара.
//
// Параметры:
//	СоставРазделовЗапроса - Массив, Неопределено - переменная в которую записывается массив строк, состав разделов текста запроса.
//
// Возвращаемое значение:
//	Строка - текст запроса для получения информации о цене продажи товара.
//
Функция ТекстЗапросаЦенаПродажиТовара(СоставРазделовЗапроса) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив;
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("ЦенаПродажиТовара");
	
	Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА 1
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА 2
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА 4
	|	КОНЕЦ КАК Описание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА СоглашениеТовары.Упаковка
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
	|	КОНЕЦ КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК Коэффициент,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА СоглашениеТовары.Цена
	|			КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|							ТОГДА СоглашениеТовары.ВидЦены
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеШапка.ВидЦен
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
	|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
	|			ТОГДА СоглашениеТовары.СрокПоставки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
	|					ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
	|				ИНАЧЕ СоглашениеШапка.СрокПоставки
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокПоставки
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И (СоглашениеТовары.Номенклатура = &Номенклатура)
	|			И (СоглашениеТовары.Характеристика = &Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = &Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
	|			И (СоглашениеЦеновыеГруппы.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|				ВидЦены В (&ВидыЦен)
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.ВидЦены = ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|					ТОГДА СоглашениеТовары.ВидЦены
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеШапка.ВидЦен
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
	|			БазоваяВалюта В
	|			(ВЫБРАТЬ
	|				БазоваяВалютаПоУмолчанию.Значение
	|			ИЗ
	|				Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
	|			Валюта = &Валюта
	|			И БазоваяВалюта В
	|			(ВЫБРАТЬ
	|				БазоваяВалютаПоУмолчанию.Значение
	|			ИЗ
	|				Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение";
	
	Текст = СтрЗаменить(Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
		
	Возврат Текст;
	
КонецФункции

// Возвращает текст запроса для получения информации о цене закупки товара.
//
// Параметры:
//	СоставРазделовЗапроса - Массив, Неопределено - переменная в которую записывается массив строк, состав разделов текста запроса.
//
// Возвращаемое значение:
//	Строка - текст запроса для получения информации о цене закупки товара.
//
Функция ТекстЗапросаЦенаЗакупкиТовара(СоставРазделовЗапроса) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив;
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("ЦенаЗакупкиТовара");
	
	Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК Коэффициент,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашениеШапка
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				&ЦеныНоменклатурыПоставщиковСрезПоследнихНаДату,
	|				Партнер = ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСПоставщиками).Партнер
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика) КАК ЦеныНоменклатурыПоставщиков
	|		ПО (СоглашениеШапка.ВидЦеныПоставщика = ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
	|			БазоваяВалюта В
	|			(ВЫБРАТЬ
	|				БазоваяВалютаПоУмолчанию.Значение
	|			ИЗ
	|				Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
	|			Валюта = &Валюта
	|			И БазоваяВалюта В
	|			(ВЫБРАТЬ
	|				БазоваяВалютаПоУмолчанию.Значение
	|			ИЗ
	|				Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|	И СправочникНоменклатура.Ссылка = &Номенклатура";
	
	Текст = СтрЗаменить(Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиков.Упаковка",
		"ЦеныНоменклатурыПоставщиков.Номенклатура"));
		
	Возврат Текст;
	
КонецФункции

// Возвращает строку - разделитель текстов запросов пакетного запроса.
// 
// Возвращаемое значение:
//  Строка - разделитель.
//
Функция РазделительПакетаЗапросов() Экспорт
	
	Разделитель = "
	|;
	|";
	
	Возврат Разделитель;
	
КонецФункции

#КонецОбласти

#Область УстановкаПараметровЗапросовДинамическихСписковНаФормахПодборов

// Устанавливает значения текстов запросов динамических списков на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьТекстыЗапросовСписковФормыПодбора(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	
	Форма.СписокНоменклатура.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокНоменклатура");
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ИзменениеТекстаЗапросаСпискаДляТекущегоЯзыка(Форма, "СписокНоменклатура");
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		Форма.СписокХарактеристики.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокХарактеристики");
		// СтандартныеПодсистемы.БазоваяФункциональность
		МультиязычностьСервер.ИзменениеТекстаЗапросаСпискаДляТекущегоЯзыка(Форма, "СписокНоменклатура");
		// Конец СтандартныеПодсистемы.БазоваяФункциональность
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыЗакупки И Форма.ИспользоватьНоменклатуруПартнеров Тогда
		Форма.СписокНоменклатураПартнера.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокНоменклатураПартнера");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеВидимостьюСтраницСПараметрамиНавигации

// Устанавливает страницу варианта навигации на форме подбора.
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения	 - форма списка номенклатуры или форма подбора.  
//  ВариантНавигацииДоИзменения	 - ПеречислениеСсылка.ВариантыНавигацииВФормахНоменклатуры - вариант навигации, который был в форме до выбора нового варианта.
//									Параметр передается для реализации возможности возврата к предыдущему варианту навигации и актуален для
//									вариантов "ПоТоварамДругогоКачества" и "ПоСовместнымПродажам".
//
Процедура УстановитьСтраницуВариантаНавигации(Форма, ВариантНавигацииДоИзменения = Неопределено) Экспорт
	
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатурыПартнера;
	ИначеЕсли Не ЗначениеЗаполнено(Форма.ВариантНавигации) Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии;
	ИначеЕсли (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияВидыНоменклатуры;
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Истина;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Ложь;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
		ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
			Форма.Элементы.ДеревоОтборов.Видимость    = Истина;
			Форма.Элементы.ВидНоменклатуры.Видимость  = Истина;
		КонецЕсли;
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма)
			ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма) Тогда
			
			Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
				Форма.Элементы.ВидыНоменклатуры.Видимость = Истина;
			ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
				Форма.Элементы.ВидыНоменклатуры.Видимость = Истина;
			ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
				Форма.Элементы.ВидыНоменклатуры.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам Тогда
		СтраницаВариантаНавигации = Форма.Элементы.СтраницаПодобранныеТовары;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодобныеТоварыНоменклатуры(Форма) Тогда
			СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Иначе
			СтраницаВариантаНавигации = Форма.Элементы.СтраницаТоварыДругогоКачества;
		КонецЕсли;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоНоменклатуре Тогда
		Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияНоменклатура;
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоНоменклатуреПоставщика Тогда
		Форма.Элементы.ВидНоменклатуры.Видимость  = Ложь;
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияНоменклатураПартнера;
	КонецЕсли;
	
	ВозвратКФильтрам = Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
						Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма)
		ИЛИ ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма) Тогда
		Форма.Элементы.ИспользоватьФильтры.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СтандартныйПоискКоманднаяПанельУстановитьФильтр.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.РасширенныйПоискКоманднаяПанельУстановитьФильтр.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюНоменклатураСАналогичнымиСвойствами.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураКонтекстноеМенюТоварыДругогоКачества.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюНоменклатураСАналогичнымиСвойствами.Доступность = Не ВозвратКФильтрам;
		Форма.Элементы.СписокСтандартныйПоискНоменклатураКонтекстноеМенюТоварыДругогоКачества.Доступность = Не ВозвратКФильтрам;
		СформироватьНадписьВариантНавигации(Форма, ВариантНавигацииДоИзменения);
	КонецЕсли;

	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = СтраницаВариантаНавигации;
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛиста(Форма)
			И Не ПодборТоваровКлиентСервер.ЭтоФормаПрайсЛистаПоставщиков(Форма) Тогда
		
		Если ПравоДоступа("Изменение", Метаданные.Справочники.ВидыНоменклатуры) Тогда
			
			Видимость = Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
						Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам;
						
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВидыНоменклатурыСоздать", "Видимость", Видимость);		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВидыНоменклатурыСоздатьГруппу", "Видимость", Видимость);		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВидыНоменклатурыИзменить", "Видимость", Видимость);		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВидыНоменклатурыСкопировать", "Видимость", Видимость);		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ВидыНоменклатурыУстановитьПометкуУдаления", "Видимость", Видимость);		
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СоздатьВидНоменклатуры", "Видимость", Видимость);		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СоздатьГруппуВидовНоменклатуры", "Видимость", Видимость);		
			
		КонецЕсли;
		
		Если ПравоДоступа("Изменение", Метаданные.Справочники.Номенклатура) Тогда
			Видимость = Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СоздатьГруппуНоменклатуры", "Видимость", Видимость);		
		КонецЕсли;
		
	КонецЕсли;
	
	Видимость = Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам;
				
	Форма.Элементы.СброситьОтборыПоСвойствам.Видимость = Видимость;
	
	Доступность = Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам;
				
	Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Доступность;
	
КонецПроцедуры

// Формирует представление варианта навигации
//
// Параметры:
//  Форма						 - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора 
//  ВариантНавигацииДоИзменения	 - ПеречислениеСсылка.ВариантыНавигацииВФормахНоменклатуры - вариант навигации, который был в форме до выбора нового варианта.
//									Параметр передается для реализации возможности возврата к предыдущему варианту навигации и актуален для
//									вариантов "ПоТоварамДругогоКачества" и "ПоСовместнымПродажам".
//
Процедура СформироватьНадписьВариантНавигации(Форма, ВариантНавигацииДоИзменения = Неопределено)
	МассивСтрокНадписи = Новый Массив();
		
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru = 'Иерархия номенклатуры'"));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru = 'Товары другого качества'"));
		МассивСтрокНадписи.Добавить("  ");
		МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Назад'"),
		,
		,
		,
		ОбщегоНазначения.ИмяЗначенияПеречисления(ВариантНавигацииДоИзменения)));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам 
		И ЗначениеЗаполнено(ВариантНавигацииДоИзменения) Тогда
		МассивСтрокНадписи.Добавить(НСтр("ru = 'Совместные продажи'"));
		МассивСтрокНадписи.Добавить("  ");
		МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Назад'"),
		,
		,
		,
		ОбщегоНазначения.ИмяЗначенияПеречисления(ВариантНавигацииДоИзменения)));
	ИначеЕсли Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам 
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам 
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда 
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Виды и свойства'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Виды и свойства'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам)));
		КонецЕсли;
		
		МассивСтрокНадписи.Добавить("  ");
		
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам Тогда
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Виды'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Виды'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам)));
		КонецЕсли;
		
		МассивСтрокНадписи.Добавить("  ");
		
		Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам Тогда
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Свойства'"),
			Новый Шрифт(,,Истина),
			Форма.ЦветТекстаФормы,
			,));
		Иначе
			МассивСтрокНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Свойства'"),
			,
			,
			,
			ОбщегоНазначения.ИмяЗначенияПеречисления(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам)));
		КонецЕсли;
	Иначе
		МассивСтрокНадписи = Новый Массив();
	КонецЕсли;
	
	Если МассивСтрокНадписи.Количество() > 0 Тогда
		Форма.НадписьВариантНавигации = Новый ФорматированнаяСтрока(МассивСтрокНадписи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииНавигацииПоХарактеристикамВФормахПодборов

// Вызывается при переключении на страницу со списком характеристик.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	ПараметрыНоменклатуры - Структура - параметры номенклатуры, для которой нужно переключиться на страницу со списком характеристик.
//
Процедура ПерейтиКСпискуХарактеристикНовойНоменклатуры(Форма)
	ПараметрыНоменклатуры = Форма.НоваяНоменклатура;
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	// Включить признак навигации по характеристикам.
	Форма.НавигацияПоХарактеристикам = Истина;
	
	// Установить заголовок колонки таблицы характеристик.
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Характеристики: ""%1""'"), ПараметрыНоменклатуры.Номенклатура);
	
	ИмяЭлемента = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма) + "Характеристика";
	ТаблицаФормыХарактеристика = Форма.Элементы[ИмяЭлемента]; // ТаблицаФормы
	ТаблицаФормыХарактеристика.Заголовок = ТекстЗаголовка;
	
	// Установить параметры списка характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "Номенклатура", ПараметрыНоменклатуры.Номенклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ЕдиницаИзмерения", 
		ПараметрыНоменклатуры.ЕдиницаИзмерения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВладелецХарактеристик", 
		ПараметрыНоменклатуры.ВладелецХарактеристик);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ТипНоменклатуры", ПараметрыНоменклатуры.ТипНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВидНоменклатуры", ПараметрыНоменклатуры.ВидНоменклатуры);
	
	Если Не ЭтоФормаПодбораВДокументыЗакупки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.СписокХарактеристики, "ЦеноваяГруппа", ПараметрыНоменклатуры.ЦеноваяГруппа);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "СегментНоменклатуры", 
		Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "НоменклатураСегмента", 
		ПараметрыНоменклатуры.Номенклатура, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	// Установить отбор списка характеристик по товарам продаваемым совместно.
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		МассивХарактеристик = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Форма.ТаблицаНоменклатураПродаваемаяСовместно Цикл
			
			Если СтрокаТЧ.Номенклатура = ПараметрыНоменклатуры.Номенклатура Тогда
				МассивХарактеристик.Добавить(СтрокаТЧ.Характеристика);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокХарактеристики, "Характеристика",
			МассивХарактеристик, ВидСравненияКомпоновкиДанных.ВСписке, ,МассивХарактеристик.Количество() > 0);
		
	КонецЕсли;
	
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
	Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Истина;
	
	Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьХарактеристику;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

Процедура НадписьВариантНавигацииНавигационнойСсылки(Форма, НавигационнаяСсылка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры." + НавигационнаяСсылка);
	Форма.ВариантНавигации = ВариантНавигации;
	ПриИзмененииВариантаНавигации(Форма);
	
КонецПроцедуры

// Заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовНоменклатуры(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Ложь);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, Истина);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//	ДеревоОтборов - ДеревоЗначений - дерево значений отборов свойств.
//	ПоХарактеристикам - Булево - признак заполнения значений отборов для списка характеристик.
//
Процедура ЗаполнитьДеревоЗначенийОтборов(Форма, ДеревоОтборов, ПоХарактеристикам)
	
	ВидНоменклатурыДляХарактеристик = Неопределено;
	ТаблицаПараметровОтбора			= Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	Отбор				= Новый Структура("ОтборХарактеристик", ПоХарактеристикам);
	ОтобранныеСтроки	= ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из ОтобранныеСтроки Цикл
		Строка.Отбор = Ложь;
	КонецЦикла;
		
	Если ПоХарактеристикам Тогда
		
		РеквизитыВидаНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
										Форма.ВидНоменклатуры,
										"ИспользованиеХарактеристик,ВладелецХарактеристик");
		
		Если РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры
			Или РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
			ВидНоменклатурыДляХарактеристик = Форма.ВидНоменклатуры;
		ИначеЕсли РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
			ВидНоменклатурыДляХарактеристик = РеквизитыВидаНоменклатуры.ВладелецХарактеристик;
		Иначе
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеквизитыБыстрогоОтбораХарактеристик.НомерСтроки КАК НомерСтроки,
		|	РеквизитыБыстрогоОтбораХарактеристик.Свойство КАК Свойство,
		|	РеквизитыБыстрогоОтбораХарактеристик.ИмяРеквизита КАК ИмяРеквизита,
		|	ВЫБОР
		|		КОГДА РеквизитыБыстрогоОтбораХарактеристик.ЭтоДопРеквизит
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(РеквизитыБыстрогоОтбораХарактеристик.Свойство)
		|		ИНАЧЕ РеквизитыБыстрогоОтбораХарактеристик.ПредставлениеРеквизита
		|	КОНЕЦ КАК ПредставлениеРеквизита,
		|	РеквизитыБыстрогоОтбораХарактеристик.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
		|	ВЫБОР
		|		КОГДА НЕ РеквизитыБыстрогоОтбораХарактеристик.Свойство ЕСТЬ NULL 
		|			ТОГДА РеквизитыБыстрогоОтбораХарактеристик.Свойство.ТипЗначения
		|	КОНЕЦ КАК ОписаниеТипаЗначения,
		|	РеквизитыБыстрогоОтбораХарактеристик.Свойство.Заголовок КАК ЗаголовокРеквизита
		|ИЗ
		|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораХарактеристик КАК РеквизитыБыстрогоОтбораХарактеристик
		|ГДЕ
		|	РеквизитыБыстрогоОтбораХарактеристик.Ссылка = &ВидНоменклатуры";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатурыДляХарактеристик);
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеквизитыБыстрогоОтбораНоменклатуры.НомерСтроки КАК НомерСтроки,
		|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство КАК Свойство,
		|	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита КАК ИмяРеквизита,
		|	ВЫБОР
		|		КОГДА РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит
		|			ТОГДА ПРЕДСТАВЛЕНИЕ(РеквизитыБыстрогоОтбораНоменклатуры.Свойство)
		|		ИНАЧЕ РеквизитыБыстрогоОтбораНоменклатуры.ПредставлениеРеквизита
		|	КОНЕЦ КАК ПредставлениеРеквизита,
		|	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
		|	ВЫБОР
		|		КОГДА НЕ РеквизитыБыстрогоОтбораНоменклатуры.Свойство ЕСТЬ NULL 
		|			ТОГДА РеквизитыБыстрогоОтбораНоменклатуры.Свойство.ТипЗначения
		|	КОНЕЦ КАК ОписаниеТипаЗначения,
		|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство.Заголовок КАК ЗаголовокРеквизита
		|ИЗ
		|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
		|ГДЕ
		|	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
		
	КонецЕсли;
		
	РеквизитыБыстрогоОтбора = Запрос.Выполнить().Выгрузить();
	СтрокаРеквизита = Неопределено;
	МаксимальноеКоличествоЗначенийВДереве = Константы.МаксимальноеКоличествоЭлементовВДеревеОтборовНоменклатуры.Получить();
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "СегментНоменклатуры")
		И ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
		
		ЕстьОтборПоСегменту = Истина;
		
	Иначе
		ЕстьОтборПоСегменту = Ложь;
	КонецЕсли;
	
	Для Каждого Реквизит Из РеквизитыБыстрогоОтбора Цикл
		
		Если Реквизит.ЭтоДопРеквизит Тогда
			ТипРеквизита = Реквизит.ОписаниеТипаЗначения;
			РеквизитНоменклатуры = Неопределено;
		Иначе
			РеквизитНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты[Реквизит.ИмяРеквизита];
			ТипРеквизита = РеквизитНоменклатуры.Тип;
		КонецЕсли;
		
		Если СтрокаРеквизита <> Неопределено
			И СтрокаРеквизита.Строки.Количество() > 0 Тогда
			СтрокаРеквизита.Строки.Сортировать("Представление");
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		СтрокаРеквизита.ИмяРеквизита		= ?(Реквизит.ЭтоДопРеквизит,
												Реквизит.ПредставлениеРеквизита,
												Реквизит.ИмяРеквизита);
		СтрокаРеквизита.ЭтоДопРеквизит		= Реквизит.ЭтоДопРеквизит;
		СтрокаРеквизита.Представление		= ?(ЗначениеЗаполнено(Реквизит.ЗаголовокРеквизита),
												Реквизит.ЗаголовокРеквизита,
												Реквизит.ПредставлениеРеквизита);
		СтрокаРеквизита.ОтборХарактеристик	= ПоХарактеристикам;
		СтрокаРеквизита.ОтборДоступен		= Истина;

		Отбор = Новый Структура("ИмяРеквизита",СтрокаРеквизита.ИмяРеквизита);
		ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
		
		Если ТипРеквизита.СодержитТип(Тип("Дата")) Тогда
			
			Если ОтобранныеСтроки.Количество()>0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ИнтервалОт            = Дата('00010101');
				СтрокаРеквизита.ИнтервалДо            = Дата('00010101');
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = Дата('00010101');
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Число"))Тогда
			
			Если ОтобранныеСтроки.Количество() > 0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ИнтервалОт            = 0;
				СтрокаРеквизита.ИнтервалДо            = 0;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ЗначениеОтбора        = 0;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Булево")) Тогда
			
			СтрокаРеквизита.ЗначениеОтбора = Истина;
			Если ОтобранныеСтроки.Количество() > 0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				СтрокаРеквизита.Отбор = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипРеквизита.СодержитТип(Тип("Строка")) Тогда
			
			Если ОтобранныеСтроки.Количество() > 0 Тогда
				ОтобранныеСтроки[0].Отбор = Истина;
				
				ЗаполнитьЗначенияСвойств(СтрокаРеквизита,ОтобранныеСтроки[0]);
			Иначе
				СтрокаРеквизита.ЗначениеОтбора        = "";
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				СтрокаРеквизита.ОтборДоступен         = Истина;
			КонецЕсли;
			
		Иначе
			
			СтрокаРеквизита.ОтборДоступен = Ложь;
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипРеквизита.Типы()[0]);
			
			Если Не ПравоДоступа("Чтение", МетаданныеТипа) Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			
			Если ПоХарактеристикам Тогда
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 999
				|	ДополнительныеРеквизиты.Значение КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
				|ГДЕ
				|	&РеквизитВладелецХарактеристик = &ВидНоменклатурыДляХарактеристик
				|	И ДополнительныеРеквизиты.Свойство = &Свойство";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 999", "ПЕРВЫЕ " + Строка(МаксимальноеКоличествоЗначенийВДереве + 1)+" "); //@Query-part-2
				
				Если РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
					РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец";
					ОтборНоменклатурыПоВиду = "ИСТИНА";
				ИначеЕсли РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
					РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец";
					ОтборНоменклатурыПоВиду = "Сегменты.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры";
				ИначеЕсли РеквизитыВидаНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
					РеквизитВладелецХарактеристик = "ДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры";
					ОтборНоменклатурыПоВиду = "ИСТИНА";
				Иначе
					Возврат;
				КонецЕсли;
				
				Если ЕстьОтборПоСегменту Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	И 1 В
					|			(ВЫБРАТЬ ПЕРВЫЕ 1
					|				1
					|			ИЗ
					|				РегистрСведений.НоменклатураСегмента КАК Сегменты
					|			ГДЕ
					|				Сегменты.Характеристика = ДополнительныеРеквизиты.Ссылка
					|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры)
					|				И &ОтборНоменклатурыПоВиду)
					|";
					
				КонецЕсли; 
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитВладелецХарактеристик", РеквизитВладелецХарактеристик);
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборНоменклатурыПоВиду", ОтборНоменклатурыПоВиду);
				
			ИначеЕсли Реквизит.ЭтоДопРеквизит Тогда
				
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 999
				|	ДополнительныеРеквизиты.Значение КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК ДополнительныеРеквизиты
				|ГДЕ
				|	ДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
				|	И ДополнительныеРеквизиты.Свойство = &Свойство";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 999", "ПЕРВЫЕ " + Строка(МаксимальноеКоличествоЗначенийВДереве + 1)+" "); //@Query-part-2
				
				Если ЕстьОтборПоСегменту Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	И 1 В
					|			(ВЫБРАТЬ ПЕРВЫЕ 1
					|				1
					|			ИЗ
					|				РегистрСведений.НоменклатураСегмента КАК Сегменты
					|			ГДЕ
					|				Сегменты.Номенклатура = ДополнительныеРеквизиты.Ссылка
					|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
					|";
					
				КонецЕсли; 
				
			Иначе
				
				ТекстЗапроса =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 999
				|	ТаблицаСправочника." + Реквизит.ИмяРеквизита + " КАК ЗначениеОтбора
				|ИЗ
				|	Справочник.Номенклатура КАК ТаблицаСправочника
				|ГДЕ
				|	ТаблицаСправочника.ВидНоменклатуры = &ВидНоменклатуры";
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 999", "ПЕРВЫЕ " + Строка(МаксимальноеКоличествоЗначенийВДереве + 1)+" "); //@Query-part-2
				
				Если ЕстьОтборПоСегменту Тогда
					
					ТекстЗапроса = ТекстЗапроса + "
					|	И 1 В
					|			(ВЫБРАТЬ ПЕРВЫЕ 1
					|				1
					|			ИЗ
					|				РегистрСведений.НоменклатураСегмента КАК Сегменты
					|			ГДЕ
					|				Сегменты.Номенклатура = ТаблицаСправочника.Ссылка
					|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
					|";
					
				КонецЕсли;
				
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			
			Запрос.УстановитьПараметр("Свойство", Реквизит.Свойство);
			Если ЕстьОтборПоСегменту Тогда
				Запрос.УстановитьПараметр("СегментНоменклатуры", Форма.СегментНоменклатуры);
			КонецЕсли;
			Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
			Запрос.УстановитьПараметр("ВидНоменклатурыДляХарактеристик", ВидНоменклатурыДляХарактеристик);
			
			// На большой базе запрос в цикле работает быстрее, чем один запрос с группировкам.
			// При этом быстрее, как если группировать по Свойство-Значение, так и если объединять запросы
			// с группировками по каждому свойству в отдельности.
			ВыборкаЗначений = Запрос.Выполнить().Выбрать();
			
			Если ВыборкаЗначений.Количество() = 0 Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
				СтрокаРеквизита = Неопределено;
				
			ИначеЕсли ВыборкаЗначений.Количество() > МаксимальноеКоличествоЗначенийВДереве Тогда 	
				
				СтрокаРеквизита.ЗначениеОтбора        = Новый СписокЗначений;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
				СтрокаРеквизита.ОтборДоступен         = Истина;
				
				Для Каждого ЭлементКоллекции Из ОтобранныеСтроки Цикл
					Отбор = Новый Структура;
					Отбор.Вставить("ЗначениеОтбора", ЭлементКоллекции.ЗначениеОтбора);
					
					ВыборкаЗначений.Сбросить();
					Если ВыборкаЗначений.НайтиСледующий(Отбор) Тогда
						ЭлементКоллекции.Отбор = Истина;
						СтрокаРеквизита.ЗначениеОтбора.Добавить(ЭлементКоллекции.ЗначениеОтбора);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокаРеквизита.ЗначениеОтбора.Количество() > 0 Тогда
					СтрокаРеквизита.ПредставлениеОтбора = Строка(СтрокаРеквизита.ЗначениеОтбора);
					СтрокаРеквизита.Отбор               = Истина;
				КонецЕсли;
				
			Иначе
				
				ОтборУстановлен = Ложь;
				
				Пока ВыборкаЗначений.Следующий() Цикл
					
					Если (ВыборкаЗначений.Количество() = 1
						И Не ЗначениеЗаполнено(ВыборкаЗначений.ЗначениеОтбора)) Тогда
						ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
						СтрокаРеквизита = Неопределено;
						Продолжить;
					КонецЕсли;
					
					СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаЗначения, СтрокаРеквизита);
					
					СтрокаЗначения.ЗначениеОтбора = ВыборкаЗначений.ЗначениеОтбора;
					
					// Получение представления построчно для 50 значений работает быстрее, выборка его сразу в запросе,
					// формирующем ВыборкаЗначений, т.к. там есть группировка
					// Так же это работает быстрее, чем запрос представления (функция ПРЕДСТАВЛЕНИЕ языка запросов),
					// сделанный сразу для 50 значений.
					СтрокаЗначения.Представление  = Строка(ВыборкаЗначений.ЗначениеОтбора);
					СтрокаЗначения.ОтборДоступен  = Истина;
					
					Для Каждого ЭлементКоллекции Из ОтобранныеСтроки Цикл
						Если ТипЗнч(ЭлементКоллекции.ЗначениеОтбора) = Тип("СписокЗначений") 
								И ЭлементКоллекции.ЗначениеОтбора.НайтиПоЗначению(СтрокаЗначения.ЗначениеОтбора) <> Неопределено
							 Или ЭлементКоллекции.Представление = СтрокаЗначения.Представление Тогда
							ОтобранныеСтроки[0].Отбор = Истина;
							СтрокаЗначения.Отбор = Истина;
							ОтборУстановлен = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
				Если СтрокаРеквизита <> Неопределено Тогда
					СтрокаРеквизита.Отбор = ОтборУстановлен;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ТаблицаПараметровОтбора.Загрузить(ТаблицаПараметровОтбора);
	
	УстановитьНеобходимостьСохраненияНастроек(Форма);
	
	Если СтрокаРеквизита <> Неопределено
		И СтрокаРеквизита.Строки.Количество() > 0 Тогда
		
		СтрокаРеквизита.Строки.Сортировать("Представление");
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает пометку у элементов списка градаций качества.
// Используется при навигации по товарам альтернативного качества.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора, форма подбора.
//
Процедура УстановитьПометкуГрадацииКачества(Форма)
	
	Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
		ЭлементСписка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает отбор по родителю текущей строки списка номенклатуры
// в формах подборов товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма)
	
	ТаблицаФормыНоменклатура = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)]; // ТаблицаФормы
	ТекущаяСтрока = ТаблицаФормыНоменклатура.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Родитель;
	Форма.ТекущаяИерархияНоменклатуры = Родитель; 
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УстановитьОтборПоВидуНоменклатуры(Форма);
	Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам Тогда
		УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Истина);
	
КонецПроцедуры

// Устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора, форма выбора.
//
Процедура УстановитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	УстанавливатьОтборСпискаХарактеристик = Ложь;
	
	Если ЭтоФормаВыбораХарактеристик Тогда
		УстанавливатьОтборСпискаХарактеристик = Истина;
		ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список);
	Иначе
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	КонецЕсли;
	
	Если ЭтоФормаПодбора И Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		УстанавливатьОтборСпискаХарактеристик = Истина;
		ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики);
	КонецЕсли;
	
	ИмяСсылки = "Ссылка.[";
	
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	ТаблицаПараметровОтбора = ТаблицаПараметровОтбора.Скопировать(ПараметрыОтбора);
	
	Пока ТаблицаПараметровОтбора.Количество() <> 0 Цикл
		
		СтрокаДереваОтборов = ТаблицаПараметровОтбора[0];
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = ?(СтрокаДереваОтборов.ЭтоДопРеквизит,
									ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]",
									СтрокаДереваОтборов.ИмяРеквизита);
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, Истина,
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, Истина,
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата")
				Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт,
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт,
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо,
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо,
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора,
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора,
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("СписокЗначений") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора,
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора,
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
				КонецЕсли;
				
			КонецЕсли;
			
			ТаблицаПараметровОтбора.Удалить(СтрокаДереваОтборов);
			
		Иначе
			
			ПараметрыОтбора = Новый Структура("ИмяРеквизита", СтрокаДереваОтборов.ИмяРеквизита);
			
			МассивСтрок = ТаблицаПараметровОтбора.НайтиСтроки(ПараметрыОтбора);
			
			СтрокаОтбора = МассивСтрок[0];
			ОтборХарактеристик = СтрокаОтбора.ОтборХарактеристик;
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = ?(СтрокаОтбора.ЭтоДопРеквизит,
									ИмяСсылки + СтрокаОтбора.ИмяРеквизита + "]",
									СтрокаОтбора.ИмяРеквизита);
			
			ЗначенияОтборов = Новый Массив;
			
			Для Каждого Строка Из МассивСтрок Цикл
				ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
				ТаблицаПараметровОтбора.Удалить(Строка);
			КонецЦикла;
			
			Если Не ОтборХарактеристик Тогда 
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора,
					ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
			ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора,
					ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает установленные отборы по виду номенклатуры и по свойствам выбранного
// вида номенклатуры на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора, форма выбора.
//
Процедура УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УдалитьОтборПоВидуНоменклатуры(Форма);
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Ложь);
	
КонецПроцедуры

// Удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = НеУдаляемыеЭлементыОтборов();
	
	// Удалить элементы отбора по свойствам вида номенклатуры.
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы;
		ВГраница = ОтборСпискаНоменклатуры.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
		ЭлементОтбора = ОтборСпискаНоменклатуры[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаНоменклатуры.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ЭтоФормаПодбора И Форма.ИспользоватьХарактеристикиНоменклатуры) Или ЭтоФормаВыбораХарактеристик Тогда
		
		Если ЭтоФормаВыбораХарактеристик Тогда
			ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы;
		Иначе
			ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы;
		КонецЕсли;
		
		ВГраница = ОтборСпискаХарактеристик.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
			ЭлементОтбора = ОтборСпискаХарактеристик[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаХарактеристик.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет отбор по качеству номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоКачествуНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Качество", "КачествоНоменклатуры");
	
КонецПроцедуры

// Устанавливает отбор по сегменту номенклатуры на форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоСегментуНоменклатуры(Форма)
	
	// Отбор по сегменту у списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокНоменклатура, 
		"СегментНоменклатуры", 
		Форма.СегментНоменклатуры, 
		ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	// В списке выбора сегментов должны отображаться 7 последних выбранных элементов.
	Если ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
		
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(
			Форма.Элементы.СегментНоменклатуры.СписокВыбора, 
			Форма.СегментНоменклатуры, 
			7);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив имен элементов отбора которые не следует удалять.
//
// Возвращаемое значение:
//	Массив - Массив имен отборов которые не следует удалять - они не относятся 
//		к отбору по свойствам вида номенклатуры.
//
Функция НеУдаляемыеЭлементыОтборов()
	
	НеУдаляемыеЭлементы = Новый Массив;
	
	НеУдаляемыеЭлементы.Добавить("ПоискПоПодстроке");
	НеУдаляемыеЭлементы.Добавить("ЦеныНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ЦенаХарактеристики");
	НеУдаляемыеЭлементы.Добавить("ГруппаТолькоВНаличии");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВидуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВладельцуХарактеристик");
	НеУдаляемыеЭлементы.Добавить("ОтборПоТипуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоУмолчанию");
	НеУдаляемыеЭлементы.Добавить("ОтборОсобенностьУчета");
	НеУдаляемыеЭлементы.Добавить("ОтборКоллекцияНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборВидАлкогольнойПродукцииМаркируемый");
	
	Возврат НеУдаляемыеЭлементы
	
КонецФункции

// Удаляет отбор по номенклатуре исходного качества.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоНоменклатуреИсходногоКачества(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		Форма.СписокНоменклатура,,"ГруппаОтборПоТоварамИсходногоКачества");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Вызывается при переключении на страницу со списком характеристик.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	ПараметрыНоменклатуры - Структура - параметры номенклатуры, для которой нужно переключиться на страницу со списком характеристик.
//
Процедура ПриПереходеКСпискуХарактеристик(Форма, ПараметрыНоменклатуры)
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	Форма.НавигацияПоХарактеристикам = Истина;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Характеристики: ""%1""'"), ПараметрыНоменклатуры.Номенклатура);
	
	ИмяЭлемента = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма) + "Характеристика";
	
	// Установить параметры списка характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "Номенклатура", ПараметрыНоменклатуры.Номенклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ЕдиницаИзмерения", ПараметрыНоменклатуры.ЕдиницаИзмерения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВладелецХарактеристик", ПараметрыНоменклатуры.ВладелецХарактеристик);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ТипНоменклатуры", ПараметрыНоменклатуры.ТипНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВидНоменклатуры", ПараметрыНоменклатуры.ВидНоменклатуры);
	
	Если Не ЭтоФормаПодбораВДокументыЗакупки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.СписокХарактеристики, "ЦеноваяГруппа", ПараметрыНоменклатуры.ЦеноваяГруппа);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "СегментНоменклатуры", 
		Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "НоменклатураСегмента", 
		ПараметрыНоменклатуры.Номенклатура, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	// Установить отбор списка характеристик по товарам продаваемым совместно.
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		МассивХарактеристик = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Форма.ТаблицаНоменклатураПродаваемаяСовместно Цикл
			Если СтрокаТЧ.Номенклатура = ПараметрыНоменклатуры.Номенклатура Тогда
				МассивХарактеристик.Добавить(СтрокаТЧ.Характеристика);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокХарактеристики, "Характеристика",
			МассивХарактеристик, ВидСравненияКомпоновкиДанных.ВСписке,, МассивХарактеристик.Количество() > 0);
			
	КонецЕсли;
	
	ИмяТекущейСтраницы = ПодборТоваровКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма);
	ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницы];
	
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = ТекущаяСтраница;
	Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Истина;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		ДоступностьСоздатьХарактеристику = (Форма.НавигацияПоХарактеристикам И Не Форма.НавигацияПоНоменклатуреПартнера);
	Иначе
		ДоступностьСоздатьХарактеристику = Форма.НавигацияПоХарактеристикам;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "КоманднаяПанельСоздатьХарактеристику", "Доступность", ДоступностьСоздатьХарактеристику);
	
	Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьХарактеристику;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыПоНаличиюПоЦенам

// Возвращает Истина, если условие цены поставщика на форме подбора был изменен
// по сравнению с ранее установленным значением.
//
// Параметры:
//	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
//
Функция ВидЦеныПоставщикаИзменился(Форма)
	
	ИмяПараметра = "ВидЦеныПоставщика";
	
	ЗначениеПараметра = Форма.СписокНоменклатураПартнера.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Форма.ВидЦеныПоставщика) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Не (ЗначениеПараметра.Значение = Форма.ВидЦеныПоставщика);
	
КонецФункции

#КонецОбласти

#Область ОтборыВспомогательные

// Возвращает Истина, если сегмент номенклатуры на форме подбора был изменен
// по сравнению с ранее установленным значением.
//
// Параметры:
//	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
//
Функция СегментНоменклатурыИзменился(Форма)
	
	ЗначениеПараметра = Форма.СписокНоменклатура.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СегментНоменклатуры"));
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат (ЗначениеПараметра.Значение <> Форма.СегментНоменклатуры Или Не ЗначениеПараметра.Использование);
	
КонецФункции

#КонецОбласти

#Область ПоискНаФормахПодборов

Функция РезультатПолнотекстовогоПоиска(Форма, ПараметрыПоиска)
	
	РезультатПоиска = РезультатыПоиска(ПараметрыПоиска.ОбластиПоиска);
	
	// Создать список поиска.
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(ПараметрыПоиска.СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ИспользованиеМетаданных = ИспользованиеМетаданныхПолнотекстовогоПоиска.НеИспользовать;
	
	ОбластиПоиска = Новый Массив;
	Для Каждого СтрМас Из ПараметрыПоиска.ОбластиПоиска Цикл
		ОбластиПоиска.Добавить(СтрМас.ОбъектМетаданных);
	КонецЦикла;
	СписокПоиска.ОбластьПоиска = ОбластиПоиска;
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат РезультатПоиска;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат РезультатПоиска;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат РезультатПоиска;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат РезультатПоиска;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции = 20;
	НачальнаяПозиция = 0;
	ВГраница = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для Номер = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(Номер);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает результат поиска номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура - результат поиска товаров.
//
Функция РезультатНеполнотекстовогоПоиска(Форма, ПараметрыПоиска)
	
	Запрос = Новый Запрос;
	ТекстыЗапросаПоискаПоОбласти = Новый Массив;
	
	Для каждого ОбластьПоиска Из ПараметрыПоиска.ОбластиПоиска Цикл
		ТекстыЗапросаПоискаПоОбласти.Добавить(ОбластьПоиска.ТекстЗапросаПоискаПоОбласти);
		
		Для Каждого КлючЗначение Из ОбластьПоиска.ПараметрыЗапросаПоискаПоОбласти Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросаПоискаПоОбласти, ОбщегоНазначения.РазделительПакетаЗапросов());

	ТекстУсловия = "%ВидСравнения% &СтрокаПоиска %СпециальныйСимвол%";
	ТекстУсловия = СтрЗаменить(ТекстУсловия,
		"%ВидСравнения%",
		?(ПараметрыПоиска.ТочноеСоотвествие,
			"=",
			"ПОДОБНО")); //@Query-part
	ТекстУсловия = СтрЗаменить(ТекстУсловия, "%СпециальныйСимвол%",
		?(ПараметрыПоиска.ТочноеСоотвествие,
			"",
			"СПЕЦСИМВОЛ ""~""")); //@Query-part
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "999", Формат(МаксимальноеКоличествоЭлементовПоиска() + 1, "ЧЦ=10; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &УсловиеСравнения", ТекстУсловия);

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтрокаПоиска", ПараметрыПоиска.СтрокаПоиска);
	
	Если ПараметрыПоиска.Свойство("ДополнительныеПараметры") Тогда
		Для каждого КлючЗначение Из ПараметрыПоиска.ДополнительныеПараметры Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет(); 
	РезультатПоиска = РезультатыПоиска(ПараметрыПоиска.ОбластиПоиска);
	
	КоличествоРезультатов = 0;
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			ОбработатьЭлементСпискаПоиска(ЭлементПоиска, РезультатПоиска);
			КоличествоРезультатов = КоличествоРезультатов + 1;
			
			Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска() Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска() Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска()  Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	ИначеЕсли КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
	Иначе
		РезультатПоиска.КодОшибки = "";
	КонецЕсли;
		
	Возврат РезультатПоиска;
	
КонецФункции

// Проверяет принадлежность элемента списка поиска, в зависимости
// от принадлежности элемента к типу метаданных, включает значение элемента
// в нужный раздел результата поиска.
//
// Параметры:
//	ЭлементСписка - ЭлементСпискаЗначений - элемент списка поиска,
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска)
	
	МетаданныеЭлемента = ЭлементСписка.Метаданные;
	ЗначениеЭлемента = ЭлементСписка.Значение;
	
	Если ТипЗнч(МетаданныеЭлемента) = Тип("ОбъектМетаданных") Тогда
		ИмяОбластиПоиска = МетаданныеЭлемента.Имя;
	Иначе
		ИмяОбластиПоиска = МетаданныеЭлемента;
	КонецЕсли;
	РезультатПоискаИмяОбластиПоиска = РезультатПоиска[ИмяОбластиПоиска]; // см. ОписанияОбластейПоиска
	РезультатПоискаИмяОбластиПоиска.Добавить(ЗначениеЭлемента);
	
КонецПроцедуры

// Возвращает массив областей поиска товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив из см. ОписаниеОбластиПоиска - Массив метаданных, областей поиска товаров.
//
Функция ОписанияОбластейПоиска(Форма, ПараметрыПоиска)
	
	// В зависимости от того, из какой формы выполняется вызов функции поиска,
	// список областей поиска будет различаться.
	ОбластиПоиска = Новый Массив;
	
	Если ПараметрыПоиска.ИмяСпискаПоиска = "Номенклатура" Тогда
		
		ОписаниеОбластиПоиска                             = ОписаниеОбластиПоиска();
		ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.Справочники.Номенклатура;
		ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
		"ВЫБРАТЬ ПЕРВЫЕ 999
		|	СправочникНоменклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа И
		|	(СправочникНоменклатура.Наименование = &УсловиеСравнения
		|			ИЛИ СправочникНоменклатура.НаименованиеПолное = &УсловиеСравнения
		|			ИЛИ СправочникНоменклатура.Код = &УсловиеСравнения
		|			ИЛИ СправочникНоменклатура.КодДляПоиска = &УсловиеСравнения
		|			ИЛИ СправочникНоменклатура.Артикул = &УсловиеСравнения)";

		Если ПараметрыПоиска.Свойство("ДополнительныеУсловия") Тогда
			ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти = ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти +
				"
				|	И " + СтрСоединить(ПараметрыПоиска.ДополнительныеУсловия, " И ");
		КонецЕсли;
		
		ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры = "";
		ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
		
		ОписаниеОбластиПоиска                             = ОписаниеОбластиПоиска();
		ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры;
		ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
		"ВЫБРАТЬ ПЕРВЫЕ 999
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Значение,
		|	""ШтрихкодыНоменклатуры"" КАК Метаданные
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод = &СтрокаПоискаПоШтрихкоду";
		ОписаниеОбластиПоиска.ПараметрыЗапросаПоискаПоОбласти.Вставить("СтрокаПоискаПоШтрихкоду",
		ИсходнаяСтрокаПоиска(ПараметрыПоиска.СтрокаПоиска, Форма.НайтиНоменклатуруПоТочномуСоответствию));
		
		ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры =
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&ШтрихкодыНоменклатуры)";
		ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспорт")
			Или ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
			
			ОписаниеОбластиПоиска                             = ПодборТоваровСервер.ОписаниеОбластиПоиска();
			ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.Справочники.КлассификаторТНВЭД;
			ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
			"ВЫБРАТЬ ПЕРВЫЕ 999
			|	КлассификаторТНВЭД.Ссылка КАК Значение,
			|	""КлассификаторТНВЭД"" КАК Метаданные
			|ИЗ
			|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
			|ГДЕ
			|	КлассификаторТНВЭД.Код = &УсловиеСравнения";
			ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
			|		ПО Номенклатура.КодТНВЭД = КлассификаторТНВЭД.Ссылка
			|ГДЕ
			|	КлассификаторТНВЭД.Ссылка В(&КлассификаторТНВЭД)";
			ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если (ПараметрыПоиска.ИмяСпискаПоиска = "Номенклатура"
		Или ПараметрыПоиска.ИмяСпискаПоиска = "НоменклатураКонтрагентов")
		И ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		
		ОписаниеОбластиПоиска                             = ОписаниеОбластиПоиска();
		ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.Справочники.НоменклатураКонтрагентов;
		ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 999
		|	НоменклатураКонтрагентов.Ссылка КАК Значение,
		|	""НоменклатураКонтрагентов"" КАК Метаданные
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НЕ НоменклатураКонтрагентов.ЭтоГруппа И
		|	(НоменклатураКонтрагентов.Артикул = &УсловиеСравнения
		|		ИЛИ НоменклатураКонтрагентов.Наименование = &УсловиеСравнения)
		|	И НоменклатураКонтрагентов.Владелец = &Партнер";
		
		ОписаниеОбластиПоиска.ПараметрыЗапросаПоискаПоОбласти.Вставить("Партнер", Форма.ПоставщикПартнер);
		
		ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры =
		"ВЫБРАТЬ
		|	НоменклатураКонтрагентов.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.НоменклатураКонтрагентов КАК НоменклатураКонтрагентов
		|ГДЕ
		|	НоменклатураКонтрагентов.Ссылка В(&НоменклатураКонтрагентов)";
		ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
	КонецЕсли;

	Если ПараметрыПоиска.ИмяСпискаПоиска = "ХарактеристикиНоменклатуры" Тогда
		ОписаниеОбластиПоиска                             = ОписаниеОбластиПоиска();
		ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.Справочники.ХарактеристикиНоменклатуры;
		ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
		"ВЫБРАТЬ ПЕРВЫЕ 999
		|	ХарактеристикиНоменклатуры.Ссылка КАК Значение,
		|	""ХарактеристикиНоменклатуры"" КАК Метаданные
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Наименование = &УсловиеСравнения
		|	ИЛИ ХарактеристикиНоменклатуры.НаименованиеПолное = &УсловиеСравнения";
		ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры = "";
		ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
		
	КонецЕсли;
	
	НоменклатураЛокализация.ОписанияОбластейПоиска(ОбластиПоиска, Форма, ПараметрыПоиска);	
	
	Возврат ОбластиПоиска;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - содержит:
// * ПараметрыЗапросаПоискаПоОбласти - Структура
// * ТекстЗапросаПоискаНоменклатуры - Строка
// * ТекстЗапросаПоискаПоОбласти - Строка
// * ОбъектМетаданных - ОбъектМетаданных
//
Функция ОписаниеОбластиПоиска() Экспорт
	
	ОписаниеОбластиПоиска = Новый Структура;
	ОписаниеОбластиПоиска.Вставить("ОбъектМетаданных");
	ОписаниеОбластиПоиска.Вставить("ТекстЗапросаПоискаПоОбласти");
	ОписаниеОбластиПоиска.Вставить("ТекстЗапросаПоискаНоменклатуры");
	ОписаниеОбластиПоиска.Вставить("ПараметрыЗапросаПоискаПоОбласти", Новый Структура);

	Возврат ОписаниеОбластиПоиска;
	
КонецФункции

// Возвращает структуру результатов поиска.
// Используется при неполнотекстовом поиске товаров.
// 
// Параметры:
// 		ОбластиПоиска - см. ОписанияОбластейПоиска
// 		
// Возвращаемое значение:
//		Структура:
//			* КодОшибки - Строка
//			* ОбластиПоиска - см. ОписанияОбластейПоиска
//			* Номенклатура - Массив - это пример
//
Функция РезультатыПоиска(ОбластиПоиска)
	
	РезультатПоиска = Новый Структура();
	
	РезультатПоиска.Вставить("КодОшибки", "");
	РезультатПоиска.Вставить("ОбластиПоиска", ОбластиПоиска);
	Для Каждого СтрМас из ОбластиПоиска Цикл
		РезультатПоиска.Вставить(СтрМас.ОбъектМетаданных.Имя, Новый Массив);
	КонецЦикла;
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает максимальное количество элементов которое может быть обработано
// при выполнении полнотекстового или неполнотекствого поиска. Если количество найденных
// элементов превышает возвращаемое этой функцией значение, то считается что условие поиска задано
// размыто и предлагается уточнить его.
//
Функция МаксимальноеКоличествоЭлементовПоиска()
	
	Возврат 500;
	
КонецФункции

// Выполняет дополнительную обработку результатов поиска:
// если выполнялся поиск по характеристикам, штрихкодам или номенклатуре
// поставщиков, то процедура выполняет дополнительный запроса для поиска
// номенклатуры - владельцев найденных элементов. Найденная номенклатура
// включается в результат поиска в раздел "Номенклатура".
//
// Параметры:
// 		РезультатПоиска - см. РезультатыПоиска
//
Процедура ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска)
	
	// Если найдены характеристики номенклатуры, номенклатура поставщиков или штрихкоды номенклатуры,
	// то для них нужно найти владельцев и добавить их в список номенклатуры.
	Запрос = Новый Запрос;
	ТекстыЗапросаПоискаНоменклатуры = Новый Массив;
	
	Для Каждого СтрМас из РезультатПоиска.ОбластиПоиска Цикл
		Если Не ПустаяСтрока(СтрМас.ТекстЗапросаПоискаНоменклатуры)
			И РезультатПоиска[СтрМас.ОбъектМетаданных.Имя].Количество() > 0 Тогда
			
			ТекстыЗапросаПоискаНоменклатуры.Добавить(СтрМас.ТекстЗапросаПоискаНоменклатуры);
			
			ДанныеДляПоиска = РезультатПоиска[СтрМас.ОбъектМетаданных.Имя];
			Если ДанныеДляПоиска.Количество() > 0
				И ТипЗнч(ДанныеДляПоиска[0]) = Тип("РегистрСведенийКлючЗаписи.ШтрихкодыНоменклатуры") Тогда
				
				ЗначениеПараметра = Новый Массив;
				
				Для Каждого ЗначениеПоиска Из ДанныеДляПоиска Цикл
					ЗначениеПараметра.Добавить(ЗначениеПоиска.Штрихкод);
				КонецЦикла;
				
			Иначе
				ЗначениеПараметра = РезультатПоиска[СтрМас.ОбъектМетаданных.Имя];
			КонецЕсли;
			
			Запрос.УстановитьПараметр(СтрМас.ОбъектМетаданных.Имя, ЗначениеПараметра)
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстыЗапросаПоискаНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросаПоискаНоменклатуры, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает исходную строку поиска - которая была введена на форме поиска.
// Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска,
//	ТочноеСоответствие - Булево - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка - Исходная строка поиска.
//
Функция ИсходнаяСтрокаПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Возврат Сред(СтрокаПоиска, 2, СтрДлина(СтрокаПоиска) - 2);
	
КонецФункции

// Возвращает форматированную строку поиска - строку с добавлением служебных символов.
// Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска.
//	ИспользоватьПолнотекстовыйПоиск - Булево - признак использования полнотекстового поиска.
//	ТочноеСоответствие - Булево - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка - Форматированная строка поиска.
//
Функция ФорматироватьСтрокуПоиска(Знач СтрокаПоиска, ИспользоватьПолнотекстовыйПоиск, ТочноеСоответствие)
	
	Если ТочноеСоответствие
		Или ИспользоватьПолнотекстовыйПоиск
		Или Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		
		Возврат СтрокаПоиска;
		
	КонецЕсли;
	
	СтрокаПоиска = ЗамаскироватьСпецсимволыПодобия(СтрокаПоиска);
	
	Если Лев(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = "%" + СтрокаПоиска;
	КонецЕсли;
	
	Если Прав(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = СтрокаПоиска + "%";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ЗамаскироватьСпецсимволыПодобия(Текст)
	Результат = Текст;
	
	Спецсимвол = "~";
	Служебные  = Спецсимвол + "%_[]^";
	
	Для Индекс = 1 По СтрДлина(Служебные) Цикл
		Символ = Сред(Служебные, Индекс, 1);
		Результат = СтрЗаменить(Результат, Символ, Спецсимвол + Символ);
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Возвращает структуру - значения настроек формы списка, формы выбора товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма выбора.
//
// Возвращаемое значение:
//	Структура - Значения настроек формы списка, формы выбора.
//
Функция НастройкиФормы(Форма)
	
	НастройкиФормы = Новый Структура;
	
	НастройкиФормы.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтры);
	Если Не (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам
		Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика) Тогда
		
		НастройкиФормы.Вставить("ВариантНавигации", Форма.ВариантНавигации);
	Иначе
		НастройкиФормы.Вставить("ВариантНавигации", Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	НастройкиФормы.Вставить("ВидНоменклатуры", Форма.ВидНоменклатуры);
	НастройкиФормы.Вставить("ТекущаяИерархияНоменклатуры", Форма.ТекущаяИерархияНоменклатуры);
		
	// Сохранение параметров отбора.
	Если ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
		Или ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
		
		НастройкиФормы.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		НастройкиФормы.Вставить("НоменклатураИсходногоКачества", Форма.НоменклатураИсходногоКачества);
		
	КонецЕсли;
	
	НастройкиФормы.Вставить("ВариантПоискаТоваровУстановлен", Истина);
	
	Возврат НастройкиФормы;
	
КонецФункции

// Возвращает структуру - значения настроек формы подбора товаров.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
// Возвращаемое значение:
//	Структура - Значения настроек формы подбора.
//
Функция НастройкиФормыПодбора(Форма)
	
	НастройкиФормыПодбора = НастройкиФормы(Форма);
	
	НастройкиФормыПодбора.Вставить("ЗапрашиватьКоличество", Форма.ЗапрашиватьКоличество);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ЗапрашиватьЦену", Форма.ЗапрашиватьЦену);
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ИспользоватьФильтрНоменклатураПартнера", Форма.ИспользоватьФильтрНоменклатураПартнера);
		НастройкиФормыПодбора.Вставить("ТекущаяИерархияНоменклатурыПартнера", Форма.ТекущаяИерархияНоменклатурыПартнера);
	КонецЕсли;
	
	НастройкиФормыПодбора.Вставить("ОтображатьОстатки", Форма.ОтображатьОстатки);
	НастройкиФормыПодбора.Вставить("ПоказыватьПодобранныеТовары", Форма.ПоказыватьПодобранныеТовары);
	НастройкиФормыПодбора.Вставить("ТолькоВНаличии", Форма.ТолькоВНаличии);

	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		НастройкиФормыПодбора.Вставить("НоменклатураИсходногоКачества", Форма.НоменклатураИсходногоКачества);
	КонецЕсли;
	
	Возврат НастройкиФормыПодбора;
	
КонецФункции

// Сохраняет значения списков выбора на формах списков, формах подборов.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма списка, форма подбора.
//
Процедура СохранитьСпискиВыбора(Форма)
	
	СпискиВыбораКлиентСервер.Сохранить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора);
	СпискиВыбораКлиентСервер.Сохранить("ИсторияВыбораСегментовНоменклатуры", Форма.Элементы.СегментНоменклатуры.СписокВыбора);
	
КонецПроцедуры

// Восстанавливает значение реквизитов на форме из хранилища общих настроек.
//
// Параметры:
//	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура УстановитьЗначенияПоНастройкамФормы(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодобныеТоварыНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаПодобныеТоварыНоменклатуры(Форма);
	
	// Установить значения по умолчанию.
	Форма.ИспользоватьФильтры = Истина;
	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	
	Форма.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Форма.ТекущаяИерархияНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	
	// Получить настройку вариант поиска товаров.
	НастройкиВариантПоискаТоваров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВариантПоискаТоваров",  "");
	
	Если НастройкиВариантПоискаТоваров = Неопределено Тогда
		Форма.ВариантПоискаТоваров = "ПоУмолчанию";
	Иначе
		Форма.ВариантПоискаТоваров = НастройкиВариантПоискаТоваров;
	КонецЕсли;
	
	// Если есть сохраненные настройки, то установить значения по настройкам.
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы,  "");
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ИспользоватьФильтры") Тогда
			Форма.ИспользоватьФильтры = Настройки.ИспользоватьФильтры;
		КонецЕсли;
		
		Если Настройки.Свойство("ИспользоватьФильтрНоменклатураПартнера") Тогда
			Форма.ИспользоватьФильтрНоменклатураПартнера = Настройки.ИспользоватьФильтрНоменклатураПартнера;
		КонецЕсли;
		
		Если Настройки.Свойство("ВариантНавигации")
			И ЗначениеЗаполнено(Настройки.ВариантНавигации) Тогда

			Если ТипЗнч(Настройки.ВариантНавигации) = Тип("Строка") Тогда
				Если Метаданные.Перечисления.ВариантыНавигацииВФормахНоменклатуры.ЗначенияПеречисления.Найти(Настройки.ВариантНавигации) = Неопределено Тогда
					ВариантНавигации = Форма.ВариантНавигации;
				Иначе
					ВариантНавигации = ПредопределенноеЗначение("Перечисление.ВариантыНавигацииВФормахНоменклатуры." + Настройки.ВариантНавигации);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Настройки.ВариантНавигации) = Тип("ПеречислениеСсылка.ВариантыНавигацииВФормахНоменклатуры") Тогда
				ВариантНавигации = Настройки.ВариантНавигации;
			Иначе
				ВариантНавигации = Форма.ВариантНавигации;
			КонецЕсли;
			
			Если Не (ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества
				Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСовместноПродаваемымТоварам
				Или ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархииПоставщика) Тогда
				Форма.ВариантНавигации = ВариантНавигации;
			КонецЕсли;
			
			Если ЭтоФормаПодобныеТоварыНоменклатуры Тогда
				Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ТаблицаПараметровОтбора") Тогда
			Если ЗначениеЗаполнено(Настройки.ТаблицаПараметровОтбора) Тогда
				Форма.ТаблицаПараметровОтбора.Загрузить(Настройки.ТаблицаПараметровОтбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ВидНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ВидНоменклатуры) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.ВидНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
					
					Форма.ВидНоменклатуры = Настройки.ВидНоменклатуры;
					
					Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоИерархии Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
					КонецЕсли;
					
					Если Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоТоварамДругогоКачества Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатуры") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатуры) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатуры.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатуры;
					Форма.ТекущаяИерархияНоменклатуры = Настройки.ТекущаяИерархияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатурыПартнера") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатурыПартнера) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатурыПартнера.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатурыПартнера.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатурыПартнера;
					Форма.ТекущаяИерархияНоменклатурыПартнера = Настройки.ТекущаяИерархияНоменклатурыПартнера;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("НоменклатураИсходногоКачества") Тогда
			Если ЗначениеЗаполнено(Настройки.НоменклатураИсходногоКачества) Тогда
				Если Не (Настройки.НоменклатураИсходногоКачества.ПолучитьОбъект() = Неопределено) Тогда
					Форма.НоменклатураИсходногоКачества = Настройки.НоменклатураИсходногоКачества;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Настройки.Свойство("ВариантПоискаТоваровУстановлен") Тогда
			Форма.ВариантПоискаТоваров = "ПоУмолчанию";
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить страницу варианта навигации по списку номенклатуры.
	УстановитьСтраницуВариантаНавигации(Форма);
	
	ПриИзмененииИспользованияФильтров(Форма);
	
	СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора);
	
	Если ЭтоФормаПодбора Тогда
		СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма.Элементы.СтрокаПоискаХарактеристики.СписокВыбора);
		СпискиВыбораКлиентСервер.Загрузить("ИсторияВыбораСегментовНоменклатуры", Форма.Элементы.СегментНоменклатуры.СписокВыбора);
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Форма. Элементы.СтрокаПоискаНоменклатураПартнера.СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает принак необходимости сохранения настроек формы подбора в хранилище настроек.
//
// Параметры:
//	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
//
Процедура УстановитьНеобходимостьСохраненияНастроек(Форма)
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма)
			И Форма.НастройкиФормыПриОткрытии <> Неопределено Тогда
		Форма.НастройкиФормыПриОткрытии.ТребуетсяСохранение = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияФормПоПараметрам

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по типу номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма)
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если ЭтоФормаПодбораВДокументыПродажи Или ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		Если Форма.Параметры.ОтборПоТипуНоменклатуры = Неопределено Тогда
			Возврат;
		Иначе
			ОтборПоТипуНоменклатурыИзПараметров = Форма.Параметры.ОтборПоТипуНоменклатуры;
		КонецЕсли;
		
	ИначеЕсли ЭтоФормаВыбораНоменклатуры Тогда
		
		Форма.Параметры.Отбор.Свойство("ТипНоменклатуры", ОтборПоТипуНоменклатурыИзПараметров);
		Форма.Параметры.Отбор.Удалить("ТипНоменклатуры");
		
		Если ОтборПоТипуНоменклатурыИзПараметров = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		ОтборПоТипуНоменклатуры = Форма.ОтборПоТипуНоменклатуры;
	Иначе
		ОтборПоТипуНоменклатуры = Новый СписокЗначений;
	КонецЕсли;
		
	// Параметр <ОтборПоТипуНоменклатуры> произвольного типа. Может быть передан как отдельный тип
	// номенклатуры, так и массив типов.
	Если ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		
		ОтборПоТипуНоменклатуры.Добавить(ОтборПоТипуНоменклатурыИзПараметров);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого Значение Из ОтборПоТипуНоменклатурыИзПараметров Цикл
			ОтборПоТипуНоменклатуры.Добавить(Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("Массив") Тогда
		
		ОтборПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатурыИзПараметров);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатурыИзПараметров) = Тип("СписокЗначений") Тогда
		
		ОтборПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатурыИзПараметров.ВыгрузитьЗначения());
		
	Иначе
		Возврат;
	КонецЕсли;
	
	СодержитНабор = Ложь;
	ОтборыПоТипуНоменклатурыБезНаборов = Новый СписокЗначений;
	ОтборыПоТипуНоменклатурыБезНаборов.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры.ВыгрузитьЗначения());
	Если ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор) <> Неопределено Тогда
		СодержитНабор = Истина;
		ОтборыПоТипуНоменклатурыБезНаборов.Удалить(ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор));
	КонецЕсли;
	
	Если Не СодержитНабор Тогда
		
		// Установить отбор по типам номенклатуры для списка номенклатуры.
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокНоменклатура, "ТипНоменклатуры", ОтборПоТипуНоменклатуры, 
			ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборПоТипуНоменклатуры.Количество() > 0));
		
	Иначе
		
		ОграничиватьНаборыПоУслугам = ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Услуга) <> Неопределено
		                          ИЛИ ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Работа) <> Неопределено;
		ОграничиватьНаборыПоТоварам = ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.МногооборотнаяТара) <> Неопределено
		                          ИЛИ ОтборыПоТипуНоменклатурыБезНаборов.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Товар) <> Неопределено;
		
		Если ОграничиватьНаборыПоУслугам И Не ОграничиватьНаборыПоТоварам Тогда
			
			ГруппаОтбораНаборы = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
				"ОтборПоТипуНоменклатуры", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				
			// Тип номенклатуры Товары и Услуги, Тара
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборы,
				"ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов, ВидСравненияКомпоновкиДанных.ВСписке,,(ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0));
				
			// Наборы без характеристик
			ГруппаОтбораНаборыВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбораНаборы.Элементы,
				"ГруппаОтбораНаборыВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"СодержитУслуги", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"СодержитТовары", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			// Наборы с характеристиками
			ГруппаОтбораНаборыВложеннаяСХарактеристиками = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбораНаборы.Элементы,
				"ГруппаОтбораНаборыСХарактеристикамиВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложеннаяСХарактеристиками,
				"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложеннаяСХарактеристиками,
				"ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
				
			Если ЭтоФормаПодбораВДокументыПродажи Тогда
				
				ГруппаОтбораНаборы = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
					"ОтборПоТипуНоменклатуры", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
					
				// Тип номенклатуры Товары и Услуги, Тара
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборы,
					"ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов, ВидСравненияКомпоновкиДанных.ВСписке,,(ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0));
					
				// Наборы без характеристик
				ГруппаОтбораНаборыВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ГруппаОтбораНаборы.Элементы,
					"ГруппаОтбораНаборыВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"СодержитУслуги", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"СодержитТовары", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		Если Не ОграничиватьНаборыПоУслугам И ОграничиватьНаборыПоТоварам Тогда
			
			ГруппаОтбораНаборы = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
				"ОтборПоТипуНоменклатуры", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
				
			// Тип номенклатуры Товары и Услуги, Тара
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборы,
				"ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов, ВидСравненияКомпоновкиДанных.ВСписке,,(ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0));
				
			// Наборы без характеристик
			ГруппаОтбораНаборыВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбораНаборы.Элементы,
				"ГруппаОтбораНаборыВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"СодержитУслуги", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"СодержитТовары", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложенная,
				"ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			// Наборы с характеристиками
			ГруппаОтбораНаборыВложеннаяСХарактеристиками = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаОтбораНаборы.Элементы,
				"ГруппаОтбораНаборыСХарактеристикамиВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложеннаяСХарактеристиками,
				"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				ГруппаОтбораНаборыВложеннаяСХарактеристиками,
				"ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
				
			Если ЭтоФормаПодбораВДокументыПродажи Тогда
				
				ГруппаОтбораНаборы = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
					"ОтборПоТипуНоменклатуры", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
					
				// Тип номенклатуры Товары и Услуги, Тара
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборы,
					"ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов, ВидСравненияКомпоновкиДанных.ВСписке,,(ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0));
					
				// Наборы без характеристик
				ГруппаОтбораНаборыВложенная = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ГруппаОтбораНаборы.Элементы,
					"ГруппаОтбораНаборыВложенная", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Набор, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"СодержитУслуги", Ложь, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					ГруппаОтбораНаборыВложенная,
					"СодержитТовары", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
					
			КонецЕсли;
				
		КонецЕсли;
		Если ОграничиватьНаборыПоУслугам И ОграничиватьНаборыПоТоварам Тогда
			
			// Установить отбор по типам номенклатуры для списка номенклатуры.
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.СписокНоменклатура, "ТипНоменклатуры", ОтборПоТипуНоменклатуры, 
				ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборПоТипуНоменклатуры.Количество() > 0));
			
		КонецЕсли;
	КонецЕсли;
	
	// Установить параметры выбора у номенклатуры корзины.
	Если ОтборыПоТипуНоменклатурыБезНаборов.Количество() > 0
		И (ЭтоФормаПодбораВДокументыПродажи Или ЭтоФормаПодбораВДокументыЗакупки) Тогда
		
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов));
		
		Форма.Элементы.КорзинаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ТипНоменклатуры", ОтборыПоТипуНоменклатурыБезНаборов));
			
			Форма.Элементы.НоменклатураПартнера.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по виду номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьОтборПоВидНоменклатурыПоПараметрам(Форма) Экспорт

	ОтборПоВидуНоменклатуры = Неопределено;
	Форма.Параметры.Отбор.Свойство("ВидНоменклатуры", ОтборПоВидуНоменклатуры);
	Форма.Параметры.Отбор.Удалить("ВидНоменклатуры");
	
	Если ОтборПоВидуНоменклатуры = Неопределено Или Не ЗначениеЗаполнено(ОтборПоВидуНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьФильтры = Истина; 
	Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам;
	Форма.ВидНоменклатуры = ОтборПоВидуНоменклатуры;

	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	УстановитьСтраницуВариантаНавигации(Форма);
	ПриИзмененииИспользованияФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбработкиОповещений

// Заполняет реквизит формы "ТекущаяСтрокаНоменклатуры" значениями реквизитов элемента номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	Номенклатура - СправочникСсылка.Номенклатура - созданный элемент номенклатуры.
//
Процедура ЗаполнитьПараметрыНовойНоменклатуры(Форма, Номенклатура)
	
	Форма.НоваяНоменклатура = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
	
	РеквизитыНоменклатуры = "Ссылка, ЭтоГруппа, Родитель, ПометкаУдаления, ВидНоменклатуры, ЕдиницаИзмерения, 
	|ИспользованиеХарактеристик, ТипНоменклатуры, ЦеноваяГруппа";
	
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, РеквизитыНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(Форма.НоваяНоменклатура, ЗначенияРеквизитовНоменклатуры);
	
	Форма.НоваяНоменклатура.Номенклатура = Номенклатура;
	Форма.НоваяНоменклатура.ХарактеристикиИспользуются = 
		Не (ЗначенияРеквизитовНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	Форма.НоваяНоменклатура.ЭтоТовар  = (ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
										Или ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	Форма.НоваяНоменклатура.ЭтоУслуга = (ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
										Или ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	Форма.НоваяНоменклатура.ВладелецХарактеристик = ВладелецХарактеристикНоменклатуры(Номенклатура);
	
КонецПроцедуры

// Заполняет реквизит формы "НоваяХарактеристика" значениями реквизитов новой характеристики.
//
// Параметры:
//	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
//	Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика.
//
Процедура ЗаполнитьПараметрыНовойХарактеристики(Форма, Характеристика)
	
	Форма.НоваяХарактеристика = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	
	Форма.НоваяХарактеристика.Ссылка = Характеристика;
	Форма.НоваяХарактеристика.Характеристика = Характеристика;
	
	Если ЗначениеЗаполнено(Форма.НоваяНоменклатура) Тогда
		ПараметрыНоменклатуры = Форма.НоваяНоменклатура;
	Иначе
		ПараметрыНоменклатуры = Форма.ТекущаяСтрокаНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма.НоваяХарактеристика, ПараметрыНоменклатуры);
	
КонецПроцедуры

// Проверяет соответствует ли тип номенклатуры созданного товара типу номенклатуры
// установленного в качестве отбора списка номенклатуры в форме подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Функция НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма)
	
	Перем ТипыНоменклатурыОтбора;
	
	Если Не ЗначениеЗаполнено(Форма.НоваяНоменклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если отбор по типу номенклатуры не установлен, то в корзину можно добавлять
	// товары любого типа.
	Если Не УстановленОтборПоТипуНоменклатуры(Форма, ТипыНоменклатурыОтбора) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипНоменклатурыТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.НоваяНоменклатура.ВидНоменклатуры, "ТипНоменклатуры");
	
	// Если тип номенклатуры товара отсутствует в списке типов установленных в качестве
	// типов отбора, то, стало быть, не соответствует.
	Если ТипыНоменклатурыОтбора.НайтиПоЗначению(ТипНоменклатурыТовара) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, установлен ли отбор по типу номенклатуры у списка номенклатуры.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	ТипыНоменклатурыОтбора - Неопределено - переменная в которую передается значение установленного 
//		отбора по типу номенклатуры. В качестве значений установленного отбора всегда используется
//		список значений. Отбор по типу номенклатуры устанавливается в процедуре 
//		<УстановитьОтборПоТипуНоменклатурыПоПараметрам>.
//
// Возвращаемое значение:
//	Булево - Истина - установлен, Ложь - нет.
//
Функция УстановленОтборПоТипуНоменклатуры(Форма, ТипыНоменклатурыОтбора = Неопределено)
	
	Для Каждого ЭлементОтбора Из ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы Цикл
		
		Если ЭлементОтбора.Представление = "ОтборПоТипуНоменклатуры"
			И ЭлементОтбора.Использование Тогда
			
			Если Не ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					
					Если ЭлементОтбора.ПравоеЗначение.Количество() > 0 Тогда
						
						ТипыНоменклатурыОтбора = ЭлементОтбора.ПравоеЗначение;
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				
				Если ЭлементОтбора.Элементы.Количество() > 0 И ТипЗнч(ЭлементОтбора.Элементы[0].ПравоеЗначение) = Тип("СписокЗначений") Тогда
					
					Если ЭлементОтбора.Элементы[0].ПравоеЗначение.Количество() > 0 Тогда
						
						ТипыНоменклатурыОтбора = ЭлементОтбора.Элементы[0].ПравоеЗначение;
						Возврат Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет поля "ЭтоТовар", "ЭтоУслуга" структуры ТоварДляДобавленияВКорзину.
//
// Параметры:
//	ТоварДляДобавленияВКорзину - Структура - параметры товара для добавления в корзину,
//	ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры.
//
Процедура ЗаполнитьСвойстваТовараДляДобавленияВКорзинуПоТипуНоменклатуры(ТоварДляДобавленияВКорзину, ТипНоменклатуры)
	
	ТоварДляДобавленияВКорзину.ЭтоТовар = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ТоварДляДобавленияВКорзину.ЭтоУслуга = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
КонецПроцедуры

// Анализирует настройки формы подбора в части указания склада и заполняет
// поле "Склад" добавляемого в корзину товара.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура ЗаполнитьСкладТовараДляДобавленияВКорзину(Форма)
	
	Если Не Форма.ТоварДляДобавленияВКорзину.ЭтоТовар Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСкладов = Форма.Склады.Количество();
	
	Если Не КоличествоСкладов = 1 Или КоличествоСкладов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Форма.Склады.Получить(0).Значение;
	
	Если Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
		Форма.ТоварДляДобавленияВКорзину.Склад = Склад;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Устанавливает активным элементом на форме список номенклатуры
// или список характеристик. Используется в случае изменения значений фильтров.
// В этом случае теряется фокус, установленный на списке, и при попытке выбора
// товара активизируется другой элемент.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьАктивныйСписокНаФорме(Форма)
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
	
	ТекущийЭлемент = Форма.Элементы[ИмяСпискаНоменклатуры];
	Если Форма.НавигацияПоХарактеристикам Тогда
		ТекущийЭлемент = Форма.Элементы[ИмяСпискаХарактеристик];
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Устанавливает градации качества в списке
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора.
//
Процедура УстановитьЭлементыСпискаЗначенийКачества(Форма)
	
	Форма.СписокКачества.Очистить();

	Если Форма.НоменклатураИсходногоКачества.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыДругогоКачества.ГрадацияКачества
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыДругогоКачества.ГрадацияКачества.Порядок";
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Форма.СписокКачества.Добавить(Выборка.ГрадацияКачества);
	КонецЦикла;
	
	УстановитьПометкуГрадацииКачества(Форма);
	
КонецПроцедуры

// Формирует структуры для передачи параметров в центральную функцию получения параметров скидок/наценок
// и вызывает ее. Возвращает адрес данных для расчета ручных скидок наценок во временном хранилище.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	ПараметрыТовара - Структура - параметры товара.
//
// Возвращаемое значение:
//	Строка - Адрес данных во временном хранилище.
//
Функция АдресДанныхДляРасчетаРучныхСкидокДляПодбораВоВременномХранилище(Форма, ПараметрыТовара) Экспорт
	
	СтруктураОбъекта = Новый Структура;
	
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Соглашение") Тогда
		СоглашениеСКлиентом = Форма.Объект.Соглашение;
	Иначе
		СоглашениеСКлиентом = Форма.Соглашение;
	КонецЕсли;
	
	СтруктураОбъекта.Вставить("Соглашение", СоглашениеСКлиентом);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)));
	ТаблицаТоваров.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
	
	СтруктураОбъекта.Вставить("Товары", ТаблицаТоваров);
	
	ПараметрыДанных = Новый Структура("Объект", СтруктураОбъекта);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		СтруктураПараметров = СкидкиНаценкиЗаполнениеСервер.НовыйПараметрыАдресДанныхДляРасчетаРучныхСкидок();
		СтруктураПараметров.ИмяТаблицы = "Товары";
		СтруктураПараметров.ТолькоДляВыделенныхСтрок = Ложь;
		АдресДанных = СкидкиНаценкиЗаполнениеСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилищеЗакупки(
			ПараметрыДанных,Форма.УникальныйИдентификатор, СтруктураПараметров);
	Иначе
		СтруктураПараметров = СкидкиНаценкиЗаполнениеСервер.НовыйПараметрыАдресДанныхДляРасчетаРучныхСкидок();
		СтруктураПараметров.ИмяТаблицы = "Товары";
		СтруктураПараметров.ТолькоДляВыделенныхСтрок = Ложь;
		АдресДанных = СкидкиНаценкиЗаполнениеСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(
			ПараметрыДанных,Форма.УникальныйИдентификатор,СтруктураПараметров);
	КонецЕсли;
	
	Возврат АдресДанных;
	
КонецФункции

// Возвращает флаг наличия значений цен по списку видов цен дата которых превышает
// дату подбора товаров. Необходима для принятия решения о том следует
// ли устанавливать параметр "Период" при обращении к срезу последних регистра
// сведений "ЦеныНоменклатуры". Без установки параметра запрос будет выполняться быстрее.
//
// Параметры:
//	ДатаПодбора - Дата - дата подбора товаров,
//	ВидыЦен - Массив из СправочникСсылка.ВидыЦен, 
//		СписокЗначений из СправочникСсылка.ВидыЦен - список видов цен.
//	ИспользуетсяЦенообразование25 - Булево - Истина, сипользуется новое ценообразование
//
// Возвращаемое значение:
//	Булево - Истина - есть значения цен установленные будущей датой,
//		Ложь - нет.
//
Функция ЕстьЗначенияЦенПозжеДатыПодбора(ДатаПодбора, ВидыЦен, ИспользуетсяЦенообразование25 = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Период КАК Период
	|ИЗ
	|	&ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.ВидЦены В(&ВидыЦен)
	|	И ЦеныНоменклатуры.Период > &ДатаПодбора";
	
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	Запрос.УстановитьПараметр("ДатаПодбора", КонецДня(ДатаПодбора));
	
	Если ИспользуетсяЦенообразование25 Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЦеныНоменклатуры", "РегистрСведений.ЦеныНоменклатуры25");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЦеныНоменклатуры", "РегистрСведений.ЦеныНоменклатуры");
	КонецЕсли;
	
	Возврат Не Запрос.Выполнить().Пустой(); 
	
КонецФункции

// Возвращает флаг наличия значений цен номенклатуры дата которых превышает
// дату подбора товаров. Необходима для принятия решения о том следует
// ли устанавливать параметр "Период" при обращении к срезу последних регистра
// сведений "ЦеныНоменклатурыПоставщиков". Без установки параметра запрос будет выполняться быстрее.
//
// Параметры:
//	ДатаПодбора - Дата - дата подбора товаров.
//
// Возвращаемое значение:
//	Булево - Истина - есть значения цен установленные будущей датой,
//		Ложь - нет.
//
Функция ЕстьЗначенияЦенНоменклатурыПозжеДатыПодбора(ДатаПодбора) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатурыПоставщиков.Период КАК Период
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков КАК ЦеныНоменклатурыПоставщиков
	|ГДЕ
	|	ЦеныНоменклатурыПоставщиков.Период > &ДатаПодбора";
	
	Запрос.УстановитьПараметр("ДатаПодбора", КонецДня(ДатаПодбора));
	
	УстановитьПривилегированныйРежим (Истина);
	Возврат Не Запрос.Выполнить().Пустой(); 
	
КонецФункции

// Возвращает массив видов цен номенклатуры которые указаны в соглашении с клиентом.
//
// Параметры:
//	СоглашениеСКлиентом - СправочникСсылка.СоглашенияСКлиентами - соглашение с клиентом.
//
// Возвращаемое значение:
//	Массив - массив видов цен соглашения.
//
Функция ВидыЦенПоСоглашениюСКлиентом(СоглашениеСКлиентом)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоглашениеШапка.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ВидЦены
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеновыеГруппы.ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК ЦеновыеГруппы
	|ГДЕ
	|	ЦеновыеГруппы.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение", СоглашениеСКлиентом);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦен");
	
КонецФункции
 
Функция ВариантРасчетаЦен(Форма)
	
	ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен;
	
	Если Форма.РежимОтбораДляРозничныхПродаж Тогда
		
		ЗначенияВидовЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.ОбъектХраненияУсловийПродаж, "РозничныйВидЦены, ИндивидуальныйВидЦены");					
		
		Если ЗначениеЗаполнено(ЗначенияВидовЦен.РозничныйВидЦены) И ЗначениеЗаполнено(ЗначенияВидовЦен.ИндивидуальныйВидЦены) Тогда
			ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеУточненныеЦеныПоНоменклатуре;
		ИначеЕсли ЗначениеЗаполнено(ЗначенияВидовЦен.РозничныйВидЦены) Или ЗначениеЗаполнено(ЗначенияВидовЦен.ИндивидуальныйВидЦены) Тогда
			ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке;
		КонецЕсли;
		
	ИначеЕсли Форма.ИспользоватьСоглашенияСКлиентами Тогда 
		
		ЗначенияВидовЦен = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Форма.ОбъектХраненияУсловийПродаж, "ВидЦен, ИндивидуальныйВидЦены");
		
		Если ЗначениеЗаполнено(ЗначенияВидовЦен.ВидЦен) И ЗначениеЗаполнено(ЗначенияВидовЦен.ИндивидуальныйВидЦены) Тогда
			ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеУточненныеЦеныПоНоменклатуре;
		ИначеЕсли ЗначениеЗаполнено(ЗначенияВидовЦен.ВидЦен) Или ЗначениеЗаполнено(ЗначенияВидовЦен.ИндивидуальныйВидЦены) Тогда
			ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ВариантРасчетаЦен;
	
КонецФункции

// Возвращает массив видов цен номенклатуры с единственным элементом, в случае если можно его определить однозначно.
// Используется для получения вида цен по умолчанию в режиме отключенных соглашений с клиентами.
//
// Параметры:
//	ЦенаВключаетНДС - Булево - Признак включения НДС в цену.
//
// Возвращаемое значение:
//	Массив - массив видов цен соглашения.
//
Функция ВидыЦенПоУмолчанию(ЦенаВключаетНДС)
	
	МассивВидовЦен = Новый Массив; 
	
	ПараметрыВыбора = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
	ПараметрыВыбора.ЦенаВключаетНДС                           = ЦенаВключаетНДС;
	ПараметрыВыбора.ИспользоватьПриПродаже = Истина;
	
	ВидЦенПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбора);
	Если ЗначениеЗаполнено(ВидЦенПоУмолчанию) Тогда
		МассивВидовЦен.Добавить(ВидЦенПоУмолчанию);
	КонецЕсли;
	
	Возврат МассивВидовЦен;
	
КонецФункции

// Параметры:
// 	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
// 	ЭтоФормаПодбораВДокументыЗакупки - Булево
//
Процедура УстановитьУсловноеОформлениеДинамическихСписков(Форма, ЭтоФормаПодбораВДокументыЗакупки = Ложь) Экспорт
	
	ЭтоПартнер = ПраваПользователяПовтИсп.ЭтоПартнер();
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;	
	
	Если Не ЭтоПартнер 
		И Не Форма.СкрыватьКомандуОстаткиНаСкладах Тогда
	
		Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Формат = "ЧДЦ=3";
		Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Формат = "ЧДЦ=3";

		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ВНаличииОстаток");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьОстаткиНаСкладах");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьОстаткиНаСкладах");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
		
	КонецЕсли;
	
	//
	
	Если Не ЭтоПартнер 
		И Форма.ОтображатьОстаткиНаСкладах Тогда

		Элементы.СписокРасширенныйПоискНоменклатураДоступно.Формат = "ЧДЦ=3";
		Элементы.СписокСтандартныйПоискНоменклатураДоступно.Формат = "ЧДЦ=3";
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураДоступно.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.Доступно");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураДоступно.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьОстаткиНаСкладах");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
		
	КонецЕсли;
	
	//
	
	Если Не Форма.РежимПодбораБезСуммовыхПараметров Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураЦена.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураЦена.Имя);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2");

		//

		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураЦена.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураЦена.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатура.ИспользованиеХарактеристик");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
		СписокЗначений.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
		СписокЗначений.Добавить(Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Ложь, Ложь, Ложь, Ложь, ));
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "...");
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиЦена.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиЦена.Имя);
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=2");
		
	КонецЕсли;
	
	//
	
	Если Не ЭтоПартнер
		И Не Форма.СкрыватьКомандуОстаткиНаСкладах Тогда
		
		Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Формат = "ЧДЦ=3";
		Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Формат = "ЧДЦ=3";
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ВНаличииОстаток");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьОстаткиНаСкладах");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьОстаткиНаСкладах");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
		
	КонецЕсли;
	
	//
	
	Если Не ЭтоПартнер
		И Форма.ОтображатьОстаткиНаСкладах Тогда
		
		Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Формат = "ЧДЦ=3";
		Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Формат = "ЧДЦ=3";
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.Доступно");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = 0;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокХарактеристики.ТипНоменклатуры");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
		СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Набор);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиДоступно.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиДоступно.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьОстаткиНаСкладах");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
		
	КонецЕсли;
	
	//
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураПартнера.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураПартнера.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатураПартнера.Номенклатура");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатураПартнера.ЭтоГруппа");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.RosyBrown);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураПартнераНоменклатура.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураПартнераНоменклатура.Имя);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатураПартнера.Номенклатура");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокНоменклатураПартнера.ЭтоГруппа");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "?");
		
	КонецЕсли;
	
	//
	
	Если Не ЭтоПартнер 
		И Не Форма.СкрыватьКомандуОстаткиНаСкладах Тогда
	
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискНоменклатураВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокРасширенныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокСтандартныйПоискХарактеристикиВНаличииОстаток.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтображатьОстаткиНаСкладах");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не выбран склад>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	КонецЕсли;

	//++ Локализация
	ИнтеграцияСМаркетплейсамиСерверЛокализация.УстановитьУсловноеОформлениеДинамическихСписков(Форма);
	//-- Локализация

КонецПроцедуры

// Параметры:
// 	Форма - см. ПриСозданииФормыПодбораНаСервере.Форма
// 	ЭтоФормаПодбораВДокументыЗакупки - Булево
//
Процедура УстановитьУсловноеОформлениеЭлементовФормПодборов(Форма, ЭтоФормаПодбораВДокументыЗакупки = Ложь) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы = Форма.Элементы;
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтрокаПоискаНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоискНоменклатурыНеУдачный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтрокаПоискаХарактеристики.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоискХарактеристикНеУдачный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);
	
	//
	
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "КорзинаНоменклатураЕдиницаИзмерения";
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "Объект.Корзина.Упаковка";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, 
																"КорзинаХарактеристика",
																"Объект.Корзина.ХарактеристикиИспользуются");

	//
	
	Если Форма.ОтображатьОстаткиНаСкладах
				И Не (Форма.РежимПодбораБезКоличественныхПараметров
					Или Форма.СкрыватьКомандуОстаткиНаСкладах) Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиТоваровПериодОписание.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиТоваров.Период");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ОтборЭлемента.ПравоеЗначение = НачалоДня(ТекущаяДатаСеанса());

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиТоваров.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиТоваров.СкладДоступенДляВыбора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;

		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
		
		//
		
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			
			//
			
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОстаткиТоваровПоставщика.Имя);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОстаткиТоваровПоставщика.СкладДоступенДляВыбора");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
			
			//
		
		КонецЕсли;
		
	КонецЕсли;

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ФиксированноеЗначение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Ложь, Ложь, Истина, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.Отбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИерархияНоменклатуры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидыНоменклатуры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКачества.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовОтбор.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоОтборовПредставлениеОтбора.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВариантНавигации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокВариантовНавигации = Новый СписокЗначений;
	СписокВариантовНавигации.Добавить(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам);
	СписокВариантовНавигации.Добавить(Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам);
	ОтборЭлемента.ПравоеЗначение = СписокВариантовНавигации;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НавигацияПоХарактеристикам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоОтборов.ОтборХарактеристик");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "СписокСтандартныйПоискНоменклатураЕдиницаИзмерения";
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "СписокНоменклатура.Упаковка";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
	
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "СписокРасширенныйПоискНоменклатураЕдиницаИзмерения";
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "СписокНоменклатура.Упаковка";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
	
	//
	
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "СписокСтандартныйПоискХарактеристикиЕдиницаИзмерения";
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "СписокХарактеристики.Упаковка";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
	
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "СписокРасширенныйПоискХарактеристикиЕдиницаИзмерения";
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "СписокХарактеристики.Упаковка";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
	
	//

	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
		ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "СписокСтандартныйПоискНоменклатураПартнера";
		ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "СписокНоменклатура.Упаковка";
		НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
		
		ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
		ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "СписокРасширенныйПоискНоменклатураПартнера";
		ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "СписокНоменклатура.Упаковка";
		НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
	КонецЕсли;
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВидНоменклатуры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборЦенаОт.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтборЦенаДо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборЦенаОт");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтборЦенаДо");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборЦенаДо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ПолеСОшибкойФон);

	
КонецПроцедуры	

// Возвращает владельца характеристик номенклатуры. В зависимости от настроек
// вида номенклатуры это может быть либо вид номенклатуры, либо номенклатура.
//
// Параметры:
//	Номенклатура - СправочникСсылка.Номенклатура - номенклатура
//
// Возвращаемое значение:
//	СправочникСсылка.Номенклатура, СправочникСсылка.ВидыНоменклатуры, Неопределено - 
//
Функция ВладелецХарактеристикНоменклатуры(Номенклатура)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ВидНоменклатуры,ИспользованиеХарактеристик,ВладелецХарактеристик");
	
	Если Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
		Возврат Реквизиты.ВидНоменклатуры;
	ИначеЕсли Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		Возврат Номенклатура;
	ИначеЕсли Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры Тогда
		Возврат Реквизиты.ВладелецХарактеристик;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормированияТекстовЗапросов

// Возвращает массив подстрок поиска для поиска и замены в шаблоне текста запроса списка формы подбора.
//
// Возвращаемое значение:
//	Массив - массив строк.
//
Функция ПараметрыШаблонаТекстаЗапроса()
	
	ПараметрыШаблона = Новый Массив();
	
	ПараметрыШаблона.Добавить("&СправочникНоменклатура1");
	ПараметрыШаблона.Добавить("&СправочникХарактеристики1");
	ПараметрыШаблона.Добавить("&СправочникНоменклатураКонтрагентов1");
	
	ПараметрыШаблона.Добавить("&СправочникНоменклатураОбщиеПоля,");
	ПараметрыШаблона.Добавить("&СправочникХарактеристикиОбщиеПоля,");
	ПараметрыШаблона.Добавить("&СправочникНоменклатураКонтрагентовОбщиеПоля,");
	
	ПараметрыШаблона.Добавить("&ОтборНоменклатурыПоГруппе");
	ПараметрыШаблона.Добавить("И &ОтборНоменклатурыПоЦене1");
	ПараметрыШаблона.Добавить("И &ОтборНоменклатурыПоЦене25");
	ПараметрыШаблона.Добавить("И &ОтборНоменклатурыПоСегменту");
	
	ПараметрыШаблона.Добавить("СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА");
	ПараметрыШаблона.Добавить("СОЕДИНЕНИЕ &КурсВалютыИндивидуальныеЦены ПО ИСТИНА");
	ПараметрыШаблона.Добавить("СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА");
	ПараметрыШаблона.Добавить("СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА");
	
	ПараметрыШаблона.Добавить("СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА");
	ПараметрыШаблона.Добавить("СОЕДИНЕНИЕ &ИндивидуальныеЦеныНоменклатуры ПО ИСТИНА");
	
	ПараметрыШаблона.Добавить("&ЦеныНоменклатурыПоставщиковСрезПоследнихНаДату");
	
	ПараметрыШаблона.Добавить("&ОтборХарактеристикПоВладельцу");
	ПараметрыШаблона.Добавить("И &ОтборХарактеристикПоСегменту");
	
	ПараметрыШаблона.Добавить("СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА");
	ПараметрыШаблона.Добавить("&ВсеОстаткиВНаличии");
	ПараметрыШаблона.Добавить("&ВсеОстаткиДоступно");
	
	ПараметрыШаблона.Добавить("&ВариантРасчетаЦеныНабора");
	ПараметрыШаблона.Добавить("&НаборСодержитТовары");
	ПараметрыШаблона.Добавить("&НаборСодержитУслуги");
	
	Возврат ПараметрыШаблона;
	
КонецФункции

// Возвращает текст запроса для динамического списка формы подбора.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма подбора,
//	ТипСписка - Строка - тип списка формы подбора.
//
// Возвращаемое значение:
//	Строка - текст запроса списка формы подбора.
//
Функция ТекстЗапросаСпискаФормыПодбора(Форма, ТипСписка)
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		ЭтоПартнер = ПраваПользователяПовтИсп.ЭтоПартнер();
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			
			Если ЭтоПартнер Тогда
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыДляВнешнихПользователей(Форма.ИспользуетсяЦенообразование25);
			ИначеЕсли Форма.РежимОтбораПоАссортименту Тогда
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыСОтборомПоАссортименту();
			Иначе
				Если Форма.ИспользуетсяЦенообразование25 Тогда
					ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрам(Форма);
				Иначе
					ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПокупателем(Форма);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			
			Если ЭтоПартнер Тогда
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикДляВнешнихПользователей(Форма.ИспользуетсяЦенообразование25);
			ИначеЕсли Форма.РежимОтбораПоАссортименту Тогда
				ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикСОтборомПоАссортименту();
			Иначе
				Если Форма.ИспользуетсяЦенообразование25 Тогда
					ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрам(Форма);
				Иначе
					ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрамСоглашенияСПокупателем(Форма);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению";
		Если ЗначениеЗаполнено(Форма.Объект.Соглашение) Тогда
			Форма.ВидЦеныПоставщика = Форма.Объект.Соглашение.ВидЦеныПоставщика;
		Иначе
			ВариантРасчетаЦенПоставщика = "БезЦен";
		КонецЕсли;
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		ИначеЕсли ТипСписка = "СписокНоменклатураПартнера" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПартнераПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		КонецЕсли; 
		
	КонецЕсли;
	
#Область ПодставитьЗначенияПараметровВШаблонТекстаЗапроса
	НесколькоСкладов = (Форма.Склады.Количество() > 1);
	
	Соглашение = Форма.Соглашение;
	ДатаПодбора = Форма.Дата;
	
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		ЕстьЦеныНоменклатурыПоставщиковВБудущем = Ложь;
		ЕстьЦеныВБудущем = Форма.ЕстьЦеныВБудущем;
		НесколькоВидовЦен = Форма.ВидыЦен.Количество() > 1;
		ОтображатьОстаткиПоНазначению = ЗначениеЗаполнено(Форма.ОтборПоНазначениюТекущий);
		Если Форма.ОтборПоТипуНоменклатуры.НайтиПоЗначению(Перечисления.ТипыНоменклатуры.Набор) <> Неопределено
			ИЛИ Форма.ОтборПоТипуНоменклатуры.Количество() = 0 Тогда
			ИспользоватьКомплекты = ПолучитьФункциональнуюОпцию("ИспользоватьНаборы");
		Иначе
			ИспользоватьКомплекты = Ложь;
		КонецЕсли;
		
		ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(Форма.Дата);
		НеИспользоватьВидыЦенПоУсловиюПродаж = Форма.НеИспользоватьВидыЦенПоУсловиюПродаж;
	Иначе
		
		ЕстьЦеныНоменклатурыПоставщиковВБудущем = Форма.ЕстьЦеныНоменклатурыПоставщиковВБудущем;
		ЕстьЦеныВБудущем = Ложь;
		НесколькоВидовЦен = Ложь;
		ОтображатьОстаткиПоНазначению = Ложь;
		ИспользоватьКомплекты = Ложь;
		
		ИспользуетсяЦенообразование25 = Ложь;
		НеИспользоватьВидыЦенПоУсловиюПродаж = Ложь;
		
	КонецЕсли; 
	
	ИспользоватьХарактеристикиНоменклатуры = Ложь;
	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		Если Форма.ИспользоватьФильтры
			И (Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоСвойствам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидамИСвойствам
				Или Форма.ВариантНавигации = Перечисления.ВариантыНавигацииВФормахНоменклатуры.ПоВидам) 
			И ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда	
			ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ВидНоменклатуры,"ИспользованиеХарактеристик");
			Если ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда	
				ИспользоватьХарактеристикиНоменклатуры = Истина;
			КонецЕсли;
		Иначе	
			ИспользоватьХарактеристикиНоменклатуры = Истина;
		КонецЕсли;	
	КонецЕсли;		
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("ТипСписка",ТипСписка);
	ПараметрыЗамены.Вставить("НесколькоСкладов",НесколькоСкладов);
	ПараметрыЗамены.Вставить("НесколькоВидовЦен",НесколькоВидовЦен);
	ПараметрыЗамены.Вставить("ЕстьЦеныВБудущем",ЕстьЦеныВБудущем);
	ПараметрыЗамены.Вставить("ЕстьЦеныНоменклатурыПоставщиковВБудущем", ЕстьЦеныНоменклатурыПоставщиковВБудущем);
	ПараметрыЗамены.Вставить("ИспользоватьХарактеристикиНоменклатуры",ИспользоватьХарактеристикиНоменклатуры);
	ПараметрыЗамены.Вставить("ОтображатьОстаткиПоНазначению",ОтображатьОстаткиПоНазначению);
	ПараметрыЗамены.Вставить("РежимПодбораБезСуммовыхПараметров", Форма.РежимПодбораБезСуммовыхПараметров);
	ПараметрыЗамены.Вставить("ОтображатьОстаткиНаСкладах", Форма.ОтображатьОстаткиНаСкладах);
	ПараметрыЗамены.Вставить("ИспользоватьКомплекты", ИспользоватьКомплекты);
	ПараметрыЗамены.Вставить("ИспользуетсяЦенообразование25", ИспользуетсяЦенообразование25);
	ПараметрыЗамены.Вставить("НеИспользоватьВидыЦенПоУсловиюПродаж", НеИспользоватьВидыЦенПоУсловиюПродаж);
	
	МассивПодстрокПоиска = ПараметрыШаблонаТекстаЗапроса();
	
	Для каждого ПодстрокаПоиска Из МассивПодстрокПоиска Цикл
		
		ПодстрокаЗамены = ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса(ПодстрокаПоиска, ПараметрыЗамены);
		ШаблонТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
#КонецОбласти	

	//++ Локализация
	ИнтеграцияСМаркетплейсамиСерверЛокализация.ДополнитьТекстЗапросаДляМаркетплейсов(Форма, ШаблонТекстЗапроса, ТипСписка);
	//-- Локализация

	Возврат ШаблонТекстЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса для списка номенклатуры в списке формы подбора документа "Чек ККМ".
//
// Параметры:
//	КонтролироватьАссортимент - Булево - признак включения ФО "Использовать ассортимент".
//
// Возвращаемое значение:
//	Строка - шаблон текста запроса.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыСОтборомПоАссортименту()
	
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	
	|	&СправочникНоменклатураОбщиеПоля,
	
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
	|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
	|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
	|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
	
	|ИЗ
	
	|	&СправочникНоменклатура1
	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				ОбъектПланирования = &ОбъектПланирования
	|			{(Номенклатура).* КАК Номенклатура}
	|			) КАК Ассортимент
	|		ПО СправочникНоменклатура.Ссылка = Ассортимент.Номенклатура
	|			И (Ассортимент.РазрешеныПродажи)
	
	|		СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
	|		СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
	|		И (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦены)
	
	|		СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
	|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
	
	|ГДЕ
	
	|	&ОтборНоменклатурыПоГруппе
	|	И &ОтборНоменклатурыПоСегменту
	
	|";
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса для списка характеристик в списке формы подбора документа "Чек ККМ".
//
// Параметры:
//	КонтролироватьАссортимент - Булево - признак включения ФО "Использовать ассортимент".
//
// Возвращаемое значение:
//	Строка - шаблон текста запроса.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикСОтборомПоАссортименту()
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	
	|	&СправочникХарактеристикиОбщиеПоля,
	
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
	|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
	|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
	|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
	
	|ИЗ
	
	|	&СправочникХарактеристики1
	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|			ОбъектПланирования = &ОбъектПланирования 
	|				И Номенклатура = &Номенклатура) КАК Ассортимент
	|		ПО Ассортимент.РазрешеныПродажи
	
	|		СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&Дата, День),
	|				Номенклатура = &Номенклатура
	|				{(Характеристика).* КАК Характеристика}
	|			) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦены)
	|			И (ЦеныНоменклатуры.Номенклатура = &Номенклатура)
	|			И (ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	
	|		СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
	|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
	|		СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
	
	|ГДЕ
	
	|	&ОтборХарактеристикПоВладельцу
	|	И &ОтборХарактеристикПоСегменту
	
	|";
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции


// Возвращает шаблон текста запроса списка номенклатуры для подбора в обработке формирования заказов внешними пользователями.
// 
// Параметры:
// 	ИспользуетсяЦенообразование25 - Булево - признак использования ценообразования версии 2.5
// Возвращаемое значение:
//	Строка - текст запроса.
Функция ШаблонТекстаЗапросаСпискаНоменклатурыДляВнешнихПользователей(ИспользуетсяЦенообразование25)
	
	// Из текста запроса исключается таблица "ВсеОстатки".
	Если ИспользуетсяЦенообразование25 Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ИндивидуальныеЦеныНоменклатуры.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ИндивидуальныеЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ИндивидуальныеЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ ЦеныНоменклатуры.Цена * ВЫБОР
		|				КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|			КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ИндивидуальныеЦеныНоменклатуры ПО ИСТИНА
		
		|	СОЕДИНЕНИЕ &КурсВалютыИндивидуальныеЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоЦене25
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	Иначе
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеШапка.ВидЦен
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеШапка.ВидЦен
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|					И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|					И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|					И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|						ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеШапка.ВидЦен
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоЦене1
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса списка характеристик для подбора в обработке формирования заказов внешними пользователями.
//
// Параметры:
// 	ИспользуетсяЦенообразование25 - Булево - признак использования ценообразования версии 2.5
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикДляВнешнихПользователей(ИспользуетсяЦенообразование25)
	
	Если Истина Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ИндивидуальныеЦеныНоменклатуры.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ИндивидуальныеЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ИндивидуальныеЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ ЦеныНоменклатуры.Цена * ВЫБОР
		|				КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|			КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		
		|		СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|		СОЕДИНЕНИЕ &ИндивидуальныеЦеныНоменклатуры ПО ИСТИНА
		
		|		СОЕДИНЕНИЕ &КурсВалютыИндивидуальныеЦены ПО ИСТИНА
		|		СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
	
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
	
	Иначе
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеШапка.ВидЦен
		|	КОНЕЦ КАК ВидЦены,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеШапка.ВидЦен
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|			И (&Номенклатура = СоглашениеТовары.Номенклатура)
		|			И (СоглашениеТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
		|			И (&ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
		
		|		СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|		И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|					ТОГДА СоглашениеТовары.ВидЦены
		|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					ТОГДА СоглашениеШапка.ВидЦен
		|			КОНЕЦ)
		
		|		СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|		СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры по варианту расчета цены.
//
// Параметры:
//	ВариантРасчетаЦен - ПеречислениеСсылка.ВариантыРасчетаЦенПоСоглашениямСКлиентами - вариант расчета цены.
//
// Возвращаемое значение:
//	Строка - текст запроса списка номенклатуры по варианту расчета цен соглашения с клиентом.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрам(Форма)
	
	ВариантРасчетаЦен = Форма.ВариантРасчетаЦен;
	
	Если ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	&ВидыЦен КАК ВидЦены,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ИндивидуальныеЦеныНоменклатуры.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ИндивидуальныеЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ИндивидуальныеЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ ЦеныНоменклатуры.Цена * ВЫБОР
		|				КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|			КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ИндивидуальныеЦеныНоменклатуры ПО ИСТИНА
		
		|	СОЕДИНЕНИЕ &КурсВалютыИндивидуальныеЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	КонецЕсли;
	
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ИндивидуальныеЦеныНоменклатуры.Упаковка",
		"ИндивидуальныеЦеныНоменклатуры.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции	
	
// Возвращает шаблон текста запроса списка характеристик для подборов в документы продажи.
//
// Параметры:
//	ВариантРасчетаЦен - ПеречислениеСсылка.ВариантыРасчетаЦенПоСоглашениямСКлиентами - вариант расчета цен.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрам(Форма)
	
	ВариантРасчетаЦен = Форма.ВариантРасчетаЦен;
	
	Если ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
		
		|	0 КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	&ВидыЦен КАК ВидЦены,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	Иначе
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|			ТОГДА ИндивидуальныеЦеныНоменклатуры.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,

		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ИндивидуальныеЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ИндивидуальныеЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ ЦеныНоменклатуры.Цена * ВЫБОР
		|				КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|								ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|					ИНАЧЕ 1
		|				КОНЕЦ
		|			КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникХарактеристики1
	
		|		СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|		СОЕДИНЕНИЕ &ИндивидуальныеЦеныНоменклатуры ПО ИСТИНА
		
		|		СОЕДИНЕНИЕ &КурсВалютыИндивидуальныеЦены ПО ИСТИНА
		|		СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		
		|		СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ИндивидуальныеЦеныНоменклатуры.Упаковка",
		"ИндивидуальныеЦеныНоменклатуры.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры по варианту расчета цены.
//
// Параметры:
//	ВариантРасчетаЦен - ПеречислениеСсылка.ВариантыРасчетаЦенПоСоглашениямСКлиентами - вариант расчета цены.
//
// Возвращаемое значение:
//	Строка - текст запроса списка номенклатуры по варианту расчета цен соглашения с клиентом.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПокупателем(Форма)
	
	ВариантРасчетаЦен = Форма.ВариантРасчетаЦен;
	
	Если ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоЦеновымГруппам Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, СоглашениеШапка.ВидЦен) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоНоменклатуреУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоЦеновымГруппамВидыЦенПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоЦеновымГруппамВидыЦенПоНоменклатуреУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапкеВидыЦенПоЦеновымГруппамУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|	ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеШапка.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоЦеновымГруппамВидыЦенПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	КонецЕсли;
	
	Если ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоЦеновымГруппамВидыЦенПоНоменклатуреУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.Упаковка
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|			ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоЦеновымГруппамУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИНАЧЕ ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	&ВидыЦен КАК ВидЦены,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = &ВидыЦен)
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоЦеновымГруппам Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СоглашениеЦеновыеГруппы.ВидЦен, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|	ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = СоглашениеЦеновыеГруппы.ВидЦен)
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) КАК ВидЦены,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = СоглашениеТовары.ВидЦены) 
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидыЦенПоНоменклатуреУточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		ИНАЧЕ ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ТОГДА СоглашениеТовары.ВидЦены
		|				КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ИЛИ ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
		|	КОНЕЦ КАК Упаковка,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ИЛИ ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ИЛИ ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1)
		|		ИНАЧЕ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
		|	КОНЕЦ КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.ВидЦены, ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ТОГДА СоглашениеТовары.ВидЦены
		|		КОНЕЦ)
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.УточненныеЦеныПоНоменклатуре Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ЕСТЬNULL(СоглашениеТовары.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(СоглашениеТовары.Цена, 0) * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки3, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|	ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|		И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
		|		И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|	СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашениеТовары.Упаковка",
		"СоглашениеТовары.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры партнера по параметрам соглашения с поставщиком.
//
// Параметры:
//	ВариантРасчетаЦеныПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	Строка - текст запроса списка номенклатуры партнера.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПартнераПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураКонтрагентовОбщиеПоля,
		
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка) КАК ВидЦеныПоставщика
		
		|ИЗ
		
		|	&СправочникНоменклатураКонтрагентов1
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО СправочникНоменклатураКонтрагентов.Номенклатура = НоменклатураСпр.Ссылка";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураКонтрагентовОбщиеПоля,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		|	ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика
		
		|ИЗ
		
		|	&СправочникНоменклатураКонтрагентов1
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСпр
		|		ПО СправочникНоменклатураКонтрагентов.Номенклатура = НоменклатураСпр.Ссылка

		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&ЦеныНоменклатурыПоставщиковСрезПоследнихНаДату,
		|				 ВидЦеныПоставщика = &ВидЦеныПоставщика
		|				{(Номенклатура).* КАК Номенклатура}
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО (ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = &ВидЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = СправочникНоменклатураКонтрагентов.Номенклатура)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = СправочникНоменклатураКонтрагентов.Характеристика)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
		|				БазоваяВалюта В (ВЫБРАТЬ
		|					БазоваяВалютаПоУмолчанию.Значение КАК Значение
		|				ИЗ
		|					Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры по параметрам соглашения с поставщиком.
//
// Параметры:
//	ВариантРасчетаЦеныПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	Строка - текст запроса списка номенклатуры.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникНоменклатураОбщиеПоля,
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникНоменклатура1
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&ЦеныНоменклатурыПоставщиковСрезПоследнихНаДату,
		|					ВидЦеныПоставщика = &ВидЦеныПоставщика
		|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|					{(Номенклатура).* КАК Номенклатура}
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО (ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = &ВидЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = СправочникНоменклатура.Ссылка)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
		|				БазоваяВалюта В (ВЫБРАТЬ
		|					БазоваяВалютаПоУмолчанию.Значение КАК Значение
		|				ИЗ
		|					Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|		СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборНоменклатурыПоГруппе
		|	И &ОтборНоменклатурыПоСегменту
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиков.Упаковка",
		"ЦеныНоменклатурыПоставщиков.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка характеристик по параметрам соглашения с поставщиком.
//
// Параметры:
//	ВариантРасчетаЦеныПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	Строка - текст запроса списка характеристик.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ВЫРАЗИТЬ((ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) КАК ЧИСЛО(31,2))) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&ЦеныНоменклатурыПоставщиковСрезПоследнихНаДату,
		|					ВидЦеныПоставщика = &ВидЦеныПоставщика
		|					И Номенклатура = &Номенклатура
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО (ЦеныНоменклатурыПоставщиков.ВидЦеныПоставщика = &ВидЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = &Номенклатура)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
		|				БазоваяВалюта В (ВЫБРАТЬ
		|					БазоваяВалютаПоУмолчанию.Значение КАК Значение
		|				ИЗ
		|					Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|		СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатурыПоставщиков.Упаковка",
		"ЦеныНоменклатурыПоставщиков.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса списка характеристик для подборов в документы продажи.
//
// Параметры:
//	ВариантРасчетаЦен - ПеречислениеСсылка.ВариантыРасчетаЦенПоСоглашениямСКлиентами - вариант расчета цен.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрамСоглашенияСПокупателем(Форма)
	
	ВариантРасчетаЦен = Форма.ВариантРасчетаЦен;
	
	Если ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.БезЦен Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		
		|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
		
		|	0 КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	ИначеЕсли ВариантРасчетаЦен = Перечисления.ВариантыРасчетаЦенПоСоглашениямСКлиентами.ВидЦенВШапке Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	&ВидыЦен КАК ВидЦены,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		
		|	СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|	И (ЦеныНоменклатуры.ВидЦены = &ВидыЦен)
		
		|	СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|	СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|	СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	Иначе
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	&СправочникХарактеристикиОбщиеПоля,
		
		|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеШапка.ВидЦен
		|	КОНЕЦ КАК ВидЦены,
		
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|				ТОГДА СоглашениеТовары.Цена * ВЫБОР
		|						КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|							ТОГДА СоглашениеТовары.ВидЦены
		|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|							ТОГДА СоглашениеШапка.ВидЦен
		|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
		|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
		|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|							ТОГДА ВЫБОР
		|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|										ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|									ИНАЧЕ 0
		|								КОНЕЦ
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК Цена,
		
		|	ВЫРАЗИТЬ(&ВсеОстаткиВНаличии / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток,
		|	&ВсеОстаткиВНаличии КАК ВНаличииВБазовыхЕдиницах,
		|	ВЫРАЗИТЬ(&ВсеОстаткиДоступно / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК ЧИСЛО(15, 3)) КАК Доступно
		
		|ИЗ
		
		|	&СправочникХарактеристики1
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
		|			И (&Номенклатура = СоглашениеТовары.Номенклатура)
		|			И (СоглашениеТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
		|			И (&ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
		
		|		СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА
		|		И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
		|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
		|					ТОГДА СоглашениеТовары.ВидЦены
		|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
		|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
		|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
		|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|					ТОГДА СоглашениеШапка.ВидЦен
		|			КОНЕЦ)
		
		|		СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА
		|		СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА
		|		СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА
		|		СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА
		
		|ГДЕ
		
		|	&ОтборХарактеристикПоВладельцу
		|	И &ОтборХарактеристикПоСегменту
		
		|";
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса = СтрЗаменить(ШаблонТекстаЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЦеныНоменклатуры.Упаковка",
		"ЦеныНоменклатуры.Номенклатура"));
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает подстроку замены для подстановки в шаблон текста запроса.
//
// Параметры:
//	ПодстрокаПоиска - Строка - подстрока поиска,
//	ТипСписка - Строка - тип списка формы подбора,
//	НесколькоСкладов - Булево - признак использования нескольких складов,
//	НесколькоВидовЦен - Булево - признак использования нескольких видов цен,
//	ЕстьЦеныВБудущем - Булево - признак установки цен будущей датой,
//
// Возвращаемое значение:
//	Строка - подстрока замены для подстановки в шаблон текста запроса.
//
Функция ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса(ПодстрокаПоиска, ПараметрыЗамены)
		
	ТипСписка = ПараметрыЗамены.ТипСписка;
	НесколькоСкладов = ПараметрыЗамены.НесколькоСкладов;
	НесколькоВидовЦен = ПараметрыЗамены.НесколькоВидовЦен;
	ЕстьЦеныВБудущем = ПараметрыЗамены.ЕстьЦеныВБудущем;
	ИспользоватьХарактеристикиНоменклатуры = ПараметрыЗамены.ИспользоватьХарактеристикиНоменклатуры;
	ОтображатьОстаткиПоНазначению = ПараметрыЗамены.ОтображатьОстаткиПоНазначению;
	РежимПодбораБезСуммовыхПараметров = ПараметрыЗамены.РежимПодбораБезСуммовыхПараметров;
	ОтображатьОстаткиНаСкладах = ПараметрыЗамены.ОтображатьОстаткиНаСкладах;
	ЕстьЦеныНоменклатурыПоставщиковВБудущем = ПараметрыЗамены.ЕстьЦеныНоменклатурыПоставщиковВБудущем;
	ИспользоватьКомплекты = ПараметрыЗамены.ИспользоватьКомплекты;
	ИспользуетсяЦенообразование25 = ПараметрыЗамены.ИспользуетсяЦенообразование25;
	НеИспользоватьВидыЦенПоУсловиюПродаж = ПараметрыЗамены.НеИспользоватьВидыЦенПоУсловиюПродаж;
	
	Если ПодстрокаПоиска = "&СправочникНоменклатура1" Тогда
		
		Если ИспользоватьКомплекты Тогда
			ПодстрокаЗамены = "
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
			|		ПО ВариантыКомплектацииНоменклатуры.Владелец = СправочникНоменклатура.Ссылка
			|		И ВариантыКомплектацииНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|		И ВариантыКомплектацииНоменклатуры.Основной
			|";
		Иначе
			ПодстрокаЗамены = "
			|	Справочник.Номенклатура КАК СправочникНоменклатура";
		КонецЕсли;
		
	ИначеЕсли ПодстрокаПоиска = "&СправочникХарактеристики1" Тогда
		
		Если ИспользоватьКомплекты Тогда
			ПодстрокаЗамены = "
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
			|		ПО ВариантыКомплектацииНоменклатуры.Владелец = &Номенклатура
			|		И ВариантыКомплектацииНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка
			|		И ВариантыКомплектацииНоменклатуры.Основной
			|";
		Иначе
			ПодстрокаЗамены = "
			|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры";
		КонецЕсли;
		
	ИначеЕсли ПодстрокаПоиска = "&СправочникНоменклатураКонтрагентов1" Тогда
		
		ПодстрокаЗамены = "
		|	Справочник.НоменклатураКонтрагентов КАК СправочникНоменклатураКонтрагентов
		|";
		
	ИначеЕсли ПодстрокаПоиска = "&СправочникНоменклатураОбщиеПоля," Тогда
		
		ПодстрокаЗамены = "
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	СправочникНоменклатура.Код КАК Код,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникНоменклатура.Родитель КАК Родитель,
		|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.Ссылка КАК ЭлементСписка,
		|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	
		|	ВЫБОР КОГДА СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор) ТОГДА
		|		ЕСТЬNULL(&ВариантРасчетаЦеныНабора, ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка))
		|	ИНАЧЕ
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
		|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
		|	&НаборСодержитТовары КАК СодержитТовары,
		|	&НаборСодержитУслуги КАК СодержитУслуги,
		|	
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Качество КАК Качество,
		|	СправочникНоменклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)) И ЕСТЬNULL(&НаборСодержитТовары, ЛОЖЬ) И Не ЕСТЬNULL(&НаборСодержитУслуги, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|			ТОГДА ИСТИНА
		|		КОГДА СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор)) И ЕСТЬNULL(&НаборСодержитУслуги, ЛОЖЬ) И НЕ ЕСТЬNULL(&НаборСодержитТовары, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоУслуга,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА СправочникНоменклатура.ВидНоменклатуры
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА СправочникНоменклатура.Ссылка
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
		|			ТОГДА СправочникНоменклатура.ВладелецХарактеристик
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК ВладелецХарактеристик,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА СправочникНоменклатура.ПометкаУдаления
		|						ТОГДА 13
		|					ИНАЧЕ 12
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СправочникНоменклатура.ЕстьТоварыДругогоКачества
		|					ТОГДА 4 + ВЫБОР
		|							КОГДА СправочникНоменклатура.ПометкаУдаления
		|								ТОГДА 1
		|							ИНАЧЕ 0
		|						КОНЕЦ + ВЫБОР
		|							КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА 0
		|							ИНАЧЕ 2
		|						КОНЕЦ
		|				ИНАЧЕ -1 + ВЫБОР
		|						КОГДА СправочникНоменклатура.ПометкаУдаления
		|							ТОГДА 1
		|						ИНАЧЕ 0
		|					КОНЕЦ + ВЫБОР
		|						КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|							ТОГДА 1
		|						ИНАЧЕ 3
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинки,
		|";
		
	ИначеЕсли ПодстрокаПоиска = "&СправочникХарактеристикиОбщиеПоля," Тогда
		
		Если ИспользуетсяЦенообразование25 Тогда
			ПодстрокаЗамены = "
			|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
			|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
			|	ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
			|	ИСТИНА КАК ХарактеристикиИспользуются,
			|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(&ТипНоменклатуры КАК Перечисление.ТипыНоменклатуры) КАК ТипНоменклатуры,
			|	
			|	ВЫБОР
			|		КОГДА ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
			|		ИНАЧЕ ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
			|	КОНЕЦ КАК ХарактеристикаЦО,
			|	
			|	ВЫБОР КОГДА &ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор) ТОГДА
			|		ЕСТЬNULL(&ВариантРасчетаЦеныНабора, ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка))
			|	ИНАЧЕ
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
			|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
			|	&НаборСодержитТовары КАК СодержитТовары,
			|	&НаборСодержитУслуги КАК СодержитУслуги,
			|	
			|	ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры) КАК ВидНоменклатуры,
			|	ВЫРАЗИТЬ(&ЕдиницаИзмерения КАК Справочник.УпаковкиЕдиницыИзмерения) КАК ЕдиницаИзмерения,
			|	&ВладелецХарактеристик,
			|	ВЫБОР
			|		КОГДА ХарактеристикиНоменклатуры.ПометкаУдаления
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ИндексКартинки,
			|";
		Иначе
			ПодстрокаЗамены = "
			|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
			|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
			|	ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
			|	ИСТИНА КАК ХарактеристикиИспользуются,
			|	ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
			|	ВЫРАЗИТЬ(&ТипНоменклатуры КАК Перечисление.ТипыНоменклатуры) КАК ТипНоменклатуры,
			|	
			|	ВЫБОР КОГДА &ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор) ТОГДА
			|		ЕСТЬNULL(&ВариантРасчетаЦеныНабора, ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка))
			|	ИНАЧЕ
			|		ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
			|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
			|	&НаборСодержитТовары КАК СодержитТовары,
			|	&НаборСодержитУслуги КАК СодержитУслуги,
			|	
			|	ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры) КАК ВидНоменклатуры,
			|	ВЫРАЗИТЬ(&ЕдиницаИзмерения КАК Справочник.УпаковкиЕдиницыИзмерения) КАК ЕдиницаИзмерения,
			|	&ВладелецХарактеристик,
			|	ВЫБОР
			|		КОГДА ХарактеристикиНоменклатуры.ПометкаУдаления
			|			ТОГДА 1
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ИндексКартинки,
			|";
		КонецЕсли;
	ИначеЕсли ПодстрокаПоиска = "&СправочникНоменклатураКонтрагентовОбщиеПоля," Тогда
		
		ПодстрокаЗамены = "
		|	СправочникНоменклатураКонтрагентов.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникНоменклатураКонтрагентов.Предопределенный КАК Предопределенный,
		|	СправочникНоменклатураКонтрагентов.Владелец КАК Владелец,
		|	СправочникНоменклатураКонтрагентов.Родитель КАК Родитель,
		|	СправочникНоменклатураКонтрагентов.ЭтоГруппа КАК ЭтоГруппа,
		|	СправочникНоменклатураКонтрагентов.Наименование КАК Наименование,
		|	СправочникНоменклатураКонтрагентов.Номенклатура КАК Номенклатура,
		|	СправочникНоменклатураКонтрагентов.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СправочникНоменклатураКонтрагентов.Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	СправочникНоменклатураКонтрагентов.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	СправочникНоменклатураКонтрагентов.Характеристика КАК Характеристика,
		|	НоменклатураСпр.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА НоменклатураСпр.ЕдиницаИзмерения ЕСТЬ NULL
		|			ТОГДА СправочникНоменклатураКонтрагентов.Упаковка
		|		ИНАЧЕ ВЫБОР
		|			КОГДА НоменклатураСпр.ЕдиницаИзмерения = СправочникНоменклатураКонтрагентов.Упаковка
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ИНАЧЕ СправочникНоменклатураКонтрагентов.Упаковка
		|		КОНЕЦ
		|	КОНЕЦ КАК Упаковка,
		|	СправочникНоменклатураКонтрагентов.Артикул КАК Артикул,
		|	СправочникНоменклатураКонтрагентов.Код КАК Код,
		|	СправочникНоменклатураКонтрагентов.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураКонтрагентов.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураКонтрагентов.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоУслуга,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураКонтрагентов.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА СправочникНоменклатураКонтрагентов.ПометкаУдаления
		|						ТОГДА 13
		|					ИНАЧЕ 12
		|				КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинки,
		|";
		
	ИначеЕсли ПодстрокаПоиска = "&ОтборНоменклатурыПоГруппе" Тогда
		
		ПодстрокаЗамены = "
		|	НЕ СправочникНоменклатура.ЭтоГруппа
		|";
		
	ИначеЕсли ПодстрокаПоиска = "&ЦеныНоменклатурыПоставщиковСрезПоследнихНаДату" Тогда
		
		ПодстрокаЗамены = ?(ЕстьЦеныНоменклатурыПоставщиковВБудущем, "&Дата", "");
		
	ИначеЕсли ПодстрокаПоиска = "И &ОтборНоменклатурыПоЦене1" Тогда
		
		Если Не РежимПодбораБезСуммовыхПараметров Тогда
			ПодстрокаЗамены = "
			|	И (ВЫБОР
			|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|		КОНЕЦ ИЛИ ВЫБОР
			|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
			|			ТОГДА СоглашениеТовары.Цена * ВЫБОР
			|					КОГДА &Валюта <> СоглашениеТовары.Ссылка.Валюта
			|						ТОГДА ВЫБОР
			|								КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|									ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
			|								ИНАЧЕ 0
			|							КОНЕЦ
			|					ИНАЧЕ 1
			|				КОНЕЦ
			|		КОГДА ВЫБОР
			|					КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
			|						ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|					КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|							И СоглашениеТовары.ВидЦены ЕСТЬ Не NULL 
			|						ТОГДА СоглашениеТовары.ВидЦены
			|					КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|							Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
			|							И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ Не NULL 
			|							И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|						ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
			|					КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|							Или СоглашениеТовары.ВидЦены ЕСТЬ NULL )
			|							И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
			|								Или СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|							И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|						ТОГДА СоглашениеШапка.ВидЦен
			|				КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|				И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
			|			ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
			|					КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
			|						ТОГДА ВЫБОР
			|								КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|										И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|									ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
			|								ИНАЧЕ 0
			|							КОНЕЦ
			|					ИНАЧЕ 1
			|				КОНЕЦ
			|		ИНАЧЕ 0
			|	КОНЕЦ <> 0 ИЛИ &ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих))
			|";
		Иначе
			ПодстрокаЗамены = "";
		КонецЕсли;
			
	ИначеЕсли ПодстрокаПоиска = "И &ОтборНоменклатурыПоЦене25" Тогда
		
		Если Не РежимПодбораБезСуммовыхПараметров Тогда
			ПодстрокаЗамены = "
			|	И (ВЫБОР
			|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|		КОНЕЦ ИЛИ ВЫБОР
			|			КОГДА ЕСТЬNULL(ИндивидуальныеЦеныНоменклатуры.Цена, 0) > 0
			|				ТОГДА ИндивидуальныеЦеныНоменклатуры.Цена * ВЫБОР
			|						КОГДА &Валюта <> ИндивидуальныеЦеныНоменклатуры.Валюта
			|							ТОГДА ВЫБОР
			|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель, 0) > 0
			|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель, 0) > 0
			|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|										ТОГДА КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаИндивидуальныеЦены.КурсЗнаменатель)
			|									ИНАЧЕ 0
			|								КОНЕЦ
			|						ИНАЧЕ 1
			|					КОНЕЦ
			|			ИНАЧЕ ЦеныНоменклатуры.Цена * ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
			|					ТОГДА ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
			|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
			|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
			|									И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
			|								ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель / (КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|					ИНАЧЕ 1
			|				КОНЕЦ
			|			КОНЕЦ <> 0 ИЛИ &ВариантРасчетаЦеныНабора = ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих))
			|";
			
		Иначе
			ПодстрокаЗамены = "";
		КонецЕсли;
		
	ИначеЕсли ПодстрокаПоиска = "&ВариантРасчетаЦеныНабора" Тогда
		
		ПодстрокаЗамены = ?(ИспользоватьКомплекты,
			"ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора",
			"ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)");
		
	ИначеЕсли ПодстрокаПоиска = "&НаборСодержитТовары" Тогда
		
		ПодстрокаЗамены = ?(ИспользоватьКомплекты,
			"ВариантыКомплектацииНоменклатуры.СодержитТовары",
			"Ложь");
		
	ИначеЕсли ПодстрокаПоиска = "&НаборСодержитУслуги" Тогда
		
		ПодстрокаЗамены = ?(ИспользоватьКомплекты,
			"ВариантыКомплектацииНоменклатуры.СодержитУслуги",
			"Ложь");
		
	ИначеЕсли ПодстрокаПоиска = "И &ОтборНоменклатурыПоСегменту" Тогда
		
		ПодстрокаЗамены = "
		|{ГДЕ
		|	(1 В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			1
		|		ИЗ
		|			РегистрСведений.НоменклатураСегмента КАК Сегменты
		|		ГДЕ
		|			Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
		|			И Сегменты.Сегмент = &СегментНоменклатуры))}
		|";
		
	ИначеЕсли ПодстрокаПоиска = "СОЕДИНЕНИЕ &КурсВалютыДокумента ПО ИСТИНА" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(, Валюта = &Валюта
		|				И БазоваяВалюта В (ВЫБРАТЬ
		|					БазоваяВалютаПоУмолчанию.Значение КАК Значение
		|				ИЗ
		|					Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаДокумента
		|	ПО (ИСТИНА)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "СОЕДИНЕНИЕ &КурсВалютыСоглашения ПО ИСТИНА" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
		|				БазоваяВалюта В (ВЫБРАТЬ
		|					БазоваяВалютаПоУмолчанию.Значение КАК Значение
		|				ИЗ
		|					Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаСоглашения
		|	ПО (КурсыСрезПоследнихВалютаСоглашения.Валюта = СоглашениеТовары.Ссылка.Валюта)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "СОЕДИНЕНИЕ &КурсВалютыЦены ПО ИСТИНА" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
		|				БазоваяВалюта В (ВЫБРАТЬ
		|					БазоваяВалютаПоУмолчанию.Значение КАК Значение
		|				ИЗ
		|					Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаЦены
		|	ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "СОЕДИНЕНИЕ &КурсВалютыИндивидуальныеЦены ПО ИСТИНА" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(,
		|				БазоваяВалюта В (ВЫБРАТЬ
		|					БазоваяВалютаПоУмолчанию.Значение КАК Значение
		|				ИЗ
		|					Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК КурсыСрезПоследнихВалютаИндивидуальныеЦены
		|	ПО (КурсыСрезПоследнихВалютаИндивидуальныеЦены.Валюта = ИндивидуальныеЦеныНоменклатуры.Валюта)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "СОЕДИНЕНИЕ &ИндивидуальныеЦеныНоменклатуры ПО ИСТИНА" Тогда
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			
			ПодстрокаЗамены = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
			|			{УсловиеОтбораПоДате},
			|			{УсловиеОтбораПоВидуЦен}
			|				И ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
			|			{(Номенклатура).* КАК Номенклатура}
			|		) КАК ИндивидуальныеЦеныНоменклатуры
			|	ПО (ИндивидуальныеЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
			|		И (ИндивидуальныеЦеныНоменклатуры.ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка))
			|		И (ИндивидуальныеЦеныНоменклатуры.СерияЦО = ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка))
			|		И (ИндивидуальныеЦеныНоменклатуры.УпаковкаЦО = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))";
			
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			
			ПодстрокаЗамены = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
			|			{УсловиеОтбораПоДате},
			|			{УсловиеОтбораПоВидуЦен}
			|				И Номенклатура = &Номенклатура
			|			{(ХарактеристикаЦО).* КАК ХарактеристикаЦО}
			|		) КАК ИндивидуальныеЦеныНоменклатуры
			|	ПО (ИндивидуальныеЦеныНоменклатуры.Номенклатура = &Номенклатура)
			|		И (ИндивидуальныеЦеныНоменклатуры.ХарактеристикаЦО = ВЫБОР
			|			КОГДА ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
			|				ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
			|			ИНАЧЕ ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
			|		КОНЕЦ)
			|		И (ИндивидуальныеЦеныНоменклатуры.СерияЦО = ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка))
			|		И (ИндивидуальныеЦеныНоменклатуры.УпаковкаЦО = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
			|";
			
		КонецЕсли;
		
		УсловиеОтбораПоДате = ?(ЕстьЦеныВБудущем, "КОНЕЦПЕРИОДА(&Дата, День)", "");
		УсловиеОтбораПоВидуЦен = "ВидЦены = &ВидЦенИндивидуальный";
		
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоДате}", УсловиеОтбораПоДате);
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоВидуЦен}", УсловиеОтбораПоВидуЦен);
			 
	ИначеЕсли ПодстрокаПоиска = "СОЕДИНЕНИЕ &ЦеныНоменклатуры ПО ИСТИНА" Тогда
		
		Если ИспользуетсяЦенообразование25 Тогда
			
			Если ТипСписка = "СписокНоменклатура" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
				|			{УсловиеОтбораПоДате},
				|			{УсловиеОтбораПоВидуЦен}
				|				И ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
				|			{(Номенклатура).* КАК Номенклатура}
				|		) КАК ЦеныНоменклатуры
				|	ПО (ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
				|		И (ЦеныНоменклатуры.ХарактеристикаЦО = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка))
				|		И (ЦеныНоменклатуры.СерияЦО = ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка))
				|		И (ЦеныНоменклатуры.УпаковкаЦО = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))";
				
			ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(
				|			{УсловиеОтбораПоДате},
				|			{УсловиеОтбораПоВидуЦен}
				|				И Номенклатура = &Номенклатура
				|			{(ХарактеристикаЦО).* КАК ХарактеристикаЦО}
				|		) КАК ЦеныНоменклатуры
				|	ПО (ЦеныНоменклатуры.Номенклатура = &Номенклатура)
				|		И (ЦеныНоменклатуры.ХарактеристикаЦО = ВЫБОР
				|			КОГДА ВЫРАЗИТЬ(&ВидНоменклатуры КАК Справочник.ВидыНоменклатуры).НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
				|				ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
				|			ИНАЧЕ ХарактеристикиНоменклатуры.ХарактеристикаНоменклатурыДляЦенообразования
				|		КОНЕЦ)
				|		И (ЦеныНоменклатуры.СерияЦО = ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка))
				|		И (ЦеныНоменклатуры.УпаковкаЦО = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка))
				|";
				
			КонецЕсли;
			
			УсловиеОтбораПоДате = ?(ЕстьЦеныВБудущем, "КОНЕЦПЕРИОДА(&Дата, День)", "");
			Если НеИспользоватьВидыЦенПоУсловиюПродаж Тогда
				УсловиеОтбораПоВидуЦен = ?(НесколькоВидовЦен, "ВидЦены В (&ВидыЦен)", "ВидЦены = &ВидыЦен");
			Иначе
				УсловиеОтбораПоВидуЦен = "ВидЦены = &ВидЦенОсновной";
			КонецЕсли;
			
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоДате}", УсловиеОтбораПоДате);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоВидуЦен}", УсловиеОтбораПоВидуЦен);
			
		Иначе
			
			Если ТипСписка = "СписокНоменклатура" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|			{УсловиеОтбораПоДате},
				|			{УсловиеОтбораПоВидуЦен}
				|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
				|			{(Номенклатура).* КАК Номенклатура}
				|		) КАК ЦеныНоменклатуры
				|	ПО (ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
				|		И (ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
				
			ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
				|			{УсловиеОтбораПоДате},
				|			{УсловиеОтбораПоВидуЦен}
				|				И Номенклатура = &Номенклатура
				|			{(Характеристика).* КАК Характеристика}
				|		) КАК ЦеныНоменклатуры
				|	ПО (ЦеныНоменклатуры.Номенклатура = &Номенклатура)
				|		И (ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
				|";
				
			КонецЕсли;
			 
			УсловиеОтбораПоДате = ?(ЕстьЦеныВБудущем, "КОНЕЦПЕРИОДА(&Дата, День)", "");
			УсловиеОтбораПоВидуЦен = ?(НесколькоВидовЦен, "ВидЦены В (&ВидыЦен)", "ВидЦены = &ВидыЦен");
			
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоДате}", УсловиеОтбораПоДате);
			ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоВидуЦен}", УсловиеОтбораПоВидуЦен);
		КонецЕсли;
		
		
	ИначеЕсли ПодстрокаПоиска = "&ОтборХарактеристикПоВладельцу" Тогда
		
		ПодстрокаЗамены = "
		|	ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристик
		|";
		
	ИначеЕсли ПодстрокаПоиска = "И &ОтборХарактеристикПоСегменту" Тогда
		
		ПодстрокаЗамены = "
		|{ГДЕ
		|	(1 В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			1
		|		ИЗ
		|			РегистрСведений.НоменклатураСегмента КАК Сегменты
		|		ГДЕ
		|			Сегменты.Характеристика = ХарактеристикиНоменклатуры.Ссылка
		|			И Сегменты.Номенклатура = &НоменклатураСегмента
		|			И Сегменты.Сегмент = &СегментНоменклатуры))}
		|";
		
	ИначеЕсли ПодстрокаПоиска = "&ВсеОстаткиВНаличии" Тогда
		
		Если Не ОтображатьОстаткиНаСкладах Тогда
			ПодстрокаЗамены = "0";
		Иначе
			
			Если ОтображатьОстаткиПоНазначению Тогда
				ПодстрокаЗамены = "ЕСТЬNULL(ВсеОстатки.Запас, 0)";
			Иначе
				ПодстрокаЗамены = "ЕСТЬNULL(ВсеОстатки.ВНаличии, 0)";
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПодстрокаПоиска = "&ВсеОстаткиДоступно" Тогда
		
		Если Не ОтображатьОстаткиНаСкладах Тогда
			ПодстрокаЗамены = "0";
		Иначе
			
			ПодстрокаЗамены = "ЕСТЬNULL(ВсеОстатки.Свободно, 0)";
			
		КонецЕсли;
		
	ИначеЕсли ПодстрокаПоиска = "СОЕДИНЕНИЕ &ВсеОстатки ПО ИСТИНА" Тогда
		
		Если Не ОтображатьОстаткиНаСкладах Тогда
			ПодстрокаЗамены = "
			|";
		Иначе
			
			Если НесколькоСкладов Тогда
				
				Если ТипСписка = "СписокНоменклатура" Или ТипСписка = "СписокНоменклатураПартнера" Тогда
					
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ(
					|		ВЫБРАТЬ
					|			РаспределениеЗапасов.Номенклатура    КАК Номенклатура,
					|			СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
					|			СУММА(РаспределениеЗапасов.Запас)    КАК Запас,
					|			СУММА(РаспределениеЗапасов.Свободно) КАК Свободно
					|		ИЗ
					|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
					|		ГДЕ
					|			РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
					|			И РаспределениеЗапасов.Назначение = &Назначение
					|			И РаспределениеЗапасов.Склад В(&Склад)
					|		СГРУППИРОВАТЬ ПО
					|			РаспределениеЗапасов.Номенклатура
					|	) КАК ВсеОстатки
					|	ПО 
					|		(ВсеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
					|";
					
				ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
					
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ(
					|		ВЫБРАТЬ
					|			РаспределениеЗапасов.Характеристика  КАК Характеристика,
					|			СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
					|			СУММА(РаспределениеЗапасов.Запас)    КАК Запас,
					|			СУММА(РаспределениеЗапасов.Свободно) КАК Свободно
					|		ИЗ
					|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
					|		ГДЕ
					|			РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
					|			И РаспределениеЗапасов.Назначение = &Назначение
					|			И РаспределениеЗапасов.Склад В(&Склад)
					|			И РаспределениеЗапасов.Номенклатура = &Номенклатура
					|		СГРУППИРОВАТЬ ПО
					|			РаспределениеЗапасов.Характеристика
					|	) КАК ВсеОстатки
					|	ПО 
					|		(ВсеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
					|";
					
				КонецЕсли;
				
			Иначе
				
				Если ТипСписка = "СписокНоменклатура" Или ТипСписка = "СписокНоменклатураПартнера" Тогда
					
					Если ИспользоватьХарактеристикиНоменклатуры Тогда
						
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ(
						|		ВЫБРАТЬ
						|			РаспределениеЗапасов.Номенклатура    КАК Номенклатура,
						|			СУММА(РаспределениеЗапасов.ВНаличии) КАК ВНаличии,
						|			СУММА(РаспределениеЗапасов.Запас)    КАК Запас,
						|			СУММА(РаспределениеЗапасов.Свободно) КАК Свободно
						|		ИЗ
						|			РегистрСведений.РаспределениеЗапасов КАК РаспределениеЗапасов
						|		ГДЕ
						|			РаспределениеЗапасов.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
						|			И РаспределениеЗапасов.Назначение = &Назначение
						|			И РаспределениеЗапасов.Склад = &Склад

						|		СГРУППИРОВАТЬ ПО
						|			РаспределениеЗапасов.Номенклатура
						|	) КАК ВсеОстатки
						|	ПО 
						|		(ВсеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
						|";
						
					Иначе
						
						ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ВсеОстатки
						|		ПО ВсеОстатки.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
						|		И ВсеОстатки.Назначение = &Назначение
						|		И ВсеОстатки.Склад = &Склад
						|		И ВсеОстатки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
						|		И ВсеОстатки.Номенклатура = СправочникНоменклатура.Ссылка
						|";
						
					КонецЕсли;
					
				ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
					
					ПодстрокаЗамены = "
						|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспределениеЗапасов КАК ВсеОстатки
						|		ПО ВсеОстатки.Состояние = ЗНАЧЕНИЕ(Перечисление.РаспределениеЗапасовСостояния.ОстатокНаСкладе)
						|		И ВсеОстатки.Назначение = &Назначение
						|		И ВсеОстатки.Склад = &Склад
						|		И ВсеОстатки.Номенклатура = &Номенклатура
						|		И ВсеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка
						|";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстНазначение = ?(ОтображатьОстаткиПоНазначению, "&Назначение", "ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)");
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "&Назначение", ТекстНазначение);
		
	КонецЕсли;
	
	Возврат ПодстрокаЗамены;
	
КонецФункции

#КонецОбласти

#КонецОбласти
