#Область ПрограммныйИнтерфейс

#Область ОбработчикиЗаполнения

// Возникает перед выполнением записи документа. Вызывается после начала транзакции записи, но до начала записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - записываемый документ,
//  Отказ - Булево - признак отказа от записи,
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа,
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ИнтеграцияЕГАИСПереопределяемый.ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	ИнтеграцияИСПереопределяемый.ПередЗаписьюОбъекта(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

// Процедура заполняет табличную часть Товары документа
//
// Параметры:
//  ДокументОбъект   - ДокументОбъект   - заполняемый документ
//  РезультатЗапроса - РезультатЗапроса - результат запроса с расчетом заполнения табличной части
//  ДанныеЗаполнения - ДокументСсылка   - источник заполнения
//  БезСопоставления - Булево           - возможность заполнения не сопоставленной алкогольной продукцией
//
Процедура ЗаполнитьТабличнуюЧастьТовары(ДокументОбъект, РезультатЗапроса, ДанныеЗаполнения, БезСопоставления = Ложь) Экспорт
	
	ВыборкаТовары = РезультатЗапроса.Выбрать();
	
	Если ВыборкаТовары.Количество() = 0 Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru='В %1 отсутствует алкогольная продукция для заполнения.'"),
			ДанныеЗаполнения);
		
	КонецЕсли;
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаТовары, "ЕстьОшибкиНеупакованнаяПродукция") 
			И ВыборкаТовары.ЕстьОшибкиНеупакованнаяПродукция Тогда
			
				ДокументОбъект.Товары.Очистить();
				
				ТекстОшибки = НСтр("ru='Не указан коэффициент пересчета неупакованной алкогольной продукции для номенклатуры %Номенклатура%.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", ВыборкаТовары.Номенклатура);
				
				ВызватьИсключение ТекстОшибки;
			
		ИначеЕсли ЗначениеЗаполнено(ВыборкаТовары.АлкогольнаяПродукция) ИЛИ БезСопоставления Тогда
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "ИдентификаторСтроки")
				И НЕ ЗначениеЗаполнено(НоваяСтрока.ИдентификаторСтроки) Тогда
				НоваяСтрока.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
		Иначе
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВыборкаТовары, "Номенклатура") Тогда
				
				ДокументОбъект.Товары.Очистить();
				
				ТекстОшибки = НСтр("ru='Не выполнено сопоставление %Номенклатура% классификатору номенклатуры ЕГАИС.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", ВыборкаТовары.Номенклатура);
				
				ВызватьИсключение ТекстОшибки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет информацию о сопоставлении алкогольной продукции в табличной части
//
// Параметры:
//  ТабличнаяЧасть	 - ДанныеФормыСтруктура - Табличная часть документа
//
Процедура ЗаполнитьАлкогольнуюПродукцию(ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Серия КАК Серия,
	|	Товары.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК СопоставленнаяАлкогольнаяПродукция,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(Классификатор.ТипПродукции, ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)) КАК ТипПродукции
	|ИЗ
	|	Товары КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК Классификатор
	|		ПО Классификатор.Ссылка = ТабличнаяЧасть.АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО (СоответствиеНоменклатурыЕГАИС.Номенклатура = ТабличнаяЧасть.Номенклатура)
	|		И (СоответствиеНоменклатурыЕГАИС.Характеристика = ТабличнаяЧасть.Характеристика)
	|		И (СоответствиеНоменклатурыЕГАИС.Серия = ТабличнаяЧасть.Серия
	|		ИЛИ СоответствиеНоменклатурыЕГАИС.Серия = &ПустаяСерия)
	|ИТОГИ
	|	МАКСИМУМ(ТипПродукции)
	|ПО
	|	ТабличнаяЧасть.НомерСтроки");
	
	Запрос.УстановитьПараметр("Товары", ТабличнаяЧасть.Выгрузить(,"НомерСтроки,АлкогольнаяПродукция, Номенклатура, Характеристика, Серия"));
	Запрос.УстановитьПараметр("ПустаяСерия", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	ЕстьПризнакНеупакованнаяПродукция = Неопределено;
	
	ВыборкаСтроки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСтроки.Следующий() Цикл
		
		СтрокаТЧ = ТабличнаяЧасть.Получить(ВыборкаСтроки.НомерСтроки - 1);
		
		Если ЕстьПризнакНеупакованнаяПродукция = Неопределено Тогда
			ЕстьПризнакНеупакованнаяПродукция = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТЧ, "НеупакованнаяПродукция");
		КонецЕсли;
		Если ЕстьПризнакНеупакованнаяПродукция Тогда
			СтрокаТЧ.НеупакованнаяПродукция = ВыборкаСтроки.ТипПродукции = Перечисления.ТипыПродукцииЕГАИС.Неупакованная;
		КонецЕсли;
		
		ВыборкаАлкогольнаяПродукция = ВыборкаСтроки.Выбрать();
		КоличествоСопоставлено = ВыборкаАлкогольнаяПродукция.Количество();
		Если КоличествоСопоставлено > 1 Тогда
			СтрокаТЧ.СопоставлениеАлкогольнаяПродукция = СтрШаблон(НСтр("ru = '<Несколько позиций (%1)>'"), КоличествоСопоставлено);
		ИначеЕсли КоличествоСопоставлено = 1 Тогда
			СтрокаТЧ.СопоставлениеАлкогольнаяПродукция = "";
		Иначе
			СтрокаТЧ.СопоставлениеАлкогольнаяПродукция = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		Пока ВыборкаАлкогольнаяПродукция.Следующий() Цикл
			СтрокаТЧ.НоменклатураДляВыбора.Добавить(ВыборкаАлкогольнаяПродукция.СопоставленнаяАлкогольнаяПродукция);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в табличной части сопоставленную номенклатуру и алкогольную продукцию.
//
// Параметры:
//  ТаблицаСопоставления - ТаблицаЗначений, ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСопоставленнуюПродукцию(ТаблицаСопоставления) Экспорт
	
	Если ТипЗнч(ТаблицаСопоставления) = Тип("ТаблицаЗначений") Тогда
		ТаблицаЗапроса = ТаблицаСопоставления;
	Иначе
		ТаблицаЗапроса = ТаблицаСопоставления.Выгрузить();
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		НомерСтроки = 1;
		Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			СтрокаТаблицы.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("Номенклатура") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("Характеристика") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("Серия") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("Серия", Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("АлкогольнаяПродукция") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("Справка2") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("Сопоставлено") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("СопоставленоКоличество") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("СопоставленоКоличество", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("СопоставлениеНоменклатура") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("СопоставлениеНоменклатура", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Если ТаблицаЗапроса.Колонки.Найти("СопоставлениеХарактеристика") = Неопределено Тогда
		ТаблицаЗапроса.Колонки.Добавить("СопоставлениеХарактеристика", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСопоставления", ТаблицаЗапроса);
	Запрос.УстановитьПараметр("ПустаяНоменклатура",   ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяСерия",          ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСопоставления.НомерСтроки КАК НомерСтроки,
	|	ТаблицаСопоставления.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаСопоставления.Номенклатура КАК Номенклатура,
	|	ТаблицаСопоставления.Характеристика КАК Характеристика,
	|	ТаблицаСопоставления.Серия КАК Серия,
	|	ТаблицаСопоставления.Справка2 КАК Справка2
	|ПОМЕСТИТЬ ТаблицаСопоставления
	|ИЗ
	|	&ТаблицаСопоставления КАК ТаблицаСопоставления
	|ГДЕ
	|	ТаблицаСопоставления.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	ИЛИ ТаблицаСопоставления.Номенклатура = &ПустаяНоменклатура
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.Номенклатура) КАК КоличествоНоменклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.Характеристика) КАК КоличествоХарактеристика,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.Серия) КАК КоличествоСерия,
	|	МАКСИМУМ(СоответствиеЕГАИС.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(СоответствиеЕГАИС.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(СоответствиеЕГАИС.Серия) КАК Серия,
	|	СоответствиеЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СоответствиеЕГАИС.Справка2 КАК Справка2
	|ПОМЕСТИТЬ ВариантыТочногоСоответствия
	|ИЗ
	|	ТаблицаСопоставления КАК ТаблицаСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеЕГАИС
	|		ПО СоответствиеЕГАИС.АлкогольнаяПродукция = ТаблицаСопоставления.АлкогольнаяПродукция
	|		И СоответствиеЕГАИС.Справка2 = ТаблицаСопоставления.Справка2
	|ГДЕ
	|	ТаблицаСопоставления.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И ТаблицаСопоставления.Номенклатура = &ПустаяНоменклатура
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеЕГАИС.АлкогольнаяПродукция,
	|	СоответствиеЕГАИС.Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.Номенклатура) КАК КоличествоНоменклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.Характеристика) КАК КоличествоХарактеристика,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.Серия) КАК КоличествоСерия,
	|	МАКСИМУМ(СоответствиеЕГАИС.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(СоответствиеЕГАИС.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(СоответствиеЕГАИС.Серия) КАК Серия,
	|	СоответствиеЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаСопоставления.Справка2 КАК Справка2
	|ПОМЕСТИТЬ ВариантыСоответствияБезСправки2
	|ИЗ
	|	ТаблицаСопоставления КАК ТаблицаСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВариантыТочногоСоответствия КАК ВариантыТочногоСоответствия
	|		ПО ВариантыТочногоСоответствия.АлкогольнаяПродукция = ТаблицаСопоставления.АлкогольнаяПродукция
	|		И ВариантыТочногоСоответствия.Справка2 = ТаблицаСопоставления.Справка2
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеЕГАИС
	|		ПО СоответствиеЕГАИС.АлкогольнаяПродукция = ТаблицаСопоставления.АлкогольнаяПродукция
	|ГДЕ
	|	ТаблицаСопоставления.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И ТаблицаСопоставления.Номенклатура = &ПустаяНоменклатура
	|	И ВариантыТочногоСоответствия.АлкогольнаяПродукция ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеЕГАИС.АлкогольнаяПродукция,
	|	ТаблицаСопоставления.Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.АлкогольнаяПродукция) КАК КоличествоАлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.Справка2) КАК КоличествоСправка2,
	|	МАКСИМУМ(СоответствиеЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(СоответствиеЕГАИС.Справка2) КАК Справка2,
	|	СоответствиеЕГАИС.Номенклатура КАК Номенклатура,
	|	СоответствиеЕГАИС.Характеристика КАК Характеристика,
	|	СоответствиеЕГАИС.Серия КАК Серия
	|ПОМЕСТИТЬ ВариантыТочногоСоответствияНоменклатура
	|ИЗ
	|	ТаблицаСопоставления КАК ТаблицаСопоставления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеЕГАИС
	|		ПО СоответствиеЕГАИС.Номенклатура = ТаблицаСопоставления.Номенклатура
	|		И СоответствиеЕГАИС.Характеристика = ТаблицаСопоставления.Характеристика
	|		И СоответствиеЕГАИС.Серия = ТаблицаСопоставления.Серия
	|ГДЕ
	|	ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|	И ТаблицаСопоставления.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеЕГАИС.Номенклатура,
	|	СоответствиеЕГАИС.Характеристика,
	|	СоответствиеЕГАИС.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.АлкогольнаяПродукция) КАК КоличествоАлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СоответствиеЕГАИС.Справка2) КАК КоличествоСправка2,
	|	МАКСИМУМ(СоответствиеЕГАИС.АлкогольнаяПродукция) КАК АлкогольнаяПродукция,
	|	МАКСИМУМ(СоответствиеЕГАИС.Справка2) КАК Справка2,
	|	СоответствиеЕГАИС.Номенклатура КАК Номенклатура,
	|	СоответствиеЕГАИС.Характеристика КАК Характеристика,
	|	ТаблицаСопоставления.Серия КАК Серия
	|ПОМЕСТИТЬ ВариантыСоответствияНоменклатураБезСерии
	|ИЗ
	|	ТаблицаСопоставления КАК ТаблицаСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВариантыТочногоСоответствияНоменклатура КАК ВариантыТочногоСоответствияНоменклатура
	|		ПО ВариантыТочногоСоответствияНоменклатура.Номенклатура = ТаблицаСопоставления.Номенклатура
	|		И ВариантыТочногоСоответствияНоменклатура.Характеристика = ТаблицаСопоставления.Характеристика
	|		И ВариантыТочногоСоответствияНоменклатура.Серия = ТаблицаСопоставления.Серия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеЕГАИС
	|		ПО СоответствиеЕГАИС.Номенклатура = ТаблицаСопоставления.Номенклатура
	|		И СоответствиеЕГАИС.Характеристика = ТаблицаСопоставления.Характеристика
	|ГДЕ
	|	ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|	И ТаблицаСопоставления.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И ВариантыТочногоСоответствияНоменклатура.Номенклатура ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеЕГАИС.Номенклатура,
	|	СоответствиеЕГАИС.Характеристика,
	|	ТаблицаСопоставления.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоличествоНоменклатура КАК КоличествоНоменклатура,
	|	КоличествоХарактеристика КАК КоличествоХарактеристика,
	|	КоличествоСерия КАК КоличествоСерия,
	|	0 КАК КоличествоАлкогольнаяПродукция,
	|	0 КАК КоличествоСправка2,
	|	Номенклатура КАК Номенклатура,
	|	Характеристика КАК Характеристика,
	|	Серия КАК Серия,
	|	АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Справка2 КАК Справка2,
	|	&ПустаяНоменклатура КАК ПоискНоменклатура,
	|	&ПустаяХарактеристика КАК ПоискХарактеристика,
	|	&ПустаяСерия КАК ПоискСерия,
	|	АлкогольнаяПродукция КАК ПоискАлкогольнаяПродукция,
	|	Справка2 КАК ПоискСправка2
	|ПОМЕСТИТЬ ВариантыСопоставления
	|ИЗ
	|	ВариантыТочногоСоответствия КАК ВариантыТочногоСоответствия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КоличествоНоменклатура,
	|	КоличествоХарактеристика,
	|	КоличествоСерия,
	|	0,
	|	0,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	АлкогольнаяПродукция,
	|	Справка2,
	|	&ПустаяНоменклатура,
	|	&ПустаяХарактеристика,
	|	&ПустаяСерия,
	|	АлкогольнаяПродукция,
	|	Справка2
	|ИЗ
	|	ВариантыСоответствияБезСправки2 КАК ВариантыСоответствияБезСправки2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	КоличествоАлкогольнаяПродукция,
	|	КоличествоСправка2,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	АлкогольнаяПродукция,
	|	Справка2,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|ИЗ
	|	ВариантыТочногоСоответствияНоменклатура КАК ВариантыТочногоСоответствияНоменклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	0,
	|	КоличествоАлкогольнаяПродукция,
	|	КоличествоСправка2,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	АлкогольнаяПродукция,
	|	Справка2,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|ИЗ
	|	ВариантыСоответствияНоменклатураБезСерии КАК ВариантыСоответствияНоменклатураБезСерии
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаСопоставления.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ТаблицаСопоставления.Номенклатура
	|		КОГДА ЕСТЬNULL(ВариантыСопоставления.КоличествоНоменклатура, 0) = 1
	|			ТОГДА ВариантыСопоставления.Номенклатура
	|		ИНАЧЕ &ПустаяНоменклатура
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ТаблицаСопоставления.Характеристика
	|		КОГДА ЕСТЬNULL(ВариантыСопоставления.КоличествоХарактеристика, 0) = 1
	|			ТОГДА ВариантыСопоставления.Характеристика
	|		ИНАЧЕ &ПустаяХарактеристика
	|	КОНЕЦ КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.Номенклатура <> &ПустаяНоменклатура
	|			ТОГДА ТаблицаСопоставления.Серия
	|		КОГДА ЕСТЬNULL(ВариантыСопоставления.КоличествоСерия, 0) = 1
	|			ТОГДА ВариантыСопоставления.Серия
	|		ИНАЧЕ &ПустаяСерия
	|	КОНЕЦ КАК Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ТаблицаСопоставления.АлкогольнаяПродукция
	|		КОГДА ЕСТЬNULL(ВариантыСопоставления.КоличествоАлкогольнаяПродукция, 0) = 1
	|			ТОГДА ВариантыСопоставления.АлкогольнаяПродукция
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	КОНЕЦ КАК АлкогольнаяПродукция,
	|	ВЫБОР
	|		КОГДА ТаблицаСопоставления.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|			ТОГДА ТаблицаСопоставления.Справка2
	|		КОГДА ЕСТЬNULL(ВариантыСопоставления.КоличествоСправка2, 0) = 1
	|			ТОГДА ВариантыСопоставления.Справка2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|	КОНЕЦ КАК Справка2,
	|	ЕСТЬNULL(ВариантыСопоставления.КоличествоНоменклатура + ВариантыСопоставления.КоличествоАлкогольнаяПродукция, 0) КАК СопоставленоКоличество,
	|	НЕ ВариантыСопоставления.Номенклатура ЕСТЬ NULL КАК Сопоставлено,
	|	ПРЕДСТАВЛЕНИЕ(ВариантыСопоставления.Номенклатура) КАК СопоставлениеНоменклатура
	|ИЗ
	|	ТаблицаСопоставления КАК ТаблицаСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВариантыСопоставления КАК ВариантыСопоставления
	|		ПО ТаблицаСопоставления.АлкогольнаяПродукция = ВариантыСопоставления.ПоискАлкогольнаяПродукция
	|		И ТаблицаСопоставления.Справка2 = ВариантыСопоставления.ПоискСправка2
	|		И ТаблицаСопоставления.Номенклатура = ВариантыСопоставления.ПоискНоменклатура
	|		И ТаблицаСопоставления.Характеристика = ВариантыСопоставления.ПоискХарактеристика
	|		И ТаблицаСопоставления.Серия = ВариантыСопоставления.ПоискСерия";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставленияСопоставления = Новый Структура("СопоставлениеНоменклатура,СопоставлениеХарактеристика");
	
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НомерСтроки", Выборка.НомерСтроки);
		СтрокаТаблицы = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора)[0];
		
		Если Выборка.СопоставленоКоличество = 1 Тогда
			ПредставленияСопоставления.СопоставлениеНоменклатура   = "";
			ПредставленияСопоставления.СопоставлениеХарактеристика = "";
		ИначеЕсли Выборка.СопоставленоКоличество > 1 Тогда
			ПредставленияСопоставления.СопоставлениеНоменклатура   = СтрШаблон(НСтр("ru = '%1 ( + еще %2...)'"), Выборка.СопоставлениеНоменклатура, Выборка.СопоставленоКоличество - 1);
			ПредставленияСопоставления.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
		Иначе
			ПредставленияСопоставления.СопоставлениеНоменклатура   = НСтр("ru = '<Не сопоставлено>'");
			ПредставленияСопоставления.СопоставлениеХарактеристика = НСтр("ru = '<Не сопоставлено>'");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПредставленияСопоставления);
		
	КонецЦикла;
	
КонецПроцедуры

// Подбирает справки 2 по остаткам для списания по FIFO.
//
// Параметры:
//  Товары - ТабличнаяЧасть, ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть, содержащая реквизиты:
//                                                                     АлкогольнаяПродукция, Справка2, Количество.
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация учета остатков,
//  Период - Дата, Граница - дата получения остатков. Если не указана, то берутся последние.
//  СтруктураПересчетаСуммы - Структура - Структура со свойствами:
//   * Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//   * Строки - Массив Из ДанныеФормыЭлементКоллекции - ссылки на строки для пересчета сумм,
//   * ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
Процедура ПодобратьСправки2ДляСписанияИзРегистра1(Товары, ОрганизацияЕГАИС, Период, СтруктураПересчетаСуммы) Экспорт
	
	Данные = ПодготовитьДанныеДляПодбораСправок2(Товары);
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаОстатки.АлкогольнаяПродукция                                                КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(ТаблицаОстатки.Справка2.ДокументОснование.ДатаТТН, ДАТАВРЕМЯ(1, 1, 1))    КАК ДатаТТН,
	|	ТаблицаОстатки.Справка2                                                            КАК Справка2,
	|	ТаблицаОстатки.ОрганизацияЕГАИС                                                    КАК ОрганизацияЕГАИС,
	|	ТаблицаОстатки.СвободныйОстатокОстаток - ЕСТЬNULL(СправкиВДокументе.Количество, 0) КАК Количество
	|ПОМЕСТИТЬ
	|	ВтОстатки
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(&Период,
	|			ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|				И АлкогольнаяПродукция В (
	|					ВЫБРАТЬ
	|						Т.АлкогольнаяПродукция
	|					ИЗ
	|						втТаблицаДляЗаполнения КАК Т
	|						
	|					ОБЪЕДИНИТЬ ВСЕ
	|					
	|					ВЫБРАТЬ
	|						Т.АлкогольнаяПродукция
	|					ИЗ
	|						втТаблицаСоответствияБезАлкоПродукции КАК Т
	|					)
	|					) КАК ТаблицаОстатки
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДляСписания КАК СправкиВДокументе
	|		ПО ТаблицаОстатки.АлкогольнаяПродукция = СправкиВДокументе.АлкогольнаяПродукция
	|			И ТаблицаОстатки.Справка2 = СправкиВДокументе.Справка2
	|;
	|	
	|ВЫБРАТЬ
	|	АкцизныеМарки.ОрганизацияЕГАИС КАК ОрганизацияЕГАИС,
	|	АкцизныеМарки.Справка2 КАК Справка2,
	|	КОЛИЧЕСТВО(АкцизныеМарки.АкцизнаяМарка) КАК Количество
	|ПОМЕСТИТЬ
	|	АкцизныеМарки
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОстатки КАК втОстатки
	|		ПО ВтОстатки.Справка2 = АкцизныеМарки.Справка2
	|			И ВтОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС
	|ГДЕ
	|	АкцизныеМарки.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии),ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КПостановкеНаБаланс))
	|СГРУППИРОВАТЬ ПО
	|	АкцизныеМарки.ОрганизацияЕГАИС,
	|	АкцизныеМарки.Справка2;
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.АлкогольнаяПродукция                                                КАК АлкогольнаяПродукция,
	|	ЕСТЬNULL(ТаблицаОстатки.Справка2.ДокументОснование.ДатаТТН, ДАТАВРЕМЯ(1, 1, 1))    КАК ДатаТТН,
	|	ТаблицаОстатки.Справка2                                                            КАК Справка2,
	|	ТаблицаОстатки.Количество - ЕСТЬNULL(АкцизныеМарки.Количество, 0)                  КАК Количество
	|ИЗ
	|	ВТОстатки КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ АкцизныеМарки КАК АкцизныеМарки
	|		ПО ТаблицаОстатки.Справка2 = АкцизныеМарки.Справка2
	|			И ТаблицаОстатки.ОрганизацияЕГАИС = АкцизныеМарки.ОрганизацияЕГАИС
	|ГДЕ
	|	ТаблицаОстатки.Количество - ЕСТЬNULL(АкцизныеМарки.Количество, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	АлкогольнаяПродукция,
	|	ДатаТТН
	|ИТОГИ ПО
	|	АлкогольнаяПродукция");
	
	Запрос.МенеджерВременныхТаблиц = Данные.МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Период", Период);
	
	КоэффициентыПересчетаВЕдиницыЕГАИС = Данные.КоэффициентыПересчетаВЕдиницыЕГАИС;
	ТаблицаСоответствия = Данные.ТаблицаСоответствия;
	ТаблицаСоответствияБезАлкоПродукции = Данные.ТаблицаСоответствияБезАлкоПродукции;
	ОписанияНоменклатуры = Неопределено;
	
	ВыборкаАлкогольнаяПродукция = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаАлкогольнаяПродукция.Следующий() Цикл
		
		Выборка = ВыборкаАлкогольнаяПродукция.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			АлкогольнаяПродукция = ВыборкаАлкогольнаяПродукция.АлкогольнаяПродукция;
			ОстатокПоСправке     = Выборка.Количество;
			Справка2             = Выборка.Справка2;
			
			ЕстьСтрокиДляЗаполнения = ЗаполнитьСправку2ВТабличнойЧасти(
				Товары,
				АлкогольнаяПродукция,
				Справка2,
				ОстатокПоСправке,
				СтруктураПересчетаСуммы,
				КоэффициентыПересчетаВЕдиницыЕГАИС,
				ТаблицаСоответствия,
				ТаблицаСоответствияБезАлкоПродукции,
				ОписанияНоменклатуры);
			
			Если Не ЕстьСтрокиДляЗаполнения Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Подбирает справки 2 для списания по LIFO.
//
// Параметры:
//  Товары - ТабличнаяЧасть, ДанныеФормыКоллекция, ТаблицаЗначений - табличная часть, содержащая реквизиты:
//                                                                     АлкогольнаяПродукция, Справка2, Количество.
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - организация учета остатков,
//  Период - Дата - дата получения остатков.
//  СтруктураПересчетаСуммы - Структура - Структура со свойствами:
//   * Поля - Структура - содержит поля для пересчета суммы в табличной части документа,
//   * Строки - Массив Из ДанныеФормыЭлементКоллекции - ссылки на строки для пересчета сумм,
//   * ИтогКоличество - Число - сумма значений в поле "Количество" в строках переданных в параметре "Строки".
//
// Возвращаемое значение:
//  Булево - Истина, если все справки заполнены.
//
Функция ПодобратьСправки2ДляВозвратаИзРегистра2(Товары, ОрганизацияЕГАИС, Период, СтруктураПересчетаСуммы) Экспорт
	
	ОстатокВРегистре2 = Новый ТаблицаЗначений;
	ОстатокВРегистре2.Колонки.Добавить("Последняя",            Новый ОписаниеТипов("Булево"));
	ОстатокВРегистре2.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ОстатокВРегистре2.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ОстатокВРегистре2.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	ОстатокВРегистре2.Индексы.Добавить("АлкогольнаяПродукция, Последняя");
	
	Данные = ПодготовитьДанныеДляПодбораСправок2(Товары);
	Если Данные = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Таблицы = Новый Структура;
	Таблицы.Вставить("ОстатокВРегистре2",  ОстатокВРегистре2);
	Таблицы.Вставить("ТаблицаДляСписания", Данные.ТаблицаДляСписания);
	
	ОбработатьПорциюДанныхДляПодбораСправок2ДляВозвратаИзРегистра2(
		Данные.МенеджерВременныхТаблиц,
		ОрганизацияЕГАИС,
		Период,
		Таблицы);
	
	КоэффициентыПересчетаВЕдиницыЕГАИС = Данные.КоэффициентыПересчетаВЕдиницыЕГАИС;
	ТаблицаСоответствия = Данные.ТаблицаСоответствия;
	ОписанияНоменклатуры = Неопределено;
	
	Для Каждого СтрокаТЧ Из ОстатокВРегистре2 Цикл
		
		АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
		ОстатокПоСправке     = СтрокаТЧ.Количество;
		Справка2             = СтрокаТЧ.Справка2;
		
		ЗаполнитьСправку2ВТабличнойЧасти(
			Товары,
			АлкогольнаяПродукция,
			Справка2,
			ОстатокПоСправке,
			СтруктураПересчетаСуммы,
			КоэффициентыПересчетаВЕдиницыЕГАИС,
			ТаблицаСоответствия,,
			ОписанияНоменклатуры);
		
		Справки2Заполнены = Справки2ЗаполненыВТабличнойЧасти(Товары);
		Если Справки2Заполнены Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Справки2ЗаполненыВТабличнойЧасти(Товары);
	
КонецФункции

#КонецОбласти

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник        - ДокументОбъект - владелец присоединенного файла.
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимЗаписи     - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимПроведения - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументаЕГАИС(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлыЕГАИС(Источник, Ложь);
	
КонецПроцедуры

// Обработчик подписки на событие ПередЗаписью владельца присоединенного файла.
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник        - ДокументОбъект - владелец присоединенного файла.
//  Отказ           - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимЗаписи     - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
//  РежимПроведения - Булево - параметр, передаваемый в подписку на событие ПередЗаписью.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловОрганизацииЕГАИС(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлыЕГАИС(Источник, Истина);
	
КонецПроцедуры

// Проверяет возможность использования регистр №2 для организации.
//
// Параметры:
//   ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - ссылка на организацию в классификаторе ЕГАИС.
// 
// Возвращаемое значение:
//   Булево - Истина, если для организации можно использовать регистр №2.
//
Функция ИспользоватьРегистр2 (ОрганизацияЕГАИС) Экспорт
	
	Использовать = Ложь;
	ИнтеграцияЕГАИСПереопределяемый.ИспользоватьРегистр2(Использовать, ОрганизацияЕГАИС);
	Возврат Использовать;
	
КонецФункции

// Получить статусы ЕГАИС, цвет текста которых "требует внимания ЕГАИС"
// 
// Возвращаемое значение:
//  Массив - Статусы ЕГАИС, для которых требуется устанавливать цвет "требует внимания ЕГАИС"
//
Функция СтатусыЦветТекстаТребуетВниманияЕГАИС() Экспорт
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС = Новый Массив;
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОшибка);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОшибка);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияПодтверждениеОшибка);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ЗапросНаОтменуПроведенияОтказОшибка);
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияОшибка);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийОшибка);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ОшибкаПередачи);
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиОстатковЕГАИС.ОшибкаПередачи);
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ОшибкаПередачи);
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОшибкаПередачи);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОшибкаПередачи);
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	
	СтатусыЦветТекстаТребуетВниманияЕГАИС.Добавить(Перечисления.СтатусыИнформированияЕГАИС.ОшибкаПередачи);
	
	Возврат СтатусыЦветТекстаТребуетВниманияЕГАИС;
	
КонецФункции

// Получить представление статуса ЕГАИС.
//
// Параметры:
//  СтатусЕГАИС - ПеречислениеСсылка - Статус документа ЕГАИС.
//  ВходящиеДальнейшееДействие - Массив Из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Список разрешенных
//                                                                                                      дальнейших действий.
//                             - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС -
//  ДопустимыеДействия         - Массив Из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Список допустимых
//                                                                                                      дальнейших действий.
//                             - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС -
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - Представление статуса ЕГАИС.
Функция ПредставлениеСтатусаЕГАИС(СтатусЕГАИС, ВходящиеДальнейшееДействие, ДопустимыеДействия) Экспорт

	МассивДопустимыеДействия = Новый Массив;
	
	Если ТипЗнч(ДопустимыеДействия) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС") Тогда
		МассивДопустимыеДействия.Добавить(ДопустимыеДействия);
	Иначе
		МассивДопустимыеДействия = ДопустимыеДействия;
	КонецЕсли;
	
	Если ТипЗнч(СтатусЕГАИС) <> Тип("ФорматированнаяСтрока") Тогда
		
		СтатусыЦветТекстаТребуетВниманияЕГАИС = СтатусыЦветТекстаТребуетВниманияЕГАИС();
		
		Если СтатусыЦветТекстаТребуетВниманияЕГАИС.Найти(СтатусЕГАИС) <> Неопределено Тогда
			СтатусЕГАИСПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(
					Строка(СтатусЕГАИС),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС),
				" ",
				"(",
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'причина'"),,
					ЦветаСтиля.ЦветГиперссылкиГосИС,,
					"ПоказатьПричинуОшибки"),
				")");
		Иначе
			СтатусЕГАИСПредставление = Новый ФорматированнаяСтрока(Строка(СтатусЕГАИС));
		КонецЕсли;
		
	Иначе
		СтатусЕГАИСПредставление = СтатусЕГАИС;
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Если ТипЗнч(ВходящиеДальнейшееДействие) = Тип("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС") И ЗначениеЗаполнено(ВходящиеДальнейшееДействие) Тогда
		ДальнейшиеДействия.Добавить(ВходящиеДальнейшееДействие);
	ИначеЕсли ТипЗнч(ВходящиеДальнейшееДействие) = Тип("Массив") Тогда
		ДальнейшиеДействия = ВходящиеДальнейшееДействие;
	КонецЕсли;
	
	СтрокиДальнейшееДействие = Новый Массив;
	СтрокиДальнейшееДействие.Добавить(СтатусЕГАИСПредставление);
	СтрокиДальнейшееДействие.Добавить(", ");
	
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		
		Если Не ЗначениеЗаполнено(ДальнейшееДействие) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстГиперссылки = "";
		Если ДопустимоеДальнейшееДействие(ДальнейшееДействие, МассивДопустимыеДействия) Тогда
			Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОстатки Тогда
				ТекстГиперссылки = "ЗапроситьОстатки";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеАкцизныеМарки Тогда
				ТекстГиперссылки = "ЗапроситьАкцизныеМарки";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтчет Тогда
				ТекстГиперссылки = "ЗапроситьОтчет";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
				ТекстГиперссылки = "ПередатьДанные";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях Тогда
				ТекстГиперссылки = "ПодтвердитьАктОРасхождениях";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях Тогда
				ТекстГиперссылки = "ОтказатьсяОтАктаОРасхождениях";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной Тогда
				ТекстГиперссылки = "ОтказатьсяОтНакладной";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеПроверку Тогда
				ТекстГиперссылки = "ВыполнитьПроверку";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение Тогда
				ТекстГиперссылки = "ПодтвердитьПолучение";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения Тогда
				ТекстГиперссылки = "ЗапроситьОтменуПроведения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения Тогда
				ТекстГиперссылки = "ПодтвердитьЗапросНаОтменуПроведения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения Тогда
				ТекстГиперссылки = "ОтказатьсяОтЗапросаНаОтменуПроведения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
				ТекстГиперссылки = "ОтменитьОперацию";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных Тогда
				ТекстГиперссылки = "ОтменитьПередачу";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтработайтеРасхождения Тогда
				ТекстГиперссылки = "ОтработайтеРасхождения";
			ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтклонитеОтработкуРасхождений Тогда
				ТекстГиперссылки = "ОтклонитеОтработкуРасхождений";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстГиперссылки) Тогда
			
			Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
				СтрокиДальнейшееДействие.Добавить(" " + НСтр("ru = 'или'") + " ");
			КонецЕсли;
			
			СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
				НРег(Строка(ДальнейшееДействие)),
				Новый Шрифт(,,,,Истина),
				ЦветаСтиля.ЦветГиперссылкиГосИС,
				,
				ТекстГиперссылки);
				
			СтрокиДальнейшееДействие.Добавить(СтрокаДальнейшееДействие);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДальнейшееДействие.Количество() > 2 Тогда
		СтатусЕГАИСПредставление = Новый ФорматированнаяСтрока(СтрокиДальнейшееДействие);
	КонецЕсли;
	
	Возврат СтатусЕГАИСПредставление;

КонецФункции

// Проверяет, имеется ли выбранное действие в массиве допустимых действий
//
// Параметры:
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - выбранное действие.
//  ДопустимыеДействия - Массив - массив допустимых действий.
// 
// Возвращаемое значение:
//  Булево - Истина, если действие допустимо, Ложь в обратном случае.
//
Функция ДопустимоеДальнейшееДействие(ДальнейшееДействие, ДопустимыеДействия)
	
	Возврат ДопустимыеДействия.Найти(ДальнейшееДействие) <> Неопределено;
	
КонецФункции

// Создает (или обновляет, если найдена по рег. номеру) справку на основании переданных данных.
//
// Параметры:
//  ДанныеСправки - Структура - заполненная структура, полученная функцией ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки(1)(2),
//  ВидСправки - ПеречислениеСсылка.ВидыДокументовЕГАИС - вид справки,
//  ДополнительныеПараметры - Произвольный - параметры прикладной конфигурации,
//  ТекстОшибки - Строка - возвращаемый текст ошибки создания справки,
//  ВызыватьОбработчик - Булево - признак вызова обработчика переопределяемого модуля.
//
// Возвращаемое значение:
//   СправочникСсылка.Справки1ЕГАИС, СправочникСсылка.Справки2ЕГАИС - созданная (найденная) справка.
//
Функция СоздатьСправку(ДанныеСправки, ВидСправки) Экспорт
	
	Если ВидСправки = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СправкиЕГАИС.Ссылка КАК Ссылка,
		|	СправкиЕГАИС.РегистрационныйНомер КАК РегистрационныйНомер
		|ПОМЕСТИТЬ ВтСправки1
		|ИЗ
		|	Справочник.Справки1ЕГАИС КАК СправкиЕГАИС
		|ГДЕ
		|	СправкиЕГАИС.РегистрационныйНомер = &РегистрационныйНомер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Справки2ЕГАИС.Ссылка КАК Справка2,
		|	ВтСправки1.Ссылка    КАК Справка1
		|ИЗ
		|	Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСправки1 КАК ВтСправки1
		|		ПО (ВтСправки1.РегистрационныйНомер = Справки2ЕГАИС.НомерСправки1)
		|			И (Справки2ЕГАИС.Справка1 = ЗНАЧЕНИЕ(Справочник.Справки1ЕГАИС.ПустаяСсылка))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтСправки1.Ссылка КАК Справка1
		|ИЗ
		|	ВтСправки1 КАК ВтСправки1");
		
		Запрос.УстановитьПараметр("РегистрационныйНомер", ДанныеСправки.РегистрационныйНомер);
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ВыборкаПоСправкам2КОбновлению = РезультатЗапроса[1].Выбрать();
		Пока ВыборкаПоСправкам2КОбновлению.Следующий() Цикл
			
			Справка2Объект = ВыборкаПоСправкам2КОбновлению.Справка2.ПолучитьОбъект();
			Справка2Объект.Справка1 = ВыборкаПоСправкам2КОбновлению.Справка1;
			Справка2Объект.Записать();
			
		КонецЦикла;
		
		Выборка = РезультатЗапроса[2].Выбрать();
		Если Выборка.Следующий() Тогда
			СправкаОбъект = Выборка.Справка1.ПолучитьОбъект();
		Иначе
			СправкаОбъект = Справочники.Справки1ЕГАИС.СоздатьЭлемент();
		КонецЕсли;
		
		Для Каждого КлючЗначение Из ДанныеСправки Цикл
			
			Если ЗначениеЗаполнено(КлючЗначение.Значение)
				И СправкаОбъект[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
				СправкаОбъект[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Справки2ЕГАИС.Ссылка КАК Справка2,
		|	Справки1ЕГАИС.Ссылка КАК Справка1
		|ИЗ
		|	Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки1ЕГАИС КАК Справки1ЕГАИС
		|		ПО (Справки1ЕГАИС.РегистрационныйНомер = Справки2ЕГАИС.НомерСправки1)
		|ГДЕ
		|	Справки2ЕГАИС.РегистрационныйНомер = &РегистрационныйНомер");
		
		Запрос.УстановитьПараметр("РегистрационныйНомер", ДанныеСправки.РегистрационныйНомер);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			СправкаОбъект = Выборка.Справка2.ПолучитьОбъект();
		Иначе
			СправкаОбъект = Справочники.Справки2ЕГАИС.СоздатьЭлемент();
		КонецЕсли;
		
		СправкаОбъект.Справка1 = Выборка.Справка1;
		
		Для Каждого ДанныеДиапазона Из ДанныеСправки.ДиапазоныМарок Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ТипМарки",       ДанныеДиапазона.ТипМарки);
			ПараметрыОтбора.Вставить("СерияМарки",     ДанныеДиапазона.СерияМарки);
			ПараметрыОтбора.Вставить("НачальныйНомер", ДанныеДиапазона.НачальныйНомер);
			ПараметрыОтбора.Вставить("КонечныйНомер",  ДанныеДиапазона.КонечныйНомер);
			
			НайденныеСтроки = СправкаОбъект.ДиапазоныНомеровАкцизныхМарок.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(СправкаОбъект.ДиапазоныНомеровАкцизныхМарок.Добавить(), ДанныеДиапазона);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого КлючЗначение Из ДанныеСправки Цикл
			
			Если КлючЗначение.Ключ = "ДиапазоныМарок" Тогда
				Продолжить;
			КонецЕсли;
			
			Если КлючЗначение.Ключ = "Поштучная"
				И КлючЗначение.Значение = Ложь
				И СправкаОбъект.Поштучная Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(КлючЗначение.Значение)
				И СправкаОбъект[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
				СправкаОбъект[КлючЗначение.Ключ] = КлючЗначение.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СправкаОбъект.Модифицированность() Тогда
		СправкаОбъект.Записать();
	КонецЕсли;
	
	Возврат СправкаОбъект.Ссылка;
	
КонецФункции

// Процедура запуска регламентного задания ОбработкаОтветовЕГАИС.
//
Процедура ЗапуститьОбработкуОтветовЕГАИС() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.Найти("ОбработкаОтветовЕГАИС"));
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	ОбменДаннымиЕГАИСВызовСервера.ВыполнитьОбмен();
	
КонецПроцедуры

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//   ИмяПараметра           - строка - имя параметра сеанса.
//   УстановленныеПараметры - массив - все установленные параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	Если ИмяПараметра = "ИдентификаторСеансаЕГАИС" Тогда
		ПараметрыСеанса.ИдентификаторСеансаЕГАИС = Новый УникальныйИдентификатор;
		Если ТипЗнч(УстановленныеПараметры) = Тип("Массив") Тогда
			УстановленныеПараметры.Добавить(ИмяПараметра);
		ИначеЕсли ТипЗнч(УстановленныеПараметры) = Тип("Структура") Тогда
			УстановленныеПараметры.Вставить(ИмяПараметра);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбработкаОтветовЕГАИС;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	Настройка.ДоступноВМоделиСервиса = Ложь;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыЕГАИС;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	
КонецПроцедуры

// см. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыЕГАИС.Имя);
	
КонецПроцедуры

// см. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыЕГАИС.ИмяМетода);
	
КонецПроцедуры

// Возвращает значение переданного определяемого типа по переданному наименованию.
// 
// Параметры:
//  ИмяТипа - Строка - Имя типа
//  Наименование - Строка - Наименование
//  ТочноеСоответствие - Булево - Точное соответствие
//  Родитель - Неопределено - Родитель
//  Владелец - Неопределено - Владелец
// 
// Возвращаемое значение:
//  Произвольный, СправочникСсылкаИмяСправочника, Неопределено - Значение определяемого типа по наименованию
Функция ЗначениеОпределяемогоТипаПоНаименованию(ИмяТипа, Наименование, ТочноеСоответствие, Родитель = Неопределено, Владелец = Неопределено) Экспорт
	
	НайденноеЗначение     = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа(ИмяТипа);
	ТипыОпределяемогоТипа = Метаданные.ОпределяемыеТипы[ИмяТипа].Тип.Типы();
	
	Для Каждого ТипОпределяемогоТипа Из ТипыОпределяемогоТипа Цикл
		
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипОпределяемогоТипа) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяСправочника = Метаданные.НайтиПоТипу(ТипОпределяемогоТипа).Имя;
		НайденноеЗначение = Справочники[ИмяСправочника].НайтиПоНаименованию(Наименование, ТочноеСоответствие, Родитель, Владелец);
		
		Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Позволяет переопределить справочники хранения файлов по типам владельцев.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//
//  ИменаСправочников - Соответствие - содержит в ключах имена справочников.
//                      При вызове содержит стандартное имя одного справочника,
//                      помеченного, как основной (если существует).
//                      Основной справочник используется для интерактивного
//                      взаимодействия с пользователем. Чтобы указать основной
//                      справочник, нужно установить Истина в значение соответствия.
//                      Если установить Истина более одного раза, тогда будет ошибка.
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если ТипВладелецФайла = Тип("СправочникСсылка.КлассификаторОрганизацийЕГАИС") Тогда
		ИменаСправочников.Вставить("ЕГАИСПрисоединенныеФайлы", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииНастроекРаботыСФайлами(Настройки) Экспорт
	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ДокументыЕГАИС.Тип.Типы() Цикл
		МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
		Настройки.НеОчищатьФайлы.Добавить(МетаданныеТипа);
		Настройки.НеСинхронизироватьФайлы.Добавить(МетаданныеТипа);
		Настройки.НеСоздаватьФайлыПоШаблону.Добавить(МетаданныеТипа);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса для формирования временной таблицы коэффициентов пересчета базовых единиц измерения
// номенклатуры в единицы ЕГАИС:
//   - для упакованного товара: коэффициент пересчета в штуки (бутылки)
//   - для неупакованного товара: коэффициент пересчета в декалитры.
// Временная таблица используется при проведении документов по регистру ОстаткиЕГАИС и при передаче данных в УТМ.
//
// Параметры:
//  ИмяТаблицыТовары - Строка - Имя таблицы с колонками: АлкогольнаяПродукция, Номенклатура, Характеристика, Серия.
//  ИмяВременнойТаблицы - Строка - Имя результирующей временной таблицы.
//  ДобавлятьРазделитель - Булево - Признак добавления разделителя запросов.
//
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(ИмяТаблицыТовары = "ВТТовары", ИмяВременнойТаблицы = "ВТКоэффициентыПересчетаВЕдиницыЕГАИС", ДобавлятьРазделитель = Ложь) Экспорт
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Таблица.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
		|	Таблица.Номенклатура          КАК Номенклатура,
		|	Таблица.Характеристика        КАК Характеристика,
		|	Таблица.Серия                 КАК Серия,
		|	ЛОЖЬ                          КАК ПроверятьОбъемДАЛ,
		|	0                             КАК ОбъемДАЛ,
		|	1                             КАК Коэффициент
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	%1 КАК Таблица
		|СГРУППИРОВАТЬ ПО
		|	Таблица.АлкогольнаяПродукция,
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Серия
		|",
		ИмяТаблицыТовары,
		ИмяВременнойТаблицы);
	
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
		ТекстЗапроса,
		ИмяТаблицыТовары,
		ИмяВременнойТаблицы);
	
	Если ДобавлятьРазделитель Тогда
		ТекстЗапроса = ТекстЗапроса +
		";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ГиперссылкиВводаНаОсновании

Функция ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Объект) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		Возврат Ложь;
	Иначе
		ТипОбъекта = ТипЗнч(Объект.Ссылка);
		Если СтрНайти(""+ТипОбъекта, "ЕГАИС") Тогда
			Возврат Ложь;
		ИначеЕсли Метаданные.ОпределяемыеТипы.ОснованиеСтатусыОформленияДокументовЕГАИС.Тип.СодержитТип(ТипОбъекта) Тогда
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


// Возвращает структуру данных описания гиперссылки документа Акт списания ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаАктСписанияЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать акт списания ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьАктСписанияЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьАктСписанияЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Акт списания ЕГАИС не оформлен'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Акт списания ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Акт списания ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Акты списания ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Акт списания ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаАктПостановкиНаБалансЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать акт постановки на баланс ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьАктПостановкиНаБалансЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьАктПостановкиНаБалансЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Акт постановки на баланс ЕГАИС не оформлен'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Акт постановки на баланс ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Акт постановки на баланс ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Акты постановки на баланс ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа ТТН ЕГАИС (исходящая).
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаТТНИсходящаяЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать ТТН ЕГАИС (исходящую)'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьТТНИсходящаяЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьТТНИсходящаяЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'ТТН ЕГАИС (исходящая) не оформлена'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'ТТН ЕГАИС (исходящая) не создана'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'ТТН ЕГАИС (исходящая): %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'ТТН ЕГАИС (исходящие) (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа ТТН ЕГАИС (входящая).
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаТТНВходящаяЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'ТТН ЕГАИС (входящая) не получена'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьТТНВходящаяЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'ТТН ЕГАИС (входящая) не оформлена'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'ТТН ЕГАИС (входящая) не получена'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'ТТН ЕГАИС (входящая): %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'ТТН ЕГАИС (входящие) (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Чек ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаЧекЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать чек ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьЧекЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьЧекЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Чек ЕГАИС не оформлен'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Чек ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Чек ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Чек ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Чек ЕГАИС на возврат.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаЧекЕГАИСВозврат()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать чек ЕГАИС на возврат'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьЧекЕГАИСВозврат");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьЧекЕГАИСВозврат");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Чек ЕГАИС на возврат не оформлен'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Чек ЕГАИС на возврат не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Чек ЕГАИС на возврат: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Чек ЕГАИС на возврат (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Передача в регистр 2.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаПередачаВРегистр2ЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать передачу в регистр №2 ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьПередачаВРегистр2ЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьПередачаВРегистр2ЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Передача в регистр №2 ЕГАИС не оформлена'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Передача в регистр №2 ЕГАИС не создана'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Передача в регистр №2 ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Передача в регистр №2 ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Возврат из регистра 2.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаВозвратИзРегистра2ЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать возврат из регистра №2 ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьВозвратИзРегистра2ЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьВозвратИзРегистра2ЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Возврат из регистра №2 ЕГАИС не оформлен'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Возврат из регистра №2 ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Возврат из регистра №2 ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Возврат из регистра №2 ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Уведомление о планируемом импорте.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаУведомлениеОПланируемомИмпортеЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать уведомление о планируемом импорте ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьУведомлениеОПланируемомИмпортеЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьУведомлениеОПланируемомИмпортеЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Уведомление о планируемом импорте ЕГАИС не оформлено'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Уведомление о планируемом импорте ЕГАИС не создано'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Уведомление о планируемом импорте ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Уведомление о планируемом импорте ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Отчет об импорте.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаОтчетОбИмпортеЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать отчет об импорте ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьОтчетОбИмпортеЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьОтчетОбИмпортеЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Отчет об импорте ЕГАИС не оформлен'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Отчет об импорте ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Отчет об импорте ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Отчет об импорте ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает структуру данных описания гиперссылки документа Отчет о производстве.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * КомандаСоздать - Строка - Текст гиперссылки создания нового документа.
//   * ИмяКомандыСоздать - Строка - Имя команды Создать.
//   * ИмяКомандыОткрыть - Строка - Имя команды Открыть.
//   * ДокументОтсутствуетНетПравНаСоздание - Строка - Текст гиперссылки на создание документа, в случае отсутствия прав.
//   * Представление - Строка - Текст гиперссылки на список документов.
//   * НесколькоДокументовПредставление - Строка - Текст гиперссылки если найдено несколько документов.
//
Функция ПредставлениеДокументаОтчетОПроизводствеЕГАИС()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("КомандаСоздать",                       НСтр("ru = 'Создать отчет о производстве ЕГАИС'"));
	ВозвращаемоеЗначение.Вставить("ИмяКомандыСоздать",                    "СоздатьОтчетОПроизводствеЕГАИС");
	ВозвращаемоеЗначение.Вставить("ИмяКомандыОткрыть",                    "ОткрытьОтчетОПроизводствеЕГАИС");
	ВозвращаемоеЗначение.Вставить("ДокументНеОформлен",                   НСтр("ru = 'Отчет о производстве ЕГАИС не оформлен'"));
	ВозвращаемоеЗначение.Вставить("ДокументОтсутствуетНетПравНаСоздание", НСтр("ru = 'Отчет о производстве ЕГАИС не создан'"));
	ВозвращаемоеЗначение.Вставить("Представление",                        НСтр("ru = 'Отчет о производстве ЕГАИС: %1'"));
	ВозвращаемоеЗначение.Вставить("НесколькоДокументовПредставление",     НСтр("ru = 'Отчет о производстве ЕГАИС (%1)'"));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Получить данные для заполнения представления документа.
//
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных - Метаданные документа.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//  * КомандаСоздать - Строка - Представление документа, если документ требуется создать.
//  * ИмяКомандыСоздать - Строка - Имя команды "Создать".
//  * ИмяКомандыОткрыть - Строка - Имя команды "Открыть".
//  * ДокументОтсутствуетНетПравНаСоздание - Строка - Представление документа, если документ не создан.
//  * Представление - Строка - Представление документа.
//  * НесколькоДокументовПредставление - Строка - Представление документа, если их несколько.
//
Функция ПредставлениеДокумента(МетаданныеДокумента) Экспорт
	
	Если МетаданныеДокумента = Метаданные.Документы.АктСписанияЕГАИС Тогда
		
		Возврат ПредставлениеДокументаАктСписанияЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.АктПостановкиНаБалансЕГАИС Тогда
		
		Возврат ПредставлениеДокументаАктПостановкиНаБалансЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
		
		Возврат ПредставлениеДокументаТТНИсходящаяЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
		
		Возврат ПредставлениеДокументаТТНВходящаяЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ЧекЕГАИС Тогда
		
		Возврат ПредставлениеДокументаЧекЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ЧекЕГАИСВозврат Тогда
		
		Возврат ПредставлениеДокументаЧекЕГАИСВозврат();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ПередачаВРегистр2ЕГАИС Тогда
		
		Возврат ПредставлениеДокументаПередачаВРегистр2ЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ВозвратИзРегистра2ЕГАИС Тогда
		
		Возврат ПредставлениеДокументаВозвратИзРегистра2ЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС Тогда
		
		Возврат ПредставлениеДокументаУведомлениеОПланируемомИмпортеЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ОтчетОбИмпортеЕГАИС Тогда
		
		Возврат ПредставлениеДокументаОтчетОбИмпортеЕГАИС();
		
	ИначеЕсли МетаданныеДокумента = Метаданные.Документы.ОтчетОПроизводствеЕГАИС Тогда
		
		Возврат ПредставлениеДокументаОтчетОПроизводствеЕГАИС();
		
	КонецЕсли;
	
КонецФункции

// Получить данные документа ЕГАИС
//
// Параметры:
//  МетаданныеДокумента - ОбъектМетаданных - Метаданные документа.
//  ДокументыПоОснованию - Структура - структура со свойствами:
//   * ВозвратИзРегистра2ЕГАИС - Структура - структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС - Статус документа.
//   * ПередачаВРегистр2ЕГАИС - Структура - Структура со свойствами:
//     ** Ссылка - ДокументСсылка - Документ.
//     ** Статус - ПеречислениеСсылка.СтатусыОбработкиПередачиВРегистр2ЕГАИС - Статус документа.
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * Представление - Строка - Представление документа.
//   * МассивДокументов - Массив - Массив документов.
//   * МетаданныеДокумента - ОбъектМетаданных - Метаданные документа.
//
Функция ДанныеДокументаЕГАИС(МетаданныеДокумента, ДокументыПоОснованию, СтатусыОформления) Экспорт
	
	ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
	ПравоЧтения     = ПравоДоступа("Чтение",     МетаданныеДокумента);
	
	Если Не ПравоЧтения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФорматированныеСтроки = Новый Массив;
	
	Представления = ПредставлениеДокумента(МетаданныеДокумента);
	
	МассивДокументов = ДокументыПоОснованию[МетаданныеДокумента.Имя];
	
	ЕстьСтатусОформления = СтатусыОформления.Свойство(МетаданныеДокумента.Имя);
	Если ЕстьСтатусОформления Тогда
		СтатусОформления = СтатусыОформления[МетаданныеДокумента.Имя];
	Иначе
		СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ПустаяСсылка();
	КонецЕсли;
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		МассивДокументов = ДокументыПоОснованию[МетаданныеДокумента.Имя];
		Если МассивДокументов.Количество() = 1 Тогда
			
			ДанныеДокумента = МассивДокументов[0];
			
			ТекстНадписи = СтрШаблон(Представления.Представление, ДанныеДокумента.Статус);
			
			Если СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ОформленоЧастично Тогда
				ИмяКоманды = "ОткрытьПротоколОбменаЕГАИС";
			ИначеЕсли СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.НеОформлено Тогда
				ИмяКоманды = "ОткрытьПротоколОбменаЕГАИС";
			ИначеЕсли СтатусОформления = Перечисления.СтатусыОформленияДокументовЕГАИС.ЕстьОшибкиОформления Тогда
				ИмяКоманды = "ОткрытьПротоколОбменаЕГАИС";
			Иначе
				ИмяКоманды = Представления.ИмяКомандыОткрыть;
			КонецЕсли;
			
		ИначеЕсли МассивДокументов.Количество() > 1 Тогда
			
			ТекстНадписи = СтрШаблон(Представления.НесколькоДокументовПредставление, МассивДокументов.Количество());
			ИмяКоманды   = "ОткрытьПротоколОбменаЕГАИС";
			
		КонецЕсли;
		
		Если ТекстНадписи = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
			
			ТекстНадписи = ТекстНадписи + ", " + СтатусОформления;
			
		КонецЕсли;
		
		Если ИмяКоманды = Неопределено Тогда
			Цвет = Неопределено;
		Иначе
			Цвет = ЦветаСтиля.ЦветГиперссылкиГосИС;
		КонецЕсли;
		
		ФорматированныеСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды));
		
	Иначе
		
		Если СтатусОформления <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
			
			Если ПравоДобавления Тогда
				ТекстНадписи = Представления.КомандаСоздать;
				ИмяКоманды   = Представления.ИмяКомандыСоздать;
			Иначе
				ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
				ИмяКоманды   = Неопределено;
			КонецЕсли;
			
			Если ТекстНадписи = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГосИС;
			КонецЕсли;
			
			ФорматированныеСтроки.Добавить(
				Новый ФорматированнаяСтрока(
					ТекстНадписи,,
					Цвет,,
					ИмяКоманды));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Представление",       Новый ФорматированнаяСтрока(ФорматированныеСтроки));
	ВозвращаемоеЗначение.Вставить("МассивДокументов",    МассивДокументов);
	ВозвращаемоеЗначение.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	ВозвращаемоеЗначение.Вставить("СтатусОформления",    СтатусОформления);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДанныеОформленияДокументовПоПриоритетам(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	Запрос.УстановитьПараметр("Основание", ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	ДокументыПоОснованию = ИнтеграцияЕГАИСВызовСервера.ДокументыПоОснованию(ДокументСсылка);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	ТипДокумента = ТипЗнч(ДокументСсылка);
	
	Если ТипДокумента = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		РезультатыЗапросаПередачиВРегистры2и3 = РезультатыЗапросаПередачиВРегистры2и3ПоТТНВходящей(ДокументСсылка);
		Грузополучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Грузополучатель");
	КонецЕсли;

	ОформлениеДокументовПоПриоритетам = Новый Соответствие;
	
	Для Каждого КлючИЗначение Из СтатусыОформления Цикл
		
		Если КлючИЗначение.Ключ = Метаданные.Документы.АктСписанияЕГАИС.Имя Тогда
			
			Если Метаданные.ОпределяемыеТипы.ОснованиеАктаСписанияЕГАИС.Тип.СодержитТип(ТипДокумента) Тогда
				Данные = ДанныеДокументаЕГАИС(Метаданные.Документы.АктСписанияЕГАИС, ДокументыПоОснованию, СтатусыОформления);
				ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 1, Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = Метаданные.Документы.АктПостановкиНаБалансЕГАИС.Имя Тогда
			
			Если Метаданные.ОпределяемыеТипы.ОснованиеАктаПостановкиНаБалансЕГАИС.Тип.СодержитТип(ТипДокумента) Тогда
				МетаданныеПостановкиНаБаланс = Метаданные.Документы.АктПостановкиНаБалансЕГАИС;
				Данные = ДанныеДокументаЕГАИС(МетаданныеПостановкиНаБаланс, ДокументыПоОснованию, СтатусыОформления);
				
				Если ТипДокумента <> Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
					ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 2, Данные);
				ИначеЕсли Строка(Данные.Представление) = ПредставлениеДокумента(МетаданныеПостановкиНаБаланс).КомандаСоздать Тогда
					Если НЕ РезультатыЗапросаПередачиВРегистры2и3[РезультатыЗапросаПередачиВРегистры2и3.Количество() - 1].Пустой() Тогда
						ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 2, Данные);
					КонецЕсли;
				Иначе
					ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 2, Данные);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = Метаданные.Документы.ПередачаВРегистр2ЕГАИС.Имя Тогда
			
			Если Метаданные.ОпределяемыеТипы.ОснованиеПередачиВРегистр2ЕГАИС.Тип.СодержитТип(ТипДокумента) Тогда
				МетаданныеПередачаВРегистр2 = Метаданные.Документы.ПередачаВРегистр2ЕГАИС;
				Данные = ДанныеДокументаЕГАИС(МетаданныеПередачаВРегистр2, ДокументыПоОснованию, СтатусыОформления);
				
				Если ТипДокумента <> Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
					ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 7, Данные);
				ИначеЕсли НЕ ИспользоватьРегистр2(Грузополучатель) Тогда
				ИначеЕсли Строка(Данные.Представление) = ПредставлениеДокумента(МетаданныеПередачаВРегистр2).КомандаСоздать Тогда
					Если НЕ РезультатыЗапросаПередачиВРегистры2и3[РезультатыЗапросаПередачиВРегистры2и3.Количество() - 2].Пустой() Тогда
						ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 2, Данные);
					КонецЕсли;
				Иначе
					ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 2, Данные);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = Метаданные.Документы.ТТНИсходящаяЕГАИС.Имя
			Или КлючИЗначение.Ключ = Метаданные.Документы.ТТНВходящаяЕГАИС.Имя Тогда
			
			Если Метаданные.ОпределяемыеТипы.ОснованиеТТНИсходящаяЕГАИС.Тип.СодержитТип(ТипДокумента) Тогда
				Данные = ДанныеДокументаЕГАИС(Метаданные.Документы.ТТНИсходящаяЕГАИС, ДокументыПоОснованию, СтатусыОформления);
				ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 3, Данные);
			КонецЕсли;
			Если Метаданные.ОпределяемыеТипы.ОснованиеТТНВходящаяЕГАИС.Тип.СодержитТип(ТипДокумента) Тогда
				Данные = ДанныеДокументаЕГАИС(Метаданные.Документы.ТТНВходящаяЕГАИС, ДокументыПоОснованию, СтатусыОформления);
				ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 4, Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = Метаданные.Документы.ЧекЕГАИС.Имя
			Или КлючИЗначение.Ключ = Метаданные.Документы.ЧекЕГАИСВозврат.Имя Тогда
			
			Если Метаданные.ОпределяемыеТипы.ОснованиеЧекаЕГАИС.Тип.СодержитТип(ТипДокумента) Тогда
				Данные = ДанныеДокументаЕГАИС(Метаданные.Документы.ЧекЕГАИС, ДокументыПоОснованию, СтатусыОформления);
				ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 1, Данные);
			КонецЕсли;
			Если Метаданные.ОпределяемыеТипы.ОснованиеЧекаЕГАИСВозврат.Тип.СодержитТип(ТипДокумента) Тогда
				Данные = ДанныеДокументаЕГАИС(Метаданные.Документы.ЧекЕГАИСВозврат, ДокументыПоОснованию, СтатусыОформления);
				ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 6, Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС.Имя Тогда
			
			Если Метаданные.ОпределяемыеТипы.ОснованиеУведомлениеОПланируемомИмпортеЕГАИС.Тип.СодержитТип(ТипДокумента) Тогда
				Данные = ДанныеДокументаЕГАИС(Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС, ДокументыПоОснованию, СтатусыОформления);
				ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 1, Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		Если КлючИЗначение.Ключ = Метаданные.Документы.ОтчетОПроизводствеЕГАИС.Имя Тогда
			
			Если Метаданные.ОпределяемыеТипы.ОснованиеОтчетОПроизводствеЕГАИС.Тип.СодержитТип(ТипДокумента) Тогда
				Данные = ДанныеДокументаЕГАИС(Метаданные.Документы.ОтчетОПроизводствеЕГАИС, ДокументыПоОснованию, СтатусыОформления);
				ДобавитьВРезультат(ОформлениеДокументовПоПриоритетам, 1, Данные);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОформлениеДокументовПоПриоритетам;
	
КонецФункции

Функция РезультатыЗапросаПередачиВРегистры2и3ПоТТНВходящей(ДокументСсылка) Экспорт
	
	ТекстЗапроса = Документы.ТТНВходящаяЕГАИС.ТекстЗапросаПередачиВРегистры2и3НаОснованииТТНВходящей();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПередачаВРегистр2",                              Документы.ПередачаВРегистр2ЕГАИС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПолеКоэффициентПересчетаНеупакованнойПродукции", 1);
	Запрос.УстановитьПараметр("ДокументОснование",                              ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяУпаковка",                                 ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Упаковка"));
	Запрос.УстановитьПараметр("КонечныеСтатусы",                                Документы.ПередачаВРегистр2ЕГАИС.КонечныеСтатусы());
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

#КонецОбласти

#Область Проведение

Процедура ПроверитьЗаполнениеШтрихкодовУпаковок(Объект, Отказ) Экспорт
	
	ВидыПродукции = ИнтеграцияЕГАИСИСМП.ДопустимыеВидыПродукцииИмпортаПроизводства();
	ВидПродукции = ВидыПродукции[0];
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Объект, Неопределено, ВидПродукции);
	
	СписокУпаковок = Объект.ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПСлужебный");
	РезультатПроверки = Модуль.ТаблицаТоварыСоответствуетСпискуУпаковокМаркируемойПродукции(Объект.Товары, СписокУпаковок, ПараметрыСканирования); 
	
	Если РезультатПроверки.ДанныеСоответствуют Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'В строке %1 для номенклатурной позиции %2 должно быть указано %5 %3, а подобрано - %4'");
	ШаблонОшибкиЛишниеКоды = НСтр("ru = 'Для номенклатурной позиции %1 подобрано %3 %2, а соответствующая им строка табличной части ""Товары"" отсутствует'");
	
	Для Каждого Расхождение Из РезультатПроверки.СтрокиСРасхождением Цикл
		Если Расхождение.НомерСтроки = -1 Тогда
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЛишниеКоды, Расхождение.Номенклатура, Расхождение.Указано, Расхождение.Представление);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект,"Товары",, Отказ);
		Иначе
			ТекстОшибки = СтрШаблон(ШаблонОшибки,
				Расхождение.НомерСтроки, Расхождение.Номенклатура, Расхождение.Необходимо, Расхождение.Указано, Расхождение.Представление);
			ПутьКТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Расхождение.НомерСтроки, Расхождение.Поле);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект, ПутьКТабличнойЧасти,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проводит документ для внутреннего учета остатков по регистру №1
//
Процедура ПровестиДокумент(ДокументОбъект, Отказ, РежимПроведения) Экспорт
	
	// Инициализация дополнительных свойств для проведения документа
	ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументОбъект.Ссылка, ДокументОбъект.ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	ПолноеИмя = ДокументОбъект.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	МенеджерОбъекта.ИнициализироватьДанныеДокумента(ДокументОбъект.Ссылка, ДокументОбъект.ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ИнтеграцияИС.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	
	РегистрыНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.ОтразитьДвижения(ДокументОбъект.ДополнительныеСвойства, ДокументОбъект.Движения, Отказ);
	
	ИнтеграцияИС.ЗаписатьНаборыЗаписей(ДокументОбъект);
	
	ИнтеграцияИСПереопределяемый.ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения);
	
	ИнтеграцияИС.ОчиститьДополнительныеСвойстваДляПроведения(ДокументОбъект.ДополнительныеСвойства);
	
КонецПроцедуры

// Проверяет наличие текста запроса для формирования указанной таблицы
//
// Параметры:
//  ИмяТаблицы    - Строка - имя таблицы
//	ТекстыЗапроса - СписокЗначений - значениями которого являются блоки запроса,
//	                                 синонимами - имена таблиц в которые необходимо поместить
//	                                 результат выполнения каждого отдельного блока запроса.
// 
// Возвращаемое значение:
//   - Булево - Истина, если текст запроса есть.
//
Функция ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Экспорт

	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если НРег(ТекстЗапроса.Представление) = НРег(ИмяТаблицы) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область ВыгрузкаДанных

// Функция возвращает объект XDTO, соответствующий переданной организации.
//
Процедура ЗаполнитьВXDTOОрганизацию_v1(ОбъектXDTOРодитель, ИмяПоля, Источник, Префикс = "", СообщениеXML) Экспорт
	
	ЕстьДанныеИсточникаДляЗаполнения = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, Префикс + "Код");
	Если Не ЕстьДанныеИсточникаДляЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTOРодитель, ИмяПоля);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка");
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("ИНН");
	Реквизиты.Вставить("КПП");
	Реквизиты.Вставить("КодСтраны");
	Реквизиты.Вставить("КодРегиона");
	Реквизиты.Вставить("ПочтовыйИндекс");
	Реквизиты.Вставить("ПредставлениеАдреса");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Identity = Строка(Реквизиты.Ссылка.УникальныйИдентификатор());
	Иначе
		Identity = Неопределено;
	КонецЕсли;
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Identity",    Identity,                           СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ClientRegId", Реквизиты.Код,                      СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "FullName",    Реквизиты.НаименованиеПолное,       СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ShortName",   Реквизиты.Наименование,             СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "INN",         Реквизиты.ИНН,                      СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "KPP",         Реквизиты.КПП,                      СообщениеXML);
	
	ОбъектXDTO.address = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "address");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO.address, "Country",     Формат(Реквизиты.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="),      СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO.address, "Index",       Формат(Реквизиты.ПочтовыйИндекс, "ЧЦ=6; ЧВН=; ЧГ="), СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO.address, "RegionCode",  Формат(Реквизиты.КодРегиона, "ЧЦ=2; ЧВН="),          СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO.address, "description", Реквизиты.ПредставлениеАдреса,                       СообщениеXML);
	
	ОбъектXDTOРодитель[ИмяПоля] = ОбъектXDTO;
	
КонецПроцедуры

// Функция возвращает объект XDTO, соответствующий переданной организации.
//
Процедура ЗаполнитьВXDTOОрганизацию_v2(ОбъектXDTOРодитель, ИмяПоля, Источник, Префикс = "", СообщениеXML) Экспорт
	
	ЕстьДанныеИсточникаДляЗаполнения = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, Префикс + "Код");
	Если Не ЕстьДанныеИсточникаДляЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTOРодитель, ИмяПоля);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("ИНН");
	Реквизиты.Вставить("КПП");
	Реквизиты.Вставить("КодСтраны");
	Реквизиты.Вставить("КодРегиона");
	Реквизиты.Вставить("ПредставлениеАдреса");
	Реквизиты.Вставить("ТипОрганизации");
	Реквизиты.Вставить("ИдентификаторОрганизацииТС");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ОрганизацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "UL");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ОрганизацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "FL");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ОрганизацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "FO");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ОрганизацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "TS");
	КонецЕсли;
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "ClientRegId", Реквизиты.Код,                        СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "FullName",    Реквизиты.НаименованиеПолное,         СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "ShortName",   Реквизиты.Наименование,               СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "INN",         Реквизиты.ИНН,                        СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "KPP",         Реквизиты.КПП,                        СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "TSNUM",       Реквизиты.ИдентификаторОрганизацииТС, СообщениеXML);
	
	ОрганизацияXDTO.address = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОрганизацияXDTO, "address");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "Country",     Формат(Реквизиты.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "RegionCode",  Формат(Реквизиты.КодРегиона, "ЧЦ=2; ЧВН="),     СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "description", Реквизиты.ПредставлениеАдреса,                  СообщениеXML);
	
	Если Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ОбъектXDTO.UL = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ОбъектXDTO.FL = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ОбъектXDTO.FO = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ОбъектXDTO.TS = ОрганизацияXDTO;
	КонецЕсли;
	
	ОбъектXDTOРодитель[ИмяПоля] = ОбъектXDTO;
	
КонецПроцедуры

// Функция возвращает объект XDTO, соответствующий переданной организации.
//
Процедура ЗаполнитьВXDTOОрганизациюСЮрАдресом_v2(ОбъектXDTOРодитель, ИмяПоля, Источник, Префикс = "", СообщениеXML) Экспорт
	
	ЕстьДанныеИсточникаДляЗаполнения = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, Префикс + "Код");
	Если Не ЕстьДанныеИсточникаДляЗаполнения Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTOРодитель, ИмяПоля);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("ИНН");
	Реквизиты.Вставить("КПП");
	Реквизиты.Вставить("КодСтраны");
	Реквизиты.Вставить("КодРегиона");
	Реквизиты.Вставить("ПредставлениеАдреса");
	Реквизиты.Вставить("ТипОрганизации");
	Реквизиты.Вставить("ИдентификаторОрганизацииТС");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	Если Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ОрганизацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "UL");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ОрганизацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "FL");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ОрганизацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "FO");
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ОрганизацияXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "TS");
	КонецЕсли;
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "ClientRegId", Реквизиты.Код,                        СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "FullName",    Реквизиты.НаименованиеПолное,         СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "ShortName",   Реквизиты.Наименование,               СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "INN",         Реквизиты.ИНН,                        СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "KPP",         Реквизиты.КПП,                        СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO, "TSNUM",       Реквизиты.ИдентификаторОрганизацииТС, СообщениеXML);
	
	ОрганизацияXDTO.address = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОрганизацияXDTO, "address");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "Country",     Формат(Реквизиты.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "RegionCode",  Формат(Реквизиты.КодРегиона, "ЧЦ=2; ЧВН="),     СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address, "description", Реквизиты.ПредставлениеАдреса,                  СообщениеXML);
	
	ОрганизацияXDTO.address_ur = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОрганизацияXDTO, "address_ur");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address_ur, "Country",     Формат(Реквизиты.КодСтраны, "ЧЦ=3; ЧН=; ЧВН="), СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address_ur, "RegionCode",  Формат(Реквизиты.КодРегиона, "ЧЦ=2; ЧВН="),     СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОрганизацияXDTO.address_ur, "description", Реквизиты.ПредставлениеАдреса,                  СообщениеXML);
	
	Если Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ Тогда
		ОбъектXDTO.UL = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ Тогда
		ОбъектXDTO.FL = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент Тогда
		ОбъектXDTO.FO = ОрганизацияXDTO;
	ИначеЕсли Реквизиты.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза Тогда
		ОбъектXDTO.TS = ОрганизацияXDTO;
	КонецЕсли;
	
	ОбъектXDTOРодитель[ИмяПоля] = ОбъектXDTO;
	
КонецПроцедуры

	// Функция возвращает объект XDTO, соответствующий переданной алкогольной продукции.
//
Процедура ЗаполнитьВXDTOАлкогольнуюПродукцию_v1(ОбъектXDTO, Источник, Префикс = "", СообщениеXML) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Ссылка");
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("Объем");
	Реквизиты.Вставить("Крепость");
	Реквизиты.Вставить("КодВидаПродукции");
	Реквизиты.Вставить("ТипПродукции");
	Реквизиты.Вставить("ВидЛицензии");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
	
	Если ЗначениеЗаполнено(Реквизиты.Ссылка) Тогда
		Identity = Строка(Реквизиты.Ссылка.УникальныйИдентификатор());
	Иначе
		Identity = Неопределено;
	КонецЕсли;
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Identity",  Identity,                      СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Type",      ТипыАП[Реквизиты.ВидЛицензии], СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "FullName",  Реквизиты.НаименованиеПолное,  СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ShortName", Реквизиты.Наименование,        СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcCode",   Реквизиты.Код,                 СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Capacity",  Реквизиты.Объем,               СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcVolume", Реквизиты.Крепость,            СообщениеXML);
	
	ЗаполнитьВXDTOОрганизацию_v1(ОбъектXDTO, "Producer", Источник, "Производитель", СообщениеXML);
	ЗаполнитьВXDTOОрганизацию_v1(ОбъектXDTO, "Importer", Источник, "Импортер",      СообщениеXML);
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ProductVCode", Реквизиты.КодВидаПродукции, СообщениеXML);
	
КонецПроцедуры

// Функция возвращает объект XDTO, соответствующий переданной алкогольной продукции.
//
Процедура ЗаполнитьВXDTOАлкогольнуюПродукцию_v2(ОбъектXDTO, Источник, Префикс = "", СообщениеXML) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("Объем");
	Реквизиты.Вставить("Крепость");
	Реквизиты.Вставить("КодВидаПродукции");
	Реквизиты.Вставить("ТипПродукции");
	Реквизиты.Вставить("ВидЛицензии");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
	
	ТипыПродукции = Новый Соответствие;
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.ПустаяСсылка(), "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Упакованная, "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Неупакованная, "Unpacked");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "UnitType",  ТипыПродукции[Реквизиты.ТипПродукции], СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Type",      ТипыАП[Реквизиты.ВидЛицензии],         СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "FullName",  Реквизиты.НаименованиеПолное,          СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ShortName", Реквизиты.Наименование,                СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcCode",   Реквизиты.Код,                         СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Capacity",  Реквизиты.Объем,                       СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcVolume", Реквизиты.Крепость,                    СообщениеXML);
	
	ЗаполнитьВXDTOОрганизацию_v2(ОбъектXDTO, "Producer", Источник, "Производитель", СообщениеXML);
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ProductVCode", Реквизиты.КодВидаПродукции, СообщениеXML);
	
КонецПроцедуры

// Функция возвращает объект XDTO, соответствующий переданной алкогольной продукции.
//
Процедура ЗаполнитьВXDTOИностраннуюАлкогольнуюПродукцию_v2(ОбъектXDTO, Источник, Префикс = "", СообщениеXML) Экспорт
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Код");
	Реквизиты.Вставить("Наименование");
	Реквизиты.Вставить("НаименованиеПолное");
	Реквизиты.Вставить("Объем");
	Реквизиты.Вставить("Крепость");
	Реквизиты.Вставить("КодВидаПродукции");
	Реквизиты.Вставить("ТипПродукции");
	Реквизиты.Вставить("ВидЛицензии");
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		ИмяРеквизитаИсточника = Префикс + КлючИЗначение.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточника) Тогда
			Реквизиты[КлючИЗначение.Ключ] = Источник[ИмяРеквизитаИсточника];
		КонецЕсли;
	КонецЦикла;
	
	ТипыАП = Новый Соответствие;
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Пиво, "АП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт, "Спирт");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция, "ССНП");
	ТипыАП.Вставить(Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция, "ССП");
	
	ТипыПродукции = Новый Соответствие;
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.ПустаяСсылка(), "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Упакованная, "Packed");
	ТипыПродукции.Вставить(Перечисления.ТипыПродукцииЕГАИС.Неупакованная, "Unpacked");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "UnitType",  ТипыПродукции[Реквизиты.ТипПродукции], СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Type",      ТипыАП[Реквизиты.ВидЛицензии],         СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "FullName",  Реквизиты.НаименованиеПолное,          СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ShortName", Реквизиты.Наименование,                СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcCode",   Реквизиты.Код,                         СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Capacity",  Реквизиты.Объем,                       СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "AlcVolume", Реквизиты.Крепость,                    СообщениеXML);
	
	ЗаполнитьВXDTOОрганизацию_v2(ОбъектXDTO, "Producer", Источник, "Производитель", СообщениеXML);
	ЗаполнитьВXDTOОрганизацию_v2(ОбъектXDTO, "Importer", Источник, "Импортер",      СообщениеXML);
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ProductVCode", Реквизиты.КодВидаПродукции, СообщениеXML);
	
КонецПроцедуры

// Функция возвращает объект XDTO, соответствующий транспортному разделу ТТН.
// 
// Параметры:
//  ДоставкаXDTO - ОбъектXDTO - Доставка XDTO
//  Источник - Произвольный - Источник
//  СообщениеXML - Структура - Сообщение XML
// 
// Возвращаемое значение:
//  Булево - Заполнить ВXDTOТранспортный раздел ТТН
Функция ЗаполнитьВXDTOТранспортныйРазделТТН(ДоставкаXDTO, Источник, СообщениеXML) Экспорт
	
	ТранспортныйРазделЗаполнен = Истина;
	
	Если ЗначениеЗаполнено(Источник.ТипТранспорта) Тогда
		ТранспортныйРазделЗаполнен = Истина;
	КонецЕсли;
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(
		ДоставкаXDTO, "TRAN_TYPE",
		ТипТранспорта(Источник.ТипТранспорта, "Route"), СообщениеXML);
	
	ПоляДоставки = Новый Соответствие;
	ПоляДоставки.Вставить("TRAN_COMPANY",     "Перевозчик");
	ПоляДоставки.Вставить("TRAN_CAR",         "НомерТранспортногоСредства");
	ПоляДоставки.Вставить("TRAN_TRAILER",     "Прицеп");
	ПоляДоставки.Вставить("TRAN_CUSTOMER",    "Заказчик");
	ПоляДоставки.Вставить("TRAN_DRIVER",      "Водитель");
	ПоляДоставки.Вставить("TRAN_LOADPOINT",   "ПунктПогрузки");
	ПоляДоставки.Вставить("TRAN_UNLOADPOINT", "ПунктРазгрузки");
	ПоляДоставки.Вставить("TRAN_REDIRECT",    "Перенаправление");
	ПоляДоставки.Вставить("TRAN_FORWARDER",   "Экспедитор");
	
	Для Каждого СвойствоДоставкиXDTO Из ДоставкаXDTO.Свойства() Цикл
		
		ИмяПоляДанных = ПоляДоставки[СвойствоДоставкиXDTO.Имя];
		Если Не ИмяПоляДанных = Неопределено И Не Источник[ИмяПоляДанных] = Неопределено Тогда
			
			МаксДлина = 0;
			Для Каждого Фасет Из СвойствоДоставкиXDTO.Тип.Фасеты Цикл
				Если Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
					МаксДлина = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Фасет.Значение);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если МаксДлина > 0 Тогда
				ЗначениеСвойства = Лев(Источник[ИмяПоляДанных], МаксДлина);
			Иначе
				ЗначениеСвойства = Источник[ИмяПоляДанных];
			КонецЕсли;
			
			СвойствоЗаполнено = РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(
				ДоставкаXDTO, СвойствоДоставкиXDTO.Имя,
				ЗначениеСвойства, СообщениеXML);
			
			Если СвойствоЗаполнено И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				ТранспортныйРазделЗаполнен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТранспортныйРазделЗаполнен;
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий транспортному разделу ТТН.
// 
// Параметры:
//  ДоставкаXDTO - ОбъектXDTO - Доставка XDTO
//  Источник - Произвольный - Источник
//  СообщениеXML - Структура - Сообщение XML
// 
// Возвращаемое значение:
//  Булево - Заполнить ВXDTOТранспортный раздел ТТН v4
Функция ЗаполнитьВXDTOТранспортныйРазделТТН_v4(ДоставкаXDTO, Источник, СообщениеXML) Экспорт
	
	ТранспортныйРазделЗаполнен = Ложь;
	
	Если ЗначениеЗаполнено(Источник.ТипТранспорта) Тогда
		ТранспортныйРазделЗаполнен = Истина;
	КонецЕсли;
	
	// Новое поле на замену TRAN_CAR
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(
		ДоставкаXDTO, "TRANSPORT_TYPE",
		ТипТранспорта(Источник.ТипТранспорта), СообщениеXML);
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(
		ДоставкаXDTO, "TRAN_TYPE",
		ТипТранспорта(Источник.ТипТранспорта, "Route"), СообщениеXML);
	
	// Тэг предназначен для определения в чьей собственности находится товар в пути
	Если Источник.ТоварВПутиПринадлежитГрузополучателю Тогда
		ТранспортныйРазделЗаполнен = Истина;
	КонецЕсли;
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(
		ДоставкаXDTO, "ChangeOwnership",
		ТоварВПутиПринадлежитГрузоотправителю(
			Источник.ТоварВПутиПринадлежитГрузополучателю), СообщениеXML);
	
	ПоляДоставки = Новый Соответствие;
	ПоляДоставки.Вставить("TRAN_COMPANY",        "Перевозчик");
	// Новое поле на замену TRAN_CAR
	ПоляДоставки.Вставить("TRANSPORT_REGNUMBER", "НомерТранспортногоСредства");
	ПоляДоставки.Вставить("TRAN_TRAILER",        "Прицеп");
	ПоляДоставки.Вставить("TRAN_CUSTOMER",       "Заказчик");
	ПоляДоставки.Вставить("TRAN_DRIVER",         "Водитель");
	ПоляДоставки.Вставить("TRAN_LOADPOINT",      "ПунктПогрузки");
	ПоляДоставки.Вставить("TRAN_UNLOADPOINT",    "ПунктРазгрузки");
	ПоляДоставки.Вставить("TRAN_REDIRECT",       "Перенаправление");
	ПоляДоставки.Вставить("TRAN_FORWARDER",      "Экспедитор");
	
	Для Каждого СвойствоДоставкиXDTO Из ДоставкаXDTO.Свойства() Цикл
		
		ИмяПоляДанных = ПоляДоставки[СвойствоДоставкиXDTO.Имя];
		Если Не ИмяПоляДанных = Неопределено И Не Источник[ИмяПоляДанных] = Неопределено Тогда
			
			МаксДлина = 0;
			Для Каждого Фасет Из СвойствоДоставкиXDTO.Тип.Фасеты Цикл
				Если Фасет.Вид = ВидФасетаXDTO.МаксДлина Тогда
					МаксДлина = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Фасет.Значение);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если МаксДлина > 0 Тогда
				ЗначениеСвойства = Лев(Источник[ИмяПоляДанных], МаксДлина);
			Иначе
				ЗначениеСвойства = Источник[ИмяПоляДанных];
			КонецЕсли;
			
			СвойствоЗаполнено = РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(
				ДоставкаXDTO, СвойствоДоставкиXDTO.Имя,
				ЗначениеСвойства, СообщениеXML);
			
			Если СвойствоЗаполнено И ЗначениеЗаполнено(ЗначениеСвойства) Тогда
				ТранспортныйРазделЗаполнен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТранспортныйРазделЗаполнен;
	
КонецФункции

// Преобразовывает текстовое представление статуса документа в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - ПеречислениеСсылка.ТипыТранспортаЕГАИС, Строка - значение для перекодировки
//  Формат - Строка - Формат значения
//  ИспользоватьИсключение - Булево - Истина, если требуется вызывать исключение.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыТранспортаЕГАИС, Строка, Неопределено - статус документа.
Функция ТипТранспорта(Знач ЗначениеПоиска, Формат = "WayBill", ИспользоватьИсключение = Истина) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		
		ЗначениеПоиска = НРег(ЗначениеПоиска);
		
		Если ЗначениеПоиска = "car" И Формат = "WayBill" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.Автомобиль;
		ИначеЕсли ЗначениеПоиска = "ship" И Формат = "WayBill" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.МорскойКонтейнер;
		ИначеЕсли ЗначениеПоиска = "railway" И Формат = "WayBill" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.ЖелезнодорожныйВагон;
		ИначеЕсли ЗначениеПоиска = "aircraft" И Формат = "WayBill" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.Авиарейс;
		ИначеЕсли ЗначениеПоиска = "other" И Формат = "WayBill" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.Прочее;
		
		ИначеЕсли ЗначениеПоиска = "413" И Формат = "Route" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.Автомобиль;
		ИначеЕсли ЗначениеПоиска = "411" И Формат = "Route" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.МорскойКонтейнер;
		ИначеЕсли ЗначениеПоиска = "412" И Формат = "Route" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.ЖелезнодорожныйВагон;
		ИначеЕсли ЗначениеПоиска = "410" И Формат = "Route" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.Авиарейс;
		ИначеЕсли ЗначениеПоиска = "419" И Формат = "Route" Тогда
			Возврат Перечисления.ТипыТранспортаЕГАИС.Прочее;
		КонецЕсли;
		
	Иначе
		Если ЗначениеПоиска = Перечисления.ТипыТранспортаЕГАИС.Автомобиль
			Или ЗначениеПоиска = Перечисления.ТипыТранспортаЕГАИС.ПустаяСсылка() Тогда
			
			Если Формат = "WayBill" Тогда
				Возврат "car";
			ИначеЕсли Формат = "Route" Тогда
				Возврат "413";
			КонецЕсли;
			
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаЕГАИС.МорскойКонтейнер Тогда
			
			Если Формат = "WayBill" Тогда
				Возврат "ship";
			ИначеЕсли Формат = "Route" Тогда
				Возврат "411";
			КонецЕсли;
			
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаЕГАИС.ЖелезнодорожныйВагон Тогда
			
			Если Формат = "WayBill" Тогда
				Возврат "railway";
			ИначеЕсли Формат = "Route" Тогда
				Возврат "412";
			КонецЕсли;
			
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаЕГАИС.Авиарейс Тогда
			
			Если Формат = "WayBill" Тогда
				Возврат "aircraft";
			ИначеЕсли Формат = "Route" Тогда
				Возврат "410";
			КонецЕсли;
			
		ИначеЕсли ЗначениеПоиска = Перечисления.ТипыТранспортаЕГАИС.Прочее Тогда
			
			Если Формат = "WayBill" Тогда
				Возврат "other";
			ИначеЕсли Формат = "Route" Тогда
				Возврат "419";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьИсключение Тогда
		ВызватьИсключение
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип транспорта: %1'"),
				ЗначениеПоиска);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразовывает текстовое представление флага "Товар в пути принадлежит грузополучателю" в значение перечисления и наоборот.
//
// Параметры:
//  ЗначениеПоиска - Булево, Строка - значение для перекодировки
//
// Возвращаемое значение:
//  Булево, Строка - Товар в пути принадлежит грузополучателю.
Функция ТоварВПутиПринадлежитГрузоотправителю(Знач ЗначениеПоиска) Экспорт
	
	Если ТипЗнч(ЗначениеПоиска) = Тип("Строка") Тогда
		Если ЗначениеПоиска = "IsChange" Тогда
			Возврат Истина;
		ИначеЕсли ЗначениеПоиска = "NotChange" Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если ЗначениеПоиска Тогда
			Возврат "IsChange";
		Иначе
			Возврат "NotChange";
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение
		СтрШаблон(
			НСтр("ru = 'Неизвестное значение реквизита ""Товар в пути принадлежит грузополучателю"": %1'"),
			ЗначениеПоиска);
	
КонецФункции

// Функция возвращает объект XDTO, соответствующий переданным акцизным маркам.
//
Процедура ЗаполнитьВXDTOАкцизныеМаркиПоОтбору(ОбъектXDTO, ПараметрыОтбора, ИсточникАкцизныеМарки, ИмяПоля, СообщениеXML) Экспорт
	
	КодыАкцизныхМарок = Новый Массив;
	НайденныеСтроки = ИсточникАкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
	КонецЦикла;
	
	Если КодыАкцизныхМарок.Количество() > 0 Тогда
		
		ОбъектXDTO.MarkCodeInfo = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "MarkCodeInfo");
		
		Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
			РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO.MarkCodeInfo, ИмяПоля, КодАкцизнойМарки, СообщениеXML);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает объект XDTO, соответствующий переданным акцизным маркам.
//
Процедура ЗаполнитьВXDTOАкцизныеМаркиПоСправке2_v2(ОбъектXDTO, Источник, ИсточникАкцизныеМарки, ИмяПоля, СообщениеXML) Экспорт
	
	КодыАкцизныхМарок = Новый Массив;
	НайденныеСтроки = ИсточникАкцизныеМарки.НайтиСтроки(Новый Структура("Справка2", Источник.Справка2));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
	КонецЦикла;
	
	Если КодыАкцизныхМарок.Количество() > 0 Тогда
		
		ОбъектXDTO.MarkCodeInfo = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "MarkCodeInfo");
		
		Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
			РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO.MarkCodeInfo, ИмяПоля, КодАкцизнойМарки, СообщениеXML);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает объект XDTO, соответствующий переданным акцизным маркам.
//
Процедура ЗаполнитьВXDTOАкцизныеМаркиПоСправке2_v3(ОбъектXDTO, Источник, ИсточникАкцизныеМарки, СообщениеXML) Экспорт
	
	КодыАкцизныхМарок = Новый Массив;
	НайденныеСтроки = ИсточникАкцизныеМарки.НайтиСтроки(Новый Структура("Справка2", Источник.Справка2));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
	КонецЦикла;
	
	Если КодыАкцизныхМарок.Количество() > 0 Тогда
		
		MarkInfo = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "MarkInfo");
		
		Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
			РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(MarkInfo, "amc", КодАкцизнойМарки, СообщениеXML);
		КонецЦикла;
		
		ОбъектXDTO.MarkInfo.Добавить(MarkInfo);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает объект XDTO, соответствующий переданным акцизным маркам.
//
Процедура ЗаполнитьВXDTOАкцизныеМаркиПоСправке2_v4(ОбъектXDTO, Источник, ИсточникАкцизныеМарки, СообщениеXML) Экспорт
	
	КодыАкцизныхМарок = Новый Массив;
	НайденныеСтроки = ИсточникАкцизныеМарки.НайтиСтроки(Новый Структура("Справка2", Источник.Справка2));
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
	КонецЦикла;
	
	Если КодыАкцизныхМарок.Количество() > 0 Тогда
		
		ОбъектXDTO.MarkInfo = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОбъектXDTO, "MarkInfo");
		Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
			РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO.MarkInfo, "amc", КодАкцизнойМарки, СообщениеXML);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

// Обрабатывает ответ ЕГАИС на запрос о получении документа.
//
// Параметры:
//  ВходящиеДанные - (См. ОбменДаннымиЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента).
//  ТаблицаСоответствияДокументовТипамЕГАИС - ТаблицаЗначений - см. функцию Перечисления.ВидыДокументовЕГАИС.ТаблицаСоответствияДокументовТипамЕГАИС().
// 
// Возвращаемое значение:
//  Структура:
//   * Результат         - Неопределено, Структура - результат выполнения запроса.
//   * ТекстОшибки       - Строка - текст ошибки, в случае ее возникновения.
//   * ТекстСообщенияXML - Строка - содержит ответ, полученный на запрос.
//   * СтатусОбработки   - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//
Функция ОбработатьОтветНаЗапросПолученияДокумента(ВходящиеДанные, ТаблицаСоответствияДокументовТипамЕГАИС = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозвращаемоеЗначение = Новый Структура;
	
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", ВходящиеДанные.ТекстXML);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ВходящиеДанные.ТекстXML);
	
	Попытка
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(КорневоеПространствоИмен(), "Documents").Тип());
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось прочитать входящий документ %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВходящиеДанные.АдресЗапроса);
		
		ПредставлениеОшибки = РаботаСXMLЕГАИС.ПредставлениеОшибкиXDTO(ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ЧтениеXML, ЧтениеXML.КонтекстПространствИмен.Глубина);
		ПодробноеПредставлениеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Попытка
			
			ОбъектXDTO = РаботаСXMLЕГАИС.ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				РаботаСXMLИС.ПроизвольныйОбъектXDTOПоТекстуСообщенияXML(ВходящиеДанные.ТекстXML),
				РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(КорневоеПространствоИмен(), "Documents", Неопределено));
			
		Исключение
			
			ОбменДаннымиЕГАИС.ОбработатьОшибку(
				НСтр("ru = 'При разборе XML ответа на запрос получения документа из ЕГАИС возникла ошибка.
				           |Текст ошибки: %ТекстОшибки%'"),
				ОбменДаннымиЕГАИС.РасширеннаяИнформацияОбОшибке(ПредставлениеОшибки, ПодробноеПредставлениеОшибки),
				ВозвращаемоеЗначение);
			
		КонецПопытки;
		
	КонецПопытки;
	
	Попытка
		
		Операция              = Неопределено;
		ФорматОбмена          = Неопределено;
		ТипЕГАИС              = Неопределено;
		ДокументыПоТипамЕГАИС = РаботаСXMLИС.ОбъектXDTOВСтруктуру(ОбъектXDTO.Document);
		Объект                = Неопределено;
		
		Для Каждого КлючИЗначение Из ДокументыПоТипамЕГАИС Цикл
			Если КлючИЗначение.Значение <> Неопределено Тогда
				ТипЕГАИС                  = КлючИЗначение.Ключ;
				Объект                    = ДокументыПоТипамЕГАИС[ТипЕГАИС];
				ВидДокументаИФорматОбмена = Перечисления.ВидыДокументовЕГАИС.ДанныеДокументаПоТипуЕГАИС(
					ТипЕГАИС, ТаблицаСоответствияДокументовТипамЕГАИС);
				Операция                  = ВидДокументаИФорматОбмена.ВидДокументаЕГАИС;
				ФорматОбмена              = ВидДокументаИФорматОбмена.ФорматОбмена;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("ИдентификаторЗапроса", ВходящиеДанные.ИдентификаторЗапроса);
		СтруктураРезультата.Вставить("АдресЗапроса",         ВходящиеДанные.АдресЗапроса);
		СтруктураРезультата.Вставить("ТекстXML",             ВходящиеДанные.ТекстXML);
		
		СтруктураРезультата.Вставить("ТипЕГАИС",     ТипЕГАИС);
		СтруктураРезультата.Вставить("Операция",     Операция);
		СтруктураРезультата.Вставить("ФорматОбмена", ФорматОбмена);
		СтруктураРезультата.Вставить("Объект",       Объект);
		
		ВозвращаемоеЗначение.Результат = СтруктураРезультата;
		
	Исключение
		
		ОбменДаннымиЕГАИС.ОбработатьОшибку(
			НСтр("ru = 'При разборе объекта XDTO ответа на запрос получения документа из ЕГАИС возникла ошибка:
			           |Текст ошибки: %ТекстОшибки%'"), ИнформацияОбОшибке(), ВозвращаемоеЗначение);
		
		Возврат ВозвращаемоеЗначение;
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиОбъектПоИдентификатору(МетаданныеОбъекта, ИмяРеквизита, Значение, ВидКвитанции = Неопределено, ОрганизацияЕГАИС = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяРеквизита = "ИдентификаторЗапроса" Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПротоколОбмена.Документ            КАК Ссылка,
		|	ТаблицаДокументы.ДокументОснование КАК ДокументОснование,
		|	ПротоколОбмена.Операция            КАК Операция,
		|	ПротоколОбмена.Ссылка              КАК ИсходящееСообщение,
		|	ПротоколОбмена.ФорматОбмена        КАК ФорматОбмена
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
		|		ЛЕВОЕ СОЕДИНЕНИЕ " + МетаданныеОбъекта.ПолноеИмя() + " КАК ТаблицаДокументы
		|		ПО ТаблицаДокументы.Ссылка = ПротоколОбмена.Документ
		|ГДЕ
		|	ПротоколОбмена.ИдентификаторЗапроса = &Значение
		|	И ПротоколОбмена.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)");
		
	ИначеЕсли ВидКвитанции = Неопределено Тогда
		
		Если МетаданныеОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Таблица.Ссылка            КАК Ссылка,
			|	Таблица.ДокументОснование КАК ДокументОснование,
			|	Неопределено              КАК Операция,
			|	Неопределено              КАК ИсходящееСообщение,
			|	Таблица.ФорматОбмена      КАК ФорматОбмена
			|ИЗ
			|	Документ.ТТНВходящаяЕГАИС КАК Таблица
			|ГДЕ
			|	(&ОрганизацияЕГАИС = НЕОПРЕДЕЛЕНО Или Таблица.Грузополучатель = &ОрганизацияЕГАИС)
			|	И Таблица." + ИмяРеквизита + " = &Значение");
		ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                                      КАК Ссылка,
			|	Таблица.ДокументОснование                           КАК ДокументОснование,
			|	Неопределено                                        КАК Операция,
			|	Неопределено                                        КАК ИсходящееСообщение,
			|	ЕСТЬNULL(ПротоколОбмена.ФорматОбмена, НЕОПРЕДЕЛЕНО) КАК ФорматОбмена
			|ИЗ
			|	Документ.ТТНИсходящаяЕГАИС КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
			|		ПО Таблица.Ссылка = ПротоколОбмена.Документ
			|ГДЕ
			|	(&ОрганизацияЕГАИС = НЕОПРЕДЕЛЕНО Или Таблица.Грузоотправитель = &ОрганизацияЕГАИС)
			|	И Таблица." + ИмяРеквизита + " = &Значение
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбмена.ДатаСоздания ВОЗР
			|");
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                                      КАК Ссылка,
			|	Таблица.ДокументОснование                           КАК ДокументОснование,
			|	Неопределено                                        КАК Операция,
			|	Неопределено                                        КАК ИсходящееСообщение,
			|	ЕСТЬNULL(ПротоколОбмена.ФорматОбмена, НЕОПРЕДЕЛЕНО) КАК ФорматОбмена
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + " КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
			|		ПО Таблица.Ссылка = ПротоколОбмена.Документ
			|ГДЕ
			|	Таблица." + ИмяРеквизита + " = &Значение
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбмена.ДатаСоздания ВОЗР
			|");
		КонецЕсли;
		
	Иначе
		
		Если МетаданныеОбъекта = Метаданные.Документы.ТТНВходящаяЕГАИС Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                       КАК Ссылка,
			|	Таблица.ДокументОснование            КАК ДокументОснование,
			|	Таблица.ФорматОбмена                 КАК ФорматОбмена,
			|	ЕСТЬNULL(ПротоколОбменаИсходящий.Ссылка,       НЕОПРЕДЕЛЕНО)     КАК ИсходящееСообщение,
			|	ЕСТЬNULL(ПротоколОбменаИсходящий.Операция,     НЕОПРЕДЕЛЕНО)     КАК Операция,
			|	ЕСТЬNULL(ПротоколОбменаИсходящий.ДатаСоздания, ДатаВремя(1,1,1)) КАК ДатаСоздания
			|ИЗ
			|	Документ.ТТНВходящаяЕГАИС КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаИсходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаИсходящий.Документ
			|			И ПротоколОбменаИсходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаВходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаВходящий.Документ
			|			И ПротоколОбменаВходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
			|			И ПротоколОбменаВходящий.СообщениеОснование = ПротоколОбменаИсходящий.Ссылка
			|			И ПротоколОбменаВходящий.Операция = &ВидКвитанции
			|ГДЕ
			|	(&ОрганизацияЕГАИС = НЕОПРЕДЕЛЕНО Или Таблица.Грузополучатель = &ОрганизацияЕГАИС)
			|	И Таблица." + ИмяРеквизита + " = &Значение
			|	И ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбменаИсходящий.ДатаСоздания УБЫВ
			|");
			
		ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ТТНИсходящаяЕГАИС Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                       КАК Ссылка,
			|	Таблица.ДокументОснование            КАК ДокументОснование,
			|	ПротоколОбменаИсходящий.Ссылка       КАК ИсходящееСообщение,
			|	ПротоколОбменаИсходящий.Операция     КАК Операция,
			|	ПротоколОбменаИсходящий.ФорматОбмена КАК ФорматОбмена,
			|	ПротоколОбменаИсходящий.ДатаСоздания КАК ДатаСоздания
			|ИЗ
			|	Документ.ТТНИсходящаяЕГАИС КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаИсходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаИсходящий.Документ
			|			И ПротоколОбменаИсходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаВходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаВходящий.Документ
			|			И ПротоколОбменаВходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
			|			И ПротоколОбменаВходящий.СообщениеОснование = ПротоколОбменаИсходящий.Ссылка
			|			И ПротоколОбменаВходящий.Операция = &ВидКвитанции
			|ГДЕ
			|	(&ОрганизацияЕГАИС = НЕОПРЕДЕЛЕНО Или Таблица.Грузоотправитель = &ОрганизацияЕГАИС)
			|	И Таблица." + ИмяРеквизита + " = &Значение
			|	И ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбменаИсходящий.ДатаСоздания УБЫВ
			|");
			
		Иначе
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.Ссылка                       КАК Ссылка,
			|	Таблица.ДокументОснование            КАК ДокументОснование,
			|	ПротоколОбменаИсходящий.Ссылка       КАК ИсходящееСообщение,
			|	ПротоколОбменаИсходящий.Операция     КАК Операция,
			|	ПротоколОбменаИсходящий.ФорматОбмена КАК ФорматОбмена,
			|	ПротоколОбменаИсходящий.ДатаСоздания КАК ДатаСоздания
			|ИЗ
			|	" + МетаданныеОбъекта.ПолноеИмя() + " КАК Таблица
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаИсходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаИсходящий.Документ
			|			И ПротоколОбменаИсходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбменаВходящий
			|			ПО Таблица.Ссылка = ПротоколОбменаВходящий.Документ
			|			И ПротоколОбменаВходящий.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Входящий)
			|			И ПротоколОбменаВходящий.СообщениеОснование = ПротоколОбменаИсходящий.Ссылка
			|			И ПротоколОбменаВходящий.Операция = &ВидКвитанции
			|ГДЕ
			|	Таблица." + ИмяРеквизита + " = &Значение
			|	И ПротоколОбменаВходящий.Ссылка ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	ПротоколОбменаИсходящий.ДатаСоздания УБЫВ
			|");
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидКвитанции", ВидКвитанции);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Значение",         Значение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Ссылка",             Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("ДокументОснование",  Выборка.ДокументОснование);
		ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Выборка.ИсходящееСообщение);
		ВозвращаемоеЗначение.Вставить("Операция",           Выборка.Операция);
		ВозвращаемоеЗначение.Вставить("ФорматОбмена",       Выборка.ФорматОбмена);
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
	
Функция ПараметрыИдентификатораЗапросаV4(ИдентификаторЗапроса) Экспорт
	
	Если СтрНайти(ИдентификаторЗапроса, "-") = 13 И СтрДлина(Сред(ИдентификаторЗапроса, 14)) = 36 Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("КодФСРАР",      Лев(ИдентификаторЗапроса, 12));
		ВозвращаемоеЗначение.Вставить("Идентификатор", Сред(ИдентификаторЗапроса, 14));
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает данные последнего исходящего запроса по идентификатору.
//
// Параметры:
//  ИдентификаторЗапроса - Строка - идентификатор исходящего запроса.
//
// Возвращаемое значение:
//   Структура - данные последнего исходящего запроса. Неопределено - если запрос не найден.
//
Функция НайтиОбъектПоИдентификаторуЗапроса(ИдентификаторЗапроса, ИскатьДокументОснование = Истина) Экспорт
	
	ПараметрыИдентификатораЗапросаV4 = ПараметрыИдентификатораЗапросаV4(ИдентификаторЗапроса);
	
	ИдентификаторыЗапроса = Новый Массив;
	ИдентификаторыЗапроса.Добавить(ИдентификаторЗапроса);
	Если ПараметрыИдентификатораЗапросаV4 <> Неопределено Тогда
		ИдентификаторыЗапроса.Добавить(ПараметрыИдентификатораЗапросаV4.Идентификатор);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколОбмена.Документ     КАК Ссылка,
	|	ПротоколОбмена.Операция     КАК Операция,
	|	ПротоколОбмена.Ссылка       КАК ИсходящееСообщение,
	|	ПротоколОбмена.ФорматОбмена КАК ФорматОбмена
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
	|ГДЕ
	|	ПротоколОбмена.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ПротоколОбмена.ИдентификаторЗапроса В (&ИдентификаторыЗапроса)");
	
	Запрос.УстановитьПараметр("ИдентификаторыЗапроса", ИдентификаторыЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДокументОснование = Неопределено;
		Если ИскатьДокументОснование
			И ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			МетаданныеДокумента = Выборка.Ссылка.Метаданные();
			Если Метаданные.Документы.Содержит(МетаданныеДокумента)
				И МетаданныеДокумента.Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
				ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "ДокументОснование");
			КонецЕсли;
		КонецЕсли;
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("Ссылка",             Выборка.Ссылка);
		ВозвращаемоеЗначение.Вставить("ДокументОснование",  ДокументОснование);
		ВозвращаемоеЗначение.Вставить("Операция",           Выборка.Операция);
		ВозвращаемоеЗначение.Вставить("ИсходящееСообщение", Выборка.ИсходящееСообщение);
		ВозвращаемоеЗначение.Вставить("ФорматОбмена",       Выборка.ФорматОбмена);
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Возвращает вид документа и ссылку на документ-основание, выгруженного ранее в ЕГАИС
//
Функция НайтиОбъектПоИдентификаторуТипаЕГАИСПриЗагрузкеКвитанции(Идентификатор, ТипЕГАИС, ВидКвитанции, ОрганизацияЕГАИС = Неопределено)
	
	Операция = Перечисления.ВидыДокументовЕГАИС.ДанныеДокументаПоТипуЕГАИС(ТипЕГАИС).ВидДокументаЕГАИС;
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		РезультатПоиска = НайтиОбъектПоИдентификатору(
			Метаданные.Документы.ТТНИсходящаяЕГАИС,
			"Идентификатор",
			Идентификатор,
			ВидКвитанции,
			ОрганизацияЕГАИС);
		
		Если РезультатПоиска = Неопределено Тогда
			
			РезультатПоиска = НайтиОбъектПоИдентификатору(
				Метаданные.Документы.ТТНВходящаяЕГАИС,
				"Идентификатор",
				Идентификатор,
				ВидКвитанции,
				ОрганизацияЕГАИС);
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктТТН Тогда
		
		РезультатПоиска = НайтиОбъектПоИдентификатору(
			Метаданные.Документы.ТТНИсходящаяЕГАИС,
			"Идентификатор",
			Идентификатор,
			ВидКвитанции);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1
		ИЛИ Операция = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр2 Тогда
		
		РезультатПоиска = НайтиОбъектПоИдентификатору(
			Метаданные.Документы.АктПостановкиНаБалансЕГАИС,
			"Идентификатор",
			Идентификатор,
			ВидКвитанции);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра1
		ИЛИ Операция = Перечисления.ВидыДокументовЕГАИС.АктСписанияИзРегистра2 Тогда
		
		РезультатПоиска = НайтиОбъектПоИдентификатору(
			Метаданные.Документы.АктСписанияЕГАИС,
			"Идентификатор",
			Идентификатор,
			ВидКвитанции);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ВозвратИзРегистра2 Тогда
		
		РезультатПоиска = НайтиОбъектПоИдентификатору(
			Метаданные.Документы.ВозвратИзРегистра2ЕГАИС,
			"Идентификатор",
			Идентификатор,
			ВидКвитанции);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ПередачаВРегистр2 Тогда
		
		РезультатПоиска = НайтиОбъектПоИдентификатору(
			Метаданные.Документы.ПередачаВРегистр2ЕГАИС,
			"Идентификатор",
			Идентификатор,
			ВидКвитанции);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОПланируемомИмпорте Тогда
		
		РезультатПоиска = НайтиОбъектПоИдентификатору(
			Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС,
			"Идентификатор",
			Идентификатор,
			ВидКвитанции);
		
	КонецЕсли;
	
	Возврат РезультатПоиска;
	
КонецФункции

Функция НайтиУведомлениеОРегистрацииСправок(ДанныеТТН, ДанныеДокументовРегистрацияСправок) Экспорт
	
	ШапкаТТН = ДанныеТТН.Объект.Header;
	
	Для Каждого ЭлементМассива Из ДанныеДокументовРегистрацияСправок Цикл
		
		ШапкаРегистрация = ЭлементМассива.Объект.Header;
		
		Если ШапкаРегистрация.Identity = ДанныеТТН.Объект.Identity
			И ШапкаРегистрация.WBNUMBER = ШапкаТТН.NUMBER
			И ШапкаРегистрация.WBDate = ШапкаТТН.Date
			И ДанныеОрганизации(ШапкаРегистрация.Shipper).ClientRegId = ДанныеОрганизации(ШапкаТТН.Shipper).ClientRegId
			И ДанныеОрганизации(ШапкаРегистрация.Consignee).ClientRegId = ДанныеОрганизации(ШапкаТТН.Consignee).ClientRegId Тогда
			
			Возврат ЭлементМассива;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//Возвращает историю справок 2 по ТТН из массива полученных историй
//
// Возвращаемое значение:
//   Произвольный - история справок 2
Функция НайтиИсториюСправок2ПоТТН(УведомлениеОРегистрации, ИсторияСправок2ПоТТН) Экспорт
	
	ШапкаТТН = УведомлениеОРегистрации.Объект.Header;
	WebRegID = ШапкаТТН.WBRegId;
	
	Для Каждого ЭлементМассива Из ИсторияСправок2ПоТТН Цикл
		
		ШапкаИстории = ЭлементМассива.Объект.Header;
		
		Если ШапкаИстории.WBRegId = WebRegID Тогда
			
			Возврат ЭлементМассива;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИсходящееСообщение(ИдентификаторЗапроса) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколОбмена.СообщениеОснование КАК Ссылка
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ПротоколОбмена
	|ГДЕ
	|	ПротоколОбмена.ИдентификаторЗапроса = &ИдентификаторЗапроса
	|	И ПротоколОбмена.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)");
	
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", ИдентификаторЗапроса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Создает ТТН на основании переданных данных.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьТТНВходящуюЕГАИС(ОрганизацияЕГАИС, ДополнительныеДанные) Экспорт
	
	ДанныеДокументаТТН                     = ДополнительныеДанные.ДанныеДокументаТТН;
	ДанныеДокументаУведомлениеОРегистрации = ДополнительныеДанные.ДанныеДокументаУведомлениеОРегистрации;
	ДанныеДокументаИсторияПоСправкам2      = ДополнительныеДанные.ДанныеДокументаИсторияПоСправкам2;
	ДанныеДокументаТранспортнаяНакладная   = ДополнительныеДанные.ДанныеДокументаТранспортнаяНакладная;
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	Ссылка = Документы.ТТНВходящаяЕГАИС.ПолучитьСсылку();
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокументаТТН.Операция);
	Реквизиты.Вставить("Документ",             Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   Неопределено);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получена ТТН ЕГАИС (входящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокументаТТН.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокументаТТН.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	РезультатДобавленияЗаписиТТН = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокументаТТН.ТекстXML,
		Реквизиты, Истина);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокументаУведомлениеОРегистрации.Операция);
	Реквизиты.Вставить("Документ",             Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   Неопределено);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получено уведомление о регистрации движения ТТН ЕГАИС (входящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокументаУведомлениеОРегистрации.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокументаУведомлениеОРегистрации.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокументаУведомлениеОРегистрации.ТекстXML,
		Реквизиты, Истина);
	
	Если РезультатДобавленияЗаписиТТН.НовоеСообщение Тогда
		
		ДокументОбъект = Документы.ТТНВходящаяЕГАИС.СоздатьДокумент();
		ДокументОбъект.УстановитьСсылкуНового(Ссылка);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ДокументОбъект.Идентификатор      = Строка(ДанныеДокументаТТН.Объект.Identity);
		ДокументОбъект.ИдентификаторЕГАИС = Строка(ДанныеДокументаУведомлениеОРегистрации.Объект.Header.WBRegId);
		ДокументОбъект.ФорматОбмена       = ДанныеДокументаТТН.ФорматОбмена;
		
		Если СтрНайти(ВРег(ДанныеДокументаТТН.Объект.Header.Type), ВРег("Return")) > 0 Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ВозвратОтПокупателя;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийТТНВходящейЕГАИС.ПриходнаяНакладная;
		КонецЕсли;
		
		Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			ДокументОбъект.Упакована = (ДанныеДокументаТТН.Объект.Header.UnitType = "Packed");
		КонецЕсли;
		
		ДокументОбъект.НомерТТН         = ДанныеДокументаТТН.Объект.Header.NUMBER;
		ДокументОбъект.ДатаТТН          = ДанныеДокументаТТН.Объект.Header.Date;
		ДокументОбъект.ДатаОтгрузки     = ДанныеДокументаТТН.Объект.Header.ShippingDate;
		ДокументОбъект.Грузоотправитель = ЗагрузитьОрганизацию(ДанныеДокументаТТН.Объект.Header.Shipper);
		ДокументОбъект.Грузополучатель  = ЗагрузитьОрганизацию(ДанныеДокументаТТН.Объект.Header.Consignee);
		
		Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1
			И ДанныеДокументаТТН.Объект.Header.Свойство("Supplier")
			И ДанныеДокументаТТН.Объект.Header.Supplier <> Неопределено Тогда
			ДокументОбъект.Поставщик = ЗагрузитьОрганизацию(ДанныеДокументаТТН.Объект.Header.Supplier);
		КонецЕсли;
		
		ДокументОбъект.Основание   = ДанныеДокументаТТН.Объект.Header.Base;
		ДокументОбъект.Комментарий = ДанныеДокументаТТН.Объект.Header.Note;
		
		Если ДанныеДокументаТТН.Объект.Header.Transport <> Неопределено Тогда
			
			ДокументОбъект.ТипДоставки = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_TYPE;
			ДокументОбъект.Перевозчик  = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_COMPANY;
			
			Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1
				Или ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2
				Или ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3 Тогда
				ДокументОбъект.ТипТранспорта              = ТипТранспорта(ДанныеДокументаТТН.Объект.Header.Transport.TRAN_TYPE,, Ложь);
				ДокументОбъект.НомерТранспортногоСредства = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_CAR;
			Иначе // Формат V4 и выше
				ДокументОбъект.ТипТранспорта                        = ТипТранспорта(ДанныеДокументаТТН.Объект.Header.Transport.TRANSPORT_TYPE);
				ДокументОбъект.НомерТранспортногоСредства           = ДанныеДокументаТТН.Объект.Header.Transport.TRANSPORT_REGNUMBER;
				ДокументОбъект.ТоварВПутиПринадлежитГрузополучателю = ТоварВПутиПринадлежитГрузоотправителю(ДанныеДокументаТТН.Объект.Header.Transport.ChangeOwnership);
			КонецЕсли;
			
			ДокументОбъект.Прицеп          = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_TRAILER;
			ДокументОбъект.Заказчик        = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_CUSTOMER;
			ДокументОбъект.Водитель        = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_DRIVER;
			ДокументОбъект.ПунктПогрузки   = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_LOADPOINT;
			ДокументОбъект.ПунктРазгрузки  = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_UNLOADPOINT;
			ДокументОбъект.Перенаправление = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_REDIRECT;
			ДокументОбъект.Экспедитор      = ДанныеДокументаТТН.Объект.Header.Transport.TRAN_FORWARDER;
			
		КонецЕсли;
		
		СписокАлкогольнойПродукции = Новый Массив;
		Для Каждого ЭлементДанных Из ДанныеДокументаТТН.Объект.Content.Position Цикл
			Если СписокАлкогольнойПродукции.Найти(ЭлементДанных.Product) = Неопределено Тогда
				СписокАлкогольнойПродукции.Добавить(ЭлементДанных.Product);
			КонецЕсли;
		КонецЦикла;
		
		Товары         = Новый Соответствие;
		НомераСправки1 = Новый Соответствие;
		ДиапазоныМарок = Новый Соответствие;
		
		СоответствиеЗагруженнаяАлкогольнаяПродукция = ЗагрузитьАлкогольнуюПродукцию(СписокАлкогольнойПродукции);
		
		Для Каждого ЭлементДанных Из ДанныеДокументаТТН.Объект.Content.Position Цикл
			
			ДанныеАлкогольнойПродукции = СоответствиеЗагруженнаяАлкогольнаяПродукция[ЭлементДанных.Product.AlcCode];
			
			НоваяСтрока = ДокументОбъект.Товары.Добавить();
			НоваяСтрока.ИдентификаторУпаковки = ЭлементДанных.Pack_ID;
			НоваяСтрока.Количество            = ЭлементДанных.Quantity;
			НоваяСтрока.КоличествоФакт        = 0;
			НоваяСтрока.Цена                  = ЭлементДанных.Price;
			НоваяСтрока.НомерПартии           = ЭлементДанных.Party;
			НоваяСтрока.ИдентификаторСтроки   = ЭлементДанных.Identity;
			
			Если ДанныеАлкогольнойПродукции <> Неопределено Тогда
				НоваяСтрока.АлкогольнаяПродукция = ДанныеАлкогольнойПродукции.АлкогольнаяПродукция;
				
				СтрокиСопоставления = ДанныеАлкогольнойПродукции.ТаблицаСопоставления[НоваяСтрока.ИдентификаторУпаковки];
				Если СтрокиСопоставления <> Неопределено И СтрокиСопоставления.Количество() = 1 Тогда
					НоваяСтрока.Номенклатура = СтрокиСопоставления[0].Номенклатура;
					НоваяСтрока.Характеристика = СтрокиСопоставления[0].Характеристика;
				КонецЕсли;
			КонецЕсли;
			
			Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				MarkInfoRanges = ЭлементДанных.InformB.InformBItem.MarkInfo;
				НомераСправки1.Вставить(ЭлементДанных.Identity, ЭлементДанных.InformA.RegId);
				НоваяСтрока.НомерСправки2Поставщика = ЭлементДанных.InformB.InformBItem.BRegId;
			ИначеЕсли ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V2 Тогда
				MarkInfoRanges = ЭлементДанных.InformF2.InformF2Item.MarkInfo;
				НомераСправки1.Вставить(ЭлементДанных.Identity, ЭлементДанных.InformF1.RegId);
				НоваяСтрока.НомерСправки2Поставщика = ЭлементДанных.InformF2.InformF2Item.F2RegId;
			ИначеЕсли ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3
				Или ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
				MarkInfo = ЭлементДанных.InformF2.MarkInfo;
				НомераСправки1.Вставить(ЭлементДанных.Identity, ЭлементДанных.FARegId);
				НоваяСтрока.НомерСправки2Поставщика = ЭлементДанных.InformF2.F2RegId;
			КонецЕсли;
			
			Диапазоны = Новый Массив;
			Если MarkInfoRanges <> Неопределено Тогда
				
				Для Каждого ДанныеДиапазона Из MarkInfoRanges.Ranges.Range Цикл
					
					Диапазон = Новый Структура;
					Диапазон.Вставить("ТипМарки",       MarkInfoRanges.Type);
					Диапазон.Вставить("Идентификатор",  ДанныеДиапазона.Identity);
					Диапазон.Вставить("СерияМарки",     ДанныеДиапазона.Rank);
					Диапазон.Вставить("НачальныйНомер", ДанныеДиапазона.Start);
					Диапазон.Вставить("КонечныйНомер",  ДанныеДиапазона.Last);
					
					Диапазоны.Добавить(Диапазон);
					
				КонецЦикла;
				
			КонецЕсли;
			ДиапазоныМарок.Вставить(ЭлементДанных.Identity, Диапазоны);
			
			НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
			
			Товары.Вставить(ЭлементДанных.Identity, НоваяСтрока);
			
		КонецЦикла;
		
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Товары.Итог("Сумма");
		
		Для Каждого ЭлементДанных Из ДанныеДокументаУведомлениеОРегистрации.Объект.Content.Position Цикл
			
			ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
			
			Если ДанныеДокументаУведомлениеОРегистрации.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				РегистрационныйНомер = ЭлементДанных.InformBRegId;
			Иначе
				РегистрационныйНомер = ЭлементДанных.InformF2RegId;
			КонецЕсли;
			
			СчитанаАкцизнаяМарка = Ложь;
			ПоштучнаяПродукция   = Ложь;
			
			Если ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3
				Или ДанныеДокументаТТН.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4 Тогда
				Для Каждого ЭлементДанныхТТН Из ДанныеДокументаТТН.Объект.Content.Position Цикл
					Если ЭлементДанных.Identity = ЭлементДанныхТТН.Identity Тогда
						MarkInfo = ЭлементДанныхТТН.InformF2.MarkInfo;
						Если MarkInfo <> Неопределено Тогда
							Для Каждого boxpos Из MarkInfo.boxpos Цикл
								Если boxpos.amclist <> Неопределено Тогда
									Для Каждого КодАкцизнойМарки Из boxpos.amclist.amc Цикл
										СчитанаАкцизнаяМарка = Истина;
										Если СтрДлина(СокрЛП(КодАкцизнойМарки)) = 150 Тогда
											ПоштучнаяПродукция = Истина;
										КонецЕсли;
										Прервать;
									КонецЦикла;
								КонецЕсли;
								Если СчитанаАкцизнаяМарка Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДанныеСправки2.НомерПодтвержденияЕГАИС = ДанныеДокументаУведомлениеОРегистрации.Объект.Header.EGAISFixNumber;
			ДанныеСправки2.ДатаПодтвержденияЕГАИС  = ДанныеДокументаУведомлениеОРегистрации.Объект.Header.EGAISFixDate;
			ДанныеСправки2.РегистрационныйНомер    = РегистрационныйНомер;
			ДанныеСправки2.Наименование            = РегистрационныйНомер;
			ДанныеСправки2.Поштучная               = ПоштучнаяПродукция;
			
			СтрокаТовара = Товары.Получить(ЭлементДанных.Identity);
			
			ДанныеСправки2.АлкогольнаяПродукция = СтрокаТовара.АлкогольнаяПродукция;
			ДанныеСправки2.Количество           = СтрокаТовара.Количество;
			ДанныеСправки2.НомерСправки1        = НомераСправки1.Получить(ЭлементДанных.Identity);
			ДанныеСправки2.ДокументОснование    = Ссылка;
			ДанныеСправки2.ДиапазоныМарок       = ДиапазоныМарок.Получить(ЭлементДанных.Identity);
			
			//@skip-check query-in-loop
			НоваяСправка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
			
			СтрокаТовара.Справка2 = НоваяСправка2;
			
		КонецЦикла;
		
		Если ДанныеДокументаИсторияПоСправкам2 <> Неопределено Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
			Реквизиты.Вставить("Операция",             ДанныеДокументаИсторияПоСправкам2.Операция);
			Реквизиты.Вставить("Документ",             Ссылка);
			Реквизиты.Вставить("СообщениеОснование",   Неопределено);
			Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение истории справок 2 по ТТН'"));
			Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокументаИсторияПоСправкам2.ИдентификаторЗапроса);
			Реквизиты.Вставить("ФорматОбмена",         ДокументОбъект.ФорматОбмена);
			Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
			
			РезультатДобавленияЗаписиИстории = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
				ДанныеДокументаИсторияПоСправкам2.ТекстXML,
				Реквизиты);
			
			Если РезультатДобавленияЗаписиИстории.НовоеСообщение Тогда
				
				Для Каждого ЭлементДанных Из ДанныеДокументаИсторияПоСправкам2.Объект.Content.Position Цикл
					
					Для Каждого ЭлементДанныхШаг Из ЭлементДанных.HistF2.step Цикл
						
						СтрокаТЧ = ДокументОбъект.ИсторияСправок2.Добавить();
						СтрокаТЧ.ИдентификаторСтроки = ЭлементДанных.Identity;
						
						СтрокаТЧ.Шаг                            = ЭлементДанныхШаг.lev;
						СтрокаТЧ.РегистрационныйНомер           = ЭлементДанныхШаг.Form2;
						СтрокаТЧ.РегистрационныйНомерПоставщика = ЭлементДанныхШаг.parentForm2;
						СтрокаТЧ.ГрузоотправительКод            = ЭлементДанныхШаг.Shipper;
						СтрокаТЧ.ГрузополучательКод             = ЭлементДанныхШаг.Consignee;
						СтрокаТЧ.НомерТТН                       = ЭлементДанныхШаг.WBRegId;
						СтрокаТЧ.Количество                     = ЭлементДанныхШаг.amount;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДанныеДокументаТранспортнаяНакладная <> Неопределено Тогда
			
			Реквизиты = Новый Структура;
			Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
			Реквизиты.Вставить("Операция",             Перечисления.ВидыДокументовЕГАИС.КвитанцияВходящейТранспортнойНакладной);
			Реквизиты.Вставить("Документ",             Ссылка);
			Реквизиты.Вставить("СообщениеОснование",   Неопределено);
			Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение квитанции по транспортной накладной с переходом права собственности по ТТН'"));
			Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокументаТранспортнаяНакладная.ИдентификаторЗапроса);
			Реквизиты.Вставить("ФорматОбмена",         ДокументОбъект.ФорматОбмена);
			Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
			Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
			
			РезультатДобавленияЗаписиИстории = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
				ДанныеДокументаИсторияПоСправкам2.ТекстXML,
				Реквизиты);
			
			Если РезультатДобавленияЗаписиИстории.НовоеСообщение Тогда
				
				ДокументОбъект.НомерТранспортнойНакладной = ДанныеДокументаТранспортнаяНакладная.RegID;
				ДокументОбъект.ДатаТранспортнойНакладной  = ДанныеДокументаТранспортнаяНакладная.TicketDate;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеТТНВходящаяЕГАИС(ДокументОбъект);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокументаТТН.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокументаТТН.ФорматОбмена;
		
		ПолноеИмя = Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			Ссылка, ДанныеДокументаТТН.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ОбъектИзменен = Истина;
		
		ДокументОснование = ДокументОбъект.ДокументОснование;
		ДокументСсылка    = Ссылка;
		
	Иначе
		
		ДокументОснование = РезультатДобавленияЗаписиТТН.ДокументОснование;
		ДокументСсылка    = РезультатДобавленияЗаписиТТН.Документ;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокументаТТН.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокументаТТН.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = Неопределено;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписиТТН.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументСсылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокументаУведомлениеОРегистрации.Операция,
			ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса));
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокументаТТН.Операция,
			ДанныеДокументаТТН.АдресЗапроса));
			
	Если ДанныеДокументаИсторияПоСправкам2 <> Неопределено Тогда
		СлужебныеДанные.Добавить(
			СлужебныеДанные(
				ОрганизацияЕГАИС,
				ДанныеДокументаИсторияПоСправкам2.Операция,
				ДанныеДокументаИсторияПоСправкам2.АдресЗапроса));
	КонецЕсли;
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Регистрирует новые справки 1 и 2 и заполняет их в табличной части ТТН.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьУведомлениеОРегистрацииДвиженияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"Идентификатор",
		ДанныеДокумента.Объект.Header.Identity);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке уведомления о регистрации движения ТТН:
			           |Не найден документ ТТН ЕГАИС (исходящая) с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.Identity);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение уведомления о регистрации движения ТТН ЕГАИС (исходящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ТоварыИтоги = Новый ТаблицаЗначений;
		ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
		ТоварыИтоги.Колонки.Добавить("ИдентификаторУпаковки");
		ТоварыИтоги.Колонки.Добавить("НомерПартии");
		ТоварыИтоги.Колонки.Добавить("Справка2");
		ТоварыИтоги.Колонки.Добавить("Цена");
		
		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
			
			НоваяСтрока = ТоварыИтоги.Добавить();
			НоваяСтрока.АлкогольнаяПродукция  = СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.ИдентификаторУпаковки = СтрокаТЧ.ИдентификаторУпаковки;
			НоваяСтрока.НомерПартии           = СтрокаТЧ.НомерПартии;
			НоваяСтрока.Справка2              = СтрокаТЧ.Справка2;
			НоваяСтрока.Цена                  = СтрокаТЧ.Цена;
			
		КонецЦикла;
		
		ТоварыИтоги.Свернуть(
			"АлкогольнаяПродукция,
			|ИдентификаторУпаковки,
			|НомерПартии,
			|Справка2,
			|Цена");
		
		Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Content.Position Цикл
			
			ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЭлементДанных.Identity) - 1;
			
			Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				НомерСправки2 = ЭлементДанных.InformBRegId;
			Иначе
				НомерСправки2 = ЭлементДанных.InformF2RegId;
			КонецЕсли;
			
			Если ТоварыИтоги.Количество() > ИндексСтроки Тогда
				
				СтрокаТЧИтоги = ТоварыИтоги[ИндексСтроки];
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("АлкогольнаяПродукция",  СтрокаТЧИтоги.АлкогольнаяПродукция);
				ПараметрыОтбора.Вставить("ИдентификаторУпаковки", СтрокаТЧИтоги.ИдентификаторУпаковки);
				ПараметрыОтбора.Вставить("НомерПартии",           СтрокаТЧИтоги.НомерПартии);
				ПараметрыОтбора.Вставить("Справка2",              СтрокаТЧИтоги.Справка2);
				ПараметрыОтбора.Вставить("Цена",                  СтрокаТЧИтоги.Цена);
				
				НайденныеСтрокиТЧТовары = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
				Для Каждого СтрокаТЧ Из НайденныеСтрокиТЧТовары Цикл
					СтрокаТЧ.НомерСправки2Покупателя = НомерСправки2;
				КонецЦикла;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'При загрузке уведомления о регистрации движения ТТН:
						|Не найдена строка документа ТТН ЕГАИС (исходящая) по идентификатору %1 (Поиск выполняется по набору ключевых реквизитов).'"),
					ЭлементДанных.Identity);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписыватьДокумент = ДокументОбъект.Модифицированность();
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		Если ЗаписыватьДокумент Тогда
			ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
			ОбъектИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Регистрирует новые справки 1 и 2 и заполняет их в табличной части акта.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьУведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.АктПостановкиНаБалансЕГАИС,
		"Идентификатор",
		ДанныеДокумента.Объект.Header.Identity);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке уведомления о регистрации движения акта постановки на баланс ЕГАИС:
			           |Не найден документ Акт постановки на баланс ЕГАИС с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.Identity);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получено уведомление о регистрации движения акта постановки на баланс ЕГАИС'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ТоварыИтоги = Новый ТаблицаЗначений;
		ТоварыИтоги.Колонки.Добавить("АлкогольнаяПродукция");
		ТоварыИтоги.Колонки.Добавить("КоличествоПоСправке1");
		ТоварыИтоги.Колонки.Добавить("ДатаРозлива");
		ТоварыИтоги.Колонки.Добавить("НомерТТН");
		ТоварыИтоги.Колонки.Добавить("ДатаТТН");
		ТоварыИтоги.Колонки.Добавить("НомерПодтвержденияЕГАИС");
		ТоварыИтоги.Колонки.Добавить("ДатаПодтвержденияЕГАИС");
		ТоварыИтоги.Колонки.Добавить("Количество");
		
		Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
			
			НоваяСтрока = ТоварыИтоги.Добавить();
			НоваяСтрока.АлкогольнаяПродукция    = СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.КоличествоПоСправке1    = СтрокаТЧ.КоличествоПоСправке1;
			НоваяСтрока.ДатаРозлива             = СтрокаТЧ.ДатаРозлива;
			НоваяСтрока.НомерТТН                = СтрокаТЧ.НомерТТН;
			НоваяСтрока.ДатаТТН                 = СтрокаТЧ.ДатаТТН;
			НоваяСтрока.НомерПодтвержденияЕГАИС = СтрокаТЧ.НомерПодтвержденияЕГАИС;
			НоваяСтрока.ДатаПодтвержденияЕГАИС  = СтрокаТЧ.ДатаПодтвержденияЕГАИС;
			
			НоваяСтрока.Количество = СтрокаТЧ.Количество;
			
		КонецЦикла;
		
		ТоварыИтоги.Свернуть(
			"АлкогольнаяПродукция,
			|КоличествоПоСправке1,
			|ДатаРозлива,
			|НомерТТН,
			|ДатаТТН,
			|НомерПодтвержденияЕГАИС,
			|ДатаПодтвержденияЕГАИС",
			"Количество");
		
		Для Каждого СтрокаКвитанцииXDTO Из ДанныеДокумента.Объект.Content.Position Цикл
			
			ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаКвитанцииXDTO.Identity) - 1;
			
			Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				НомерНовойСправки1 = СтрокаКвитанцииXDTO.InformARegId;
			Иначе
				НомерНовойСправки1 = СтрокаКвитанцииXDTO.InformF1RegId;
			КонецЕсли;
			
			ДанныеСправки1 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки1();
			ДанныеСправки1.РегистрационныйНомер = НомерНовойСправки1;
			ДанныеСправки1.Наименование         = НомерНовойСправки1;
			
			СтрокаТЧИтоги = Неопределено;
			
			Если ТоварыИтоги.Количество() > ИндексСтроки Тогда
				
				СтрокаТЧИтоги = ТоварыИтоги[ИндексСтроки];
				
				ДанныеСправки1.АлкогольнаяПродукция    = СтрокаТЧИтоги.АлкогольнаяПродукция;
				ДанныеСправки1.НомерТТН                = СтрокаТЧИтоги.НомерТТН;
				ДанныеСправки1.ДатаТТН                 = СтрокаТЧИтоги.ДатаТТН;
				ДанныеСправки1.ДатаРозлива             = СтрокаТЧИтоги.ДатаРозлива;
				ДанныеСправки1.Количество              = СтрокаТЧИтоги.КоличествоПоСправке1;
				ДанныеСправки1.НомерПодтвержденияЕГАИС = СтрокаТЧИтоги.НомерПодтвержденияЕГАИС;
				ДанныеСправки1.ДатаПодтвержденияЕГАИС  = СтрокаТЧИтоги.ДатаПодтвержденияЕГАИС;
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'При загрузке уведомления о регистрации движения Акта постановки на баланс:
						|Не найдена строка документа Акт постановки на баланс по идентификатору %1.'"),
					СтрокаКвитанцииXDTO.Identity);
				
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция",    СтрокаТЧИтоги.АлкогольнаяПродукция);
			ПараметрыОтбора.Вставить("КоличествоПоСправке1",    СтрокаТЧИтоги.КоличествоПоСправке1);
			ПараметрыОтбора.Вставить("ДатаРозлива",             СтрокаТЧИтоги.ДатаРозлива);
			ПараметрыОтбора.Вставить("НомерТТН",                СтрокаТЧИтоги.НомерТТН);
			ПараметрыОтбора.Вставить("ДатаТТН",                 СтрокаТЧИтоги.ДатаТТН);
			ПараметрыОтбора.Вставить("НомерПодтвержденияЕГАИС", СтрокаТЧИтоги.НомерПодтвержденияЕГАИС);
			ПараметрыОтбора.Вставить("ДатаПодтвержденияЕГАИС",  СтрокаТЧИтоги.ДатаПодтвержденияЕГАИС);
			
			НайденныеСтрокиТЧТовары = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
			
			//@skip-check query-in-loop
			НоваяСправка1 = СоздатьСправку(ДанныеСправки1, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1);
			
			Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
				СписокСправок2XDTO = СтрокаКвитанцииXDTO.InformB.InformBItem;
			Иначе
				СписокСправок2XDTO = СтрокаКвитанцииXDTO.InformF2.InformF2Item;
			КонецЕсли;
			
			Для Каждого ЭлементДанных Из СписокСправок2XDTO Цикл
				
				Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
					РегистрационныйНомер = ЭлементДанных.BRegId;
				Иначе
					РегистрационныйНомер = ЭлементДанных.F2RegId;
				КонецЕсли;
				
				ПоштучнаяПродукция = Ложь;
				
				Для Каждого СтрокаТовары Из НайденныеСтрокиТЧТовары Цикл
					СтруктураПоиска = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
					НайденныеСтрокиТЧАкцизныеМарки = ДокументОбъект.АкцизныеМарки.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтрокиТЧАкцизныеМарки.Количество() > 0 Тогда
						АкцизнаяМарка = НайденныеСтрокиТЧАкцизныеМарки[0].АкцизнаяМарка;
						КодАкцизнойМарки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АкцизнаяМарка, "ЗначениеШтрихкода");
						Если СтрДлина(СокрЛП(КодАкцизнойМарки)) = 150 Тогда
							ПоштучнаяПродукция = Истина;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
				
				ДанныеСправки2.РегистрационныйНомер = РегистрационныйНомер;
				ДанныеСправки2.Наименование         = РегистрационныйНомер;
				ДанныеСправки2.НомерСправки1        = НомерНовойСправки1;
				ДанныеСправки2.Справка1             = НоваяСправка1;
				ДанныеСправки2.ДокументОснование    = ДокументОбъект.Ссылка;
				ДанныеСправки2.Поштучная            = ПоштучнаяПродукция;
				
				ДанныеСправки2.АлкогольнаяПродукция = СтрокаТЧИтоги.АлкогольнаяПродукция;
				ДанныеСправки2.Количество           = СтрокаТЧИтоги.КоличествоПоСправке1;
				
				//@skip-check query-in-loop
				НоваяСправка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
				
				Для Каждого СтрокаТовары Из НайденныеСтрокиТЧТовары Цикл
					СтрокаТовары.Справка2 = НоваяСправка2;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОбъект.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Регистрирует новые справки 1 и 2 и заполняет их в табличной части акта.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьУведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ОтчетОбИмпортеЕГАИС,
		"Идентификатор",
		ДанныеДокумента.Объект.Header.Identity);
	
	Если РезультатПоиска = Неопределено Тогда
		РезультатПоиска = НайтиОбъектПоИдентификатору(
			Метаданные.Документы.ОтчетОПроизводствеЕГАИС,
			"Идентификатор",
			ДанныеДокумента.Объект.Header.Identity);
	КонецЕсли;
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке уведомления о регистрации движения отчета об импорте / производстве ЕГАИС:
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.Identity);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получено уведомление о регистрации движения отчета об импорте / производстве ЕГАИС'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		Строк = ДокументОбъект.Товары.Количество();
		Для Каждого СтрокаКвитанцииXDTO Из ДанныеДокумента.Объект.Content.Position Цикл
			
			ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаКвитанцииXDTO.Identity) - 1;
			Если Строк <= ИндексСтроки Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'При загрузке уведомления о регистрации движения Отчета об импорте / производстве:
						|Не найдена строка документа по идентификатору %1.'"),
					СтрокаКвитанцииXDTO.Identity);
			КонецЕсли;
			
			РегистрационныйНомер = СтрокаКвитанцииXDTO.InformF2RegId;
			СтрокаТЧ = ДокументОбъект.Товары[ИндексСтроки];
			ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
			
			ДанныеСправки2.РегистрационныйНомер = РегистрационныйНомер;
			ДанныеСправки2.Наименование         = РегистрационныйНомер;
			ДанныеСправки2.НомерСправки1        = СтрокаКвитанцииXDTO.InformF1RegId;
			ДанныеСправки2.ДокументОснование    = ДокументОбъект.Ссылка;
			ДанныеСправки2.Поштучная            = Ложь;
				
			ДанныеСправки2.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			ДанныеСправки2.Количество           = СтрокаТЧ.Количество;
			//@skip-check query-in-loop
			СтрокаТЧ.Справка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
			
		КонецЦикла;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = ДокументОбъект.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет действия при получении подтверждения акта расхождений ТТН.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьКвитанциюАктаРасхожденийТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.Header.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке квитанции акта расхождений по ТТН ЕГАИС (входящая):
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	Если ВРег(ДанныеДокумента.Объект.Header.IsConfirm) = ВРег("Rejected") Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ;
	Иначе
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение;
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение квитанции акта расхождений по ТТН ЕГАИС (входящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ЗаписыватьДокумент = (ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение);
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		Если ЗаписыватьДокумент Тогда
			
			ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			ДокументОбъект.ДатаРегистрацииДвижений = ДанныеДокумента.Объект.Header.TicketDate;
			
			ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеПодтвержденияАктаРасхожденийТТН(
				РезультатПоиска.Ссылка,
				НовыйСтатус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ОтмененПоставщиком);
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				РезультатПоиска.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
			ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
			ОбъектИзменен = Истина;
			
		Иначе
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				РезультатПоиска.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет действия при получении подтверждения акта расхождений ТТН.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьКвитанциюЗапросаНаОтменуПроведенияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.Header.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке квитанции запроса на отмену проведения ТТН ЕГАИС:
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	Если ВРег(ДанныеДокумента.Объект.Header.IsConfirm) = ВРег("Rejected") Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ;
	Иначе
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение;
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение квитанции запроса на отмену проведения ТТН ЕГАИС'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			РезультатПоиска.Ссылка, ДанныеДокумента.Операция);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет действия при получении акта подтверждения ТТН.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьАктПоИсходящейТТНЕГАИС(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.Header.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке акта по ТТН ЕГАИС (исходящей):
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	Если ВРег(ДанныеДокумента.Объект.Header.IsAccept) = ВРег("Rejected") Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ;
	ИначеЕсли ВРег(ДанныеДокумента.Объект.Header.IsAccept) = ВРег("Differences") Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения;
	Иначе
		Если ДанныеДокумента.Объект.Content <> Неопределено
			И ДанныеДокумента.Объект.Content.Position.Количество() > 0 Тогда
			ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения;
		Иначе
			ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение;
		КонецЕсли;
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение акта по документу ТТН ЕГАИС (входящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ЕстьРасхождения = Ложь;
		ДокументОбъект  = Неопределено;
		
		Если ДанныеДокумента.Объект.Content <> Неопределено Тогда
			
			Для Каждого СтрокаРасхожденияXDTO Из ДанныеДокумента.Объект.Content.Position Цикл
				
				Если ДокументОбъект = Неопределено Тогда
					
					ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
					
					// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
					// Документ будет получен в следующий итерации загрузки данных.
					ДокументОбъект.Заблокировать();
					
				КонецЕсли;
				
				ИндексСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрокаРасхожденияXDTO.Identity) - 1;
				
				ДокументОбъект.Товары[ИндексСтроки].КоличествоФакт = СтрокаРасхожденияXDTO.RealQuantity;
				
				ЕстьРасхождения = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЕстьРасхождения Тогда
			ДокументОбъект.ЕстьРасхождения = Истина;
		КонецЕсли;
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАктаПодтвержденияТТН(
			ДокументОбъект,
			ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
			ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЕстьРасхождения;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			РезультатПоиска.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		Если ЕстьРасхождения Тогда
			ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
			ОбъектИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет действия при получении запроса на отмену проведения ТТН.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьЗапросНаОтменуПроведенияТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНИсходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке запроса на отмену проведения ТТН ЕГАИС (исходящей):
			           |Не найден документ с идентификатором %1.'"),
			ДанныеДокумента.Объект.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение запроса на отмену проведения ТТН ЕГАИС (исходящая)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			РезультатПоиска.Ссылка, ДанныеДокумента.Операция);
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = РезультатПоиска.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = РезультатПоиска.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает список организаций ЕГАИС в базу.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросАлкогольнойПродукции(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИсходящееСообщение = ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	
	Если ИсходящееСообщение = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке ответа на запрос алкогольной продукции:
			           |Не найден исходящий запрос с идентификатором %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	СоответствиеЗагруженнаяАлкогольнаяПродукция = ЗагрузитьАлкогольнуюПродукцию(ДанныеДокумента.Объект.Products.Product);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             Неопределено);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получена алкогольная продукция'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = СоответствиеЗагруженнаяАлкогольнаяПродукция;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = Неопределено;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Читает результат проверки акцизных марок на остатках организации
// 
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
// Возвращаемое значение:
//  Структура - Описание:
//    * ОтсутствующиеАкцизныеМарки - Массив Из Строка - Отсутствующие акцизные марки
//                                 - Неопределено - Если необходимо анализировать Описание
//    * Описание - Строка - Описание результата
Функция ПрочитатьОтветНаЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации(ТекстСообщенияXML, ОрганизацияЕГАИС) Экспорт
	
	СтруктураЗагрузкиВходящегоДокумента = ОбменДаннымиЕГАИСКлиентСервер.СтруктураЗагрузкиВходящегоДокумента(
		ОрганизацияЕГАИС, "", "ReplyFilter", ТекстСообщенияXML);
	
	ДанныеДокумента = ОбработатьОтветНаЗапросПолученияДокумента(СтруктураЗагрузкиВходящегоДокумента);
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание");
	ВозвращаемоеЗначение.Вставить("ОтсутствующиеАкцизныеМарки");
	
	Если ДанныеДокумента.Результат <> Неопределено Тогда
		Для Каждого КодАкцизнойМарки Из ДанныеДокумента.Результат.Объект.bc Цикл
			Если ВозвращаемоеЗначение.ОтсутствующиеАкцизныеМарки = Неопределено Тогда
				ВозвращаемоеЗначение.ОтсутствующиеАкцизныеМарки = Новый Массив;
			КонецЕсли;
			ВозвращаемоеЗначение.ОтсутствующиеАкцизныеМарки.Добавить(КодАкцизнойМарки);
		КонецЦикла;
		ВозвращаемоеЗначение.Описание = ДанныеДокумента.Результат.Объект.result;
	Иначе
		ВозвращаемоеЗначение.Описание = ДанныеДокумента.ТекстОшибки;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

//Загружает организацию ЕГАИС в базу.
//  * При загрузке запросом из классификатора - безусловно.
//  * При загрузке в составе пакета (например ТТН) - создание новых элементов и обновление контрагентов
//    (флаг "Соответствует организации" установлен в Ложь).
//
//Параметры:
//   ДанныеОрганизацииXDTO - ОбъектXDTO - данные классификатора организаций ЕГАИС
//   ЗагрузкаИзКлассификатора - Булево - признак запроса данных из классификатора
//
//Возвращаемое значение:
//   СправочникСсылка.КлассификаторОрганизацийЕГАИС - найденный или загруженный элемент классификатора.
//
Функция ЗагрузитьОрганизацию(ДанныеОрганизацииXDTO, ЗагрузкаИзКлассификатора = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизацииXDTO, "OrgInfoV2") Тогда
		ТипОрганизации = ТипОрганизации(ДанныеОрганизацииXDTO.OrgInfoV2);
		ЗагружаемаяОрганизацияXDTO = ДанныеОрганизации(ДанныеОрганизацииXDTO.OrgInfoV2);
	Иначе
		ТипОрганизации = ТипОрганизации(ДанныеОрганизацииXDTO);
		ЗагружаемаяОрганизацияXDTO = ДанныеОрганизации(ДанныеОрганизацииXDTO);
	КонецЕсли;
	
	НайденнаяОрганизация = Справочники.КлассификаторОрганизацийЕГАИС.НайтиПоКоду(ЗагружаемаяОрганизацияXDTO.ClientRegId);
	
	Если Не ЗначениеЗаполнено(НайденнаяОрганизация) Тогда
		СправочникОбъект = Справочники.КлассификаторОрганизацийЕГАИС.СоздатьЭлемент();
		СправочникОбъект.Код = ЗагружаемаяОрганизацияXDTO.ClientRegId;
	Иначе
		СправочникОбъект = НайденнаяОрганизация.ПолучитьОбъект();
	КонецЕсли;
	
	ТребуетсяОбновлениеЭлемента = ЗагрузкаИзКлассификатора
		Или СправочникОбъект.ЭтоНовый()
		Или Не СправочникОбъект.СоответствуетОрганизации;
	Если Не ТребуетсяОбновлениеЭлемента Тогда
		Возврат СправочникОбъект.Ссылка;
	КонецЕсли;
	
	СправочникОбъект.Наименование = ?(ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.ShortName), ЗагружаемаяОрганизацияXDTO.FullName, ЗагружаемаяОрганизацияXDTO.ShortName);
	
	Если ЗначениеЗаполнено(ЗагружаемаяОрганизацияXDTO.FullName) Тогда
		СправочникОбъект.НаименованиеПолное = ЗагружаемаяОрганизацияXDTO.FullName;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипОрганизации) Тогда
		СправочникОбъект.ТипОрганизации = ТипОрганизации;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "INN") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.INN) Тогда
			СправочникОбъект.ИНН = СокрЛП(ЗагружаемаяОрганизацияXDTO.INN);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "KPP") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.KPP) Тогда
			СправочникОбъект.КПП = СокрЛП(ЗагружаемаяОрганизацияXDTO.KPP);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO, "TSNUM") Тогда
		Если Не ПустаяСтрока(ЗагружаемаяОрганизацияXDTO.TSNUM) Тогда
			СправочникОбъект.ИдентификаторОрганизацииТС = СокрЛП(ЗагружаемаяОрганизацияXDTO.TSNUM);
		КонецЕсли;
	КонецЕсли;
	
	КодСтраны = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Country);
	Если КодСтраны <> 0 Тогда
		СправочникОбъект.КодСтраны = КодСтраны;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO.address, "RegionCode") Тогда
		КодРегиона = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.RegionCode);
		Если КодРегиона <> 0 Тогда
			СправочникОбъект.КодРегиона = КодРегиона;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗагружаемаяОрганизацияXDTO.address, "Index") Тогда
		ПочтовыйИндекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗагружаемаяОрганизацияXDTO.address.Index);
		Если ПочтовыйИндекс <> 0 Тогда
			СправочникОбъект.ПочтовыйИндекс = ПочтовыйИндекс;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемаяОрганизацияXDTO.address.description) Тогда
		СправочникОбъект.ПредставлениеАдреса = СокрЛП(ЗагружаемаяОрганизацияXDTO.address.description);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизацииXDTO, "VersionWB") Тогда
		Если ВРег(ДанныеОрганизацииXDTO.VersionWB) = ВРег("WayBill_v4") Тогда
			СправочникОбъект.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V4;
		Иначе
			СправочникОбъект.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
		КонецЕсли;
	КонецЕсли;
	
	СправочникОбъект.Адрес = "";
	
	Если Не ЗначениеЗаполнено(СправочникОбъект.ТипОрганизации) Тогда
		Если НЕ ПустаяСтрока(СправочникОбъект.ИдентификаторОрганизацииТС) Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
		ИначеЕсли ПустаяСтрока(СправочникОбъект.ИНН) И ПустаяСтрока(СправочникОбъект.КПП) Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
		ИначеЕсли ПустаяСтрока(СправочникОбъект.КПП) И СтрДлина(СокрЛП(СправочникОбъект.ИНН)) = 12 Тогда
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
		Иначе
			СправочникОбъект.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
		КонецЕсли;
	КонецЕсли;
	
	Если СправочникОбъект.Модифицированность() Тогда
		СопоставлениеОбъектовЕГАИСПереопределяемый.ПриЗагрузкеОрганизации(СправочникОбъект);
		СправочникОбъект.Записать();
	КонецЕсли;
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

// Загружает остатки ЕГАИС по регистру №1 в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОстатковВРегистре1(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке остатков ЕГАИС (регистр №1):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены остатки в регистре №1'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Дата = ДанныеДокумента.Объект.RestsDate;
		
		ДокументОбъект.ОстаткиПоДаннымЕГАИС.Очистить();
		
		Если ДанныеДокумента.Объект.Products <> Неопределено
			И ДанныеДокумента.Объект.Products.StockPosition.Количество() <> 0 Тогда
			
			АлкогольнаяПродукция = Новый Массив;
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Products.StockPosition Цикл
				АлкогольнаяПродукция.Добавить(ЭлементДанных.Product);
			КонецЦикла;
			
			СоответствиеЗагруженнаяАлкогольнаяПродукция = ЗагрузитьАлкогольнуюПродукцию(АлкогольнаяПродукция);
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Products.StockPosition Цикл
				
				СтрокаТЧ = ДокументОбъект.ОстаткиПоДаннымЕГАИС.Добавить();
				Если СоответствиеЗагруженнаяАлкогольнаяПродукция[ЭлементДанных.Product.AlcCode] <> Неопределено Тогда
					СтрокаТЧ.АлкогольнаяПродукция = СоответствиеЗагруженнаяАлкогольнаяПродукция[ЭлементДанных.Product.AlcCode].АлкогольнаяПродукция;
				КонецЕсли;
				
				СтрокаТЧ.Количество = ЭлементДанных.Quantity;
				
				Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
					НомерСправки1 = ЭлементДанных.InformARegId;
					НомерСправки2 = ЭлементДанных.InformBRegId;
				Иначе
					НомерСправки1 = ЭлементДанных.InformF1RegId;
					НомерСправки2 = ЭлементДанных.InformF2RegId;
				КонецЕсли;
				
				ДанныеСправки2 = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
				ДанныеСправки2.РегистрационныйНомер = НомерСправки2;
				ДанныеСправки2.Наименование         = НомерСправки2;
				ДанныеСправки2.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
				ДанныеСправки2.НомерСправки1        = НомерСправки1;
				
				//@skip-check query-in-loop
				СтрокаТЧ.Справка2 = СоздатьСправку(ДанныеСправки2, Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает остатки ЕГАИС по регистру №2 в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОстатковВРегистре2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке остатков ЕГАИС (регистр №2):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены остатки в регистре №2'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Дата = ДанныеДокумента.Объект.RestsDate;
		
		ДокументОбъект.ОстаткиПоДаннымЕГАИС.Очистить();
		
		Если ДанныеДокумента.Объект.Products <> Неопределено
			И ДанныеДокумента.Объект.Products.ShopPosition.Количество() <> 0 Тогда
			
			АлкогольнаяПродукция = Новый Массив;
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Products.ShopPosition Цикл
				АлкогольнаяПродукция.Добавить(ЭлементДанных.Product);
			КонецЦикла;
			
			СоответствиеЗагруженнаяАлкогольнаяПродукция = ЗагрузитьАлкогольнуюПродукцию(АлкогольнаяПродукция);
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Products.ShopPosition Цикл
				
				СтрокаТЧ = ДокументОбъект.ОстаткиПоДаннымЕГАИС.Добавить();
				Если СоответствиеЗагруженнаяАлкогольнаяПродукция[ЭлементДанных.Product.AlcCode] <> Неопределено Тогда
					СтрокаТЧ.АлкогольнаяПродукция = СоответствиеЗагруженнаяАлкогольнаяПродукция[ЭлементДанных.Product.AlcCode].АлкогольнаяПродукция;
				КонецЕсли;
				СтрокаТЧ.Количество = ЭлементДанных.Quantity;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает новые штрихкоды акцизных марок (для замены испорченных) в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросАкцизныхМарок(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных акцизных марок ЕГАИС:
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены новые акцизные марки (для замены испорченных)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = Неопределено;
		
		Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Marks.Mark Цикл
			
			Если ДокументОбъект = Неопределено Тогда
				
				ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
				
				// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
				// Документ будет получен в следующий итерации загрузки данных.
				ДокументОбъект.Заблокировать();
				
			КонецЕсли;
			
			НомерСтроки = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЭлементДанных.Identity);
			ДокументОбъект.Товары[НомерСтроки - 1].КодАкцизнойМарки = ЭлементДанных.Barcode;
			
		КонецЦикла;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = (ДокументОбъект = Неопределено);
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = РезультатПоиска.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			РезультатПоиска.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		Если ДокументОбъект <> Неопределено Тогда
			ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
			ОбъектИзменен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область Отчеты

// Загружает данные отчета Движения между регистрами в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаДвиженияМеждуРегистрами(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (Движения между регистрами):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""Движения между регистрами""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Дата = ДанныеДокумента.Объект.ReplyDate;
		ДокументОбъект.ДвиженияМеждуРегистрами.Очистить();
		
		Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.History.DocData Цикл
			
			ДанныеДокументаПоТипуЕГАИС = Перечисления.ВидыДокументовЕГАИС.ДанныеДокументаПоТипуЕГАИС(ЭлементДанных.DocType);
			
			СтрокаТЧ = ДокументОбъект.ДвиженияМеждуРегистрами.Добавить();
			СтрокаТЧ.ВидДокумента            = ДанныеДокументаПоТипуЕГАИС.ВидДокументаЕГАИС;
			СтрокаТЧ.ИдентификаторЕГАИС      = ЭлементДанных.DocId;
			СтрокаТЧ.Количество              = ЭлементДанных.Quantity;
			СтрокаТЧ.ОписаниеОперации        = ЭлементДанных.DocType;
			СтрокаТЧ.ДатаРегистрацииДвижений = ЭлементДанных.OperDate;
			СтрокаТЧ.НомерСправки2           = ЭлементДанных.RegForm2;
			
		КонецЦикла;
		
		ВидыДокументовТТН = Новый Массив;
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ);
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение);
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.ТТН);
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.ПустаяСсылка());
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияМеждуРегистрами.ВидДокумента КАК ВидДокумента,
		|	ДвиженияМеждуРегистрами.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
		|	ДвиженияМеждуРегистрами.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ДвиженияМеждуРегистрами
		|ИЗ
		|	&ДвиженияМеждуРегистрами КАК ДвиженияМеждуРегистрами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияМеждуРегистрами.НомерСтроки КАК НомерСтроки,
		|	АктПостановкиНаБалансЕГАИС.Ссылка КАК ДокументОснование
		|ИЗ
		|	ДвиженияМеждуРегистрами КАК ДвиженияМеждуРегистрами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияМеждуРегистрами.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(АктПостановкиНаБалансЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияМеждуРегистрами.ВидДокумента В (АктПостановкиНаБалансЕГАИС.ВидДокумента, ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ПустаяСсылка)))
		|ГДЕ
		|	НЕ АктПостановкиНаБалансЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияМеждуРегистрами.НомерСтроки,
		|	АктСписанияЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияМеждуРегистрами КАК ДвиженияМеждуРегистрами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияМеждуРегистрами.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(АктСписанияЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияМеждуРегистрами.ВидДокумента В (АктСписанияЕГАИС.ВидДокумента, ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ПустаяСсылка)))
		|ГДЕ
		|	НЕ АктСписанияЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияМеждуРегистрами.НомерСтроки,
		|	ВозвратИзРегистра2ЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияМеждуРегистрами КАК ДвиженияМеждуРегистрами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзРегистра2ЕГАИС КАК ВозвратИзРегистра2ЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияМеждуРегистрами.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ВозвратИзРегистра2ЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияМеждуРегистрами.ВидДокумента В (ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ВозвратИзРегистра2), ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ПустаяСсылка)))
		|ГДЕ
		|	НЕ ВозвратИзРегистра2ЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияМеждуРегистрами.НомерСтроки,
		|	ПередачаВРегистр2ЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияМеждуРегистрами КАК ДвиженияМеждуРегистрами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаВРегистр2ЕГАИС КАК ПередачаВРегистр2ЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияМеждуРегистрами.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ПередачаВРегистр2ЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияМеждуРегистрами.ВидДокумента В (ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ПередачаВРегистр2), ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ПустаяСсылка)))
		|ГДЕ
		|	НЕ ПередачаВРегистр2ЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияМеждуРегистрами.НомерСтроки,
		|	ТТНВходящаяЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияМеждуРегистрами КАК ДвиженияМеждуРегистрами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияМеждуРегистрами.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ТТНВходящаяЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияМеждуРегистрами.ВидДокумента В (&ВидыДокументовТТН))
		|ГДЕ
		|	НЕ ТТНВходящаяЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияМеждуРегистрами.НомерСтроки,
		|	ТТНИсходящаяЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияМеждуРегистрами КАК ДвиженияМеждуРегистрами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияМеждуРегистрами.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияМеждуРегистрами.ВидДокумента В (&ВидыДокументовТТН))
		|ГДЕ
		|	НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
		|");
		
		Запрос.УстановитьПараметр("ДвиженияМеждуРегистрами", ДокументОбъект.ДвиженияМеждуРегистрами);
		Запрос.УстановитьПараметр("ВидыДокументовТТН",       ВидыДокументовТТН);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект.ДвиженияМеждуРегистрами[Выборка.НомерСтроки - 1].ДокументОснование = Выборка.ДокументОснование;
		КонецЦикла;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = Реквизиты.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает данные отчета Движения между регистрами в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаДвиженияПоСправке2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (Движения по справке 2):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""Движения по справке 2""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			ДокументОбъект.Период = ДанныеДокумента.Объект.HistFormBDate;
			ДанныеДвижений = ДанныеДокумента.Объект.HistoryB.OperationB;
		Иначе
			ДокументОбъект.Период = ДанныеДокумента.Объект.HistForm2Date;
			ДанныеДвижений = ДанныеДокумента.Объект.HistoryF2.OperationB;
		Конецесли;
		
		ДокументОбъект.ДвиженияПоСправке2.Очистить();
		
		Для Каждого ЭлементДанных Из ДанныеДвижений Цикл
			
			ДанныеДокументаПоТипуЕГАИС = Перечисления.ВидыДокументовЕГАИС.ДанныеДокументаПоТипуЕГАИС(ЭлементДанных.DocType);
			
			СтрокаТЧ = ДокументОбъект.ДвиженияПоСправке2.Добавить();
			СтрокаТЧ.ВидДокумента            = ДанныеДокументаПоТипуЕГАИС.ВидДокументаЕГАИС;
			СтрокаТЧ.ИдентификаторЕГАИС      = ЭлементДанных.DocId;
			СтрокаТЧ.Количество              = ЭлементДанных.Quantity;
			СтрокаТЧ.ОписаниеОперации        = ЭлементДанных.Operation;
			СтрокаТЧ.ДатаРегистрацииДвижений = ЭлементДанных.OperDate;
			
		КонецЦикла;
		
		ВидыДокументовТТН = Новый Массив;
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ);
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение);
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.ТТН);
		ВидыДокументовТТН.Добавить(Перечисления.ВидыДокументовЕГАИС.ПустаяСсылка());
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДвиженияПоСправке2.ВидДокумента КАК ВидДокумента,
		|	ДвиженияПоСправке2.ИдентификаторЕГАИС КАК ИдентификаторЕГАИС,
		|	ДвиженияПоСправке2.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ДвиженияПоСправке2
		|ИЗ
		|	&ДвиженияПоСправке2 КАК ДвиженияПоСправке2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДвиженияПоСправке2.НомерСтроки КАК НомерСтроки,
		|	АктПостановкиНаБалансЕГАИС.Ссылка КАК ДокументОснование
		|ИЗ
		|	ДвиженияПоСправке2 КАК ДвиженияПоСправке2
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктПостановкиНаБалансЕГАИС КАК АктПостановкиНаБалансЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияПоСправке2.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(АктПостановкиНаБалансЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И ДвиженияПоСправке2.ВидДокумента = АктПостановкиНаБалансЕГАИС.ВидДокумента
		|ГДЕ
		|	НЕ АктПостановкиНаБалансЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияПоСправке2.НомерСтроки,
		|	АктСписанияЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияПоСправке2 КАК ДвиженияПоСправке2
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС КАК АктСписанияЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияПоСправке2.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(АктСписанияЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И ДвиженияПоСправке2.ВидДокумента = АктСписанияЕГАИС.ВидДокумента
		|ГДЕ
		|	НЕ АктСписанияЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияПоСправке2.НомерСтроки,
		|	ВозвратИзРегистра2ЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияПоСправке2 КАК ДвиженияПоСправке2
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратИзРегистра2ЕГАИС КАК ВозвратИзРегистра2ЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияПоСправке2.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ВозвратИзРегистра2ЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияПоСправке2.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ВозвратИзРегистра2))
		|ГДЕ
		|	НЕ ВозвратИзРегистра2ЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияПоСправке2.НомерСтроки,
		|	ПередачаВРегистр2ЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияПоСправке2 КАК ДвиженияПоСправке2
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПередачаВРегистр2ЕГАИС КАК ПередачаВРегистр2ЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияПоСправке2.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ПередачаВРегистр2ЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияПоСправке2.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ПередачаВРегистр2))
		|ГДЕ
		|	НЕ ПередачаВРегистр2ЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияПоСправке2.НомерСтроки,
		|	ТТНВходящаяЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияПоСправке2 КАК ДвиженияПоСправке2
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ТТНВходящаяЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияПоСправке2.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ТТНВходящаяЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияПоСправке2.ВидДокумента В (&ВидыДокументовТТН))
		|ГДЕ
		|	НЕ ТТНВходящаяЕГАИС.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияПоСправке2.НомерСтроки,
		|	ТТНИсходящаяЕГАИС.Ссылка
		|ИЗ
		|	ДвиженияПоСправке2 КАК ДвиженияПоСправке2
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ТТНИсходящаяЕГАИС
		|		ПО ((ВЫРАЗИТЬ(ДвиженияПоСправке2.ИдентификаторЕГАИС КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ТТНИсходящаяЕГАИС.ИдентификаторЕГАИС КАК СТРОКА(50))))
		|			И (ДвиженияПоСправке2.ВидДокумента В (&ВидыДокументовТТН))
		|ГДЕ
		|	НЕ ТТНИсходящаяЕГАИС.ПометкаУдаления
		|");
		
		Запрос.УстановитьПараметр("ДвиженияПоСправке2", ДокументОбъект.ДвиженияПоСправке2);
		Запрос.УстановитьПараметр("ВидыДокументовТТН" , ВидыДокументовТТН);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект.ДвиженияПоСправке2[Выборка.НомерСтроки - 1].ДокументОснование = Выборка.ДокументОснование;
		КонецЦикла;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает данные отчета Информация об организации в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаИнформацияОбОрганизации(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (Информация об организации):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""Информация об организации""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Период = ДанныеДокумента.Объект.VersionDate;
		ДокументОбъект.ИнформацияОбОрганизацииЕГАИС.Очистить();
		
		СтрокаТЧ = ДокументОбъект.ИнформацияОбОрганизацииЕГАИС.Добавить();
		
		Если ДанныеДокумента.Объект.Client <> Неопределено Тогда
			
			ОрганизацияXDTO = ДанныеОрганизации(ДанныеДокумента.Объект.Client);
			
			СтрокаТЧ.ТипОрганизации     = ТипОрганизации(ДанныеДокумента.Объект.Client);
			СтрокаТЧ.Наименование       = ОрганизацияXDTO.ShortName;
			СтрокаТЧ.НаименованиеПолное = ОрганизацияXDTO.FullName;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОрганизацияXDTO, "INN") Тогда
				СтрокаТЧ.ИНН = СокрЛП(ОрганизацияXDTO.INN);
			КонецЕсли;
			
			Если  ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОрганизацияXDTO, "KPP") Тогда
				СтрокаТЧ.КПП = СокрЛП(ОрганизацияXDTO.KPP);
			КонецЕсли;
			
			СтрокаТЧ.КодСтраны = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОрганизацияXDTO.address.Country);
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОрганизацияXDTO.address, "RegionCode") Тогда
				СтрокаТЧ.КодРегиона = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОрганизацияXDTO.address.RegionCode);
			КонецЕсли;
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОрганизацияXDTO.address, "Index") Тогда
				СтрокаТЧ.ПочтовыйИндекс = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ОрганизацияXDTO.address.Index);
			КонецЕсли;
			
			СтрокаТЧ.ПредставлениеАдреса = СокрЛП(ОрганизацияXDTO.address.description);
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ТипОрганизации) Тогда
				Если ПустаяСтрока(СтрокаТЧ.ИНН) И ПустаяСтрока(СтрокаТЧ.КПП) Тогда
					СтрокаТЧ.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
				ИначеЕсли ПустаяСтрока(СтрокаТЧ.КПП) И СтрДлина(СокрЛП(СтрокаТЧ.ИНН)) = 12 Тогда
					СтрокаТЧ.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
				Иначе
					СтрокаТЧ.ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает данные отчета Необработанные ТТН в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаНеобработанныеТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (Необработанные ТТН):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""Необработанные ТТН""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Период = ДанныеДокумента.Объект.ReplyDate;
		ДокументОбъект.НеобработанныеТТН.Очистить();
		
		Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.ttnlist.NoAnswer Цикл
			
			СтрокаТЧ = ДокументОбъект.НеобработанныеТТН.Добавить();
			СтрокаТЧ.ИдентификаторЕГАИС  = ЭлементДанных.WbRegID;
			СтрокаТЧ.НомерТТН            = ЭлементДанных.ttnNumber;
			СтрокаТЧ.ДатаТТН             = ЭлементДанных.ttnDate;
			СтрокаТЧ.КодГрузоотправителя = ЭлементДанных.Shipper;
			
		КонецЦикла;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = Реквизиты.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает данные отчета Обработанные чеки в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаОбработанныеЧеки(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (Обработанные чеки):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""Обработанные чеки""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Период = ДанныеДокумента.Объект.ReplyDate;
		ДокументОбъект.ОбработанныеЧеки.Очистить();
		
		СтрокаТЧ = ДокументОбъект.ОбработанныеЧеки.Добавить();
		СтрокаТЧ.КоличествоЧековПродаж    = ДанныеДокумента.Объект.WriteOffCh;
		СтрокаТЧ.КоличествоЧековНаВозврат = ДанныеДокумента.Объект.ReturnCh;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает данные отчета Остатки в регистре №1 в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре1(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (Остатки в регистре №1):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""Остатки в регистре №1""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Дата = ДанныеДокумента.Объект.RestsDate;
		ДокументОбъект.ОстаткиАлкогольнойПродукции.Очистить();
		
		Если ДанныеДокумента.Объект.Products <> Неопределено Тогда
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Products.StockPosition Цикл
				
				СтрокаТЧ = ДокументОбъект.ОстаткиАлкогольнойПродукции.Добавить();
				СтрокаТЧ.КодАлкогольнойПродукции = ЭлементДанных.AlcCode;
				СтрокаТЧ.Количество              = ЭлементДанных.Quantity;
				СтрокаТЧ.НомерСправки2           = ЭлементДанных.Inform2RegId;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает данные отчета Остатки в регистре №2 в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (Остатки в регистре №2):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""Остатки в регистре №2""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Дата = ДанныеДокумента.Объект.RestsDate;
		ДокументОбъект.ОстаткиАлкогольнойПродукции.Очистить();
		
		Если ДанныеДокумента.Объект.Products <> Неопределено Тогда
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Products.ShopPosition Цикл
				
				СтрокаТЧ = ДокументОбъект.ОстаткиАлкогольнойПродукции.Добавить();
				СтрокаТЧ.КодАлкогольнойПродукции = ЭлементДанных.AlcCode;
				СтрокаТЧ.Количество              = ЭлементДанных.Quantity;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает данные отчета Остатки в регистре №3 в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре3(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (Остатки в регистре №3):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""Остатки в регистре №3""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Дата = ДанныеДокумента.Объект.RestsDate;
		ДокументОбъект.АкцизныеМарки.Очистить();
		
		Если ДанныеДокумента.Объект.MarkInfo <> Неопределено Тогда
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.MarkInfo Цикл
				
				Для Каждого КодАкцизнойМарки Из ЭлементДанных.amc Цикл
					
					СтрокаТЧ = ДокументОбъект.АкцизныеМарки.Добавить();
					СтрокаТЧ.КодАкцизнойМарки = КодАкцизнойМарки;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает данные отчета История справок 2 в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьОтветНаЗапросОтчетаИсторияСправок2(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(
		ДанныеДокумента.ИдентификаторЗапроса, Ложь);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных отчета ЕГАИС (История справок 2):
			           |Не найден документ с идентификатором запроса %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные отчета ""История справок 2""'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		ДокументОбъект.Дата = ДанныеДокумента.Объект.HistForm2Date;
		ДокументОбъект.ИсторияСправок2.Очистить();
		
		Если ДанныеДокумента.Объект.ParentHist <> Неопределено Тогда
			
			Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.ParentHist.step Цикл
				
				СтрокаТЧ = ДокументОбъект.ИсторияСправок2.Добавить();
				СтрокаТЧ.Шаг                            = ЭлементДанных.lev;
				СтрокаТЧ.РегистрационныйНомер           = ЭлементДанных.Form2;
				СтрокаТЧ.РегистрационныйНомерПоставщика = ЭлементДанных.parentForm2;
				СтрокаТЧ.ГрузоотправительКод            = ЭлементДанных.Shipper;
				СтрокаТЧ.ГрузополучательКод             = ЭлементДанных.Consignee;
				СтрокаТЧ.НомерТТН                       = ЭлементДанных.WBRegId;
				СтрокаТЧ.Количество                     = ЭлементДанных.amount;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = Реквизиты.ИдентификаторЗапроса;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = Реквизиты.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
		
		ПолноеИмя = ДокументОбъект.Ссылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
			ПараметрыОбновленияСтатуса);
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
		ЕстьОшибки = Документы.ОтчетЕГАИС.ЕстьРасхожденияВПолученныхДанных(ДокументОбъект.ВидДокумента, ДокументОбъект.Ссылка);
		Если ЕстьОшибки Тогда
			
			ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = РезультатПоиска.ФорматОбмена;
			
			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДокументОбъект.Ссылка, ДанныеДокумента.Операция,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает историю справок 2 по ТТН в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьИсториюСправок2ПоТТН(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ДанныеДокумента.Объект.Header.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке данных истории справок 2 по ТТН:
			           |Не найден документ ТТН ЕГАИС (входящая) с идентификатором ЕГАИС %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение истории справок 2 по ТТН'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         РезультатПоиска.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.Content.Position Цикл
			
			Для Каждого ЭлементДанныхШаг Из ЭлементДанных.HistF2.step Цикл
				
				СтрокаТЧ = ДокументОбъект.ИсторияСправок2.Добавить();
				СтрокаТЧ.ИдентификаторСтроки = ЭлементДанных.Identity;
				
				СтрокаТЧ.Шаг                            = ЭлементДанныхШаг.lev;
				СтрокаТЧ.РегистрационныйНомер           = ЭлементДанныхШаг.Form2;
				СтрокаТЧ.РегистрационныйНомерПоставщика = ЭлементДанныхШаг.parentForm2;
				СтрокаТЧ.ГрузоотправительКод            = ЭлементДанныхШаг.Shipper;
				СтрокаТЧ.ГрузополучательКод             = ЭлементДанныхШаг.Consignee;
				СтрокаТЧ.НомерТТН                       = ЭлементДанныхШаг.WBRegId;
				СтрокаТЧ.Количество                     = ЭлементДанныхШаг.amount;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = РезультатПоиска.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает историю справок 2 по ТТН в базу данных.
//
// Параметры:
//  ЭлементДанных - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьВходящуюТранспортнуюНакладную(ЭлементДанных, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	ДанныеДокумента = ЭлементДанных.ДанныеДокумента;
	
	РезультатПоиска = НайтиОбъектПоИдентификатору(
		Метаданные.Документы.ТТНВходящаяЕГАИС,
		"ИдентификаторЕГАИС",
		ЭлементДанных.WBRegId);
	
	Если РезультатПоиска = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке входящей транспортной накладной по ТТН:
			           |Не найден документ ТТН ЕГАИС (входящая) с идентификатором ЕГАИС %1.'"),
			ДанныеДокумента.Объект.Header.WBRegId);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИсходящееСообщение = Неопределено;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             Перечисления.ВидыДокументовЕГАИС.КвитанцияВходящейТранспортнойНакладной);
	Реквизиты.Вставить("Документ",             РезультатПоиска.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получение квитанции по транспортной накладной с переходом права собственности по ТТН'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         РезультатПоиска.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ДокументОбъект = РезультатПоиска.Ссылка.ПолучитьОбъект();
		
		// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
		// Документ будет получен в следующий итерации загрузки данных.
		ДокументОбъект.Заблокировать();
		
		Если ЭлементДанных.ДополнительныеДанные.Проведен = Истина Тогда
			ДокументОбъект.НомерТранспортнойНакладной = ДанныеДокумента.Объект.RegID;
			ДокументОбъект.ДатаТранспортнойНакладной  = ДанныеДокумента.Объект.TicketDate;
		ИначеЕсли ЭлементДанных.ДополнительныеДанные.Проведен = Ложь Тогда
			ДокументОбъект.НомерТранспортнойНакладной = Неопределено;
			ДокументОбъект.ДатаТранспортнойНакладной  = Неопределено;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
		ОбъектИзменен = Истина;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = РезультатПоиска.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДокументОбъект.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = Неопределено;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

// Загружает справки по формам А и Б в базу данных.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьСправку(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт
	
	ИсходящееСообщение = ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	
	Если ИсходящееСообщение = Неопределено Тогда
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'При загрузке ответа на запрос справок:
			           |Не найден исходящий запрос с идентификатором %1.'"),
			ДанныеДокумента.ИдентификаторЗапроса);
		
	КонецЕсли;
	
	Ссылка = СоздатьСправку(
		ДанныеСправки(ДанныеДокумента, ДанныеДокумента.Операция),
		ДанныеДокумента.Операция);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             Неопределено);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             НСтр("ru = 'Получены данные справки №1 (справки №2)'"));
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС);
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = Неопределено;
	ВозвращаемоеЗначение.НовыйСтатус       = Неопределено;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Обрабатывает квитанцию АСИиУ - только отметка о прочтении для удаления из очереди
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ОбработатьКвитанциюАСИиУ(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры) Экспорт
	
	СрокДоОчистки = Константы.УдалятьКвитанцииУТМДляАСИиУ.Получить();
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ДатаКвитанции = ДанныеДокумента.Объект.TicketDate;
	Принято = (СрокДоОчистки > 0) И (НачалоДня(ДатаКвитанции) + 86400 * СрокДоОчистки <= НачалоДня(ДатаСеанса));
	
	Если Не Принято Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	ВозвращаемоеЗначение.Принято          = Принято;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает и обрабатывает квитанцию из ЕГАИС.
// 
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
//  см. ЗагрузитьКвитанциюПолученЕГАИС
Функция ЗагрузитьКвитанцию(ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры = Неопределено) Экспорт

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "Result")
		И ДанныеДокумента.Объект.Result <> Неопределено Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "OperationResult")
		И ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
		ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеДокумента.ИдентификаторЗапроса) Тогда
		РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(ДанныеДокумента.ИдентификаторЗапроса);
	Иначе
		РезультатПоиска = Неопределено;
	КонецЕсли;
	
	Если РезультатПоиска = Неопределено
		И ЗначениеЗаполнено(ДанныеДокумента.Объект.Identity)
		И ЗначениеЗаполнено(ДанныеДокумента.Объект.DocType) Тогда
		РезультатПоиска = НайтиОбъектПоИдентификаторуТипаЕГАИСПриЗагрузкеКвитанции(
			ДанныеДокумента.Объект.Identity,
			ДанныеДокумента.Объект.DocType,
			ДанныеДокумента.Операция,
			ОрганизацияЕГАИС);
	КонецЕсли;
	
	Если РезультатПоиска = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ДополнительныеПараметры.СтопЛист.Получить(РезультатПоиска.Ссылка) <> Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ДополнительныеПараметры.ТекущийОбъект = РезультатПоиска.Ссылка;
		
	КонецЕсли;
	
	ИдентификаторЕГАИС = "";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента.Объект, "RegID") Тогда
		ИдентификаторЕГАИС = Строка(ДанныеДокумента.Объект.RegID);
	КонецЕсли;
	
	Если ДанныеДокумента.Объект.Result <> Неопределено Тогда
		
		Возврат ЗагрузитьКвитанциюПолученЕГАИС(
			ДанныеДокумента,
			РезультатПоиска,
			ИдентификаторЕГАИС,
			ОрганизацияЕГАИС);
		
	ИначеЕсли ДанныеДокумента.Объект.OperationResult <> Неопределено Тогда
		
		Возврат ЗагрузитьКвитанциюПроведенЕГАИС(
			ДанныеДокумента,
			РезультатПоиска,
			ИдентификаторЕГАИС,
			ОрганизацияЕГАИС);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестный тип загружаемой квитанции.'");
		
	КонецЕсли;
	
КонецФункции

// Не требуется проведение ЕГАИС.
// 
// Параметры:
//  Операция - Произвольный - Операция
// 
// Возвращаемое значение:
//  Булево - Не требуется проведение ЕГАИС
Функция НеТребуетсяПроведениеЕГАИС(Операция)
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ Тогда
		Возврат Истина;
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции

// Загружает информацию о фиксации документа в ЕГАИС.
//
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ДанныеОснованияКвитанции - Структура -
//  ИдентификаторЕГАИС - Строка - Идентификатор ЕГАИС
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьКвитанциюПолученЕГАИС(ДанныеДокумента, ДанныеОснованияКвитанции, ИдентификаторЕГАИС, ОрганизацияЕГАИС) Экспорт
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	Если ДанныеОснованияКвитанции.ИсходящееСообщение = Неопределено Тогда
		ИсходящееСообщение = ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	Иначе
		ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеОснованияКвитанции.Операция) И НЕ(ИсходящееСообщение = Неопределено) Тогда
		ДанныеОснованияКвитанции.Вставить("Операция", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходящееСообщение, "Операция"));
	КонецЕсли;
	
	Если ВРег(ДанныеДокумента.Объект.Result.Conclusion) = ВРег("Rejected") Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
	ИначеЕсли НеТребуетсяПроведениеЕГАИС(ДанныеОснованияКвитанции.Операция) Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
	Иначе
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ОбрабатываетсяЕГАИС;
	КонецЕслИ;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             ДанныеОснованияКвитанции.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             ДанныеДокумента.Объект.Result.Comments);
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("ОперацияКвитанции",    ДанныеОснованияКвитанции.Операция);
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
		
	Если ДанныеОснованияКвитанции.Ссылка <> Неопределено Тогда
		ЭтоДокумент = Метаданные.Документы.Содержит(ДанныеОснованияКвитанции.Ссылка.Метаданные());
	Иначе
		ЭтоДокумент = Ложь;
	КонецЕсли;
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		ОтразитьФиксацию = ЭтоДокумент;
		
		Если ОтразитьФиксацию И ЗначениеЗаполнено(ДанныеОснованияКвитанции.Ссылка) Тогда
			
			ЭтоУведомлениеОПланируемомИмпорте = ТипЗнч(ДанныеОснованияКвитанции.Ссылка) = Тип("ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС");
			
			ЗаписыватьДокумент = ЗначениеЗаполнено(ИдентификаторЕГАИС) Или ЭтоУведомлениеОПланируемомИмпорте;
			
			ОснованиеКвитанцииМетаданные = ДанныеОснованияКвитанции.Ссылка.Метаданные();
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ОснованиеКвитанцииМетаданные.ПолноеИмя());
			
			Если ЗаписыватьДокумент Тогда
				
				ДокументОбъект = ДанныеОснованияКвитанции.Ссылка.ПолучитьОбъект();
				
				// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
				// Документ будет получен в следующий итерации загрузки данных.
				ДокументОбъект.Заблокировать();
				
				Если ЭтоУведомлениеОПланируемомИмпорте Тогда
					Документы.УведомлениеОПланируемомИмпортеЕГАИС.ЗаполнитьСтатусИИдентификаторПоКвитанции
						(ДокументОбъект, ДанныеДокумента, СтатусОбработки, ДанныеОснованияКвитанции.Операция);
				ИначеЕсли ПерезаписатьИдентификаторЕГАИС(ОснованиеКвитанцииМетаданные.Имя) Тогда
					Если ДокументОбъект.ИдентификаторЕГАИС <> ИдентификаторЕГАИС Тогда
						ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
					КонецЕсли;
				ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ИдентификаторЕГАИС")
					И Не ЗначениеЗаполнено(ДокументОбъект.ИдентификаторЕГАИС) Тогда
					ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
				КонецЕсли;
				
				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
				ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции    = ДанныеОснованияКвитанции.Операция;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеОснованияКвитанции.ФорматОбмена;
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ДанныеОснованияКвитанции.Ссылка,
					ДанныеДокумента.Операция,
					ПараметрыОбновленияСтатуса);
				
				ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
				ОбъектИзменен = Истина;
				
			Иначе
				
				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции    = ДанныеОснованияКвитанции.Операция;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеОснованияКвитанции.ФорматОбмена;
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ДанныеОснованияКвитанции.Ссылка,
					ДанныеДокумента.Операция,
					ПараметрыОбновленияСтатуса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ?(ЭтоДокумент, ДанныеОснованияКвитанции.Ссылка, Неопределено);
	ВозвращаемоеЗначение.ДокументОснование = ДанныеОснованияКвитанции.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Загружает информацию о проведении документа в ЕГАИС.
// 
// Параметры:
//  ДанныеДокумента - Структура - Данные документа
//  ДанныеОснованияКвитанции - Структура -
//  ИдентификаторЕГАИС - Строка - Идентификатор ЕГАИС
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС
// 
// Возвращаемое значение:
//  см. ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения
Функция ЗагрузитьКвитанциюПроведенЕГАИС(ДанныеДокумента, ДанныеОснованияКвитанции, ИдентификаторЕГАИС, ОрганизацияЕГАИС) Экспорт
	
	ОперацияВыполнена = (ВРег(ДанныеДокумента.Объект.OperationResult.OperationResult) <> ВРег("Rejected"));
	
	ДатаРегистрацииДвижений = Неопределено;
	
	Если ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("Confirm")
		И ОперацияВыполнена Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
		
		Если ДокументСоответствуетТипуЕГАИС(ДанныеОснованияКвитанции.Ссылка, ДанныеДокумента.Объект.DocType) Тогда
			ДатаРегистрацииДвижений = ДанныеДокумента.Объект.OperationResult.OperationDate;
		КонецЕсли;
		
	ИначеЕсли ВРег(ДанныеДокумента.Объект.OperationResult.OperationName) = ВРег("UnConfirm")
		И ОперацияВыполнена Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументРаспроведен;
		ДатаРегистрацииДвижений = '00010101'
		
	//Для уведомления о планируемом импорте
	ИначеЕсли ОперацияВыполнена Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
		
	Иначе
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
		
	КонецЕсли;
	
	Если ДанныеОснованияКвитанции.ИсходящееСообщение = Неопределено Тогда
		ИсходящееСообщение = ИсходящееСообщение(ДанныеДокумента.ИдентификаторЗапроса);
	Иначе
		ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	КонецЕсли;
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ТипСообщения",         Перечисления.ТипыЗапросовИС.Входящий);
	Реквизиты.Вставить("Операция",             ДанныеДокумента.Операция);
	Реквизиты.Вставить("Документ",             ДанныеОснованияКвитанции.Ссылка);
	Реквизиты.Вставить("СообщениеОснование",   ИсходящееСообщение);
	Реквизиты.Вставить("Описание",             ДанныеДокумента.Объект.OperationResult.OperationComment);
	Реквизиты.Вставить("ИдентификаторЗапроса", ДанныеДокумента.ИдентификаторЗапроса);
	Реквизиты.Вставить("ФорматОбмена",         ДанныеДокумента.ФорматОбмена);
	Реквизиты.Вставить("ОрганизацияЕГАИС",     ОрганизацияЕГАИС);
	Реквизиты.Вставить("СтатусОбработки",      СтатусОбработки);
	Реквизиты.Вставить("ОперацияКвитанции",    ДанныеОснованияКвитанции.Операция);
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписи = ОбменДаннымиЕГАИС.ДобавитьЗаписьВПротоколОбмена(
		ДанныеДокумента.ТекстXML,
		Реквизиты);
	
	Если РезультатДобавленияЗаписи.НовоеСообщение Тогда
		
		Если ЗначениеЗаполнено(ДанныеОснованияКвитанции.Ссылка) Тогда
			
			ЭтоУведомлениеОПланируемомИмпорте = ТипЗнч(ДанныеОснованияКвитанции.Ссылка) = Тип("ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС");
			
			Если ЭтоУведомлениеОПланируемомИмпорте Тогда
				ЗаписыватьДокумент = Истина;
			ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен Тогда
				ЗаписыватьДокумент = ЗначениеЗаполнено(ИдентификаторЕГАИС)
					Или ДатаРегистрацииДвижений <> Неопределено;
			Иначе
				ЗаписыватьДокумент = Ложь;
			КонецЕсли;
			
			ОснованиеКвитанцииМетаданные = ДанныеОснованияКвитанции.Ссылка.Метаданные();
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ОснованиеКвитанцииМетаданные.ПолноеИмя());
			
			Если ЗаписыватьДокумент Тогда
				
				ДокументОбъект = ДанныеОснованияКвитанции.Ссылка.ПолучитьОбъект();
				
				// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
				// Документ будет получен в следующий итерации загрузки данных.
				ДокументОбъект.Заблокировать();
				
				Если ЭтоУведомлениеОПланируемомИмпорте Тогда
					Документы.УведомлениеОПланируемомИмпортеЕГАИС.ЗаполнитьСтатусИИдентификаторПоКвитанции
						(ДокументОбъект, ДанныеДокумента, СтатусОбработки, ДанныеОснованияКвитанции.Операция);
				ИначеЕсли ЗначениеЗаполнено(ИдентификаторЕГАИС) Тогда
					Если ПерезаписатьИдентификаторЕГАИС(ОснованиеКвитанцииМетаданные.Имя) Тогда
						Если ДокументОбъект.ИдентификаторЕГАИС <> ИдентификаторЕГАИС Тогда
							ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
						КонецЕсли;
					ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ИдентификаторЕГАИС")
						И Не ЗначениеЗаполнено(ДокументОбъект.ИдентификаторЕГАИС) Тогда
						ДокументОбъект.ИдентификаторЕГАИС = ИдентификаторЕГАИС;
					КонецЕсли;
				КонецЕсли;
				
				Если ДатаРегистрацииДвижений <> Неопределено Тогда
					ДокументОбъект.ДатаРегистрацииДвижений = ДатаРегистрацииДвижений;
				КонецЕсли;
				
				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
				ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции    = ДанныеОснованияКвитанции.Операция;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеОснованияКвитанции.ФорматОбмена;
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ДанныеОснованияКвитанции.Ссылка,
					ДанныеДокумента.Операция,
					ПараметрыОбновленияСтатуса);
				
				ДокументОбъект.Записать(РежимЗаписи(ДокументОбъект));
				ОбъектИзменен = Истина;
				
			Иначе
				
				ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Не ЗаписыватьДокумент;
				ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗапроса;
				ПараметрыОбновленияСтатуса.СтатусОбработки      = СтатусОбработки;
				ПараметрыОбновленияСтатуса.ОперацияКвитанции    = ДанныеОснованияКвитанции.Операция;
				ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеОснованияКвитанции.ФорматОбмена;
				
				НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
					ДанныеОснованияКвитанции.Ссылка,
					ДанныеДокумента.Операция,
					ПараметрыОбновленияСтатуса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ОрганизацияЕГАИС = ОрганизацияЕГАИС;
	ВозвращаемоеЗначение.Операция         = ДанныеДокумента.Операция;
	ВозвращаемоеЗначение.ФорматОбмена     = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки           = "";
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.ПереданоВУТМ          = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = ДанныеОснованияКвитанции.ИсходящееСообщение;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписи.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДанныеОснованияКвитанции.Ссылка;
	ВозвращаемоеЗначение.ДокументОснование = ДанныеОснованияКвитанции.ДокументОснование;
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	СлужебныеДанные = Новый Массив;
	СлужебныеДанные.Добавить(
		СлужебныеДанные(
			ОрганизацияЕГАИС,
			ДанныеДокумента.Операция,
			ДанныеДокумента.АдресЗапроса));
	ВозвращаемоеЗначение.Вставить("СлужебныеДанные", СлужебныеДанные);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет соответствие типа ЕГАИС и передаваемого документа.
//
Функция ДокументСоответствуетТипуЕГАИС(ДокументСсылка, ТипЕГАИС)
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("WayBill")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("WayBill_v2")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("WayBill_v3")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("WayBill_v4")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("WayBillAct")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("WayBillAct_v2")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("WayBillAct_v3");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("ActChargeOn")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("ActChargeOn_v2")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("ActChargeOnShop_v2");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("ActWriteOff")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("ActWriteOff_v2")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("ActWriteOff_v3")
			ИЛИ ВРег(ТипЕГАИС) = ВРег("ActWriteOffShop_v2");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("TransferFromShop");
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС") Тогда
		
		Возврат ВРег(ТипЕГАИС) = ВРег("TransferToShop");
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Получает данные справок А и Б в виде структуры для последующей загрузки в базу.
//
Функция ДанныеСправки(ДанныеДокумента, ВидСправки)
	
	// Соответствие между реквизитами справки (Ключ) и свойствами объекта XDTO (Значение)
	СоответствияРеквизитов = Новый Соответствие;
	СоответствияРеквизитов.Вставить("Количество", "Quantity");
	
	Если ВидСправки = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1 Тогда
		
		ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки1();
		
		Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformARegId");
			СоответствияРеквизитов.Вставить("НомерТТН", "TTNNumber");
			СоответствияРеквизитов.Вставить("ДатаТТН", "TTNDate");
			СоответствияРеквизитов.Вставить("ДатаОтгрузки", "ShippingDate");
			
			ДанныеСправки.Грузоотправитель = ЗагрузитьОрганизацию(ДанныеДокумента.Объект.Shipper);
			ДанныеСправки.Грузополучатель = ЗагрузитьОрганизацию(ДанныеДокумента.Объект.Consignee);
			
		Иначе
			
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformF1RegId");
			СоответствияРеквизитов.Вставить("НомерТТН", "OriginalDocNumber");
			СоответствияРеквизитов.Вставить("ДатаТТН", "OriginalDocDate");
			
			Если ДанныеДокумента.Объект.OriginalClient <> Неопределено Тогда
				ДанныеСправки.Грузоотправитель = ЗагрузитьОрганизацию(ДанныеДокумента.Объект.OriginalClient);
			КонецЕсли;
			
		КонецЕсли;
		
		СоответствияРеквизитов.Вставить("ДатаРозлива", "BottlingDate");
		СоответствияРеквизитов.Вставить("НомерПодтвержденияЕГАИС", "EGAISNumber");
		СоответствияРеквизитов.Вставить("ДатаПодтвержденияЕГАИС", "EGAISDate");
		
	Иначе
		
		ДанныеСправки = ИнтеграцияЕГАИСКлиентСервер.СтруктураДанныхСправки2();
		
		Если ДанныеДокумента.ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V1 Тогда
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformBRegId");
		Иначе
			СоответствияРеквизитов.Вставить("РегистрационныйНомер", "InformF2RegId");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючЗначение Из СоответствияРеквизитов Цикл
		ДанныеСправки[КлючЗначение.Ключ] = ДанныеДокумента.Объект[КлючЗначение.Значение];
	КонецЦикла;
	
	АлкогольнаяПродукция = Новый Массив;
	АлкогольнаяПродукция.Добавить(ДанныеДокумента.Объект.Product);
	
	СоответствиеЗагруженнаяАлкогольнаяПродукция = ЗагрузитьАлкогольнуюПродукцию(АлкогольнаяПродукция);
	
	Если СоответствиеЗагруженнаяАлкогольнаяПродукция[ДанныеДокумента.Объект.Product.AlcCode] <> Неопределено Тогда
		ДанныеСправки.АлкогольнаяПродукция = СоответствиеЗагруженнаяАлкогольнаяПродукция[ДанныеДокумента.Объект.Product.AlcCode].АлкогольнаяПродукция;
	КонецЕсли;
	
	Возврат ДанныеСправки;
	
КонецФункции

// Возвращает объект XDTO организации, которую требуется загрузить.
//
Функция ДанныеОрганизации(ДанныеОрганизации)
	
	Объект = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "UL") И ДанныеОрганизации.UL <> Неопределено Тогда
		Объект = ДанныеОрганизации.UL;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "FL") И ДанныеОрганизации.FL <> Неопределено Тогда
		Объект = ДанныеОрганизации.FL;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "FO") И ДанныеОрганизации.FO <> Неопределено Тогда
		Объект = ДанныеОрганизации.FO;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "TS") И ДанныеОрганизации.TS <> Неопределено Тогда
		Объект = ДанныеОрганизации.TS;
	Иначе
		Объект = ДанныеОрганизации;
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

// Возвращает тип организации ЕГАИС.
//
// Параметры:
//  ДанныеОрганизации - ОбъектXDTO - Данные организации ЕГАИС.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ТипыОрганизацийЕГАИС - Тип организации ЕГАИС.
//
Функция ТипОрганизации(ДанныеОрганизации)
	
	ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ПустаяСсылка();
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "UL") И ДанныеОрганизации.UL <> Неопределено Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "FL") И ДанныеОрганизации.FL <> Неопределено Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "FO") И ДанныеОрганизации.FO <> Неопределено Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.ИностранныйКонтрагент;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеОрганизации, "TS") И ДанныеОрганизации.TS <> Неопределено Тогда
		ТипОрганизации = Перечисления.ТипыОрганизацийЕГАИС.КонтрагентТаможенногоСоюза;
	КонецЕсли;
	
	Возврат ТипОрганизации;
	
КонецФункции

// Возвращает структура данных для удаления запросов из УТМ.
//
// Параметры:
//  ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//  АдресЗапроса - Строка - Адрес запроса.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ОрганизацияЕГАИС - СправочникСсылка.КлассификаторОрганизацийЕГАИС - Организация ЕГАИС.
//   * Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//   * АдресЗапроса - Строка - Адрес запроса.
//
Функция СлужебныеДанные(ОрганизацияЕГАИС, Операция, АдресЗапроса)
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	ВозвращаемоеЗначение.Вставить("Операция",         Операция);
	ВозвращаемоеЗначение.Вставить("АдресЗапроса",     АдресЗапроса);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет поиск акцизных марок в дереве упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  ЗначенияШтрихкодов - Массив - Массив найденных штрихкодов.
//
// Возвращаемое значение:
//  Массив - Найденные штрихкоды.
Функция ЗначенияШтрихкодовИзДереваУпаковок(ДеревоУпаковок, ЗначенияШтрихкодов = Неопределено) Экспорт
	
	Если ЗначенияШтрихкодов = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ЗначенияШтрихкодов;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЗначенияШтрихкодовИзДереваУпаковок(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод) Тогда
			Результат.Добавить(СтрокаДерева.Штрихкод);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Выполняет начальную запись в регистр "Статусы документов ЕГАИС"
//
Процедура ЗаписатьСтатусДокументаЕГАИСПоУмолчанию(Источник) Экспорт

	ЗаписьНового = Источник.ДополнительныеСвойства.Свойство("ЭтоНовый")
	             И Источник.ДополнительныеСвойства.ЭтоНовый;
	
	Если Не ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаписи = РегистрыСведений.СтатусыДокументовЕГАИС.ЗначенияПоУмолчанию(Источник.Ссылка);
	
	РегистрыСведений.СтатусыДокументовЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборПоОрганизацииЕГАИС

Процедура ОтборПоОрганизацииПриСозданииНаСервере(Форма, Знач ЗначениеПрефиксы = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеПрефиксы = Неопределено Тогда
		Префиксы = Новый Массив;
		Префиксы.Добавить("Оформлено");
		Префиксы.Добавить("КОформлению");
		Префиксы.Добавить("ВРегистр3");
	Иначе
		Если ТипЗнч(ЗначениеПрефиксы) = Тип("Строка") Тогда
			Префиксы = Новый Массив();
			Префиксы.Добавить(ЗначениеПрефиксы);
		Иначе
			Префиксы = ЗначениеПрефиксы;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Значение Из Префиксы Цикл
		ЭлементОтбораОрганизацияЕГАИС = Форма.Элементы.Найти(Значение + "ОрганизацияЕГАИС");
		Если ЭлементОтбораОрганизацияЕГАИС <> Неопределено Тогда
			ЭлементОтбораОрганизацияЕГАИС.СписокВыбора.Очистить();
		КонецЕсли;
		
		ЭлементОтбораОрганизацииЕГАИС = Форма.Элементы.Найти(Значение + "ОрганизацииЕГАИС");
		Если ЭлементОтбораОрганизацииЕГАИС <> Неопределено Тогда
			ЭлементОтбораОрганизацииЕГАИС.СписокВыбора.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("КлючОбъекта", "Справочник.КлассификаторОрганизацийЕГАИС.Форма.ФормаВыбораСпискаОрганизаций");
	Выборка = ХранилищеНастроекДанныхФорм.Выбрать(ПараметрыОтбора);
	Пока Выборка.Следующий() Цикл
		
		Данные = Новый Массив;
		Значение = Выборка.Настройки.Получить("ТаблицаОрганизацииЕГАИС");
		Если Значение <> Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Выбрана", Истина);
			НайденныеСтроки = Значение.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
				Данные.Добавить(СтрокаТЧ.ОрганизацияЕГАИС);
			КонецЦикла;
			
			Для Каждого Значение Из Префиксы Цикл
				ЭлементОтбораОрганизацияЕГАИС = Форма.Элементы.Найти(Значение + "ОрганизацияЕГАИС");
				Если ЭлементОтбораОрганизацияЕГАИС <> Неопределено Тогда
					ЭлементОтбораОрганизацияЕГАИС.СписокВыбора.Добавить(Данные, СтрСоединить(Данные, "; "));
				КонецЕсли;
		
				ЭлементОтбораОрганизацииЕГАИС = Форма.Элементы.Найти(Значение + "ОрганизацииЕГАИС");
				Если ЭлементОтбораОрганизацииЕГАИС <> Неопределено Тогда
					ЭлементОтбораОрганизацииЕГАИС.СписокВыбора.Добавить(Данные, СтрСоединить(Данные, "; "));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияЕГАИСКлиентСервер.НастроитьОтборПоОрганизацииЕГАИС(Форма, Форма.ОрганизацииЕГАИС, Неопределено, Префиксы);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборДальнейшиеДействия

// Формирует массив дальнейших действий, которые не отображаются при выводе статуса обмена с ЕГАИС в форме документа.
// 
// Возвращаемое значение:
//  Массив - содержит неотображаемые дальнейшие действия.
//
Функция НеотображаемыеВДокументахДальнейшиеДействия() Экспорт
	
	Действия = Новый Массив;
	
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеОстатков);
	Действия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	
	Возврат Действия;
	
КонецФункции

// Заполняет список дальнейших действий для быстрого отбора динамического списка "Дальнейшее действие"
//
// Параметры:
//  СписокВыбора         - СписокЗначений - формируемый список значений.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура ЗаполнитьСписокВыбораДальнейшееДействие(СписокВыбора, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("ВсеТребующиеДействия", НСтр("ru='Все требующие действия'"));
	СписокВыбора.Добавить("ВсеТребующиеОжидания", НСтр("ru='Все требующие ожидания'"));
	СписокВыбора.Добавить("ВсеТребующиеДействияИлиОжидания", НСтр("ru='Все требующие действия или ожидания'"));
	
	Для Каждого Значение Из ВсеТребующиеДействия Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Значение Из ВсеТребующиеОжидания Цикл
		СписокВыбора.Добавить(Значение);
	КонецЦикла;
	
	СписокВыбора.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	
КонецПроцедуры

// Устанавливает отбор в динамическом списке по полю "Дальнейшее действие".
//
// Параметры:
//  ДинамическийСписок     - ДинамическийСписок - список, в котором устанавливается отбор.
//  ДальнейшееДействиеЕГАИС - Перечисление.ДальнейшееДействиеЕГАИС, Строка - значение устанавливаемого отбора.
//  ВсеТребующиеДействия - Массив - действия, которые необходимо выполнить пользователю.
//  ВсеТребующиеОжидания - Массив - действия, выполнения которых ожидает пользователь.
//
Процедура УстановитьОтборПоДальнейшемуДействию(ДинамическийСписок, ДальнейшееДействие, ВсеТребующиеДействия, ВсеТребующиеОжидания) Экспорт
	
	ИмяПоля = "ДальнейшееДействиеЕГАИС1";
	
	Если ДальнейшееДействие = "ВсеТребующиеДействия" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеДействия, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеОжидания" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли ДальнейшееДействие = "ВсеТребующиеДействияИлиОжидания" Тогда
		
		ВсеТребующиеДействияИлиОжидания = Новый Массив;
		Для Каждого Элемент Из ВсеТребующиеДействия Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из ВсеТребующиеОжидания Цикл
			ВсеТребующиеДействияИлиОжидания.Добавить(Элемент);
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ВсеТребующиеДействияИлиОжидания, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ДинамическийСписок, ИмяПоля, ДальнейшееДействие, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ДальнейшееДействие));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Проверить наличие движений в зависимости от статусов.
//
// Параметры:
//  СтатусыДвижений - Массив - Статусы.
//  НовыйСтатус - ПеречислениеСсылка - Новый статус.
//  ПредыдущийСтатус - ПеречислениеСсылка - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Истина, если движения есть.
//
Функция ЕстьДвижения(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат СтатусыДвижений.Найти(ПредыдущийСтатус) <> Неопределено
		И СтатусыДвижений.Найти(НовыйСтатус) <> Неопределено;
	
КонецФункции

// Проверить отсутствие движений в зависимости от статусов.
//
// Параметры:
//  СтатусыДвижений - Массив - Статусы.
//  НовыйСтатус - ПеречислениеСсылка - Новый статус.
//  ПредыдущийСтатус - ПеречислениеСсылка - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Истина, если движений нет.
//
Функция НетДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат СтатусыДвижений.Найти(ПредыдущийСтатус) = Неопределено
		И СтатусыДвижений.Найти(НовыйСтатус) = Неопределено;
	
КонецФункции

// Рассчитать необходимость обновления движений в зависимости от статуса.
//
// Параметры:
//  СтатусыДвижений - Массив - Статусы.
//  НовыйСтатус - ПеречислениеСсылка - Новый статус.
//  ПредыдущийСтатус - ПеречислениеСсылка - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость обновления движений.
//
Функция СтатусТребуетОбновленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат СтатусТребуетДобавленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус)
	    Или СтатусТребуетУдаленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус);
	
КонецФункции

// Рассчитать необходимость добавления движений в зависимости от статуса.
//
// Параметры:
//  СтатусыДвижений - Массив - Статусы.
//  НовыйСтатус - ПеречислениеСсылка - Новый статус.
//  ПредыдущийСтатус - ПеречислениеСсылка - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость добавления движений.
//
Функция СтатусТребуетДобавленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат СтатусыДвижений.Найти(ПредыдущийСтатус) = Неопределено
	      И СтатусыДвижений.Найти(НовыйСтатус) <> Неопределено;
	
КонецФункции

// Рассчитать необходимость удаления движений в зависимости от статуса.
//
// Параметры:
//  СтатусыДвижений - Массив - Статусы.
//  НовыйСтатус - ПеречислениеСсылка - Новый статус.
//  ПредыдущийСтатус - ПеречислениеСсылка - Новый статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость удаления движений.
//
Функция СтатусТребуетУдаленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат СтатусыДвижений.Найти(ПредыдущийСтатус) <> Неопределено
	      И СтатусыДвижений.Найти(НовыйСтатус) = Неопределено;
	
КонецФункции

#Область СопоставлениеНоменклатурыЕГАИС

// Возвращает настройки по умолчанию (имя табличной части и имена колонок табличной части документов)
//   для записи в регистр "СопоставлениеНоменклатурыЕГАИС" из документа, в котором выполнено сопоставление данных.
//
// Параметры:
//   ИмяКолонкиАлкогольнаяПродукция - Строка - имя колонки алкогольной продукции в табличной части документа
// Возвращаемое значение:
//   Структура - параметры сопоставления документа и регистра соответствия:
//   * Колонки - Структура - имена колонок табличной части документа для записи регистра сопоставления.
//       Незаполненное значение означает что колонка не используется / не проверяется:
//    ** АлкогольнаяПродукция  - Строка - имя колонки (обязательно используется),
//    ** Номенклатура          - Строка - имя колонки (обязательно используется),
//    ** Характеристика        - Строка - имя колонки,
//    ** Серия                 - Строка - имя колонки,
//    ** ИдентификаторУпаковки - Строка - имя колонки,
//    ** Справка2              - Строка - имя колонки.
// * ИмяТабличнойЧасти - Строка - имя табличной части документа.
//
Функция НастройкиСопоставленияАлкогольнойПродукцииСНоменклатуройВДокументе(ИмяКолонкиАлкогольнаяПродукция = "АлкогольнаяПродукция") Экспорт
	
	Колонки = Новый Структура;
	Колонки.Вставить("АлкогольнаяПродукция",  ИмяКолонкиАлкогольнаяПродукция);
	Колонки.Вставить("Номенклатура",          "Номенклатура");
	
	Колонки.Вставить("Характеристика",        "Характеристика");
	Колонки.Вставить("Серия",                 "Серия");
	Колонки.Вставить("ИдентификаторУпаковки", "ИдентификаторУпаковки");
	Колонки.Вставить("Справка2",              "Справка2");
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяТабличнойЧасти", "Товары");
	Результат.Вставить("Колонки",           Колонки);
	
	Возврат Результат;
	
КонецФункции

// Заполняет регистр соответствия номенклатуры и алкогольной продукции для дальнейшего использования.
//
// Параметры:
//  Объект - ДокументОбъект - Объект в котором сопоставляется номенклатура.
//  НастройкиСопоставления - (См. НастройкиСопоставленияАлкогольнойПродукцииСНоменклатуройВДокументе)
//
Процедура СопоставитьАлкогольнуюПродукциюСНоменклатурой(Объект, НастройкиСопоставления = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(НастройкиСопоставления) <> Тип("Структура") Тогда
		НастройкиСопоставления = НастройкиСопоставленияАлкогольнойПродукцииСНоменклатуройВДокументе();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Т.Справка2 КАК Справка2
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия,
	|	Таблица.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	Таблица.Справка2 КАК Справка2,
	|	Сопоставлено.АлкогольнаяПродукция КАК Сопоставлено,
	|	МАКСИМУМ(ЕСТЬNULL(Позиций.Порядок, 1)) + 1 КАК Порядок
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		И Сопоставлено.Характеристика = Таблица.Характеристика
	|		И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		И Сопоставлено.Справка2 = Таблица.Справка2
	|		И Сопоставлено.Серия = Таблица.Серия
	|		И Сопоставлено.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Позиций
	|		ПО Позиций.Номенклатура = Таблица.Номенклатура
	|		И Позиций.Характеристика = Таблица.Характеристика
	|		И Позиций.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция
	|		И Позиций.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяНоменклатура
	|	И Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Серия,
	|	Таблица.ИдентификаторУпаковки,
	|	Таблица.Справка2,
	|	Сопоставлено.АлкогольнаяПродукция
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	&ПустаяСерия,
	|	Таблица.ИдентификаторУпаковки,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка),
	|	Сопоставлено.АлкогольнаяПродукция,
	|	1
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Сопоставлено
	|		ПО Сопоставлено.Номенклатура = Таблица.Номенклатура
	|		И Сопоставлено.Характеристика = Таблица.Характеристика
	|		И Сопоставлено.ИдентификаторУпаковки = Таблица.ИдентификаторУпаковки
	|		И Сопоставлено.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|		И Сопоставлено.Серия = &ПустаяСерия
	|		И Сопоставлено.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция
	|ГДЕ
	|	Таблица.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И Таблица.Номенклатура <> &ПустаяНоменклатура
	|	И Сопоставлено.АлкогольнаяПродукция ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.ИдентификаторУпаковки,
	|	Сопоставлено.АлкогольнаяПродукция");
	
	МассивКолонкиДляВыгрузки = Новый Массив;
	МассивКолонокДляДополнения = Новый Массив;
	КолонкиТабличнойЧасти = Объект[НастройкиСопоставления.ИмяТабличнойЧасти].Выгрузить(Новый Массив).Колонки;
	Для Каждого КлючИЗначение Из НастройкиСопоставления.Колонки Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) И КолонкиТабличнойЧасти.Найти(КлючИЗначение.Значение)<>Неопределено Тогда
			МассивКолонкиДляВыгрузки.Добавить(КлючИЗначение.Значение);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Т."+КлючИЗначение.Ключ, "Т."+КлючИЗначение.Значение);
		Иначе
			МассивКолонокДляДополнения.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	КолонкиДляВыгрузки = СтрСоединить(МассивКолонкиДляВыгрузки, ",");
	
	Данные = Объект[НастройкиСопоставления.ИмяТабличнойЧасти].Выгрузить(, КолонкиДляВыгрузки);
	
	Если МассивКолонокДляДополнения.Найти("Характеристика")<>Неопределено Тогда
		Данные.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	КонецЕсли;
	Если МассивКолонокДляДополнения.Найти("Серия")<>Неопределено Тогда
		Данные.Колонки.Добавить("Серия", Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	КонецЕсли;
	Если МассивКолонокДляДополнения.Найти("ИдентификаторУпаковки")<>Неопределено Тогда
		Данные.Колонки.Добавить("ИдентификаторУпаковки", Метаданные.ОпределяемыеТипы.СтрокаЕГАИС.Тип);
	КонецЕсли;
	Если МассивКолонокДляДополнения.Найти("Справка2")<>Неопределено Тогда
		Данные.Колонки.Добавить("Справка2", Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Таблица", Данные);
	Запрос.УстановитьПараметр("ПустаяНоменклатура"  ,  ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустаяСерия"  ,         ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
		НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
		НаборЗаписей.Отбор.Серия.Установить(Выборка.Серия, Истина);
		НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
		НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
		НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(НоваяЗапись, РегистрыСведений.СоответствиеНоменклатурыЕГАИС);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяЗапись, ПараметрыУказанияСерий);
		
		// Требуется повторная инициализация поля (серия соответствия может быть сброшена заполнением статуса)
		НоваяЗапись.Серия = Выборка.Серия;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			
			ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
			                         |%1'");
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(ТекстОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
			
			ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				СтрШаблон(ТекстОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
		КонецПопытки;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Сворачивает остатки по сериям и справкам 2 регистра соответствие номенклатуры ЕГАИС
//
Процедура СверткаРегистраСоответствиеНоменклатурыЕГАИС() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СверткаРегистраСоответствиеНоменклатурыЕГАИС);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.Справка2 КАК Справка2,
	|	ОстаткиАлкогольнойПродукцииЕГАИСОстатки.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС.Остатки(, ) КАК ОстаткиАлкогольнойПродукцииЕГАИСОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки КАК ИдентификаторУпаковки,
	|	СоответствиеНоменклатурыЕГАИС.Справка2 КАК Справка2,
	|	МИНИМУМ(СоответствиеНоменклатурыЕГАИС.Порядок) КАК Порядок
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОстатки КАК ВТОстатки
	|		ПО СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = ВТОстатки.АлкогольнаяПродукция
	|			И СоответствиеНоменклатурыЕГАИС.Справка2 = ВТОстатки.Справка2
	|ГДЕ
	|	СоответствиеНоменклатурыЕГАИС.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|	И ВТОстатки.Справка2 ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.Справка2,
	|	СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки
	|УПОРЯДОЧИТЬ ПО
	|	СоответствиеНоменклатурыЕГАИС.Справка2,
	|	МИНИМУМ(СоответствиеНоменклатурыЕГАИС.Порядок) ВОЗР
	|;";
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ Результат.Пустой() Тогда
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Свертка регистра Соответствие номенклатуры ЕГАИС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Начато регламентное задание ""Свертка регистра Соответствие номенклатуры ЕГАИС"".'"));
		
		Выборка = Результат.Выбрать();
		ТекСправка2 = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			
			Если ТекСправка2 = Выборка.Справка2 Тогда
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
			НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
			НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
			НаборЗаписей.Отбор.Справка2.Установить(Выборка.Справка2, Истина);
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				
				ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
				                         |%1'");
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(ТекстОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
				
				ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					СтрШаблон(ТекстОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				
			КонецПопытки;
			
			НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура, Истина);
			НаборЗаписей.Отбор.Характеристика.Установить(Выборка.Характеристика, Истина);
			НаборЗаписей.Отбор.АлкогольнаяПродукция.Установить(Выборка.АлкогольнаяПродукция, Истина);
			НаборЗаписей.Отбор.ИдентификаторУпаковки.Установить(Выборка.ИдентификаторУпаковки, Истина);
			НаборЗаписей.Отбор.Справка2.Установить(Справочники.Справки2ЕГАИС.ПустаяСсылка(), Истина);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Номенклатура          = Выборка.Номенклатура;
			НоваяЗапись.Характеристика        = Выборка.Характеристика;
			НоваяЗапись.АлкогольнаяПродукция  = Выборка.АлкогольнаяПродукция;
			НоваяЗапись.ИдентификаторУпаковки = Выборка.ИдентификаторУпаковки;
			НоваяЗапись.Порядок               = Выборка.Порядок;
			
			ТекСправка2 = Выборка.Справка2;
			
			Попытка
				НаборЗаписей.Записать();
			Исключение
				
				ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры произошла ошибка:
				                         |%1'");
				
				ОбщегоНазначения.СообщитьПользователю(
					СтрШаблон(ТекстОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
				
				ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					СтрШаблон(ТекстОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				
			КонецПопытки;
			
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Свертка регистра Соответствие номенклатуры ЕГАИС'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,,,
			НСтр("ru = 'Завершено регламентное задание ""Свертка регистра Соответствие номенклатуры ЕГАИС"".'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СоответствиеАлкогольнойПродукции(КодыАлкогольнойПродукции) Экспорт
	
	АлкогольнаяПродукция = Новый Соответствие;
	
	Если КодыАлкогольнойПродукции.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка КАК Ссылка,
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Код    КАК Код
		|ИЗ
		|	Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
		|ГДЕ
		|	КлассификаторАлкогольнойПродукцииЕГАИС.Код В(&КодыАлкогольнойПродукции)");
		Запрос.УстановитьПараметр("КодыАлкогольнойПродукции", КодыАлкогольнойПродукции);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			АлкогольнаяПродукция.Вставить(Выборка.Код, Выборка.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат АлкогольнаяПродукция;
	
КонецФункции

#Область ТиповыеПредставления

// Получить представление валюты регламентированного учета.
// 
// Возвращаемое значение:
//  Строка - Представление валюты.
//
Функция ПредставлениеВалютыРегламентированногоУчета() Экспорт
	
	Результат = "";
	ИнтеграцияЕГАИСПереопределяемый.ПредставлениеВалютыРегламентированногоУчета(Результат);
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	Возврат;
КонецПроцедуры

// Создает структуру входящих значений функции ЗаполнитьСгенерироватьСерии
//
// Возвращаемое значение:
//   Структура - Структура с необходимыми свойствами
//
Функция КонтекстЗаполненияСерий() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Объект");
	Результат.Вставить("Товары");
	Результат.Вставить("МассивСтрок");
	Результат.Вставить("ЗаполнятьБезЗапросаСправок");
	Результат.Вставить("СобственныйТорговыйОбъектЗначениеПоУмолчанию");
	Результат.Вставить("ПараметрыУказанияСерий");
	Результат.Вставить("СтруктураДействий", Новый Структура);
	Возврат Результат;
	
КонецФункции

// Заполняет список значений идентификаторов организаций и их представлений, в формате
// 
// Параметры: СписокИдентификаторовОрганизации - СписокЗначений - заполняемый список идентификаторов
//  ВключаяДату - Дата - В состав идентификатора может быть включено представление даты маркировки.
//  ТолькоКодФСРАР - Булево - получение идентификатора только по коду ФСРАР
// 
// Возвращаемое значение:
//  СписокЗначений Из Строка - Идентификаторы организации:
//   * Значение - Строка - Идентификатор организации для генерации штрихкода, содержащий символы цифр,
//   * Представление - Строка - Представление идентификатора для отображения пользователю.
Функция ИдентификаторыОрганизации(ВключаяДату, ТолькоКодФСРАР) Экспорт
	
	СписокИдентификаторовОрганизации = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК Порядок,
		|	Классификатор.ИНН КАК ИдентификаторОрганизации,
		|	&ТипИдентификатораИНН КАК ТипИдентификатора
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Классификатор
		|		ПО Классификатор.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
		|ГДЕ
		|	НЕ Классификатор.ИНН = """"
		|	И &ТолькоКодФСРАР = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	НастройкиОбменаЕГАИС.ИдентификаторФСРАР,
		|	&ТипИдентификатораКодФСРАР
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок,
		|	ТипИдентификатора";
	
	Запрос.УстановитьПараметр("ТолькоКодФСРАР", ТолькоКодФСРАР);
	Если ВключаяДату = Неопределено Тогда
		Запрос.УстановитьПараметр("ТипИдентификатораИНН",
		                          НСтр("ru = 'ИНН'"));
		
		Запрос.УстановитьПараметр("ТипИдентификатораКодФСРАР",
		                          НСтр("ru = 'Код ФСРАР'"));
	Иначе
		Запрос.УстановитьПараметр("ТипИдентификатораИНН",
		                          НСтр("ru = 'ИНН + дата'"));
		
		Запрос.УстановитьПараметр("ТипИдентификатораКодФСРАР",
		                          НСтр("ru = 'Код ФСРАР + дата'"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ШаблонПредставления = НСтр("ru = '%1: %2'");
	
	Пока Выборка.Следующий() Цикл
		
		Если ВключаяДату = Неопределено Тогда
			ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации;
		Иначе
			ИдентификаторОрганизации = Выборка.ИдентификаторОрганизации + Формат(ВключаяДату, "ДФ=yyMMdd"); // Установленный формат даты в GS1-128
		КонецЕсли;
		
		ПредставлениеИдентификатора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонПредставления,
			Выборка.ТипИдентификатора,
			ИдентификаторОрганизации);
		
		СписокИдентификаторовОрганизации.Добавить(ИдентификаторОрганизации, ПредставлениеИдентификатора);
	КонецЦикла;
	
	Возврат СписокИдентификаторовОрганизации;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Настройки

Функция ТекстЗапросаОрганизацииЕГАИСИспользующиеРегистр2() Экспорт
	
	ИмяВременнойТаблицы = "РозничныеОрганизацииЕГАИС";
	ИмяПоляОрганизация = "Ссылка";
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизацииЕГАИС.Ссылка КАК %1
		|ПОМЕСТИТЬ %2
		|ИЗ
		|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК ОрганизацииЕГАИС
		|		ПО ОрганизацииЕГАИС.Код = НастройкиОбменаЕГАИС.ИдентификаторФСРАР
		|",
		ИмяПоляОрганизация,
		ИмяВременнойТаблицы);
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаОрганизацииЕГАИСИспользующиеРегистр2(ТекстЗапроса, ИмяВременнойТаблицы, ИмяПоляОрганизация);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция СостояниеОбмена(ОрганизацииЕГАИС) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО (РАЗЛИЧНЫЕ ОчередьПередачиДанныхЕГАИС.Сообщение), 0) КАК КоличествоСообщений
	|ИЗ
	|	РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК ОчередьПередачиДанныхЕГАИС
	|ГДЕ
	|	&БезОтбора ИЛИ ОчередьПередачиДанныхЕГАИС.ОрганизацияЕГАИС В(&ОрганизацииЕГАИС)
	|ИМЕЮЩИЕ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОчередьПередачиДанныхЕГАИС.Сообщение), 0) > 0
	|",
	"ЕстьСообщенияОжидающиеОтправки");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацииЕГАИС", ОрганизацииЕГАИС);
	Запрос.УстановитьПараметр("БезОтбора",        ОрганизацииЕГАИС.Количество() = 0);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат РезультатыЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьВходящиеДокументы(ПараметрыОбработки, ВозвращаемоеЗначение, ОписаниеЗамера, ИдентификаторВладельца) Экспорт
	
	Для Каждого ДанныеДокументаТТН Из ПараметрыОбработки.ВходящиеТТН Цикл
			
		Если ОбщегоНазначения.РежимОтладки() Тогда
			
			ИдентификаторТТН = Строка(ДанныеДокументаТТН.Объект.Identity);
			
			Если СтрНачинаетсяС(НРег(ИдентификаторТТН), ОбщегоНазначенияЕГАИС.ПрефиксИдентификатораРежимаОтладкиОбщий())
				И СтрНайти(НРег(ИдентификаторТТН), ОбщегоНазначенияЕГАИС.ПрефиксИдентификатораРежимаОтладки()) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеДокументаУведомлениеОРегистрации = НайтиУведомлениеОРегистрацииСправок(
			ДанныеДокументаТТН,
			ПараметрыОбработки.УведомленияОРегистрации);
		
		Если ДанныеДокументаУведомлениеОРегистрации = Неопределено Тогда
			// Уведомление еще не поступило в УТМ
			Продолжить;
		КонецЕсли;
		
		ДанныеДокументаИсторияПоСправкам2 = НайтиИсториюСправок2ПоТТН(
			ДанныеДокументаУведомлениеОРегистрации,
			ПараметрыОбработки.ИсторияСправок2ПоТТН);
		
		Если ДанныеДокументаИсторияПоСправкам2 <> Неопределено Тогда
			ПараметрыОбработки.ИсторияСправок2ПоТТН.Удалить(
				ПараметрыОбработки.ИсторияСправок2ПоТТН.Найти(ДанныеДокументаИсторияПоСправкам2));
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура("WbRegID", ИдентификаторТТН);
		НайденныеВходящиеТранспортныеНакладные = ПараметрыОбработки.ВходящиеТранспортныеНакладные.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеВходящиеТранспортныеНакладные.Количество() = 1 Тогда
			
			ДанныеДокументаТранспортнаяНакладная = НайденныеВходящиеТранспортныеНакладные[0];
			
			ПараметрыОбработки.ВходящиеТранспортныеНакладные.Удалить(
				ПараметрыОбработки.ВходящиеТранспортныеНакладные.Найти(ДанныеДокументаТранспортнаяНакладная));
			
		КонецЕсли;
		
		ДополнительныеДанные = Новый Структура;
		ДополнительныеДанные.Вставить("ДанныеДокументаТТН",                     ДанныеДокументаТТН);
		ДополнительныеДанные.Вставить("ДанныеДокументаУведомлениеОРегистрации", ДанныеДокументаУведомлениеОРегистрации);
		ДополнительныеДанные.Вставить("ДанныеДокументаИсторияПоСправкам2",      ДанныеДокументаИсторияПоСправкам2);
		ДополнительныеДанные.Вставить("ДанныеДокументаТранспортнаяНакладная",   ДанныеДокументаТранспортнаяНакладная);
		
		НачатьТранзакцию();
		
		Попытка
			
			//@skip-check query-in-loop
			ДанныеЗагруженногоДокумента = ЗагрузитьТТНВходящуюЕГАИС(
				ПараметрыОбработки.ОрганизацияЕГАИС, ДополнительныеДанные);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При загрузке документов (%1, %2) с типами (%3, %4) возникла ошибка:
				           |Текст ошибки: %5
				           |Текст XML см. в журнале регистрации.'"),
				ДанныеДокументаТТН.АдресЗапроса, ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса,
				ДанныеДокументаТТН.ТипЕГАИС,     ДанныеДокументаУведомлениеОРегистрации.ТипЕГАИС,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстОшибкиЖурналРегистрации = СтрШаблон(
				НСтр("ru = 'При загрузке документов (%1, %2) с типами (%3, %4) возникла ошибка:
				           |Текст ошибки: %5
				           |Текст сообщения XML документа %1:
				           |%6
				           |Текст сообщения XML документа %2:
				           |%7'"),
				ДанныеДокументаТТН.АдресЗапроса, ДанныеДокументаУведомлениеОРегистрации.АдресЗапроса,
				ДанныеДокументаТТН.ТипЕГАИС,     ДанныеДокументаУведомлениеОРегистрации.ТипЕГАИС,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				ДанныеДокументаТТН.ТекстXML,     ДанныеДокументаУведомлениеОРегистрации.ТекстXML);
			
			ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиЖурналРегистрации);
			
			ОбщегоНазначенияИС.СообщитьПользователюВФорму(ИдентификаторВладельца, ТекстОшибки);
			
		КонецПопытки;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ДанныеДокументаТТН.ТипЕГАИС);
		
		Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
			ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеДокумента Из ПараметрыОбработки.ИсторияСправок2ПоТТН Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			//@skip-check query-in-loop
			ДанныеЗагруженногоДокумента = ЗагрузитьИсториюСправок2ПоТТН(
				ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ПараметрыОбработки.ДополнительныеПараметры.ТекущийОбъект <> Неопределено Тогда
				ПараметрыОбработки.ДополнительныеПараметры.СтопЛист.Вставить(ПараметрыОбработки.ДополнительныеПараметры.ТекущийОбъект, Истина);
			КонецЕсли;
			
		КонецПопытки;
		
		Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
			ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
		КонецЕсли;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ДанныеДокумента.ТипЕГАИС);
		
	КонецЦикла;
	
	Для каждого ЭлементДанных Из ПараметрыОбработки.ВходящиеТранспортныеНакладные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			//@skip-check query-in-loop
			ДанныеЗагруженногоДокумента = ЗагрузитьВходящуюТранспортнуюНакладную(
				ЭлементДанных, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Если ПараметрыОбработки.ДополнительныеПараметры.ТекущийОбъект <> Неопределено Тогда
				ПараметрыОбработки.ДополнительныеПараметры.СтопЛист.Вставить(ПараметрыОбработки.ДополнительныеПараметры.ТекущийОбъект, Истина);
			КонецЕсли;
			
		КонецПопытки;
		
		Если ДанныеЗагруженногоДокумента <> Неопределено Тогда
			ВозвращаемоеЗначение.Изменения.Добавить(ДанныеЗагруженногоДокумента);
		КонецЕсли;
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(
			ОписаниеЗамера, 1, ДанныеДокумента.ТипЕГАИС);
		
	КонецЦикла;
		
КонецПроцедуры

Функция ОбработатьЭлементОчередиВходящихДокументов(ДокументыКЗагрузке, ОрганизацияЕГАИС, ЭлементОчереди, ПараметрыОбработки, ДополнительныеПараметры) Экспорт
	
	ДанныеДокумента = ЭлементОчереди.ДанныеДокумента;
	
	Если ПараметрыОбработки = Неопределено Тогда
		
		ВходящиеТранспортныеНакладные = Новый ТаблицаЗначений;
		ВходящиеТранспортныеНакладные.Колонки.Добавить("WBRegID", Метаданные.ОпределяемыеТипы.СтрокаЕГАИС.Тип);
		ВходящиеТранспортныеНакладные.Колонки.Добавить("ДатаКвитанции");
		ВходящиеТранспортныеНакладные.Колонки.Добавить("ДанныеДокумента");
		ВходящиеТранспортныеНакладные.Колонки.Добавить("ДополнительныеДанные");
		
		ПараметрыОбработки = Новый Структура();
		ПараметрыОбработки.Вставить("УведомленияОРегистрации",       Новый Массив);
		ПараметрыОбработки.Вставить("ВходящиеТТН",                   Новый Массив);
		ПараметрыОбработки.Вставить("ИсторияСправок2ПоТТН",          Новый Массив);
		ПараметрыОбработки.Вставить("ОрганизацияЕГАИС",              ОрганизацияЕГАИС);
		ПараметрыОбработки.Вставить("ДополнительныеПараметры",       ДополнительныеПараметры);
		ПараметрыОбработки.Вставить("ВходящиеТранспортныеНакладные", ВходящиеТранспортныеНакладные);
		
	КонецЕсли;
	
	Если ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияТТН Тогда
		
		Если ЗначениеЗаполнено(ДанныеДокумента.ИдентификаторЗапроса) Тогда
			ДанныеЗагруженногоДокумента = ЗагрузитьУведомлениеОРегистрацииДвиженияТТН(
				ЭлементОчереди.ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		Иначе
			ДанныеЗагруженногоДокумента = Неопределено;
			ПараметрыОбработки.УведомленияОРегистрации.Добавить(ДанныеДокумента);
		КонецЕсли;
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ТТН Тогда
		
		ДанныеЗагруженногоДокумента = Неопределено;
		ПараметрыОбработки.ВходящиеТТН.Добавить(ДанныеДокумента);
		
	ИначеЕсли ЭлементОчереди.ДополнительныеДанные <> Неопределено
		И ЭлементОчереди.ДополнительныеДанные.ТипДокумента = "ТранспортнаяНакладная" Тогда
		
		ДанныеЗагруженногоДокумента = Неопределено;
		НоваяСтрока = ПараметрыОбработки.ВходящиеТранспортныеНакладные.Добавить();
		НоваяСтрока.WbRegID              = ЭлементОчереди.ДополнительныеДанные.WbRegID;
		НоваяСтрока.ДополнительныеДанные = ЭлементОчереди.ДополнительныеДанные;
		НоваяСтрока.ДанныеДокумента      = ДанныеДокумента;
	
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИнформацияОбОрганизации Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаИнформацияОбОрганизации(
			ДанныеДокумента, ОрганизацияЕГАИС, ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьУведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве Тогда 
		
		ДанныеЗагруженногоДокумента = ЗагрузитьУведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.АктТТН Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьАктПоИсходящейТТНЕГАИС(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхождений Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьКвитанциюАктаРасхожденийТТН(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТН Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьКвитанциюЗапросаНаОтменуПроведенияТТН(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьЗапросНаОтменуПроведенияТТН(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция
		И ДанныеДокумента.Объект <> Неопределено
		И СтрНайти(ВРег(ДанныеДокумента.Объект.DocType), ВРег("Asiiu")) > 0 Тогда
		
		ДанныеЗагруженногоДокумента = ОбработатьКвитанциюАСИиУ(
			ДанныеДокумента,
			ПараметрыОбработки.ОрганизацияЕГАИС,
			ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.Квитанция Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьКвитанцию(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросАлкогольнойПродукции Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросАлкогольнойПродукции(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки1 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьСправку(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросСправки2 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьСправку(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре1 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОстатковВРегистре1(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре2 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОстатковВРегистре2(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросАкцизныхМарок Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросАкцизныхМарок(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияМеждуРегистрами Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаДвиженияМеждуРегистрами(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаДвиженияПоСправке2 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаДвиженияПоСправке2(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаНеобработанныеТТН Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаНеобработанныеТТН(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОбработанныеЧеки Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаОбработанныеЧеки(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре1 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре1(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре2 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре2(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре3 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаОстаткиВРегистре3(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаИсторияСправок2 Тогда
		
		ДанныеЗагруженногоДокумента = ЗагрузитьОтветНаЗапросОтчетаИсторияСправок2(
			ДанныеДокумента, ПараметрыОбработки.ОрганизацияЕГАИС, ПараметрыОбработки.ДополнительныеПараметры);
		
	ИначеЕсли ДанныеДокумента.Операция = Перечисления.ВидыДокументовЕГАИС.ИсторияСправок2ПоТТН Тогда
		
		ДанныеЗагруженногоДокумента = Неопределено;
		ПараметрыОбработки.ИсторияСправок2ПоТТН.Добавить(ДанныеДокумента);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Неизвестный тип загружаемого документа %1.'"), ДанныеДокумента.ТипЕГАИС);
		
	КонецЕсли;
	
	Возврат ДанныеЗагруженногоДокумента;
	
КонецФункции

#Область ФормированиеГиперссылок

Процедура ДобавитьВРезультат(Результат, Приоритет, ДобавляемоеЗначение)
	
	Если ДобавляемоеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение = Результат.Получить(Приоритет);
	Если Значение = Неопределено Тогда
		Значение = Новый Массив();
	КонецЕсли;
	Значение.Добавить(ДобавляемоеЗначение);
	
	Результат.Вставить(Приоритет, Значение);
	
КонецПроцедуры

#КонецОбласти

// Возвращает корневое пространство имен для документов ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Корневое пространство имен
Функция КорневоеПространствоИмен() Экспорт
	
	Возврат "http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01";
	
КонецФункции

// Формирует уникальный идентификатор для нового элемента справочника.
//
// Параметры:
//  Источник - СправочникОбъект - записываемый элемент справочника,
//  Отказ - Булево - признак отказа от записи.
//
Процедура СформироватьИдентификаторОбъектаРИБПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ СтандартныеПодсистемыПовтИсп.ИспользуетсяРИБ() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяСправочника = Источник.Метаданные().Имя;
	
	Если ИмяСправочника = "Справки1ЕГАИС"
		ИЛИ ИмяСправочника = "Справки2ЕГАИС" Тогда
		ИмяРеквизита = "РегистрационныйНомер";
		ПредставлениеРеквизита = Источник.Метаданные().Реквизиты.РегистрационныйНомер.Синоним;
	Иначе
		ИмяРеквизита = "Код";
		ПредставлениеРеквизита = Источник.Метаданные().СтандартныеРеквизиты.Код.Синоним;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		НовыйИдентификатор = Неопределено;
		
		Если ЗначениеЗаполнено(Источник[ИмяРеквизита]) Тогда
			НовыйИдентификатор = СформироватьУникальныйИдентификатор(Источник[ИмяРеквизита], ИмяСправочника);
		КонецЕсли;
		
		Если НовыйИдентификатор <> Неопределено Тогда
			НоваяСсылка = Справочники[ИмяСправочника].ПолучитьСсылку(НовыйИдентификатор);
			Если НЕ ПустаяСтрока(НоваяСсылка.ВерсияДанных) Тогда
				СтрокаСообщения = НСтр("ru='Значение ""%1"" поля ""%2"" не уникально'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Источник.Код, ПредставлениеРеквизита);
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;
			
			Источник.УстановитьСсылкуНового(НоваяСсылка);
		КонецЕсли;
	Иначе
		ПредыдущийКод = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, ИмяРеквизита);
		Если ПредыдущийКод <> Источник[ИмяРеквизита] Тогда
			СтрокаСообщения = НСтр("ru = 'Изменение реквизита ""%1"" для существующих элементов запрещено'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПредставлениеРеквизита);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует уникальный идентификатор из переданной строки добавлением лидирующих нулей.
//
Функция СформироватьУникальныйИдентификатор(ИсходнаяСтрока, ИмяСправочника)
	
	Префиксы = Новый Соответствие;
	Префиксы.Вставить("КлассификаторАлкогольнойПродукцииЕГАИС", "00");
	Префиксы.Вставить("КлассификаторОрганизацийЕГАИС"         , "01");
	Префиксы.Вставить("Справки1ЕГАИС"                         , "02");
	Префиксы.Вставить("Справки2ЕГАИС"                         , "03");
	Префиксы.Вставить("ВидыАлкогольнойПродукции"              , "04");
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
	ХешированиеДанных.Добавить(Префиксы[ИмяСправочника] + ИсходнаяСтрока);
	
	ХешСумма = Строка(ХешированиеДанных.ХешСумма);
	
	Строка32 = "";
	Для Сч = 1 По СтрДлина(ХешСумма) Цикл
		ТекСимвол = Сред(ХешСумма, Сч, 1);
		Если Найти("0123456789abcdef", НРег(ТекСимвол)) <> 0 Тогда
			Строка32 = Строка32 + ТекСимвол;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Строка32) < 32 Тогда
		Строка32 = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Строка32, 32, "0");
	КонецЕсли;
	
	СтрокаGUID = Лев(Строка32, 8)
		+ "-" + Сред(Строка32, 9, 4)
		+ "-" + Сред(Строка32, 13, 4)
		+ "-" + Сред(Строка32, 17, 4)
		+ "-" + Сред(Строка32, 21, 12);
	
	НовыйИдентификатор = Новый УникальныйИдентификатор(СтрокаGUID);
	
	Возврат НовыйИдентификатор;
	
КонецФункции

// Возвращает доступные параметры обновления статуса:
//   * ОбновлятьДвижения- Булево - Признак необходимости обновления движений документа.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция.
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ДокументОбъект - ДокументОбъект - Документ-объект.
//   * ИдентификаторЗапроса - Строка - Идентификатор запроса.
//   * ФорматОбмена - ПеречислениеСсылка.ФорматыОбменаЕГАИС - Формат обмена.
//
// Возвращаемое значение:
//  Структура - структура параметров обновления статуса.
//
Функция ПараметрыОбновленияСтатуса() Экспорт
	
	ПараметрыОбновленияСтатуса = Новый Структура;
	ПараметрыОбновленияСтатуса.Вставить("ОбновлятьДвижения", Истина);
	ПараметрыОбновленияСтатуса.Вставить("ОперацияКвитанции");
	ПараметрыОбновленияСтатуса.Вставить("ТекущееСостояние");
	ПараметрыОбновленияСтатуса.Вставить("СтатусОбработки");
	ПараметрыОбновленияСтатуса.Вставить("ДокументОбъект");
	ПараметрыОбновленияСтатуса.Вставить("ИдентификаторЗапроса");
	ПараметрыОбновленияСтатуса.Вставить("ФорматОбмена");
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

// Создает структуру возвращаемых значений функции ЗаполнитьСгенерироватьСерии
//
// Возвращаемое значение:
//   Структура - Структура с необходимыми свойствами
//
Функция РезультатЗаполненияСерий() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("АдресМассиваЗапросов", Неопределено);
	Результат.Вставить("ЗаполнениеЗавершено",  Ложь);
	Результат.Вставить("СписокОшибок",         Неопределено);
	Возврат Результат;
	
КонецФункции

// Возвращает режим записи документа.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект - Документ.
// 
// Возвращаемое значение:
//  РежимЗаписиДокумента - Режим записи документа.
//
Функция РежимЗаписи(ДокументОбъект)
	
	Возврат ?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
КонецФункции

// Возвращает новый идентификатор документа
//
// Параметры:
//  Ссылка   - ЛюбаяСсылка - Ссылка.
//  Постфикс - Строка - Максимум 3 символа.
// 
// Возвращаемое значение:
//  Строка - Идентификатор документа.
//
Функция НовыйИдентификаторДокумента(Ссылка = Неопределено, Постфикс = "") Экспорт
	
	Префикс = "";
	Если ОбщегоНазначения.РежимОтладки() Тогда
		Префикс = ОбщегоНазначенияЕГАИС.ПрефиксИдентификатораРежимаОтладки();
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		Возврат Префикс + ?(Постфикс = "", "", СокрЛП(Лев(Постфикс, 3)) + "-") + Строка(Новый УникальныйИдентификатор());
	Иначе
		Возврат Префикс + ?(Постфикс = "", "", СокрЛП(Лев(Постфикс, 3)) + "-") + Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
	
КонецФункции

// Возвращает необходимость перезаписи значения реквизита "ИдентификаторЕГАИС" документа
//
// Параметры:
//  ИмяДокумента - Строка - Имя метаданных документа.
// 
// Возвращаемое значение:
//  Булево - Необходимость перезаписи идентификатора ЕГАИС.
//
Функция ПерезаписатьИдентификаторЕГАИС(ИмяДокумента)
	
	ДокументыМеняющиеИдентификаторЕГАИС = Новый Массив();
	ДокументыМеняющиеИдентификаторЕГАИС.Добавить("АктПостановкиНаБалансЕГАИС");
	ДокументыМеняющиеИдентификаторЕГАИС.Добавить("АктСписанияЕГАИС");
	
	Возврат ДокументыМеняющиеИдентификаторЕГАИС.Найти(ИмяДокумента) <> Неопределено;
	
КонецФункции

// Помечает/снимает пометку удаления у приложенных файлов.
Процедура ПометитьНаУдалениеПрисоединенныеФайлыЕГАИС(Знач Источник, ДляОрганизацииЕГАИС = Ложь)
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Если ДляОрганизацииЕГАИС Тогда
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка,
			|	Файлы.Редактирует КАК Редактирует
			|ИЗ
			|	Справочник.ЕГАИСПрисоединенныеФайлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла = &Ссылка
			|	И Файлы.Документ = НЕОПРЕДЕЛЕНО";
	Иначе
		ТекстЗапроса =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Файлы.Ссылка КАК Ссылка,
			|	Файлы.Редактирует КАК Редактирует
			|ИЗ
			|	Справочник.ЕГАИСПрисоединенныеФайлы КАК Файлы
			|ГДЕ
			|	Файлы.Документ = &Ссылка";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Источник.ПометкаУдаления И ЗначениеЗаполнено(Выборка.Редактирует) Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '""%1"" не может быть удален,
				           |т.к. содержит присоединенный файл ""%2"",
				           |занятый для редактирования.'"),
				Строка(Источник.Ссылка),
				Строка(Выборка.Ссылка));
		КонецЕсли;
		ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает видимость команды "Оформить" в формах списка документов.
//
Процедура УстановитьВидимостьКомандыОформленияДокумента(Форма, МетаданныеДокумента, ИмяЭлемента) Экспорт
	
	Если НЕ ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
		Кнопка = Форма.Элементы.Найти(ИмяЭлемента);
		Если Кнопка <> Неопределено Тогда
			Кнопка.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиОбновления

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыДокументовЕГАИС(Параметры) Экспорт
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, "РегистрСведений.УдалитьПротоколОбменаЕГАИС")
		ИЛИ ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, "Справочник.ЕГАИСПрисоединенныеФайлы") Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметры.ВыбиратьПорциями = Ложь;
	
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(
		Параметры.Очередь,
		"РегистрСведений.СтатусыДокументовЕГАИС",
		МенеджерВременныхТаблиц, ДополнительныеПараметры);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 500
	|	ДанныеДляОбработки.Документ КАК Документ
	|ПОМЕСТИТЬ втДокументыДляОбработки
	|ИЗ
	|	&ВТДанныеДляОбработки КАК ДанныеДляОбработки
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДляОбработки.Документ.Дата УБЫВ
	|;
	|
	|/////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ДанныеДокумента.ВидДокумента           КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктПостановкиНаБалансЕГАИС КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.АктПостановкиНаБалансЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ДанныеДокумента.ВидДокумента           КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктСписанияЕГАИС КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.АктСписанияЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ВозвратИзРегистра2) КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратИзРегистра2ЕГАИС КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.ВозвратИзРегистра2ЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ДанныеДокумента.ВидДокумента           КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОстаткиЕГАИС КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.ОстаткиЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ПередачаВРегистр2) КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПередачаВРегистр2ЕГАИС КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.ПередачаВРегистр2ЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ТТН) КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНВходящаяЕГАИС КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.ТТНВходящаяЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ТТН) КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТТНИсходящаяЕГАИС КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.ТТНИсходящаяЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЧекККМ) КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекЕГАИС КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.ЧекЕГАИС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Документ  КАК Документ,
	|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных,
	|	ВЫБОР КОГДА ДанныеДокумента.Проведен ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ОтметитьВыполнениеОбработки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЧекККМ) КАК Операция,
	|	ДанныеДокумента.УдалитьСтатусОбработки КАК УдалитьСтатусОбработки
	|ИЗ
	|	втДокументыДляОбработки КАК ДанныеДляОбработки
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекЕГАИСВозврат КАК ДанныеДокумента
	|	ПО ДанныеДокумента.Ссылка = ДанныеДляОбработки.Документ
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаблокировано КАК ДокументЗаблокировано
	|	ПО ДокументЗаблокировано.Ссылка = ДанныеДокумента.Ссылка
	|	
	|ГДЕ
	|	ДокументЗаблокировано.Ссылка ЕСТЬ NULL
	|	И ДанныеДляОбработки.Документ ССЫЛКА Документ.ЧекЕГАИСВозврат
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВТДанныеДляОбработки", Результат.ИмяВременнойТаблицы);
	
	ТаблицыДляЧтения = Новый Массив;
	ТаблицыДляЧтения.Добавить("Документ.АктПостановкиНаБалансЕГАИС");
	ТаблицыДляЧтения.Добавить("Документ.АктСписанияЕГАИС");
	ТаблицыДляЧтения.Добавить("Документ.ВозвратИзРегистра2ЕГАИС");
	ТаблицыДляЧтения.Добавить("Документ.ОстаткиЕГАИС");
	ТаблицыДляЧтения.Добавить("Документ.ПередачаВРегистр2ЕГАИС");
	ТаблицыДляЧтения.Добавить("Документ.ТТНВходящаяЕГАИС");
	ТаблицыДляЧтения.Добавить("Документ.ТТНИсходящаяЕГАИС");
	ТаблицыДляЧтения.Добавить("Документ.ЧекЕГАИС");
	ТаблицыДляЧтения.Добавить("Документ.ЧекЕГАИСВозврат");
	
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
		Параметры.Очередь,
		ТаблицыДляЧтения,
		МенеджерВременныхТаблиц);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументСсылка = Выборка.Документ;
		
		ОтметитьВыполнениеОбработки = Выборка.ОтметитьВыполнениеОбработки;
		
		НачатьТранзакцию();
		
		Попытка
			
			Если ОтметитьВыполнениеОбработки Тогда
				
				НаборЗаписей = РегистрыСведений.СтатусыДокументовЕГАИС.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				
				ЗафиксироватьТранзакцию();
				Продолжить;
				
			КонецЕсли;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СтатусыДокументовЕГАИС");
			ЭлементБлокировки.УстановитьЗначение("Документ", ДокументСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Выборка.Документ.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			ИменаРеквизитов = "ВерсияДанных";
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
				ИменаРеквизитов = ИменаРеквизитов + ",СтатусПроверкиИПодбора";
			КонецЕсли;
			
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, ИменаРеквизитов);
			Если ЗначенияРеквизитов.ВерсияДанных <> Выборка.ВерсияДанных Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ТолькоПересчитатьСтатус = Ложь;
			
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
				Если ЗначенияРеквизитов.СтатусПроверкиИПодбора.Пустая() Тогда
					СтруктураОтбора = Новый Структура("Документ", ДокументСсылка);
					ЗначенияСтатуса = РегистрыСведений.СтатусыДокументовЕГАИС.Получить(СтруктураОтбора);
					
					Если ЗначенияСтатуса.Статус = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС Тогда
						ТолькоПересчитатьСтатус = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ТолькоПересчитатьСтатус Тогда
				НаборЗаписей = ОбменДаннымиЕГАИС.РассчитатьСтатус(ДокументСсылка,, Истина);
			Иначе
				НаборЗаписей = РассчитатьНаборЗаписей(Выборка);
			КонецЕсли;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать статус документа ""%ИмяДокумента%""
			                            |по причине %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяДокумента%", Выборка.Документ.Метаданные().ПолноеИмя());
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         Выборка.Документ.Метаданные(),
			                         Выборка.Документ,
			                         ТекстСообщения);
			
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, "РегистрСведений.СтатусыДокументовЕГАИС");
	
КонецПроцедуры

Функция РассчитатьНаборЗаписей(Выборка)
	
	КвитанцияПолученЕГАИС  = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС;
	КвитанцияПроведенЕГАИС = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС;
	ПереданоВУТМ           = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	ОбрабатываетсяЕГАИС    = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ОбрабатываетсяЕГАИС;
	ДокументПроведен       = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументПроведен;
	ДокументРаспроведен    = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументРаспроведен;
	Ошибка                 = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка;
	
	ПолноеИмя = Выборка.Документ.Метаданные().ПолноеИмя();
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
	ЕстьЗаписиВПротоколеОбмена = Неопределено;
	НаборЗаписей = ОбменДаннымиЕГАИС.РассчитатьСтатус(Выборка.Документ, ЕстьЗаписиВПротоколеОбмена, Истина);
	ЗаписьНабора = НаборЗаписей[0];
	
	Если Не ЕстьЗаписиВПротоколеОбмена Тогда
		
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
			
			Статусы = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ПроведенЕГАИС Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Выборка.Операция,
					ДокументПроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				Если Выборка.Операция = Перечисления.ВидыДокументовЕГАИС.АктПостановкиНаБалансВРегистр1 Тогда
					ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
						ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
						Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияАктаПостановкиНаБаланс);
					РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				КонецЕсли;
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОшибкаПередачи Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияОшибка Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Отменен Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаПостановкиНаБаланс,
					ДокументРаспроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Черновик
				Или Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
			
			Статусы = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ПроведенЕГАИС Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Выборка.Операция,
					ДокументПроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОшибкаПередачи Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияОшибка Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Отменен Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияАктаСписания,
					ДокументРаспроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Черновик
				Или Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
			
			Статусы = Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ПроведенЕГАИС Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Выборка.Операция,
					ДокументПроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОшибкаПередачи Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Черновик
				Или Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС") Тогда
			
			Статусы = Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ПроведенЕГАИС Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Выборка.Операция,
					ДокументПроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОшибкаПередачи Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Черновик
				Или Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ОстаткиЕГАИС") Тогда
			
			Статусы = Перечисления.СтатусыОбработкиОстатковЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ПолученыОстатки Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				Если Выборка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1 Тогда
					ОбрабатываемаяОперация = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре1;
				ИначеЕсли Выборка.Операция = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2 Тогда
					ОбрабатываемаяОперация = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре2;
				Иначе
					ОбрабатываемаяОперация = Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОстатковВРегистре1;
				КонецЕсли;
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					ОбрабатываемаяОперация);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОшибкаПередачи Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Черновик
				Или Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ЧекЕГАИС") Тогда
			
			Статусы = Перечисления.СтатусыИнформированияЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОшибкаПередачи Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Черновик
				Или Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
			
			Статусы = Перечисления.СтатусыИнформированияЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОшибкаПередачи Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Черновик
				Или Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
			
			Статусы = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОбрабатываетсяЕГАИС Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОшибкаПередачи Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктОтказаПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктОтказаОбрабатываетсяЕГАИС Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктОтказаОшибка Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Выборка.Операция, ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Выборка.Операция,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийПринят Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийПодтверждениеПереданВУТМ Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийПодтверждениеОшибка Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийОтказПереданВУТМ Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийОтказОбрабатываетсяЕГАИС Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийОтказОшибка Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияПринят Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияПодтверждениеПереданВУТМ Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияПодтверждениеОбрабатываетсяЕГАИС Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияПодтверждениеОшибка Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНПодтверждение,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияОтказПереданВУТМ Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияОтказОбрабатываетсяЕГАИС Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияОтказОшибка Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияЗапросаНаОтменуПроведенияТТНОтказ,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Подтвержден Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ПодтвержденСРасхождениями Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийПодтверждение,
					ДокументПроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОтмененКлиентом Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Черновик
				Или Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			
			Статусы = Перечисления.СтатусыОбработкиТТНВходящейЕГАИС;
			
			Если Выборка.УдалитьСтатусОбработки = Статусы.ПринятИзЕГАИС Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктПодтвержденияПереданВУТМ Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктПодтвержденияОшибка Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийПереданВУТМ Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийОбрабатываетсяЕГАИС Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктРасхожденийОшибка Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктОтказаПереданВУТМ Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктОтказаОбрабатываетсяЕГАИС Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.АктОтказаОшибка Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияПереданВУТМ Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ЗапросНаОтменуПроведенияОшибка Тогда
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияТТН,
					Ошибка);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Подтвержден Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНПодтверждение,
				ДокументПроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ПодтвержденСРасхождениями Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ДокументПроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.Отменен Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПроведенЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНОтказ,
					ДокументПроведен);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ОтмененПоставщиком Тогда
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.ТТН);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = МенеджерОбъекта.СтатусПослеПередачиДанных(
					Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ПереданоВУТМ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					КвитанцияПолученЕГАИС,
					Истина, Перечисления.ВидыДокументовЕГАИС.АктТТНРасхождения,
					ОбрабатываетсяЕГАИС);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
				ПараметрыОбновления = ОбменДаннымиЕГАИС.ПараметрыОбновленияПослеПолученияДанных(
					ЗаписьНабора, МенеджерОбъекта, Выборка.Документ,
					Перечисления.ВидыДокументовЕГАИС.КвитанцияАктаРасхожденийОтказ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли Выборка.УдалитьСтатусОбработки = Статусы.ПустаяСсылка() Тогда
				
				ПараметрыОбновления = ПараметрыОбновленияДляЗначенийПоУмолчанию(Выборка.Документ);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			ИначеЕсли ЭтоНеиспользуемыйСтатусДокумента(Выборка.УдалитьСтатусОбработки) Тогда
				
				ДальнейшиеДействия = Новый Массив;
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
					Выборка.УдалитьСтатусОбработки, ДальнейшиеДействия);
				РегистрыСведений.СтатусыДокументовЕГАИС.ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления);
				
			Иначе
				
				ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(Выборка.Документ, Выборка.Операция);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция ПараметрыОбновленияДляЗначенийПоУмолчанию(ДокументСсылка)
	
	ДанныеЗаписи = РегистрыСведений.СтатусыДокументовЕГАИС.ЗначенияПоУмолчанию(ДокументСсылка);
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(ДанныеЗаписи.ДальнейшееДействие1);
	ДальнейшиеДействия.Добавить(ДанныеЗаписи.ДальнейшееДействие2);
	ДальнейшиеДействия.Добавить(ДанныеЗаписи.ДальнейшееДействие3);
	
	ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		ДанныеЗаписи.Статус, ДальнейшиеДействия, Ложь, ДанныеЗаписи);
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция ЭтоНеиспользуемыйСтатусДокумента(СтатусОбработки)
	
	Результат = Ложь;
	Если ОбщегоНазначенияЕГАИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульИнтеграцияЕГАИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияЕГАИСПереопределяемый");
		МодульИнтеграцияЕГАИСПереопределяемый.ПриОпределенииИспользуемыхСтатусовДокумента(Результат, СтатусОбработки);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодборСправок2

// Инициализирует начальные данные для подбора справок 2 для списания по LIFO.
//
Функция ПодготовитьДанныеДляПодбораСправок2(Товары)
	
	ТаблицаДляЗаполнения = Новый ТаблицаЗначений;
	ТаблицаДляЗаполнения.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаДляЗаполнения.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДляЗаполнения.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДляЗаполнения.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДляЗаполнения.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	ТаблицаДляСписания.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	ТаблицаДляСписания.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДляСписания.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДляСписания.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаДляСписания.Колонки.Добавить("Справка2",             Новый ОписаниеТипов("СправочникСсылка.Справки2ЕГАИС"));
	ТаблицаДляСписания.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число"));
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.Справка2)Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДляЗаполнения.Добавить(), СтрокаТовары);
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаДляСписания.Добавить(), СтрокаТовары);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДляЗаполнения.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаДляСписания.Свернуть("АлкогольнаяПродукция, Номенклатура, Характеристика, Серия, Справка2", "Количество");
	ТаблицаДляЗаполнения.Свернуть("АлкогольнаяПродукция, Номенклатура, Характеристика, Серия", "Количество");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДляЗаполнения.АлкогольнаяПродукция,
	|	ТаблицаДляЗаполнения.Номенклатура,
	|	ТаблицаДляЗаполнения.Характеристика,
	|	ТаблицаДляЗаполнения.Серия,
	|	ТаблицаДляЗаполнения.Количество
	|ПОМЕСТИТЬ втТаблицаДляЗаполненияПодготовка
	|ИЗ
	|	&ТаблицаДляЗаполнения КАК ТаблицаДляЗаполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляСписания.АлкогольнаяПродукция,
	|	ТаблицаДляСписания.Номенклатура,
	|	ТаблицаДляСписания.Характеристика,
	|	ТаблицаДляСписания.Серия,
	|	ТаблицаДляСписания.Справка2,
	|	ТаблицаДляСписания.Количество
	|ПОМЕСТИТЬ втТаблицаДляСписанияПодготовка
	|ИЗ
	|	&ТаблицаДляСписания КАК ТаблицаДляСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	СоответствиеНоменклатурыЕГАИС.Справка2 КАК Справка2,
	|	Т.Количество
	|ПОМЕСТИТЬ втТаблицаСоответствияБезАлкоПродукции
	|ИЗ
	|	втТаблицаДляЗаполненияПодготовка КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ПО
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = Т.Номенклатура
	|	И СоответствиеНоменклатурыЕГАИС.Характеристика = Т.Характеристика
	|	И СоответствиеНоменклатурыЕГАИС.Серия = Т.Серия
	|ГДЕ
	|	Т.АлкогольнаяПродукция = ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|;
	|
	|";
	
	ТекстЗапроса = ТекстЗапроса
		+ ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"втТаблицаДляСписанияПодготовка",   "ВТТаблицаДляСписанияКоэффициентыПересчетаВЕдиницыЕГАИС", Истина);
		
	ТекстЗапроса = ТекстЗапроса
		+ ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"втТаблицаДляЗаполненияПодготовка", "ВТТаблицаДляЗаполненияКоэффициентыПересчетаВЕдиницыЕГАИС", Истина);
		
	ТекстЗапроса = ТекстЗапроса
		+ ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"втТаблицаСоответствияБезАлкоПродукции", "втТаблицаСоответствияБезАлкоПродукцииКоэффициентыПересчетаВЕдиницыЕГАИС", Истина);
		
	ТекстЗапроса = ТекстЗапроса +
	"ВЫБРАТЬ
	|	ТаблицаДляСписания.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаДляСписания.Справка2             КАК Справка2,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке, 0) > 0
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДляСписания.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) /
	|				ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ ТаблицаДляСписания.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1)
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ втТаблицаДляСписания
	|ИЗ
	|	втТаблицаДляСписанияПодготовка КАК ТаблицаДляСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаДляСписанияКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = ТаблицаДляСписания.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = ТаблицаДляСписания.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = ТаблицаДляСписания.Характеристика
	|		 И ЕдиницыЕГАИС.Серия = ТаблицаДляСписания.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатуры
	|			ПО ТаблицаДляСписания.Номенклатура = ОписаниеНоменклатуры.Номенклатура
	|			 И ТаблицаДляСписания.АлкогольнаяПродукция.ТипПродукции <> ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДляСписания.АлкогольнаяПродукция,
	|	ТаблицаДляСписания.Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляЗаполнения.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке, 0) > 0
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаДляЗаполнения.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) /
	|				ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке КАК ЧИСЛО(12, 0))
	|			ИНАЧЕ ТаблицаДляЗаполнения.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1)
	|		КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ втТаблицаДляЗаполнения
	|ИЗ
	|	втТаблицаДляЗаполненияПодготовка КАК ТаблицаДляЗаполнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТТаблицаДляЗаполненияКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = ТаблицаДляЗаполнения.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = ТаблицаДляЗаполнения.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = ТаблицаДляЗаполнения.Характеристика
	|		 И ЕдиницыЕГАИС.Серия = ТаблицаДляЗаполнения.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатуры
	|			ПО ТаблицаДляЗаполнения.Номенклатура = ОписаниеНоменклатуры.Номенклатура
	|			 И ТаблицаДляЗаполнения.АлкогольнаяПродукция.ТипПродукции <> ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДляЗаполнения.АлкогольнаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура         КАК Номенклатура,
	|	Т.Характеристика       КАК Характеристика,
	|	Т.Серия                КАК Серия,
	|	Т.ПроверятьОбъемДАЛ    КАК ПроверятьОбъемДАЛ,
	|	Т.ОбъемДАЛ             КАК ОбъемДАЛ,
	|	Т.Коэффициент КАК      Коэффициент
	|ИЗ
	|	ВТТаблицаДляЗаполненияКоэффициентыПересчетаВЕдиницыЕГАИС КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура         КАК Номенклатура,
	|	Т.Характеристика       КАК Характеристика,
	|	Т.Серия                КАК Серия,
	|	Т.ПроверятьОбъемДАЛ    КАК ПроверятьОбъемДАЛ,
	|	Т.ОбъемДАЛ             КАК ОбъемДАЛ,
	|	Т.Коэффициент КАК      Коэффициент
	|ИЗ
	|	ВТТаблицаДляСписанияКоэффициентыПересчетаВЕдиницыЕГАИС КАК Т
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Номенклатура         КАК Номенклатура,
	|	Т.Характеристика       КАК Характеристика,
	|	Т.Серия                КАК Серия,
	|	Т.ПроверятьОбъемДАЛ    КАК ПроверятьОбъемДАЛ,
	|	Т.ОбъемДАЛ             КАК ОбъемДАЛ,
	|	Т.Коэффициент КАК      Коэффициент
	|ИЗ
	|	втТаблицаСоответствияБезАлкоПродукцииКоэффициентыПересчетаВЕдиницыЕГАИС КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	втТаблицаДляЗаполнения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	втТаблицаДляСписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Серия КАК Серия,
	|	СоответствиеНоменклатурыЕГАИС.Справка2 КАК Справка2
	|ИЗ
	|	втТаблицаДляЗаполненияПодготовка КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|ПО
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура = Т.Номенклатура
	|	И СоответствиеНоменклатурыЕГАИС.Характеристика = Т.Характеристика
	|	И СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = Т.АлкогольнаяПродукция
	|	И СоответствиеНоменклатурыЕГАИС.Серия = Т.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	втТаблицаСоответствияБезАлкоПродукции
	|;
	|";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДляЗаполнения", ТаблицаДляЗаполнения);
	Запрос.УстановитьПараметр("ТаблицаДляСписания",   ТаблицаДляСписания);
	Запрос.УстановитьПараметр("ПустаяСерия", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("МенеджерВременныхТаблиц",            МенеджерВременныхТаблиц);
	ВозвращаемоеЗначение.Вставить("ТаблицаСоответствияБезАлкоПродукции",Результат[Результат.Количество() - 1].Выгрузить());
	ВозвращаемоеЗначение.Вставить("ТаблицаСоответствия",                Результат[Результат.Количество() - 2].Выгрузить());
	ВозвращаемоеЗначение.Вставить("ТаблицаДляСписания",                 Результат[Результат.Количество() - 3].Выгрузить());
	ВозвращаемоеЗначение.Вставить("ТаблицаДляЗаполнения",               Результат[Результат.Количество() - 4].Выгрузить());
	ВозвращаемоеЗначение.Вставить("КоэффициентыПересчетаВЕдиницыЕГАИС", Результат[Результат.Количество() - 5].Выгрузить());
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Заполняет справку 2 в тех строках таблицы Товары, где справка 2 не заполнена.
// Если в строке таблицы Товары документа указана серия, то справка 2 будет заполнена только в том случае,
// если в регистре сведений "Соответствие номенклатуры ЕГАИС" есть запись для этой серии и на остатках есть справка 2.
// Если в строке таблицы Товары документа не указана серия, то справка 2 будет подобрана по следующему алгоритму.
// Сначала будут подобраны справки 2, для которых есть записи в регистре сведений "Соответствие номенклатуры ЕГАИС".
// Затем будут подобраны справки 2, для которых в регистре сведений "Соответствие номенклатуры ЕГАИС" записей нет.
// Если в строке не заполнена алкогольная продукция, то она заполняется по данным регистра сведений
// "Соответствие номенклатуры ЕГАИС" и остаткам алкогольной продукции.
//
Функция ЗаполнитьСправку2ВТабличнойЧасти(Товары, АлкогольнаяПродукция, Справка2,
	ОстатокПоСправке, СтруктураПересчетаСуммы, КоэффициентыПересчетаВЕдиницыЕГАИС,
	ТаблицаСоответствия, ТаблицаСоответствияБезАлкоПродукции = Неопределено, ОписанияНоменклатуры = Неопределено)
	
	Если ОписанияНоменклатуры = Неопределено Тогда
		МассивНоменклатуры = Новый Массив;
		Для Каждого Строка Из Товары Цикл
			Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				МассивНоменклатуры.Добавить(Строка.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		ОписанияНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(МассивНоменклатуры);
	КонецЕсли;
	
	ЕстьСтрокиДляЗаполнения = Истина;
	
	Отбор1 = Новый Структура;
	Отбор1.Вставить("АлкогольнаяПродукция", АлкогольнаяПродукция);
	Отбор1.Вставить("Справка2",             Справочники.Справки2ЕГАИС.ПустаяСсылка());
	
	Отбор2 = Новый Структура;
	Отбор2.Вставить("АлкогольнаяПродукция", АлкогольнаяПродукция);
	Отбор2.Вставить("Справка2",             Справочники.Справки2ЕГАИС.ПустаяСсылка());
	Отбор2.Вставить("Серия",                ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	Отбор3 = Новый Структура;
	Отбор3.Вставить("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка());
	Отбор2.Вставить("Справка2",             Справочники.Справки2ЕГАИС.ПустаяСсылка());
	
	Пока ОстатокПоСправке > 0 Цикл
		
		МассивСтрок1 = Товары.НайтиСтроки(Отбор1);
		МассивСтрок2 = Товары.НайтиСтроки(Отбор2);
		МассивСтрок3 = Товары.НайтиСтроки(Отбор3);
		
		Если МассивСтрок1.Количество() = 0 И
			МассивСтрок2.Количество() = 0 И
			МассивСтрок3.Количество() = 0 Тогда
			
			ЕстьСтрокиДляЗаполнения = Ложь;
			
		КонецЕсли;
		
		КоличествоНеподходящихСтрокТЧ = 0;
		
		Если МассивСтрок1.Количество() > 0 Тогда
		
			Для Каждого СтрокаТЧ Из МассивСтрок1 Цикл
					
				Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(НСтр("ru = 'Не заполнена номенклатура в строке %1 табличной части ""Товары"".'"), СтрокаТЧ.НомерСтроки));
						
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				Если ОписанияНоменклатуры[СтрокаТЧ.Номенклатура] = Неопределено
					Или Не ЗначениеЗаполнено(ОписанияНоменклатуры[СтрокаТЧ.Номенклатура].КоличествоВПотребительскойУпаковке) Тогда
					КоличествоВПотребительскойУпаковке = 1;
				Иначе
					КоличествоВПотребительскойУпаковке = ОписанияНоменклатуры[СтрокаТЧ.Номенклатура].КоличествоВПотребительскойУпаковке;
				КонецЕсли;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
				ПараметрыОтбора.Вставить("Номенклатура",         СтрокаТЧ.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика",       СтрокаТЧ.Характеристика);
				ПараметрыОтбора.Вставить("Серия",                СтрокаТЧ.Серия);
				
				НайденныеСтрокиКоэффициенты = КоэффициентыПересчетаВЕдиницыЕГАИС.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтрокиКоэффициенты.Количество() > 0 Тогда
				
					ПараметрыОтбораСоответствиеСправка2 = Новый Структура;
					ПараметрыОтбораСоответствиеСправка2.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
					ПараметрыОтбораСоответствиеСправка2.Вставить("Номенклатура",         СтрокаТЧ.Номенклатура);
					ПараметрыОтбораСоответствиеСправка2.Вставить("Характеристика",       СтрокаТЧ.Характеристика);
					ПараметрыОтбораСоответствиеСправка2.Вставить("Серия",                СтрокаТЧ.Серия);
					ПараметрыОтбораСоответствиеСправка2.Вставить("Справка2",             Справка2);
					
					НайденныеСтрокиСоответствиеСправка2 = ТаблицаСоответствия.НайтиСтроки(ПараметрыОтбораСоответствиеСправка2);
					
					Если НайденныеСтрокиСоответствиеСправка2.Количество() = 0 Тогда
						КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
						Продолжить;
					Иначе
						СтрокаТаблицыКоэффициентов = НайденныеСтрокиКоэффициенты[0];
					КонецЕсли;
				
				Иначе
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
					ИндексМассива2 = МассивСтрок2.Найти(СтрокаТЧ);
					
					Если ИндексМассива2 <> Неопределено Тогда
						МассивСтрок2.Удалить(ИндексМассива2);
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТаблицыКоэффициентов.Коэффициент = 0 Тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Для номенклатуры %1 в строке %2 табличной части ""Товары"" не заполнен объем в дал .'"),
							СтрокаТЧ.Номенклатура,
							СтрокаТЧ.НомерСтроки));
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				ОстатокПоСправкеПриведенный = ОстатокПоСправке / СтрокаТаблицыКоэффициентов.Коэффициент;
				Если ОстатокПоСправкеПриведенный = 0 Тогда
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				СтрокаТЧ.Справка2 = Справка2;
				
				Если СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке > ОстатокПоСправкеПриведенный Тогда
					
					ИнтеграцияЕГАИСКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТЧ);
					
					РазницаПоКоличеству = СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке - ОстатокПоСправкеПриведенный;
					СтрокаТЧ.Количество = ОстатокПоСправкеПриведенный;
					
					НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаТЧ) + 1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.Количество = РазницаПоКоличеству;
					НоваяСтрока.Справка2   = Справочники.Справки2ЕГАИС.ПустаяСсылка();
					
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТЧ);
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, НоваяСтрока);
					ИнтеграцияЕГАИСКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
					
				КонецЕсли;
				
				ОстатокПоСправке = ОстатокПоСправке - СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке * СтрокаТаблицыКоэффициентов.Коэффициент;
				Если ОстатокПоСправке <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Дозаполним справки 2 в строках таблицы, для которых нет записей в регистре сведений "Соответствие номенклатуры ЕГАИС"
		
		КоличествоНеподходящихСтрокТЧ = 0;
		Если МассивСтрок2.Количество() > 0 Тогда
		
			КоличествоНеподходящихСтрокТЧ = 0;
			
			Для Каждого СтрокаТЧ Из МассивСтрок2 Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				Если ОписанияНоменклатуры[СтрокаТЧ.Номенклатура] = Неопределено
					Или Не ЗначениеЗаполнено(ОписанияНоменклатуры[СтрокаТЧ.Номенклатура].КоличествоВПотребительскойУпаковке) Тогда
					КоличествоВПотребительскойУпаковке = 1;
				Иначе
					КоличествоВПотребительскойУпаковке = ОписанияНоменклатуры[СтрокаТЧ.Номенклатура].КоличествоВПотребительскойУпаковке;
				КонецЕсли;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
				ПараметрыОтбора.Вставить("Номенклатура",         СтрокаТЧ.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика",       СтрокаТЧ.Характеристика);
				ПараметрыОтбора.Вставить("Серия",                СтрокаТЧ.Серия);
				
				НайденныеСтрокиКоэффициенты = КоэффициентыПересчетаВЕдиницыЕГАИС.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтрокиКоэффициенты.Количество() > 0 Тогда
					СтрокаТаблицыКоэффициентов = НайденныеСтрокиКоэффициенты[0];
				Иначе
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				Если СтрокаТаблицыКоэффициентов.Коэффициент = 0 Тогда
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				ОстатокПоСправкеПриведенный = ОстатокПоСправке / СтрокаТаблицыКоэффициентов.Коэффициент;
				Если ОстатокПоСправкеПриведенный = 0 Тогда
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				СтрокаТЧ.Справка2 = Справка2;
				
				Если СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке > ОстатокПоСправкеПриведенный Тогда
					
					ИнтеграцияЕГАИСКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТЧ);
					
					РазницаПоКоличеству = СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке - ОстатокПоСправкеПриведенный;
					СтрокаТЧ.Количество = ОстатокПоСправкеПриведенный;
					
					НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаТЧ) + 1);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
					НоваяСтрока.Количество = РазницаПоКоличеству;
					НоваяСтрока.Справка2   = Справочники.Справки2ЕГАИС.ПустаяСсылка();
					
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТЧ);
					ИнтеграцияЕГАИСКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, НоваяСтрока);
					ИнтеграцияЕГАИСКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
					
				КонецЕсли;
				
				ОстатокПоСправке = ОстатокПоСправке - СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке * СтрокаТаблицыКоэффициентов.Коэффициент;
				Если ОстатокПоСправке <= 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Дозаполним справки 2 и алкогольную продукцию в строках таблицы с незаполненной алкогольной продукцией
		КоличествоНеподходящихСтрокТЧ = 0;
		Если МассивСтрок3.Количество() > 0 Тогда
		
			Для Каждого СтрокаТЧ Из МассивСтрок3 Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
				Если ОписанияНоменклатуры[СтрокаТЧ.Номенклатура] = Неопределено
					Или Не ЗначениеЗаполнено(ОписанияНоменклатуры[СтрокаТЧ.Номенклатура].КоличествоВПотребительскойУпаковке) Тогда
					КоличествоВПотребительскойУпаковке = 1;
				Иначе
					КоличествоВПотребительскойУпаковке = ОписанияНоменклатуры[СтрокаТЧ.Номенклатура].КоличествоВПотребительскойУпаковке;
				КонецЕсли;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("АлкогольнаяПродукция", АлкогольнаяПродукция);
				ПараметрыОтбора.Вставить("Справка2",             Справка2);
				ПараметрыОтбора.Вставить("Номенклатура",         СтрокаТЧ.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика",       СтрокаТЧ.Характеристика);
				ПараметрыОтбора.Вставить("Серия",                СтрокаТЧ.Серия);
				
				НайденныеСтрокиСоответствиеБезАлкоПродукции = ТаблицаСоответствияБезАлкоПродукции.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтрокиСоответствиеБезАлкоПродукции.Количество() > 0 Тогда
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("АлкогольнаяПродукция", АлкогольнаяПродукция);
					ПараметрыОтбора.Вставить("Номенклатура",         СтрокаТЧ.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика",       СтрокаТЧ.Характеристика);
					ПараметрыОтбора.Вставить("Серия",                СтрокаТЧ.Серия);
					НайденныеСтрокиКоэффициенты = КоэффициентыПересчетаВЕдиницыЕГАИС.НайтиСтроки(ПараметрыОтбора);
					
					Если НайденныеСтрокиКоэффициенты.Количество() > 0 Тогда
						СтрокаТаблицыКоэффициентов = НайденныеСтрокиКоэффициенты[0];
					Иначе
						
						КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
						Продолжить;
						
					КонецЕсли;
					
					Если СтрокаТаблицыКоэффициентов.Коэффициент = 0 Тогда
						
						КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
						Продолжить;
						
					КонецЕсли;
					
					СтрокаТЧ.АлкогольнаяПродукция = АлкогольнаяПродукция;
					СтрокаТЧ.Справка2 = Справка2;
					
					ОстатокПоСправкеПриведенный = ОстатокПоСправке / СтрокаТаблицыКоэффициентов.Коэффициент;
					Если ОстатокПоСправкеПриведенный = 0 Тогда
						
						КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
						Продолжить;
						
					КонецЕсли;
					
					Если СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке > ОстатокПоСправкеПриведенный Тогда
						
						ИнтеграцияЕГАИСКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТЧ);
						
						РазницаПоКоличеству = СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке - ОстатокПоСправкеПриведенный;
						СтрокаТЧ.Количество = ОстатокПоСправкеПриведенный;
						
						НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаТЧ) + 1);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
						НоваяСтрока.Количество = РазницаПоКоличеству;
						НоваяСтрока.Справка2   = Справочники.Справки2ЕГАИС.ПустаяСсылка();
						НоваяСтрока.АлкогольнаяПродукция = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка();
						
						ИнтеграцияЕГАИСКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, СтрокаТЧ);
						ИнтеграцияЕГАИСКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, НоваяСтрока);
						ИнтеграцияЕГАИСКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
						
					КонецЕсли;
					
					ОстатокПоСправке = ОстатокПоСправке - СтрокаТЧ.Количество / КоличествоВПотребительскойУпаковке * СтрокаТаблицыКоэффициентов.Коэффициент;
					Если ОстатокПоСправке <= 0 Тогда
						Прервать;
					КонецЕсли;
					
				Иначе
					
					КоличествоНеподходящихСтрокТЧ = КоличествоНеподходящихСтрокТЧ + 1;
					Продолжить;
					
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли;
		
		Если КоличествоНеподходящихСтрокТЧ = МассивСтрок3.Количество() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьСтрокиДляЗаполнения;
	
КонецФункции

// Заполняет таблицы, по которым будет сформирован возврат из регистра 2.
//
Функция ОбработатьПорциюДанныхДляПодбораСправок2ДляВозвратаИзРегистра2(МенеджерВременныхТаблиц, ОрганизацияЕГАИС, Период, Таблицы)
	
	Запрос = Новый Запрос(
	"////////////////////////////////////////////////////////////////////////////////0
	|ВЫБРАТЬ 
	|	ОстатокВРегистре2.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстатокВРегистре2.Справка2             КАК Справка2,
	|	ОстатокВРегистре2.Количество           КАК Количество
	|ПОМЕСТИТЬ втОстатокВРегистре2
	|ИЗ
	|	&ОстатокВРегистре2 КАК ОстатокВРегистре2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////1
	|ВЫБРАТЬ ПЕРВЫЕ 500
	|	Таблица.Период КАК Период
	|ПОМЕСТИТЬ ГраницыНачало
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаДляЗаполнения КАК втТаблицаДляЗаполнения
	|		ПО (втТаблицаДляЗаполнения.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция)
	|ГДЕ
	|	(   Таблица.Регистратор ССЫЛКА Документ.ВозвратИзРегистра2ЕГАИС
	|	ИЛИ Таблица.Регистратор ССЫЛКА Документ.ПередачаВРегистр2ЕГАИС)
	|	И Таблица.Количество <> 0
	|	И Таблица.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	" + ?(ЗначениеЗаполнено(Период), "И Таблица.Период < &Период", "") + "
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////2
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(Таблица.Период), ДатаВремя(1,1,1)) КАК Период
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	ГраницыНачало КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////3
	|ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Справка2 КАК Справка2,
	|	ВЫБОР
	|		КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -Таблица.Количество
	|		КОГДА Таблица.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА Таблица.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	|ПОМЕСТИТЬ втПорцияДанных
	|ИЗ
	|	РегистрНакопления.ОстаткиАлкогольнойПродукцииЕГАИС КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаДляЗаполнения КАК втТаблицаДляЗаполнения
	|		ПО (втТаблицаДляЗаполнения.АлкогольнаяПродукция = Таблица.АлкогольнаяПродукция)
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Границы КАК Границы
	|		ПО ИСТИНА
	|ГДЕ
	|	(   Таблица.Регистратор ССЫЛКА Документ.ВозвратИзРегистра2ЕГАИС
	|	ИЛИ Таблица.Регистратор ССЫЛКА Документ.ПередачаВРегистр2ЕГАИС)
	|	И Таблица.Количество <> 0
	|	И Таблица.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И Таблица.Период >= Границы.Период
	|	" + ?(ЗначениеЗаполнено(Период), "И Таблица.Период < &Период", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////4
	|ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Таблица.Справка2 КАК Справка2,
	|	Таблица.Количество КАК Количество
	|ИЗ
	|	втПорцияДанных КАК Таблица
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Период УБЫВ,
	|	Таблица.Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////5
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(Таблица.Количество)    КАК Количество,
	|	0                            КАК Требуется
	|ПОМЕСТИТЬ ТаблицаДляГруппировки
	|ИЗ
	|	втПорцияДанных КАК Таблица
	|СГРУППИРОВАТЬ ПО
	|	Таблица.АлкогольнаяПродукция
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция,
	|	-Таблица.Количество,
	|	0
	|ИЗ
	|	втТаблицаДляСписания КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция,
	|	Таблица.Количество,
	|	0
	|ИЗ
	|	втОстатокВРегистре2 КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Таблица.АлкогольнаяПродукция,
	|	0,
	|	Таблица.Количество
	|ИЗ
	|	втТаблицаДляЗаполнения КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////6
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДляГруппировки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	СУММА(ТаблицаДляГруппировки.Количество)    КАК Количество,
	|	СУММА(ТаблицаДляГруппировки.Требуется)     КАК Требуется
	|ИЗ
	|	ТаблицаДляГруппировки КАК ТаблицаДляГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДляГруппировки.АлкогольнаяПродукция
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаДляГруппировки.Требуется) - СУММА(ТаблицаДляГруппировки.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////7
	|ВЫБРАТЬ
	|	Границы.Период
	|ИЗ
	|	Границы КАК Границы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстатокВРегистре2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПорцияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ГраницыНачало
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Границы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДляГруппировки
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",  ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("Период",            Период);
	Запрос.УстановитьПараметр("ОстатокВРегистре2", Таблицы.ОстатокВРегистре2);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	НоваяПорция = РезультатЗапроса[4].Выгрузить();
	
	Для Каждого СтрокаТЧ Из НоваяПорция Цикл
		
		Если СтрокаТЧ.Количество < 0 Тогда
			НоваяСтрока = Таблицы.ТаблицаДляСписания.Добавить();
			НоваяСтрока.АлкогольнаяПродукция =  СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.Справка2             =  СтрокаТЧ.Справка2;
			НоваяСтрока.Количество           = -СтрокаТЧ.Количество;
			Продолжить;
		КонецЕсли;
		
		Если Таблицы.ТаблицаДляСписания.Количество() > 0 Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			ПараметрыОтбора.Вставить("Справка2",             СтрокаТЧ.Справка2);
			НайденныеСтроки = Таблицы.ТаблицаДляСписания.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Количество > 0 И СтрокаТЧ.Количество > 0 Тогда
					
					Если СтрокаТЧ.Количество <= НайденнаяСтрока.Количество Тогда
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТЧ.Количество;
						СтрокаТЧ.Количество = 0;
					Иначе
						Разница = СтрокаТЧ.Количество - НайденнаяСтрока.Количество;
						НайденнаяСтрока.Количество = 0;
						СтрокаТЧ.Количество = СтрокаТЧ.Количество - Разница;
					КонецЕсли;
					
				КонецЕсли;
				
				Если НайденнаяСтрока.Количество = 0 Тогда
					Таблицы.ТаблицаДляСписания.Удалить(НайденнаяСтрока);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтрокаТЧ.Количество <> 0 Тогда
		
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция", СтрокаТЧ.АлкогольнаяПродукция);
			ПараметрыОтбора.Вставить("Последняя",            Истина);
			НайденныеСтроки = Таблицы.ОстатокВРегистре2.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					Если НайденнаяСтрока.Справка2 = СтрокаТЧ.Справка2 Тогда
						
						НайденнаяСтрока.Количество = НайденнаяСтрока.Количество + СтрокаТЧ.Количество;
						
					Иначе
						
						НайденнаяСтрока.Последняя = Ложь;
						
						НоваяСтрока = Таблицы.ОстатокВРегистре2.Добавить();
						НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
						НоваяСтрока.Справка2             = СтрокаТЧ.Справка2;
						НоваяСтрока.Количество           = СтрокаТЧ.Количество;
						НоваяСтрока.Последняя            = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = Таблицы.ОстатокВРегистре2.Добавить();
				НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
				НоваяСтрока.Справка2             = СтрокаТЧ.Справка2;
				НоваяСтрока.Количество           = СтрокаТЧ.Количество;
				НоваяСтрока.Последняя            = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатЗапроса[6].Пустой() Тогда
		
		Возврат Истина;
		
	Иначе
		
		Границы = РезультатЗапроса[7].Выгрузить();
		Если Границы.Количество() = 1 Тогда
			
			НовыйПериод = Границы[0].Период;
			
			Если ЗначениеЗаполнено(НовыйПериод) Тогда
				
				Возврат ОбработатьПорциюДанныхДляПодбораСправок2ДляВозвратаИзРегистра2(
					МенеджерВременныхТаблиц,
					ОрганизацияЕГАИС,
					НовыйПериод,
					Таблицы);
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Все строки табличной части имеют заполненные справки 2.
//
// Параметры:
//  Товары - ТабличнаяЧасть - Табличная часть.
//
// Возвращаемое значение:
//  Булево - Истина, если в табличной части нет строк с незаполненными справками 2.
//
Функция Справки2ЗаполненыВТабличнойЧасти(Товары) Экспорт
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
	НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеСтроки.Количество() = 0;
	
КонецФункции

#КонецОбласти

// Дополнить параметры обновления статуса.
//
// Параметры:
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Структура - см. функцию ПараметрыОбновленияСтатуса().
//
Функция ДополнитьПараметрыОбновленияСтатуса(ПараметрыОбновленияСтатуса = Неопределено) Экспорт
	
	Если ПараметрыОбновленияСтатуса <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПараметрыОбновленияСтатуса.ИдентификаторЗапроса)
			И Не ЗначениеЗаполнено(ПараметрыОбновленияСтатуса.ФорматОбмена) Тогда
			РезультатПоиска = НайтиОбъектПоИдентификаторуЗапроса(ПараметрыОбновленияСтатуса.ИдентификаторЗапроса);
			ПараметрыОбновленияСтатуса.ФорматОбмена = РезультатПоиска.ФорматОбмена;
		КонецЕсли;
		
	Иначе
		
		ПараметрыОбновленияСтатуса = ПараметрыОбновленияСтатуса();
		
	КонецЕсли;
	
	Возврат ПараметрыОбновленияСтатуса;
	
КонецФункции

// Получить таблицу справок 2 по документу.
//
// Параметры:
//  ДокументСсылка- ДокументСсылка - Документ.
//  ИспользоватьИдентификаторСтроки - Булево - Использовать идентификаторы строки.
//  ИмяТабличнойЧасти - Строка - Имя табличной части.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Справки 2 по документу.
//
Функция Справки2ПоДокументу(ДокументСсылка, ИспользоватьИдентификаторСтроки = Истина, ИмяТабличнойЧасти = "Товары") Экспорт
	
	ПолноеИмяДокумента = ДокументСсылка.Метаданные().ПолноеИмя();
	
	Если ИспользоватьИдентификаторСтроки Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.ИдентификаторСтроки  КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2             КАК Справка2
		|ИЗ
		|	&ТабличнаяЧасть КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &ДокументСсылка
		|";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Неопределено                        КАК ИдентификаторСтроки,
		|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2             КАК Справка2
		|ИЗ
		|	&ТабличнаяЧасть КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &ДокументСсылка
		|";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧасть", ПолноеИмяДокумента + "." + ИмяТабличнойЧасти);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Загружает список алкогольной продукции в базу.
// 
// Параметры:
//  СписокАлкогольнойПродукцииXDTO - Массив из ОбъектXDTO- Список алкогольной продукции XDTO
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение - Загрузить алкогольную продукцию
Функция ЗагрузитьАлкогольнуюПродукцию(СписокАлкогольнойПродукцииXDTO)
	
	Результат = Новый Соответствие;
	
	КоличествоЭлементов = СписокАлкогольнойПродукцииXDTO.Количество();
	Если КоличествоЭлементов = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	КлассификаторВидовПродукции = РегистрыСведений.ВидыАлкогольнойПродукцииЕГАИС.ВидыАлкогольнойПродукции();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлассификаторВидовПродукции", КлассификаторВидовПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторВидовПродукции.Код КАК Код,
	|	КлассификаторВидовПродукции.Наименование КАК Наименование,
	|	КлассификаторВидовПродукции.Маркируемый КАК Маркируемый,
	|	КлассификаторВидовПродукции.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара
	|ПОМЕСТИТЬ ВТКлассификаторВидовПродукции
	|ИЗ
	|	&КлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВидыАлкогольнойПродукцииЕГАИС.Код, КлассификаторВидовПродукции.Код) КАК Код,
	|	КлассификаторВидовПродукции.Наименование,
	|	КлассификаторВидовПродукции.Маркируемый,
	|	КлассификаторВидовПродукции.ВидПодакцизногоТовара,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	ВТКлассификаторВидовПродукции КАК КлассификаторВидовПродукции
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукцииЕГАИС
	|		ПО КлассификаторВидовПродукции.Код = ВидыАлкогольнойПродукцииЕГАИС.Код";
	
	КлассификаторВидовПродукции = Запрос.Выполнить().Выгрузить();
	КлассификаторВидовПродукции.Индексы.Добавить("Код");
	
	МетаКлассификаторАлкогольнойПродукцииЕГАИС = Метаданные.Справочники.КлассификаторАлкогольнойПродукцииЕГАИС;
	ДлинаКода         = МетаКлассификаторАлкогольнойПродукцииЕГАИС.ДлинаКода;
	ДлинаНаименования = МетаКлассификаторАлкогольнойПродукцииЕГАИС.ДлинаНаименования;
	
	ТаблицаАлкогольнойПродукции = Новый ТаблицаЗначений;
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Код"               , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаКода)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Наименование"      , Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаНаименования)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("НаименованиеПолное", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(1000)));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Объем"             , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Крепость"          , Новый ОписаниеТипов("Число"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Производитель"     , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("Импортер"          , Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийЕГАИС"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ВидПродукции"      , Новый ОписаниеТипов("СправочникСсылка.ВидыАлкогольнойПродукции"));
	ТаблицаАлкогольнойПродукции.Колонки.Добавить("ТипПродукции"      , Новый ОписаниеТипов("ПеречислениеСсылка.ТипыПродукцииЕГАИС"));
	
	ВидыЛицензий = Новый Соответствие;
	ВидыЛицензий.Вставить("АП"   , Перечисления.ВидыЛицензийАлкогольнойПродукции.АлкогольнаяПродукция);
	ВидыЛицензий.Вставить("ССП"  , Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяПищеваяПродукция);
	ВидыЛицензий.Вставить("ССНП" , Перечисления.ВидыЛицензийАлкогольнойПродукции.СпиртосодержащаяНеПищеваяПродукция);
	ВидыЛицензий.Вставить("Спирт", Перечисления.ВидыЛицензийАлкогольнойПродукции.Спирт);
	
	МассивКодов = Новый Массив;
	
	Для Каждого ДанныеАлкогольнойПродукцииXDTO Из СписокАлкогольнойПродукцииXDTO Цикл
		
		Если МассивКодов.Найти(ДанныеАлкогольнойПродукцииXDTO.AlcCode) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКодов.Добавить(ДанныеАлкогольнойПродукцииXDTO.AlcCode);
		
		СтрокаТаблицы = ТаблицаАлкогольнойПродукции.Добавить();
		СтрокаТаблицы.Код                = ДанныеАлкогольнойПродукцииXDTO.AlcCode;
		СтрокаТаблицы.Наименование       = ДанныеАлкогольнойПродукцииXDTO.ShortName;
		СтрокаТаблицы.НаименованиеПолное = ДанныеАлкогольнойПродукцииXDTO.FullName;
		СтрокаТаблицы.Объем              = ДанныеАлкогольнойПродукцииXDTO.Capacity;
		СтрокаТаблицы.Крепость           = ДанныеАлкогольнойПродукцииXDTO.AlcVolume;
		
		Если ПустаяСтрока(СтрокаТаблицы.Наименование) И НЕ ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) Тогда
			СтрокаТаблицы.Наименование = СтрокаТаблицы.НаименованиеПолное;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТаблицы.НаименованиеПолное) И НЕ ПустаяСтрока(СтрокаТаблицы.Наименование) Тогда
			СтрокаТаблицы.НаименованиеПолное = СтрокаТаблицы.Наименование;
		КонецЕсли;
		
		Если ДанныеАлкогольнойПродукцииXDTO.Producer <> Неопределено Тогда
			СтрокаТаблицы.Производитель = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукцииXDTO.Producer);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеАлкогольнойПродукцииXDTO, "Importer") Тогда
			Если ДанныеАлкогольнойПродукцииXDTO.Importer <> Неопределено Тогда
				СтрокаТаблицы.Импортер = ЗагрузитьОрганизацию(ДанныеАлкогольнойПродукцииXDTO.Importer);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеАлкогольнойПродукцииXDTO, "UnitType") Тогда
			СтрокаТаблицы.ТипПродукции = ?(ДанныеАлкогольнойПродукцииXDTO.UnitType = "Unpacked",
				Перечисления.ТипыПродукцииЕГАИС.Неупакованная,
				Перечисления.ТипыПродукцииЕГАИС.Упакованная);
		КонецЕсли;
		
		СтрокаКлассификатора = КлассификаторВидовПродукции.Найти(ДанныеАлкогольнойПродукцииXDTO.ProductVCode, "Код");
		Если СтрокаКлассификатора <> Неопределено Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаКлассификатора.Ссылка) Тогда
				
				ВидПродукцииОбъект = Справочники.ВидыАлкогольнойПродукции.СоздатьЭлемент();
				ВидПродукцииОбъект.Код                   = СтрокаКлассификатора.Код;
				ВидПродукцииОбъект.Наименование          = СтрокаКлассификатора.Наименование;
				ВидПродукцииОбъект.ВидЛицензии           = ВидыЛицензий[ДанныеАлкогольнойПродукцииXDTO.Type];
				ВидПродукцииОбъект.Маркируемый           = СтрокаКлассификатора.Маркируемый;
				ВидПродукцииОбъект.ВидПодакцизногоТовара = СтрокаКлассификатора.ВидПодакцизногоТовара;
				ВидПродукцииОбъект.Записать();
				
				СтрокаКлассификатора.Ссылка = ВидПродукцииОбъект.Ссылка;
				
			КонецЕсли;
			
			СтрокаТаблицы.ВидПродукции = СтрокаКлассификатора.Ссылка;
		КонецЕсли;
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаАлкогольнойПродукции", ТаблицаАлкогольнойПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код                КАК Код,
	|	ТаблицаАлкогольнойПродукции.Наименование       КАК Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем              КАК Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость           КАК Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель      КАК Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер           КАК Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции       КАК ВидПродукции,
	|	ТаблицаАлкогольнойПродукции.ТипПродукции       КАК ТипПродукции
	|ПОМЕСТИТЬ ТаблицаАлкогольнойПродукции
	|ИЗ
	|	&ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАлкогольнойПродукции.Код                КАК Код,
	|	ТаблицаАлкогольнойПродукции.Наименование       КАК Наименование,
	|	ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаАлкогольнойПродукции.Объем              КАК Объем,
	|	ТаблицаАлкогольнойПродукции.Крепость           КАК Крепость,
	|	ТаблицаАлкогольнойПродукции.Производитель      КАК Производитель,
	|	ТаблицаАлкогольнойПродукции.Импортер           КАК Импортер,
	|	ТаблицаАлкогольнойПродукции.ВидПродукции       КАК ВидПродукции,
	|	ТаблицаАлкогольнойПродукции.ТипПродукции       КАК ТипПродукции,
	|	ЕСТЬNULL(КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК Ссылка,
	|	КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка ЕСТЬ NULL
	|		ИЛИ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.Наименование КАК СТРОКА(100))) <> (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.Наименование КАК СТРОКА(100)))
	|			И ТаблицаАлкогольнойПродукции.Наименование <> """"
	|		ИЛИ (ВЫРАЗИТЬ(ТаблицаАлкогольнойПродукции.НаименованиеПолное КАК СТРОКА(1000))) <> (ВЫРАЗИТЬ(КлассификаторАлкогольнойПродукцииЕГАИС.НаименованиеПолное КАК СТРОКА(1000)))
	|			И ТаблицаАлкогольнойПродукции.НаименованиеПолное <> """"
	|		ИЛИ ТаблицаАлкогольнойПродукции.Объем <> КлассификаторАлкогольнойПродукцииЕГАИС.Объем
	|			И ТаблицаАлкогольнойПродукции.Объем <> 0
	|		ИЛИ ТаблицаАлкогольнойПродукции.Крепость <> КлассификаторАлкогольнойПродукцииЕГАИС.Крепость
	|			И ТаблицаАлкогольнойПродукции.Крепость <> 0
	|		ИЛИ ТаблицаАлкогольнойПродукции.Производитель <> КлассификаторАлкогольнойПродукцииЕГАИС.Производитель
	|			И ТаблицаАлкогольнойПродукции.Производитель <> ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|		ИЛИ ТаблицаАлкогольнойПродукции.Импортер <> КлассификаторАлкогольнойПродукцииЕГАИС.Импортер
	|			И ТаблицаАлкогольнойПродукции.Импортер <> ЗНАЧЕНИЕ(Справочник.КлассификаторОрганизацийЕГАИС.ПустаяСсылка)
	|		ИЛИ ТаблицаАлкогольнойПродукции.ВидПродукции <> КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции
	|			И ТаблицаАлкогольнойПродукции.ВидПродукции <> ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|		ИЛИ ТаблицаАлкогольнойПродукции.ТипПродукции <> КлассификаторАлкогольнойПродукцииЕГАИС.ТипПродукции
	|			И ТаблицаАлкогольнойПродукции.ТипПродукции <> ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.ПустаяСсылка) КАК ЕстьИзменения
	|ПОМЕСТИТЬ ТаблицаСКлассификатором
	|ИЗ
	|	ТаблицаАлкогольнойПродукции КАК ТаблицаАлкогольнойПродукции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТаблицаАлкогольнойПродукции.Код = КлассификаторАлкогольнойПродукцииЕГАИС.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеНоменклатурыЕГАИС.Номенклатура          КАК Номенклатура,
	|	СоответствиеНоменклатурыЕГАИС.Характеристика        КАК Характеристика,
	|	СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция  КАК АлкогольнаяПродукция,
	|	СоответствиеНоменклатурыЕГАИС.ИдентификаторУпаковки КАК ИдентификаторУпаковки
	|ИЗ
	|	ТаблицаСКлассификатором КАК ТаблицаСКлассификатором
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеНоменклатурыЕГАИС
	|		ПО ТаблицаСКлассификатором.Ссылка = СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция
	|ГДЕ
	|	ТаблицаСКлассификатором.Ссылка <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСКлассификатором.Код                КАК Код,
	|	ТаблицаСКлассификатором.Наименование       КАК Наименование,
	|	ТаблицаСКлассификатором.НаименованиеПолное КАК НаименованиеПолное,
	|	ТаблицаСКлассификатором.Объем              КАК Объем,
	|	ТаблицаСКлассификатором.Крепость           КАК Крепость,
	|	ТаблицаСКлассификатором.Производитель      КАК Производитель,
	|	ТаблицаСКлассификатором.Импортер           КАК Импортер,
	|	ТаблицаСКлассификатором.ВидПродукции       КАК ВидПродукции,
	|	ТаблицаСКлассификатором.ТипПродукции       КАК ТипПродукции,
	|	ТаблицаСКлассификатором.Ссылка             КАК Ссылка,
	|	ТаблицаСКлассификатором.ЕстьИзменения      КАК ЕстьИзменения
	|ИЗ
	|	ТаблицаСКлассификатором КАК ТаблицаСКлассификатором";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаСопоставления = МассивРезультатов[МассивРезультатов.Количество() - 2].Выгрузить();
	ТаблицаСопоставления.Индексы.Добавить("АлкогольнаяПродукция");
	РезультатЗапроса = МассивРезультатов[МассивРезультатов.Количество() - 1];
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеАлкогольнойПродукции = Новый Структура;
		ДанныеАлкогольнойПродукции.Вставить("АлкогольнаяПродукция");
		ДанныеАлкогольнойПродукции.Вставить("ТаблицаСопоставления", Новый Соответствие);
		
		Если Не Выборка.ЕстьИзменения Тогда
			ДанныеАлкогольнойПродукции.АлкогольнаяПродукция = Выборка.Ссылка;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("АлкогольнаяПродукция", Выборка.Ссылка);
			
			МассивСтрок = ТаблицаСопоставления.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
				СписокНоменклатуры = ДанныеАлкогольнойПродукции.ТаблицаСопоставления[СтрокаТаблицы.ИдентификаторУпаковки];
				Если СписокНоменклатуры = Неопределено Тогда
					ДанныеАлкогольнойПродукции.ТаблицаСопоставления.Вставить(СтрокаТаблицы.ИдентификаторУпаковки, Новый Массив);
				КонецЕсли;
				
				СопоставленнаяНоменклатура = Новый Структура;
				СопоставленнаяНоменклатура.Вставить("Номенклатура", СтрокаТаблицы.Номенклатура);
				СопоставленнаяНоменклатура.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
				ДанныеАлкогольнойПродукции.ТаблицаСопоставления[СтрокаТаблицы.ИдентификаторУпаковки].Добавить(СопоставленнаяНоменклатура);
			КонецЦикла;
			
			Результат.Вставить(Выборка.Код, ДанныеАлкогольнойПродукции);
			
			ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАлкогольнойПродукции(Выборка.Ссылка, Ложь);
			
			Продолжить;
		КонецЕсли;
		
		Если Выборка.Ссылка.Пустая() Тогда
			АлкогольнаяПродукцияОбъект = Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.СоздатьЭлемент();
		Иначе
			АлкогольнаяПродукцияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		
		Для Каждого Колонка Из ТаблицаАлкогольнойПродукции.Колонки Цикл
			Если ЗначениеЗаполнено(Выборка[Колонка.Имя]) Тогда
				АлкогольнаяПродукцияОбъект[Колонка.Имя] = Выборка[Колонка.Имя];
			КонецЕсли;
		КонецЦикла;
		
		АлкогольнаяПродукцияОбъект.Записать();
		
		ДанныеАлкогольнойПродукции.АлкогольнаяПродукция = АлкогольнаяПродукцияОбъект.Ссылка;
		
		Результат.Вставить(Выборка.Код, ДанныеАлкогольнойПродукции);
		
		ИнтеграцияЕГАИСПереопределяемый.ПриЗагрузкеАлкогольнойПродукции(Выборка.Ссылка, Истина);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ЗагрузкаДанныхТСД

Функция ПараметрыПроверкиДанныхТСД(Форма, ОрганизацияЕГАИС) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЭтоФормаДокумента",                 СтрНачинаетсяС(Форма.ИмяФормы, "Документ."));
	Результат.Вставить("Форма",                             Форма);
	Результат.Вставить("ОрганизацияЕГАИС",                  ОрганизацияЕГАИС);
	Результат.Вставить("СоответствиеШтрихкодовСтрокДерева", Новый Соответствие);
	Результат.Вставить("ПараметрыСканирования",             ?(Результат.ЭтоФормаДокумента,
		ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Форма), Неопределено));
	Результат.Вставить("ДетализацияСтруктурыХранения",      Неопределено);
	Результат.Вставить("ДеревоМаркированнойПродукции",      Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру результата разбора полученных из ТСД данных
//
// Параметры:
//   ПараметрыСканирования - Структура - параметры сканирования формы
//
// Возвращаемое значение:
//   Структура - результат проверки и загрузки:
//   * ДокументОснование                          - ДокументСсылка - документ-основание (для контроля прикладного количества)
//   * АдресДанныхДокументаОснования              - Строка - адрес временного хранилища
//   * Упаковки                                   - Массив -
//   * ПартионнаяАлкогольнаяПродукция             - Массив - штрихкоды алкогольной немаркируемой продукции
//   * МаркируемаяАлкогольнаяПродукцияДопУказание - Массив - штрихкоды требующие указания данных номенклатуры
//   * МаркируемаяПродукция                       - Массив - распознанная маркированная продукция
//   * АдресВложенныеШтрихкоды                    - Строка - адрес временного хранилища
//   * АдресДереваУпаковок                        - Строка - адрес временного хранилища
//   * ЕстьОшибкиВДеревеУпаковок                  - Булево - флаг наличия ошибок
//   * ИндексОбрабатываемогоЭлемента              - Число  - 0 (для дальнейшей обработки)
//   * ИдентификаторУпаковки                      - Число  - идентификатор упаковки
//   * ОбрабатываемыйШтрихкод                     - Строка - "" (для дальнейшей обработки)
//   * ТекущаяОперация                            - Строка - "" (для дальнейшей обработки)
//   * ТекстОбщейОшибки                           - Строка - описание ошибки
//   * ОбщаяОшибка                                - Булево - флаг наличия ошибок
//
Функция РезультатЗагрузкиШтрихкодовИзТСД(ПараметрыСканирования)
	
	ЗагрузкаДанныхТСД = Новый Структура;
	
	// Результат: ошибка загрузки
	ЗагрузкаДанныхТСД.Вставить("ЕстьОшибкиВДереве",                          Ложь);
	ЗагрузкаДанныхТСД.Вставить("АдресДереваУпаковок",                        "");
	ЗагрузкаДанныхТСД.Вставить("ОбщаяОшибка",                                Ложь);
	ЗагрузкаДанныхТСД.Вставить("ТекстОбщейОшибки",                           "");
	
	ЗагрузкаДанныхТСД.Вставить("ТекущаяОперация",                            "");
	ЗагрузкаДанныхТСД.Вставить("ОбрабатываемыйШтрихкод",                     "");
	ЗагрузкаДанныхТСД.Вставить("ИдентификаторУпаковки",                      -1);
	ЗагрузкаДанныхТСД.Вставить("ИндексОбрабатываемогоЭлемента",              0);
	
	// Результат: произведена частичная или полная загрузка
	ЗагрузкаДанныхТСД.Вставить("АдресВложенныеШтрихкоды",                    "");
	ЗагрузкаДанныхТСД.Вставить("МаркируемаяПродукция",                       Новый Массив);
	ЗагрузкаДанныхТСД.Вставить("МаркируемаяАлкогольнаяПродукцияДопУказание", Новый Массив);
	ЗагрузкаДанныхТСД.Вставить("ПартионнаяАлкогольнаяПродукция",             Новый Массив);
	ЗагрузкаДанныхТСД.Вставить("Упаковки",                                   Новый Массив);
	ЗагрузкаДанныхТСД.Вставить("АдресДанныхДокументаОснования",              "");
	ЗагрузкаДанныхТСД.Вставить("ДокументОснование",                          ПараметрыСканирования.ДокументОснование);
	ЗагрузкаДанныхТСД.Вставить("ЕстьИерархия",                               Ложь);
	ЗагрузкаДанныхТСД.Вставить("ТребуетсяУточнениеДанных",                   Ложь);
	ЗагрузкаДанныхТСД.Вставить("ПараметрыУточненияДанных",                   Неопределено);
	
	// Обработанные строки
	ЗагрузкаДанныхТСД.Вставить("ДобавленныеСтроки", Новый Массив);
	ЗагрузкаДанныхТСД.Вставить("ИзмененныеСтроки",  Новый Массив);
	
	Возврат ЗагрузкаДанныхТСД;
	
КонецФункции

// Возвращает пустую таблицу для идентификации штрихкодов, не являющихся акцизными марками ЕГАИС
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица для дальнейшего распознавания:
//   * ШтриховойКод                      - Строка - считанный штрихкод
//   * Родитель                          - Строка - штрихкод вышестоящей в иерархии упаковки
//   * Количество                        - Число  - количество считанных штрихкодов
//   * ШтрихкодУпаковки                  - СправочникСсылка.ШтрихкодыУпаковокТоваров - распознанный элемент справочника
//   * ЭтоУпаковка                       - Булево - признак новой упаковки
//   * ЭтоИмеющаясяВБазеУпаковка         - Булево - признак существующей упаковки
//   * ЭтоПартионнаяАлкогольнаяПродукция - Булево - признак немаркируемой алкогольной продукции
//   * ЭтоПрочаяНоменклатура             - Булево - признак прочих штрихкодов номенклатуры
//
Функция ТаблицаНеАкцизныеМарки()
	
	ТаблицаНеАкцизныеМарки = Новый ТаблицаЗначений;
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("ШтриховойКод",                      ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("Количество",                        Метаданные.ОпределяемыеТипы.КоличествоЕГАИСНеотрицательное.Тип);
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("ШтрихкодУпаковки",                  Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("ЭтоУпаковка",                       Новый ОписаниеТипов("Булево"));
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("ЭтоИмеющаясяВБазеУпаковка",         Новый ОписаниеТипов("Булево"));
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("ЭтоПартионнаяАлкогольнаяПродукция", Новый ОписаниеТипов("Булево"));
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("ЭтоПрочаяНоменклатура",             Новый ОписаниеТипов("Булево"));
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("Родитель",                          Новый ОписаниеТипов("Строка"));
	ТаблицаНеАкцизныеМарки.Колонки.Добавить("НомерСтроки",                       Новый ОписаниеТипов("Число"));
	Возврат ТаблицаНеАкцизныеМарки;
	
КонецФункции

// Возвращает структуру с результатом разбора полученных из ТСД данных
//
// Параметры:
//   ШтрихкодыТСД - Массив - загруженные штрихкоды
//   ПараметрыПроверки - См. ПараметрыПроверкиДанныхТСД - параметры проверки.
//
// Возвращаемое значение:
//   Структура - (См. РезультатЗагрузкиШтрихкодовИзТСД)
//
Функция ОбработатьПолученныеДанныеТСД(ШтрихкодыТСД, ПараметрыПроверки) Экспорт
	
	ПараметрыСканирования = ПараметрыПроверки.ПараметрыСканирования;
	Детализация           = ПараметрыПроверки.ДетализацияСтруктурыХранения;
	
	ОбрезатьДанныеТСДДоДетализации(ШтрихкодыТСД, Детализация);
	ЕстьИерархия = ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(ШтрихкодыТСД);
	
	СоответствиеСчитанныхАкцизныхМарок         = Новый Соответствие;
	СоответствиеСчитанныхДанныхНеАкцизныхМарок = Новый Соответствие;
	КешДанныхРазбора                           = Новый Соответствие;
	
	НастройкиРазбораКодаМаркировки = Новый Структура;
	НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки());
	НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", Неопределено);
	
	Результат = РезультатЗагрузкиШтрихкодовИзТСД(ПараметрыСканирования);
	Результат.ЕстьИерархия = ЕстьИерархия;
	
	ТаблицаШтрихкодов = Новый ТаблицаЗначений;
	ТаблицаШтрихкодов.Колонки.Добавить("ШтриховойКод", ОбщегоНазначения.ОписаниеТипаСтрока(300));
	ТаблицаШтрихкодов.Колонки.Добавить("Количество",   Метаданные.ОпределяемыеТипы.КоличествоЕГАИСНеотрицательное.Тип);
	ТаблицаШтрихкодов.Колонки.Добавить("Родитель",     Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаДанныхТСД Из ШтрихкодыТСД Цикл
		
		Если СтрокаДанныхТСД.Свойство("ШтрихкодМаркиАлкогольнойПродукции")
			И ВидУпаковкиИС(СтрокаДанныхТСД.ШтрихкодМаркиАлкогольнойПродукции, КешДанныхРазбора, НастройкиРазбораКодаМаркировки) = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ДанныеМаркируемойПродукции = Новый Структура;
			ДанныеМаркируемойПродукции.Вставить("ШтриховойКодТовара", СтрокаДанныхТСД.Штрихкод);
			ДанныеМаркируемойПродукции.Вставить("АкцизнаяМарка",      СтрокаДанныхТСД.ШтрихкодМаркиАлкогольнойПродукции);
			ДанныеМаркируемойПродукции.Вставить("РезультатОбработки", Неопределено);
			Если СтрокаДанныхТСД.Свойство("ШтрихкодУпаковки")
				И ЗначениеЗаполнено(СтрокаДанныхТСД.ШтрихкодУпаковки) Тогда
				Если ВидУпаковкиИС(СтрокаДанныхТСД.ШтрихкодУпаковки, КешДанныхРазбора, НастройкиРазбораКодаМаркировки) = Перечисления.ВидыУпаковокИС.Логистическая Тогда
					ДанныеМаркируемойПродукции.Вставить("Родитель", СтрокаДанныхТСД.ШтрихкодУпаковки);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Код %1 не является логистической упаковкой алкогольной продукции. Пропущен.'"),
							СтрокаДанныхТСД.ШтрихкодУпаковки));
				КонецЕсли;
			КонецЕсли;
			
			Результат.МаркируемаяПродукция.Добавить(ДанныеМаркируемойПродукции);
			
			СоответствиеСчитанныхАкцизныхМарок.Вставить(СтрокаДанныхТСД.ШтрихкодМаркиАлкогольнойПродукции, "");
			
		ИначеЕсли ВидУпаковкиИС(СтрокаДанныхТСД.Штрихкод, КешДанныхРазбора, НастройкиРазбораКодаМаркировки) = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ДанныеМаркируемойПродукции = Новый Структура;
			ДанныеМаркируемойПродукции.Вставить("ШтриховойКодТовара", "");
			ДанныеМаркируемойПродукции.Вставить("АкцизнаяМарка",      СтрокаДанныхТСД.Штрихкод);
			ДанныеМаркируемойПродукции.Вставить("РезультатОбработки", Неопределено);
			Если СтрокаДанныхТСД.Свойство("ШтрихкодУпаковки")
				И ЗначениеЗаполнено(СтрокаДанныхТСД.ШтрихкодУпаковки) Тогда
				Если ВидУпаковкиИС(СтрокаДанныхТСД.ШтрихкодУпаковки, КешДанныхРазбора, НастройкиРазбораКодаМаркировки) = Перечисления.ВидыУпаковокИС.Логистическая Тогда
					ДанныеМаркируемойПродукции.Вставить("Родитель", СтрокаДанныхТСД.ШтрихкодУпаковки);
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Код %1 не является логистической упаковкой алкогольной продукции. Пропущен.'"),
							СтрокаДанныхТСД.ШтрихкодУпаковки));
				КонецЕсли;
			КонецЕсли;
			
			Результат.МаркируемаяПродукция.Добавить(ДанныеМаркируемойПродукции);
			
			СоответствиеСчитанныхАкцизныхМарок.Вставить(СтрокаДанныхТСД.Штрихкод, "");
			
		Иначе
			
			СоответствиеСчитанныхДанныхНеАкцизныхМарок.Вставить(СтрокаДанныхТСД.Штрихкод, СтрокаДанныхТСД);
			
			НоваяСтрока = ТаблицаШтрихкодов.Добавить();
			НоваяСтрока.ШтриховойКод = СтрокаДанныхТСД.Штрихкод;
			НоваяСтрока.Количество   = СтрокаДанныхТСД.Количество;
			Если СтрокаДанныхТСД.Свойство("ШтрихкодУпаковки")
				И ЗначениеЗаполнено(СтрокаДанныхТСД.ШтрихкодУпаковки) Тогда
				Если ВидУпаковкиИС(СтрокаДанныхТСД.ШтрихкодУпаковки, КешДанныхРазбора, НастройкиРазбораКодаМаркировки) = Перечисления.ВидыУпаковокИС.Логистическая Тогда
					НоваяСтрока.Родитель = СтрокаДанныхТСД.ШтрихкодУпаковки;
				Иначе
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон(
							НСтр("ru = 'Код %1 не является логистической упаковкой алкогольной продукции. Пропущен.'"),
							СтрокаДанныхТСД.ШтрихкодУпаковки));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаНеАкцизныеМарки = ТаблицаНеАкцизныеМарки();
	
	ТаблицаШтрихкодов.Свернуть("ШтриховойКод, Родитель", "Количество");
	Для Каждого СтрокаТЧ Из ТаблицаШтрихкодов Цикл
		НоваяСтрока = ТаблицаНеАкцизныеМарки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		НоваяСтрока.НомерСтроки = ТаблицаНеАкцизныеМарки.Количество();
	КонецЦикла;
	
	Если ТаблицаНеАкцизныеМарки.Количество() > 0 Тогда
		
		ИнтеграцияЕГАИСПереопределяемый.ОпределитьТипыШтриховыхКодовНеМаркируемойПродукцииТСД(ТаблицаНеАкцизныеМарки);
		
	КонецЕсли;
	
	СуществующиеУпаковки         = Новый Массив;
	НовыеУпаковки                = Новый Массив;
	СсылкиНаСуществующиеУпаковки = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНеАкцизныеМарки Цикл
		
		Если ВидУпаковкиИС(СтрокаТаблицы.ШтриховойКод, КешДанныхРазбора, НастройкиРазбораКодаМаркировки) = Перечисления.ВидыУпаковокИС.Логистическая Тогда
			
			Если СтрокаТаблицы.ЭтоИмеющаясяВБазеУпаковка Тогда
				
				СуществующиеУпаковки.Добавить(СтрокаТаблицы.ШтриховойКод);
				СсылкиНаСуществующиеУпаковки.Добавить(СтрокаТаблицы.ШтрихкодУпаковки);
				Если Детализация <> Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
					Результат.Упаковки.Добавить(
						Новый Структура("Штрихкод, Родитель",
						СтрокаТаблицы.ШтриховойКод, СтрокаТаблицы.Родитель));
				КонецЕсли;
				
			Иначе
				
				НовыеУпаковки.Добавить(СтрокаТаблицы.ШтриховойКод);
				Если Детализация = Неопределено
					Или Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
					Продолжить;
				ИначеЕсли ПараметрыПроверки.ЭтоФормаДокумента Тогда
					Продолжить;
				Иначе
					Результат.Упаковки.Добавить(
						Новый Структура("Штрихкод, Родитель",
							СтрокаТаблицы.ШтриховойКод, СтрокаТаблицы.Родитель));
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаТаблицы.ЭтоПартионнаяАлкогольнаяПродукция Тогда
			
			ДанныеПартионнойПродукции = Новый Структура;
			ДанныеПартионнойПродукции.Вставить("ШтриховойКод",       СтрокаТаблицы.ШтриховойКод);
			ДанныеПартионнойПродукции.Вставить("Количество",         СтрокаТаблицы.Количество);
			ДанныеПартионнойПродукции.Вставить("РезультатОбработки", Неопределено);
			
			Результат.ПартионнаяАлкогольнаяПродукция.Добавить(ДанныеПартионнойПродукции);
			
		Иначе
			
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Код %1 не является штрихкодом партионной продукции, штрихкодом логистической упаковки
					           |или акцизной маркой алкогольной продукции. Пропущен.'"),
					СтрокаТаблицы.ШтриховойКод));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная Тогда
		
		Если НовыеУпаковки.Количество() + СуществующиеУпаковки.Количество() > 1 И Не ЕстьИерархия Тогда
			ПроверитьКорректностьСчитанныхТСДУпаковок(Результат,
				ПараметрыПроверки.ДеревоМаркированнойПродукции,
				НовыеУпаковки, СуществующиеУпаковки,
				ПараметрыПроверки.СоответствиеШтрихкодовСтрокДерева);
		КонецЕсли;
		
	ИначеЕсли Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки Тогда
		
		ПараметрыСканирования.ОрганизацияЕГАИС = ПараметрыПроверки.ОрганизацияЕГАИС;
		ДанныеИмеющихсяУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(СсылкиНаСуществующиеУпаковки, ПараметрыСканирования);
		Для Каждого СтрокаТаблицы Из ДанныеИмеющихсяУпаковок.МаркированныеТовары Цикл
			
			Если СоответствиеСчитанныхАкцизныхМарок.Получить(СтрокаТаблицы.Штрихкод) = Неопределено Тогда
				
				ДанныеМаркируемойПродукции = Новый Структура;
				ДанныеМаркируемойПродукции.Вставить("ШтриховойКодТовара", "");
				ДанныеМаркируемойПродукции.Вставить("АкцизнаяМарка",      СтрокаТаблицы.Штрихкод);
				ДанныеМаркируемойПродукции.Вставить("РезультатОбработки", Неопределено);
				
				Результат.МаркируемаяПродукция.Добавить(ДанныеМаркируемойПродукции);
				
				СоответствиеСчитанныхАкцизныхМарок.Вставить(СтрокаТаблицы.Штрихкод, "");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Проверить, что в считанных штриховых кодах есть данные по упаковкам или по алкогольной продукции
	// Проверить, что в случае БЕЗ ИЕРАРХИИ в данных есть только 1 упаковка
	ПроверитьЗаполнениеДанныхТСД(Результат, Детализация, Результат.Упаковки.Количество(), ЕстьИерархия);
	
	Если Результат.ОбщаяОшибка Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПолучитьДанныеПоШтрихкодамТСД(Результат, ПараметрыСканирования, ПараметрыПроверки, КешДанныхРазбора);
	
	Результат.АдресДанныхДокументаОснования = ПараметрыСканирования.АдресДанныхДокументаОснования;
	Результат.ДокументОснование             = ПараметрыСканирования.ДокументОснование;
	
	Возврат Результат;
	
КонецФункции

// Проверяет корректность данных поступивших с ТСД
// 
// Параметры:
//   Результат                    - См. РезультатЗагрузкиШтрихкодовИзТСД - данные для проверки.
//   ДетализацияСтруктурыХранения - Неопределено, ПеречислениеСсылка.ДетализацияСтруктурыХраненияИС - 
//     используемая детализация структуры хранения (Неопределено для форм документов)
//   ВсегоУпаковок                - Число     - количество считанных штрихкодов новых и существующих упаковок
//   ЕстьИерархия                 - Булево    - признак использования иерархической загрузки (допускает произвольную
//                                              вложенность при загрузке).
//
Процедура ПроверитьЗаполнениеДанныхТСД(Результат, ДетализацияСтруктурыХранения, ВсегоУпаковок, ЕстьИерархия)
	
	Номенклатуры = Результат.ПартионнаяАлкогольнаяПродукция.Количество();
	Марок        = Результат.МаркируемаяПродукция.Количество();
	Всего        = ВсегоУпаковок + Номенклатуры + Марок;
	
	Если Всего = 0 Тогда
		Результат.ОбщаяОшибка      = Истина;
		Результат.ТекстОбщейОшибки = НСтр("ru = 'В считанных штриховых кодах нет данных ни по упаковкам, ни по алкогольной продукции.'");
	КонецЕсли;
	
	Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
		Или ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.Полная Тогда
		
		Если Марок > 0
			И ВсегоУпаковок > 1
			И Не ЕстьИерархия Тогда
			
			Результат.ОбщаяОшибка      = Истина;
			Результат.ТекстОбщейОшибки = НСтр("ru = 'Одновременно считана маркируемая алкогольная продукция и несколько упаковок. Данные обработаны не будут.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбрезатьДанныеТСДДоДетализации(ДанныеТСД, Знач Детализация)
	
	Если Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.Полная Тогда
		Возврат;
	ИначеЕсли Детализация = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками Тогда
		Детализация = Истина;
	Иначе
		Детализация = Ложь;
	КонецЕсли;
	
	ШтрихкодыУпаковок = Новый Массив;
	ШтрихкодыВнешнихУпаковок = Новый Массив;
	ЭлементыУдалить = Новый Массив;
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		Если ЭлементМассива.Свойство("ШтрихкодУпаковки")
			И Не ПустаяСтрока(ЭлементМассива.ШтрихкодУпаковки)
			И ШтрихкодыУпаковок.Найти(ЭлементМассива.ШтрихкодУпаковки) = Неопределено Тогда
			
			ШтрихкодыУпаковок.Добавить(ЭлементМассива.ШтрихкодУпаковки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Детализация Тогда
		Для Каждого ЭлементМассива Из ДанныеТСД Цикл
			
			Если ЭлементМассива.Свойство("ШтрихкодУпаковки")
				И Не ПустаяСтрока(ЭлементМассива.ШтрихкодУпаковки)
				И ШтрихкодыУпаковок.Найти(ЭлементМассива.Штрихкод) <> Неопределено
				И ШтрихкодыВнешнихУпаковок.Найти(ЭлементМассива.Штрихкод) = Неопределено Тогда
				
				ШтрихкодыВнешнихУпаковок.Добавить(ЭлементМассива.ШтрихкодУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из ДанныеТСД Цикл
		
		Если (Не Детализация И ШтрихкодыУпаковок.Найти(ЭлементМассива.Штрихкод)<>Неопределено)
			ИЛИ (Детализация И ШтрихкодыВнешнихУпаковок.Найти(ЭлементМассива.Штрихкод)<>Неопределено) Тогда
			
			ЭлементыУдалить.Добавить(ЭлементМассива);
			
		КонецЕсли;
		
		Если ЭлементМассива.Свойство("ШтрихкодУпаковки")
			И((Не Детализация И ШтрихкодыУпаковок.Найти(ЭлементМассива.ШтрихкодУпаковки)<>Неопределено)
				ИЛИ (Детализация И ШтрихкодыВнешнихУпаковок.Найти(ЭлементМассива.ШтрихкодУпаковки)<>Неопределено)) Тогда
			
			ЭлементМассива.ШтрихкодУпаковки = "";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементУдалить Из ЭлементыУдалить Цикл
		ДанныеТСД.Удалить(ДанныеТСД.Найти(ЭлементУдалить));
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеПоШтрихкодамТСД(РезультатПроверки, ПараметрыСканирования, ПараметрыПроверки, КешДанныхРазбора)
	
	Форма             = ПараметрыПроверки.Форма;
	ЭтоФормаДокумента = ПараметрыПроверки.ЭтоФормаДокумента;
	
	ДанныеШтрихкодов = Новый Массив;
	Для Каждого ЭлементМассива Из РезультатПроверки.МаркируемаяПродукция Цикл
		
		ДанныеШтрихкода = Новый Структура(
			"Штрихкод, Количество", ЭлементМассива.АкцизнаяМарка, 1);
		ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из РезультатПроверки.Упаковки Цикл
		
		Если ЭлементМассива <> Неопределено Тогда
			
			Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
				ДанныеШтрихкода = Новый Структура(
					"Штрихкод, Количество", ЭлементМассива.Штрихкод, 1);
			ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
				ДанныеШтрихкода = Новый Структура(
					"Штрихкод, Количество", ЭлементМассива, 1);
			КонецЕсли;
			
			ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива Из РезультатПроверки.ПартионнаяАлкогольнаяПродукция Цикл
		
		ДанныеШтрихкода = Новый Структура(
			"Штрихкод, Количество", ЭлементМассива.ШтриховойКод, ЭлементМассива.Количество);
		ДанныеШтрихкодов.Добавить(ДанныеШтрихкода);
		
	КонецЦикла;
	
	ИдентификаторРезультатаОбработки = Новый УникальныйИдентификатор;
	
	ПараметрыСканированияДляГрупповойОбработки = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыСканирования, Ложь);
	ПараметрыСканированияДляГрупповойОбработки.ПроверятьДублиКодовМаркировки = "Иерархия";
	
	РезультатОбработкиШтрихкодов = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьШтрихкоды(
		ДанныеШтрихкодов, ПараметрыСканированияДляГрупповойОбработки,
		Неопределено, ИдентификаторРезультатаОбработки, КешДанныхРазбора);
	
	// 0. Соответствие элементов
	СоответствиеЭлементов = Новый Соответствие;
	
	Для Каждого ЭлементМассива Из РезультатПроверки.МаркируемаяПродукция Цикл
		
		Штрихкод = ЭлементМассива.АкцизнаяМарка;
		РезультатОбработки = РезультатОбработкиШтрихкодов.РезультатыОбработки[Штрихкод];
		
		ЗначениеСопоставления = Новый Структура;
		ЗначениеСопоставления.Вставить("Коллекция",          РезультатПроверки.МаркируемаяПродукция);
		ЗначениеСопоставления.Вставить("ЭлементКоллекции",   ЭлементМассива);
		ЗначениеСопоставления.Вставить("ТребуетсяУточнение", Ложь);
		
		СоответствиеЭлементов.Вставить(РезультатОбработки, ЗначениеСопоставления);
		
		ЭлементМассива.РезультатОбработки = РезультатОбработки;
		
	КонецЦикла;
	
	МассивУпаковок = Новый Массив;
	Для Каждого ЭлементМассива Из РезультатПроверки.Упаковки Цикл
		
		Штрихкод = ЭлементМассива.Штрихкод;
		РезультатОбработки = РезультатОбработкиШтрихкодов.РезультатыОбработки[Штрихкод];
		
		ЗначениеСопоставления = Новый Структура;
		ЗначениеСопоставления.Вставить("Коллекция",          РезультатПроверки.Упаковки);
		ЗначениеСопоставления.Вставить("ЭлементКоллекции",   ЭлементМассива);
		ЗначениеСопоставления.Вставить("ТребуетсяУточнение", Ложь);
		
		СоответствиеЭлементов.Вставить(РезультатОбработки, ЗначениеСопоставления);
		
		ДанныеУпаковки = Новый Структура;
		ДанныеУпаковки.Вставить("ШтриховойКод",       ЭлементМассива);
		ДанныеУпаковки.Вставить("РезультатОбработки", РезультатОбработки);
		
		МассивУпаковок.Добавить(ДанныеУпаковки);
		
	КонецЦикла;
	
	РезультатПроверки.Упаковки = МассивУпаковок;
	
	Для Каждого ЭлементМассива Из РезультатПроверки.ПартионнаяАлкогольнаяПродукция Цикл
		
		Штрихкод = ЭлементМассива.ШтриховойКод;
		РезультатОбработки = РезультатОбработкиШтрихкодов.РезультатыОбработки[Штрихкод];
		
		ЗначениеСопоставления = Новый Структура;
		ЗначениеСопоставления.Вставить("Коллекция",          РезультатПроверки.ПартионнаяАлкогольнаяПродукция);
		ЗначениеСопоставления.Вставить("ЭлементКоллекции",   ЭлементМассива);
		ЗначениеСопоставления.Вставить("ТребуетсяУточнение", Ложь);
		
		СоответствиеЭлементов.Вставить(РезультатОбработки, ЗначениеСопоставления);
		
		ЭлементМассива.РезультатОбработки = РезультатОбработки;
		
	КонецЦикла;
	
	// 1. Проверка на ошибки
	ДанныеДокументаОснования = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование) Тогда
		ДанныеДокументаОснования = АкцизныеМаркиЕГАИС.ДанныеДокументаОснования(ПараметрыСканирования);
	КонецЕсли;
	
	РезультатыОбработкиСОшибками = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
		
		РезультатОбработки = КлючИЗначение.Значение;
		ДанныеШтрихкода    = РезультатОбработки.ДанныеШтрихкода;
		
		ЗначениеСоответствия = СоответствиеЭлементов[РезультатОбработки];
		
		// 1.1. Проверки на ошибки
		Если РезультатОбработки.ОшибкаДопустимостиВидовПродукции
			Или РезультатОбработки.ОбщаяОшибка Тогда
			РезультатПроверки.ОбщаяОшибка      = Истина;
			РезультатПроверки.ТекстОбщейОшибки = РезультатОбработки.ТекстОшибки;
			Прервать;
		КонецЕсли;
		
		Если РезультатОбработки.ЕстьОшибкиВДеревеУпаковок Тогда
			РезультатПроверки.ЕстьОшибкиВДереве   = Истина;
			РезультатПроверки.АдресДереваУпаковок = РезультатОбработки.АдресДереваУпаковок;
			Прервать;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки)
			И ТипЗнч(ДанныеШтрихкода) = Тип("Структура") Тогда
			РезультатыОбработкиСОшибками.Добавить(РезультатОбработки);
			Продолжить;
		КонецЕсли;
		
		// 1.2. Проверка необходимости уточнения данных
		Если ЗначениеСоответствия.Коллекция = РезультатПроверки.МаркируемаяПродукция
			Или ЗначениеСоответствия.Коллекция = РезультатПроверки.ПартионнаяАлкогольнаяПродукция Тогда
			
			ТребуетсяУказаниеДопДанных = ПараметрыСканирования.ЗапрашиватьНоменклатуру
				И (РезультатОбработки.ТребуетсяСопоставлениеНоменклатуры Или РезультатОбработки.ТребуетсяУточнениеДанных);
			
			Если ДанныеШтрихкода <> Неопределено
				И Не ТребуетсяУказаниеДопДанных Тогда
				
				Если Не ТребуетсяУказаниеДопДанных
					И ПараметрыСканирования.ЗапрашиватьНоменклатуру
					И (Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
						Или Не ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция)) Тогда
					ТребуетсяУказаниеДопДанных = Истина;
				КонецЕсли;
				
				Если Не ТребуетсяУказаниеДопДанных
					И ЗначениеЗаполнено(ПараметрыСканирования.ДокументОснование)
					И Не ЗначениеЗаполнено(ДанныеШтрихкода.Серия)
					И ДанныеДокументаОснования <> Неопределено Тогда
					
					ПараметрыПоиска = Новый Структура;
					ПараметрыПоиска.Вставить("Номенклатура",   ДанныеШтрихкода.Номенклатура);
					ПараметрыПоиска.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
					
					НайденныеСтроки = ДанныеДокументаОснования.НайтиСтроки(ПараметрыПоиска);
					Если НайденныеСтроки.Количество() > 0
						И ЗначениеЗаполнено(НайденныеСтроки[0].Серия) Тогда
						ТребуетсяУказаниеДопДанных = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТребуетсяУказаниеДопДанных Тогда
				Если Не ПараметрыСканирования.ЗапрашиватьНоменклатуру Тогда
					РезультатОбработки.ЕстьОшибки  = Истина;
					РезультатОбработки.ТекстОшибки = НСтр("ru = '<не сопоставлено>'");
					РезультатыОбработкиСОшибками.Добавить(РезультатОбработки);
				Иначе
					ЗначениеСоответствия.ТребуетсяУточнение = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатПроверки.ЕстьОшибкиВДереве И РезультатыОбработкиСОшибками.Количество() > 0 Тогда
		
		ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатПроверки.АдресДереваУпаковок);
		
		Для Каждого РезультатОбработки Из РезультатыОбработкиСОшибками Цикл
			НоваяСтрокаДерева = ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, РезультатОбработки.ДанныеШтрихкода);
			НоваяСтрокаДерева.ЕстьОшибки  = Истина;
			НоваяСтрокаДерева.ТекстОшибки = РезультатОбработки.ТекстОшибки;
		КонецЦикла;
		
		ПоместитьВоВременноеХранилище(ДеревоУпаковок, РезультатОбработки.АдресДереваУпаковок);
		
	ИначеЕсли РезультатыОбработкиСОшибками.Количество() > 0 Тогда
		
		РезультатПроверки.ЕстьОшибкиВДереве = Истина;
		ДеревоУпаковок = ГрупповаяОбработкаШтрихкодовИС.ИнициализироватьДеревоУпаковок(ПараметрыСканирования);
		
		Для Каждого РезультатОбработки Из РезультатыОбработкиСОшибками Цикл
			НоваяСтрокаДерева = ДеревоУпаковок.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, РезультатОбработки.ДанныеШтрихкода);
			НоваяСтрокаДерева.ЕстьОшибки  = Истина;
			НоваяСтрокаДерева.ТекстОшибки = РезультатОбработки.ТекстОшибки;
		КонецЦикла;
		
		РезультатПроверки.АдресДереваУпаковок = ПоместитьВоВременноеХранилище(ДеревоУпаковок, Форма.УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если РезультатПроверки.ЕстьОшибкиВДереве
		Или РезультатПроверки.ОбщаяОшибка Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Обработка всех строк, не требующих вмешательства пользователя.
	Если ЭтоФормаДокумента Тогда
		
		ШтрихкодыТребующиеОбработкиПользователем = Новый Массив;
		
		ДеревоУпаковокОбработано = Ложь;
		ОбработанныеШтрихкоды    = Новый Массив;
		МенеджерОбработки        = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Форма.ИмяФормы);
		
		ПропущенныеШтрихкодыИзДереваУпаковок = Новый Массив;
		
		Для Каждого КлючИЗначение Из РезультатОбработкиШтрихкодов.РезультатыОбработки Цикл
			
			Штрихкод           = КлючИЗначение.Ключ;
			РезультатОбработки = КлючИЗначение.Значение;
			
			Если РезультатОбработки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеСоответствия = СоответствиеЭлементов[РезультатОбработки];
			
			Если ЗначениеСоответствия.ТребуетсяУточнение Тогда
				ШтрихкодыТребующиеОбработкиПользователем.Добавить(ЗначениеСоответствия.ЭлементКоллекции);
			ИначеЕсли ОбработанныеШтрихкоды.Найти(Штрихкод) <> Неопределено Тогда
				Продолжить;
			Иначе
				
				ОбработанныеШтрихкоды.Добавить(Штрихкод);
				
				ДанныеВДеревеУпаковок = ЗначениеЗаполнено(РезультатОбработки.АдресДереваУпаковок);
				Если ДанныеВДеревеУпаковок И Не ДеревоУпаковокОбработано Тогда
					
					ВложенныеШтрихкоды = ШтрихкодированиеИС.ИнициализацияВложенныхШтрихкодов();
					ВложенныеШтрихкоды.ДеревоУпаковок = ПолучитьИзВременногоХранилища(РезультатОбработки.АдресДереваУпаковок);
					ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
					
					РезультатДобавления = МенеджерОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
					Если РезультатДобавления <> Неопределено Тогда
						ГрупповаяОбработкаШтрихкодовИС.ПеренестиДобавленныеИзмененныеСтроки(РезультатПроверки, РезультатДобавления);
					КонецЕсли;
					
					ДеревоУпаковокОбработано = Истина;
					
				КонецЕсли;
				
				Если Не ДанныеВДеревеУпаковок Тогда
					
					ДанныеШтрихкода = РезультатОбработки.ДанныеШтрихкода;
					Если ДанныеШтрихкода.НайденВоВложенныхУпаковках Тогда
						ПропущенныеШтрихкодыИзДереваУпаковок.Добавить(ДанныеШтрихкода);
						Продолжить;
					КонецЕсли;
					
					РезультатДобавления = МенеджерОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
					Если РезультатДобавления <> Неопределено Тогда
						ГрупповаяОбработкаШтрихкодовИС.ПеренестиДобавленныеИзмененныеСтроки(РезультатПроверки, РезультатДобавления);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// На текущий момент все коды обрабатываются через получение ДереваУпаковок
		// и для всех кодов потребительских упаковок НайденВоВложенныхУпаковках = Истина
		Если Не ДеревоУпаковокОбработано Тогда
			Для Каждого ДанныеШтрихкода Из ПропущенныеШтрихкодыИзДереваУпаковок Цикл
				
				РезультатДобавления = МенеджерОбработки.ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования);
				Если РезультатДобавления <> Неопределено Тогда
					ГрупповаяОбработкаШтрихкодовИС.ПеренестиДобавленныеИзмененныеСтроки(РезультатПроверки, РезультатДобавления);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		РезультатПроверки.Упаковки.Очистить();
		РезультатПроверки.МаркируемаяПродукция.Очистить();
		РезультатПроверки.ПартионнаяАлкогольнаяПродукция.Очистить();
		РезультатПроверки.МаркируемаяАлкогольнаяПродукцияДопУказание = ШтрихкодыТребующиеОбработкиПользователем;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьСчитанныхТСДУпаковок(РезультатПроверки, ДеревоМаркированнойПродукции, НовыеУпаковки, СуществующиеУпаковки, СоответствиеШтрихкодовСтрокДерева)

	МассивПредполагаемыхРодителей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваровРодитель.ЗначениеШтрихкода  КАК Упаковка,
	|	ШтрихкодыУпаковокТоваровВложенных.ЗначениеШтрихкода КАК ВложеннаяУпаковка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваровВложенных
	|		ПО ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод = ШтрихкодыУпаковокТоваровВложенных.Ссылка
	|			И (ШтрихкодыУпаковокТоваровВложенных.ТипУпаковки <> ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МаркированныйТовар))
	|			И (ШтрихкодыУпаковокТоваровВложенных.ЗначениеШтрихкода В (&ШтрихкодыУпаковок))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваровРодитель
	|		ПО ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковокТоваровРодитель.Ссылка
	|ГДЕ
	|	ШтрихкодыУпаковокТоваровРодитель.ЗначениеШтрихкода В(&ШтрихкодыУпаковок)";
	
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", СуществующиеУпаковки);
	
	ТаблицаВложенностиСуществующихУпаковок = Запрос.Выполнить().Выгрузить();
	ТаблицаВложенностиСуществующихУпаковок.Индексы.Добавить("ВложеннаяУпаковка");
	
	Для Каждого ШтрихкодНовойУпаковки Из НовыеУпаковки Цикл
		
		ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(ШтрихкодНовойУпаковки);
		Если ИдентификаторСтроки <> Неопределено Тогда
			СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаДерева <> Неопределено Тогда
				
				СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
				Если СтрокаРодитель = Неопределено Тогда
					ШтриховойКодПредполагаемогоРодителя = Неопределено;
				Иначе
					ШтриховойКодПредполагаемогоРодителя = СтрокаРодитель.Штрихкод;
				КонецЕсли;
				
				Если МассивПредполагаемыхРодителей.Найти(ШтриховойКодПредполагаемогоРодителя) <> Неопределено Тогда
					МассивПредполагаемыхРодителей.Добавить(ШтриховойКодПредполагаемогоРодителя);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ШтрихкодСуществующейУпаковки Из СуществующиеУпаковки Цикл
		
		ШтриховойКодОбработан = Ложь;
		
		ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(ШтрихкодСуществующейУпаковки);
		Если ИдентификаторСтроки <> Неопределено Тогда
			
			СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаДерева <> Неопределено Тогда
				
				ШтриховойКодОбработан = Истина;
				
				СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
				Если СтрокаРодитель = Неопределено Тогда
					ШтриховойКодПредполагаемогоРодителя = Неопределено;
				Иначе
					ШтриховойКодПредполагаемогоРодителя = СтрокаРодитель.Штрихкод;
				КонецЕсли;
				
				Если МассивПредполагаемыхРодителей.Найти(ШтриховойКодПредполагаемогоРодителя) <> Неопределено Тогда
					МассивПредполагаемыхРодителей.Добавить(ШтриховойКодПредполагаемогоРодителя);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ШтриховойКодОбработан Тогда
			
			НайденнаяСтрока = ТаблицаВложенностиСуществующихУпаковок.Найти(ШтрихкодСуществующейУпаковки, "ВложеннаяУпаковка");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Если МассивПредполагаемыхРодителей.Найти(НайденнаяСтрока.Упаковка) = Неопределено Тогда
					МассивПредполагаемыхРодителей.Добавить(НайденнаяСтрока.Упаковка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПредполагаемыхРодителей.Количество() > 1 Тогда
		
		РезультатПроверки.ЕстьОшибки = Истина;
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Для считанных упаковок не удалось определить упаковку, в которой содержатся другие упаковки.'");
		
	ИначеЕсли МассивПредполагаемыхРодителей.Количество() = 1 Тогда
		
		РезультатПроверки.Упаковки.Добавить(МассивПредполагаемыхРодителей[0]);
		
	Иначе 
		
		РезультатПроверки.Упаковки.Добавить(Неопределено);
		
	КонецЕсли;

КонецПроцедуры

Функция ВидУпаковкиИС(Штрихкод, КешДанныхРазбора, НастройкиРазбораКодаМаркировки)
	
	Возврат ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
		Штрихкод,
		Перечисления.ВидыПродукцииИС.Алкогольная,
		КешДанныхРазбора, НастройкиРазбораКодаМаркировки).ВидУпаковки;
	
КонецФункции

#КонецОбласти

#Область НастройкиВыбораАлкогольнойПродукции

Процедура СохранитьНастройкиВыбораМаркируемойПродукции(Форма, Ссылка) Экспорт
	
	СохраняемыеНастройки = Новый Структура;
	СохраняемыеНастройки.Вставить("СохраненВыборПоМаркируемойПродукции", Форма.СохраненВыборПоМаркируемойПродукции);
	СохраняемыеНастройки.Вставить("ДанныеВыбораПоМаркируемойПродукции",  Форма.ДанныеВыбораПоМаркируемойПродукции);
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(Ссылка, "ДанныеВыбораМаркируемойПродукции", СохраняемыеНастройки);
	
КонецПроцедуры

Процедура ВосстановитьНастройкиВыбораАлкогольнойПродукции(Форма, Ссылка) Экспорт
	
	НастройкиВыбораАлкогольнойПродукции = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(Ссылка, "ДанныеВыбораМаркируемойПродукции");
	Если НастройкиВыбораАлкогольнойПродукции <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, НастройкиВыбораАлкогольнойПродукции);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПротоколОбмена

Функция ЗаполнитьДеревоФайловПротоколаОбмена(Документ, ДеревоФайлов, ТекстДокументаЕГАИС) Экспорт
	
	ЭтоДокументОснование = Ложь;
	ТипДокумента         = ТипЗнч(Документ);
	
	Если Метаданные.Документы.АктПостановкиНаБалансЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаАктПостановкиНаБалансЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.АктСписанияЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаАктСписанияЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;

	Если Метаданные.Документы.ВозвратИзРегистра2ЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаВозвратИзРегистра2ЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ПередачаВРегистр2ЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаПередачаВРегистр2ЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ТТНВходящаяЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаТТНВходящаяЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ТТНИсходящаяЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаТТНИсходящаяЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ЧекЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ЧекЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаЧекЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ЧекЕГАИСВозврат.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ЧекЕГАИСВозврат") Тогда
		
		ЗаполнитьПоОснованиюДокументаЧекЕГАИСВозврат(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.УведомлениеОПланируемомИмпортеЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаУведомлениеОПланируемомИмпортеЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Если Метаданные.Документы.ОтчетОПроизводствеЕГАИС.Реквизиты.ДокументОснование.Тип.Типы().Найти(ТипДокумента) <> Неопределено
		И ТипДокумента <> Тип("ДокументСсылка.ОтчетОПроизводствеЕГАИС") Тогда
		
		ЗаполнитьПоОснованиюДокументаОтчетОПроизводствеЕГАИС(Документ, ДеревоФайлов, ТекстДокументаЕГАИС);
		ЭтоДокументОснование = Истина;
		
	КонецЕсли;
	
	Возврат ЭтоДокументОснование;
	
КонецФункции

Процедура ЗаполнитьПоОснованиюДокументаАктПостановкиНаБалансЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОрганизацияЕГАИС          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.АктПостановкиНаБалансЕГАИС;
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя)
		И СтатусыОформления[МетаданныеДокумента.Имя] <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
		
		Представления   = ПредставлениеДокумента(МетаданныеДокумента);
		ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
		
		Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			СформироватьНадпись = Истина;
		Иначе
			РезультатыЗапросаПередачиВРегистры2и3 = РезультатыЗапросаПередачиВРегистры2и3ПоТТНВходящей(ДокументОснование);
			Если РезультатыЗапросаПередачиВРегистры2и3[РезультатыЗапросаПередачиВРегистры2и3.Количество() - 1].Пустой() Тогда
				СформироватьНадпись = Ложь;
			Иначе
				СформироватьНадпись = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СформироватьНадпись Тогда
			ТекстНадписи = Неопределено;
			ИмяКоманды   = Неопределено;
		ИначеЕсли ПравоДобавления Тогда
			ТекстНадписи = Представления.КомандаСоздать;
			ИмяКоманды   = Представления.ИмяКомандыСоздать;
		ИначеЕсли ТаблицаДокументы.Количество() > 0 Тогда
			ТекстНадписи = Представления.ДокументНеОформлен;
			ИмяКоманды   = Неопределено;
		Иначе
			ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
			ИмяКоманды   = Неопределено;
		КонецЕсли;
		
		Если ТекстНадписи <> Неопределено Тогда
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГосИС;
			КонецЕсли;
			
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды);
			
			Строки = Новый Массив;
			Если ЗначениеЗаполнено(ТекстДокументаЕГАИС) Тогда
				Строки.Добавить(ТекстДокументаЕГАИС);
				Строки.Добавить(", ");
			КонецЕсли;
			Строки.Добавить(ФорматированнаяСтрока);
			
			ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаАктСписанияЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОрганизацияЕГАИС          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.АктСписанияЕГАИС;
	ОбновитьФорматированнуюСтрокуВводаНаОсновании(ТаблицаДокументы, МетаданныеДокумента, СтатусыОформления, ТекстДокументаЕГАИС);
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаВозвратИзРегистра2ЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОрганизацияЕГАИС          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаПередачаВРегистр2ЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОрганизацияЕГАИС          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.ПередачаВРегистр2ЕГАИС;
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя)
		И СтатусыОформления[МетаданныеДокумента.Имя] <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
		
		Представления   = ПредставлениеДокумента(МетаданныеДокумента);
		ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
		
		Если ТипЗнч(ДокументОснование) <> Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			СформироватьНадпись = Истина;
		Иначе
			РезультатыЗапросаПередачиВРегистры2и3 = РезультатыЗапросаПередачиВРегистры2и3ПоТТНВходящей(ДокументОснование);
			Если РезультатыЗапросаПередачиВРегистры2и3[РезультатыЗапросаПередачиВРегистры2и3.Количество() - 2].Пустой() Тогда
				СформироватьНадпись = Ложь;
			Иначе
				СформироватьНадпись = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ СформироватьНадпись Тогда
			ТекстНадписи = Неопределено;
			ИмяКоманды   = Неопределено;
		ИначеЕсли ПравоДобавления Тогда
			ТекстНадписи = Представления.КомандаСоздать;
			ИмяКоманды   = Представления.ИмяКомандыСоздать;
		ИначеЕсли ТаблицаДокументы.Количество() > 0 Тогда
			ТекстНадписи = Представления.ДокументНеОформлен;
			ИмяКоманды   = Неопределено;
		Иначе
			ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
			ИмяКоманды   = Неопределено;
		КонецЕсли;
		
		Если ТекстНадписи <> Неопределено Тогда
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГосИС;
			КонецЕсли;
			
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды);
			
			Строки = Новый Массив;
			Если ЗначениеЗаполнено(ТекстДокументаЕГАИС) Тогда
				Строки.Добавить(ТекстДокументаЕГАИС);
				Строки.Добавить(", ");
			КонецЕсли;
			Строки.Добавить(ФорматированнаяСтрока);
			
			ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаТТНВходящаяЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Грузополучатель           КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаТТНИсходящаяЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Грузоотправитель          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.ТТНИсходящаяЕГАИС;
	ОбновитьФорматированнуюСтрокуВводаНаОсновании(ТаблицаДокументы, МетаданныеДокумента, СтатусыОформления, ТекстДокументаЕГАИС);
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаЧекЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОрганизацияЕГАИС          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ЧекЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.ЧекЕГАИС;
	ОбновитьФорматированнуюСтрокуВводаНаОсновании(ТаблицаДокументы, МетаданныеДокумента, СтатусыОформления, ТекстДокументаЕГАИС);
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаЧекЕГАИСВозврат(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОрганизацияЕГАИС          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.ЧекЕГАИСВозврат;
	ОбновитьФорматированнуюСтрокуВводаНаОсновании(ТаблицаДокументы, МетаданныеДокумента, СтатусыОформления, ТекстДокументаЕГАИС);
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаУведомлениеОПланируемомИмпортеЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОрганизацияЕГАИС          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.УведомлениеОПланируемомИмпортеЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС;
	ОбновитьФорматированнуюСтрокуВводаНаОсновании(ТаблицаДокументы, МетаданныеДокумента, СтатусыОформления, ТекстДокументаЕГАИС);
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоОснованиюДокументаОтчетОПроизводствеЕГАИС(ДокументОснование, ДеревоФайлов, ТекстДокументаЕГАИС)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОрганизацияЕГАИС          КАК ОрганизацияЕГАИС,
	|	ТаблицаДокумента.Ссылка                    КАК Ссылка,
	|	СтатусыДокументовЕГАИС.Статус              КАК Статус,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.ОтчетОПроизводствеЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|	И НЕ ТаблицаДокумента.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ПротоколОбменаЕГАИС.ТаблицаДокументы();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", ДокументОснование);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	МетаданныеДокумента = Метаданные.Документы.УведомлениеОПланируемомИмпортеЕГАИС;
	ОбновитьФорматированнуюСтрокуВводаНаОсновании(ТаблицаДокументы, МетаданныеДокумента, СтатусыОформления, ТекстДокументаЕГАИС);
	
	ПротоколОбменаЕГАИС.ЗаполнитьПоДокументу(ТаблицаДокументы, ДеревоФайлов, Истина);
	
КонецПроцедуры

Процедура ОбновитьФорматированнуюСтрокуВводаНаОсновании(ТаблицаДокументы, МетаданныеДокумента, СтатусыОформления, ТекстДокументаЕГАИС)
	
	Если СтатусыОформления.Свойство(МетаданныеДокумента.Имя)
		И СтатусыОформления[МетаданныеДокумента.Имя] <> Перечисления.СтатусыОформленияДокументовЕГАИС.Оформлено Тогда
		
		Представления = ПредставлениеДокумента(МетаданныеДокумента);
		
		ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокумента);
		
		Если ПравоДобавления Тогда
			ТекстНадписи = Представления.КомандаСоздать;
			ИмяКоманды   = Представления.ИмяКомандыСоздать;
		ИначеЕсли ТаблицаДокументы.Количество() > 0 Тогда
			ТекстНадписи = Представления.ДокументНеОформлен;
			ИмяКоманды   = Неопределено;
		Иначе
			ТекстНадписи = Представления.ДокументОтсутствуетНетПравНаСоздание;
			ИмяКоманды   = Неопределено;
		КонецЕсли;
		
		Если ТекстНадписи <> Неопределено Тогда
			
			Если ИмяКоманды = Неопределено Тогда
				Цвет = Неопределено;
			Иначе
				Цвет = ЦветаСтиля.ЦветГиперссылкиГосИС;
			КонецЕсли;
			
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ТекстНадписи,,
				Цвет,,
				ИмяКоманды);
			
			Строки = Новый Массив;
			Если ЗначениеЗаполнено(ТекстДокументаЕГАИС) Тогда
				Строки.Добавить(ТекстДокументаЕГАИС);
				Строки.Добавить(", ");
			КонецЕсли;
			Строки.Добавить(ФорматированнаяСтрока);
			
			ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока(Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОрганизацииЕГАИСпоДокументу(ОрганизацияЕГАИС, Документ) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
		ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Грузополучатель");
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
		ОрганизацияЕГАИС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Грузоотправитель");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКомандыИС

Процедура НастроитьПодключаемыеКоманды(Форма) Экспорт
	
	Если СтрНачинаетсяС(Форма.ИмяФормы, "Документ.ТТНВходящаяЕГАИС") Тогда
		Форма.НастройкиВыполненияПодключаемыхКомандИС.ДоступноПерезаполнение = Ложь;
		Форма.НастройкиВыполненияПодключаемыхКомандИС.ПередСозданиемОснования = "СопоставитьКлассификаторыПередСозданиемДокументаОснования";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКлассификаторами

Функция ПроблемыКлассификаторовВПанелиОбмена(РасширенноеОписаниеТребуетсяЗагрузка = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДоступноОбновлениеОписание");
	ВозвращаемоеЗначение.Вставить("ДоступноОбновлениеТекстПодсказки");
	ВозвращаемоеЗначение.Вставить("ЭтоКритичнаяПроблема", Ложь);
	ВозвращаемоеЗначение.Вставить(
		"ИнтерактивнаяЗагрузкаДоступна",
		РаботаСКлассификаторами.ИнтерактивнаяЗагрузкаКлассификаторовДоступна());
	
	РазделениеВключено             = ОбщегоНазначения.РазделениеВключено();
	ИдентификаторыКлассификаторов  = ОбщегоНазначенияЕГАИС.ИдентификаторыКлассификаторов();
	ИдентификаторыДляЗагрузки      = Новый Массив();
	ВидыКлассификаторовКОбновлению = Новый Массив();
	
	Для Каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
		ИдентификаторыДляЗагрузки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ДанныеПодсказки = Новый Массив;
	
	Если РазделениеВключено Тогда
		ТекстыЗапроса  = Новый СписокЗначений;
		
		Для каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
			ТекстЗапроса = ТекстЗапросаПроверкиНеобходимостиЗагрузкиКлассификатора(КлючИЗначение.Ключ);
			
			Если ТекстЗапроса <> "" Тогда
				ТекстыЗапроса.Добавить(ТекстЗапроса, КлючИЗначение.Ключ);
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПроверкаЗагрузки  = Новый Запрос;
		РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(ПроверкаЗагрузки, ТекстыЗапроса);
		
		ДоступныеКлассификаторыДляЗагрузки = Новый Массив();
		
		Для каждого КлючИЗначение Из ИдентификаторыКлассификаторов Цикл
			ВыборкаПоКлассификатору = РезультатыЗапроса[КлючИЗначение.Ключ].Выбрать();
			
			Если Не ВыборкаПоКлассификатору.Количество() Тогда
				ДоступныеКлассификаторыДляЗагрузки.Добавить(КлючИЗначение.Значение.Наименование);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДоступныеКлассификаторыДляЗагрузки.Количество() Тогда
			
			ВозвращаемоеЗначение.ДоступноОбновлениеОписание = НСтр("ru = 'Требуется загрузить классификаторы'");
			ДанныеПодсказки.Добавить(СтрСоединить(ДоступныеКлассификаторыДляЗагрузки, ", "));
			ДанныеПодсказки.Добавить(Символы.ПС);
			ДанныеПодсказки.Добавить(НСтр("ru = 'Обратитесь к администратору сервиса.'"));
			
			ВозвращаемоеЗначение.ЭтоКритичнаяПроблема = Истина;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		ДоступныеОбновления = РаботаСКлассификаторами.ДоступныеОбновленияКлассификаторов(ИдентификаторыДляЗагрузки);

		ДоступныеКлассификаторыДляОбновления = Новый Массив();
		ДоступныеКлассификаторыДляЗагрузки   = Новый Массив();

		Если ЗначениеЗаполнено(ДоступныеОбновления.КодОшибки)
			И ДоступныеОбновления.КодОшибки <> "ОбновлениеНеТребуется" Тогда
			
			ВозвращаемоеЗначение.ДоступноОбновлениеОписание = НСтр("ru = 'Не удалось проверить актуальность классификаторов через Интернет-поддержку'");
			ДанныеПодсказки.Добавить(ДоступныеОбновления.СообщениеОбОшибке);
			
		Иначе
			
			Для Каждого СтрокаТаблицы Из ДоступныеОбновления.ДоступныеВерсии Цикл
				ТекущаяВерсия = РаботаСКлассификаторами.ВерсияКлассификатора(СтрокаТаблицы.Идентификатор);
				Если ЗначениеЗаполнено(ТекущаяВерсия) Тогда
					ДоступныеКлассификаторыДляОбновления.Добавить(СтрокаТаблицы.Наименование);
				Иначе
					ДоступныеКлассификаторыДляЗагрузки.Добавить(СтрокаТаблицы.Наименование);
				КонецЕсли;
				ВидыКлассификаторовКОбновлению.Добавить(ИдентификаторыКлассификаторов[СтрокаТаблицы.Идентификатор].ВидКлассификатора);
			КонецЦикла;
			
		КонецЕсли;
	
		Если ДоступныеКлассификаторыДляОбновления.Количество()
			Или ДоступныеКлассификаторыДляЗагрузки.Количество() Тогда
			
			ВозвращаемоеЗначение.ДоступноОбновлениеОписание = НСтр("ru = 'Доступны обновления классификаторов'");
			
			Если ДоступныеКлассификаторыДляЗагрузки.Количество() Тогда
				ДанныеПодсказки.Добавить(НСтр("ru = 'Требуется загрузить классификаторы:'"));
				ДанныеПодсказки.Добавить(" ");
				ДанныеПодсказки.Добавить(СтрСоединить(ДоступныеКлассификаторыДляЗагрузки, ", "));
				ВозвращаемоеЗначение.ЭтоКритичнаяПроблема = Истина;
			КонецЕсли;
			
			Если ДоступныеКлассификаторыДляОбновления.Количество() Тогда
				Если ДоступныеКлассификаторыДляЗагрузки.Количество() Тогда
					ДанныеПодсказки.Добавить(Символы.ПС);
				КонецЕсли;
				ДанныеПодсказки.Добавить(НСтр("ru = 'Требуется обновить классификаторы:'"));
				ДанныеПодсказки.Добавить(" ");
				ДанныеПодсказки.Добавить(СтрСоединить(ДоступныеКлассификаторыДляОбновления, ", "));
			КонецЕсли;
			
			Если Не ВозвращаемоеЗначение.ИнтерактивнаяЗагрузкаДоступна Тогда
				ДанныеПодсказки.Добавить(Символы.ПС);
				ДанныеПодсказки.Добавить(НСтр("ru='У Вас недостачно прав для выполнения данной операции, обратитесь к администратору.'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВозвращаемоеЗначение.ДоступноОбновлениеТекстПодсказки = Новый ФорматированнаяСтрока(ДанныеПодсказки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТекстЗапросаПроверкиНеобходимостиЗагрузкиКлассификатора(Классификатор)
	
	ТекстЗапроса = "";
	
	Если Классификатор = "MinimalPricesForExcisableProducts" Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МинимальныеЦеныПодакцизныхТоваровИС.МинимальнаяЦена КАК МинимальнаяЦена
		|ИЗ
		|	РегистрСведений.МинимальныеЦеныПодакцизныхТоваровИС КАК МинимальныеЦеныПодакцизныхТоваровИС";
		
	ИначеЕсли Классификатор = "ClassifierOfTypesOfAlcoholicProducts" Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыАлкогольнойПродукцииЕГАИС.Код КАК Код
		|ИЗ
		|	РегистрСведений.ВидыАлкогольнойПродукцииЕГАИС КАК ВидыАлкогольнойПродукцииЕГАИС";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область МинимальныеЦеныАлкогольнойПродукции

//Проверяет минимальные цены алкгольной продукции в документе
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ, в котором проверяются минимальные цены алкогольной продукции
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ЕстьНарушения   - Булево - наличие нарушений по минимальным ценам алкогольной продукции
//   * СписокНарушений - Массив - список номенклатурных позиций с нарушениями по минимальным ценам алкогольной продукции
//   
Функция РезультатыПроверкиМинимальныхЦенПоДокументу(ДокументСсылка) Экспорт
	
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить(ДокументСсылка);
	
	Возврат РезультатыПроверкиМинимальныхЦенВСпискеДокументов(СписокДокументов);
	
КонецФункции

//Проверяет минимальные цены алкгольной продукции в списке документов
// Параметры:
//  СписокДокументов   - Массив - список документов, в которых проверяются минимальные цены алкогольной продукции
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * ЕстьНарушения   - Булево - признак наличия нарушений по минимальным ценам алкогольной продукции
//   * СписокНарушений - Массив - список стурктур номенклатурных позиций с нарушениями по минимальным ценам алкогольной продукции
//     * Структура:
//      * ВидОперации - ПеречислениеСсылка.ВидыОперацийКонтроляЦенПодакцизныхТоваровИС
//      * ВидПодакцизногоТовара - ПеречислениеСсылка.ВидыПодакцизныхТоваровИС
//      * Крепость - Число - крепость алкогольной продукции
//      * МинимальнаяЦена - Число - минимальная цена с учетом объема
//      * МинимальнаяЦенаБезУчетаОбъема - Число - минимальная цена без учета объема
//      * Номенклатура - СправочникСсылка.Номенклатура
//      * Объем - Число - объем
//      * Серия - СправочникСсылка.СерииНоменклатуры
//      * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//      * Нарушение - Булево - цена меньше минимальной цены
//      * Цена - Число - цена, указанная в документе 
//   
Функция РезультатыПроверкиМинимальныхЦенВСпискеДокументов(СписокДокументов, ДальнейшееДействие=Неопределено) Экспорт
	
	ТипДокумента      = ТипЗнч(СписокДокументов[0]);
	ДоступноеДействие = Ложь;
	ТекстЗапроса      = Неопределено;
			
	РезультатыПроверкиМинимальныхЦен = Новый Структура;
	РезультатыПроверкиМинимальныхЦен.Вставить("ЕстьНарушения",   Ложь);
	РезультатыПроверкиМинимальныхЦен.Вставить("СписокНарушений", Новый Массив);
		
	Если ДальнейшееДействие = Неопределено Тогда
		ДоступноеДействие = Истина;
	Иначе
		Если ТипДокумента = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеПолучение Тогда
				ДоступноеДействие = Истина;
			КонецЕсли;
		Иначе
			Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
				ДоступноеДействие = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступноеДействие Тогда
		ПараметрыПроверки = ОбщегоНазначенияЕГАИС.ИнициализироватьПараметрыПроверкиМинимальныхЦен();
		ЗапросПродукции   = Новый Запрос;

		СписокТиповОрганизаций = Новый Массив;
		СписокТиповОрганизаций.Добавить(Перечисления.ТипыОрганизацийЕГАИС.ИндивидуальныйПредпринимательРФ);
		СписокТиповОрганизаций.Добавить(Перечисления.ТипыОрганизацийЕГАИС.ЮридическоеЛицоРФ);

		Если ТипДокумента = Тип("ДокументСсылка.ТТНВходящаяЕГАИС") Тогда
			ТекстЗапроса = Документы.ТТНВходящаяЕГАИС.ТекстЗапросаПродукцииДляПроверкиЦенВСпискеДокументов();
			ЗапросПродукции.УстановитьПараметр("ТипыОрганизаций", СписокТиповОрганизаций);

		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС") Тогда
			ТекстЗапроса = Документы.ТТНИсходящаяЕГАИС.ТекстЗапросаПродукцииДляПроверкиЦенВСпискеДокументов();
			ЗапросПродукции.УстановитьПараметр("ТипыОрганизаций", СписокТиповОрганизаций);

		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктСписанияЕГАИС") Тогда
			ТекстЗапроса = Документы.АктСписанияЕГАИС.ТекстЗапросаПродукцииДляПроверкиЦенВСпискеДокументов();
			ЗапросПродукции.УстановитьПараметр("ПричинаСписания", Перечисления.ПричиныСписанийЕГАИС.Реализация);
			ПараметрыПроверки.РозничнаяПродажа = Истина;

		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЧекЕГАИС") Тогда
			ТекстЗапроса = Документы.ЧекЕГАИС.ТекстЗапросаПродукцииДляПроверкиЦенВСпискеДокументов();
			ПараметрыПроверки.РозничнаяПродажа = Истина;

		КонецЕсли;

		Если ТекстЗапроса <> Неопределено Тогда
			ЗапросПродукции.Текст = ТекстЗапроса;
			ЗапросПродукции.УстановитьПараметр("СписокДокументов", СписокДокументов);

			ТаблицаНаПроверку = ЗапросПродукции.Выполнить().Выгрузить();

			Если ТаблицаНаПроверку.Количество() > 0 Тогда
				ПараметрыПроверки.ПроверятьКонтрагентов           = Ложь;
				ПараметрыПроверки.ПроверятьЗаполнениеНоменклатуры = Ложь;
				ОбщегоНазначенияЕГАИС.ПодобратьМинимальныеЦеныАлкогольнойПродукции(ТаблицаНаПроверку, ПараметрыПроверки);
			КонецЕсли;

			ТаблицаСМинимальнымиЦенами = ПараметрыПроверки.ПровереннаяПродукция;
			Если ТаблицаСМинимальнымиЦенами.Количество() > 0 Тогда
				ПроверитьНарушенияМинимальныхЦенАлкогольнойПродукции(ТаблицаСМинимальнымиЦенами, ТаблицаНаПроверку,
					РезультатыПроверкиМинимальныхЦен);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатыПроверкиМинимальныхЦен;
	
КонецФункции

Процедура ПроверитьНарушенияМинимальныхЦенАлкогольнойПродукции(ПровереннаяПродукция, Товары, РезультатыПроверки)
		
	Если ПровереннаяПродукция.Количество() > 0 Тогда
		ЗапросПроверки = Новый Запрос;
		ЗапросПроверки.Текст =
		"ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Серия КАК Серия,
		|	Товары.Цена КАК Цена,
		|	Товары.КоэффициентЕГАИС КАК КоэффициентЕГАИС
		|ПОМЕСТИТЬ втТовары
		|ИЗ
		|	&Товары КАК Товары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыЦены.Номенклатура КАК Номенклатура,
		|	ТоварыЦены.Характеристика КАК Характеристика,
		|	ТоварыЦены.Серия КАК Серия,
		|	ТоварыЦены.МинимальнаяЦена КАК МинимальнаяЦена,
		|	ТоварыЦены.МинимальнаяЦенаБезУчетаОбъема КАК МинимальнаяЦенаБезУчетаОбъема,
		|	ТоварыЦены.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
		|	ТоварыЦены.ВидОперации КАК ВидОперации,
		|	ТоварыЦены.Крепость КАК Крепость,
		|	ТоварыЦены.Объем КАК Объем
		|ПОМЕСТИТЬ втТоварыСЦенами
		|ИЗ
		|	&ТоварыЦены КАК ТоварыЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТовары.Номенклатура КАК Номенклатура,
		|	втТовары.Характеристика КАК Характеристика,
		|	втТовары.Серия КАК Серия,
		|	втТоварыСЦенами.МинимальнаяЦена * втТовары.КоэффициентЕГАИС КАК МинимальнаяЦена,
		|	втТоварыСЦенами.МинимальнаяЦенаБезУчетаОбъема КАК МинимальнаяЦенаБезУчетаОбъема,
		|	втТоварыСЦенами.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
		|	втТоварыСЦенами.ВидОперации КАК ВидОперации,
		|	втТоварыСЦенами.Крепость КАК Крепость,
		|	втТоварыСЦенами.Объем * втТовары.КоэффициентЕГАИС КАК Объем,
		|	втТовары.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА втТовары.Цена < втТоварыСЦенами.МинимальнаяЦена * втТовары.КоэффициентЕГАИС
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НарушениеМРЦ
		|ПОМЕСТИТЬ втИтогиПроверки
		|ИЗ
		|	втТовары КАК втТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТоварыСЦенами КАК втТоварыСЦенами
		|		ПО втТовары.Номенклатура = втТоварыСЦенами.Номенклатура
		|		И втТовары.Характеристика = втТоварыСЦенами.Характеристика
		|		И втТовары.Серия = втТоварыСЦенами.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтогиПроверки.Номенклатура КАК Номенклатура,
		|	втИтогиПроверки.Характеристика КАК Характеристика,
		|	втИтогиПроверки.Серия КАК Серия,
		|	втИтогиПроверки.МинимальнаяЦена КАК МинимальнаяЦена,
		|	втИтогиПроверки.МинимальнаяЦенаБезУчетаОбъема КАК МинимальнаяЦенаБезУчетаОбъема,
		|	втИтогиПроверки.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
		|	втИтогиПроверки.ВидОперации КАК ВидОперации,
		|	втИтогиПроверки.Крепость КАК Крепость,
		|	втИтогиПроверки.Объем * 10 КАК Объем,
		|	втИтогиПроверки.НарушениеМРЦ КАК Нарушение
		|ИЗ
		|	втИтогиПроверки КАК втИтогиПроверки
		|ГДЕ
		|	втИтогиПроверки.НарушениеМРЦ = ИСТИНА";
		
		ЗапросПроверки.УстановитьПараметр("Товары",     Товары);
		ЗапросПроверки.УстановитьПараметр("ТоварыЦены", ПровереннаяПродукция);
		
		ВыборкаНарушений = ЗапросПроверки.Выполнить().Выбрать();
		МассивНарушений  = Новый Массив;
				
		Пока ВыборкаНарушений.Следующий() Цикл
			Нарушение = ИнициализироватьРезультатПроверкиМинимальныхЦенАлкогольнойПродукции();
			ЗаполнитьЗначенияСвойств(Нарушение, ВыборкаНарушений);
			МассивНарушений.Добавить(Нарушение);
		КонецЦикла;
		
		Если МассивНарушений.Количество() > 0 Тогда
			РезультатыПроверки.ЕстьНарушения   = Истина;
			РезультатыПроверки.СписокНарушений = МассивНарушений;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьРезультатПроверкиМинимальныхЦенАлкогольнойПродукции()
	
	РезультатПроверки = Новый Структура;
	
	РезультатПроверки.Вставить("Номенклатура",                  "");
	РезультатПроверки.Вставить("Характеристика",                "");
	РезультатПроверки.Вставить("Серия",                         "");
	РезультатПроверки.Вставить("Объем",                         0);
	РезультатПроверки.Вставить("Крепость",                      0);
	РезультатПроверки.Вставить("ВидПодакцизногоТовара",         Перечисления.ВидыПодакцизныхТоваровИС.ПустаяСсылка());
	РезультатПроверки.Вставить("ВидОперации",                   Перечисления.ВидыОперацийКонтроляЦенПодакцизныхТоваровИС.ПустаяСсылка());
	РезультатПроверки.Вставить("Цена",                          0);
	РезультатПроверки.Вставить("МинимальнаяЦена",               0);
	РезультатПроверки.Вставить("МинимальнаяЦенаБезУчетаОбъема", 0);
	РезультатПроверки.Вставить("Нарушение",                     Ложь);
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

