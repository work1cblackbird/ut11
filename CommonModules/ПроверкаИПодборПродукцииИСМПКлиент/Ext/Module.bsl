#Область ПрограммныйИнтерфейс

// Вызывается при выполнении команды "ВозобновитьПроверку" из форм прикладных документов
//   в конфигурации - потребителе библиотеки ГосИС.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма прикладного документа, в который встраивается функциональность библиотеки ГосИС.
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции для возобновления проверки.
//  ПараметрыУказанияСерий - Произвольный - параметры указания серий источника для корректного отображения серий.
//  Сценарий - Число - сценарий точки вызова
//
Процедура ВозобновитьПроверку(Форма, ВидМаркируемойПродукции, ПараметрыУказанияСерий, Сценарий = 0) Экспорт
	
	ПараметрыОткрытияФормыПроверки = ПараметрыОткрытияФормыПроверкиИПодбора(Форма, ВидМаркируемойПродукции, Сценарий);
	
	ТребуетсяВопрос = Ложь;
	
	Если Форма.Модифицированность Тогда
		
		Если НЕ ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект)
			И ПараметрыОткрытияФормыПроверки.ПроверятьМодифицированность Тогда
	
			Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
			
			ТребуетсяВопрос  = Истина;
			ПровестиЗаписать = ?(Объект.Проведен, НСтр("ru = 'Провести'"), НСтр("ru = 'Записать'"));
			ТекстВопроса     = СтрШаблон(НСтр("ru = 'Документ был изменен. %1?'"), ПровестиЗаписать);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяВопрос Тогда
		
		ПараметрыВопроса = Новый Структура();
		ПараметрыВопроса.Вставить("Форма", Форма);
		ПараметрыВопроса.Вставить("ПараметрыОткрытияФормыПроверки", ПараметрыОткрытияФормыПроверки);
		ПараметрыВопроса.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВозобновитьПроверкуИПодборПриОтветеНаВопрос",
			ЭтотОбъект, ПараметрыВопроса);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВозобновитьПроверкуОткрытьФормуПроверкиИПодбораМаркируемойПродукции(Форма, ПараметрыОткрытияФормыПроверки, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму проверки и подбора маркируемой продукции
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Источник события
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
//  ПараметрыУказанияСерий - Произвольный - параметры указания серий источника для корректного отображения серий.
//  Сценарий - Число - сценарий точки вызова
//
Процедура ОткрытьФормуПроверкиИПодбора(Форма, ВидМаркируемойПродукции, ПараметрыУказанияСерий, Сценарий = 0) Экспорт
	
	ТребуетсяВопрос = Ложь;
	
	ПараметрыОткрытияФормыПроверки = ПараметрыОткрытияФормыПроверкиИПодбора(Форма, ВидМаркируемойПродукции, Сценарий);
	
	Если НЕ ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект) Тогда
		Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];

		Если НЕ ПараметрыОткрытияФормыПроверки.ПроверятьМодифицированность Тогда
		ИначеЕсли Объект.Ссылка.Пустая() Тогда
			ТребуетсяВопрос = Истина;
			ТекстВопроса    = НСтр("ru = 'Сканирование маркируемой продукции возможно только в записанном документе. Записать?'");
		ИначеЕсли Форма.Модифицированность Тогда
			ТребуетсяВопрос  = Истина;
			ПровестиЗаписать = ?(Объект.Проведен, НСтр("ru = 'Провести'"), НСтр("ru = 'Записать'"));
			ТекстВопроса     = СтрШаблон(НСтр("ru = 'Документ был изменен. %1?'"), ПровестиЗаписать);
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяВопрос Тогда
		
		ПараметрыВопроса = Новый Структура();
		ПараметрыВопроса.Вставить("Форма", Форма);
		ПараметрыВопроса.Вставить("ПараметрыОткрытияФормыПроверки", ПараметрыОткрытияФормыПроверки);
		ПараметрыВопроса.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуПроверкиИПодбораПриОтветеНаВопрос",
			ЭтотОбъект, ПараметрыВопроса);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОткрытьФормуПроверкиИПодбораМаркируемойПродукции(Форма, ПараметрыОткрытияФормыПроверки, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Серии

// Готовит данные для генерации серий
// 
// Параметры:
// 	ПодобраннаяМаркируемаяПродукция - ТаблицаЗначений - таблица подобранной маркируемой продукции.
// Возвращаемое значение:
// 	Массив Из См. ПроверкаИПодборПродукцииИСМПКлиент.СтруктураДанныхДляГенерацииСерии - данные для генерации серий
//
Функция ДанныеДляГенерацииСерийПоПодобраннойПродукции(ТаблицаПродукции, ВидМаркируемойПродукции, ИмяКолонкиКоличество = "КоличествоПодобрано") Экспорт
	
	ДанныеДляГенерации = Новый Массив;
	
	СтатусыСерийСерияУказана      = ПроверкаИПодборПродукцииИСМПКлиентСервер.СтатусыСерийСерияУказана();
	СтатусыСерийСерияНеУказана    = ПроверкаИПодборПродукцииИСМПКлиентСервер.СтатусыСерийСерияНеУказана();
	СтатусыСерийСериюМожноУказать = ПроверкаИПодборПродукцииИСМПКлиентСервер.СтатусыСерийСериюМожноУказать();
	
	Для Каждого СтрокаПродукции Из ТаблицаПродукции Цикл
		
		Если СтрокаПродукции[ИмяКолонкиКоличество] = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтатусыСерийСерияНеУказана.Найти(СтрокаПродукции.СтатусУказанияСерий) <> Неопределено
			Или СтатусыСерийСериюМожноУказать.Найти(СтрокаПродукции.СтатусУказанияСерий) <> Неопределено
			Или (СтатусыСерийСерияУказана.Найти(СтрокаПродукции.СтатусУказанияСерий) <> Неопределено И Не ЗначениеЗаполнено(СтрокаПродукции.Серия)) Тогда
			
			ДанныеПоСтроке = СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции);
			ЗаполнитьЗначенияСвойств(ДанныеПоСтроке, СтрокаПродукции);
			
			ДанныеСерииСуществуют = Ложь;
			
			Для Каждого ДанныеСерии Из ДанныеДляГенерации Цикл
				ДанныеСерииСовпадают = Истина;
				
				Для Каждого КлючИЗначение Из ДанныеПоСтроке Цикл
					ДанныеСерииСовпадают = ДанныеСерииСовпадают И (ДанныеСерии[КлючИЗначение.Ключ] = КлючИЗначение.Значение);
					Если НЕ ДанныеСерииСовпадают Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ДанныеСерииСовпадают Тогда
					ДанныеСерииСуществуют = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ДанныеСерииСуществуют Тогда
				ДанныеДляГенерации.Добавить(ДанныеПоСтроке);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляГенерации;

КонецФункции

Процедура ЗаполнитьСерииВПодобраннойМаркируемойПродукции(Форма, ДанныеСерий, ТаблицаПродукции) Экспорт
	
	Для Каждого ДанныеСерии Из ДанныеСерий Цикл
		Для Каждого СтрокаПродукции Из ТаблицаПродукции Цикл
			Если ЗначениеЗаполнено(СтрокаПродукции.Серия) Тогда
				Продолжить;
			КонецЕсли;
			
			КлючевыеЗначенияСовпадают = Истина;
			
			Для Каждого КлючИЗначение Из ДанныеСерии Цикл
				Если КлючИЗначение.Ключ = "Серия" Тогда
					Продолжить;
				ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаПродукции, КлючИЗначение.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				КлючевыеЗначенияСовпадают = КлючевыеЗначенияСовпадают
					И (СтрокаПродукции[КлючИЗначение.Ключ] = КлючИЗначение.Значение);
				
				Если НЕ КлючевыеЗначенияСовпадают Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если КлючевыеЗначенияСовпадают Тогда
				Если ДанныеСерии.ЕстьОшибка Тогда
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В строке %1 произошла ошибка при создании серии по причине %2'"),
						СтрокаПродукции.НомерСтроки,
						ДанныеСерии.ТекстОшибки);
					
					ИмяПоля = "ПодобраннаяМаркируемаяПродукция["
						+ ТаблицаПродукции.Индекс(СтрокаПродукции)
						+ "].Серия";
					
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, ИмяПоля);
					
				Иначе
					
					СтрокаПродукции.Серия = ДанныеСерии.Серия;
					
					СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(Форма,
						СтрокаПродукции, Неопределено, Форма.ПараметрыУказанияСерий);
						
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Подготовливает структуру, массив которых в дальнейшем будет передан в процедуру генерации серий.
// 
// Параметры:
//  ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
// Возвращаемое значение:
// 	Структура - Описание:
// * Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура, для которой будет генерироваться серия.
// * Серия        - ОпределяемыйТип.СерияНоменклатуры   - В данное значение будет записана сгенерированная серия.
// * ЕстьОшибка   - Булево - Будет установлено в Истина, если по каким то причинам серия сгенерирована не будет.
// * ТекстОшибки  - Строка - причина, по которой серия не генерировалась.
// * МРЦ          - Число - только для табачной продукции, максимальная розничная цена.
//
Функция СтруктураДанныхДляГенерацииСерии(ВидМаркируемойПродукции) Экспорт
	
	СтруктураДанных = Новый Структура;
	
	ПроверкаИПодборПродукцииИСМПКлиентПереопределяемый.ПолучитьДанныеДляГенерацииСерии(СтруктураДанных, ВидМаркируемойПродукции);
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ОткрытьФормуПроверкиИПодбораПоВыделеннойСтроке(Форма, Команда) Экспорт
	
	ПолноеИмяПеречиления = СтрШаблон(
		"Перечисление.ВидыПродукцииИС.%1",
		СтрРазделить(Команда.Имя, "_")[1]);
	
	ПараметрыПроверки                      = Форма.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры.ПараметрыПроверки;
	ПараметрыПроверки.ОткрытьФормуПроверки = Истина;
	ПараметрыПроверки.ВидПродукции         = ПредопределенноеЗначение(ПолноеИмяПеречиления);
	ПараметрыПроверки.Результат.ЗакрытьВспомогательнуюФорму = Истина;
	
	Форма.Закрыть(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетХешСумм

// Пересчитывает хеш-суммы всех упаковок формы. На клиенте формируется структура для расчета, на сервере
// вычисляются хеш-суммы и проверяется необходимость перемаркировки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма проверки и подбора маркируемой продкуции.
//
Процедура ПересчитатьХешСуммыВсехУпаковок(Форма) Экспорт

	Если НЕ Форма.РасчитыватьХешСуммуУпаковок Тогда
		Возврат;
	КонецЕсли;

	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПотребительскиеУпаковки") Тогда
		
		ЕстьОСУ = Ложь;
		СтрокиДерева = Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ОбъемноСортовойУчет")
				И СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
				ЕстьОСУ = Истина;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Если Не ЕстьОСУ Тогда
			Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0;
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначенияСтрокДерева = Новый Массив();
	
	ПроверкаИПодборПродукцииИСКлиент.ЗаполнитьЗначенияСтрокДереваДляРасчетаХешСумм(ЗначенияСтрокДерева, Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы());

	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИСМПВызовСервера.ПересчитатьХешСуммыВсехУпаковок(ЗначенияСтрокДерева, Форма.ПараметрыСканирования);
	
	ПроверкаИПодборПродукцииИСКлиент.ЗаполнитьХешСуммыВСтрокахДереваУпаковок(ЗначенияСтрокДерева, Форма.ДеревоМаркированнойПродукции);
	
	Если Форма.ПроверятьНеобходимостьПеремаркировки Тогда
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проверки

Функция НоменклатураОтличаетсяОтНоменклатурыПроверяемойУпаковки(Форма, ДанныеПроверяемойУпаковки, ДанныеНовойУпаковки) Экспорт
	
	Если ДанныеПроверяемойУпаковки = Неопределено
		Или ДанныеПроверяемойУпаковки = Форма.ДеревоМаркированнойПродукции
		Или ДанныеНовойУпаковки = Неопределено
		Или ДанныеНовойУпаковки = Форма.ДеревоМаркированнойПродукции
		Или Не ЗначениеЗаполнено(ДанныеПроверяемойУпаковки.GTIN)
		Или ДанныеПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")
		Или ДанныеПроверяемойУпаковки.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПроверяемойУпаковки.Номенклатура)
		И ЗначениеЗаполнено(ДанныеНовойУпаковки.Номенклатура) Тогда
		
		Если ДанныеПроверяемойУпаковки.Номенклатура = ДанныеНовойУпаковки.Номенклатура
			И (ДанныеПроверяемойУпаковки.Характеристика = ДанныеНовойУпаковки.Характеристика
				Или Не ЗначениеЗаполнено(ДанныеПроверяемойУпаковки.Характеристика)
					И Не ЗначениеЗаполнено(ДанныеНовойУпаковки.Характеристика)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПараметрыОткрытияФормыОшибкиСОтличающейсяНоменклатурой(ДанныеПроверяемойУпаковки, ДанныеНовойУпаковки) Экспорт
	
	ЦветГиперссылкиГосИС = Новый Цвет(28, 85, 174);
	
	ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
		ДанныеПроверяемойУпаковки.Номенклатура,
		ДанныеПроверяемойУпаковки.Характеристика,,
		ДанныеПроверяемойУпаковки.Серия);
	
	СтрокаШтриховойКод = Новый ФорматированнаяСтрока(
		ДанныеПроверяемойУпаковки.Штрихкод,
		Новый Шрифт(,,,,Истина),
		ЦветГиперссылкиГосИС,,
		"СкопироватьШтриховойКодВБуферОбмена");
	
	ТекстОшибкиФорматированнаяСтрока = Новый ФорматированнаяСтрока(
		НСтр("ru = 'номенклатура упаковок не совпадает.'"), Символы.ПС,
		НСтр("ru = 'В упаковке'"), " ", СтрокаШтриховойКод, " ",
		НСтр("ru = 'может находиться только:'"), " ", ПредставлениеСодержимоеУпаковки);
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы, ДанныеНовойУпаковки);
	ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ТекстОшибкиФорматированнаяСтрока;
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

Функция ТипыШтрихкодаВГрупповойУпаковкеРазличаются(Форма, ДанныеПроверяемойУпаковки, ДанныеНовойУпаковки) Экспорт
	
	Если ДанныеПроверяемойУпаковки = Неопределено
		Или ДанныеПроверяемойУпаковки = Форма.ДеревоМаркированнойПродукции
		Или ДанныеНовойУпаковки = Неопределено
		Или ДанныеНовойУпаковки = Форма.ДеревоМаркированнойПродукции
		Или ДанныеПроверяемойУпаковки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПроверяемойУпаковки.ТипШтрихкода)
		И ЗначениеЗаполнено(ДанныеНовойУпаковки.ТипШтрихкода) Тогда
		
		ТекущийТипШтрихкода = ДанныеНовойУпаковки.ТипШтрихкода;
		
		Для Каждого ВложеннаяСтрокаДерева Из ДанныеПроверяемойУпаковки.ПолучитьЭлементы() Цикл
			
			Если ВложеннаяСтрокаДерева.ТипШтрихкода <> ТекущийТипШтрихкода Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПараметрыОткрытияФормыОшибкиСОтличающимсяТипомШтрихкода(ДанныеПроверяемойУпаковки, ДанныеНовойУпаковки) Экспорт
	
	ЦветГиперссылкиГосИС = Новый Цвет(28, 85, 174);
	
	СтрокаШтриховойКод = Новый ФорматированнаяСтрока(
		ДанныеПроверяемойУпаковки.Штрихкод,
		Новый Шрифт(,,,,Истина),
		ЦветГиперссылкиГосИС,,
		"СкопироватьШтриховойКодВБуферОбмена");
	
	ТекстОшибкиФорматированнаяСтрока = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Упаковка'"), " ", СтрокаШтриховойКод, " ", Символы.ПС,
		НСтр("ru = 'не может содержать разные шаблоны кодов маркировки.'"));
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы, ДанныеНовойУпаковки);
	ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ТекстОшибкиФорматированнаяСтрока;
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

Функция НоменклатураНеВходитВСоставНабора(Форма, ДанныеПроверяемойУпаковки, ДанныеНовойУпаковки, КешКомплектующиеНаборов = Неопределено, КомплектующиеНаборов = Неопределено) Экспорт
	
	Если ДанныеПроверяемойУпаковки = Неопределено
		Или ДанныеПроверяемойУпаковки = Форма.ДеревоМаркированнойПродукции
		Или ДанныеНовойУпаковки = Неопределено
		Или ДанныеНовойУпаковки = Форма.ДеревоМаркированнойПродукции
		Или ДанныеПроверяемойУпаковки.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КешКомплектующиеНаборов <> Неопределено Тогда
		
		КешКомплектующиеНаборовСоответствиеХарактеристик = КешКомплектующиеНаборов[ДанныеПроверяемойУпаковки.Номенклатура];
		Если КешКомплектующиеНаборовСоответствиеХарактеристик <> Неопределено Тогда
			КомплектующиеНаборов = КешКомплектующиеНаборовСоответствиеХарактеристик[ДанныеПроверяемойУпаковки.Характеристика];
		КонецЕсли;
		
	Иначе
		
		КешКомплектующиеНаборовСоответствиеХарактеристик = Новый Соответствие();
		
		КешКомплектующиеНаборов = Новый Соответствие();
		КешКомплектующиеНаборов.Вставить(ДанныеПроверяемойУпаковки.Номенклатура, КешКомплектующиеНаборовСоответствиеХарактеристик);
		
	КонецЕсли;
	
	Если КомплектующиеНаборов = Неопределено Тогда
		
		КомплектующиеНаборов = ПроверкаИПодборПродукцииИСМПВызовСервера.КомплектующиеНаборов(
			ДанныеПроверяемойУпаковки.Номенклатура, ДанныеПроверяемойУпаковки.Характеристика, ДанныеПроверяемойУпаковки.GTIN);
		КешКомплектующиеНаборовСоответствиеХарактеристик.Вставить(ДанныеПроверяемойУпаковки.Характеристика, КомплектующиеНаборов);
		
	КонецЕсли;
	
	НоменклатураВходитВСоставНабора = Ложь;
	Если КомплектующиеНаборов.Количество() Тогда
		Для Каждого ЭлементНабора Из КомплектующиеНаборов Цикл
			Если ЭлементНабора.Номенклатура = ДанныеНовойУпаковки.Номенклатура
				И ЭлементНабора.Характеристика = ДанныеНовойУпаковки.Характеристика Тогда
				НоменклатураВходитВСоставНабора = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не НоменклатураВходитВСоставНабора;
	
КонецФункции

Функция ПараметрыОткрытияФормыОшибкиНоменклатураНеВходитВСоставНабора(ДанныеПроверяемойУпаковки, ДанныеНовойУпаковки, КомплектующиеНаборов) Экспорт
	
	ЦветГиперссылкиГосИС = Новый Цвет(28, 85, 174);
	
	СтрокаШтриховойКод = Новый ФорматированнаяСтрока(
		ДанныеПроверяемойУпаковки.Штрихкод,
		Новый Шрифт(,,,,Истина),
		ЦветГиперссылкиГосИС,,
		"СкопироватьШтриховойКодВБуферОбмена");
	
	ЭлементыТекста = Новый Массив;
	
	ЭлементТекстаОшибки = Новый ФорматированнаяСтрока(
		НСтр("ru = 'В упаковке'"), " ", СтрокаШтриховойКод, " ",
		НСтр("ru = 'могут находиться находиться:'"));
	ЭлементыТекста.Добавить(ЭлементТекстаОшибки);
	Для Каждого ЭлементНабора Из КомплектующиеНаборов Цикл
		ЭлементыТекста.Добавить(Символы.ПС);
		ЭлементТекстаОшибки = Новый ФорматированнаяСтрока(
			СтрШаблон("- %1", ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
				ЭлементНабора.Номенклатура,
				ЭлементНабора.Характеристика)));
		ЭлементыТекста.Добавить(ЭлементТекстаОшибки);
	КонецЦикла;
	
	ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытияФормы, ДанныеНовойУпаковки);
	ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = Новый ФорматированнаяСтрока(ЭлементыТекста);
	
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

#КонецОбласти

Процедура ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаАгрегатор, КэшированныеЗначения) Экспорт
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(Форма, СтрокаАгрегатор, КэшированныеЗначения, Форма.ПараметрыУказанияСерий);
КонецПроцедуры

Процедура ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, КэшированныеЗначения) Экспорт
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(Форма, СтрокаАгрегатор, КэшированныеЗначения, Форма.ПараметрыУказанияСерий);
КонецПроцедуры

Функция ЭтоИзменениеЭлементаВГрупповойУпаковке(СтрокаДерева, ДополнительныеПараметры) Экспорт
	
	Если Не ДополнительныеПараметры.Свойство("ПроизвольноеРедактированиеРеквизитов")
			Или Не ДополнительныеПараметры.ПроизвольноеРедактированиеРеквизитов Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Упаковка = СтрокаДерева.ПолучитьРодителя();
	
	Если Упаковка = Неопределено 
		Или (Упаковка.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая")
			И Упаковка.ВидУпаковки <> ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОповеститьОСопоставленииНоменклатурыШтрихкодам(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ЗарегистрированныеШтрихкоды")
		И Результат.Свойство("ШтрихкодыНоменклатуры")
		И Результат.Свойство("ФормаВладелец")
		И ЗначениеЗаполнено(Результат.ЗарегистрированныеШтрихкоды) Тогда
		
		ЗарегистрированныеШтрихкоды = Новый Соответствие;
		Для Каждого Строка Из Результат.ЗарегистрированныеШтрихкоды Цикл
			Если РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.ЭтоGTIN(Строка.Штрихкод) Тогда
				ЗарегистрированныеШтрихкоды[Строка.Штрихкод] = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТоварныеПозицииGTIN = Новый Массив;
		
		Для Каждого Строка Из Результат.ШтрихкодыНоменклатуры Цикл
			
			Если ЗарегистрированныеШтрихкоды[Строка.Штрихкод] = Неопределено
				Или Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			Данные = Новый Структура;
			Данные.Вставить("Номенклатура",   Строка.Номенклатура);
			Данные.Вставить("Характеристика", Строка.Характеристика);
			Данные.Вставить("GTIN",           ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(Строка.Штрихкод));
			
			ТоварныеПозицииGTIN.Добавить(Данные);
			
		КонецЦикла;
		
		Если ТоварныеПозицииGTIN.Количество() > 0 Тогда
			
			Оповестить("СопоставлениеНоменклатурыШтрихкодам", ТоварныеПозицииGTIN, Результат.ФормаВладелец);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОткрытиеФормыПроверкиИПодбора

// Предназначена для открытия формы проверки и подбора маркируемой продукции в режиме возобновления проверки
// 
// Параметры:
// 	 Форма - ФормаКлиентскогоПриложения - форма прикладного документа или общая форма, в который встраивается функциональность библиотеки ГосИС:
// 	 ПараметрыОткрытияФормыПроверки - См. ПараметрыОткрытияФормыПроверкиИПодбора.
//   ПараметрыУказанияСерий - Произвольный - параметры указания серий источника для корректного отображения серий.
//
Процедура ВозобновитьПроверкуОткрытьФормуПроверкиИПодбораМаркируемойПродукции(Форма, ПараметрыОткрытияФормыПроверки, ПараметрыУказанияСерий)
	
	Если ПроверкаИПодборПродукцииИСМПВызовСервера.ВозобновитьПроверкуПоДокументу(
		Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект].Ссылка,
		ПараметрыОткрытияФормыПроверки.ВидМаркируемойПродукции,
		ПараметрыОткрытияФормыПроверки.Сценарий) Тогда
		
		Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.МаркировкаТоваровИСМП")
			Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ВыводИзОборотаИСМП")
			Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.СписаниеКодовМаркировкиИСМП")
			Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ПриемкаТоваровИСМП")
			Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ОтгрузкаТоваровИСМП")
			Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.УточнениеСведенийОКодахМаркировкиИСМП") Тогда
			Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется");
			ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытияФормыПроверки);
		КонецЕсли;
		
		ОткрытьФормуПроверкиИПодбораМаркируемойПродукции(Форма, ПараметрыОткрытияФормыПроверки, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для открытия формы проверки и подбора маркируемой продукции
// 
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма прикладного документа или общая форма, в который встраивается
//       функциональность библиотеки ГосИС.
//   ПараметрыОткрытияФормыПроверки - См. ПараметрыОткрытияФормыПроверкиИПодбора.
//   ПараметрыУказанияСерий - Произвольный - параметры указания серий источника для корректного отображения серий.
//
Процедура ОткрытьФормуПроверкиИПодбораМаркируемойПродукции(Форма, Знач ПараметрыОткрытияФормыПроверки, Знач ПараметрыУказанияСерий)

	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РедактированиеФормыНедоступно",        ПараметрыОткрытияФормыПроверки.РедактированиеФормыНедоступно);
	ПараметрыФормы.Вставить("ПроверятьНеобходимостьПеремаркировки", ПараметрыОткрытияФормыПроверки.ПроверятьНеобходимостьПеремаркировки);
	ПараметрыФормы.Вставить("РасчитыватьХешСуммуУпаковок",          ПараметрыОткрытияФормыПроверки.РасчитыватьХешСуммуУпаковок);
	ПараметрыФормы.Вставить("АдресПроверяемыхДанных",               ПараметрыОткрытияФормыПроверки.АдресПроверяемыхДанных);
	ПараметрыФормы.Вставить("ДоступнаПечатьЭтикеток",               ПараметрыОткрытияФормыПроверки.ДоступнаПечатьЭтикеток);
	ПараметрыФормы.Вставить("ДопустимыйСпособВводаВОборот",         ПараметрыОткрытияФормыПроверки.ДопустимыйСпособВводаВОборот);
	ПараметрыФормы.Вставить("ДанныеВыбораПоМаркируемойПродукции",   ПараметрыОткрытияФормыПроверки.ДанныеВыбораПоМаркируемойПродукции);
	ПараметрыФормы.Вставить("СохраненВыборПоМаркируемойПродукции",  ПараметрыОткрытияФормыПроверки.СохраненВыборПоМаркируемойПродукции);
	ПараметрыФормы.Вставить("ПроверкаЭлектронногоДокумента",        ПараметрыОткрытияФормыПроверки.ПроверкаЭлектронногоДокумента);
	ПараметрыФормы.Вставить("ДоступноСозданиеНовыхУпаковок",        ПараметрыОткрытияФормыПроверки.ДоступноСозданиеНовыхУпаковок);
	ПараметрыФормы.Вставить("ВидМаркируемойПродукции",              ПараметрыОткрытияФормыПроверки.ВидМаркируемойПродукции);
	ПараметрыФормы.Вставить("ИспользоватьСтатусПроверкаЗавершена",  ПараметрыОткрытияФормыПроверки.ИспользоватьСтатусПроверкаЗавершена);
	ПараметрыФормы.Вставить("Сценарий",                             ПараметрыОткрытияФормыПроверки.Сценарий);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",               ПараметрыУказанияСерий);
	
	ПараметрыФормы.Вставить("РежимИсправленияОшибокПослеПередачиКодов", ПараметрыОткрытияФормыПроверки.РежимИсправленияОшибокПослеПередачиКодов);
	
	Если ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект) Тогда
		
		ПараметрыФормы.Вставить("Организация",             Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация]);
		ПараметрыФормы.Вставить("ПроверкаНеПоДокументу",   Истина);
		ПараметрыФормы.Вставить("РежимПодбораСуществующихУпаковок", Истина);
		
		Если ЗначениеЗаполнено(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаСклад) Тогда
			ПараметрыФормы.Вставить("Склад", Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаСклад]);
		Иначе
			ПараметрыФормы.Вставить("Склад", ПараметрыОткрытияФормыПроверки.Склад);
		КонецЕсли;
	
	Иначе
		
		Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
		
		ПараметрыФормы.Вставить("ПроверяемыйДокумент", Объект.Ссылка);
		
		Если ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация) Тогда
			ПараметрыФормы.Вставить("Организация", Неопределено);
		Иначе
			ПараметрыФормы.Вставить("Организация", Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаОрганизация]);
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаСклад) Тогда
			ПараметрыФормы.Вставить("Склад", Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаСклад]);
		Иначе
			ПараметрыФормы.Вставить("Склад", ПараметрыОткрытияФормыПроверки.Склад);
		КонецЕсли;
		
		Если ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоЧекККМ(Форма)
		 Или ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоЧекККМВозврат(Форма) Тогда
			ПараметрыФормы.Вставить("ПроверкаНеПоДокументу",   Истина);
			ПараметрыФормы.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Ложь);
		Иначе
			ПараметрыФормы.Вставить("ПроверкаНеПоДокументу",   Ложь);
			
			Если НЕ ПустаяСтрока(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаДокументОснование) Тогда
				ПараметрыФормы.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию",
					ЗначениеЗаполнено(Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаДокументОснование]));
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаИПодборПродукцииИСМПКлиентСервер.ЭтоДокументПриобретения(Форма) Тогда
			ПараметрыФормы.Вставить("ПриЗавершенииСохранятьРезультатыПроверки", Истина);
			ПараметрыФормы.Вставить("РежимПодбораСуществующихУпаковок",         Ложь);
		Иначе
			ПараметрыФормы.Вставить("ПриЗавершенииСохранятьРезультатыПроверки", Ложь);
			ПараметрыФормы.Вставить("РежимПодбораСуществующихУпаковок",         Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыОткрытияФормыПроверки.ИмяРеквизитаКонтрагент) Тогда
			ПараметрыФормы.Вставить("Контрагент", Объект[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаКонтрагент]);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ОтчетОбИмпортеЕГАИС")
		Или ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ОтчетОПроизводствеЕГАИС") Тогда
		ПараметрыФормы.Организация = Форма.Организация;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентПереопределяемый.ПередОткрытиемФормыПроверкиПодбора(
		Форма, ПараметрыОткрытияФормыПроверки, ПараметрыФормы, Отказ);
	
	Если Отказ Тогда
		Возврат;
	Иначе
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ПараметрыОткрытияФормыПроверки.ВидМаркируемойПродукции) Тогда
			ИмяФормыПроверкиИПодбора = "Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор";
		ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияИСМП(ПараметрыОткрытияФормыПроверки.ВидМаркируемойПродукции) Тогда
			ИмяФормыПроверкиИПодбора = "Обработка.ПроверкаИПодборПродукцииИСМП.Форма.ПроверкаИПодбор";
		Иначе
			ТекстОшибки = НСтр("ru = 'Для маркируемой продукции ""%1"" проверка и подбор в отдельной форме не предусмотрен.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, ПараметрыОткрытияФормыПроверки.ВидМаркируемойПродукции);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;

		ОткрытьФорму(ИмяФормыПроверкиИПодбора,
			ПараметрыФормы,
			Форма,
			Форма.УникальныйИдентификатор, , ,
			ПараметрыОткрытияФормыПроверки.ОписаниеОповещенияПриЗакрытии,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для установки параметров открытия формы проверки и подбора маркируемой продукции
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма прикладного документа или общая форма, в который встраивается функциональность библиотеки ГосИС
//   ВидМаркируемойПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции, для которого нужно получить параметры открытия
//   Сценарий - Число - сценарий вызова формы проверки
// Возвращаемое значение:
//  Структура - значения, используемые для управления открытием формы проверки и подбора:
//  * ИмяРеквизитаФормыОбъект              - Строка - имя реквизита формы документа, содержащего объект документа. Для открытия не из формы документа должен быть пустой строкой
//  * ИмяРеквизитаОрганизация              - Строка - имя реквизита документа или реквизита формы, содержащего организацию
//  * ИмяРеквизитаКонтрагент               - Строка - имя реквизита документа или реквизита формы, содержащего контрагента
//  * ИмяРеквизитаСклад                    - Строка - имя реквизита документа или реквизита формы, содержащего склад
//  * Склад                                - Произвольный - явное указание склада если имя реквизита недоступно
//  * ИмяРеквизитаДокументОснование        - Строка - имя реквизита документа, содержащего его основание. Если основания нет, должен быть пустой строкой.
//  * ПроверятьНеобходимостьПеремаркировки - Булево - признак необходимости контроля состава упаковок в форме проверки.
//  * РасчитыватьХешСуммуУпаковок          - Булево - признак необходимости расчета хеш-сумм упаковок.
//  * РедактированиеФормыНедоступно        - Булево - признак недоступности редактирования формы, из которой открывается форма проверки
//  * АдресПроверяемыхДанных               - Строка - адрес данных для загрузки в форму проверки, если передача данных происходит не через ссылку на документ
//  * ОписаниеОповещенияПриЗакрытии        - ОписаниеОповещения - описание процедуры, которая будет вызвана после закрытия формы проверки
//  * ПроверятьМодифицированность          - Булево - признак необходимости записи документа перед открытием формы проверки
//  * ВидМаркируемойПродукции              - ПеречислениеСсылка.ВидыПродукцииИС - вид маркируемой продукции, для проверки которого будет открыта форма
//  * ПроверкаЭлектронногоДокумента        - Булево - признак режима проверки входящего электронного документа
//  * Сценарий                             - Число - сценарий проверки документа
//
Функция ПараметрыОткрытияФормыПроверкиИПодбора(Форма, ВидМаркируемойПродукции, Сценарий)
	
	// В документах подсистемы ИС МП параметры интеграции могут быть не встроены,
	// например в документе СписаниеКодовМаркировкиИСМП
	ИспользоватьСтатусПроверкаЗавершена = Ложь;
	ПроверкаЭлектронногоДокумента = Ложь;
	
	ПараметрыИнтеграции = ПараметрыИнтеграции(Форма, ВидМаркируемойПродукции, Сценарий);
	Если ПараметрыИнтеграции <> Неопределено Тогда
		ИспользоватьСтатусПроверкаЗавершена = ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена;
		ПроверкаЭлектронногоДокумента = ПараметрыИнтеграции.ЕстьЭлектронныйДокумент;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяРеквизитаФормыОбъект",             "Объект");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаОрганизация",             "Организация");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаКонтрагент",              "");
	ПараметрыОткрытия.Вставить("ИмяРеквизитаСклад",                   "Склад");
	ПараметрыОткрытия.Вставить("Склад",                                Неопределено);
	ПараметрыОткрытия.Вставить("ИмяРеквизитаДокументОснование",       "ДокументОснование");
	ПараметрыОткрытия.Вставить("ПроверятьНеобходимостьПеремаркировки", Истина);
	ПараметрыОткрытия.Вставить("РасчитыватьХешСуммуУпаковок",          Истина);
	ПараметрыОткрытия.Вставить("РедактированиеФормыНедоступно",        Ложь);
	ПараметрыОткрытия.Вставить("АдресПроверяемыхДанных",               "");
	ПараметрыОткрытия.Вставить("ПроверятьМодифицированность",          Истина);
	ПараметрыОткрытия.Вставить("ПроверкаЭлектронногоДокумента",        ПроверкаЭлектронногоДокумента);
	ПараметрыОткрытия.Вставить("ДоступнаПечатьЭтикеток",               Ложь);
	ПараметрыОткрытия.Вставить("ДопустимыйСпособВводаВОборот",         Неопределено);
	ПараметрыОткрытия.Вставить("ДанныеВыбораПоМаркируемойПродукции",   Неопределено);
	ПараметрыОткрытия.Вставить("СохраненВыборПоМаркируемойПродукции",  Неопределено);
	ПараметрыОткрытия.Вставить("ДоступноСозданиеНовыхУпаковок",        Ложь);
	ПараметрыОткрытия.Вставить("ИспользоватьСтатусПроверкаЗавершена",  ИспользоватьСтатусПроверкаЗавершена);
	ПараметрыОткрытия.Вставить("Сценарий",                             Сценарий);
	ПараметрыОткрытия.Вставить("РежимИсправленияОшибокПослеПередачиКодов", Ложь);
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
	ПараметрыЗакрытия.Вставить("Форма",                   Форма);
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения(
		"ПриЗакрытииФормыПроверкиИПодбора",
		ЭтотОбъект, ПараметрыЗакрытия);
	
	ПараметрыОткрытия.Вставить("ОписаниеОповещенияПриЗакрытии", ОповещениеПриЗакрытии);
	ПараметрыОткрытия.Вставить("ВидМаркируемойПродукции",       ВидМаркируемойПродукции);
	
	ПриУстановкеПараметровОткрытияФормыПроверкиИПодбора(Форма, ПараметрыОткрытия);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Процедура ПриУстановкеПараметровОткрытияФормыПроверкиИПодбора(Форма, ПараметрыОткрытия)
	
	ДоступнаПечатьЭтикеток = ПараметрыОткрытия.ВидМаркируемойПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.МаркировкаТоваровИСМП") Тогда
		ПараметрыОткрытия.ИмяРеквизитаКонтрагент               = "Контрагент";
		ПараметрыОткрытия.ИмяРеквизитаСклад                    = Неопределено;
		ПараметрыОткрытия.ДоступнаПечатьЭтикеток               = ДоступнаПечатьЭтикеток;
		ПараметрыОткрытия.ПроверятьНеобходимостьПеремаркировки = Ложь;
		ПараметрыОткрытия.ДоступноСозданиеНовыхУпаковок        = Истина;
		ПараметрыОткрытия.ДопустимыйСпособВводаВОборот         =
			ШтрихкодированиеИСМПКлиентСервер.СпособВводаВОборотСУЗПоВидуОперации(Форма.Объект.Операция);
		ПараметрыОткрытия.ДанныеВыбораПоМаркируемойПродукции       = Форма.ДанныеВыбораПоМаркируемойПродукции;
		ПараметрыОткрытия.СохраненВыборПоМаркируемойПродукции      = Форма.СохраненВыборПоМаркируемойПродукции;
		ПараметрыОткрытия.РежимИсправленияОшибокПослеПередачиКодов = Форма.РежимИсправленияОшибокПослеПередачиКодов;
		ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ВыводИзОборотаИСМП") Тогда
		ПараметрыОткрытия.ИмяРеквизитаСклад = Неопределено;
		ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.СписаниеКодовМаркировкиИСМП") Тогда
		ПараметрыОткрытия.ИмяРеквизитаСклад = Неопределено;
		ПараметрыОткрытия.РежимИсправленияОшибокПослеПередачиКодов = Форма.РежимИсправленияОшибокПослеПередачиКодов;
		ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ПеремаркировкаТоваровИСМП") Тогда
		ПараметрыОткрытия.ИмяРеквизитаСклад = Неопределено;
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ОтгрузкаТоваровИСМП") Тогда
		ПараметрыОткрытия.ИмяРеквизитаСклад = Неопределено;
		ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ПриемкаТоваровИСМП") Тогда
		ПараметрыОткрытия.ИмяРеквизитаКонтрагент = "Контрагент";
		ПараметрыОткрытия.ИмяРеквизитаСклад      = Неопределено;
		ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.УточнениеСведенийОКодахМаркировкиИСМП") Тогда
		ПараметрыОткрытия.ИмяРеквизитаСклад = Неопределено;
		ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ОтчетОбИмпортеЕГАИС") Тогда
		ПараметрыОткрытия.ИмяРеквизитаОрганизация             = "";
		ПараметрыОткрытия.ИмяРеквизитаСклад                   = "";
		ПараметрыОткрытия.ДопустимыйСпособВводаВОборот        = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт");
		ПараметрыОткрытия.ДанныеВыбораПоМаркируемойПродукции  = Форма.ДанныеВыбораПоМаркируемойПродукции;
		ПараметрыОткрытия.СохраненВыборПоМаркируемойПродукции = Форма.СохраненВыборПоМаркируемойПродукции;
		ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия);
	ИначеЕсли ШтрихкодированиеИСКлиентСервер.ЭтоКонтекстОбъекта(Форма, "Документ.ОтчетОПроизводствеЕГАИС") Тогда
		ПараметрыОткрытия.ИмяРеквизитаОрганизация             = "";
		ПараметрыОткрытия.ИмяРеквизитаСклад                   = "";
		ПараметрыОткрытия.ДопустимыйСпособВводаВОборот        = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство");
		ПараметрыОткрытия.ДанныеВыбораПоМаркируемойПродукции  = Форма.ДанныеВыбораПоМаркируемойПродукции;
		ПараметрыОткрытия.СохраненВыборПоМаркируемойПродукции = Форма.СохраненВыборПоМаркируемойПродукции;
		ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентПереопределяемый.ПриУстановкеПараметровОткрытияФормыПроверкиИПодбора(Форма, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ОпределитьДоступностьФормыПроверкиИподбора(Форма, ПараметрыОткрытия) Экспорт
	
	Если Форма.РедактированиеФормыНеДоступно Тогда
		ПараметрыОткрытия.РедактированиеФормыНедоступно = Истина;
	ИначеЕсли Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		ПараметрыОткрытия.РедактированиеФормыНедоступно = Истина;
	ИначеЕсли Не ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции(ПараметрыОткрытия.ВидМаркируемойПродукции) Тогда
		ПараметрыОткрытия.РедактированиеФормыНедоступно = Истина;
	Иначе
		ПараметрыОткрытия.РедактированиеФормыНедоступно = НЕ Форма.ПравоИзменения;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиИПодбораПриОтветеНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	
	Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
	
	СтандартнаяОбработка = Ложь;
	ДействиеПослеЗаписи = Новый ОписаниеОповещения("ОткрытьФормуПроверкиИПодбораПослеЗаписиОбъекта", ЭтотОбъект, ДополнительныеПараметры);
	ИнтеграцияИСКлиентПереопределяемый.ВыполнитьЗаписьОбъектаВФорме(Форма, Объект, ДействиеПослеЗаписи, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗаписи = Ложь;
	Если Объект.Проведен Тогда
		Если Форма.ПроверитьЗаполнение() Тогда
			РезультатЗаписи = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	Иначе
		РезультатЗаписи = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДействиеПослеЗаписи, РезультатЗаписи);
	
КонецПроцедуры

Процедура ОткрытьФормуПроверкиИПодбораПослеЗаписиОбъекта(РезультатЗаписи, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗаписи Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	ПараметрыУказанияСерий = ДополнительныеПараметры.ПараметрыУказанияСерий;
	ОткрытьФормуПроверкиИПодбораМаркируемойПродукции(Форма, ПараметрыОткрытияФормыПроверки, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ВозобновитьПроверкуИПодборПриОтветеНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ПараметрыОткрытияФормыПроверки = ДополнительныеПараметры.ПараметрыОткрытияФормыПроверки;
	ПараметрыУказанияСерий = ДополнительныеПараметры.ПараметрыУказанияСерий;
	Объект = Форма[ПараметрыОткрытияФормыПроверки.ИмяРеквизитаФормыОбъект];
		
	ЗаписаноУспешно = Ложь;
	
	Если Объект.Проведен Тогда
		Если Форма.ПроверитьЗаполнение() Тогда
			ЗаписаноУспешно = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	Иначе
		ЗаписаноУспешно = Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;

	Если ЗаписаноУспешно Тогда
		ВозобновитьПроверкуОткрытьФормуПроверкиИПодбораМаркируемойПродукции(Форма, ПараметрыОткрытияФормыПроверки, ПараметрыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыИнтеграции(Форма, ВидМаркируемойПродукции, Сценарий)
	
	Результат = Неопределено;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПараметрыИнтеграцииГосИС") Тогда
		ПараметрыИнтеграцииМассив = Форма.ПараметрыИнтеграцииГосИС.Получить(ВидМаркируемойПродукции);
		Если ПараметрыИнтеграцииМассив <> Неопределено Тогда
			Для Каждого ЭлементМассива Из ПараметрыИнтеграцииМассив Цикл 
				Если ЭлементМассива.Сценарий = Сценарий Тогда
					Результат = ЭлементМассива;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Процедура ПриЗакрытииФормыПроверкиИПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		ДополнительныеПараметры.Форма.Прочитать();
	КонецЕсли;
	ПроверкаИПодборПродукцииИСМПКлиентПереопределяемый.ПриЗакрытииФормыПроверкиИПодбора(РезультатЗакрытия, ДополнительныеПараметры);
	
КонецПроцедуры

Функция ЕстьРасхожденияПоРезультатамПроверкиИПодбора(ПодобраннаяМаркируемаяПродукция) Экспорт
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.Количество <> СтрокаПодобраннойПродукции.КоличествоПодобрано Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	 
	Возврат Ложь;
	
КонецФункции

#Область ТипыШтрихкодов

Функция ДоступныеТипыШтрихкодовСтрокой() Экспорт
	
	ДоступныеТипы = Новый СписокЗначений();
	
	ДоступныеТипы.Добавить("GS1128");
	ДоступныеТипы.Добавить("SSCC");
	
	Возврат ДоступныеТипы;
	
КонецФункции

#КонецОбласти

#КонецОбласти
