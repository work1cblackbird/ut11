////////////////////////////////////////////////////////////////////////////////
// Подсистема «Аудит состояния системы».
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ВыполнениеПроверки

// Выполнение указанной проверки состояния системы.
//
// Параметры:
// 	Проверка - СправочникСсылка.ПравилаПроверкиУчета - проверка
// 	ЗначенияДопПараметров - Произвольный - дополнительные параметры проверки
// 	
// Возвращаемое значение:
// 	Структура - см. ИнициализироватьПараметрыПроверки
//
Функция ВыполнитьПроверкуСостоянияСистемы(Проверка, ЗначенияДопПараметров = Неопределено) Экспорт
	
	ДатаПроверки = ТекущаяДатаСеанса();
	
	// Выполнить проверку.
	РеквизитыПроверки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Проверка,
		"Идентификатор, КонтекстПроверокВеденияУчета, Обработчик, ВажностьПроблемы, ДетализацияДоОрганизации, ДетализацияДоПериода"); // СправочникСсылка.ПравилаПроверкиУчета
	
	Проверки          = КонтрольВеденияУчетаСлужебныйПовтИсп.ПроверкиВеденияУчета().Проверки;
	СтрокаПроверки    = Проверки.Найти(РеквизитыПроверки.Идентификатор, "Идентификатор");
	
	РеквизитыПроверки.Обработчик = СтрокаПроверки.ОбработчикПроверки;
	
	// Определить структуру запрашиваемых результатов.
	ПараметрыПроверки = ИнициализироватьПараметрыПроверки(
		Проверка,
		РеквизитыПроверки.КонтекстПроверокВеденияУчета,
		ЗначенияДопПараметров);
	
	// Выполним проверку.
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(РеквизитыПроверки.Идентификатор);
	МассивПараметров.Добавить(ПараметрыПроверки); // ПараметрыПроверки будет изменен в обработчике
	
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(РеквизитыПроверки.Обработчик, МассивПараметров);
	
	// Обработаем результаты проверки.
	Если НЕ ПараметрыПроверки.ПроверкаНеВыполнена Тогда
		ПараметрыПроверки.ПричинаОтказаОтПроверки = "";
	Иначе
		ПараметрыПроверки.ВыявленныеПроблемы.Очистить();
	КонецЕсли;
	
	ПараметрыПроверки.ВыявленныеПроблемы.Колонки.Добавить("Проблема", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	Для Каждого СтрокаПроблемы Из ПараметрыПроверки.ВыявленныеПроблемы Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПроблемы.Важность) Тогда
			СтрокаПроблемы.Важность = РеквизитыПроверки.ВажностьПроблемы;
		КонецЕсли;
		
		СтрокаПроблемы.Проблема = Новый УникальныйИдентификатор;
		
	КонецЦикла;
	
	Если ПараметрыПроверки.Отборы.Количество() = 0 Тогда
		ПараметрыПроверки.Отборы.Добавить(); // проверка без отборов
	КонецЕсли;
	
	ПроблемыСгруппированные = Новый ТаблицаЗначений;
	ПроблемыСгруппированные.Колонки.Добавить("Проблема",      	   Новый ОписаниеТипов("УникальныйИдентификатор"));
	ПроблемыСгруппированные.Колонки.Добавить("Представление",      Новый ОписаниеТипов("Строка"));
	ПроблемыСгруппированные.Колонки.Добавить("Важность", 	 	   Новый ОписаниеТипов("ПеречислениеСсылка.ВажностьПроблемыУчета")); // не обязательное
	ПроблемыСгруппированные.Колонки.Добавить("КоличествоПроблем",  Новый ОписаниеТипов("Число"));
	ПроблемыСгруппированные.Колонки.Добавить("КоличествоОбъектов", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекущийОтбор Из ПараметрыПроверки.Отборы Цикл
		
		// Соберем информацию о найденных проблемах.
		СтруктураПоиска = Новый Структура("Организация, ПроверяемыйПериод");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущийОтбор);
		
		СтрокиПроблем = ПараметрыПроверки.ВыявленныеПроблемы.НайтиСтроки(СтруктураПоиска);
		КоличествоОбъектов = 0;
		
		Для Каждого СтрокаПроблемы Из СтрокиПроблем Цикл
			
			КоличествоОбъектов = КоличествоОбъектов + Макс(СтрокаПроблемы.Объекты.Количество(), 1);
			
			СтрокаПроблемыСгруппированная = ПроблемыСгруппированные.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаПроблемыСгруппированная, СтрокаПроблемы);
			
			СтрокаПроблемыСгруппированная.КоличествоПроблем = 1;
			СтрокаПроблемыСгруппированная.КоличествоОбъектов = СтрокаПроблемы.Объекты.Количество();
			
		КонецЦикла;
		
		// Регистрируем факт выполнения проверки и очистим результаты прошлой проверки.
		НаборЗаписейПроверки = РегистрыСведений.ВыполнениеПроверокСостоянияСистемы.СоздатьНаборЗаписей();
		НаборЗаписейПроблемы = РегистрыСведений.ПроблемыСостоянияСистемы.СоздатьНаборЗаписей();
		НаборЗаписейОбъекты  = РегистрыСведений.ОбъектыПроблемСостоянияСистемы.СоздатьНаборЗаписей();
		
		НаборЗаписейПроверки.Отбор.Проверка.Установить(Проверка);
		НаборЗаписейПроблемы.Отбор.Проверка.Установить(Проверка);
		НаборЗаписейОбъекты.Отбор.Проверка.Установить(Проверка);
		
		Если РеквизитыПроверки.ДетализацияДоОрганизации И ЗначениеЗаполнено(ТекущийОтбор.Организация) Тогда
			НаборЗаписейПроверки.Отбор.Организация.Установить(ТекущийОтбор.Организация);
			НаборЗаписейПроблемы.Отбор.Организация.Установить(ТекущийОтбор.Организация);
			НаборЗаписейОбъекты.Отбор.Организация.Установить(ТекущийОтбор.Организация);
		КонецЕсли;
		
		Если РеквизитыПроверки.ДетализацияДоПериода И ЗначениеЗаполнено(ТекущийОтбор.ПроверяемыйПериод) Тогда
			НаборЗаписейПроверки.Отбор.ПроверяемыйПериод.Установить(ТекущийОтбор.ПроверяемыйПериод);
			НаборЗаписейПроблемы.Отбор.ПроверяемыйПериод.Установить(ТекущийОтбор.ПроверяемыйПериод);
			НаборЗаписейОбъекты.Отбор.ПроверяемыйПериод.Установить(ТекущийОтбор.ПроверяемыйПериод);
		КонецЕсли;
		
		ЗаписьПроверки = НаборЗаписейПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьПроверки, ТекущийОтбор);
		
		ЗаписьПроверки.Проверка 				= Проверка;
		ЗаписьПроверки.ДатаВыполнения   		= ДатаПроверки;
		ЗаписьПроверки.ВыявленыПроблемы 		= (КоличествоОбъектов > 0);
		ЗаписьПроверки.ПричинаОтказаОтПроверки 	= ПараметрыПроверки.ПричинаОтказаОтПроверки;
		
		НаборЗаписейПроверки.Записать(Истина);
		НаборЗаписейПроблемы.Записать(Истина); // очистка результатов прошлой проверки
		НаборЗаписейОбъекты.Записать(Истина);  // очистка результатов прошлой проверки
		
		// Добавим запись в журнал регистрации.
		ПредставлениеПроверки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Проверка ""%1"" по организации ""%2"" за период %3'"),
			СокрЛП(Проверка),
			ТекущийОтбор.Организация,
			Формат(ТекущийОтбор.ПроверяемыйПериод, ""));
			
		Если ПараметрыПроверки.ПроверкаНеВыполнена Тогда
			КомментарийСобытия = НСтр("ru = '%1 не выполнена по причине: %2.'");
		ИначеЕсли КоличествоОбъектов > 0 Тогда
			КомментарийСобытия = НСтр("ru = '%1 завершена, выявлено проблем: %3.'");
		Иначе
			КомментарийСобытия = НСтр("ru = '%1 завершена успешно, проблем не выявлено.'");
		КонецЕсли;
		
		КомментарийСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийСобытия,
			ПредставлениеПроверки,
			ПараметрыПроверки.ПричинаОтказаОтПроверки,
			КоличествоОбъектов);
		
		ЗаписьЖурналаРегистрации(
			АудитСостоянияСистемыКлиентСервер.ИмяСобытияЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Информация, 
			Метаданные.Справочники.ПравилаПроверкиУчета, 
			Проверка, 
			КомментарийСобытия);
		
	КонецЦикла;
	
	Если НЕ ПараметрыПроверки.ПроверкаНеВыполнена Тогда
		
		// Запишем детальную информацию по найденным проблемам и проблемным объектам.
		НаборЗаписейПроблемы = РегистрыСведений.ПроблемыСостоянияСистемы.СоздатьНаборЗаписей();
		НаборЗаписейОбъекты  = РегистрыСведений.ОбъектыПроблемСостоянияСистемы.СоздатьНаборЗаписей();
		
		Для Каждого ОписаниеПроблемы Из ПараметрыПроверки.ВыявленныеПроблемы Цикл
			
			ЗаписьПроблемы = НаборЗаписейПроблемы.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьПроблемы, ОписаниеПроблемы,,
				"ДополнительнаяИнформация"
				+ ?(НЕ РеквизитыПроверки.ДетализацияДоОрганизации, ", Организация", "")
				+ ?(НЕ РеквизитыПроверки.ДетализацияДоПериода, ", ПроверяемыйПериод", ""));
			
			ЗаписьПроблемы.Проверка 				= Проверка;
			ЗаписьПроблемы.ДополнительнаяИнформация = Новый ХранилищеЗначения(ОписаниеПроблемы.ДополнительнаяИнформация, Новый СжатиеДанных(9));
			
			Для Каждого ОписаниеОбъекта Из ОписаниеПроблемы.Объекты Цикл
				
				ЗаписьОбъекта = НаборЗаписейОбъекты.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьОбъекта, ЗаписьПроблемы);
				ЗаполнитьЗначенияСвойств(ЗаписьОбъекта, ОписаниеОбъекта);
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если НаборЗаписейПроблемы.Количество() > 0 Тогда
			НаборЗаписейПроблемы.Записать(Ложь);
		КонецЕсли;
		Если НаборЗаписейОбъекты.Количество() > 0 Тогда
			НаборЗаписейОбъекты.Записать(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыПроверки.Вставить("ПроблемыСгруппированные", ПроблемыСгруппированные);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Очистка предыдущих результатов указанных проверок.
//
Процедура ОчиститьРезультатыПроверок(МассивПроверок, МассивОрганизаций, НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(МассивПроверок) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ВыполнениеПроверокСостоянияСистемы"" КАК ИмяРегистра,
	|	1 КАК Порядок,
	|	РезультатыПроверок.Проверка КАК Проверка,
	|	РезультатыПроверок.Организация КАК Организация,
	|	РезультатыПроверок.ПроверяемыйПериод КАК ПроверяемыйПериод
	|ИЗ
	|	РегистрСведений.ВыполнениеПроверокСостоянияСистемы КАК РезультатыПроверок
	|ГДЕ
	|	РезультатыПроверок.Проверка В(&МассивПроверок)
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоОрганизации
	|			ИЛИ РезультатыПроверок.Организация В (&МассивОрганизаций))
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоПериода
	|			ИЛИ РезультатыПроверок.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ПроблемыСостоянияСистемы"",
	|	2,
	|	РезультатыПроверок.Проверка,
	|	РезультатыПроверок.Организация,
	|	РезультатыПроверок.ПроверяемыйПериод
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК РезультатыПроверок
	|ГДЕ
	|	РезультатыПроверок.Проверка В(&МассивПроверок)
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоОрганизации
	|			ИЛИ РезультатыПроверок.Организация В (&МассивОрганизаций))
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоПериода
	|			ИЛИ РезультатыПроверок.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ОбъектыПроблемСостоянияСистемы"",
	|	3,
	|	РезультатыПроверок.Проверка,
	|	РезультатыПроверок.Организация,
	|	РезультатыПроверок.ПроверяемыйПериод
	|ИЗ
	|	РегистрСведений.ОбъектыПроблемСостоянияСистемы КАК РезультатыПроверок
	|ГДЕ
	|	РезультатыПроверок.Проверка В(&МассивПроверок)
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоОрганизации
	|			ИЛИ РезультатыПроверок.Организация В (&МассивОрганизаций))
	|	И (НЕ РезультатыПроверок.Проверка.ДетализацияДоПериода
	|			ИЛИ РезультатыПроверок.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ,
	|	Проверка,
	|	Организация,
	|	ПроверяемыйПериод";
	
	Запрос.УстановитьПараметр("МассивПроверок",    МассивПроверок);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	   ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, НачалоПериода));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений[Выборка.ИмяРегистра].СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей.ВыполнениеПроверокСостоянияСистемы, РегистрСведенийНаборЗаписей.ПроблемыСостоянияСистемы, РегистрСведенийНаборЗаписей.ОбъектыПроблемСостоянияСистемы
		
		НаборЗаписей.Отбор.Проверка.Установить(Выборка.Проверка);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		НаборЗаписей.Отбор.ПроверяемыйПериод.Установить(Выборка.ПроверяемыйПериод);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РезультатыВыполненияПроверки

// Возвращает таблицу результатов выполнения указанных проверок.
//
// Параметры:
// 	МассивПроверок - Массив -
// 	МассивОрганизаций - Массив - 
// 	НачалоПериода - Дата - 
// 	КонецПериода - Дата -
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений -
//
Функция ТаблицаПроблемСостоянияСистемы(МассивПроверок, МассивОрганизаций, НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Объекты.Проблема,
	|	КОЛИЧЕСТВО(Объекты.Проблема) КАК КоличествоОбъектов
	|ПОМЕСТИТЬ ВТКоличествоОбъектов
	|ИЗ
	|	РегистрСведений.ОбъектыПроблемСостоянияСистемы КАК Объекты
	|ГДЕ
	|	Объекты.Проверка В(&МассивПроверок)
	|	И (НЕ Объекты.Проверка.ДетализацияДоОрганизации
	|			ИЛИ Объекты.Организация В (&МассивОрганизаций))
	|	И (НЕ Объекты.Проверка.ДетализацияДоПериода
	|			ИЛИ Объекты.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|СГРУППИРОВАТЬ ПО
	|	Объекты.Проблема
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Проблемы.Проверка,
	|	Проблемы.Организация,
	|	Проблемы.ПроверяемыйПериод,
	|	Проблемы.Проблема,
	|	ВЫРАЗИТЬ(Проблемы.Представление КАК СТРОКА(1024)) КАК Представление,
	|	Проблемы.Важность КАК Важность,
	|	ВЫБОР
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Ошибка)
	|			ТОГДА 1
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Предупреждение)
	|			ТОГДА 2
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Информация)
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок,
	|	ЕСТЬNULL(Объекты.КоличествоОбъектов, 1) КАК КоличествоОбъектов
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоличествоОбъектов КАК Объекты
	|		ПО Проблемы.Проблема = Объекты.Проблема
	|ГДЕ
	|	Проблемы.Проверка В(&МассивПроверок)
	|	И (НЕ Проблемы.Проверка.ДетализацияДоОрганизации
	|			ИЛИ Проблемы.Организация В (&МассивОрганизаций))
	|	И (НЕ Проблемы.Проверка.ДетализацияДоПериода
	|			ИЛИ Проблемы.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Проблемы.Проверка,
	|	Представление";
	
	Запрос.УстановитьПараметр("МассивПроверок",    МассивПроверок);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	   ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, НачалоПериода));
	
	ТаблицаПроблем = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПроблем;
	
КонецФункции

// Возвращает таблицу уточненных результатов выполнения указанных проверок.
//
// Параметры:
// 	МассивПроверок - Массив -
// 	МассивОрганизаций - Массив -
// 	НачалоПериода - Дата -
// 	КонецПериода - Дата -
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений -
//
Функция ТаблицаОбъектовПроблемСостоянияСистемы(МассивПроверок, МассивОрганизаций, НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проблемы.Проверка,
	|	Проблемы.Организация,
	|	Проблемы.ПроверяемыйПериод,
	|	Проблемы.Проблема,
	|	ВЫРАЗИТЬ(Проблемы.Представление КАК СТРОКА(1024)) КАК ПредставлениеПроблемы,
	|	Проблемы.Важность КАК Важность,
	|	ВЫБОР
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Ошибка)
	|			ТОГДА 1
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Предупреждение)
	|			ТОГДА 2
	|		КОГДА Проблемы.Важность = ЗНАЧЕНИЕ(Перечисление.ВажностьПроблемыУчета.Информация)
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок,
	|	ВЫРАЗИТЬ(Объекты.Представление КАК СТРОКА(1024)) КАК ПредставлениеОбъекта
	|ИЗ
	|	РегистрСведений.ОбъектыПроблемСостоянияСистемы КАК Объекты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|		ПО Объекты.Проблема = Проблемы.Проблема
	|ГДЕ
	|	Объекты.Проверка В(&МассивПроверок)
	|	И (НЕ Объекты.Проверка.ДетализацияДоОрганизации
	|			ИЛИ Объекты.Организация В (&МассивОрганизаций))
	|	И (НЕ Объекты.Проверка.ДетализацияДоПериода
	|			ИЛИ Объекты.ПроверяемыйПериод МЕЖДУ &НачалоПериода И &КонецПериода)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	Проблемы.Проверка,
	|	ПредставлениеПроблемы,
	|	ПредставлениеОбъекта";
	
	Запрос.УстановитьПараметр("МассивПроверок",    МассивПроверок);
	Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
	Запрос.УстановитьПараметр("НачалоПериода",     НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", 	   ?(ЗначениеЗаполнено(КонецПериода), КонецПериода, НачалоПериода));
	
	ТаблицаОбъектовПроблем = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОбъектовПроблем;
	
КонецФункции

#КонецОбласти

#Область ПоискПроверок

// Возвращает таблицу проверок по указанным отборам.
//
// Параметры:
// 	КонтекстПроверокВеденияУчета - Произвольный -
// 	УточнениеКонтекстаПроверокВеденияУчета - Произвольный -
// 	ВыполняетсяТолькоВКонтексте - Булево -
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений -
//
Функция ТаблицаПроверокПоКонтексту(КонтекстПроверокВеденияУчета, УточнениеКонтекстаПроверокВеденияУчета = Неопределено, ВыполняетсяТолькоВКонтексте = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Проверка,
	|	Т.Идентификатор КАК Идентификатор,
	|	Т.ДатаНачалаПроверки КАК ДатаНачалаПроверки,
	|	Т.УточнениеКонтекстаПроверокВеденияУчета КАК УточнениеКонтекстаПроверокВеденияУчета
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК Т
	|ГДЕ
	|	НЕ Т.ПометкаУдаления
	|	И НЕ Т.ЭтоГруппа
	|	И Т.КонтекстПроверокВеденияУчета = &КонтекстПроверокВеденияУчета
	|	И (&ВыполняетсяТолькоВКонтексте = НЕОПРЕДЕЛЕНО ИЛИ Т.ВыполняетсяТолькоВКонтексте = &ВыполняетсяТолькоВКонтексте)
	|	И (&БезУточненияКонтекстаВыполнения ИЛИ Т.УточнениеКонтекстаПроверокВеденияУчета В (&УточнениеКонтекстаПроверокВеденияУчета))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Идентификатор";
	
	Запрос.УстановитьПараметр("КонтекстПроверокВеденияУчета", КонтекстПроверокВеденияУчета);
	Запрос.УстановитьПараметр("ВыполняетсяТолькоВКонтексте", ВыполняетсяТолькоВКонтексте);
	
	Если УточнениеКонтекстаПроверокВеденияУчета = Неопределено Тогда
		
		Запрос.УстановитьПараметр("УточнениеКонтекстаПроверокВеденияУчета", Новый Массив);
		Запрос.УстановитьПараметр("БезУточненияКонтекстаВыполнения", Истина);
		
	ИначеЕсли ТипЗнч(УточнениеКонтекстаПроверокВеденияУчета) = Тип("Массив") Тогда
		
		Запрос.УстановитьПараметр("УточнениеКонтекстаПроверокВеденияУчета", УточнениеКонтекстаПроверокВеденияУчета);
		Запрос.УстановитьПараметр("БезУточненияКонтекстаВыполнения", Ложь);
		
	Иначе
		
		МассивУточнений = Новый Массив;
		МассивУточнений.Добавить(УточнениеКонтекстаПроверокВеденияУчета);
		
		Запрос.УстановитьПараметр("УточнениеКонтекстаПроверокВеденияУчета", МассивУточнений);
		Запрос.УстановитьПараметр("БезУточненияКонтекстаВыполнения", Ложь);
		
	КонецЕсли;
	
	ТаблицаПроверок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПроверок;
	
КонецФункции

// Возвращает проверку по указанным отборам.
// 
// Параметры:
//  КонтекстПроверокВеденияУчета - Произвольный - Контекст проверок ведения учета
//  Идентификатор - Строка - Идентификатор
//  ВозвращатьТолькоСсылку - Булево - Возвращать только ссылку
//  ЗаполнятьПроверкиЕслиНеНайдена - Булево - Заполнять проверки если не найдена
// 
// Возвращаемое значение:
//  Неопределено, Структура - параметры проверки
Функция НайтиПроверкуПоКлючевымПолям(КонтекстПроверокВеденияУчета, Идентификатор, ВозвращатьТолькоСсылку = Истина, ЗаполнятьПроверкиЕслиНеНайдена = Истина) Экспорт
	
	ПроверкаПоИдентификатору = КонтрольВеденияУчета.ПроверкаПоИдентификатору(Идентификатор);
	
	Если ЗначениеЗаполнено(ПроверкаПоИдентификатору) Тогда
		
		Если ВозвращатьТолькоСсылку Тогда
			Возврат ПроверкаПоИдентификатору;
		КонецЕсли;
		
		Результат = Новый Структура("Ссылка, Наименование, ВажностьПроблемы, Идентификатор, Использование, СпособВыполнения,
			|КонтекстПроверокВеденияУчета, УточнениеКонтекстаПроверокВеденияУчета, ВыполняетсяТолькоВКонтексте, ПредшествующаяПроверка, Обработчик, Комментарий");
		ЗаполнитьЗначенияСвойств(Результат, ПроверкаПоИдентификатору);
		
		Возврат Результат;
		
	КонецЕсли;
	
	Если ЗаполнятьПроверкиЕслиНеНайдена Тогда
		
		ЗаполнитьСправочникПроверокСостоянияСистемы();
		
		Возврат НайтиПроверкуПоКлючевымПолям(КонтекстПроверокВеденияУчета, Идентификатор, ВозвращатьТолькоСсылку, Ложь);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область РегистрацияПроблемПроизвольнойПроверки

// Формирует описание проблемы, выявленной при проверке.
//
// Параметры:
// 	ТекстПроблемы - Строка - 
// 	Важность - ПеречислениеСсылка.ВажностьПроблемыУчета -
// 	ТекстУточнения - Строка -
// 	Объект - Произвольный -
// 	ДополнительнаяИнформация - Произвольный -
// 	
// Возвращаемое значение:
// 	Структура - Описание:
// * Объект - Структура - Описание:
//  ** Представление - Строка -
//  ** ЭтоСоставнойОбъект - Булево -
//  ** СоставнойОбъект - УникальныйИдентификатор -
//  ** РасшифровкаСоставногоОбъекта - ХранилищеЗначения -
//  ** Объект - Произвольный -
// * Проблема - Структура - Описание:
//  ** Представление - Строка -
//  ** Важность - ПеречислениеСсылка.ВажностьПроблемыУчета -
//  ** ДополнительнаяИнформация - ХранилищеЗначения - 
//
Функция СформироватьОписаниеПроблемы(ТекстПроблемы, Важность = Неопределено, ТекстУточнения = "",
			Объект = Неопределено, ДополнительнаяИнформация = Неопределено) Экспорт
	
	ОписаниеПроблемы = Новый Структура;
	ОписаниеПроблемы.Вставить("Проблема", Новый Структура);
	ОписаниеПроблемы.Вставить("Объект",   Новый Структура);
	
	// Поля регистра ПроблемыСостоянияСистемы.
	ОписаниеПроблемы.Проблема.Вставить("Представление", ТекстПроблемы);
	ОписаниеПроблемы.Проблема.Вставить("Важность",
		?(ЗначениеЗаполнено(Важность), Важность, Перечисления.ВажностьПроблемыУчета.Ошибка));
	ОписаниеПроблемы.Проблема.Вставить("ДополнительнаяИнформация",
		Новый ХранилищеЗначения(ДополнительнаяИнформация, Новый СжатиеДанных(9)));
		
	// Поля регистра ОбъектыПроблемСостоянияСистемы.
	Если ЗначениеЗаполнено(ТекстУточнения) ИЛИ ЗначениеЗаполнено(Объект) Тогда
		
		ОписаниеПроблемы.Объект.Вставить("Представление", ТекстУточнения);
		ОписаниеПроблемы.Объект.Вставить("ЭтоСоставнойОбъект",
			(Объект = Неопределено ИЛИ ТипЗнч(Объект) = Тип("Структура")));
		ОписаниеПроблемы.Объект.Вставить("СоставнойОбъект", Новый УникальныйИдентификатор);
		
		Если ОписаниеПроблемы.Объект.ЭтоСоставнойОбъект Тогда
			ОписаниеПроблемы.Объект.Вставить("РасшифровкаСоставногоОбъекта",
				Новый ХранилищеЗначения(Объект, Новый СжатиеДанных(9)));
		Иначе
			ОписаниеПроблемы.Объект.Вставить("Объект", Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОписаниеПроблемы;
	
КонецФункции

// Регистрирует в ИБ информацию о выявленной проблеме по любой указанной проверке.
//
// Параметры:
// 	Проверка - СправочникСсылка.ПравилаПроверкиУчета - 
// 	Организация - СправочникСсылка.Организации - 
// 	ПроверяемыйПериод - Дата -
// 	ОписаниеПроблемы - см. АудитСостоянияСистемы.СформироватьОписаниеПроблемы
//
Процедура ЗарегистрироватьПроблему(Проверка, Организация, ПроверяемыйПериод, ОписаниеПроблемы) Экспорт
	
	НачатьТранзакцию();
	
	// Регистрация факта выполнения проверки.
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВыполнениеПроверокСостоянияСистемы");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.УстановитьЗначение("Проверка", 		  Проверка);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	  Организация);
		ЭлементБлокировки.УстановитьЗначение("ПроверяемыйПериод", ПроверяемыйПериод);
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПроблемыСостоянияСистемы");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки.УстановитьЗначение("Проверка", 		  Проверка);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	  Организация);
		ЭлементБлокировки.УстановитьЗначение("ПроверяемыйПериод", ПроверяемыйПериод);
		
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыполнениеПроверок.Проверка
		|ИЗ
		|	РегистрСведений.ВыполнениеПроверокСостоянияСистемы КАК ВыполнениеПроверок
		|ГДЕ
		|	ВыполнениеПроверок.Проверка = &Проверка
		|	И ВыполнениеПроверок.Организация = &Организация
		|	И ВыполнениеПроверок.ПроверяемыйПериод = &ПроверяемыйПериод";
		
		Запрос.УстановитьПараметр("Проверка", 			Проверка);
		Запрос.УстановитьПараметр("Организация", 		Организация);
		Запрос.УстановитьПараметр("ПроверяемыйПериод", 	ПроверяемыйПериод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			НаборЗаписей = РегистрыСведений.ВыполнениеПроверокСостоянияСистемы.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Проверка.Установить(Проверка);
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Отбор.ПроверяемыйПериод.Установить(ПроверяемыйПериод);
			
			Запись = НаборЗаписей.Добавить();
			Запись.Проверка			 = Проверка;
			Запись.Организация		 = Организация;
			Запись.ПроверяемыйПериод = ПроверяемыйПериод;
			Запись.ДатаВыполнения	 = ТекущаяДатаСеанса();
			Запись.ВыявленыПроблемы	 = Истина;
			
			Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
			Иначе
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		// Регистрация выявленной проблемы.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Проблемы.Проблема
		|ИЗ
		|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
		|ГДЕ
		|	Проблемы.Проверка = &Проверка
		|	И Проблемы.Организация = &Организация
		|	И Проблемы.ПроверяемыйПериод = &ПроверяемыйПериод
		|	И Проблемы.Важность = &Важность
		|	И ВЫРАЗИТЬ(Проблемы.Представление КАК СТРОКА(1024)) = ВЫРАЗИТЬ(&ПредставлениеПроблемы КАК СТРОКА(1024))";
		
		Запрос.УстановитьПараметр("ПредставлениеПроблемы", ОписаниеПроблемы.Проблема.Представление);
		Запрос.УстановитьПараметр("Важность", 			   ОписаниеПроблемы.Проблема.Важность);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Проблема = Выборка.Проблема;
			
		Иначе
			
			Проблема = Новый УникальныйИдентификатор;
			
			НаборЗаписей = РегистрыСведений.ПроблемыСостоянияСистемы.СоздатьНаборЗаписей();
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ОписаниеПроблемы.Проблема);
			
			Запись.Проверка			 = Проверка;
			Запись.Организация		 = Организация;
			Запись.ПроверяемыйПериод = ПроверяемыйПериод;
			Запись.Проблема			 = Проблема;
			
			Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
			Иначе
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		// Регистрация проблемного объекта.
		Если ЗначениеЗаполнено(ОписаниеПроблемы.Объект) Тогда
		
			НаборЗаписей = РегистрыСведений.ОбъектыПроблемСостоянияСистемы.СоздатьНаборЗаписей();
			
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ОписаниеПроблемы.Объект);
			
			Запись.Проверка			 = Проверка;
			Запись.Организация		 = Организация;
			Запись.ПроверяемыйПериод = ПроверяемыйПериод;
			Запись.Проблема			 = Проблема;
			
			Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей, Ложь);
			Иначе
				НаборЗаписей.Записать(Ложь);
			КонецЕсли;
			
		КонецЕсли;
	
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияПроблемИзВыполняемойПроверки

// Добавляет строку в таблицу выявленных проблем. Вызывается при выполнении проверки.
//
// Параметры:
// 	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
// 	Организация - СправочникСсылка.Организации - 
// 	ПроверяемыйПериод - Дата -
// 	Представление - Строка -
// 	Важность - ПеречислениеСсылка.ВажностьПроблемыУчета - 
// 	ДополнительнаяИнформация - Произвольный -
//
Процедура ДобавитьСтрокуВТаблицуВыявленныхПроблем(ПараметрыПроверки, Организация, ПроверяемыйПериод, Представление,
			Важность = Неопределено, ДополнительнаяИнформация = Неопределено) Экспорт
	
	НайденнаяПроблема = ПараметрыПроверки.ВыявленныеПроблемы.Добавить();
	
	НайденнаяПроблема.Организация				= Организация;
	НайденнаяПроблема.ПроверяемыйПериод			= ПроверяемыйПериод;
	НайденнаяПроблема.Представление				= Представление;
	
	НайденнаяПроблема.Важность					= Важность;
	НайденнаяПроблема.ДополнительнаяИнформация 	= Новый ХранилищеЗначения(ДополнительнаяИнформация, Новый СжатиеДанных(9));
	
КонецПроцедуры

// Добавляет ссылочный объект к последней строке таблицы выявленных проблем. Вызывается при выполнении проверки.
//
// Параметры:
// 	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
// 	Объект - Произвольный -
// 	Представление - Строка -
//
Процедура ДобавитьОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, Объект, Представление = "") Экспорт
	
	НайденнаяПроблема = ПараметрыПроверки.ВыявленныеПроблемы[ПараметрыПроверки.ВыявленныеПроблемы.Количество() - 1];
	
	ОбъектУжеДобавлен = Ложь;
	
	Для Каждого ТекущаяСтрока Из НайденнаяПроблема.Объекты Цикл
		
		Если НЕ ТекущаяСтрока.ЭтоСоставнойОбъект И ТекущаяСтрока.Объект = Объект Тогда
			ТекущаяСтрока.Представление = ТекущаяСтрока.Представление + Символы.ПС + Представление;
			ОбъектУжеДобавлен = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбъектУжеДобавлен Тогда
		
		ОписаниеОбъекта = Новый Структура;
		ОписаниеОбъекта.Вставить("ЭтоСоставнойОбъект", Ложь);
		ОписаниеОбъекта.Вставить("Объект", 			   Объект);
		ОписаниеОбъекта.Вставить("Представление", 	   Представление);
	
		НайденнаяПроблема.Объекты.Добавить(ОписаниеОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет не ссылочный объект к последней строке таблицы выявленных проблем. Вызывается при выполнении проверки.
//
// Параметры:
// 	ПараметрыПроверки - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
// 	Расшифровка - Произвольный -
// 	Представление - Строка -
//
Процедура ДобавитьСоставнойОбъектКЗафиксированнойПроблеме(ПараметрыПроверки, Расшифровка, Представление = "") Экспорт
	
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("ЭтоСоставнойОбъект", 			 Истина);
	ОписаниеОбъекта.Вставить("СоставнойОбъект", 			 Новый УникальныйИдентификатор);
	ОписаниеОбъекта.Вставить("РасшифровкаСоставногоОбъекта", Новый ХранилищеЗначения(Расшифровка, Новый СжатиеДанных(9)));
	ОписаниеОбъекта.Вставить("Представление", 	   			 Представление);
	
	НайденнаяПроблема = ПараметрыПроверки.ВыявленныеПроблемы.Получить(ПараметрыПроверки.ВыявленныеПроблемы.Количество() - 1);
	НайденнаяПроблема.Объекты.Добавить(ОписаниеОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеПроверок

// Возвращает таблицу проверок.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ИдентификаторРодителя - Строка -
// * Наименование - Строка -
// * РасписаниеВыполнения - РасписаниеРегламентногоЗадания -  
// * ОписаниеДополнительныхПараметров - Произвольный -
// 
Функция ТаблицаПроверокСостоянияСистемы() Экспорт
	
	ТаблицаПроверок = Новый ТаблицаЗначений;
	
	СтруктураСлужебныхПараметров = Новый Структура("
		|РегламентноеЗаданиеGUID, РегламентноеЗаданиеПредставление,
		|Расписание, ДополнительныеПараметрыАвтопроверки, ОписаниеДополнительныхПараметров");
	
	ТаблицаПроверок.Колонки.Добавить("ИдентификаторРодителя", Новый ОписаниеТипов("Строка"));
	ТаблицаПроверок.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаПроверок.Колонки.Добавить("РасписаниеВыполнения");
	ТаблицаПроверок.Колонки.Добавить("ОписаниеДополнительныхПараметров");
	
	Для Каждого МетаРеквизит Из Метаданные.Справочники.ПравилаПроверкиУчета.Реквизиты Цикл
		Если НЕ СтруктураСлужебныхПараметров.Свойство(МетаРеквизит.Имя) Тогда
			ТаблицаПроверок.Колонки.Добавить(МетаРеквизит.Имя, МетаРеквизит.Тип);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПроверок;
	
КонецФункции

// Формирует описание проверки состояния системы.
// 
// Параметры:
// 	Проверка - СправочникСсылка.ПравилаПроверкиУчета - 
// 	КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета, Null -
// 	ЗначенияДопПараметров - Неопределено, Структура - Описание
// Возвращаемое значение:
// 	Структура - Описание:
// * ВыявленныеПроблемы - см. АудитСостоянияСистемы.ТаблицаВыявленныхПроблемПриПроверке
// * Отборы - см. АудитСостоянияСистемы.ТаблицаОтборовДляПроверки
// * ПричинаОтказаОтПроверки - Строка -
// * ПроверкаНеВыполнена - Булево -
// * КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета, Null -
// * ДополнительныеПараметры - Неопределено -
//
Функция ИнициализироватьПараметрыПроверки(Проверка, КонтекстПроверокВеденияУчета = NULL, ЗначенияДопПараметров = Неопределено) Экспорт
	
	Если КонтекстПроверокВеденияУчета = NULL Тогда
		КонтекстПроверокВеденияУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проверка, "КонтекстПроверокВеденияУчета");
	КонецЕсли;
	
	ПараметрыПроверки = Новый Структура;
	
	ПараметрыПроверки.Вставить("Проверка", 				  Проверка);
	ПараметрыПроверки.Вставить("ДополнительныеПараметры", ЗначенияДопПараметров);
	ПараметрыПроверки.Вставить("КонтекстПроверокВеденияУчета", 	  КонтекстПроверокВеденияУчета);
	
	ПараметрыПроверки.Вставить("ПроверкаНеВыполнена",  	  Ложь);
	ПараметрыПроверки.Вставить("ПричинаОтказаОтПроверки", "");
	
	ПараметрыПроверки.Вставить("Отборы", 			 	  ТаблицаОтборовДляПроверки());
	ПараметрыПроверки.Вставить("ВыявленныеПроблемы", 	  ТаблицаВыявленныхПроблемПриПроверке());
	
	Возврат ПараметрыПроверки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеСправочникаПроверок

// Возвращает таблицу групп проверок.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ИдентификаторРодителя - Строка -
// * Наименование - Строка -
// * КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета -
// * Идентификатор - Строка -
//
Функция ТаблицаГруппПроверокСостоянияСистемы() Экспорт
	
	ТаблицаГруппПроверок = Новый ТаблицаЗначений;
	
	ТаблицаГруппПроверок.Колонки.Добавить("ИдентификаторРодителя", Новый ОписаниеТипов("Строка"));
	ТаблицаГруппПроверок.Колонки.Добавить("Наименование", 		   Новый ОписаниеТипов("Строка"));
	ТаблицаГруппПроверок.Колонки.Добавить("КонтекстПроверокВеденияУчета",    Новый ОписаниеТипов(Метаданные.ОпределяемыеТипы.КонтекстПроверокВеденияУчета.Тип));
	ТаблицаГруппПроверок.Колонки.Добавить("Идентификатор", 		   Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаГруппПроверок;
	
КонецФункции

Функция ЗаполнитьСправочникПроверокСостоянияСистемы(ТипКонтекстаВыполнения = Неопределено, РежимОбновленияПроверок = Ложь) Экспорт
	
	// Вызовем механизм БСП для заполнения проверок
	КонтрольВеденияУчетаСлужебный.ОбновитьВспомогательныеДанныеПоИзменениямКонфигурации();
	
	Возврат Истина;
	
КонецФункции

// Предназначена для подключения собственных правил проверки ведения учета.
//
// Параметры:
//   ГруппыПроверок - ТаблицаЗначений - таблица, в которую добавляются группы проверок:
//      * Наименование                 - Строка - наименование группы проверок.
//      * ИдентификаторГруппы          - Строка - строковый идентификатор группы проверок, например: 
//                                       "СистемныеПроверки", "ЗакрытиеМесяца", "ПроверкиНДС" и т.п.
//                                       Обязателен для заполнения.
//      * Идентификатор                - Строка - строковый идентификатор группы проверок. Обязателен для заполнения.
//                                       Для уникальности формат идентификатора следует выбирать следующим:
//                                       "<Название программного продукта>.<Идентификатор проверки>". 
//                                       Например: "СтандартныеПодсистемы.СистемныеПроверки".
//      * КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета - значение, дополнительно
//                                       уточняющее принадлежность группы проверок ведения учета к определенной
//                                       категории.
//      * Комментарий                  - Строка - комментарий к группе проверок.
//
//   Проверки - ТаблицаЗначений - таблица, в которую добавляются проверки:
//      * ИдентификаторГруппы          - Строка - строковый идентификатор группы проверок, например: 
//                                                "СистемныеПроверки", "ЗакрытиеМесяца", "ПроверкиНДС" и т.п.
//                                                 Обязателен для заполнения.
//      * Наименование                 - Строка - наименование проверки, выводимое пользователю.
//      * Причины                      - Строка - описание возможных причин, которые приводят к возникновению проблемы.
//      * Рекомендация                 - Строка - рекомендация по решению возникшей проблемы.
//      * Идентификатор                - Строка - строковый идентификатор элемента. Обязателен для заполнения.
//                                                Формат идентификатора должен быть следующим:
//                                                <Название программного продукта>.<Идентификатор проверки>. Например:
//                                                СтандартныеПодсистемы.СистемныеПроверки.
//      * ДатаНачалаПроверки           - Дата - пороговая дата, обозначающая границу проверяемых объектов
//                                              (только для объектов с датой, например, документов). Объекты, дата 
//                                              которых меньше указанной, не следует проверять. По умолчанию 
//                                              не заполнено (т.е. проверять все).
//      * ЛимитПроблем                 - Число - количество проверяемых объектов. По умолчанию 1000. 
//                                               Если указан 0, то следует проверять все объекты.
//      * ОбработчикПроверки           - Строка - имя экспортной процедуры-обработчика серверного общего модуля
//                                                в виде ИмяМодуля.ИмяПроцедуры.
//      * ОбработчикПереходаКИсправлению - Строка - имя экспортной процедуры-обработчика клиентского общего модуля
//                                                  для перехода к исправлению проблемы в виде "ИмяМодуля.ИмяПроцедуры"
//                                                  или полное имя формы, которую следует открыть для исправления проблемы.
//                                                  Процедура-обработчик принимает на вход два параметра: 
//                                                    ПараметрыИсправления - Структура - со свойствами:
//                                                      ИдентификаторПроверки - Строка - строковый идентификатор проверки;
//                                                      ВидПроверки - СправочникСсылка.ВидыПроверок - вид проверки,
//                                                               дополнительно уточняющий область исправления проблемы;
//                                                    ДополнительныеПараметры - Неопределено - параметр не используется.
//                                                 При открытии формы в нее передаются такие же параметры, как свойства 
//                                                 указанной выше структуры ПараметрыИсправления.
//      * БезОбработчикаПроверки       - Булево - признак служебной проверки, которая не имеет процедуры-обработчика.
//      * ЗапрещеноИзменениеВажности   - Булево - если Истина, то администратор не сможет перенастраивать 
//                                                важность данной проверки.
//      * КонтекстПроверокВеденияУчета - ОпределяемыйТип.КонтекстПроверокВеденияУчета - значение, дополнительно 
//                                                уточняющее принадлежность проверки ведения учета к определенной группе 
//                                                или категории.
//      * УточнениеКонтекстаПроверокВеденияУчета - ОпределяемыйТип.УточнениеКонтекстаПроверокВеденияУчета - второе значение, 
//                                                 дополнительно уточняющее принадлежность проверки ведения учета 
//                                                 к определенной группе или категории.
//      * ДополнительныеПараметры      - ХранилищеЗначения - произвольная дополнительная информация о проверке
//                                                 для программного использования.
//      * Комментарий                  - Строка - текстовый комментарий к проверке.
//      * Отключена                    - Булево - если Истина, то проверка не будет выполняться в фоне по расписанию.
//      * ПоддерживаетВыборочнуюПроверку - Булево - если Истина, то проверку можно вызвать для проверки конкретного объекта.
//
// Пример:
//   1) Добавление проверки
//      Проверка = Проверки.Добавить();
//      Проверка.ИдентификаторГруппы = "СистемныеПроверки";
//      Проверка.Наименование        = НСтр("ru='Демо: Проверка заполнения комментария в документах ""Демо: Поступление товаров""'");
//      Проверка.Причины             = НСтр("ru='Не введен комментарий в документе.'");
//      Проверка.Рекомендация        = НСтр("ru='Ввести комментарий в документе.'");
//      Проверка.Идентификатор       = "ПроверитьКомментарийВПоступленииТоваров";
//      Проверка.ОбработчикПроверки  = "_ДемоСтандартныеПодсистемы.ПроверитьКомментарийВПоступленииТоваров";
//      Проверка.ДатаНачалаПроверки  = Дата('20140101000000');
//      Проверка.ЛимитПроблем        = 3;
//   2) Добавление группы проверок
//      ГруппаПроверок = ГруппыПроверок.Добавить();
//      ГруппаПроверок.Наименование                 = НСтр("ru='Системные проверки'");
//      ГруппаПроверок.Идентификатор                = "СтандартныеПодсистемы.СистемныеПроверки";
//      ГруппаПроверок.КонтекстПроверокВеденияУчета = "СистемныеПроверки";
//
Процедура ПриОпределенииПроверок(ГруппыПроверок, Проверки) Экспорт
	
	ОбновитьПроверкиПриПереходе();
	
	ТаблицаГруппПроверок = АудитСостоянияСистемыПовтИсп.ЗаполнитьГруппыПроверокДляРегистрации();
	ТаблицаПроверок = АудитСостоянияСистемыПовтИсп.ЗаполнитьПроверкиДляРегистрации();
	
	Для Каждого ТекСтр Из ТаблицаГруппПроверок Цикл
		
		НовСтр = ГруппыПроверок.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		
	КонецЦикла;
	
	Для Каждого ТекСтр Из ТаблицаПроверок Цикл
		
		НовСтр = Проверки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтр);
		
	КонецЦикла;
		
КонецПроцедуры


// Обновляет проверки при переходе на новую версию программы.
Процедура ОбновитьПроверкиПриПереходе()
	
	Если НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Перечисление.ОперацииЗакрытияМесяца КАК Отбор
	|		ПО Т.КонтекстПроверокВеденияУчета = Отбор.Ссылка
	|ГДЕ
	|	Т.ЭтоГруппа
	|	И Т.Родитель.Идентификатор = &ИдентификаторГруппыЗакрытиеМесяца
	|	И Т.Идентификатор = &СтарыйИдентификаторГруппы
	|	И НЕ Т.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИдентификаторГруппыЗакрытиеМесяца", "ЗакрытиеМесяца");
	Запрос.УстановитьПараметр("СтарыйИдентификаторГруппы", "ГруппаПроверокЭтапаЗакрытияМесяца");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ГруппаПроверокОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПравилаПроверкиУчета
		ГруппаПроверокОбъект.Идентификатор = "Группа" + "_" + ОбщегоНазначения.ИмяЗначенияПеречисления(ГруппаПроверокОбъект.КонтекстПроверокВеденияУчета);
		ГруппаПроверокОбъект.ПроверкаВеденияУчетаИзменена = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ГруппаПроверокОбъект);
		
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК Т
	|ГДЕ
	|	Т.КонтекстПроверокВеденияУчета <> НЕОПРЕДЕЛЕНО
	|	И Т.ПроверкаВеденияУчетаИзменена
	|	И НЕ Т.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПроверкаОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПравилаПроверкиУчета
		ПроверкаОбъект.ПроверкаВеденияУчетаИзменена = Ложь;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПроверкаОбъект);
		
	КонецЦикла;
	
КонецПроцедуры
	
// Правила проверки учета изменение перед записью.
// 
// Параметры:
//  Источник - СправочникОбъект.ПравилаПроверкиУчета - источник
//  Отказ - Булево - Отказ
Процедура ПравилаПроверкиУчетаПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ПометкаУдаления ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		ОписаниеПроверок = АудитСостоянияСистемыПовтИсп.ЗаполнитьГруппыПроверокДляРегистрации();
	Иначе
		ОписаниеПроверок = АудитСостоянияСистемыПовтИсп.ЗаполнитьПроверкиДляРегистрации();
	КонецЕсли;
	
	ИсключаемыеСвойства = "";
	Если НЕ Источник.ЭтоНовый() И НЕ Источник.ЭтоГруппа Тогда
		ИсключаемыеСвойства = "ВажностьПроблемы";
	КонецЕсли;
	
	Описание = ОписаниеПроверок.Найти(Источник.Идентификатор, "Идентификатор");
	Если Описание <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Источник, Описание, , ИсключаемыеСвойства);
		Источник.ПроверкаВеденияУчетаИзменена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиВФоне

// Выполнение проверки состояния системы общим регламентным заданием "УдалитьПроверкаСостоянияСистемы".
// Метод выполняет проверки из справочника "ПравилаПроверкиУчета" с установленным признаком "Использование"
// и с незаданным отдельным расписанием.
//
Процедура ВыполнитьПроверкиСостоянияСистемы(ИзРегламентногоЗадания = Истина) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалитьПроверкаСостоянияСистемы);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Проверки.Ссылка КАК Проверка,
	|	ВЫБОР
	|		КОГДА &ИзРегламентногоЗадания
	|			ТОГДА Проверки.ДополнительныеПараметрыАвтопроверки
	|		ИНАЧЕ Проверки.ОписаниеДополнительныхПараметров
	|	КОНЕЦ КАК ПараметрыПроверки
	|ИЗ
	|	Справочник.ПравилаПроверкиУчета КАК Проверки
	|ГДЕ
	|	Проверки.Использование
	|	И НЕ Проверки.ПоОтдельномуРасписанию
	|
	|УПОРЯДОЧИТЬ ПО
	|	Проверки.КонтекстПроверокВеденияУчета,
	|	Проверки.Идентификатор";
	
	Запрос.УстановитьПараметр("ИзРегламентногоЗадания", ИзРегламентногоЗадания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ВыполнитьПроверкуСостоянияСистемы(Выборка.Проверка, Выборка.ПараметрыПроверки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапуститьВыполнениеПроверокВФоне(Параметры, АдресХранилища) Экспорт
	
	ЗначенияДопПараметров = Неопределено;
	Параметры.Свойство("ЗначенияДопПараметров", ЗначенияДопПараметров);
	ЗначенияДопПараметровСоответствие = ЗначенияДопПараметров;
	
	Для Каждого Проверка Из Параметры.МассивПроверок Цикл
		
		Если ТипЗнч(ЗначенияДопПараметровСоответствие) = Тип("Соответствие") Тогда
			ЗначенияДопПараметров = ЗначенияДопПараметровСоответствие.Получить(Проверка);
		КонецЕсли;
		
		ВыполнитьПроверкуСостоянияСистемы(Проверка, ЗначенияДопПараметров);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВозможнаНастройкаРасписания() Экспорт
	
	Возврат НЕ ОбщегоНазначения.РазделениеВключено() И Пользователи.ЭтоПолноправныйПользователь(, Истина);
	
КонецФункции

#КонецОбласти

#Область ОписаниеПроверок

// Возвращает пустую таблицу отборов для проверки.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Организация - СправочникСсылка.Организации -
// * ПроверяемыйПериод - Дата -
//
Функция ТаблицаОтборовДляПроверки() Экспорт
	
	ОтборыДляПроверки = Новый ТаблицаЗначений;
	ОтборыДляПроверки.Колонки.Добавить("Организация", 	 	Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ОтборыДляПроверки.Колонки.Добавить("ПроверяемыйПериод", Новый ОписаниеТипов("Дата"));
	
	Возврат ОтборыДляПроверки;
	
КонецФункции	

// Возвращает пустую таблицу описания выявленных проблем при проверке.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Организация - СправочникСсылка.Организации -
// * ПроверяемыйПериод - Дата -
// * Представление - Строка -
// * Важность - ПеречислениеСсылка.ВажностьПроблемыУчета -
// * ДополнительнаяИнформация - Произвольный - 
// * Объекты - Массив -
//
Функция ТаблицаВыявленныхПроблемПриПроверке() Экспорт
	
	ВыявленныеПроблемы = Новый ТаблицаЗначений;
	
	ВыявленныеПроблемы.Колонки.Добавить("Организация", 	 	 Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ВыявленныеПроблемы.Колонки.Добавить("ПроверяемыйПериод", Новый ОписаниеТипов("Дата"));
	ВыявленныеПроблемы.Колонки.Добавить("Представление", 	 Новый ОписаниеТипов("Строка")); // для поля Проблема
	ВыявленныеПроблемы.Колонки.Добавить("Важность", 	 	 Новый ОписаниеТипов("ПеречислениеСсылка.ВажностьПроблемыУчета")); // не обязательное
	ВыявленныеПроблемы.Колонки.Добавить("ДополнительнаяИнформация");
	
	ВыявленныеПроблемы.Колонки.Добавить("Объекты", 		 	 Новый ОписаниеТипов("Массив"));
	
	ВыявленныеПроблемы.Индексы.Добавить("Организация, ПроверяемыйПериод");
	
	Возврат ВыявленныеПроблемы;
	
КонецФункции	

// Метод предназначен для получения произвольных сведений, связанных с проблемой, 
//	указанных при выявлении проблемы в момент проверки.
//
// Параметры:
//	Проблема - УникальныйИдентификатор - уникальный идентификатор проблемы.
//
// Возвращаемое значение:
// 	Произвольный - значение произвольного типа или Неопределено, если проблема не найдена
//
Функция ДополнительнаяИнформацияПоПроблеме(Проблема) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Проблемы.ДополнительнаяИнформация
	|ИЗ
	|	РегистрСведений.ПроблемыСостоянияСистемы КАК Проблемы
	|ГДЕ
	|	Проблемы.Проблема = &Проблема";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Проблема", Проблема);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДополнительнаяИнформация = Выборка.ДополнительнаяИнформация; // ХранилищеЗначения
		Возврат ДополнительнаяИнформация.Получить();
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Запускает проверку закрытия месяца по ее идентификатору
//
// Параметры:
//   Проверка            - СправочникСсылка.ПравилаПроверкиУчета, Строка - исполняемая проверка или ее идентификатор.
//   ПараметрыПроверки   - см. АудитСостоянияСистемы.ИнициализироватьПараметрыПроверки
//
Процедура УниверсальныйОбработчикПроверокЗакрытияМесяца(Проверка, ПараметрыПроверки) Экспорт
	
	Если ТипЗнч(Проверка) <> Тип("Строка") Тогда
		Возврат; // вызов проверок через стандартную механику БСП не предусмотрен
	КонецЕсли;
	
	ТаблицаПроверок = АудитСостоянияСистемыПовтИсп.ЗаполнитьПроверкиДляРегистрации();
	
	СтрокаПроверки = ТаблицаПроверок.Найти(Проверка, "Идентификатор");
	Если СтрокаПроверки = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не найдена проверка с идентификатором'") + " " + Проверка;
	КонецЕсли;
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрыПроверки); // ПараметрыПроверки будет изменен в обработчике

	// Выполним проверку.
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(СтрокаПроверки.ИсходныйОбработчик, МассивПараметров);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
