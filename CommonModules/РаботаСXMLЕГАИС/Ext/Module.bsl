#Область СлужебныеПроцедурыИФункции

// Преобразует объект XDTO в XML
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
//  ИдентификаторФСРАР - Строка - идентификатор отправителя в системе ФС РАР
//  ПространствоИмен - Строка - используемое пространство имен
//  ИмяТипа - Строка - Имя типа
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция ОбъектXDTOВXML(ОбъектXDTO, ИдентификаторФСРАР, ПространствоИмен, ИмяТипа) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Documents", КорневоеПространствоИмен());
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(
		Перечисления.ВидыДокументовЕГАИС.ПрефиксПространстваИмен(КорневоеПространствоИмен()),
		КорневоеПространствоИмен());
	
	Зависимости = Новый Массив;
	Зависимости.Добавить("http://www.w3.org/2001/XMLSchema-instance");
	Зависимости.Добавить("http://www.w3.org/2001/XMLSchema");
	
	РаботаСXMLИС.ЗависимыеПространстваИмен(ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).Зависимости, Зависимости);
	
	Если Зависимости.Найти(ПространствоИмен) = Неопределено Тогда
		Зависимости.Добавить(ПространствоИмен);
	КонецЕсли;
	
	Для Каждого ЗависимоеПространство Из Зависимости Цикл
		Префикс = Перечисления.ВидыДокументовЕГАИС.ПрефиксПространстваИмен(ЗависимоеПространство);
		Если НЕ ПустаяСтрока(Префикс) Тогда
			ЗаписьXML.ЗаписатьСоответствиеПространстваИмен(Префикс, ЗависимоеПространство);
		КонецЕсли;
	КонецЦикла;
	
	СодержимоеXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(КорневоеПространствоИмен(), "DocBody"));
	СодержимоеXDTO[ИмяТипа] = ОбъектXDTO;
	
	ОтправительXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(КорневоеПространствоИмен(), "SenderInfo"));
	ЗаполнитьСвойствоXDTO(ОтправительXDTO, "FSRAR_ID", ИдентификаторФСРАР);
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОтправительXDTO, "Owner",    КорневоеПространствоИмен());
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, СодержимоеXDTO,  "Document", КорневоеПространствоИмен());
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXML = СтрЗаменить(ТекстXML, "unqualified_element:", "");
	ТекстXML = СтрЗаменить(ТекстXML, "remove:", "");
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns:remove", "xmlns");
	
	Возврат ТекстXML;
	
КонецФункции

// Преобразует объект XDTO чека в XML.
//
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
//  ПространствоИмен - Строка - Имя пространства имен.
//  ИмяТипа - Строка - Имя типа
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML.
//
Функция ЧекXDTOВXML(ОбъектXDTO, ПространствоИмен, ИмяТипа) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	
	ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ОбъектXDTO, ИмяТипа);
	
	ТекстXML = ЗаписьXML.Закрыть();
	ТекстXML = СтрЗаменить(ТекстXML, "xmlns=""" + ПространствоИмен + """ ", "");
	
	Возврат ТекстXML;
	
КонецФункции

// Устанавливает значение свойства объекта XDTO.
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO - Объект XDTO
//  ИмяСвойства - Строка - Имя свойства
//  ЗначениеСвойства - Неопределено, Строка - Значение свойства
//  КешОшибок - Неопределено - Кеш ошибок
//  Глубина - Неопределено - Глубина
//  ТребуетсяЗаполнить - Неопределено, Булево - Требуется заполнить
// 
// Возвращаемое значение:
//  Булево - свойство XDTO заполнено
Функция ЗаполнитьСвойствоXDTO(
	ОбъектXDTO, ИмяСвойства, ЗначениеСвойства = Неопределено,
	КешОшибок = Неопределено, Глубина = Неопределено, ТребуетсяЗаполнить = Неопределено) Экспорт
	
	ДанныеДляРасшифровкиОшибок = РаботаСXMLИС.ДанныеДляРасшифровкиОшибок("ОбщийМакет.ПредставленияПолейЕГАИС", Глубина);
	СвойствоЗаполнено = РаботаСXMLИС.ЗаполнитьСвойствоXDTO(
		ОбъектXDTO, ИмяСвойства, ЗначениеСвойства, КешОшибок, ДанныеДляРасшифровкиОшибок, ТребуетсяЗаполнить);
	
	Возврат СвойствоЗаполнено;
	
КонецФункции

// Создает новый объект XDTO.
//
// Параметры:
//  ПространствоИмен - Строка - Пространство имен.
//  ИмяТипа - Строка - Имя типа в пространстве имен.
// 
// Возвращаемое значение:
//  ОбъектXDTO - Созданный объект XDTO/
//
Функция ОбъектXDTO(ПространствоИмен, ИмяТипа) Экспорт
	
	Возврат РаботаСXMLИС.ОбъектXDTO(ПространствоИмен, ИмяТипа);
	
КонецФункции

// Возвращает Объект XDTO, получаемый из текста сообщения XML
//
// Параметры:
//  ТекстСообщенияXML - Строка - Текст сообщения XML
//  Тип - Строка, Неопределено, ТипОбъектаXDTO - Тип объекта
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ОбъектXDTOПоТекстуСообщенияXML(ТекстСообщенияXML, Тип) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		СоздаваемыйТип = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(КорневоеПространствоИмен(), Тип).Тип();
	Иначе
		СоздаваемыйТип = Тип;
	КонецЕсли;
	
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, СоздаваемыйТип);
	
	Возврат ОбъектXDTO;
	
КонецФункции

// Преобразует содержимое произвольного объекта XDTO источника (без типов) в содержимое объекта XDTO приемника (с типами).
// Параметры:
//  ОбъектXDTOИсточник - ОбъектXDTO - Объект источник
//  ОбъектXDTOПриемник - ОбъектXDTO - Объект приемник
// 
// Возвращаемое значение:
//  ОбъектXDTO - Преобразовать произвольный объект XDTOВОбъект XDTO
Функция ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ОбъектXDTOИсточник, ОбъектXDTOПриемник) Экспорт
	
	Для Каждого СвойствоИсточника Из ОбъектXDTOИсточник.Свойства() Цикл
		
		ИмяСвойства      = СвойствоИсточника.Имя;
		ЗначениеСвойства = ОбъектXDTOИсточник[ИмяСвойства];
		
		СвойствоПриемника = ОбъектXDTOПриемник.Свойства().Получить(ИмяСвойства);
		Если СвойствоПриемника = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеСвойства = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеСвойства) = Тип("ОбъектXDTO") Тогда
			
			Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
				
				ЗначениеСвойстваПриемника = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(СвойствоПриемника.URIПространстваИмен, ИмяСвойства, ОбъектXDTOПриемник);
				
				Если ТипЗнч(ЗначениеСвойстваПриемника) = Тип("ОбъектXDTO") Тогда
					ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЗначениеСвойства, ЗначениеСвойстваПриемника);
					
					Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
						ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойстваПриемника);
					Иначе
						ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойстваПриемника;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеСвойства) = Тип("СписокXDTO") Тогда
			
			Для Индекс = 0 По ЗначениеСвойства.Количество() - 1 Цикл
				
				ЭлементСпискаИсточника = ЗначениеСвойства.Получить(Индекс);
				Если ТипЗнч(ЭлементСпискаИсточника) = Тип("ОбъектXDTO") Тогда
					
					Если ТипЗнч(СвойствоПриемника.Тип) = Тип("ТипОбъектаXDTO") Тогда
						
						ЭлементаСпискаПриемника = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(СвойствоПриемника.URIПространстваИмен, ИмяСвойства, ОбъектXDTOПриемник);
						
						Если ТипЗнч(ЭлементаСпискаПриемника) = Тип("ОбъектXDTO") Тогда
							ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(ЭлементСпискаИсточника, ЭлементаСпискаПриемника);
							ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементаСпискаПриемника);
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЭлементСпискаИсточника);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Попытка
				
				Если ТипЗнч(ОбъектXDTOПриемник[ИмяСвойства]) = Тип("СписокXDTO") Тогда
					ОбъектXDTOПриемник[ИмяСвойства].Добавить(ЗначениеСвойства);
				Иначе
					ОбъектXDTOПриемник[ИмяСвойства] = ЗначениеСвойства;
				КонецЕсли;
				
			Исключение
				Продолжить;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОбъектXDTOПриемник;
	
КонецФункции

// Представление ошибки XDTO.
// 
// Параметры:
//  ПредставлениеОшибки - см. РаботаСXMLИС.ДанныеДляРасшифровкиОшибок
//  ЧтениеXML - ЧтениеXML
//  Глубина - Число
// 
// Возвращаемое значение:
//  см. РаботаСXMLИС.ПредставлениеОшибкиXDTO
Функция ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, Глубина) Экспорт
	
	ДанныеДляРасшифровкиОшибок = РаботаСXMLИС.ДанныеДляРасшифровкиОшибок("ОбщийМакет.ПредставленияПолейЕГАИС", Глубина);
	Возврат РаботаСXMLИС.ПредставлениеОшибкиXDTO(ПредставлениеОшибки, ЧтениеXML, ДанныеДляРасшифровкиОшибок);
	
КонецФункции

// Возвращает корневое пространство имен для документов ЕГАИС.
//
// Возвращаемое значение:
//  Строка - Корневое пространство имен
Функция КорневоеПространствоИмен() Экспорт
	
	Возврат "http://fsrar.ru/WEGAIS/WB_DOC_SINGLE_01";
	
КонецФункции

#КонецОбласти