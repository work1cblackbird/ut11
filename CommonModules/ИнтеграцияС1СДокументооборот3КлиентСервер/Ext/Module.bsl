////////////////////////////////////////////////////////////////////////////////
// Подсистема "Интеграция с 1С:Документооборотом"
// Модуль ИнтеграцияС1СДокументооборот3КлиентСервер: клиент, сервер
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбщиеПроцедурыИФункции

// Возвращает варианты установки срока исполнения.
//
// Возвращаемое значение:
//   Структура:
//     * ТочныйСрок - Строка
//     * ОтносительныйСрок - Строка
//
Функция ВариантыУстановкиСрокаИсполнения() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТочныйСрок", "ExactDate");
	Результат.Вставить("ОтносительныйСрок", "RelativeDate");
	
	Возврат Результат;
	
КонецФункции

// Конструктор структуры, описывающей данные обработки.
//
// Параметры:
//   ПредметID - Строка - идентификатор предмета обработки.
//   ПредметТип - Строка - XDTO-тип предмета обработки.
//   ТекущееСостояние - Строка - текущее состояние обработки. Перечисление типа DMObjectProcessingState.
//   ПричинаПрерывания - Строка - причина прерывания обработки.
//
// Возвращаемое значение:
//   Структура:
//     * ПредметID - Строка
//     * ПредметТип - Строка
//     * ТекущееСостояние - Строка
//     * ПричинаПрерывания - Строка
//     * ТребуемоеИнтерактивноеДействие - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ТребуемоеИнтерактивноеДействие
//
Функция ДанныеОбработки(ПредметID, ПредметТип, ТекущееСостояние = "", ПричинаПрерывания = "") Экспорт
	
	ДанныеОбработки = Новый Структура;
	ДанныеОбработки.Вставить("ПредметID", ПредметID);
	ДанныеОбработки.Вставить("ПредметТип", ПредметТип);
	ДанныеОбработки.Вставить("ТекущееСостояние", ТекущееСостояние);
	ДанныеОбработки.Вставить("ПричинаПрерывания", ПричинаПрерывания);
	ДанныеОбработки.Вставить("ТребуемоеИнтерактивноеДействие", ТребуемоеИнтерактивноеДействие());
	
	Возврат ДанныеОбработки;
	
КонецФункции

// Конструктор структуры, описывающей задачу.
//
// Параметры:
//   ID - Строка - идентификатор задачи Документооборота.
//   Тип - Строка - XDTO-тип задачи Документооборота.
//   Заголовок - Строка - заголовок задачи.
//   НавигационнаяСсылка - Строка - навигационная ссылка на объект ДО.
//
// Возвращаемое значение:
//   Структура:
//     * ДействиеЗадачи - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * Новое - Булево
//     * Просрочено - Булево
//     * ПредставлениеHTML - Строка
//     * АдресДополнительныхДанных - Строка
//     * Флаг - Строка
//     * РезультатДействия - см. ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО
//     * РезультатДействияТекстом - Строка
//     * ВерсияДанныхДействияЗадачи - Строка
//     * ТребуемоеИнтерактивноеДействие - см. ИнтеграцияС1СДокументооборот3КлиентСервер.ТребуемоеИнтерактивноеДействие
//
Функция ДанныеПоЗадаче(ID, Тип, Заголовок = "", НавигационнаяСсылка = "") Экспорт
	
	ДанныеПоЗадаче = Новый Структура;
	ДанныеПоЗадаче.Вставить("ДействиеЗадачи",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО(
			ID,
			Тип,
			Заголовок,,
			НавигационнаяСсылка));
	ДанныеПоЗадаче.Вставить("Новое", Ложь);
	ДанныеПоЗадаче.Вставить("Просрочено", Ложь);
	ДанныеПоЗадаче.Вставить("ПредставлениеHTML", "");
	ДанныеПоЗадаче.Вставить("АдресДополнительныхДанных", "");
	ДанныеПоЗадаче.Вставить("Флаг", "");
	ДанныеПоЗадаче.Вставить("РезультатДействия",
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиентСервер.ДанныеСсылочногоОбъектаДО("", ""));
	ДанныеПоЗадаче.Вставить("РезультатДействияТекстом", "");
	ДанныеПоЗадаче.Вставить("ВерсияДанныхДействияЗадачи", "");
	ДанныеПоЗадаче.Вставить("ТребуемоеИнтерактивноеДействие", ТребуемоеИнтерактивноеДействие());
	
	Возврат ДанныеПоЗадаче;
	
КонецФункции

// Определяет является ли идентификатор пустым или заполненным.
//
// Параметры:
//   СтрокаИдентификатора - Строка - строковое представление идентификатора.
//
// Возвращаемое значение:
//   Булево
//
Функция ИдентификаторЗаполнен(СтрокаИдентификатора) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СтрокаИдентификатора)
		И СтрокаИдентификатора <> "00000000-0000-0000-0000-000000000000";
	
КонецФункции

// Список колонок таблицы "Быстрый поиск", подлежащие заполнению.
//
// Возвращаемое значение:
//   Строка
//
Функция КолонкиБыстрогоПоиска() Экспорт
	
	Возврат "Параметр, Значение, ЗначениеID, ЗначениеТип, ПредставлениеПараметра, Тип, ПредставлениеЗначения,
		|Фиксированный, ЗначениеПоУмолчанию, ЗначениеПоУмолчаниюID, ЗначениеПоУмолчаниюТип";
	
КонецФункции

// Перерисовывает на форме список кнопок переключения страниц динамического списка.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - форма, на которой находится динамический список.
//   ТекущаяСтраница - Число - номер текущей страницы.
//   ВсегоСтраниц - Число - максимальное количество страниц.
//
Процедура ОбновитьКнопкиДинамическогоСписка(Форма, ТекущаяСтраница, ВсегоСтраниц) Экспорт
	
	Если ТекущаяСтраница > ВсегоСтраниц Тогда
		ТекущаяСтраница = ВсегоСтраниц;
	КонецЕсли;
	
	Если ВсегоСтраниц = 1 Тогда
		Форма.Элементы.ПереключениеСтраниц.Видимость = Ложь;
		Возврат;
	Иначе
		Форма.Элементы.ПереключениеСтраниц.Видимость = Истина;
	КонецЕсли;
	
	Если (ВсегоСтраниц > 1) И (ВсегоСтраниц < 9) Тогда
		
		Для НомерКнопки = 1 По ВсегоСтраниц Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Истина;
		КонецЦикла;
		Для НомерКнопки = (ВсегоСтраниц + 1) По 9 Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Ложь;
		КонецЦикла;
		
	Иначе
		
		Для НомерКнопки = 1 По 9 Цикл
			Форма.Элементы["Страница" + НомерКнопки].Видимость = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьПревышение = (ВсегоСтраниц > 9);
	ЕстьЛеваяКнопкаВыбора = ЕстьПревышение И (ТекущаяСтраница > 5);
	ЕстьПраваяКнопкаВыбора = ЕстьПревышение И (ТекущаяСтраница < (ВсегоСтраниц - 4));
	
	Если ЕстьЛеваяКнопкаВыбора Тогда
		Форма.Элементы.Страница2.Заголовок = "...";
	Иначе
		Форма.Элементы.Страница2.Заголовок = "2";
	КонецЕсли;
	
	Если ЕстьЛеваяКнопкаВыбора И ЕстьПраваяКнопкаВыбора Тогда
		
		ТекущаяКнопка = 5;
		Форма.Элементы.Страница3.Заголовок = ТекущаяСтраница - 2;
		Форма.Элементы.Страница4.Заголовок = ТекущаяСтраница - 1;
		Форма.Элементы.Страница5.Заголовок = ТекущаяСтраница;
		Форма.Элементы.Страница6.Заголовок = ТекущаяСтраница + 1;
		Форма.Элементы.Страница7.Заголовок = ТекущаяСтраница + 2;
		
	ИначеЕсли ЕстьЛеваяКнопкаВыбора Тогда
		
		ТекущаяКнопка = 9 - (ВсегоСтраниц - ТекущаяСтраница);
		Форма.Элементы.Страница3.Заголовок = ВсегоСтраниц - 6;
		Форма.Элементы.Страница4.Заголовок = ВсегоСтраниц - 5;
		Форма.Элементы.Страница5.Заголовок = ВсегоСтраниц - 4;
		Форма.Элементы.Страница6.Заголовок = ВсегоСтраниц - 3;
		Форма.Элементы.Страница7.Заголовок = ВсегоСтраниц - 2;
		Форма.Элементы.Страница8.Заголовок = ВсегоСтраниц - 1;
		
	Иначе
		
		ТекущаяКнопка = ТекущаяСтраница;
		Форма.Элементы.Страница3.Заголовок = "3";
		Форма.Элементы.Страница4.Заголовок = "4";
		Форма.Элементы.Страница5.Заголовок = "5";
		Форма.Элементы.Страница6.Заголовок = "6";
		Форма.Элементы.Страница7.Заголовок = "7";
		Форма.Элементы.Страница8.Заголовок = "8";
		
	КонецЕсли;
	
	Если ЕстьПраваяКнопкаВыбора Тогда
		Форма.Элементы.Страница8.Заголовок = "...";
	КонецЕсли;
	
	Форма.Элементы.Страница9.Заголовок = ВсегоСтраниц;
	
	Для НомерКнопки = 1 По 9 Цикл
		Форма.Элементы["Страница" + НомерКнопки].Пометка = (НомерКнопки = ТекущаяКнопка);
	КонецЦикла;
	
	Форма.Элементы.Назад.Доступность = (ТекущаяСтраница > 1);
	Форма.Элементы.Вперед.Доступность = (ТекущаяСтраница < ВсегоСтраниц);
	
КонецПроцедуры

// Конструктор структуры, описывающей параметры изменения срока по представлению.
//
// Возвращаемое значение:
//   Структура:
//     * ТекстСообщенияПредупреждения - Строка - возвращаемый текст сообщения/предупреждения в случае ошибки.
//     * Исполнитель - Строка
//     * ИсполнительID - Строка
//     * ИсполнительТип - Строка
//     * ОсновнойОбъектАдресацииИсполнитель - Строка
//     * ОсновнойОбъектАдресацииИсполнительID - Строка
//     * ОсновнойОбъектАдресацииИсполнительТип - Строка
//     * ДополнительныйОбъектАдресацииИсполнитель - Строка
//     * ДополнительныйОбъектАдресацииИсполнительID - Строка
//     * ДополнительныйОбъектАдресацииИсполнительТип - Строка
//
Функция ПараметрыИзмененияСрокаПоПредставлению() Экспорт
	
	ПараметрыИзмененияСрока = Новый Структура;
	ПараметрыИзмененияСрока.Вставить("ТекстСообщенияПредупреждения", "");
	ПараметрыИзмененияСрока.Вставить("Исполнитель", "");
	ПараметрыИзмененияСрока.Вставить("ИсполнительID", "");
	ПараметрыИзмененияСрока.Вставить("ИсполнительТип", "");
	ПараметрыИзмененияСрока.Вставить("ОсновнойОбъектАдресацииИсполнитель", "");
	ПараметрыИзмененияСрока.Вставить("ОсновнойОбъектАдресацииИсполнительID", "");
	ПараметрыИзмененияСрока.Вставить("ОсновнойОбъектАдресацииИсполнительТип", "");
	ПараметрыИзмененияСрока.Вставить("ДополнительныйОбъектАдресацииИсполнитель", "");
	ПараметрыИзмененияСрока.Вставить("ДополнительныйОбъектАдресацииИсполнительID", "");
	ПараметрыИзмененияСрока.Вставить("ДополнительныйОбъектАдресацииИсполнительТип", "");
	
	Возврат ПараметрыИзмененияСрока;
	
КонецФункции

// Конструктор структуры, описывающей параметры формы списка задач.
//
// Возвращаемое значение:
//   Структура:
//     * ТекущаяСтраница - Число
//     * РазмерСтраницыДинамическогоСписка - Число
//     * ПолеДляСортировки - Строка
//     * НаправлениеСортировкиПоля - Строка
//     * Фильтры - СписокЗначений
//     * БыстрыйПоиск - ТаблицаЗначений
//     * ОтображениеКарточкиЗадачи - ПеречислениеСсылка.ВариантыОтображенияОбластиЧтения
//
Функция ПараметрыФормыСпискаЗадач() Экспорт
	
	ПараметрыФормыСпискаЗадач = Новый Структура;
	ПараметрыФормыСпискаЗадач.Вставить("ТекущаяСтраница", 0);
	ПараметрыФормыСпискаЗадач.Вставить("РазмерСтраницыДинамическогоСписка", 0);
	ПараметрыФормыСпискаЗадач.Вставить("ПолеДляСортировки", "");
	ПараметрыФормыСпискаЗадач.Вставить("НаправлениеСортировкиПоля", Ложь);
	ПараметрыФормыСпискаЗадач.Вставить("Фильтры", Новый СписокЗначений);
	ПараметрыФормыСпискаЗадач.Вставить("БыстрыйПоиск", Неопределено);
	ПараметрыФормыСпискаЗадач.Вставить("ОтображениеКарточкиЗадачи",
		ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.ПустаяСсылка"));
	
	Возврат ПараметрыФормыСпискаЗадач;
	
КонецФункции

// Возвращает представление срока исполнения в виде дата (длительность) или длительность (дата).
//
// Параметры:
//   Дата - Дата - срок исполнения датой.
//   Дни - Число - длительность, дней.
//   Часы - Число - длительность, часов.
//   Минуты - Число - длительность, минут.
//   ИспользоватьДатуИВремяВСроках - Булево - признак использования даты и времени в сроках.
//   ВариантУстановкиСрока - Строка - вариант установки срока исполнения.
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеСрокаИсполнения(Дата, Дни, Часы, Минуты,
		ИспользоватьДатуИВремяВСроках, ВариантУстановкиСрока) Экспорт
	
	Представление = "";
	
	ЗаполненТочныйСрок = ЗначениеЗаполнено(Дата);
	
	ЗаполненОтносительныйСрок = Дни > 0
		Или (ИспользоватьДатуИВремяВСроках И (Часы > 0 Или Минуты > 0));
	
	Если Не ЗаполненТочныйСрок И Не ЗаполненОтносительныйСрок Тогда
		Возврат Представление;
	КонецЕсли;
	
	ФормаДаты = ФорматДатыСроков(ИспользоватьДатуИВремяВСроках);
	
	Если ЗаполненТочныйСрок И ЗаполненОтносительныйСрок Тогда
		
		ВариантыУстановкиСрока = ВариантыУстановкиСрокаИсполнения();
		
		Если ВариантУстановкиСрока = ВариантыУстановкиСрока.ТочныйСрок Тогда
			ПерваяЧастьПредставления = Формат(Дата, ФормаДаты);
			Если ИспользоватьДатуИВремяВСроках Тогда
				ВтораяЧастьПредставления = ПредставлениеДлительности(Дни, Часы, Минуты);
			Иначе
				ВтораяЧастьПредставления = ПредставлениеДлительности(Дни, 0, 0);
			КонецЕсли;
		Иначе
			ВтораяЧастьПредставления = Формат(Дата, ФормаДаты);
			Если ИспользоватьДатуИВремяВСроках Тогда
				ПерваяЧастьПредставления = ПредставлениеДлительности(Дни, Часы, Минуты);
			Иначе
				ПерваяЧастьПредставления = ПредставлениеДлительности(Дни, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
		Представление = СтрШаблон("%1 (%2)",
			ПерваяЧастьПредставления,
			ВтораяЧастьПредставления);
		
	ИначеЕсли ЗаполненТочныйСрок Тогда
		Представление = Формат(Дата, ФормаДаты);
	Иначе
		Представление = ПредставлениеДлительности(Дни, Часы, Минуты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает представление типа объекта XDTO Документооборота по имени типа.
//
// Параметры:
//   ТипXDTO - Строка - имя типа объекта XDTO.
//   Режим - Строка - принимает значения: "ЕдинственноеЧисло", "МножественноеЧисло", "ЗаголовокФормыВыбора".
//
// Возвращаемое значение:
//   Строка - представление типа объекта XDTO Документооборота по имени типа.
//
Функция ПредставлениеТипаОбъектаXDTO(ТипXDTO, Режим = "МножественноеЧисло") Экспорт
	
	ПредставленияТипов = Новый Соответствие;
	
	ДобавитьПредставленияСправочников(Режим, ПредставленияТипов);
	ДобавитьПредставленияПеречислений(Режим, ПредставленияТипов);
	
	ПредставлениеТипа = ПредставленияТипов.Получить(ТипXDTO);
	
	Если ЗначениеЗаполнено(ПредставлениеТипа) Тогда
		Возврат ПредставлениеТипа;
	Иначе
		Возврат ТипXDTO;
	КонецЕсли;
	
КонецФункции

// Формирует представление порядка выполнения этапа действия.
//
// Параметры:
//   ПорядокXDTO - Строка - перечисление типа DMOrderOfExecutionActionStage.
//
// Возвращаемое значение:
//   Строка
//
Функция ПредставлениеПорядкаВыполненияЭтапаДействия(ПорядокXDTO) Экспорт
	
	Если ПорядокXDTO = "" Тогда
		Возврат "";
	ИначеЕсли ПорядокXDTO = "AllAtOnce" Тогда
		Возврат НСтр("ru='Все сразу'");
	ИначеЕсли ПорядокXDTO = "OneByOne" Тогда
		Возврат НСтр("ru='Один за другим'");
	КонецЕсли;
	
КонецФункции

// Формирует представление участника действия.
//
// Параметры:
//   СтрокаУчастника - ДанныеФормыЭлементДерева - строка дерева значений Участники в форме действия.
//   ДополнительноеОписание - Строка - дополнительное описание участника.
//   ПрефиксСтроки - Строка - префикс строки участника.
//
// Возвращаемое значение:
//   Строка - представление участника действия.
//
Функция ПредставлениеУчастника(СтрокаУчастника, ДополнительноеОписание = "", ПрефиксСтроки = "") Экспорт
	
	ПредставлениеСтрокиМассив = Новый Массив;
	Если ЗначениеЗаполнено(ПрефиксСтроки) Тогда
		ПредставлениеСтрокиМассив.Добавить(ПрефиксСтроки);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУчастника.УчастникID) Тогда
		ПредставлениеСтрокиМассив.Добавить(СтрокаУчастника.УчастникПредставление);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУчастника.УчастникID) И ЗначениеЗаполнено(ДополнительноеОписание) Тогда
		ПредставлениеСтрокиМассив.Добавить(ДополнительноеОписание);
	Иначе
		ПредставлениеСтрокиМассив.Добавить("                              ");
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставлениеСтрокиМассив);
	
КонецФункции

// Конструктор структуры, описывающей тип операции над задачей.
//
// Возвращаемое значение:
//   Структура:
//     * Начать - Булево
//     * Прервать - Булево
//     * Остановить - Булево
//     * Продолжить - Булево
//     * Заполнить - Булево
//     * Перезапустить - Булево
//
Функция ТипОперацииСОбработкой() Экспорт
	
	ТипОперации = Новый Структура;
	ТипОперации.Вставить("Начать", Ложь);
	ТипОперации.Вставить("Прервать", Ложь);
	ТипОперации.Вставить("Остановить", Ложь);
	ТипОперации.Вставить("Продолжить", Ложь);
	ТипОперации.Вставить("Заполнить", Ложь);
	ТипОперации.Вставить("Перезапустить", Ложь);
	
	Возврат ТипОперации;
	
КонецФункции

// Конструктор структуры, описывающей требуемое интерактивное действие.
//
// Возвращаемое значение:
//   Структура:
//     * ВернутьсяКЗадаче - Булево
//     * ВыбратьИсполнителяЗадачи - Булево
//     * ЗадатьПроизвольныйВопрос - Булево
//     * ИзменитьПараметрыПроцесса - Булево
//     * Контекст - Структура, Строка - Произвольные данные, необходимые для выполнения интерактивного действия.
//         Например, список возможных исполнителей задачи, или ссылка на процесс, параметры которого
//         требуется изменить. Также может содержать результат интерактивного действия.
//         Например, может содержать выбранного фактического исполнителя задачи, или параметры измененного процесса.
//                - Неопределено - если контекст для выполнения интерактивного действия не требуется.
//     * КешПредыдущихРезультатов - Строка
//
Функция ТребуемоеИнтерактивноеДействие() Экспорт
	
	ТребуемоеИнтерактивноеДействие = Новый Структура;
	ТребуемоеИнтерактивноеДействие.Вставить("ВернутьсяКЗадаче", Ложь);
	ТребуемоеИнтерактивноеДействие.Вставить("ВыбратьИсполнителяЗадачи", Ложь);
	ТребуемоеИнтерактивноеДействие.Вставить("ЗадатьПроизвольныйВопрос", Ложь);
	ТребуемоеИнтерактивноеДействие.Вставить("ИзменитьПараметрыПроцесса", Ложь);
	ТребуемоеИнтерактивноеДействие.Вставить("Контекст", Неопределено);
	ТребуемоеИнтерактивноеДействие.Вставить("КешПредыдущихРезультатов", "");
	
	Возврат ТребуемоеИнтерактивноеДействие;
	
КонецФункции

#КонецОбласти

#Область Задачи

// Возвращает строку документа из дерева приложений задачи, соответствующего текущей строке.
//
// Параметры:
//   ТекущаяСтрока - ДанныеФормыЭлементДерева, СтрокаДереваЗначений - текущая строка в дереве приложений на форме.
//
// Возвращаемое значение:
//   ДанныеФормыЭлементДерева
//   СтрокаДереваЗначений
//   Неопределено - если текущая строка не относится ни к какому документу.
//
Функция СтрокаДокументаВДеревеПриложений(Знач ТекущаяСтрока) Экспорт
	
	Пока ТекущаяСтрока <> Неопределено И НРег(ТекущаяСтрока.ПриложениеТип) <> "dmdocument" Цикл
		Если ТипЗнч(ТекущаяСтрока) = Тип("ДанныеФормыЭлементДерева") Тогда
			ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("СтрокаДереваЗначений") Тогда
			ТекущаяСтрока = ТекущаяСтрока["Родитель"];
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекущаяСтрока;
	
КонецФункции

#КонецОбласти

#Область Действия

// Проверяет наличие хотя бы одного защищенного участника в переданном этапе действия.
//
// Параметры:
//   Этап - ДанныеФормыЭлементДерева - строка этапа из дерева участников обработки.
//
// Возвращаемое значение:
//   Булево - есть защищенные участники.
//
Функция ЕстьЗащищенныеУчастникиДействия(Этап) Экспорт
	
	Результат = Ложь;
	
	Участники = Этап.ПолучитьЭлементы();
	Для Каждого Участник Из Участники Цикл
		Если Участник.Защищенный Тогда
			Результат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие этапов действия.
//
// Параметры:
//   Участники - ДанныеФормыДерево - дерево с участниками.
//   ИдентификаторЭтапа - Строка - предопределенный идентификатор участника действия, который мы не учитываем.
//   ИдентификаторОбрабатывающегоРезультат - Строка - предопределенный идентификатор обрабатывающего результат действия,
//     который мы не учитываем.
//
// Возвращаемое значение:
//   Булево - есть защищенные участники.
//
Функция ЕстьЭтапыДействия(Участники, ИдентификаторЭтапа, ИдентификаторОбрабатывающегоРезультат) Экспорт
	
	ЭлементыЭтапы = Участники.ПолучитьЭлементы();
	ЕстьЭтапы = Ложь;
	Для Каждого ЭлементЭтап Из ЭлементыЭтапы Цикл
		Если ЭлементЭтап.Идентификатор = ИдентификаторЭтапа
				Или ЭлементЭтап.Идентификатор = ИдентификаторОбрабатывающегоРезультат Тогда
			Продолжить;
		КонецЕсли;
		ЕстьЭтапы = Истина;
		Прервать;
	КонецЦикла;
	
	Возврат ЕстьЭтапы;
	
КонецФункции

// Возвращает имена полей таблицы участников действия на форме.
//
// Возвращаемое значение:
//   Строка
//
Функция ИменаПолейТаблицыУчастниковДействия() Экспорт
	
	ИменаПолей = "УчастникID,УчастникТип,ОсновнойОбъектАдресацииУчастникID,ОсновнойОбъектАдресацииУчастникТип,
		|ДополнительныйОбъектАдресацииУчастникID,ДополнительныйОбъектАдресацииУчастникТип,Идентификатор";
	
	Возврат СтрЗаменить(ИменаПолей, Символы.ПС, "");
	
КонецФункции

// Устанавливает описание, подсказку и отображение задержки начала выполнения действия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//   ПредставлениеЗапуска - Строка - описание задержки запуска.
//   ОчиститьЗадержкуПодсказка - Строка - неявно возвращаемое значение, подсказка команды формы ОчиститьЗадержку.
//   ОписаниеОтложенногоНачалаВыполненияПодсказка - Строка - неявно возвращаемое значение, подсказка элемента
//     формы ОписаниеОтложенногоНачалаВыполнения.
//
Процедура НастроитьОтображениеОтложенногоНачалаВыполненияДействия(Форма, ПредставлениеЗапуска = "",
		ОчиститьЗадержкуПодсказка = "", ОписаниеОтложенногоНачалаВыполненияПодсказка = "") Экспорт
	
	ОтложенноеНачалоВыполненияДни = Форма.ОтложенноеНачалоВыполненияДни;
	ОтложенноеНачалоВыполненияЧасы = Форма.ОтложенноеНачалоВыполненияЧасы;
	Элементы = Форма.Элементы;
	Элементы.ОчиститьЗадержку.Видимость = Истина;
	Элементы.ОписаниеОтложенногоНачалаВыполнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	Элементы.ОписаниеОтложенногоНачалаВыполнения.ВысотаЗаголовка = 1;
	
	Если Элементы.Найти("ОтложенноеДействие") <> Неопределено Тогда
		Элементы.ОтложенноеДействие.Видимость = Ложь;
	КонецЕсли;
	ОчиститьЗадержкуПодсказка = НСтр("ru = 'Очистить отложенное начало выполнения действия'");
	
	Если ЗначениеЗаполнено(ПредставлениеЗапуска) Тогда
		
		Форма.ОписаниеОтложенногоНачалаВыполнения = ПредставлениеЗапуска;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Подсказка =
			НСтр("ru = 'Выполнение действия начнется в указанное время'");
		Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 20;
		Элементы.ОписаниеОтложенногоНачалаВыполнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Если Элементы.Найти("ОтложенноеДействие") <> Неопределено Тогда
			Элементы.ОтложенноеДействие.Видимость = Истина;
		КонецЕсли;
		ОчиститьЗадержкуПодсказка = НСтр("ru = 'Начать выполнение действия немедленно'");
		Возврат;
		
	Иначе
		
		Если ЗначениеЗаполнено(Форма.ОтложенноеВыполнениеДата) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = 'на %1'"),
				Формат(Форма.ОтложенноеВыполнениеДата, НСтр("ru = 'ДФ=''HH:mm dd.MM.yyyy'''")));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 15;
			
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияДни) И ЗначениеЗаполнено(ОтложенноеНачалоВыполненияЧасы) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2 и %3 %4'"),
				Строка(ОтложенноеНачалоВыполненияДни),
				ПодписьККоличествуДней(ОтложенноеНачалоВыполненияДни),
				Строка(ОтложенноеНачалоВыполненияЧасы),
				ПодписьККоличествуЧасов(ОтложенноеНачалоВыполненияЧасы));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 11;
			
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияДни) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2'"),
				Строка(ОтложенноеНачалоВыполненияДни),
				ПодписьККоличествуДней(ОтложенноеНачалоВыполненияДни));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 5;
			
		ИначеЕсли ЗначениеЗаполнено(ОтложенноеНачалоВыполненияЧасы) Тогда
			Форма.ОписаниеОтложенногоНачалаВыполнения = СтрШаблон(
				НСтр("ru = '%1 %2'"),
				Строка(ОтложенноеНачалоВыполненияЧасы),
				ПодписьККоличествуЧасов(ОтложенноеНачалоВыполненияЧасы));
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 5;
			
		Иначе
			Форма.ОписаниеОтложенногоНачалаВыполнения = НСтр("ru = 'не настроено'");
			Элементы.ОчиститьЗадержку.Видимость = Ложь;
			Элементы.ОписаниеОтложенногоНачалаВыполнения.Ширина = 9;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОтложенногоНачалаВыполненияПодсказка =
		НСтр("ru = 'Если задано, то выполнение действия произойдет в указанное время или через указанное количество календарных дней/часов'");
	
КонецПроцедуры

// Возвращает номер картинки из КоллекцияРезультатыВыполненияДействий.
//
// Параметры:
//   Результат - Строка - результат действия.
//   Состояние - Строка - состояние действия.
//   ЕстьЗаявкаОтказа - Булево
//
// Возвращаемое значение:
//   Число
//
Функция НомерКартинкиРезультатаВыполненияДействия(Результат, Состояние = Неопределено, ЕстьЗаявкаОтказа = Ложь) Экспорт
	
	Если ЕстьЗаявкаОтказа Тогда
		Возврат 5; // Отказ.
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Если ЗначениеЗаполнено(Состояние) И (Состояние = "Performing" Или Состояние = "DelayedStart") Тогда
			Возврат 6;
			
		ИначеЕсли ЗначениеЗаполнено(Состояние) И Состояние = "InTheExecutionQueue" Тогда
			Возврат 7;
			
		ИначеЕсли ЗначениеЗаполнено(Состояние) И Состояние = "Skipped" Тогда
			Возврат 8;
			
		ИначеЕсли ЗначениеЗаполнено(Состояние) И Состояние = "OnPause" Тогда
			Возврат 11;
			
		ИначеЕсли ЗначениеЗаполнено(Состояние) И Состояние = "Completed" Тогда
			Возврат 1;
			
		КонецЕсли;
	КонецЕсли;
	
	Ранг = РангРезультатаДействия(Результат);
	
	Если Ранг = 0 Тогда
		Возврат 0; // Пусто.
		
	ИначеЕсли Ранг = 1 Тогда
		Возврат 5; // Отказ.
		
	ИначеЕсли Ранг = 4 Тогда
		Возврат 1; // Выполнено.
		
	ИначеЕсли Ранг = 2 Тогда
		Возврат 2; // Выполнено с отрицательным результатом.
		
	ИначеЕсли Ранг = 3 Тогда
		Возврат 3; // Выполнено положительно с замечаниями.
		
	ИначеЕсли Ранг = 5 Тогда
		Возврат 4; // Выполнено положительно.
		
	Иначе
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Возвращает общий результат двух результатов участников действия.
//
//
// Параметры:
//   Результат1 - Строка - результат действия.
//   Результат2 - Строка - результат действия.
//
// Возвращаемое значение:
//   Строка
//
Функция ОбщийРезультатДействия(Результат1, Результат2) Экспорт
	
	ДляВыбораМинимального = Ложь;
	Если Результат1 = "NotApproved" Или Результат2 = "NotApproved" Тогда
		ДляВыбораМинимального = Истина;
	КонецЕсли;
	Если Результат1 = "NotSigned" Или Результат2 = "NotSigned" Тогда
		ДляВыбораМинимального = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат1)
			Или Результат1 = Результат2
			Или РангРезультатаДействия(Результат1, ДляВыбораМинимального)
				>= РангРезультатаДействия(Результат2, ДляВыбораМинимального) Тогда
		Возврат Результат2;
		
	Иначе
		Возврат Результат1;
		
	КонецЕсли;
	
КонецФункции

// Возвращает общее состояние двух участников действия.
//
// Параметры:
//   Состояние1 - Строка - состояние действия.
//   Состояние2 - Строка - состояние действия.
//
// Возвращаемое значение:
//   Строка
//
Функция ОбщееСостояниеДействия(Состояние1, Состояние2) Экспорт
	
	Если Не ЗначениеЗаполнено(Состояние1)
			Или Состояние1 = Состояние2
			Или РангСостоянияДействия(Состояние1, Истина) >= РангСостоянияДействия(Состояние2, Истина) Тогда
		Возврат Состояние2;
		
	Иначе
		Возврат Состояние1;
		
	КонецЕсли;
	
КонецФункции

// Проверяет факт изменения участников в карточке действия.
// Работает в паре с процедурой ИнтеграцияС1СДокументооборот3.ЗаполнитьТаблицуУчастниковДействия.
//
// Параметры:
//   Форма - см. Обработка.ИнтеграцияС1СДокументооборот3.Форма.ДействиеИсполнения
//
// Возвращаемое значение:
//   Булево
//
Функция УчастникиДействияИзмененыВКарточке(Форма) Экспорт
	
	КоличествоЗаписей = Форма.УчастникиПриОткрытии.Количество();
	ЕстьОтличия = КоличествоЗаписей <> Форма.УчастникиПередЗаписью.Количество();
	
	Если Не ЕстьОтличия Тогда
		
		ПоляДляСравнения = СтрРазделить(ИменаПолейТаблицыУчастниковДействия(), ",");
		Для Сч = 0 По КоличествоЗаписей - 1 Цикл
			Для Каждого ИмяПоля Из ПоляДляСравнения Цикл
				Если Форма.УчастникиПриОткрытии[Сч][ИмяПоля] <> Форма.УчастникиПередЗаписью[Сч][ИмяПоля] Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЕстьОтличия;
	
КонецФункции

// Возвращает Истина, если указанное действие является действием исполнения.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеИсполнения(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionPerformance";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием согласования.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеСогласования(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionApproval";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием ознакомления.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеОзнакомления(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionExamination";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием подписания.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеПодписания(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionSigning";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием регистрации.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеРегистрации(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionRegistration";
	
КонецФункции

// Возвращает Истина, если указанное действие является действием утверждения.
//
// Параметры:
//   ТипДействия - Строка - имя типа XDTO.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоДействиеУтверждения(ТипДействия) Экспорт
	
	Возврат ТипДействия = "DMActionConfirmation";
	
КонецФункции

// Возвращает Истина, если параметр является функцией участника, обрабатывающего результат.
//
// Параметры:
//   ФункцияУчастника - Строка - функция участника действия.
//
// Возвращаемое значение:
//   Булево
//
Функция ЭтоФункцияОбработатьРезультат(ФункцияУчастника) Экспорт
	
	Если ФункцияУчастника = "PerformanceResultProcessor"
			Или ФункцияУчастника = "ProcessingResolution"
			Или ФункцияУчастника = "SigningResultProcessor"
			Или ФункцияУчастника = "RegistrationResultProcessor"
			Или ФункцияУчастника = "ApprovalResultProcessor"
			Или ФункцияУчастника = "ConfirmationResultProcessor" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПредставленияПеречислений(Режим, ПредставленияТипов)
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Тип ответа'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор типа ответа'");
	Иначе
		Представление = НСтр("ru='Типы ответа'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMEMailAnswerType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Вид вопросов выполнения задач'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор вида вопросов выполнения задач'");
	Иначе
		Представление = НСтр("ru='Виды вопросов выполнения задач'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMIssueType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Порядок продления'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор порядка продления'");
	Иначе
		Представление = НСтр("ru='Порядки продления'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMProlongationProcedure", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Состояние документа'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор состояния документа'");
	Иначе
		Представление = НСтр("ru='Состояния документов'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDocumentStatus", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Состояние мероприятия'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор состояния мероприятия'");
	Иначе
		Представление = НСтр("ru='Состояния мероприятий'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeetingStatus", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Состояние протокола мероприятия'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор состояния протокола мероприятия'");
	Иначе
		Представление = НСтр("ru='Состояния протоколов мероприятий'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeetingMinutesItemStatus", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Юридическое\физическое лицо'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор юр\физ лица'");
	Иначе
		Представление = НСтр("ru='Юридическое\физическое лица'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMLegalPrivatePerson", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Ставка НДС'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор ставки НДС'");
	Иначе
		Представление = НСтр("ru='Ставки НДС'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMVATRate", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Вариант подписания'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор варианта подписания'");
	Иначе
		Представление = НСтр("ru='Варианты подписания'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMSignatureOption", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Тип контактной информации'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор типа контактной информации'");
	Иначе
		Представление = НСтр("ru='Типы контактной информации'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMContactInformationType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Категория дел'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор категории дел'");
	Иначе
		Представление = НСтр("ru='Категории дел'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMCategoriesOfCases", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='День недели'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор дня недели'");
	Иначе
		Представление = НСтр("ru='Дни недели'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDaysOfTheWeek", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Вид дня'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор вида дня'");
	Иначе
		Представление = НСтр("ru='Виды дней'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMKindsOfDays", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Политика учета рабочего времени'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор политики учета рабочего времени'");
	Иначе
		Представление = НСтр("ru='Политики учета рабочего времени'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMTimeTrackingPolicy", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Тип ответа'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор типа ответа'");
	Иначе
		Представление = НСтр("ru='Типы ответа'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMIncomingEMailAnswerType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Состояние приглашения'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор состояния приглашения'");
	Иначе
		Представление = НСтр("ru='Состояния приглашения'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMInvitationStatus", Представление);
	
КонецПроцедуры

Процедура ДобавитьПредставленияСправочников(Режим, ПредставленияТипов)
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Контрагент, Организация, Пользователь'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор стороны'");
	Иначе
		Представление = НСтр("ru='Контрагенты, Организации, Пользователи'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMParty", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Проект'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор проекта'");
	Иначе
		Представление = НСтр("ru='Проекты'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMProject", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Проектная задача'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор проектной задачи'");
	Иначе
		Представление = НСтр("ru='Проектные задачи'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMProjectTask", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Тема обсуждения'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор темы обсуждений'");
	Иначе
		Представление = НСтр("ru='Темы обсуждений'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDiscussionTopic", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Сообщение обсуждения'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор сообщения обсуждений'");
	Иначе
		Представление = НСтр("ru='Сообщения обсуждений'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDiscussionMessage", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Файл'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор файла'");
	Иначе
		Представление = НСтр("ru='Файлы'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMFile", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Папка файлов'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор папки файлов'");
	Иначе
		Представление = НСтр("ru='Папки файлов'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMFileFolder", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Папка документов'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор папки документов'");
	Иначе
		Представление = НСтр("ru='Папки документов'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDocumentFolder", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Папка мероприятий'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор папки мероприятий'");
	Иначе
		Представление = НСтр("ru='Папки мероприятий'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeetingFolder", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Пользователь'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор пользователя'");
	Иначе
		Представление = НСтр("ru='Пользователи'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMUser", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Группа пользователей'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор группы пользователей'");
	Иначе
		Представление = НСтр("ru='Группы пользователей'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMUserGroup", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Сотрудник'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор сотрудника'");
	Иначе
		Представление = НСтр("ru='Сотрудники'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMEmployee", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Вопрос деятельности'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор вопроса деятельности'");
	Иначе
		Представление = НСтр("ru='Вопросы деятельности'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMActivityMatter", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Валюта'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор валюты'");
	Иначе
		Представление = НСтр("ru='Валюты'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMCurrency", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Документ'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор документа'");
	Иначе
		Представление = НСтр("ru='Документы'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDocument", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Мероприятие'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор мероприятия'");
	Иначе
		Представление = НСтр("ru='Мероприятия'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeeting", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Организация'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор организации'");
	Иначе
		Представление = НСтр("ru='Организации'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMOrganization", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Контрагент'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор контрагента'");
	Иначе
		Представление = НСтр("ru='Контрагенты'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMCorrespondent", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Контактное лицо'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор контактного лица'");
	Иначе
		Представление = НСтр("ru='Контактные лица'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMContactPerson", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Гриф доступа'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор грифа доступа'");
	Иначе
		Представление = НСтр("ru='Грифы доступа'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMAccessLevel", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Способ доставки'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор способа доставки'");
	Иначе
		Представление = НСтр("ru='Способы доставки'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDeliveryMethod", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Подразделение'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор подразделения'");
	Иначе
		Представление = НСтр("ru='Подразделения'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMSubdivision", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Вид документа'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор вида документов'");
	Иначе
		Представление = НСтр("ru='Виды документов'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMDocumentType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Вид мероприятия'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор вида мероприятия'");
	Иначе
		Представление = НСтр("ru='Виды мероприятий'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeetingType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Вид работ'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор вида работ'");
	Иначе
		Представление = НСтр("ru='Виды работ'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMWorkType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Тип связей'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор типа связей'");
	Иначе
		Представление = НСтр("ru='Типы связей'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMRelationType", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Значение свойств объектов'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор значения свойств объектов'");
	Иначе
		Представление = НСтр("ru='Значения свойств объектов'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMObjectPropertyValue", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Физическое лицо'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор физического лица'");
	Иначе
		Представление = НСтр("ru='Физические лица'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMPrivatePerson", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Условие маршрутизации'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор условия маршрутизации'");
	Иначе
		Представление = НСтр("ru='Условия маршрутизации'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMRoutingCondition", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Личный адресат'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор личного адресата'");
	Иначе
		Представление = НСтр("ru='Личные адресаты'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMPersonalRecipient", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Группа личных адресатов'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор группы личных адресатов'");
	Иначе
		Представление = НСтр("ru='Группы личных адресатов'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMPersonalRecipientGroup", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Роль исполнителя'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор роли исполнителей'");
	Иначе
		Представление = НСтр("ru='Роли исполнителей'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMBusinessProcessExecutorRole", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Статья движения денежных средств'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор статьи движения денежных средств'");
	Иначе
		Представление = НСтр("ru='Статьи движения денежных средств'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMCashFlowItem", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Единица измерения'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор единицы измерения'");
	Иначе
		Представление = НСтр("ru='Единицы измерения'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMMeasurementUnit", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Товар, услуга'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор номенклатуры'");
	Иначе
		Представление = НСтр("ru='Товары и услуги'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMProduct", Представление);
	
	Если Режим = "ЕдинственноеЧисло" Тогда
		Представление = НСтр("ru='Дополнительный реквизит / сведение'");
	ИначеЕсли Режим = "ЗаголовокФормыВыбора" Тогда
		Представление = НСтр("ru='Выбор дополнительного реквизита'");
	Иначе
		Представление = НСтр("ru='Дополнительные реквизиты и сведения'");
	КонецЕсли;
	ПредставленияТипов.Вставить("DMAdditionalProperty", Представление);
	
КонецПроцедуры

// Подпись к количеству дней по склонениям.
//
// Параметры:
//   ЧислоДней - Число - количество дней.
//
// Возвращаемое значение:
//   Строка
//
Функция ПодписьККоличествуДней(ЧислоДней)
	
	Если ЧислоДней > 10 И ЧислоДней < 20 Тогда
		Подпись = НСтр("ru = 'дней'");
	Иначе
		ПоследниеДвеЦифры = ЧислоДней - Цел(ЧислоДней / 100) * 100;
		ПоследняяЦифра = ЧислоДней - Цел(ЧислоДней / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = Нстр("ru = 'дней'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'день'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'дня'");
			Иначе
				Подпись = НСтр("ru = 'дней'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Подпись к количеству часов по склонениям.
//
// Параметры:
//   ЧислоЧасов - Число - количество часов.
//
// Возвращаемое значение:
//   Строка
//
Функция ПодписьККоличествуЧасов(ЧислоЧасов)
	
	Если ЧислоЧасов > 10 И ЧислоЧасов < 20 Тогда
		Подпись = НСтр("ru = 'часов'");
	Иначе
		ПоследниеДвеЦифры = ЧислоЧасов - Цел(ЧислоЧасов / 100) * 100;
		ПоследняяЦифра = ЧислоЧасов - Цел(ЧислоЧасов / 10) * 10;
		
		Если ПоследняяЦифра = 0 Тогда
			Подпись = НСтр("ru = 'часов'");
		ИначеЕсли ПоследниеДвеЦифры > 10 И ПоследниеДвеЦифры < 20 Тогда
			Подпись = НСтр("ru = 'часов'");
		ИначеЕсли ПоследниеДвеЦифры < 10 Или ПоследниеДвеЦифры > 20 Тогда
			Если ПоследняяЦифра = 1 Тогда
				Подпись = Нстр("ru = 'час'");
			ИначеЕсли ПоследняяЦифра < 5 Тогда
				Подпись = НСтр("ru = 'часа'");
			Иначе
				Подпись = НСтр("ru = 'часов'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Подпись;
	
КонецФункции

// Возвращает представление длительности.
//
// Параметры:
//   Дни - Число - длительность, дней.
//   Часы - Число - длительность, часов.
//   Минуты - Число - длительность, минут.
//
// Возвращаемое значение:
//   Строка - представление длительности строкой.
//
Функция ПредставлениеДлительности(Дни, Часы, Минуты)
	
	Если Дни = 0 И Часы = 0 И Минуты = 0 Тогда
		Возврат НСтр("ru = 'не определен'");
	КонецЕсли;
	
	ПредставлениеМассив = Новый Массив;
	
	ЕстьДни = ЗначениеЗаполнено(Дни);
	ЕстьЧасы = ЗначениеЗаполнено(Часы);
	ЕстьМинуты = ЗначениеЗаполнено(Минуты);
	
	Если ЕстьДни Тогда
		
		Если ЕстьЧасы И ЕстьМинуты Тогда
			ПредставлениеМассив.Добавить(СтрШаблон(НСтр("ru = '%1 дн.'"), Дни));
		Иначе
			ПредставлениеМассив.Добавить(
				СтрокаСЧислом(
					НСтр("ru=';%1 день;;%1 дня;%1 дней;%1 дня'"),
					Дни,
					ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьЧасы Тогда
		
		Если ЕстьДни И ЕстьМинуты Тогда
			ПредставлениеМассив.Добавить(СтрШаблон(НСтр("ru = '%1 ч.'"), Часы));
		Иначе
			ПредставлениеМассив.Добавить(
				СтрокаСЧислом(
					НСтр("ru=';%1 час;;%1 часа;%1 часов;%1 часа'"),
					Часы,
					ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьМинуты Тогда
		
		Если ЕстьДни И ЕстьЧасы Тогда
			ПредставлениеМассив.Добавить(СтрШаблон(НСтр("ru = '%1 мин.'"), Минуты));
		Иначе
			ПредставлениеМассив.Добавить(
				СтрокаСЧислом(
					НСтр("ru=';%1 минута;;%1 минуты;%1 минут;%1 минуты'"),
					Минуты,
					ВидЧисловогоЗначения.Количественное));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставлениеМассив, " ");
	
КонецФункции

// Преобразует все результаты действий к единой числовой шкале по степени успешности.
//
// Параметры:
//   Результат - Строка - результат действия.
//   ДляВыбораМинимального - Булево - режим отсечения не значащих значений более высоким рангом.
//
// Возвращаемое значение:
//   Число - от 0 до 9.
//
Функция РангРезультатаДействия(Результат, ДляВыбораМинимального = Ложь)
	
	Если Результат = "" Тогда
		Возврат ?(ДляВыбораМинимального, 8, 0);
		
	ИначеЕсли Результат = "Signed" Или Результат = "Received"
			Или Результат = "Confirmed" Или Результат = "Approved"
			Или Результат = "Registered" Тогда
		Возврат 5;
		
	ИначеЕсли Результат = "Performed" Или Результат = "Completed"
			Или Результат = "Reviewed" Или Результат = "Examined" Тогда
		Возврат 4;
		
	ИначеЕсли Результат = "ApprovedWithReservations" Тогда
		Возврат 3;
		
	ИначеЕсли Результат = "NotApproved" Или Результат = "NotConfirmed"
			Или Результат = "NotSigned" Или Результат = "NotAccepted"
			Или Результат = "NotRegistered" Тогда
		Возврат 2;
		
	ИначеЕсли Результат = "RefusalOfExamination" Или Результат = "RefusalOfPerformance"
			Или Результат = "RefusalOfReview" Тогда
		Возврат ?(ДляВыбораМинимального, 9, 1);
		
	Иначе
		Возврат 4;
		
	КонецЕсли;
	
КонецФункции

// Преобразует состояние действия к единой числовой шкале по степени успешности.
//
// Параметры:
//   Состояние - Строка - состояние действия.
//   ДляВыбораМинимального - Булево
//
// Возвращаемое значение:
//   Число - от 0 до 5.
//
Функция РангСостоянияДействия(Состояние, ДляВыбораМинимального = Ложь)
	
	Если Состояние = "" Тогда
		Возврат ?(ДляВыбораМинимального, 5, 0);
		
	ИначеЕсли Состояние = "Completed" Или Состояние = "OnPause" Тогда
		Возврат 3;
		
	ИначеЕсли Состояние = "InTheExecutionQueue" Тогда
		Возврат 1;
	Иначе
		Возврат 2;
		
	КонецЕсли;
	
КонецФункции

// Возвращает формат даты для сроков в зависимости от использования времени в сроках.
//
// Параметры:
//   ИспользоватьДатуИВремяВСроках - Булево
//
// Возвращаемое значение:
//   Строка
//
Функция ФорматДатыСроков(ИспользоватьДатуИВремяВСроках)
	
	Если ИспользоватьДатуИВремяВСроках Тогда
		Шаблон = "ДФ='dd.MM.yy HH:mm'; ДП='%1'";
	Иначе
		Шаблон = "ДФ='dd.MM.yy'; ДП='%1'";
	КонецЕсли;
	
	Возврат СтрШаблон(Шаблон, НСтр("ru = 'не определен'"));
	
КонецФункции

#КонецОбласти