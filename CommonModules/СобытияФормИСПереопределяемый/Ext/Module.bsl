#Область СлужебныйПрограммныйИнтерфейс

#Область Локализация

//Обработчик события вызывается на сервере при открытии формы конфигурации.
//   Выполняется определение необходимости встраивания подсистем (с учетом их наличия) в форму.
//
// Параметры:
//   Форма            - ФормаКлиентскогоПриложения - форма конфигурации
//   МодулиИнтеграции - Массив Из Строка- используемые модули интеграции
//
Процедура ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции) Экспорт
	
	//++ НЕ ГОСИС
	Модули = Новый Соответствие;
	
	ИмяФормы = Форма.ИмяФормы;
	Если ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВнутреннееПотребление.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровОтКлиента.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ОтчетОРозничныхПродажах.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ОтчетОРозничныхВозвратах.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ОтборРазмещениеТоваров.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента"

		Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
				И Не ИнтеграцияГИСМ.ПодсистемаНеИспользуется() Тогда
			Модули.Вставить("СобытияФормГИСМ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ПомощникНового"
		Или ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
			Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
				Модули.Вставить("СобытияФормЕГАИС");
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП")
				И ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции().Количество() Тогда
				Модули.Вставить("СобытияФормИСМП");
			КонецЕсли;
	КонецЕсли;
	
	Если ИмяФормы = "Справочник.НастройкиРМК.Форма.ФормаЭлемента" Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяФормы = "Справочник.Номенклатура.Форма.ФормаВыбора" Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.УказаниеСерииВСтрокеТоваров" Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПодконтрольныхТоваровВЕТИС") Тогда
			Модули.Вставить("СобытияФормВЕТИС");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК"
		Или ИмяФормы = "Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ОтборРазмещениеТоваров.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.КорректировкаПриобретения.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.АктОРасхожденияхПослеПриемки.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.АктОРасхожденияхПослеОтгрузки.Форма.ФормаДокумента"
		Или ИмяФормы = "Справочник.Номенклатура.Форма.ФормаЭлемента" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП")
				И ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции().Количество() Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьПроверкаИПодборВФорме(Форма) Тогда
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП")
				И ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции().Количество() Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если ИнтеграцияЕГАИС.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
		
		Если ИнтеграцияВЕТИС.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормВЕТИС");
		КонецЕсли;
		
		Если ИнтеграцияИСМП.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		
		Если ИнтеграцияЗЕРНО.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормЗЕРНО");
		КонецЕсли;
		
		Если ИнтеграцияСАТУРН.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормСАТУРН");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Модули Цикл
		МодулиИнтеграции.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Серверные обработчики БГосИС элементов прикладных форм
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		
		Если Элемент = "Товары" Тогда
			
			ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека(), Истина);
			ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
			
		ИначеЕсли Элемент = "ЗавершенаПроверкаКоличества" Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				ДополнительныеПараметры, "АкцизныеМарки") Тогда
				АкцизныеМарки = ПолучитьИзВременногоХранилища(ДополнительныеПараметры.АкцизныеМарки);
				Форма.Объект.АкцизныеМарки.Загрузить(АкцизныеМарки);
			КонецЕсли;
			ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
			ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека());
			ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
			
		ИначеЕсли Элемент = "Серии" Тогда
			
			ИнтеграцияЕГАИСУТ.ЗаполнитьАлкогольнуюПродукцию(Форма.Объект.Товары, Форма.Объект.Серии);
			ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, ПроверкаИПодборПродукцииИСМПУТ.НастройкиИсточникаКешаЧека(), Истина);
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ПомощникНового" Тогда
		
		Если Элемент = "Назначение" Тогда
			
			Если Форма.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок Тогда
				Форма.ДляЧего = Документы.ЗапросАкцизныхМарокЕГАИС.ПустаяСсылка();
				Форма.Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗапросАкцизныхМарокЕГАИС");
				Форма.Элементы.ДляЧего.Видимость = Истина;
			ИначеЕсли Форма.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок Тогда
				Форма.ДляЧего = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
				Форма.Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров");
				Форма.Элементы.ДляЧего.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
		
		Если Элемент = "Назначение" Тогда
			
			Если Форма.Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок Тогда
				Если ДополнительныеПараметры.ОчищатьНазначение ИЛИ Форма.Объект.ДляЧего = Неопределено Тогда
					Форма.Объект.ДляЧего = Документы.ЗапросАкцизныхМарокЕГАИС.ПустаяСсылка();
				КонецЕсли;
				Форма.Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗапросАкцизныхМарокЕГАИС");
			ИначеЕсли Форма.Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок Тогда
				Если ДополнительныеПараметры.ОчищатьНазначение ИЛИ Форма.Объект.ДляЧего = Неопределено Тогда
					Форма.Объект.ДляЧего = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
				КонецЕсли;
				Форма.Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ ГОСИС
	
КонецПроцедуры

// Вызывается после записи объекта на сервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова
Процедура ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокументаРМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокументаРМК" Тогда
		
		ИнтеграцияИСУТ.МодифицироватьИнициализироватьФормуРМК(Форма);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

Процедура ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ПомощникНового" Тогда
		
		Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок);
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
			Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаКодМаркировкиИСМП);
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
		
		Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок);
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
			Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаКодМаркировкиИСМП);
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.ПодборСерийВДокументы.Форма.УказаниеСерииВСтрокеТоваров" Тогда
		
		Если ДополнительныеПараметры.Свойство("ДатаПроизводстваНачалоПериода") Тогда
			Форма.ДатаПроизводства = ДополнительныеПараметры.ДатаПроизводстваНачалоПериода;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("СрокГодностиНачалоПериода") Тогда
			Форма.ГоденДо = ДополнительныеПараметры.СрокГодностиНачалоПериода;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ЗаписьСкладскогоЖурнала") Тогда
			Форма.ЗаписьСкладскогоЖурналаВЕТИС = ДополнительныеПараметры.ЗаписьСкладскогоЖурнала;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИдентификаторПартии") Тогда
			Форма.ИдентификаторПартииВЕТИС = ДополнительныеПараметры.ЗаписьСкладскогоЖурнала;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВозвратТоваровПоставщику.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВозвратТоваровОтКлиента.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.КорректировкаРеализации.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВнутреннееПотребление.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПеремещениеТоваров.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПередачаТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ВозвратТоваровМеждуОрганизациями.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ПередачаТоваровХранителю.Форма.ФормаДокумента"
	Тогда
		РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Форма.Элементы.Товары);
	
	ИначеЕсли Форма.ИмяФормы = "Документ.РасходныйОрдерНаТовары.Форма.ФормаДокумента" Тогда
		РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Форма.Элементы.ОтгружаемыеТовары);
	
	ИначеЕсли Форма.ИмяФормы = "Документ.ОтборРазмещениеТоваров.Форма.ФормаДокумента" Тогда
		РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Форма.Элементы.ТоварыОтбор);
		
	
	КонецЕсли;
	
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	//++ НЕ ГОСИС
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы



// Переопределяемая часть обработки проверки заполнения формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма.
//   Отказ - Булево - Истина если проверка заполнения не пройдена
//   ПроверяемыеРеквизиты - Массив Из Строка - реквизиты формы, отмеченные для проверки
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ НЕ ГОСИС
	Если Форма.ИмяФормы = "ОбщаяФорма.ФормаУточненияДанныхИС"
		Или Форма.ИмяФормы = "ОбщаяФорма.ФормаУточненияПодобраннойПродукцииИСМП" Тогда
		МассивНепроверяемыхРеквизитов = Новый Массив;
		Если Не Форма.ХарактеристикиИспользуются Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Форма.Склад) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Серия");
		ИначеЕсли Форма.Элементы.Серия.ТолькоПросмотр Или Не Форма.Элементы.Серия.ОтметкаНезаполненного Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Серия");
		КонецЕсли;
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ИначеЕсли Форма.ИмяФормы = "Справочник.ПартииСАТУРН.Форма.ФормаЭлемента"
		Или Форма.ИмяФормы = "Справочник.РеестрПартийЗЕРНО.Форма.ФормаЭлемента" Тогда
		
		МассивНепроверяемыхРеквизитов = Новый Массив;
		Если Не Форма.ХарактеристикиИспользуются Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийФорм

// Возникает на сервере при записи константы в формах настроек
// если запись одной константы может повлечь изменение других отображаемых в этой же форме.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма,
//  КонстантаИмя      - Строка           - записываемая константа,
//  КонстантаЗначение - Произвольный     - значение константы.
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	//++ НЕ ГОСИС
	Если НастройкиСистемыПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
		Форма.Прочитать();
	КонецЕсли;
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
// 
// Параметры:
//  Элемент - ПолеВвода - Элемент
//  Отображать - Булево - Отображать предупреждения при редактировании
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт

	ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать);
	Возврат
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	//++ НЕ ГОСИС
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		Форма.Элементы[ИмяПоляВводаХарактеристики].Видимость = Ложь;
	КонецЕсли;
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики, ПутьКПолюОтбора);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Единица измерения".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаЕдиницИзмерения - Строка - имя элемента формы "Единица измерения",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Упаковка".
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	                                                  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
	                                                  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	//++ НЕ ГОСИС
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = ИмяПоляВводаЕдиницИзмерения;
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = ПутьКПолюОтбора;
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(Форма, ПараметрыУсловногоОформления);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, в которой нужно установить условное оформление,
//   ИмяПоляВводаСерии - Строка - Имя элемента формы для указания серии
//   ПутьКПолюОтбораСтатусУказанияСерий - Строка - Имя реквизита формы со статусом указания серии
//   ПутьКПолюОтбораТипНоменклатуры - Строка - Имя реквизита формы с указанием типа номенклатуры
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры") Тогда
		Форма.Элементы[ИмяПоляВводаСерии].Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма, "СерииВсегдаВТЧТовары", ИмяПоляВводаСерии, ПутьКПолюОтбораСтатусУказанияСерий, ПутьКПолюОтбораТипНоменклатуры);
	
	// Статусы FEFO
	ПроверяемыйДокумент = Неопределено;
	Если Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор"
			Или Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииИСМП.Форма.ПроверкаИПодбор"
			Или Форма.ИмяФормы = "Обработка.ПроверкаИПодборАлкогольнойПродукцииМОТП.Форма.ПроверкаИПодбор" Тогда
		ПроверяемыйДокумент = Форма.Параметры.ПроверяемыйДокумент;
	ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ФормаУточненияДанныхИС"
			Или Форма.ИмяФормы = "ОбщаяФорма.УточнениеСоставаУпаковкиИС" Тогда
		ПроверяемыйДокумент = Форма.Параметры.ПараметрыСканирования.СсылкаНаОбъект;
	КонецЕсли;
	ЭтоДокументПоступления = Ложь;
	ТипПроверяемогоДокумента = ТипЗнч(ПроверяемыйДокумент);
	Если ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		Или ТипПроверяемогоДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		Или ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")
		Или (ТипПроверяемогоДокумента = Тип("ДокументСсылка.ОтборРазмещениеТоваров")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроверяемыйДокумент, "ВидОперации") = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение) Тогда
		ЭтоДокументПоступления = Истина;
	КонецЕсли;
	
	Если Не ЭтоДокументПоступления Тогда
		
		ПутьКПолюОтбораСерия = "Серия";
		Если СтрНайти(ПутьКПолюОтбораТипНоменклатуры, ".") Тогда
			РазделенныйПутьКПолюОтбораСерия = СтрРазделить(ПутьКПолюОтбораТипНоменклатуры, ".");
			РазделенныйПутьКПолюОтбораСерия[РазделенныйПутьКПолюОтбораСерия.Количество() -1] = "Серия";
			ПутьКПолюОтбораСерия = СтрСоединить(РазделенныйПутьКПолюОтбораСерия, ".");
		КонецЕсли;
	
		СписокСтатусовСерий = Новый СписокЗначений;
		СписокСтатусовСерий.Добавить(5);
		СписокСтатусовСерий.Добавить(6);
		СписокСтатусовСерий.Добавить(25);
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
	
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВводаСерии);
	
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСтатусУказанияСерий);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокСтатусовСерий;
	
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбораСерия);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Автозаполнение FEFO>'"));
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СвязиПараметровВыбора

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к данным текущей номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода,
	ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	//++ НЕ ГОСИС
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(
		Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Номенклатура", ПутьКДаннымНоменклатуры, РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода характеристики номенклатуры.
//
// Параметры:
//	Форма						- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода				- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымХарактеристики	- Строка			- Путь к данным текущей характеристики номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСХарактеристикой(Форма, ИмяПоляВвода,
	ПутьКДаннымХарактеристики = "Элементы.Товары.ТекущиеДанные.Характеристика") Экспорт
	
	//++ НЕ ГОСИС
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Характеристика", ПутьКДаннымХарактеристики, РежимИзмененияСвязанногоЗначения.НеИзменять));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем договоры хранения. 
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с договором.
//
Процедура УстановитьСвязиПараметровВыбораДоговора(Форма, ИмяПоляВвода) Экспорт
	
	//++ НЕ ГОСИС
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	//-- НЕ ГОСИС
	Возврат;
	
КонецПроцедуры

// Устанавливает параметры выбора договоры хранения.
//
//Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора.
//   ИмяПоляВвода            - Строка               - имя поля ввода договоры.
//
Процедура УстановитьПараметрыВыбораСвязиПараметровВыбораДоговора(Форма, ИмяПоляВвода = "Контрагент") Экспорт
	
	//++ НЕ ГОСИС
	
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Устанавливает у элемента формы Упаковка подсказку ввода для соответствующей номенклатуры
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта.
//
Процедура УстановитьИнформациюОЕдиницеХранения(Форма) Экспорт
	
	//++ НЕ ГОСИС
	Справочники.УпаковкиЕдиницыИзмерения.ОтобразитьИнформациюОЕдиницеХранения(Форма.Объект.Номенклатура, Форма.Элементы.Упаковка);
	//-- НЕ ГОСИС
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИзмененияОпределяемыхТипов

// Выполняет действия при изменении номенклатуры в объекте (форме, строке табличной части итп).
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - Произвольный - контекст редактирования (текущая строка таблицы, шапка объекта, форма)
//  КэшированныеЗначения   - Неопределено, Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - Произвольный - параметры указания серий формы
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения = Неопределено, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	СтруктураДействий = Новый Структура;
	ПроверятьОбъект = ТипЗнч(ТекущаяСтрока) = Тип("ФормаКлиентскогоПриложения") И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Объект");
	ДанныеТекущейСтроки = Новый Структура;
	ДанныеТекущейСтроки.Вставить("Номенклатура");
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "Характеристика", ПроверятьОбъект) Тогда
		ИнтеграцияИСУТ.ЗаполнитьРеквизит(ДанныеТекущейСтроки, ТекущаяСтрока, "Характеристика", ПроверятьОбъект);
		ИнтеграцияИСУТ.ЗаполнитьРеквизит(ДанныеТекущейСтроки, ТекущаяСтрока, "ХарактеристикиИспользуются", ПроверятьОбъект);
		
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
			ДанныеТекущейСтроки.Характеристика);
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "Серия", ПроверятьОбъект) Тогда
		ИнтеграцияИСУТ.ЗаполнитьРеквизит(ДанныеТекущейСтроки, ТекущаяСтрока, "Серия", ПроверятьОбъект);
		ИнтеграцияИСУТ.ЗаполнитьРеквизит(ДанныеТекущейСтроки, ТекущаяСтрока, "ТипНоменклатуры", ПроверятьОбъект);
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		Если ПараметрыУказанияСерий <> Неопределено Тогда
			
			ИнтеграцияИСУТ.ЗаполнитьРеквизит(ДанныеТекущейСтроки, ТекущаяСтрока, "СтатусУказанияСерий", ПроверятьОбъект);
			Если ЗначениеЗаполнено(ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта) Тогда
				ИсточникЗначенийВФорме = Форма[ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта];
			Иначе
				ИсточникЗначенийВФорме = Форма;
			КонецЕсли;
			
			ПараметрыУказанияСерийКопия = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
			
			ИмяТЧ = "Товары";
			Если ПараметрыУказанияСерийКопия.Свойство("ВыходныеИзделия") Тогда
				ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.ВыходныеИзделия;
				ИмяТЧ = "ВыходныеИзделия";
			КонецЕсли;
			
			Склад = Неопределено;
			Если СтрНачинаетсяС(Форма.ИмяФормы, "Обработка.ПроверкаИПодбор") Тогда
				ПараметрыУказанияСерийКопия.ИмяТЧТовары = ИмяТЧ;
				ПараметрыУказанияСерийКопия.ИмяТЧСерии = ИмяТЧ;
				ИнтеграцияИСУТКлиентСервер.ПараметрыУказанияСерийЗаменитьИмяТЧ(ПараметрыУказанияСерийКопия);
				ПараметрыУказанияСерийКопия.ИменаПолейДополнительные.Удалить(
				ПараметрыУказанияСерийКопия.ИменаПолейДополнительные.Найти("КоличествоПодобрано"));
				Склад = Форма.Склад;
			ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма.ФормаУточненияДанныхИС")
					Или СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма.УточнениеСоставаУпаковкиИС")
					Или СтрНачинаетсяС(Форма.ИмяФормы, "ОбщаяФорма.ФормаУточненияПодобраннойПродукцииИСМП") Тогда
				Склад = Форма.Склад;
			ИначеЕсли Не ПустаяСтрока(ПараметрыУказанияСерий.ИмяПоляСклад) Тогда
				Склад = ИсточникЗначенийВФорме[ПараметрыУказанияСерий.ИмяПоляСклад];
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
				Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерийКопия, Склад));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "Артикул", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("Артикул");
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "ЕдиницаИзмерения", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("ЕдиницаИзмерения");
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "СтавкаНДС", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("СтавкаНДС");
		ПараметрыДействия = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС();
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыДействия, Форма.Объект);
		Иначе
			ЗаполнитьЗначенияСвойств(ПараметрыДействия, Форма);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыДействия, ТекущаяСтрока);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ПараметрыДействия);
	КонецЕсли;
	
	СтруктураПересчетаСуммы = Новый Структура;
	СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "СуммаНДС", ПроверятьОбъект)
		И ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "СтавкаНДС", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("СуммаНДС", 0);
		ДанныеТекущейСтроки.Вставить("СтавкаНДС");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "СуммаСНДС", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("СуммаСНДС", 0);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "Сумма", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("Сумма", 0);
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "Упаковка", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("Упаковка");
		ДанныеТекущейСтроки.Вставить("Количество", 0);
		ДанныеТекущейСтроки.Вставить("КоличествоУпаковок", 0);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "КодТНВЭД", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("КодТНВЭД");
		СтруктураДействий.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТребуетВзвешивания") Тогда
		ДанныеТекущейСтроки.Вставить("ТребуетВзвешивания");
		СтруктураДействий.Вставить("ЗаполнитьПризнакТребуетВзвешивания",
			Новый Структура("Номенклатура", "ТребуетВзвешивания"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ПроизвольнаяЕдиницаУчета") Тогда
		ДанныеТекущейСтроки.Вставить("ПроизвольнаяЕдиницаУчета");
		СтруктураДействий.Вставить("ЗаполнитьПризнакПроизвольнаяЕдиницаУчета",
			Новый Структура("Номенклатура", "ПроизвольнаяЕдиницаУчета"));
	КонецЕсли;
	
	Если ИнтеграцияИСУТ.ЕстьРеквизит(ТекущаяСтрока, "СкоропортящаясяПродукция", ПроверятьОбъект) Тогда
		ДанныеТекущейСтроки.Вставить("СкоропортящаясяПродукция");
		СтруктураДействий.Вставить("ЗаполнитьПризнакСкоропортящаясяПродукция",
			Новый Структура("Номенклатура", "СкоропортящаясяПродукция"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "МаркируемаяПродукция") Тогда
		ДанныеТекущейСтроки.Вставить("МаркируемаяПродукция");
		СтруктураДействий.Вставить("ЗаполнитьПризнакМаркируемаяПродукция",
			Новый Структура("Номенклатура", "МаркируемаяПродукция"));
	КонецЕсли;
	
	Если ПроверятьОбъект Тогда
		ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ТекущаяСтрока);
		ЗаполнитьЗначенияСвойств(ДанныеТекущейСтроки, ТекущаяСтрока.Объект);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеТекущейСтроки, СтруктураДействий, КэшированныеЗначения);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеТекущейСтроки);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока.Объект, ДанныеТекущейСтроки);
	Иначе 
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

// Предназначена для получения текста запроса с контактной информацией, содержащей	ссылки на элементы и их адреса.
// Для автоподбора требуется предоставить пользователю первые 10 удовлетворяющих отбору записей.
// 
// Параметры:
//  ОписаниеТипов - ОписаниеТипов - Описание типов, для которых необходимо получить контактную информацию.
//   Возможные значения: Организации, Партнеры, Контрагенты, Склады,
//    ЗемельныйУчасток - если в качестве определяемого типа ЗемльныйУчастокИС используется тип, отличный от СправочникСсылка.ЗемельныеУчасткиИС.
//  ТекстЗапроса - Строка - Текст запроса.
//   Адрес должен содержать текст, указанный в параметре запроса СтрокаПоиска.
//   Возможен поиск по Наименованию, ИНН и другим полям справочников. 
//   Результат запроса должен содержать поля:
//    ВладелецАдреса               - Ссылка на элемент справочника - владельца адреса.
//    ПредставлениеВладельцаАдреса - Строка - строковое представление владельца адреса.
//    Адрес                        - Строка - контактная информация во внутреннем формате JSON или XML.
//    ПредставлениеАдреса          - Строка - строкое представление адреса.
//  ИмяВременнойТаблицы - Строка - Имя временной таблицы.
//   Если указано, тогда результат запроса должен быть помещен во временную таблицу с указанным именем.
//   Если не указано, тогда результат запроса во временную таблицу не помещается.
// 
Процедура ТекстЗапросаАдресаДляАвтоподбора(ОписаниеТипов, ТекстЗапроса, ИмяВременнойТаблицы = "") Экспорт
	
	//++ НЕ ГОСИС
	Если ИмяВременнойТаблицы = "" Тогда
		ТекстПоместить = "";
	Иначе
		ТекстПоместить = СтрШаблон("ПОМЕСТИТЬ %1", ИмяВременнойТаблицы);
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	Таблица.ВладелецАдреса               КАК ВладелецАдреса,
	|	Таблица.ПредставлениеВладельцаАдреса КАК ПредставлениеВладельцаАдреса,
	|	Таблица.Адрес                        КАК Адрес,
	|	Таблица.ПредставлениеАдреса          КАК ПредставлениеАдреса
	|%1
	|ИЗ
	|	(",
	ТекстПоместить);
	
	ТекстРазделителя = "
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Типы = ОписаниеТипов.Типы();
	
	ВложенныйЗапросПустой = Истина;
	Для Каждого Тип Из Типы Цикл
		
		ВидКИ = Новый Массив;
		Если Тип = Тип("СправочникСсылка.Организации") Тогда
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)");
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)");
		ИначеЕсли Тип = Тип("СправочникСсылка.Партнеры") Тогда
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПартнера)");
		ИначеЕсли Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента)");
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента)");
		ИначеЕсли Тип = Тип("СправочникСсылка.Склады") Тогда
			ВидКИ.Добавить("ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада)");
		КонецЕсли;
		
		Если Тип = Тип("СправочникСсылка.Организации")
			Или Тип = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ТекстПодзапроса = СтрШаблон("
			|ВЫБРАТЬ ПЕРВЫЕ 10
			|	ТаблицаСправочника.Ссылка КАК ВладелецАдреса,
			|	ТаблицаСправочника.Наименование КАК ПредставлениеВладельцаАдреса,
			|	ЕСТЬNULL(ТаблицаКонтактнойИнформации.Значение, """") КАК Адрес,
			|	ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") КАК ПредставлениеАдреса,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") <> """"
			|			ТОГДА ТаблицаКонтактнойИнформации.Представление
			|		ИНАЧЕ ТаблицаСправочника.Наименование
			|	КОНЕЦ КАК ПолеСортировки
			|ИЗ
			|	Справочник.%1 КАК ТаблицаСправочника
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%1.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
			|			(ВЫБРАТЬ
			|				ТаблицаКонтактнойИнформации.Ссылка КАК Ссылка,
			|				ТаблицаКонтактнойИнформации.Вид КАК Вид,
			|				МАКСИМУМ(ТаблицаКонтактнойИнформации.ДействуетС) КАК ДействуетС
			|			ИЗ
			|				Справочник.Контрагенты.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|			ГДЕ
			|				ТаблицаКонтактнойИнформации.Вид В (%2)
			|			СГРУППИРОВАТЬ ПО
			|				ТаблицаКонтактнойИнформации.Ссылка,
			|				ТаблицаКонтактнойИнформации.Вид
			|			) КАК ВложеннаяТаблицаКонтактнойИнформации
			|		ПО ТаблицаКонтактнойИнформации.Ссылка = ВложеннаяТаблицаКонтактнойИнформации.Ссылка
			|			И ТаблицаКонтактнойИнформации.Вид = ВложеннаяТаблицаКонтактнойИнформации.Вид
			|			И ТаблицаКонтактнойИнформации.ДействуетС = ВложеннаяТаблицаКонтактнойИнформации.ДействуетС
			|		ПО ТаблицаСправочника.Ссылка = ТаблицаКонтактнойИнформации.Ссылка
			|ГДЕ
			|	НЕ ТаблицаСправочника.ПометкаУдаления
			|	И (ТаблицаСправочника.Наименование ПОДОБНО &СтрокаПоиска
			|	ИЛИ ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") ПОДОБНО &СтрокаПоиска)",
			Метаданные.НайтиПоТипу(Тип).Имя,
			СтрСоединить(ВидКИ, ","));
			
		ИначеЕсли Тип = Тип("СправочникСсылка.Партнеры")
			Или Тип = Тип("СправочникСсылка.Склады") Тогда
			
			Если Тип = Тип("СправочникСсылка.Склады") Тогда
				УсловиеОтбора = "И НЕ ТаблицаСправочника.ЭтоГруппа";
			Иначе
				УсловиеОтбора = "";
			КонецЕсли;
			
			ТекстПодзапроса = СтрШаблон("
			|ВЫБРАТЬ ПЕРВЫЕ 10
			|	ТаблицаСправочника.Ссылка КАК ВладелецАдреса,
			|	ТаблицаСправочника.Наименование КАК ПредставлениеВладельцаАдреса,
			|	ЕСТЬNULL(ТаблицаКонтактнойИнформации.Значение, """") КАК Адрес,
			|	ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") КАК ПредставлениеАдреса,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") <> """"
			|			ТОГДА ТаблицаКонтактнойИнформации.Представление
			|		ИНАЧЕ ТаблицаСправочника.Наименование
			|	КОНЕЦ КАК ПолеСортировки
			|ИЗ
			|	Справочник.%1 КАК ТаблицаСправочника
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.%1.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|		ПО ТаблицаСправочника.Ссылка = ТаблицаКонтактнойИнформации.Ссылка
			|		И ТаблицаКонтактнойИнформации.Вид В (%2)
			|ГДЕ
			|	НЕ ТаблицаСправочника.ПометкаУдаления
			|	%3
			|	И (ТаблицаСправочника.Наименование ПОДОБНО &СтрокаПоиска
			|	ИЛИ ЕСТЬNULL(ТаблицаКонтактнойИнформации.Представление, """") ПОДОБНО &СтрокаПоиска)",
			Метаданные.НайтиПоТипу(Тип).Имя,
			СтрСоединить(ВидКИ, ","),
			УсловиеОтбора);
			
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ВложенныйЗапросПустой Тогда
			ВложенныйЗапросПустой = Ложь;
		Иначе
			ТекстЗапроса = ТекстЗапроса + ТекстРазделителя;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекстПодзапроса;
		
	КонецЦикла;
	
	Если ВложенныйЗапросПустой Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 0
		|	НЕОПРЕДЕЛЕНО КАК ВладелецАдреса,
		|	"""" КАК ПредставлениеВладельцаАдреса,
		|	"""" КАК Адрес,
		|	"""" КАК ПредставлениеАдреса,
		|	"""" КАК ПолеСортировки";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки) КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеСортировки";
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
