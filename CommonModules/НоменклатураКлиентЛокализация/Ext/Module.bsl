
#Область ПрограммныйИнтерфейс

#Область СертификатыНоменклатуры

// Обработчик события изменения реквизита формы списка сертификатов номенклатуры.
//
// Параметры:
//	Элемент - ПолеФормы - элемент формы, инициировавший событие.
//	Форма - ФормаКлиентскогоПриложения - форма списка сертификатов номенклатуры, в которой вызвано событие.
//
Процедура ПриИзмененииРеквизита_СертификатыНоменклатуры_ФормаСписка(Элемент, Форма) Экспорт
	
	//++ Локализация
	Если Элемент.Имя = Форма.Элементы.СтатусРосаккредитацииОтбор.Имя Тогда
		УстановитьОтборПоСтатусуРосаккредитации(Форма.СертификатыНоменклатуры, Форма.СтатусРосаккредитацииОтбор);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Обработчик команды формы списка сертификатов номенклатуры.
//
// Параметры:
//	Команда - КомандаФормы - команда формы, инициировавшая событие.
//	Форма - ФормаКлиентскогоПриложения - форма списка сертификатов номенклатуры, в которой вызвано событие.
//
Процедура ВыполнитьКоманду_СертификатыНоменклатуры_ФормаСписка(Команда, Форма) Экспорт
	
	//++ Локализация
	Если Команда.Имя = Форма.Элементы.ОбновитьСтатусыРосаккредитации.Имя Тогда
		ОбновитьСтатусыРосаккредитации(Форма, Форма.Элементы.СертификатыНоменклатуры);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Возвращает результат проверки выбранного пользователем поля в списке справочника сертификатов номенклатуры.
//
// Параметры:
//	Поле - ПолеФормы - выбранное поле формы.
//	Элементы -ВсеЭлементыФормы - элементы формы.
//
// Возвращаемое значение:
//	Булево - результат проверки выбранного пользователем поля в списке справочника сертификатов номенклатуры.
//				ИСТИНА - если выбрано поле колонки 'СтатусРосаккредитации'.
//
Функция ВыборСтатусРосаккредитации(Поле, Элементы) Экспорт
	
	Результат = Ложь;
	
	//++ Локализация
	Результат = Поле = Элементы.СертификатыНоменклатурыСтатусРосаккредитации;
	//-- Локализация
	
	Возврат Результат;
	
КонецФункции

// Выполняет обработку выбора поля 'СтатусРосаккредитации' в таблице списка справочника сертификатов номенклатуры.
//
// Параметры:
//	ТаблицаФормы - ТаблицаФормы - таблица списка справочника сертификатов номенклатуры.
//	СтандартнаяОбработка - Булево - признак выполнения стандартной обработки вызываемого обработчика события.
//	ИзменитьЭлемент - Булево - признак необходимости изменения выбранного элемента списка справочника сертификатов номенклатуры.
//
Процедура ПриВыбореСтатусРосаккредитации(ТаблицаФормы, СтандартнаяОбработка, ИзменитьЭлемент = Истина) Экспорт
	
	//++ Локализация
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	Если Не ПустаяСтрока(ТекущиеДанные.СсылкаНаСертификатРосаккредитации) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ТекущиеДанные.СсылкаНаСертификатРосаккредитации);
	ИначеЕсли ИзменитьЭлемент Тогда
		ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(ТаблицаФормы);
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеПолейПередУказаниемСерий(ВсеЗаполнено, Форма, ПараметрыУказанияСерий, ТекущиеДанные, ВыдаватьСообщения) Экспорт
	
	//++ Локализация
		
	ЭтоМаркировкаТоваровГИСМ = ПараметрыУказанияСерий.СкладскиеОперации.Найти(ПредопределенноеЗначение("Перечисление.СкладскиеОперации.МаркировкаПродукцииДляГИСМ")) <> Неопределено;
	ЭтоОперацияИдентификации = ПараметрыУказанияСерий.ОперацияДокумента = ПредопределенноеЗначение("Перечисление.ОперацииМаркировкиГИСМ.ИдентификацияРанееМаркированнойНаПроизводствеПродукции")
		ИЛИ ПараметрыУказанияСерий.ОперацияДокумента = ПредопределенноеЗначение("Перечисление.ОперацииМаркировкиГИСМ.ИдентификацияРанееМаркированныхПриИмпортеТоваров");
	
	Если ЭтоМаркировкаТоваровГИСМ
		И Не ЭтоОперацияИдентификации
		И (Не ЗначениеЗаполнено(ТекущиеДанные.НоменклатураКиЗ)
		Или ТекущиеДанные.ХарактеристикиКиЗИспользуются
		И Не ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаКиЗ)) Тогда
		Если ВыдаватьСообщения Тогда
			
			ТекстСообщения = НСтр("ru='Перед указанием серий нужно выбрать КиЗ.'");
			ПоказатьПредупреждение(,ТекстСообщения);
		КонецЕсли;
		ВсеЗаполнено = Ложь;
	ИначеЕсли ЭтоМаркировкаТоваровГИСМ
		И Не ЭтоОперацияИдентификации
		И Не ЗначениеЗаполнено(ТекущиеДанные.GTIN) Тогда
		Если ВыдаватьСообщения Тогда
			
			ТекстСообщения = НСтр("ru='Перед указанием серий нужно указать GTIN.'");
			ПоказатьПредупреждение(,ТекстСообщения);
		КонецЕсли;
		ВсеЗаполнено = Ложь;
	КонецЕсли;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ГиперссылкаПерейти(Форма, ПараметрыПереходаПоГиперссылке, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	Если ПараметрыПереходаПоГиперссылке.ИмяЭлемента = "ОткрытьФормуНастройкиВидовУпаковокПоGTINИСМП" Тогда
		
		СтандартнаяОбработка = Ложь;
		Объект               = Форма.Объект;
		
		ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоНоменклатуре(Форма, Объект.Ссылка);
	
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

Процедура ПараметрыПереходаПоГиперссылке(Форма, ПараметрыПереходаПоГиперссылке, ИмяЭлемента, Гиперссылка) Экспорт
	
	//++ Локализация
	//-- Локализация
	Возврат;
	
КонецПроцедуры

Процедура РазрешитьРедактированиеРеквизитовОбъектаЗавершение(Форма, Результат, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	Если Результат.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
		ПользовательРазрешилРедактирование = ИнтеграцияИСУТКлиент.ПользовательРазрешилРедактированиеРеквизита(Форма);
		ИнтеграцияИСУТКлиентСервер.НастройкаЭлементовВидаУпаковки(Форма, ПользовательРазрешилРедактирование, Ложь);
    КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#Область СертификатыНоменклатуры

//++ Локализация

Процедура ОбновитьСтатусыРосаккредитации(Форма, Список)
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = НоменклатураВызовСервераЛокализация.ОбновитьСтатусыРосаккредитации(Форма.УникальныйИдентификатор);
	
	ПараметрыОжидания	= ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОповещения	= Новый Структура("Список", Список);
	ОписаниеОповещения	= Новый ОписаниеОповещения("ОбновитьСтатусыРосаккредитацииЗавершение",
													ЭтотОбъект,
													ПараметрыОповещения);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

Процедура ОбновитьСтатусыРосаккредитацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатОбновленияСтатусовРосаккредитации(Результат, ДополнительныеПараметры.Список);
	
КонецПроцедуры

// Параметры:
//	Результат - см. НоменклатураЛокализация.ОбновитьСтатусыРосаккредитации.
//	Список - ТаблицаФормы - таблица формы, в которой выполняется обработка данных.
//
Процедура ОбработатьРезультатОбновленияСтатусовРосаккредитации(Результат, Список)
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'Возникла ошибка в процессе обновления статусов Росаккредитации сертификатов номенклатуры: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Результат.КраткоеПредставлениеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ВывестиСообщенияФоновогоЗадания(Результат.Сообщения);
	
	СтатусыОбновлены = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если СтатусыОбновлены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Список.Обновить();
	ОповеститьПользователяОбОбновленииСтатусовРосаккредитации(СтатусыОбновлены);
	
КонецПроцедуры

Процедура ОповеститьПользователяОбОбновленииСтатусовРосаккредитации(СтатусыОбновлены)
	
	ТекстЗаголовка = НСтр("ru = 'Обновление статусов Росаккредитации'");
	
	Если СтатусыОбновлены Тогда
		ТекстПояснения = НСтр("ru = 'Статусы Росаккредитации сертификатов номенклатуры обновлены'");
	Иначе
		ТекстПояснения = НСтр("ru = 'Статусы Росаккредитации сертификатов номенклатуры не обновлены'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстПояснения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

Процедура ВывестиСообщенияФоновогоЗадания(Сообщения)
	
	СообщенияЗадания = Новый Массив(Сообщения);
	
	Для Каждого СообщениеПредупреждения Из СообщенияЗадания Цикл
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеПредупреждения.Текст, СообщениеПредупреждения.КлючДанных);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборПоСтатусуРосаккредитации(Список, СтатусРосаккредитации)
	
	ЗначениеОтбора = ЗначениеОтбораСтатусаРосаккредитации(СтатусРосаккредитации);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СтатусРосаккредитации",
		ЗначениеОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		ЗначениеЗаполнено(ЗначениеОтбора));
	
КонецПроцедуры

Функция ЗначениеОтбораСтатусаРосаккредитации(СтатусРосаккредитацииОтбор)
	
	ЗначениеОтбора = Новый Массив;
	
	Если ТипЗнч(СтатусРосаккредитацииОтбор) = Тип("Строка") Тогда
		Если СтатусРосаккредитацииОтбор = "ВсеДействующие" Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ЗначениеОтбора,
				НоменклатураКлиентСерверЛокализация.ДействительныеСтатусыРосаккредитации());
		ИначеЕсли СтатусРосаккредитацииОтбор = "ВсеНеДействующие" Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ЗначениеОтбора,
				НоменклатураКлиентСерверЛокализация.НедействительныеСтатусыРосаккредитации());
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(СтатусРосаккредитацииОтбор) Тогда
		ЗначениеОтбора.Добавить(СтатусРосаккредитацииОтбор);
	КонецЕсли;
	
	Возврат ЗначениеОтбора;
	
КонецФункции

//-- Локализация

#КонецОбласти

#КонецОбласти