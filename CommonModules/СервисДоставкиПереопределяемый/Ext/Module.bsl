
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Сервис доставки".
// ОбщийМодуль.СервисДоставкиПереопределяемый.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПараметровОтбора

// Заполняет параметры отбора для формы выбора адреса организации.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Организация     - ОпределяемыйТип.ОрганизацияСервисДоставки - ссылка на организацию.
//
Процедура ЗаполнитьПараметрыОтбораАдресаОрганизации(ПараметрыОтбора, Организация) Экспорт
	
КонецПроцедуры

// Заполняет параметры отбора для формы выбора адреса контрагента.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Контрагент      - ОпределяемыйТип.КонтрагентСервисДоставки - ссылка на контрагента.
//
Процедура ЗаполнитьПараметрыОтбораАдресаКонтрагента(ПараметрыОтбора, Контрагент) Экспорт
	
	// ++ СервисДоставки.ERP
	ПараметрыОтбора.Вставить("Контрагент", Контрагент);
	// -- СервисДоставки.ERP
	
КонецПроцедуры

// Заполняет параметры отбора для формы выбора контактного лица организации.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Организация     - ОпределяемыйТип.ОрганизацияСервисДоставки - ссылка на организацию.
//
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаОрганизации(ПараметрыОтбора, Организация) Экспорт
	
КонецПроцедуры

// Заполняет параметры отбора для формы выбора контактного лица контрагента.
//
// Параметры:
//  ПараметрыОтбора - Структура - параметры отбора для формы выбора.
//  Контрагент      - ОпределяемыйТип.КонтрагентСервисДоставки - ссылка на контрагента.
//
Процедура ЗаполнитьПараметрыОтбораКонтактногоЛицаКонтрагента(ПараметрыОтбора, Контрагент) Экспорт
	
	// ++ СервисДоставки.ERP
	Партнер = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, Новый Структура("Партнер")).Партнер;
	СписокПартнеров = ПартнерыИКонтрагенты.ПолучитьНижестоящихПартнеров(Партнер);
	
	ПараметрыОтбора.Вставить("Владелец", СписокПартнеров);
	// -- СервисДоставки.ERP
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПараметровДаннымиИзУчетнойСистемы

// Заполнить валюту организации.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - организация.
//  Валюта - СправочникСсылка.Валюты - валюта организации.
Процедура ЗаполнитьВалютуОрганизации(Организация, Валюта) Экспорт
	
	ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
КонецПроцедуры

// Заполняет параметры заказа на доставку данными из объекта-основания заказа.
//
// Параметры:
//  Параметры - см. СервисДоставки.НовыйПараметрыЗаказаНаДоставку
//
Процедура ЗаполнитьПараметрыЗаказаНаДоставку(Параметры) Экспорт
	
	ДокументыОснования = Параметры.ДокументыОснования;
	
	Если ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонЗапросаШапка =
	"ВЫБРАТЬ
	|Т.Ссылка КАК ДокументОснование,
	|0 КАК ФормаОплаты,
	|NULL КАК ГрузоперевозчикСсылка,
	|"""" КАК ГрузоперевозчикИдентификатор,
	|"""" КАК ГрузоперевозчикНаименование,
	|"""" КАК ГрузоперевозчикТелефон,
	|"""" КАК ГрузоперевозчикИНН,
	|"""" КАК ГрузоперевозчикКПП,
	|"""" КАК ТарифНаименование,
	|"""" КАК ТарифИдентификатор,
	|"""" КАК ТарифНеГабарит,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ВремяОтгрузкиС,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ВремяОтгрузкиПо,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ВремяДоставкиС,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ВремяДоставкиПо,
	|0 КАК СпособОтгрузки,
	|0 КАК СпособДоставки,
	|NULL КАК Менеджер,
	|NULL КАК СкладОтправитель,
	|NULL КАК СкладПолучатель,
	|NULL КАК ОтправительКонтрагентСсылка,
	|"""" КАК ОтправительКонтрагентИНН,
	|"""" КАК ОтправительКонтрагентКПП,
	|"""" КАК ОтправительКонтрагентНаименование,
	|0 КАК ОтправительКонтрагентЮрФизЛицо,
	|NULL КАК ОтправительКонтрагентЮридическийАдресВладелец,
	|"""" КАК ОтправительКонтрагентЮридическийАдресПредставление,
	|"""" КАК ОтправительКонтрагентЮридическийАдресЗначение,
	|ЛОЖЬ КАК ОтправительКонтрагентЭтоОрганизация,
	|NULL КАК ОтправительАдресВладелец,
	|"""" КАК ОтправительАдресВладелецНаименование,
	|"""" КАК ОтправительАдресПредставление,
	|"""" КАК ОтправительАдресЗначенияПолей,
	|"""" КАК ОтправительАдресЗначение,
	|NULL КАК ОтправительКонтактноеЛицоСсылка,
	|"""" КАК ОтправительКонтактноеЛицоНаименование,
	|"""" КАК ОтправительКонтактноеЛицоТелефонПредставление,
	|"""" КАК ОтправительКонтактноеЛицоТелефонЗначение,
	|NULL КАК ПолучательКонтрагентСсылка,
	|"""" КАК ПолучательКонтрагентИНН,
	|"""" КАК ПолучательКонтрагентКПП,
	|"""" КАК ПолучательКонтрагентНаименование,
	|0 КАК ПолучательКонтрагентЮрФизЛицо,
	|NULL КАК ПолучательКонтрагентЮридическийАдресВладелец,
	|"""" КАК ПолучательКонтрагентЮридическийАдресПредставление,
	|"""" КАК ПолучательКонтрагентЮридическийАдресЗначение,
	|ЛОЖЬ КАК ПолучательКонтрагентЭтоОрганизация,
	|NULL КАК ПолучательАдресВладелец,
	|"""" КАК ПолучательАдресВладелецНаименование,
	|"""" КАК ПолучательАдресПредставление,
	|"""" КАК ПолучательАдресЗначенияПолей,
	|"""" КАК ПолучательАдресЗначение,
	|NULL КАК ПолучательКонтактноеЛицоСсылка,
	|"""" КАК ПолучательКонтактноеЛицоНаименование,
	|"""" КАК ПолучательКонтактноеЛицоТелефонПредставление,
	|"""" КАК ПолучательКонтактноеЛицоТелефонЗначение,
	|NULL КАК ПлательщикКонтрагентСсылка,
	|"""" КАК ПлательщикКонтрагентИНН,
	|"""" КАК ПлательщикКонтрагентКПП,
	|"""" КАК ПлательщикКонтрагентНаименование,
	|0 КАК ПлательщикКонтрагентЮрФизЛицо,
	|ИСТИНА КАК ПлательщикКонтрагентЭтоОрганизация,
	|NULL КАК ПлательщикКонтрагентЮридическийАдресВладелец,
	|"""" КАК ПлательщикКонтрагентЮридическийАдресПредставление,
	|"""" КАК ПлательщикКонтрагентЮридическийАдресЗначение,
	|NULL КАК ПлательщикКонтактноеЛицоСсылка,
	|"""" КАК ПлательщикКонтактноеЛицоНаименование,
	|"""" КАК ПлательщикКонтактноеЛицоТелефонПредставление,
	|"""" КАК ПлательщикКонтактноеЛицоТелефонЗначение,
	|1 КАК ПлательщикРоль,
	|"""" КАК ПунктПриемаГрузаИдентификатор,
	|NULL КАК ПунктПриемаГрузаСсылка,
	|"""" КАК ПунктВыдачиГрузаИдентификатор,
	|NULL КАК ПунктВыдачиГрузаСсылка,
	|0 КАК СуммаДокумента,
	|NULL КАК ВалютаСсылка,
	|"""" КАК ВалютаКод,
	|"""" КАК ВалютаНаименование,
	|ВЫБОР
	|	КОГДА ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|			И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|		ТОГДА КурсыВалюты.Курс / КурсыВалюты.Кратность
	|	ИНАЧЕ 1
	|КОНЕЦ КАК ВалютаКоэффициент,
	|ОрганизацииБизнесСеть.Организация КАК ОрганизацияБизнесСетиСсылка,
	|ОрганизацииБизнесСеть.Идентификатор КАК ОрганизацияБизнесСетиИдентификатор,
	|Т.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформация
	|ПОМЕСТИТЬ ДанныеОснований
	|ИЗ #ТаблицаДокумента КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ПО Т.Организация = ОрганизацииБизнесСеть.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалюты
	|		ПО ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) = КурсыВалюты.Валюта
	|ГДЕ
	|	Т.Ссылка В (&Основания)
	|";

	ШаблонЗапросаВидыЗапасов = 
	"ВЫБРАТЬ
	|	ТабВидыЗапасов.Ссылка КАК Ссылка,
	|	ТабВидыЗапасов.НомерСтроки КАК НомерСтроки,
	|	ТабВидыЗапасов.ВидЗапасов КАК УдалитьВидЗапасов,
	|	ТИПЗНАЧЕНИЯ(ТабВидыЗапасов.Ссылка) КАК ТипДокумента,
	|	ВЫБОР
	|		КОГДА ТабВидыЗапасов.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ТабВидыЗапасов.ВидЗапасов.Контрагент.ИНН
	|		ИНАЧЕ ТабВидыЗапасов.Ссылка.Организация.ИНН
	|	КОНЕЦ КАК ИННВладельцаГруза
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	#ТаблицаДокумента КАК ТабВидыЗапасов
	|ГДЕ
	|	ТабВидыЗапасов.Ссылка В(&Основания)";
	
	ПустойШаблонЗапросаВидыЗапасов = 
	"ВЫБРАТЬ
	|	NULL КАК Ссылка,
	|	0 КАК НомерСтроки,
	|	NULL КАК УдалитьВидЗапасов,
	|	NULL КАК ТипДокумента,
	|	NULL КАК ИННВладельцаГруза
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ГДЕ
	|	ЛОЖЬ";
	
	ШаблонЗапросаТовары =
	"ВЫБРАТЬ
	|Т.Ссылка КАК Ссылка,
	|&ПодстановкаАртикул КАК Артикул,
	|&ПодстановкаЭтоУслуга КАК ЭтоУслуга,
	|ДанныеВидовЗапасов.ИННВладельцаГруза КАК ИННВладельцаГруза,
	|NULL КАК Номенклатура,
	|NULL КАК Упаковка,
	|0 КАК Цена,
	|0 КАК Количество,
	|0 КАК СуммаВсего,
	|0 КАК СуммаСНДС,
	|0 КАК СуммаНДС,
	|&ПодстановкаСтавкаНДС КАК СтавкаНДС,
	|&ПодстановкаПредставлениеСтавкаНДС КАК СтавкаНДСПредставление,
	|0 КАК Вес,
	|0 КАК Объем,
	|0 КАК Длина,
	|0 КАК Ширина,
	|0 КАК Высота
	|ПОМЕСТИТЬ ДанныеОснованийТовары
	|ИЗ #ТаблицаДокумента КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|	ПО Т.Номенклатура = СправочникНоменклатура.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВидыЗапасов КАК ДанныеВидовЗапасов
	|	ПО Т.Ссылка = ДанныеВидовЗапасов.Ссылка
	|		И Т.НомерСтроки = ДанныеВидовЗапасов.НомерСтроки
	|ГДЕ
	|	Т.Ссылка В (&Основания)
	|	И &ПодстановкаТипНоменклатуры
	|	И &ПодстановкаОтменено
	|";
	
	Основания = ДокументыОснования.ВыгрузитьЗначения();
	ОснованияПоТипам = РазложитьМассивСсылокПоТипам(Основания);
	ПервыйЗапросПоШапке = Истина;
	ПервыйЗапросПоТоварам = Истина;
	ТекстЗапроса = "";
	ТекстЗапросаПоШапке = "";
	ТекстЗапросаПоТоварам = "";
	ТекстЗапросаВидовЗапасов = "";
	
	Для Каждого КлючИЗначение Из ОснованияПоТипам Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяТаблицыОбъекта = МетаданныеОбъекта.ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ИмяТаблицыОбъекта, ".")[1];
		
		ТекстЗапросаПоТипу = ШаблонЗапросаШапка;
		
		СНашегоСклада = ЭтоДокументОтгрузкиСНашегоСклада(ИмяОбъекта);
		НаНашСклад    = ЭтоДокументДоставкиНаНашСклад(ИмяОбъекта);
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПлательщикКонтрагентСсылка", "Т.Организация КАК ПлательщикКонтрагентСсылка");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПлательщикКонтрагентИНН", "Т.Организация.ИНН КАК ПлательщикКонтрагентИНН");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПлательщикКонтрагентКПП", "Т.Организация.КПП КАК ПлательщикКонтрагентКПП");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПлательщикКонтрагентНаименование", "Т.Организация.НаименованиеСокращенное КАК ПлательщикКонтрагентНаименование");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПлательщикКонтрагентЮридическийАдресВладелец", "Т.Организация КАК ПлательщикКонтрагентЮридическийАдресВладелец");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ПлательщикЮрФизЛицо",
											"ВЫБОР
											|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
											|		ТОГДА 1
											|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
											|		ТОГДА 2
											|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
											|		ТОГДА 3
											|	ИНАЧЕ 0
											|КОНЕЦ КАК ПлательщикЮрФизЛицо");
			
			Если СНашегоСклада Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтрагентСсылка", "Т.Организация КАК ОтправительКонтрагентСсылка");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентИНН", "Т.Организация.ИНН КАК ОтправительКонтрагентИНН");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентКПП", "Т.Организация.КПП КАК ОтправительКонтрагентКПП");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентНаименование", "Т.Организация.НаименованиеСокращенное КАК ОтправительКонтрагентНаименование");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ОтправительКонтрагентЮрФизЛицо",
												"ВЫБОР
												|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
												|		ТОГДА 1
												|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
												|		ТОГДА 2
												|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
												|		ТОГДА 3
												|	ИНАЧЕ 0
												|КОНЕЦ КАК ОтправительКонтрагентЮрФизЛицо");
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительАдресВладелец", "Т.Склад КАК ОтправительАдресВладелец");
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресВладелецНаименование", "Т.Склад.Наименование КАК ОтправительАдресВладелецНаименование");
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительАдресВладелец", "Т.СкладОтправитель КАК ОтправительАдресВладелец");
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресВладелецНаименование", "Т.СкладОтправитель.Наименование КАК ОтправительАдресВладелецНаименование");
				КонецЕсли;
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтрагентЮридическийАдресВладелец", "Т.Организация КАК ОтправительКонтрагентЮридическийАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЛОЖЬ КАК ОтправительКонтрагентЭтоОрганизация", "ИСТИНА КАК ОтправительКонтрагентЭтоОрганизация");
				
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентСсылка", "Т.Организация КАК ПолучательКонтрагентСсылка");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентИНН", "Т.Организация.ИНН КАК ПолучательКонтрагентИНН");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентКПП", "Т.Организация.КПП КАК ПолучательКонтрагентКПП");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентНаименование", "Т.Организация.НаименованиеСокращенное КАК ПолучательКонтрагентНаименование");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ПолучательКонтрагентЮрФизЛицо",
					"ВЫБОР
					|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
					|		ТОГДА 1
					|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
					|		ТОГДА 2
					|	КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
					|		ТОГДА 3
					|	ИНАЧЕ 0
					|КОНЕЦ КАК ПолучательКонтрагентЮрФизЛицо");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательАдресВладелец", "Т.Склад КАК ПолучательАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресВладелецНаименование", "Т.Склад.Наименование КАК ПолучательАдресВладелецНаименование");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентЮридическийАдресВладелец", "Т.Организация КАК ПолучательКонтрагентЮридическийАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЛОЖЬ КАК ПолучательКонтрагентЭтоОрганизация", "ИСТИНА КАК ПолучательКонтрагентЭтоОрганизация");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияПолучатель", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентСсылка",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель
				|	ИНАЧЕ Т.Организация
				|КОНЕЦ КАК ПолучательКонтрагентСсылка");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентИНН",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель.ИНН
				|	ИНАЧЕ Т.Организация.ИНН
				|КОНЕЦ КАК ПолучательКонтрагентИНН");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентКПП",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель.КПП
				|	ИНАЧЕ Т.Организация.КПП
				|КОНЕЦ КАК ПолучательКонтрагентКПП");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентНаименование",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель.НаименованиеСокращенное
				|	ИНАЧЕ Т.Организация.НаименованиеСокращенное
				|КОНЕЦ КАК ПолучательКонтрагентНаименование");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ПолучательКонтрагентЮрФизЛицо",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА 
				|			ВЫБОР
				|				КОГДА Т.ОрганизацияПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
				|					ТОГДА 1
				|				КОГДА Т.ОрганизацияПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
				|					ТОГДА 2
				|				КОГДА Т.ОрганизацияПолучатель.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
				|					ТОГДА 3
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|	ИНАЧЕ ВЫБОР
				|				КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
				|					ТОГДА 1
				|				КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
				|					ТОГДА 2
				|				КОГДА Т.Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
				|					ТОГДА 3
				|				ИНАЧЕ 0
				|			КОНЕЦ
				|КОНЕЦ КАК ПолучательКонтрагентЮрФизЛицо");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательАдресВладелец", "Т.СкладПолучатель КАК ПолучательАдресВладелец");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресВладелецНаименование", "Т.СкладПолучатель.Наименование КАК ПолучательАдресВладелецНаименование");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентЮридическийАдресВладелец", "Т.СкладПолучатель КАК ПолучательКонтрагентЮридическийАдресВладелец");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЛОЖЬ КАК ПолучательКонтрагентЭтоОрганизация", "ИСТИНА КАК ПолучательКонтрагентЭтоОрганизация");
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОбъекта) Тогда
			Если СНашегоСклада Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентСсылка", "Т.Контрагент КАК ПолучательКонтрагентСсылка");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентИНН", "Т.Контрагент.ИНН КАК ПолучательКонтрагентИНН");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентКПП", "Т.Контрагент.КПП КАК ПолучательКонтрагентКПП");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательКонтрагентНаименование",
					"ВЫБОР 
					|	КОГДА Т.Контрагент.НаименованиеПолное <> """" 
					|		ТОГДА Т.Контрагент.НаименованиеПолное 
					|	ИНАЧЕ Т.Контрагент.Наименование 
					|КОНЕЦ КАК ПолучательКонтрагентНаименование");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ПолучательКонтрагентЮрФизЛицо",
					"ВЫБОР
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
					|		ТОГДА 1
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
					|		ТОГДА 2
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
					|		ТОГДА 3
					|	ИНАЧЕ 0
					|КОНЕЦ КАК ПолучательКонтрагентЮрФизЛицо");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательАдресВладелец", "Т.Партнер КАК ПолучательАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательАдресВладелецНаименование", "Т.Партнер.Наименование КАК ПолучательАдресВладелецНаименование");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтрагентЮридическийАдресВладелец", "Т.Контрагент КАК ПолучательКонтрагентЮридическийАдресВладелец");
				
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтрагентСсылка", "Т.Контрагент КАК ОтправительКонтрагентСсылка");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентИНН", "Т.Контрагент.ИНН КАК ОтправительКонтрагентИНН");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентКПП", "Т.Контрагент.КПП КАК ОтправительКонтрагентКПП");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительКонтрагентНаименование",
					"ВЫБОР 
					|	КОГДА Т.Контрагент.НаименованиеПолное <> """" 
					|		ТОГДА Т.Контрагент.НаименованиеПолное 
					|	ИНАЧЕ Т.Контрагент.Наименование 
					|КОНЕЦ КАК ОтправительКонтрагентНаименование");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ОтправительКонтрагентЮрФизЛицо",
					"ВЫБОР
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
					|		ТОГДА 1
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
					|		ТОГДА 2
					|	КОГДА Т.Контрагент.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
					|		ТОГДА 3
					|	ИНАЧЕ 0
					|КОНЕЦ КАК ОтправительКонтрагентЮрФизЛицо");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительАдресВладелец", "Т.Партнер КАК ОтправительАдресВладелец");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительАдресВладелецНаименование", "Т.Партнер.Наименование КАК ОтправительАдресВладелецНаименование");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтрагентЮридическийАдресВладелец", "Т.Контрагент КАК ОтправительКонтрагентЮридическийАдресВладелец");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Менеджер", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Менеджер", "Т.Менеджер КАК Менеджер");
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Менеджер", "Т.Ответственный КАК Менеджер");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КонтактноеЛицо", МетаданныеОбъекта) Тогда
			Если СНашегоСклада Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПолучательКонтактноеЛицоСсылка",
					"Т.КонтактноеЛицо КАК ПолучательКонтактноеЛицоСсылка");
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтактноеЛицоСсылка",
					"Т.КонтактноеЛицо КАК ОтправительКонтактноеЛицоСсылка");
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ЗаказПоставщику", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ОтправительКонтактноеЛицоСсылка",
				"Т.ЗаказПоставщику.КонтактноеЛицо КАК ОтправительКонтактноеЛицоСсылка");
		КонецЕсли;
		
		Если СНашегоСклада Тогда
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладОтправитель",
					"Т.Склад КАК СкладОтправитель");
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладОтправитель",
					"Т.СкладОтправитель КАК СкладОтправитель");
			КонецЕсли;
		КонецЕсли;
		
		Если НаНашСклад Тогда
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладПолучатель",
					"Т.Склад КАК СкладПолучатель");
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладПолучатель",
					"Т.СкладПолучатель КАК СкладПолучатель");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПеревозчикПартнер", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ГрузоперевозчикСсылка", "Т.ПеревозчикПартнер КАК ГрузоперевозчикСсылка");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаОтгрузки", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки", "Т.ДатаОтгрузки КАК ДатаОтгрузки");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаПоступления", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки", "Т.ДатаПоступления КАК ДатаДоставки");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СпособДоставки", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СпособОтгрузки",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
				|			ТОГДА 2
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СпособОтгрузки");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СпособДоставки",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
				|			ТОГДА 2
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СпособДоставки");
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВремяДоставкиС", МетаданныеОбъекта) Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ВремяОтгрузкиС",
					"	ВЫБОР
					|		КОГДА Т.СпособДоставки = ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
					|			ТОГДА ШапкаДокумента.ВремяДоставкиС
					|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|	КОНЕЦ КАК ВремяОтгрузкиС");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ВремяОтгрузкиДо",
					"	ВЫБОР
					|		КОГДА Т.СпособДоставки = ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
					|			ТОГДА ШапкаДокумента.ВремяДоставкиДо
					|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|	КОНЕЦ КАК ВремяОтгрузкиДо");
				
			КонецЕсли;
			
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВремяДоставкиПо", МетаданныеОбъекта) Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ВремяДоставкиС",
					"	ВЫБОР
					|		КОГДА Т.СпособДоставки = ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
					|			ТОГДА ШапкаДокумента.ВремяДоставкиС
					|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|	КОНЕЦ КАК ВремяДоставкиС");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК ВремяДоставкиДо",
					"	ВЫБОР
					|		КОГДА Т.СпособДоставки = ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.КПолучателюОпределяетСлужбаДоставки)
					|			ИЛИ ШапкаДокумента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
					|			ТОГДА ШапкаДокумента.ВремяДоставкиДо
					|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
					|	КОНЕЦ КАК ВремяДоставкиДо");
				
			КонецЕсли;
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресПредставление",
			"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
				|			ИЛИ Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
				|			ТОГДА Т.АдресДоставки
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ОтправительАдресПредставление");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресЗначенияПолей",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
				|			ИЛИ Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
				|			ТОГДА Т.АдресДоставкиЗначенияПолей
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ОтправительАдресЗначенияПолей");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдресЗначение",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
				|			ИЛИ Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
				|			ТОГДА Т.АдресДоставкиЗначение
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ОтправительАдресЗначение");
			
			Если СНашегоСклада Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресПредставление",
					"Т.АдресДоставки КАК ПолучательАдресПредставление");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресЗначенияПолей",
					"Т.АдресДоставкиЗначенияПолей КАК ПолучательАдресЗначенияПолей");
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдресЗначение",
					"Т.АдресДоставкиЗначение КАК ПолучательАдресЗначение");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Валюта", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ВалютаСсылка", "Т.Валюта КАК ВалютаСсылка");
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) = КурсыВалюты.Валюта", "Т.Валюта = КурсыВалюты.Валюта");
		КонецЕсли;
		
		ДополнитьЗапросПоОснованиям(ТекстЗапросаПоШапке, ТекстЗапросаПоТипу, ПервыйЗапросПоШапке, ИмяТаблицыОбъекта);
		
		ИмяТаблицыЗапасов = "ВидыЗапасов";
		Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТаблицыЗапасов) = Неопределено Тогда
			ТекстЗапросаВидовЗапасов = ПустойШаблонЗапросаВидыЗапасов;
		Иначе
			ТекстЗапросаВидовЗапасов = "";
			ДополнитьЗапросПоОснованиям(
				ТекстЗапросаВидовЗапасов, ШаблонЗапросаВидыЗапасов, Истина, ИмяТаблицыОбъекта + "." + ИмяТаблицыЗапасов);
		КонецЕсли;
		
		СписокТабличныхЧастейТовары = Новый Массив();
		СписокТабличныхЧастейТовары.Добавить("Товары");
		СписокТабличныхЧастейТовары.Добавить("ЗаменяющиеТовары");
		
		Для Каждого ИмяТаблицыТЧ Из СписокТабличныхЧастейТовары Цикл
		
			ТекстЗапросаПоТипу = ШаблонЗапросаТовары;
			
			Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТаблицыТЧ) <> Неопределено Тогда
				
				МетаданныеОбъектаТЧ = МетаданныеОбъекта.ТабличныеЧасти[ИмяТаблицыТЧ]; // Структура
				ИмяТаблицыТЧОбъекта = ИмяТаблицыОбъекта + "." + МетаданныеОбъектаТЧ.Имя;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Номенклатура", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Номенклатура", "Т.Номенклатура КАК Номенклатура");
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "&ПодстановкаАртикул", "Т.Номенклатура.Код");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Упаковка", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"NULL КАК Упаковка", "Т.Упаковка КАК Упаковка");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КоличествоУпаковок", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК Количество", "Т.КоличествоУпаковок КАК Количество");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Цена", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК Цена", "Т.Цена КАК Цена");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сумма", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК СуммаВсего", "Т.Сумма КАК Сумма");
				Иначе
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК СуммаВсего", "0 КАК Сумма");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаНДС", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК СуммаНДС", "Т.СуммаНДС КАК СуммаНДС");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаСНДС", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"0 КАК СуммаСНДС", "Т.СуммаСНДС КАК СуммаСНДС");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтавкаНДС", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"&ПодстановкаСтавкаНДС", "Т.СтавкаНДС.ПеречислениеСтавкаНДС");
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"&ПодстановкаПредставлениеСтавкаНДС", "Т.СтавкаНДС.Наименование");
				КонецЕсли;
				
				Если Параметры.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"&ПодстановкаЭтоУслуга", "Т.Номенклатура.ВидНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
				Иначе
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"&ПодстановкаТипНоменклатуры",
						"НЕ СправочникНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
				КонецЕсли;
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Отменено", МетаданныеОбъектаТЧ) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу,
						"&ПодстановкаОтменено",
						"НЕ Т.Отменено");
				КонецЕсли;
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "&ПодстановкаАртикул", """""");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "&ПодстановкаЭтоУслуга", "ЛОЖЬ");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "&ПодстановкаСтавкаНДС", "NULL");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "&ПодстановкаПредставлениеСтавкаНДС", """""");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "&ПодстановкаТипНоменклатуры", "ИСТИНА");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "&ПодстановкаОтменено", "ИСТИНА");
				
				ДополнитьЗапросПоОснованиям(ТекстЗапросаПоТоварам, ТекстЗапросаПоТипу, ПервыйЗапросПоТоварам, ИмяТаблицыТЧОбъекта);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаПоШапке + ОбщегоНазначения.РазделительПакетаЗапросов() 
	+ "ВЫБРАТЬ
	  |	ШапкаДокумента.ДокументОснование КАК ДокументОснование,
	  |	ШапкаДокумента.ОрганизацияБизнесСетиСсылка КАК ОрганизацияБизнесСетиСсылка,
	  |	ШапкаДокумента.ФормаОплаты КАК ФормаОплаты,
	  |	ШапкаДокумента.ГрузоперевозчикСсылка КАК ГрузоперевозчикСсылка,
	  |	ШапкаДокумента.ГрузоперевозчикИдентификатор КАК ГрузоперевозчикИдентификатор,
	  |	ШапкаДокумента.ГрузоперевозчикНаименование КАК ГрузоперевозчикНаименование,
	  |	ШапкаДокумента.ГрузоперевозчикТелефон КАК ГрузоперевозчикТелефон,
	  |	ШапкаДокумента.ГрузоперевозчикИНН КАК ГрузоперевозчикИНН,
	  |	ШапкаДокумента.ГрузоперевозчикКПП КАК ГрузоперевозчикКПП,
	  |	ШапкаДокумента.ТарифНаименование КАК ТарифНаименование,
	  |	ШапкаДокумента.ТарифИдентификатор КАК ТарифИдентификатор,
	  |	ШапкаДокумента.ТарифНеГабарит КАК ТарифНеГабарит,
	  |	ШапкаДокумента.ДатаОтгрузки КАК ДатаОтгрузки,
	  |	ШапкаДокумента.ДатаДоставки КАК ДатаДоставки,
	  |	ШапкаДокумента.ВремяОтгрузкиС КАК ВремяОтгрузкиС,
	  |	ШапкаДокумента.ВремяОтгрузкиПо КАК ВремяОтгрузкиПо,
	  |	ШапкаДокумента.ВремяДоставкиС КАК ВремяДоставкиС,
	  |	ШапкаДокумента.ВремяДоставкиПо КАК ВремяДоставкиПо,
	  |	ШапкаДокумента.СпособОтгрузки КАК СпособОтгрузки,
	  |	ШапкаДокумента.СпособДоставки КАК СпособДоставки,
	  |	ШапкаДокумента.ОтправительКонтрагентСсылка КАК ОтправительКонтрагентСсылка,
	  |	ШапкаДокумента.ОтправительКонтрагентИНН КАК ОтправительКонтрагентИНН,
	  |	ШапкаДокумента.ОтправительКонтрагентКПП КАК ОтправительКонтрагентКПП,
	  |	ШапкаДокумента.ОтправительКонтрагентНаименование КАК ОтправительКонтрагентНаименование,
	  |	ШапкаДокумента.ОтправительКонтрагентЮрФизЛицо КАК ОтправительКонтрагентЮрФизЛицо,
	  |	ШапкаДокумента.ОтправительКонтрагентЭтоОрганизация КАК ОтправительКонтрагентЭтоОрганизация,
	  |	ШапкаДокумента.ОтправительКонтрагентЮридическийАдресВладелец КАК ОтправительКонтрагентЮридическийАдресВладелец,
	  |	ШапкаДокумента.ОтправительАдресВладелец КАК ОтправительАдресВладелец,
	  |	ШапкаДокумента.ОтправительАдресВладелецНаименование КАК ОтправительАдресВладелецНаименование,
	  |	ШапкаДокумента.ОтправительАдресПредставление КАК ОтправительАдресПредставление,
	  |	ШапкаДокумента.ОтправительАдресЗначенияПолей КАК ОтправительАдресЗначенияПолей,
	  |	ВЫБОР КОГДА ШапкаДокумента.ОтправительАдресПредставление = """" ТОГДА """" ИНАЧЕ ШапкаДокумента.ОтправительАдресЗначение КОНЕЦ КАК ОтправительАдресЗначение,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ОтправительКонтрагентЭтоОрганизация
	  |			ТОГДА ВЫБОР
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 3
	  |						ТОГДА ПользователиМенеджер.ФизическоеЛицо
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 4
	  |						ТОГДА СкладыОтправитель.ТекущийОтветственный
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 5
	  |						ТОГДА ПользователиТекущий.ФизическоеЛицо
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 1
	  |						ТОГДА NULL
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 2
	  |						ТОГДА &ОтветственныйСклада
	  |					ИНАЧЕ ПользователиМенеджер.ФизическоеЛицо
	  |				КОНЕЦ
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ШапкаДокумента.ОтправительКонтрагентЮрФизЛицо = 2
	  |					ТОГДА ЕСТЬNULL(КонтактныеЛицаОтправитель.Ссылка, ШапкаДокумента.ОтправительКонтрагентСсылка)
	  |				ИНАЧЕ ШапкаДокумента.ОтправительКонтактноеЛицоСсылка
	  |			КОНЕЦ
	  |	КОНЕЦ КАК ОтправительКонтактноеЛицоСсылка,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ОтправительКонтрагентЭтоОрганизация
	  |			ТОГДА ШапкаДокумента.ОтправительКонтактноеЛицоНаименование
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ШапкаДокумента.ОтправительКонтрагентЮрФизЛицо = 2
	  |					ТОГДА ЕСТЬNULL(КонтактныеЛицаОтправитель.Наименование, ШапкаДокумента.ОтправительКонтрагентНаименование)
	  |				ИНАЧЕ КонтактныеЛицаОтправитель.Наименование
	  |			КОНЕЦ
	  |	КОНЕЦ КАК ОтправительКонтактноеЛицоНаименование,
	  |	ШапкаДокумента.ОтправительКонтактноеЛицоТелефонПредставление КАК ОтправительКонтактноеЛицоТелефонПредставление,
	  |	ШапкаДокумента.ОтправительКонтактноеЛицоТелефонЗначение КАК ОтправительКонтактноеЛицоТелефонЗначение,
	  |	ШапкаДокумента.ПолучательКонтрагентСсылка КАК ПолучательКонтрагентСсылка,
	  |	ШапкаДокумента.ПолучательКонтрагентИНН КАК ПолучательКонтрагентИНН,
	  |	ШапкаДокумента.ПолучательКонтрагентКПП КАК ПолучательКонтрагентКПП,
	  |	ШапкаДокумента.ПолучательКонтрагентНаименование КАК ПолучательКонтрагентНаименование,
	  |	ШапкаДокумента.ПолучательКонтрагентЮрФизЛицо КАК ПолучательКонтрагентЮрФизЛицо,
	  |	ШапкаДокумента.ПолучательКонтрагентЭтоОрганизация КАК ПолучательКонтрагентЭтоОрганизация,
	  |	ШапкаДокумента.ПолучательКонтрагентЮридическийАдресВладелец КАК ПолучательКонтрагентЮридическийАдресВладелец,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ПолучательАдресВладелец = &РозничныйПокупатель
	  |			ТОГДА ШапкаДокумента.ПолучательКонтрагентСсылка
	  |		ИНАЧЕ ШапкаДокумента.ПолучательАдресВладелец
	  |	КОНЕЦ КАК ПолучательАдресВладелец,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ПолучательАдресВладелец = &РозничныйПокупатель
	  |			ТОГДА ШапкаДокумента.ПолучательКонтрагентНаименование
	  |		ИНАЧЕ ШапкаДокумента.ПолучательАдресВладелецНаименование
	  |	КОНЕЦ КАК ПолучательАдресВладелецНаименование,
	  |	ШапкаДокумента.ПолучательАдресПредставление КАК ПолучательАдресПредставление,
	  |	ШапкаДокумента.ПолучательАдресЗначенияПолей КАК ПолучательАдресЗначенияПолей,
	  |	ВЫБОР КОГДА ШапкаДокумента.ПолучательАдресПредставление = """" ТОГДА """" ИНАЧЕ ШапкаДокумента.ПолучательАдресЗначение КОНЕЦ КАК ПолучательАдресЗначение,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ПолучательКонтрагентЭтоОрганизация
	  |			ТОГДА ВЫБОР
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 3
	  |						ТОГДА ПользователиМенеджер.ФизическоеЛицо
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 4
	  |						ТОГДА СкладыПолучатель.ТекущийОтветственный
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 5
	  |						ТОГДА ПользователиТекущий.ФизическоеЛицо
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 1
	  |						ТОГДА NULL
	  |					КОГДА &СпособОпределенияКонтактногоЛица = 2
	  |						ТОГДА &ОтветственныйСклада
	  |					ИНАЧЕ ПользователиМенеджер.ФизическоеЛицо
	  |				КОНЕЦ
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ШапкаДокумента.ПолучательКонтрагентЮрФизЛицо = 2
	  |					ТОГДА ЕСТЬNULL(КонтактныеЛицаПолучатель.Ссылка, ШапкаДокумента.ПолучательКонтрагентСсылка)
	  |				ИНАЧЕ ШапкаДокумента.ПолучательКонтактноеЛицоСсылка
	  |			КОНЕЦ
	  |	КОНЕЦ КАК ПолучательКонтактноеЛицоСсылка,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ПолучательКонтрагентЭтоОрганизация
	  |			ТОГДА ШапкаДокумента.ПолучательКонтактноеЛицоНаименование
	  |		ИНАЧЕ ВЫБОР
	  |				КОГДА ШапкаДокумента.ПолучательКонтрагентЮрФизЛицо = 2
	  |					ТОГДА ЕСТЬNULL(КонтактныеЛицаПолучатель.Наименование, ШапкаДокумента.ПолучательКонтрагентНаименование)
	  |				ИНАЧЕ ЕСТЬNULL(КонтактныеЛицаПолучатель.Наименование, """")
	  |			КОНЕЦ
	  |	КОНЕЦ КАК ПолучательКонтактноеЛицоНаименование,
	  |	ШапкаДокумента.ПолучательКонтактноеЛицоТелефонПредставление КАК ПолучательКонтактноеЛицоТелефонПредставление,
	  |	ШапкаДокумента.ПолучательКонтактноеЛицоТелефонЗначение КАК ПолучательКонтактноеЛицоТелефонЗначение,
	  |	ШапкаДокумента.ПлательщикКонтрагентСсылка КАК ПлательщикКонтрагентСсылка,
	  |	ШапкаДокумента.ПлательщикКонтрагентИНН КАК ПлательщикКонтрагентИНН,
	  |	ШапкаДокумента.ПлательщикКонтрагентКПП КАК ПлательщикКонтрагентКПП,
	  |	ШапкаДокумента.ПлательщикКонтрагентНаименование КАК ПлательщикКонтрагентНаименование,
	  |	ШапкаДокумента.ПлательщикКонтрагентЮрФизЛицо КАК ПлательщикКонтрагентЮрФизЛицо,
	  |	ШапкаДокумента.ПлательщикКонтрагентЭтоОрганизация КАК ПлательщикКонтрагентЭтоОрганизация,
	  |	ШапкаДокумента.ПлательщикКонтрагентЮридическийАдресВладелец КАК ПлательщикКонтрагентЮридическийАдресВладелец,
	  |	ШапкаДокумента.ПлательщикКонтактноеЛицоСсылка КАК ПлательщикКонтактноеЛицоСсылка,
	  |	ШапкаДокумента.ПлательщикКонтактноеЛицоНаименование КАК ПлательщикКонтактноеЛицоНаименование,
	  |	ШапкаДокумента.ПлательщикКонтактноеЛицоТелефонПредставление КАК ПлательщикКонтактноеЛицоТелефонПредставление,
	  |	ШапкаДокумента.ПлательщикКонтактноеЛицоТелефонЗначение КАК ПлательщикКонтактноеЛицоТелефонЗначение,
	  |	ВЫБОР
	  |		КОГДА ШапкаДокумента.ОтправительКонтрагентЭтоОрганизация
	  |			ТОГДА 1
	  |		КОГДА ШапкаДокумента.ПолучательКонтрагентЭтоОрганизация
	  |			ТОГДА 2
	  |		ИНАЧЕ 1
	  |	КОНЕЦ КАК ПлательщикРоль,
	  |	ШапкаДокумента.ВалютаКоэффициент КАК ВалютаКоэффициент,
	  |	ПОДСТРОКА(ШапкаДокумента.ДополнительнаяИнформация, 0, 500) КАК ДополнительнаяИнформация
	  |ИЗ
	  |	ДанныеОснований КАК ШапкаДокумента
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаОтправитель
	  |		ПО ШапкаДокумента.ОтправительКонтактноеЛицоСсылка = КонтактныеЛицаОтправитель.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПолучатель
	  |		ПО ШапкаДокумента.ПолучательКонтактноеЛицоСсылка = КонтактныеЛицаПолучатель.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыОтправитель
	  |		ПО ШапкаДокумента.СкладОтправитель = СкладыОтправитель.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СкладыПолучатель
	  |		ПО ШапкаДокумента.СкладПолучатель = СкладыПолучатель.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиМенеджер
	  |		ПО ШапкаДокумента.Менеджер = ПользователиМенеджер.Ссылка
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиТекущий
	  |		ПО (&ТекущийПользователь = ПользователиТекущий.Ссылка)";
	
	Если ТекстЗапросаПоТоварам <> "" Тогда 
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
		+ ТекстЗапросаВидовЗапасов
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ ТекстЗапросаПоТоварам
		+ ОбщегоНазначения.РазделительПакетаЗапросов()
		+ "ВЫБРАТЬ
		  |	ТаблицаТовары.Номенклатура КАК Номенклатура,
		  |	ТаблицаТовары.Упаковка КАК Упаковка,
		  |	ТаблицаТовары.Количество КАК Количество,
		  |	ТаблицаТовары.Артикул КАК Артикул,
		  |	ТаблицаТовары.ЭтоУслуга КАК ЭтоУслуга,
		  |	ТаблицаТовары.ИННВладельцаГруза КАК ИННВладельцаГруза,
		  |	ТаблицаТовары.Сумма * ШапкаДокумента.ВалютаКоэффициент КАК Сумма,
		  |	ТаблицаТовары.Цена * ШапкаДокумента.ВалютаКоэффициент КАК Цена,
		  |	ТаблицаТовары.СуммаСНДС * ШапкаДокумента.ВалютаКоэффициент КАК СуммаСНДС,
		  |	ТаблицаТовары.СуммаНДС * ШапкаДокумента.ВалютаКоэффициент КАК СуммаНДС,
		  |	ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
		  |	ТаблицаТовары.СтавкаНДСПредставление КАК СтавкаНДСПредставление
		  |ПОМЕСТИТЬ ВременнаяТаблицаТовары
		  |ИЗ
		  |	ДанныеОснований КАК ШапкаДокумента
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеОснованийТовары КАК ТаблицаТовары
		  |		ПО (ТаблицаТовары.Ссылка = ШапкаДокумента.ДокументОснование)
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	Товары.Номенклатура КАК Номенклатура,
		  |	Товары.СтавкаНДС КАК СтавкаНДС,
		  |	Товары.СтавкаНДСПредставление КАК СтавкаНДСПредставление,
		  |	Товары.Артикул КАК Артикул,
		  |	Товары.ЭтоУслуга КАК ЭтоУслуга,
		  |	Товары.ИННВладельцаГруза КАК ИННВладельцаГруза,
		  |	СправочникНоменклатура.Наименование КАК Наименование,
		  |	УпаковкиЕдиницыИзмерения.Наименование КАК ЕдиницаИзмерения,
		  |	Товары.Количество КАК Количество,
		  |	Товары.Цена КАК Цена,
		  |	Товары.СуммаСНДС КАК Сумма,
		  |	Товары.СуммаНДС КАК СуммаНДС,
		  |	Товары.Упаковка КАК Упаковка,
		  |	&ТекстЗапросаВесУпаковки КАК Вес,
		  |	&ТекстЗапросаОбъемУпаковки КАК Объем,
		  |	ВЫБОР
		  |		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		  |				И ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения.Знаменатель, 0) <> 0
		  |			ТОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Высота, 0) * (ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ВысотаЕдиницаИзмерения.Знаменатель, 1)) КАК ЧИСЛО(27, 11))) * 100
		  |		ИНАЧЕ 0
		  |	КОНЕЦ КАК Высота,
		  |	ВЫБОР
		  |		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		  |				И ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения.Знаменатель, 0) <> 0
		  |			ТОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Ширина, 0) * (ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения.Знаменатель, 1)) КАК ЧИСЛО(27, 11))) * 100
		  |		ИНАЧЕ 0
		  |	КОНЕЦ КАК Ширина,
		  |	ВЫБОР
		  |		КОГДА &ТекстЗапросаДлинаУпаковки <> 0
		  |			ТОГДА &ТекстЗапросаДлинаУпаковки
		  |		КОГДА УпаковкиЕдиницыИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
		  |				И ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ШиринаЕдиницаИзмерения.Знаменатель, 0) <> 0
		  |			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(УпаковкиЕдиницыИзмерения.Глубина, 0) * (ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения.Числитель, 0) / ЕСТЬNULL(УпаковкиЕдиницыИзмерения.ГлубинаЕдиницаИзмерения.Знаменатель, 1)) КАК ЧИСЛО(27, 11))
		  |		ИНАЧЕ 0
		  |	КОНЕЦ * 100 КАК Длина,
		  |	ВЫБОР
		  |		КОГДА СправочникВидыНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
		  |			ТОГДА ЕСТЬNULL(СправочникВидыНоменклатуры.НаименованиеДляПечати, """")
		  |		КОГДА &НаименованиеДляПечатиВидовНоменклатуры <> """"
		  |			ТОГДА &НаименованиеДляПечатиВидовНоменклатуры
		  |		ИНАЧЕ СправочникВидыНоменклатуры.Наименование
		  |	КОНЕЦ КАК НаименованиеДляПечати
		  |ПОМЕСТИТЬ Товары
		  |ИЗ
		  |	ВременнаяТаблицаТовары КАК Товары
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		  |		ПО Товары.Номенклатура = СправочникНоменклатура.Ссылка
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК СправочникВидыНоменклатуры
		  |		ПО (СправочникНоменклатура.ВидНоменклатуры = СправочникВидыНоменклатуры.Ссылка)
		  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		  |		ПО (ВЫБОР
		  |				КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		  |					ТОГДА СправочникНоменклатура.ЕдиницаИзмерения = УпаковкиЕдиницыИзмерения.Ссылка
		  |				ИНАЧЕ Товары.Упаковка = УпаковкиЕдиницыИзмерения.Ссылка
		  |			КОНЕЦ)
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	ЕСТЬNULL(СУММА(Товары.Количество * Товары.Вес), 0) КАК Вес,
		  |	ЕСТЬNULL(СУММА(Товары.Количество * Товары.Объем), 0) КАК Объем,
		  |	ЕСТЬNULL(МАКСИМУМ(Товары.Высота), 0) КАК МаксимальнаяВысота,
		  |	ЕСТЬNULL(МАКСИМУМ(Товары.Длина), 0) КАК МаксимальнаяДлина,
		  |	ЕСТЬNULL(МАКСИМУМ(Товары.Ширина), 0) КАК МаксимальнаяШирина,
		  |	ЕСТЬNULL(МАКСИМУМ(Товары.Вес), 0) КАК МаксимальныйВес,
		  |	ЕСТЬNULL(СУММА(Товары.Сумма), 0) КАК ПолнаяСтоимость,
		  |	ЕСТЬNULL(СУММА(ВЫБОР
		  |			КОГДА Товары.ЭтоУслуга
		  |				ТОГДА 0
		  |			ИНАЧЕ Товары.Сумма
		  |		КОНЕЦ), 0) КАК Стоимость
		  |ИЗ
		  |	Товары КАК Товары
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	Товары.НаименованиеДляПечати КАК ТоварНаименование
		  |ИЗ
		  |	Товары КАК Товары
		  |ГДЕ
		  |	НЕ Товары.ЭтоУслуга
		  |
		  |СГРУППИРОВАТЬ ПО
		  |	Товары.НаименованиеДляПечати";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки("УпаковкиЕдиницыИзмерения", "СправочникНоменклатура", Ложь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки("УпаковкиЕдиницыИзмерения", "СправочникНоменклатура", Ложь));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаДлинаУпаковки", Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаДлинаУпаковки("УпаковкиЕдиницыИзмерения", "СправочникНоменклатура", Ложь));
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основания", Основания);
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("РозничныйПокупатель", Справочники.Партнеры.РозничныйПокупатель);
	
	ДанныеПоУмолчанию = СервисДоставки.ПараметрыПоУмолчанию(Параметры.ТипГрузоперевозки);
	
	Запрос.УстановитьПараметр("СпособОпределенияКонтактногоЛица", ДанныеПоУмолчанию.СпособОпределенияКонтактногоЛица);
	Запрос.УстановитьПараметр("ОтветственныйСклада", ДанныеПоУмолчанию.КонтактноеЛицо);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.УстановитьПараметр("НаименованиеДляПечатиВидовНоменклатуры", Константы.НаименованиеДляПечатиВидовНоменклатуры.Получить());
	Результаты = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПоШапке = Результаты[1];
	Если РезультатПоШапке.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПоДокументу = РезультатПоШапке.Выгрузить();
	ДанныеПоДокументу = ТаблицаПоДокументу[0];
	
	СервисДоставкиКлиентСервер.ЗаполнитьСтруктуруПоЛинейнымДанным(Параметры, ДанныеПоДокументу, ТаблицаПоДокументу.Колонки);
	
	Параметры.Вставить("ОрганизацияБизнесСетиСсылка", ДанныеПоДокументу.ОрганизацияБизнесСетиСсылка);
	
	// Заполним грузоперевозчика
	Если ЗначениеЗаполнено(Параметры.Грузоперевозчик.Ссылка) Тогда
		ГрузоперевозчикКонтрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Параметры.Грузоперевозчик.Ссылка);
		Если ЗначениеЗаполнено(ГрузоперевозчикКонтрагент) Тогда
			ГрузоперевозчикПараметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГрузоперевозчикКонтрагент, "ИНН,КПП,НаименованиеПолное,Наименование");
			ГрузоперевозчикПараметры.Наименование = 
				?(ЗначениеЗаполнено(ГрузоперевозчикПараметры.НаименованиеПолное),
				ГрузоперевозчикПараметры.НаименованиеПолное,
				ГрузоперевозчикПараметры.Наименование);
					
			ЗаполнитьЗначенияСвойств(Параметры.Грузоперевозчик, ГрузоперевозчикПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним значения адресов
	Попытка
		СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Отправитель.Адрес);
	Исключение
		ТекстСообщения = НСтр("ru='Адрес отправителя не прошел проверку. Заполнение пропущено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	Попытка
		СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Получатель.Адрес);
	Исключение
		ТекстСообщения = НСтр("ru='Адрес получателя не прошел проверку. Заполнение пропущено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	Попытка
		СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Отправитель.Контрагент.ЮридическийАдрес);
	Исключение
		ТекстСообщения = НСтр("ru='Юридический адрес контрагента отправителя не прошел проверку. Заполнение пропущено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	Попытка
		СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.Получатель.Контрагент.ЮридическийАдрес);
	Исключение
		ТекстСообщения = НСтр("ru='Юридический адрес контрагента получателя не прошел проверку. Заполнение пропущено.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	//Заполним телефоны контактных лиц
	СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры.Отправитель.КонтактноеЛицо);
	
	СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры.Получатель.КонтактноеЛицо);
	
	РезультатИтогиПоТаблицеТовары = Результаты[6];
	РезультатНаименованийДляПечати = Результаты[7];
	
	// Заполним параметры грузовых мест
	
	Если Не РезультатИтогиПоТаблицеТовары.Пустой() Тогда
		ВыборкаПоТоварам = РезультатИтогиПоТаблицеТовары.Выбрать();
		Если ВыборкаПоТоварам.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(Параметры.Груз, ВыборкаПоТоварам);
			Параметры.ПолнаяСтоимость = ВыборкаПоТоварам.ПолнаяСтоимость;
		КонецЕсли;
	КонецЕсли;
	
	Если Не РезультатНаименованийДляПечати.Пустой() Тогда
		ВыборкаПоТоварам = РезультатНаименованийДляПечати.Выбрать();
		Пока ВыборкаПоТоварам.Следующий() Цикл
			Если ЗначениеЗаполнено(СокрЛП(ВыборкаПоТоварам.ТоварНаименование)) Тогда
				Параметры.Груз.Содержимое = Параметры.Груз.Содержимое + ?(Параметры.Груз.Содержимое <> "", ", ", "") + ВыборкаПоТоварам.ТоварНаименование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РезультатПоТоварнымПозициям = Запрос.МенеджерВременныхТаблиц.Таблицы["Товары"].ПолучитьДанные();
	
	Если Не РезультатПоТоварнымПозициям.Пустой() Тогда
		
		ВыборкаПоПозиции = РезультатПоТоварнымПозициям.Выбрать();
		
		СоответствиеСтавокНДС = СоответствиеСтавокНДС();
		
		Пока ВыборкаПоПозиции.Следующий() Цикл
			
			НоваяСтрокаПозиции = Параметры.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПозиции, ВыборкаПоПозиции);
			
			НоваяСтрокаПозиции.СтавкаНДС = СоответствиеСтавокНДС.Получить(ВыборкаПоПозиции.СтавкаНДС);
			
			Если Параметры.ТипГрузоперевозки = СервисДоставкиКлиентСервер.ТипГрузоперевозкиСервис1СКурьер() Тогда
				
				Если ТипЗнч(ДанныеПоДокументу.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
					НоваяСтрокаПозиции.ИННВладельцаГруза = ВыборкаПоПозиции.ИННВладельцаГруза;
				Иначе
					НоваяСтрокаПозиции.ИННВладельцаГруза = ДанныеПоДокументу.ОтправительКонтрагентИНН;
				КонецЕсли; 

				Если ВыборкаПоПозиции.ЭтоУслуга Тогда
					НоваяСтрокаПозиции.ТипНоменклатуры = 1; // услуга
				Иначе
					НоваяСтрокаПозиции.ТипНоменклатуры = 0; // товар
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры контрагента данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Параметры - см. СервисДоставки.НовыйПараметрыКонтрагента
//
Процедура ЗаполнитьПараметрыКонтрагента(Параметры) Экспорт
	
	ИмяСправочника = Неопределено;
	Если ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
		РеквизитНаименования = "ОсновнаяТаблица.НаименованиеСокращенное";
		Параметры.ЭтоОрганизация = Истина;
	ИначеЕсли ТипЗнч(Параметры.Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
		РеквизитНаименования = "ОсновнаяТаблица.НаименованиеПолное";
		Параметры.ЭтоОрганизация = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОсновнаяТаблица.Ссылка КАК Ссылка,
	               |	ОсновнаяТаблица.ИНН КАК ИНН,
	               |	ОсновнаяТаблица.КПП КАК КПП,
	               |	&РеквизитНаименования КАК Наименование,
	               |	ВЫБОР
	               |		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ЮрЛицо)
	               |			ТОГДА 1
	               |		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
	               |			ТОГДА 2
	               |		КОГДА ОсновнаяТаблица.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель)
	               |			ТОГДА 3
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ЮрФизЛицо
	               |ИЗ
	               |	&ТаблицаДляЗапроса КАК ОсновнаяТаблица
	               |ГДЕ
	               |	ОсновнаяТаблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДляЗапроса", "Справочник." + ИмяСправочника);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитНаименования", РеквизитНаименования);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ЗаполнитьЗначенияСвойств(Параметры, РезультатЗапроса.Выгрузить()[0]);
		
		Если Параметры.ЮрФизЛицо <> 2 Тогда
			
			Параметры.ЮридическийАдрес.Владелец = Параметры.Ссылка;
			СервисДоставки.ЗаполнитьАдресПоПараметрам(Параметры.ЮридическийАдрес);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры контактного лица данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма настроек, в которой необходимо заполнить контактное лицо.
//  Параметры - см. СервисДоставки.НовыйПараметрыКонтактногоЛица
//
Процедура ЗаполнитьПараметрыКонтактногоЛицаПоУмолчанию(Форма, Параметры) Экспорт
	
	Если Не Параметры.Контрагент.ЭтоОрганизация Тогда
		Возврат;
	КонецЕсли;
	
	//Заполним контактных лиц
	Если Параметры.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = 3 
		ИЛИ Параметры.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = 0 Тогда // Менеджер из документа основания
		
		Если Форма.ДокументыОснования.Количество() = 1 Тогда
			
			Менеджер = Неопределено;
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Менеджер", Форма.ДокументыОснования[0].Значение.Метаданные()) Тогда
				Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ДокументыОснования[0].Значение, "Менеджер");
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответсвенный", Форма.ДокументыОснования[0].Значение.Метаданные()) Тогда
				Менеджер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ДокументыОснования[0].Значение, "Ответственный");
			КонецЕсли;
			
			Если Менеджер <> Неопределено Тогда
				КонтактноеЛицоОрганиазции = Менеджер.ФизическоеЛицо;
				Если ЗначениеЗаполнено(КонтактноеЛицоОрганиазции) Тогда
					ПараметрыКонтрагента = Параметры.Контрагент;
					Если ПараметрыКонтрагента.ЭтоОрганизация Тогда
						Параметры.КонтактноеЛицо.Ссылка = КонтактноеЛицоОрганиазции;
						СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры.КонтактноеЛицо);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = 4 Тогда // Ответственный за склад
		
		ИмяРекзизита = Форма.ТекущийЭлемент.Имя;
		КонтактноеЛицоОрганиазции = Неопределено;
		
		Если ЗначениеЗаполнено(Параметры.Адрес.Владелец) Тогда
			Если ТипЗнч(Параметры.Адрес.Владелец) = Тип("СправочникСсылка.Склады") Тогда
				КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Адрес.Владелец, "ТекущийОтветственный");
			КонецЕсли;
		ИначеЕсли Форма.ДокументыОснования.Количество() = 1 Тогда
			
			ДокументОснование = Форма.ДокументыОснования[0].Значение;
			
			Если ИмяРекзизита = "ОтправительКонтрагент" Тогда
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ДокументОснование.Метаданные()) Тогда
					КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.Склад, "ТекущийОтветственный");
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", ДокументОснование.Метаданные()) Тогда
					КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.СкладОтправитель, "ТекущийОтветственный");
				КонецЕсли;
			
			ИначеЕсли ИмяРекзизита = "ПолучательКонтрагент" Тогда
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", ДокументОснование.Метаданные()) Тогда
					КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.Склад, "ТекущийОтветственный");
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладПолучатель", ДокументОснование.Метаданные()) Тогда
					КонтактноеЛицоОрганиазции = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование.СкладПолучатель, "ТекущийОтветственный");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КонтактноеЛицоОрганиазции) Тогда
			ПараметрыКонтрагента = Параметры.Контрагент;
			Если ПараметрыКонтрагента.ЭтоОрганизация Тогда
				Параметры.КонтактноеЛицо.Ссылка = КонтактноеЛицоОрганиазции;
				СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры.КонтактноеЛицо);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Параметры.КонтактноеЛицо.СпособОпределенияКонтактногоЛица = 5 Тогда // Текущий пользователь

		КонтактноеЛицоОрганиазции  = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСеанса.ТекущийПользователь, "ФизическоеЛицо");
	
		Если ЗначениеЗаполнено(КонтактноеЛицоОрганиазции) Тогда

			ПараметрыКонтрагента = Параметры.Контрагент;
			Если ПараметрыКонтрагента.ЭтоОрганизация Тогда
				Параметры.КонтактноеЛицо.Ссылка = КонтактноеЛицоОрганиазции;
				СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица(Параметры.КонтактноеЛицо);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заменяет текст наименования вида телефона для заголовка перед номером телефона.
//
// Параметры:
//  ЗначениеПредставления - Строка - представление названия телефона.
//  ВидКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
Процедура СкорректироватьНаименованиеВидаТелефона(ЗначениеПредставления, Знач ВидКонтактнойИнформации) Экспорт
КонецПроцедуры

// Заполняет параметры валюты.
//
// Параметры:
//  Параметры - см. СервисДоставки.НовыйПараметрыВалюты
//
Процедура ЗаполнитьПараметрыВалюты(Параметры) Экспорт

	Если (Не Параметры.Свойство("Код"))
		ИЛИ (Не ЗначениеЗаполнено(Параметры.Код)) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("Ссылка", Справочники.Валюты.НайтиПоКоду(Параметры.Код));
	
	Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
		Параметры.Вставить("Наименование", 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ссылка, "Наименование"));
	Иначе
		Параметры.Вставить("Наименование", "RUB");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу данными документов.
//
// Параметры:
//  ОснованияСписок - см. СервисДоставки.ДокументыОснованияСписок
//
Процедура ЗаполнитьДокументыОснованияСписок(ОснованияСписок) Экспорт

	Если ОснованияСписок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|Т.Ссылка КАК Ссылка,
	|0 КАК СуммаДокумента,
	|NULL КАК СкладОтправитель,
	|NULL КАК СкладПолучатель,
	|NULL КАК ПартнерОтправитель,
	|NULL КАК ПартнерПолучатель,
	|NULL КАК Валюта,
	|NULL КАК Отправитель,
	|NULL КАК Получатель,
	|"""" КАК ОтправительАдрес,
	|"""" КАК ПолучательАдрес,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки,
	|ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки,
	|0 КАК СпособОтгрузки,
	|0 КАК СпособДоставки
	|ПОМЕСТИТЬ ДанныеОснований
	|ИЗ #ТаблицаДокумента КАК Т
	|
	|ГДЕ Т.Ссылка В (&Основания)";

	Основания = ОснованияСписок.ВыгрузитьКолонку("Ссылка");
	ОснованияПоТипам = РазложитьМассивСсылокПоТипам(Основания);
	ПервыйЗапрос = Истина;
	ТекстЗапроса = "";
	
	Для Каждого КлючИЗначение Из ОснованияПоТипам Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ);
		ИмяТаблицыОбъекта = МетаданныеОбъекта.ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ИмяТаблицыОбъекта, ".")[1];
		
		ТекстЗапросаПоТипу = ШаблонЗапроса;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СуммаДокумента", "Т.СуммаДокумента КАК СуммаДокумента");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Валюта", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Валюта", "Т.Валюта КАК Валюта");
		КонецЕсли;
		
		СНашегоСклада = ЭтоДокументОтгрузкиСНашегоСклада(ИмяОбъекта);
		НаНашСклад    = ЭтоДокументДоставкиНаНашСклад(ИмяОбъекта);
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеОбъекта) Тогда
			Если СНашегоСклада Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Отправитель", "Т.Организация КАК Отправитель");
				
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеОбъекта) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладОтправитель", "Т.Склад КАК СкладОтправитель");
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СкладОтправитель", МетаданныеОбъекта) Тогда
					ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладОтправитель", "Т.СкладОтправитель КАК СкладОтправитель");
				КонецЕсли;
				
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Получатель", "Т.Организация КАК Получатель");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладПолучатель", "Т.Склад КАК СкладПолучатель");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеОбъекта) Тогда
			Если СНашегоСклада Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Получатель", "Т.Контрагент КАК Получатель");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПартнерПолучатель", "Т.Партнер КАК ПартнерПолучатель");
			ИначеЕсли НаНашСклад Тогда
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Отправитель", "Т.Контрагент КАК Отправитель");
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК ПартнерОтправитель", "Т.Партнер КАК ПартнерОтправитель");
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ОрганизацияПолучатель", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК Получатель",
				"ВЫБОР
				|	КОГДА Т.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
				|		ТОГДА Т.ОрганизацияПолучатель
				|	ИНАЧЕ Т.Организация
				|КОНЕЦ КАК Получатель");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "NULL КАК СкладПолучатель", "Т.СкладПолучатель КАК СкладПолучатель");
			
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаОтгрузки", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОтгрузки", "Т.ДатаОтгрузки КАК ДатаОтгрузки");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаПоступления", МетаданныеОбъекта) Тогда
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "ДАТАВРЕМЯ(1, 1, 1) КАК ДатаДоставки", "Т.ДатаПоступления КАК ДатаДоставки");
		КонецЕсли;
		
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СпособДоставки", МетаданныеОбъекта) Тогда
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СпособОтгрузки",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
				|			ТОГДА 2
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СпособОтгрузки");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, "0 КАК СпособДоставки",
				"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоНашегоСклада)
				|			ТОГДА 2
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаДоПунктаПередачи)
				|			ТОГДА 1
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК СпособДоставки");
			
			ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ОтправительАдрес",
			"	ВЫБОР
				|		КОГДА Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.НашимиСиламиСАдресаОтправителя)
				|			ИЛИ Т.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ОтОтправителяОпределяетСлужбаДоставки)
				|			ТОГДА Т.АдресДоставки
				|		ИНАЧЕ """"
				|	КОНЕЦ КАК ОтправительАдрес");
			
			
			Если СНашегоСклада Тогда
				
				ТекстЗапросаПоТипу = СтрЗаменить(ТекстЗапросаПоТипу, """"" КАК ПолучательАдрес",
					"Т.АдресДоставки КАК ПолучательАдрес");
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаПоТипу, ПервыйЗапрос, ИмяТаблицыОбъекта);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов() 
	+ "ВЫБРАТЬ
	  |	Т.Ссылка КАК Ссылка,
	  |	Т.СуммаДокумента КАК СуммаДокумента,
	  |	Т.Валюта КАК Валюта,
	  |	Т.Отправитель КАК Отправитель,
	  |	Т.Получатель КАК Получатель,
	  |	ВЫБОР
	  |		КОГДА НЕ Т.СкладОтправитель ЕСТЬ NULL
	  |			ТОГДА СкладыКонтактнаяИнформацияОтправитель.Представление
	  |		КОГДА Т.ОтправительАдрес = """"
	  |			ТОГДА ПартнерыКонтактнаяИнформацияОтправитель.Представление
	  |		ИНАЧЕ Т.ОтправительАдрес
	  |	КОНЕЦ КАК ОтправительАдрес,
	  |	ВЫБОР
	  |		КОГДА НЕ Т.СкладПолучатель ЕСТЬ NULL
	  |			ТОГДА СкладыКонтактнаяИнформацияПолучатель.Представление
	  |		КОГДА Т.ПолучательАдрес = """"
	  |			ТОГДА ПартнерыКонтактнаяИнформацияПолучатель.Представление
	  |		ИНАЧЕ Т.ПолучательАдрес
	  |	КОНЕЦ КАК ПолучательАдрес,
	  |	Т.ДатаОтгрузки КАК ДатаОтгрузки,
	  |	Т.ДатаДоставки КАК ДатаДоставки,
	  |	Т.СпособОтгрузки КАК СпособОтгрузки,
	  |	Т.СпособДоставки КАК СпособДоставки
	  |ИЗ
	  |	ДанныеОснований КАК Т
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформацияОтправитель
	  |		ПО Т.СкладОтправитель = СкладыКонтактнаяИнформацияОтправитель.Ссылка
	  |			И (СкладыКонтактнаяИнформацияОтправитель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада))
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады.КонтактнаяИнформация КАК СкладыКонтактнаяИнформацияПолучатель
	  |		ПО Т.СкладПолучатель = СкладыКонтактнаяИнформацияПолучатель.Ссылка
	  |			И (СкладыКонтактнаяИнформацияПолучатель.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресСклада))
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияОтправитель
	  |		ПО Т.ПартнерОтправитель = ПартнерыКонтактнаяИнформацияОтправитель.Ссылка
	  |			И (ПартнерыКонтактнаяИнформацияОтправитель.Вид = &АдресДоставки)
	  |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформацияПолучатель
	  |		ПО Т.ПартнерПолучатель = ПартнерыКонтактнаяИнформацияПолучатель.Ссылка
	  |			И (ПартнерыКонтактнаяИнформацияПолучатель.Вид = &АдресДоставки)
	  |
	  |УПОРЯДОЧИТЬ ПО
	  |	Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Основания", Основания);
	ВидКонтактнойИнформации = Неопределено;
	ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаКонтрагента(ВидКонтактнойИнформации);
	Запрос.УстановитьПараметр("АдресДоставки", ВидКонтактнойИнформации);
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ОснованияСписок = РезультатЗапроса[1].Выгрузить();
	
КонецПроцедуры

// Заполняет соответствие ставок НДС.
//
// Параметры:
//  СтавкиНДС - см. СервисДоставкиПовтИсп.СоответствиеСтавокНДСИзСервиса
//
Процедура ЗаполнитьСоответствиеСтавокНДСИзСервиса(СтавкиНДС) Экспорт

	СтавкиНДС.Вставить("0", Строка(Перечисления.СтавкиНДС.НДС0));
	СтавкиНДС.Вставить("10/110", Строка(Перечисления.СтавкиНДС.НДС10_110));
	СтавкиНДС.Вставить("10", Строка(Перечисления.СтавкиНДС.НДС10));
	СтавкиНДС.Вставить("18/118", Строка(Перечисления.СтавкиНДС.НДС18_118));
	СтавкиНДС.Вставить("18", Строка(Перечисления.СтавкиНДС.НДС18));
	СтавкиНДС.Вставить("20/120", Строка(Перечисления.СтавкиНДС.НДС20_120));
	СтавкиНДС.Вставить("20", Строка(Перечисления.СтавкиНДС.НДС20));
	СтавкиНДС.Вставить("БезНДС", Строка(Перечисления.СтавкиНДС.БезНДС));
	
КонецПроцедуры 

// Заполняет контактное лицо получателя в структуре параметров заказа.
// 
// Параметры:
//  ПараметрыЗаказа - См. СервисДоставки.НовыйПараметрыЗапросаСоздатьИзменитьЗаказНаДоставку - Структура Заказа на доставку
//  ЗаполнитьКонтактноеЛицо - Булево - Заполнить контактное лицо
//  ЗаполнитьТелефон - Булево - Заполнить телефон
Процедура ЗаполнитьРеквизитыКонтактногоЛицаПолучателяПоУмолчанию(ПараметрыЗаказа, ЗаполнитьКонтактноеЛицо = Истина,
	ЗаполнитьТелефон = Истина) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыЗаказа.Получатель.Контрагент.Ссылка) И (ЗаполнитьКонтактноеЛицо
		Или ЗаполнитьТелефон) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Владелец", ПараметрыЗаказа.Получатель.Контрагент.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаКонтактныхЛиц.Ссылка КАК Ссылка,
		|	ТаблицаКонтактныхЛиц.Ссылка.Наименование КАК Наименование,
		|	ТаблицаКонтактныхЛиц.Значение КАК Значение,
		|	ТаблицаКонтактныхЛиц.Представление КАК Представление
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК ТаблицаКонтактныхЛиц
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК ТаблицаКонтрагентов
		|		ПО ТаблицаКонтактныхЛиц.Ссылка.Владелец = ТаблицаКонтрагентов.Партнер
		|			И (ТаблицаКонтрагентов.Ссылка = &Владелец)
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(&Владелец) = ТИП(Справочник.Контрагенты)
		|	И НЕ ТаблицаКонтактныхЛиц.Ссылка.ПометкаУдаления
		|	И ТаблицаКонтактныхЛиц.Представление <> """"
		|	И ТаблицаКонтактныхЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ТаблицаКонтактныхЛиц.Ссылка,
		|	ТаблицаКонтактныхЛиц.Ссылка.Наименование,
		|	ТаблицаКонтактныхЛиц.Значение,
		|	ТаблицаКонтактныхЛиц.Представление
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ТаблицаКонтактныхЛиц
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(&Владелец) = ТИП(Справочник.Организации)
		|	И НЕ ТаблицаКонтактныхЛиц.Ссылка.ПометкаУдаления
		|	И ТаблицаКонтактныхЛиц.Представление <> """"
		|	И ТаблицаКонтактныхЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если ЗаполнитьКонтактноеЛицо Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыЗаказа.Получатель.КонтактноеЛицо, Выборка, "Ссылка, Наименование");
			КонецЕсли;
			
			Если ЗаполнитьТелефон Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыЗаказа.Получатель.КонтактноеЛицо.Телефон, Выборка, "Значение, Представление");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидыКонтактнойИнформации

// Получает вид контактной информации для адреса по переданному владельцу.
//
// Параметры:
//  Владелец  - СправочникСсылка, ДокументСсылка - владелец адреса.
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//  ТипАдреса - Строка - тип адреса, доступны: АдресДоставки, Юридический, Фактический.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаПоВладельцу(Владелец, ВидКонтактнойИнформации, ТипАдреса = "АдресДоставки") Экспорт
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Склады") Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаОрганизации(ВидКонтактнойИнформации);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаОрганизации(ВидКонтактнойИнформации);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") 
		И ТипАдреса = "АдресДоставки" Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаКонтрагента(ВидКонтактнойИнформации);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") 
		И ТипАдреса = "Юридический" Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаКонтрагента(ВидКонтактнойИнформации);
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") 
		И ТипАдреса = "АдресДоставки" Тогда
		ПолучитьЗначениеВидаКонтактнойИнформацииДляФактическогоАдресаКонтрагента(ВидКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры

// Получает вид контактной информации для адреса доставки организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресСклада");
	
КонецПроцедуры

// Получает вид контактной информации для юридического адреса организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
	
КонецПроцедуры

// Получает вид контактной информации для адреса доставки контрагента.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляАдресаДоставкиСкладаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ВидКонтактнойИнформацииАдресДоставкиПартнера();
	
	Если Не ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
		ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
	КонецЕсли;
	
КонецПроцедуры

// Получает вид контактной информации для юридического адреса доставки.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляЮридическогоАдресаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	
КонецПроцедуры

// Получает вид контактной информации для телефона контактного лица контрагента.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляТелефонаКонтактногоЛицаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
	
КонецПроцедуры

// Получает вид контактной информации для телефона контактного лица организации.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляТелефонаКонтактногоЛицаОрганизации(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица");
	
КонецПроцедуры

// Получает вид контактной информации для юридического адреса доставки.
//
// Параметры:
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации,Неопределено - вид контактной информации.
//
Процедура ПолучитьЗначениеВидаКонтактнойИнформацииДляФактическогоАдресаКонтрагента(ВидКонтактнойИнформации) Экспорт
	
	ВидКонтактнойИнформации = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента");
	
КонецПроцедуры


#КонецОбласти

#Область ЗагрузкаНаложенныхПлатежей

// Ограничение длительности обработки одной пачки платежей (в секундах)
// Параметры:
//	Лимит - Число - количество секунд(возвращаемое значение)
Процедура ЛимитВремениОбработкиПачкиПлатежей(Лимит) Экспорт
	
	Лимит = 300;
	
КонецПроцедуры

// Разрешение на использование наложенных платежей.
// Параметры:
//  ИспользоватьНаложенныеПлатежи - Булево - Параметр, который нужно заполнить.
// 
Процедура ИспользоватьНаложенныеПлатежи(ИспользоватьНаложенныеПлатежи) Экспорт
	
	ИспользоватьНаложенныеПлатежи = Истина;

КонецПроцедуры

// Разрешение на загрузку наложенных платежей регламентным заданием.
//
// Параметры:
//  Признак - Булево - Параметр, который нужно заполнить.
// 
Процедура ИспользоватьРегламентЗагрузкиНаложенныхПлатежей(Признак) Экспорт
	
	Признак = Истина;
	
КонецПроцедуры

// Обработать данные наложенного платежа: создать платеж, подтвердить обработку.
// 
// Параметры:
//  АтрибутыПлатежа - см. СервисДоставки.НовыйДанныеНаложенногоПлатежа
//  Обработано - Булево - признак корректной обработки (возвращаемое значение)
//  ТекстОшибки - Строка - текст ошибки (возвращаемое значение), будет помещен в журнал регистрации
// 
Процедура ОбработатьДанныеНаложенногоПлатежа(Знач АтрибутыПлатежа, Обработано, ТекстОшибки = "") Экспорт
	
	// ++ СервисДоставки.ERP
	ДокументОснование = АтрибутыПлатежа.ДокументОснование; 
	СуммаПлатежа = АтрибутыПлатежа.СуммаПлатежа; 
	ДатаПлатежа = АтрибутыПлатежа.ДатаРегистрацииПлатежа;
	ИдентификаторДокументаДоставки = АтрибутыПлатежа.ИдентификаторДокумента;
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
		ТекстОшибки = НСтр( 
			"ru = 'Не указан документ-основание по наложенному платежу.
			|Идентификатор документа доставки: %1'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ИдентификаторДокументаДоставки);
		Возврат;
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДокументОплаты = Документы.ОперацияПоПлатежнойКарте.СоздатьДокумент();
	ДокументОплаты.Заполнить(ДокументОснование);
	ДокументОплаты.Дата = ?(ЗначениеЗаполнено(ДатаПлатежа), ДатаПлатежа, ТекущаяДатаСеанса());
	
	КодАвторизацииДоставки = Лев(КодАвторизацииПоЛитералу(НРег(ИдентификаторДокументаДоставки)), 6);
	ДокументыОплатыОбработанРанее = Ложь;
	ДокументыОплатыПоОснованию = ПолучитьДокументыОплатыПоОснованию(ДокументОснование);
	
	Для Каждого Элем Из ДокументыОплатыПоОснованию Цикл
		Если КодАвторизацииДоставки = Элем.КодАвторизации тогда
			ДокументыОплатыОбработанРанее = Истина;
			Если Элем.Сумма <> СуммаПлатежа Тогда
				ИмяСобытия = "СервисДоставки.Наложенныйплатеж.Создание";
				ТекстСобытия = 
					НСтр("ru = 'По документу ""%1"" 
					|сумма зарегистрированного платежа ""%2 (%3) 
					|отличается от загружаемой суммы (%4)'");
				ТекстСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстСобытия, ДокументОснование, Элем.ДокументОплаты, Элем.Сумма, СуммаПлатежа);
				ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Предупреждение,,, ТекстСобытия);
			КонецЕсли;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыОплатыОбработанРанее Тогда
		Обработано = Истина;
		Возврат;
	КонецЕсли;
	
	ДокументОплаты.СуммаДокумента = СуммаПлатежа;
	
	// перезаполнение документа оплаты по атрибутам платежа
	ДокументОплаты.Партнер = ДокументОснование.Партнер;
	ДокументОплаты.Контрагент = ДокументОснование.Контрагент;
	ДокументОплаты.ДоговорЭквайринга = ПолучитьДоговорЭквайринга(ДокументОплаты.Организация, АтрибутыПлатежа.Перевозчик);
	Если ДокументОплаты.РасшифровкаПлатежа.Количество() > 0 
		И Не ЗначениеЗаполнено(ДокументОплаты.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств) Тогда 
		ДокументОплаты.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ДокументОплаты.ДоговорЭквайринга, "СтатьяДвиженияДенежныхСредствПоступлениеОплаты");
	КонецЕсли;
	ДокументОплаты.КодАвторизации = КодАвторизацииДоставки;
	
	Если Не ЗначениеЗаполнено(ДокументОплаты.Ответственный) Тогда
		ДокументОплаты.Ответственный = ДокументОплаты.Автор;
	КонецЕсли;
	
	Попытка
		Если ДокументОплаты.ПроверитьЗаполнение() Тогда
			ДокументОплаты.Записать(РежимЗаписиДокумента.Проведение);
			Обработано = Истина;
		Иначе
			ТекстОшибки = НСтр(
				"ru = 'Не удалось зарегистрировать наложенный платеж по ""%1"" 
				|из-за ошибки заполнения эквайринговой операции.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ДокументОснование);
			Возврат;
		КонецЕсли;
	Исключение
		ИмяСобытия = "СервисДоставки.Наложенныйплатеж.Запись";
		ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	// -- СервисДоставки.ERP

КонецПроцедуры

// Проверяет, есть ли у переданной организации договор эквайринга с оператором доставки.
// Параметры:
//	Организация - СправочникСсылка.Организации
//	Перевозчик - ОпределяемыйТип.КонтрагентСервисДоставки, Неопределено - незаполненное значение параметра 
//						означает наличие хотя бы одного перевозчика с договором эквайринга. 
//	Результат - Булево - возможна доставка наложенным платежом.
Процедура ВозможнаДоставкаНаложеннымПлатежом(Знач Организация, Знач Перевозчик, Результат) Экспорт
	
	// ++ СервисДоставки.ERP
	Результат = ЗначениеЗаполнено(ПолучитьДоговорЭквайринга(Организация, Перевозчик));
	// -- СервисДоставки.ERP
	
КонецПроцедуры

#КонецОбласти

#Область СобытияДокументов

// Выполняет операции со связанным с документом заказом на доставку.
//
// Параметры:
// 	ДокументОбъект - ДокументОбъект - объект документа-основания заказа на доставку.
//
Процедура ПередЗаписьюОснованияЗаказаНаДоставку(ДокументОбъект) Экспорт
	
	// ++ СервисДоставки.ERP
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторЗаказаНаДоставку = СервисДоставки.НайтиЗаказНаДоставкуПоОснованию(ДокументОбъект.Ссылка, Истина);
	Если ЗначениеЗаполнено(ИдентификаторЗаказаНаДоставку) Тогда
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ИмяТабличнойЧасти = "ВозвращаемыеТовары";
		Иначе
			ИмяТабличнойЧасти = "Товары";
		КонецЕсли;
		
		ТаблицаТоваров = НовыйОписаниеТаблицыТоваровДокументаОснования();
		
		Для Каждого СтрокаТовары Из ДокументОбъект[ИмяТабличнойЧасти] Цикл
			
			НоваяСтрока = ТаблицаТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
		
		ДополнитьТекстЗапросаТоварыДоИзменения(Запрос.Текст);
		ДополнитьТекстЗапросаТоварыПослеИзменения(Запрос.Текст);
		
		Запрос.Текст = Запрос.Текст + "
		|" +
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьИзмененияТоварногоСостава
		|ИЗ
		|	ТоварыДоИзменения
		|		ПОЛНОЕ СОЕДИНЕНИЕ ТоварыПослеИзменения
		|		ПО ТоварыДоИзменения.Номенклатура = ТоварыПослеИзменения.Номенклатура
		|		И ТоварыДоИзменения.Характеристика = ТоварыПослеИзменения.Характеристика
		|		И ТоварыДоИзменения.Количество = ТоварыПослеИзменения.Количество
		|ГДЕ
		|	(ТоварыДоИзменения.Номенклатура ЕСТЬ NULL
		|	ИЛИ ТоварыПослеИзменения.Номенклатура ЕСТЬ NULL)";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"#ИмяДокумента",
			СтрШаблон("%1.%2",
				ДокументОбъект.Метаданные().ПолноеИмя(),
				ИмяТабличнойЧасти));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			РегистрыСведений.ДанныеЗаказовСервисДоставки.УстановитьПризнакИзмененияЗаказов(
				Новый Структура("ДокументОснование", ДокументОбъект.Ссылка),
				Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	// -- СервисДоставки.ERP
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Заполняет список выбора способов определения реквизита заказа на доставку для общих настроек.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма настроек, в которой необходимо заполнить список выбора.
//
Процедура ЗаполнитьСписокВыбораСпособаОпределенияКонтактногоЛица(Форма) Экспорт
	
	СписокВыбора = Форма.Элементы.СпособОпределенияКонтактногоЛица.СписокВыбора;
	
	// ++ СервисДоставки.ERP
	СписокВыбора.Вставить(0, 3, НСтр("ru='Менеджер из документа отгрузки'"));
	СписокВыбора.Вставить(1, 4, НСтр("ru='Ответственный склада'"));
	СписокВыбора.Вставить(2, 5, НСтр("ru='Текущий пользователь'"));
	// -- СервисДоставки.ERP
	
КонецПроцедуры

// Получение доступности функционала доставки в прикладном решении.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма панели настроек, в которой необходимо установить доступность.
//
Процедура УстановитьДоступностьНастройкиСервисаДоставки(Форма) Экспорт
	
	// ++ СервисДоставки.ERP
	ИспользоватьУправлениеДоставкой = Константы["ИспользоватьУправлениеДоставкой"].Получить();
	ЭтоПолнаяВерсия = Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Элементы = Форма.Элементы;
	
	Если ЭтоПолнаяВерсия 
		И Не ИспользоватьУправлениеДоставкой Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Константа_ИспользоватьСервис1СДоставка", "Доступность", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Константа_ИспользоватьСервис1СКурьер", "Доступность", Ложь);
		
		ТекстЗаголовка = НСтр("ru='Невозможно включение интеграции с сервисами, потому что отключена работа с доставкой. 
									|Включить работу с доставкой можно в разделе ""Склад и доставка""'");
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КомментарийИспользоватьСервис1СДоставка", "Заголовок", ТекстЗаголовка);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаКомментарийИспользоватьСервис1СДоставка", "Видимость", ЭтоПолнаяВерсия И Не ИспользоватьУправлениеДоставкой);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаНастройкиБизнесСетьСервисДоставки", "Видимость", ЭтоПолнаяВерсия);
	// -- СервисДоставки.ERP
	
КонецПроцедуры

// Добавление команды поиска торговых предложений в формах.
//
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - состав полей см. в функции ВводНаОсновании.СоздатьКоллекциюКомандСоздатьНаОсновании.
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	// ++ СервисДоставки.ERP
	Если ПравоДоступа("Использование", Метаданные.Обработки.СервисДоставки) Тогда
		
		ТипыИсточников = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ТипыИсточников", Новый Массив);
		Для Каждого ТипИсточника Из ТипыИсточников Цикл
		КонецЦикла;
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СервисДоставкиКлиентПереопределяемый.ЗаказНаДоставкуСоздатьНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНовыйЗаказНаДоставку";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Заказ на доставку в 1С:Доставка'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьСервис1СДоставка";
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик = "СервисДоставкиКлиентПереопределяемый.ЗаказНаДоставкуСоздатьНаОсновании";
		КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНовыйЗаказНаКурьерскуюДоставку";
		КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Заказ на доставку в 1С:Курьер'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьСервис1СКурьер";
		
		Если СервисДоставкиКлиентСервер.ТипыДокументовОснованийКурьерика().Найти(ТипИсточника) <> Неопределено Тогда
			КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
			КомандаСоздатьНаОсновании.Обработчик = "СервисДоставкиКлиентПереопределяемый.ЗаказНаДоставкуСоздатьНаОсновании";
			КомандаСоздатьНаОсновании.Идентификатор = "СоздатьНовыйЗаказНаДоставкуКурьерика";
			КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Заказ на доставку в 1С-Курьерика'");
			КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
			КомандаСоздатьНаОсновании.МножественныйВыбор = Истина;
			КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьСервис1СКурьерика";
		КонецЕсли;
		
	КонецЕсли;
	// -- СервисДоставки.ERP
	
КонецПроцедуры

// Обработка создания библиотечной формы.
//
// Параметры:
//  Форма - Форма - создаваемая управляемая форма;
//  Отказ - Булево - флаг отказа от создания формы;
//  СтандартнаяОбработка - Булево - флаг стандартной обработки формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Заполняет шаблон формы оплаты для параметров заказа на доставку.
// Например, когда Форма оплаты определена перечислением "ФормыОплаты":
//    Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
//      СвойстваФормыОплаты.Вставить("ФормаОплаты", 2);
//      СвойстваФормыОплаты.Вставить("ФормаОплатыПредставление", НСтр("ru='Наличная'"));
//    Иначе
//      СвойстваФормыОплаты.Вставить("ФормаОплаты", 1);
//      СвойстваФормыОплаты.Вставить("ФормаОплатыПредставление", НСтр("ru='Безналичная'"));
//    КонецЕсли;.
//
// Параметры:
//  ФормаОплаты - ОпределяемыйТип.ФормаОплатыСервисДоставки - форма оплаты заказа на доставку;
//  СвойстваФормыОплаты - Структура - содержит:
//    ФормаОплаты - Число - 1 - безналичная, 2 - наличная, по умолчанию 2;
//    ФормаОплатыПредставление - Строка - "Безналичная", "Наличная", по умолчанию "Наличная".
//
Процедура ОпределитьПараметрыЗаказаФормаОплаты(ФормаОплаты, СвойстваФормыОплаты) Экспорт
	
КонецПроцедуры

// Определяет можно ли использовать сервис доставки в текущей конфигурации.
//
// Параметры:
//  Результат - Булево - Признак возможности использовать сервис доставки.
//
Процедура ПроверитьДоступностьСервисаДоставки(Результат) Экспорт
	
	// ++ СервисДоставки.ERP
	Результат = Результат И (Не ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	// -- СервисДоставки.ERP
	
КонецПроцедуры

// Адаптирует текст запроса к базе данных для получения контрагента или организации.
//
// Параметры:
//  ТекстЗапроса - Строка - текст запроса, который требуется адаптировать для текущей конфигурации (основная таблица уже есть в запросе);
//  ТипДанных - Тип - тип данных к таблице которых будет выполнен запрос.
//
Процедура ОбработатьЗапросПолученияУчастникаГрузоперевозкиПоИННиКПП(ТекстЗапроса, ТипДанных) Экспорт
	
	Если ТипДанных = Тип("СправочникСсылка.Организации") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Наименование", "Таблица.НаименованиеСокращенное");
	ИначеЕсли ТипДанных = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Таблица.Наименование", "Таблица.НаименованиеПолное");
	КонецЕсли;
	
КонецПроцедуры

// Заполнить данные по взаиморасчетам.
// 
// Параметры:
//  СтруктураВзаиморасчетов - см. СервисДоставки.НовыйСтруктураВзаиморасчетовПоДокументу
//  ДокументСсылка - Неопределено, ДокументСсылка - Документ на оснвоании которого необходимо заполнить данные
Процедура ЗаполнитьДанныеПоВзаиморасчетам(СтруктураВзаиморасчетов, ДокументСсылка = Неопределено) Экспорт
	
	ТипыДокументовБезВзаиморасчетов = Новый Массив;
	ТипыДокументовБезВзаиморасчетов.Добавить(Тип("ДокументСсылка.ЗаказНаПеремещение"));
	ТипыДокументовБезВзаиморасчетов.Добавить(Тип("ДокументСсылка.ПеремещениеТоваров"));
	
	Если Не ДокументСсылка = Неопределено
		И ТипыДокументовБезВзаиморасчетов.Найти(ТипЗнч(ДокументСсылка)) = Неопределено Тогда
	
		СтруктураПараметров = Документы[ДокументСсылка.Метаданные().Имя].ПараметрыВзаиморасчеты(ДокументСсылка);
		Если ТипЗнч(СтруктураПараметров) = Тип("Массив")
			И СтруктураПараметров.Количество() > 0 Тогда
			СтруктураПараметров = СтруктураПараметров.Получить(0);
		КонецЕсли;
		
		Организация = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(ДокументСсылка, СтруктураПараметров.Организация);
		ВалютаОрганизации = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
		
		ПутьКДаннымСуммаВзаиморасчетов = ?(СтруктураПараметров.СуммаВзаиморасчетов = "", СтруктураПараметров.СуммаДокумента, СтруктураПараметров.СуммаВзаиморасчетов);
		СуммаВзаиморасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(ДокументСсылка, ПутьКДаннымСуммаВзаиморасчетов,, 0);
		ВалютаДокумента = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(ДокументСсылка, СтруктураПараметров.ВалютаДокумента,, ВалютаОрганизации);
		ТипРасчетов = СтруктураПараметров.ТипРасчетов;
		ПорядокРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(ДокументСсылка, СтруктураПараметров.ПорядокРасчетов);
		
		ЭтоДоговорСНакладными = СтруктураПараметров.ЭтоСправочник
			И СтруктураПараметров.ДокументСсылка = СтруктураПараметров.Договор
			И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным;
		ЭтоЗаказСНакладными = СтруктураПараметров.ЭтоЗаказ
			И ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
		
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ДокументСсылка, Организация, ТипРасчетов);
		СтруктураОплаты = ВзаиморасчетыСервер.СостояниеВзаиморасчетовОбъектаРасчетов(ОбъектРасчетов,
			СуммаВзаиморасчетов,
			ТипРасчетов,
			Организация,
			ЭтоЗаказСНакладными,
			ЭтоДоговорСНакладными);
			
		Если ВалютаОрганизации = ВалютаДокумента Тогда
			
			СуммаДокумента = СуммаВзаиморасчетов;
			СуммаОплат = СтруктураОплаты.СуммаОплат
			
		Иначе
			
			СуммаДокумента = РаботаСКурсамиВалют.ПересчитатьВВалюту(СуммаВзаиморасчетов,
				ВалютаДокумента,
				ВалютаОрганизации,
				ТекущаяДатаСеанса());
				
			СуммаОплат = РаботаСКурсамиВалют.ПересчитатьВВалюту(СтруктураОплаты.СуммаОплат,
				ВалютаДокумента,
				ВалютаОрганизации,
				ТекущаяДатаСеанса());
			
		КонецЕсли;
		
		СтруктураВзаиморасчетов.СуммаДокумента = СуммаДокумента;
		СтруктураВзаиморасчетов.СуммаОплат = СуммаОплат;
		СтруктураВзаиморасчетов.ДоступноВедениеВзаиморасчетов = Истина;
		
	Иначе
		
		СтруктураВзаиморасчетов.ДоступноВедениеВзаиморасчетов = Ложь;
		
	КонецЕсли;
	
Конецпроцедуры

#Область Обработка_результатов_запросов_документов

// Обрабатывает результат создания и изменения заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - СписокЗначений из ДокументСсылка, Неопределено - список документов оснований заказа на доставку
//                                        (значение - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки).
//
Процедура ОбработатьРезультатЗапросаСозданияИзмененияЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат оформления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат отмены заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат обновления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатЗапросаОбновленияЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат запроса состояния заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  ИнформацияОЗаказе - Структура - содержит информацию о состоянии заказа в сервисе;
//
Процедура ОбработатьРезультатСостоянияЗаказаНаДоставку(ИнформацияОЗаказе) Экспорт
	
КонецПроцедуры

// Обрабатывает результат получения заказа на доставку из сервиса 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументыОснования - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатЗапросаПолученияЗаказаНаДоставку(Результат, ДокументыОснования = Неопределено) Экспорт
	
КонецПроцедуры

// Обрабатывает результат отмены заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//
Процедура ОбработатьРезультатЗапросаОтменыМультизаказаНаДоставку(Результат) Экспорт
	
КонецПроцедуры


// Обрабатывает результат обновления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//
Процедура ОбработатьРезультатЗапросаОбновленияМультизаказаНаДоставку(Результат) Экспорт
	
КонецПроцедуры

// Обрабатывает результат получения заказа на доставку из сервиса 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//
Процедура ОбработатьРезультатЗапросаПолученияМультизаказаНаДоставку(Результат) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедурыИФункции
// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаСозданияИзмененияЗаказаНаДоставку.
// Обрабатывает результат создания заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатСозданияЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОформленияЗаказаНаДоставку.
// Обрабатывает результат оформления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатОформленияЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОтменыЗаказаНаДоставку.
// Обрабатывает результат отмены заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатОтменыЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаОбновленияЗаказаНаДоставку.
// Обрабатывает результат обновления заказа на доставку в сервисе 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатОбновленияЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставкиПереопределяемый.ОбработатьРезультатЗапросаПолученияЗаказаНаДоставку.
// Обрабатывает результат получения заказа на доставку из сервиса 1С:Доставка.
//
// Параметры:
//  Результат - Структура - содержит результат выполнения запроса в сервис;
//  ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки, Неопределено - документ, основание заказа на доставку.
//
Процедура ОбработатьРезультатПолученияЗаказаНаДоставку(Результат, ДокументОснование = Неопределено) Экспорт
	
КонецПроцедуры

// Устарела. Следует использовать СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица.
// Заполняет параметры контактного лица данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Параметры - см. СервисДоставки.НовыйПараметрыКонтактногоЛица
//
Процедура ЗаполнитьДанныеКонтактногоЛица(Параметры) Экспорт
	
КонецПроцедуры

// Устарела. Не использовать.
// Вместо него использовать СервисДоставки.ЗаполнитьПараметрыКонтактногоЛица.
// Заполняет параметры контактного лица данными по ссылке, указанной в Параметры.
//
// Параметры:
//  Параметры - см. СервисДоставки.НовыйПараметрыКонтактногоЛица
//
Процедура ЗаполнитьПараметрыКонтактногоЛица(Параметры) Экспорт
	
КонецПроцедуры

// Устарела. Не использовать.
// Заполняет параметры телефона контактной информацией по владельцу, указанному в Параметры.
//
// Параметры:
//  Параметры - см. СервисДоставки.НовыйПараметрыКонтактногоЛица
//
Процедура ЗаполнитьТелефонКонтактногоЛица(Параметры) Экспорт
	
КонецПроцедуры

// Устарела. Не использовать.
// Вместо него использовать СкорректироватьНаименованиеВидаТелефона()
// Формирует текст наименования вида телефона для заголовка перед номером телефона.
//
// Параметры:
//  Параметры - СтрокаТаблицыЗначений из см. УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов. 
//  ВидТелефона - Строка - название вида телефона, которое необходимо сформировать или оставить без изменения.
//
Процедура СформироватьНаименованиеВидаТелефона(Параметры, ВидТелефона) Экспорт
	
	СкорректироватьНаименованиеВидаТелефона(ВидТелефона, Параметры.Вид);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗагрузкаНаложенныхПлатежей

Функция ПолучитьДоговорЭквайринга(Знач Организация, Знач Перевозчик)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("Перевозчик", Перевозчик);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрНастроек.ДоговорЭквайринга КАК ДоговорЭквайринга
	|ИЗ
	|	РегистрСведений.НастройкиЗагрузкиНаложенныхПлатежейСервисДоставки КАК РегистрНастроек
	|ГДЕ
	|	РегистрНастроек.Организация = &Организация
	|	И &ОтборПоПеревозчику
	|	И РегистрНастроек.ДоговорЭквайринга.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И НЕ РегистрНастроек.ДоговорЭквайринга.ПометкаУдаления
	|	И РегистрНастроек.ДоговорЭквайринга.Организация = РегистрНастроек.Организация
	|	И РегистрНастроек.ДоговорЭквайринга.Контрагент = РегистрНастроек.Перевозчик";
	
	Если ЗначениеЗаполнено(Перевозчик) Тогда
		ОтборПоПеревозчику = "РегистрНастроек.Перевозчик = &Перевозчик";
	Иначе
		ОтборПоПеревозчику = "ИСТИНА";
	КонецЕсли; 
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоПеревозчику", ОтборПоПеревозчику);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДоговорЭквайринга;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

// Возвращаемое значение:
//	ТаблицаЗначений:
//	*ДокументОплаты - ДокументСсылка.ОперацияПоПлатежнойКарте - документ оплаты
//	*Сумма - Число - сумма документа оплаты
//	*КодАвторизации - Строка - контрольная сумма
//	*Дата - Дата - дата документа оплаты
//	*Номер - Строка - номер документа оплаты
Функция ПолучитьДокументыОплатыПоОснованию(Знач ДокументОснованиеОплаты)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ОснованиеПлатежа", ДокументОснованиеОплаты);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабРасшифровкаПлатежа.Ссылка КАК ДокументОплаты,
	|	ТабРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ДокОперация.КодАвторизации КАК КодАвторизации,
	|	ДокОперация.Дата КАК Дата,
	|	ДокОперация.Номер КАК Номер
	|ИЗ
	|	Документ.ОперацияПоПлатежнойКарте.РасшифровкаПлатежа КАК ТабРасшифровкаПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОперацияПоПлатежнойКарте КАК ДокОперация
	|		ПО ТабРасшифровкаПлатежа.Ссылка = ДокОперация.Ссылка
	|ГДЕ
	|	ТабРасшифровкаПлатежа.ОснованиеПлатежа = &ОснованиеПлатежа
	|	И ДокОперация.Проведен
	|	И НЕ ДокОперация.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Параметры:
//	ИсходнаяСтрока - Строка - исходная строка по которой будет вычисляться контрольная сумма
// Возвращаемое значение:
//	Строка
Функция КодАвторизацииПоЛитералу(Знач ИсходнаяСтрока)
	
	Если ТипЗнч(ИсходнаяСтрока) <> Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеширование.Добавить(ИсходнаяСтрока);
	ТекСумма = Хеширование.ХешСумма;
	СуммаКак16 = ПреобразоватьДесятичноеЧислоВШестнадцатеричнуюСистемуСчисления(ТекСумма);
	Пока СтрДлина(СуммаКак16) % 2 <> 0 Цикл
		СуммаКак16 = СуммаКак16+"0";
	КонецЦикла;
	
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзHexСтроки(СуммаКак16);
	
	Сумма64 = Base64Строка(ДвоичныеДанные);
	
	Возврат Сумма64;
	 
КонецФункции

Функция ПреобразоватьДесятичноеЧислоВШестнадцатеричнуюСистемуСчисления(Знач ДесятичноеЧисло)
	
	Результат = "";
	
	Пока ДесятичноеЧисло > 0 Цикл
		ОстатокОтДеления = ДесятичноеЧисло % 16;
		ДесятичноеЧисло  = (ДесятичноеЧисло - ОстатокОтДеления) / 16;
		Результат        = Сред("0123456789abcdef", ОстатокОтДеления + 1, 1) + Результат;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Получает вид контактной информации для адреса доставки партнера.
//
// Возвращаемое значение:
//  СправочникСсылка.ВидыКонтактнойИнформации, Неопределено - вид контактной информации.
//
Функция ВидКонтактнойИнформацииАдресДоставкиПартнера()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|	И ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
	|	И ВидыКонтактнойИнформации.Наименование = &АдресДоставкиНаименование";
	
	Запрос.Параметры.Вставить("АдресДоставкиНаименование", "Адрес доставки");
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
	
КонецФункции

Функция РазложитьМассивСсылокПоТипам(МассивСсылок)
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Счетчик = 0 По МассивСсылок.Количество() -1 Цикл
		
		ТипСсылки = ТипЗнч(МассивСсылок[Счетчик]);
		Массив = СоответствиеТипов[ТипСсылки];
		Если Массив = Неопределено Тогда
			Массив = Новый Массив;
			СоответствиеТипов.Вставить(ТипСсылки, Массив);
		КонецЕсли;
		Массив.Добавить(МассивСсылок[Счетчик]);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

Процедура ДополнитьЗапросПоОснованиям(ТекстЗапроса, ТекстЗапросаДляДополнения, ПервыйЗапрос, ИмяТаблицы)
	
	Если Не ЗначениеЗаполнено(ТекстЗапросаДляДополнения) Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "#ТаблицаДокумента", ИмяТаблицы);
	Если ПервыйЗапрос Тогда
		ПервыйЗапрос = Ложь;
		ТекстЗапроса = ТекстЗапросаДляДополнения;
	Иначе
		ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "ПОМЕСТИТЬ ДанныеОснованийТовары", "");
		ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "ПОМЕСТИТЬ ДанныеОснований", "");
		ТекстЗапросаДляДополнения = СтрЗаменить(ТекстЗапросаДляДополнения, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
		ТекстЗапроса = ТекстЗапроса +
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|"
		+ ТекстЗапросаДляДополнения;
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеСтавокНДС()
	
	Соответствие  = Новый Соответствие();
	
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС0,       "0");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС10,      "10");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС18,      "18");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС10_110,  "10/110");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС18_118,  "18/118");
	Соответствие.Вставить(Перечисления.СтавкиНДС.БезНДС,     "БезНДС");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС20,      "20");
	Соответствие.Вставить(Перечисления.СтавкиНДС.НДС20_120,  "20/120");
	
	Возврат Соответствие;
	
КонецФункции

Функция ЭтоДокументОтгрузкиСНашегоСклада(ИмяДокумента)
	
	Возврат СтрНайти("ЗаказКлиента,РеализацияТоваровУслуг,ВозвратТоваровПоставщику,ЗаявкаНаВозвратТоваровОтКлиента,ЗаказНаПеремещение,ПеремещениеТоваров", ИмяДокумента) <> 0;
	
КонецФункции

Функция ЭтоДокументДоставкиНаНашСклад(ИмяДокумента)
	
	Возврат СтрНайти("ЗаказПоставщику,ПриобретениеТоваровУслуг,ЗаказНаПеремещение,ПеремещениеТоваров", ИмяДокумента) <> 0;
	
КонецФункции

Процедура ДополнитьТекстЗапросаТоварыДоИзменения(ТекстЗапроса)
	
	// ++ СервисДоставки.ERP
	ТекстЗапроса = ТекстЗапроса + "
	|" +
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика,
	|	ТаблицаТоваров.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыДокументаДоЗаписи
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И НЕ ТаблицаТоваров.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И НЕ ТаблицаТоваров.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|	И НЕ ТаблицаТоваров.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	Документ.ПеремещениеТоваров.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.Количество
	|ИЗ
	|	Документ.ЗаказНаПеремещение.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокументаДоЗаписи.Номенклатура КАК Номенклатура,
	|	ТоварыДокументаДоЗаписи.Характеристика КАК Характеристика,
	|	СУММА(ТоварыДокументаДоЗаписи.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДоИзменения
	|ИЗ
	|	ТоварыДокументаДоЗаписи КАК ТоварыДокументаДоЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокументаДоЗаписи.Номенклатура,
	|	ТоварыДокументаДоЗаписи.Характеристика
	|" + ОбщегоНазначения.РазделительПакетаЗапросов();
	// -- СервисДоставки.ERP
	
КонецПроцедуры

Процедура ДополнитьТекстЗапросаТоварыПослеИзменения(ТекстЗапроса)
	
	// ++ СервисДоставки.ERP
	ТекстЗапроса = ТекстЗапроса + "
	|" + 
	"ВЫБРАТЬ
	|	ВТ.Номенклатура КАК Номенклатура,
	|	ВТ.Характеристика КАК Характеристика,
	|	ВТ.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыДокументаПослеЗаписи
	|ИЗ
	|	&ТаблицаТоваров КАК ВТ
	|ГДЕ
	|	НЕ ВТ.Отменено
	|;
	|
	|ВЫБРАТЬ
	|	ТоварыДокументаПослеЗаписи.Номенклатура КАК Номенклатура,
	|	ТоварыДокументаПослеЗаписи.Характеристика КАК Характеристика,
	|	СУММА(ТоварыДокументаПослеЗаписи.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыПослеИзменения
	|ИЗ
	|	ТоварыДокументаПослеЗаписи КАК ТоварыДокументаПослеЗаписи
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокументаПослеЗаписи.Номенклатура,
	|	ТоварыДокументаПослеЗаписи.Характеристика
	|" + ОбщегоНазначения.РазделительПакетаЗапросов();
	// -- СервисДоставки.ERP
	
КонецПроцедуры

Функция НовыйОписаниеТаблицыТоваровДокументаОснования()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Результат.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Отменено", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
