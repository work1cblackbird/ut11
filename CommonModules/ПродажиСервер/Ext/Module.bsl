////////////////////////////////////////////////////////////////////////////////
// Модуль "ПродажиСервер", содержит процедуры и функции для
// проверки корректности документов продажи и для обработки введенных данных.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Определяет хозяйственную операцию возврата по хозяйственной операции реализации
//
// Параметры:
//   ХозяйственнаяОперацияРеализация - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция реализации.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция возврата.
//
Функция ПолучитьХозяйственнуюОперациюВозвратаПоРеализации(Знач ХозяйственнаяОперацияРеализация) Экспорт
	
	Если ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
	 Или Не ЗначениеЗаполнено(ХозяйственнаяОперацияРеализация) Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
	ИначеЕсли ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
	ИначеЕсли ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
	ИначеЕсли ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратОтХранителя;
	ИначеЕсли ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера;
	ИначеЕсли ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера;
	КонецЕсли;
	
КонецФункции

// Определяет хозяйственную операцию соглашения по хозяйственной операции возврата.
//
// Параметры:
//   ХозяйственнаяОперацияВозврат - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция возврата.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения.
//
Функция ПолучитьХозяйственнуюОперациюСоглашенияПоВозврату(Знач ХозяйственнаяОперацияВозврат) Экспорт
	
	Если ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента 
		ИЛИ ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя
		ИЛИ Не ЗначениеЗаполнено(ХозяйственнаяОперацияВозврат) Тогда
			Возврат Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		ИначеЕсли ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
			Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		ИначеЕсли ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера Тогда
			Возврат Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера;
		ИначеЕсли ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя Тогда
			Возврат Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи;
	КонецЕсли;
	
КонецФункции

// Корректирует строки, по которым не была оформлена накладная или отгрузка или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - см. ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа
//
// Возвращаемое значение:
// 		Структура - со свойствами:
// 		*	КоличествоСтрок - Число - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Число - Сумма увеличения заказа из-за превышения отгрузки мерных товаров.
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	СуммаКорректировки = 0;
	
	ДокументПродажи              = СтруктураПараметров.ДокументОбъект;
	ПричинаОтмены                = СтруктураПараметров.ПричинаОтмены;
	ОтменитьНеотработанныеСтроки = СтруктураПараметров.ОтменитьНеотработанныеСтроки;
	СкорректироватьМерныеТовары  = СтруктураПараметров.СкорректироватьМерныеТовары;
	ТаблицаТовары                = ДокументПродажи[СтруктураПараметров.ИмяТабличнойЧасти];
	
	ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
		ПолучитьФункциональнуюОпцию("ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров");
	
	СтруктураВозврата = Новый Структура("КоличествоСтрок, СуммаКорректировки",0,0);
	
	Если ИспользоватьДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров Тогда
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров =
			Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
		ПричинаОтменыМерныхТоваров =
			Справочники.ПричиныОтменыЗаказовКлиентов.ОтклонениеПриОтгрузкеМерныхТоваров;
	Иначе
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0;
		СкорректироватьМерныеТовары = Ложь;
	КонецЕсли;
	
	Если НЕ СкорректироватьМерныеТовары И НЕ ОтменитьНеотработанныеСтроки Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СвойстваОтмененнойСтроки = Новый Структура("Отменено, ПричинаОтмены, СтатусУказанияСерий", Истина, ПричинаОтмены, 0);
	
	Если Не СтруктураПараметров.ПроверятьОстатки И ОтменитьНеотработанныеСтроки Тогда
		Для н = 0 По ТаблицаТовары.Количество() - 1 Цикл
			Если Не ТаблицаТовары[н].Отменено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТовары[н], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		СтруктураВозврата.КоличествоСтрок = КоличествоОтмененныхСтрок;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СкладВСтроках = (Тип("ДокументСсылка.ЗаказКлиента") = ТипЗнч(ДокументПродажи.Ссылка));
	СкладЗаказа   = Неопределено;
	Если НЕ СкладВСтроках Тогда
		СкладЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.Ссылка, "Склад");
	КонецЕсли; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	&СкладЗаказа КАК Склад,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.СуммаСНДС КАК ЧИСЛО) КАК СуммаСНДС,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено,
	|	ВЫРАЗИТЬ(ТаблицаТовары.ВариантОбеспечения КАК Перечисление.ВариантыОбеспечения) КАК ВариантОбеспечения,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Обособленно КАК БУЛЕВО) КАК Обособленно,
	|	&ЗаказКлиента КАК ЗаказКлиента
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаспоряженияНаОтгрузкуОбороты.Номенклатура				КАК Номенклатура,
	|	РаспоряженияНаОтгрузкуОбороты.Характеристика			КАК Характеристика,
	|	РаспоряженияНаОтгрузкуОбороты.Склад						КАК Склад,
	|	РаспоряженияНаОтгрузкуОбороты.Серия						КАК Серия,
	|	РаспоряженияНаОтгрузкуОбороты.КодСтроки					КАК КодСтроки,
	|	СУММА(РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот)	КАК КОформлениюКонечныйОстаток,
	|	СУММА(ВЫБОР 
	|			КОГДА РаспоряженияНаОтгрузкуОбороты.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Приход)
	|			ТОГДА	РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ)												КАК КОформлениюПриход,
	|	СУММА(ВЫБОР
	|			КОГДА РаспоряженияНаОтгрузкуОбороты.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)
	|			ТОГДА -РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ)												КАК КОформлениюРасход,
	|	СУММА(ВЫБОР
	|			КОГДА РаспоряженияНаОтгрузкуОбороты.ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)
	|			ТОГДА -РаспоряженияНаОтгрузкуОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ)												КАК СуммаРасход,
	|	СУММА(РаспоряженияНаОтгрузкуОбороты.СуммаОборот)		КАК СуммаКонечныйОстаток
	|ПОМЕСТИТЬ ВтЗаказыКлиентовОстаткиОбороты
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов,
	|		, Распоряжение = &ЗаказКлиента И КодСтроки <> 0) КАК РаспоряженияНаОтгрузкуОбороты
	|СГРУППИРОВАТЬ ПО
	|	РаспоряженияНаОтгрузкуОбороты.Номенклатура,
	|	РаспоряженияНаОтгрузкуОбороты.Характеристика,
	|	РаспоряженияНаОтгрузкуОбороты.Склад,
	|	РаспоряженияНаОтгрузкуОбороты.Серия,
	|	РаспоряженияНаОтгрузкуОбороты.КодСтроки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Серия,
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                     КАК Характеристика,
	|	ТаблицаТовары.Склад                              КАК Склад,
	|	ТаблицаТовары.Серия                              КАК Серия,
	|	ТаблицаТовары.Упаковка                           КАК Упаковка,
	|	ТаблицаТовары.КодСтроки                          КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Обособленно ТОГДА
	|			ТаблицаТовары.ЗаказКлиента.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                            КАК Назначение,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                   КАК СуммаСНДС,
	|	СУММА(ТаблицаТовары.Количество)                  КАК Количество
	|ПОМЕСТИТЬ ВТТаблицаТоваровКПроверке
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	НЕ ТаблицаТовары.ЗаказКлиента.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|СГРУППИРОВАТЬ ПО 
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Склад,
	|	ТаблицаТовары.Серия,
	|	ТаблицаТовары.Упаковка,
	|	ТаблицаТовары.КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Обособленно ТОГДА
	|			ТаблицаТовары.ЗаказКлиента.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТаблицаТовары.ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура                                         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                       КАК Характеристика,
	|	ТаблицаТовары.Склад                                                КАК Склад,
	|	ТаблицаТовары.КодСтроки                                            КАК КодСтроки,
	|	ТаблицаТовары.Назначение                                           КАК Назначение,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)                      КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество                                           КАК Количество,
	|	ТаблицаТовары.СуммаСНДС                                            КАК СуммаСНДС,
	|	ТаблицаТовары.Количество - ЗаказыКлиентовОстатки.КОформлениюРасход КАК КОформлениюОстаток,
	|	ЗаказыКлиентовОстатки.КОформлениюПриход                            КАК КОформлениюПриход,
	|	ЗаказыКлиентовОстатки.КОформлениюРасход                            КАК КОформлениюРасход,
	|	ТаблицаТовары.СуммаСНДС - ЗаказыКлиентовОстатки.СуммаРасход        КАК СуммаОстаток,
	|	ВЫБОР КОГДА ТаблицаТовары.Количество > ЗаказыКлиентовОстатки.КОформлениюПриход ТОГДА
	|			ТаблицаТовары.Количество - ЗаказыКлиентовОстатки.КОформлениюПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ                                                              КАК КоличествоСверхОформленного,
	|	ЗаказыКлиентовОстатки.Серия                                        КАК Серия,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения                        КАК БазоваяЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТТоварыКОтмене
	|ИЗ
	|	ВТТаблицаТоваровКПроверке КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаказыКлиентовОстаткиОбороты КАК ЗаказыКлиентовОстатки
	|				ПО ТаблицаТовары.Номенклатура = ЗаказыКлиентовОстатки.Номенклатура
	|				И ТаблицаТовары.Характеристика = ЗаказыКлиентовОстатки.Характеристика
	|				И ТаблицаТовары.Склад = ЗаказыКлиентовОстатки.Склад
	|				И ТаблицаТовары.Серия = ЗаказыКлиентовОстатки.Серия
	|				И ТаблицаТовары.КодСтроки = ЗаказыКлиентовОстатки.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтмене.Номенклатура                       КАК Номенклатура,
	|	ТоварыКОтмене.Характеристика                     КАК Характеристика,
	|	ТоварыКОтмене.Склад                              КАК Склад,
	|	ВЫБОР
	|		КОГДА ТоварыКОтмене.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= ТоварыКОтмене.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                     КАК ОрдернаяСхемаПриОтгрузке,
	|	ТоварыКОтмене.Серия                              КАК Серия,
	|	ТоварыКОтмене.КодСтроки                          КАК КодСтроки,
	|	ТоварыКОтмене.Назначение                         КАК Назначение,
	|	ТоварыКОтмене.БазоваяЕдиницаИзмерения            КАК БазоваяЕдиницаИзмерения,
	|	СУММА(ТоварыКОтмене.Количество)                  КАК Количество,
	|	СУММА(ТоварыКОтмене.СуммаСНДС)                   КАК СуммаСНДС,
	|	СУММА(ТоварыКОтмене.КОформлениюОстаток)          КАК КОформлениюОстаток,
	|	СУММА(ТоварыКОтмене.КОформлениюРасход)           КАК Отгружено,
	|	СУММА(ТоварыКОтмене.СуммаОстаток)                КАК СуммаОстаток,
	|	СУММА(ТоварыКОтмене.КоличествоСверхОформленного) КАК КоличествоСверхОформленного,
	|	ВЫБОР 
	|		КОГДА ТоварыКОтмене.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|			ТОГДА СУММА(ТоварыКОтмене.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДопустимоеОтклонение
	|	
	|ИЗ
	|	ВТТоварыКОтмене КАК ТоварыКОтмене
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтмене.Номенклатура,
	|	ТоварыКОтмене.Характеристика,
	|	ТоварыКОтмене.Склад,
	|	ТоварыКОтмене.Серия,
	|	ТоварыКОтмене.КодСтроки,
	|	ТоварыКОтмене.Назначение,
	|	ТоварыКОтмене.БазоваяЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТоварыКОтмене.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= ТоварыКОтмене.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	0,
	|	0,
	|	0,
	|	НЕОПРЕДЕЛЕНО,
	|	ТаблицаТовары.Номенклатура.ЕдиницаИзмерения
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.ЗаказКлиента.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
	|							ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена))
	|	ИЛИ ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Отгрузки.Номенклатура   КАК Номенклатура,
	|	Отгрузки.Характеристика КАК Характеристика,
	|	Отгрузки.Серия          КАК Серия,
	|	Отгрузки.Назначение     КАК Назначение,
	|	Отгрузки.Склад          КАК Склад,
	|	ВЫБОР 
	|		КОГДА НЕ Отгрузки.ОрдернаяСхемаПриОтгрузке
	|			ТОГДА Отгрузки.Оформлено
	|		ИНАЧЕ Отгрузки.Отгружено
	|	КОНЕЦ                                КАК Количество,
	|	0                                    КАК ДопустимоеОтклонение
	|ИЗ (ВЫБРАТЬ
	|		Отгрузки.Номенклатура     КАК Номенклатура,
	|		Отгрузки.Характеристика   КАК Характеристика,
	|		Отгрузки.Серия            КАК Серия,
	|		Отгрузки.Назначение       КАК Назначение,
	|		Отгрузки.Склад            КАК Склад,
	|		ВЫБОР
	|			КОГДА Отгрузки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					И &Дата >= Отгрузки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ                     КАК ОрдернаяСхемаПриОтгрузке,
	|		СУММА(Отгрузки.Оформлено) КАК Оформлено,
	|		ВЫБОР
	|			КОГДА СУММА(Отгрузки.КОтгрузкеСверхЗаказа) >= СУММА(Отгрузки.Отгружено)
	|				ТОГДА 0
	|			ИНАЧЕ СУММА(Отгрузки.Отгружено) - СУММА(Отгрузки.КОтгрузкеСверхЗаказа)
	|		КОНЕЦ КАК Отгружено
	|	ИЗ (ВЫБРАТЬ
	|			Остатки.Номенклатура                          КАК Номенклатура,
	|			Остатки.Характеристика                        КАК Характеристика,
	|			Остатки.Серия                                 КАК Серия,
	|			Остатки.Назначение                            КАК Назначение,
	|			Остатки.Склад                                 КАК Склад,
	|			Остатки.КОформлениюРасход                     КАК Оформлено,
	|			- Остатки.КОформлениюПриход                   КАК КОтгрузкеСверхЗаказа,
	|			0                                             КАК Отгружено
	|		ИЗ
	|			ВТТоварыКОтмене КАК Остатки
	|		ГДЕ НЕ Остатки.Номенклатура.ТипНоменклатуры В(
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ТоварыКОтгрузкеОстатки.Номенклатура                                         КАК Номенклатура,
	|			ТоварыКОтгрузкеОстатки.Характеристика                                       КАК Характеристика,
	|			ТоварыКОтгрузкеОстатки.Серия                                                КАК Серия,
	|			ТоварыКОтгрузкеОстатки.Назначение                                           КАК Назначение,
	|			ТоварыКОтгрузкеОстатки.Склад                                                КАК Склад,
	|			0                                                                           КАК Оформлено,
	|			ТоварыКОтгрузкеОстатки.КОтгрузкеПриход                                      КАК КОтгрузкеСверхЗаказа,
	|			ТоварыКОтгрузкеОстатки.КОтгрузкеРасход + ТоварыКОтгрузкеОстатки.СобраноПриход
	|				+ ТоварыКОтгрузкеОстатки.СобираетсяПриход                               КАК Отгружено
	|		ИЗ
	|			РегистрНакопления.ТоварыКОтгрузке.ОстаткиИОбороты(,,,,
	|				ДокументОтгрузки = &ЗаказКлиента) КАК ТоварыКОтгрузкеОстатки) КАК Отгрузки
	|	СГРУППИРОВАТЬ ПО
	|		Отгрузки.Номенклатура,
	|		Отгрузки.Характеристика,
	|		Отгрузки.Серия,
	|		Отгрузки.Назначение,
	|		ВЫБОР
	|			КОГДА Отгрузки.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке
	|					И &Дата >= Отгрузки.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		Отгрузки.Склад
	|		) КАК Отгрузки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.Номенклатура   КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Серия          КАК Серия,
	|	ТоварыКОтгрузке.Назначение     КАК Назначение,
	|	ТоварыКОтгрузке.Склад          КАК Склад,
	|	0,
	|	СУММА(ТоварыКОтгрузке.КОформлениюПриход * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))
	|ИЗ
	|	ВТТоварыКОтмене КАК ТоварыКОтгрузке
	|ГДЕ
	|	ТоварыКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузке.Номенклатура,
	|	ТоварыКОтгрузке.Характеристика,
	|	ТоварыКОтгрузке.Серия,
	|	ТоварыКОтгрузке.Назначение,
	|	ТоварыКОтгрузке.Склад
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыКлиентовОстатки.Характеристика КАК Характеристика,
	|	ЗаказыКлиентовОстатки.Серия КАК Серия,
	|	ЗаказыКлиентовОстатки.Назначение        КАК Назначение,
	|	ЗаказыКлиентовОстатки.Склад КАК Склад,
	|	ЗаказыКлиентовОстатки.КОформлениюРасход КАК Количество,
	|	0 КАК ДопустимоеОтклонение
	|ИЗ
	|	ВТТоварыКОтмене КАК ЗаказыКлиентовОстатки
	|ГДЕ
	|	ЗаказыКлиентовОстатки.Номенклатура.ТипНоменклатуры В(
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТовары.Упаковка",
		"ТаблицаТовары.Номенклатура"));
		
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокументПродажи.Ссылка);
	Запрос.УстановитьПараметр("Дата", ДокументПродажи.Дата);
	
	Если СкладВСтроках Тогда
		Запрос.УстановитьПараметр("ТаблицаТовары",
			ТаблицаТовары.Выгрузить(,"НомерСтроки, КодСтроки, Номенклатура, Характеристика,
			| Серия, Склад, Упаковка, Количество, СуммаСНДС, Отменено, ВариантОбеспечения, Обособленно"));
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&СкладЗаказа","ВЫРАЗИТЬ(ТаблицаТовары.Склад КАК Справочник.Склады)");
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТовары",
			ТаблицаТовары.Выгрузить(,"НомерСтроки, КодСтроки, Номенклатура, Характеристика,
				| Серия, Упаковка, Количество, СуммаСНДС, Отменено, ВариантОбеспечения, Обособленно"));
		Запрос.УстановитьПараметр("СкладЗаказа", СкладЗаказа);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ТоварыКОтгрузке",
																"ДокументОтгрузки = &ЗаказКлиента",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодТоварыКОтгрузке", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодТоварыКОтгрузке", ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("РаспоряженияНаОтгрузку",
																"Распоряжение = &ЗаказКлиента",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентов", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентов", ГраницыОборотов.МаксимальнаяДата);
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	Если ПакетРезультатов[3].Пустой() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Выборка  = ПакетРезультатов[4].Выбрать();
	ВыборкаОтменыБезПроверок  = ПакетРезультатов[5].Выбрать();
	ОтгруженныеТовары = ПакетРезультатов[6].Выгрузить(); // ТаблицаЗначений
	ОтгруженныеТовары.Свернуть("Номенклатура, Характеристика, Серия, Назначение, Склад","Количество, ДопустимоеОтклонение");
	ОтгруженныеТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия, Назначение");
	
	// Отменяем строки
	
	Пока ВыборкаОтменыБезПроверок.Следующий() Цикл
		
		Строка = ТаблицаТовары[ВыборкаОтменыБезПроверок.НомерСтроки-1];
			
		ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			
		Продолжить;
			
	КонецЦикла;

	Пока Выборка.Следующий() Цикл
		
	    ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		ПараметрыПоиска.Вставить("Характеристика", Выборка.Характеристика);
		ПараметрыПоиска.Вставить("Серия", Выборка.Серия);
		ПараметрыПоиска.Вставить("Назначение", Выборка.Назначение);

		Если СкладВСтроках Тогда
			ПараметрыПоиска.Вставить("Склад", Выборка.Склад);
		КонецЕсли;
			
		ОтгруженноеКоличество = 0;
		ДопустимоеОтклонение  = 0;
		ОтгруженнаяСтрока     = Неопределено;
		
		НайденныеСтроки = ОтгруженныеТовары.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ОтгруженнаяСтрока = НайденныеСтроки[0];
			Если Выборка.ОрдернаяСхемаПриОтгрузке Тогда
				ОтгруженноеКоличество = ОтгруженнаяСтрока.Количество;
				ДопустимоеОтклонение = ОтгруженнаяСтрока.ДопустимоеОтклонение;
			Иначе
				ОтгруженноеКоличество = Выборка.Отгружено;
				ДопустимоеОтклонение = Выборка.ДопустимоеОтклонение;
			КонецЕсли;
		КонецЕсли;
		
		ОтменитьКоличество = 0;
		
		Если Выборка.Количество > ОтгруженноеКоличество Тогда
			ОтменитьКоличество = Мин(Выборка.КОформлениюОстаток, Выборка.Количество - ОтгруженноеКоличество);
			Если ОтгруженнаяСтрока <> Неопределено Тогда
				Если ОтгруженнаяСтрока.Количество > (Выборка.Количество - Выборка.КоличествоСверхОформленного - Выборка.КОформлениюОстаток) Тогда
					ОтгруженнаяСтрока.Количество = ОтгруженнаяСтрока.Количество - (Выборка.Количество - Выборка.КоличествоСверхОформленного - Выборка.КОформлениюОстаток);
				Иначе
					ОтгруженнаяСтрока.Количество = 0;
				КонецЕсли;
			КонецЕсли;
			СуммаОтменить = Выборка.СуммаСНДС / Выборка.Количество * ОтменитьКоличество;
		Иначе
			ОтгруженнаяСтрока.Количество = ОтгруженнаяСтрока.Количество - Выборка.Количество;
			СуммаОтменить = 0;
		КонецЕсли;
		
		Если ОтменитьКоличество > 0 И ОтменитьКоличество <= ДопустимоеОтклонение Тогда
			ТекущаяПричинаОтмены = ПричинаОтменыМерныхТоваров;
			ОтклонениеВПределахДельты = Истина;
			ОтгруженнаяСтрока.ДопустимоеОтклонение = ОтгруженнаяСтрока.ДопустимоеОтклонение - ОтменитьКоличество;
		Иначе
			ТекущаяПричинаОтмены = ПричинаОтмены;
			ОтклонениеВПределахДельты = Ложь;
		КонецЕсли;
		
		Если (НЕ ОтменитьНеотработанныеСтроки И НЕ ОтклонениеВПределахДельты)Тогда
			ОтменитьКоличество = 0;
		КонецЕсли;
		
		ПараметрыПоиска.Удалить("Назначение");
		ПараметрыПоиска.Вставить("Отменено", Ложь);
		ПараметрыПоиска.Вставить("КодСтроки", Выборка.КодСтроки);
		
		СтрокиЗаказа = ТаблицаТовары.НайтиСтроки(ПараметрыПоиска);
		
		СуммаСтрок = 0;
		Для Каждого Стр Из СтрокиЗаказа Цикл
			СуммаСтрок = СуммаСтрок + Стр.СуммаСНДС;
		КонецЦикла;
		
		Для Сч = 0 По СтрокиЗаказа.Количество()-1 Цикл
			
			Строка = СтрокиЗаказа[сч];
			
			Если ОтменитьКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			КоэффициентСтроки = Строка.СуммаСНДС / ?(СуммаСтрок=0,1,СуммаСтрок);
			
			СуммаДоКорректировки = Строка.СуммаСНДС;
			
			ОтменитьВТекущей = ?(Сч = СтрокиЗаказа.Количество()-1, ОтменитьКоличество, ОтменитьКоличество * КоэффициентСтроки);
			СуммаОтменитьВТекущей = ?(Сч = СтрокиЗаказа.Количество()-1, СуммаОтменить, СуммаОтменить * КоэффициентСтроки);
			ОтменитьКоличество = ОтменитьКоличество - ОтменитьВТекущей;
			СуммаОтменить = СуммаОтменить - СуммаОтменитьВТекущей;
			
			Если ОтменитьВТекущей >= Строка.Количество Тогда
				
				ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
				Строка.ПричинаОтмены = ТекущаяПричинаОтмены;
				
				СуммаКорректировки = СуммаКорректировки - Строка.СуммаСНДС;
				
			ИначеЕсли ОтменитьВТекущей > 0 Тогда
				
				КоэффициентУпаковки = Строка.Количество / Строка.КоличествоУпаковок;
				
				НоваяСтрока = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
				
				НоваяСтрока.ПричинаОтмены = ТекущаяПричинаОтмены;
				
				НоваяСтрока.КодСтроки = 0;
				
				НоваяСтрока.Количество         = ОтменитьВТекущей;
				НоваяСтрока.КоличествоУпаковок = ОтменитьВТекущей / КоэффициентУпаковки;
				НоваяСтрока.СуммаСНДС          = СуммаОтменитьВТекущей;
				
				Строка.Количество         = Строка.Количество - ОтменитьВТекущей;
				Строка.КоличествоУпаковок = Строка.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковок;
				Строка.СуммаСНДС          = Строка.СуммаСНДС - СуммаОтменитьВТекущей;
				
				КэшированныеЗначения = Неопределено;
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументПродажи);
				СтруктураДействий = Новый Структура;
				СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
				СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействий.Вставить("ПересчитатьСумму");
				СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
				СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшированныеЗначения);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
				
				СуммаКорректировки = СуммаКорректировки - (СуммаДоКорректировки - Строка.СуммаСНДС);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Корректируем в плюс
	
	Если СкорректироватьМерныеТовары Тогда
		
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
			
			Если СкладВСтроках Тогда
				ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика, Серия, Назначение, Склад, ");
				ПараметрыПоиска.Склад = ?(СкладВСтроках, Выборка.Склад, СкладЗаказа);
			Иначе
				ПараметрыПоиска = Новый Структура("Номенклатура, Характеристика, Серия, Назначение");
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска,Выборка);
			
			НайденныеСтроки = ОтгруженныеТовары.НайтиСтроки(ПараметрыПоиска);
			Если НайденныеСтроки.Количество() > 0 
				И НайденныеСтроки[0].Количество > 0 Тогда
				ОтгруженнаяСтрока = НайденныеСтроки[0];
				ОтгруженоСверхСтроки = ОтгруженнаяСтрока.Количество;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если Выборка.КОформлениюОстаток < 0 И ОтгруженоСверхСтроки > 0 Тогда
				
				КоличествоПереоформлено = -Выборка.КОформлениюОстаток;
				СуммаПереоформлено = -Выборка.СуммаОстаток;
				
				Если КоличествоПереоформлено >= ОтгруженоСверхСтроки Тогда
					ОтгруженнаяСтрока.Количество = 0;
					КоличествоДобавить = ОтгруженоСверхСтроки;
					СуммаДобавить = ?(КоличествоПереоформлено * СуммаПереоформлено > 0, Окр(КоличествоДобавить / КоличествоПереоформлено * СуммаПереоформлено, 2), 0);
				Иначе
					ОтгруженнаяСтрока.Количество = ОтгруженнаяСтрока.Количество - КоличествоПереоформлено;
					КоличествоДобавить = КоличествоПереоформлено;
					СуммаДобавить = СуммаПереоформлено;
				КонецЕсли;
				
				ПараметрыПоиска.Удалить("Назначение");
				ПараметрыПоиска.Вставить("Отменено", Ложь);
				ПараметрыПоиска.Вставить("КодСтроки", Выборка.КодСтроки);
				
				СтрокиЗаказа = ТаблицаТовары.НайтиСтроки(ПараметрыПоиска);
				
				Если СтрокиЗаказа.Количество() > 0 Тогда
					
					СуммаСтрок = 0;
					Для Каждого Стр Из СтрокиЗаказа Цикл
						СуммаСтрок = СуммаСтрок + Стр.СуммаСНДС;
					КонецЦикла;
					
					Для Сч = 0 По СтрокиЗаказа.Количество()-1 Цикл
						Строка = СтрокиЗаказа[Сч];
						
						КоэффициентСтроки = Строка.СуммаСНДС / СуммаСтрок;
						
						КоэффициентУпаковки = Строка.Количество / Строка.КоличествоУпаковок;
						
						ДобавитьКТекущей = ?(Сч = СтрокиЗаказа.Количество()-1, КоличествоДобавить, КоличествоДобавить * КоэффициентСтроки);
						СуммаДобавитьКТекущей = ?(Сч = СтрокиЗаказа.Количество()-1, СуммаДобавить, СуммаДобавить * КоэффициентСтроки);
						КоличествоДобавить = КоличествоДобавить - ДобавитьКТекущей;
						СуммаДобавить = СуммаДобавить - СуммаДобавитьКТекущей;
						
						СуммаДоКорректировки = Строка.СуммаСНДС;
						КоличествоДоКорректировки = Строка.Количество;
						
						Строка.Количество         = Строка.Количество + ДобавитьКТекущей;
						Строка.СуммаСНДС          = Строка.СуммаСНДС  + СуммаДобавитьКТекущей;
						
						Строка.СуммаНДС           = Строка.СуммаНДС/КоличествоДоКорректировки * Строка.Количество;
						Строка.Сумма              = ?(ДокументПродажи.ЦенаВключаетНДС, Строка.СуммаСНДС, Строка.СуммаСНДС-Строка.СуммаНДС);
						
						Строка.КоличествоУпаковок = Строка.Количество / КоэффициентУпаковки;
						
						СтруктураПересчетаСуммы = Новый Структура;
						СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", ДокументПродажи.ЦенаВключаетНДС);
						
						СтруктураДействий = Новый Структура;
						СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
						СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
						
						// Если при пересчете в упаковки остался остаток добавляем строку
						
						Если Строка.КоличествоУпаковок * КоэффициентУпаковки > Строка.Количество Тогда
							
							СуммаНовойСтроки      = Строка.Сумма/Строка.КоличествоУпаковок ;
							СуммаНДСНовойСтроки   = Строка.СуммаНДС/Строка.КоличествоУпаковок ;
							СуммаСНДСНовойСтроки  = Строка.СуммаСНДС/Строка.КоличествоУпаковок ;
							КоличествоНовойСтроки = Строка.КоличествоУпаковок * КоэффициентУпаковки - Строка.Количество + КоэффициентУпаковки;
							
							Строка.КоличествоУпаковок = Строка.КоличествоУпаковок - 1;
							Строка.Количество = Строка.КоличествоУпаковок * КоэффициентУпаковки;
							
							Строка.СуммаНДС = Строка.СуммаНДС - СуммаНДСНовойСтроки;
							Строка.Сумма = Строка.Сумма - СуммаНовойСтроки;
							Строка.СуммаСНДС = Строка.СуммаСНДС - СуммаСНДСНовойСтроки;
							
						ИначеЕсли Строка.КоличествоУпаковок * КоэффициентУпаковки < Строка.Количество Тогда
							
							КоличествоНовойСтроки = Строка.Количество - Строка.КоличествоУпаковок * КоэффициентУпаковки;
							
							СуммаНовойСтроки      = Строка.Сумма/Строка.Количество * КоличествоНовойСтроки;
							СуммаНДСНовойСтроки   = Строка.СуммаНДС/Строка.Количество * КоличествоНовойСтроки;
							СуммаСНДСНовойСтроки  = Строка.СуммаСНДС/Строка.Количество * КоличествоНовойСтроки;
							
							Строка.Количество = Строка.КоличествоУпаковок * КоэффициентУпаковки;
							Строка.СуммаНДС   = Строка.СуммаНДС - СуммаНДСНовойСтроки;
							Строка.Сумма      = Строка.Сумма - СуммаНовойСтроки;
							Строка.СуммаСНДС  = Строка.СуммаСНДС - СуммаСНДСНовойСтроки;
							
						Иначе
							
							КоличествоНовойСтроки = 0;
							
						КонецЕсли;
						
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, Неопределено);
						
						Если КоличествоНовойСтроки > 0 Тогда
							НовСтр = ТаблицаТовары.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтр,Строка);
							НовСтр.КодСтроки = 0;
							НовСтр.Количество = КоличествоНовойСтроки;
							НовСтр.КоличествоУпаковок = КоличествоНовойСтроки;
							НовСтр.Упаковка = Выборка.БазоваяЕдиницаИзмерения;
							
							НовСтр.Цена = Строка.Цена / КоэффициентУпаковки;
							НовСтр.Сумма = СуммаНовойСтроки;
							НовСтр.СуммаНДС = СуммаНДСНовойСтроки;
							НовСтр.СуммаСНДС = СуммаСНДСНовойСтроки;
							
							СуммаКорректировки = СуммаКорректировки + НовСтр.СуммаСНДС;
						КонецЕсли;
						
						СуммаКорректировки = СуммаКорректировки + (Строка.СуммаСНДС - СуммаДоКорректировки);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата.КоличествоСтрок    = КоличествоОтмененныхСтрок;
	СтруктураВозврата.СуммаКорректировки = ?(СуммаКорректировки < 0, 0, СуммаКорректировки);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет имя табличной части по документу.
//
// Параметры:
//   ИмяТаблицы - Строка - имя документа.
//
// Возвращаемое значение:
//   Строка - Имя табличной части документа.
//
Функция ПолучитьИмяТабличнойЧасти(ИмяТаблицы) Экспорт
	
	Если ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ИмяТЧ = "ЗаменяющиеТовары";
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		ИмяТЧ = "Услуги";
	Иначе
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	Возврат ИмяТЧ;
	
КонецФункции

// Определяет представление табличной части по документу.
//
// Параметры:
//  ИмяТаблицы - Строка - имя документа.
//
// Возвращаемое значение:
//   Строка - Представление табличной части документа.
//
Функция ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы) Экспорт
	
	Если ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ПредставлениеТЧ = НСтр("ru = 'Заменяющие товары'");
	Иначе
		ПредставлениеТЧ = НСтр("ru = 'Товары'");
	КонецЕсли;
	
	Возврат ПредставлениеТЧ;
	
КонецФункции

// Выводит сообщения об ошибках при вводе реализации по заказам.
//
// Параметры:
//  ВыборкаРеквизитыШапки - ВыборкаИзРезультатаЗапроса - данные шапки документа.
//
// Возвращаемое значение:
//   Булево - Истина, если отказ от ввода на основании.
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияРеализации(ВыборкаРеквизитыШапки) Экспорт
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru = 'У выделенных распоряжений отличается поле ""%ПредставлениеПоля%""'");
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПартнер Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Партнер'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Контрагент'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Организация'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСоглашение Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Соглашение'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияДоговор Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Договор'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСделка Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Сделка'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСклад Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Склад'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперация Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Операция'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВалютаВзаиморасчетов Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Валюта взаиморасчетов'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНалогообложениеНДС Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Налогообложение НДС'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияЦенаВключаетНДС Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Цена включает НДС'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВернутьМногооборотнуюТару Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Вернуть многооборотную тару'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияТребуетсяЗалогЗаТару Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Требуется залог за тару'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСрокВозвратаМногооборотнойТары Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Срок возврата многооборотной тары'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПорядокРасчетов Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Порядок расчетов'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНаправлениеДеятельности Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Направление деятельности'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьНесовместимыеСпособыДоставки Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'В одном из выделенных распоряжений указан способ доставки ""Перевозчик (с нашего склада)"", несовместимый со способами доставки других выделенных распоряжений.'"),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияГруппаФинансовогоУчета Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Группа финансового учета'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияБанковскийСчет Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Банковский счет'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;

	Если ВыборкаРеквизитыШапки.ЕстьОтличияКасса Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Касса'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;

	Если ВыборкаРеквизитыШапки.ЕстьОтличияФормаОплаты Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Форма оплаты'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;

	Если ВыборкаРеквизитыШапки.ЕстьОтличияОплатаВВалюте Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru = 'Оплата в иностранной валюте'")),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияЭтоЗаказКакСчет Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Выделенные распоряжения были созданы при разных системных настройках использования заказов.'"),
			,
			,
			,
			Отказ);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Выводит сообщения о том, что есть корректировки на основании документа.
//
// Параметры:
// 	ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// 	Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахОтменаПроведенияЕстьКорректировки(Знач ДокументПродажи, Отказ) Экспорт

	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'На основании документа %1 введена корректировка реализации. Отмена проведения невозможна.'"),
		ДокументПродажи);
	
	СообщитьПользователюОбОшибке(
		ТекстОшибки,
		ДокументПродажи,
		,
		Отказ);
	
КонецПроцедуры

// Выводит сообщения о том, что основание документа не проведено.
//
// Параметры:
// 	ДокументПродажи - ДокументСсылка - Документ-основание корректировки.
// 	Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахПроведенияПоНепроведенномуОснованию(Знач ДокументПродажи, Отказ) Экспорт

	ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Документ-основание %1 не проведен. Проведение корректировки невозможно.'"),
		ДокументПродажи);
	
	СообщитьПользователюОбОшибке(
		ТекстОшибки,
		ДокументПродажи,
		,
		Отказ);
	
КонецПроцедуры

// Возвращает наибольшую из дат аванса в строке тч ЭтапыОплаты
//
// Параметры:
//	ЭтапыГрафикаОплаты - ДанныеФормыКоллекция - этапы оплаты, в которых необходимо рассчитать дату аванса.
//
// Возвращаемое значение:
//	Дата - Максимальная дата аванса, если дат аванса нет - пустая дата.
//
Функция МаксимальнаяДатаАванса(ЭтапыГрафикаОплаты) Экспорт
	
	МаксДатаАванса = '00010101';
	
	Для Каждого ТекЭтап Из ЭтапыГрафикаОплаты Цикл
		
		Если ТекЭтап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки
			Или ТекЭтап.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения Тогда
			
			МаксДатаАванса = Макс(МаксДатаАванса, ТекЭтап.ДатаПлатежа);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат МаксДатаАванса;
	
КонецФункции

// Формирование для элемента формы списка выбора адресов на основании контактной информации адресата.
//
// Параметры:
//  ЭлементАдреса - ПолеФормы - поле, в списке выбора которого необходимо заполнить список адресов.
//  АдресатСсылка - СправочникСсылка.Организации, СправочникСсылка.Партнеры - ссылка на объект ИБ для получения адресов.
//  ОчищатьСписок - Булево - указывает на необходимость очистки списка перед заполнением.
//  Дата - Дата
//
Процедура ЗаполнитьСписокВыбораАдреса(ЭлементАдреса, АдресатСсылка, ОчищатьСписок = Истина, Дата = Неопределено) Экспорт
	
	Если ОчищатьСписок Тогда
		ЭлементАдреса.СписокВыбора.Очистить();
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(АдресатСсылка);
	
	Адреса = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов, 
		Перечисления.ТипыКонтактнойИнформации.Адрес,
		,
		Дата);
	
	Для Каждого Адрес Из Адреса Цикл
		ЭлементАдреса.СписокВыбора.Добавить(Адрес.Представление, Строка(Адрес.Вид) + ": " + Адрес.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняет накладную по ордерам
//
// Параметры:
// 		Объект - ДанныеФормыСтруктура - перезаполняемая накладная.
//
// Возвращаемое значение:
// 		Булево - "Истина", если накладная перезаполнена.
//
Функция ПерезаполнитьНакладнуюПоОрдерам(Объект) Экспорт
	
	ЭтоРеализация =
		Не ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПередачаТоваровХранителю")
		И Не ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения");
	
	МенеджерНакладной = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ТаблицаРаспоряженийНаОтгрузку = Объект.Товары.Выгрузить(,"ЗаказКлиента");
	
	МассивРаспоряженийНаОтгрузку = ТаблицаРаспоряженийНаОтгрузку.ВыгрузитьКолонку("ЗаказКлиента");
	МассивРаспоряженийНаОтгрузку.Добавить(Объект.Ссылка);
	
	СостояниеОтгрузки = ПолучитьСостояниеФактическойОтгрузки(МассивРаспоряженийНаОтгрузку);
	
	Если НЕ СостояниеОтгрузки.ЕстьОтгруженныеТовары Тогда
		Текст = НСтр("ru = 'По данному документу не начата отгрузка!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Новый Структура("ЕстьИзменения, СостояниеОтгрузки", Ложь, СостояниеОтгрузки);
	КонецЕсли;
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
	
	Если ЭтоРеализация Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
		ИменаЗависимыхРеквизитов = "Сумма,СуммаНДС,СуммаСНДС" + ?(ЭтоРеализация, ",СуммаАвтоматическойСкидки,СуммаРучнойСкидки", "");
		ЗависимыеРеквизиты = Новый Структура("БезВозвратнойТары", ИменаЗависимыхРеквизитов);
	
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки",
								Новый Структура("Очищать", Истина));
		СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты);
		СтруктураДействийСИзмененнымиСтроками.Вставить("ОчиститьСуммуВзаиморасчетов");
		СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	КонецЕсли;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВернутьМногооборотнуюТару") Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	КонецЕсли;
	
	Если ЭтоРеализация Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС",
								ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	КонецЕсли;
	
	СтруктураПараметров = ПродажиСервер.СтруктураДокументаДляЗаполненияПоФактическойОтгрузке();
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, Объект);
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, СостояниеОтгрузки);
	СтруктураПараметров.МассивРаспоряженийНаОтгрузку = МассивРаспоряженийНаОтгрузку;
	СтруктураПараметров.ЗаказЯвляетсяРаспоряжением = МассивРаспоряженийНаОтгрузку.Количество()>0;
	
	СтруктураПараметров.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	СтруктураПараметров.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	СтруктураПараметров.Вставить("СкладВТабличнойЧасти", Истина);
	СтруктураПараметров.Вставить("ДополнятьСтроки", Истина);
	СтруктураПараметров.Вставить("ПараметрыУказанияСерий", НоменклатураСервер.ПараметрыУказанияСерий(Объект, МенеджерНакладной));;
	
	Если Объект.Свойство("РеализацияПоЗаказам") Тогда
		СтруктураПараметров.Вставить("ЗаполнятьНесобраннымиТоварами", Не Объект.РеализацияПоЗаказам);
	Иначе
		СтруктураПараметров.Вставить("ЗаполнятьНесобраннымиТоварами", Ложь);
	КонецЕсли;
	
	ЕстьИзменения = ПродажиСервер.ЗаполнитьПоФактическойОтгрузке(Объект, СтруктураПараметров);
	СостояниеОтгрузки.ЕстьНесобранныеТовары = СтруктураПараметров.ЗаполнятьНесобраннымиТоварами И СостояниеОтгрузки.ЕстьНесобранныеТовары;
	
	Возврат Новый Структура("ЕстьИзменения, СостояниеОтгрузки", ЕстьИзменения, СостояниеОтгрузки);
	
КонецФункции

// Функция возвращает состояние фактической отгрузки по документу
//
// Параметры:
// 		ДокументыОтгрузки - Массив - Ссылки на документы-распоряжения на отгрузку.
//
// Возвращаемое значение:
// 		Структура:
// 			* ЕстьОтгруженныеТовары - Булево
// 			* ЕстьНесобранныеТовары - Булево
//
Функция ПолучитьСостояниеФактическойОтгрузки(ДокументыОтгрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеРасход),0)
	|	+ ЕСТЬNULL(СУММА(ТоварыКОтгрузкеОбороты.СобраноПриход),0)  КАК Количество,
	|	ЕСТЬNULL(СУММА(ТоварыКОтгрузкеОбороты.СобираетсяПриход),0) КАК КоличествоСобирается
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты( &МинимальнаяДата, &МаксимальнаяДата,
	|		, ДокументОтгрузки В (&ДокументыОтгрузки)) КАК ТоварыКОтгрузкеОбороты");
	Запрос.УстановитьПараметр("ДокументыОтгрузки", ДокументыОтгрузки);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ТоварыКОтгрузке",
																"ДокументОтгрузки В (&ДокументыОтгрузки)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("МинимальнаяДата",   ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("МаксимальнаяДата",  ГраницыОборотов.МаксимальнаяДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьВыборка = Выборка.Следующий();
	
	СостояниеОтгрузки = Новый Структура(
		"ЕстьОтгруженныеТовары, ЕстьНесобранныеТовары",
		(ЕстьВыборка И Выборка.Количество > 0),
		(ЕстьВыборка И Выборка.КоличествоСобирается > 0));
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СостояниеОтгрузки;
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииЗаполненияПоОтгрузке


// Возвращает типовую структуру для заполнения документа по фактической отгрузке.
//
// Возвращаемое значение:
//   Структура - содержит данные документа для заполнения по фактической отгрузке:
// 		* ОрдернаяСхемаПриОтгрузке - Булево -
// 		* ИмяЗаказаВТЧ - Строка -
// 		* СтруктураДействийСДобавленнымиСтроками - Структура -
// 		* СтруктураДействийСИзмененнымиСтроками - Структура -
// 		* ПараметрыУказанияСерий - Структура -
// 		* ЗаполнятьНеСобраннымиТоварами - Булево -
// 		* ЕстьНесобранныеТовары - Булево -
// 		* ЕстьОтгруженныеТовары - Булево -
// 		* РеализацияСверхЗаказа - Булево -
// 		* ДополнятьСтроки - Булево -
// 		* ЗаказЯвляетсяРаспоряжением - Булево -
// 		* СкладВТабличнойЧасти - Булево -
// 		* Склад - СправочникСсылка.Склады -
// 		* Товары - ТабличнаяЧасть -
// 		* Дата - Дата -
// 		* МассивРаспоряженийНаОтгрузку - Неопределено -
// 		* Ссылка - Неопределено -
// 
Функция СтруктураДокументаДляЗаполненияПоФактическойОтгрузке() Экспорт
	
	СтруктураДокумента = Новый Структура; 
	СтруктураДокумента.Вставить("Ссылка", Неопределено); 
	СтруктураДокумента.Вставить("МассивРаспоряженийНаОтгрузку", Неопределено); 
	СтруктураДокумента.Вставить("Дата", Неопределено); 
	СтруктураДокумента.Вставить("Товары", Неопределено); 
	СтруктураДокумента.Вставить("Склад", Неопределено); 
	СтруктураДокумента.Вставить("СкладВТабличнойЧасти", Ложь); 
	СтруктураДокумента.Вставить("ЗаказЯвляетсяРаспоряжением", Ложь); 
	СтруктураДокумента.Вставить("ДополнятьСтроки", Ложь); 
	СтруктураДокумента.Вставить("РеализацияСверхЗаказа", Ложь); 
	СтруктураДокумента.Вставить("ЕстьОтгруженныеТовары", Ложь); 
	СтруктураДокумента.Вставить("ЕстьНесобранныеТовары", Ложь); 
	СтруктураДокумента.Вставить("ЗаполнятьНеСобраннымиТоварами", Ложь); 
	СтруктураДокумента.Вставить("ПараметрыУказанияСерий", Новый Структура); 
	СтруктураДокумента.Вставить("СтруктураДействийСИзмененнымиСтроками", Новый Структура); 
	СтруктураДокумента.Вставить("СтруктураДействийСДобавленнымиСтроками", Новый Структура); 
	СтруктураДокумента.Вставить("ИмяЗаказаВТЧ", "ЗаказКлиента"); 
	СтруктураДокумента.Вставить("ОрдернаяСхемаПриОтгрузке", Ложь); 

	Возврат СтруктураДокумента;
	
КонецФункции

// Заполняет табличные части документа по фактической отгрузке.
//
// Параметры:
// 		ОбъектДокумента - ДанныеФормыСтруктура - Объект документа для заполнения
// 		СтруктураДокументаОтгрузки - см. СтруктураДокументаДляЗаполненияПоФактическойОтгрузке
//
// Возвращаемое значение:
// 		Булево - Истина, если табличные части перезаполнены.
//
Функция ЗаполнитьПоФактическойОтгрузке(ОбъектДокумента, СтруктураДокументаОтгрузки) Экспорт
	
	Перем СтруктураРезультатаЗапроса;
	
	// Если нет отгруженных или несобранных товаров, то перезаполнять документ не нужно.
	Если Не (СтруктураДокументаОтгрузки.ЕстьОтгруженныеТовары
		Или (СтруктураДокументаОтгрузки.ЗаполнятьНеСобраннымиТоварами И СтруктураДокументаОтгрузки.ЕстьНесобранныеТовары)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураДокументаДляЗаполнения = СтруктураДокументаДляЗаполненияПоФактическойОтгрузке();
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(СтруктураДокументаДляЗаполнения, СтруктураДокументаОтгрузки, Истина);
	
	// Получить данные об отгруженных и зарезервированных товарах.
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкиТоваров = "НомерСтроки, Номенклатура, Характеристика, Упаковка, Серия, Назначение" + 
		?(СтруктураДокументаДляЗаполнения.СкладВТабличнойЧасти, ", Склад", "");
	
	ТаблицаТЧТовары = СтруктураДокументаДляЗаполнения.Товары.Выгрузить(, КолонкиТоваров);
	
	Если Не СтруктураДокументаДляЗаполнения.СкладВТабличнойЧасти Тогда
		ТаблицаТЧТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаТЧТовары.ЗаполнитьЗначения(СтруктураДокументаДляЗаполнения.Склад, "Склад");
	КонецЕсли;

	ДатаРасчета = ?(ЗначениеЗаполнено(СтруктураДокументаДляЗаполнения.Дата), СтруктураДокументаДляЗаполнения.Дата, ТекущаяДатаСеанса());
	
	СтруктураДокументаДляЗаполнения.ОрдернаяСхемаПриОтгрузке = СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад(, ДатаРасчета, СтруктураДокументаДляЗаполнения.Склад);
	
	Запрос = Новый Запрос(ТекстЗапросаПоФактическойОтгрузке(СтруктураДокументаДляЗаполнения, СтруктураРезультатаЗапроса));
	
	Если СтруктураДокументаДляЗаполнения.МассивРаспоряженийНаОтгрузку <> Неопределено Тогда
		Запрос.УстановитьПараметр("ДокументыОтгрузки", СтруктураДокументаДляЗаполнения.МассивРаспоряженийНаОтгрузку);
	Иначе
		Запрос.УстановитьПараметр("ДокументыОтгрузки", СтруктураДокументаДляЗаполнения.Ссылка);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата",                          ДатаРасчета);
	Запрос.УстановитьПараметр("Склад",                         СтруктураДокументаДляЗаполнения.Склад);
	Запрос.УстановитьПараметр("ЗаполнятьНеСобраннымиТоварами", СтруктураДокументаДляЗаполнения.ЗаполнятьНеСобраннымиТоварами);
	Запрос.УстановитьПараметр("Товары",                        ТаблицаТЧТовары);
	Запрос.УстановитьПараметр("Накладная",                     СтруктураДокументаДляЗаполнения.Ссылка);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ТоварыКОтгрузке",
																"ДокументОтгрузки В (&ДокументыОтгрузки)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодТоварыКОтгрузке",   ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодТоварыКОтгрузке",  ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("РаспоряженияНаОтгрузку",
																"Распоряжение В (&ДокументыОтгрузки)",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентов",   ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентов",  ГраницыОборотов.МаксимальнаяДата);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("РаспоряженияНаОтгрузку",
																"Распоряжение В (&ДокументыОтгрузки)И КодСтроки<>0",
																Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериодЗаказыКлиентовОстИОб",   ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериодЗаказыКлиентовОстИОб",   ГраницыОборотов.МаксимальнаяДата);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатЗапроса[СтруктураРезультатаЗапроса.ТоварыКОтгрузке].Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	ОтгруженныеТовары = Новый ТаблицаЗначений;
	ОтгруженныеТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОтгруженныеТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОтгруженныеТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ОтгруженныеТовары.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ОтгруженныеТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	Если СтруктураДокументаДляЗаполнения.ЗаказЯвляетсяРаспоряжением Тогда
		МассивТиповЗаказов = Новый Массив;
		МассивТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
		МассивТиповЗаказов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
		
		
		ОтгруженныеТовары.Колонки.Добавить(СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ, Новый ОписаниеТипов(МассивТиповЗаказов));
		ОтгруженныеТовары.Колонки.Добавить("КодСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	КонецЕсли;
	
	ТоварыКОтгрузке = РезультатЗапроса[СтруктураРезультатаЗапроса.ТоварыКОтгрузке].Выбрать();
	
	Пока ТоварыКОтгрузке.Следующий() Цикл
		СтрокаТбл = ОтгруженныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТбл, ТоварыКОтгрузке);
		
		СтрокаТбл.Количество = ТоварыКОтгрузке.КоличествоОтгрузить;
		Если СтруктураДокументаДляЗаполнения.ЗаказЯвляетсяРаспоряжением Тогда
			СтрокаТбл[СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ] = ТоварыКОтгрузке.ДокументОтгрузки;
		КонецЕсли;
	КонецЦикла;
	
	ПоляПоиска = "Номенклатура, Характеристика, Серия" + 
		?(СтруктураДокументаДляЗаполнения.СкладВТабличнойЧасти, ", Склад", "") + 
		?(СтруктураДокументаДляЗаполнения.ЗаказЯвляетсяРаспоряжением, ", КодСтроки," + СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ, "");
	СтруктураПоискаПоТоварыКОформлению = Новый Структура(ПоляПоиска);
	
	ТоварыКОформлению = РезультатЗапроса[СтруктураРезультатаЗапроса.ТоварыКОформлению].Выгрузить();
	Для каждого СтрокаТбл Из ТоварыКОформлению Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоТоварыКОформлению, СтрокаТбл);
		СтруктураПоискаПоТоварыКОформлению.КодСтроки = 0;
		
		МассивСтрок = ОтгруженныеТовары.НайтиСтроки(СтруктураПоискаПоТоварыКОформлению);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаОтгружено = МассивСтрок.Получить(0);
			
			Разница = 0;
			Если СтрокаОтгружено.Количество >= СтрокаТбл.Количество Тогда
				Разница = СтрокаОтгружено.Количество - СтрокаТбл.Количество;
			КонецЕсли;
			
			Если Разница > 0 Тогда
				НовСтрока = ОтгруженныеТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаОтгружено);
				НовСтрока.Количество = Разница;
				
				СтрокаОтгружено.Количество = СтрокаТбл.Количество;
			КонецЕсли;
			
			СтрокаОтгружено.КодСтроки = СтрокаТбл.КодСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Запомнить данные по товарам до изменения.
	ТчТовары = СтруктураДокументаДляЗаполнения.Товары;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Количество", 0);
	СтруктураЗаполнения.Вставить("КоличествоУпаковок", 0);
	СтруктураЗаполнения.Вставить("Сумма", 0);
	СтруктураЗаполнения.Вставить("СуммаНДС", 0);
	СтруктураЗаполнения.Вставить("СуммаСНДС", 0);
	СтруктураЗаполнения.Вставить("СуммаВзаиморасчетов", 0);
	
	СоответствиеКоличествоВСтрокахДоИзменения = Новый Соответствие;
	СоответствиеКоэффициентовУпаковок         = Новый Соответствие;
	
	Товары = РезультатЗапроса[СтруктураРезультатаЗапроса.Товары].Выбрать();
	Пока Товары.Следующий() Цикл
		
		СтрокаТчТовары = ТчТовары[Товары.НомерСтроки - 1];
		
		СоответствиеКоэффициентовУпаковок.Вставить(СтрокаТчТовары.Упаковка, Товары.КоэффициентУпаковки);
		СоответствиеКоличествоВСтрокахДоИзменения.Вставить(СтрокаТчТовары, СтрокаТчТовары.Количество);
		
		ЗаполнитьЗначенияСвойств(СтрокаТчТовары, СтруктураЗаполнения);
		
	КонецЦикла;
	
	СоответствиеКоэффициентовУпаковок.Вставить(Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка(), 1);
	
	// Перенести данные по фактически отгруженным товарам в ТЧ "Товары".
	
	СтруктураПоискаПоТЧТовары = Новый Структура(ПоляПоиска);
	
	ДобавленныеСтроки = Новый Соответствие;
	ИзмененныеСтроки  = Новый Соответствие;
	ТоварыЗаказов     = РезультатЗапроса[СтруктураРезультатаЗапроса.ТоварыЗаказов].Выгрузить();
	РаспоряжениеЗаказ = СтруктураДокументаДляЗаполнения.ЗаказЯвляетсяРаспоряжением;
	
	Если РаспоряжениеЗаказ И СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ = "ЗаказКлиента" Тогда
		ДополнительныеТаблицыЗаказов = ДополнительныеТаблицыЗаказов(СтруктураДокументаДляЗаполнения.МассивРаспоряженийНаОтгрузку, ОбъектДокумента.Валюта);
	КонецЕсли;
	
	// Если отгрузили больше, чем указано в строчке по товару в накладной - это количество пойдет новой строкой,
	//	если допустимо дополнять строки.
	// Если накладная по Заказу и допустимо дополнять строки, то все добавленные строки будут сверх заказа.
	Для Каждого СтрокаТбл Из ОтгруженныеТовары Цикл
		
		ПоследняяОбработаннаяСтрока = Неопределено;
		
		КоличествоОтгрузить = СтрокаТбл.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоТЧТовары, СтрокаТбл);
		МассивСтрокТчТовары = ТчТовары.НайтиСтроки(СтруктураПоискаПоТЧТовары);
		
		Для Каждого СтрокаТчТовары Из МассивСтрокТчТовары Цикл
			
			ПоследняяОбработаннаяСтрока = ?(ДобавленныеСтроки.Получить(СтрокаТчТовары) <> Неопределено, ПоследняяОбработаннаяСтрока, СтрокаТчТовары);
			
			КоличествоДоИзменения = ?(СоответствиеКоличествоВСтрокахДоИзменения[СтрокаТчТовары] = Неопределено, 0, СоответствиеКоличествоВСтрокахДоИзменения[СтрокаТчТовары]);
			Количество = КоличествоДоИзменения - СтрокаТчТовары.Количество;
			
			Если Количество < 0 Тогда
				Прервать
			КонецЕсли;
			
			КоличествоОтгрузить = КоличествоОтгрузить - Количество;
			
			Если КоличествоОтгрузить < 0 Тогда
				Количество = Количество + КоличествоОтгрузить;
				КоличествоОтгрузить = 0;
			КонецЕсли;
			
			СтрокаТчТовары.Количество = СтрокаТчТовары.Количество + Количество;
			
			ИзмененныеСтроки.Вставить(СтрокаТчТовары);
			
		КонецЦикла;
		
		Если КоличествоОтгрузить > 0 Тогда
			
			Если ПоследняяОбработаннаяСтрока <> Неопределено Тогда
				
				ПоследняяОбработаннаяСтрока.Количество = ПоследняяОбработаннаяСтрока.Количество + КоличествоОтгрузить;
				КоличествоОтгрузить = 0;
				ИзмененныеСтроки.Вставить(ПоследняяОбработаннаяСтрока);
				
				ЕстьИзменения = Истина;
				
			ИначеЕсли СтруктураДокументаДляЗаполнения.ДополнятьСтроки Тогда
				
				Если РаспоряжениеЗаказ И СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ = "ЗаказКлиента" Тогда
					НоваяСтрока = ЗаполнитьСтрокуПоЗаказуКлиента(СтруктураПоискаПоТЧТовары, 
						КоличествоОтгрузить,
						ОбъектДокумента, 
						ТоварыЗаказов,
						ДополнительныеТаблицыЗаказов);
				Иначе
					НоваяСтрока = ТчТовары.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоискаПоТЧТовары);
					НоваяСтрока.Количество = КоличествоОтгрузить;
					НоваяСтрока.КоличествоУпаковок = КоличествоОтгрузить;
				КонецЕсли;
				
				ДобавленныеСтроки.Вставить(НоваяСтрока);
				
				КоличествоОтгрузить = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Выполнить доп. обработку измененных или добавленных строк.
	
	// ... удалить строки ТЧ "Товары" у которых количество равно 0.
	МассивСтрокТчТовары = ТчТовары.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТбл Из МассивСтрокТчТовары Цикл
		ТчТовары.Удалить(СтрокаТбл);
	КонецЦикла;
	
	// ... пересчитать количество упаковок в строках ТЧ "Товары".
	Для Каждого Строка Из ИзмененныеСтроки Цикл
		СтрокаТчТовары = Строка.Ключ;
		СтрокаТчТовары.КоличествоУпаковок = СтрокаТЧТовары.Количество / СоответствиеКоэффициентовУпаковок[СтрокаТчТовары.Упаковка];
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТчТовары, СтруктураДокументаДляЗаполнения.СтруктураДействийСИзмененнымиСтроками, Неопределено);
	КонецЦикла;
	
	// ... проверить характеристику номенклатуры по владельцу в строках ТЧ "Товары".
	Для Каждого Строка Из ДобавленныеСтроки Цикл
		СтрокаТчТовары = Строка.Ключ;
		СтруктураДокументаДляЗаполнения.СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТчТовары.Характеристика);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДокументаДляЗаполнения.СтруктураДействийСДобавленнымиСтроками, Неопределено);
	КонецЦикла;
	
	// ... перезаполнить ШтрихкодыУпаковок
	Если СтруктураРезультатаЗапроса.Свойство("ШтрихкодыУпаковок")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектДокумента,"ШтрихкодыУпаковок") Тогда
	
		ШтрихкодыУпаковок = РезультатЗапроса[СтруктураРезультатаЗапроса.ШтрихкодыУпаковок].Выгрузить();
		Если ШтрихкодыУпаковок.Количество() > 0 Тогда

			ОбъектДокумента.ШтрихкодыУпаковок.Загрузить(ШтрихкодыУпаковок);

		КонецЕсли; 
		
	КонецЕсли;
	
	
	// ... заполнить статусы указания серий в документе.
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДокумента, СтруктураДокументаДляЗаполнения.ПараметрыУказанияСерий);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЕстьИзменения = (ИзмененныеСтроки.Количество() > 0) Или (ДобавленныеСтроки.Количество() > 0) ИЛИ (ТчТовары.Количество() = 0);
	
	Возврат ЕстьИзменения;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыПроверкиКорректностиЗаполненияДокументов

// Возвращается струтктура параметров, которая используется для формирования массива проверок см. ПроверитьКорректностьЗаполненияДокументаПродажи.
//
// Параметры:
//  ДокументПродажи  - см. ПроверитьКорректностьЗаполненияДокументаПродажи.ДокументПродажи
//  ИмяТаблицы - Строка -
//  ИмяТЧ - Строка
//  ПредставлениеТЧ - Строка
//
// Возвращаемое значение:
//  Структура из КлючИЗначение -
//
Функция ПараметрыПроверкиКорректностиЗаполненияДокументаПродажи(ДокументПродажи, ИмяТаблицы, ИмяТЧ, ПредставлениеТЧ) Экспорт
	
	ПараметрыПроверкиКорректностиЗаполнения = Новый Структура;
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ДокументПродажи", ДокументПродажи);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ТипДокумента", ТипЗнч(ДокументПродажи.Ссылка));
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИмяТаблицы", ИмяТаблицы);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИмяТЧ", ИмяТЧ);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ПредставлениеТЧ", ПредставлениеТЧ);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("УчитыватьСкидкиНаценки", Ложь);	
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ПроверятьСкидкиРассчитаны", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьРучныеСкидки", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьАвтоматическиеСкидки", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьСоглашенияСКлиентами", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьНоменклатуруПартнеров", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьПроверкиПоЦенам", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьОграниченияПоПользователям", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьОграниченияПоСоглашениям", Ложь);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьЦеновыеГруппы", Ложь);
	
	Возврат ПараметрыПроверкиКорректностиЗаполнения;
КонецФункции

// Проверяет корректность заполнения документа продажи в соответствии с массивом проверок
// путем выполнения пакета запросов. Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения".
//
// Параметры:
//  ДокументПродажи  - ДокументОбъект, ОбработкаОбъект.ПомощникПродаж, СправочникОбъект.СоглашенияСКлиентами - 
// 										Объект, для которого необходимо осуществить проверки.
//  Отказ - Булево - Флаг отказа от проведения документа.
//
Процедура ПроверитьКорректностьЗаполненияДокументаПродажи(Знач ДокументПродажи, Отказ) Экспорт
	
	// Если документ уже заполнен некорректно - не будем выполнять запросы
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДокумента = Новый Структура("Дата, Организация, ЭтоЗаказКакСчет");
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ДокументПродажи);
		
	// Проверим доступность ролей
	ОтклонениеОтУсловийПродаж = ПраваПользователяПовтИсп.ОтклонениеОтУсловийПродаж();
	РеализацияСверхЗаказа     = ПраваПользователяПовтИсп.РеализацияСверхЗаказа();
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенПродажи = Константы.ВидМаксимальноДопустимыхЦенПродажи.Получить();
	ВидМинимальноДопустимыхЦенПродажи  = Константы.ВидМинимальноДопустимыхЦенПродажи.Получить();
	ПроверятьДиапазонЦен               = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенПродажи) Или ЗначениеЗаполнено(ВидМинимальноДопустимыхЦенПродажи);
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	МассивПроверок    = Новый Массив();
	ТипДокумента      = ТипЗнч(ДокументПродажи);
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	Если ТипДокумента = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		ВариантОформленияДокументовПомощникаПродаж = ДокументПродажи.ВариантОформленияДокументов;
		ВозможныеВарианты = Перечисления.ВариантыОформленияДокументовПродажи;
		
		Если ВариантОформленияДокументовПомощникаПродаж = ВозможныеВарианты.ЗаказКлиента
			ИЛИ ВариантОформленияДокументовПомощникаПродаж = ВозможныеВарианты.ЗаказКлиентаПередачаТоваровХранителю
			ИЛИ ВариантОформленияДокументовПомощникаПродаж = ВозможныеВарианты.ЗаказКлиентаРеализацияТоваровУслуг Тогда
			ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Документы.ЗаказКлиента.ПустаяСсылка());
		ИначеЕсли ВариантОформленияДокументовПомощникаПродаж = ВозможныеВарианты.ПередачаТоваровХранителю Тогда
			ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Документы.ПередачаТоваровХранителю.ПустаяСсылка());
		ИначеЕсли ВариантОформленияДокументовПомощникаПродаж = ВозможныеВарианты.РеализацияТоваровУслуг Тогда
			ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
		КонецЕсли; 
		
	КонецЕсли; 
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	СогласованВ1СДокументооборот = Ложь;
	
	// ИнтеграцияС1СДокументооборотом
	// Проверим возможность и состояние согласования через 1С:Документооборот
	СогласованиеЧерез1СДокументооборот =
		(Константы.ИспользоватьИнтеграциюС1СДокументооборот.Получить()
			Или Константы.ИспользоватьИнтеграциюС1СДокументооборот3.Получить())
		И Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить();
	Если СогласованиеЧерез1СДокументооборот И
			(ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента") Или
				ТипДокумента = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Или
				ТипДокумента = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Или
				ТипДокумента = Тип("СправочникОбъект.СоглашенияСКлиентами")) Тогда
		СогласованВ1СДокументооборот = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СогласованВ1СДокументооборот(
			ДокументПродажи.Ссылка);
	КонецЕсли;
	// Конец ИнтеграцияС1СДокументооборотом
	
	ВсеСтрокиОтменены = Ложь;
	ОперацииПередачи = ОперацииПередачиТоваров();
	ОперацииВозвратаПереданныхТоваров = ОперацииВозвратаПереданныхТоваров();
	
	Если ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ДокументПродажи, "Товары", "Отменено");
		
		НужноСогласовать                            = Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			НужноСогласоватьРучныеСкидкиПоПользователям = Ложь;
			ИспользоватьСкидки                          = Ложь;
		Иначе
			НужноСогласоватьРучныеСкидкиПоПользователям = Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
			ИспользоватьСкидки                          = Истина;
		КонецЕсли;
		

	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПередачаТоваровХранителю") Тогда
		
		НужноСогласовать                            = Не ОтклонениеОтУсловийПродаж;
		НужноСогласоватьРучныеСкидкиПоПользователям = Ложь;
		ИспользоватьСкидки                          = Ложь;
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ВыкупТоваровХранителем") Тогда
		
		НужноСогласовать                            = Не ОтклонениеОтУсловийПродаж;
		НужноСогласоватьРучныеСкидкиПоПользователям = Ложь;
		ИспользоватьСкидки                          = Ложь;
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ОтчетОСписанииТоваровУХранителя") Тогда
		
		НужноСогласовать                            = Не ОтклонениеОтУсловийПродаж;
		НужноСогласоватьРучныеСкидкиПоПользователям = Ложь;
		ИспользоватьСкидки                          = Ложь;
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ОприходованиеИзлишковТоваровУХранителя") Тогда
		
		НужноСогласовать                            = Не ОтклонениеОтУсловийПродаж;
		НужноСогласоватьРучныеСкидкиПоПользователям = Ложь;
		ИспользоватьСкидки                          = Ложь;
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ПоступлениеТоваровОтХранителя") Тогда
		
		НужноСогласовать                            = Не ОтклонениеОтУсловийПродаж;
		НужноСогласоватьРучныеСкидкиПоПользователям = Ложь;
		ИспользоватьСкидки                          = Ложь;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ДокументПродажи, "ЗаменяющиеТовары", "Отменено");
		
		НужноСогласовать                            = Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		НужноСогласоватьРучныеСкидкиПоПользователям = Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		ИспользоватьСкидки                          = Истина;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.АктОРасхожденияхПослеОтгрузки")
		Или ТипДокумента = Тип("ДокументОбъект.АктОРасхожденияхПослеПриемки") Тогда
		
		НужноСогласовать                            = Ложь;
		НужноСогласоватьРучныеСкидкиПоПользователям = Ложь;
		ИспользоватьСкидки                          = Ложь;
		
	ИначеЕсли ТипДокумента <> Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю")
	        И ТипДокумента <> Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
	        И ТипДокумента <> Тип("ДокументОбъект.ЧекККМ")
			И ТипДокумента <> Тип("ДокументОбъект.ЧекККМКоррекции")
	        И ТипДокумента <> Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		НужноСогласовать                            = Не (ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		НужноСогласоватьРучныеСкидкиПоПользователям = Не (ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот);
		ИспользоватьСкидки                          = Истина;
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ЧекККМ") Тогда
		
		НужноСогласовать                            = Ложь;
		НужноСогласоватьРучныеСкидкиПоПользователям = Не ОтклонениеОтУсловийПродаж;
		ИспользоватьСкидки                          = Истина;
		
	Иначе
		
		НужноСогласовать                            = Не ОтклонениеОтУсловийПродаж;
		НужноСогласоватьРучныеСкидкиПоПользователям = Не ОтклонениеОтУсловийПродаж;
		ИспользоватьСкидки                          = Истина;
		
	КонецЕсли;
	
	ПроверятьСкидкиРассчитаны = Ложь;
	ВозвратМногооборотнойТары = Ложь;
	ТребуетсяЗалогЗаТару = Ложь;
	СуммаВзаиморасчетовРеализации = 0;
	СуммаЗалогаПоРеализации = 0;
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьАвтоматическиеСкидки             = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ПроверятьСкидкиНаценки                       = ИспользоватьАвтоматическиеСкидки Или ИспользоватьРучныеСкидки;
	ИспользоватьРаздельныйУчетПоНалогообложению  =
		НастройкиНалоговУчетныхПолитикПовтИсп.РаздельныйУчетТоваровПоНалогообложениюНДС(РеквизитыДокумента.Организация, РеквизитыДокумента.Дата);
	ИспользоватьЦеновыеГруппы                    = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьОграниченияПоПользователям       = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                               И НужноСогласоватьРучныеСкидкиПоПользователям
	                                               И ИспользоватьСкидки;
	ИспользоватьОграниченияПоСоглашениям         = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям")
	                                               И НужноСогласовать
	                                               И ИспользоватьСкидки;
	ОграничиватьРучныеСкидки                     = ИспользоватьРучныеСкидки И (ИспользоватьОграниченияПоПользователям ИЛИ ИспользоватьОграниченияПоСоглашениям);
	
	// Проверим, нужно ли запрещать закрытие заказов без полной отгрузки/оплаты
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ?(РеквизитыДокумента.ЭтоЗаказКакСчет = Неопределено,
					ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"),
					Не РеквизитыДокумента.ЭтоЗаказКакСчет);
	
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	ИспользоватьНоменклатуруПартнеров   = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПартнеров");
	
	// ПОМОЩНИК ПРОДАЖ
	Если ТипДокумента = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если НЕ (ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю
			ИЛИ ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ПередачаТоваровХранителю) Тогда
				
				МассивПроверок.Добавить("КорректностьВыбораНоменклатурыПоНалогообложениюНДС");
				МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
				
		КонецЕсли;
		
		// ПОМОЩНИК ПРОДАЖ - ЗАКАЗ КЛИЕНТА
		
		Если ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
			Или ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю
			Или ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
			
			Если ИспользоватьРасширенныеВозможностиЗаказаКлиента
				ИЛИ ДокументПродажи.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
				МассивПроверок.Добавить("КорректностьЗаполненияСклада");
				МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
			КонецЕсли;
			
			МассивПроверок.Добавить("КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары");
			
			Если НужноСогласовать
				И (ДокументПродажи.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован
					ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента) Тогда
				
				Если НЕ ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаПередачаТоваровХранителю Тогда
					МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
					МассивПроверок.Добавить("КорректностьСуммыНДС");
				КонецЕсли;
				
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				
				Если ИспользоватьСоглашенияСКлиентами Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
					МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				КонецЕсли;
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
			
				// Проверка корректности этапов оплаты осуществляется только для
				// заказов, в которых не все строки отменены и  в которых указан график оплаты.
				
				Если ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено
					И ДокументПродажи.СуммаДокумента <> 0 Тогда
					
					МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
					
				КонецЕсли;
				
				Если ИспользоватьАвтоматическиеСкидки
					И Не ДокументПродажи.СкидкиРассчитаны
					И ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено Тогда
					
					ПроверятьСкидкиРассчитаны = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		// ПОМОЩНИК ПРОДАЖ - РЕАЛИЗАЦИЯ ТОВАРОВ УСЛУГ
			
		ИначеЕсли ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Тогда
			
			Если ПроверятьСкидкиРассчитаны И
				ИспользоватьАвтоматическиеСкидки И
				Не ДокументПродажи.СкидкиРассчитаны И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
			Если НужноСогласовать Тогда
				
				МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
				МассивПроверок.Добавить("КорректностьСуммыНДС");
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				
				Если ИспользоватьСоглашенияСКлиентами Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
					МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				КонецЕсли;
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
				
				Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
					ИЛИ ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
					ИЛИ ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности
					ИЛИ Не ЗначениеЗаполнено(ДокументПродажи.ХозяйственнаяОперация) Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				КонецЕсли;
				
			КонецЕсли;
			
			МассивПроверок.Добавить("КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары");
			
		// ПОМОЩНИК ПРОДАЖ - ПЕРЕДАЧА ТОВАРОВ ХРАНИТЕЛЮ
			
		ИначеЕсли ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ПередачаТоваровХранителю Тогда
			
			Если НужноСогласовать Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				
				Если ИспользоватьСоглашенияСКлиентами Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
					МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				КонецЕсли;
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
				
				МассивПроверок.Добавить("НаличиеГИСМ");
				МассивПроверок.Добавить("НаличиеАлкогольнойПродукции");
				
			КонецЕсли;
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
		Если ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеУслугРабот");
		КонецЕсли;
		
	// СОГЛАШЕНИЕ С КЛИЕНТОМ
	
	ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВозвращатьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если Не ДокументПродажи.Типовое И НужноСогласовать И
			ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияТипового");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального");
			МассивПроверок.Добавить("КорректностьЭтаповОплатыСоглашения");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповОплатыСоглашения");
			
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ДублиТоваров");
		
		Если ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеУслугРабот");
		КонецЕсли;
		
		Если НужноСогласовать И ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
		
			Если ЗначениеЗаполнено(ДокументПродажи.СегментНоменклатуры) Тогда
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Или Не ДокументПродажи.Типовое Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			Если Не ДокументПродажи.Типовое Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			КонецЕсли;
			
		КонецЕсли;
		
		ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаЦеновыеГруппы");
			МассивПроверок.Добавить("ДублиЦеновыхГрупп");
			
			Если Не ДокументПродажи.Типовое И НужноСогласовать И
			ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
				МассивПроверок.Добавить("СоответствиеЦеновыхГруппУсловиямПродаж");
			КонецЕсли;
		
		КонецЕсли;
		
	// ЗАКАЗ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ИспользоватьНоменклатуруПартнеров Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияНоменклатурыПартнера");
		КонецЕсли;
		
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВЗаказеКлиента");
		Если НЕ ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
			Если ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено Тогда
				МассивПроверок.Добавить("КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары");
			КонецЕсли;
		КонецЕсли;
		
		Если Не ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
			И Не ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				Тогда
			МассивПроверок.Добавить("КонтрольЗаполненияЦенСУчетомОтмененных");
			ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
			ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
			
			МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
			МассивПроверок.Добавить("КорректностьВыбораНоменклатурыПоНалогообложениюНДС");
		КонецЕсли;
		
		Если НужноСогласовать 
			И (ДокументПродажи.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован 
			ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента) Тогда
			
			Если НЕ ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
				И Не ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
				МассивПроверок.Добавить("КорректностьСуммыНДС");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			// Проверка корректности этапов оплаты осуществляется только для
			// заказов, в которых не все строки отменены и  в которых указан график оплаты.
			
			Если ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено
				И ДокументПродажи.СуммаДокумента <> 0 Тогда
				
				Если ДокументПродажи.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИспользоватьАвтоматическиеСкидки
				И Не ДокументПродажи.СкидкиРассчитаны
				И ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено Тогда
				
				ПроверятьСкидкиРассчитаны = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено
			И (ДокументПродажи.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован
				ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента) Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
			МассивПроверок.Добавить("НаличиеУслугТары");
		ИначеЕсли ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеУслугРабот");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
			МассивПроверок.Добавить("НаличиеГИСМ");
			МассивПроверок.Добавить("НаличиеАлкогольнойПродукции");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
			МассивПроверок.Добавить("НаправлениеДеятельностиПоУчетуДоховИРасходов");
			МассивПроверок.Добавить("ИспользованиеЗаказаКлиентуПоВариантуОбособления");
		КонецЕсли;
		
	
	// ПЕРЕДАЧА ТОВАРОВ ХРАНИТЕЛЮ
	
	ИначеЕсли ИмяТаблицы = "Документ.ПередачаТоваровХранителю" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		
		МассивПроверок.Добавить("НаличиеУслугРабот");
		
		Если Не ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеГИСМ");
			МассивПроверок.Добавить("НаличиеАлкогольнойПродукции");
		КонецЕсли;
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если НужноСогласовать
			И (РеализацияСверхЗаказа
				Или Не ДокументПродажи.ПередачаПоЗаказам) Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				Если Не ДокументПродажи.ПередачаПоЗаказам Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				КонецЕсли;
				
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
	
	// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ
	
	ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если Не КомиссионнаяТорговляСервер.РеализацияЧерезКомиссионера(ДокументПродажи.ХозяйственнаяОперация) Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияСклада");
			МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
			МассивПроверок.Добавить("КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары");
		КонецЕсли;
		
		МассивПроверок.Добавить("КорректностьВыбораНоменклатурыПоНалогообложениюНДС");
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		СуммаВзаиморасчетовРеализации = ДокументПродажи.ДополнительныеСвойства.СуммаВВалютеВзаиморасчетов;
		СуммаЗалогаПоРеализации = ДокументПродажи.ДополнительныеСвойства.СуммаЗалогаВВалютеВзаиморасчетов;
		
		Если ПроверятьСкидкиРассчитаны И
			ИспользоватьАвтоматическиеСкидки И
			Не ДокументПродажи.СкидкиРассчитаны И
			ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			ПроверятьСкидкиРассчитаны = Истина;
		КонецЕсли;
		
		Если (Не ДокументПродажи.РеализацияПоЗаказам ИЛИ РеализацияСверхЗаказа) И НужноСогласовать Тогда
			
			Если Не КомиссионнаяТорговляСервер.ПередачаНаКомиссию(ДокументПродажи.ХозяйственнаяОперация) Тогда
				МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
			КонецЕсли;
			МассивПроверок.Добавить("КорректностьСуммыНДС");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				Если НЕ ДокументПродажи.РеализацияПоЗаказам Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
					МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				КонецЕсли;
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НужноСогласовать И ИспользоватьСоглашенияСКлиентами
			И (Не ДокументПродажи.РеализацияПоЗаказам Или ДокументПродажи.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)  Тогда
			
			Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
				ИЛИ ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
				ИЛИ ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности
				ИЛИ Не ЗначениеЗаполнено(ДокументПродажи.ХозяйственнаяОперация) Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
				
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслугРабот");
		КонецЕсли;
		
	// ЗАЯВКА НА ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		НужнаЗаменаТоваров = ДокументПродажи.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВЗаказеКлиента");
		Если НужнаЗаменаТоваров Тогда
			МассивПроверок.Добавить("КорректностьВыбораНоменклатурыПоНалогообложениюНДС");
			МассивПроверок.Добавить("КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары");
		КонецЕсли;
		
		Если ОперацииВозвратаПереданныхТоваров.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено
			И НужнаЗаменаТоваров Тогда
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		КонецЕсли;
		
		Если НужнаЗаменаТоваров Тогда
			МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		КонецЕсли;
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		Если НужноСогласовать 
			И (ДокументПродажи.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована 
				ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента)Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			Если НужнаЗаменаТоваров Тогда
				МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
				МассивПроверок.Добавить("КорректностьСуммыНДС");
			КонецЕсли;
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				Если НужнаЗаменаТоваров Тогда
					МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
					МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				КонецЕсли;
			КонецЕсли;
			Если НужнаЗаменаТоваров И ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			// Проверка корректности этапов оплаты осуществляется только для
			// заявок, в которых не все строки отменены и  в которых указан график оплаты.
			
			Если ОперацииВозвратаПереданныхТоваров.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено
				И ДокументПродажи.ЗаменяющиеТовары.Количество() > 0
				И ДокументПродажи.СуммаДокумента <> 0
				И ДокументПродажи.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
				И НужнаЗаменаТоваров Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				
			КонецЕсли;
			
			Если ИспользоватьАвтоматическиеСкидки
				И Не ДокументПродажи.СкидкиРассчитаны
				И ОперацииВозвратаПереданныхТоваров.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено
				И ДокументПродажи.ЗаменяющиеТовары.Количество() > 0 Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ОперацииВозвратаПереданныхТоваров.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено
			И (ДокументПродажи.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована 
				ИЛИ НЕ ИспользоватьРасширенныеВозможностиЗаказаКлиента)
			И НужнаЗаменаТоваров Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
				
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
			И НужнаЗаменаТоваров Тогда
			Если МассивПроверок.Найти("ВременнаяТаблицаТовары") = Неопределено Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
				МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
				МассивПроверок.Добавить("ВременнаяТаблицаТовары");
				
			КонецЕсли;
			МассивПроверок.Добавить("НаличиеУслугРабот");
		КонецЕсли;
		
		Если ОперацииВозвратаПереданныхТоваров.Найти(ДокументПродажи.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеУслугРабот");
			МассивПроверок.Добавить("НаличиеГИСМ");
			МассивПроверок.Добавить("НаличиеАлкогольнойПродукции");
		КонецЕсли;
	
	// ЗАДАНИЕ ТОРГОВОМУ ПРЕДСТАВИТЕЛЮ
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ТребуетсяЗалогЗаТару;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		Если Не ОтклонениеОтУсловийПродаж И ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьВыбораНоменклатурыПоНалогообложениюНДС");
			
		Если ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеУслугРабот");
		КонецЕсли;
			
	// АКТ ВЫПОЛНЕННЫХ РАБОТ
	
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ПроверятьСкидкиРассчитаны И
			ИспользоватьАвтоматическиеСкидки И
			Не ДокументПродажи.СкидкиРассчитаны Тогда
			ПроверятьСкидкиРассчитаны = Истина;
		КонецЕсли;
		
		МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		МассивПроверок.Добавить("КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары");
		
		Если Не ДокументПродажи.АктПоЗаказам И НужноСогласовать Тогда
			
			МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
			МассивПроверок.Добавить("КорректностьСуммыНДС");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если НужноСогласовать И ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
			МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");

		КонецЕсли;
		
	// ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента" Тогда
		
		Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
			
			МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			
			МассивПроверок.Добавить("КонтрольЗаполненияЦен");
			МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		КонецЕсли;
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВозвратПереданнойМногооборотнойТары;
		ТребуетсяЗалогЗаТару = ДокументПродажи.ПредусмотренЗалогЗаТару;
		
	ИначеЕсли ИмяТаблицы = "Документ.ПоступлениеТоваровОтХранителя" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("НаличиеУслугРабот");
		МассивПроверок.Добавить("НаличиеГИСМ");
		МассивПроверок.Добавить("НаличиеАлкогольнойПродукции");
		
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупТоваровХранителем" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("НаличиеУслугРабот");
		МассивПроверок.Добавить("НаличиеГИСМ");
		МассивПроверок.Добавить("НаличиеАлкогольнойПродукции");
		
	ИначеЕсли ИмяТаблицы = "Документ.ОтчетОСписанииТоваровУХранителя"
		Или ИмяТаблицы = "Документ.ОприходованиеИзлишковТоваровУХранителя" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("НаличиеУслугРабот");
		МассивПроверок.Добавить("НаличиеГИСМ");
		МассивПроверок.Добавить("НаличиеАлкогольнойПродукции");
		
	// АКТ О РАСХОЖДЕНИЯХ ПОСЛЕ ПРИЕМКИ
	
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда
		
		Если ОперацииВозвратаПереданныхТоваров.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
			
			МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	МАКСИМУМ(ВозвратТоваровОтКлиента.ВозвратПереданнойМногооборотнойТары) КАК ВернутьМногооборотнуюТару,
			|	МАКСИМУМ(ВозвратТоваровОтКлиента.ПредусмотренЗалогЗаТару)             КАК ТребуетсяЗалогЗаТару
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента КАК ВозвратТоваровОтКлиента
			|ГДЕ
			|	ВозвратТоваровОтКлиента.Ссылка В(&МассивОснований)";
			
			Запрос.УстановитьПараметр("МассивОснований", ДокументПродажи.Товары.ВыгрузитьКолонку("ДокументОснование"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ВозвратМногооборотнойТары = Выборка.ВернутьМногооборотнуюТару;
				ТребуетсяЗалогЗаТару      = Выборка.ТребуетсяЗалогЗаТару;
			КонецЕсли;

			
			МассивПроверок.Добавить("КонтрольЗаполненияЦенАкт");
		КонецЕсли;
		
	// АКТ О РАСХОЖДЕНИЯХ ПОСЛЕ ОТГРУЗКИ
		
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ДокументПродажи.Статус <> Перечисления.СтатусыАктаОРасхождениях.НеСогласовано Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		КонецЕсли;
		
		Если Не ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
			И Не ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			МассивПроверок.Добавить("КорректностьВыбораНоменклатурыПоНалогообложениюНДС");
			МассивПроверок.Добавить("КонтрольЗаполненияЦенАкт");
			
		КонецЕсли;
		
		Если Не ОбщегоНазначенияУТКлиентСервер.АвторизованВнешнийПользователь() Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	МАКСИМУМ(РеализацияТоваровУслуг.ВернутьМногооборотнуюТару) КАК ВернутьМногооборотнуюТару,
			|	МАКСИМУМ(РеализацияТоваровУслуг.ТребуетсяЗалогЗаТару) КАК ТребуетсяЗалогЗаТару
			|ИЗ
			|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
			|ГДЕ
			|	РеализацияТоваровУслуг.Ссылка В(&МассивРеализаций)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	МАКСИМУМ(ПередачаТоваров.ВернутьМногооборотнуюТару) КАК ВернутьМногооборотнуюТару,
			|	ЛОЖЬ КАК ТребуетсяЗалогЗаТару
			|ИЗ
			|	Документ.ПередачаТоваровХранителю КАК ПередачаТоваров
			|ГДЕ
			|	ПередачаТоваров.Ссылка В(&МассивРеализаций)
			|";
			
			Запрос.УстановитьПараметр("МассивРеализаций", ДокументПродажи.Товары.ВыгрузитьКолонку("Реализация"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ВозвратМногооборотнойТары = Выборка.ВернутьМногооборотнуюТару;
				ТребуетсяЗалогЗаТару      = Выборка.ТребуетсяЗалогЗаТару;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) <> Неопределено Тогда
			МассивПроверок.Добавить("НаличиеУслугРабот");
		КонецЕсли;
		
		Если ОперацииПередачи.Найти(ДокументПродажи.ХозяйственнаяОперация) = Неопределено Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары");
		КонецЕсли;

	// ЧЕК ККМ
		
	ИначеЕсли ИмяТаблицы = "Документ.ЧекККМ" Тогда
		
		Если ОграничиватьРучныеСкидки Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
			МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
				
		КонецЕсли;
		
	// КОРРЕКТИРОВКА РЕАЛИЗАЦИИ
	
	ИначеЕсли ИмяТаблицы = "Документ.КорректировкаРеализации" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ПроверкаПоСкладу = Истина;
		
		Если ТипЗнч(ДокументПродажи.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ДокументОснованиеХозяйственнаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.ДокументОснование, "ХозяйственнаяОперация");
			Если КомиссионнаяТорговляСервер.РеализацияЧерезКомиссионера(ДокументОснованиеХозяйственнаяОперация) Тогда
				ПроверкаПоСкладу = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаПоСкладу Тогда
			МассивПроверок.Добавить("КорректностьЗаполненияСклада");
			МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
			МассивПроверок.Добавить("КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары");
		КонецЕсли;
		
		МассивПроверок.Добавить("КорректностьВыбораНоменклатурыПоНалогообложениюНДС");
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
	
		Если ТипЗнч(ДокументПродажи.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВозвратМногооборотнойТары = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.ДокументОснование, "ВернутьМногооборотнуюТару");
			ТребуетсяЗалогЗаТару = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.ДокументОснование, "ТребуетсяЗалогЗаТару");
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	НеПроверятьКодСтроки = Не (ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")
		Или ТипДокумента = Тип("ДокументОбъект.ПередачаТоваровХранителю"));

	УчитыватьСкидкиНаценки = Не ((ИмяТаблицы = "Справочник.СоглашенияСКлиентами") 
		Или (ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю")
		Или (ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента"));
	
	ГруппаПользователейСНастройкойПродаж = НастройкиПродажДляПользователейСервер.ПолучитьГруппуПользователяСНастройкойПродажДляПользователя(
		Пользователи.АвторизованныйПользователь(), 
		"СкидкиНаценки");
	ИспользоватьПроверкиПоЦенам = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ДокументПродажи.Дата) 
		И (МассивПроверок.Найти("ВхождениеЦенВДопустимыйДиапазон") <> Неопределено
			Или МассивПроверок.Найти("СоответствиеТоваровУсловиямПродаж") <> Неопределено);
	
	ПараметрыПроверкиКорректностиЗаполнения = ПараметрыПроверкиКорректностиЗаполненияДокументаПродажи(ДокументПродажи, ИмяТаблицы, ИмяТЧ, ПредставлениеТЧ);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("УчитыватьСкидкиНаценки", УчитыватьСкидкиНаценки);	
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ПроверятьСкидкиРассчитаны", ПроверятьСкидкиРассчитаны);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьРучныеСкидки", ИспользоватьРучныеСкидки);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьАвтоматическиеСкидки", ИспользоватьАвтоматическиеСкидки);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ИспользоватьРасширенныеВозможностиЗаказаКлиента);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьНоменклатуруПартнеров", ИспользоватьНоменклатуруПартнеров);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьПроверкиПоЦенам", ИспользоватьПроверкиПоЦенам);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьОграниченияПоПользователям", ИспользоватьОграниченияПоПользователям);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьОграниченияПоСоглашениям", ИспользоватьОграниченияПоСоглашениям);
	ПараметрыПроверкиКорректностиЗаполнения.Вставить("ИспользоватьЦеновыеГруппы", ИспользоватьЦеновыеГруппы);
	
	ПродажиСерверЛокализация.ДополнитьМассивПроверокКорректностиЗаполненияДокументаПродажи(МассивПроверок, ПараметрыПроверкиКорректностиЗаполнения);
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок
	ТекстЗапроса = "";
	ПараметрыЗапроса = Новый Структура();
		
	ПараметрыЗапроса.Вставить("Дата",          ДокументПродажи.Дата);
	ПараметрыЗапроса.Вставить("ЭтоСоглашение", ТипДокумента = Тип("СправочникОбъект.СоглашенияСКлиентами"));
	ПараметрыЗапроса.Вставить("Ссылка",        ДокументПродажи.Ссылка);
	ПараметрыЗапроса.Вставить("Пользователь",  Пользователи.АвторизованныйПользователь());
	ПараметрыЗапроса.Вставить("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	ПараметрыЗапроса.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("СуммаВзаиморасчетовРеализации", СуммаВзаиморасчетовРеализации);
	ПараметрыЗапроса.Вставить("СуммаЗалогаПоРеализации", СуммаЗалогаПоРеализации);
	ПараметрыЗапроса.Вставить("НеЗаданаСуммаЗалога", Ложь);
	ПараметрыЗапроса.Вставить("НеПроверятьКодСтроки", НеПроверятьКодСтроки);
	ПараметрыЗапроса.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
	ПараметрыЗапроса.Вставить("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.Ссылка, "Организация")));
	ПараметрыЗапроса.Вставить("ГрафикВСоглашении", ТипДокумента = Тип("ДокументОбъект.АктВыполненныхРабот")
	                                               Или ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг"));
		
	Если ИспользоватьОграниченияПоСоглашениям Тогда
		ПараметрыЗапроса.Вставить("СоглашениеСКлиентом", ДокументПродажи.Соглашение);
	КонецЕсли;

	ПараметрыЗапроса.Вставить("ГруппаПользователей", ГруппаПользователейСНастройкойПродаж);
	
	СформироватьТекстЗапросаПроверкиКорректностиЗаполненияДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, МассивПроверок, ПараметрыПроверкиКорректностиЗаполнения);
		
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса	
	СообщитьОбОшибкахПроверкиКорректностиЗаполненияДокументаПродажи(МассивПроверок, МассивРезультатов, ПараметрыПроверкиКорректностиЗаполнения, Отказ);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Формирует текст запроса для выполнения проверок.
//
// Параметры:
//  ТекстЗапроса - Строка
//  ПараметрыЗапроса - Структура из КлючИЗначение - Параметры запроса
//  МассивПроверок - Массив из Строка
//  ПараметрыПроверкиКорректностиЗаполнения - см. ПараметрыПроверкиКорректностиЗаполненияДокументаПродажи
//
Процедура СформироватьТекстЗапросаПроверкиКорректностиЗаполненияДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, МассивПроверок, ПараметрыПроверкиКорректностиЗаполнения) Экспорт
	
	ДокументПродажи = ПараметрыПроверкиКорректностиЗаполнения.ДокументПродажи;
	ИмяТаблицы = ПараметрыПроверкиКорректностиЗаполнения.ИмяТаблицы;
	УчитыватьСкидкиНаценки = ПараметрыПроверкиКорректностиЗаполнения.УчитыватьСкидкиНаценки;
	ИспользоватьПроверкиПоЦенам = ПараметрыПроверкиКорректностиЗаполнения.ИспользоватьПроверкиПоЦенам;
	ИспользоватьЦеновыеГруппы = ПараметрыПроверкиКорректностиЗаполнения.ИспользоватьЦеновыеГруппы;
	ИспользоватьОграниченияПоПользователям = ПараметрыПроверкиКорректностиЗаполнения.ИспользоватьОграниченияПоПользователям;
	ИспользоватьОграниченияПоСоглашениям = ПараметрыПроверкиКорректностиЗаполнения.ИспользоватьОграниченияПоСоглашениям;
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаДокументПродажи" Тогда
		
			СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, 
																		ПараметрыЗапроса, 
																		ДокументПродажи, 
																		ИмяТаблицы, 
																		УчитыватьСкидкиНаценки, 
																		,
																		ИспользоватьПроверкиПоЦенам);

		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТоварыИзВозвращаемыхТоваровЗаявкиНаВозвратТоваровОтКлиента" Тогда
			
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, 
																		ПараметрыЗапроса, 
																		ДокументПродажи, 
																		ИмяТаблицы, 
																		УчитыватьСкидкиНаценки, 
																		,
																		ИспользоватьПроверкиПоЦенам,
																		ТекЭлемент);

		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦеновыеГруппы" Тогда
		
			СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
		
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ДублиТоваров" Тогда
			
			СформироватьЗапросНаличиеДублейТоваровДокументаПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямПродаж" Тогда
			
			СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы, ИспользоватьПроверкиПоЦенам);
			
		ИначеЕсли ТекЭлемент = "ДублиЦеновыхГрупп" Тогда
			
			СформироватьЗапросНаличиеДублейЦеновыхГруппДокументаПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда
			
			СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда
			
			СформироватьЗапросПринадлежностьТоваровСегментуНоменклатуры(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СформироватьЗапросПринадлежностьПартнераСегментуПартнеров(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса, ИспользоватьПроверкиПоЦенам);
			
		ИначеЕсли ТекЭлемент = "НаличиеУслугРабот" Тогда
			
			СформироватьЗапросНаличиеУслугРаботВДокументеПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеУслугТары" Тогда
			
			СформироватьЗапросНаличиеУслугТарыВДокументеПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияСкладаВЗаказеКлиента" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСкладаВЗаказеКлиента(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары" Тогда
			
			СформироватьЗапросКорректностьЗаполненияПодразделенийВТабличнойЧастиТовары(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения(ТекстЗапроса, ИспользоватьЦеновыеГруппы, ИспользоватьОграниченияПоПользователям, ИспользоватьОграниченияПоСоглашениям);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаОграниченияРучныхСкидок" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграниченияРучныхСкидок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияТипового" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСуммыВзаиморасчетов" Тогда
			
			СформироватьЗапросВременнаяТаблицаСуммыВзаиморасчетов(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда
			
			СформироватьЗапросСоответствиеСуммыПредоплатыГрафикуОплат(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦен" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦенАкт" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦенАкт(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦенСУчетомОтмененных" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦенСУчетомОтмененных(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеГИСМ" Тогда
			
			СформироватьЗапросНаличиеТоваровГИСМВДокументеПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеАлкогольнойПродукции" Тогда
			
			СформироватьЗапросНаличиеАлкогольнойПродукцииВДокументеПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеВЕТИС" Тогда
			
			СформироватьЗапросНаличиеТоваровВЕТИСВДокументеПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияНоменклатурыПартнера" Тогда
			
			НоменклатураПартнеровСервер.СформироватьЗапросКорректностьЗаполненияНоменклатурыПартнера(ТекстЗапроса, ПараметрыЗапроса);

		ИначеЕсли ТекЭлемент = "КорректностьСуммыНДС" Тогда
			
			СформироватьЗапросКорректностьСуммыНДС(ТекстЗапроса, ПараметрыЗапроса);
		
		ИначеЕсли ТекЭлемент = "КорректностьУказанияСтавкиНДС" Тогда
		
			СформироватьЗапросКорректностьУказанияСтавкиНДСПродажи(ТекстЗапроса);
		
		ИначеЕсли ТекЭлемент = "КорректностьСуммыИСуммыНДС" Тогда
			
			СформироватьЗапросКорректностьСуммыИСуммыНДС(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьВыбораНоменклатурыПоНалогообложениюНДС" Тогда
			ТекстЗапроса = ТекстЗапроса 
				+ УчетНДСУП.ТекстЗапросаКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(ПараметрыЗапроса);
				
		ИначеЕсли ТекЭлемент = "НаправлениеДеятельностиПоУчетуДоховИРасходов" Тогда
			
			СформироватьЗапросПроверкиНаправленияДеятельностиПоУчетуДоходовИРасходов(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ИспользованиеЗаказаКлиентуПоВариантуОбособления" Тогда
			
			СформироватьЗапросПроверкиВозможностиИспользованияЗаказаКлиентаПоВариантуОбособления(ТекстЗапроса);
			
		КонецЕсли;
		
		ПродажиСерверЛокализация.ДополнитьЗапросыПроверокКорректностиЗаполненияДокументаПродажи(
					ТекЭлемент,
					ТекстЗапроса, 
					ПараметрыЗапроса, 
					ПараметрыПроверкиКорректностиЗаполнения);
					
	КонецЦикла;


КонецПроцедуры

// Выводит сообщение об ошибках при проверке корректности заполнения документа продажи.
//
// Параметры:
//  МассивПроверок - Массив Из Строка -
//  МассивРезультатов - Массив из РезультатЗапроса
//  ПараметрыПроверкиКорректностиЗаполнения - см. ПараметрыПроверкиКорректностиЗаполненияДокументаПродажи
//  Отказ - Булево
//
Процедура СообщитьОбОшибкахПроверкиКорректностиЗаполненияДокументаПродажи(МассивПроверок, МассивРезультатов, ПараметрыПроверкиКорректностиЗаполнения, Отказ) Экспорт
	
	ДокументПродажи = ПараметрыПроверкиКорректностиЗаполнения.ДокументПродажи;
	ИмяТаблицы = ПараметрыПроверкиКорректностиЗаполнения.ИмяТаблицы;
	ИмяТЧ = ПараметрыПроверкиКорректностиЗаполнения.ИмяТЧ;
	ПредставлениеТЧ = ПараметрыПроверкиКорректностиЗаполнения.ПредставлениеТЧ;

	ПроверятьСкидкиРассчитаны = ПараметрыПроверкиКорректностиЗаполнения.ПроверятьСкидкиРассчитаны;
	ИспользоватьРучныеСкидки = ПараметрыПроверкиКорректностиЗаполнения.ИспользоватьРучныеСкидки;
	ИспользоватьАвтоматическиеСкидки = ПараметрыПроверкиКорректностиЗаполнения.ИспользоватьАвтоматическиеСкидки;
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПараметрыПроверкиКорректностиЗаполнения.ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	Если ПроверятьСкидкиРассчитаны Тогда
		СообщитьОбОшибкахСкидкиНеРассчитаны(ДокументПродажи, Отказ);
	КонецЕсли;
	
	НевозможноПровестиБезСогласования = Ложь;
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахШапкаДокументаПродажи(Выборка,ДокументПродажи,НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДублиТоваров" Тогда
			
			СообщитьОбОшибкахНаличиеДублейТоваровДокументаПродажи(Выборка, ДокументПродажи, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахТоварыДокументаПродажи(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ДублиЦеновыхГрупп" Тогда

			СообщитьОбОшибкахНаличиеДублейЦеновыхГруппДокументаПродажи(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			СообщитьОбОшибкахСоответствиеГруппЦенНоменклатурыУсловиямПродаж(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда

			СообщитьОбОшибкахПринадлежностьТоваровСегментуНоменклатуры(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СообщитьОбОшибкахПринадлежностьПартнераСегментуПартнеров(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда

			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);

		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУслугРабот" Тогда

			СообщитьОбОшибкахНаличиеУслугРаботВДокументеПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУслугТары" Тогда

			СообщитьОбОшибкахНаличиеУслугТарыВДокументеПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеГИСМ" Тогда

			СообщитьОбОшибкахНаличиеТоваровГИСМВДокументеПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеАлкогольнойПродукции" Тогда

			СообщитьОбОшибкахНаличиеАлкогольнойПродукцииВДокументеПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеВЕТИС" Тогда

			СообщитьОбОшибкахНаличиеТоваровВЕТИСВДокументеПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда

			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСклада"
			ИЛИ МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВЗаказеКлиента" Тогда

			СообщитьОбОшибкахКорректностьЗаполненияСклада(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда

			СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Выборка, ДокументПродажи, Отказ);
		
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияПодразделенияВТабличнойЧастиТовары" Тогда

			СообщитьОбОшибкахКорректностьЗаполненияПодразделенияВТабличнойЧастиТовары(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповОплатыСоглашения" Тогда

			СообщитьОбОшибкахКорректностьЭтаповОплатыСоглашения(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда

			СообщитьОбОшибкахКорректностьКоличестваЭтаповОплатыСоглашения(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда

			СообщитьОбОшибкахСоответствиеСуммыПредоплатыГрафикуОплат(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦен" 
			ИЛИ МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦенСУчетомОтмененных"
			ИЛИ МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦенАкт" Тогда

			СообщитьОбОшибкахКонтрольЗаполненияЦен(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияНоменклатурыПартнера" Тогда
			
			НоменклатураПартнеровСервер.СообщитьОбОшибкахКорректностьЗаполненияНоменклатурыПартнера(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьСуммыНДС" Тогда 
		
			СообщитьОбОшибкахКорректностьСуммыНДС(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);
		
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьУказанияСтавкиНДС" Тогда
		
			СообщитьОбОшибкахКорректностьУказанияСтавкиНДСПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);
		
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьСуммыИСуммыНДС" Тогда 
		
			СообщитьОбОшибкахКорректностьСуммыИСуммыНДС(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);
			
		ИначеЕсли  МассивПроверок[ТекИндекс] = "КорректностьВыбораНоменклатурыПоНалогообложениюНДС" Тогда

			УчетНДСУП.СообщитьОбОшибкахКорректностьВыбораНоменклатурыПоНалогообложениюНДСПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "НаправлениеДеятельностиПоУчетуДоховИРасходов" Тогда
			
			СообщитьОбОшибкеВыбораНаправленияДеятельности(Выборка, ДокументПродажи, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ИспользованиеЗаказаКлиентуПоВариантуОбособления" Тогда
			
			СообщитьОбОшибкеВозможностиИспользованияЗаказаКлиента(Выборка, ДокументПродажи, Отказ);
			
		КонецЕсли;
		ПродажиСерверЛокализация.СообщитьОбОшибкахПроверкиКорректностиЗаполненияДокументаПродажи(
				МассивПроверок[ТекИндекс], Выборка, ПараметрыПроверкиКорректностиЗаполнения, Отказ);
				
	КонецЦикла;
	
	Если НевозможноПровестиБезСогласования Тогда
		ТекстОшибки = НСтр("ru = 'Недостаточно прав на отклонение от условий продаж.'");
		
		Если (ИмяТаблицы = "Документ.ЗаказКлиента"
			ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента") И ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
				ТекстОшибки = ТекстОшибки + " " + НСтр("ru = 'Документ необходимо провести в статусе ""На согласовании"".'");
		КонецЕсли;
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения документа продажи в соответствии с массивом проверок
// путем выполнения пакета запросов. Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения".
//
// Параметры:
// 	ДокументПродажи                      - ДокументСсылка - Документ, для которого необходимо осуществить проверки
// 	ЕстьОтклоненияОтЦеновыхУсловий       - Булево - Признак отклонения от ценовых условий
// 	ЕстьОтклоненияОтФинансовыхУсловий    - Булево - Признак отклонения отфинансовых условий
// 	ЕстьОтклоненияОтЛогистическихУсловий - Булево - Признак отклонения от логистических условий
//
Процедура ПроверитьНеобходимостьСогласованияУсловийПродажи(Знач ДокументПродажи,
	                                                       ЕстьОтклоненияОтЦеновыхУсловий,
	                                                       ЕстьОтклоненияОтФинансовыхУсловий,
	                                                       ЕстьОтклоненияОтЛогистическихУсловий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенПродажи = Константы.ВидМаксимальноДопустимыхЦенПродажи.Получить();
	ВидМинимальноДопустимыхЦенПродажи  = Константы.ВидМинимальноДопустимыхЦенПродажи.Получить();
	ПроверятьДиапазонЦен               = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенПродажи) Или ЗначениеЗаполнено(ВидМинимальноДопустимыхЦенПродажи);
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ПроверятьСкидкиНаценки           = ИспользоватьАвтоматическиеСкидки Или ИспользоватьРучныеСкидки;
	ИспользоватьЦеновыеГруппы                    = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьОграниченияПоПользователям = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	ИспользоватьОграниченияПоСоглашениям         = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ОграничиватьРучныеСкидки          = ИспользоватьРучныеСкидки И (ИспользоватьОграниченияПоПользователям ИЛИ ИспользоватьОграниченияПоСоглашениям);
	ИспользоватьСоглашенияСКлиентами  = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	МассивПроверок  = Новый Массив();
	ТипДокумента      = ТипЗнч(ДокументПродажи);
	ИмяТаблицы = ДокументПродажи.Метаданные().ПолноеИмя();
	
	ЗапросПоШапке = Новый Запрос("
		|ВЫБРАТЬ
		|	ДокументПродажи.Дата КАК Дата,
		|	ЛОЖЬ КАК Типовое
		|ИЗ
		|	&ИмяТаблицы КАК ДокументПродажи
		|ГДЕ
		|	ДокументПродажи.Ссылка = &ДокументПродажи
		|");
	
	Если ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		ЗапросПоШапке.Текст = СтрЗаменить(ЗапросПоШапке.Текст, "ЛОЖЬ КАК Типовое", "ДокументПродажи.Типовое КАК Типовое");
	КонецЕсли;
	ЗапросПоШапке.Текст = СтрЗаменить(ЗапросПоШапке.Текст, "&ИмяТаблицы", ИмяТаблицы);
	
	ЗапросПоШапке.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	ВозвратМногооборотнойТары = Ложь;
	ТребуетсяЗалогЗаТару = Ложь;
	
	// СОГЛАШЕНИЕ С КЛИЕНТОМ
	
	Если ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		Если Не ВыборкаПоШапке.Типовое Тогда
		
			МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияТипового");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("КорректностьЭтаповОплатыСоглашения");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповОплатыСоглашения");
			
			РеквизитыДокументаПродажи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПродажи, "ВозвращатьМногооборотнуюТару, ТребуетсяЗалогЗаТару");
			ВозвратМногооборотнойТары = РеквизитыДокументаПродажи.ВозвращатьМногооборотнуюТару;
			ТребуетсяЗалогЗаТару = РеквизитыДокументаПродажи.ТребуетсяЗалогЗаТару;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			
			ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
			
			Если ИспользоватьЦеновыеГруппы Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЦеновыеГруппы");
				МассивПроверок.Добавить("СоответствиеЦеновыхГруппУсловиямПродаж");
			
			КонецЕсли;
			
		КонецЕсли;
			
	// ЗАКАЗ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьСуммыИСуммыНДС");
		МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
		МассивПроверок.Добавить("КорректностьСуммыНДС");
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		РеквизитыДокументаПродажи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПродажи, "ВернутьМногооборотнуюТару, ТребуетсяЗалогЗаТару");
		ВозвратМногооборотнойТары = РеквизитыДокументаПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = РеквизитыДокументаПродажи.ТребуетсяЗалогЗаТару;
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
				
		КонецЕсли;
			
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		
	// ЗАЯВКА НА ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		РеквизитыДокументаПродажи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументПродажи, "СпособКомпенсации, ВернутьМногооборотнуюТару, ТребуетсяЗалогЗаТару");
		НужнаЗаменаТоваров = РеквизитыДокументаПродажи.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары;
		ВозвратМногооборотнойТары = РеквизитыДокументаПродажи.ВернутьМногооборотнуюТару;
		ТребуетсяЗалогЗаТару = РеквизитыДокументаПродажи.ТребуетсяЗалогЗаТару;
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		Если НужнаЗаменаТоваров Тогда
			МассивПроверок.Добавить("КорректностьУказанияСтавкиНДС");
			МассивПроверок.Добавить("КорректностьСуммыНДС");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
				
		КонецЕсли;
			
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УчитыватьСкидкиНаценки = Не ((ИмяТаблицы = "Справочник.СоглашенияСКлиентами") Или (ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю"));
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок

	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	НеПроверятьКодСтроки = Не (ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")
				Или ТипДокумента = Тип("ДокументОбъект.ПередачаТоваровХранителю"));
	
	ПараметрыЗапроса.Вставить("Дата", ВыборкаПоШапке.Дата);
	ПараметрыЗапроса.Вставить("ЭтоСоглашение", ИмяТаблицы = "Справочник.СоглашенияСКлиентами");
	ПараметрыЗапроса.Вставить("Пользователь",  Пользователи.ТекущийПользователь());
	ПараметрыЗапроса.Вставить("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("НеПроверятьКодСтроки", НеПроверятьКодСтроки);
	ПараметрыЗапроса.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
	ПараметрыЗапроса.Вставить("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи, "Организация")));
	ПараметрыЗапроса.Вставить("ГрафикВСоглашении", ТипДокумента = Тип("ДокументОбъект.АктВыполненныхРабот")
	                                               Или ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	
	Если ИспользоватьОграниченияПоСоглашениям Тогда
		ПараметрыЗапроса.Вставить("СоглашениеСКлиентом", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи, "Соглашение"));
	КонецЕсли;
	
	ГруппаПользователейСНастройкойПродаж = НастройкиПродажДляПользователейСервер.ПолучитьГруппуПользователяСНастройкойПродажДляПользователя(
		Пользователи.ТекущийПользователь(), 
		"СкидкиНаценки"
	);
	ПараметрыЗапроса.Вставить("ГруппаПользователей", ГруппаПользователейСНастройкойПродаж);
	
	ПоСсылке = Истина;
	
	ИспользоватьПроверкиПоЦенам = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ВыборкаПоШапке.Дата) 
		И (МассивПроверок.Найти("ВхождениеЦенВДопустимыйДиапазон") <> Неопределено
			Или МассивПроверок.Найти("СоответствиеТоваровУсловиямПродаж") <> Неопределено);
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаДокументПродажи" Тогда
		
			СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
		
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, 
																		ПараметрыЗапроса, 
																		ДокументПродажи, 
																		ИмяТаблицы, 
																		УчитыватьСкидкиНаценки, 
																		ПоСсылке,
																		ИспользоватьПроверкиПоЦенам);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦеновыеГруппы" Тогда
		
			СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
		
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы);

		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямПродаж" Тогда

			СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы, ИспользоватьПроверкиПоЦенам);

		ИначеЕсли ТекЭлемент = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса);

		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда

			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);

		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса, ИспользоватьПроверкиПоЦенам);

		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения(ТекстЗапроса, ИспользоватьЦеновыеГруппы, ИспользоватьОграниченияПоПользователям, ИспользоватьОграниченияПоСоглашениям);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграниченияРучныхСкидок" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграниченияРучныхСкидок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияТипового" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса);
		
		ИначеЕсли ТекЭлемент = "КорректностьСуммыНДС" Тогда
			
			СформироватьЗапросКорректностьСуммыНДС(ТекстЗапроса, ПараметрыЗапроса);
		
		ИначеЕсли ТекЭлемент = "КорректностьУказанияСтавкиНДС" Тогда
		
			СформироватьЗапросКорректностьУказанияСтавкиНДСПродажи(ТекстЗапроса);
		
		ИначеЕсли ТекЭлемент = "КорректностьСуммыИСуммыНДС" Тогда
			
			СформироватьЗапросКорректностьСуммыИСуммыНДС(ТекстЗапроса);
			
		КонецЕсли;

	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 

	// Сообщим пользователю о результатах проверки для каждого результата запроса

	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл

		Выборка = МассивРезультатов[ТекИндекс].Выбрать();

		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий И ЕстьОтклоненияОтФинансовыхУсловий И ЕстьОтклоненияОтЛогистическихУсловий Тогда
				Продолжить;
			КонецЕсли;

			Если Выборка.Следующий() Тогда

				Если Выборка.ЕстьОшибкиЗаполненияВалюта Или
					Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Или
					Выборка.ЕстьОшибкиЗаполненияВидЦен Или
					Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Или
					Выборка.ЕстьОшибкиЗаполненияПроцентРучнойСкидки Или
					Выборка.ЕстьОшибкиЗаполненияПроцентРучнойНаценки Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					
				КонецЕсли;
					
				Если Выборка.ЕстьОшибкиЗаполненияГрафикОплаты Или
					Выборка.ЕстьОшибкиЗаполненияФормыОплаты Или
					Выборка.ЕстьОшибкиЗаполненияФормыОплатыСоглашения Или
					Выборка.ЕстьОшибкиЗаполненияКалендаря Тогда

					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					
				КонецЕсли;

				Если Выборка.ЕстьОшибкиЗаполненияСклад Или
					Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда
					
					ЕстьОтклоненияОтЛогистическихУсловий = Истина;
					
				КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл

				Если Выборка.ЕстьОшибкиЗаполненияЦена Или
					(Выборка.ЕстьОшибкиЗаполненияВидЦены И Выборка.ЦенаСоглашение = 0) Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Продолжить;
				
				КонецЕсли;

			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл

				Если Выборка.ЕстьОшибкиЗаполненияЦеновыеГруппы
					Или Выборка.ЕстьОшибкиЗаполненияВидЦен
					Или Выборка.ЕстьОшибкиЗаполненияРучнойСкидки
					Или Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Продолжить;
					
				КонецЕсли;

			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда

			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			ГрафикПоУмолчанию = Новый ТаблицаЗначений();
			ГрафикПоУмолчанию.Колонки.Добавить("ВариантОплаты");
			ГрафикПоУмолчанию.Колонки.Добавить("ВариантОтсчета");
			ГрафикПоУмолчанию.Колонки.Добавить("ДатаПлатежа");
			ГрафикПоУмолчанию.Колонки.Добавить("ПроцентПлатежа");
			ГрафикПоУмолчанию.Колонки.Добавить("СуммаПлатежа");
			ГрафикПоУмолчанию.Колонки.Добавить("ПроцентЗалогаЗаТару");
			ГрафикПоУмолчанию.Колонки.Добавить("СуммаЗалогаЗаТару");
			ГрафикПоУмолчанию.Колонки.Добавить("Сдвиг");
			
			Если Выборка.Следующий() 
				И НЕ Выборка.НакладнаяПоЗаказам Тогда
				ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
				ПараметрыЗаполнения.ЭтоРасчетыСКлиентами             = Истина;
				ПараметрыЗаполнения.НакладнаяПоЗаказам               = Ложь;
				ПараметрыЗаполнения.ПорядокРасчетов                  = Выборка.ПорядокРасчетов;
				ПараметрыЗаполнения.ЭтоЗаказ                         = Выборка.ЭтоЗаказ;
				ПараметрыЗаполнения.ДатаЗаказа                       = ?(Выборка.ЭтоЗаказ,Выборка.Дата,Дата(1,1,1));
				ПараметрыЗаполнения.ДатаСогласования                 = Выборка.ДатаСогласования;
				Если Выборка.НеОтгружатьЧастями Тогда
					ПараметрыЗаполнения.ДатаОтгрузки = Выборка.ДатаОтгрузки;
					ЕстьЗалог = Ложь;
				Иначе
					Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументПродажи)) Тогда
						ТаблицаТовары = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументПродажи).СуммыПоЗаказам(ДокументПродажи);
					Иначе
						ТаблицаТовары = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи, "Ссылка")).СуммыПоЗаказам(ДокументПродажи);
					КонецЕсли;
					ПараметрыЗаполнения.ДатаОтгрузки = ТаблицаТовары;
					ЕстьЗалог = ТаблицаТовары.Итог("СуммаЗалогаЗаТару") <> 0;
				КонецЕсли;
				ПараметрыЗаполнения.ДатаПереходаПраваСобственности  = Выборка.ДатаПереходаПраваСобственности;
				ПараметрыЗаполнения.Соглашение                      = Выборка.Соглашение;
				ПараметрыЗаполнения.СуммаЗалогаЗаТару               = ?(ЕстьЗалог,100,0);
				ПараметрыЗаполнения.СуммаОплаты                     = 100;
				ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(ГрафикПоУмолчанию, ПараметрыЗаполнения);
			КонецЕсли;
			
			СуммаПроцентов = 0;
			СуммаПроцентовШаблона = 0;
			СуммаПроцентовЗалога = 0;
			СуммаПроцентовЗалогаШаблона = 0;
			Выборка.Сбросить();
			сч = 0;
			Пока Выборка.Следующий() Цикл
				
				Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаГрафикаПоУмолчанию = ГрафикПоУмолчанию[сч];
				
				Если СтрокаГрафикаПоУмолчанию.ДатаПлатежа < Выборка.ДатаПлатежа Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				
				КонецЕсли;
				
				// Проверка отклонений процентов платежей
				СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
				СуммаПроцентовШаблона = СуммаПроцентовШаблона + СтрокаГрафикаПоУмолчанию.ПроцентПлатежа;
				Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				
				// Проверка отклонений процентов залога за тару
				СуммаПроцентовЗалога = СуммаПроцентовЗалога + Выборка.ПроцентЗалогаЗаТару;
				СуммаПроцентовЗалогаШаблона = СуммаПроцентовЗалогаШаблона + СтрокаГрафикаПоУмолчанию.ПроцентЗалогаЗаТару;
				Если СуммаПроцентовЗалога < СуммаПроцентовЗалогаШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				сч = сч + 1 ;
			КонецЦикла;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЕстьОшибкиМинимальноДопустимаяЦена Или
					Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Следующий() Тогда
				ЕстьОтклоненияОтЦеновыхУсловий = Истина;
			КонецЕсли;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповОплатыСоглашения" Тогда
			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПроцентов = 0;
			СуммаПроцентовШаблона = 0;
			СуммаПроцентовЗалога = 0;
			СуммаПроцентовЗалогаШаблона = 0;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ЭтапШаблонаОтсутствует Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Или
					Выборка.СдвигШаблона < Выборка.Сдвиг Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;

				СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
				СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
				Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				
				СуммаПроцентовЗалога = СуммаПроцентовЗалога + Выборка.ПроцентЗалогаЗаТару;
				СуммаПроцентовЗалогаШаблона = СуммаПроцентовЗалогаШаблона + Выборка.ПроцентЗалогаЗаТаруШаблона;
				Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения Тогда
						ЕстьОтклоненияОтФинансовыхУсловий = Истина;
						Прервать;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьСуммыНДС" 
			ИЛИ МассивПроверок[ТекИндекс] = "КорректностьСуммыИСуммыНДС" Тогда
			
			Пока Выборка.Следующий() Цикл
				Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.ЕстьОшибкиСуммаНДС Тогда
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьУказанияСтавкиНДС" Тогда
			
			Пока Выборка.Следующий() Цикл
				ЕстьОтклоненияОтЦеновыхУсловий = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения товаров документа возврата в соответствии 
// с реализованными товарами с учетом корректировок.
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения".
//
// Параметры:
// 	ДокументПродажи          - ДокументОбъект - Объект, для которого необходимо осуществить проверки
// 	ИмяТаблицы               - Строка - Имя таблицы Товары
// 	Отказ                    - Булево - Флаг отказа от проведения документа
// 	ТаблицаПроверяемыеТовары - ТаблицаЗначений
//
Процедура ПроверитьКорректностьВозвращаемыхТоваров(Знач ДокументПродажи, ИмяТаблицы, Отказ, ТаблицаПроверяемыеТовары = Неопределено) Экспорт
	
	Если ТаблицаПроверяемыеТовары = Неопределено Тогда
		Если ИмяТаблицы = "ВозвращаемыеТовары" Тогда
			ПараметрыОтбора = Новый Структура("Отменено", Ложь); 
			ТаблицаПроверяемыеТовары = ДокументПродажи[ИмяТаблицы].Выгрузить(ПараметрыОтбора);
		Иначе
			ТаблицаПроверяемыеТовары = ДокументПродажи[ИмяТаблицы].Выгрузить();
		КонецЕсли;
		
		ПоляГруппировки = "Номенклатура,Характеристика,Серия,Назначение,ДокументРеализации,СтатусУказанияСерий";
		ПоляСуммирования = "Количество, КоличествоУпаковок";
		
		ТаблицаПроверяемыеТовары.Свернуть(ПоляГруппировки, ПоляСуммирования);
		
	КонецЕсли;
	
	ВозвратПоЧеку = ТипЗнч(ДокументПродажи) <> Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки")
		И ЗначениеЗаполнено(ДокументПродажи.ЧекККМ);
	
	Если ТаблицаПроверяемыеТовары.Количество() > 0 Тогда
		
		Если НЕ ВозвратПоЧеку Тогда
		
			Запрос = Новый Запрос;
			
			Если ТипЗнч(ДокументПродажи) = Тип("ДокументСсылка.АктОРасхожденияхПослеПриемки") Тогда
				
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
				|	ТаблицаТовары.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА ТаблицаТовары.СтатусУказанияСерий = 14
				|			ТОГДА ТаблицаТовары.Серия
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|	КОНЕЦ КАК Серия,
				|	ТаблицаТовары.Назначение КАК Назначение,
				|	ВЫРАЗИТЬ(ТаблицаТовары.ДокументРеализации КАК Документ.РеализацияТоваровУслуг) КАК ДокументРеализации,
				|	ТаблицаТовары.КоличествоУпаковокПоАкту - ТаблицаТовары.КоличествоУпаковокОснование КАК КоличествоУпаковок,
				|	(ТаблицаТовары.КоличествоУпаковокПоАкту - ТаблицаТовары.КоличествоУпаковокОснование) * ТаблицаТовары.КоэффициентУпаковки КАК Количество
				|ПОМЕСТИТЬ ПроверяемыеТовары
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ТаблицаТовары
				|ГДЕ
				|	НЕ ТаблицаТовары.ДокументРеализации В(НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка),
				|		ЗНАЧЕНИЕ(Документ.ПередачаТоваровХранителю.ПустаяСсылка))
				|	И ТаблицаТовары.КоличествоУпаковокПоАкту - ТаблицаТовары.КоличествоУпаковокОснование > 0
				|
				|;
				|";
				
			Иначе
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
				|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
				|	ВЫБОР
				|		КОГДА ВозвратТоваровОтКлиентаТовары.СтатусУказанияСерий = 14
				|			ТОГДА ВозвратТоваровОтКлиентаТовары.Серия
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
				|	КОНЕЦ КАК Серия,
				|	ВозвратТоваровОтКлиентаТовары.Назначение КАК Назначение,
				|	ВозвратТоваровОтКлиентаТовары.Количество КАК Количество,
				|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК ДокументРеализации
				|ПОМЕСТИТЬ ПроверяемыеТоварыИзТаблицы
				|ИЗ
				|	&ТаблицаПроверяемыеТовары КАК ВозвратТоваровОтКлиентаТовары
				|ГДЕ
				|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> НЕОПРЕДЕЛЕНО
				|	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
				|	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
				|	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.ПередачаТоваровХранителю.ПустаяСсылка)
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Серия
				|;
				|ВЫБРАТЬ 
				|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
				|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
				|	ВозвратТоваровОтКлиентаТовары.Серия КАК Серия,
				|	ВозвратТоваровОтКлиентаТовары.Назначение КАК Назначение,
				|	ВозвратТоваровОтКлиентаТовары.Количество КАК Количество,
				|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК ДокументРеализации
				|
				|ПОМЕСТИТЬ ПроверяемыеТовары
				|ИЗ ПроверяемыеТоварыИзТаблицы КАК ВозвратТоваровОтКлиентаТовары
				|ГДЕ
				|НЕ (ВозвратТоваровОтКлиентаТовары.ДокументРеализации Ссылка Документ.РеализацияТоваровУслуг И
				|		ВЫРАЗИТЬ(ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК Документ.РеализацияТоваровУслуг).ВернутьМногооборотнуюТару И 
				|		ВЫРАЗИТЬ(ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
				|)
				|ИНДЕКСИРОВАТЬ ПО
				|	Номенклатура,
				|	Характеристика,
				|	Серия
				|;
				|";
				
			КонецЕсли;
			
			Запрос.Текст = Запрос.Текст +
			"ВЫБРАТЬ
			|	МАКСИМУМ(КорректировкаРеализации.Дата) КАК Дата,
			|	ПроверяемыеТовары.ДокументРеализации КАК СсылкаРеализации
			|ПОМЕСТИТЬ ДанныеКорректировки
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|		ПО (КорректировкаРеализации.ДокументОснование = ПроверяемыеТовары.ДокументРеализации)
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
			|		ПО КорректировкаРеализации.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
			|			И РеестрДокументовСторно.Проведен
			|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
			|ГДЕ
			|	КорректировкаРеализации.Проведен
			|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
			|	И НЕ КорректировкаРеализации.ВидКорректировки В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроверяемыеТовары.ДокументРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СсылкаРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(КорректировкаРеализации.Ссылка) КАК Ссылка,
			|	МАКСИМУМ(КорректировкаРеализации.Ссылка.Дата) КАК Дата,
			|	КорректировкаРеализации.Ссылка.ДокументОснование КАК СсылкаРеализации
			|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
			|ИЗ
			|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|ГДЕ
			|	(КорректировкаРеализации.Ссылка.ДокументОснование, КорректировкаРеализации.Ссылка.Дата) В
			|			(ВЫБРАТЬ
			|				ДанныеКорректировки.СсылкаРеализации КАК СсылкаРеализации,
			|				ДанныеКорректировки.Дата КАК Дата
			|			ИЗ
			|				ДанныеКорректировки)
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализации.Ссылка.ДокументОснование
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка,
			|	СсылкаРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL
			|			ТОГДА ПроверяемыеТовары.ДокументРеализации
			|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
			|	КОНЕЦ КАК Ссылка
			|ПОМЕСТИТЬ СсылкиНаРеализации
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
			|		ПО ПроверяемыеТовары.ДокументРеализации = ДанныеПоследнейКорректировки.СсылкаРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
			|	КорректировкаРеализацииТовары.Характеристика КАК Характеристика,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииТовары.СтатусУказанияСерий = 14
			|			ТОГДА КорректировкаРеализацииТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ КАК Серия,
			|	КорректировкаРеализацииТовары.Назначение КАК Назначение,
			|	СУММА(КорректировкаРеализацииТовары.Количество) КАК Количество,
			|	СРЕДНЕЕ(КорректировкаРеализацииТовары.Цена) КАК Цена,
			|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование КАК ДокументРеализации
			|ПОМЕСТИТЬ ДанныеРеализации
			|ИЗ
			|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|ГДЕ
			|	КорректировкаРеализацииТовары.Ссылка.Проведен
			|	И (КорректировкаРеализацииТовары.Номенклатура, КорректировкаРеализацииТовары.Характеристика, ВЫБОР
			|			КОГДА КорректировкаРеализацииТовары.СтатусУказанияСерий = 14
			|				ТОГДА КорректировкаРеализацииТовары.Серия
			|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		КОНЕЦ) В
			|			(ВЫБРАТЬ
			|				ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|				ПроверяемыеТовары.Характеристика КАК Характеристика,
			|				ПроверяемыеТовары.Серия КАК Серия
			|			ИЗ
			|				ПроверяемыеТовары КАК ПроверяемыеТовары)
			|	И КорректировкаРеализацииТовары.Ссылка В
			|			(ВЫБРАТЬ
			|				СсылкиНаРеализации.Ссылка КАК Ссылка
			|			ИЗ
			|				СсылкиНаРеализации КАК СсылкиНаРеализации)
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализацииТовары.Номенклатура,
			|	КорректировкаРеализацииТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА КорректировкаРеализацииТовары.СтатусУказанияСерий = 14
			|			ТОГДА КорректировкаРеализацииТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ,
			|	КорректировкаРеализацииТовары.Назначение,
			|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Номенклатура,
			|	РеализацияТоваровУслугТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.СтатусУказанияСерий = 14
			|			ТОГДА РеализацияТоваровУслугТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ,
			|	РеализацияТоваровУслугТовары.Назначение,
			|	СУММА(РеализацияТоваровУслугТовары.Количество),
			|	СРЕДНЕЕ(РеализацияТоваровУслугТовары.Цена),
			|	РеализацияТоваровУслугТовары.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
			|		ПО РеализацияТоваровУслугТовары.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
			|			И РеестрДокументовСторно.Проведен
			|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка.Проведен
			|	И (РеализацияТоваровУслугТовары.Номенклатура, РеализацияТоваровУслугТовары.Характеристика, ВЫБОР
			|			КОГДА РеализацияТоваровУслугТовары.СтатусУказанияСерий = 14
			|				ТОГДА РеализацияТоваровУслугТовары.Серия
			|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		КОНЕЦ) В
			|			(ВЫБРАТЬ
			|				ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|				ПроверяемыеТовары.Характеристика КАК Характеристика,
			|				ПроверяемыеТовары.Серия КАК Серия
			|			ИЗ
			|				ПроверяемыеТовары КАК ПроверяемыеТовары)
			|	И РеализацияТоваровУслугТовары.Ссылка В
			|			(ВЫБРАТЬ
			|				СсылкиНаРеализации.Ссылка КАК Ссылка
			|			ИЗ
			|				СсылкиНаРеализации КАК СсылкиНаРеализации)
			|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.Номенклатура,
			|	РеализацияТоваровУслугТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА РеализацияТоваровУслугТовары.СтатусУказанияСерий = 14
			|			ТОГДА РеализацияТоваровУслугТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ,
			|	РеализацияТоваровУслугТовары.Назначение,
			|	РеализацияТоваровУслугТовары.Ссылка
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПередачаТоваровХранителюТовары.Номенклатура,
			|	ПередачаТоваровХранителюТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА ПередачаТоваровХранителюТовары.СтатусУказанияСерий = 14
			|			ТОГДА ПередачаТоваровХранителюТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ,
			|	ПередачаТоваровХранителюТовары.Назначение,
			|	СУММА(ПередачаТоваровХранителюТовары.Количество),
			|	СРЕДНЕЕ(ПередачаТоваровХранителюТовары.Цена),
			|	ПередачаТоваровХранителюТовары.Ссылка
			|ИЗ
			|	Документ.ПередачаТоваровХранителю.Товары КАК ПередачаТоваровХранителюТовары
			|ГДЕ
			|	ПередачаТоваровХранителюТовары.Ссылка.Проведен
			|	И (ПередачаТоваровХранителюТовары.Номенклатура, ПередачаТоваровХранителюТовары.Характеристика, ВЫБОР
			|			КОГДА ПередачаТоваровХранителюТовары.СтатусУказанияСерий = 14
			|				ТОГДА ПередачаТоваровХранителюТовары.Серия
			|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|		КОНЕЦ) В
			|			(ВЫБРАТЬ
			|				ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|				ПроверяемыеТовары.Характеристика КАК Характеристика,
			|				ПроверяемыеТовары.Серия КАК Серия
			|			ИЗ
			|				ПроверяемыеТовары КАК ПроверяемыеТовары)
			|	И ПередачаТоваровХранителюТовары.Ссылка В
			|			(ВЫБРАТЬ
			|				СсылкиНаРеализации.Ссылка КАК Ссылка
			|			ИЗ
			|				СсылкиНаРеализации КАК СсылкиНаРеализации)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПередачаТоваровХранителюТовары.Номенклатура,
			|	ПередачаТоваровХранителюТовары.Характеристика,
			|	ВЫБОР
			|		КОГДА ПередачаТоваровХранителюТовары.СтатусУказанияСерий = 14
			|			ТОГДА ПередачаТоваровХранителюТовары.Серия
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
			|	КОНЕЦ,
			|	ПередачаТоваровХранителюТовары.Назначение,
			|	ПередачаТоваровХранителюТовары.Ссылка
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ОтчетОРозничныхПродажахТовары.Номенклатура,
			|	ОтчетОРозничныхПродажахТовары.Характеристика,
			|	ОтчетОРозничныхПродажахТовары.Серия,
			|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
			|	СУММА(ОтчетОРозничныхПродажахТовары.Количество),
			|	СРЕДНЕЕ(ОтчетОРозничныхПродажахТовары.Цена),
			|	ОтчетОРозничныхПродажахТовары.Ссылка
			|ИЗ
			|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
			|		ПО ОтчетОРозничныхПродажахТовары.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
			|			И РеестрДокументовСторно.Проведен
			|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
			|ГДЕ
			|	ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
			|	И (ОтчетОРозничныхПродажахТовары.Номенклатура, ОтчетОРозничныхПродажахТовары.Характеристика, ОтчетОРозничныхПродажахТовары.Серия) В
			|			(ВЫБРАТЬ
			|				ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|				ПроверяемыеТовары.Характеристика КАК Характеристика,			
			|				ПроверяемыеТовары.Серия КАК Серия
			|			ИЗ
			|				ПроверяемыеТовары КАК ПроверяемыеТовары)
			|	И ОтчетОРозничныхПродажахТовары.Ссылка В
			|			(ВЫБРАТЬ
			|				СсылкиНаРеализации.Ссылка КАК Ссылка
			|			ИЗ
			|				СсылкиНаРеализации КАК СсылкиНаРеализации)
			|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ОтчетОРозничныхПродажахТовары.Номенклатура,
			|	ОтчетОРозничныхПродажахТовары.Характеристика,
			|	ОтчетОРозничныхПродажахТовары.Серия,
			|	ОтчетОРозничныхПродажахТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	Назначение,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
			|	ТаблицаПроверяемыеТовары.Назначение КАК Назначение,
			|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации
			|ПОМЕСТИТЬ ДанныеДокументовВозврата
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
			|		ПО ПроверяемыеТовары.ДокументРеализации = ТаблицаПроверяемыеТовары.ДокументРеализации
			|			И ПроверяемыеТовары.Номенклатура = ТаблицаПроверяемыеТовары.Номенклатура
			|			И ПроверяемыеТовары.Характеристика = ТаблицаПроверяемыеТовары.Характеристика
			|			И ПроверяемыеТовары.Серия = ТаблицаПроверяемыеТовары.Серия
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
			|		ПО ТаблицаПроверяемыеТовары.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
			|			И РеестрДокументовСторно.Проведен
			|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
			|ГДЕ
			|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
			|	И ТаблицаПроверяемыеТовары.Ссылка <> &ЭтотВозвратСсылка
			|	И ТаблицаПроверяемыеТовары.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента <> &ЭтотВозвратСсылка
			|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПроверяемыеТовары.Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия,
			|	ТаблицаПроверяемыеТовары.Назначение,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	Назначение,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ПроверяемыеТовары.Серия КАК Серия,
			|	ПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
			|	СУММА(ПроверяемыеТовары.Количество) КАК Количество
			|ПОМЕСТИТЬ ПроверяемыеТоварыБезНазначения
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроверяемыеТовары.Номенклатура,
			|	ПроверяемыеТовары.Характеристика,
			|	ПроверяемыеТовары.Серия,
			|	ПроверяемыеТовары.ДокументРеализации
			|	
			|
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
			|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации
			|ПОМЕСТИТЬ ДанныеВозвратаБезНазначения
			|ИЗ
			|	ПроверяемыеТоварыБезНазначения КАК ПроверяемыеТоварыБезНазначения
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
			|		ПО ПроверяемыеТоварыБезНазначения.ДокументРеализации = ТаблицаПроверяемыеТовары.ДокументРеализации
			|			И ПроверяемыеТоварыБезНазначения.Номенклатура = ТаблицаПроверяемыеТовары.Номенклатура
			|			И ПроверяемыеТоварыБезНазначения.Характеристика = ТаблицаПроверяемыеТовары.Характеристика
			|			И ПроверяемыеТоварыБезНазначения.Серия = ТаблицаПроверяемыеТовары.Серия
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
			|		ПО ТаблицаПроверяемыеТовары.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
			|			И РеестрДокументовСторно.Проведен
			|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
			|ГДЕ
			|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
			|	И ТаблицаПроверяемыеТовары.Ссылка <> &ЭтотВозвратСсылка
			|	И ТаблицаПроверяемыеТовары.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента <> &ЭтотВозвратСсылка
			|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПроверяемыеТовары.Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия,
			|	ТаблицаПроверяемыеТовары.Назначение,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	ДокументРеализации
			|	
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДанныеРеализации.Номенклатура КАК Номенклатура,
			|	ДанныеРеализации.Характеристика КАК Характеристика,
			|	ДанныеРеализации.Серия КАК Серия,
			|	ДанныеРеализации.ДокументРеализации КАК ДокументРеализации,
			|	СУММА(ДанныеРеализации.Количество) КАК Количество
			|ПОМЕСТИТЬ ДанныеРеализацииБезНазначения
			|ИЗ
			|	ДанныеРеализации КАК ДанныеРеализации
			|
			|СГРУППИРОВАТЬ ПО
			|	ДанныеРеализации.Номенклатура,
			|	ДанныеРеализации.Характеристика,
			|	ДанныеРеализации.Серия,
			|	ДанныеРеализации.ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеТоварыБезНазначения.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ДанныеРеализацииБезНазначения.Количество, 0) - ЕСТЬNULL(ДанныеВозвратаБезНазначения.Количество, 0) - ЕСТЬNULL(ПроверяемыеТоварыБезНазначения.Количество, 0) КАК Количество,
			|	ПроверяемыеТоварыБезНазначения.Характеристика КАК Характеристика,
			|	ПроверяемыеТоварыБезНазначения.Серия КАК Серия,
			|	ПроверяемыеТоварыБезНазначения.ДокументРеализации КАК ДокументРеализации
			|ПОМЕСТИТЬ ОбщиеОстатки
			|ИЗ
			|	ПроверяемыеТоварыБезНазначения КАК ПроверяемыеТоварыБезНазначения
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРеализацииБезНазначения КАК ДанныеРеализацииБезНазначения
			|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозвратаБезНазначения КАК ДанныеВозвратаБезНазначения
			|			ПО (ДанныеРеализацииБезНазначения.ДокументРеализации = ДанныеВозвратаБезНазначения.ДокументРеализации)
			|				И (ДанныеРеализацииБезНазначения.Номенклатура = ДанныеВозвратаБезНазначения.Номенклатура)
			|				И (ДанныеРеализацииБезНазначения.Характеристика = ДанныеВозвратаБезНазначения.Характеристика)
			|				И (ДанныеРеализацииБезНазначения.Серия = ДанныеВозвратаБезНазначения.Серия)
			|		ПО (ДанныеРеализацииБезНазначения.ДокументРеализации = ПроверяемыеТоварыБезНазначения.ДокументРеализации)
			|			И (ДанныеРеализацииБезНазначения.Номенклатура = ПроверяемыеТоварыБезНазначения.Номенклатура)
			|			И (ДанныеРеализацииБезНазначения.Характеристика = ПроверяемыеТоварыБезНазначения.Характеристика)
			|			И (ДанныеРеализацииБезНазначения.Серия = ПроверяемыеТоварыБезНазначения.Серия)
			|ГДЕ
			|	(ВЫРАЗИТЬ(ПроверяемыеТоварыБезНазначения.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|			ИЛИ ВЫРАЗИТЬ(ПроверяемыеТоварыБезНазначения.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				И НЕ ПроверяемыеТоварыБезНазначения.ДокументРеализации.ВернутьМногооборотнуюТару)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ДанныеРеализации.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) КАК Количество,
			|	ПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ПроверяемыеТовары.Серия КАК Серия,
			|	ПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
			|	ПроверяемыеТовары.Назначение КАК Назначение
			|ПОМЕСТИТЬ ОстаткиПоНазначению
			|ИЗ
			|	ДанныеРеализации КАК ДанныеРеализации
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
			|		ПО ДанныеРеализации.ДокументРеализации = ДанныеДокументовВозврата.ДокументРеализации
			|			И ДанныеРеализации.Номенклатура = ДанныеДокументовВозврата.Номенклатура
			|			И ДанныеРеализации.Характеристика = ДанныеДокументовВозврата.Характеристика
			|			И ДанныеРеализации.Серия = ДанныеДокументовВозврата.Серия
			|			И ДанныеРеализации.Назначение = ДанныеДокументовВозврата.Назначение
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ПО ДанныеРеализации.ДокументРеализации = ПроверяемыеТовары.ДокументРеализации
			|			И ДанныеРеализации.Номенклатура = ПроверяемыеТовары.Номенклатура
			|			И ДанныеРеализации.Характеристика = ПроверяемыеТовары.Характеристика
			|			И ДанныеРеализации.Серия = ПроверяемыеТовары.Серия
			|			И ДанныеРеализации.Назначение = ПроверяемыеТовары.Назначение
			|ГДЕ
			|	(ВЫРАЗИТЬ(ПроверяемыеТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|			ИЛИ ВЫРАЗИТЬ(ПроверяемыеТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|				И НЕ ПроверяемыеТовары.ДокументРеализации.ВернутьМногооборотнуюТару)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ПроверяемыеТовары.Серия КАК Серия,
			|	ПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
			|	ВЫБОР КОГДА НЕ ОбщиеОстатки.Количество ЕСТЬ NULL И ОбщиеОстатки.Количество >= 0 ТОГДА
			|		ПроверяемыеТовары.Назначение
			|	ИНАЧЕ
			|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|	КОНЕЦ			КАК Назначение,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ЕСТЬNULL(ОбщиеОстатки.Количество, 0) = 0
			|					И ОстаткиПоНазначению.Количество ЕСТЬ NULL
			|				ТОГДА -ПроверяемыеТовары.Количество
			|			КОГДА ЕСТЬNULL(ОбщиеОстатки.Количество, 0) < ЕСТЬNULL(ОстаткиПоНазначению.Количество, 0)
			|				ТОГДА ЕСТЬNULL(ОбщиеОстатки.Количество, 0)
			|			ИНАЧЕ ЕСТЬNULL(ОстаткиПоНазначению.Количество, 0)
			|		КОНЕЦ) КАК Количество,
			|	ПроверяемыеТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПроверяемыеТовары.ДокументРеализации.Номер КАК НомерРеализации
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОбщиеОстатки КАК ОбщиеОстатки
			|		ПО (ОбщиеОстатки.ДокументРеализации = ПроверяемыеТовары.ДокументРеализации)
			|			И (ОбщиеОстатки.Номенклатура = ПроверяемыеТовары.Номенклатура)
			|			И (ОбщиеОстатки.Характеристика = ПроверяемыеТовары.Характеристика)
			|			И (ОбщиеОстатки.Серия = ПроверяемыеТовары.Серия)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиПоНазначению КАК ОстаткиПоНазначению
			|		ПО (ОстаткиПоНазначению.ДокументРеализации = ПроверяемыеТовары.ДокументРеализации)
			|			И (ОстаткиПоНазначению.Номенклатура = ПроверяемыеТовары.Номенклатура)
			|			И (ОстаткиПоНазначению.Характеристика = ПроверяемыеТовары.Характеристика)
			|			И (ОстаткиПоНазначению.Серия = ПроверяемыеТовары.Серия)
			|			И (ОстаткиПоНазначению.Назначение = ПроверяемыеТовары.Назначение)
			|			И (НЕ ПроверяемыеТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
			|ГДЕ
			|	(ОбщиеОстатки.Количество < 0
			|			ИЛИ ОбщиеОстатки.Количество ЕСТЬ NULL
			|			ИЛИ НЕ ПроверяемыеТовары.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|				И (ОстаткиПоНазначению.Количество < 0
			|					ИЛИ ОстаткиПоНазначению.Количество ЕСТЬ NULL))
			|	И (ВЫРАЗИТЬ(ПроверяемыеТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
			|			ИЛИ ВЫРАЗИТЬ(ПроверяемыеТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
			|			И НЕ ПроверяемыеТовары.ДокументРеализации.ВернутьМногооборотнуюТару)
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроверяемыеТовары.Номенклатура,
			|	ПроверяемыеТовары.Характеристика,
			|	ПроверяемыеТовары.Серия,
			|	ПроверяемыеТовары.ДокументРеализации,
			|	ПроверяемыеТовары.Номенклатура.ЕдиницаИзмерения,
			|	ПроверяемыеТовары.ДокументРеализации.Номер,
			|	ВЫБОР КОГДА НЕ ОбщиеОстатки.Количество ЕСТЬ NULL И ОбщиеОстатки.Количество >= 0 ТОГДА
			|		ПроверяемыеТовары.Назначение
			|	ИНАЧЕ
			|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
			|	КОНЕЦ";
			
			Запрос.УстановитьПараметр("ТаблицаПроверяемыеТовары", ТаблицаПроверяемыеТовары);
			Запрос.УстановитьПараметр("ЭтотВозвратСсылка", ДокументПродажи.Ссылка);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
			|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
			|	ВозвратТоваровОтКлиентаТовары.Серия КАК Серия,
			|	ВозвратТоваровОтКлиентаТовары.Количество
			|ПОМЕСТИТЬ ЗаполняемыеТовары
			|ИЗ
			|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекККМТовары.Ссылка.КассоваяСмена КАК КассоваяСмена,
			|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
			|	ЧекККМТовары.Номенклатура КАК Номенклатура,
			|	ЧекККМТовары.Характеристика КАК Характеристика,
			|	ЧекККМТовары.Серия КАК Серия,
			|	СУММА(ЧекККМТовары.Количество) КАК Количество,
			|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации
			|ПОМЕСТИТЬ ЧекиККМ
			|ИЗ
			|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
			|ГДЕ
			|	ЧекККМТовары.Ссылка.Проведен
			|	И ЧекККМТовары.Ссылка = &ЧекККМ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЧекККМТовары.Ссылка,
			|	ЧекККМТовары.Номенклатура,
			|	ЧекККМТовары.Характеристика,
			|	ЧекККМТовары.Серия
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументРеализации,
			|	КассоваяСмена,
			|	Номенклатура,
			|	Характеристика,
			|	Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
			|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
			|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
			|	ЧекККМВозвратТовары.Серия КАК Серия,
			|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
			|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации
			|ПОМЕСТИТЬ ЧекиККМВозврат
			|ИЗ
			|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
			|ГДЕ
			|	ЧекККМВозвратТовары.Ссылка.Проведен
			|	И ЧекККМВозвратТовары.Ссылка.КассоваяСмена В (ВЫБРАТЬ КассоваяСмена ИЗ ЧекиККМ)
			|	И ЧекККМВозвратТовары.КоличествоУпаковок <> 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ЧекККМВозвратТовары.Ссылка,
			|	ЧекККМВозвратТовары.Номенклатура,
			|	ЧекККМВозвратТовары.Характеристика,
			|	ЧекККМВозвратТовары.Серия,
			|	ЧекККМВозвратТовары.Ссылка.Дата
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументРеализации,
			|	Номенклатура,
			|	Характеристика,
			|	Серия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
			|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
			|	ТаблицаПроверяемыеТовары.Ссылка
			|ПОМЕСТИТЬ ДанныеВозврата
			|ИЗ
			|	Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументовСторно
			|		ПО ТаблицаПроверяемыеТовары.Ссылка = РеестрДокументовСторно.СторнируемыйДокумент
			|			И РеестрДокументовСторно.Проведен
			|			И НЕ РеестрДокументовСторно.ДополнительнаяЗапись
			|ГДЕ
			|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
			|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
			|	И ТаблицаПроверяемыеТовары.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента <> &ДокументВозврата
			|	И ТаблицаПроверяемыеТовары.Ссылка.ЧекККМ = &ЧекККМ
			|	И РеестрДокументовСторно.Ссылка ЕСТЬ NULL
			|	
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПроверяемыеТовары.Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика,
			|	ТаблицаПроверяемыеТовары.Серия,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации,
			|	ТаблицаПроверяемыеТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	Серия,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекиККМ.ДокументРеализации КАК ДокументРеализации,
			|	ЧекиККМ.Номенклатура КАК Номенклатура,
			|	ЧекиККМ.Характеристика КАК Характеристика,
			|	ЧекиККМ.Серия КАК Серия,
			|	ЕСТЬNULL(ЧекиККМ.Количество, 0) - ЕСТЬNULL(ЗаполняемыеТовары.Количество, 0) - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
			|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
			|	ЧекиККМ.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЧекиККМ.ДокументРеализации.Номер КАК НомерРеализации
			|ИЗ
			|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМ КАК ЧекиККМ
			|			ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
			|			ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
			|				И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
			|				И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
			|				И ЧекиККМ.Серия = ЧекиККМВозврат.Серия
			|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
			|			ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.Ссылка.ЧекККМ
			|				И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
			|				И ЧекиККМ.Характеристика = ДанныеВозврата.Характеристика
			|				И ЧекиККМ.Серия = ДанныеВозврата.Серия
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
			|			ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
			|		ПО ЗаполняемыеТовары.Номенклатура = ЧекиККМ.Номенклатура
			|			И ЗаполняемыеТовары.Характеристика = ЧекиККМ.Характеристика
			|			И ЗаполняемыеТовары.Серия = ЧекиККМ.Серия
			|ГДЕ
			|	ЕСТЬNULL(ЧекиККМ.Количество, 0) - ЕСТЬNULL(ЗаполняемыеТовары.Количество, 0) - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) < 0
			|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаРеализации УБЫВ";
			Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыеТовары);
			Запрос.УстановитьПараметр("ДокументВозврата", ДокументПродажи.Ссылка);
			Запрос.УстановитьПараметр("ЧекККМ", ДокументПродажи.ЧекККМ);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			Отказ = Истина;
			СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Результат, ВозвратПоЧеку);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

// Формирует отчет "Отклонения от условий продаж" путем выполнения пакета запросов. 
// 
// Параметры:
// ДокументПродажи - ДокументОбъект -Документ, для которого необходимо осуществить проверки
// ТаблицаОтчета - ТабличныйДокумент - Табличный документ отчета.
//
Процедура СформироватьОтчетОтклоненияОтУсловийПродаж(Знач ДокументПродажи, ТаблицаОтчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенПродажи = Константы.ВидМаксимальноДопустимыхЦенПродажи.Получить();
	ВидМинимальноДопустимыхЦенПродажи  = Константы.ВидМинимальноДопустимыхЦенПродажи.Получить();
	ПроверятьДиапазонЦен               = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенПродажи) Или ЗначениеЗаполнено(ВидМинимальноДопустимыхЦенПродажи);
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	МассивПроверок          = Новый Массив();
	ТипДокумента            = ТипЗнч(ДокументПродажи);
	ИмяТаблицы              = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи);
	ИмяТЧ                   = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ         = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	ОперацииПередачиТоваров = ОперацииПередачиТоваров();
	ОперацииВозвратаПереданныхТоваров = ОперацииВозвратаПереданныхТоваров();
	
	ТекстЗапросаПоШапке = "
		|ВЫБРАТЬ
		|	ДокументПродажи.Дата КАК Дата,
		|	ДокументПродажи.Соглашение КАК Соглашение,
		|	&ТекстЗамены1,
		|	&ТекстЗамены2,
		|	&ТекстЗамены3,
		|	&ТекстЗамены4,
		|	&ТекстЗамены5,
		|	&ТекстЗамены6
		|ИЗ
		|	&ИмяТаблицы КАК ДокументПродажи
		|ГДЕ
		|	ДокументПродажи.Ссылка = &ДокументПродажи
		|";
	
	ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке, "&ИмяТаблицы", ИмяТаблицы);
	
	ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке, "&ТекстЗамены1,", ?(ИмяТаблицы = "Документ.ЗаказКлиента" ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента","
		|	ДокументПродажи.ГрафикОплаты КАК ГрафикОплаты,
		|	ДокументПродажи.СуммаДокумента КАК СуммаДокумента,
		|","
		|	NULL КАК ГрафикОплаты,
		|	0 КАК СуммаДокумента,
		|"));

	ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке, "&ТекстЗамены2,", ?(ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю","
		|	NULL КАК ПорядокРасчетов,
		|","
		|	ДокументПродажи.ПорядокРасчетов КАК ПорядокРасчетов,
		|"));

	ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке, "&ТекстЗамены3,", ?(ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента","
		|	ДокументПродажи.СпособКомпенсации КАК СпособКомпенсации,
		|	ДокументПродажи.СуммаЗамены КАК СуммаЗамены,
		|","
		|	NULL КАК СпособКомпенсации,
		|	0 КАК СуммаЗамены,
		|"));
	
	ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке, "&ТекстЗамены4,", ?(ИмяТаблицы = "Документ.АктВыполненныхРабот","
		|	NULL КАК ХозяйственнаяОперация,
		|	Ложь КАК ТребуетсяЗалогЗаТару,
		|	ДокументПродажи.АктПоЗаказам КАК АктПоЗаказам,
		|","
		|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДокументПродажи.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|	ЛОЖЬ КАК АктПоЗаказам,
		|"));
	
	ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке, "&ТекстЗамены5,", ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг","
		|	ДокументПродажи.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ДокументПродажи.РеализацияПоЗаказам КАК РеализацияПоЗаказам,
		|","
		|	0 КАК СуммаВзаиморасчетов,
		|	ЛОЖЬ КАК РеализацияПоЗаказам,
		|"));
	
	ТекстЗапросаПоШапке = СтрЗаменить(ТекстЗапросаПоШапке, "&ТекстЗамены6", ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","
		|	ДокументПродажи.Типовое КАК Типовое,
		|	ДокументПродажи.Типовое КАК СегментНоменклатуры,
		|	ДокументПродажи.ВозвращатьМногооборотнуюТару КАК ВозвратМногооборотнойТары
		|","
		|	ЛОЖЬ КАК Типовое,
		|	NULL КАК СегментНоменклатуры,
		|" + ?(ИмяТаблицы = "Документ.АктВыполненныхРабот","
		|	ЛОЖЬ КАК ВозвратМногооборотнойТары
		|","
		|	ДокументПродажи.ВернутьМногооборотнуюТару КАК ВозвратМногооборотнойТары
		|")));
	
	ЗапросПоШапке = Новый Запрос(ТекстЗапросаПоШапке);
	
	ЗапросПоШапке.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьАвтоматическиеСкидки             = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ПроверятьСкидкиНаценки                       = ИспользоватьАвтоматическиеСкидки Или ИспользоватьРучныеСкидки;	
	ИспользоватьЦеновыеГруппы                    = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	
	ИспользоватьОграниченияПоПользователям       = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	ИспользоватьОграниченияПоСоглашениям         = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ОграничиватьРучныеСкидки                     = ИспользоватьРучныеСкидки И (ИспользоватьОграниченияПоПользователям ИЛИ ИспользоватьОграниченияПоСоглашениям);
	
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	// СОГЛАШЕНИЕ С КЛИЕНТОМ
	Если ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");

		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ПроверятьДиапазонЦен Или Не ВыборкаПоШапке.Типовое Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		КонецЕсли;
		
		Если Не ВыборкаПоШапке.Типовое Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияТипового");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального");
			МассивПроверок.Добавить("КорректностьЭтаповОплатыСоглашения");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповОплатыСоглашения");
			Если ИспользоватьЦеновыеГруппы Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаЦеновыеГруппы");
				МассивПроверок.Добавить("СоответствиеЦеновыхГруппУсловиямПродаж");
			КонецЕсли;
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПоШапке.СегментНоменклатуры) Тогда
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
		КонецЕсли;
		
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
	// ЗАКАЗ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
		КонецЕсли;
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
	
		// Проверка корректности этапов оплаты осуществляется только для
		// заказов, в которых не все строки отменены и  в которых указан график оплаты.
		
		Если ОперацииПередачиТоваров.Найти(ВыборкаПоШапке.ХозяйственнаяОперация) = Неопределено
			И ВыборкаПоШапке.СуммаДокумента <> 0 Тогда
			
			Если ВыборкаПоШапке.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ОперацииПередачиТоваров.Найти(ВыборкаПоШапке.ХозяйственнаяОперация) = Неопределено Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
				
		КонецЕсли;
		
	// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ
	
	ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		
		Если Не ВыборкаПоШапке.РеализацияПоЗаказам Тогда
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		КонецЕсли;
		
		Если (Не ВыборкаПоШапке.РеализацияПоЗаказам Или ВыборкаПоШапке.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
			И ИспользоватьСоглашенияСКлиентами Тогда
			
			Если ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаСуммыВзаиморасчетов");
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("СоответствиеСуммыПредоплатыГрафикуОплат");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки И ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
	// ЗАЯВКА НА ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");

		НужнаЗаменаТоваров = ВыборкаПоШапке.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ЗаменитьТовары;
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			Если НужнаЗаменаТоваров Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
		КонецЕсли;
		Если НужнаЗаменаТоваров И ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
	
		// Проверка корректности этапов оплаты осуществляется только для
		// заявок, в которых не все строки отменены и  в которых указан график оплаты.
		Если ОперацииВозвратаПереданныхТоваров.Найти(ВыборкаПоШапке.ХозяйственнаяОперация) = Неопределено
			И ВыборкаПоШапке.СуммаЗамены > 0
			И ВыборкаПоШапке.СуммаДокумента <> 0
			И ВыборкаПоШапке.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
			И НужнаЗаменаТоваров Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
			МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ВыборкаПоШапке.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И НужнаЗаменаТоваров Тогда
			
				Если ИспользоватьОграниченияПоПользователям Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
					МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
					МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
					МассивПроверок.Добавить("ЦеновыеГруппы");
					МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
					МассивПроверок.Добавить("ТаблицаОграничений");
				КонецЕсли;
				
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
				МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
				МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
				
		КонецЕсли;
		
	// ЗАДАНИЕ ТОРГОВОМУ ПРЕДСТАВИТЕЛЮ
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
		КонецЕсли;
			
	// АКТ ВЫПОЛНЕННЫХ РАБОТ
	
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		МассивПроверок.Добавить("ВременнаяТаблицаТоварыПредварительная");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыПодготовка");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборыДополнительно");
		МассивПроверок.Добавить("ВременнаяТаблицаНаборы");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если Не ВыборкаПоШапке.АктПоЗаказам Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			
			Если ИспользоватьСоглашенияСКлиентами Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИспользоватьСоглашенияСКлиентами Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
			МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
				МассивПроверок.Добавить("ЦеновыеГруппы");
				МассивПроверок.Добавить("ОграничениеРучныхСкидокПоГруппамИПользователям");
				МассивПроверок.Добавить("ТаблицаОграничений");
			КонецЕсли;
			
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
				
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УчитыватьСкидкиНаценки = Не ((ИмяТаблицы = "Справочник.СоглашенияСКлиентами") 
		Или (ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю")
		Или (ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента"));
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок

	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата",          ВыборкаПоШапке.Дата);
	ПараметрыЗапроса.Вставить("ЭтоСоглашение", ТипДокумента = Тип("СправочникОбъект.СоглашенияСКлиентами"));
	ПараметрыЗапроса.Вставить("Ссылка",        ДокументПродажи);
	ПараметрыЗапроса.Вставить("Пользователь",  Пользователи.АвторизованныйПользователь());
	ПараметрыЗапроса.Вставить("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	ПараметрыЗапроса.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВыборкаПоШапке.ВозвратМногооборотнойТары);
	ПараметрыЗапроса.Вставить("ТребуетсяЗалогЗаТару", ВыборкаПоШапке.ТребуетсяЗалогЗаТару);
	ПараметрыЗапроса.Вставить("СуммаВзаиморасчетовРеализации", ВыборкаПоШапке.СуммаВзаиморасчетов);
	ПараметрыЗапроса.Вставить("СуммаЗалогаПоРеализации", 0);
	ПараметрыЗапроса.Вставить("НеЗаданаСуммаЗалога", Истина);
	ПараметрыЗапроса.Вставить("НеПроверятьКодСтроки", ТипДокумента <> Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
	ПараметрыЗапроса.Вставить("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.Ссылка, "Организация")));
	ПараметрыЗапроса.Вставить("ГрафикВСоглашении", ТипДокумента = Тип("ДокументОбъект.АктВыполненныхРабот")
	                                               Или ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг"));
	
	Если ИспользоватьОграниченияПоСоглашениям Тогда
		ПараметрыЗапроса.Вставить("СоглашениеСКлиентом", ВыборкаПоШапке.Соглашение);
	КонецЕсли;
	
	ГруппаПользователейСНастройкойПродаж = НастройкиПродажДляПользователейСервер.ПолучитьГруппуПользователяСНастройкойПродажДляПользователя(
		Пользователи.АвторизованныйПользователь(), 
		"СкидкиНаценки"
	);
	ПараметрыЗапроса.Вставить("ГруппаПользователей", ГруппаПользователейСНастройкойПродаж);

	ПоСсылке = Истина;
	
	ИспользоватьПроверкиПоЦенам = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ВыборкаПоШапке.Дата) 
		И (МассивПроверок.Найти("ВхождениеЦенВДопустимыйДиапазон") <> Неопределено
			Или МассивПроверок.Найти("СоответствиеТоваровУсловиямПродаж") <> Неопределено);
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаДокументПродажи" Тогда
		
			СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
		
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, 
																		ПараметрыЗапроса, 
																		ДокументПродажи, 
																		ИмяТаблицы, 
																		УчитыватьСкидкиНаценки, 
																		ПоСсылке,
																		ИспользоватьПроверкиПоЦенам);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦеновыеГруппы" Тогда
		
			СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
		
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямПродаж" Тогда
			
			СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы, ИспользоватьПроверкиПоЦенам);
			
		ИначеЕсли ТекЭлемент = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда
			
			СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда
			
			СформироватьЗапросПринадлежностьТоваровСегментуНоменклатуры(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СформироватьЗапросПринадлежностьПартнераСегментуПартнеров(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса, ИспользоватьПроверкиПоЦенам);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения(ТекстЗапроса, ИспользоватьЦеновыеГруппы, ИспользоватьОграниченияПоПользователям, ИспользоватьОграниченияПоСоглашениям);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграниченияРучныхСкидок" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграниченияРучныхСкидок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияТипового" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСуммыВзаиморасчетов" Тогда
			
			СформироватьЗапросВременнаяТаблицаСуммыВзаиморасчетов(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда
			
			СформироватьЗапросСоответствиеСуммыПредоплатыГрафикуОплат(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет(); 
	
	МассивОтклоненийШапки         = Новый Массив;
	МассивОтклоненийСкидкиНаценки = Новый Массив;
	ДеревоОтклоненийТовары        = Отчеты.ОтклоненияОтУсловийПродаж.ИнициализироватьДеревоОтклонений();
	ДеревоОтклоненийГруппЦен      = Отчеты.ОтклоненияОтУсловийПродаж.ИнициализироватьДеревоОтклонений();
	ДеревоОтклоненийЭтапыОплаты   = Отчеты.ОтклоненияОтУсловийПродаж.ИнициализироватьДеревоОтклонений();
	
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахШапкаДокументаПродажи(Выборка,ДокументПродажи,Ложь,МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямПродаж" Тогда
		
			СообщитьОбОшибкахТоварыДокументаПродажи(Выборка,ДокументПродажи,Ложь,ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахСоответствиеГруппЦенНоменклатурыУсловиямПродаж(Выборка, ДокументПродажи, Ложь, ДеревоОтклоненийГруппЦен);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда
			
			СообщитьОбОшибкахПринадлежностьТоваровСегментуНоменклатуры(Выборка, ДокументПродажи, Ложь, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СообщитьОбОшибкахПринадлежностьПартнераСегментуПартнеров(Выборка, ДокументПродажи, Ложь, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументПродажи, Ложь, ДеревоОтклоненийЭтапыОплаты, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументПродажи, Ложь, ПроверятьСкидкиНаценки, ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументПродажи,Ложь,ДеревоОтклоненийТовары);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СообщитьОбОшибкахКорректностьЭтаповОплатыСоглашения(Выборка, ДокументПродажи, Ложь, ДеревоОтклоненийЭтапыОплаты);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СообщитьОбОшибкахКорректностьКоличестваЭтаповОплатыСоглашения(Выборка, ДокументПродажи, Ложь, МассивОтклоненийШапки);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда
			СообщитьОбОшибкахСоответствиеСуммыПредоплатыГрафикуОплат(Выборка, ДокументПродажи, Ложь, МассивОтклоненийШапки);
		КонецЕсли;
	
	КонецЦикла;
	ЕстьОтклонения = МассивОтклоненийШапки.Количество() > 0 
		ИЛИ ДеревоОтклоненийГруппЦен.Строки.Количество() > 0 
		ИЛИ ДеревоОтклоненийТовары.Строки.Количество() > 0 
		ИЛИ ДеревоОтклоненийЭтапыОплаты.Строки.Количество() > 0
		ИЛИ МассивОтклоненийСкидкиНаценки.Количество() > 0;
	
	Отчеты.ОтклоненияОтУсловийПродаж.ВывестиЗаголовокОтчета(ТаблицаОтчета, ЕстьОтклонения);
	
	Если МассивОтклоненийШапки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияВОбластьШапки(МассивОтклоненийШапки, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийГруппЦен.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ДокументПродажи, ДеревоОтклоненийГруппЦен, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийТовары.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияТоварыДокументаПродажи(ДокументПродажи, ДеревоОтклоненийТовары, ТаблицаОтчета);
	КонецЕсли;
	
	Если ДеревоОтклоненийЭтапыОплаты.Строки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияЭтапыОплатыДокументаПродажи(ДокументПродажи, ДеревоОтклоненийЭтапыОплаты, ТаблицаОтчета);
	КонецЕсли;
	
	Если МассивОтклоненийСкидкиНаценки.Количество() > 0 Тогда
		Отчеты.ОтклоненияОтУсловийПродаж.ВывестиОтклоненияСкидкиНаценки(МассивОтклоненийСкидкиНаценки, ТаблицаОтчета);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняет проверку возможности ввода документа на основании соглашения в зависимости от хозяйственной операции.
//
// Параметры:
//	ИмяДокумента       - Строка - имя документа, для которого определяются допустимые операции.
//	ОперацияСоглашения - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция соглашения.
//
Процедура ПроверитьВозможностьВводаНаОснованииСоглашения(ИмяДокумента, ОперацияСоглашения) Экспорт
	
	ОперацииДокумента = ОбщегоНазначенияУТ.ДопустимыеХозяйственныеОперацииДокумента(ИмяДокумента);
	
	Если ОперацииДокумента.Найти(ОперацияСоглашения) = Неопределено Тогда
		ТекстОшибки = НСтр("ru = 'Нельзя выполнить ввод документа на основании соглашения с операцией ""%Операция%"".'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", ОперацияСоглашения);
		
		ВызватьИсключение ТекстОшибки;
	КонецЕсли
	
КонецПроцедуры

// Возвращает текст ошибки контроля остатков.
//
// Параметры:
// 	ВариантОформления - ПеречислениеСсылка.ВариантыОформленияПродажи
//
// Возвращаемое значение:
//  Строка - текст ошибки контроля остатков
//
Функция ТекстОшибкиНетТоваровДоступныхДляОтгрузки(ВариантОформления) Экспорт
	
	Если ВариантОформления = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		ТекстОшибки = НСтр("ru = 'Для начала процесса отгрузки убедитесь, что для услуг с вариантом оформления ""%1"" указано действие ""Отгрузить"".'"); 
	ИначеЕсли ВариантОформления = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
		ТекстОшибки = НСтр("ru = 'Для начала процесса отгрузки убедитесь, что для услуг и работ с вариантом оформления ""%1"" указано действие ""Отгрузить"".'");
	Иначе
		ТекстОшибки = НСтр("ru = 'Для начала процесса отгрузки убедитесь, что для товаров, услуг и работ с вариантом оформления ""%1"" указано действие ""Отгрузить"".'");
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(ТекстОшибки, ВариантОформления);
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииРасчетаЦенИСкидокВДокументахПродажи

// Заполняет реквизит "Цена" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения:
// 			* Дата 					- Дата - Дата документа (Обязательное)
// 			* Валюта 				- СправочникСсылка.Валюты - Валюта документа (Обязательное)
// 			* Соглашение 			- СправочникСсылка.СоглашенияСКлиентами - если параметр отсутствует, 
// 									значит должен быть заполнен параметр "ВидЦены" (Обязательное).
// 			* ВидЦены 				- СправочникСсылка.ВидыЦен - если параметр отсутствует, 
// 									значит должен быть заполнен параметр "Соглашение" (Обязательное).
// 			* ПоляЗаполнения		- Строка - Строка с перечислением заполняемых полей в таблице (Необязательное)
// 									Значение по умолчанию: "Цена" 
// 									Дополнительные поля: "ВидЦены, СрокПоставки, СтавкаНДС".
// 			* КолонкиПоЗначению		- Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" 
// 									в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений" (Необязательное).
// 			* ДругиеИменаКолонок	- Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" 
// 									в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений" (Необязательное).
// 		СтруктураДействий - Структура - Стандартная структура действий со строками 
// 									для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ".
// 		КэшированныеЗначения - Структура - Структура кэшированных значений.
// 		
// Возвращаемое значение:
//   Булево - Истина, если цены успешно заполнены.
//
Функция ЗаполнитьЦеныПоСебестоимости(ТабличнаяЧасть, ВыделенныеСтроки, ПараметрыЗаполнения, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ЦеныЗаполнены = Ложь;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Параметры заполнения не указаны'");
	КонецЕсли;
	
	// Получение структуры параметров по умолчанию
	Параметры = Новый Структура(
		"ПоляЗаполнения,  ДругиеИменаКолонок",
		"Цена", Новый Структура);
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не Параметры.Свойство("Дата") 
		Или Не Параметры.Свойство("Организация") 
		Или Не Параметры.Свойство("Валюта") 
		Или Не Параметры.Свойство("Склад") Тогда
		
		ВызватьИсключение НСтр("ru = 'В параметрах заполнения должны быть указаны ""Дата"", ""Организация"", ""Склад""'");
		
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		ТабличнаяЧасть,
		ВыделенныеСтроки,
		"НомерСтроки, Номенклатура, Характеристика, Назначение",
		Неопределено,
		Параметры.ДругиеИменаКолонок);
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Валюта", Параметры.Валюта);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Параметры.Организация));

	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыТоваровСписания("втТаблицаТоварыСписания");
	
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыСебестоимостей("втТаблицаСебестоимости", "втТаблицаТоварыСписания");
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	втТаблицаТоварыСписания.НомерСтроки КАК НомерСтроки,
	|	&втТаблицаСебестоимостиЦена КАК Цена,
	|	втТаблицаСебестоимости.ЦенаЗабаланс КАК ЦенаЗабаланс
	|ИЗ
	|	втТаблицаТоварыСписания КАК втТаблицаТоварыСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСебестоимости КАК втТаблицаСебестоимости
	|		ПО (втТаблицаСебестоимости.НомерСтроки = втТаблицаТоварыСписания.НомерСтроки)";
	
	Если ПараметрыЗаполнения.Свойство("БезНДС") 
			И ПараметрыЗаполнения.БезНДС = Истина Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&втТаблицаСебестоимостиЦена", "втТаблицаСебестоимости.ЦенаБезНДС" );
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&втТаблицаСебестоимостиЦена", "втТаблицаСебестоимости.Цена" );
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
		Если СтруктураДействий <> Неопределено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИнициализацииПравилПродаж

// Возвращает структуру условий продаж по торговому соглашению.
//
// Параметры:
// 	Соглашение - СправочникСсылка.СоглашенияСКлиентами - ссылка на соглашение с клиентом
// 	УчитыватьГруппыСкладов - Булево
// 	ИсключитьГруппыСкладовДоступныеВЗаказах - Булево
//
// Возвращаемое значение:
// 	Структура - Структура, включающая условия продаж.
//
Функция ПолучитьУсловияПродаж(Знач Соглашение,
	                          Знач УчитыватьГруппыСкладов=Ложь,
	                          Знач ИсключитьГруппыСкладовДоступныеВЗаказах=Ложь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
		|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
		|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
		|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
		|	СоглашениеСКлиентом.Организация                                 КАК Организация,
		|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
		|	ВЫБОР 
		|		КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов
		|			ТОГДА СоглашениеСКлиентом.Валюта
		|		ИНАЧЕ СоглашениеСКлиентом.ВалютаВзаиморасчетов
		|	КОНЕЦ                                                           КАК ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА &ИспользоватьГрафикиОплаты
		|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|	КОНЕЦ                                                           КАК ГрафикОплаты,
		|	ВЫБОР
		|		КОГДА &ИспользоватьГрафикиОплаты
		|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты
		|		ИНАЧЕ СоглашениеСКлиентом.ФормаОплаты
		|	КОНЕЦ                                                           КАК ФормаОплаты,
		|	СоглашениеСКлиентом.ОплатаВВалюте                               КАК ОплатаВВалюте,
		|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	СоглашениеСКлиентом.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
		|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
		|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
		|	СоглашениеСКлиентом.Период                                      КАК Период,
		|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
		|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
		|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
		|			ТОГДА СоглашениеСКлиентом.Склад
		|		КОГДА СоглашениеСКлиентом.Склад.ЭтоГруппа
		|				И &УчитыватьГруппыСкладов
		|				И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
		|			ТОГДА СоглашениеСКлиентом.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СоглашениеСКлиентом.СегментНоменклатуры                           КАК СегментНоменклатуры,
		|	СоглашениеСКлиентом.Типовое                                       КАК Типовое,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                            КАК ДатаНачалаДействия,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                         КАК ДатаОкончанияДействия,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                         КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                   КАК СпособРасчетаВознаграждения,
		|	СоглашениеСКлиентом.ПроцентВознаграждения                         КАК ПроцентВознаграждения,
		|	СоглашениеСКлиентом.УдержатьВознаграждение                        КАК УдержатьВознаграждение,
		|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                      КАК ОграничиватьРучныеСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                           КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                          КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов              КАК ИспользуютсяДоговорыКонтрагентов,
		|	СоглашениеСКлиентом.ПорядокРасчетов                               КАК ПорядокРасчетов,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                  КАК ДоступноВнешнимПользователям,
		|	СоглашениеСКлиентом.Статус                                        КАК СтатусСоглашения,
		|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                  КАК ВозвращатьМногооборотнуюТару,
		|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары                КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	СоглашениеСКлиентом.КалендарьВозвратаТары                         КАК КалендарьВозвратаТары,
		|	СоглашениеСКлиентом.ТребуетсяЗалогЗаТару                          КАК ТребуетсяЗалогЗаТару,
		|	СоглашениеСКлиентом.ВозможнаРеализацияБезПереходаПраваСобственности КАК ВозможнаРеализацияБезПереходаПраваСобственности,
		|	СоглашениеСКлиентом.ОбеспечиватьЗаказыОбособленно                 КАК ОбеспечиватьЗаказыОбособленно,
		|	СоглашениеСКлиентом.Календарь                                     КАК Календарь,
		|	СоглашениеСКлиентом.ЧастотаЗаказа                                 КАК ЧастотаЗаказа,
		|	СоглашениеСКлиентом.МинимальнаяСуммаЗаказа                        КАК МинимальнаяСуммаЗаказа,
		|	СоглашениеСКлиентом.НаправлениеДеятельности                       КАК НаправлениеДеятельности,
		|	СоглашениеСКлиентом.КомиссионерВедетУчетПоРНПТ                    КАК КомиссионерВедетУчетПоРНПТ,
		|	СоглашениеСКлиентом.КомиссионныеПродажи25                         КАК НоваяСхемаКомиссии
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	СоглашениеСКлиентом.Ссылка = &Соглашение");
	
		Запрос.УстановитьПараметр("Соглашение",                Соглашение);
		Запрос.УстановитьПараметр("ВыборГруппыСкладов",        Справочники.Склады.ВариантыВыбораГруппыСкладов(ИсключитьГруппыСкладовДоступныеВЗаказах));
		Запрос.УстановитьПараметр("УчитыватьГруппыСкладов",    УчитыватьГруппыСкладов);
		Запрос.УстановитьПараметр("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка          = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		СтруктураРеквизитов = ШаблонУсловийПродаж();
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
			СтруктураРеквизитов.Вставить("ИспользуютсяДоговорыКонтрагентов", Ложь);
		КонецЕсли;
		
		Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает структуру условий продаж по партнеру.
//
// Параметры:
//   Партнер           - СправочникСсылка.Партнеры - на партнера, для которого необходимо получить условия продаж.
//   ПараметрыОтбора   - Структура - содержит параметры отбора соглашения.
//   СоглашенияСКлиентамиПрименимы - Булево - признак применяемости соглашений.
//
// Возвращаемое значение:
//   Структура - содержит условия продаж по умолчанию.
//
Функция ПолучитьУсловияПродажПоУмолчанию(
			Знач Партнер = Неопределено, ПараметрыОтбора = Неопределено, СоглашенияСКлиентамиПрименимы = Истина) Экспорт
	
	СтруктураРеквизитов = ШаблонУсловийПродаж();
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
									   И СоглашенияСКлиентамиПрименимы;
	ИспользоватьДоговорыСКлиентами	 = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		
		// Учтем вариант использования соглашений
		ИспользоватьТиповыеСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
		ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
		
		ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
		ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
		
		ВсеПараметрыОтбора = Новый Структура();
		ВсеПараметрыОтбора.Вставить("ТолькоТиповые",                           ТолькоТиповые);
		ВсеПараметрыОтбора.Вставить("ТолькоИндивидуальные",                    ТолькоИндивидуальные);
		ВсеПараметрыОтбора.Вставить("ТолькоИспользуемыеВРаботеТП",             Ложь);
		ВсеПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Ложь);
		ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
		ВсеПараметрыОтбора.Вставить("ХозяйственныеОперации",                   Неопределено);
		ВсеПараметрыОтбора.Вставить("ВыбранноеСоглашение",                     Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		ВсеПараметрыОтбора.Вставить("КомиссионныеПродажи25",                   Неопределено);
		ВсеПараметрыОтбора.Вставить("Валюта",                                  Неопределено);
		
		Если ПараметрыОтбора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
		КонецЕсли;
		
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
			|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
			|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
			|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
			|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
			|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
			|	СоглашениеСКлиентом.Организация                                 КАК Организация,
			|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
			|	ВЫБОР 
			|		КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов
			|			ТОГДА СоглашениеСКлиентом.Валюта
			|		ИНАЧЕ СоглашениеСКлиентом.ВалютаВзаиморасчетов
			|	КОНЕЦ                                                           КАК ВалютаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|	КОНЕЦ                                                             КАК ГрафикОплаты,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты
			|		ИНАЧЕ СоглашениеСКлиентом.ФормаОплаты
			|	КОНЕЦ                                                           КАК ФормаОплаты,
			|	СоглашениеСКлиентом.ОплатаВВалюте                               КАК ОплатаВВалюте,
			|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
			|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
			|	СоглашениеСКлиентом.Период                                      КАК Период,
			|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
			|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
			|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
			|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
			|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ВЫБОР
			|		КОГДА
			|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		КОГДА
			|			СоглашениеСКлиентом.Склад.ЭтоГруппа
			|			И &УчитыватьГруппыСкладов
			|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|	КОНЕЦ КАК Склад,
			|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
			|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
			|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
			|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
			|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                    КАК ОграничиватьРучныеСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
			|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
			|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
			|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
			|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
			|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
			|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
			|	СоглашениеСКлиентом.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
			|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
			|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
			|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
			|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
			|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	СоглашениеСКлиентом.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
			|	СоглашениеСКлиентом.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
			|	СоглашениеСКлиентом.ОбеспечиватьЗаказыОбособленно               КАК ОбеспечиватьЗаказыОбособленно,
			|	СоглашениеСКлиентом.ВозможнаРеализацияБезПереходаПраваСобственности КАК ВозможнаРеализацияБезПереходаПраваСобственности,
			|	СоглашениеСКлиентом.Календарь                                   КАК Календарь,
			|	СоглашениеСКлиентом.ЧастотаЗаказа                               КАК ЧастотаЗаказа,
			|	СоглашениеСКлиентом.МинимальнаяСуммаЗаказа                      КАК МинимальнаяСуммаЗаказа,
			|	СоглашениеСКлиентом.НаправлениеДеятельности                     КАК НаправлениеДеятельности,
			|	СоглашениеСКлиентом.КомиссионерВедетУчетПоРНПТ                  КАК КомиссионерВедетУчетПоРНПТ,
			|	СоглашениеСКлиентом.КомиссионныеПродажи25                       КАК НоваяСхемаКомиссии
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
			|ГДЕ
			|	НЕ СоглашениеСКлиентом.ПометкаУдаления И
			|	СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	И СоглашениеСКлиентом.Типовое
			|	И НЕ &ТолькоИндивидуальные
			|	И (НЕ &ОтборПоОперации
			|		ИЛИ СоглашениеСКлиентом.ХозяйственнаяОперация В(&ХозяйственныеОперации))
			|	И &ТолькоИспользуемыеВРаботеТП
			|	И ((НЕ &ОтборКомиссионныеПродажи25)
			|			ИЛИ СоглашениеСКлиентом.КомиссионныеПродажи25 = &КомиссионныеПродажи25)
			|	И ((НЕ &ОтборВалюта)
			|			ИЛИ СоглашениеСКлиентом.Валюта = &Валюта)
			|	И &ТекстЗамены1
			|И &ТекстЗамены2
			|;
			|
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
			|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
			|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
			|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
			|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
			|	СоглашениеСКлиентом.Организация                                 КАК Организация,
			|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
			|	ВЫБОР 
			|		КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов
			|			ТОГДА СоглашениеСКлиентом.Валюта
			|		ИНАЧЕ СоглашениеСКлиентом.ВалютаВзаиморасчетов
			|	КОНЕЦ                                                           КАК ВалютаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|	КОНЕЦ                                                           КАК ГрафикОплаты,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты
			|		ИНАЧЕ СоглашениеСКлиентом.ФормаОплаты
			|	КОНЕЦ                                                           КАК ФормаОплаты,
			|	СоглашениеСКлиентом.ОплатаВВалюте                               КАК ОплатаВВалюте,
			|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
			|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
			|	СоглашениеСКлиентом.Период                                      КАК Период,
			|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
			|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
			|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
			|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
			|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ВЫБОР
			|		КОГДА
			|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		КОГДА
			|			СоглашениеСКлиентом.Склад.ЭтоГруппа
			|			И &УчитыватьГруппыСкладов
			|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|	КОНЕЦ КАК Склад,
			|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
			|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
			|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
			|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
			|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                    КАК ОграничиватьРучныеСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
			|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
			|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
			|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
			|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
			|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
			|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
			|	СоглашениеСКлиентом.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
			|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
			|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
			|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
			|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
			|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	СоглашениеСКлиентом.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
			|	СоглашениеСКлиентом.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
			|	СоглашениеСКлиентом.ОбеспечиватьЗаказыОбособленно               КАК ОбеспечиватьЗаказыОбособленно,
			|	СоглашениеСКлиентом.ВозможнаРеализацияБезПереходаПраваСобственности КАК ВозможнаРеализацияБезПереходаПраваСобственности,
			|	СоглашениеСКлиентом.Календарь                                   КАК Календарь,
			|	СоглашениеСКлиентом.ЧастотаЗаказа                               КАК ЧастотаЗаказа,
			|	СоглашениеСКлиентом.МинимальнаяСуммаЗаказа                      КАК МинимальнаяСуммаЗаказа,
			|	СоглашениеСКлиентом.НаправлениеДеятельности                     КАК НаправлениеДеятельности,
			|	СоглашениеСКлиентом.КомиссионерВедетУчетПоРНПТ                  КАК КомиссионерВедетУчетПоРНПТ,
			|	СоглашениеСКлиентом.КомиссионныеПродажи25                       КАК НоваяСхемаКомиссии
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
			|ГДЕ
			|	НЕ СоглашениеСКлиентом.ПометкаУдаления
			|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) 
			|	И СоглашениеСКлиентом.Ссылка = &ВыбранноеСоглашение
			|	И (НЕ &ОтборПоОперации
			|		ИЛИ СоглашениеСКлиентом.ХозяйственнаяОперация В(&ХозяйственныеОперации))
			|	И ((НЕ &ОтборКомиссионныеПродажи25)
			|			ИЛИ СоглашениеСКлиентом.КомиссионныеПродажи25 = &КомиссионныеПродажи25)
			|	И ((НЕ &ОтборВалюта)
			|			ИЛИ СоглашениеСКлиентом.Валюта = &Валюта)
			|	И (СоглашениеСКлиентом.Партнер = &Партнер ИЛИ 
			|	&ТекстЗамены3)
			|	И &ТолькоИспользуемыеВРаботеТП
			|";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстЗамены1", ?(Не ЗначениеЗаполнено(Партнер),
			"И СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка) ", 
			"И (СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
			|		ИЛИ СоглашениеСКлиентом.СегментПартнеров В
			|			(ВЫБРАТЬ
			|				ПартнерыСегмента.Сегмент
			|			ИЗ
			|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|			ГДЕ
			|				ПартнерыСегмента.Партнер = &Партнер))
			|"));
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТекстЗамены2", ?(ВсеПараметрыОтбора.ТолькоТиповые Или Не ЗначениеЗаполнено(Партнер),"","
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 2
			|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
			|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
			|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
			|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
			|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
			|	СоглашениеСКлиентом.Организация                                 КАК Организация,
			|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
			|	ВЫБОР 
			|		КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов
			|			ТОГДА СоглашениеСКлиентом.Валюта
			|		ИНАЧЕ СоглашениеСКлиентом.ВалютаВзаиморасчетов
			|	КОНЕЦ                                                           КАК ВалютаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|	КОНЕЦ                                                             КАК ГрафикОплаты,
			|	ВЫБОР
			|		КОГДА &ИспользоватьГрафикиОплаты
			|			ТОГДА СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты
			|		ИНАЧЕ СоглашениеСКлиентом.ФормаОплаты
			|	КОНЕЦ                                                           КАК ФормаОплаты,
			|	СоглашениеСКлиентом.ОплатаВВалюте                               КАК ОплатаВВалюте,
			|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
			|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
			|	СоглашениеСКлиентом.Период                                      КАК Период,
			|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
			|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
			|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
			|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
			|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ВЫБОР
			|		КОГДА
			|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		КОГДА
			|			СоглашениеСКлиентом.Склад.ЭтоГруппа
			|			И &УчитыватьГруппыСкладов
			|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
			|		ТОГДА
			|			СоглашениеСКлиентом.Склад
			|		ИНАЧЕ
			|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|	КОНЕЦ КАК Склад,
			|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
			|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
			|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
			|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
			|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                    КАК ОграничиватьРучныеСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
			|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
			|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
			|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
			|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
			|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
			|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
			|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
			|	СоглашениеСКлиентом.СтатьяДвиженияДенежныхСредств               КАК СтатьяДвиженияДенежныхСредств,
			|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
			|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
			|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
			|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
			|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	СоглашениеСКлиентом.КалендарьВозвратаТары                       КАК КалендарьВозвратаТары,
			|	СоглашениеСКлиентом.ТребуетсяЗалогЗаТару                        КАК ТребуетсяЗалогЗаТару,
			|	СоглашениеСКлиентом.ОбеспечиватьЗаказыОбособленно               КАК ОбеспечиватьЗаказыОбособленно,
			|	СоглашениеСКлиентом.ВозможнаРеализацияБезПереходаПраваСобственности КАК ВозможнаРеализацияБезПереходаПраваСобственности,
			|	СоглашениеСКлиентом.Календарь                                   КАК Календарь,
			|	СоглашениеСКлиентом.ЧастотаЗаказа                               КАК ЧастотаЗаказа,
			|	СоглашениеСКлиентом.МинимальнаяСуммаЗаказа                      КАК МинимальнаяСуммаЗаказа,
			|	СоглашениеСКлиентом.НаправлениеДеятельности                     КАК НаправлениеДеятельности,
			|	СоглашениеСКлиентом.КомиссионерВедетУчетПоРНПТ                  КАК КомиссионерВедетУчетПоРНПТ,
			|	СоглашениеСКлиентом.КомиссионныеПродажи25                       КАК НоваяСхемаКомиссии
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
			|ГДЕ
			|	НЕ СоглашениеСКлиентом.ПометкаУдаления
			|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
			|	И НЕ СоглашениеСКлиентом.Типовое
			|	И НЕ &ТолькоТиповые
			|	И (НЕ &ОтборПоОперации
			|		ИЛИ СоглашениеСКлиентом.ХозяйственнаяОперация В(&ХозяйственныеОперации))
			|	И ((НЕ &ОтборКомиссионныеПродажи25)
			|			ИЛИ СоглашениеСКлиентом.КомиссионныеПродажи25 = &КомиссионныеПродажи25)
			|	И ((НЕ &ОтборВалюта)
			|			ИЛИ СоглашениеСКлиентом.Валюта = &Валюта)
			|	И &ТолькоИспользуемыеВРаботеТП
			|	И СоглашениеСКлиентом.Партнер = &Партнер
			|УПОРЯДОЧИТЬ ПО
			|	Типовое ВОЗР
			|"));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены3", ?(Не ЗначениеЗаполнено(Партнер),"СоглашениеСКлиентом.Типовое И СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)", "
			|
			|	СоглашениеСКлиентом.Типовое И (СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
			|		ИЛИ СоглашениеСКлиентом.СегментПартнеров В
			|			(ВЫБРАТЬ
			|				ПартнерыСегмента.Сегмент
			|			ИЗ
			|				РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
			|			ГДЕ
			|				ПартнерыСегмента.Партнер = &Партнер))"));

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ТолькоИспользуемыеВРаботеТП", ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП,"И СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей ",""));
			
		Запрос = Новый Запрос(ТекстЗапроса);
		
		Запрос.УстановитьПараметр("Партнер",                Партнер);
		Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ВсеПараметрыОтбора.ИсключитьГруппыСкладовДоступныеВЗаказах));
		Запрос.УстановитьПараметр("ОтборПоОперации",        ВсеПараметрыОтбора.ХозяйственныеОперации <> Неопределено);
		Запрос.УстановитьПараметр("ХозяйственныеОперации",  ВсеПараметрыОтбора.ХозяйственныеОперации);
		Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", ВсеПараметрыОтбора.УчитыватьГруппыСкладов);
		Запрос.УстановитьПараметр("ТолькоТиповые",          ВсеПараметрыОтбора.ТолькоТиповые);
		Запрос.УстановитьПараметр("ТолькоИндивидуальные",   ВсеПараметрыОтбора.ТолькоИндивидуальные);
		Запрос.УстановитьПараметр("ВыбранноеСоглашение",    ВсеПараметрыОтбора.ВыбранноеСоглашение);
		Запрос.УстановитьПараметр("ОтборКомиссионныеПродажи25", ЗначениеЗаполнено(ВсеПараметрыОтбора.КомиссионныеПродажи25));
		Запрос.УстановитьПараметр("КомиссионныеПродажи25",  ВсеПараметрыОтбора.КомиссионныеПродажи25);
		Запрос.УстановитьПараметр("ОтборВалюта",            ВсеПараметрыОтбора.Валюта <> Неопределено);
		Запрос.УстановитьПараметр("Валюта",                 ВсеПараметрыОтбора.Валюта);
		
		Запрос.УстановитьПараметр("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));

		РезультатЗапроса = Запрос.ВыполнитьПакет();

		// Если не найдено ни одного соглашения - возвращаем Неопределено 
		Если РезультатЗапроса[0].Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;

		Выборка = РезультатЗапроса[0].Выбрать();

		НайденноеСоглашение = Неопределено;

		// Если в выборке одно соглашение - используем его
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			НайденноеСоглашение = Выборка.Соглашение;
			
		КонецЕсли;

		// Если необходимы только типовые соглашения - дальнейшие проверки не имеют смысла
		Если НайденноеСоглашение = Неопределено И Не ВсеПараметрыОтбора.ТолькоТиповые Тогда
			
			// В выборке два или более соглашений
			Выборка.Следующий();
			
			ПервоеСоглашение        = Выборка.Соглашение;
			ПервоеСоглашениеТиповое = Выборка.Типовое;

			Выборка.Следующий();
			
			ВтороеСоглашениеТиповое = Выборка.Типовое;
			
			Выборка.Сбросить();
			Выборка.Следующий();
			
			// Если в выборке два соглашения разного типа - используем индивидуальное
			Если ПервоеСоглашениеТиповое <> ВтороеСоглашениеТиповое Тогда
				НайденноеСоглашение = ПервоеСоглашение;
			КонецЕсли;
		КонецЕсли;
		
		Если НайденноеСоглашение = Неопределено Тогда
			Если НЕ РезультатЗапроса[1].Пустой() Тогда
				Выборка = РезультатЗапроса[1].Выбрать();
				Выборка.Следующий();
				НайденноеСоглашение = Выборка.Соглашение;
			КонецЕсли;
		КонецЕсли;

		Если НайденноеСоглашение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		Иначе
			ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Справочники.СоглашенияСКлиентами.ПустаяСсылка())
		КонецЕсли;
		Если Не ИспользоватьДоговорыСКлиентами Тогда
			СтруктураРеквизитов.Вставить("ИспользуютсяДоговорыКонтрагентов", ИспользоватьДоговорыСКлиентами);
		КонецЕсли;
		
	Иначе //соглашения не используются
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		ОтборВидаЦен          = Новый Структура("ИспользоватьПриПродаже", Истина);
		
		ВсеПараметрыОтбора = Новый Структура;
		ВсеПараметрыОтбора.Вставить("ПустаяСсылкаДокумента", Неопределено);
		Если ПараметрыОтбора <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
		КонецЕсли;
		
		СсылкаДокументаДляСтатистики = ?(ВДокументеНеобходимоЗаполнятьПризнакЦенаВключаетНДС(ВсеПараметрыОтбора.ПустаяСсылкаДокумента) = Истина,
		                                 ВсеПараметрыОтбора.ПустаяСсылкаДокумента, Неопределено);
		
		РеквизитыЦеныПоУмолчанию = Справочники.ВидыЦен.ВидЦеныИПризнакЦенаВключаетНДСПоУмолчанию(
			ОтборВидаЦен, СсылкаДокументаДляСтатистики);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, РеквизитыЦеныПоУмолчанию);
		
		СтруктураРеквизитов.Вставить("ПорядокРасчетов",                               Перечисления.ПорядокРасчетов.ПоЗаказам);
		СтруктураРеквизитов.Вставить("ИспользуютсяДоговорыКонтрагентов",              ИспользоватьДоговорыСКлиентами);
		СтруктураРеквизитов.Вставить("ВозможнаРеализацияБезПереходаПраваСобственности", 
				ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности"));
		СтруктураРеквизитов.Вставить("НоваяСхемаКомиссии", 
				ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах"));
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает дату последнего этапа по графику.
//
// Параметры:
//   ДатаДокумента       - Дата - дата, от которой необходимо получить последнюю дату по графику.
//   ГрафикОплаты        - СправочникСсылка.ГрафикиОплаты - ссылка на график оплаты.
//   СоглашениеСКлиентом - СправочникСсылка.СоглашенияСКлиентами - ссылка на соглашение с клиентом.
//
// Возвращаемое значение:
//   Число - Последняя дата по графику с учетом календаря.
//
Функция ПолучитьПоследнююДатуПоГрафику(Знач ДатаДокумента, Знач ГрафикОплаты,  Знач СоглашениеСКлиентом) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг)  КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
			|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента,День,ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг),0)),День) КАК ДатаПлатежа
			|	
			|ИЗ
			|	Справочник.ГрафикиОплаты.Этапы КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ГрафикОплаты
			|	И (ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки)
			|		ИЛИ ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг))
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыГрафикаОплаты.Ссылка
			|");
			
		Запрос.УстановитьПараметр("ГрафикОплаты",  ГрафикОплаты);
		
	ИначеЕсли ЗначениеЗаполнено(СоглашениеСКлиентом) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг) КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
			|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &СоглашениеСКлиентом
			|	И (ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитПослеОтгрузки)
			|		ИЛИ ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.КредитСдвиг))
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыГрафикаОплаты.Ссылка
			|");
			
		Запрос.УстановитьПараметр("СоглашениеСКлиентом", СоглашениеСКлиентом);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Календарь = Выборка.Календарь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		ДатаПлатежа = КалендарныеГрафики.ДатаПоКалендарю(Календарь, ДатаДокумента, Выборка.Сдвиг);
	Иначе
		ДатаПлатежа = Выборка.ДатаПлатежа;
	КонецЕсли;
	
	Возврат ДатаПлатежа;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииПолученияЗначенийРеквизитовПоУмолчанию

// Возвращает структуру по ответственному лицу указанного склада
// В случае если склад является группой, возвращает значения,
// 		использовавшиеся в последнем документе указанного менеджера с указанным складом.
//
// Параметры:
// 		Склад - СправочникСсылка.Склады - Склад/Группа складов
//
// Возвращаемое значение:
// 		Структура - Структура с полями: 
// 		* Ответственный - СправочникСсылка.ФизическиеЛица - Ответственное лицо
// 		* ОтветственныйДолжность - Строка - Должность ответственного лица
//
Функция ПолучитьОтветственногоПоСкладу(Склад) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Справочники.Склады.ЭтоГруппа(Склад) Тогда
		СтруктураОтветственного = ЗначениеНастроекПовтИсп.ПолучитьОтветственногоПоСкладу(Склад);
		Если СтруктураОтветственного <> Неопределено Тогда
			Возврат СтруктураОтветственного;
		КонецЕсли;
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции

// Выполняет поиск действующего договора с контрагентом по заданным реквизитам.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
//
// Параметры:
//   Объект                  - ДокументОбъект - Объект, из которого будут взяты основные параметры для поиска.
//   ХозяйственныеОперации   - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных
//                             операций (тип договора).
//   ВалютаВзаиморасчетов    - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору.
//   НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности - Направление деятельности искомого договора.
//                             Если не задано, то ведется поиск по всем направлениям.
//   КомиссионныеПродажи25   - Булево - Признак отнесения договора к комиссионным продажам версии 2.5.
//                             Если не задано, то признак игнорируется.
// 
// Возвращаемое значение:
//   СправочникСсылка.ДоговорыКонтрагентов  - договор контрагента по умолчанию.
//
Функция ПолучитьДоговорПоУмолчанию(
	Объект,
	ХозяйственныеОперации,
	ВалютаВзаиморасчетов = Неопределено,
	НаправлениеДеятельности = Неопределено,
	КомиссионныеПродажи25 = Неопределено
	) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами") Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		И ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект, "Соглашение") Тогда 
		
		ПоСоглашениюИспользуютсяДоговорыКонтрагентов = ЗначениеЗаполнено(Объект.Соглашение)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
		
		Если Не ПоСоглашениюИспользуютсяДоговорыКонтрагентов Тогда
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Объект.Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Партнер,
	|	ДоговорыКонтрагентов.РазрешенаРаботаСДочернимиПартнерами
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ДоговорыКонтрагентов.Ссылка = &ТекущийДоговор
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности)
	|	И ((НЕ &ОтборКомиссионныеПродажи25)
	|			ИЛИ ДоговорыКонтрагентов.КомиссионныеПродажи25 = &КомиссионныеПродажи25);
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ДоговорыКонтрагентов.Партнер,
	|	ДоговорыКонтрагентов.РазрешенаРаботаСДочернимиПартнерами
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ((НЕ &ОтборНаправлениеДеятельности)
	|			ИЛИ ДоговорыКонтрагентов.НаправлениеДеятельности = &НаправлениеДеятельности)
	|	И ((НЕ &ОтборКомиссионныеПродажи25)
	|			ИЛИ ДоговорыКонтрагентов.КомиссионныеПродажи25 = &КомиссионныеПродажи25)
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", Объект.Договор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ЗначениеЗаполнено(ХозяйственныеОперации));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов", ЗначениеЗаполнено(ВалютаВзаиморасчетов));
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборНаправлениеДеятельности", НаправлениеДеятельности <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности"));
	Запрос.УстановитьПараметр("НаправлениеДеятельности",НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ОтборКомиссионныеПродажи25", ЗначениеЗаполнено(КомиссионныеПродажи25));
	Запрос.УстановитьПараметр("КомиссионныеПродажи25", КомиссионныеПродажи25);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ПартнерДоговора = Справочники.Партнеры.ПустаяСсылка();
	РазрешенаРаботаСДочернимиПартнерами = Ложь;
	Если Не МассивРезультатов[0].Пустой() Тогда
		
		Выборка = МассивРезультатов[0].Выбрать();
		Выборка.Следующий();
		
		ДоговорПоУмолчанию = Выборка.Ссылка;
		
		ПартнерДоговора = Выборка.Партнер;
		РазрешенаРаботаСДочернимиПартнерами = Выборка.РазрешенаРаботаСДочернимиПартнерами;
		
	Иначе
		Выборка = МассивРезультатов[1].Выбрать();
		
		Если Не Выборка.Следующий() Тогда
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ИначеЕсли Выборка.Количество() = 1 Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;	
			ПартнерДоговора = Выборка.Партнер;
			РазрешенаРаботаСДочернимиПартнерами = Выборка.РазрешенаРаботаСДочернимиПартнерами;
		Иначе
			ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ РазрешенаРаботаСДочернимиПартнерами И ПартнерДоговора <> Объект.Партнер Тогда
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();	
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Выполняет поиск действующего договора между организациями по заданным реквизитам.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
//
// Параметры:
//	Объект					- ДокументОбъект - объект документа, из которого будут взяты основные параметры для поиска.
//	ХозяйственныеОперации	- ПеречислениеСсылка.ТипыДоговоровМеждуОрганизациями,
//								Массив - значение или несколько значений типов договоров.
//	ТипДоговора				- ПеречислениеСсылка.ТипыДоговоровМеждуОрганизациями - 
//	ВалютаВзаиморасчетов	- СправочникСсылка.Валюты - валюта взаиморасчетов между организациями.
//	НаправлениеДеятельности	- СправочникСсылка.НаправленияДеятельности - Направление деятельности искомого договора.
//																			Если не задано, то ведется поиск
//																			по всем направлениям.
// 
// Возвращаемое значение:
//	СправочникСсылка.ДоговорыМеждуОрганизациями - договор по умолчанию.
//
Функция ПолучитьДоговорМеждуОрганизациямиПоУмолчанию(Объект,
													ТипДоговора,
													ВалютаВзаиморасчетов = Неопределено,
													НаправлениеДеятельности = Неопределено) Экспорт
	
	ДоговорПоУмолчанию = Справочники.ДоговорыМеждуОрганизациями.ПустаяСсылка();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями") Тогда
		Возврат ДоговорПоУмолчанию;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыМеждуОрганизациями.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|
	|ГДЕ
	|	ДоговорыМеждуОрганизациями.Ссылка = &Ссылка
	|	И НЕ ДоговорыМеждуОрганизациями.ПометкаУдаления
	|	И ДоговорыМеждуОрганизациями.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыМеждуОрганизациями.Организация = &Организация
	|	И ДоговорыМеждуОрганизациями.ОрганизацияПолучатель = &ОрганизацияПолучатель
	|	И (НЕ &ОтборТипДоговора
	|		ИЛИ ДоговорыМеждуОрганизациями.ТипДоговора В (&ТипДоговора))
	|	И (НЕ &ОтборВалютаВзаиморасчетов
	|		ИЛИ ДоговорыМеждуОрганизациями.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И (НЕ &ОтборНаправлениеДеятельности
	|		ИЛИ ДоговорыМеждуОрганизациями.НаправлениеДеятельности = &НаправлениеДеятельности)
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыМеждуОрганизациями.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|
	|ГДЕ
	|	НЕ ДоговорыМеждуОрганизациями.ПометкаУдаления
	|	И ДоговорыМеждуОрганизациями.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыМеждуОрганизациями.Организация = &Организация
	|	И ДоговорыМеждуОрганизациями.ОрганизацияПолучатель = &ОрганизацияПолучатель
	|	И (НЕ &ОтборТипДоговора
	|		ИЛИ ДоговорыМеждуОрганизациями.ТипДоговора В (&ТипДоговора))
	|	И (НЕ &ОтборВалютаВзаиморасчетов
	|		ИЛИ ДоговорыМеждуОрганизациями.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И (НЕ &ОтборНаправлениеДеятельности
	|		ИЛИ ДоговорыМеждуОрганизациями.НаправлениеДеятельности = &НаправлениеДеятельности)";
	
	ОтборТипДоговора = ЗначениеЗаполнено(ТипДоговора);
	ОтборВалютаВзаиморасчетов = ЗначениеЗаполнено(ВалютаВзаиморасчетов);
	ОтборНаправлениеДеятельности = НаправлениеДеятельности <> Неопределено
									И ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности");
	
	Запрос.УстановитьПараметр("Ссылка",							Объект.Договор);
	Запрос.УстановитьПараметр("Организация",					Объект.Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель",			Объект.ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("ОтборТипДоговора",				ОтборТипДоговора);
	Запрос.УстановитьПараметр("ТипДоговора",					ТипДоговора);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов",		ОтборВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",			ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборНаправлениеДеятельности",	ОтборНаправлениеДеятельности);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",		НаправлениеДеятельности);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Не РезультатЗапроса[0].Пустой() Тогда
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		ДоговорПоУмолчанию = Выборка.Ссылка;
	Иначе
		Выборка = РезультатЗапроса[1].Выбрать();
		Выборка.Следующий();
	
		Если Выборка.Количество() Тогда
			ДоговорПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Устанавливает свойства доступности и видимости реквизита договора в зависимости от данных соглашения.
//
// Параметры:
//	Объект				- ДанныеФормыСтруктура					- Объект документа, для которого выполняется настройка свойств договора.
//	ДоступностьЭлемента	- Булево								- Признак использования свойства доступности элемента Договор на форме документа.
//	ВидимостьЭлемента	- Булево								- Признак использования свойства видимости элемента Договор на форме документа.
//	Договор				- СправочникСсылка.ДоговорыКонтрагентов	- Договор документа.
//
Процедура УстановитьДоступностьДоговора(Объект, ДоступностьЭлемента, ВидимостьЭлемента, Договор = Неопределено) Экспорт
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользуютсяДоговорыКонтрагентов     = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	
	ЗаполненыВлияющиеПоля = ЗначениеЗаполнено(Объект.Партнер)
							И (ЗначениеЗаполнено(Объект.Контрагент)
								Или ИспользоватьПартнеровКакКонтрагентов)
							И ЗначениеЗаполнено(Объект.Организация);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами") Тогда
		
		ИспользуютсяДоговораПоОперации = Объект.Свойство("ХозяйственнаяОперация")
											И ОперацииИспользующиеДоговораКонтрагентов().Найти(Объект.ХозяйственнаяОперация) <> Неопределено;
		
		ЗаполненыВлияющиеПоля = ЗаполненыВлияющиеПоля
								И (ЗначениеЗаполнено(Объект.Соглашение)
									Или ИспользуютсяДоговораПоОперации);
		
		УстановитьПривилегированныйРежим(Истина);
		ИспользуютсяДоговорыКонтрагентов = ИспользуютсяДоговорыКонтрагентов
											И ((ЗначениеЗаполнено(Объект.Соглашение)
												И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов"))
											Или ИспользуютсяДоговораПоОперации);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ДоступностьЭлемента = ЗаполненыВлияющиеПоля
							И ИспользуютсяДоговорыКонтрагентов;
	ВидимостьЭлемента   = ИспользуютсяДоговорыКонтрагентов;
	
	Если Не ДоступностьЭлемента
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает отметку незаполненности в зависимости от настроек системы.
//
//	Параметры:
//		ЭлементыФормы        - ВсеЭлементыФормы - элементы формы документа
//		ИмяЭлемента          - Строка           - имя элемента формы договора.
//		ИспользуютсяДоговора - Булево           - признак обязательности использования договора в объекте.
//
Процедура УстановитьОтметкуНезаполненногоДоговора(ЭлементыФормы, ИмяЭлемента, ИспользуютсяДоговора = Ложь) Экспорт
	
	ЗаполнениеДоговораОбязательно = ИспользуютсяДоговора
					Или ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, "АвтоОтметкаНезаполненного",
		ЗаполнениеДоговораОбязательно);
	
	Если Не ЗаполнениеДоговораОбязательно Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, "ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет банковский счета документа по договору.
//
// Параметры:
//		Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор;
//		БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет организации;
//		БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет контрагента.
//
Процедура ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации = Неопределено, БанковскийСчетКонтрагента = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			Справочники.ДоговорыМеждуОрганизациями.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		Иначе
			Справочники.ДоговорыКонтрагентов.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Процедура пересчитывает сумму документа в новую валюту.
//
// Параметры:
// Объект           - ДанныеФормыСтруктура - Текущий документ
// СтараяВалюта     - СправочникСсылка.Валюты - Исходная валюта
// НоваяВалюта      - СправочникСсылка.Валюты - Новая валюта
// ЕстьСуммаПродажи - Булево - признак наличия колонки СуммаПродаж в табличной части
// ЕстьСуммаПродажиНДС - Булево - признак наличия колонки СуммаПродажНДС в табличной части.
//
Процедура ПересчитатьСуммуДокументаВВалюту(Объект, Знач СтараяВалюта, Знач НоваяВалюта, Знач ЕстьСуммаПродажи = Истина, Знач ЕстьСуммаПродажиНДС = Ложь) Экспорт

	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	ИтогСумма = Объект.Товары.Итог("Сумма");
	Если ЕстьСуммаПродажи Тогда
		ИтогСуммаПродажи = Объект.Товары.Итог("СуммаПродажи");
	Иначе
		ИтогСуммаПродажи = 0;
	КонецЕсли;
	
	НоваяСумма = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
		ИтогСумма,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты);
	
	НоваяСуммаПродажи = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
		ИтогСуммаПродажи,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты);
	
	Если ИтогСумма <> 0 ИЛИ ИтогСуммаПродажи <> 0 Тогда
	
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			
			Если ИтогСумма <> 0 Тогда
				СтрокаТаблицы.Сумма = Окр(НоваяСумма * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1);
				СтрокаТаблицы.Цена = ?(СтрокаТаблицы.КоличествоУпаковок <> 0, Окр(СтрокаТаблицы.Сумма / СтрокаТаблицы.КоличествоУпаковок, 2, 1), 0);
				СтрокаТаблицы.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СтрокаТаблицы.СтавкаНДС, Объект.ЦенаВключаетНДС);
				СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
			Если ИтогСуммаПродажи <> 0 Тогда
				СтрокаТаблицы.СуммаПродажи = Окр(НоваяСуммаПродажи * СтрокаТаблицы.СуммаПродажи / ИтогСуммаПродажи, 2, 1);
				СтрокаТаблицы.ЦенаПродажи = ?(СтрокаТаблицы.КоличествоУпаковок <> 0, Окр(СтрокаТаблицы.СуммаПродажи / СтрокаТаблицы.КоличествоУпаковок, 2, 1), 0);
				СтрокаТаблицы.СуммаВознаграждения = 0;
				Если ЕстьСуммаПродажиНДС Тогда
					СтрокаТаблицы.СуммаПродажиНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаПродажи, СтрокаТаблицы.СтавкаНДС, Истина);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Объект.Свойство("СуммаВознаграждения") Тогда
			Объект.СуммаВознаграждения = 0;
			Объект.СуммаНДСВознаграждения = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Свойство("ЭтапыГрафикаОплаты") Тогда
		
		ИтогСуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		Если ИтогСуммаЭтаповОплаты <> 0 Тогда
			
			Для Каждого СтрокаТаблицы Из Объект.ЭтапыГрафикаОплаты Цикл
				СтрокаТаблицы.СуммаПлатежа = Окр(НоваяСуммаПродажи * СтрокаТаблицы.СуммаПлатежа / ИтогСуммаЭтаповОплаты, 2, 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает сумму документа в новую валюту.
//
// Параметры:
// ДокументОбъект - ДанныеФормыСтруктура - документ, в котором необходимо заполнить суммы аванса и предоплаты.
//
Процедура ЗаполнитьСуммыАвансаПредоплаты(ДокументОбъект) Экспорт
	
	ТаблицаЭтапов = ДокументОбъект.ЭтапыГрафикаОплаты.Выгрузить();
	Если ТаблицаЭтапов.Колонки.Найти("СуммаЗалогаЗаТару") = Неопределено Тогда
		ТаблицаЭтапов.Колонки.Добавить("СуммаЗалогаЗаТару", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	КонецЕсли;
	ТаблицаЭтапов.Свернуть("ВариантОплаты", "СуммаПлатежа,СуммаЗалогаЗаТару");
	
	СтрокаАвансаДоОбеспечения = ТаблицаЭтапов.Найти(Перечисления.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения, "ВариантОплаты");
	
	Если СтрокаАвансаДоОбеспечения = Неопределено Тогда
		
		ДокументОбъект.СуммаАвансаДоОбеспечения = 0;
		
	Иначе
		
		ДокументОбъект.СуммаАвансаДоОбеспечения = СтрокаАвансаДоОбеспечения.СуммаПлатежа + СтрокаАвансаДоОбеспечения.СуммаЗалогаЗаТару;
		
	КонецЕсли;
	
	СтрокаПредоплатыДоОтгрузки = ТаблицаЭтапов.Найти(Перечисления.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки, "ВариантОплаты");
	
	Если СтрокаПредоплатыДоОтгрузки = Неопределено Тогда
		
		ДокументОбъект.СуммаПредоплатыДоОтгрузки = 0;
		
	Иначе
		
		ДокументОбъект.СуммаПредоплатыДоОтгрузки = СтрокаПредоплатыДоОтгрузки.СуммаПлатежа + СтрокаПредоплатыДоОтгрузки.СуммаЗалогаЗаТару;
		
	КонецЕсли;

КонецПроцедуры

// Для использования с методами программного интерфейса УчетНДСУП
// Формирует представление команд формирования только счета фактуры на основании переданной структуры по счету фактуры, 
// возвращаемой функциями УчетНДСУП.СчетаФактурыВыданныеНаОсновании() или УчетНДСУП.СчетаФактурыПолученныеНаОсновании().
//
// Параметры:
//	Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура/чек
//	СчетаФактурыНаОсновании - см. УчетНДСУП.СчетаФактурыВыданныеНаОсновании
//
// Возвращаемое значение:
//	Строка, ФорматированнаяСтрока - Представление в параметре ПараметрыДляФормированияПредставления дополненное 
//                                  форматированным текстом представления счета фактуры в документе.
Функция СформироватьПредставлениеКомандФормированияСчетаФактурыНаОсновании(Основание, СчетаФактурыНаОсновании = Неопределено) Экспорт
	
	МассивПредставлений = Новый Массив;
	
	Если СчетаФактурыНаОсновании <> Неопределено Тогда
		МассивПредставлений.Добавить(СчетаФактурыНаОсновании.Представление);
	Иначе
		МассивПредставлений.Добавить("");
	КонецЕсли;
	
	Результат = Новый ФорматированнаяСтрока(МассивПредставлений);
	
	Возврат Результат;
	
КонецФункции

// Устанавливает режим выбора групп и элементов у склада на форме
//
// Параметры:
//  Склад - ПолеФормы - поле формы, в котором необходимо установить режим.
//
Процедура УстановитьРежимВыбораГруппЭлементовСклада(Склад) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи") Тогда
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	Иначе
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
	
КонецПроцедуры

// Получает все доступные договоры для переданных параметров
//
// Параметры:
// 		ТекущийДоговор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на текущий договор
// 		Партнер - СправочникСсылка.Партнеры - Деловой партнер предприятия, которому осуществляются продажи;
//		Контрагент - СправочникСсылка.Контрагенты - Контрагент, с которым заключен договор;
//		Организация - СправочникСсылка.Организации - Организация предприятия, от имени которой заключен договор;
//		ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных операций (тип договора);
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору;
//		Соглашение - СправочникСсылка.СоглашенияСКлиентами - Если не задан порядок, он будет получен из соглашения с клиентом.
// 
// Возвращаемое значение:
// 		Массив - массив доступных договоров.
//
Функция ПолучитьДоступныеДоговоры(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации = Неопределено,
	ВалютаВзаиморасчетов = Неопределено,
	Соглашение = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА &ТекущийДоговор = ДоговорыКонтрагентов.Ссылка
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
		|		ПО ДоговорыКонтрагентов.Партнер = ИерархияПартнеров.Родитель
		|		И ИерархияПартнеров.Партнер = &Партнер
		|ГДЕ
		|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ((НЕ &ОтборХозяйственнаяОперация)
		|	ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
		|	И ((НЕ &ОтборВалютаВзаиморасчетов)
		|	ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов", ВалютаВзаиморасчетов <> Неопределено);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборСоглашение", Соглашение <> Неопределено);
	Запрос.УстановитьПараметр("Соглашение", ?(Соглашение=Неопределено, Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Соглашение));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе 
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

// Проверяет наличие корректировок и счетов-фактур, введенных на основании изменяемого документа.
//
// Параметры:
// Ссылка - ДокументСсылка - Изменяемый документ
// Основание - ДокументСсылка - Основание для корректировок
// ЕстьКорректировки - Булево - ВозвращаемыйПараметр. Признак наличия корректировок изменяемого документа.
//
// Возвращаемое значение:
//		ПеречислениеСсылка.ТипыКорректировки - тип корректировки, если она есть.
//
Функция ПроверитьНаличиеКорректировок(Ссылка, Основание, ЕстьКорректировки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка,
	|	ДанныеДокумента.Ссылка.ТипКорректировки КАК ТипКорректировки,	
	|	ДанныеДокумента.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Основание
	|	И (ДанныеДокумента.Проведен
	|	ИЛИ ДанныеДокумента.Ссылка = &Ссылка)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка,
	|	ДанныеДокумента.Ссылка.ТипКорректировки КАК ТипКорректировки,	
	|	ДанныеДокумента.Ссылка.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.КорректировкаРеализации.КорректировкаЗадолженности КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументРеализации = &Основание
	|	И ДанныеДокумента.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЕстьКорректировки = ЗначениеЗаполнено(Выборка.Корректировка) И Выборка.Корректировка <> Ссылка;
		ТипКорректировки = ?(ЕстьКорректировки, Выборка.ТипКорректировки, Перечисления.ТипыКорректировки.ПустаяСсылка());
	Иначе
		ЕстьКорректировки = НЕ РезультатЗапроса.Пустой();
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ТипКорректировки = Выборка.ТипКорректировки;			
		Иначе		
			ТипКорректировки = Перечисления.ТипыКорректировки.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;	
	
	Возврат ТипКорректировки;
	
КонецФункции

// Заполняет документы реализаций и цены в табличной части документов возврата
//
// Параметры:
//		ДокументВозврата - ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента, ДокументОбъект.ВозвратТоваровОтКлиента - 
//		ИмяТаблицы - Строка - Имя таблицы Товары
Процедура ЗаполнитьРеализацииИЦены(ДокументВозврата, ИмяТаблицы) Экспорт
	Запрос = Новый Запрос;
	
	ТаблицаПроверяемыхТоваров = ДокументВозврата[ИмяТаблицы].Выгрузить();
	ТабличнаяЧастьВозврата    = ДокументВозврата[ИмяТаблицы];
	
	ВозвратОтРозничногоПокупателя = (ДокументВозврата.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	ЕстьПравоНаТару = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ПереданнаяВозвратнаяТара);
	
	Если НЕ ВозвратОтРозничногоПокупателя Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Серия,
		|	ВозвратТоваровОтКлиентаТовары.Назначение,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка,
		|	ВозвратТоваровОтКлиентаТовары.Количество
		|ПОМЕСТИТЬ ЗаполняемыеТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Серия,
		|	ВозвратТоваровОтКлиентаТовары.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыРеализации
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО ЗаполняемыеТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = РеализацияТоваровУслугТовары.Характеристика
		|			И ЗаполняемыеТовары.Серия = РеализацияТоваровУслугТовары.Серия
		|			И ЗаполняемыеТовары.Назначение = РеализацияТоваровУслугТовары.Назначение
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Проведен
		|	И РеализацияТоваровУслугТовары.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.Отгружено)
		|	И РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
		|	И РеализацияТоваровУслугТовары.Ссылка.Организация = &Организация
		|	И ВЫБОР
		|		КОГДА НЕ &ИспользоватьСоглашенияСКлиентами
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Ссылка.Соглашение = &Соглашение
		|	КОНЕЦ
		|	И РеализацияТоваровУслугТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
		|	И РеализацияТоваровУслугТовары.Ссылка.Партнер = &Партнер
		|	И РеализацияТоваровУслугТовары.Ссылка.Дата <= &ДатаВозврата
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КорректировкаРеализации.Дата) КАК Дата,
		|	ДокументыРеализации.Ссылка КАК СсылкаРеализации
		|ПОМЕСТИТЬ ДанныеКорректировки
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО (КорректировкаРеализации.ДокументОснование = ДокументыРеализации.Ссылка)
		|ГДЕ
		|	КорректировкаРеализации.Проведен
		|	И НЕ КорректировкаРеализации.ВидКорректировки В 
		|		(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПерепоставленногоТовара), 
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратНедопоставленногоТовара))
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыРеализации.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СсылкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КорректировкаРеализации.Ссылка) КАК Ссылка,
		|	МАКСИМУМ(КорректировкаРеализации.Ссылка.Дата) КАК Дата,
		|	КорректировкаРеализации.Ссылка.ДокументОснование КАК СсылкаРеализации
		|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	(КорректировкаРеализации.Ссылка.ДокументОснование, КорректировкаРеализации.Ссылка.Дата) В
		|			(ВЫБРАТЬ
		|				ДанныеКорректировки.СсылкаРеализации КАК СсылкаРеализации,
		|				ДанныеКорректировки.Дата КАК Дата
		|			ИЗ
		|				ДанныеКорректировки)
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаРеализации.Ссылка.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	СсылкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА ДокументыРеализации.Ссылка
		|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
		|	КОНЕЦ КАК Ссылка
		|ПОМЕСТИТЬ СсылкиНаРеализации
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|		ПО ДокументыРеализации.Ссылка = ДанныеПоследнейКорректировки.СсылкаРеализации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаТовары.Характеристика КАК Характеристика,
		|	ТаблицаТовары.Серия КАК Серия,
		|	ТаблицаТовары.Назначение КАК Назначение,
		|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаТовары.Количество) КАК Количество,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.Упаковка,
		|	СУММА(ТаблицаТовары.Сумма) КАК Сумма,
		|	СУММА(ТаблицаТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
		|	СУММА(ТаблицаТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
		|	ТаблицаТовары.ДокументРеализации КАК ДокументРеализации
		|ПОМЕСТИТЬ ДанныеРеализации
		|ИЗ
		|	(ВЫБРАТЬ 
		|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализацииТовары.Характеристика КАК Характеристика,
		|	КорректировкаРеализацииТовары.Серия КАК Серия,
		|	КорректировкаРеализацииТовары.Назначение КАК Назначение,
		|	КорректировкаРеализацииТовары.КоличествоУпаковок,
		|	КорректировкаРеализацииТовары.Количество,
		|	КорректировкаРеализацииТовары.Цена,
		|	КорректировкаРеализацииТовары.Упаковка,
		|	КорректировкаРеализацииТовары.Сумма,
		|	0 КАК СуммаРучнойСкидки,
		|	0 КАК СуммаАвтоматическойСкидки,
		|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование КАК ДокументРеализации
		|ИЗ
		|	СсылкиНаРеализации КАК СсылкиНаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|		ПО (КорректировкаРеализацииТовары.Ссылка = СсылкиНаРеализации.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика,
		|	РеализацияТоваровУслугТовары.Серия,
		|	РеализацияТоваровУслугТовары.Назначение,
		|	РеализацияТоваровУслугТовары.КоличествоУпаковок,
		|	РеализацияТоваровУслугТовары.Количество,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.СуммаРучнойСкидки + РеализацияТоваровУслугТовары.СуммаАвтоматическойСкидки = 0
		|				ИЛИ РеализацияТоваровУслугТовары.КоличествоУпаковок = 0
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма / РеализацияТоваровУслугТовары.КоличествоУпаковок
		|	КОНЕЦ,
		|	РеализацияТоваровУслугТовары.Упаковка,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СуммаРучнойСкидки,
		|	РеализацияТоваровУслугТовары.СуммаАвтоматическойСкидки,
		|	РеализацияТоваровУслугТовары.Ссылка
		|ИЗ
		|	СсылкиНаРеализации КАК СсылкиНаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО (РеализацияТоваровУслугТовары.Ссылка = СсылкиНаРеализации.Ссылка))  КАК ТаблицаТовары
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.Назначение,
		|	ТаблицаТовары.Цена,
		|	ТаблицаТовары.Упаковка,
		|	ТаблицаТовары.ДокументРеализации
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Назначение,
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
		|	ТаблицаПроверяемыеТовары.Назначение КАК Назначение,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации
		|ПОМЕСТИТЬ ДанныеДокументовВозврата
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
		|		ПО (ТаблицаПроверяемыеТовары.ДокументРеализации = ДокументыРеализации.Ссылка)
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия,
		|	ТаблицаПроверяемыеТовары.Назначение,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	Назначение,
		|	ДокументРеализации
		|;" +
		?(ЕстьПравоНаТару, "////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПереданнаяВозвратнаяТараОстатки.Номенклатура КАК Номенклатура,
		|	ПереданнаяВозвратнаяТараОстатки.Характеристика КАК Характеристика,
		|	ПереданнаяВозвратнаяТараОстатки.Партнер КАК Партнер,
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи КАК ДокументРеализации,
		|	ПереданнаяВозвратнаяТараОстатки.КоличествоОстаток КАК Количество,
		|	ПереданнаяВозвратнаяТараОстатки.СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ втПереданнаяВозвратнаяТара
		|ИЗ
		|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(
		|			, 
		|			(Номенклатура, Характеристика, Партнер) В
		|			(ВЫБРАТЬ
		|				Таблица.Номенклатура КАК Номенклатура,
		|				Таблица.Характеристика КАК Характеристика,
		|				&Партнер КАК Партнер
		|			ИЗ
		|				ЗаполняемыеТовары КАК Таблица)
		|	) КАК ПереданнаяВозвратнаяТараОстатки
		|ГДЕ
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи.Контрагент = &Контрагент И
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи.Организация = &Организация И
		|	ВЫБОР
		|		КОГДА НЕ &ИспользоватьСоглашенияСКлиентами
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ПереданнаяВозвратнаяТараОстатки.ДокументПередачи.Соглашение = &Соглашение
		|	КОНЕЦ И
		|	ПереданнаяВозвратнаяТараОстатки.ДокументПередачи.НалогообложениеНДС = &НалогообложениеНДС И
		|	&ВозвратПереданнойМногооборотнойТары
		|;", "") +
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДанныеРеализации.Номенклатура КАК Номенклатура,
		|	ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) КАК Количество,
		|	ДанныеРеализации.Характеристика КАК Характеристика,
		|	ДанныеРеализации.Серия КАК Серия,
		|	ДанныеРеализации.Назначение КАК Назначение,
		|	ВЫБОР
		|		КОГДА ДанныеРеализации.Упаковка = ЗаполняемыеТовары.Упаковка
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеРеализации.Упаковка ЕСТЬ NULL 
		|							ИЛИ ДанныеРеализации.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|						ТОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
		|					ИНАЧЕ (ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки1
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
		|				ИНАЧЕ (ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки2
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) = 0
		|			ТОГДА ДанныеРеализации.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДанныеРеализации.Упаковка = ЗаполняемыеТовары.Упаковка
		|					ТОГДА ВЫБОР
		|							КОГДА ДанныеРеализации.Упаковка ЕСТЬ NULL 
		|									ИЛИ ДанныеРеализации.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|								ТОГДА ДанныеРеализации.Сумма / (ДанныеРеализации.Количество)
		|							ИНАЧЕ ДанныеРеализации.Сумма / (ДанныеРеализации.Количество / &ТекстЗапросаКоэффициентУпаковки1)
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|								ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|							ТОГДА ДанныеРеализации.Сумма / (ДанныеРеализации.Количество)
		|					ИНАЧЕ ДанныеРеализации.Сумма / (ДанныеРеализации.Количество / &ТекстЗапросаКоэффициентУпаковки2)
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ДанныеРеализации.ДокументРеализации.Дата КАК ДатаРеализации,
		|	ДанныеРеализации.ДокументРеализации КАК ДокументРеализации,
		|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
		|	НЕОПРЕДЕЛЕНО ДатаПередачиТары
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРеализации КАК ДанныеРеализации
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
		|			ПО ДанныеРеализации.ДокументРеализации = ДанныеДокументовВозврата.ДокументРеализации
		|				И ДанныеРеализации.Номенклатура = ДанныеДокументовВозврата.Номенклатура
		|				И ДанныеРеализации.Характеристика = ДанныеДокументовВозврата.Характеристика
		|				И ДанныеРеализации.Серия = ДанныеДокументовВозврата.Серия
		|				И ДанныеРеализации.Назначение = ДанныеДокументовВозврата.Назначение
		|		ПО ЗаполняемыеТовары.Номенклатура = ДанныеРеализации.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ДанныеРеализации.Характеристика
		|			И ЗаполняемыеТовары.Серия = ДанныеРеализации.Серия
		|			И ЗаполняемыеТовары.Назначение = ДанныеРеализации.Назначение
		|ГДЕ
		|	ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) > 0
		|	И ВЫБОР 
		|		КОГДА НЕ ДанныеРеализации.ДокументРеализации.ВернутьМногооборотнуюТару ТОГДА
		|			ДанныеРеализации.Номенклатура.ТипНоменклатуры В
		|				(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ИНАЧЕ ДанныеРеализации.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар))
		|	КОНЕЦ
		| " + 
		?(ЕстьПравоНаТару, "ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втПереданнаяВозвратнаяТара.Номенклатура КАК Номенклатура,
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) КАК Количество,
		|	втПереданнаяВозвратнаяТара.Характеристика КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА СУММА(втПереданнаяВозвратнаяТара.Количество) = 0
		|			ТОГДА СУММА(втПереданнаяВозвратнаяТара.Сумма)
		|		ИНАЧЕ СУММА(втПереданнаяВозвратнаяТара.Сумма) / СУММА(втПереданнаяВозвратнаяТара.Количество)
		|	КОНЕЦ КАК Цена,
		|	НЕОПРЕДЕЛЕНО КАК ДатаРеализации,
		|	втПереданнаяВозвратнаяТара.ДокументРеализации КАК ДокументРеализации,
		|	ИСТИНА КАК ЭтоВозвратнаяТара,
		|	втПереданнаяВозвратнаяТара.ДокументРеализации.ДатаВозвратаМногооборотнойТары КАК ДатаВозвратаТары
		|ИЗ
		|	втПереданнаяВозвратнаяТара КАК втПереданнаяВозвратнаяТара
		|
		|СГРУППИРОВАТЬ ПО
		|	втПереданнаяВозвратнаяТара.Номенклатура,
		|	втПереданнаяВозвратнаяТара.Характеристика,
		|	втПереданнаяВозвратнаяТара.ДокументРеализации
		|
		|ИМЕЮЩИЕ
		|	СУММА(втПереданнаяВозвратнаяТара.Количество) > 0", "") + "
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоВозвратнаяТара ВОЗР,
		|	ДатаРеализации УБЫВ,
		|	ДатаПередачиТары УБЫВ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ДанныеРеализации.Упаковка",
			"ДанныеРеализации.Номенклатура"));
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЗаполняемыеТовары.Упаковка",
			"ЗаполняемыеТовары.Номенклатура"));
			
		Запрос.УстановитьПараметр("Партнер", ДокументВозврата.Партнер);
		Запрос.УстановитьПараметр("Контрагент", ДокументВозврата.Контрагент);
		Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
		Запрос.УстановитьПараметр("Соглашение", ДокументВозврата.Соглашение);
		Запрос.УстановитьПараметр("НалогообложениеНДС", ДокументВозврата.НалогообложениеНДС);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
		Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
		Запрос.УстановитьПараметр("ВозвратПереданнойМногооборотнойТары", ?(ИмяТаблицы = "ВозвращаемыеТовары", 
				ДокументВозврата.ВернутьМногооборотнуюТару, 
				ДокументВозврата.ВозвратПереданнойМногооборотнойТары));
		Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", 
				ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
		Запрос.УстановитьПараметр("ДатаВозврата", ?(ЗначениеЗаполнено(ДокументВозврата.Дата),ДокументВозврата.Дата,ТекущаяДатаСеанса()));
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.Серия КАК Серия,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Количество,
		|	ВозвратТоваровОтКлиентаТовары.НомерСтроки,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка
		|ПОМЕСТИТЬ ЗаполняемыеТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Характеристика КАК Характеристика,
		|	ЧекККМТовары.Серия КАК Серия,
		|	ЧекККМТовары.Упаковка КАК Упаковка,
		|	СУММА(ЧекККМТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ЧекККМТовары.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА СУММА(ЧекККМТовары.СуммаРучнойСкидки) + СУММА(ЧекККМТовары.СуммаАвтоматическойСкидки) = 0
		|				ИЛИ СУММА(ЧекККМТовары.КоличествоУпаковок) = 0
		|			ТОГДА ЧекККМТовары.Цена
		|		ИНАЧЕ СУММА(ЧекККМТовары.Сумма) / СУММА(ЧекККМТовары.КоличествоУпаковок)
		|	КОНЕЦ КАК Цена,
		|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации,
		|	Сумма(ЧекККМТовары.Сумма),
		|	ЧекККМТовары.СуммаАвтоматическойСкидки,
		|	ЧекККМТовары.СуммаРучнойСкидки
		|ПОМЕСТИТЬ ЧекиККМ
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ПО ЗаполняемыеТовары.Номенклатура = ЧекККМТовары.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ЧекККМТовары.Характеристика
		|ГДЕ
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
		|	И (ЧекККМТовары.Ссылка.Партнер = &Партнер
		|			ИЛИ &Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.Организация = &Организация
		|	И (ЧекККМТовары.Ссылка = &ЧекККМ ИЛИ &ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка))
		|	И ЧекККМТовары.Ссылка.Дата <= &ДатаВозврата
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Серия,
		|	ЧекККМТовары.Упаковка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.Ссылка.Дата,
		|	ЧекККМТовары.СуммаАвтоматическойСкидки,
		|	ЧекККМТовары.СуммаРучнойСкидки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации,
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
		|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
		|	ЧекККМВозвратТовары.Серия КАК Серия,
		|	ЧекККМВозвратТовары.Упаковка КАК Упаковка,
		|	СУММА(ЧекККМВозвратТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
		|	ЧекККМВозвратТовары.Цена КАК Цена,
		|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации,
		|	ЧекККМВозвратТовары.Сумма
		|ПОМЕСТИТЬ ЧекиККМВозврат
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
		|ГДЕ
		|	ЧекККМВозвратТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
		|	И ЧекККМВозвратТовары.Ссылка.Проведен
		|	И ЧекККМВозвратТовары.Ссылка.Организация = &Организация
		|	И ЧекККМВозвратТовары.Ссылка.Дата <= &ДатаВозврата
		|	И ЧекККМВозвратТовары.КоличествоУпаковок <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМВозвратТовары.Упаковка,
		|	ЧекККМВозвратТовары.Номенклатура,
		|	ЧекККМВозвратТовары.Ссылка,
		|	ЧекККМВозвратТовары.Характеристика,
		|	ЧекККМВозвратТовары.Серия,
		|	ЧекККМВозвратТовары.Цена,
		|	ЧекККМВозвратТовары.Ссылка.Дата,
		|	ЧекККМВозвратТовары.Сумма
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации,
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия КАК Серия,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаПроверяемыеТовары.Ссылка
		|ПОМЕСТИТЬ ДанныеВозврата
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
		|	ПО (ТаблицаПроверяемыеТовары.ДокументРеализации = ЧекиККМ.ДокументРеализации)
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.Серия,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации,
		|	ТаблицаПроверяемыеТовары.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации,
		|	ЧекиККМ.Номенклатура,
		|	ЧекиККМ.Характеристика,
		|	ЧекиККМ.Серия,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
		|	ЧекиККМ.Упаковка,
		|	ВЫБОР
		|		КОГДА ЧекиККМ.Упаковка = ЗаполняемыеТовары.Упаковка ТОГДА
		|			ВЫБОР
		|				КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
		|				ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки1
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
		|				ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки2
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) = 0
		|			ТОГДА ЧекиККМ.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЧекиККМ.Упаковка = ЗаполняемыеТовары.Упаковка ТОГДА
		|					ВЫБОР
		|						КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
		|							ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|						ТОГДА ЧекиККМ.Сумма / (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0))
		|					ИНАЧЕ ЧекиККМ.Сумма / ((ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки1)
		|				КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР
		|					КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Сумма / ЧекиККМ.Количество
		|					ИНАЧЕ ЧекиККМ.Сумма / (ЧекиККМ.Количество / &ТекстЗапросаКоэффициентУпаковки2)
		|				КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМ КАК ЧекиККМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
		|			ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
		|				И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
		|				И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
		|				И ЧекиККМ.Серия = ЧекиККМВозврат.Серия
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
		|			ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.Ссылка.ЧекККМ
		|				И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
		|				И ЧекиККМ.Характеристика = ДанныеВозврата.Характеристика
		|				И ЧекиККМ.Серия = ДанныеВозврата.Серия
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|			ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
		|		ПО ЗаполняемыеТовары.Номенклатура = ЧекиККМ.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ЧекиККМ.Характеристика
		|			И ЗаполняемыеТовары.Серия = ЧекиККМ.Серия
		|ГДЕ
		|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) > 0
		|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРеализации УБЫВ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЧекиККМ.Упаковка",
			"ЧекиККМ.Номенклатура"));
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЗаполняемыеТовары.Упаковка",
			"ЗаполняемыеТовары.Номенклатура"));
			
		Запрос.УстановитьПараметр("Партнер", ДокументВозврата.Партнер);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
		Запрос.УстановитьПараметр("НалогообложениеНДС", ДокументВозврата.НалогообложениеНДС);
		Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
		Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
		Запрос.УстановитьПараметр("ЧекККМ", ДокументВозврата.ЧекККМ);
		Запрос.УстановитьПараметр("ДатаВозврата", ?(ЗначениеЗаполнено(ДокументВозврата.Дата),ДокументВозврата.Дата,ТекущаяДатаСеанса()));
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТовары Из ТабличнаяЧастьВозврата Цикл
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура", СтрокаТовары.Номенклатура);
		СтруктураОтбора.Вставить("Характеристика", СтрокаТовары.Характеристика);
		СтруктураОтбора.Вставить("Серия", СтрокаТовары.Серия);
		СтруктураОтбора.Вставить("Назначение", СтрокаТовары.Назначение);
		Если ЗначениеЗаполнено(СтрокаТовары.ДокументРеализации) Тогда
			СтруктураОтбора.Вставить("ДокументРеализации", СтрокаТовары.ДокументРеализации);
		КонецЕсли;
		
		НайденныеСтроки = РезультатЗапроса.НайтиСтроки(СтруктураОтбора);
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокаТовары.Количество <= НайденнаяСтрока.Количество Тогда
				
				СтрокаТовары.ДокументРеализации = НайденнаяСтрока.ДокументРеализации;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТовары.Количество;
				НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаТовары.КоличествоУпаковок;
				Если НайденнаяСтрока.Количество = 0 Тогда
					РезультатЗапроса.Удалить(НайденнаяСтрока);
				КонецЕсли;
			Иначе
				СтрокаТовары.ДокументРеализации = НайденнаяСтрока.ДокументРеализации;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				ДобавленнаяСтрока = ТабличнаяЧастьВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтрокаТовары, ,"КодСтроки, ДокументРеализации");
				ДобавленнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок -  НайденнаяСтрока.КоличествоУпаковок;
				ДобавленнаяСтрока.Количество = СтрокаТовары.Количество - НайденнаяСтрока.Количество;
				СтрокаТовары.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок;
				СтрокаТовары.Количество = НайденнаяСтрока.Количество;
				РезультатЗапроса.Удалить(НайденнаяСтрока);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.ДокументРеализации = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			СтрокаТовары.Цена = 0;
		КонецЕсли;
	КонецЦикла;
		
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ДокументВозврата);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ТипЗнч(ДокументВозврата.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		Если ТипЗнч(ДокументВозврата) <> Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			СтруктураДействий.Вставить(
				"ЗаполнитьДубликатыЗависимыхРеквизитов", 
				Новый Структура("ОтмененоБезВозвратнойТары", "Сумма, СуммаНДС, СуммаСНДС"));
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ДокументВозврата) = Тип("ДокументОбъект.ВозвратТоваровОтКлиента") Тогда
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьСпособОпределенияСебестоимости", Перечисления.СпособыОпределенияСебестоимостиВозврата.ИзТекущегоДокумента);
		СтруктураДействий.Вставить("ЗаполнитьСпособОпределенияСебестоимостиСтрокой", ПараметрыОпределенияСебестоимости(ДокументВозврата));
	КонецЕсли;
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТабличнаяЧастьВозврата, СтруктураДействий, Неопределено);

КонецПроцедуры

// Обновляет информацию о количестве документов реализаций в табличной части документа возврата.
//
// Параметры:
//		СписокРеализаций - СписокЗначений - Список значений, содержащий список документов реализаций
//		РеализацияВШапке - Неопределено - Ссылка на документ реализации в шапке документа
//		НадписьЗаголовок - Строка - Надпись, содержащая информацию о количестве документов реализаций
//		ЭлементыФормы - ЭлементыФормы - Элементы формы документа возврата
//		КолонкаВТабличнойЧасти - Неопределено - Колонка табличной части, содержащая документы реализации
//		ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа возврата
//		ИмяРеализацииВТабличнойЧасти - Строка - Название колонки с документами реализаций в табличной части.
//		
Процедура ОбновитьИнформациюПоРеализациямВФорме(СписокРеализаций,
	                                            РеализацияВШапке,
	                                            НадписьЗаголовок,
	                                            ЭлементыФормы,
	                                            КолонкаВТабличнойЧасти,
	                                            Знач ТабличнаяЧасть,
	                                            Знач ИмяРеализацииВТабличнойЧасти) Экспорт
	
	СписокРеализаций.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяРеализацииВТабличнойЧасти]) И СписокРеализаций.НайтиПоЗначению(ТекСтрока[ИмяРеализацииВТабличнойЧасти]) = Неопределено Тогда
			СписокРеализаций.Добавить(ТекСтрока[ИмяРеализацииВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокРеализаций.Количество() = 1 Тогда
		РеализацияВШапке = СписокРеализаций[0].Значение;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() > 1 Тогда
		НадписьЗаголовок = СтрЗаменить(
			НСтр("ru = 'Всего документов: %КоличествоРеализаций%'"), "%КоличествоРеализаций%",
			СписокРеализаций.Количество());
		РеализацияВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() < 1 Тогда
		РеализацияВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыРеализации.ТекущаяСтраница = ЭлементыФормы.СтраницаРеализация;
	Иначе
		ЭлементыФормы.СтраницыРеализации.ТекущаяСтраница = ЭлементыФормы.СтраницаРеализации;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ возврата товарами по чеку ККМ
//
// Параметры:
//		ДокументВозврата - ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента, ДокументОбъект.ВозвратТоваровОтКлиента - 
//		ИмяТаблицы - Строка - Имя таблицы Товары.
Процедура ЗаполнитьВозвращаемыеТоварыПоЧеку(ДокументВозврата, ИмяТаблицы) Экспорт
	
	ТаблицаПроверяемыеТовары = ДокументВозврата[ИмяТаблицы].Выгрузить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
	|	ЧекККМТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЧекККМТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Серия КАК Серия,
	|   ЧекККМТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЧекККМТовары.Упаковка КАК Упаковка,
	|	СУММА(ЧекККМТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЧекККМТовары.Количество) КАК Количество,
	|	ЧекККМТовары.Цена КАК Цена,
	|	СУММА(ЧекККМТовары.Сумма) КАК Сумма,
	|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЧекККМТовары.СуммаНДС) КАК СуммаНДС,
	|	ЧекККМТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	СУММА(ЧекККМТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|	ЧекККМТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	СУММА(ЧекККМТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
	|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации,
	|	ЧекККМТовары.Ссылка.Номер КАК НомерРеализации,
	|	ЧекККМТовары.Ссылка.Валюта КАК ВалютаРеализации,
	|	ЧекККМТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекККМТовары.Ссылка.Партнер КАК Партнер
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМ
	|	И ЧекККМТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
	|	И ЧекККМТовары.Ссылка.Проведен
	|	И ЧекККМТовары.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.Ссылка,
	|	ЧекККМТовары.НоменклатураНабора,
	|	ЧекККМТовары.ХарактеристикаНабора,
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Серия,
	|   ЧекККМТовары.СтатусУказанияСерий,
	|	ЧекККМТовары.Упаковка,
	|	ЧекККМТовары.Цена,
	|	ЧекККМТовары.СтавкаНДС,
	|	ЧекККМТовары.ПроцентАвтоматическойСкидки,
	|	ЧекККМТовары.ПроцентРучнойСкидки,
	|	ЧекККМТовары.Ссылка.Дата,
	|	ЧекККМТовары.Ссылка.Номер,
	|	ЧекККМТовары.Ссылка.Валюта,
	|	ЧекККМТовары.Ссылка.ЦенаВключаетНДС,
	|	ЧекККМТовары.Ссылка.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
	|	ЧекККМВозвратТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЧекККМВозвратТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
	|	ЧекККМВозвратТовары.Серия КАК Серия,
	|   ЧекККМВозвратТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЧекККМВозвратТовары.Упаковка КАК Упаковка,
	|	СУММА(ЧекККМВозвратТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
	|	ЧекККМВозвратТовары.Цена КАК Цена,
	|	СУММА(ЧекККМВозвратТовары.Сумма) КАК Сумма,
	|	ЧекККМВозвратТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЧекККМВозвратТовары.СуммаНДС) КАК СуммаНДС,
	|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации,
	|	ЧекККМВозвратТовары.Ссылка.Номер КАК НомерРеализации,
	|	ЧекККМВозвратТовары.Ссылка.Валюта КАК ВалютаРеализации,
	|	ЧекККМВозвратТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекККМВозвратТовары.Ссылка.Партнер КАК Партнер
	|ПОМЕСТИТЬ ЧекиККМВозврат
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
	|ГДЕ
	|	ЧекККМВозвратТовары.Ссылка.ЧекККМ = &ЧекККМ
	|	И ЧекККМВозвратТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
	|	И ЧекККМВозвратТовары.Ссылка.Проведен
	|	И ЧекККМВозвратТовары.Ссылка.Организация = &Организация
	|	И ЧекККМВозвратТовары.КоличествоУпаковок <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМВозвратТовары.Упаковка,
	|	ЧекККМВозвратТовары.НоменклатураНабора,
	|	ЧекККМВозвратТовары.ХарактеристикаНабора,
	|	ЧекККМВозвратТовары.Номенклатура,
	|	ЧекККМВозвратТовары.СтавкаНДС,
	|	ЧекККМВозвратТовары.Ссылка,
	|	ЧекККМВозвратТовары.Характеристика,
	|	ЧекККМВозвратТовары.Серия,
	|   ЧекККМВозвратТовары.СтатусУказанияСерий,
	|	ЧекККМВозвратТовары.Цена,
	|	ЧекККМВозвратТовары.Ссылка.Дата,
	|	ЧекККМВозвратТовары.Ссылка.Номер,
	|	ЧекККМВозвратТовары.Ссылка.Валюта,
	|	ЧекККМВозвратТовары.Ссылка.ЦенаВключаетНДС,
	|	ЧекККМВозвратТовары.Ссылка.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПроверяемыеТовары.НоменклатураНабора,
	|	ТаблицаПроверяемыеТовары.ХарактеристикаНабора,
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	ТаблицаПроверяемыеТовары.Серия,
	|   ТаблицаПроверяемыеТовары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
	|	ТаблицаПроверяемыеТовары.ДокументРеализации,
	|	ТаблицаПроверяемыеТовары.Ссылка.ЧекККМ КАК ЧекККМ,
	|	СУММА(ТаблицаПроверяемыеТовары.Сумма) КАК Сумма,
	|	СУММА(ТаблицаПроверяемыеТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаПроверяемыеТовары.СуммаСНДС) КАК СуммаСНДС
	|ПОМЕСТИТЬ ДанныеВозврата
	|ИЗ
	| Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
	|ГДЕ
	|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
	|	И ТаблицаПроверяемыеТовары.Ссылка.ЧекККМ = &ЧекККМ
	|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроверяемыеТовары.НоменклатураНабора,
	|	ТаблицаПроверяемыеТовары.ХарактеристикаНабора,
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	ТаблицаПроверяемыеТовары.Серия,
	|   ТаблицаПроверяемыеТовары.СтатусУказанияСерий,
	|	ТаблицаПроверяемыеТовары.ДокументРеализации,
	|	ТаблицаПроверяемыеТовары.Ссылка.ЧекККМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияСебестоимостиВозврата.ИзДокументаПродажи) КАК СпособОпределенияСебестоимости,
	|	ЧекиККМ.НоменклатураНабора,
	|	ЧекиККМ.ХарактеристикаНабора,
	|	ЧекиККМ.Номенклатура КАК Номенклатура,
	|	ЧекиККМ.Характеристика КАК Характеристика,
	|	ЧекиККМ.Серия КАК Серия,
	|   ЧекиККМ.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЧекиККМ.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
	|				ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
	|		ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) = 0
	|			ТОГДА ЧекиККМ.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
	|						ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					ТОГДА ЧекиККМ.Сумма / ЧекиККМ.Количество
	|				ИНАЧЕ ЧекиККМ.Сумма / (ЧекиККМ.Количество / &ТекстЗапросаКоэффициентУпаковки)
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЧекиККМ.Сумма - ЕСТЬNULL(ДанныеВозврата.Сумма, 0) - ЕСТЬNULL(ЧекиККМВозврат.Сумма, 0) КАК Сумма,
	|	ЧекиККМ.СтавкаНДС КАК СтавкаНДС,
	|	ЧекиККМ.СуммаНДС - ЕСТЬNULL(ДанныеВозврата.СуммаНДС, 0) - ЕСТЬNULL(ЧекиККМВозврат.СуммаНДС, 0) КАК СуммаНДС,
	|	ЧекиККМ.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЧекиККМ.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекиККМ.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЧекиККМ.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
	|	ЧекиККМ.НомерРеализации КАК НомерРеализации,
	|	ЧекиККМ.ВалютаРеализации КАК ВалютаРеализации,
	|	ЧекиККМ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекиККМ.Партнер КАК Партнер,
	|	ЧекиККМ.ДокументРеализации.Склад КАК Склад
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
	|		ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
	|			И ЧекиККМ.НоменклатураНабора = ЧекиККМВозврат.НоменклатураНабора
	|			И ЧекиККМ.ХарактеристикаНабора = ЧекиККМВозврат.ХарактеристикаНабора
	|			И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
	|			И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
	|			И ЧекиККМ.Серия = ЧекиККМВозврат.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
	|		ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.ЧекККМ
	|			И ЧекиККМ.НоменклатураНабора = ДанныеВозврата.НоменклатураНабора
	|			И ЧекиККМ.ХарактеристикаНабора = ДанныеВозврата.ХарактеристикаНабора
	|			И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
	|			И ЧекиККМ.Характеристика = ДанныеВозврата.Характеристика
	|			И ЧекиККМ.Серия = ДанныеВозврата.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) > 0
	|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРеализации УБЫВ,
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Цена,
	|	СуммаРучнойСкидки,
	|	Партнер
	|";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЧекиККМ.Упаковка",
		"ЧекиККМ.Номенклатура"));
		
	Запрос.УстановитьПараметр("НалогообложениеНДС", ДокументВозврата.НалогообложениеНДС);
	Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
	Запрос.УстановитьПараметр("ЧекККМ", ДокументВозврата.ЧекККМ);
	Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументВозврата[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ДокументВозврата.Валюта <> Выборка.ВалютаРеализации Тогда
			БазоваяВалюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументВозврата.Организация);
			КурсНовойВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(ДокументВозврата.Валюта, ДокументВозврата.Дата, БазоваяВалюта);
			КурсСтаройВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.ВалютаРеализации, ДокументВозврата.Дата, БазоваяВалюта);
			
			НоваяСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
				НоваяСтрока.Цена,
				КурсСтаройВалюты,
				КурсНовойВалюты);
			
			Ценообразование.ПересчитатьСуммыВСтроке(
				НоваяСтрока,
				Ложь,
				Истина,
				Ложь,
				ДокументВозврата.ЦенаВключаетНДС);
				
		Иначе
			
			НоваяСтрока.СуммаСНДС = НоваяСтрока.Сумма + ?(ДокументВозврата.ЦенаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Управляет отображение ограничения задолженности в форме документа
//
// Параметры:
//	Договор           - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в документе
//	Дата              - Дата - Дата, на которую рассчитывается сумма просроченной задолженности
//	Текст             - Строка - Реквизит, которому присваивается текстовая строка об остатке допустимого кредита
//	ВидимостьТекста   - Булево - Реквизит, которому присваивается значение видимости строки об остатке допустимого кредита
//	ЦветТекста        - ЦветаСтиля - Реквизит, которому присваивается значение цвета строки об остатке допустимого кредита
//	ВидимостьКартинки - Булево - Реквизит, которому присваивается значение видимости картинки о запрете отгрузки.
//
Процедура ОбновитьОграничениеЗадолженности(Договор, Дата, Текст, ВидимостьТекста, ЦветТекста, ВидимостьКартинки) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		
		ДанныеДоговора = Новый Структура; 
		ДанныеДоговора.Вставить("ОграничиватьСуммуЗадолженности", Ложь); 
		ДанныеДоговора.Вставить("ДопустимаяСуммаЗадолженности", 0); 
		ДанныеДоговора.Вставить("ВалютаВзаиморасчетов", Неопределено); 
		ДанныеДоговора.Вставить("ЗапрещаетсяПросроченнаяЗадолженность", Ложь); 
		
		Если ЗначениеЗаполнено(Договор) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорыКонтрагентов.ОграничиватьСуммуЗадолженности КАК ОграничиватьСуммуЗадолженности,
			|	ДоговорыКонтрагентов.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
			|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДоговорыКонтрагентов.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Ссылка = &Договор");
			
			Запрос.УстановитьПараметр("Договор", Договор);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДанныеДоговора = Выборка;
			КонецЕсли;
			
		КонецЕсли;
		
		ПревышенаСумма = Ложь;
		Если ДанныеДоговора.ОграничиватьСуммуЗадолженности Тогда
			ОстатокДопустимогоКредита = ОстатокДопустимогоКредита(Договор, ДанныеДоговора.ДопустимаяСуммаЗадолженности);
			ПревышенаСумма = ОстатокДопустимогоКредита < 0;
		КонецЕсли;
		
		ПревышенСрок = Ложь;
		Если ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность Тогда
			СуммаПросроченнойЗадолженности = СуммаПросроченнойЗадолженности(Договор, Дата);
			ПревышенСрок = СуммаПросроченнойЗадолженности > 0;
		КонецЕсли;
		
		Если ПревышенаСумма ИЛИ ПревышенСрок Тогда
			Текст = НСтр("ru = 'Отгрузка запрещена'");
			ЦветТекста = WebЦвета.Кирпичный;
			ВидимостьТекста = Истина;
			ВидимостьКартинки = Истина;
		ИначеЕсли ДанныеДоговора.ОграничиватьСуммуЗадолженности Тогда
			Текст = НСтр("ru = 'Остаток допустимого кредита:'") + " " + Формат(ОстатокДопустимогоКредита, "ЧДЦ=2; ЧН=0,00") + " " + Строка(ДанныеДоговора.ВалютаВзаиморасчетов);
			ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
			ВидимостьТекста = Истина;
			ВидимостьКартинки = Ложь;
		Иначе
			Текст = "";
			ВидимостьТекста = Ложь;
			ВидимостьКартинки = Ложь;
		КонецЕсли;
		
	Иначе
		
		Текст = "";
		ВидимостьТекста = Ложь;
		ВидимостьКартинки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу, содержащую коэффициенты упаковок по таблице товаров.
// 
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаТоваров с полями:
// Ссылка,
// НомерСтроки,
// Номенклатура,
// Упаковка,
// КоличествоУпаковок,
// Количество.
//  ИмяТаблицыТоваров - Строка - Имя таблицы товаров
Процедура ПоместитьВременнуюТаблицуКоэффициентыУпаковок(МенеджерВременныхТаблиц, ИмяТаблицыТоваров = "ТаблицаТоваров") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстВременнойТаблицыКоэффициентовУпаковок(ИмяТаблицыТоваров);
		
	Запрос.Выполнить();
	
КонецПроцедуры

// Текст временной таблицы коэффициентов упаковок.
// 
// Параметры:
//  ИмяТаблицыТоваров - Строка - Имя таблицы товаров
// 
// Возвращаемое значение:
//  Строка - Текст временной таблицы коэффициентов упаковок
Функция ТекстВременнойТаблицыКоэффициентовУпаковок(ИмяТаблицыТоваров = "ТаблицаТоваров") Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	УпаковкиНоменклатуры.Владелец КАК Владелец,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки1
	|		КОНЕЦ) КАК Коэффициент
	|ПОМЕСТИТЬ Упаковки
	|ИЗ
	|	&ИмяТаблицыТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО УпаковкиНоменклатуры.Владелец = 
	|				ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА ТаблицаТоваров.Номенклатура
	|					ИНАЧЕ ТаблицаТоваров.Упаковка.Владелец
	|				КОНЕЦ
	|ГДЕ
	|	НЕ УпаковкиНоменклатуры.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Упаковка,
	|	УпаковкиНоменклатуры.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.Номенклатура,
	|	Упаковки.Упаковка КАК Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки2 КАК КоэффициентУпаковки,
	|	МИНИМУМ(УпаковкиНоменклатуры.Ссылка) КАК ВложеннаяУпаковка,
	|	МИНИМУМ(&ТекстЗапросаКоэффициентУпаковки3) КАК КоэффициентВложеннойУпаковки
	|ПОМЕСТИТЬ ВложенныеУпаковки
	|ИЗ
	|	Упаковки КАК Упаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО Упаковки.Владелец = УпаковкиНоменклатуры.Владелец
	|			И Упаковки.Коэффициент = &ТекстЗапросаКоэффициентУпаковки3
	|ГДЕ
	|	УпаковкиНоменклатуры.Родитель = Упаковки.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.Номенклатура,
	|	Упаковки.Упаковка,
	|	&ТекстЗапросаКоэффициентУпаковки2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.КоличествоУпаковок,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки4
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.КоэффициентУпаковки
	|	КОНЕЦ КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки4
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.КоэффициентВложеннойУпаковки
	|	КОНЕЦ КАК КоэффициентВложеннойУпаковки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|						ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения
	|					ИНАЧЕ ТаблицаТоваров.Упаковка
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.ВложеннаяУпаковка
	|	КОНЕЦ КАК ВидУпаковки,
	|	ТаблицаТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КоэффициентыУпаковок
	|ИЗ
	|	&ИмяТаблицыТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеУпаковки КАК ВложенныеУпаковки
	|		ПО ТаблицаТоваров.Номенклатура = ВложенныеУпаковки.Номенклатура
	|			И ТаблицаТоваров.Упаковка = ВложенныеУпаковки.Упаковка
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Упаковки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеУпаковки
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры",
		"ТаблицаТоваров.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Упаковки.Упаковка",
		"Упаковки.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"УпаковкиНоменклатуры",
		"Упаковки.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки4",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаТоваров.Упаковка",
		"ТаблицаТоваров.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыТоваров", ИмяТаблицыТоваров);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Изменяет связанные с партнером реквизиты при изменении партнера
//
// Параметры:
//	Объект           - ДокументОбъект - Документ продажи.
//
Процедура ПартнерПриИзменении(Объект) Экспорт
	
	Если Объект.Партнер <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Грузополучатель, "Партнер") Тогда
		Объект.Грузополучатель = Неопределено;
		Объект.БанковскийСчетГрузополучателя = Неопределено;
	КонецЕсли;
	Если Объект.Контрагент <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БанковскийСчетКонтрагента, "Владелец") Тогда
		Объект.БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры формирования временной таблицы товаров
// для функции менеджеров документов ПоместитьВременнуюТаблицуТоваров().
//
// Возвращаемое значение:
// Структура - состав:
//	* ПересчитыватьВВалютуРегл - Булево - Признак необходимости пересчета сумм табличной части в валюту регламентированного учета.
//	* ВключаяНомераГТД - Булево - Выводить номера ГТД.
//	* ВключаяДоКорректировки - Булево - Формировать дополнительные показатели изменений для документов корректировки.
//	* АктуализироватьРасчеты - Булево - Актуализировать последовательность расчетов по документам с клиентами при необходимости.
//
Функция ПараметрыЗаполненияВременнойТаблицыТоваров() Экспорт
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПересчитыватьВВалютуРегл", Истина);
	СтруктураПараметров.Вставить("ВключаяНомераГТД", Ложь);
	СтруктураПараметров.Вставить("ВключаяДоКорректировки", Ложь);
	СтруктураПараметров.Вставить("АктуализироватьРасчеты", Истина);
	СтруктураПараметров.Вставить("ДляСчетаФактуры", Ложь);
	СтруктураПараметров.Вставить("ОбработатьНастройкиПечатиНаборов", Ложь);
	СтруктураПараметров.Вставить("ВыводитьСерииНоменклатуры", Константы.ВыводитьСерииВПечатныхФормах.Получить());
	СтруктураПараметров.Вставить("ВыводитьСклад", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Проверяет использование расширенных возможностей документа 'Заказ клиента'.
//
// Параметры:
//	Документ - ДокументСсылка - ссылка на проверяемый документ.
//
// Возвращаемое значение:
//	Булево - Истина, признак использования документом 'Заказ клиента', расширенных возможностей.
//
Функция ИспользоватьЗаказКлиентаКакСчет(Документ) Экспорт
	
	ИспользоватьЗаказКакСчет = ЗначениеЗаполнено(Документ)
								И ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказКлиента")
								И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ЭтоЗаказКакСчет");
	
	Возврат ИспользоватьЗаказКакСчет;
	
КонецФункции

// Формирует массив текстов полей сформированных на основании документов в фоне.
// 
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения - в форме должены быть реквизиты:
//    * ТекстДокументыНаОсновании - ФорматированнаяСтрока - реквизит должен быть размещен в элеменете с именем ТекстДокументыНаОсновании.
//    * КомиссионныеПродажи25 - Булево - режим комиссионных продаж.
//    * ДокументыНаОсновании - СписокЗначений - Список, в который будут помещены найденные документы.
//  ДокументОбъект - ДокументОбъект - документ, по которому необходимо сформировать параметры.
// 
// Возвращаемое значение:
//  см. ДлительныеОперации.ВыполнитьВФоне
//
Функция ПолучениеТекстовПолейДокументовНаОснованииВФоне(ФормаДокумента, ДокументОбъект) Экспорт
	
	ФормаДокумента.Элементы.ТекстДокументыНаОсновании.Видимость = Истина;
	ФормаДокумента.ТекстДокументыНаОсновании = Новый ФорматированнаяСтрока(НСтр("ru = '<идет обновление данных>'"));
	
	РезультатФоновогоЗадания = Новый Структура();
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.Ссылка) Тогда
		ФормаДокумента.Элементы.ТекстДокументыНаОсновании.Видимость = Ложь;
		Возврат РезультатФоновогоЗадания;
	КонецЕсли;
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	СписокДокументов = СписокТиповДокументовНавигационнойСсылки(ДокументСсылка, ФормаДокумента.КомиссионныеПродажи25);
	
	ПроцедураРасчета = "ПродажиСервер.ТекстыПолейДокументовНаОснованииВХранилище";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор());
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("ДокументСсылка", ДокументСсылка);
	ПараметрыВызова.Вставить("СписокДокументов", СписокДокументов);
	ПараметрыВызова.Вставить("ДокументыНаОсновании", ФормаДокумента.ДокументыНаОсновании);
	
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ПроцедураРасчета,
																	ПараметрыВызова,
																	ПараметрыВыполнения);
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

// Помещаяет данные по документам созданным на основании во временное хранилище.
// 
// Параметры:
//  Параметры - Структура - Параметры вызова процедуры.
//  АдресХранилища - Строка - адрес временного хранилища.
Процедура ТекстыПолейДокументовНаОснованииВХранилище(Параметры, АдресХранилища) Экспорт
	
	ДанныеРезультата = ПолучитьДокументыНаОсновании(Параметры.ДокументСсылка);
	ДокументыНаОсновании = Параметры.ДокументыНаОсновании;
	
	ТекстыПоляДокументыНаОсновании = Новый СписокЗначений;
	
	СформироватьТекстыПолейДокументовНаОсновании("", ТекстыПоляДокументыНаОсновании, ДокументыНаОсновании,
		Параметры.СписокДокументов, ДанныеРезультата);

	ДанныеРезультата = Новый Структура;
	ДанныеРезультата.Вставить("ТекстыПоляДокументыНаОсновании", ТекстыПоляДокументыНаОсновании);
	ДанныеРезультата.Вставить("ДокументыНаОсновании", ДокументыНаОсновании);

	ПоместитьВоВременноеХранилище(ДанныеРезультата, АдресХранилища);
	
КонецПроцедуры
	
Функция СписокТиповДокументовНавигационнойСсылки(Объект, КомиссионныеПродажи25)

	СписокДокументов = Новый СписокЗначений;
	РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект, "ХозяйственнаяОперация, ПорядокРасчетов, ФормаОплаты");
	
	Если РеквизитыОбъекта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		СписокДокументов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		СписокДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		Если РеквизитыОбъекта.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам 
			И (РеквизитыОбъекта.ФормаОплаты = Перечисления.ФормыОплаты.Наличная 
				ИЛИ РеквизитыОбъекта.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка()) Тогда
			СписокДокументов.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
		КонецЕсли;
		
	ИначеЕсли РеквизитыОбъекта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		СписокДокументов.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));
		
	ИначеЕсли РеквизитыОбъекта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтгрузкаПринятыхСПравомПродажиТоваровСХранения Тогда
		СписокДокументов.Добавить(Тип("ДокументСсылка.ОтгрузкаТоваровСХранения"));
		
	ИначеЕсли РеквизитыОбъекта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию 
		И КомиссионныеПродажи25 Тогда
		СписокДокументов.Добавить(Тип("ДокументСсылка.ПередачаТоваровХранителю"));
		
	КонецЕсли; 
	
	Возврат СписокДокументов;
	
КонецФункции
	

Функция ПолучитьДокументыНаОсновании(ДокументСсылка) Экспорт
	
	ОбъектРасчетов = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ОбъектыРасчетов.Ссылка КАК ОбъектыРасчетовСсылка
	               |ИЗ
	               |	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	               |ГДЕ
	               |	ОбъектыРасчетов.Объект = &ЗначениеКритерияОтбора
	               |	И НЕ ОбъектыРасчетов.ПометкаУдаления";
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ОбъектРасчетов = Выборка.ОбъектыРасчетовСсылка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязанныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязанныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&ОбъектРасчетов) КАК СвязанныеДокументы";
	
	ВсеСсылки = Новый Массив;
	ВсеТипы = Новый Массив;
	ВсеТипы.Добавить(ТипЗнч(ДокументСсылка));
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	Для каждого ЭлемРезультат Из РезультатПакета Цикл
		Выборка = ЭлемРезультат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Не ЗначениеЗаполнено(Выборка.Ссылка)
				ИЛИ ВсеСсылки.Найти(Выборка.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ВсеСсылки.Добавить(Выборка.Ссылка);
			ТипСсылки = ТипЗнч(Выборка.Ссылка);
			Если ВсеТипы.Найти(ТипСсылки) = Неопределено Тогда
				ВсеТипы.Добавить(ТипСсылки);
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаСсылок.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(ВсеТипы));
	Для каждого Элем Из ВсеСсылки Цикл
		НовСтрока = ТаблицаСсылок.Добавить();
		НовСтрока.Ссылка = Элем;
	КонецЦикла; 
	
	Запрос.Параметры.Вставить("ВсеСсылки",ТаблицаСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВсеСсылки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВсеСсылки
	|ИЗ
	|	&ВсеСсылки КАК ВсеСсылки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТИпЗначения(ВсеСсылки.Ссылка) КАК Тип,
	|	ВсеСсылки.Ссылка КАК Ссылка,
	|	ВсеСсылки.Ссылка.Дата КАК Дата,
	|	ВсеСсылки.Ссылка.Номер КАК Номер
	|ИЗ
	|	ВсеСсылки КАК ВсеСсылки
	|ГДЕ 
	|	ВсеСсылки.Ссылка.Проведен
	|ИТОГИ ПО
	|	Тип
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыгрузкаДокументов = РезультатЗапроса.Выгрузить();
	ВыгрузкаДокументовПоТипу = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеРезультата = Новый Структура();
	
	ДанныеРезультата.Вставить("ВыгрузкаДокументовПоТипу", ВыгрузкаДокументовПоТипу);
	ДанныеРезультата.Вставить("ВыгрузкаДокументов", ВыгрузкаДокументов);
	
	Возврат ДанныеРезультата;
	
КонецФункции

// Формирует массив текстов сформированных на основании документов
//
// Параметры:
// 	АдресРезультата - Строка
// 	ТекстыПоляДокументыНаОсновании - Массив из ФорматированнаяСтрока
// 	ДокументыНаОсновании - СписокЗначений - Список, в который будут помещены найденные документы
// 	СписокТиповДокументовДляОформления - СписокЗначений - Список типов документов, которые можно оформлять
//  ДанныеРезультата - Неопределено, Структура - Данные результата:
// * ВыгрузкаДокументовПоТипу - ТаблицаЗначений, ДеревоЗначений -
// * ВыгрузкаДокументов - ТаблицаЗначений -
// 
Процедура СформироватьТекстыПолейДокументовНаОсновании(АдресРезультата, ТекстыПоляДокументыНаОсновании, 
			ДокументыНаОсновании, СписокТиповДокументовДляОформления, ДанныеРезультата = Неопределено) Экспорт
	
	Если ДанныеРезультата = Неопределено Тогда
		ДанныеРезультата = ПолучитьИзВременногоХранилища(АдресРезультата);
		УдалитьИзВременногоХранилища(АдресРезультата);
	КонецЕсли;
	
	Если ДанныеРезультата = Неопределено 
		Или Не ДанныеРезультата.Свойство("ВыгрузкаДокументовПоТипу")
		Или Не ДанныеРезультата.Свойство("ВыгрузкаДокументов") Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузкаДокументовПоТипу = ДанныеРезультата.ВыгрузкаДокументовПоТипу;
	ВыгрузкаДокументов = ДанныеРезультата.ВыгрузкаДокументов;
	
	// дополним типами, которых нет
	Для каждого ТипДокументаДляОформления Из СписокТиповДокументовДляОформления Цикл
	
		НайденныеТипы = ВыгрузкаДокументовПоТипу.Строки.НайтиСтроки(Новый Структура("Тип", ТипДокументаДляОформления.Значение));
		Если НайденныеТипы.Количество() = 0 Тогда
			
			НоваяСтрока = ВыгрузкаДокументовПоТипу.Строки.Добавить();
			НоваяСтрока.Тип = ТипДокументаДляОформления.Значение;
		
		КонецЕсли; 
	
	КонецЦикла; 
	
	ВыгрузкаДокументовПоТипу.Строки.Сортировать("Тип");
	
	КоличествоДокументовПоТипу = 0;
	Для Каждого Документ Из ВыгрузкаДокументов Цикл
		Если Не СписокТиповДокументовДляОформления.НайтиПоЗначению(Документ.Тип) = Неопределено Тогда
			КоличествоДокументовПоТипу = КоличествоДокументовПоТипу + 1;
		КонецЕсли;
	КонецЦикла;
	
	СписокДоступныхТиповДокументовДляОформления = Новый СписокЗначений;
	
	Для Каждого ТипДокументаДляОформления Из СписокТиповДокументовДляОформления Цикл
		
		ДокументОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДокументаДляОформления.Значение);
		Если Не (ДокументОбъектМетаданных = Неопределено)
			И ПравоДоступа("Добавление", Метаданные.Документы[ДокументОбъектМетаданных.Имя]) Тогда
			СписокДоступныхТиповДокументовДляОформления.Добавить(ТипДокументаДляОформления.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧастиФорматированнойСтроки = Новый Массив;
	
	Если КоличествоДокументовПоТипу = 0 И СписокДоступныхТиповДокументовДляОформления.Количество() > 1 Тогда
		// сформируем надпись про комплект
		
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Оформить комплект документов'"),,,,
											"ОформитьКомплект_"));
		
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(" ("));
		
		КоличествоДокументов = 0;
		
		Для каждого ТипДокументаДляОформления Из СписокДоступныхТиповДокументовДляОформления Цикл
			
			ДокументОбъектМетаданных = Метаданные.НайтиПоТипу(ТипДокументаДляОформления.Значение);
			КоличествоДокументов = КоличествоДокументов + 1;
			
			НаименованияДокумента 	= ПолучитьСокращенныеНаименованияДокумента(ТипДокументаДляОформления.Значение);
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(НаименованияДокумента.ВинительныйПадеж,,,,
												"Оформить_" + ДокументОбъектМетаданных.ПолноеИмя()));
				
			Если КоличествоДокументов < СписокДоступныхТиповДокументовДляОформления.Количество() Тогда
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(", "));
			КонецЕсли;
			
		КонецЦикла;
		
		ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(")"));
		
	Иначе
		// сформируем надписи по отдельности
		
		Для каждого ДокументыПоТипу Из ВыгрузкаДокументовПоТипу.Строки Цикл
			
			Если СписокТиповДокументовДляОформления.НайтиПоЗначению(ДокументыПоТипу.Тип) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДокументОбъектМетаданных = Метаданные.НайтиПоТипу(ДокументыПоТипу.Тип);
			Если ДокументОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ПравоДоступа("Чтение", Метаданные.Документы[ДокументОбъектМетаданных.Имя]) Тогда
				Продолжить;
			КонецЕсли;
			
			НаименованияДокумента 	= ПолучитьСокращенныеНаименованияДокумента(ДокументыПоТипу.Тип);
			
			ДокументыПоТипуСтроки = ДокументыПоТипу.Строки;
			
			Если ДокументыПоТипуСтроки.Количество() = 0 Тогда
			
				Если Не ПравоДоступа("Добавление", Метаданные.Документы[ДокументОбъектМетаданных.Имя]) Тогда
					Продолжить;
				КонецЕсли;
				ТекстОформить = НСтр("ru = 'Оформить %1'");
				ТекстОформить = СтрШаблон(ТекстОформить, НаименованияДокумента.ВинительныйПадеж);
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстОформить,,,,
													"Оформить_" + ДокументОбъектМетаданных.ПолноеИмя()));
					
			ИначеЕсли ДокументыПоТипуСтроки.Количество() = 1 Тогда
					
				ДокументыНаОсновании.Добавить(ДокументыПоТипуСтроки[0].Ссылка); 
				
				ПредставлениеДокумента = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДокументыПоТипуСтроки[0], НаименованияДокумента.Сокращенное);
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(ПредставлениеДокумента,,,,
													"ОткрытьДокумент_" + ПолучитьНавигационнуюСсылку(ДокументыПоТипуСтроки[0].Ссылка)));
			
			ИначеЕсли ДокументыПоТипуСтроки.Количество() > 1 Тогда
			
				Для каждого Документ Из ДокументыПоТипуСтроки Цикл
					ДокументыНаОсновании.Добавить(Документ.Ссылка);
				КонецЦикла; 
				
				ТекстГиперссылки = НаименованияДокумента.МножественноеЧисло + Символы.НПП + 
												"(" + Строка(ДокументыПоТипуСтроки.Количество()) + ")";
				ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
													"ОткрытьСписок_" + ДокументОбъектМетаданных.ПолноеИмя()));
			
			КонецЕсли; 
			
			ЧастиФорматированнойСтроки.Добавить(Новый ФорматированнаяСтрока("  "));
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстыПоляДокументыНаОсновании.Добавить(ЧастиФорматированнойСтроки);
	
КонецПроцедуры

// Функция формирует параметры для выводы массы прописью.
// Например, в виде "Двадцать три т. триста сорок три кг.".
//
// Параметры:
//  Масса - Число
//  КоэффициентПересчетаВТонны - Число
//
// Возвращаемое значение:
//  Структура:
//  * Формат - строка
//  * Коэффициент - Число
//
Функция ПараметрыМассыПрописью(Масса, КоэффициентПересчетаВТонны) Экспорт
	
	МассаТонны = Масса * КоэффициентПересчетаВТонны;
	Если МассаТонны >= 1 Тогда
		Коэффициент = 1;
		СтрокаФормат = "т, т, т, ж, кг, кг, кг, м, " + ?(Окр(МассаТонны) = МассаТонны, "0", "3");
	ИначеЕсли МассаТонны * 1000 >= 1 Тогда
		Коэффициент = 1000;
		СтрокаФормат = "кг, кг, кг, м, г, г, г, м, " + ?(Окр(МассаТонны * Коэффициент) = МассаТонны * Коэффициент, "0", "3");
	Иначе
		Коэффициент = 1000000;
		СтрокаФормат = "г, г, г, м, г, г, г, м, 0";
	КонецЕсли;
	
	Возврат Новый Структура("Формат, Коэффициент", СтрокаФормат, Коэффициент*КоэффициентПересчетаВТонны);
	
КонецФункции

// Возвращает процент прироста с учетом наличия отрицательных значений.
//
// Параметры:
//	ПредыдущееЗначение - Число
//	ТекущееЗначение - Число
//
// Возвращаемое значение:
//	Число
//
Функция ПроцентПрироста(ПредыдущееЗначение, ТекущееЗначение) Экспорт
	
	Результат = 0;
	
	Если ПредыдущееЗначение = ТекущееЗначение Тогда
		Результат = 0;
	ИначеЕсли ТекущееЗначение = 0 И ПредыдущееЗначение < 0 Тогда
		Результат = 100;
	ИначеЕсли ТекущееЗначение = 0 Тогда
		Результат = -100;
	ИначеЕсли ТекущееЗначение < 0 И ПредыдущееЗначение = 0 Тогда
		Результат = -100;
	ИначеЕсли ПредыдущееЗначение = 0 Тогда
		Результат = 100;
	Иначе
		Результат = (ТекущееЗначение - ПредыдущееЗначение) / ?(ПредыдущееЗначение > 0, ПредыдущееЗначение, -ПредыдущееЗначение) * 100;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Это договор по новой комиссии.
// 
// Параметры:
//  Договор - СправочникСсылка.ДоговорыКонтрагентов
// 
// Возвращаемое значение:
//  Булево - Это договор по новой комиссии
Функция ЭтоДоговорПоНовойКомиссии(Договор) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Результат = ЗначениеЗаполнено(Договор)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "КомиссионныеПродажи25");

	УстановитьПривилегированныйРежим(Ложь);
		
	Возврат Результат;
	
КонецФункции

// Это соглашение по новой комиссии.
// 
// Параметры:
//  Соглашение - СправочникСсылка.СоглашенияСКлиентами
// 
// Возвращаемое значение:
//  Булево - Это соглашение по новой комиссии
Функция ЭтоСоглашениеПоНовойКомиссии(Соглашение) Экспорт
	
	Результат = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);

	Если ЗначениеЗаполнено(Соглашение) Тогда
		РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Соглашение, "КомиссионныеПродажи25, ХозяйственнаяОперация");
		
		Результат = РеквизитыСоглашения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И РеквизитыСоглашения.КомиссионныеПродажи25;
		
	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеАналитикРасходовВДокументах

// Заполняет данные выбора во время автоподбора аналитики по введенному тексту.
//
// Параметры:
//  ДанныеВыбора - СписокЗначений - Список значений для заполнения.
//  Текст - Строка - Текст, введенный в поле.
//
Процедура ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДокументыРеализации();
	Запрос.УстановитьПараметр("СтрокаПоиска", Текст + "%");
	Запрос.УстановитьПараметр("ТипыСсылок", ТипыСсылокДокументыРеализации());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(
			Новый Структура("Значение, ПометкаУдаления",
				Выборка.Ссылка,
				(Выборка.СостояниеДокумента = 1)),
			Выборка.ПредставлениеСсылки);
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает массив идентификаторов объектов метаданных,
// соответствующих документам реализации.
// Используется в "ОбщиеФормы.ВыборАналитикиРасходов".
// 
// Параметры:
//	ДляВыбораАналитикиРасходов - Булево - вызов функции из формы выбора аналитики расходов
//
// Возвращаемое значение:
//   Массив - массив идентификаторов объектов метаданных.
//
Функция ТипыСсылокДокументыРеализации(ДляВыбораАналитикиРасходов = ЛОЖЬ) Экспорт
	
	ТипыСсылок = Новый Массив;
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
		ТипыСсылок.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.РеализацияТоваровУслуг));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияУслугПрочихАктивов) Тогда
		ТипыСсылок.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.РеализацияУслугПрочихАктивов));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот) Тогда
		ТипыСсылок.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.АктВыполненныхРабот));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		ТипыСсылок.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЗаказКлиента));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
		ТипыСсылок.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента));
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ПередачаТоваровХранителю)
		И НЕ ДляВыбораАналитикиРасходов
		И ПолучитьФункциональнуюОпцию("ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи") Тогда
		ТипыСсылок.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ПередачаТоваровХранителю));
	КонецЕсли;
	
	
	Возврат ТипыСсылок;
	
КонецФункции

#КонецОбласти 

// Возвращает значения хозяйственных операций передачи товаров.
//
// Возвращаемое значение:
//	Массив - значения хозяйственных операций передачи товаров.
//
Функция ОперацииПередачиТоваров() Экспорт
	
	ОперацииПередачи = Новый Массив;
	ОперацииПередачи.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	ОперацииПередачи.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	ОперацииПередачи.Добавить(Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала);
	
	Возврат ОперацииПередачи;
	
КонецФункции

// Возвращает значения хозяйственных операций возврата переданных товаров.
//
// Возвращаемое значение:
//	Массив - значения хозяйственных операций возврата переданных товаров.
//
Функция ОперацииВозвратаПереданныхТоваров() Экспорт
	
	ОперацииПередачи = Новый Массив;
	ОперацииПередачи.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	ОперацииПередачи.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтХранителя);
	
	Возврат ОперацииПередачи;
	
КонецФункции

// Определяет хозяйственную операцию реализации по хозяйственной операции возврата
//
// Параметры:
//   ХозяйственнаяОперацияВозврат - ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция возврата.
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ХозяйственныеОперации - хозяйственная операция реализации.
//
Функция ПолучитьХозяйственнуюОперациюРеализацииПоВозврату(Знач ХозяйственнаяОперацияВозврат) Экспорт
	
	Если ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
	 Или Не ЗначениеЗаполнено(ХозяйственнаяОперацияВозврат) Тогда
		Возврат Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ИначеЕсли ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
	ИначеЕсли ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя Тогда
		Возврат Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи;
	КонецЕсли;
	
КонецФункции

// Возвращает список предопределенных типов номенклатуры, для которых в необходимо указывать 
// аналитику по подразделениям. Используется в документах продаж.
// 
// Возвращаемое значение:
// 	СписокЗначений
//
Функция ТипыНоменклатурыСАналитикойПодразделение() Экспорт

	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	Возврат Список;

КонецФункции

// Возврат признака, что по данной хозяйственной операции необходимо указать ставку БезНДС.
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - проверяемая хозяйственная операция.
//
// Возвращаемое значение:
//  Булево - признак, что необходимо установить ставку БезНДС.
//
Функция ХозяйственнаяОперацияСоСтавкойБезНДС(ХозяйственнаяОперация) Экспорт
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтХранителя);
	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию);
	
	ОперацияБезНДС = МассивОпераций.Найти(ХозяйственнаяОперация) <> Неопределено;
	
	Возврат ОперацияБезНДС;
	
КонецФункции

// Устанавливает порядок расчетов между организациями в зависимости от выбранных договоров с посредником.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ПередачаТоваровМеждуОрганизациями,
//  	ДокументОбъект.ВозвратТоваровМеждуОрганизация,
//  	ДокументОбъект.ОтчетПоКомиссииМеждуОрганизациями,
//  	ДокументОбъект.ОтчетПоКомиссииМеждуОрганизациямиОСписании - объект документа.
//
Процедура УстановитьПорядокРасчетовМеждуОрганизациями(ДокументОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.ДоговорПродажи)
		И ЗначениеЗаполнено(ДокументОбъект.ДоговорПокупки) Тогда
		
		МассивДоговоров = Новый Массив;
		МассивДоговоров.Добавить(ДокументОбъект.ДоговорПродажи);
		МассивДоговоров.Добавить(ДокументОбъект.ДоговорПокупки);
		
		ПорядкиРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивДоговоров, "ПорядокРасчетов");
		
		Если ПорядкиРасчетов.Получить(ДокументОбъект.ДоговорПродажи) = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
			И ПорядкиРасчетов.Получить(ДокументОбъект.ДоговорПродажи) = ПорядкиРасчетов.Получить(ДокументОбъект.ДоговорПокупки) Тогда
			ПорядокРасчетовДокумента = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов;
		Иначе
			ПорядокРасчетовДокумента = Перечисления.ПорядокРасчетов.ПоНакладным;
		КонецЕсли;
		
		Если ДокументОбъект.ПорядокРасчетов <> ПорядокРасчетовДокумента Тогда
			ДокументОбъект.ПорядокРасчетов = ПорядокРасчетовДокумента;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#Область ПакетнаяОбработкаТабличныхЧастей

// Добавляет запрос в пакет запросов для получения данных, необходимых для заполнения условий продаж.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - Структура
//
Процедура ДополнитьТекстЗапросаЗаполнитьУсловияПродаж(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем ПараметрыДействия;
	
	ТребуетсяВыполнитьДействия = ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие("ЗаполнитьУсловияПродаж",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыДействия);
	
	Если ТребуетсяВыполнитьДействия Тогда
		
		Если Не КэшированныеЗначения.Свойство("ИспользуетсяЦенообразование25") Тогда
			КэшированныеЗначения.Вставить("ИспользуетсяЦенообразование25", ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25());
		КонецЕсли;
		
		Если КэшированныеЗначения.ИспользуетсяЦенообразование25 Тогда
			СписокЗапросов = ТекстыЗапросовУсловияПродаж25ПакетнаяОбработка(ПараметрыДействия);
		Иначе
			СписокЗапросов = ТекстыЗапросовУсловияПродажПакетнаяОбработка(Ложь);
		КонецЕсли;
		
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Соглашение", ПараметрыДействия.Соглашение);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Валюта", ПараметрыДействия.Валюта);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Дата", ПараметрыДействия.Дата);
			
	КонецЕсли;
	
	ТребуетсяВыполнитьДействия = ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие("ЗаполнитьУсловияПродажУслуги",
		СтруктураДействий,
		КэшированныеЗначения,
		ПараметрыДействия);
		
	Если ТребуетсяВыполнитьДействия Тогда
		
		Если Не КэшированныеЗначения.Свойство("ИспользуетсяЦенообразование25") Тогда
			КэшированныеЗначения.Вставить("ИспользуетсяЦенообразование25", ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25());
		КонецЕсли;
		
		Если КэшированныеЗначения.ИспользуетсяЦенообразование25 Тогда
			СписокЗапросов = ТекстыЗапросовУсловияПродаж25ПакетнаяОбработка(ПараметрыДействия);
		Иначе
			СписокЗапросов = ТекстыЗапросовУсловияПродажПакетнаяОбработка(Истина);
		КонецЕсли;
		
		Для Каждого ЭлементСписка Из СписокЗапросов Цикл
			ОписаниеЗапроса.ТекстыЗапросов.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Соглашение", ПараметрыДействия.Соглашение);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Партнер", ПараметрыДействия.Партнер);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.БазоваяВалютаПоУмолчанию());
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Валюта", ПараметрыДействия.Валюта);
		ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Дата", ПараметрыДействия.Дата);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс


// Переопределенная структура (см. ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию) на базе статуса и
// соглашения документа продажи.
// 
// Параметры:
//   Соглашение - СправочникСсылка.СоглашенияСКлиентами - соглашение с клиентом документа продажи.
//   Статус - ПеречислениеСсылка.СтатусыЗаказовКлиентов, ПеречислениеСсылка.СтатусыЗаявокНаВозвратТоваровОтКлиентов -
//            статус документа продажи.
//   ВариантИФлагПоУмолчанию - Структура
//    *ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения - вариант обеспечения по умолчанию.
//    *Обособленно        - Булево - необходимость использования обособленной схемы по умолчанию.
//   ИспользоватьРасширенныеВозможностиЗаказаКлиента - Булево, Неопределено - признак использования документом расширенных возможностей заказов.
//
// Возвращаемое значение:
//  Неопределено, Структура - Вариант обеспечения и флаг обособленно по умолчанию:
// * Товар - Структура -:
// ** ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения -
// ** Обособленно - Булево -
// * МногооборотнаяТара - Структура -:
// ** ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения -
// ** Обособленно - Булево -
// * Работа - Структура -:
// ** ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения -
// ** Обособленно - Булево -
// * Услуга - Структура -:
// ** ВариантОбеспечения - ПеречислениеСсылка.ВариантыОбеспечения -
// ** Обособленно - Булево -
Функция ВариантОбеспеченияИФлагОбособленноПоУмолчанию(Соглашение, Статус, ВариантИФлагПоУмолчанию = Неопределено,
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = Неопределено) Экспорт
	
	Если ИспользоватьРасширенныеВозможностиЗаказаКлиента = Неопределено Тогда
		ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	КонецЕсли;
	
	Отгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	Резервировать        = Перечисления.ВариантыОбеспечения.СоСклада;
	НеОбеспечивать       = Перечисления.ВариантыОбеспечения.НеТребуется;
	РезервироватьПоМереПоступления = Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления;
	
	СтатусыОтгрузить = Новый Массив;
	СтатусыОтгрузить.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОтгрузке);
	СтатусыОтгрузить.Добавить(Перечисления.СтатусыЗаказовКлиентов.Закрыт);
	СтатусыОтгрузить.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке);
	СтатусыОтгрузить.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена);
	
	СтатусыСоСклада = Новый Массив;
	СтатусыСоСклада.Добавить(Перечисления.СтатусыЗаказовКлиентов.КОбеспечению);
	СтатусыСоСклада.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению);
	
	СтатусыНеТребуется = Новый Массив;
	СтатусыНеТребуется.Добавить(Перечисления.СтатусыЗаказовКлиентов.НеСогласован);
	СтатусыНеТребуется.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована);
	СтатусыНеТребуется.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату);
	СтатусыНеТребуется.Добавить(Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена);
	
	Результат = Неопределено;
	
	// Структуру вариантов обеспечения нужно инициализировать только если необходимо полностью переопределить правила, используемые
	// при заполнении по умолчанию. В случае если известен и жестко задан вариант обеспечения для каждого типа номенклатуры.
	Если ВариантИФлагПоУмолчанию <> Неопределено Тогда
		
		ВариантПоУмолчанию = ВариантИФлагПоУмолчанию.ВариантОбеспечения;
		ФлагПоУмолчанию = ВариантИФлагПоУмолчанию.Обособленно;
		
		Обособленно = Ложь;
		ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ОбеспечиватьЗаказыОбособленно");
		Если ЗаполнитьОбособленно = Истина Тогда
			Обособленно = Истина;
		КонецЕсли;
		Если ФлагПоУмолчанию = Истина Тогда
			Обособленно = Истина;
		КонецЕсли;
		
		Результат = ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(Обособленно);
		
		Если ВариантПоУмолчанию = Отгрузить Тогда
			
			Результат.Товар.ВариантОбеспечения  = Отгрузить;
			Результат.Тара.ВариантОбеспечения   = Отгрузить;
			Результат.Работа.ВариантОбеспечения = Отгрузить;
			Результат.Услуга.ВариантОбеспечения = Отгрузить;
			
		ИначеЕсли ВариантПоУмолчанию = Резервировать Тогда
			
			Результат.Товар.ВариантОбеспечения  = Резервировать;
			Результат.Тара.ВариантОбеспечения   = Резервировать;
			// Работы и услуги остаются по умолчанию (К обеспечению или Не обеспечивать).
			
		ИначеЕсли ВариантПоУмолчанию = РезервироватьПоМереПоступления Тогда
			
			Результат.Товар.ВариантОбеспечения  = РезервироватьПоМереПоступления;
			Результат.Тара.ВариантОбеспечения   = РезервироватьПоМереПоступления;
			// Работы и услуги остаются по умолчанию (К обеспечению или Не обеспечивать).
			
		ИначеЕсли ВариантПоУмолчанию = НеОбеспечивать Тогда
			
			Результат.Товар.ВариантОбеспечения  = НеОбеспечивать;
			Результат.Тара.ВариантОбеспечения   = НеОбеспечивать;
			// Работы и услуги остаются по умолчанию (К обеспечению или Не обеспечивать).
			
		КонецЕсли;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента")
		И ИспользоватьРасширенныеВозможностиЗаказаКлиента Тогда
		
		ЗаполнитьОбособленно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Соглашение, "ОбеспечиватьЗаказыОбособленно");
		Если ЗаполнитьОбособленно = Истина Тогда
			
			Результат = ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(Истина);
			
		КонецЕсли;
		
	Иначе
		
		Результат = ОбеспечениеВДокументахКлиентСервер.ВариантОбеспеченияИФлагОбособленноПоУмолчанию(Ложь);
		Если СтатусыОтгрузить.Найти(Статус) <> Неопределено Тогда
			
			Результат.Товар.ВариантОбеспечения              = Отгрузить;
			Результат.Тара.ВариантОбеспечения               = Отгрузить;
			Результат.Работа.ВариантОбеспечения             = Отгрузить;
			Результат.Услуга.ВариантОбеспечения             = Отгрузить;
			
		ИначеЕсли СтатусыСоСклада.Найти(Статус) <> Неопределено Тогда
			
			Результат.Товар.ВариантОбеспечения              = Резервировать;
			Результат.Тара.ВариантОбеспечения               = Резервировать;
			// Работы и услуги остаются по умолчанию (Не обеспечивать).
			
		ИначеЕсли СтатусыНеТребуется.Найти(Статус) <> Неопределено Тогда
			
			Результат.Товар.ВариантОбеспечения              = НеОбеспечивать;
			Результат.Тара.ВариантОбеспечения               = НеОбеспечивать;
			// Работы и услуги остаются по умолчанию (Не обеспечивать).
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЗаполненияПоОтгрузке

// Возвращает текст запроса для заполнения табличных частей документам по фактической отгрузке.
//	
//	Параметры:
//		СтруктураРезультатаЗапроса - Структура - переменная в которую записывается структура результатов запроса.
//
// Возвращаемое значение:
//		Строка - Текст запроса.
//
Функция ТекстЗапросаПоФактическойОтгрузке(СтруктураДокументаДляЗаполнения, СтруктураРезультатаЗапроса = Неопределено)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения) КАК Упаковка,
	|	ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады) КАК Склад,
	|	ВЫРАЗИТЬ(Товары.Серия КАК Справочник.СерииНоменклатуры) КАК Серия,
	|	ВЫРАЗИТЬ(Товары.Назначение КАК Справочник.Назначения) КАК Назначение
	|ПОМЕСТИТЬ ВТ_ТоварыДляЗапроса
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Склад КАК Склад,
	|	Товары.Серия КАК Серия,
	|	Товары.Назначение КАК Назначение
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	ВТ_ТоварыДляЗапроса КАК Товары
	|ГДЕ
	|	Товары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ЕСТЬNULL(Товары.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, ЛОЖЬ)
	|	И &Дата >= ЕСТЬNULL(Товары.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
	|	ТоварыКОтгрузкеОбороты.Назначение КАК Назначение,
	|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА &ЗаполнятьНесобраннымиТоварами
	|			ТОГДА СУММА(ТоварыКОтгрузкеОбороты.СобираетсяПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ + СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеРасход) + СУММА(ТоварыКОтгрузкеОбороты.СобраноПриход) КАК КоличествоОтгрузить,
	|	ВЫРАЗИТЬ(ТоварыКОтгрузкеОбороты.Регистратор КАК Документ.РасходныйОрдерНаТовары) КАК Ордер
	|ПОМЕСТИТЬ ВТТоварыКОтгрузке
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(&НачПериодТоварыКОтгрузке, &КонПериодТоварыКОтгрузке , Регистратор, ДокументОтгрузки В (&ДокументыОтгрузки)) КАК ТоварыКОтгрузкеОбороты
	|ГДЕ
	|	ЕСТЬNULL(ТоварыКОтгрузкеОбороты.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, ЛОЖЬ)
	|	И &Дата >= ЕСТЬNULL(ТоварыКОтгрузкеОбороты.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОбороты.ДокументОтгрузки,
	|	ТоварыКОтгрузкеОбороты.Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика,
	|	ТоварыКОтгрузкеОбороты.Серия,
	|	ТоварыКОтгрузкеОбороты.Назначение,
	|	ВЫРАЗИТЬ(ТоварыКОтгрузкеОбороты.Регистратор КАК Документ.РасходныйОрдерНаТовары),
	|	ТоварыКОтгрузкеОбороты.Склад
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА &ЗаполнятьНесобраннымиТоварами
	|			ТОГДА СУММА(ТоварыКОтгрузкеОбороты.СобираетсяПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ + СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеРасход) + СУММА(ТоварыКОтгрузкеОбороты.СобраноПриход) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыОстатки.Распоряжение КАК ЗаказКлиента,
	|	ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|	ЗаказыОстатки.Характеристика КАК Характеристика,
	|	ЗаказыОстатки.Склад КАК Склад,
	|	ЗаказыОстатки.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.Обособленно ТОГДА
	|			ЗаказТовары.Ссылка.Назначение
	|		КОГДА ЗаказТоварыЗамена.Обособленно ТОГДА
	|			ЗаказТоварыЗамена.Ссылка.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА СУММА(ЗаказыОстатки.КОформлениюОборот)
	|	КОНЕЦ КАК КоличествоВНакладных
	|ПОМЕСТИТЬ ВТТоварыВНакладных
	|ИЗ
	|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(&НачПериодЗаказыКлиентов, &КонПериодЗаказыКлиентов, Регистратор, Распоряжение В (&ДокументыОтгрузки) 
	|														И ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказТовары
	|		ПО ЗаказыОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ЗаказыОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ЗаказыОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ЗаказыОстатки.Распоряжение = ЗаказТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ЗаказТоварыЗамена
	|		ПО ЗаказыОстатки.Номенклатура = ЗаказТоварыЗамена.Номенклатура
	|			И ЗаказыОстатки.Характеристика = ЗаказТоварыЗамена.Характеристика
	|			И ЗаказыОстатки.КодСтроки = ЗаказТоварыЗамена.КодСтроки
	|			И ЗаказыОстатки.Распоряжение = ЗаказТоварыЗамена.Ссылка
	|ГДЕ
	|	ЗаказыОстатки.Регистратор <> &Накладная
	|	И ЕСТЬNULL(Распоряжение.Склад.ИспользоватьОрдернуюСхемуПриОтгрузке, ЛОЖЬ)
	|	И &Дата >= ЕСТЬNULL(Распоряжение.Склад.ДатаНачалаОрдернойСхемыПриОтгрузке, ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.Распоряжение,
	|	ЗаказыОстатки.Номенклатура,
	|	ЗаказыОстатки.Характеристика,
	|	ЗаказыОстатки.Склад,
	|	ЗаказыОстатки.Серия,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.Обособленно ТОГДА
	|			ЗаказТовары.Ссылка.Назначение
	|		КОГДА ЗаказТоварыЗамена.Обособленно ТОГДА
	|			ЗаказТоварыЗамена.Ссылка.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА СУММА(ЗаказыОстатки.КОформлениюОборот)
	|	КОНЕЦ < 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|	ТоварыКОтгрузке.Серия КАК Серия,
	|	ТоварыКОтгрузке.Назначение КАК Назначение,
	|	ТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузке.Склад КАК Склад,
	|	ТоварыКОтгрузке.КоличествоОтгрузить + ЕСТЬNULL(ТоварыВНакладных.КоличествоВНакладных,0) КАК КоличествоОтгрузить
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТТоварыКОтгрузке.ДокументОтгрузки КАК ДокументОтгрузки,
	|		ВТТоварыКОтгрузке.Серия КАК Серия,
	|		ВТТоварыКОтгрузке.Назначение КАК Назначение,
	|		ВТТоварыКОтгрузке.Номенклатура КАК Номенклатура,
	|		ВТТоварыКОтгрузке.Характеристика КАК Характеристика,
	|		ВТТоварыКОтгрузке.Склад КАК Склад,
	|		СУММА(ВТТоварыКОтгрузке.КоличествоОтгрузить) КАК КоличествоОтгрузить
	|	ИЗ
	|		ВТТоварыКОтгрузке КАК ВТТоварыКОтгрузке
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТТоварыКОтгрузке.Назначение,
	|		ВТТоварыКОтгрузке.ДокументОтгрузки,
	|		ВТТоварыКОтгрузке.Характеристика,
	|		ВТТоварыКОтгрузке.Склад,
	|		ВТТоварыКОтгрузке.Номенклатура,
	|		ВТТоварыКОтгрузке.Серия) КАК ТоварыКОтгрузке
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТТоварыВНакладных КАК ТоварыВНакладных
	|		ПО ТоварыКОтгрузке.ДокументОтгрузки = ТоварыВНакладных.ЗаказКлиента
	|			И ТоварыКОтгрузке.Номенклатура = ТоварыВНакладных.Номенклатура
	|			И ТоварыКОтгрузке.Характеристика = ТоварыВНакладных.Характеристика
	|			И ТоварыКОтгрузке.Склад = ТоварыВНакладных.Склад
	|			И ТоварыКОтгрузке.Серия = ТоварыВНакладных.Серия
	|			И ТоварыКОтгрузке.Назначение = ТоварыВНакладных.Назначение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Товары.НомерСтроки,
	|	&ТекстЗапросаКоэффициентУпаковки1 КАК КоэффициентУпаковки
	|ИЗ
	|	ВТ_Товары КАК ВТ_Товары;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ЗаказКлиента,
	|	ТоварыКОформлению.КодСтроки,
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Склад,
	|	ТоварыКОформлению.Серия,
	|	ТоварыКОформлению.Назначение,
	|	СУММА(ТоварыКОформлению.Сумма) КАК Сумма,
	|	СУММА(ТоварыКОформлению.КоличествоОформить) КАК Количество
	|ПОМЕСТИТЬ ВтТоварыКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.Распоряжение КАК ЗаказКлиента,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.Серия КАК Серия,
	|		ВЫБОР
	|			КОГДА ЗаказТовары.Обособленно ТОГДА
	|				ЗаказТовары.Ссылка.Назначение
	|			КОГДА ЗаказТоварыЗамена.Обособленно	ТОГДА
	|				ЗаказТоварыЗамена.Ссылка.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ КАК Назначение,
	|		ВЫБОР
	|			КОГДА ИСТИНА
	|				ТОГДА ЗаказыОстатки.СуммаОборот
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР
	|			КОГДА ИСТИНА
	|				ТОГДА ЗаказыОстатки.КОформлениюОборот
	|		КОНЕЦ КАК КоличествоОформить
	|	ИЗ
	|		РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(&НачПериодЗаказыКлиентовОстИОб, &КонПериодЗаказыКлиентовОстИОб,
	|			, Распоряжение В (&ДокументыОтгрузки) И КодСтроки<>0) КАК ЗаказыОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказТовары
	|		ПО ЗаказыОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ЗаказыОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ЗаказыОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ЗаказыОстатки.Распоряжение = ЗаказТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ЗаказТоварыЗамена
	|		ПО ЗаказыОстатки.Номенклатура = ЗаказТоварыЗамена.Номенклатура
	|			И ЗаказыОстатки.Характеристика = ЗаказТоварыЗамена.Характеристика
	|			И ЗаказыОстатки.КодСтроки = ЗаказТоварыЗамена.КодСтроки
	|			И ЗаказыОстатки.Распоряжение = ЗаказТоварыЗамена.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыОбороты.Распоряжение,
	|		ЗаказыОбороты.КодСтроки,
	|		ЗаказыОбороты.Номенклатура,
	|		ЗаказыОбороты.Характеристика,
	|		ЗаказыОбороты.Склад,
	|		ЗаказыОбороты.Серия,
	|		ВЫБОР
	|			КОГДА ЗаказТовары.Обособленно ТОГДА
	|				ЗаказТовары.Ссылка.Назначение
	|			КОГДА ЗаказТоварыЗамена.Обособленно	ТОГДА
	|				ЗаказТоварыЗамена.Ссылка.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ КАК Назначение,
	|		ВЫБОР
	|			КОГДА ИСТИНА
	|				ТОГДА -ЗаказыОбороты.СуммаОборот
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ИСТИНА
	|				ТОГДА -ЗаказыОбороты.КОформлениюОборот
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(&НачПериодЗаказыКлиентовОстИОб, &КонПериодЗаказыКлиентовОстИОб, 
	|			Регистратор, Распоряжение В (&ДокументыОтгрузки)И КодСтроки<>0 
	|				И ВидДвиженияРегистра = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженияНакопления.Расход)) КАК ЗаказыОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказТовары
	|		ПО ЗаказыОбороты.Номенклатура = ЗаказТовары.Номенклатура
	|			И ЗаказыОбороты.Характеристика = ЗаказТовары.Характеристика
	|			И ЗаказыОбороты.КодСтроки = ЗаказТовары.КодСтроки
	|			И ЗаказыОбороты.Распоряжение = ЗаказТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ЗаказТоварыЗамена
	|		ПО ЗаказыОбороты.Номенклатура = ЗаказТоварыЗамена.Номенклатура
	|			И ЗаказыОбороты.Характеристика = ЗаказТоварыЗамена.Характеристика
	|			И ЗаказыОбороты.КодСтроки = ЗаказТоварыЗамена.КодСтроки
	|			И ЗаказыОбороты.Распоряжение = ЗаказТоварыЗамена.Ссылка
	|	ГДЕ
	|		ЗаказыОбороты.Регистратор = &Накладная
	|		) КАК ТоварыКОформлению
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОформлению.ЗаказКлиента,
	|	ТоварыКОформлению.КодСтроки,
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика,
	|	ТоварыКОформлению.Склад,
	|	ТоварыКОформлению.Назначение,
	|	ТоварыКОформлению.Серия;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОформлению.ЗаказКлиента КАК ИмяЗаказаВТЧ,
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.КодСтроки КАК КодСтроки,
	|	ТоварыКОформлению.Количество КАК Количество,
	|	ТоварыКОформлению.Сумма КАК СуммаВзаиморасчетов,
	|	ТоварыКОформлению.Склад КАК Склад,
	|	ТоварыКОформлению.Серия КАК Серия,
	|	ТоварыКОформлению.Назначение КАК Назначение
	|ИЗ
	|	ВтТоварыКОформлению КАК ТоварыКОформлению
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки ВОЗР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказКлиента КАК ИмяЗаказаВТЧ,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.КодСтроки КАК КодСтроки,
	|	ТаблицаОстатки.Количество КАК Количество,
	|	ТаблицаОстатки.Сумма КАК СуммаВзаиморасчетов,
	|	ТаблицаОстатки.Склад КАК Склад,
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.Ссылка.Сделка КАК Сделка,
	|	ЗаказТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаказТовары.Серия КАК Серия,
	|	ЗаказТовары.ВидЦены КАК ВидЦены,
	|	ЗаказТовары.Количество КАК КоличествоВЗаказе,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказТовары.Сумма КАК Сумма,
	|	ЗаказТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказТовары.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказТовары.КлючСвязи КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки2
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаОстатки.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.Обособленно
	|			ТОГДА ТаблицаОстатки.ЗаказКлиента.Назначение
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТоварыКОформлению КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказТовары
	|		ПО ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ТаблицаОстатки.Серия = ЗаказТовары.Серия
	|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ТаблицаОстатки.ЗаказКлиента = ЗаказТовары.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказКлиента,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.КодСтроки КАК КодСтроки,
	|	ТаблицаОстатки.Количество КАК Количество,
	|	ТаблицаОстатки.Сумма КАК СуммаВзаиморасчетов,
	|	ТаблицаОстатки.Склад КАК Склад,
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.Ссылка.Сделка КАК Сделка,
	|	ЗаказТовары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаказТовары.Серия КАК Серия,
	|	ЗаказТовары.ВидЦены КАК ВидЦены,
	|	ЗаказТовары.Количество КАК КоличествоВЗаказе,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказТовары.Сумма КАК Сумма,
	|	ЗаказТовары.СуммаНДС КАК СуммаНДС,
	|	ЗаказТовары.СуммаСНДС КАК СуммаСНДС,
	|	ЗаказТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЗаказТовары.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЗаказТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказТовары.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказТовары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ЗаказТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказТовары.КлючСвязи КАК КлючСвязи,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки2
	|	КОНЕЦ КАК Коэффициент,
	|	ТаблицаОстатки.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЗаказТовары.Обособленно
	|			ТОГДА ТаблицаОстатки.ЗаказКлиента.Назначение
	|	КОНЕЦ КАК Назначение
	|ИЗ
	|	ВтТоварыКОформлению КАК ТаблицаОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ЗаменяющиеТовары КАК ЗаказТовары
	|		ПО ТаблицаОстатки.Номенклатура = ЗаказТовары.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
	|			И ТаблицаОстатки.Серия = ЗаказТовары.Серия
	|			И ТаблицаОстатки.КодСтроки = ЗаказТовары.КодСтроки
	|			И ТаблицаОстатки.ЗаказКлиента = ЗаказТовары.Ссылка
	|
	|";
	
	Если СтруктураДокументаДляЗаполнения.ОрдернаяСхемаПриОтгрузке 
		И ПродажиСерверЛокализация.ИспользуетсяМаркируемаяПродукция() Тогда
		РазмерПакетаМаркировки = 0;
		ТекстЗапроса = ТекстЗапроса + ПродажиСерверЛокализация.ТекстЗапросаМаркировки(РазмерПакетаМаркировки);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВТ_Товары.Упаковка",
		"ВТ_Товары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
		
	СтруктураРезультатаЗапроса = Новый Структура();
	СтруктураРезультатаЗапроса.Вставить("ВТ_ТоварыДляЗапроса", 0);
	СтруктураРезультатаЗапроса.Вставить("ВТ_Товары",           1);
	СтруктураРезультатаЗапроса.Вставить("ТоварыКОтгрузке",     4);
	СтруктураРезультатаЗапроса.Вставить("Товары",              5);
	СтруктураРезультатаЗапроса.Вставить("ТоварыКОформлению",   7);
	СтруктураРезультатаЗапроса.Вставить("ТоварыЗаказов",       8);
	Если СтруктураДокументаДляЗаполнения.ОрдернаяСхемаПриОтгрузке
		И ПродажиСерверЛокализация.ИспользуетсяМаркируемаяПродукция() Тогда
		СтруктураРезультатаЗапроса.Вставить(
			"ШтрихкодыУпаковок",   
			СтруктураРезультатаЗапроса["ТоварыЗаказов"] + РазмерПакетаМаркировки);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяЗаказаВТЧ", СтруктураДокументаДляЗаполнения.ИмяЗаказаВТЧ);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ДополнительныеТаблицыЗаказов(МассивЗаказовКлиентов, Валюта)
	
	СтруктураТаблиц = Новый Структура("СкидкиНаценкиЗаказа, РеквизитыЗаказов, ТаблицаКурсовВалют, СтруктураКурсовНовойВалюты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказовКлиентов", МассивЗаказовКлиентов);
	Запрос.УстановитьПараметр("ВалютаДокумента",       Валюта);
	
	// Получение таблицы скидок/наценок
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказКлиента.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (&МассивЗаказовКлиентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СкидкиНаценки.Ссылка КАК ЗаказКлиента,
	|	СкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	СкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.СкидкиНаценки КАК СкидкиНаценки
	|ГДЕ
	|	СкидкиНаценки.Ссылка В (&МассивЗаказовКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Ссылка КАК ЗаказКлиента,
	|	ТаблицаЗаказов.Валюта КАК Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьВВалютуДокумента
	|ИЗ
	|	Документ.ЗаказКлиента КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В(&МассивЗаказовКлиентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ),
	|	ТаблицаЗаказов.Ссылка,
	|	ТаблицаЗаказов.Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В(&МассивЗаказовКлиентов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ОбъединеннаяТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ОбъединеннаяТаблицаЗаказов.Валюта КАК Валюта,
	|	ОбъединеннаяТаблицаЗаказов.Организация КАК Организация
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|		ТаблицаЗаказов.Валюта КАК Валюта,
	|		ТаблицаЗаказов.Организация
	|	ИЗ
	|		Документ.ЗаказКлиента КАК ТаблицаЗаказов
	|	ГДЕ
	|		ТаблицаЗаказов.Ссылка В (&МассивЗаказовКлиентов)
	|		И ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ),
	|		ТаблицаЗаказов.Валюта,
	|		ТаблицаЗаказов.Организация
	|	ИЗ
	|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаЗаказов
	|	ГДЕ
	|		ТаблицаЗаказов.Ссылка В (&МассивЗаказовКлиентов)
	|		И ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|
	|	) КАК ОбъединеннаяТаблицаЗаказов";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет(); 
	СтруктураТаблиц.СкидкиНаценкиЗаказа = РезультатЗапроса[0].Выгрузить();
	СтруктураТаблиц.РеквизитыЗаказов = РезультатЗапроса[1].Выбрать();
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЧислитель", Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЗнаменатель", Новый ОписаниеТипов("Число"));
	
	Выборка = РезультатЗапроса[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата,
						ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация));
		НоваяСтрока.КурсЧислитель = КурсыВалюты.КурсЧислитель;
		НоваяСтрока.КурсЗнаменатель = КурсыВалюты.КурсЗнаменатель;
		
	КонецЦикла;
	
	Если ТаблицаКурсовВалют.Количество() > 0 Тогда
		СтруктураКурсовНовойВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Валюта, ТекущаяДатаСеанса());
	КонецЕсли;
	СтруктураТаблиц.ТаблицаКурсовВалют = ТаблицаКурсовВалют;
	СтруктураТаблиц.СтруктураКурсовНовойВалюты = СтруктураКурсовНовойВалюты;
	
	Возврат СтруктураТаблиц
	
КонецФункции

// Параметры:
// 	ОбъектДокумента - ДанныеФормыСтруктура, ДокументОбъект - 
// 	
Функция ЗаполнитьСтрокуПоЗаказуКлиента(СтруктураПоискаПоТЧТовары, КоличествоОтгрузить, ОбъектДокумента, ТоварыЗаказов, ДополнительныеТаблицыЗаказов)
	
	ЭтоРеализация = Не (ТипЗнч(ОбъектДокумента.Ссылка) = Тип("ДокументСсылка.ПередачаТоваровХранителю"));
	
	СкидкиНаценкиЗаказа = ДополнительныеТаблицыЗаказов.СкидкиНаценкиЗаказа;
	РеквизитыЗаказов = ДополнительныеТаблицыЗаказов.РеквизитыЗаказов;
	ТаблицаКурсовВалют = ДополнительныеТаблицыЗаказов.ТаблицаКурсовВалют;
	СтруктураКурсовНовойВалюты = ДополнительныеТаблицыЗаказов.СтруктураКурсовНовойВалюты;
	
	НоваяСтрока = ОбъектДокумента.Товары.Добавить();
	ИсключитьСвойства = "Количество";
	
	НайденныеСтроки = ТоварыЗаказов.НайтиСтроки(СтруктураПоискаПоТЧТовары);
	Если НайденныеСтроки.Количество()>0 Тогда
		
		НайденнаяСтрока = НайденныеСтроки.Получить(0);
		
		ПересчитатьСуммы = (КоличествоОтгрузить <> НайденнаяСтрока.КоличествоВЗаказе);
		Если ПересчитатьСуммы Тогда
			
			ИсключитьСвойства = ИсключитьСвойства + ", Сумма";
			
			Если НоваяСтрока.Свойство("СуммаНДС") Тогда
				ИсключитьСвойства = ИсключитьСвойства + ", СуммаНДС";
			КонецЕсли;
			
			Если НоваяСтрока.Свойство("СуммаАвтоматическойСкидки") Тогда
				ИсключитьСвойства = ИсключитьСвойства + ", СуммаАвтоматическойСкидки, СуммаРучнойСкидки";
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, , ИсключитьСвойства);
		
		НоваяСтрока.Количество = КоличествоОтгрузить;
		НоваяСтрока.КоличествоУпаковок = КоличествоОтгрузить / НайденнаяСтрока.Коэффициент;;
		
		Если ЭтоРеализация
			И ПересчитатьСуммы Тогда
			НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВзаиморасчетов * КоличествоОтгрузить / НайденнаяСтрока.Количество;
			НоваяСтрока.СуммаСНДС = НоваяСтрока.СуммаВзаиморасчетов;
		КонецЕсли;
		
		РеквизитыЗаказов.Сбросить();
		ЗаказНайден = РеквизитыЗаказов.НайтиСледующий(НоваяСтрока.ЗаказКлиента, "ЗаказКлиента");
		
		ПараметрыОтбора = Новый Структура("Валюта,Дата", РеквизитыЗаказов.Валюта, РеквизитыЗаказов.Дата);
		КурсВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
		
		Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента Тогда
			
			Если КурсВалюты.Количество() = 1 Тогда
			
				НоваяСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
					НоваяСтрока.Цена,
					КурсВалюты[0],
					СтруктураКурсовНовойВалюты);
				НоваяСтрока.СуммаСНДС = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
					НоваяСтрока.СуммаСНДС,
					КурсВалюты[0],
					СтруктураКурсовНовойВалюты);
				ПересчитатьСуммы = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		КоэффициентПересчетаСкидки = ?(ЭтоРеализация И ПересчитатьСуммы,
						НоваяСтрока.Количество / ?(НайденнаяСтрока.КоличествоВЗаказе <> 0, НайденнаяСтрока.КоличествоВЗаказе, 1),
						1);
		
		Если КоэффициентПересчетаСкидки <> 1 Тогда
			НоваяСтрока.СуммаАвтоматическойСкидки = ОКР(НайденнаяСтрока.СуммаАвтоматическойСкидки * КоэффициентПересчетаСкидки,2);
			НоваяСтрока.СуммаРучнойСкидки = ОКР(НайденнаяСтрока.СуммаРучнойСкидки * КоэффициентПересчетаСкидки,2);
		КонецЕсли;
		
		Если ЗаказНайден И ПересчитатьСуммы Тогда
			
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(
				НоваяСтрока,
				РеквизитыЗаказов.ЦенаВключаетНДС,
				Ложь,
				Ложь,
				РеквизитыЗаказов.ПересчитатьВВалютуДокумента);
				
			Если ЭтоРеализация
				И ЗаказНайден
				И РеквизитыЗаказов.ПересчитатьВВалютуДокумента
				И КурсВалюты.Количество() = 1 Тогда
				
				НоваяСтрока.СуммаАвтоматическойСкидки = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
					НоваяСтрока.СуммаАвтоматическойСкидки,
					КурсВалюты[0],
					СтруктураКурсовНовойВалюты);
				НоваяСтрока.СуммаРучнойСкидки = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
					НоваяСтрока.СуммаРучнойСкидки,
					КурсВалюты[0],
					СтруктураКурсовНовойВалюты);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоРеализация Тогда
			// Формирование табличной части скидок
			СуммаКРаспределению = НоваяСтрока.СуммаАвтоматическойСкидки;
			
			Если НоваяСтрока.КлючСвязи <> 0 Тогда
				Для Каждого СтрокаСкидкиЗаказа Из СкидкиНаценкиЗаказа.НайтиСтроки(Новый Структура("ЗаказКлиента,КлючСвязи", НоваяСтрока.ЗаказКлиента, НоваяСтрока.КлючСвязи)) Цикл
					
					СтрокаСкидки = ОбъектДокумента.СкидкиНаценки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
					СтрокаСкидки.Сумма = КоэффициентПересчетаСкидки * СтрокаСкидки.Сумма;
					
					Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И КурсВалюты.Количество() > 0 Тогда
						СтрокаСкидки.Сумма = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
							СтрокаСкидки.Сумма,
							КурсВалюты[0],
							СтруктураКурсовНовойВалюты);
						СуммаКРаспределению = СуммаКРаспределению - СтрокаСкидки.Сумма;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И СуммаКРаспределению <> 0 Тогда
				СтрокаСкидки.Сумма = СтрокаСкидки.Сумма + СуммаКРаспределению;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НоваяСтрока
	
КонецФункции

#КонецОбласти

#Область ПроцедурыФормированияВременныхТаблицДляПроверкиКорректностиЗаполненияДокументов

// Формирует запрос к шапке документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса      - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса  - Структура - структура, содержащая параметры запроса
// ДокументПродажи   - ДокументОбъект, ДокументСсылка - документ, к которому необходимо сформировать запрос
// ПоСсылке          - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы        - Строка - имя таблицы документа, к которой необходимо сформировать запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса,
	                                                              ПараметрыЗапроса,
	                                                              ДокументПродажи,
	                                                              ПоСсылке = Ложь,
	                                                              ИмяТаблицы = "")
	
	Если ПоСсылке Тогда
		
		Если ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение            КАК Соглашение,
				|	ДокументПродажи.НалогообложениеНДС    КАК НалогообложениеНДС,
				|	ДокументПродажи.Статус                КАК Статус,
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДокументПродажи.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
				|	ДокументПродажи.ДатаСогласования      КАК ДатаСогласования,
				|	ДокументПродажи.ДатаОтгрузки          КАК ДатаОтгрузки,
				|	ИСТИНА                                КАК ЭтоЗаказ,
				|	ЛОЖЬ                                  КАК НакладнаяПоЗаказам,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.Договор               КАК Договор,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	ДокументПродажи.ОплатаВВалюте         КАК ОплатаВВалюте,
				|	ДокументПродажи.ПорядокРасчетов       КАК ПорядокРасчетов,
				|	ДокументПродажи.НаправлениеДеятельности КАК НаправлениеДеятельности,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	NULL                                  КАК ДатаПереходаПраваСобственности,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
				|	ДокументПродажи.Подразделение         КАК Подразделение
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение            КАК Соглашение,
				|	ДокументПродажи.НалогообложениеНДС    КАК НалогообложениеНДС,
				|	ДокументПродажи.Статус                КАК Статус,
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ИСТИНА                                КАК НеОтгружатьЧастями,
				|	ДокументПродажи.Дата                  КАК ДатаСогласования,
				|	ДокументПродажи.ЖелаемаяДатаОтгрузки  КАК ДатаОтгрузки,
				|	ИСТИНА                                КАК ЭтоЗаказ,
				|	ЛОЖЬ                                  КАК НакладнаяПоЗаказам,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.Договор               КАК Договор,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	NULL                                  КАК ОплатаВВалюте,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
				

		ИначеЕсли ИмяТаблицы = "Документ.ПередачаТоваровХранителю" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение            КАК Соглашение,
				|	ДокументПродажи.Договор               КАК Договор,
				|	NULL                                  КАК СуммаВзаиморасчетов,
				|	NULL                                  КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ИСТИНА                                КАК НеОтгружатьЧастями,
				|	ДАТАВРЕМЯ(1,1,1)                      КАК ДатаСогласования,
				|	ДАТАВРЕМЯ(1,1,1)                      КАК ДатаОтгрузки,
				|	ЛОЖЬ                                  КАК ЭтоЗаказ,
				|	ЛОЖЬ                                  КАК НакладнаяПоЗаказам,
				|	NULL                                  КАК ДатаПлатежа,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	NULL                                  КАК ФормаОплаты,
				|	NULL                                  КАК ОплатаВВалюте,
				|	NULL                                  КАК ПорядокРасчетов,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	NULL                                  КАК ДатаПереходаПраваСобственности,
				|	NULL                                  КАК Статус,
				|	NULL                                  КАК СрокВозвратаМногооборотнойТары
				|";
			
		ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение            КАК Соглашение,
				|	ДокументПродажи.НалогообложениеНДС    КАК НалогообложениеНДС,
				|	ДокументПродажи.Статус                КАК Статус,
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДокументПродажи.НеОтгружатьЧастями    КАК НеОтгружатьЧастями,
				|	ДокументПродажи.ДатаСогласования      КАК ДатаСогласования,
				|	ДокументПродажи.ДатаОтгрузки          КАК ДатаОтгрузки,
				|	ИСТИНА                                КАК ЭтоЗаказ,
				|	ЛОЖЬ                                  КАК НакладнаяПоЗаказам,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	ДокументПродажи.Подразделение         КАК Подразделение,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.Договор               КАК Договор,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	ДокументПродажи.ОплатаВВалюте         КАК ОплатаВВалюте,
				|	ДокументПродажи.ПорядокРасчетов       КАК ПорядокРасчетов,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК ДатаПереходаПраваСобственности,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
				
		ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                                    КАК Соглашение,
				|	ДокументПродажи.ГрафикОплаты                                  КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация                         КАК ХозяйственнаяОперация,
				|	ИСТИНА                                                        КАК НеОтгружатьЧастями,
				|	ДАТАВРЕМЯ(1,1,1)                                              КАК ДатаСогласования,
				|	ДАТАВРЕМЯ(1,1,1)                                              КАК ДатаОтгрузки,
				|	ЛОЖЬ                                                          КАК ЭтоЗаказ,
				|	ЛОЖЬ                                                          КАК НакладнаяПоЗаказам,
				|	ДокументПродажи.Контрагент                                    КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                                КАК СуммаДокумента,
				|	ДокументПродажи.ВидЦен                                        КАК ВидЦен,
				|	ДокументПродажи.Склад                                         КАК Склад,
				|	NULL                                                          КАК ФормаОплаты,
				|	ДокументПродажи.ОплатаВВалюте                                 КАК ОплатаВВалюте,
				|	NULL                                                          КАК ВалютаВзаиморасчетов,
				|	ДокументПродажи.Регулярное                                    КАК Регулярное,
				|	ДокументПродажи.Типовое                                       КАК Типовое,
				|	ДокументПродажи.Период                                        КАК Период,
				|	ДокументПродажи.КоличествоПериодов                            КАК КоличествоПериодов,
				|	ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей     КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	ДокументПродажи.СегментПартнеров                              КАК СегментПартнеров,
				|	ДокументПродажи.СегментНоменклатуры                           КАК СегментНоменклатуры,
				|	ДокументПродажи.ДатаНачалаДействия                            КАК ДатаНачалаДействия,
				|	ДокументПродажи.ДатаОкончанияДействия                         КАК ДатаОкончанияДействия,
				|	ДокументПродажи.СрокПоставки                                  КАК СрокПоставки,
				|	ДокументПродажи.ПроцентРучнойСкидки                           КАК ПроцентРучнойСкидки,
				|	ДокументПродажи.ПроцентРучнойНаценки                          КАК ПроцентРучнойНаценки,
				|	ДокументПродажи.ОграничиватьРучныеСкидки                      КАК ОграничиватьРучныеСкидки,
				|	ДокументПродажи.Календарь                                     КАК Календарь,
				|	ДокументПродажи.ФормаОплаты                                   КАК ФормаОплатыСоглашения,
				|	ДокументПродажи.ДоступноВнешнимПользователям                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.ИспользуютсяДоговорыКонтрагентов              КАК ИспользуютсяДоговорыКонтрагентов,
				|	ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
				|	ДокументПродажи.КалендарьВозвратаТары                         КАК КалендарьВозвратаТары,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары                КАК СрокВозвратаМногооборотнойТары,
				|	ДокументПродажи.ПорядокРасчетов                               КАК ПорядокРасчетов,
				|	ДокументПродажи.СценарийПланирования                          КАК СценарийПланирования,
				|	ДокументПродажи.ВозможнаРеализацияБезПереходаПраваСобственности КАК ВозможнаРеализацияБезПереходаПраваСобственности,
				|	ДокументПродажи.МинимальнаяСуммаЗаказа                        КАК МинимальнаяСуммаЗаказа,
				|	ДокументПродажи.ВидПлана                                      КАК ВидПлана
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                     КАК Соглашение,
				|	ДокументПродажи.НалогообложениеНДС             КАК НалогообложениеНДС,
				|	ДокументПродажи.Договор                        КАК Договор,
				|	ДокументПродажи.СуммаВзаиморасчетов            КАК СуммаВзаиморасчетов,
				|	ДокументПродажи.Соглашение.ГрафикОплаты        КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
				|	ИСТИНА                                         КАК НеОтгружатьЧастями,
				|	ДАТАВРЕМЯ(1,1,1)                               КАК ДатаСогласования,
				|	ДокументПродажи.Дата                           КАК ДатаОтгрузки,
				|	ЛОЖЬ                                           КАК ЭтоЗаказ,
				|	ДокументПродажи.РеализацияПоЗаказам            КАК НакладнаяПоЗаказам,
				|	NULL                                           КАК ДатаПлатежа,
				|	ДокументПродажи.Контрагент                     КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                 КАК СуммаДокумента,
				|	NULL                                           КАК ВидЦен,
				|	ДокументПродажи.Склад                          КАК Склад,
				|	ДокументПродажи.ФормаОплаты                    КАК ФормаОплаты,
				|	ДокументПродажи.ОплатаВВалюте                  КАК ОплатаВВалюте,
				|	ДокументПродажи.ПорядокРасчетов                КАК ПорядокРасчетов,
				|	ДокументПродажи.ВалютаВзаиморасчетов           КАК ВалютаВзаиморасчетов,
				|	NULL                                           КАК Регулярное,
				|	NULL                                           КАК Типовое,
				|	NULL                                           КАК Период,
				|	NULL                                           КАК КоличествоПериодов,
				|	NULL                                           КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                           КАК СегментПартнеров,
				|	NULL                                           КАК СегментНоменклатуры,
				|	NULL                                           КАК ДатаНачалаДействия,
				|	NULL                                           КАК ДатаОкончанияДействия,
				|	NULL                                           КАК СрокПоставки,
				|	NULL                                           КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.ДатаПереходаПраваСобственности КАК ДатаПереходаПраваСобственности,
				|	ДокументПродажи.Статус                         КАК Статус,
				|	NULL                                           КАК СрокВозвратаМногооборотнойТары,
				|	ДокументПродажи.Подразделение                  КАК Подразделение
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                     КАК Соглашение,
				|	ДокументПродажи.НалогообложениеНДС             КАК НалогообложениеНДС,
				|	ДокументПродажи.Договор                        КАК Договор,
				|	NULL                                           КАК СуммаВзаиморасчетов,
				|	NULL                                           КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
				|	ИСТИНА                                         КАК НеОтгружатьЧастями,
				|	ДАТАВРЕМЯ(1,1,1)                               КАК ДатаСогласования,
				|	ДАТАВРЕМЯ(1,1,1)                               КАК ДатаОтгрузки,
				|	ЛОЖЬ                                           КАК ЭтоЗаказ,
				|	ЛОЖЬ                                           КАК НакладнаяПоЗаказам,
				|	NULL                                           КАК ДатаПлатежа,
				|	ДокументПродажи.Контрагент                     КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                 КАК СуммаДокумента,
				|	NULL                                           КАК ВидЦен,
				|	NULL                                           КАК Склад,
				|	NULL                                           КАК ФормаОплаты,
				|	NULL                                           КАК ОплатаВВалюте,
				|	NULL                                           КАК ПорядокРасчетов,
				|	NULL                                           КАК ВалютаВзаиморасчетов,
				|	NULL                                           КАК Регулярное,
				|	NULL                                           КАК Типовое,
				|	NULL                                           КАК Период,
				|	NULL                                           КАК КоличествоПериодов,
				|	NULL                                           КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                           КАК СегментПартнеров,
				|	NULL                                           КАК СегментНоменклатуры,
				|	NULL                                           КАК ДатаНачалаДействия,
				|	NULL                                           КАК ДатаОкончанияДействия,
				|	NULL                                           КАК СрокПоставки,
				|	NULL                                           КАК ДоступноВнешнимПользователям,
				|	NULL                                           КАК СрокВозвратаМногооборотнойТары
				|";
			
		ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                     КАК Соглашение,
				|	ДокументПродажи.НалогообложениеНДС             КАК НалогообложениеНДС,
				|	ДокументПродажи.Договор                        КАК Договор,
				|	NULL                                           КАК СуммаВзаиморасчетов,
				|	NULL                                           КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация          КАК ХозяйственнаяОперация,
				|	ИСТИНА                                         КАК НеОтгружатьЧастями,
				|	ДАТАВРЕМЯ(1,1,1)                               КАК ДатаСогласования,
				|	ДАТАВРЕМЯ(1,1,1)                               КАК ДатаОтгрузки,
				|	ЛОЖЬ                                           КАК ЭтоЗаказ,
				|	ЛОЖЬ                                           КАК НакладнаяПоЗаказам,
				|	NULL                                           КАК ДатаПлатежа,
				|	ДокументПродажи.Контрагент                     КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                 КАК СуммаДокумента,
				|	NULL                                           КАК ВидЦен,
				|	NULL                                           КАК Склад,
				|	NULL                                           КАК ФормаОплаты,
				|	NULL                                           КАК ОплатаВВалюте,
				|	NULL                                           КАК ПорядокРасчетов,
				|	NULL                                           КАК ВалютаВзаиморасчетов,
				|	NULL                                           КАК Регулярное,
				|	NULL                                           КАК Типовое,
				|	NULL                                           КАК Период,
				|	NULL                                           КАК КоличествоПериодов,
				|	NULL                                           КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                           КАК СегментПартнеров,
				|	NULL                                           КАК СегментНоменклатуры,
				|	NULL                                           КАК ДатаНачалаДействия,
				|	NULL                                           КАК ДатаОкончанияДействия,
				|	NULL                                           КАК СрокПоставки,
				|	NULL                                           КАК ДоступноВнешнимПользователям,
				|	NULL                                           КАК СрокВозвратаМногооборотнойТары
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Соглашение                     КАК Соглашение,
				|	ДокументПродажи.НалогообложениеНДС             КАК НалогообложениеНДС,
				|	ДокументПродажи.Договор                        КАК Договор,
				|	ДокументПродажи.СуммаВзаиморасчетов            КАК СуммаВзаиморасчетов,
				|	ДокументПродажи.Соглашение.ГрафикОплаты        КАК ГрафикОплаты,
				|	NULL                                           КАК ХозяйственнаяОперация,
				|	ИСТИНА                                         КАК НеОтгружатьЧастями,
				|	ДАТАВРЕМЯ(1,1,1)                               КАК ДатаСогласования,
				|	ДокументПродажи.Дата                           КАК ДатаОтгрузки,
				|	ЛОЖЬ                                           КАК ЭтоЗаказ,
				|	ДокументПродажи.АктПоЗаказам                   КАК НакладнаяПоЗаказам,
				|	NULL                                           КАК ДатаПлатежа,
				|	ДокументПродажи.Контрагент                     КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                 КАК СуммаДокумента,
				|	NULL                                           КАК ВидЦен,
				|	NULL                                           КАК Склад,
				|	ДокументПродажи.ФормаОплаты                    КАК ФормаОплаты,
				|	ДокументПродажи.ОплатаВВалюте                  КАК ОплатаВВалюте,
				|	ДокументПродажи.ПорядокРасчетов                КАК ПорядокРасчетов,
				|	ДокументПродажи.ВалютаВзаиморасчетов           КАК ВалютаВзаиморасчетов,
				|	NULL                                           КАК Регулярное,
				|	NULL                                           КАК Типовое,
				|	NULL                                           КАК Период,
				|	NULL                                           КАК КоличествоПериодов,
				|	NULL                                           КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                           КАК СегментПартнеров,
				|	NULL                                           КАК СегментНоменклатуры,
				|	NULL                                           КАК ДатаНачалаДействия,
				|	NULL                                           КАК ДатаОкончанияДействия,
				|	NULL                                           КАК СрокПоставки,
				|	NULL                                           КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.Дата                           КАК ДатаПереходаПраваСобственности,
				|	NULL                                           КАК СрокВозвратаМногооборотнойТары,
				|	ДокументПродажи.Подразделение                  КАК Подразделение
				|";
				
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ДокументПродажи.Партнер                                   КАК Партнер,
			|	ДокументПродажи.Валюта                                    КАК Валюта,
			|	ДокументПродажи.ЦенаВключаетНДС                           КАК ЦенаВключаетНДС,
			|	ДокументПродажи.Дата                                      КАК Дата,
			|	ДокументПродажи.Организация                               КАК Организация"
			+ ?(ПустаяСтрока(ВременныйТекст), "", ", " + ВременныйТекст) + "
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаДокументПродажи
			|ИЗ
			|" + ИмяТаблицы + " КАК ДокументПродажи
			|ГДЕ
			|	ДокументПродажи.Ссылка = &ДокументПродажи
			|;
			|";
		
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
		
	Иначе

		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ДокументПродажи.Партнер                                       КАК Партнер,
			|	ДокументПродажи.Контрагент                                    КАК Контрагент,
			|	ДокументПродажи.Валюта                                        КАК Валюта,
			|	ДокументПродажи.ВалютаВзаиморасчетов                          КАК ВалютаВзаиморасчетов,
			|	ДокументПродажи.ЦенаВключаетНДС                               КАК ЦенаВключаетНДС,
			|	ДокументПродажи.НалогообложениеНДС                            КАК НалогообложениеНДС,
			|	ДокументПродажи.Соглашение                                    КАК Соглашение,
			|	ДокументПродажи.Дата                                          КАК Дата,
			|	ДокументПродажи.ВидЦен                                        КАК ВидЦен,
			|	ДокументПродажи.Организация                                   КАК Организация,
			|	ДокументПродажи.Склад                                         КАК Склад,
			|	ДокументПродажи.Подразделение                                 КАК Подразделение,
			|	ДокументПродажи.ГрафикОплаты                                  КАК ГрафикОплаты,
			|	ДокументПродажи.ФормаОплаты                                   КАК ФормаОплаты,
			|	ДокументПродажи.ОплатаВВалюте                                 КАК ОплатаВВалюте,
			|	ДокументПродажи.Календарь                                     КАК Календарь,
			|	ДокументПродажи.ДатаПлатежа                                   КАК ДатаПлатежа,
			|	ДокументПродажи.Регулярное                                    КАК Регулярное,
			|	ДокументПродажи.Типовое                                       КАК Типовое,
			|	ДокументПродажи.Период                                        КАК Период,
			|	ДокументПродажи.КоличествоПериодов                            КАК КоличествоПериодов,
			|	ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей     КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ДокументПродажи.СегментПартнеров                              КАК СегментПартнеров,
			|	ДокументПродажи.СегментНоменклатуры                           КАК СегментНоменклатуры,
			|	ДокументПродажи.ДатаНачалаДействия                            КАК ДатаНачалаДействия,
			|	ДокументПродажи.ДатаОкончанияДействия                         КАК ДатаОкончанияДействия,
			|	ДокументПродажи.СрокПоставки                                  КАК СрокПоставки,
			|	ДокументПродажи.ХозяйственнаяОперация                         КАК ХозяйственнаяОперация,
			|	ДокументПродажи.НаправлениеДеятельности                       КАК НаправлениеДеятельности,
			|	ДокументПродажи.СуммаДокумента                                КАК СуммаДокумента,
			|	ДокументПродажи.НеОтгружатьЧастями                            КАК НеОтгружатьЧастями,
			|	ДокументПродажи.ДатаСогласования                              КАК ДатаСогласования,
			|	ДокументПродажи.ДатаОтгрузки                                  КАК ДатаОтгрузки,
			|	ДокументПродажи.ЭтоЗаказ                                      КАК ЭтоЗаказ,
			|	ДокументПродажи.НакладнаяПоЗаказам                            КАК НакладнаяПоЗаказам,
			|	ЛОЖЬ                                                          КАК РеализацияПоЗаказам,
			|	ЛОЖЬ                                                          КАК АктПоЗаказам,
			|	ДокументПродажи.ПроцентРучнойСкидки                           КАК ПроцентРучнойСкидки,
			|	ДокументПродажи.ПроцентРучнойНаценки                          КАК ПроцентРучнойНаценки,
			|	ДокументПродажи.ОграничиватьРучныеСкидки                      КАК ОграничиватьРучныеСкидки,
			|	ДокументПродажи.ДоступноВнешнимПользователям                  КАК ДоступноВнешнимПользователям,
			|	ДокументПродажи.ИспользуютсяДоговорыКонтрагентов              КАК ИспользуютсяДоговорыКонтрагентов,
			|	ДокументПродажи.Договор                                       КАК Договор,
			|	ДокументПродажи.Статус                                        КАК Статус,
			|	ДокументПродажи.СуммаВзаиморасчетов                           КАК СуммаВзаиморасчетов,
			|	ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю       КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	ДокументПродажи.КалендарьВозвратаТары                         КАК КалендарьВозвратаТары,
			|	ДокументПродажи.СрокВозвратаМногооборотнойТары                КАК СрокВозвратаМногооборотнойТары,
			|	ДокументПродажи.ПорядокРасчетов                               КАК ПорядокРасчетов,
			|	ДокументПродажи.СценарийПланирования                          КАК СценарийПланирования,
			|	ДокументПродажи.ДатаПереходаПраваСобственности                КАК ДатаПереходаПраваСобственности,
			|	ДокументПродажи.ВозможнаРеализацияБезПереходаПраваСобственности КАК ВозможнаРеализацияБезПереходаПраваСобственности,
			|	ДокументПродажи.МинимальнаяСуммаЗаказа                        КАК МинимальнаяСуммаЗаказа,
			|	ДокументПродажи.ВидПлана                                      КАК ВидПлана
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаДокументПродажи
			|ИЗ
			|	&ДокументПродажи КАК ДокументПродажи
			|;
			|";
			
		// Сформируем необходимые колонки таблицы шапки документа продажи
			
		ТипВалюта = Новый ОписаниеТипов("СправочникСсылка.Валюты");
		ТипБулево = Новый ОписаниеТипов("Булево");
		ТипЧисло  = Новый ОписаниеТипов("Число");
		ТипДата   = Новый ОписаниеТипов("Дата");
		
		МассивТиповСтатусов = Новый Массив;
		МассивТиповСтатусов.Добавить(Тип("ПеречислениеСсылка.СтатусыЗаказовКлиентов"));
		МассивТиповСтатусов.Добавить(Тип("ПеречислениеСсылка.СтатусыЗаявокНаВозвратТоваровОтКлиентов"));
		МассивТиповСтатусов.Добавить(Тип("ПеречислениеСсылка.СтатусыРеализацийТоваровУслуг"));
		
		ТаблицаДокумента = Новый ТаблицаЗначений();
		ТаблицаДокумента.Колонки.Добавить("Партнер",                                       Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		ТаблицаДокумента.Колонки.Добавить("Контрагент",                                    Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаДокумента.Колонки.Добавить("Валюта",                                        ТипВалюта);
		ТаблицаДокумента.Колонки.Добавить("ВалютаВзаиморасчетов",                          ТипВалюта);
		ТаблицаДокумента.Колонки.Добавить("ЦенаВключаетНДС",                               ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("НалогообложениеНДС",                            Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогообложенияНДС"));
		ТаблицаДокумента.Колонки.Добавить("ХозяйственнаяОперация",                         Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
		ТаблицаДокумента.Колонки.Добавить("Дата",                                          ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ВидЦен",                                        Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ТаблицаДокумента.Колонки.Добавить("Организация",                                   Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаДокумента.Колонки.Добавить("Склад",                                         Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаДокумента.Колонки.Добавить("Подразделение",                                 Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		ТаблицаДокумента.Колонки.Добавить("Соглашение",                                    Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
		ТаблицаДокумента.Колонки.Добавить("ГрафикОплаты",                                  Новый ОписаниеТипов("СправочникСсылка.ГрафикиОплаты"));
		ТаблицаДокумента.Колонки.Добавить("ФормаОплаты",                                   Новый ОписаниеТипов("ПеречислениеСсылка.ФормыОплаты"));
		ТаблицаДокумента.Колонки.Добавить("ОплатаВВалюте",                                 ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Календарь",                                     Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
		ТаблицаДокумента.Колонки.Добавить("ДатаПлатежа",                                   ТипДата);
		ТаблицаДокумента.Колонки.Добавить("СегментНоменклатуры",                           Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
		ТаблицаДокумента.Колонки.Добавить("СтавкаНДС",                                     Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
		ТаблицаДокумента.Колонки.Добавить("Регулярное",                                    ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Типовое",                                       ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Период",                                        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
		ТаблицаДокумента.Колонки.Добавить("КоличествоПериодов",                            ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ИспользуетсяВРаботеТорговыхПредставителей",     ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("СегментПартнеров",                              Новый ОписаниеТипов("СправочникСсылка.СегментыПартнеров"));
		ТаблицаДокумента.Колонки.Добавить("ДатаНачалаДействия",                            ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ДатаОкончанияДействия",                         ТипДата);
		ТаблицаДокумента.Колонки.Добавить("СрокПоставки",                                  ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("СуммаДокумента",                                ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ДатаОтгрузки",                                  ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ДатаСогласования",                              ТипДата);
		ТаблицаДокумента.Колонки.Добавить("НеОтгружатьЧастями",                            ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ЭтоЗаказ",                                      ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("НакладнаяПоЗаказам",                            ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("АктПоЗаказам",                                  ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("РеализацияПоЗаказам",                           ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ПроцентРучнойСкидки",                           ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ПроцентРучнойНаценки",                          ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ОграничиватьРучныеСкидки",                      ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ДоступноВнешнимПользователям",                  ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ИспользуютсяДоговорыКонтрагентов",              ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Договор",                                       Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаДокумента.Колонки.Добавить("Статус",                                        Новый ОписаниеТипов(МассивТиповСтатусов));
		ТаблицаДокумента.Колонки.Добавить("СуммаВзаиморасчетов",                           ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("МинимальнаяСуммаЗаказа",                        ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю",       ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("КалендарьВозвратаТары",                         Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
		ТаблицаДокумента.Колонки.Добавить("СрокВозвратаМногооборотнойТары",                ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ПорядокРасчетов",                               Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетов"));
		ТаблицаДокумента.Колонки.Добавить("СценарийПланирования",                          Новый ОписаниеТипов("СправочникСсылка.СценарииТоварногоПланирования"));
		ТаблицаДокумента.Колонки.Добавить("ДатаПереходаПраваСобственности",                ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ВозможнаРеализацияБезПереходаПраваСобственности", ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ВидПлана",                                      Новый ОписаниеТипов("СправочникСсылка.ВидыПланов"));
		ТаблицаДокумента.Колонки.Добавить("НаправлениеДеятельности",                       Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
		
		// Добавим строку и заполним значениями из шапки документа
		
		НоваяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументПродажи);
		
		Если ТипЗнч(ДокументПродажи.Ссылка) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			// Дозаполним подразделение для ЧекККМВозврат, так как в шапке документа этого реквизита нет.
			НоваяСтрока.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПродажи.КассаККМ, "Подразделение");
		КонецЕсли;
		
		ИмяТабличнойЧасти = "ЭтапыГрафикаОплаты";
		Если ТипЗнч(ДокументПродажи) = Тип("ДанныеФормыСтруктура") Тогда
			МетаданныеДокумента = ДокументПродажи.Ссылка.Метаданные();
		Иначе
			МетаданныеДокумента = ДокументПродажи.Метаданные();
		КонецЕсли;
		Если МетаданныеДокумента.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено
			И МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("ДатаПлатежа") <> Неопределено Тогда
			
			Если ДокументПродажи[ИмяТабличнойЧасти].Количество() > 0 Тогда
				ТаблицаОплат = ДокументПродажи[ИмяТабличнойЧасти].Выгрузить(,"ДатаПлатежа");
				ТаблицаОплат.Сортировать("ДатаПлатежа Убыв");
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаОплат[0]);
			КонецЕсли; 
			
		КонецЕсли;
		
		НоваяСтрока.НакладнаяПоЗаказам = НоваяСтрока.АктПоЗаказам
			ИЛИ НоваяСтрока.РеализацияПоЗаказам;
		
		НоваяСтрока.ЭтоЗаказ = ТипЗнч(ДокументПродажи.Ссылка) = Тип("ДокументСсылка.ЗаказКлиента")
			ИЛИ ТипЗнч(ДокументПродажи.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
		
		ПараметрыЗапроса.Вставить("ДокументПродажи", ТаблицаДокумента);
		
	КонецЕсли;

КонецПроцедуры

// Формирует запрос к тч Товары документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса           - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса       - Структура - структура, содержащая параметры запроса
// ДокументПродажи        - ДокументОбъект, ДокументСсылка - документ, к которому необходимо сформировать запрос
// ИмяТаблицы             - Строка - имя таблицы документа, к которой необходимо сформировать запрос
// УчитыватьСкидкиНаценки - Булево - флаг, определяющий наличие в проверяемом документе скидок и наценок
// ПоСсылке               - Булево - флаг, если Истина проверка осуществляется по ссылке на объект.
// ИспользоватьПроверкиПоЦенам - Булево - флаг, если Истина для некоторых запросов добавляются структуры ценообразования.
//
Процедура СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса,
	                                                               ПараметрыЗапроса,
	                                                               ДокументПродажи,
	                                                               ИмяТаблицы,
	                                                               УчитыватьСкидкиНаценки,
	                                                               ПоСсылке = Ложь,
	                                                               ИспользоватьПроверкиПоЦенам,
	                                                               ИмяПроверки = "")
	ИмяТабличнойЧасти = "Товары";
	ИмяДопТабличнойЧасти = "";
	ИменаКолонокДопТабличнойЧасти = "";
	ПредставлениеТабличнойЧасти    = "Товары";
	ПредставлениеДопТабличнойЧасти = "";
	
	Если ТипЗнч(ДокументПродажи) = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.СуммаНДС                         КАК СуммаНДС,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Сумма / Товары.КоличествоУпаковок КАК ЦенаСоСкидкой,
			|	Товары.ДатаОтгрузки                     КАК ДатаОтгрузки,
			|	ЛОЖЬ                                    КАК Отменено,
			|	Товары.Склад                            КАК Склад,
			|	Товары.Подразделение                    КАК Подразделение,
			|	Товары.СрокПоставки                     КАК СрокПоставки,
			|	0                                       КАК КодСтроки,
			|	Товары.Количество                       КАК Количество,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	Товары.ВариантОбеспечения               КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Количество,
			|КоличествоУпаковок,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СуммаНДС,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|ДатаОтгрузки,
			|Склад,
			|Подразделение,
			|ВариантОбеспечения,
			|СрокПоставки";
		
	ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЛОЖЬ                  КАК ЭтоКомплектующие,
			|	ЛОЖЬ                  КАК ЭтоНабор,
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки    КАК НомерСтроки,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Цена           КАК Цена,
			|	Товары.ВидЦены        КАК ВидЦены,
			|	Товары.Упаковка       КАК Упаковка,
			|	Товары.Цена           КАК ЦенаСоСкидкой,
			|	Товары.СрокПоставки   КАК СрокПоставки,
			|	0                     КАК КодСтроки,
			|	ИСТИНА                КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таблица.ЭтоКомплектующие     КАК ЭтоКомплектующие,
			|	Таблица.ЭтоНабор             КАК ЭтоНабор,
			|	Таблица.НоменклатураНабора   КАК НоменклатураНабора,
			|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
			|	Таблица.НомерСтроки          КАК НомерСтроки,
			|	Таблица.Номенклатура         КАК Номенклатура,
			|	Таблица.Характеристика       КАК Характеристика,
			|	&ТекстПолейЦенообразования,
			|	Таблица.Цена                 КАК Цена,
			|	Таблица.ВидЦены              КАК ВидЦены,
			|	Таблица.Упаковка             КАК Упаковка,
			|	Таблица.Цена                 КАК ЦенаСоСкидкой,
			|	Таблица.СрокПоставки         КАК СрокПоставки,
			|	Таблица.КодСтроки            КАК КодСтроки,
			|	Таблица.ПроверятьОшибкиЗаполненияСрокПоставки КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	ВременнаяТаблицаТоварыПредварительная КАК Таблица
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
			|			ПО ВидыНоменклатуры.Ссылка = Таблица.Номенклатура.ВидНоменклатуры
			|
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СрокПоставки";
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки    КАК НомерСтроки,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Цена           КАК Цена,
			|	Товары.Сумма          КАК Сумма,
			|	Товары.ВидЦены        КАК ВидЦены,
			|	Товары.Упаковка       КАК Упаковка,
			|	Товары.СтавкаНДС      КАК СтавкаНДС,
			|	Товары.СуммаНДС       КАК СуммаНДС,
			|	Товары.Цена           КАК ЦенаСоСкидкой,
			|	0                     КАК СрокПоставки,
			|	0                     КАК КодСтроки,
			|	ЛОЖЬ                  КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СуммаНДС,
			|СтавкаНДС";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.СуммаНДС                         КАК СуммаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Сумма / Товары.КоличествоУпаковок КАК ЦенаСоСкидкой,
			|	Товары.ДатаОтгрузки                     КАК ДатаОтгрузки,
			|	Товары.Отменено                         КАК Отменено,
			|	Товары.Склад                            КАК Склад,
			|	Товары.Подразделение                    КАК Подразделение,
			|	Товары.СрокПоставки                     КАК СрокПоставки,
			|	Товары.КодСтроки                        КАК КодСтроки,
			|	Товары.Количество                       КАК Количество,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	Товары.ВариантОбеспечения               КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки,
			|	Товары.НоменклатураПартнера             КАК НоменклатураПартнера
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Количество,
			|КоличествоУпаковок,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|СуммаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|ДатаОтгрузки,
			|Отменено,
			|Склад,
			|Подразделение,
			|СрокПоставки,
			|ВариантОбеспечения,
			|КодСтроки,
			|НоменклатураПартнера";
			

	ИначеЕсли ИмяТаблицы = "Документ.ПередачаТоваровХранителю" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора   КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки          КАК НомерСтроки,
			|	Товары.Номенклатура         КАК Номенклатура,
			|	Товары.Характеристика       КАК Характеристика,
			|	Товары.Цена                 КАК Цена,
			|	Товары.Сумма                КАК Сумма,
			|	0                           КАК СуммаВзаиморасчетов,
			|	Товары.ВидЦены              КАК ВидЦены,
			|	Товары.Упаковка             КАК Упаковка,
			|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС) КАК СтавкаНДС,
			|	0                           КАК СуммаНДС,
			|	0                           КАК КлючСвязи,
			|	0                           КАК ПроцентАвтоматическойСкидки,
			|	0                           КАК СуммаАвтоматическойСкидки,
			|	0                           КАК ПроцентРучнойСкидки,
			|	0                           КАК СуммаРучнойСкидки,
			|	0                           КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)            КАК ДатаОтгрузки,
			|	ЛОЖЬ                        КАК Отменено,
			|	Товары.Склад                КАК Склад,
			|	Товары.СрокПоставки         КАК СрокПоставки,
			|	Товары.КодСтроки            КАК КодСтроки,
			|	Товары.Количество           КАК Количество,
			|	Товары.КоличествоУпаковок   КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                        КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
		
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = 
			"НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|Количество,
			|КоличествоУпаковок,
			|Склад,
			|СрокПоставки,
			|КодСтроки";
	ИначеЕсли ИмяТаблицы = "Документ.ВыкупТоваровХранителем" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки          КАК НомерСтроки,
			|	Товары.Номенклатура         КАК Номенклатура,
			|	Товары.Характеристика       КАК Характеристика,
			|	Товары.Цена                 КАК Цена,
			|	Товары.Сумма                КАК Сумма,
			|	0                           КАК СуммаВзаиморасчетов,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	Товары.Упаковка             КАК Упаковка,
			|	Товары.СтавкаНДС            КАК СтавкаНДС,
			|	Товары.СуммаНДС             КАК СуммаНДС,
			|	0                           КАК КлючСвязи,
			|	0                           КАК ПроцентАвтоматическойСкидки,
			|	0                           КАК СуммаАвтоматическойСкидки,
			|	0                           КАК ПроцентРучнойСкидки,
			|	0                           КАК СуммаРучнойСкидки,
			|	0                           КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)            КАК ДатаОтгрузки,
			|	ЛОЖЬ                        КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	0                           КАК СрокПоставки,
			|	0                           КАК КодСтроки,
			|	Товары.Количество           КАК Количество,
			|	Товары.КоличествоУпаковок   КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                        КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
		
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = 
			"НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|СуммаНДС,
			|Количество,
			|КоличествоУпаковок";
	ИначеЕсли ИмяТаблицы = "Документ.ОтчетОСписанииТоваровУХранителя" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки          КАК НомерСтроки,
			|	Товары.Номенклатура         КАК Номенклатура,
			|	Товары.Характеристика       КАК Характеристика,
			|	0                           КАК Цена,
			|	0                           КАК Сумма,
			|	0                           КАК СуммаВзаиморасчетов,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
			|	0                           КАК СуммаНДС,
			|	0                           КАК КлючСвязи,
			|	0                           КАК ПроцентАвтоматическойСкидки,
			|	0                           КАК СуммаАвтоматическойСкидки,
			|	0                           КАК ПроцентРучнойСкидки,
			|	0                           КАК СуммаРучнойСкидки,
			|	0                           КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)            КАК ДатаОтгрузки,
			|	ЛОЖЬ                        КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	0                           КАК СрокПоставки,
			|	0                           КАК КодСтроки,
			|	Товары.Количество           КАК Количество,
			|	Товары.Количество           КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                        КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
		
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = 
			"НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Количество";
	ИначеЕсли ИмяТаблицы = "Документ.ОприходованиеИзлишковТоваровУХранителя" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки          КАК НомерСтроки,
			|	Товары.Номенклатура         КАК Номенклатура,
			|	Товары.Характеристика       КАК Характеристика,
			|	0                           КАК Цена,
			|	0                           КАК Сумма,
			|	0                           КАК СуммаВзаиморасчетов,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
			|	0                           КАК СуммаНДС,
			|	0                           КАК КлючСвязи,
			|	0                           КАК ПроцентАвтоматическойСкидки,
			|	0                           КАК СуммаАвтоматическойСкидки,
			|	0                           КАК ПроцентРучнойСкидки,
			|	0                           КАК СуммаРучнойСкидки,
			|	0                           КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)            КАК ДатаОтгрузки,
			|	ЛОЖЬ                        КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	0                           КАК СрокПоставки,
			|	0                           КАК КодСтроки,
			|	Товары.Количество           КАК Количество,
			|	Товары.Количество           КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                        КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
		
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = 
			"НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Количество";
	ИначеЕсли ИмяТаблицы = "Документ.ПоступлениеТоваровОтХранителя" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки          КАК НомерСтроки,
			|	Товары.Номенклатура         КАК Номенклатура,
			|	Товары.Характеристика       КАК Характеристика,
			|	Товары.Цена                 КАК Цена,
			|	Товары.Сумма                КАК Сумма,
			|	0                           КАК СуммаВзаиморасчетов,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	Товары.Упаковка             КАК Упаковка,
			|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС) КАК СтавкаНДС,
			|	0                           КАК СуммаНДС,
			|	0                           КАК КлючСвязи,
			|	0                           КАК ПроцентАвтоматическойСкидки,
			|	0                           КАК СуммаАвтоматическойСкидки,
			|	0                           КАК ПроцентРучнойСкидки,
			|	0                           КАК СуммаРучнойСкидки,
			|	0                           КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)            КАК ДатаОтгрузки,
			|	ЛОЖЬ                        КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	0                           КАК СрокПоставки,
			|	0                           КАК КодСтроки,
			|	Товары.Количество           КАК Количество,
			|	Товары.КоличествоУпаковок   КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                        КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
		
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = 
			"НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|Упаковка,
			|Количество,
			|КоличествоУпаковок";
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора                              КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора                            КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                                     КАК НомерСтроки,
			|	Товары.Номенклатура                                    КАК Номенклатура,
			|	Товары.Характеристика                                  КАК Характеристика,
			|	Товары.Подразделение                                   КАК Подразделение,
			|	Товары.Цена                                            КАК Цена,
			|	Товары.Сумма                                           КАК Сумма,
			|	Товары.ВидЦены                                         КАК ВидЦены,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
			|	Товары.СтавкаНДС                                       КАК СтавкаНДС,
			|	Товары.СуммаНДС                                        КАК СуммаНДС,
			|	Товары.КлючСвязи                                       КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки                     КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки                       КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки                             КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                               КАК СуммаРучнойСкидки,
			|	Товары.Сумма / Товары.Количество КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                                       КАК ДатаОтгрузки,
			|	ЛОЖЬ                                                   КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)               КАК Склад,
			|	0                                                      КАК СрокПоставки,
			|	0                                                      КАК КодСтроки,
			|	Товары.Количество                                      КАК Количество,
			|	Товары.Количество                                      КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                                   КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Услуги";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Подразделение,
			|Цена,
			|Сумма,
			|ВидЦены,
			|СуммаНДС,
			|СтавкаНДС,
			|КлючСвязи,
			|Количество,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки";
			
	ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.СуммаВзаиморасчетов              КАК СуммаВзаиморасчетов,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.СуммаНДС                         КАК СуммаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Сумма / Товары.КоличествоУпаковок КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
			|	ЛОЖЬ                                     КАК Отменено,
			|	Товары.Склад                             КАК Склад,
			|	Товары.Подразделение                     КАК Подразделение,
			|	Товары.СрокПоставки                      КАК СрокПоставки,
			|	Товары.КодСтроки                         КАК КодСтроки,
			|	Товары.Количество                        КАК Количество,
			|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|СуммаВзаиморасчетов,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|СуммаНДС,
			|КлючСвязи,
			|Количество,
			|КоличествоУпаковок,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|Склад,
			|Подразделение,
			|СрокПоставки,
			|КодСтроки";
			
	ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.Склад                            КАК Склад,
			|	Товары.Подразделение                    КАК Подразделение,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.СуммаНДС                         КАК СуммаНДС,
			|	Товары.Сумма                            КАК Сумма,
			|	
			|	ДатаВремя(1,1,1)                                        КАК ДатаОтгрузки,
			|	ЛОЖЬ                                                    КАК Отменено,
			|	0                                                       КАК СрокПоставки,
			|	0                                                       КАК КодСтроки,
			|	0                                                       КАК Количество,
			|	0                                                       КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки,
			|	0                                                       КАК КлючСвязи,
			|	0                                                       КАК ПроцентАвтоматическойСкидки,
			|	0                                                       КАК СуммаАвтоматическойСкидки,
			|	0                                                       КАК ПроцентРучнойСкидки,
			|	0                                                       КАК СуммаРучнойСкидки,
			|	Товары.Цена                                             КАК ЦенаСоСкидкой
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|Склад,
			|Подразделение,
			|СуммаНДС,
			|СтавкаНДС,
			|Сумма";
		
		ИначеЕсли ИмяТаблицы = "Документ.АктОРасхожденияхПослеПриемки" Тогда
		
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)               КАК НоменклатураНабора,
			|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                                           КАК НомерСтроки,
			|	Товары.Номенклатура                                          КАК Номенклатура,
			|	Товары.Характеристика                                        КАК Характеристика,
			|	Товары.Цена                                                  КАК Цена,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)                    КАК ВидЦены,
			|	Товары.Упаковка                                              КАК Упаковка,
			|	Товары.Склад                                                 КАК Склад,
			|	Товары.СтавкаНДС                                             КАК СтавкаНДС,
			|	Товары.СуммаНДС                                              КАК СуммаНДС,
			|	Товары.Сумма                                                 КАК Сумма,
			|	
			|	ДатаВремя(1,1,1)                                        КАК ДатаОтгрузки,
			|	ЛОЖЬ                                                    КАК Отменено,
			|	0                                                       КАК СрокПоставки,
			|	0                                                       КАК КодСтроки,
			|	0                                                       КАК Количество,
			|	0                                                       КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки,
			|	0                                                       КАК КлючСвязи,
			|	0                                                       КАК ПроцентАвтоматическойСкидки,
			|	0                                                       КАК СуммаАвтоматическойСкидки,
			|	0                                                       КАК ПроцентРучнойСкидки,
			|	0                                                       КАК СуммаРучнойСкидки,
			|	Товары.Цена                                             КАК ЦенаСоСкидкой
			|	
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Упаковка,
			|Склад,
			|СуммаНДС,
			|СтавкаНДС,
			|Сумма";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтХранителя Тогда
			
			Если ДокументПродажи.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаПоПатенту
				И ИмяПроверки = "ВременнаяТаблицаТоварыИзВозвращаемыхТоваровЗаявкиНаВозвратТоваровОтКлиента" Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
					|ВЫБРАТЬ
					|	Товары.НоменклатураНабора                КАК НоменклатураНабора,
					|	Товары.ХарактеристикаНабора              КАК ХарактеристикаНабора,
					|	Товары.НомерСтроки                       КАК НомерСтроки,
					|	Товары.Номенклатура                      КАК Номенклатура,
					|	Товары.Характеристика                    КАК Характеристика,
					|	Товары.Цена                              КАК Цена,
					|	Товары.Сумма                             КАК Сумма,
					|	Товары.ВидЦены                           КАК ВидЦены,
					|	Товары.Упаковка                          КАК Упаковка,
					|	Товары.СтавкаНДС                         КАК СтавкаНДС,
					|	Товары.СуммаНДС                          КАК СуммаНДС,
					|	0                                        КАК КлючСвязи,
					|	0                                        КАК ПроцентАвтоматическойСкидки,
					|	0                                        КАК СуммаАвтоматическойСкидки,
					|	0                                        КАК ПроцентРучнойСкидки,
					|	0                                        КАК СуммаРучнойСкидки,
					|	Товары.Цена                              КАК ЦенаСоСкидкой,
					|	ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
					|	Товары.Отменено                          КАК Отменено,
					|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
					|	0                                        КАК СрокПоставки,
					|	0                                        КАК КодСтроки,
					|	Товары.Количество                        КАК Количество,
					|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
					|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
					|	ЛОЖЬ                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки
					|ПОМЕСТИТЬ
					|	ВременнаяТаблицаТоварыПредварительная
					|ИЗ
					|	&ИмяТаблицы КАК Товары
					|ГДЕ &УсловиеОтбора
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
					|;
					|";
				
				ИмяТабличнойЧасти = "ВозвращаемыеТовары";
				ПредставлениеТабличнойЧасти = НСтр("ru = 'Возвращаемые товары'");
				
				ИменаКолонок = "НомерСтроки,
					|НоменклатураНабора,
					|ХарактеристикаНабора,
					|Номенклатура,
					|Характеристика,
					|Цена,
					|Сумма,
					|ВидЦены,
					|Упаковка,
					|СтавкаНДС,
					|СуммаНДС,
					|Количество,
					|КоличествоУпаковок,
					|Отменено";

			Иначе
				ТекстЗапроса = ТекстЗапроса + "
					|ВЫБРАТЬ
					|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
					|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
					|	Товары.НомерСтроки                      КАК НомерСтроки,
					|	Товары.Номенклатура                     КАК Номенклатура,
					|	Товары.Характеристика                   КАК Характеристика,
					|	Товары.Подразделение                    КАК Подразделение,
					|	Товары.Цена                             КАК Цена,
					|	Товары.Сумма                            КАК Сумма,
					|	Товары.ВидЦены                          КАК ВидЦены,
					|	Товары.Упаковка                         КАК Упаковка,
					|	Товары.СтавкаНДС                        КАК СтавкаНДС,
					|	Товары.СуммаНДС                         КАК СуммаНДС,
					|	Товары.КлючСвязи                        КАК КлючСвязи,
					|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
					|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
					|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
					|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
					|	Товары.Сумма / Товары.КоличествоУпаковок КАК ЦенаСоСкидкой,
					|	Товары.ДатаОтгрузки                      КАК ДатаОтгрузки,
					|	Товары.Отменено                          КАК Отменено,
					|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
					|	Товары.СрокПоставки                      КАК СрокПоставки,
					|	0                                        КАК КодСтроки,
					|	Товары.Количество                        КАК Количество,
					|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
					|	Товары.ВариантОбеспечения                КАК ВариантОбеспечения,
					|	ЛОЖЬ                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки
					|ПОМЕСТИТЬ
					|	ВременнаяТаблицаТоварыПредварительная
					|ИЗ
					|	&ИмяТаблицы КАК Товары
					|ГДЕ &УсловиеОтбора
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
					|;
					|";
					
				ИмяТабличнойЧасти = "ЗаменяющиеТовары";
				ИменаКолонок = "НомерСтроки,
					|НоменклатураНабора,
					|ХарактеристикаНабора,
					|Номенклатура,
					|Характеристика,
					|Подразделение,
					|Цена,
					|Сумма,
					|ВидЦены,
					|Упаковка,
					|СтавкаНДС,
					|СуммаНДС,
					|КлючСвязи,
					|Количество,
					|КоличествоУпаковок,
					|ПроцентАвтоматическойСкидки,
					|СуммаАвтоматическойСкидки,
					|ПроцентРучнойСкидки,
					|СуммаРучнойСкидки,
					|ДатаОтгрузки,
					|Отменено,
					|ВариантОбеспечения,
					|СрокПоставки";
			КонецЕсли;			
		Иначе
			ТекстЗапроса = ТекстЗапроса + "
				|ВЫБРАТЬ
				|	Товары.НоменклатураНабора                КАК НоменклатураНабора,
				|	Товары.ХарактеристикаНабора              КАК ХарактеристикаНабора,
				|	Товары.НомерСтроки                       КАК НомерСтроки,
				|	Товары.Номенклатура                      КАК Номенклатура,
				|	Товары.Характеристика                    КАК Характеристика,
				|	Товары.Цена                              КАК Цена,
				|	Товары.Сумма                             КАК Сумма,
				|	Товары.ВидЦены                           КАК ВидЦены,
				|	Товары.Упаковка                          КАК Упаковка,
				|	Товары.СтавкаНДС                         КАК СтавкаНДС,
				|	Товары.СуммаНДС                          КАК СуммаНДС,
				|	0                                        КАК КлючСвязи,
				|	0                                        КАК ПроцентАвтоматическойСкидки,
				|	0                                        КАК СуммаАвтоматическойСкидки,
				|	0                                        КАК ПроцентРучнойСкидки,
				|	0                                        КАК СуммаРучнойСкидки,
				|	Товары.Цена                              КАК ЦенаСоСкидкой,
				|	ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
				|	Товары.Отменено                          КАК Отменено,
				|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
				|	0                                        КАК СрокПоставки,
				|	0                                        КАК КодСтроки,
				|	Товары.Количество                        КАК Количество,
				|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
				|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
				|	ЛОЖЬ                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки
				|ПОМЕСТИТЬ
				|	ВременнаяТаблицаТоварыПредварительная
				|ИЗ
				|	&ИмяТаблицы КАК Товары
				|ГДЕ &УсловиеОтбора
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
				|;
				|";
			
			ИмяТабличнойЧасти = "ВозвращаемыеТовары";
			
			ИменаКолонок = "НомерСтроки,
				|НоменклатураНабора,
				|ХарактеристикаНабора,
				|Номенклатура,
				|Характеристика,
				|Цена,
				|Сумма,
				|ВидЦены,
				|Упаковка,
				|СтавкаНДС,
				|СуммаНДС,
				|Количество,
				|КоличествоУпаковок,
				|Отменено";
		КонецЕсли;
			
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора   КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки          КАК НомерСтроки,
			|	Товары.Номенклатура         КАК Номенклатура,
			|	Товары.Характеристика       КАК Характеристика,
			|	Товары.Цена                 КАК Цена,
			|	Товары.Сумма                КАК Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	Товары.Упаковка             КАК Упаковка,
			|	Товары.СтавкаНДС            КАК СтавкаНДС,
			|	Товары.СуммаНДС             КАК СуммаНДС,
			|	0                                        КАК КлючСвязи,
			|	0                                        КАК ПроцентАвтоматическойСкидки,
			|	0                                        КАК СуммаАвтоматическойСкидки,
			|	0                                        КАК ПроцентРучнойСкидки,
			|	0                                        КАК СуммаРучнойСкидки,
			|	Товары.Цена                              КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
			|	ЛОЖЬ                                     КАК Отменено,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	0                         КАК СрокПоставки,
			|	0                         КАК КодСтроки,
			|	Товары.Количество         КАК Количество,
			|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                      КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Сумма,
			|СуммаНДС,
			|Упаковка,
			|Количество,
			|КоличествоУпаковок,
			|СтавкаНДС";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЧекККМ" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.СуммаНДС                         КАК СуммаНДС,
			|	0                                       КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Сумма / Товары.КоличествоУпаковок КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                        КАК ДатаОтгрузки,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	Товары.Количество                       КАК Количество,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	ЛОЖЬ                                    КАК Отменено,
			|	0                                       КАК СрокПоставки,
			|	0                                       КАК КодСтроки,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Упаковка,
			|Количество,
			|КоличествоУпаковок,
			|Цена,
			|Сумма,
			|СуммаНДС,
			|СтавкаНДС,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки";

	ИначеЕсли ИмяТаблицы = "Документ.ЧекККМВозврат" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.СуммаНДС                         КАК СуммаНДС,
			|	0                                       КАК КлючСвязи,
			|	0                                       КАК ПроцентАвтоматическойСкидки,
			|	0                                       КАК СуммаАвтоматическойСкидки,
			|	0                                       КАК ПроцентРучнойСкидки,
			|	0                                       КАК СуммаРучнойСкидки,
			|	Товары.Цена                             КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                        КАК ДатаОтгрузки,
			|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
			|	Товары.Количество                       КАК Количество,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	ЛОЖЬ                                    КАК Отменено,
			|	0                                       КАК СрокПоставки,
			|	0                                       КАК КодСтроки,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Упаковка,
			|Количество,
			|КоличествоУпаковок,
			|Цена,
			|Сумма,
			|СуммаНДС,
			|СтавкаНДС";
		
	ИначеЕсли ИмяТаблицы = "Документ.КорректировкаРеализации" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НоменклатураНабора               КАК НоменклатураНабора,
			|	Товары.ХарактеристикаНабора             КАК ХарактеристикаНабора,
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Подразделение                    КАК Подразделение,
			|	Товары.КоличествоУпаковок               КАК КоличествоУпаковок,
			|	Товары.Количество                       КАК Количество,
			|	Товары.Цена                             КАК Цена,
			|	Товары.Сумма                            КАК Сумма,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.СуммаНДС                         КАК СуммаНДС,
			|	0                                       КАК КодСтроки,
			|	Товары.Склад                            КАК Склад,
			|	0                                       КАК КлючСвязи,
			|	0                                       КАК ПроцентАвтоматическойСкидки,
			|	0                                       КАК СуммаАвтоматическойСкидки,
			|	0                                       КАК ПроцентРучнойСкидки,
			|	0                                       КАК СуммаРучнойСкидки,
			|	Товары.Цена                             КАК ЦенаСоСкидкой,
			|	ДатаВремя(1,1,1)                        КАК ДатаОтгрузки,
			|	ЛОЖЬ                                    КАК Отменено,
			|	0                                       КАК СрокПоставки,
			|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТоварыПредварительная
			|ИЗ
			|	&ИмяТаблицы КАК Товары
			|ГДЕ &УсловиеОтбора
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|НоменклатураНабора,
			|ХарактеристикаНабора,
			|Номенклатура,
			|Характеристика,
			|Подразделение,
			|Количество,
			|КоличествоУпаковок,
			|Цена,
			|Сумма,
			|СуммаНДС,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|Склад";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ &ПодготовкаВременныхТаблицНаборы", СформироватьТекстЗапросаВременныеТаблицыНаборы());
	
	Если ИспользоватьПроверкиПоЦенам Тогда
		
		ТекстЗапроса =
			СтрЗаменить(
				ТекстЗапроса,
				"&ТекстПолейЦенообразования,",
		"ЕСТЬNULL(ВЫБОР
		|		КОГДА
		|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
		|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК ХарактеристикаЦО,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка) КАК СерияЦО,
		|	ВЫБОР
		|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|		ИНАЧЕ Таблица.Упаковка
		|	КОНЕЦ КАК УпаковкаЦО,"
		);

	Иначе
		
		ТекстЗапроса =
			СтрЗаменить(
				ТекстЗапроса,
				"&ТекстПолейЦенообразования,",
		"");
		
	КонецЕсли;
	
	Если ИмяТаблицы = "Документ.ЗаказКлиента"
		И (ТипЗнч(ДокументПродажи) = Тип("ДокументСсылка.ЗаказКлиента")
		Или ТипЗнч(ДокументПродажи) = Тип("ДокументОбъект.ЗаказКлиента")) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураПартнера", "Таблица.НоменклатураПартнера");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НоменклатураПартнера", "ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка)");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбора", ?(ПоСсылке, "Товары.Ссылка = &ДокументПродажи", "ИСТИНА"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", ?(ПоСсылке, ИмяТаблицы + "." + ИмяТабличнойЧасти, "&Товары"));
	
	Если Не ПустаяСтрока(ИмяДопТабличнойЧасти) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДопТаблицы", ?(ПоСсылке, ИмяТаблицы + "." + ИмяДопТабличнойЧасти, "&ДопТовары"));
		
		ПараметрыЗапроса.Вставить("ИмяДопТабличнойЧасти", ИмяДопТабличнойЧасти);
		ПараметрыЗапроса.Вставить("ПредставлениеДопТабличнойЧасти", ПредставлениеДопТабличнойЧасти);
		
	КонецЕсли;
	ПараметрыЗапроса.Вставить("ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	ПараметрыЗапроса.Вставить("ПредставлениеТабличнойЧасти", ПредставлениеТабличнойЧасти);
	
	Если ПоСсылке Тогда
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
	Иначе
		ПараметрыЗапроса.Вставить("Товары", ДокументПродажи[ИмяТабличнойЧасти].Выгрузить(, ИменаКолонок));
		Если Не ПустаяСтрока(ИмяДопТабличнойЧасти) Тогда
			ПараметрыЗапроса.Вставить("ДопТовары", ДокументПродажи[ИмяДопТабличнойЧасти].Выгрузить(, ИменаКолонокДопТабличнойЧасти));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос к тч ЦеновыеГруппы документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка -  текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка - документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса,
	                                                                      ПараметрыЗапроса,
	                                                                      ДокументПродажи,
	                                                                      ПоСсылке = Ложь,
	                                                                      ИмяТаблицы = "")
	
	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЦеновыеГруппы.НомерСтроки          КАК НомерСтроки,
			|	ЦеновыеГруппы.ЦеноваяГруппа        КАК ЦеноваяГруппа,
			|	ЦеновыеГруппы.ВидЦен               КАК ВидЦен,
			|	ЦеновыеГруппы.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидки,
			|	ЦеновыеГруппы.ПроцентРучнойНаценки КАК ПроцентРучнойНаценки,
			|	ЦеновыеГруппы.СрокПоставки         КАК СрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЦеновыеГруппы
			|ИЗ
			|	&ИмяТаблицыЦеновыеГруппы КАК ЦеновыеГруппы
			|ГДЕ
			|	ЦеновыеГруппы.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	ЦеноваяГруппа
			|;
			|";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыЦеновыеГруппы", "" + ИмяТаблицы + ".ЦеновыеГруппы");
		
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
			
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЦеновыеГруппы.НомерСтроки          КАК НомерСтроки,
			|	ЦеновыеГруппы.ЦеноваяГруппа        КАК ЦеноваяГруппа,
			|	ЦеновыеГруппы.ВидЦен               КАК ВидЦен,
			|	ЦеновыеГруппы.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидки,
			|	ЦеновыеГруппы.ПроцентРучнойНаценки КАК ПроцентРучнойНаценки,
			|	ЦеновыеГруппы.СрокПоставки         КАК СрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЦеновыеГруппы
			|ИЗ
			|	&ЦеновыеГруппы КАК ЦеновыеГруппы
			|ИНДЕКСИРОВАТЬ ПО
			|	ЦеноваяГруппа
			|;
			|";
			
		ПараметрыЗапроса.Вставить("ЦеновыеГруппы", ДокументПродажи.ЦеновыеГруппы.Выгрузить(,"НомерСтроки,ЦеноваяГруппа,ВидЦен, ПроцентРучнойСкидки, ПроцентРучнойНаценки, СрокПоставки"));
			
	КонецЕсли;

КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка - документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ЕстьМетаданныеЗалогаЗаТару = ИмяТаблицы = "Справочник.ГрафикиОплаты"
			Или ИмяТаблицы = "Справочник.СоглашенияСКлиентами"
			Или ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю"
			Или ИмяТаблицы = "Документ.ЗаказКлиента"
			Или ИмяТаблицы = "Документ.РеализацияТоваровУслуг"
			Или ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента";
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ВариантОтсчета  КАК ВариантОтсчета,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.СуммаПлатежа    КАК СуммаПлатежа,
			|	&ЕстьМетаданныеЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|	&ИмяТаблицыЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыЭтапыГрафикаОплаты", "" + ИмяТаблицы + ".ЭтапыГрафикаОплаты");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕстьМетаданныеЗалогаЗаТару", ?(ЕстьМетаданныеЗалогаЗаТару,
				"ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
				|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару",
				"0 КАК ПроцентЗалогаЗаТару,
				|0 КАК СуммаЗалогаЗаТару"));
			
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки         КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты       КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ВариантОтсчета      КАК ВариантОтсчета,
			|	ЭтапыГрафикаОплаты.Сдвиг               КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа         КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа      КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа      КАК СуммаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа      КАК СуммаЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
		
		ТаблицаЭтапов = ДокументПродажи.ЭтапыГрафикаОплаты.Выгрузить();
		Если ТаблицаЭтапов.Колонки.Найти("ПроцентЗалогаЗаТару") = Неопределено Тогда
			ТаблицаЭтапов.Колонки.Добавить("ПроцентЗалогаЗаТару", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
		КонецЕсли;
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ТаблицаЭтапов);
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты соглашения и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка - документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки         КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты       КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг               КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа      КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения
			|ИЗ
			|	&ИмяТаблицыЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицыЭтапыГрафикаОплаты", "" + ИмяТаблицы + ".ЭтапыГрафикаОплаты");
			
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
		
		Иначе
			
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки         КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты       КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг               КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа      КАК ПроцентПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару КАК ПроцентЗалогаЗаТару
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
	
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты.Выгрузить(, "НомерСтроки,Сдвиг,ВариантОплаты,ПроцентПлатежа,ПроцентЗалогаЗаТару"));
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты соглашения и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка - документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос.
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашенияОснования
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = ВЫРАЗИТЬ(&ДокументПродажи КАК Справочник.СоглашенияСКлиентами).Соглашение
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);

	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашенияОснования
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты  КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &Соглашение
			|;
			|";
	
			ПараметрыЗапроса.Вставить("Соглашение", ДокументПродажи.Соглашение);

	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к курсам валют на дату документа и помещает во временную таблицу.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи)

	ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ОтносительныеКурсыВалютСрезПоследних.Валюта КАК Валюта,
			|	ОтносительныеКурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
			|	ОтносительныеКурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
			|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалют
			|ИЗ
			|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК
			|		ОтносительныеКурсыВалютСрезПоследних
			|
			|ИНДЕКСИРОВАТЬ ПО
			|
			|	Валюта
			|;
			|";
			
	ПараметрыЗапроса.Вставить("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументПродажи.Организация));

КонецПроцедуры

// Формирует запрос по элементам справочника "Склады" и помещает во временную таблицу
// К корректным складам относятся:
// 		- Склад, равный складу соглашения
// 		- Склады, входящие в иерархию склада соглашения.
//
Процедура СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ СкладыКорректныеПоСоглашению
	|ИЗ
	|	Справочник.Склады КАК Склады
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокумента
	|
	|	ПО
	|		ИСТИНА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|	ПО
	|		ВременнаяТаблицаДокумента.Соглашение = СоглашенияСКлиентами.Ссылка
	|		И СоглашенияСКлиентами.Склад ЕСТЬ НЕ NULL
	|		И СоглашенияСКлиентами.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|
	|ГДЕ
	|	Склады.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаДокумента.Соглашение.Склад
	|			ИЗ
	|				ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокумента)
	|;
	|";
	
КонецПроцедуры

// Помещает во временную таблицу заданные суммы взаиморасчетов по реализации.
// В случае необходимости вычисляет сумму взаиморасчетов по таре.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросВременнаяТаблицаСуммыВзаиморасчетов(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	МАКСИМУМ(&СуммаВзаиморасчетовРеализации) - 
	|		ВЫБОР 
	|			КОГДА МАКСИМУМ(&НеЗаданаСуммаЗалога) = ИСТИНА
	|				ТОГДА ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)
	|			ИНАЧЕ МАКСИМУМ(&СуммаЗалогаПоРеализации)
	|		КОНЕЦ КАК СуммаКОплате,
	|	ВЫБОР 
	|		КОГДА МАКСИМУМ(&НеЗаданаСуммаЗалога) = ИСТИНА
	|			ТОГДА ЕСТЬNULL(СУММА(Тара.СуммаВзаиморасчетов), 0)
	|		ИНАЧЕ МАКСИМУМ(&СуммаЗалогаПоРеализации)
	|	КОНЕЦ КАК СуммаЗалогаЗаТару
	|ПОМЕСТИТЬ ВременнаяТаблицаСуммыВзаиморасчетов
	|ИЗ
	|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТоварыПредварительная КАК Тара
	|	ПО Тара.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		И &ТребуетсяЗалогЗаТару
	|;
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиКорректностиЗаполненияДокументов

// Формирует запрос для проверки наличия дублей в тч Товары документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеДублейТоваровДокументаПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки)    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура             КАК Номенклатура,
		|	ДокументТовары.Характеристика           КАК Характеристика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки наличия дублей в тч ЦеновыеГруппы документа продажи.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеДублейЦеновыхГруппДокументаПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументЦеновыеГруппы.НомерСтроки) КАК НомерСтроки,
		|	ДокументЦеновыеГруппы.ЦеноваяГруппа         КАК ЦеноваяГруппа
		|ИЗ
		|	ВременнаяТаблицаЦеновыеГруппы КАК ДокументЦеновыеГруппы
		|СГРУППИРОВАТЬ ПО
		|	ДокументЦеновыеГруппы.ЦеноваяГруппа
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";

КонецПроцедуры

// Формирует текст запроса для проверки заполненности склада
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОшибкиЗаполненияСклад
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаДокументПродажи.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности склада
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладаВЗаказеКлиента(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОшибкиЗаполненияСклад
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|		ПО ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		И НЕ ВременнаяТаблицаТовары.Отменено
		|		И НЕ ВременнаяТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|ГДЕ
		|	ВременнаяТаблицаДокументПродажи.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И(НЕ ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры ЕСТЬ NULL
		|		ИЛИ ВременнаяТаблицаДокументПродажи.Статус В(
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КВозврату),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОбеспечению),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.КОтгрузке),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)))
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности реквизита "Склад" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа товар;
// 		- в шапке документа указан заполнен реквизит "Склад".
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса, ИмяТаблицы)
	
	Если ИмяТаблицы = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	&ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	&ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|		ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	&ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	&ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументПродажи.Склад.ЭтоГруппа
		|	И ВременнаяТаблицаДокументПродажи.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И НЕ ВременнаяТаблицаТовары.Отменено
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И НЕ ВременнаяТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
		|;
		|";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	&ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
		|	&ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументПродажи.Склад.ЭтоГруппа
		|	И ВременнаяТаблицаДокументПродажи.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса для проверки заполненности реквизита "Подразделение" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа работа.
//
Процедура СформироватьЗапросКорректностьЗаполненияПодразделенийВТабличнойЧастиТовары(ТекстЗапроса, ИмяТаблицы)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	&ИмяТабличнойЧасти КАК ИмяТабличнойЧасти,
	|	&ПредставлениеТабличнойЧасти КАК ПредставлениеТабличнойЧасти
	|ИЗ
	|	ВременнаяТаблицаТоварыПредварительная КАК ВременнаяТаблицаТовары
	|ГДЕ
	|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|	И ВременнаяТаблицаТовары.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|;
	|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности количества этапов оплаты в соглашении
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашения) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашенияОснования)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашения) КАК КоличествоЭтаповСоглашения,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашенияОснования) КАК КоличествоЭтаповСоглашенияОснования
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыСоглашения.НомерСтроки) КАК КоличествоЭтаповСоглашения,
			|		NULL КАК КоличествоЭтаповСоглашенияОснования
			|	ИЗ
			|		ВременнаяТаблицаЭтапыОплатыСоглашения КАК ЭтапыСоглашения
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповСоглашения,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыСоглашенияОснования.НомерСтроки) КАК КоличествоЭтаповСоглашенияОснования
			|	ИЗ
			|		ВременнаяТаблицаЭтапыОплатыСоглашенияОснования КАК ЭтапыСоглашенияОснования
			|	) КАК ВложенныйЗапрос
			|;
			|";
			
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов оплаты в соглашении
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.НомерСтроки ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтапШаблонаОтсутствует,
			|	ЭтапыДокумента.НомерСтроки КАК НомерСтроки,
			|	ЭтапыДокумента.ВариантОплаты КАК ВариантОплаты,
			|	ЭтапыДокумента.Сдвиг КАК Сдвиг,
			|	ЭтапыДокумента.ПроцентПлатежа КАК ПроцентПлатежа,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыДокумента.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ПроцентЗалогаЗаТару,
			|	
			|	ЭтапыШаблона.НомерСтроки КАК НомерСтрокиШаблона,
			|	ЭтапыШаблона.ВариантОплаты КАК ВариантОплатыШаблона,
			|	ЭтапыШаблона.ПроцентПлатежа КАК ПроцентПлатежаШаблона,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыШаблона.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК ПроцентЗалогаЗаТаруШаблона,
			|	
			|	ЭтапыШаблона.Сдвиг КАК СдвигШаблона,
			|	ВЫБОР
			|		КОГДА ЭтапыДокумента.ВариантОплаты <> ЭтапыШаблона.ВариантОплаты
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты
			|ИЗ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения КАК ЭтапыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыШаблона
			|		ПО ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
			|			И ЭтапыШаблона.Ссылка В (ВЫБРАТЬ ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение ИЗ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|";

КонецПроцедуры

// Формирует проверки для контроля завершения отгрузки по заказу
// и для контроля завершения расчетов по заказу.
//
// Параметры:
// КонтролируемыйЗаказ - ДокументСсылка.ЗаказКлиента, ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента - контролируемый документ.
// Отказ - Булево - параметр Отказ.
//
Процедура ВыполнитьКонтрольЗаказаПослеПроведения(КонтролируемыйЗаказ, Отказ) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказыКлиентовДанные.Распоряжение КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(,,,
		|			Распоряжение = &Ссылка) КАК ЗаказыКлиентовДанные
		|ГДЕ
		|	&КонтролироватьОтгрузку
		|	И (ЗаказыКлиентовДанные.ЗаказаноОборот <> 0 
		|		ИЛИ ЗаказыКлиентовДанные.КОформлениюОборот <> 0)
		|	И (&УсловиеЗаказКлиентаСтатус)
		|	И (&УсловиеЗаказКлиентаХозяйственнаяОперация)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, 
		|			ДокументОтгрузки = &Ссылка) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	&КонтролироватьОтгрузку
		|	И (ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток) <> 0
		|	И &ДокументОтгрузкиУсловиеОтбора
		|;
		|
		|ВЫБРАТЬ
		|	ЗаказыКлиентовДанные.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ЗаказыКлиентовДанные.Распоряжение КАК ЗаказКлиента
		|ПОМЕСТИТЬ ВременнаяТаблицаОбъектыРасчетов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|		ОбъектыРасчетов.Объект КАК Распоряжение
		|	ИЗ
		|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|	ГДЕ
		|		ОбъектыРасчетов.Объект = &Ссылка
		|		И НЕ ОбъектыРасчетов.ПометкаУдаления) КАК ЗаказыКлиентовДанные
		|ГДЕ
		|	(&УсловиеЗаказКлиентаСтатус)
		|	И (&УсловиеЗаказКлиентаХозяйственнаяОперация)
		|;
		|
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|			ОбъектРасчетов В
		|				(ВЫБРАТЬ
		|					ВременнаяТаблицаОбъектыРасчетов.ОбъектРасчетов
		|				ИЗ	ВременнаяТаблицаОбъектыРасчетов)
		|	) КАК РасчетыСКлиентамиОстатки
		|		
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И РасчетыСКлиентамиОстатки.КОплатеОстаток > 0
		|");
		
	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
	КонтролироватьРасчеты  = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
	
	Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		УсловиеЗаказКлиентаСтатус = "
		|   ВЫРАЗИТЬ(ЗаказыКлиентовДанные.Распоряжение КАК Документ.ЗаказКлиента).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)"; 

		УсловиеЗаказКлиентаХозяйственнаяОперация = "
		|   ВЫРАЗИТЬ(ЗаказыКлиентовДанные.Распоряжение КАК Документ.ЗаказКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		| И ВЫРАЗИТЬ(ЗаказыКлиентовДанные.Распоряжение КАК Документ.ЗаказКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)";
		
		УсловиеДокументОтгрузки = "
		|   ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		| И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		| И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)";

	ИначеЕсли ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда

		УсловиеЗаказКлиентаСтатус = "
		|   ВЫРАЗИТЬ(ЗаказыКлиентовДанные.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)";

		УсловиеЗаказКлиентаХозяйственнаяОперация = "
		|   ВЫРАЗИТЬ(ЗаказыКлиентовДанные.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)";

		УсловиеДокументОтгрузки = "
		|   ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
		| И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)";
	
	Иначе
		 УсловиеЗаказКлиентаСтатус                = "ЛОЖЬ";
		 УсловиеЗаказКлиентаХозяйственнаяОперация = "ЛОЖЬ";
		 УсловиеДокументОтгрузки                  = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст           = СтрЗаменить(Запрос.Текст, "&УсловиеЗаказКлиентаСтатус", УсловиеЗаказКлиентаСтатус);
	Запрос.Текст           = СтрЗаменить(Запрос.Текст, "&УсловиеЗаказКлиентаХозяйственнаяОперация", УсловиеЗаказКлиентаХозяйственнаяОперация);
	Запрос.Текст           = СтрЗаменить(Запрос.Текст, "&ДокументОтгрузкиУсловиеОтбора", УсловиеДокументОтгрузки);
	
	Запрос.УстановитьПараметр("Ссылка", КонтролируемыйЗаказ);
	Запрос.УстановитьПараметр("КонтролироватьОтгрузку", КонтролироватьОтгрузку);
	Запрос.УстановитьПараметр("КонтролироватьРасчеты", КонтролироватьРасчеты);
	Результат = Запрос.ВыполнитьПакет(); 
	
	ВыборкаОтгрузка = Результат[0].Выбрать();
	ВыборкаРасчеты  = Результат[2].Выбрать();
	
	Если ВыборкаОтгрузка.Следующий() Тогда 
		Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ТекстОшибки = НСтр("ru = 'Документ ""%Заказ%"" отгружен не полностью.
			|Закрытие заказа возможно только с полностью отгруженными/отмененными строками'");
		ИначеЕсли ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ТекстОшибки = НСтр("ru = 'Заменяющие товары по документу ""%Заказ%"" отгружены не полностью.
			|Заявка может быть переведена в статус ""Выполнена"" только с полностью отгруженными/отмененными строками'");
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заказ%", КонтролируемыйЗаказ);
		
		СообщитьПользователюОбОшибке(
				ТекстОшибки,
				КонтролируемыйЗаказ,
				,
				Отказ);
	КонецЕсли;
	
	Если ВыборкаРасчеты.Следующий() Тогда 
		Если ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ТекстОшибки = НСтр("ru = 'Расчеты по документу ""%Заказ%"" не завершены.
			|Для закрытия заказа требуется оплата %СуммаКОплате% %Валюта%.
			|Закрытие заказа возможно только с полностью оплаченными/отмененными строками'");
		ИначеЕсли ТипЗнч(КонтролируемыйЗаказ) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ТекстОшибки = НСтр("ru = 'Расчеты по документу ""%Заказ%"" не завершены. Требуется оплата %СуммаКОплате% %Валюта%.
			|Заявка может быть переведена в статус ""Выполнена"" только с полностью оплаченными/отмененными строками'");
		КонецЕсли;
		
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Заказ%",        КонтролируемыйЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаКОплате%", Строка(ВыборкаРасчеты.КОплатеОстаток));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",       Строка(ВыборкаРасчеты.Валюта));
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			КонтролируемыйЗаказ,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса для контроля завершения отгрузки по заказу
// и для контроля завершения расчетов по заказу.
//
//	Возвращаемое значение:
//		Строка - сформированный текст запроса
//
Функция ТекстЗапросаКонтрольЗаказаПослеПроведения() Экспорт
	
	Возврат "
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК Объект
		|ПОМЕСТИТЬ ОбъектыРасчетовКонтрольЗаказаПослеПроведения
		|ИЗ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&МассивДокументов)
		|	И НЕ ОбъектыРасчетов.ПометкаУдаления
		|;
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КонтрольЗакрытия.ЗаказКлиента КАК ЗаказКлиента
		|ПОМЕСТИТЬ
		|	ВтОстаткиПоЗаказам
		|ИЗ (ВЫБРАТЬ
		|	РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(,,, 
		|			Распоряжение В (&МассивДокументов)
		|			И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|			И (Распоряжение.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|				И Распоряжение.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|				И Распоряжение.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
		|	) КАК РаспоряженияНаОтгрузкуОбороты
		|ГДЕ
		|	&КонтролироватьОтгрузку
		|	И (РаспоряженияНаОтгрузкуОбороты.ЗаказаноОборот > 0 
		|		ИЛИ РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот > 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(, 
		|			ДокументОтгрузки В (&МассивДокументов)
		|			И ВЫБОР
		|				КОГДА ТИПЗНАЧЕНИЯ(ДокументОтгрузки) = ТИП(Документ.ЗаказКлиента)
		|					ТОГДА ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказКлиента).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|							И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|							И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаказКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТИПЗНАЧЕНИЯ(ДокументОтгрузки) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|							ТОГДА ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
		|								И ВЫРАЗИТЬ(ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|						ИНАЧЕ ИСТИНА
		|				КОНЕЦ
		|			КОНЕЦ
		|	) КАК ТоварыКОтгрузкеОстатки
		|ГДЕ
		|	&КонтролироватьОтгрузку
		|	И (ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток) > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Объект КАК ЗаказКлиента
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, 
		|			ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ОбъектыРасчетовКонтрольЗаказаПослеПроведения)
		|			И (&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Закрыт)
		|				ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена))
		|	) КАК РасчетыСКлиентамиОстатки
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетовКонтрольЗаказаПослеПроведения КАК ОбъектыРасчетов
		|		ПО ОбъектыРасчетов.ОбъектРасчетов = РасчетыСКлиентамиОстатки.ОбъектРасчетов
		|ГДЕ
		|	&КонтролироватьРасчеты
		|	И РасчетыСКлиентамиОстатки.КОплатеОстаток > 0
		|	И (ОбъектыРасчетов.Объект.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|		И ОбъектыРасчетов.Объект.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|		И ОбъектыРасчетов.Объект.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
		|		И ОбъектыРасчетов.Объект.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)) КАК КонтрольЗакрытия
		|;"
		
КонецФункции


#КонецОбласти

#Область ПроцедурыФормированияЗапросовПроверкиСоответствияДокументовУсловиямПродаж

// Формирует запрос для проверки шапки документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ИмяТаблицы   - Строка - имя таблицы документа, к которой необходимо сформировать проверочный запрос.
//
Процедура СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы)

	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Партнер ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.Типовое = ЛОЖЬ И
	|			ДокументПродажи.Партнер <> СоглашениеСКлиентом.Партнер
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПартнер,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Статус ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.НеСогласовано)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатусСоглашения,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Организация ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И
	|			ДокументПродажи.Организация <> СоглашениеСКлиентом.Организация
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОрганизация,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ЦенаВключаетНДС ЕСТЬ НЕ NULL И
	|			ДокументПродажи.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) И
	|			ДокументПродажи.ЦенаВключаетНДС <> СоглашениеСКлиентом.ЦенаВключаетНДС
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦенаВключаетНДС,
	|	ЕСТЬNULL(СоглашениеСКлиентом.Склад.ЭтоГруппа, ЛОЖЬ) КАК СкладСоглашениеЕстьГруппа,
	|	&ТекстЗамены1,
	|	&ТекстЗамены2,
	|	&ТекстЗамены3,
	|	ЛОЖЬ КАК ЕстьОшибкиДатаПлатежа,
	|	&ТекстЗамены4,
	|
	|	// Проверки только для торговых соглашений
	|
	|	&ТекстЗамены5,
	|
	|	// Проверки только для соглашений
	|
	|	&ТекстЗамены6,
	|	&ТекстЗамены7,
	|	&ТекстЗамены8,
	|	&ТекстЗамены9,
	|	ДокументПродажи.Соглашение,
	|	СоглашениеСКлиентом.Партнер                                 КАК ПартнерСоглашение,
	|	СоглашениеСКлиентом.МинимальнаяСуммаЗаказа                  КАК МинимальнаяСуммаЗаказа,
	|	СоглашениеСКлиентом.Контрагент                              КАК КонтрагентСоглашение,
	|	СоглашениеСКлиентом.Организация                             КАК ОрганизацияСоглашение,
	|	ДокументПродажи.Валюта                                      КАК Валюта,
	|	ДокументПродажи.Дата                                        КАК Дата,
	|	ДокументПродажи.СуммаДокумента                              КАК СуммаДокумента,
	|	СоглашениеСКлиентом.Валюта                                  КАК ВалютаСоглашение,
	|	&ТекстЗамены10,
	|	&ТекстЗамены11,
	|	СоглашениеСКлиентом.Склад                                   КАК СкладСоглашение,
	|	СоглашениеСКлиентом.ВидЦен                                  КАК ВидЦенСоглашение,
	|	СоглашениеСКлиентом.ЦенаВключаетНДС                         КАК ЦенаВключаетНДССоглашение,
	|	СоглашениеСКлиентом.ХозяйственнаяОперация                   КАК ХозяйственнаяОперацияСоглашение,
	|	&ТекстЗамены12,
	|	СоглашениеСКлиентом.Статус                                  КАК СтатусСоглашение,
	|	СоглашениеСКлиентом.ДатаНачалаДействия                      КАК ДатаНачалаДействияСоглашение,
	|	СоглашениеСКлиентом.ДатаОкончанияДействия                   КАК ДатаОкончанияДействияСоглашение,
	|	СоглашениеСКлиентом.ГрафикОплаты                            КАК ГрафикОплатыСоглашение,
	|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары,
	|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
	|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов        КАК ИспользуютсяДоговорыКонтрагентов,
	|	&ЭтоСоглашение                                              КАК ЭтоСоглашение,
	|	&ВозвратМногооборотнойТары                                  КАК ВозвратМногооборотнойТары
	|ИЗ
	|	ВременнаяТаблицаДокументПродажи           КАК ДокументПродажи
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Справочник.СоглашенияСКлиентами              КАК СоглашениеСКлиентом
	|ПО
	|	ДокументПродажи.Соглашение = СоглашениеСКлиентом.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	СкладыКорректныеПоСоглашению КАК СкладыКорректныеПоСоглашению
	|ПО 
	|	ДокументПродажи.Склад = СкладыКорректныеПоСоглашению.Склад
	|;
	|";
	
	//замена переменных запроса
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены1,", ?(ИмяТаблицы = "Документ.АктВыполненныхРабот","
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСклад,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару,
	|","
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Склад ЕСТЬ НЕ NULL
	|			И СоглашениеСКлиентом.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			И СкладыКорректныеПоСоглашению.Склад ЕСТЬ NULL
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСклад,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару <> &ВозвратМногооборотнойТары
	|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ТребуетсяЗалогЗаТару <> &ТребуетсяЗалогЗаТару
	|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
	|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару,
	|"));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены2,", ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг"
			ИЛИ ИмяТаблицы = "Документ.ПередачаТоваровХранителю"
			ИЛИ ИмяТаблицы = "Документ.АктВыполненныхРабот","
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияГрафикОплаты,
	|","
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ГрафикОплаты ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.ГрафикОплаты <> ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка) И
	|			ДокументПродажи.ГрафикОплаты <> СоглашениеСКлиентом.ГрафикОплаты И
	|			(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|			 ИЛИ ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
	|			 ИЛИ ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияГрафикОплаты,
	|"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены3,", ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг","
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Валюта ЕСТЬ НЕ NULL И
	|			ДокументПродажи.Договор ЕСТЬ НЕ NULL И
	|			ДокументПродажи.ВалютаВзаиморасчетов <> ВЫБОР 
	|														КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов 
	|															ТОГДА ДокументПродажи.Договор.ВалютаВзаиморасчетов
	|														ИНАЧЕ СоглашениеСКлиентом.ВалютаВзаиморасчетов
	|													КОНЕЦ
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалюта,
	|","
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Валюта ЕСТЬ НЕ NULL И
	|			ДокументПродажи.Валюта <> СоглашениеСКлиентом.Валюта
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалюта,
	|"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены4,", ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг"
			ИЛИ ИмяТаблицы = "Документ.ПередачаТоваровХранителю","
	|	ИСТИНА КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
	|","
	|	ЛОЖЬ КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
	|	ВЫБОР
	|		КОГДА ДокументПродажи.СрокВозвратаМногооборотнойТары <> СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
	|"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены5,", ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","
	|
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ВидЦен ЕСТЬ НЕ NULL И
	|			ДокументПродажи.ВидЦен <> СоглашениеСКлиентом.ВидЦен
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦен,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.СценарийПланирования ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.СценарийПланирования <> ЗНАЧЕНИЕ(Справочник.СценарииТоварногоПланирования.ПустаяСсылка) И
	|			ДокументПродажи.СценарийПланирования <> СоглашениеСКлиентом.СценарийПланирования
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСценарияПланирования,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ВидПлана ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.ВидПлана <> ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка) И
	|			ДокументПродажи.ВидПлана <> СоглашениеСКлиентом.ВидПлана
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидПлана,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.СегментНоменклатуры ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.СегментНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) И
	|			ДокументПродажи.СегментНоменклатуры <> СоглашениеСКлиентом.СегментНоменклатуры
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСегментНоменклатуры,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Регулярное ЕСТЬ НЕ NULL И
	|			ДокументПродажи.Регулярное <> СоглашениеСКлиентом.Регулярное
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРегулярное,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Период ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.Регулярное = ИСТИНА И 
	|			ДокументПродажи.Период <> СоглашениеСКлиентом.Период
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПериод,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.КоличествоПериодов ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.Регулярное = ИСТИНА И
	|			ДокументПродажи.КоличествоПериодов < СоглашениеСКлиентом.КоличествоПериодов
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКоличествоПериодов,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей ЕСТЬ НЕ NULL И
	|			ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей <> СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ДоступноВнешнимПользователям ЕСТЬ НЕ NULL И
	|			ДокументПродажи.ДоступноВнешнимПользователям <> СоглашениеСКлиентом.ДоступноВнешнимПользователям
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДоступноВнешнимПользователям,
	|	ВЫБОР
	|		КОГДА Не ДокументПродажи.Типовое И
	|			СоглашениеСКлиентом.ДатаНачалаДействия ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) И
	|			СоглашениеСКлиентом.ДатаНачалаДействия > ДокументПродажи.ДатаНачалаДействия
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДатаНачалаДействия,
	|	ВЫБОР
	|		КОГДА Не ДокументПродажи.Типовое И
	|			СоглашениеСКлиентом.ДатаОкончанияДействия ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1,1,1) И
	|			(СоглашениеСКлиентом.ДатаОкончанияДействия < ДокументПродажи.ДатаОкончанияДействия
	|			ИЛИ ДокументПродажи.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1))
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДатаОкончанияДействия,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ПроцентРучнойСкидки ЕСТЬ НЕ NULL И
	|			ДокументПродажи.ПроцентРучнойСкидки > СоглашениеСКлиентом.ПроцентРучнойСкидки
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПроцентРучнойСкидки,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ПроцентРучнойНаценки ЕСТЬ НЕ NULL И
	|			ДокументПродажи.ПроцентРучнойНаценки > СоглашениеСКлиентом.ПроцентРучнойНаценки
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПроцентРучнойНаценки,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ОграничиватьРучныеСкидки ЕСТЬ НЕ NULL И
	|			ДокументПродажи.ОграничиватьРучныеСкидки <> СоглашениеСКлиентом.ОграничиватьРучныеСкидки
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки,
	|	ВЫБОР
	|		КОГДА ДокументПродажи.Календарь <> СоглашениеСКлиентом.Календарь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКалендаря,
	|	ВЫБОР
	|		КОГДА ДокументПродажи.ФормаОплаты <> СоглашениеСКлиентом.ФормаОплаты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормыОплатыСоглашения,
	|	ВЫБОР
	|		КОГДА ДокументПродажи.ИспользуютсяДоговорыКонтрагентов <> СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов,
	|	ВЫБОР
	|		КОГДА ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю <> СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю,
	|	ВЫБОР
	|		КОГДА ДокументПродажи.КалендарьВозвратаТары <> СоглашениеСКлиентом.КалендарьВозвратаТары
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКалендарьВозвратаТары,
	|	ВЫБОР
	|		КОГДА ДокументПродажи.ВозможнаРеализацияБезПереходаПраваСобственности <> СоглашениеСКлиентом.ВозможнаРеализацияБезПереходаПраваСобственности
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиРеализацияБезПереходаПраваСобственности,
	|	СоглашениеСКлиентом.СегментНоменклатуры                       КАК СегментНоменклатурыСоглашение,
	|	СоглашениеСКлиентом.КалендарьВозвратаТары                     КАК КалендарьВозвратаТарыСоглашение,
	|	ДокументПродажи.КалендарьВозвратаТары                         КАК КалендарьВозвратаТары,
	|	СоглашениеСКлиентом.Регулярное                                КАК РегулярноеСоглашение ,
	|	СоглашениеСКлиентом.Период                                    КАК ПериодСоглашение,
	|	СоглашениеСКлиентом.КоличествоПериодов                        КАК КоличествоПериодовСоглашение,
	|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей КАК ИспользуетсяВРаботеТорговыхПредставителейСоглашение,
	|	СоглашениеСКлиентом.ПроцентРучнойСкидки                       КАК ПроцентРучнойСкидки,
	|	СоглашениеСКлиентом.ПроцентРучнойНаценки                      КАК ПроцентРучнойНаценки,
	|	СоглашениеСКлиентом.Календарь                                 КАК Календарь,
	|	СоглашениеСКлиентом.ФормаОплаты                               КАК ФормаОплатыСоглашенияСКлиентом,
	|	СоглашениеСКлиентом.ДоступноВнешнимПользователям              КАК ДоступноВнешнимПользователям,
	|	СоглашениеСКлиентом.СценарийПланирования                      КАК СценарийПланированияСоглашение,
	|	СоглашениеСКлиентом.ВидПлана                                  КАК ВидПланаСоглашение,
	|","
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВидЦен,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСценарияПланирования,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВидПлана,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСегментНоменклатуры,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияРегулярное,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПериод,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКоличествоПериодов,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДоступноВнешнимПользователям,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДатаНачалаДействия,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДатаОкончанияДействия,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПроцентРучнойСкидки,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПроцентРучнойНаценки,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКалендаря,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияФормыОплатыСоглашения,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКалендарьВозвратаТары,
	|	ЛОЖЬ КАК ЕстьОшибкиРеализацияБезПереходаПраваСобственности,
	|	NULL КАК СегментНоменклатурыСоглашение,
	|	NULL КАК КалендарьВозвратаТарыСоглашение,
	|	NULL КАК КалендарьВозвратаТары,
	|	NULL КАК РегулярноеСоглашение,
	|	NULL КАК ПериодСоглашение,
	|	NULL КАК КоличествоПериодовСоглашение,
	|	NULL КАК ИспользуетсяВРаботеТорговыхПредставителейСоглашение,
	|	NULL КАК ПроцентРучнойСкидки,
	|	NULL КАК ПроцентРучнойНаценки,
	|	NULL КАК Календарь,
	|	NULL КАК ФормаОплатыСоглашенияСКлиентом,
	|	NULL КАК СценарийПланированияСоглашение,
	|	NULL КАК ВидПланаСоглашение,
	|"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены6,", ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","
	|
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.СрокПоставки ЕСТЬ НЕ NULL И
	|			ДокументПродажи.СрокПоставки < СоглашениеСКлиентом.СрокПоставки
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
	|	СоглашениеСКлиентом.СрокПоставки КАК СрокПоставкиСоглашение,
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияФормыОплаты,
	|	NULL КАК ФормаОплатыГрафик,
	|","
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокПоставки,
	|	NULL КАК СрокПоставкиСоглашение,
	|	ВЫБОР
	|		КОГДА
	|			ДокументПродажи.ГрафикОплаты.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|			И ДокументПродажи.ГрафикОплаты.ФормаОплаты <> ДокументПродажи.ФормаОплаты
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормыОплаты,
	|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты КАК ФормаОплатыГрафик,
	|"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены7,", ?(ИмяТаблицы <> "Документ.АктВыполненныхРабот","
	|" + ?(ИмяТаблицы <> "Документ.ЗаявкаНаВозвратТоваровОтКлиента","
	|
	|	ВЫБОР
	|		КОГДА НЕ СоглашениеСКлиентом.ХозяйственнаяОперация ЕСТЬ NULL
	|			И НЕ ДокументПродажи.ХозяйственнаяОперация ЕСТЬ NULL
	|			И ДокументПродажи.ХозяйственнаяОперация <> СоглашениеСКлиентом.ХозяйственнаяОперация
	|			И НЕ ДокументПродажи.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности))
	|		ТОГДА
	|			ИСТИНА
	|		КОГДА
	|			ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|			И СоглашениеСКлиентом.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		ТОГДА
	|			ИСТИНА
	|		КОГДА
	|			ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности)
	|			И НЕ СоглашениеСКлиентом.ВозможнаРеализацияБезПереходаПраваСобственности
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Контрагент ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.Типовое = ЛОЖЬ И
	|			СоглашениеСКлиентом.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И
	|			ДокументПродажи.Контрагент <> СоглашениеСКлиентом.Контрагент
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКонтрагент,
	|","
	|	ВЫБОР
	|		КОГДА НЕ СоглашениеСКлиентом.ХозяйственнаяОперация ЕСТЬ NULL
	|			И НЕ ДокументПродажи.ХозяйственнаяОперация ЕСТЬ NULL
	|			И ((ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту))
	|				ИЛИ
	|				(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
	|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
	|				ИЛИ
	|				(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
	|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)))
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.Контрагент ЕСТЬ НЕ NULL И
	|			СоглашениеСКлиентом.Типовое = ЛОЖЬ И
	|			СоглашениеСКлиентом.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И
	|			ДокументПродажи.Контрагент <> СоглашениеСКлиентом.Контрагент
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКонтрагент,
	|") + "
	|","
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
	|	ЛОЖЬ ЕстьОшибкиЗаполненияКонтрагент,
	|"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены8,", ?(ИмяТаблицы <> "Документ.ЗаданиеТорговомуПредставителю"
			И ИмяТаблицы <> "Документ.ПередачаТоваровХранителю"
	,"
	|	ВЫБОР
	|		КОГДА ДокументПродажи.ОплатаВВалюте <> ВЫБОР
	|													КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов 
	|														ТОГДА "
	+ ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","ДокументПродажи.ОплатаВВалюте","ДокументПродажи.Договор.ОплатаВВалюте") + "
	|													ИНАЧЕ СоглашениеСКлиентом.ОплатаВВалюте
	|												КОНЕЦ
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОплатаВВалюте,
	|","
	|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияОплатаВВалюте,
	|"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены9,", ?(ИмяТаблицы <> "Документ.ЗаданиеТорговомуПредставителю"
			И ИмяТаблицы <> "Документ.ПередачаТоваровХранителю"
	,"
	|	ВЫБОР
	|		КОГДА ДокументПродажи.ПорядокРасчетов <> ВЫБОР
	|													КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов 
	|														ТОГДА "
	+ ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","ДокументПродажи.ПорядокРасчетов","ДокументПродажи.Договор.ПорядокРасчетов") + "
	|													ИНАЧЕ СоглашениеСКлиентом.ПорядокРасчетов
	|												КОНЕЦ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПорядокРасчетов,"
	+ ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","СоглашениеСКлиентом.ПорядокРасчетов","
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов 
	|			ТОГДА "
	+ ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","ДокументПродажи.ПорядокРасчетов","ДокументПродажи.Договор.ПорядокРасчетов") + "
	|		ИНАЧЕ СоглашениеСКлиентом.ПорядокРасчетов
	|	КОНЕЦ ") + "                                                КАК ПорядокРасчетовСоглашение,
	|","
	|	ЛОЖЬ                                                        КАК ЕстьОшибкиЗаполненияПорядокРасчетов,
	|	NULL                                                        КАК ПорядокРасчетовСоглашение,
	|"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены10,", ?(ИмяТаблицы = "Документ.ЗаказКлиента" ИЛИ ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента","
	|	ВЫБОР
	|		КОГДА ДокументПродажи.Валюта = СоглашениеСКлиентом.Валюта И ДокументПродажи.СуммаДокумента < СоглашениеСКлиентом.МинимальнаяСуммаЗаказа
	|			ТОГДА ИСТИНА
	|		КОГДА ДокументПродажи.Валюта <> СоглашениеСКлиентом.Валюта
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиМинимальнаяСуммаЗаказа,", ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами", "
	|	ВЫБОР
	|		КОГДА ДокументПродажи.Валюта = СоглашениеСКлиентом.Валюта И ДокументПродажи.МинимальнаяСуммаЗаказа < СоглашениеСКлиентом.МинимальнаяСуммаЗаказа
	|			ТОГДА ИСТИНА
	|		КОГДА ДокументПродажи.Валюта <> СоглашениеСКлиентом.Валюта
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиМинимальнаяСуммаЗаказа,", "
	|	ЛОЖЬ КАК ЕстьОшибкиМинимальнаяСуммаЗаказа,")));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены11,", ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами",
	"СоглашениеСКлиентом.ВалютаВзаиморасчетов                                                 КАК ВалютаВзаиморасчетовСоглашение,","
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов 
	|			ТОГДА ДокументПродажи.Договор.ВалютаВзаиморасчетов
	|		ИНАЧЕ СоглашениеСКлиентом.ВалютаВзаиморасчетов
	|	КОНЕЦ                                                 КАК ВалютаВзаиморасчетовСоглашение,"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗамены12,", ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами",
	"СоглашениеСКлиентом.ОплатаВВалюте                                                 КАК ОплатаВВалютеСоглашение,","
	|	ВЫБОР
	|		КОГДА СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов 
	|			ТОГДА ДокументПродажи.Договор.ОплатаВВалюте
	|		ИНАЧЕ СоглашениеСКлиентом.ОплатаВВалюте
	|	КОНЕЦ                                                 КАК ОплатаВВалютеСоглашение,"));
	
КонецПроцедуры

// Формирует запрос для проверки тч Товары документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ИмяТаблицы   - Строка - имя таблицы документа, к которой необходимо сформировать проверочный запрос.
// ИспользоватьПроверкиПоЦенам - Булево - истина, использовать новое ценообразование.
//
Процедура СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы, ИспользоватьПроверкиПоЦенам)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	&ЭтоСоглашение                              КАК ЭтоСоглашение,
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.ЭтоНабор             КАК ЭтоНабор,
		|	ВременнаяТаблицаТовары.ЭтоКомплектующие     КАК ЭтоКомплектующие,
		|	ВременнаяТаблицаТовары.НоменклатураНабора   КАК НоменклатураНабора,
		|	ВременнаяТаблицаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаТовары.Цена                 КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			(СоглашениеТовары.Номенклатура ЕСТЬ НЕ NULL)
		|		ТОГДА
		|			ВЫРАЗИТЬ(ЕСТЬNULL(СоглашениеТовары.Цена,0)
		|			/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					СоглашениеШапка.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыДокументаПродажи.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыДокументаПродажи.КурсЧислитель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.КурсЧислитель, 0) > 0
		|						ТОГДА
		|							(КурсыВалютыСоглашения.КурсЧислитель * КурсыВалютыДокументаПродажи.КурсЗнаменатель)
		|							/ (КурсыВалютыДокументаПродажи.КурсЧислитель * КурсыВалютыСоглашения.КурсЗнаменатель)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(31,2))
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК ЦенаСоглашение,
		|
		|	&ПоляПроверкиЦеныСоглашения,
		|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
		|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДСНоменклатура,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена,0) = 0
		|			И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|			И &ВозвратМногооборотнойТары
		|		ТОГДА
		|			ЛОЖЬ
		|		КОГДА (СоглашениеТовары.Номенклатура ЕСТЬ НЕ NULL) И
		|		СоглашениеТовары.Цена > 0 И
		|		ВременнаяТаблицаТовары.Цена <
		|		ВЫРАЗИТЬ(ЕСТЬNULL(СоглашениеТовары.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					СоглашениеШапка.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыДокументаПродажи.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыДокументаПродажи.КурсЧислитель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.КурсЧислитель, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыСоглашения.КурсЧислитель * КурсыВалютыДокументаПродажи.КурсЗнаменатель)
		|							/ (КурсыВалютыДокументаПродажи.КурсЧислитель * КурсыВалютыСоглашения.КурсЗнаменатель)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(31,2))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦена
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|
		// СОЕДИНЕНИЯ С ТОРГОВЫМ СОГЛАШЕНИЕМ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеШапка.Ссылка
		|
		|		" + ТекстЗапросаТаблицыСоединенияТоварыДокументаПродажи(ИспользоватьПроверкиПоЦенам) + "
		|
		|/////////////////////////////////////////////////////////////////////////////
		// СОЕДИНЕНИЯ СО СТАВКАМИ НДС
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, Страна = &СтранаРегистрации) КАК СтавкиНДСНоменклатуры
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
		|		ПО
		|			Истина
		|
		|/////////////////////////////////////////////////////////////////////////////
		// СОЕДИНЕНИЯ С КУРСАМИ ВАЛЮТ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыДокументаПродажи
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Валюта = КурсыВалютыДокументаПродажи.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыСоглашения
		|		ПО
		|			СоглашениеШапка.Валюта = КурсыВалютыСоглашения.Валюта
		|" + ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг"
				ИЛИ ИмяТаблицы = "Документ.ПередачаТоваровХранителю","
		|ГДЕ
		|	ВременнаяТаблицаТовары.КодСтроки = 0", "") + "
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ПоляПроверкиЦеныСоглашения",
		ТекстЗапросаПоляПроверкиТоварыДокументаПродажи(ИспользоватьПроверкиПоЦенам));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"СоглашениеТовары.Упаковка",
		"СоглашениеТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
КонецПроцедуры

// Текст запроса поля проверки товары документа продажи.
// 
// Параметры:
//  ИспользуетсяЦенообразование25 - Неопределено, Булево - Используется ценообразование25
// 
// Возвращаемое значение:
//  Строка - Текст запроса поля проверки товары документа продажи
Функция ТекстЗапросаПоляПроверкиТоварыДокументаПродажи(ИспользуетсяЦенообразование25 = Неопределено) Экспорт
	
	Если ИспользуетсяЦенообразование25 = Неопределено Тогда
		ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	КонецЕсли;
	
	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса = 
		"ВЫБОР
		|
		 // ВИД ЦЕНЫ И ЦЕНА В СОГЛАШЕНИИ НЕ ОПРЕДЕЛЕНЫ
		|
		|		КОГДА
		|			СоглашениеШапка.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И ИндивидуальныйВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И (ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|				ИЛИ (НЕ &ВозвратМногооборотнойТары 
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)))
		|		ТОГДА
		|			ИСТИНА
		|
		|
		 // ВИД ЦЕН В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ С ВИДОМ ЦЕН В ШАПКЕ СОГЛАШЕНИЯ
		|
		|		КОГДА НЕ (СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И ВременнаяТаблицаТовары.ВидЦены = СоглашениеШапка.ВидЦен
		|			ИЛИ СоглашениеШапка.ИндивидуальныйВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И ВременнаяТаблицаТовары.ВидЦены = СоглашениеШапка.ИндивидуальныйВидЦены)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦены,
		|
		|	ВЫБОР
		|
		 // СРОК ПОСТАВКИ НЕ ПРОВЕРЯЕТСЯ
		|		КОГДА
		|			НЕ ВременнаяТаблицаТовары.ПроверятьОшибкиЗаполненияСрокПоставки
		|		ТОГДА
		|			ЛОЖЬ
		|
		 // СРОК ПОСТАВКИ В СОГЛАШЕНИИ НЕ ОПРЕДЕЛЕН
		|
		|		КОГДА
		|			СоглашениеШапка.СрокПоставки = 0
		|			
		|		ТОГДА
		|			ЛОЖЬ
		|
		 // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ШАПКЕ СОГЛАШЕНИЯ
		|
		|		КОГДА СоглашениеШапка.СрокПоставки <> 0
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеШапка.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		|	СоглашениеШапка.СрокПоставки КАК СрокПоставкиСоглашение,
		|
		|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА СоглашениеТовары.ВидЦены ЕСТЬ NULL
		|		ТОГДА
		|			СоглашениеШапка.ВидЦен
		|		ИНАЧЕ
		|			СоглашениеТовары.ВидЦены 
		|		КОНЕЦ КАК ВидЦеныСоглашение";
	Иначе
		ТекстЗапроса = 
		"ВЫБОР
		|
		 // ВИД ЦЕНЫ И ЦЕНА В СОГЛАШЕНИИ НЕ ОПРЕДЕЛЕНЫ
		|
		|		КОГДА
		|			СоглашениеШапка.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И (СоглашениеТовары.ВидЦены ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|			И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|			И (СоглашениеТовары.Номенклатура ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.Цена = 0)
		|			И (ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|				ИЛИ (НЕ &ВозвратМногооборотнойТары 
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)))
		|		ТОГДА
		|			ИСТИНА
		|
		 // ВИД ЦЕНЫ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ С ВИДОМ ЦЕН В ТЧ СОГЛАШЕНИЯ ЦЕНОВЫЕ ГРУППЫ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеЦеновыеГруппы.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|
		 // ВИД ЦЕНЫ В ТЧ ДОКУМЕНТА СРАВНИВАЕМ С ВИДОМ ЦЕНЫ В ТЧ СОГЛАШЕНИЯ ТОВАРЫ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеТовары.ВидЦены
		|		ТОГДА
		|			ИСТИНА
		|
		 // ВИД ЦЕН В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ С ВИДОМ ЦЕН В ШАПКЕ СОГЛАШЕНИЯ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеШапка.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦены,
		|
		|	ВЫБОР
		|
		 // СРОК ПОСТАВКИ НЕ ПРОВЕРЯЕТСЯ
		|		КОГДА
		|			НЕ ВременнаяТаблицаТовары.ПроверятьОшибкиЗаполненияСрокПоставки
		|		ТОГДА
		|			ЛОЖЬ
		|
		 // СРОК ПОСТАВКИ В СОГЛАШЕНИИ НЕ ОПРЕДЕЛЕН
		|
		|		КОГДА
		|			СоглашениеШапка.СрокПоставки = 0
		|			И (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|			
		|		ТОГДА
		|			ЛОЖЬ
		|
		 // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ТЧ СОГЛАШЕНИЯ ЦЕНОВЫЕ ГРУППЫ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ НЕ NULL И СоглашениеЦеновыеГруппы.СрокПоставки > 0
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеЦеновыеГруппы.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|
		 // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ТЧ СОГЛАШЕНИЯ ТОВАРЫ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ НЕ NULL И СоглашениеТовары.СрокПоставки > 0)
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеТовары.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|
		 // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ШАПКЕ СОГЛАШЕНИЯ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|			И СоглашениеШапка.СрокПоставки <> 0
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеШапка.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		|	ВЫБОР
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ НЕ NULL
		|			И СоглашениеЦеновыеГруппы.СрокПоставки > 0
		|		ТОГДА
		|			СоглашениеЦеновыеГруппы.СрокПоставки
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|		ТОГДА
		|			СоглашениеШапка.СрокПоставки
		|		ИНАЧЕ
		|			СоглашениеТовары.СрокПоставки
		|	КОНЕЦ КАК СрокПоставкиСоглашение,
		|
		|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|		ТОГДА
		|			СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА	(СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|		ТОГДА
		|			СоглашениеШапка.ВидЦен
		|		ИНАЧЕ
		|			СоглашениеТовары.ВидЦены
		|	КОНЕЦ КАК ВидЦеныСоглашение";
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

// Текст запроса таблицы соединения товары документа продажи.
// 
// Параметры:
//  ИспользуетсяЦенообразование25 - Неопределено, Булево - Используется ценообразование25
// 
// Возвращаемое значение:
//  Строка - Текст запроса таблицы соединения товары документа продажи
Функция ТекстЗапросаТаблицыСоединенияТоварыДокументаПродажи(ИспользуетсяЦенообразование25 = Неопределено) Экспорт
	
	Если ИспользуетсяЦенообразование25 = Неопределено Тогда
		ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	КонецЕсли;
	
	Если ИспользуетсяЦенообразование25 Тогда
		ТекстЗапроса = 
		"ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
		|		ПО ВидыНоменклатуры.Ссылка = ВременнаяТаблицаТовары.Номенклатура.ВидНоменклатуры
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(&Дата, (Номенклатура, ХарактеристикаЦО, СерияЦО, УпаковкаЦО) В 
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				Т.Номенклатура,
		|				Т.ХарактеристикаЦО,
		|				Т.СерияЦО,
		|				Т.УпаковкаЦО
		|			ИЗ ВременнаяТаблицаТовары КАК Т)) КАК СоглашениеТовары
		|		ПО
		|			СоглашениеШапка.ИндивидуальныйВидЦены = СоглашениеТовары.ВидЦены
		|			И ВременнаяТаблицаТовары.Номенклатура = СоглашениеТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.ХарактеристикаЦО = СоглашениеТовары.ХарактеристикаЦО
		|			И ВременнаяТаблицаТовары.СерияЦО = СоглашениеТовары.СерияЦО
		|			И ВременнаяТаблицаТовары.УпаковкаЦО = СоглашениеТовары.УпаковкаЦО";
	Иначе
		ТекстЗапроса = 
		"ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеТовары.Ссылка
		|			И ВременнаяТаблицаТовары.Номенклатура = СоглашениеТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = СоглашениеТовары.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеЦеновыеГруппы.Ссылка
		|			И ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа";
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует запрос для проверки соответствия тч ЦеновыеГруппы условиям продаж
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументПродажи.ЦеноваяГруппа   КАК ЦеноваяГруппа,
		|	ДокументПродажи.ВидЦен          КАК ВидЦен,
		|	Соглашение.ЦеноваяГруппа        КАК ЦеноваяГруппаСоглашение,
		|	Соглашение.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидкиСоглашение,
		|	Соглашение.ПроцентРучнойНаценки КАК ПроцентРучнойНаценкиСоглашение,
		|	Соглашение.ВидЦен               КАК ВидЦенСоглашение,
		|	Соглашение.СрокПоставки         КАК СрокПоставкиСоглашение,
		|	ВЫБОР
		|		КОГДА Соглашение.ЦеноваяГруппа ЕСТЬ NULL
		|			ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦеновыеГруппы,
		|	ВЫБОР
		|		КОГДА Соглашение.ВидЦен ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ВидЦен <> Соглашение.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦен,
		
		|	ВЫБОР
		|		КОГДА Соглашение.ПроцентРучнойСкидки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойСкидки > Соглашение.ПроцентРучнойСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРучнойСкидки,
		|	ВЫБОР
		|		КОГДА Соглашение.ПроцентРучнойНаценки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойНаценки > Соглашение.ПроцентРучнойНаценки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРучнойНаценки,
		
		|	ВЫБОР
		|		КОГДА Соглашение.СрокПоставки ЕСТЬ НЕ NULL И
		|			Соглашение.СрокПоставки <> 0 И
		|			ДокументПродажи.СрокПоставки < Соглашение.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		
		|	ДокументПродажи.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаЦеновыеГруппы КАК ДокументПродажи
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК Соглашение
		|ПО 
		|	ДокументПродажи.ЦеноваяГруппа = Соглашение.ЦеноваяГруппа
		|	И Соглашение.Ссылка В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение
		|			ИЗ
		|				ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки принадлежности товаров сегменту номенклатуры
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросПринадлежностьТоваровСегментуНоменклатуры(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                         КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                        КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика                      КАК Характеристика,
		|	ВложенныйЗапрос.НоменклатураСегмента                КАК НоменклатураСегмента,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатурыСегмента  КАК ХарактеристикаНоменклатурыСегмента,
		|	ВложенныйЗапрос.СегментНоменклатуры                 КАК СегментНоменклатуры
		|ИЗ
		|(ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки                          КАК НомерСтроки,
		|	ДокументТовары.Номенклатура                         КАК Номенклатура,
		|	ДокументТовары.Характеристика                       КАК Характеристика,
		|	НоменклатураСегмента.Номенклатура                   КАК НоменклатураСегмента,
		|	НоменклатураСегмента.Характеристика                 КАК ХарактеристикаНоменклатурыСегмента,
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ КАК СегментНоменклатуры
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ПО
		|	СоглашениеСКлиентом.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|ПО
		|	ДокументТовары.Номенклатура = НоменклатураСегмента.Номенклатура
		|	И ДокументТовары.Характеристика = НоменклатураСегмента.Характеристика
		|	И НоменклатураСегмента.Сегмент = 
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ
		|	И
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
		|) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СегментНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) И
		|	(ВложенныйЗапрос.НоменклатураСегмента ЕСТЬ NULL
		|	ИЛИ ВложенныйЗапрос.ХарактеристикаНоменклатурыСегмента ЕСТЬ NULL)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки принадлежности партнера сегменту партнеров
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросПринадлежностьПартнераСегментуПартнеров(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	СоглашениеСКлиентом.СегментПартнеров        КАК СегментПартнеров,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|		ТОГДА
		|			ЛОЖЬ
		|		КОГДА
		|			ПартнерыСегмента.Партнер ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСегментПартнеров
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ПО
		|	СоглашениеСКлиентом.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПартнерыСегмента            КАК ПартнерыСегмента
		|ПО
		|	ПартнерыСегмента.Сегмент = СоглашениеСКлиентом.СегментПартнеров
		|	И ПартнерыСегмента.Партнер = ВременнаяТаблицаДокументПродажи.Партнер
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов графика оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|				ИЛИ ВЫБОР КОГДА &ГрафикВСоглашении
			|						ТОГДА ЕСТЬNULL(ВременнаяТаблицаДокументПродажи.Соглашение.ГрафикОплаты, ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка))
			|						ИНАЧЕ ВременнаяТаблицаДокументПродажи.ГрафикОплаты
			|					КОНЕЦ = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|					И ВременнаяТаблицаДокументПродажи.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	
			|	ВЫБОР КОГДА &ГрафикВСоглашении
			|		ТОГДА ВременнаяТаблицаДокументПродажи.Соглашение.ГрафикОплаты
			|		ИНАЧЕ  ВременнаяТаблицаДокументПродажи.ГрафикОплаты
			|	КОНЕЦ КАК ГрафикОплаты,
			|	ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение,
			|	ВременнаяТаблицаДокументПродажи.Дата КАК Дата,
			|	ВременнаяТаблицаДокументПродажи.ДатаОтгрузки КАК ДатаОтгрузки,
			|	ВременнаяТаблицаДокументПродажи.ДатаПереходаПраваСобственности КАК ДатаПереходаПраваСобственности,
			|	ВременнаяТаблицаДокументПродажи.ДатаСогласования КАК ДатаСогласования,
			|	ВременнаяТаблицаДокументПродажи.НакладнаяПоЗаказам КАК НакладнаяПоЗаказам,
			|	ВременнаяТаблицаДокументПродажи.ПорядокРасчетов КАК ПорядокРасчетов,
			|	ВременнаяТаблицаДокументПродажи.ЭтоЗаказ КАК ЭтоЗаказ,
			|	ВременнаяТаблицаДокументПродажи.НеОтгружатьЧастями КАК НеОтгружатьЧастями,
			|
			|	ВЫБОР КОГДА ВременнаяТаблицаДокументПродажи.Соглашение <> ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
			|		ТОГДА ВременнаяТаблицаДокументПродажи.Соглашение.Календарь
			|		ИНАЧЕ ВременнаяТаблицаДокументПродажи.ГрафикОплаты.Календарь
			|	КОНЕЦ КАК Календарь,
			|	
			|	ЭтапыДокумента.НомерСтроки       КАК НомерСтроки,
			|	ЭтапыДокумента.ВариантОплаты     КАК ВариантОплаты,
			|	ЭтапыДокумента.ВариантОтсчета    КАК ВариантОтсчета,
			|	ЭтапыДокумента.Сдвиг             КАК Сдвиг,
			|	ЭтапыДокумента.ДатаПлатежа       КАК ДатаПлатежа,
			|	ЭтапыДокумента.ПроцентПлатежа    КАК ПроцентПлатежа,
			|	
			|	ВЫБОР КОГДА &ТребуетсяЗалогЗаТару ТОГДА
			|		ЭтапыДокумента.ПроцентЗалогаЗаТару
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ                            КАК ПроцентЗалогаЗаТару
			|ИЗ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
			|		ПО (ИСТИНА)
			|;
			|";
	
КонецПроцедуры

// Формирует запрос для проверки вхождения цен документа продажи в допустимый диапазон.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
// ИспользоватьПроверкиПоЦенам - Булево - истина, использовать новое ценообразование.
//
Процедура СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса, ИспользоватьПроверкиПоЦенам)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                 КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика              КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                  КАК ВалютаЦены,
		|	ВложенныйЗапрос.Цена                        КАК Цена,
		|	ВложенныйЗапрос.МинимальноДопустимаяЦена    КАК МинимальноДопустимаяЦена,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена   КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МинимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена < ВложенныйЗапрос.МинимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМинимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МаксимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаДокументПродажи.Валюта      КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.ЦенаСоСкидкой        КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			МинимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МинимальнаяЦенаОтсутствует,
		|	ВЫБОР
		|		КОГДА
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МаксимальнаяЦенаОтсутствует,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки1,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МинимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМинимальнойЦены.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМинимальнойЦены.КурсЧислитель, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыМинимальнойЦены.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
		|							/ (КурсыВалютыЦены.КурсЧислитель * КурсыВалютыМинимальнойЦены.КурсЗнаменатель)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|				КОНЕЦ КАК ЧИСЛО(31,2))
		|	КАК МинимальноДопустимаяЦена,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(&ТекстЗапросаКоэффициентУпаковки3,1)
		|			* ВЫБОР 
		|				КОГДА 
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ТОГДА
		|					&ТекстЗапросаКоэффициентУпаковки2
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.КурсЗнаменатель, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.КурсЧислитель, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыМаксимальнойЦены.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель)
		|							/ (КурсыВалютыЦены.КурсЧислитель * КурсыВалютыМаксимальнойЦены.КурсЗнаменатель)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ КАК ЧИСЛО(31,2))
		|	КАК МаксимальноДопустимаяЦена
		|
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|		ПО
		|			ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Валюта = КурсыВалютыЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		// СОЕДИНЕНИЯ С МИНИМАЛЬНО ДОПУСТИМЫМИ ЦЕНАМИ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			&МинимальныеЦеныНоменклатурыСрезПоследних КАК МинимальныеЦеныНоменклатурыСрезПоследних
		|		ПО 
		|			&УсловиеСоедиенияМинимальныеЦеныНоменклатурыСрезПоследних
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМинимальнойЦены
		|		ПО
		|			МинимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМинимальнойЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			&МаксимальныеЦеныНоменклатурыСрезПоследних КАК МаксимальныеЦеныНоменклатурыСрезПоследних
		|		ПО 
		|			&УсловиеСоедиенияМаксимальныеЦеныНоменклатурыСрезПоследних
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМаксимальнойЦены
		|		ПО
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМаксимальнойЦены.Валюта
		|
		|ГДЕ
		|	ВременнаяТаблицаТовары.Цена > 0
		|	И (ВременнаяТаблицаТовары.КодСтроки = 0 ИЛИ &НеПроверятьКодСтроки)
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&МинимальныеЦеныНоменклатурыСрезПоследних",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры(
							"ВременнаяТаблицаТовары",
							,
							Новый Структура("Константа", Метаданные.Константы.ВидМинимальноДопустимыхЦенПродажи.Имя),
							ИспользоватьПроверкиПоЦенам));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеСоедиенияМинимальныеЦеныНоменклатурыСрезПоследних",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
		"ВременнаяТаблицаТовары",
		"МинимальныеЦеныНоменклатурыСрезПоследних",
		,
		ИспользоватьПроверкиПоЦенам));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&МаксимальныеЦеныНоменклатурыСрезПоследних",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры(
							"ВременнаяТаблицаТовары",
							,
							Новый Структура("Константа", Метаданные.Константы.ВидМаксимальноДопустимыхЦенПродажи.Имя),
							ИспользоватьПроверкиПоЦенам));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеСоедиенияМаксимальныеЦеныНоменклатурыСрезПоследних",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
		"ВременнаяТаблицаТовары",
		"МаксимальныеЦеныНоменклатурыСрезПоследних",
		,
		ИспользоватьПроверкиПоЦенам));

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникТоваров", "ВременнаяТаблицаТовары");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"МинимальныеЦеныНоменклатурыСрезПоследних.Упаковка",
		"МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВременнаяТаблицаТовары.Упаковка",
		"ВременнаяТаблицаТовары.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Упаковка",
		"МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
КонецПроцедуры

// Формирует текст запроса для проверки наличия услуг или работ в документе продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеУслугРаботВДокументеПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки наличия услуг и тары в документе продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеУслугТарыВДокументеПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки наличия товаров ГИСМ в документе продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеТоваровГИСМВДокументеПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ОсобенностьУчета В (
		|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродукцияИзНатуральногоМеха),
		|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КиЗГИСМ)
		|	)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки наличия алкогольной продукции в документе продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеАлкогольнойПродукцииВДокументеПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ОсобенностьУчета В (
		|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция),
		|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.Пиво),
		|		ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПивоВПотребительскихУпаковках))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки наличия продукции ВЕТИС в документе продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросНаличиеТоваровВЕТИСВДокументеПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС)
		|	ИЛИ ДокументТовары.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС)
		|	ИЛИ ДокументТовары.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ЗерноВЕТИС)
		|	ИЛИ ДокументТовары.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.ПродуктыПереработкиЗернаВЕТИС)
		|	ИЛИ ДокументТовары.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КормаДляЖивотныхПодконтрольныеВЕТИС)
		|	ИЛИ ДокументТовары.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МясоПодконтрольноеВЕТИС)
		|	ИЛИ ДокументТовары.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
		|	ИЛИ ДокументТовары.Номенклатура.ОсобенностьУчета = ЗНАЧЕНИЕ(Перечисление.ОсобенностиУчетаНоменклатуры.МорепродуктыПодконтрольныеВЕТИС)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности суммы НДС в зависимости от ставки НДС
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
// ПараметрыЗапроса       - Структура - структура, содержащая параметры запроса
//
Процедура СформироватьЗапросКорректностьСуммыНДС(ТекстЗапроса, ПараметрыЗапроса)
	
	ПараметрыЗапроса.Вставить("НалогообложенияБезНДС", УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС());
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ВременнаяТаблицаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВременнаяТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаДокументПродажи.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы) ТОГДА
	|			ЛОЖЬ
	|		КОГДА ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя) ТОГДА
	|			ВЫБОР ВременнаяТаблицаТовары.СуммаНДС
	|				КОГДА 0 ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		КОГДА ВременнаяТаблицаТовары.СтавкаНДС.Ставка > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ВременнаяТаблицаДокументПродажи.ЦенаВключаетНДС
	|						ТОГДА ВЫБОР ВременнаяТаблицаТовары.СуммаНДС - (ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * (ВременнаяТаблицаТовары.СтавкаНДС.Ставка / 100) / ((ВременнаяТаблицаТовары.СтавкаНДС.Ставка + 100) / 100) КАК ЧИСЛО(31, 2)))
	|								КОГДА 0
	|									ТОГДА ЛОЖЬ
	|								КОГДА 0.01
	|									ТОГДА ЛОЖЬ
	|								КОГДА -0.01
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР ВременнаяТаблицаТовары.СуммаНДС - (ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * (ВременнаяТаблицаТовары.СтавкаНДС.Ставка / 100) КАК ЧИСЛО(31, 2)))
	|							КОГДА 0
	|								ТОГДА ЛОЖЬ
	|							КОГДА 0.01
	|								ТОГДА ЛОЖЬ
	|							КОГДА -0.01
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСуммаНДС,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя) ТОГДА
	|			0
	|		КОГДА ВременнаяТаблицаТовары.СтавкаНДС.Ставка > 0
	|			ТОГДА ВЫБОР
	|					КОГДА ВременнаяТаблицаДокументПродажи.ЦенаВключаетНДС
	|						ТОГДА ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * (ВременнаяТаблицаТовары.СтавкаНДС.Ставка / 100) / ((ВременнаяТаблицаТовары.СтавкаНДС.Ставка + 100) / 100) КАК ЧИСЛО(31, 2))
	|					ИНАЧЕ ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * (ВременнаяТаблицаТовары.СтавкаНДС.Ставка / 100) КАК ЧИСЛО(31, 2))
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСРасчетная
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ВременнаяТаблицаДокументПродажи.НалогообложениеНДС В (&НалогообложенияБезНДС)
	|	И ВЫБОР
	|			КОГДА ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДССМежценовойРазницы) ТОГДА
	|				ЛОЖЬ
	|			КОГДА ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя) ТОГДА
	|				ВЫБОР ВременнаяТаблицаТовары.СуммаНДС
	|				КОГДА 0 ТОГДА ЛОЖЬ
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|			КОГДА ВременнаяТаблицаТовары.СтавкаНДС.Ставка > 0
	|				ТОГДА ВЫБОР
	|						КОГДА ВременнаяТаблицаДокументПродажи.ЦенаВключаетНДС
	|							ТОГДА ВЫБОР ВременнаяТаблицаТовары.СуммаНДС - (ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * (ВременнаяТаблицаТовары.СтавкаНДС.Ставка / 100) / ((ВременнаяТаблицаТовары.СтавкаНДС.Ставка + 100) / 100) КАК ЧИСЛО(31, 2)))
	|									КОГДА 0
	|										ТОГДА ЛОЖЬ
	|									КОГДА 0.01
	|										ТОГДА ЛОЖЬ
	|									КОГДА -0.01
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ИСТИНА
	|								КОНЕЦ
	|						ИНАЧЕ ВЫБОР ВременнаяТаблицаТовары.СуммаНДС - (ВЫРАЗИТЬ(ВременнаяТаблицаТовары.Сумма * (ВременнаяТаблицаТовары.СтавкаНДС.Ставка / 100) КАК ЧИСЛО(31, 2)))
	|								КОГДА 0
	|									ТОГДА ЛОЖЬ
	|								КОГДА 0.01
	|									ТОГДА ЛОЖЬ
	|								КОГДА -0.01
	|									ТОГДА ЛОЖЬ
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|";

КонецПроцедуры

// Формирует запрос для проверки указания ставки НДС в зависимости от налогообложения.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьУказанияСтавкиНДСПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	ВременнаяТаблицаДокументПродажи.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ВременнаяТаблицаТовары.СтавкаНДС КАК ВыбраннаяСтавкаНДС,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			И &ВозвратМногооборотнойТары
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|			И ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
		|				ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))
		|			ТОГДА ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС, ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))
		|		ИНАЧЕ
		|			НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК КорректнаяСтавкаНДС
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|	ПО (ИСТИНА)
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.СтавкиНДС.ТипыНалогообложенияНДС КАК СтавкиНДС
		|	ПО
		|		СтавкиНДС.ТипНалогообложенияНДС = ВременнаяТаблицаДокументПродажи.НалогообложениеНДС
		|		И СтавкиНДС.Ссылка = ВременнаяТаблицаТовары.СтавкаНДС
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Дата, Страна = &СтранаРегистрации) КАК СтавкиНДСНоменклатуры
		|	ПО
		|		ВременнаяТаблицаТовары.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Дата, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
		|	ПО
		|		Истина
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И &ВозвратМногооборотнойТары
		|				И ВременнаяТаблицаТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
		|			ТОГДА ИСТИНА
		|		КОГДА ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
		|				И ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|				И ВременнаяТаблицаТовары.СтавкаНДС <> ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
		|					ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)))
		|			ТОГДА ИСТИНА
		|		КОГДА СтавкиНДС.Ссылка ЕСТЬ NULL
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности суммы НДС в зависимости от суммы, когда НДС включен в цену
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКорректностьСуммыИСуммыНДС(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.НоменклатураНабора КАК НоменклатураНабора,
	|	ВременнаяТаблицаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ВременнаяТаблицаТовары.Сумма КАК Сумма,
	|	ВременнаяТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|	ВременнаяТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|	ВременнаяТаблицаДокументПродажи.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Сумма < 0 И ВременнаяТаблицаТовары.Сумма - ВременнаяТаблицаТовары.СуммаНДС <= 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВременнаяТаблицаТовары.Сумма >= 0 И ВременнаяТаблицаТовары.Сумма - ВременнаяТаблицаТовары.СуммаНДС >= 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьОшибкиСуммаНДС
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаТовары.Сумма < 0 И ВременнаяТаблицаТовары.Сумма - ВременнаяТаблицаТовары.СуммаНДС <= 0
	|			ТОГДА ЛОЖЬ
	|		КОГДА ВременнаяТаблицаТовары.Сумма >= 0 И ВременнаяТаблицаТовары.Сумма - ВременнаяТаблицаТовары.СуммаНДС >= 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|";
	
КонецПроцедуры

// Формирует текст запроса для проверки допустимости ручных скидок и наценок
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	                              |	ВременнаяТаблицаТовары.ЭтоНабор КАК ЭтоНабор,
	                              |	ВременнаяТаблицаТовары.ЭтоКомплектующие КАК ЭтоКомплектующие,
	                              |	ВременнаяТаблицаТовары.НоменклатураНабора КАК НоменклатураНабора,
	                              |	ВременнаяТаблицаТовары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	                              |	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	                              |	ВЫБОР
	                              |		КОГДА ВременнаяТаблицаТовары.ПроцентРучнойСкидки > 0
	                              |				И ВременнаяТаблицаТовары.ПроцентРучнойСкидки > ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойСкидки
	                              |			ТОГДА ИСТИНА
	                              |		ИНАЧЕ ЛОЖЬ
	                              |	КОНЕЦ КАК ЕстьОшибкиЗаполненияРучнойСкидки,
	                              |	ВЫБОР
	                              |		КОГДА ВременнаяТаблицаТовары.ПроцентРучнойСкидки < 0
	                              |				И -ВременнаяТаблицаТовары.ПроцентРучнойСкидки > ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойНаценки
	                              |			ТОГДА ИСТИНА
	                              |		ИНАЧЕ ЛОЖЬ
	                              |	КОНЕЦ КАК ЕстьОшибкиЗаполненияРучнойНаценки,
	                              |	ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойСкидки КАК МаксимальнаяСуммаРучнойСкидки,
	                              |	ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойНаценки КАК МаксимальнаяСуммаРучнойНаценки
								  |ИЗ
	                              |	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаОграниченияРучныхСкидок КАК ВременнаяТаблицаОграниченияРучныхСкидок
	                              |		ПО (ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВременнаяТаблицаОграниченияРучныхСкидок.ЦеноваяГруппа
	                              |				ИЛИ НЕ ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа В
	                              |							(ВЫБРАТЬ
	                              |								Т.ЦеноваяГруппа
	                              |							ИЗ
	                              |								ВременнаяТаблицаОграниченияРучныхСкидок КАК Т)
	                              |					И ВременнаяТаблицаОграниченияРучныхСкидок.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	                              |ГДЕ
	                              |	ВременнаяТаблицаТовары.ПроцентРучнойСкидки <> 0
	                              |	И (ВременнаяТаблицаТовары.КодСтроки = 0
	                              |			ИЛИ &НеПроверятьКодСтроки)
	                              |	И НЕ ВременнаяТаблицаТовары.Отменено
	                              |
	                              |УПОРЯДОЧИТЬ ПО
	                              |	НомерСтроки
								  |;
								  |";
	
КонецПроцедуры

Процедура СформироватьЗапросСоответствиеСуммыПредоплатыГрафикуОплат(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			ВЫРАЗИТЬ(
		|				ВЫБОР
		|					КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате) > 0
		|						ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате)
		|					ИНАЧЕ 0
		|				КОНЕЦ + 
		|				ВЫБОР
		|					КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару) > 0
		|						ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентЗалогаЗаТару) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару)
		|					ИНАЧЕ 0
		|				КОНЕЦ КАК ЧИСЛО(31,2))
		|					<> СУММА(ВременнаяТаблицаЭтапыГрафикаОплаты.СуммаПлатежа)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате) > 0
		|				ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате)
		|			ИНАЧЕ 0
		|		КОНЕЦ + 
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару) > 0
		|				ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентЗалогаЗаТару) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару)
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК СуммаПредоплатыПоГрафику
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ДанныеГрафикаОплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|	ПО
		|		ДанныеГрафикаОплаты.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаЭтапыГрафикаОплаты КАК ВременнаяТаблицаЭтапыГрафикаОплаты
		|	ПО
		|		ВременнаяТаблицаЭтапыГрафикаОплаты.ВариантОплаты В 
		|			(ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		ВременнаяТаблицаСуммыВзаиморасчетов КАК СуммыВзаиморасчетов ПО ИСТИНА
		|	
		|
		|ГДЕ
		|	&ИспользоватьСтатусыРеализацийТоваровУслуг
		|	И ДанныеГрафикаОплаты.Ссылка.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|	И (ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения)
		|	ИЛИ ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			ВЫРАЗИТЬ(
		|			ВЫБОР
		|				КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате) > 0
		|					ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате)
		|				ИНАЧЕ 0
		|			КОНЕЦ + 
		|			ВЫБОР
		|				КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару) > 0
		|					ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентЗалогаЗаТару) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару)
		|				ИНАЧЕ 0
		|			КОНЕЦ КАК ЧИСЛО(31,2))
		|				<> МАКСИМУМ(ВременнаяТаблицаЭтапыГрафикаОплаты.СуммаПлатежа)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат,
		|	ВЫРАЗИТЬ(
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате) > 0
		|				ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаКОплате)
		|			ИНАЧЕ 0
		|		КОНЕЦ + 
		|		ВЫБОР
		|			КОГДА МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару) > 0
		|				ТОГДА СУММА(ДанныеГрафикаОплаты.ПроцентЗалогаЗаТару) / 100 * МАКСИМУМ(СуммыВзаиморасчетов.СуммаЗалогаЗаТару)
		|			ИНАЧЕ 0
		|		КОНЕЦ КАК ЧИСЛО(31,2)) КАК СуммаПредоплатыПоГрафику
		|
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ДанныеГрафикаОплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|		ПО
		|			ДанныеСоглашения.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|		
		|	ПО
		|		ДанныеГрафикаОплаты.Ссылка = ДанныеСоглашения.ГрафикОплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаСуммыВзаиморасчетов КАК СуммыВзаиморасчетов ПО ИСТИНА
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаЭтапыГрафикаОплаты КАК ВременнаяТаблицаЭтапыГрафикаОплаты
		|	ПО
		|		ВременнаяТаблицаЭтапыГрафикаОплаты.ВариантОплаты В 
		|			(ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
		|
		|ГДЕ
		|	&ИспользоватьСтатусыРеализацийТоваровУслуг
		|	И (ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.АвансДоОбеспечения)
		|	ИЛИ ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроляОплатыКлиентом.ПредоплатаДоОтгрузки))
		|
		|;
		|";
	
КонецПроцедуры


// Формирует текст запроса для проверки заполнения цен в документе
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИсходныйНомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Сумма = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА &ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияСумм,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА &ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.ЭтоНабор
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры
	
// Формирует текст запроса для проверки заполнения цен в документе "Акт приемки клиентом".
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКонтрольЗаполненияЦенАкт(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИсходныйНомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА &ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияЦен,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСумм
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.ЭтоНабор
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполнения цен в документе, позволяя нулевые цены в отмененных строках.
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросКонтрольЗаполненияЦенСУчетомОтмененных(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.ИсходныйНомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Сумма = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|					ИЛИ ВременнаяТаблицаТовары.Отменено ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияСумм,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА (&ВозвратМногооборотнойТары И НЕ &ТребуетсяЗалогЗаТару
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|					ИЛИ ВременнаяТаблицаТовары.Отменено ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ГДЕ
		|	НЕ ВременнаяТаблицаТовары.ЭтоНабор
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры


// Формирует запрос для проверки корректности указания направления деятельности по агентской закупке
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросПроверкиНаправленияДеятельностиПоУчетуДоходовИРасходов(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаДокументПродажи.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ВременнаяТаблицаДокументПродажи.НаправлениеДеятельности.УчетДоходов
	|				ИЛИ НЕ ВременнаяТаблицаДокументПродажи.НаправлениеДеятельности.УчетЗатрат
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиВНаправленииДеятельности
	|ИЗ
	|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ВременнаяТаблицаДокументПродажи.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ ВременнаяТаблицаДокументПродажи.НаправлениеДеятельности.УчетДоходов
	|				ИЛИ НЕ ВременнаяТаблицаДокументПродажи.НаправлениеДеятельности.УчетЗатрат
	|				ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|";
	
КонецПроцедуры

// Формирует запрос для проверки возможности использования заказа клиента по агентской закупке в зависимости от варианта обособления
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса.
//
Процедура СформироватьЗапросПроверкиВозможностиИспользованияЗаказаКлиентаПоВариантуОбособления(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Константы.ВариантОбособленияТоваровВПродажах = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияТоваровВПродажах.Договор)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиВИспользованииЗаказаКлиентаПоАгентскойЗакупке
	|ИЗ
	|	Константы КАК Константы
	|ГДЕ
	|	ВЫБОР
	|		КОГДА Константы.ВариантОбособленияТоваровВПродажах = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияТоваровВПродажах.Договор)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|";
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахЗаполненияДокументов

// Выводит сообщения об ошибках наличия дублей в тч Товары документа продажи
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеДублейТоваровДокументаПродажи(Знач Выборка,
	                                                            Знач ДокументПродажи,
	                                                            Отказ)

	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

			ТекстОшибки = НСтр("ru = 'Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" повторяется'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);

		Иначе
				
			ТекстОшибки = НСтр("ru = 'Номенклатура ""%Номенклатура%"" повторяется'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ);

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках наличия дублей в тч ЦеновыеГруппы документа продажи
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеДублейЦеновыхГруппДокументаПродажи(Знач Выборка,
	                                                                 Знач ДокументПродажи,
	                                                                 Отказ)

	Пока Выборка.Следующий() Цикл

		ТекстОшибки = НСтр("ru = 'Ценовая группа ""%ЦеноваяГруппа%"" повторяется'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Выборка.ЦеноваяГруппа);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ЦеноваяГруппа"),
			,
			Отказ);

	КонецЦикла;

КонецПроцедуры


// Выводит сообщения об ошибках заполнения склада в документе продажи
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект - для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСклада(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)
	
	Если Выборка.Следующий() Тогда
		
		ТекстОшибки = НСтр("ru = 'Поле ""Склад"" не заполнено'");
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			"Склад",
			Отказ);
			
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в табличной части "Товары" документа продажи.
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %НомерСтроки% списка ""%ИмяТЧ%""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяТЧ%",        Выборка.ПредставлениеТабличнойЧасти);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "Склад"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения подразделения в табличной части "Товары" документа продажи.
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияПодразделенияВТабличнойЧастиТовары(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Подразделение-отправитель"" в строке %НомерСтроки% списка ""%ИмяТЧ%""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ИмяТЧ%",        Выборка.ПредставлениеТабличнойЧасти);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(Выборка.ИмяТабличнойЧасти, Выборка.НомерСтроки, "Подразделение"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения цен в табличной части "Товары" документа продажи.
//
// Параметры:
// 	Выборка         - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// 	ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// 	ИмяТЧ           - Строка - Имя табличной части
// 	ПредставлениеТЧ - Строка - Представление табличной части
// 	Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКонтрольЗаполненияЦен(Знач Выборка,
	                                             Знач ДокументПродажи,
												 Знач ИмяТЧ,
												 Знач ПредставлениеТЧ,
	                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьОшибкиЗаполненияЦен Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Цена"" в строке %НомерСтроки% списка ""%ТабЧасть%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабЧасть%", ПредставлениеТЧ);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"Цена"),
				,
				Отказ);
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСумм Тогда
			
			ТекстОшибки = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %НомерСтроки% списка ""%ТабЧасть%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабЧасть%", ПредставлениеТЧ);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"Сумма"),
				,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках указания суммы НДС в табличной части документа продажи.
//
Процедура СообщитьОбОшибкахКорректностьСуммыНДС(Знач Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ПроверятьСуммуНДС = Истина;
		
		Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
			
			ПараметрыВариантаКомплектацииНоменклатуры = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(
				Выборка.НоменклатураНабора,
				Выборка.ХарактеристикаНабора);
				
				Если ЗначениеЗаполнено(ПараметрыВариантаКомплектацииНоменклатуры)
					И (ПараметрыВариантаКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
					Или ПараметрыВариантаКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
				
					ПроверятьСуммуНДС = Ложь;
				
				КонецЕсли;
				
		КонецЕсли;
		
		Если ПроверятьСуммуНДС Тогда
		
			ТекстОшибки = НСтр("ru = 'Сумма НДС %СуммаНДС% %Валюта% при ставке ""%СтавкаНДС%"" отличается от расчетной %СуммаНДСРасчетная% %Валюта%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаНДС%",          Выборка.СуммаНДС);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаНДСРасчетная%", Выборка.СуммаНДСРасчетная);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтавкаНДС%",         Выборка.СтавкаНДС);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",            Выборка.Валюта);
			
			АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
			АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СуммаНДС"),
				Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках указания ставки НДС в табличной части документа продажи.
//
Процедура СообщитьОбОшибкахКорректностьУказанияСтавкиНДСПродажи(Знач Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ)

	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = "";
		
		Если ЗначениеЗаполнено(Выборка.КорректнаяСтавкаНДС) Тогда
			ТекстОшибки = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" необходимо выбрать ставку НДС ""%СтавкаНДС%"".'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",        Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%",    ПредставлениеТЧ);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтавкаНДС%",          Выборка.КорректнаяСтавкаНДС);
			
		Иначе
			ТекстОшибки = НСтр("ru = 'В строке %НомерСтроки% списка ""%ПредставлениеТЧ%"" выбрана несоответствующая налогообложению ""%НалогообложениеНДС%"" ставка НДС ""%СтавкаНДС%"".'");
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",        Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%",    ПредставлениеТЧ);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НалогообложениеНДС%", Выборка.НалогообложениеНДС);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтавкаНДС%",          Выборка.ВыбраннаяСтавкаНДС);
			
		КонецЕсли;

			
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СтавкаНДС"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках указания суммы НДС в табличной части документа продажи.
//
// Параметры:
// 	Выборка                  - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// 	ДокументПродажи          - Структура - описание документа продажи
// 	ИмяТЧ                    - Строка - Имя табличной части
// 	ПредставлениеТЧ          - Строка - Представление табличной части
// 	Отказ                    - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахКорректностьСуммыИСуммыНДС(Знач Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ПроверятьСуммуНДС = Истина;
		
		Если ЗначениеЗаполнено(Выборка.НоменклатураНабора) Тогда
			
			ПараметрыВариантаКомплектацииНоменклатуры = НаборыВызовСервера.ПараметрыВариантаКомплектацииНоменклатуры(
				Выборка.НоменклатураНабора,
				Выборка.ХарактеристикаНабора);
				
				Если ЗначениеЗаполнено(ПараметрыВариантаКомплектацииНоменклатуры) И
					(ПараметрыВариантаКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям
					Или ПараметрыВариантаКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора = Перечисления.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам) Тогда
				
					ПроверятьСуммуНДС = Ложь;
				
				КонецЕсли;
				
		КонецЕсли;
		
		Если ПроверятьСуммуНДС Тогда
		
			ТекстОшибки = НСтр("ru = 'Сумма НДС %СуммаНДС% %Валюта% при ставке ""%СтавкаНДС%"" больше общей суммы по строке %Сумма% %Валюта%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаНДС%",          Выборка.СуммаНДС);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сумма%",             Выборка.Сумма);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтавкаНДС%",         Выборка.СтавкаНДС);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",            Выборка.Валюта);
			
			АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
			АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
			
			ПродажиСервер.СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СуммаНДС"),
				Отказ);
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Выводит сообщения об ошибке вобра направления деятельности по агенской закупке
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса
// ДокументПродажи  - ДокументОбъект - для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкеВыбораНаправленияДеятельности(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)

	Если Выборка.Следующий() Тогда

		ТекстОшибки = НСтр("ru = 'Для поставки под принципала направление деятельности должно учитывать и доходы и затраты.'");
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			"НаправлениеДеятельности",
			,
			Отказ);

	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибке использования заказа клиента, если обособление при агентской закупке идёт по договорам
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса
// ДокументПродажи  - ДокументОбъект -  для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкеВозможностиИспользованияЗаказаКлиента(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)

	Если Выборка.Следующий() Тогда

		ТекстОшибки = НСтр("ru = 'Для поставки под принципала при обособлении по договору с клиентом, документ ""Заказ клиента"" не используется.'");
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			"ХозяйственнаяОперация",
			,
			Отказ);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДляВыводаСообщенийОбОшибкахСоответствияДокументовУсловиямПродаж

Процедура СообщитьПользователюОбОшибке(ТекстОшибки, ДокументПродажи, Поле="", Отказ=Ложь) Экспорт

	Если ТипЗнч(ДокументПродажи) = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект." + Поле,
			,
			Отказ);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			Поле,
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках в шапке документа продажи
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа 
// МассивОтклонений - Массив - Массив отклонений шапки документ от условий продаж.
//
Процедура СообщитьОбОшибкахШапкаДокументаПродажи(Знач Выборка,
	                                             Знач ДокументПродажи,
	                                             Отказ,
	                                             МассивОтклонений = Неопределено)
	
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если Выборка.Следующий() Тогда
		
		Если Выборка.ЕстьОшибкиЗаполненияПартнер Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Партнер не должен отличаться от значения в соглашении ""%ПартнерСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Партнер",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%ПартнерДокумент%"" отличается от партнера в соглашении ""%ПартнерСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерДокумент%", ДокументПродажи.Партнер);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Партнер'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиСтатусСоглашения Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Соглашение находится в статус ""Не согласовано"". Проведение документа запрещено.'");
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Соглашение",
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru = 'Соглашение находится в статус ""Не согласовано"".'");
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Соглашение'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКонтрагент Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Контрагент не должен отличаться от значения в соглашении ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Контрагент",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Контрагент%"" отличается от контрагента в соглашении ""%КонтрагентСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Контрагент%", ДокументПродажи.Контрагент);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Контрагент'"), ТекстОшибки, МассивОтклонений);
			
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияОрганизация Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Организация не должна отличаться от значения в типовом соглашении ""%ОрганизацияСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Организация не должна отличаться от значения в соглашении ""%ОрганизацияСоглашение%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Организация",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%Организация%"" отличается от организации в типовом соглашении ""%ОрганизацияСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%Организация%"" отличается от организации в соглашении ""%ОрганизацияСоглашение%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", ДокументПродажи.Организация);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Организация'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалюта Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Валюта не должна отличаться от значения в типовом соглашении ""%ВалютаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Валюта не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Валюта",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%Валюта%"" отличается от валюты в типовом соглашении ""%ВалютаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%Валюта%"" отличается от валюты в соглашении ""%ВалютаСоглашение%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументПродажи.Валюта);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Валюта'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Валюта взаиморасчетов не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаВзаиморасчетовСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВалютаВзаиморасчетов",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Валюта%"" отличается от валюты взаиморасчетов в соглашении ""%ВалютаСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаВзаиморасчетовСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", ДокументПродажи.ВалютаВзаиморасчетов);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Валюта взаиморасчетов'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки Тогда
			ТекстОшибки = НСтр("ru = 'Признак ограничивать ручные скидки не должен отличаться от значения в типовом соглашении'");
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ОграничиватьРучныеСкидки",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Ручные скидки'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВидЦен Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.ВидЦенСоглашение) Тогда
				
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'Вид цен не должен отличаться от значения в типовом соглашении ""%ВидЦенСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Вид цен не должен отличаться от значения в соглашении ""%ВидЦенСоглашение%""'");
					КонецЕсли;
						
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);

				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'Вид цен в типовом соглашении не определен. Вид цен не может быть установлен без согласования'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Вид цен в соглашении не определен. Вид цен не может быть установлен без согласования'");
					КонецЕсли;
						
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВидЦен",
					Отказ);
			Иначе 
					
				Если ЗначениеЗаполнено(Выборка.ВидЦенСоглашение) Тогда
				
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = '""%ВидЦен%"" отличается от вида цен в типовом соглашении ""%ВидЦенСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = '""%ВидЦен%"" отличается от вида цен в соглашении ""%ВидЦенСоглашение%""'");
					КонецЕсли;
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦен%", ?(ЗначениеЗаполнено(ДокументПродажи.ВидЦен),ДокументПродажи.ВидЦен,НСтр("ru = 'произвольный'")));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);
				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'Вид цен в типовом соглашении не определен. Вид цен не может быть установлен без согласования'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Вид цен в соглашении не определен. Вид цен не может быть установлен без согласования'");
					КонецЕсли;
						
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Вид цен'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияСценарияПланирования Тогда
			
			Если Не ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.СценарийПланированияСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru = 'Сценарий планирования не должен отличаться от значения в типовом соглашении ""%СценарийПланированияСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланированияСоглашение%", Выборка.СценарийПланированияСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru = 'Сценарий планирования в типовом соглашении не определен. Сценарий планирования не может быть установлен без согласования'");
					
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СценарийПланирования",
					Отказ);
			Иначе 
				
				Если ЗначениеЗаполнено(Выборка.СценарийПланированияСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru = '""%СценарийПланирования%"" отличается от сценария в типовом соглашении ""%СценарийПланированияСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланирования%", ДокументПродажи.СценарийПланирования);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СценарийПланированияСоглашение%", Выборка.СценарийПланированияСоглашение);
				Иначе
					
					ТекстОшибки = НСтр("ru = 'Сценарий планирования в типовом соглашении не определен. Сценарий планирования не может быть установлен без согласования'");
					
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Сценарий планирования'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияВидПлана Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если ЗначениеЗаполнено(Выборка.ВидПланаСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru = 'Вид плана не должен отличаться от значения в типовом соглашении ""%ВидПланаСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПланаСоглашение%", Выборка.ВидПланаСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru = 'Вид плана в типовом соглашении не определен. Вид плана не может быть установлен без согласования'");
					
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВидПлана",
					Отказ);
			Иначе 
				Если ЗначениеЗаполнено(Выборка.ВидПланаСоглашение) Тогда
				
					ТекстОшибки = НСтр("ru = '""%ВидПлана%"" отличается от вида плана в типовом соглашении ""%ВидПланаСоглашение%""'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПлана%", ДокументПродажи.ВидПлана);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидПланаСоглашение%", Выборка.ВидПланаСоглашение);

				Иначе
					
					ТекстОшибки = НСтр("ru = 'Вид плана в типовом соглашении не определен. Вид плана не может быть установлен без согласования'");
					
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Вид плана'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияХозяйственнаяОперация Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Операция не должна отличаться от значения в типовом соглашении ""%Операция%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Операция не должна отличаться от значения в соглашении ""%Операция%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", Выборка.ХозяйственнаяОперацияСоглашение); 
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ХозяйственнаяОперация",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%Операция%"" отличается от операции в типовом соглашении ""%ОперацияСоглашения%""'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%Операция%"" отличается от операции в соглашении ""%ОперацияСоглашения%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", ДокументПродажи.ХозяйственнаяОперация); 
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОперацияСоглашения%", Выборка.ХозяйственнаяОперацияСоглашение); 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Хозяйственная операция'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Признак ""Цена включает НДС"" не должен отличаться от значения в типовом соглашении ""%ЦенаВключаетНДС%""'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении ""%ЦенаВключаетНДС%""'");
			КонецЕсли;
				
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаВключаетНДС%", ?(Выборка.ЦенаВключаетНДССоглашение, НСтр("ru = 'Цена включает НДС'"), НСтр("ru = 'Цена не включает НДС'")));
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ЦенаВключаетНДС",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Цена включает НДС'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияОплатаВВалюте Тогда

			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Признак оплаты в иностранной валюте не должен отличаться от значения в типовом соглашении'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Признак оплаты в иностранной валюте не должен отличаться от значения в соглашении'");
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ОплатаВВалюте",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Признак оплаты в иностранной валюте отличается от оплаты в типовом соглашении'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Признак оплаты в иностранной валюте отличается от оплаты в соглашении'");
				КонецЕсли;
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Оплата'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияДатаНачалаДействия Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Дата начала действия должна быть не меньше, чем дата начала действия типового соглашения ""%ДатаНачалаДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачалаДействияСоглашение%", Формат(Выборка.ДатаНачалаДействияСоглашение, "ДЛФ=DD"));
			
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДатаНачалаДействия",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%ДатаНачала%"" меньше, чем дата начала действия типового соглашения ""%ДатаНачалаДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачалаДействияСоглашение%", Формат(Выборка.ДатаНачалаДействияСоглашение, "ДЛФ=DD"));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачала%", Формат(ДокументПродажи.ДатаНачалаДействия, "ДЛФ=DD"));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Дата начала действия'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияДатаОкончанияДействия Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Дата окончания действия должна быть не больше, чем дата окончания действия типового соглашения ""%ДатаОкончанияДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействияСоглашение%", Формат(Выборка.ДатаОкончанияДействияСоглашение, "ДЛФ=DD"));
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДатаОкончанияДействия",
					Отказ);
			Иначе
				ТекстОшибки = НСтр("ru = '""%ДатаОкончания%"" больше, чем дата окончания действия типового соглашения ""%ДатаОкончанияДействияСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействияСоглашение%", Формат(Выборка.ДатаОкончанияДействияСоглашение, "ДЛФ=DD"));
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончания%", Формат(ДокументПродажи.ДатаОкончанияДействия, "ДЛФ=DD"));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Дата окончания действия'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияГрафикОплаты Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'График оплаты не должен отличаться от значения в типовом соглашении ""%ГрафикОплатыСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'График оплаты не должен отличаться от значения в соглашении ""%ГрафикОплатыСоглашение%""'");
				КонецЕсли;
					
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплатыСоглашение%", Выборка.ГрафикОплатыСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ГрафикОплаты",
					Отказ);
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '""%ГрафикОплаты%"" отличается от графика в типовом соглашении ""%ГрафикОплатыСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = '""%ГрафикОплаты%"" отличается от графика в соглашении ""%ГрафикОплатыСоглашение%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплатыСоглашение%", Выборка.ГрафикОплатыСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплаты%", ДокументПродажи.ГрафикОплаты);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'График оплаты'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru = 'Склад должен входить в группу складов типового соглашения ""%СкладСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Склад не должен отличаться от значения в типовом соглашении ""%СкладСоглашение%""'");
					КонецЕсли;
				Иначе
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru = 'Склад должен входить в группу складов соглашения ""%СкладСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Склад не должен отличаться от значения в соглашении ""%СкладСоглашение%""'");
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Склад",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru = '""%Склад%"" должен входить в группу складов типового соглашения ""%СкладСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = '""%Склад%"" отличается от склада в типовом соглашении ""%СкладСоглашение%""'");
					КонецЕсли;
				Иначе
					Если Выборка.СкладСоглашениеЕстьГруппа Тогда
						ТекстОшибки = НСтр("ru = '""%Склад%"" должен входить в группу складов соглашения ""%СкладСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = '""%Склад%"" отличается от склада в соглашении ""%СкладСоглашение%""'");
					КонецЕсли;
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Склад%", ДокументПродажи.Склад);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Склад'"), ТекстОшибки, МассивОтклонений);
				
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Признак возврата многооборотной тары не должен отличаться от значения в типовом соглашении'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Признак возврата многооборотной тары не должен отличаться от значения в соглашении'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					?(Выборка.ЭтоСоглашение,"ВозвращатьМногооборотнуюТару","ВернутьМногооборотнуюТару"),
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Возврат тары'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияТребуетсяЗалогЗаТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Признак необходимости залога за тару не должен отличаться от значения в типовом соглашении'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Признак необходимости залога за тару не должен отличаться от значения в соглашении'");
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда 
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ТребуетсяЗалогЗаТару",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Залог за тару'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю Тогда
			
			ТекстОшибки = НСтр("ru = 'Способ расчета даты возврата многооборотной тары не должен отличаться от значения в типовом соглашении ""%РассчитыватьДатуВозвратаТарыПоКалендарю%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%РассчитыватьДатуВозвратаТарыПоКалендарю%", 
				?(Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю, НСтр("ru = 'По календарю предприятия'"),НСтр("ru = 'По всем дням'")));
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"РассчитыватьДатуВозвратаТарыПоКалендарю",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Способ расчета даты возврата'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			Если НЕ ВыводитьВОтчет Тогда 
				
				ТекстОшибки = НСтр("ru = 'Срок возврата многооборотной тары не должен отличаться от значения в соглашении (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СрокВозвратаМногооборотнойТары",
					Отказ);
			Иначе 
					
				ТекстОшибки = НСтр("ru = '(%СрокВозвратаТиповое%) отличается от срока в соглашении (%СрокВозврата%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозврата%", Выборка.СрокВозвратаМногооборотнойТары);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокВозвратаТиповое%", ДокументПродажи.СрокВозвратаМногооборотнойТары);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Срок возврата тары'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиДатаВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
				ДокументПродажи,
				Выборка.СрокВозвратаМногооборотнойТары,
				Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю,
				Выборка.КалендарьВозвратаТары);
			
			Если ДатаВозвратаМногооборотнойТары <> ДокументПродажи.ДатаВозвратаМногооборотнойТары Тогда
				ТекстОшибки = НСтр("ru = 'Дата возврата многооборотной тары не должна отличаться от указанной в соглашении ""%ДатаВозвратаМногооборотнойТары%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаВозвратаМногооборотнойТары%", Формат(ДатаВозвратаМногооборотнойТары, "ДЛФ=DD"));
				
				Если Не ВыводитьВОтчет Тогда
					СообщитьПользователюОбОшибке(
						ТекстОшибки,
						ДокументПродажи,
						"ДатаВозвратаМногооборотнойТары",
						Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Дата возврата тары'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКалендарьВозвратаТары Тогда
			
			ТекстОшибки = НСтр("ru = 'Календарь возврата тары не должен отличаться от указанного в соглашении %КалендарьВозвратаТарыСоглашение%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КалендарьВозвратаТарыСоглашение%", Выборка.КалендарьВозвратаТарыСоглашение);
				
			Если Не ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"КалендарьВозвратаТары",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Календарь возврата тары'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСегментНоменклатуры Тогда

			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Сегмент номенклатуры не должен отличаться от значения в типовом соглашении ""%СегментНоменклатурыСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатурыСоглашение%", Выборка.СегментНоменклатурыСоглашение);
			
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СегментНоменклатуры",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%СегментНоменклатуры%"" отличается от сегмента в типовом соглашении ""%СегментНоменклатурыСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатурыСоглашение%", Выборка.СегментНоменклатурыСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатуры%", ДокументПродажи.СегментНоменклатуры);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Сегмент номенклатуры'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияПроцентРучнойСкидки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Процент ручной скидки не должен быть больше значения, чем в типовом соглашении (%ПроцентРучнойСкидки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидки%", Выборка.ПроцентРучнойСкидки);
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПроцентРучнойСкидки",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '(%ПроцентРучнойСкидкиТиповое%%) больше значения в типовом соглашении (%ПроцентРучнойСкидки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидки%", Выборка.ПроцентРучнойСкидки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидкиТиповое%", ДокументПродажи.ПроцентРучнойСкидки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Процент ручной скидки'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияПроцентРучнойНаценки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Процент ручной наценки не должен быть больше значения, чем в типовом соглашении (%ПроцентРучнойНаценки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценки%", Выборка.ПроцентРучнойНаценки);
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ПроцентРучнойНаценки",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '(%ПроцентРучнойНаценкиТиповое%%) больше значения в типовом соглашении (%ПроцентРучнойНаценки%%)'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценки%", Выборка.ПроцентРучнойНаценки);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценкиТиповое%", ДокументПродажи.ПроцентРучнойНаценки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Процент ручной наценки'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияРегулярное Тогда
			ТекстОшибки = НСтр("ru = 'Признак регулярности не должен отличаться от значения в типовом соглашении'");
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Регулярное",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Регулярность'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияПериод Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Период не должен отличаться от значения в типовом соглашении ""%ПериодСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПериодСоглашение%", Выборка.ПериодСоглашение);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Период",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%Период%"" отличается от периода в типовом соглашении ""%ПериодСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПериодСоглашение%", Выборка.ПериодСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Период%", ДокументПродажи.Период);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Период'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияКоличествоПериодов Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Количество периодов не должен быть меньше, чем в типовом соглашении - %КоличествоПериодовСоглашение%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодовСоглашение%", Выборка.КоличествоПериодовСоглашение);
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"КоличествоПериодов",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '%КоличествоПериодов% меньше, чем в типовом соглашении - %КоличествоПериодовСоглашение%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодовСоглашение%", Выборка.КоличествоПериодовСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодов%", ДокументПродажи.КоличествоПериодов);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Количество периодов'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей Тогда

			ТекстОшибки = НСтр("ru = 'Признак использования в работе торговых представителей не должен отличаться от значения в типовом соглашении'");
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ИспользуетсяВРаботеТорговыхПредставителей",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Торговые представители'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияДоступноВнешнимПользователям Тогда

			ТекстОшибки = НСтр("ru = 'Признак доступности внешним пользователям не должен отличаться от значения в типовом соглашении'");
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДоступноВнешнимПользователям",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Внешние пользователи'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Срок поставки не должен быть меньше, чем в типовом соглашении - %СрокПоставкиСоглашение% дн.'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Срок поставки не должен быть меньше, чем в соглашении - %СрокПоставкиСоглашение% дн.'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
		
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"СрокПоставки",
					Отказ);
			Иначе 
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = '%СрокПоставки% дн. меньше, чем в типовом соглашении - %СрокПоставкиСоглашение% дн.'");
				Иначе
					ТекстОшибки = НСтр("ru = '%СрокПоставки% дн. меньше, чем в соглашении - %СрокПоставкиСоглашение% дн.'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставки%", ДокументПродажи.СрокПоставки);
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Срок поставки'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияФормыОплаты Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Форма оплаты не должна отличаться от значения в графике оплаты ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыГрафик);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ФормаОплаты",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%ФормаОплаты%"" отличается от формы оплаты в графике оплаты ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыГрафик);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ДокументПродажи.ФормаОплаты),ДокументПродажи.ФормаОплаты, НСтр("ru = 'Любая'")));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Форма оплаты'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКалендаря Тогда

			Если ЗначениеЗаполнено(Выборка.Календарь) И Не ЗначениеЗаполнено(ДокументПродажи.Календарь) Тогда
				
				ТекстОшибки = НСтр("ru = 'Режим учета отсрочки не должен отличаться от значения в типовом соглашении ""по рабочим дням""'");
				
			ИначеЕсли Не ЗначениеЗаполнено(Выборка.Календарь) И ЗначениеЗаполнено(ДокументПродажи.Календарь) Тогда
				
				ТекстОшибки = НСтр("ru = 'Режим учета отсрочки не должен отличаться от значения в типовом соглашении ""по календарным дням""'");
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Календарь не должен отличаться от значения ""%Календарь%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Календарь%", Выборка.Календарь);
				
			КонецЕсли;
			
			ВидимостьЭтаповОплаты = ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Или Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты");
			
			Если ВидимостьЭтаповОплаты Тогда 
				Поле = "НадписьОплата";
				КлючДанныхСообщения = Неопределено;
			Иначе
				Поле = "ГрафикОплаты";
				КлючДанныхСообщения = ДокументПродажи;
			КонецЕсли;
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					КлючДанныхСообщения,
					Поле,
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Календарь'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияФормыОплатыСоглашения Тогда
			Если НЕ ВыводитьВОтчет Тогда
				ТекстОшибки = НСтр("ru = 'Форма оплаты не должна отличаться от значения в типовом соглашении ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашенияСКлиентом);

				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ФормаОплаты",
					Отказ);
			Иначе 
				ТекстОшибки = НСтр("ru = '""%ФормаОплаты%"" отличается от формы оплаты в типовом соглашении ""%ФормаОплатыГрафик%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашенияСКлиентом);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплаты%", ?(ЗначениеЗаполнено(ДокументПродажи.ФормаОплаты),ДокументПродажи.ФормаОплаты, НСтр("ru = 'Любая'")));
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Форма оплаты'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов Тогда
			
			Если НЕ ВыводитьВОтчет Тогда
				Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
					ТекстОшибки = НСтр("ru = 'Использование договоров не должно отличаться от значения в типовом соглашении ""Требуется указание договора""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Использование договоров не должно отличаться от значения в типовом соглашении ""Договоры не используются""'");
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ИспользуютсяДоговорыКонтрагентов",
					Отказ);
			Иначе 
				Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
					ТекстОшибки = НСтр("ru = '""Договоры не используются"" отличается от значения в типовом соглашении ""Требуется указание договора""'");
				Иначе
					ТекстОшибки = НСтр("ru = '""Требуется указание договора"" отличается от значения в типовом соглашении ""Договоры не используются""'");
				КонецЕсли;
				
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Использование договоров'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияПорядокРасчетов Тогда
			Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
				ТекстОшибки = НСтр("ru = 'Порядок расчетов не должен отличаться от значения в договоре ""%ПорядокРасчетов%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокРасчетов%", Выборка.ПорядокРасчетовСоглашение);
				Если НЕ ВыводитьВОтчет Тогда
					СообщитьПользователюОбОшибке(
						ТекстОшибки,
						ДокументПродажи,
						"ПорядокРасчетов",
						Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Порядок расчетов'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Порядок расчетов не должен отличаться от значения в типовом соглашении ""%ПорядокРасчетов%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Порядок расчетов не должен отличаться от значения в соглашении ""%ПорядокРасчетов%""'");
				КонецЕсли;
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПорядокРасчетов%", Выборка.ПорядокРасчетовСоглашение);
				
				Если НЕ ВыводитьВОтчет Тогда
					СообщитьПользователюОбОшибке(
						ТекстОшибки,
						ДокументПродажи,
						"ПорядокРасчетов",
						Отказ);
				Иначе 
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Порядок расчетов'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиРеализацияБезПереходаПраваСобственности Тогда
			
			ТекстОшибки = 
				НСтр("ru = 'Возможность отгрузки без перехода права собственности не должна отличаться от значения в типовом соглашении.'");
			
			Если НЕ ВыводитьВОтчет Тогда
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ВозможностьОтгрузкиБезПереходаПраваСобственности",
					Отказ);
			Иначе 
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(
					НСтр("ru = 'Отгрузка без перехода права собственности'"), ТекстОшибки, МассивОтклонений);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиМинимальнаяСуммаЗаказа Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru = 'Минимальная сумма заказа не должна отличаться от значения в типовом соглашении ""%МинимальнаяСуммаЗаказа% %Валюта%""'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Сумма заказа меньше, чем минимально допустимая сумма заказа в соглашении ""%МинимальнаяСуммаЗаказа% %Валюта%""'");
			КонецЕсли;
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МинимальнаяСуммаЗаказа%", Выборка.МинимальнаяСуммаЗаказа);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%", Выборка.ВалютаСоглашение);
			
			ЕстьОшибкиМинимальнаяСуммаЗаказа = Выборка.ЕстьОшибкиМинимальнаяСуммаЗаказа;
			Если Выборка.ВалютаСоглашение <> Выборка.Валюта Тогда
				БазоваяВалюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДокументПродажи.Организация);
				СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.ВалютаСоглашение, Выборка.Дата, БазоваяВалюта);
				СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата, БазоваяВалюта);
				НоваяМинимальнаяСуммаЗаказа = РаботаСКурсамиВалютУТ.ПересчитатьПоКурсу(
					Выборка.МинимальнаяСуммаЗаказа,
					СтруктураКурсовСтаройВалюты,
					СтруктураКурсовНовойВалюты);
					
				Если НоваяМинимальнаяСуммаЗаказа <= Выборка.СуммаДокумента Тогда
					
					ЕстьОшибкиМинимальнаяСуммаЗаказа = ЛОЖЬ;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЕстьОшибкиМинимальнаяСуммаЗаказа Тогда
				Если НЕ ВыводитьВОтчет Тогда
					Если Выборка.ЭтоСоглашение Тогда 
						Поле = "МинимальнаяСуммаЗаказа";
					Иначе
						Поле = "СуммаДокумента";
					КонецЕсли;
					СообщитьПользователюОбОшибке(
						ТекстОшибки,
						ДокументПродажи,
						Поле,
						Отказ);
				Иначе
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Мин. сумма заказа'"), ТекстОшибки, МассивОтклонений);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа продажи
//
// Параметры:
// Выборка           - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи   - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ             - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж.
//
Процедура СообщитьОбОшибкахТоварыДокументаПродажи(Знач Выборка,
	                                              Знач ДокументПродажи,
	                                              Отказ,
	                                              ДеревоОтклонений = Неопределено)
	
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25(ДокументПродажи.Дата);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);

		Если Выборка.ЕстьОшибкиЗаполненияЦена Тогда
			
			Если (Выборка.ЭтоКомплектующие)  Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.ЭтоНабор Тогда
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Цена набора должна быть не ниже фиксированной цены в типовом соглашении ""%ЦенаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Цена набора должна быть не ниже фиксированной цены в соглашении ""%ЦенаСоглашение%""'");
				КонецЕсли;
			Иначе
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru = 'Цена должна быть не ниже фиксированной цены в типовом соглашении ""%ЦенаСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Цена должна быть не ниже фиксированной цены в соглашении ""%ЦенаСоглашение%""'");
				КонецЕсли;
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаСоглашение%", Формат(Выборка.ЦенаСоглашение,"ЧДЦ=2"));
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений, Выборка.ЭтоНабор, Выборка.Цена);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
					Отказ);
			КонецЕсли;
		ИначеЕсли Выборка.ЕстьОшибкиЗаполненияВидЦены И (Выборка.ЦенаСоглашение = 0 Или ИспользуетсяЦенообразование25) Тогда
			
			Если (Выборка.ЭтоКомплектующие) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ВидЦеныСоглашение) Тогда
				
				Если ЗначениеЗаполнено (Выборка.ВидЦены) Тогда
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'Вид цены не должен отличаться от вида цены в типовом соглашении ""%ВидЦеныСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Вид цены не должен отличаться от вида цены в соглашении ""%ВидЦеныСоглашение%""'");
					КонецЕсли;
						
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныСоглашение%", Выборка.ВидЦеныСоглашение);
					
				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'Вид цены должен быть заполнен и не должен отличаться от вида цены в типовом соглашении ""%ВидЦеныСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru = 'Вид цены должен быть заполнен и не должен отличаться от вида цены в соглашении ""%ВидЦеныСоглашение%""'");
					КонецЕсли;
						
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныСоглашение%", Выборка.ВидЦеныСоглашение);
					
				КонецЕсли;
				
				Если ВыводитьВОтчет Тогда
					Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВидЦены", ТекстОшибки, ДеревоОтклонений, Выборка.ЭтоНабор, Выборка.Цена);
				Иначе
					СообщитьПользователюОбОшибке(
						ТекстОшибки + АдресОшибки,
						ДокументПродажи,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ВидЦены"),
						Отказ);
				КонецЕсли;
			Иначе
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'В типовом соглашении цены не определены. Вид цены ""%ВидЦены%"" по данному соглашению не может быть установлен без согласования'");
					Иначе
						ТекстОшибки = НСтр("ru = 'В соглашении цены не определены. Вид цены ""%ВидЦены%"" по данному соглашению не может быть установлен без согласования'");
					КонецЕсли;
					
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦены%", Выборка.ВидЦены);
					Если ВыводитьВОтчет Тогда
						Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВидЦены", ТекстОшибки, ДеревоОтклонений, Выборка.ЭтоНабор, Выборка.Цена);
					Иначе
						СообщитьПользователюОбОшибке(
							ТекстОшибки + АдресОшибки,
							ДокументПродажи,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ВидЦены"),
							Отказ);
					КонецЕсли;
				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru = 'В типовом соглашении цены не определены. Цена по данному соглашению не может быть установлена без согласования'");
					Иначе
						ТекстОшибки = НСтр("ru = 'В соглашении цены не определены. Цена по данному соглашению не может быть установлена без согласования'");
					КонецЕсли;
					
					Если ВыводитьВОтчет Тогда
						Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений, Выборка.ЭтоНабор, Выборка.Цена);
					Иначе
						СообщитьПользователюОбОшибке(
							ТекстОшибки + АдресОшибки,
							ДокументПродажи,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
							Отказ);
					КонецЕсли;
				КонецЕсли;
					
			КонецЕсли;

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда

			Если Выборка.ЭтоСоглашение Тогда
				
				ТекстОшибки = НСтр("ru = 'Срок поставки не должен быть меньше, чем в типовом соглашении - %СрокПоставкиСоглашение% дн.'");
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Срок поставки не должен быть меньше, чем в соглашении - %СрокПоставкиСоглашение% дн.'");
				
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "СрокПоставки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СрокПоставки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия тч ЦеновыеГруппы условиям продаж
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений - ДеревоЗначений - Дерево отклонений от условий продаж.
//
Процедура СообщитьОбОшибкахСоответствиеГруппЦенНоменклатурыУсловиямПродаж(Знач Выборка,
	                                                                      Знач ДокументПродажи,
	                                                                      Отказ,
	                                                                      ДеревоОтклонений = Неопределено)
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Группы цен номенклатуры""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);
		
		Если Выборка.ЕстьОшибкиЗаполненияЦеновыеГруппы Тогда

			ТекстОшибки = НСтр("ru = 'Ценовая группа ""%ЦеноваяГруппа%"" отсутствует в типовом соглашении'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Выборка.ЦеноваяГруппа);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ЦеноваяГруппа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ЦеноваяГруппа"),
					Отказ);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияВидЦен Тогда

			ТекстОшибки = НСтр("ru = 'Вид цен не должен отличаться от значения в типовом соглашении ""%ВидЦенСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВидЦен", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ВидЦен"),
					Отказ);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияРучнойСкидки Тогда

			ТекстОшибки = НСтр("ru = 'Процент ручной скидки не должен отличаться от значения в типовом соглашении (%Значение%%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Значение%", Выборка.ПроцентРучнойСкидкиСоглашение);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойСкидки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ПроцентРучнойСкидки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда

			ТекстОшибки = НСтр("ru = 'Процент ручной наценки не должен отличаться от значения в типовом соглашении (%Значение%%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Значение%", Выборка.ПроцентРучнойНаценкиСоглашение);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойНаценки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ПроцентРучнойНаценки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда

			ТекстОшибки = НСтр("ru = 'Срок поставки не должен быть меньше, чем значение в типовом соглашении - %СрокПоставкиСоглашение% дн.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "СрокПоставки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "СрокПоставки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия товаров сегменту номенклатуры
//
// Параметры:
// Выборка           - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи   - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ             - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж.
//
Процедура СообщитьОбОшибкахПринадлежностьТоваровСегментуНоменклатуры(Знач Выборка,
	                                                                 Знач ДокументПродажи,
	                                                                 Отказ,
	                                                                 ДеревоОтклонений = Неопределено)
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		
		Пока Выборка.Следующий() Цикл
			НомерСтроки = Выборка.НомерСтроки;
			АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     НомерСтроки);
			АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);

			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

				ТекстОшибки = НСтр("ru = 'Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" 
				| должна входить в сегмент номенклатуры ""%СегментНоменклатуры%"", определенный в соглашении'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",        Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",      Выборка.Характеристика);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатуры%", Выборка.СегментНоменклатуры);

			Иначе

				ТекстОшибки = НСтр("ru = 'Номенклатура ""%Номенклатура%""
				| должна входить в сегмент номенклатуры ""%СегментНоменклатуры%"", определенный в соглашении'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",        Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СегментНоменклатуры%", Выборка.СегментНоменклатуры);

			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Товар", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Номенклатура"),
					Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия партнера сегменту партнеров
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений.
//
Процедура СообщитьОбОшибкахПринадлежностьПартнераСегментуПартнеров(Знач Выборка,
	                                                               Знач ДокументПродажи,
	                                                               Отказ,
	                                                               МассивОтклонений = Неопределено)
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров") И Выборка.Следующий() Тогда
		Если Выборка.ЕстьОшибкиЗаполненияСегментПартнеров Тогда
			
			ТекстОшибки = НСтр("ru = 'Партнер должен входить в сегмент партнеров ""%СегментПартнеров%"", определенный в типовом соглашении'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментПартнеров%", Выборка.СегментПартнеров); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Партнер'"), ТекстОшибки, МассивОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"Партнер",
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка           - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи   - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ             - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж.
//
Процедура СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Отказ,
	                                                       ДеревоОтклонений = Неопределено,
															МассивОтклонений = Неопределено)
	
	ГрафикПоУмолчанию = Новый ТаблицаЗначений();
	ГрафикПоУмолчанию.Колонки.Добавить("ВариантОплаты");
	ГрафикПоУмолчанию.Колонки.Добавить("ВариантОтсчета");
	ГрафикПоУмолчанию.Колонки.Добавить("ДатаПлатежа", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ГрафикПоУмолчанию.Колонки.Добавить("ПроцентПлатежа");
	ГрафикПоУмолчанию.Колонки.Добавить("СуммаПлатежа");
	ГрафикПоУмолчанию.Колонки.Добавить("ПроцентЗалогаЗаТару");
	ГрафикПоУмолчанию.Колонки.Добавить("СуммаЗалогаЗаТару");
	ГрафикПоУмолчанию.Колонки.Добавить("Сдвиг");
	
	Если Выборка.Следующий() Тогда
		ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
		ПараметрыЗаполнения.ЭтоРасчетыСКлиентами       = Истина;
		ПараметрыЗаполнения.НакладнаяПоЗаказам         = Ложь;
		ПараметрыЗаполнения.ПорядокРасчетов            = Выборка.ПорядокРасчетов;
		ПараметрыЗаполнения.ЭтоЗаказ                   = Выборка.ЭтоЗаказ;
		ПараметрыЗаполнения.ДатаЗаказа                 = ?(Выборка.ЭтоЗаказ,Выборка.Дата,Дата(1,1,1));
		ПараметрыЗаполнения.ДатаСогласования           = Выборка.ДатаСогласования;
		ПараметрыЗаполнения.СуммаОплаты                    = 100; 
		
		Если НЕ Выборка.ЭтоЗаказ Тогда
			ПараметрыЗаполнения.ДатаОтгрузки = Выборка.Дата;
			ПараметрыЗаполнения.СуммаЗалогаЗаТару = ?(Выборка.ПроцентЗалогаЗаТару <> 0,100,0);
		ИначеЕсли Выборка.НеОтгружатьЧастями Тогда
			ПараметрыЗаполнения.ДатаОтгрузки = ?(ЗначениеЗаполнено(Выборка.ДатаОтгрузки), Выборка.ДатаОтгрузки, Выборка.Дата);
			ПараметрыЗаполнения.СуммаЗалогаЗаТару = 0;
		Иначе
			Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументПродажи)) Тогда
				ТаблицаТовары = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументПродажи).СуммыПоЗаказам(ДокументПродажи);
			Иначе
				ТаблицаТовары = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументПродажи.Ссылка).СуммыПоЗаказам(ДокументПродажи);
			КонецЕсли;
			ПараметрыЗаполнения.ДатаОтгрузки = ТаблицаТовары;
			ПараметрыЗаполнения.СуммаЗалогаЗаТару = ТаблицаТовары.Итог("СуммаЗалогаЗаТару");
			ПараметрыЗаполнения.СуммаОплаты       = ТаблицаТовары.Итог("СуммаПлатежа");
		КонецЕсли;
		
		ПараметрыЗаполнения.ДатаПереходаПраваСобственности = Выборка.ДатаПереходаПраваСобственности;
		ПараметрыЗаполнения.Соглашение                     = Выборка.Соглашение;
		
		ПараметрыЗаполнения.ГрафикСоглашенияЗаполнен       = ЭтапыОплатыВызовСервера.ГрафикСоглашенияЗаполнен(Выборка.Соглашение);
		ПараметрыЗаполнения.ГрафикОплаты                   = Выборка.ГрафикОплаты;
		ПараметрыЗаполнения.Календарь                      = Выборка.Календарь;
		
		ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(ГрафикПоУмолчанию, ПараметрыЗаполнения);
	КонецЕсли;
	
	СуммаПроцентов = 0;
	СуммаПроцентовШаблона = 0;
	СуммаПроцентовЗалога = 0;
	СуммаПроцентовЗалогаШаблона = 0;
	
	Выборка.Сбросить();
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Если Выборка.Количество() <> ГрафикПоУмолчанию.Количество() Тогда
			
		ТекстОшибки = НСтр("ru = 'Количество этапов оплаты в документе (%КоличествоЭтаповДокумента%) должно совпадать с количеством этапов в графике (%КоличествоЭтаповГрафика%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповДокумента%", Выборка.Количество());
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповГрафика%",   ГрафикПоУмолчанию.Количество());
		
		Если ВыводитьВОтчет Тогда
			Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Этапы оплаты'"), ТекстОшибки, МассивОтклонений);
		Иначе
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"НадписьЭтапыОплаты",
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	сч = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты ИЛИ ГрафикПоУмолчанию.Количество()-1 < сч Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаГрафикаПоУмолчанию = ГрафикПоУмолчанию[сч];
		
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Этапы оплаты""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);

		Если СтрокаГрафикаПоУмолчанию.ВариантОплаты <> Выборка.ВариантОплаты Тогда

			ТекстОшибки = НСтр("ru = 'Вариант контроля отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", СтрокаГрафикаПоУмолчанию.ВариантОплаты); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВариантОплаты", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					"НадписьЭтапыОплаты",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаГрафикаПоУмолчанию.ДатаПлатежа < Выборка.ДатаПлатежа Тогда
			
			ТекстОшибки = НСтр("ru = 'Дата платежа должна быть не больше, чем в графике оплаты ""%ДатаПлатежаШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПлатежаШаблона%", Формат(СтрокаГрафикаПоУмолчанию.ДатаПлатежа, "ДЛФ=DD")); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ДатаПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					"НадписьЭтапыОплаты",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Проверка отклонений процентов платежей
		СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
		СуммаПроцентовШаблона = СуммаПроцентовШаблона + СтрокаГрафикаПоУмолчанию.ПроцентПлатежа;
		Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
			
			ТекстОшибки = НСтр("ru = 'Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны быть меньше процентов по графику соглашения (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентов);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовШаблона);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					"НадписьЭтапыОплаты",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		СуммаПроцентовЗалога = СуммаПроцентовЗалога + Выборка.ПроцентЗалогаЗаТару;
		СуммаПроцентовЗалогаШаблона = СуммаПроцентовЗалогаШаблона + СтрокаГрафикаПоУмолчанию.ПроцентЗалогаЗаТару;
		Если СуммаПроцентовЗалога < СуммаПроцентовЗалогаШаблона Тогда
			
			ТекстОшибки = НСтр("ru = 'Проценты залога за тару до следующего платежа по графику (""%ПроцентЗалогаЗаТару%%"") не должны быть меньше процентов по графику соглашения (""%ПроцентЗалогаЗаТаруШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентЗалогаЗаТару%", СуммаПроцентовЗалога);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентЗалогаЗаТаруШаблона%", СуммаПроцентовЗалогаШаблона);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентЗалогаЗаТару", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					"НадписьЭтапыОплаты",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		сч = сч + 1 ;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках вхождения цен документа продажи в допустимый диапазон.
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ИспользоватьСкидкиНаценки - Булево - Признак использования скидок
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж.
//
Процедура СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Отказ,
	                                                       ИспользоватьСкидкиНаценки,
	                                                       ДеревоОтклонений = Неопределено)
	
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);

	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Если Выборка.ЕстьОшибкиМинимальноДопустимаяЦена Тогда

			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru = 'Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",             Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",           Выборка.Характеристика);  
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МинимальноДопустимаяЦена%", Выборка.МинимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",               Выборка.ВалютаЦены);

			Иначе

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru = 'Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Цена на номенклатуру ""%Номенклатура%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",             Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МинимальноДопустимаяЦена%", Выборка.МинимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",               Выборка.ВалютаЦены);

			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
					Отказ);
			КонецЕсли;
		КонецЕсли;

		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда

			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru = 'Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);  
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%", Выборка.ВалютаЦены);

			Иначе

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru = 'Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru = 'Цена на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);

			КонецЕсли;
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Цена", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
					Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе продажи
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеУслугРаботВДокументеПродажи(Знач Выборка,
	                                                     Знач ДокументПродажи,
	                                                     Знач ИмяТЧ,
	                                                     Знач ПредставлениеТЧ,
	                                                     Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Нельзя указывать номенклатуру с типом ""Услуга"" и ""Работа"" (строка %НомерСтроки% списка ""%ПредставлениеТЧ%"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",    Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг и тары в документе продажи
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеУслугТарыВДокументеПродажи(Знач Выборка,
	                                                     Знач ДокументПродажи,
	                                                     Знач ИмяТЧ,
	                                                     Знач ПредставлениеТЧ,
	                                                     Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Нельзя указывать номенклатуру с типом ""Услуга"" или ""Тара"" (строка %НомерСтроки% списка ""%ПредставлениеТЧ%"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",    Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия товаров ГИСМ в документе продажи
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеТоваровГИСМВДокументеПродажи(Знач Выборка,
	                                                     Знач ДокументПродажи,
	                                                     Знач ИмяТЧ,
	                                                     Знач ПредставлениеТЧ,
	                                                     Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Нельзя указывать номенклатуру с типом ""Продукция, маркируемая для ГИСМ"" (строка %НомерСтроки% списка ""%ПредставлениеТЧ%"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",    Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия алкогольной продукции в документе продажи
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеАлкогольнойПродукцииВДокументеПродажи(Знач Выборка,
	                                                     Знач ДокументПродажи,
	                                                     Знач ИмяТЧ,
	                                                     Знач ПредставлениеТЧ,
	                                                     Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Нельзя указывать номенклатуру с типом ""Алкогольная (спиртосодержащая) продукция"" (строка %НомерСтроки% списка ""%ПредставлениеТЧ%"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",    Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия продукции ВЕТИС в документе продажи
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахНаличиеТоваровВЕТИСВДокументеПродажи(Знач Выборка,
	                                                     Знач ДокументПродажи,
	                                                     Знач ИмяТЧ,
	                                                     Знач ПредставлениеТЧ,
	                                                     Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru = 'Нельзя указывать номенклатуру с типом ""Подконтрольная продукция ВЕТИС"" (строка %НомерСтроки% списка ""%ПредставлениеТЧ%"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",    Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе продажи
//
// Параметры:
// Выборка         - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж.
//
Процедура СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Отказ,
	                                                       ДеревоОтклонений = Неопределено)
	
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		
		Если (Выборка.ЭтоКомплектующие)  Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = Выборка.НомерСтроки;
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойСкидки Тогда
		
			Если Выборка.ЭтоНабор Тогда
				ТекстОшибки = НСтр("ru = 'Ручная скидка на набор превышает максимально допустимую скидку ""%МаксимальнаяСуммаРучнойСкидки% %""'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Ручная скидка превышает максимально допустимую скидку ""%МаксимальнаяСуммаРучнойСкидки% %""'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойСкидки%", Выборка.МаксимальнаяСуммаРучнойСкидки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                   Выборка.НомерСтроки);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойСкидки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
					Отказ);
			КонецЕсли;
			
		ИначеЕсли Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
			
			Если Выборка.ЭтоНабор Тогда
				ТекстОшибки = НСтр("ru = 'Ручная наценка на набор превышает максимально допустимую наценку ""%МаксимальнаяСуммаРучнойНаценки% %""'");
			Иначе
				ТекстОшибки = НСтр("ru = 'Ручная наценка превышает максимально допустимую наценку ""%МаксимальнаяСуммаРучнойНаценки% %""'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойНаценки%", Выборка.МаксимальнаяСуммаРучнойНаценки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                    Выборка.НомерСтроки);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентРучнойСкидки", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
					Отказ);
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения о том, что скидки не рассчитаны
//
// Параметры:
// ДокументПродажи - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа.
//
Процедура СообщитьОбОшибкахСкидкиНеРассчитаны(Знач ДокументПродажи, Отказ)

	ТекстОшибки = НСтр("ru = 'Автоматические скидки (наценки) не рассчитаны. Необходимо осуществить расчет автоматических скидок (наценок) в документе'");
	
	СообщитьПользователюОбОшибке(
		ТекстОшибки,
		ДокументПродажи,
		,
		Отказ);
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности количества этапов оплаты соглашения
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений.
//
Процедура СообщитьОбОшибкахКорректностьКоличестваЭтаповОплатыСоглашения(Знач Выборка,
	                                                                    Знач ДокументПродажи,
	                                                                    Отказ,
	                                                                    МассивОтклонений = Неопределено)
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Выборка.Следующий();
	Если Выборка.ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения Тогда
			
		ТекстОшибки = НСтр("ru = 'Количество этапов оплаты в индивидуальном соглашении (%КоличествоЭтаповСоглашения%) должно совпадать с количеством этапов в типовом соглашении (%КоличествоЭтаповСоглашенияОснования%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповСоглашения%", Выборка.КоличествоЭтаповСоглашения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповСоглашенияОснования%",   Выборка.КоличествоЭтаповСоглашенияОснования);
		
		Если ВыводитьВОтчет Тогда
			Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Этапы оплаты'"), ТекстОшибки, МассивОтклонений);
		Иначе
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"КомандаПереходаКОплате",
				Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// ДеревоОтклонений  - ДеревоЗначений - Дерево с отклонениями табличной части от условий продаж.
//
Процедура СообщитьОбОшибкахКорректностьЭтаповОплатыСоглашения(Знач Выборка,
	                                                          Знач ДокументПродажи,
	                                                          Отказ,
	                                                          ДеревоОтклонений = Неопределено)

	СуммаПроцентов = 0;
	СуммаПроцентовШаблона = 0;
	СуммаПроцентовЗалога = 0;
	СуммаПроцентовЗалогаШаблона = 0;
	ВыводитьВОтчет = (ДеревоОтклонений <> Неопределено);
	
	Пока Выборка.Следующий() Цикл
		НомерСтроки = Выборка.НомерСтроки;
		Если Выборка.ЭтапШаблонаОтсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		АдресОшибки = " " + НСтр("ru = 'в строке %НомерСтроки% списка ""Этапы оплаты""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", НомерСтроки);

		Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда

			ТекстОшибки = НСтр("ru = 'Вариант оплаты отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", Выборка.ВариантОплатыШаблона); 
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ВариантОплаты", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					"КомандаПереходаКОплате",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.СдвигШаблона < Выборка.Сдвиг Тогда

			ТекстОшибки = НСтр("ru = 'Срок должен быть не больше, чем в типовом соглашении ""%СдвигШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СдвигШаблона%", Выборка.СдвигШаблона); 
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "Сдвиг", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					"КомандаПереходаКОплате",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Проверка отклонений процентов платежей
		СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
		СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
		Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
			
			ТекстОшибки = НСтр("ru = 'Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны быть меньше процентов по соглашению (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентов);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовШаблона);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентПлатежа", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					"КомандаПереходаКОплате",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		СуммаПроцентовЗалога = СуммаПроцентовЗалога + Выборка.ПроцентЗалогаЗаТару;
		СуммаПроцентовЗалогаШаблона = СуммаПроцентовЗалогаШаблона + Выборка.ПроцентЗалогаЗаТаруШаблона;
		Если СуммаПроцентовЗалога < СуммаПроцентовЗалогаШаблона Тогда
			
			ТекстОшибки = НСтр("ru = 'Проценты залога за тару до следующего платежа по графику (""%ПроцентЗалогаЗаТару%%"") не должны быть меньше процентов по соглашению (""%ПроцентЗалогаЗаТаруШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентЗалогаЗаТару%", СуммаПроцентов);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентЗалогаЗаТаруШаблона%", СуммаПроцентовШаблона);
			
			Если ВыводитьВОтчет Тогда
				Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеСтрокиВДеревоОтклонений(НомерСтроки, "ПроцентЗалогаЗаТару", ТекстОшибки, ДеревоОтклонений);
			Иначе
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					"КомандаПереходаКОплате",
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения возвращаемых товаров
//
// Параметры:
// ТаблицаОшибок          - ТаблицаЗначений - Выгрузка результата запроса
// ВозвратПоЧеку          - Булево
//
Процедура СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Знач ТаблицаОшибок, ВозвратПоЧеку)
	
	Для каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		
		Если ЗначениеЗаполнено(СтрокаОшибки.ДокументРеализации) И ТипЗнч(СтрокаОшибки.ДокументРеализации) = Тип("ДокументСсылка.ПередачаТоваровХранителю")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОшибки.ДокументРеализации, "ХозяйственнаяОперация") = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			СообщениеОбОшибке = НСтр("ru = 'Возврат по номенклатуре %Номенклатура% \ %Характеристика%%Серия%%Назначение% превышает количество переданных товаров на комиссию по документу %НомерРеализации% на %Количество% %ЕдиницаИзмерения%'");
		Иначе
			СообщениеОбОшибке = НСтр("ru = 'Возврат по номенклатуре %Номенклатура% \ %Характеристика%%Серия%%Назначение% превышает количество реализованных товаров по документу продажи %НомерРеализации% на %Количество% %ЕдиницаИзмерения%'");
		КонецЕсли;
		
		Если СтрокаОшибки.Количество < 0 Тогда
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Номенклатура%",         СтрокаОшибки.Номенклатура);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Характеристика%",       СтрокаОшибки.Характеристика);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Серия%",                "\ " + СтрокаОшибки.Серия);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Количество%",          -СтрокаОшибки.Количество);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%ЕдиницаИзмерения%",     СтрокаОшибки.ЕдиницаИзмерения);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерРеализации%",      СтрокаОшибки.НомерРеализации);
			Если ВозвратПоЧеку Тогда 
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, НСтр("ru = 'документу продажи'"), НСтр("ru = 'чеку ККМ'"));
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Назначение%",      "");
			ИначеЕсли ЗначениеЗаполнено(СтрокаОшибки.Назначение) Тогда
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Назначение%",      "\ " +СтрокаОшибки.Назначение);
			Иначе
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Назначение%",      "");
			КонецЕсли; 
			Если НЕ ЗначениеЗаполнено(СтрокаОшибки.Характеристика) Тогда
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "\",      "");
			КонецЕсли;	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения суммы предоплаты
//
// Параметры:
// Выборка          - ВыборкаИзРезультатаЗапроса - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект - Объект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
// МассивОтклонений - Массив - Массив отклонений.
//
Процедура СообщитьОбОшибкахСоответствиеСуммыПредоплатыГрафикуОплат(Знач Выборка,
	                                                          Знач ДокументПродажи,
	                                                          Отказ,
	                                                          МассивОтклонений = Неопределено)
	ВыводитьВОтчет = (МассивОтклонений <> Неопределено);
	
	Если Выборка.Следующий() И Выборка.ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат Тогда
		
		ТекстОшибки = НСтр("ru = 'Сумма предоплаты не соответствует сумме, рассчитанной по графику оплаты соглашения %СуммаПредоплатыПоГрафику%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПредоплатыПоГрафику%", Формат(Выборка.СуммаПредоплатыПоГрафику, "ЧДЦ=2; ЧН=0,00"));
		
		Если ВыводитьВОтчет Тогда
			Отчеты.ОтклоненияОтУсловийПродаж.ДобавитьОтклонениеШапкиВМассивОтклонений(НСтр("ru = 'Предоплата'"), ТекстОшибки, МассивОтклонений);
		Иначе
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"КомандаПереходаКОплате",
				Отказ);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункцииДляРасчетаЦенПродажи

// Возвращает текст запроса временной таблицы товаров списания
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы.
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы.
//
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваровСписания(ИмяТаблицы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение КАК Назначение
	|ПОМЕСТИТЬ ПараметрИмяТаблицы
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПараметрИмяТаблицы", ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса временной таблицы себестоимости товаров по номерам строк.
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров.
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы.
//
Функция ПолучитьТекстЗапросаВременнойТаблицыСебестоимостей(ИмяТаблицы, ИмяВременнойТаблицыТоваров)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТоваров.НомерСтроки,
	|	ВременнаяТаблицаТоваров.Номенклатура,
	|	ВременнаяТаблицаТоваров.Характеристика,
	|	ВременнаяТаблицаТоваров.Назначение,
	|	Аналитика.КлючАналитики КАК КлючАналитикиУчетаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаТоваровСКлючамиАналитики
	|ИЗ 
	|	&ИмяВременнойТаблицыТоваров КАК ВременнаяТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО Аналитика.Номенклатура = ВременнаяТаблицаТоваров.Номенклатура
	|			И Аналитика.Характеристика = ВременнаяТаблицаТоваров.Характеристика
	|			И Аналитика.Назначение = ВременнаяТаблицаТоваров.Назначение
	|			И Аналитика.МестоХранения = &Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ЦеныНоменклатуры.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ЦеныНоменклатуры.Стоимость,
	|	ЦеныНоменклатуры.СтоимостьДопРасходы,
	|	ЦеныНоменклатуры.СтоимостьЗабалансовая,
	|	ЦеныНоменклатуры.СтоимостьБезНДС,
	|	ЦеныНоменклатуры.СтоимостьДопРасходыБезНДС,
	|	ЦеныНоменклатуры.Трудозатраты,
	|	ЦеныНоменклатуры.ПостатейныеПостоянныеСНДС,
	|	ЦеныНоменклатуры.ПостатейныеПеременныеСНДС,
	|	ЦеныНоменклатуры.ПостатейныеПостоянныеБезНДС,
	|	ЦеныНоменклатуры.ПостатейныеПеременныеБезНДС,
	|	ЦеныНоменклатуры.СтоимостьРегл,
	|	ЦеныНоменклатуры.СтоимостьЗабалансоваяРегл,
	|	ЦеныНоменклатуры.ДопРасходыРегл,
	|	ЦеныНоменклатуры.ТрудозатратыРегл,
	|	ЦеныНоменклатуры.ПостатейныеПостоянныеРегл,
	|	ЦеныНоменклатуры.ПостатейныеПеременныеРегл,
	|	ЦеныНоменклатуры.ПостояннаяРазница,
	|	ЦеныНоменклатуры.ВременнаяРазница,
	|	ЦеныНоменклатуры.СтоимостьУпр,
	|	ЦеныНоменклатуры.ДопРасходыУпр,
	|	ЦеныНоменклатуры.ТрудозатратыУпр,
	|	ЦеныНоменклатуры.ПостатейныеПостоянныеУпр,
	|	ЦеныНоменклатуры.ПостатейныеПеременныеУпр
	|ПОМЕСТИТЬ ВтЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.СтоимостьТоваров.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	|			(АналитикаУчетаНоменклатуры, Организация) В
	|				(ВЫБРАТЬ
	|					Таблица.КлючАналитикиУчетаНоменклатуры,
	|					&Организация
	|				ИЗ
	|					ТаблицаТоваровСКлючамиАналитики КАК Таблица)) КАК ЦеныНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ОтносительныеКурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ
	|	ВтКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК
	|		ОтносительныеКурсыВалютСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		ТаблицаТоваровСКлючамиАналитики.НомерСтроки КАК НомерСтроки,
	|		ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатуры.Стоимость, 0)
	|						 + ЕСТЬNULL(ЦеныНоменклатуры.СтоимостьДопРасходы, 0)
	|						 + ЕСТЬNULL(ЦеныНоменклатуры.Трудозатраты, 0)
	|						 + ЕСТЬNULL(ЦеныНоменклатуры.ПостатейныеПостоянныеСНДС, 0)
	|						 + ЕСТЬNULL(ЦеныНоменклатуры.ПостатейныеПеременныеСНДС, 0)) КАК ЧИСЛО(31,2)) 
	|		* МАКСИМУМ(ВЫБОР
	|			КОГДА &Валюта <> ВалютаУпр.Значение
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыЦены.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыЦены.КурсЧислитель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыДокумента.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыДокумента.КурсЧислитель, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыЦены.КурсЧислитель * КурсВалютыДокумента.КурсЗнаменатель)
	|							/ (КурсВалютыДокумента.КурсЧислитель * КурсВалютыЦены.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Цена,
	|		ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатуры.СтоимостьБезНДС, 0)
	|						 + ЕСТЬNULL(ЦеныНоменклатуры.СтоимостьДопРасходыБезНДС, 0)
	|						 + ЕСТЬNULL(ЦеныНоменклатуры.Трудозатраты, 0)
	|						 + ЕСТЬNULL(ЦеныНоменклатуры.ПостатейныеПостоянныеБезНДС, 0)
	|						 + ЕСТЬNULL(ЦеныНоменклатуры.ПостатейныеПеременныеБезНДС, 0)) КАК ЧИСЛО(31,2)) 
	|		* МАКСИМУМ(ВЫБОР
	|			КОГДА &Валюта <> ВалютаУпр.Значение
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыЦены.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыЦены.КурсЧислитель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыДокумента.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыДокумента.КурсЧислитель, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыЦены.КурсЧислитель * КурсВалютыДокумента.КурсЗнаменатель)
	|							/ (КурсВалютыДокумента.КурсЧислитель * КурсВалютыЦены.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЦенаБезНДС,
	|		ВЫРАЗИТЬ(СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатуры.СтоимостьЗабалансовая, 0)) КАК ЧИСЛО(31,2))
	|		* МАКСИМУМ(ВЫБОР
	|			КОГДА &Валюта <> ВалютаУпр.Значение
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсВалютыЦены.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыЦены.КурсЧислитель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыДокумента.КурсЗнаменатель, 0) > 0
	|							И ЕСТЬNULL(КурсВалютыДокумента.КурсЧислитель, 0) > 0
	|						ТОГДА 
	|							(КурсВалютыЦены.КурсЧислитель * КурсВалютыДокумента.КурсЗнаменатель)
	|							/ (КурсВалютыДокумента.КурсЧислитель * КурсВалютыЦены.КурсЗнаменатель)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ЦенаЗабаланс
	|ПОМЕСТИТЬ ПараметрИмяТаблицы
	|ИЗ
	|	ТаблицаТоваровСКлючамиАналитики КАК ТаблицаТоваровСКлючамиАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ТаблицаТоваровСКлючамиАналитики.КлючАналитикиУчетаНоменклатуры = ЦеныНоменклатуры.АналитикаУчетаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалютыДокумента
	|		ПО КурсВалютыДокумента.Валюта = &Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.ВалютаУправленческогоУчета КАК ВалютаУпр
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсВалютыЦены
	|		ПО КурсВалютыЦены.Валюта = ВалютаУпр.Значение
	|		
	|СГРУППИРОВАТЬ ПО 
	|ТаблицаТоваровСКлючамиАналитики.НомерСтроки;
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицыТоваров", ИмяВременнойТаблицыТоваров);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПараметрИмяТаблицы", ИмяТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИнициализацииПравилПродаж

Функция ШаблонУсловийПродаж()
	
	Возврат Новый Структура("
		|Партнер,
		|Контрагент,
		|КонтактноеЛицо,
		|Соглашение,
		|Организация,
		|Валюта,
		|ВалютаВзаиморасчетов,
		|Период,
		|ГрафикОплаты,
		|ФормаОплаты,
		|ОплатаВВалюте,
		|ГруппаФинансовогоУчета,
		|СтатьяДвиженияДенежныхСредств,
		|СуммаДокумента,
		|Регулярное,
		|КоличествоПериодов,
		|СрокПоставки,
		|ВидЦен,
		|ЦенаВключаетНДС,
		|ИспользуетсяВРаботеТорговыхПредставителей,
		|Склад,
		|СегментНоменклатуры,
		|Типовое,
		|ДатаНачалаДействия,
		|ДатаОкончанияДействия,
		|ХозяйственнаяОперация,
		|ОграничиватьРучныеСкидки,
		|ПроцентРучнойСкидки,
		|ПроцентРучнойНаценки,
		|СпособРасчетаВознаграждения,
		|ПроцентВознаграждения,
		|УдержатьВознаграждение,
		|ИспользуютсяДоговорыКонтрагентов,
		|ПорядокРасчетов,
		|ДоступноВнешнимПользователям,
		|СтатусСоглашения,
		|ВозвращатьМногооборотнуюТару,
		|СрокВозвратаМногооборотнойТары,
		|РассчитыватьДатуВозвратаТарыПоКалендарю,
		|КалендарьВозвратаТары,
		|ТребуетсяЗалогЗаТару,
		|ВозможнаРеализацияБезПереходаПраваСобственности,
		|ОбеспечиватьЗаказыОбособленно,
		|Календарь,
		|ЧастотаЗаказа,
		|МинимальнаяСуммаЗаказа,
		|НаправлениеДеятельности,
		|КомиссионерВедетУчетПоРНПТ,
		|НоваяСхемаКомиссии
		|");
		
КонецФункции

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

// Возвращает остаток допустимого кредита по данным расчетов с клиентом и допустимой суммы задолженности.
//
// Параметры:
//	Договор          - СправочникСсылка.ДоговорыКонтрагентов - Договор, по которому определяется задолженность клиента
//	ДопустимыйКредит - Число - Значение допустимой суммы задолженности.
//
// Возвращаемое значение:
//	Число - Остаток допустимого кредита
//
Функция ОстатокДопустимогоКредита(Договор, ДопустимыйКредит)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток + РасчетыСКлиентамиОстатки.ОтгружаетсяОстаток КАК ОстатокДолга
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|		,
	|		АналитикаУчетаПоПартнерам В (
	|			ВЫБРАТЬ
	|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|			ИЗ
	|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|			ГДЕ
	|				АналитикаПоПартнерам.Договор = &Договор
	|			)
	|	) КАК РасчетыСКлиентамиОстатки
	|");
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОстатокДопустимогоКредита = ДопустимыйКредит - Выборка.ОстатокДолга;
	Иначе
		ОстатокДопустимогоКредита = ДопустимыйКредит;
	КонецЕсли;
	
	Возврат ОстатокДопустимогоКредита;
	
КонецФункции

// Возвращает сумму просроченной задолженности по данным расчетов с клиентом
//
// Параметры:
//	Договор       - СправочникСсылка.ДоговорыКонтрагентов - Договор, по которому определяется задолженность клиента
//	ДатаДокумента - Дата - Дата документа, для которого выполняется контроль суммы просроченной задолженности.
//
// Возвращаемое значение:
//	Число - Сумма просроченной задоженности
//
Функция СуммаПросроченнойЗадолженности(Договор, ДатаДокумента)
	
	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСКлиентамиОстатки.ДолгОстаток КАК ПросроченнаяЗадолженность
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
		|		,
		|		АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|			ГДЕ
		|				АналитикаПоПартнерам.Договор = &Договор
		|			) И ДатаПлановогоПогашения < &ПериодКонтроляСрокаДолга
		|	) КАК РасчетыСКлиентамиОстатки
		|
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.ДолгОстаток > 0
		|");
		Запрос.УстановитьПараметр("ПериодКонтроляСрокаДолга", НачалоДня(Макс(ТекущаяДатаСеанса(), ДатаДокумента)));
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток >
		|			РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток ТОГДА
		|		РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.СуммаОстаток
		|	КОНЕЦ), 0) КАК ПросроченнаяЗадолженность
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		&ПериодКонтроляСрокаДолга,
		|		АналитикаУчетаПоПартнерам В (
		|			ВЫБРАТЬ
		|				АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
		|			ИЗ
		|				РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
		|			ГДЕ
		|				АналитикаПоПартнерам.Договор = &Договор
		|			)
		|	) КАК РасчетыСКлиентамиОстатки
		|
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
		|	И (РасчетыСКлиентамиОстатки.КОплатеОстаток - РасчетыСКлиентамиОстатки.ОплачиваетсяОстаток) > 0
		|");
		Запрос.УстановитьПараметр("ПериодКонтроляСрокаДолга", Макс(КонецДня(ТекущаяДатаСеанса()), КонецДня(ДатаДокумента)));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Договор", Договор);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Если Выборка.Следующий() Тогда
		СуммаПросроченнойЗадолженности = Выборка.ПросроченнаяЗадолженность;
	Иначе
		СуммаПросроченнойЗадолженности = 0;
	КонецЕсли;
	
	Возврат СуммаПросроченнойЗадолженности;
	
КонецФункции

// Вызывает исключение, если партнер не является клиентом
//
// Параметры:
//	Партнер - СправочникСсылка.Партнеры - Проверяемый партнер.
//
Процедура ПроверитьВозможностьВводаНаОснованииПартнераКлиента(Партнер) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерКлиент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "Клиент");
	
	Если Не ПартнерКлиент Тогда
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			ТекстОшибки = НСтр("ru = 'Контрагент не является клиентом. Ввод на основании доступен только для клиента.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'Партнер не является клиентом. Ввод на основании доступен только для клиента.'");
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗапретОтгрузки(Партнер, Отказ) Экспорт
	
	ИспользоватьЗапретОтгрузки = ПолучитьФункциональнуюОпцию("ИспользоватьЗапретОтгрузки");
	
	ТекстОшибки = НСтр("ru = 'Клиенту ""%Партнер%"" запрещена отгрузка.'");
	ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Партнер%", Партнер);
	
	Если Партнер.Клиент И ИспользоватьЗапретОтгрузки 
		И НЕ ПраваПользователяПовтИсп.ОтгрузкаПартнерамЗапрещенныхСегментов() Тогда
		
		Если СегментыСервер.ПартнерВходитВСегментыЗапретаОтгрузки(Партнер) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.Партнер",
				,
				Отказ);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыОпределенияСебестоимости(Объект)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НалогообложениеНДС",Объект.НалогообложениеНДС);
	СтруктураПараметров.Вставить("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация));
	СтруктураПараметров.Вставить("ИспользоватьРеглУчет", ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет"));
	
	Возврат СтруктураПараметров
	
КонецФункции

Функция ОперацииИспользующиеДоговораКонтрагентов()
	
	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОтХранителя);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ВыкупТоваровХранителем);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПорчаТоваровУХранителя);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СписаниеНедостачЗаСчетПоклажедателя);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.СписаниеНедостачЗаСчетКомитента);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеИзлишковТоваровВПользуКомитента);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ОприходованиеИзлишковТоваровВПользуПоклажедателя);
	Возврат Операции;
	
КонецФункции

// Функция возвращает признак наличия в документе реквизитоа "ЦенаВключаетНДС".
// Используется для определния необходимости передачи ссылки при заполнении вида цен.
//
// Параметры:
//   Документ - ДокументСсылка - Проверяемый документ.
//
// Возвращаемое значение:
//   Булево - признак наличия в документе реквизита "ЦенаВключаетНДС".
//
Функция ВДокументеНеобходимоЗаполнятьПризнакЦенаВключаетНДС(Документ)
	
	Результат = Истина;
	
	Если Документ = Неопределено Тогда
		Результат = Ложь;
	Иначе
		ИмяОбъектаМетаданных = Документ.Метаданные().ПолноеИмя();
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
		
		Если МетаданныеОбъекта = Неопределено 
			ИЛИ Не ОбщегоНазначения.ЕстьРеквизитОбъекта("ЦенаВключаетНДС", МетаданныеОбъекта) Тогда
				Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСокращенныеНаименованияДокумента(ТипДокумента)
	
	СокращенныеНаименования = Новый Структура("Сокращенное, ВинительныйПадеж, МножественноеЧисло", "", "", "");
	
	Если ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		СокращенныеНаименования.Сокращенное 		= НСтр("ru = 'Реализация'");
		СокращенныеНаименования.ВинительныйПадеж 	= НСтр("ru = 'Реализацию'");
		СокращенныеНаименования.МножественноеЧисло 	= НСтр("ru = 'Реализации'");
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		СокращенныеНаименования.Сокращенное 		= НСтр("ru = 'Акт'");
		СокращенныеНаименования.ВинительныйПадеж 	= НСтр("ru = 'Акт'");
		СокращенныеНаименования.МножественноеЧисло 	= НСтр("ru = 'Акты'");
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
		СокращенныеНаименования.Сокращенное 		= НСтр("ru = 'ПКО'");
		СокращенныеНаименования.ВинительныйПадеж 	= НСтр("ru = 'ПКО'");
		СокращенныеНаименования.МножественноеЧисло 	= НСтр("ru = 'ПКО'");
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровХранителю") Тогда
		СокращенныеНаименования.Сокращенное 		= НСтр("ru = 'Передача товаров'");
		СокращенныеНаименования.ВинительныйПадеж 	= НСтр("ru = 'Передачу товаров'");
		СокращенныеНаименования.МножественноеЧисло 	= НСтр("ru = 'Передачи товаров'");
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения") Тогда
		СокращенныеНаименования.Сокращенное 		= НСтр("ru = 'Отгрузка с хранения'");
		СокращенныеНаименования.ВинительныйПадеж 	= НСтр("ru = 'Отгрузку с хранения'");
		СокращенныеНаименования.МножественноеЧисло 	= НСтр("ru = 'Отгрузки с хранения'");
	КонецЕсли;
	
	Возврат СокращенныеНаименования;
	
КонецФункции


// Добавляет запрос в пакет запросов для заполнения данных контрагента по документу приобретения при обработке 
// строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗапросаДанныеПоДокументуПриобретения(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
		"ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках",
		СтруктураДействий,
		КэшированныеЗначения) Тогда
	
		ТекстЗапроса = "
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	ВЫБОР 
			|		КОГДА &УсловиеПоТипу ТОГДА ИсточникДанных.Контрагент
			|	КОНЕЦ КАК Контрагент
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных";
		
		ТипыДокументовВКолонкеДокументПриобретения = ПакетнаяОбработкаТабличнойЧастиСервер.ТипКолонкиВИсточникеДанных("ДокументПриобретения", ОписаниеЗапроса).Типы();
		
		ВыразитьПоТипам = Новый Массив();
		
		Если ТипыДокументовВКолонкеДокументПриобретения.Найти(Тип("ДокументСсылка.ВозвратТоваровПоставщику")) <> Неопределено Тогда
			ВыразитьПоТипам.Добавить("		КОГДА ТИПЗНАЧЕНИЯ(ИсточникДанных.ДокументПриобретения) = ТИП(Документ.ВозвратТоваровПоставщику) ТОГДА
										|			ВЫРАЗИТЬ(ИсточникДанных.ДокументПриобретения КАК Документ.ВозвратТоваровПоставщику).Контрагент
										|");
		КонецЕсли;
		
		Если ТипыДокументовВКолонкеДокументПриобретения.Найти(Тип("ДокументСсылка.КорректировкаПриобретения")) <> Неопределено Тогда
			ВыразитьПоТипам.Добавить("		КОГДА ТИПЗНАЧЕНИЯ(ИсточникДанных.ДокументПриобретения) = ТИП(Документ.КорректировкаПриобретения) ТОГДА
										|			ВЫРАЗИТЬ(ИсточникДанных.ДокументПриобретения КАК Документ.КорректировкаПриобретения).Контрагент
										|");
		КонецЕсли;
		
		Если ТипыДокументовВКолонкеДокументПриобретения.Найти(Тип("ДокументСсылка.ПриобретениеТоваровУслуг")) <> Неопределено Тогда
			ВыразитьПоТипам.Добавить("		КОГДА ТИПЗНАЧЕНИЯ(ИсточникДанных.ДокументПриобретения) = ТИП(Документ.ПриобретениеТоваровУслуг) ТОГДА
										|			ВЫРАЗИТЬ(ИсточникДанных.ДокументПриобретения КАК Документ.ПриобретениеТоваровУслуг).Контрагент
										|");
		КонецЕсли;
		
		ЧастьЗапроса  = СтрСоединить(ВыразитьПоТипам, Символы.ПС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КОГДА &УсловиеПоТипу ТОГДА ИсточникДанных.Контрагент", ЧастьЗапроса);
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ДанныеПоДокументуПриобретения");
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет запрос в пакет запросов для заполнения поля ВидЦены по отбору при обработке строк табличной части.
//
// Параметры:
//  СтруктураДействий - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧВЦикле.Действия
//  ОписаниеЗапроса - см. ПакетнаяОбработкаТабличнойЧастиСервер.ОписаниеЗапроса
//  КэшированныеЗначения - см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//
Процедура ДополнитьТекстЗаполнениеВидаЦены(СтруктураДействий, ОписаниеЗапроса, КэшированныеЗначения) Экспорт
	
	Перем СтруктураПараметровДействия;
	
	Если ПакетнаяОбработкаТабличнойЧастиСервер.ТребуетсяВыполнитьДействие(
			"ПроверитьЗаполнитьВидЦены",
			СтруктураДействий,
			КэшированныеЗначения,
			СтруктураПараметровДействия) Тогда
		
		УсловияОтбора = Новый Массив;
		ЧислоПараметров = 0;
		
		Для Каждого Условие Из СтруктураПараметровДействия.ПараметрыОтбора Цикл
			УсловияОтбора.Добавить("ВидыЦен." + Условие.Ключ + " В (&Значение" + ЧислоПараметров + ")");
			ОписаниеЗапроса.ПараметрыЗапроса.Вставить("Значение" + ЧислоПараметров, Условие.Значение);
			ЧислоПараметров = ЧислоПараметров + 1;
		КонецЦикла;
	
		ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
			|	ЕСТЬNULL(ВидыЦен.Ссылка, НЕОПРЕДЕЛЕНО) КАК ВидЦены
			|ИЗ
			|	ВтИсточникДанных КАК ИсточникДанных
			|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК ВидыЦен
			|	ПО &ВидЦены = ВидыЦен.Ссылка
			|		И &ЗаменаУсловияОтбора
			|";
		
		ЗаменаУсловияОтбора = СтрСоединить(УсловияОтбора, " И ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗаменаУсловияОтбора", ЗаменаУсловияОтбора);
		
		ИмяКолонкиВидЦены = "ВидЦены";
		Если ТипЗнч(СтруктураПараметровДействия.ВидЦены) = Тип("Строка")
				И ЗначениеЗаполнено(СтруктураПараметровДействия.ВидЦены) Тогда
			ИмяКолонкиВидЦены = СтруктураПараметровДействия.ВидЦены;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидЦены", "ИсточникДанных." + ИмяКолонкиВидЦены);
		Иначе
			ОписаниеЗапроса.ПараметрыЗапроса.Вставить("ВидЦены", СтруктураПараметровДействия.ВидЦены);
		КонецЕсли;
		
		ОписаниеЗапроса.ТекстыЗапросов.Добавить(ТекстЗапроса, "ВидыЦен");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеАналитикРасходовВДокументах

// Функция возвращает текст запроса по документам реализации и заказам.
// Используется при вводе по строке для подбора аналитики статьи расходов.
//
// Возвращаемое значение:
//   Строка - текст запроса по документам реализации и заказам.
//
Функция ПолучитьТекстЗапросаДокументыРеализации()
	
	ТекстЗапроса =
	// При изменении текста запроса необходимо изменить
	// запрос динамического списка формы "ОбщиеФормы.ВыборАналитикиРасходов".
	"ВЫБРАТЬ ПЕРВЫЕ 51
	|	РеестрДокументов.Ссылка					КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(РеестрДокументов.Ссылка)	КАК ПредставлениеСсылки,
	|	РеестрДокументов.ДатаДокументаИБ		КАК Дата,
	|	РеестрДокументов.НомерДокументаИБ		КАК Номер,
	|	РеестрДокументов.Организация			КАК Организация,
	|	РеестрДокументов.Партнер				КАК Партнер,
	|	РеестрДокументов.Контрагент				КАК Контрагент,
	|	РеестрДокументов.Сумма					КАК Сумма,
	|	РеестрДокументов.Валюта					КАК Валюта,
	|	ТИПЗНАЧЕНИЯ(РеестрДокументов.Ссылка)	КАК Тип,
	|	ВЫБОР
	|		КОГДА РеестрДокументов.Проведен
	|			ТОГДА 0
	|		КОГДА РеестрДокументов.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ									КАК СостояниеДокумента
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ПО РеестрДокументов.Ссылка = РеализацияТоваровУслуг.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|		ПО РеестрДокументов.Ссылка = АктВыполненныхРабот.Ссылка
	|
	|ГДЕ
	|	РеестрДокументов.ТипСсылки В (&ТипыСсылок)
	|	И РеестрДокументов.ДополнительнаяЗапись = ЛОЖЬ
	|	И НЕ РеестрДокументов.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера))
	|	И ЕСТЬNULL(РеализацияТоваровУслуг.ЗаказКлиента, ЕСТЬNULL(АктВыполненныхРабот.ЗаказКлиента, НЕОПРЕДЕЛЕНО))
	|		В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.ЗаказКлиента.ПустаяСсылка))
	|	И РеестрДокументов.НомерДокументаИБ ПОДОБНО &СтрокаПоиска
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Наборы

Функция СформироватьТекстЗапросаВременныеТаблицыНаборы()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(Таблица.НомерСтроки)   КАК НомерСтроки,
	|	МИНИМУМ(Таблица.КодСтроки)     КАК КодСтроки,
	|	МИНИМУМ(Таблица.КлючСвязи)     КАК КлючСвязи,
	|	Таблица.НоменклатураНабора     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора   КАК ХарактеристикаНабора,
	|	СУММА(Таблица.Сумма)           КАК Сумма,
	|	СУММА(Таблица.СуммаНДС)        КАК СуммаНДС,
	|	МАКСИМУМ(Таблица.ВидЦены)      КАК МаксимумВидЦены,
	|	МИНИМУМ(Таблица.ВидЦены)       КАК МинимумВидЦены,
	|	МАКСИМУМ(Таблица.СтавкаНДС)    КАК МаксимумСтавкаНДС,
	|	МИНИМУМ(Таблица.СтавкаНДС)     КАК МинимумСтавкаНДС,
	|	МАКСИМУМ(Таблица.ПроцентАвтоматическойСкидки) КАК ПроцентАвтоматическойСкидки,
	|	СУММА(Таблица.СуммаАвтоматическойСкидки)   КАК СуммаАвтоматическойСкидки,
	|	МАКСИМУМ(Таблица.ПроцентРучнойСкидки)      КАК ПроцентРучнойСкидки,
	|	СУММА(Таблица.СуммаРучнойСкидки)           КАК СуммаРучнойСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	ВременнаяТаблицаТоварыПредварительная КАК Таблица
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|	                                                             ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора                     КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                   КАК ХарактеристикаНабора,
	|	СУММА(ВЫБОР КОГДА ЕСТЬNULL(Комплектующие.Количество, 0) <> 0 ТОГДА
	|		Таблица.Количество / Комплектующие.Количество
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаТоварыПредварительная КАК Таблица
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК Комплектующие
	|		ПО Комплектующие.Ссылка                                   = ВариантыКомплектацииНоменклатуры.Ссылка
	|		 И Комплектующие.Ссылка.НоменклатураОсновногоКомпонента   = Таблица.Номенклатура
	|		 И Комплектующие.Ссылка.ХарактеристикаОсновногоКомпонента = Таблица.Характеристика
	|		 И Комплектующие.Номенклатура                             = Таблица.Номенклатура
	|		 И Комплектующие.Характеристика                           = Таблица.Характеристика
	|ГДЕ
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам),
	|	                                                             ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|	И НЕ Комплектующие.Количество ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураНабора                                  КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора                                КАК ХарактеристикаНабора,
	|	Таблица.КлючСвязи                                           КАК КлючСвязи,
	|	Таблица.НомерСтроки                                         КАК НомерСтроки,
	|	Таблица.КодСтроки                                           КАК КодСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)      КАК Упаковка,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                    КАК Склад,
	|	ВЫБОР КОГДА Таблица.МаксимумВидЦены = Таблица.МинимумВидЦены ТОГДА
	|		Таблица.МаксимумВидЦены
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫБОР КОГДА Таблица.МаксимумСтавкаНДС = Таблица.МинимумСтавкаНДС ТОГДА
	|		Таблица.МаксимумСтавкаНДС
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	КОНЕЦ КАК СтавкаНДС,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	|	Таблица.Сумма КАК Сумма,
	|	(Таблица.Сумма + Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки) / ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Цена,
	|	(Таблица.Сумма) / ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1)                                                                 КАК ЦенаСоСкидкой,
	|	Таблица.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	Таблица.СуммаАвтоматическойСкидки   КАК СуммаАвтоматическойСкидки,
	|	Таблица.ПроцентРучнойСкидки         КАК ПроцентРучнойСкидки,
	|	Таблица.СуммаРучнойСкидки           КАК СуммаРучнойСкидки
	|	
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|		И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	
	|	Таблица.НоменклатураНабора               КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора             КАК ХарактеристикаНабора,
	|	Таблица.ЭтоНабор                         КАК ЭтоНабор,
	|	Таблица.ЭтоКомплектующие                 КАК ЭтоКомплектующие,
	|	Таблица.НомерСтроки                      КАК НомерСтроки,
	|	Таблица.ИсходныйНомерСтроки              КАК ИсходныйНомерСтроки,
	|	Таблица.Номенклатура                     КАК Номенклатура,
	|	Таблица.Характеристика                   КАК Характеристика,
	|	&ТекстПолейЦенообразования,
	|	Таблица.Цена                             КАК Цена,
	|	Таблица.Сумма                            КАК Сумма,
	|	Таблица.ВидЦены                          КАК ВидЦены,
	|	Таблица.Упаковка                         КАК Упаковка,
	|	Таблица.СтавкаНДС                        КАК СтавкаНДС,
	|	Таблица.СуммаНДС                         КАК СуммаНДС,
	|	Таблица.КлючСвязи                        КАК КлючСвязи,
	|	Таблица.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
	|	Таблица.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
	|	Таблица.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
	|	Таблица.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
	|	Таблица.ЦенаСоСкидкой                    КАК ЦенаСоСкидкой,
	|	Таблица.ДатаОтгрузки                     КАК ДатаОтгрузки,
	|	Таблица.Отменено                         КАК Отменено,
	|	Таблица.Склад                            КАК Склад,
	|	Таблица.СрокПоставки                     КАК СрокПоставки,
	|	Таблица.КодСтроки                        КАК КодСтроки,
	|	Таблица.ВариантОбеспечения               КАК ВариантОбеспечения,
	|	Таблица.ПроверятьОшибкиЗаполненияСрокПоставки КАК ПроверятьОшибкиЗаполненияСрокПоставки,
	|	Таблица.НоменклатураПартнера             КАК НоменклатураКонтрагента
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ (
	|
	|	ВЫБРАТЬ
	|		Таблица.НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора,
	|	
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0 ТОГДА
	|			ВременнаяТаблицаНаборы.НомерСтроки
	|		ИНАЧЕ
	|			Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		
	|		Таблица.НомерСтроки                      КАК ИсходныйНомерСтроки,
	|		Таблица.Номенклатура                     КАК Номенклатура,
	|		Таблица.Характеристика                   КАК Характеристика,
	|		Таблица.Цена                             КАК Цена,
	|		Таблица.Сумма                            КАК Сумма,
	|		Таблица.ВидЦены                          КАК ВидЦены,
	|		Таблица.Упаковка                         КАК Упаковка,
	|		Таблица.СтавкаНДС                        КАК СтавкаНДС,
	|		Таблица.СуммаНДС                         КАК СуммаНДС,
	|		Таблица.КлючСвязи                        КАК КлючСвязи,
	|		Таблица.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
	|		Таблица.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
	|		Таблица.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
	|		Таблица.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
	|		Таблица.ЦенаСоСкидкой                    КАК ЦенаСоСкидкой,
	|		Таблица.ДатаОтгрузки                     КАК ДатаОтгрузки,
	|		Таблица.Отменено                         КАК Отменено,
	|		Таблица.Склад                            КАК Склад,
	|		Таблица.СрокПоставки                     КАК СрокПоставки,
	|		Таблица.КодСтроки                        КАК КодСтроки,
	|		Таблица.ВариантОбеспечения               КАК ВариантОбеспечения,
	|		Таблица.ПроверятьОшибкиЗаполненияСрокПоставки КАК ПроверятьОшибкиЗаполненияСрокПоставки,
	|		&НоменклатураПартнера                    КАК НоменклатураПартнера
	|	ИЗ
	|		ВременнаяТаблицаТоварыПредварительная КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора
	|			 И ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|	
	|		Таблица.НоменклатураНабора               КАК НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора             КАК ХарактеристикаНабора,
	|		ЛОЖЬ                                     КАК ЭтоКомплектующие,
	|		ИСТИНА                                   КАК ЭтоНабор,
	|		Таблица.НомерСтроки                      КАК НомерСтроки,
	|		Таблица.НомерСтроки                      КАК ИсходныйНомерСтроки,
	|		Таблица.НоменклатураНабора               КАК Номенклатура,
	|		Таблица.ХарактеристикаНабора             КАК Характеристика,
	|		Таблица.Цена                             КАК Цена,
	|		Таблица.Сумма                            КАК Сумма,
	|		Таблица.ВидЦены                          КАК ВидЦены,
	|		Таблица.Упаковка                         КАК Упаковка,
	|		Таблица.СтавкаНДС                        КАК СтавкаНДС,
	|		Таблица.СуммаНДС                         КАК СуммаНДС,
	|		Таблица.КлючСвязи                        КАК КлючСвязи,
	|		Таблица.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
	|		Таблица.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
	|		Таблица.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
	|		Таблица.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
	|		Таблица.ЦенаСоСкидкой                    КАК ЦенаСоСкидкой,
	|		ДатаВремя(1,1,1)                         КАК ДатаОтгрузки,
	|		ЛОЖЬ                                     КАК Отменено,
	|		Таблица.Склад                            КАК Склад,
	|		ДатаВремя(1,1,1)                         КАК СрокПоставки,
	|		Таблица.КодСтроки                        КАК КодСтроки,
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ПустаяСсылка) КАК ВариантОбеспечения,
	|		ЛОЖЬ                                     КАК ПроверятьОшибкиЗаполненияСрокПоставки,
	|		ЗНАЧЕНИЕ(Справочник.НоменклатураКонтрагентов.ПустаяСсылка) КАК НоменклатураПартнера
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК Таблица
	|) КАК Таблица
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|			ПО ВидыНоменклатуры.Ссылка = Таблица.Номенклатура.ВидНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ФормированиеКомплектаДокументов

Процедура ДополнитьПараметрыФормирования(ПараметрыФормирования)
	
	ПараметрыФормирования.Вставить("ИспользоватьРеализациюПоНесколькимЗаказам", ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам"));
	ПараметрыФормирования.Вставить("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам", ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам"));
	ПараметрыФормирования.Вставить("ФискализацияДоступна", РозничныеПродажиВызовСервера.ФискализацияДоступна()); 
	ПараметрыФормирования.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента", ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента")); 
	
КонецПроцедуры

Процедура ДополнитьСтруктуруРаспоряжений(СоответствиеРаспоряжений, ПараметрыФормирования)

	МассивРаспоряжений = Новый Массив;
	ТаблицаЗаказСклад = Новый ТаблицаЗначений();
	ТаблицаЗаказСклад.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	ТаблицаЗаказСклад.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТекстВнутреннейТаблицы = "";
	
	Для Каждого КлючИЗначение Из СоответствиеРаспоряжений Цикл
		Ключ = КлючИЗначение.Ключ;
		Если ТипЗнч(Ключ) = Тип("Структура") Тогда
			НоваяСтрока = ТаблицаЗаказСклад.Добавить();
			НоваяСтрока.Заказ = Ключ.ДокументОснование;
			НоваяСтрока.Склад = Ключ.Склад;
		Иначе
			МассивРаспоряжений.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;

	
	ТекстыЗапроса = Новый Массив;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента) Тогда
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.Проведен КАК Проведен,
			|	ЗаказКлиента.Касса КАК Касса,
			|	ЗаказКлиента.Организация КАК Организация,
			|	ЗаказКлиента.Склад КАК Склад
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.Ссылка В(&СписокДокументов)
			|");
		Если ТаблицаЗаказСклад.Количество() > 0 Тогда
			ТекстВнутреннейТаблицы = "ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ТаблицаЗаказСклад.Заказ  КАК Заказ,
				|	ТаблицаЗаказСклад.Склад   КАК Склад
				|ПОМЕСТИТЬ ТаблицаЗаказСклад
				|ИЗ
				|	&ТаблицаЗаказСклад КАК ТаблицаЗаказСклад
				|;";
			ТекстыЗапроса.Добавить(
				"ВЫБРАТЬ
				|	ЗаказКлиента.Ссылка КАК Ссылка,
				|	ЗаказКлиента.Проведен КАК Проведен,
				|	ЗаказКлиента.Касса КАК Касса,
				|	ЗаказКлиента.Организация КАК Организация,
				|	ТаблицаЗаказСклад.Склад  КАК Склад
				|ИЗ
				|	Документ.ЗаказКлиента КАК ЗаказКлиента
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗаказСклад КАК ТаблицаЗаказСклад
				|		ПО ТаблицаЗаказСклад.Заказ = ЗаказКлиента.Ссылка
				|");
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.Проведен КАК Проведен,
			|	ЗаказКлиента.Касса КАК Касса,
			|	ЗаказКлиента.Организация КАК Организация,
			|	ЗаказКлиента.Склад КАК Склад
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаказКлиента
			|ГДЕ
			|	ЗаказКлиента.Ссылка В(&СписокДокументов)
			|");
	КонецЕсли;
	
	
	
	ТаблицаДокументы = Неопределено;
	Если Не ТекстыЗапроса.Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = ТекстВнутреннейТаблицы + СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		СхемыЗапросов.УстановитьВыборкуРазрешенныхЗаписей(Запрос, Истина);
		
		Запрос.УстановитьПараметр("СписокДокументов", МассивРаспоряжений);
		Запрос.УстановитьПараметр("ТаблицаЗаказСклад", ТаблицаЗаказСклад);
		
		ТаблицаДокументы = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из СоответствиеРаспоряжений Цикл
		
		КлючИЗначение.Значение.Вставить("Проведен",		Ложь);
		КлючИЗначение.Значение.Вставить("Касса",		Справочники.Кассы.ПустаяСсылка());
		КлючИЗначение.Значение.Вставить("Организация",	Справочники.Организации.ПустаяСсылка());
		КлючИЗначение.Значение.Вставить("Склад", 		Справочники.Склады.ПустаяСсылка());
		
		Если Не ТаблицаДокументы = Неопределено Тогда
			
			Ключ = КлючИЗначение.Ключ;
			Если ТипЗнч(Ключ) = Тип("Структура") Тогда
				ОтборПоЗаказуИСкладу = Новый Структура();
				ОтборПоЗаказуИСкладу.Вставить("Ссылка", Ключ.ДокументОснование);
				ОтборПоЗаказуИСкладу.Вставить("Склад", Ключ.Склад);
				
				МассивНайденныхСтрок = ТаблицаДокументы.НайтиСтроки(ОтборПоЗаказуИСкладу);
				НайденнаяСтрока = ?(МассивНайденныхСтрок.Количество() > 0, МассивНайденныхСтрок[0], Неопределено );
			Иначе
				НайденнаяСтрока = ТаблицаДокументы.Найти(Ключ, "Ссылка");
			КонецЕсли;
			
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			КлючИЗначение.Значение.Проведен		= НайденнаяСтрока.Проведен;
			КлючИЗначение.Значение.Касса		= НайденнаяСтрока.Касса;
			КлючИЗначение.Значение.Организация	= НайденнаяСтрока.Организация;
			КлючИЗначение.Значение.Склад		= НайденнаяСтрока.Склад;
		
		КонецЕсли;
	
	КонецЦикла;
	
	ТребуетсяФискализация = Ложь;
	Если ПараметрыФормирования.ФискализацияДоступна Тогда
		Для Каждого КлючИЗначение Из СоответствиеРаспоряжений Цикл
			
			РазрешенаФискализацияПоСкладу =
				СкладыСервер.РазрешенаФискализацияПоСкладу(
					КлючИЗначение.Значение.Склад,
					ПараметрыФормирования.ПробиватьФискальныйЧек);
			
			КлючИЗначение.Значение.Вставить("Фискализировать",  РазрешенаФискализацияПоСкладу);
			ТребуетсяФискализация = РазрешенаФискализацияПоСкладу ИЛИ ТребуетсяФискализация;
			
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("ТребуетсяФискализация", ТребуетсяФискализация);
	
КонецПроцедуры

// Дополняет структуру данных по распоряжениям и переданные параметры формирования.
// 
// Параметры:
// 		СоответствиеРаспоряжений - см. ПродажиКлиент.ИнициализироватьРаспоряжения
// 		ПараметрыФормирования - см. ПродажиСервер.НовыеПараметрыОформленияКомплектаДокументов
// 	
Процедура ДополнитьСтруктуруРаспоряженийИПараметрыФормирования(СоответствиеРаспоряжений, ПараметрыФормирования) Экспорт

	Если Не (ПараметрыФормирования.Свойство("ПараметрыДополнены") И ПараметрыФормирования.ПараметрыДополнены = Истина) Тогда 
		ДополнитьПараметрыФормирования(ПараметрыФормирования);
		ДополнитьСтруктуруРаспоряжений(СоответствиеРаспоряжений, ПараметрыФормирования);
		ПараметрыФормирования.Вставить("ПараметрыДополнены", Истина);
	КонецЕсли;
	
КонецПроцедуры

// По переданным распоряжениям и параметрам формирует структуру таблиц документов
// 
// Параметры:
// 		СоответствиеРаспоряжений - см. ПродажиКлиент.ИнициализироватьРаспоряжения
// 		ПараметрыФормирования - см. НовыеПараметрыОформленияКомплектаДокументов
// 		
// Возвращаемое значение:
// 		Структура
//
Функция ОформитьНакладнуюНаСервере(СоответствиеРаспоряжений, ПараметрыФормирования) Экспорт
	
	Перем СписокОшибок, КоличествоПакетов;
	
	УдалитьДанныеИзБезопасногоХранилища("ФормаСозданныеДокументыПродажи");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ОформитьРядНакладных", ЛОЖЬ);
	ПараметрыФормы.Вставить("АдресДокументыПоТипамНакладных", Неопределено);
	
	ДополнитьСтруктуруРаспоряженийИПараметрыФормирования(СоответствиеРаспоряжений, ПараметрыФормирования);
	
	ТаблицыПоДокументам = ПреобразоватьСоответствиеВТаблицуЗначений(СоответствиеРаспоряжений);
	
	// Разбивка выделенных документов по группам
	ДокументыПоТипамНакладных = РазделитьЗаказыПоПолнымИменамНакладных(ТаблицыПоДокументам.ТаблицаРаспоряжений,
		ТаблицыПоДокументам.ТаблицаЗаказов, ПараметрыФормирования, СписокОшибок, КоличествоПакетов);
	
	Если ДокументыПоТипамНакладных.Количество() > 0 Тогда
		Если ПараметрыФормирования.ПоОрдерам Тогда
			
			// Если выделен один документ и есть хотя бы одна накладная - открывается форма перезаполнения накладной
			// Если нет накладных и документы можно сгруппировать в одну накладную - открывается форма новой накладной
			// Если нет накладных и документы нельзя сгруппировать - открывается форма списка созданных накладных.
			
			ЕстьНакладная = ЕстьНакладная(ДокументыПоТипамНакладных);
			ЕстьОрдер     = ЕстьОрдер(ДокументыПоТипамНакладных);
			ЕстьЗаказ     = ЕстьЗаказ(ДокументыПоТипамНакладных);
			
			ВсегоТаблиц = ДокументыПоТипамНакладных.Количество();
			Если ВсегоТаблиц > 1 Тогда
				
				Если ЕстьНакладная Тогда
					// Пакетно с исключением накладных и сообщением об исключенных документах
					// Распоряжения-накладные исключаются, т.к. должны быть обработаны индивидуально - нельзя ввести новую накладную 
					// по распоряжению-накладной.
					
					ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок);
					ОсталосьТаблиц = ДокументыПоТипамНакладных.Количество();
					Если ОсталосьТаблиц > 0 Тогда
						ПараметрыФормы.ОформитьРядНакладных = ИСТИНА;
						АдресХранилища = ПоместитьВоВременноеХранилище(ДокументыПоТипамНакладных, ПараметрыФормирования.УникальныйИдентификатор);
						ПараметрыФормы.АдресДокументыПоТипамНакладных = АдресХранилища;
					КонецЕсли;
					
					Если ОсталосьТаблиц = 0 Тогда
						ТекстОшибки = НСтр("ru = 'Операция не выполнена.'");
						ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ТекстОшибки);
					ИначеЕсли ВсегоТаблиц <> ОсталосьТаблиц Тогда
						ТекстОшибки = НСтр("ru = 'Операция выполнена с ошибками.'");
						ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ТекстОшибки);
					КонецЕсли;
					
				Иначе
					// Пакетно если нет накладных
					ПараметрыФормы.ОформитьРядНакладных = ИСТИНА;
					АдресХранилища = ПоместитьВоВременноеХранилище(ДокументыПоТипамНакладных, ПараметрыФормирования.УникальныйИдентификатор);
					ПараметрыФормы.АдресДокументыПоТипамНакладных = АдресХранилища;
				КонецЕсли;
				
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				
				// Проверка наличия накладных
				// Если текущее распоряжение это заказ, и по нему есть накладные, открыть форму перезаполнения.
				Если ЕстьНакладная И ЕстьЗаказ Тогда
					// Открытие формы перезаполнения
					ПараметрыФормы = ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПараметрыФормирования, СписокОшибок);
				Иначе
					// При попытке заполнить накладную по отсутствующему ордеру выдадим ошибку
					Если ЕстьНакладная И Не ЕстьОрдер И Не ПараметрыФормирования.РежимБезВопросов Тогда
						ТекстОшибки = НСтр("ru = 'Недоступно оформление по отгрузке, так как не создано ни одного ордера.'");
						ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ТекстОшибки);
					Иначе
						// Если это распоряжение-накладная, или заказ без накладной - открытие формы накладной, существующей или новой.
						ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПараметрыФормирования, СписокОшибок);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// При оформлении по заказам всегда создается новая накладная
			
			// Открывается форма созданной накладной, в случае если совпали ключевые поля выделенных строк, и позволяет
			// функциональная опция В ином случае открывается форма со списком созданных накладных.
			
			Если ДокументыПоТипамНакладных.Количество() > 1 Тогда
				// Пакетно
				ПараметрыФормы.ОформитьРядНакладных = ИСТИНА;
				АдресХранилища = ПоместитьВоВременноеХранилище(ДокументыПоТипамНакладных, ПараметрыФормирования.УникальныйИдентификатор);
				ПараметрыФормы.АдресДокументыПоТипамНакладных = АдресХранилища;
			ИначеЕсли ДокументыПоТипамНакладных.Количество() = 1 Тогда
				// Индивидуально
				ПараметрыФормы = ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПараметрыФормирования, СписокОшибок);
			КонецЕсли;
			
		КонецЕсли;
	ИначеЕсли СоответствиеРаспоряжений.Количество() > 1 
		ИЛИ (ДокументыПоТипамНакладных.Количество() = 0 И НЕ ЗначениеЗаполнено(СписокОшибок)) Тогда
		
		// При оформлении документов в пакетном режиме произошли ошибки
		
		ТекстОшибки = НСтр("ru = 'Не выбрано ни одного документа, который можно было бы оформить %1'");
		
		Если ПараметрыФормирования.ПоОрдерам Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по отгрузке'"));
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, НСтр("ru = 'по заказам'"));
		КонецЕсли;
		
		ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ТекстОшибки);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормы) Тогда
		ПараметрыФормы = Новый Структура();
	КонецЕсли;
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	
	Для Каждого Сообщение Из Сообщения Цикл
		ДобавитьОшибкуПользователю(СписокОшибок, Сообщение.КлючДанных, Строка(Сообщение.КлючДанных) + ": " + Сообщение.Текст);
	КонецЦикла;
	
	ПараметрыФормирования.Вставить("РежимБезВопросов", Ложь);
	ПараметрыФормы.Вставить("СписокОшибок", СписокОшибок);
	ПараметрыФормы.Вставить("КоличествоПакетов", КоличествоПакетов);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Запускает фоновое задание для формирования документов по переданной структуре
// 
// Параметры:
// 	СтруктураПараметров - см. ОформитьНакладнуюНаСервере
// 	ПараметрыФормирования - см. НовыеПараметрыОформленияКомплектаДокументов
// 	ТекущийНомерПакета - Число - Номер пакета, документы которого необходимо сформировать
// 	
// Возвращаемое значение:
// 	Структура - где:
// * Статус - Строка
// * ИдентификаторЗадания - УникальныйИдентификатор
// * АдресРезультата - Строка
// * АдресДополнительногоРезультата - Строка
// * КраткоеПредставлениеОшибки - Строка
// * ПодробноеПредставлениеОшибки - Строка
// * Сообщения - ФиксированныйМассив
//
Функция ОформитьРядНакладныхПоТаблицамВызов(СтруктураПараметров, ПараметрыФормирования, ТекущийНомерПакета = 0) Экспорт
	
	НаименованиеЗадания = НСтр("ru = 'Оформление документов продажи'");
	ВыполняемыйМетод = "ПродажиСервер.ОформитьНакладные";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыФормирования.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	АдресХранилища = СтруктураПараметров.АдресДокументыПоТипамНакладных;
	ДокументыПоТипамНакладных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	СтруктураПараметров.Вставить("ПараметрыФормирования", ПараметрыФормирования);
	СтруктураПараметров.Вставить("ТекущийНомерПакета", ТекущийНомерПакета);
	
	// Запуск фонового задания осложнен тем, что между сеансами (между основным потоком и фоновым заданием)
	// не удается передавать адрес в хранилище, поэтому передаем исходную таблицу значений и заботимся о том,
	// чтобы она не попала обратно на клиент.
	
	СтруктураПараметровДляПередачиВФон = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураПараметров);
	СтруктураПараметровДляПередачиВФон.Вставить("ДокументыПоТипамНакладных", ДокументыПоТипамНакладных);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне( // непосредственно запуск задания
		ВыполняемыйМетод,
		СтруктураПараметровДляПередачиВФон,
		ПараметрыВыполнения);
		
	// Дополняем структуру параметрами заполненными в фоне.
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(
		СтруктураПараметров,
		СтруктураПараметровДляПередачиВФон,
		Истина);
	СтруктураПараметров.Удалить("ДокументыПоТипамНакладных");
	
	Возврат Результат;
	
КонецФункции

Процедура ОформитьРядНакладныхПоТаблицам(ПараметрыФормированияДокументов)
	
	ДокументыПоТипамНакладных 							= ПараметрыФормированияДокументов.ДокументыПоТипамНакладных;
	ПараметрыФормирования 								= ПараметрыФормированияДокументов.ПараметрыФормирования;
	ТекущийНомерПакета									= ПараметрыФормированияДокументов.ТекущийНомерПакета;
	
	ИспользоватьРеализациюПоНесколькимЗаказам 			= ПараметрыФормирования.ИспользоватьРеализациюПоНесколькимЗаказам;
	ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам = ПараметрыФормирования.ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам;
	
	ПараметрыФормированияДокументов.Вставить("ИмяФормы", ПараметрыФормирования.ИмяФормыСозданныеДокументы);
	
	ПараметрыФормы = Новый Структура;
	СозданныеДокументы = Новый Массив;
	
	СтруктураПоиска = СтруктураЗначащихРеквизитов();
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		
		ПерваяСтрока = Таблица[0];
		
		Если Не ТекущийНомерПакета = Неопределено И Не ПерваяСтрока.НомерПакета = ТекущийНомерПакета Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПерваяСтрока.СостояниеНакладной > 0 Тогда
			
			ЕстьВариантОформленияПродаж = Таблица.Колонки.Найти("ВариантОформленияПродажи") <> Неопределено;
			
			МассивСсылок = Таблица.ВыгрузитьКолонку("Ссылка");
			ПараметрыОснования = Новый Структура();
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ПерваяСтрока);
			Если ЕстьВариантОформленияПродаж
				И (ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
					Или ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)
			Тогда
				ПараметрыОснования.Вставить("СкладОтгрузки", ПерваяСтрока.Склад);
				ПараметрыОснования.Вставить("ВариантОформленияПродажи", ПерваяСтрока.ВариантОформленияПродажи);
	
				ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", Не ПараметрыФормирования.ПоОрдерам, ПараметрыФормирования.ПоОрдерам);
				Если ПараметрыФормирования.Свойство("ПроверитьСклады") Тогда
					ПараметрыОформления.Вставить("ПроверитьСклады", ПараметрыФормирования.ПроверитьСклады);
				КонецЕсли;
				ПараметрыОформления.Вставить("ВидГОСИС",  СтруктураПоиска.ВидГОСИС);
				ПараметрыОснования.Вставить("ПараметрыОформления", ПараметрыОформления);
			КонецЕсли;
			
			Если ЕстьВариантОформленияПродаж
				И (
				((ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
						Или ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)
					И ИспользоватьРеализациюПоНесколькимЗаказам)
				Или (ПерваяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот
					И ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам))
				Или (ПерваяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
					Или ПерваяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
					Или ПерваяСтрока.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя) Тогда
				
				РеквизитыРаспоряжения = ПолучитьРеквизитыРаспоряжений(МассивСсылок);
				РеквизитыШапки = Новый Структура();
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
				ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, РеквизитыРаспоряжения, Истина);
				
				ПараметрыОснования.Вставить("РеквизитыШапки",    РеквизитыШапки);
				ПараметрыОснования.Вставить("ДокументОснование", МассивСсылок);
				
				ПараметрыОснования.Вставить("МассивЗаказов",     МассивСсылок);
				ПараметрыОснования.Вставить("ЗаполнятьПоОрдеру", ПараметрыФормирования.ПоОрдерам);
				
				СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, СозданныеДокументы, ПараметрыФормирования);
				
			Иначе
				
				Для Каждого ТекЭлемент Из МассивСсылок Цикл
					ПараметрыОснования.Вставить("ДокументОснование", ТекЭлемент);
					СоздатьДокументПродажи(СтруктураПоиска, ПараметрыОснования, СозданныеДокументы, ПараметрыФормирования);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	
	//Параметры формы "ОбщаяФорма.ФормаСозданныхДокументов"
	ПараметрыФормы.Вставить("ВидимыеКолонки");
	ПараметрыФормы.Вставить("СобытияОбновления");
	
	ПараметрыФормирования.Свойство("ВидимыеКолонки",	ПараметрыФормы.ВидимыеКолонки);
	ПараметрыФормирования.Свойство("СобытияОбновления", ПараметрыФормы.СобытияОбновления);
	
	ПараметрыФормированияДокументов.Вставить("Параметры", ПараметрыФормы);
	ПараметрыФормированияДокументов.Удалить("ДокументыПоТипамНакладных");
	
	Если ПараметрыФормирования.НеОткрыватьФормуСозданногоДокумента Тогда
		ПараметрыФормированияДокументов.Вставить("РежимПечатиДокументов", Истина);
	КонецЕсли;
	
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	Для Каждого Сообщение Из Сообщения Цикл
		ДобавитьОшибкуПользователю(ПараметрыФормированияДокументов.СписокОшибок, 
			Сообщение.КлючДанных, Строка(Сообщение.КлючДанных) + ": " + Сообщение.Текст);
	КонецЦикла;
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ЗащищенныеДанные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, "ФормаСозданныеДокументыПродажи");
	Если Не ЗащищенныеДанные = Неопределено Тогда
		Для каждого Элемент Из ЗащищенныеДанные.Параметры.СозданныеДокументы Цикл
			СозданныеДокументы.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, ПараметрыФормированияДокументов, "ФормаСозданныеДокументыПродажи");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОформитьНакладные(Параметры, АдресРезультата) Экспорт
	
	ОформитьРядНакладныхПоТаблицам(Параметры);
	ПоместитьВоВременноеХранилище(Параметры, АдресРезультата);
	
КонецПроцедуры

// Разделить заказы по полным именам накладных.
// 
// Параметры:
//  ТаблицаРаспоряжений - ТаблицаЗначений - Таблица распоряжений:
// * Ключ - Массив
// * СостояниеНакладной - Число -
// * СостояниеОрдера - Число -
//  ТаблицаРаспоряжений - ТаблицаЗначений - Таблица распоряжений:
// * Ключ - Массив
// * Склад - СправочникСсылка.Склады -
// * СостояниеНакладной - Число -
// * СостояниеОрдера - Число -
//  ПараметрыФормирования - Структура - Параметры формирования:
// * НеОткрыватьФормуСозданногоДокумента - Булево -
// * СоздаватьСчетФактуру - Булево -
// * ПробиватьФискальныйЧек - Булево -
// * СоздаватьПриходныйКассовыйОрдер - Булево -
// * СоздаватьДокументПродажи - Булево -
// * ПечататьПередачуТоваровХранителю - Булево -
// * ПечататьПриходныйКассовыйОрдер - Булево -
// * ПечататьРеализациюТоваровУслуг - Булево -
// * ПечататьАктВыполненныхРабот - Булево -
// * СохраненыНастройкиОформления - Булево -
// * СостояниеОрдера - Строка -
// * СостояниеНакладной - Строка -
// * Склад - СправочникСсылка.Склады -
// * Организация - СправочникСсылка.Организации -
//  СписокОшибок- Массив - Список ошибок
//  КоличествоПакетов - Число - Количество пакетов
// 
// Возвращаемое значение:
//  Массив - Разделить заказы по полным именам накладных
Функция РазделитьЗаказыПоПолнымИменамНакладных(ТаблицаРаспоряжений, ТаблицаЗаказовПоСкладам, ПараметрыФормирования, СписокОшибок, КоличествоПакетов)
	
	ТекущиеКлючи = СтруктураЗначащихРеквизитов();
	
	ШаблонРазделеннаяТаблица = ШаблонРазделеннойТаблицы();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоЗначащимРеквизитамРаспоряжений();
	
	Запрос.УстановитьПараметр("МассивСсылок",                     ТаблицаРаспоряжений.ВыгрузитьКолонку("Ключ"));
	Запрос.УстановитьПараметр("ИспользоватьОтборПоСкладу",        ЗначениеЗаполнено(ПараметрыФормирования.Склад));
	Запрос.УстановитьПараметр("Склад",                            ПараметрыФормирования.Склад);
	Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами"));
	Запрос.УстановитьПараметр("ПоОрдерам",                        ПараметрыФормирования.ПоОрдерам);
	Запрос.УстановитьПараметр("ТаблицаСостояний",                 ТаблицаРаспоряжений);
	Запрос.УстановитьПараметр("ИспользоватьРасширенныеВозможностиЗаказаКлиента",
			ПараметрыФормирования.ИспользоватьРасширенныеВозможностиЗаказаКлиента);
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказовПоСкладам);
	
	ДополнитьЗапросВидамиГОСИС(Запрос, "&ВидГОСИСЗаказКлиентаТовары", "ЗаказКлиентаТовары.Номенклатура", 
		ПараметрыФормирования.ОтдельныеНакладныеПоТоварамСОсобенностьюУчета,
		"КОГДА ЗаказКлиентаТовары.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|			ТОГДА """"");
		
	ДополнитьЗапросВидамиГОСИС(Запрос, "&ВидГОСИСЗаказыКлиентовОстатки", "РаспоряженияНаОтгрузкуОбороты.Номенклатура", 
		ПараметрыФормирования.ОтдельныеНакладныеПоТоварамСОсобенностьюУчета,
		"КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|			ТОГДА """"");
		
	ДополнитьЗапросВидамиГОСИС(Запрос, "&ВидГОСИСТоварыКОтгрузке", "ТоварыКОтгрузкеОстатки.Номенклатура", 
		ПараметрыФормирования.ОтдельныеНакладныеПоТоварамСОсобенностьюУчета,
		"КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|			ТОГДА """"");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивТаблиц = Новый Массив();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивТаблиц;
	КонецЕсли;
	
	Выгрузка = РезультатЗапроса.Выгрузить(); // см. ШаблонРазделеннойТаблицы
	
	РазделеннаяТаблица = Неопределено;
	ПакетныйРежим = ТаблицаРаспоряжений.Количество() > 1;
	ПредыдущаяОшибочнаяСсылка = Неопределено;
	
	Для каждого Строка Из Выгрузка Цикл
		
		ТекстОшибки = "";
		ПрерватьОбработкуСтроки = Ложь;
		
		Если ПакетныйРежим
			И (ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.РеализацияТоваровУслуг")
				Или ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.ПередачаТоваровХранителю")) Тогда
			
			ТекстОшибки = НСтр("ru = 'Невозможно перезаполнить накладную %1 вместе с другими распоряжениями. Выберите распоряжение отдельно.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
			
			ПрерватьОбработкуСтроки = Истина;
			
		ИначеЕсли ПараметрыФормирования.ПоОрдерам Тогда
			
			Если Строка.СостояниеОрдера = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно перезаполнить накладную по отгрузке, т.к. ордера соответствуют накладным.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Строка.СостояниеОрдера = 4 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 невозможно оформить накладную по отгрузке, т.к. склад не использует ордерную схему.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		Иначе // оформление по заказам
			
			Если ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.РеализацияТоваровУслуг")
					Или ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.ПередачаТоваровХранителю")
				Тогда
				
				ТекстОшибки = НСтр("ru = 'Распоряжение %1 является накладной. Для накладных оформление по заказам не доступно.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			ИначеЕсли Строка.СостояниеНакладной = 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 уже создана накладная'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ПрерватьОбработкуСтроки = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстОшибки)
			И ПредыдущаяОшибочнаяСсылка <> Строка.Ссылка Тогда
			ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление",ТекстОшибки);
			ПредыдущаяОшибочнаяСсылка = Строка.Ссылка;
			ТекстОшибки = "";
		КонецЕсли;
		
		Если ПрерватьОбработкуСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		// Создание новой таблицы в случаях:
		// 1. Таблица еще ни разу не создана
		// 2. Запрещено группировать в одну накладную несколько заказов
		// 3. Распоряжение является накладной или ключевые поля различаются (например, нельзя группировать
		//	в одну накладную заказы у которых разные склады)
		Если РазделеннаяТаблица = Неопределено 
			Или ((Не ПараметрыФормирования.ИспользоватьРеализациюПоНесколькимЗаказам
				И (Строка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
				Или Строка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)))
			Или (Не ПараметрыФормирования.ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам
				И Строка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот)
			Или Строка.Партнер <> ТекущиеКлючи.Партнер
			Или Строка.Контрагент <> ТекущиеКлючи.Контрагент
			Или Строка.Договор <> ТекущиеКлючи.Договор
			Или Строка.Организация <> ТекущиеКлючи.Организация
			Или Строка.Соглашение <> ТекущиеКлючи.Соглашение
			Или Строка.Сделка <> ТекущиеКлючи.Сделка
			Или Строка.Склад <> ТекущиеКлючи.Склад
			Или Строка.Подразделение <> ТекущиеКлючи.Подразделение
			Или Строка.СкладОтгрузки <> ТекущиеКлючи.СкладОтгрузки
			Или Строка.ХозяйственнаяОперация <> ТекущиеКлючи.ХозяйственнаяОперация
			Или Строка.ВалютаВзаиморасчетов <> ТекущиеКлючи.ВалютаВзаиморасчетов
			Или Строка.НалогообложениеНДС <> ТекущиеКлючи.НалогообложениеНДС
			Или Строка.ЦенаВключаетНДС <> ТекущиеКлючи.ЦенаВключаетНДС
			Или Строка.ЗапрещеноВыбиратьГруппуСкладов <> ТекущиеКлючи.ЗапрещеноВыбиратьГруппуСкладов
			Или Строка.ВариантОформленияПродажи <> ТекущиеКлючи.ВариантОформленияПродажи
			Или Строка.СпособДоставки <> ТекущиеКлючи.СпособДоставки
			Или Строка.ПеревозчикПартнер <> ТекущиеКлючи.ПеревозчикПартнер
			Или Строка.АдресДоставки <> ТекущиеКлючи.АдресДоставки
			Или Строка.АдресДоставкиПеревозчика <> ТекущиеКлючи.АдресДоставкиПеревозчика
			Или Строка.ВернутьМногооборотнуюТару <> ТекущиеКлючи.ВернутьМногооборотнуюТару
			Или Строка.СрокВозвратаМногооборотнойТары <> ТекущиеКлючи.СрокВозвратаМногооборотнойТары
			Или Строка.ТребуетсяЗалогЗаТару <> ТекущиеКлючи.ТребуетсяЗалогЗаТару
			Или Строка.КалендарьВозвратаТары <> ТекущиеКлючи.КалендарьВозвратаТары
			Или Строка.РассчитыватьДатуВозвратаТарыПоКалендарю <> ТекущиеКлючи.РассчитыватьДатуВозвратаТарыПоКалендарю
			Или Строка.НаправлениеДеятельности <> ТекущиеКлючи.НаправлениеДеятельности 
			Или Строка.ВидГОСИС <> ТекущиеКлючи.ВидГОСИС
			Или Строка.ПорядокРасчетов <> ТекущиеКлючи.ПорядокРасчетов Тогда
			
			РазделеннаяТаблица = ШаблонРазделеннаяТаблица.Скопировать();
			МассивТаблиц.Добавить(РазделеннаяТаблица); // Передача в массив ссылки на текущую таблицу
			
			ЗаполнитьЗначенияСвойств(ТекущиеКлючи, Строка);
		КонецЕсли;
		
		НоваяСтрока = РазделеннаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
	КонецЦикла;
	
	НомерПакета = 0;
	СоответствиеРаспоряженийНомерамПакетов = Новый Соответствие;
	ПрисвоенныйНомераПакета = Неопределено;
	Для каждого ЭлементТаблица Из МассивТаблиц Цикл
		Для каждого ЭлементСтрока Из ЭлементТаблица Цикл
			ПрисвоенныйНомераПакета = СоответствиеРаспоряженийНомерамПакетов.Получить(ЭлементСтрока.Ссылка);
			Если НЕ ПрисвоенныйНомераПакета = Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ПрисвоенныйНомераПакета = Неопределено Тогда
			НомерПакета = НомерПакета + 1;
		КонецЕсли;
		Для каждого ЭлементСтрока Из ЭлементТаблица Цикл
			ЭлементСтрока.НомерПакета = ?(ПрисвоенныйНомераПакета = Неопределено, НомерПакета, ПрисвоенныйНомераПакета);
			СоответствиеРаспоряженийНомерамПакетов.Вставить(ЭлементСтрока.Ссылка, ЭлементСтрока.НомерПакета);
		КонецЦикла;
	КонецЦикла;
	КоличествоПакетов = НомерПакета;
	
	Возврат МассивТаблиц;
	
КонецФункции

// Функция возвращает структуру значащих реквизитов для пакетного формирования документов по заказам клиентов
//
// Возвращаемое значение:
// 	Структура
//
Функция СтруктураЗначащихРеквизитов() Экспорт
	
	Возврат Новый Структура("
		|Партнер,
		|Контрагент,
		|Договор,
		|Организация,
		|Соглашение,
		|Сделка,
		|Склад,
		|Подразделение,
		|СкладОтгрузки,
		|ХозяйственнаяОперация,
		|ВалютаВзаиморасчетов,
		|Валюта,
		|ОплатаВВалюте,
		|НалогообложениеНДС,
		|ЦенаВключаетНДС,
		|ЗапрещеноВыбиратьГруппуСкладов,
		|ВариантОформленияПродажи,
		|СпособДоставки,
		|ПеревозчикПартнер,
		|АдресДоставки,
		|АдресДоставкиПеревозчика,
		|ВернутьМногооборотнуюТару,
		|СрокВозвратаМногооборотнойТары,
		|ТребуетсяЗалогЗаТару,
		|КалендарьВозвратаТары,
		|РассчитыватьДатуВозвратаТарыПоКалендарю,
		|НаправлениеДеятельности,
		|ВидГОСИС,
		|ПорядокРасчетов
		|");
		
КонецФункции

// Конструктор разделенной таблицы
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Ссылка - ДокументСсылка
// * Партнер - СправочникСсылка.Партнеры
// * Контрагент - СправочникСсылка.Контрагенты
// * Договор - СправочникСсылка.ДоговорыКонтрагентов
// * Организация - СправочникСсылка.Организации
// * Соглашение - СправочникСсылка.СоглашенияСКлиентами
// * Сделка - СправочникСсылка.СделкиСКлиентами
// * Склад - СправочникСсылка.Склады
// * Подразделение - СправочникСсылка.СтруктураПредприятия
// * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации
// * ВалютаВзаиморасчетов - СправочникСсылка.Валюты
// * НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС
// * ЦенаВключаетНДС - Булево
// * ЗапрещеноВыбиратьГруппуСкладов - Булево
// * СпособДоставки - ПеречислениеСсылка.СпособыДоставки
// * ПеревозчикПартнер - СправочникСсылка.Партнеры
// * АдресДоставки - Строка
// * АдресДоставкиПеревозчика - Строка
// * ВернутьМногооборотнуюТару - Булево
// * СрокВозвратаМногооборотнойТары - Число
// * ТребуетсяЗалогЗаТару - Булево
// * КалендарьВозвратаТары - СправочникСсылка.ПроизводственныеКалендари
// * РассчитыватьДатуВозвратаТарыПоКалендарю - Булево
// * НаправлениеДеятельности - СправочникСсылка.НаправленияДеятельности
// * СостояниеНакладной - Число
// * СостояниеОрдера - Число
// * ВариантОформленияПродажи - ПеречислениеСсылка.ВариантыОформленияПродажи
// * ПорядокРасчетов - ПеречислениеСсылка.ПорядокРасчетов
// * НомерПакета - Число
// * ВидГОСИС - Строка
// * ЭтоЗаказКакСчет - Булево
//
Функция ШаблонРазделеннойТаблицы()
	ШаблонРазделеннаяТаблица = Новый ТаблицаЗначений;
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Сделка", Новый ОписаниеТипов("СправочникСсылка.СделкиСКлиентами"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("НалогообложениеНДС", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогообложенияНДС"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ЦенаВключаетНДС", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ЗапрещеноВыбиратьГруппуСкладов", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СпособДоставки", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыДоставки"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ПеревозчикПартнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("АдресДоставки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(500)));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("АдресДоставкиПеревозчика", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(500)));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ВернутьМногооборотнуюТару", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СрокВозвратаМногооборотнойТары", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ТребуетсяЗалогЗаТару", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("КалендарьВозвратаТары", Новый ОписаниеТипов("СправочникСсылка.ПроизводственныеКалендари"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю", Новый ОписаниеТипов("Булево"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеНакладной", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("СостояниеОрдера", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ВариантОформленияПродажи", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОформленияПродажи"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ПорядокРасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.ПорядокРасчетов"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ВидГОСИС", Новый ОписаниеТипов("Строка"));
	ШаблонРазделеннаяТаблица.Колонки.Добавить("ЭтоЗаказКакСчет", Новый ОписаниеТипов("Булево"));
	Возврат ШаблонРазделеннаяТаблица
КонецФункции

Функция ТекстЗапросаПоЗначащимРеквизитамРаспоряжений()
	
	ПравоДоступаЗаказКлиента = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента);
	
	ТекстыЗапроса         = Новый Массив;
	ТекстыЗапросаВТЗаказы = Новый Массив;
	ТекстыЗапросаЗаказы   = Новый Массив;
	
	ТекстыЗапроса.Добавить(
	"ВЫБРАТЬ
	|	ТаблицаЗаказов.Ключ КАК Ссылка,
	|	ТаблицаЗаказов.Склад КАК Склад
	|ПОМЕСТИТЬ
	|	ВТЗаказовПоСкладам
	|ИЗ
	|	&ТаблицаЗаказов КАК ТаблицаЗаказов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Склад
	|");
	
	ТекстыЗапросаВТЗаказы.Добавить(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказов.Ссылка КАК Ссылка,
	|	ТаблицаЗаказов.Склад КАК Склад
	|ПОМЕСТИТЬ ВТЗаказов
	|ИЗ
	|	ВТЗаказовПоСкладам КАК ТаблицаЗаказов
	|");
		
	Если ПравоДоступаЗаказКлиента Тогда
		
		ТекстыЗапросаВТЗаказы.Добавить(
		"ВЫБРАТЬ
		|	ЗаказКлиентаТовары.Ссылка КАК Ссылка,
		|	ЗаказКлиентаТовары.Склад КАК Склад
		|ИЗ
		|	Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|	ПО ЗаказКлиентаТовары.Ссылка = ЗаказКлиента.Ссылка
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|	ПО ЗаказКлиента.Склад = Склады.Ссылка
		|
		|ГДЕ ЗаказКлиентаТовары.Ссылка В (&МассивСсылок)
		|	И Склады.ЭтоГруппа
		|	И Склады.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|	И (НЕ &ИспользоватьОтборПоСкладу
		|		ИЛИ ЗаказКлиентаТовары.Склад В(&Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))
		|");
		
		ТекстыЗапросаЗаказы.Добавить(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.Партнер КАК Партнер,
			|	ЗаказКлиента.Контрагент КАК Контрагент,
			|	ЗаказКлиента.Договор КАК Договор,
			|	ЗаказКлиента.Организация КАК Организация,
			|	ЗаказКлиента.Соглашение КАК Соглашение,
			|	ЗаказКлиента.Сделка КАК Сделка,
			|	ЗаказКлиента.Склад КАК Склад,
			|	ВЫБОР
			|		КОГДА Склады.ЭтоГруппа
			|			И Склады.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК СкладВШапкеЗаказа,
			|	ЗаказКлиента.Подразделение КАК Подразделение,
			|	ЗаказКлиента.Валюта КАК Валюта,
			|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
			|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|	ЗаказКлиента.СпособДоставки КАК СпособДоставки,
			|	ЗаказКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
			|	ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
			|	ЗаказКлиента.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
			|	ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ЗаказКлиента.ПорядокРасчетов КАК ПорядокРасчетов,
			|	ЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|	ЗаказКлиента.ПеревозчикПартнер КАК ПеревозчикПартнер,
			|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
			|	ЗаказКлиента.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
			|	ЗаказКлиента.ЭтоЗаказКакСчет КАК ЭтоЗаказКакСчет
			|ПОМЕСТИТЬ ВтЗаказыКлиентов
			|ИЗ
			|	Документ.ЗаказКлиента КАК ЗаказКлиента
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
			|			ПО ЗаказКлиента.Склад = Склады.Ссылка
			|ГДЕ
			|	ЗаказКлиента.Ссылка В (&МассивСсылок)
			|	И НЕ (Склады.ЭтоГруппа
			|		И Склады.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЗаказКлиента.Ссылка КАК Ссылка,
			|	ЗаказКлиента.Партнер КАК Партнер,
			|	ЗаказКлиента.Контрагент КАК Контрагент,
			|	ЗаказКлиента.Договор КАК Договор,
			|	ЗаказКлиента.Организация КАК Организация,
			|	ЗаказКлиента.Соглашение КАК Соглашение,
			|	ЗаказКлиента.Сделка КАК Сделка,
			|	ВТЗаказов.Склад КАК Склад,
			|	ЛОЖЬ КАК СкладВШапкеЗаказа,
			|	ЗаказКлиента.Подразделение КАК Подразделение,
			|	ЗаказКлиента.Валюта КАК Валюта,
			|	ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
			|	ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|	ЗаказКлиента.СпособДоставки КАК СпособДоставки,
			|	ЗаказКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
			|	ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
			|	ЗаказКлиента.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
			|	ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ЗаказКлиента.ПорядокРасчетов КАК ПорядокРасчетов,
			|	ЗаказКлиента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
			|	ЗаказКлиента.ПеревозчикПартнер КАК ПеревозчикПартнер,
			|	ЗаказКлиента.АдресДоставки КАК АдресДоставки,
			|	ЗаказКлиента.АдресДоставкиПеревозчика КАК АдресДоставкиПеревозчика,
			|	ЗаказКлиента.ЭтоЗаказКакСчет КАК ЭтоЗаказКакСчет
			|ИЗ
			|	ВТЗаказов КАК ВТЗаказов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
			|			ПО ЗаказКлиента.Ссылка = ВТЗаказов.Ссылка
			|");
			
	КонецЕсли;
	
	
	ТекстыЗапроса.Добавить(СтрСоединить(ТекстыЗапросаВТЗаказы, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Если Не ТекстыЗапросаЗаказы.Количество() = 0 Тогда
		ТекстыЗапроса.Добавить(СтрСоединить(ТекстыЗапросаЗаказы, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ТаблицаСостояний.Ключ КАК Ссылка,
		|	ТаблицаСостояний.СостояниеНакладной КАК СостояниеНакладной,
		|	ТаблицаСостояний.СостояниеОрдера КАК СостояниеОрдера
		|ПОМЕСТИТЬ
		|	ВТСостоянияБезСкладов
		|ИЗ
		|	&ТаблицаСостояний КАК ТаблицаСостояний
		|
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаЗаказов.Ключ КАК Ссылка,
		|	ТаблицаЗаказов.СостояниеНакладной КАК СостояниеНакладной,
		|	ТаблицаЗаказов.СостояниеОрдера КАК СостояниеОрдера
		|ПОМЕСТИТЬ
		|	ВТСостоянияПоСкладам
		|ИЗ
		|	&ТаблицаЗаказов КАК ТаблицаЗаказов
		|;
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТСостоянияБезСкладов.Ссылка КАК Ссылка,
		|	ВТСостоянияБезСкладов.СостояниеНакладной КАК СостояниеНакладной,
		|	ВТСостоянияБезСкладов.СостояниеОрдера КАК СостояниеОрдера
		|ПОМЕСТИТЬ
		|	ВТСостояния
		|ИЗ ВТСостоянияБезСкладов КАК ВТСостоянияБезСкладов
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТСостоянияПоСкладам.Ссылка КАК Ссылка,
		|	ВТСостоянияПоСкладам.СостояниеНакладной КАК СостояниеНакладной,
		|	ВТСостоянияПоСкладам.СостояниеОрдера КАК СостояниеОрдера
		|ИЗ ВТСостоянияПоСкладам КАК ВТСостоянияПоСкладам
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.Склад,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	СУММА(РаспоряжениеНаОформление.КОформлениюОстаток) КАК КОформлениюОстаток,
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.НалогообложениеНДС,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.СпособДоставки,
		|	РаспоряжениеНаОформление.ПеревозчикПартнер,
		|	РаспоряжениеНаОформление.АдресДоставки,
		|	РаспоряжениеНаОформление.АдресДоставкиПеревозчика,
		|	РаспоряжениеНаОформление.ЗаказКлиента КАК Ссылка,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	РаспоряжениеНаОформление.НаправлениеДеятельности,
		|	РаспоряжениеНаОформление.ВидГОСИС,
		|	РаспоряжениеНаОформление.ПорядокРасчетов
		|ПОМЕСТИТЬ
		|	ВТРаспоряжения
		|ИЗ
		|	&ТекстыРаспоряжениеНаОформление КАК РаспоряжениеНаОформление
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряжениеНаОформление.ВалютаВзаиморасчетов,
		|	РаспоряжениеНаОформление.ВариантОформленияПродажи,
		|	РаспоряжениеНаОформление.ЦенаВключаетНДС,
		|	РаспоряжениеНаОформление.ХозяйственнаяОперация,
		|	РаспоряжениеНаОформление.НалогообложениеНДС,
		|	РаспоряжениеНаОформление.ПеревозчикПартнер,
		|	РаспоряжениеНаОформление.СпособДоставки,
		|	РаспоряжениеНаОформление.АдресДоставкиПеревозчика,
		|	РаспоряжениеНаОформление.Организация,
		|	РаспоряжениеНаОформление.Договор,
		|	РаспоряжениеНаОформление.Соглашение,
		|	РаспоряжениеНаОформление.Контрагент,
		|	РаспоряжениеНаОформление.Партнер,
		|	РаспоряжениеНаОформление.КалендарьВозвратаТары,
		|	РаспоряжениеНаОформление.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	РаспоряжениеНаОформление.ТребуетсяЗалогЗаТару,
		|	РаспоряжениеНаОформление.АдресДоставки,
		|	РаспоряжениеНаОформление.ЗаказКлиента,
		|	РаспоряжениеНаОформление.ВернутьМногооборотнуюТару,
		|	РаспоряжениеНаОформление.СкладОтгрузки,
		|	РаспоряжениеНаОформление.Подразделение,
		|	РаспоряжениеНаОформление.Сделка,
		|	РаспоряжениеНаОформление.ЗапрещеноВыбиратьГруппуСкладов,
		|	РаспоряжениеНаОформление.Склад,
		|	РаспоряжениеНаОформление.СрокВозвратаМногооборотнойТары,
		|	РаспоряжениеНаОформление.НаправлениеДеятельности,
		|	РаспоряжениеНаОформление.ВидГОСИС,
		|	РаспоряжениеНаОформление.ПорядокРасчетов
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Распоряжения.Ссылка,
		|	Распоряжения.Партнер,
		|	Распоряжения.Контрагент,
		|	Распоряжения.Договор,
		|	Распоряжения.Организация,
		|	Распоряжения.Соглашение,
		|	Распоряжения.Сделка,
		|	Распоряжения.Склад,
		|	Распоряжения.Подразделение,
		|	Распоряжения.СкладОтгрузки,
		|	Распоряжения.ЗапрещеноВыбиратьГруппуСкладов,
		|	Распоряжения.ХозяйственнаяОперация,
		|	Распоряжения.КОформлениюОстаток,
		|	Распоряжения.ВалютаВзаиморасчетов,
		|	Распоряжения.НалогообложениеНДС,
		|	Распоряжения.ЦенаВключаетНДС,
		|	Распоряжения.ВариантОформленияПродажи,
		|	Распоряжения.СпособДоставки,
		|	Распоряжения.ПеревозчикПартнер,
		|	Распоряжения.АдресДоставки,
		|	Распоряжения.АдресДоставкиПеревозчика,
		|	Распоряжения.ВернутьМногооборотнуюТару,
		|	Распоряжения.СрокВозвратаМногооборотнойТары,
		|	Распоряжения.ТребуетсяЗалогЗаТару,
		|	Распоряжения.КалендарьВозвратаТары,
		|	Распоряжения.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	Распоряжения.НаправлениеДеятельности,
		|	Распоряжения.ВидГОСИС,
		|	Распоряжения.ПорядокРасчетов,
		|	Состояния.СостояниеНакладной,
		|	Состояния.СостояниеОрдера
		|ИЗ
		|	ВТРаспоряжения КАК Распоряжения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСостояния КАК Состояния
		|		ПО Состояния.Ссылка = Распоряжения.Ссылка
		|ГДЕ
		|	ВЫБОР
		|		КОГДА (Распоряжения.Ссылка ССЫЛКА Документ.ЗаказКлиента) ТОГДА
		|			ВЫБОР КОГДА (Распоряжения.Склад.ЭтоГруппа
		|				И Распоряжения.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах))
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Распоряжения.ВариантОформленияПродажи,
		|	Распоряжения.Партнер,
		|	Распоряжения.Контрагент,
		|	Распоряжения.Договор,
		|	Распоряжения.Организация,
		|	Распоряжения.Соглашение,
		|	Распоряжения.Сделка,
		|	Распоряжения.Подразделение,
		|	Распоряжения.СкладОтгрузки,
		|	Распоряжения.ХозяйственнаяОперация,
		|	Распоряжения.ВалютаВзаиморасчетов,
		|	Распоряжения.НалогообложениеНДС,
		|	Распоряжения.ЦенаВключаетНДС,
		|	Распоряжения.ЗапрещеноВыбиратьГруппуСкладов,
		|	Распоряжения.СпособДоставки,
		|	Распоряжения.ПеревозчикПартнер,
		|	Распоряжения.АдресДоставки,
		|	Распоряжения.АдресДоставкиПеревозчика,
		|	Распоряжения.ВернутьМногооборотнуюТару,
		|	Распоряжения.СрокВозвратаМногооборотнойТары,
		|	Распоряжения.ТребуетсяЗалогЗаТару,
		|	Распоряжения.КалендарьВозвратаТары,
		|	Распоряжения.РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	Распоряжения.НаправлениеДеятельности,
		|	Распоряжения.ПорядокРасчетов,
		|	Распоряжения.ВидГОСИС
		|");
	
	ТекстыРаспоряжениеНаОформление = Новый Массив;
	ТекстыРаспоряжениеНаОформление.Добавить(
		"	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Партнер КАК Партнер,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Контрагент КАК Контрагент,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Договор КАК Договор,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Организация КАК Организация,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаказКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаказКлиента).Соглашение
		|			КОГДА ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
		|		КОНЕЦ КАК Соглашение,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Сделка КАК Сделка,
		|		ВЫБОР
		|			КОГДА ИСТИНА
		|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад
		|		КОНЕЦ КАК Склад,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Подразделение КАК Подразделение,
		|		ВЫБОР
		|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад.ЭтоГруппа
		|					И РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИНАЧЕ РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад
		|		КОНЕЦ КАК СкладОтгрузки,
		|		ВЫБОР
		|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад.ЭтоГруппа
		|					И РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|		ВЫБОР
		|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|					ИЛИ РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтХранителя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)

		|			ИНАЧЕ РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация
		|		КОНЕЦ КАК ХозяйственнаяОперация,
		|		ВЫБОР
		|			КОГДА ИСТИНА
		|				ТОГДА РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот
		|		КОНЕЦ КАК КОформлениюОстаток,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Валюта КАК ВалютаВзаиморасчетов,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.НалогообложениеНДС КАК НалогообложениеНДС,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|		РаспоряженияНаОтгрузкуОбороты.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки КАК СпособДоставки,
		|		ВЫБОР
		|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ПеревозчикПартнер
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОНЕЦ КАК ПеревозчикПартнер,
		|		ВЫБОР
		|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|				ИЛИ РаспоряженияНаОтгрузкуОбороты.Распоряжение.АдресДоставки <> """"
		|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.АдресДоставки
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК АдресДоставки,
		|		ВЫБОР
		|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.АдресДоставкиПеревозчика
		|			ИНАЧЕ """"
		|		КОНЕЦ КАК АдресДоставкиПеревозчика,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК ЗаказКлиента,
		|		ВЫБОР
		|			КОГДА ИСТИНА
		|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ВернутьМногооборотнуюТару
		|		КОНЕЦ КАК ВернутьМногооборотнуюТару,
		|		ВЫБОР
		|			КОГДА ИСТИНА
		|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.СрокВозвратаМногооборотнойТары
		|		КОНЕЦ КАК СрокВозвратаМногооборотнойТары,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				И ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаказКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаказКлиента).Соглашение.КалендарьВозвратаТары
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				И ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ КАК КалендарьВозвратаТары,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				И ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаказКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаказКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				И ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|		&ВидГОСИСЗаказыКлиентовОстатки КАК ВидГОСИС,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ПорядокРасчетов КАК ПорядокРасчетов
		|	ИЗ
		|		РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(
		|				,
		|				,
		|				,
		|				Распоряжение В (&МассивСсылок)
		|					И (НЕ &ИспользоватьОтборПоСкладу
		|						ИЛИ Склад В(&Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))
		|					И ВЫБОР
		|						КОГДА ИСТИНА
		|							ТОГДА Номенклатура.ВариантОформленияПродажи В (
		|										ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг),
		|										ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав))
		|					  КОНЕЦ
		|			) КАК РаспоряженияНаОтгрузкуОбороты
		|	ГДЕ
		|		НЕ &ПоОрдерам
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Партнер,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Контрагент,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Договор,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Организация,
		|		ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаказКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаказКлиента).Соглашение
		|			КОГДА ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
		|		КОНЕЦ,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Сделка,
		|		НЕОПРЕДЕЛЕНО,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Подразделение,
		|		НЕОПРЕДЕЛЕНО,
		|		ЛОЖЬ,
		|		НЕОПРЕДЕЛЕНО,
		|		РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Валюта,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.НалогообложениеНДС,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ЦенаВключаетНДС,
		|		РаспоряженияНаОтгрузкуОбороты.Номенклатура.ВариантОформленияПродажи,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		НЕОПРЕДЕЛЕНО,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ВернутьМногооборотнуюТару,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.СрокВозвратаМногооборотнойТары,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				И ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаказКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаказКлиента).Соглашение.КалендарьВозвратаТары
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				И ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				И ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаказКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаказКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|				И ТИПЗНАЧЕНИЯ(РаспоряженияНаОтгрузкуОбороты.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента)
		|				ТОГДА ВЫРАЗИТЬ(РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.НаправлениеДеятельности,
		|		&ВидГОСИСЗаказыКлиентовОстатки КАК ВидГОСИС,
		|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ПорядокРасчетов
		|	ИЗ
		|		РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(
		|				,
		|				,
		|				,
		|				Распоряжение В (&МассивСсылок)
		|					И (НЕ &ИспользоватьОтборПоСкладу
		|						ИЛИ Склад В(&Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))
		|					И ВЫБОР
		|						КОГДА ИСТИНА
		|							ТОГДА Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
		|					КОНЕЦ) КАК РаспоряженияНаОтгрузкуОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Партнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Партнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Партнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Партнер

		|		КОНЕЦ КАК Партнер,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Контрагент
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Контрагент
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Контрагент
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Контрагент

		|		КОНЕЦ КАК Контрагент,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Договор
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Договор
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Договор
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Договор

		|		КОНЕЦ КАК Договор,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Организация
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Организация
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Организация
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Организация

		|		КОНЕЦ КАК Организация,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Соглашение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Соглашение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
		|		КОНЕЦ КАК Соглашение,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Сделка
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Сделка
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Сделка
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Сделка

		|		КОНЕЦ КАК Сделка,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Склад
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад

		|		КОНЕЦ КАК Склад,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Подразделение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Подразделение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Подразделение
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Подразделение

		|		КОНЕЦ КАК Подразделение,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)

		|			ИНАЧЕ ВЫБОР
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Склад
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад

		|				КОНЕЦ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.ЭтоГруппа
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|				ТОГДА ИСТИНА

		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
		|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтХранителя)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
		|			ИНАЧЕ ВЫБОР
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ХозяйственнаяОперация
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|					ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).ХозяйственнаяОперация
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ХозяйственнаяОперация
		|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ХозяйственнаяОперация

		|				КОНЕЦ
		|		КОНЕЦ,
		|		ТоварыКОтгрузкеОстатки.КОформлениюОстаток + ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Валюта
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Валюта
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Валюта
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Валюта

		|		КОНЕЦ КАК Валюта,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).НалогообложениеНДС
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).НалогообложениеНДС
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).НалогообложениеНДС

		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
		|		КОНЕЦ КАК НалогообложениеНДС,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ЦенаВключаетНДС
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ЛОЖЬ
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ЦенаВключаетНДС
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ЦенаВключаетНДС

		|		КОНЕЦ КАК ЦенаВключаетНДС,
		|		ТоварыКОтгрузкеОстатки.Номенклатура.ВариантОформленияПродажи,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).СпособДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки

		|		КОНЕЦ КАК СпособДоставки,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ПеревозчикПартнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|						ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).ПеревозчикПартнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента 
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ПеревозчикПартнер
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ПеревозчикПартнер

		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).АдресДоставки <> """") ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).АдресДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|						ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).АдресДоставки <> """")
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).АдресДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).АдресДоставки <> """") ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).АдресДоставки
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).АдресДоставки <> """") ТОГДА
		|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).АдресДоставки

		|			ИНАЧЕ """"
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг 
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).АдресДоставкиПеревозчика
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|						ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).АдресДоставкиПеревозчика
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента 
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).АдресДоставкиПеревозчика
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
		|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).АдресДоставкиПеревозчика

		|			ИНАЧЕ """"
		|		КОНЕЦ,
		|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ВернутьМногооборотнуюТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).ВернутьМногооборотнуюТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ВернутьМногооборотнуюТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ВернутьМногооборотнуюТару
		|		КОНЕЦ КАК ВернутьМногооборотнуюТару,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				0
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА 0
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СрокВозвратаМногооборотнойТары
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).СрокВозвратаМногооборотнойТары
		|		КОНЕЦ КАК СрокВозвратаМногооборотнойТары,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ТребуетсяЗалогЗаТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ЛОЖЬ
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ТребуетсяЗалогЗаТару
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ТребуетсяЗалогЗаТару
		|		КОНЕЦ КАК ТребуетсяЗалогЗаТару,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг 
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Соглашение.КалендарьВозвратаТары
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|					И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Соглашение.КалендарьВозвратаТары
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение.КалендарьВозвратаТары
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента 
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение.КалендарьВозвратаТары
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			КОГДА &ИспользоватьСоглашенияСКлиентами
		|					И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).НаправлениеДеятельности
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).НаправлениеДеятельности
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).НаправлениеДеятельности
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).НаправлениеДеятельности

		|		КОНЕЦ КАК НаправлениеДеятельности,
		|		&ВидГОСИСТоварыКОтгрузке КАК ВидГОСИС,
		|		ВЫБОР
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).ПорядокРасчетов
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ПорядокРасчетов
		|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаявкаНаВозвратТоваровОтКлиента ТОГДА
		|				ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ПорядокРасчетов

		|		КОНЕЦ КАК ПорядокРасчетов
		|	ИЗ
		|		РегистрНакопления.ТоварыКОтгрузке.Остатки(,
		|				ДокументОтгрузки В (&МассивСсылок)
		|					И (НЕ &ИспользоватьОтборПоСкладу
		|						ИЛИ Склад В(&Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))
		|		) КАК ТоварыКОтгрузкеОстатки
		|	ГДЕ
		|		&ПоОрдерам
		|");
		
	Если ПравоДоступаЗаказКлиента Тогда
		
			ТекстыРаспоряжениеНаОформление.Добавить(
				"	ВЫБРАТЬ
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Партнер КАК Партнер,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Контрагент КАК Контрагент,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Договор КАК Договор,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Организация КАК Организация,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Соглашение КАК Соглашение,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Сделка КАК Сделка,
				|		РаспоряженияНаОтгрузкуОбороты.Склад КАК Склад,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Подразделение КАК Подразделение,
				|		ВЫБОР
				|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад.ЭтоГруппа
				|					И РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
				|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Склад
				|			ИНАЧЕ РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад
				|		КОНЕЦ КАК СкладОтгрузки,
				|		ВЫБОР
				|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад.ЭтоГруппа
				|					И РаспоряженияНаОтгрузкуОбороты.Распоряжение.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
				|		ВЫБОР
				|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
				|					ИЛИ РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
				|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
				|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
				|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
				|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтХранителя)
				|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
				|			ИНАЧЕ РаспоряженияНаОтгрузкуОбороты.Распоряжение.ХозяйственнаяОперация
				|		КОНЕЦ КАК ХозяйственнаяОперация,
				|		РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот КАК КОформлениюОстаток,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Валюта КАК ВалютаВзаиморасчетов,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.НалогообложениеНДС КАК НалогообложениеНДС,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
				|		РаспоряженияНаОтгрузкуОбороты.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки КАК СпособДоставки,
				|		ВЫБОР
				|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
				|					ИЛИ РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.ПеревозчикПартнер
				|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|		КОНЕЦ КАК ПеревозчикПартнер,
				|		ВЫБОР
				|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
				|				ИЛИ РаспоряженияНаОтгрузкуОбороты.Распоряжение.АдресДоставки <> """"
				|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.АдресДоставки
				|			ИНАЧЕ """"
				|		КОНЕЦ КАК АдресДоставки,
				|		ВЫБОР
				|			КОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
				|					ИЛИ РаспоряженияНаОтгрузкуОбороты.Распоряжение.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.АдресДоставкиПеревозчика
				|			ИНАЧЕ """"
				|		КОНЕЦ КАК АдресДоставкиПеревозчика,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение КАК ЗаказКлиента,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
				|		ВЫБОР
				|			КОГДА &ИспользоватьСоглашенияСКлиентами
				|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Соглашение.КалендарьВозвратаТары
				|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
				|		КОНЕЦ КАК КалендарьВозвратаТары,
				|		ВЫБОР
				|			КОГДА &ИспользоватьСоглашенияСКлиентами
				|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности,
				|		&ВидГОСИСЗаказыКлиентовОстатки КАК ВидГОСИС,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ПорядокРасчетов КАК ПорядокРасчетов
				|	ИЗ
				|		РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(
				|				,
				|				,
				|				,
				|				(Распоряжение, Склад) В (ВЫБРАТЬ Ссылка, Склад ИЗ ВТЗаказов)
				|					И Номенклатура.ВариантОформленияПродажи В(
				|						ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг),
				|						ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав))
				|			) КАК РаспоряженияНаОтгрузкуОбороты
				|	ГДЕ
				|		НЕ &ПоОрдерам
				|
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Партнер,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Контрагент,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Договор,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Организация,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Соглашение,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Сделка,
				|		НЕОПРЕДЕЛЕНО,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Подразделение,
				|		НЕОПРЕДЕЛЕНО,
				|		ЛОЖЬ,
				|		НЕОПРЕДЕЛЕНО,
				|		РаспоряженияНаОтгрузкуОбороты.КОформлениюОборот,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.Валюта,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.НалогообложениеНДС,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ЦенаВключаетНДС,
				|		РаспоряженияНаОтгрузкуОбороты.Номенклатура.ВариантОформленияПродажи,
				|		НЕОПРЕДЕЛЕНО,
				|		НЕОПРЕДЕЛЕНО,
				|		НЕОПРЕДЕЛЕНО,
				|		НЕОПРЕДЕЛЕНО,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ВернутьМногооборотнуюТару,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.СрокВозвратаМногооборотнойТары,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ТребуетсяЗалогЗаТару,
				|		ВЫБОР
				|			КОГДА &ИспользоватьСоглашенияСКлиентами
				|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Соглашение.КалендарьВозвратаТары
				|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
				|		КОНЕЦ,
				|		ВЫБОР
				|			КОГДА &ИспользоватьСоглашенияСКлиентами
				|				ТОГДА РаспоряженияНаОтгрузкуОбороты.Распоряжение.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.НаправлениеДеятельности,
				|		&ВидГОСИСЗаказыКлиентовОстатки КАК ВидГОСИС,
				|		РаспоряженияНаОтгрузкуОбороты.Распоряжение.ПорядокРасчетов
				|	ИЗ
				|		РегистрНакопления.РаспоряженияНаОтгрузку.Обороты(
				|				,
				|				,
				|				,
				|				(Распоряжение, Склад) В (ВЫБРАТЬ Ссылка, Склад ИЗ ВТЗаказов)
				|					И Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)) КАК РаспоряженияНаОтгрузкуОбороты
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Партнер КАК Партнер,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Контрагент КАК Контрагент,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Договор КАК Договор,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Организация КАК Организация,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение КАК Соглашение,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Сделка КАК Сделка,
				|		ТоварыКОтгрузкеОстатки.Склад КАК Склад,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Подразделение КАК Подразделение,
				|		ВЫБОР
				|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ЭтоГруппа
				|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
				|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ИНАЧЕ ВЫБОР
				|				КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента ТОГДА
				|					ТоварыКОтгрузкеОстатки.Склад
				|				КОНЕЦ
				|		КОНЕЦ,
				|		ВЫБОР
				|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ЭтоГруппа
				|					И ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
				|				ТОГДА ИСТИНА
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ХозяйственнаяОперация,
				|		ТоварыКОтгрузкеОстатки.КОформлениюОстаток + ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Валюта КАК Валюта,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).НалогообложениеНДС КАК НалогообложениеНДС,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ЦенаВключаетНДС КАК ЦенаВключаетНДС,
				|		ТоварыКОтгрузкеОстатки.Номенклатура.ВариантОформленияПродажи,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки КАК СпособДоставки,
				|		ВЫБОР
				|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента 
				|					И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
				|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
				|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ПеревозчикПартнер
				|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
				|		КОНЕЦ,
				|		ВЫБОР
				|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
				|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
				|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).АдресДоставки <> """") ТОГДА
				|					ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).АдресДоставки
				|			ИНАЧЕ """"
				|		КОНЕЦ,
				|		ВЫБОР
				|			КОГДА ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента 
				|				И (ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
				|					ИЛИ ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
				|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).АдресДоставкиПеревозчика
				|			ИНАЧЕ """"
				|		КОНЕЦ,
				|		ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
				|		ВЫБОР
				|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
				|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение.КалендарьВозвратаТары
				|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
				|		КОНЕЦ,
				|		ВЫБОР
				|			КОГДА &ИспользоватьСоглашенияСКлиентами И ТоварыКОтгрузкеОстатки.ДокументОтгрузки ССЫЛКА Документ.ЗаказКлиента
				|				ТОГДА ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
				|			ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).НаправлениеДеятельности КАК НаправлениеДеятельности,
				|		&ВидГОСИСТоварыКОтгрузке КАК ВидГОСИС,
				|		ВЫРАЗИТЬ(ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Документ.ЗаказКлиента).ПорядокРасчетов КАК ПорядокРасчетов
				|	ИЗ
				|		РегистрНакопления.ТоварыКОтгрузке.Остатки(,
				|				(ДокументОтгрузки, Склад) В (ВЫБРАТЬ Ссылка, Склад ИЗ ВТЗаказов)
				|		) КАК ТоварыКОтгрузкеОстатки
				|	ГДЕ
				|		&ПоОрдерам
				|");
			
		ТекстыРаспоряжениеНаОформление.Добавить(
			"	ВЫБРАТЬ
			|		ЗаказКлиента.Партнер КАК Партнер,
			|		ЗаказКлиента.Контрагент КАК Контрагент,
			|		ЗаказКлиента.Договор КАК Договор,
			|		ЗаказКлиента.Организация КАК Организация,
			|		ЗаказКлиента.Соглашение КАК Соглашение,
			|		ЗаказКлиента.Сделка КАК Сделка,
			|		ЗаказКлиента.Склад КАК Склад,
			|		ЗаказКлиента.Подразделение КАК Подразделение,
			|		ВЫБОР
			|			КОГДА ЗаказКлиента.СкладВШапкеЗаказа
			|				ТОГДА ЗаказКлиента.Склад
			|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
			|		КОНЕЦ КАК СкладОтгрузки,                
			|		НЕ ЗаказКлиента.СкладВШапкеЗаказа КАК ЗапрещеноВыбиратьГруппуСкладов,
			|		ВЫБОР
			|			КОГДА ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
			|					ИЛИ ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
			|			КОГДА ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
			|			КОГДА ЗаказКлиента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтХранителя)
			|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи)
			|			ИНАЧЕ ЗаказКлиента.ХозяйственнаяОперация
			|		КОНЕЦ КАК ХозяйственнаяОперация,
			|		ЗаказКлиентаТовары.Количество КАК КОформлениюОстаток,
			|		ЗаказКлиента.Валюта КАК ВалютаВзаиморасчетов,
			|		ЗаказКлиента.НалогообложениеНДС КАК НалогообложениеНДС,
			|		ЗаказКлиента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
			|		ЗаказКлиентаТовары.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
			|		ЗаказКлиента.СпособДоставки КАК СпособДоставки,
			|		ВЫБОР
			|			КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
			|					ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
			|				ТОГДА ЗаказКлиента.ПеревозчикПартнер
			|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
			|		КОНЕЦ КАК ПеревозчикПартнер,
			|		ВЫБОР
			|			КОГДА ЗаказКлиента.СпособДоставки <> ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
			|				ИЛИ ЗаказКлиента.АдресДоставки <> """"
			|				ТОГДА ЗаказКлиента.АдресДоставки
			|			ИНАЧЕ """"
			|		КОНЕЦ КАК АдресДоставки,
			|		ВЫБОР
			|			КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
			|					ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
			|				ТОГДА ЗаказКлиента.АдресДоставкиПеревозчика
			|			ИНАЧЕ """"
			|		КОНЕЦ КАК АдресДоставкиПеревозчика,
			|		ЗаказКлиента.Ссылка КАК ЗаказКлиента,
			|		ЗаказКлиента.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
			|		ЗаказКлиента.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
			|		ЗаказКлиента.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
			|		ВЫБОР
			|			КОГДА &ИспользоватьСоглашенияСКлиентами
			|				ТОГДА ЗаказКлиента.Соглашение.КалендарьВозвратаТары
			|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
			|		КОНЕЦ КАК КалендарьВозвратаТары,
			|		ВЫБОР
			|			КОГДА &ИспользоватьСоглашенияСКлиентами
			|				ТОГДА ЗаказКлиента.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|		ЗаказКлиента.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|		&ВидГОСИСЗаказКлиентаТовары КАК ВидГОСИС,
			|		ЗаказКлиента.ПорядокРасчетов КАК ПорядокРасчетов
			|	ИЗ
			|		ВтЗаказыКлиентов КАК ЗаказКлиента
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ЗаказКлиентаТовары
			|			ПО ЗаказКлиента.Ссылка = ЗаказКлиентаТовары.Ссылка
			|			И (ЗаказКлиента.СкладВШапкеЗаказа ИЛИ ЗаказКлиента.Склад = ЗаказКлиентаТовары.Склад)
			|
			|	ГДЕ
			|		(НЕ &ИспользоватьОтборПоСкладу
			|			ИЛИ ЗаказКлиента.Склад В(&Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)))
			|		И ЗаказКлиентаТовары.Номенклатура.ВариантОформленияПродажи В(
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.РеализацияТоваровУслуг),
			|				ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктНаПередачуПрав))
			|		И ЗаказКлиента.ЭтоЗаказКакСчет
			|");
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	ТекстЗапроса =
		СтрЗаменить(
			ТекстЗапроса,
			"&ТекстыРаспоряжениеНаОформление",
			"(" + СтрСоединить(ТекстыРаспоряжениеНаОформление, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ")");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДополнитьЗапросВидамиГОСИС(Запрос, ИмяПараметраВидГОСИС, ИмяТаблицыИсточника, Дополнять, УсловиеИсключение = "") Экспорт

	ТекстЗамены = """""";
	
	//++ Локализация
	Если Не Дополнять Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ИмяПараметраВидГОСИС, ТекстЗамены);
		Возврат;
	КонецЕсли;
	
	ТекстЗамены = 
	"	ВЫБОР
	|		&УсловиеИсключение
	|		КОГДА &ИмяТаблицыИсточника.ОсобенностьУчета В (&ОсобенностиУчетаНоменклатурыГИСМ)
	|			ТОГДА ""ГИСМ""
	|		КОГДА &ИмяТаблицыИсточника.ОсобенностьУчета В (&ОсобенностиУчетаНоменклатурыЕГАИС)
	|			ТОГДА ""ЕГАИС""
	|		КОГДА &ИмяТаблицыИсточника.ОсобенностьУчета В (&ОсобенностиУчетаНоменклатурыВЕТИС)
	|			ТОГДА ""ВЕТИС""
	|		КОГДА &ИмяТаблицыИсточника.ОсобенностьУчета В (&ОсобенностиУчетаНоменклатурыИСМП)
	|			ТОГДА ""ИСМП""
	|		ИНАЧЕ &ТекстНеЗадан
	|	КОНЕЦ";
	
	
	ТекстЗамены = СтрЗаменить(ТекстЗамены, "&УсловиеИсключение",   УсловиеИсключение);
	ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ИмяТаблицыИсточника", ИмяТаблицыИсточника);
	ТекстЗамены = СтрЗаменить(ТекстЗамены, "&ТекстНеЗадан", НСтр("ru='""Не задан""'"));
	
	Запрос.УстановитьПараметр("ОсобенностиУчетаНоменклатурыГИСМ",	ИнтеграцияГИСМУТ.ОсобенностиУчетаНоменклатуры());
	Запрос.УстановитьПараметр("ОсобенностиУчетаНоменклатурыЕГАИС",	ИнтеграцияЕГАИСУТ.ОсобенностиУчетаНоменклатуры());
	Запрос.УстановитьПараметр("ОсобенностиУчетаНоменклатурыВЕТИС",	ИнтеграцияВЕТИСУТ.ОсобенностиУчетаНоменклатуры());
	Запрос.УстановитьПараметр("ОсобенностиУчетаНоменклатурыИСМП",	ИнтеграцияИСМПУТ.ОсобенностиУчетаНоменклатуры());
	//-- Локализация

	Запрос.Текст = СтрЗаменить(Запрос.Текст, ИмяПараметраВидГОСИС, ТекстЗамены);
	
КонецПроцедуры

Функция ЕстьНакладная(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - накладная не создана. Остальные состояния подразумевают наличие накладной, либо накладную без заказа.
			Если Строка.СостояниеНакладной <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьОрдер(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			// Состояние "1" - ордер не создан. Остальные состояния подразумевают наличие ордера, либо что ордер не требуется
			// (состояние 4).
			Если Строка.СостояниеОрдера <> 1 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЕстьЗаказ(ДокументыПоТипамНакладных)
	
	Для Каждого Таблица Из ДокументыПоТипамНакладных Цикл
		Для Каждого Строка Из Таблица Цикл
			Если ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.ЗаказКлиента")
				ИЛИ ТипЗнч(Строка.Ссылка)= Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Исключить заказы с накладными.
// 
// Параметры:
//  ДокументыПоТипамНакладных - Массив - Документы по типам накладных
//  СписокОшибок - Массив - Список ошибок
Процедура ИсключитьЗаказыСНакладными(ДокументыПоТипамНакладных, СписокОшибок)
	
	ИзначальноеКоличество = ДокументыПоТипамНакладных.Количество();
	Для н = 1 По ИзначальноеКоличество Цикл
		Индекс = ИзначальноеКоличество - н;
		Таблица = ДокументыПоТипамНакладных[Индекс];
		
		Исключить = Ложь;
		Для Каждого СтрокаТаблицы Из Таблица Цикл
			
			Если СтрокаТаблицы.СостояниеНакладной <> 1 Тогда
				Исключить = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Исключить Тогда
			
			Для Каждого Строка Из Таблица Цикл
				ТекстОшибки = НСтр("ru = 'Для распоряжения %1 действие не выполнено, так как по выбранным распоряжениям уже имеются накладные.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Строка.Ссылка);
				ДобавитьОшибкуПользователю(СписокОшибок, "Объект.СписокРаспоряженияНаОформление", ТекстОшибки);
			КонецЦикла;
			
			ДокументыПоТипамНакладных.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МетаданныеНакладнойПоОперации(ПараметрыОперации)
	
	ОперацияРаспоряжения = ПараметрыОперации.ХозяйственнаяОперация;
	
	МетаданныеНакладной = Метаданные.Документы.РеализацияТоваровУслуг;
	Если ОперацияРаспоряжения = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		МетаданныеНакладной = Метаданные.Документы.ПередачаТоваровХранителю;
	КонецЕсли;
	
	Если ОперацияРаспоряжения = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		МетаданныеНакладной = Метаданные.Документы.ОтгрузкаТоваровСХранения;
	КонецЕсли;
	
	Если ОперацияРаспоряжения = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ПараметрыОперации.Договор.КомиссионныеПродажи25 Тогда
		МетаданныеНакладной = Метаданные.Документы.ПередачаТоваровХранителю;
	КонецЕсли;

	Возврат МетаданныеНакладной;
	
КонецФункции

Функция ОформитьЧерезФормуПерезаполнения(ДокументыПоТипамНакладных, ПараметрыФормирования, СписокОшибок)
	
	СозданныеДокументы = Новый СписокЗначений();
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока  = ТаблицаДокументов[0];
	
	МетаданныеНакладной = МетаданныеНакладнойПоОперации(ВыделеннаяСтрока);
	
	Если ПравоДоступа("Добавление", МетаданныеНакладной)
		Или ПравоДоступа("Изменение", МетаданныеНакладной) Тогда
		
		МассивСсылок   = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
		РеквизитыШапки = Новый Структура;
		
		Если ПродажиВызовСервера.СформироватьДанныеЗаполненияРеализации(МассивСсылок, МетаданныеНакладной.Имя, РеквизитыШапки) Тогда
			НастройкиФормы = НастройкиФормыПереоформленияНакладных(МетаданныеНакладной.Имя);
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Заказы",         МассивСсылок);
			ПараметрыФормы.Вставить("Склад",          РеквизитыШапки.Склад);
			ПараметрыФормы.Вставить("РеквизитыШапки", РеквизитыШапки);
			ПараметрыФормы.Вставить("НастройкиФормы", НастройкиФормы);
			
			ПараметрыИИмяФормы = Новый Структура("ЕстьОшибки, ИмяФормы, Параметры");
			ПараметрыИИмяФормы.ЕстьОшибки = Ложь;
			ПараметрыИИмяФормы.ИмяФормы   = "ОбщаяФорма.ПереоформлениеНакладныхПоРаспоряжениям";
			ПараметрыИИмяФормы.Параметры  = ПараметрыФормы;
		Иначе
			ПараметрыИИмяФормы = Новый Структура;
		КонецЕсли;
		
		Возврат ПараметрыИИмяФормы;
		
	Иначе
		ОшибкаДоступа = НСтр("ru = 'Нет прав на добавление/изменение накладной'");
		ДобавитьОшибкуПользователю(СписокОшибок,
			"Объект.СписокРаспоряженияНаОформление",
			ОшибкаДоступа);
		
		Возврат Новый Структура(); // Нет прав
	КонецЕсли;
	
КонецФункции

Функция ОформитьНакладнуюПоТаблице(ДокументыПоТипамНакладных, ПараметрыФормирования, СписокОшибок)
	
	СозданныеДокументы = Новый Массив;
	
	ТаблицаДокументов = ДокументыПоТипамНакладных[0];
	ВыделеннаяСтрока  = ТаблицаДокументов[0];
	
	МетаданныеНакладной = МетаданныеНакладнойПоОперации(ВыделеннаяСтрока);
	ИмяНакладной        = МетаданныеНакладной.Имя;
	
	НастройкиФормы = Новый Структура();
	ПараметрыФормы = Новый Структура();
	
	Заказы = ТаблицаДокументов.ВыгрузитьКолонку("Ссылка");
	СтруктураПоиска = СтруктураЗначащихРеквизитов();
	
	РаспоряженияНакладные = Новый Массив();
	Для Каждого Распоряжение Из Заказы Цикл
		
		ТипЗнчРаспоряжение = ТипЗнч(Распоряжение);
		
		Если ТипЗнчРаспоряжение = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
			Или ТипЗнчРаспоряжение = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя")
			Или ТипЗнчРаспоряжение = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			Или ТипЗнчРаспоряжение = Тип("ДокументСсылка.ПередачаТоваровХранителю")
			Тогда
			
			РаспоряженияНакладные.Добавить(Распоряжение);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отказ = Ложь;
	Если ПараметрыФормирования.ПоОрдерам И РаспоряженияНакладные.Количество() > 0 Тогда
		// Для существующих распоряжений-накладных не перезаполняется шапка документа
		ПерезаполняемаяНакладная = РаспоряженияНакладные[0];
		ЗначенияЗаполнения = Новый Структура("ЗаполнятьПоОрдеру, МассивЗаказов", Истина, Заказы);
		
		ПараметрыФормы.Вставить("ЗаполнятьПоОрдеру", ПараметрыФормирования.ПоОрдерам);
		ПараметрыФормы.Вставить("МассивЗаказов", Заказы);
		НастройкиФормы.Вставить("ИмяФормы", "Документ." + ИмяНакладной + ".Форма.ФормаДокумента");
		
		// Для вывода сообщения о количестве созданных документов
		СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
	Иначе
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыделеннаяСтрока);
		Если ВыделеннаяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
		 Или ВыделеннаяСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав
		Тогда
			Если ВыделеннаяСтрока.ЗапрещеноВыбиратьГруппуСкладов Тогда
				ПараметрыФормы.Вставить("СкладОтгрузки", ВыделеннаяСтрока.Склад);
			Иначе
				ПараметрыФормы.Вставить("СкладОтгрузки", ПараметрыФормирования.Склад);
			КонецЕсли;
			ПараметрыФормы.Вставить("ВариантОформленияПродажи", ВыделеннаяСтрока.ВариантОформленияПродажи);

			ПараметрыОформления = Новый Структура("ПоЗаказам, ПоОрдерам", НЕ ПараметрыФормирования.ПоОрдерам, ПараметрыФормирования.ПоОрдерам);
			Если ПараметрыФормирования.Свойство("ПроверитьСклады") Тогда
				ПараметрыОформления.Вставить("ПроверитьСклады", ПараметрыФормирования.ПроверитьСклады);
			КонецЕсли;
			ПараметрыФормы.Вставить("ПараметрыОформления", ПараметрыОформления);
		Иначе
			ИмяНакладной = "АктВыполненныхРабот";
		КонецЕсли;
		
		РеквизитыРаспоряжения = ПолучитьРеквизитыРаспоряжений(Заказы);
		РеквизитыШапки = Новый Структура();
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, СтруктураПоиска, Истина);
		ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(РеквизитыШапки, РеквизитыРаспоряжения, Истина);
		
		ПараметрыФормы.Вставить("РеквизитыШапки",    РеквизитыШапки);
		ПараметрыФормы.Вставить("ДокументОснование", Заказы);
		
		Если ПараметрыФормирования.СоздаватьДокументПродажи Тогда
			СоздатьДокументПродажи(СтруктураПоиска, ПараметрыФормы, СозданныеДокументы, ПараметрыФормирования);
			
			ЕстьОшибки = Ложь;
			Для каждого Элемент Из СозданныеДокументы Цикл
				Если Элемент.Свойство("ЕстьОшибки") И Элемент.ЕстьОшибки = Истина Тогда
					ЕстьОшибки = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
			Если ПараметрыФормирования.НеОткрыватьФормуСозданногоДокумента И НЕ ЕстьОшибки Тогда
				НастройкиФормы.Вставить("РежимПечатиДокументов", Истина);
			Иначе
				НастройкиФормы.Вставить("ИмяФормы", "Обработка.ЖурналДокументовПродажи.Форма.ФормаСозданныеДокументы");
				
				Владелец = Пользователи.АвторизованныйПользователь();
				УстановитьПривилегированныйРежим(Истина);
				ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище(Владелец, СозданныеДокументы, "ФормаСозданныеДокументыПродажи");
				УстановитьПривилегированныйРежим(Ложь);
			КонецЕсли; 
		Иначе
			НастройкиФормы.Вставить("ИмяФормы", "Документ." + ИмяНакладной + ".Форма.ФормаДокумента");
			
			// Для вывода сообщения о количестве созданных документов
			СозданныеДокументы.Добавить(ПредопределенноеЗначение("Документ." + МетаданныеНакладной.Имя + ".ПустаяСсылка"));
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы.Вставить("СозданныеДокументы", СозданныеДокументы);
	
	ПараметрыСОснованием = Новый Структура("Основание", ПараметрыФормы);
	
	Если ЗначениеЗаполнено(ПерезаполняемаяНакладная) Тогда
		ПараметрыСОснованием.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыСОснованием.Вставить("Ключ", ПерезаполняемаяНакладная);
	КонецЕсли;
	
	НастройкиФормы.Вставить("Параметры", ПараметрыСОснованием);
	
	Если Отказ Тогда
		Возврат Неопределено;
	Иначе
		Возврат НастройкиФормы;
	КонецЕсли;
	
КонецФункции

Функция НастройкиФормыПереоформленияНакладных(ИмяНакладной)
	
	НастройкиФормы= НакладныеСервер.НастройкиФормыПереоформленияНакладных();
	НастройкиФормы.ИмяФормыНакладной = "Документ." + ИмяНакладной + ".Форма.ФормаДокумента";
	НастройкиФормы.НакладнаяНаОтгрузку = Истина;
	
		ЗаголовокФормы = НСтр("ru = 'Переоформление документов продажи по выбранным распоряжениям'");
	
	НастройкиФормы.Заголовок = ЗаголовокФормы;
	
	Возврат НастройкиФормы;
	
КонецФункции

Функция ПолучитьРеквизитыРаспоряжений(МассивРаспоряжений) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	
	ЕстьДоступКЗаказамКлиентов      = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента);
	ЕстьДоступКЗаявкамНаВозврат     = ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);

	
	Если Не ЕстьДоступКЗаказамКлиентов

		И Не ЕстьДоступКЗаявкамНаВозврат Тогда
		Возврат СтруктураРеквизитов;
	КонецЕсли;
	
	ТекстыИсточниковДанных = Новый Массив();
	
	Если ЕстьДоступКЗаказамКлиентов Тогда
		ТекстЗапросаЗаказыКлиентов = 
		"	ВЫБРАТЬ
		|		ЗаказКлиента.Контрагент                            КАК Контрагент,
		|		ЗаказКлиента.Организация                           КАК Организация,
		|		ЗаказКлиента.БанковскийСчет                        КАК БанковскийСчет,
		|		ЗаказКлиента.БанковскийСчетКонтрагента             КАК БанковскийСчетКонтрагента,
		|		ЗаказКлиента.Грузоотправитель                      КАК Грузоотправитель,
		|		ЗаказКлиента.Грузополучатель                       КАК Грузополучатель,
		|		ЗаказКлиента.БанковскийСчетГрузоотправителя        КАК БанковскийСчетГрузоотправителя,
		|		ЗаказКлиента.БанковскийСчетГрузополучателя         КАК БанковскийСчетГрузополучателя,
		|		ЗаказКлиента.Касса                                 КАК Касса,
		|		ЗаказКлиента.ФормаОплаты                           КАК ФормаОплаты,
		|		ЗаказКлиента.СпособДоставки                        КАК СпособДоставки,
		|		ЗаказКлиента.АдресДоставкиЗначенияПолей            КАК АдресДоставкиЗначенияПолей,
		|		ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК АдресДоставкиПеревозчикаЗначенияПолей,
		|		ЗаказКлиента.ЗонаДоставки                          КАК ЗонаДоставки,
		|		ЗаказКлиента.ВремяДоставкиС                        КАК ВремяДоставкиС,
		|		ЗаказКлиента.ВремяДоставкиПо                       КАК ВремяДоставкиПо,
		|		ЗаказКлиента.ДополнительнаяИнформацияПоДоставке    КАК ДополнительнаяИнформацияПоДоставке,
		|		ЗаказКлиента.ЦенаВключаетНДС                       КАК ЦенаВключаетНДС,
		|		ЗаказКлиента.НалогообложениеНДС                    КАК НалогообложениеНДС,
		|		ЗаказКлиента.Договор                               КАК Договор,
		|		ЗаказКлиента.Соглашение                            КАК Соглашение,
		|		ЗаказКлиента.ЭтоЗаказКакСчет                       КАК ЭтоЗаказКакСчет,
		|		ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ПустаяСсылка) КАК СпособКомпенсации,
		|		ЛОЖЬ                                               КАК ВозвратПорчи,
		|		ЗаказКлиента.ЭтапГосконтрактаЕИС                   КАК ЭтапГосконтрактаЕИС
		|	ПОМЕСТИТЬ ВТИсточникиДанных
		|	ИЗ
		|		Документ.ЗаказКлиента КАК ЗаказКлиента
		|	ГДЕ
		|		ЗаказКлиента.Ссылка В(&МассивРаспоряжений)";
		ТекстыИсточниковДанных.Добавить(ТекстЗапросаЗаказыКлиентов);
	КонецЕсли;
	Если ЕстьДоступКЗаявкамНаВозврат Тогда
		ТекстЗапросаЗаявкиНаВозврат = 
		"	ВЫБРАТЬ
		|		ЗаявкаНаВозвратТоваровОтКлиента.Контрагент,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Организация,
		|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчет,
		|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетКонтрагента,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Грузоотправитель,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Грузополучатель,
		|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузоотправителя,
		|		ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчетГрузополучателя,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Касса,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ФормаОплаты,
		|		ЗаявкаНаВозвратТоваровОтКлиента.СпособДоставки,
		|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиЗначенияПолей,
		|		ЗаявкаНаВозвратТоваровОтКлиента.АдресДоставкиПеревозчикаЗначенияПолей,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ЗонаДоставки,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиС,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ВремяДоставкиПо,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ДополнительнаяИнформацияПоДоставке,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ЦенаВключаетНДС,
		|		ЗаявкаНаВозвратТоваровОтКлиента.НалогообложениеНДС,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Договор,
		|		ЗаявкаНаВозвратТоваровОтКлиента.Соглашение,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ЭтоЗаказКакСчет КАК ЭтоЗаказКакСчет,
		|		ЗаявкаНаВозвратТоваровОтКлиента.СпособКомпенсации КАК СпособКомпенсации,
		|		ЗаявкаНаВозвратТоваровОтКлиента.ВозвратПорчи,
		|		НЕОПРЕДЕЛЕНО КАК ЭтапГосконтрактаЕИС
		|	,&ВТИсточникиДанных
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
		|	ГДЕ
		|		ЗаявкаНаВозвратТоваровОтКлиента.Ссылка В(&МассивРаспоряжений)";
		Если ТекстыИсточниковДанных.Количество() = 0 Тогда
			ТекстЗапросаЗаявкиНаВозврат = СтрЗаменить(ТекстЗапросаЗаявкиНаВозврат, ",&ВТИсточникиДанных", "ПОМЕСТИТЬ ВТИсточникиДанных");
		Иначе	
			ТекстЗапросаЗаявкиНаВозврат = СтрЗаменить(ТекстЗапросаЗаявкиНаВозврат, ",&ВТИсточникиДанных", "");
		КонецЕсли;
		ТекстыИсточниковДанных.Добавить(ТекстЗапросаЗаявкиНаВозврат);
	КонецЕсли;
	

	
	ТекстЗапросаИсточникиДанных = СтрСоединить(ТекстыИсточниковДанных, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчет
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Организация) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчет)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетКонтрагента
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Контрагент) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетКонтрагента)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузоотправитель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузоотправитель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Грузополучатель
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Грузополучатель)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузоотправителя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузоотправитель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузоотправитель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузоотправителя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузоотправителя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.БанковскийСчетГрузополучателя <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.БанковскийСчетГрузополучателя
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|				И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|						КОГДА ЗаказКлиента.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|							ТОГДА ЗаказКлиента.Грузополучатель
	|						ИНАЧЕ NULL
	|					КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.БанковскийСчетГрузополучателя)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчетГрузополучателя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.Касса
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Касса)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ КАК Касса,
	|	ВЫБОР
	|		КОГДА
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ФормаОплаты) > 1
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
	|		ИНАЧЕ
	|			МИНИМУМ(ЗаказКлиента.ФормаОплаты)
	|	КОНЕЦ КАК ФормаОплаты,	
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиЗначенияПолей КАК СТРОКА(1000))) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ВЫРАЗИТЬ(ЗаказКлиента.АдресДоставкиПеревозчикаЗначенияПолей КАК СТРОКА(1000))
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА (ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|							И ЗаказКлиента.ЗонаДоставки <> ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|						ТОГДА ЗаказКлиента.ЗонаДоставки
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЗонаДоставки)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|	КОНЕЦ КАК ЗонаДоставки,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиС
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиС)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|					КОГДА ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|							ИЛИ ЗаказКлиента.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|						ТОГДА ЗаказКлиента.ВремяДоставкиПо
	|					ИНАЧЕ NULL
	|				КОНЕЦ) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВремяДоставкиПо)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫРАЗИТЬ(ЗаказКлиента.ДополнительнаяИнформацияПоДоставке КАК СТРОКА(1000))) = 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДополнительнаяИнформацияПоДоставке,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ЦенаВключаетНДС) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЦенаВключаетНДС)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.НалогообложениеНДС) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.НалогообложениеНДС)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НалогообложениеНДС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Договор) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Договор)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.Соглашение) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.Соглашение)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
	|	КОНЕЦ КАК Соглашение,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.СпособКомпенсации) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.СпособКомпенсации)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыКомпенсацииВозвратовТоваров.ПустаяСсылка)
	|	КОНЕЦ КАК СпособКомпенсации,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ВозвратПорчи) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ВозвратПорчи)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозвратПорчи,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ЭтапГосконтрактаЕИС) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЭтапГосконтрактаЕИС)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЭтапГосконтрактаЕИС,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказКлиента.ЭтоЗаказКакСчет) = 1
	|			ТОГДА МАКСИМУМ(ЗаказКлиента.ЭтоЗаказКакСчет)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЭтоЗаказКакСчет
	|ПОМЕСТИТЬ ВТРеквизитыШапки
	|ИЗ
	|	ВТИсточникиДанных КАК ЗаказКлиента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШапкаДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ШапкаДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ШапкаДокумента.Грузоотправитель КАК Грузоотправитель,
	|	ШапкаДокумента.Грузополучатель КАК Грузополучатель,
	|	ШапкаДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ШапкаДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ШапкаДокумента.Касса КАК Касса,
	|	ШапкаДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.АдресДоставкиЗначенияПолей
	|			ТОГДА ШапкаЗаказа.АдресДоставкиЗначенияПолей
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.АдресДоставкиПеревозчикаЗначенияПолей
	|			ТОГДА ШапкаЗаказа.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК АдресДоставкиПеревозчикаЗначенияПолей,
	|	ШапкаДокумента.ЗонаДоставки КАК ЗонаДоставки,
	|	ШапкаДокумента.ВремяДоставкиС КАК ВремяДоставкиС,
	|	ШапкаДокумента.ВремяДоставкиПо КАК ВремяДоставкиПо,
	|	ВЫБОР
	|		КОГДА ШапкаДокумента.ДополнительнаяИнформацияПоДоставке
	|			ТОГДА ШапкаЗаказа.ДополнительнаяИнформацияПоДоставке
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДополнительнаяИнформацияПоДоставке,
	|	ШапкаДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ШапкаДокумента.Соглашение КАК Соглашение,
	|	ШапкаДокумента.СпособКомпенсации КАК СпособКомпенсации,
	|	ШапкаДокумента.ВозвратПорчи КАК ВозвратПорчи,
	|	ШапкаДокумента.ЭтапГосконтрактаЕИС КАК ЭтапГосконтрактаЕИС,
	|	ШапкаДокумента.ЭтоЗаказКакСчет КАК ЭтоЗаказКакСчет
	|ИЗ
	|	ВТРеквизитыШапки КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсточникиДанных КАК ШапкаЗаказа
	|		ПО ШапкаДокумента.ФормаОплаты = ШапкаЗаказа.ФормаОплаты
	|";
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(ТекстЗапросаИсточникиДанных);
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураРеквизитов.Вставить("БанковскийСчет",                 Выборка.БанковскийСчет);
	СтруктураРеквизитов.Вставить("БанковскийСчетКонтрагента",      Выборка.БанковскийСчетКонтрагента);
	СтруктураРеквизитов.Вставить("Грузоотправитель",               Выборка.Грузоотправитель);
	СтруктураРеквизитов.Вставить("Грузополучатель",                Выборка.Грузополучатель);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузоотправителя", Выборка.БанковскийСчетГрузоотправителя);
	СтруктураРеквизитов.Вставить("БанковскийСчетГрузополучателя",  Выборка.БанковскийСчетГрузополучателя);
	СтруктураРеквизитов.Вставить("Касса",                          Выборка.Касса);
	СтруктураРеквизитов.Вставить("ФормаОплаты",                    Выборка.ФормаОплаты);
	СтруктураРеквизитов.Вставить("ЦенаВключаетНДС",                Выборка.ЦенаВключаетНДС);
	СтруктураРеквизитов.Вставить("НалогообложениеНДС",             Выборка.НалогообложениеНДС);
	СтруктураРеквизитов.Вставить("Договор",                        Выборка.Договор);
	СтруктураРеквизитов.Вставить("Соглашение",                     Выборка.Соглашение);
	СтруктураРеквизитов.Вставить("СпособКомпенсации",              Выборка.СпособКомпенсации);
	СтруктураРеквизитов.Вставить("ВозвратПорчи",                   Выборка.ВозвратПорчи);
	СтруктураРеквизитов.Вставить("ЭтапГосконтрактаЕИС",            Выборка.ЭтапГосконтрактаЕИС);
	СтруктураРеквизитов.Вставить("ЭтоЗаказКакСчет",                Выборка.ЭтоЗаказКакСчет);
	
	СтруктураРеквизитов.Вставить("АдресДоставкиЗначенияПолей",            Выборка.АдресДоставкиЗначенияПолей);
	СтруктураРеквизитов.Вставить("АдресДоставкиПеревозчикаЗначенияПолей", Выборка.АдресДоставкиПеревозчикаЗначенияПолей);
	СтруктураРеквизитов.Вставить("ЗонаДоставки",                          Выборка.ЗонаДоставки);
	СтруктураРеквизитов.Вставить("ВремяДоставкиС",                        Выборка.ВремяДоставкиС);
	СтруктураРеквизитов.Вставить("ВремяДоставкиПо",                       Выборка.ВремяДоставкиПо);
	СтруктураРеквизитов.Вставить("ДополнительнаяИнформацияПоДоставке",    Выборка.ДополнительнаяИнформацияПоДоставке);
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Процедура СоздатьДокументПродажи(ПоляДокумента, ПараметрыОснования, МассивДокументов, ПараметрыФормирования) Экспорт
	
	МенеджерНакладной = Документы.РеализацияТоваровУслуг;
	
	СоздаватьДокументПродажи			= ПараметрыФормирования.СоздаватьДокументПродажи;
	СоздаватьПриходныйКассовыйОрдер		= ПараметрыФормирования.СоздаватьПриходныйКассовыйОрдер;
	//++ Локализация
	СоздаватьСчетФактуру				= ПараметрыФормирования.СоздаватьСчетФактуру;
	//-- Локализация
	
	Печатать = Ложь;
	
	Если ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента Тогда
		
		МенеджерНакладной = Документы.ВозвратТоваровОтКлиента;
		НовыйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		
	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи Тогда
		
		МенеджерНакладной = Документы.ПередачаТоваровХранителю;
		НовыйДокумент = Документы.ПередачаТоваровХранителю.СоздатьДокумент();
		
		Печатать = ПараметрыФормирования.ПечататьПередачуТоваровХранителю;
		
	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию 
		И ПоляДокумента.Договор.КомиссионныеПродажи25 Тогда
		МенеджерНакладной = Документы.ПередачаТоваровХранителю;
		НовыйДокумент = Документы.ПередачаТоваровХранителю.СоздатьДокумент();

	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя Тогда
		
		МенеджерНакладной = Документы.ПоступлениеТоваровОтХранителя;
		НовыйДокумент = Документы.ПоступлениеТоваровОтХранителя.СоздатьДокумент();
		
	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		
		МенеджерНакладной = Документы.ВозвратТоваровОтКлиента;
		НовыйДокумент = Документы.ВозвратТоваровОтКлиента.СоздатьДокумент();
		
	ИначеЕсли ПоляДокумента.ХозяйственнаяОперация =  Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		
		МенеджерНакладной = Документы.ОтгрузкаТоваровСХранения;
		НовыйДокумент = Документы.ОтгрузкаТоваровСХранения.СоздатьДокумент();
		
	ИначеЕсли ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Тогда
		
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		
		Печатать = ПараметрыФормирования.ПечататьРеализациюТоваровУслуг;
	
	ИначеЕсли ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
		
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав;
		
		Печатать = ПараметрыФормирования.ПечататьРеализациюТоваровУслуг;
		
	Иначе
		
		НовыйДокумент = Документы.АктВыполненныхРабот.СоздатьДокумент();
		Печатать = ПараметрыФормирования.ПечататьАктВыполненныхРабот;
		
	КонецЕсли;
	
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	НовыйДокумент.Заполнить(ПараметрыОснования);
	
	Если ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтХранителя
		И ПоляДокумента.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала Тогда
		НовыйДокумент.СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
	 Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав
	Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(НовыйДокумент, МенеджерНакладной);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(НовыйДокумент, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ДокументПроведен = Ложь;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	НовыйДокументСтруктура = НовыйСозданныйДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокументСтруктура, НовыйДокумент);
	НовыйДокументСтруктура.Документ 			= НовыйДокумент.Ссылка;
	НовыйДокументСтруктура.МассивРаспоряжений 	= ПараметрыОснования.ДокументОснование;
	
	Если НовыйДокумент.ПроверитьЗаполнение() Тогда
		
		ПровестиДокумент = СоздаватьДокументПродажи;
		
		Если ПровестиДокумент Тогда
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				ДокументПроведен = Истина;
				НовыйДокументСтруктура.Проведен 			= Истина;
				НовыйДокументСтруктура.Печатать 			= Печатать;
			Исключение
				НовыйДокументСтруктура.Проведен 			= Ложь;
				НовыйДокументСтруктура.ЕстьОшибки 			= Истина;
				
				ТекстОшибки = НСтр("ru = 'Проведение документа %1 завершено с ошибкой'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, НовыйДокумент);
				ЗаписьЖурналаРегистрации(ТекстОшибки,
							УровеньЖурналаРегистрации.Ошибка,,,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			Печатать = Ложь;
			НовыйДокументСтруктура.Проведен 			= Ложь;
			НовыйДокументСтруктура.Печатать 			= Печатать;
		КонецЕсли;
		
		//++ Локализация
		Если ПоляДокумента.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
			И (ДокументПроведен
				И ((ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг
					Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав)
				И Не (ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи

					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
					Или ПоляДокумента.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала))
			Или ПоляДокумента.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот)
			И СоздаватьСчетФактуру Тогда
			
			ИмяДокумента = УчетНДСУП.ПолноеИмяСчетФактурыВыданный();
			Если ЗначениеЗаполнено(ИмяДокумента) Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяДокумента);
				ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
				ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
				ПараметрыРегистрации.Ссылка = НовыйДокумент.Ссылка;
				ПараметрыРегистрации.Дата = НовыйДокумент.Дата;
				ПараметрыРегистрации.Организация = НовыйДокумент.Организация;
				ПараметрыРегистрации.Контрагент = НовыйДокумент.Контрагент;
				ПараметрыРегистрации.Организация = НовыйДокумент.Организация;
				ПараметрыРегистрации.НалогообложениеНДС = НовыйДокумент.НалогообложениеНДС;
				ПараметрыРегистрации.РеализацияТоваров = Истина;
				ПараметрыРегистрации.РеализацияРаботУслуг = Истина;
				Результат = УчетНДСУП.ЗаполнитьСчетФактураВыданный(ДокументОбъект, ПараметрыРегистрации);
				
				НовыйДокументСФСтруктура = НовыйСозданныйДокумент();
				НовыйДокументСФСтруктура.Документ 				= ДокументОбъект.Ссылка;
				НовыйДокументСФСтруктура.Печатать 				= Ложь;
				НовыйДокументСФСтруктура.МассивРаспоряжений 	= ПараметрыОснования.ДокументОснование;
				НовыйДокументСФСтруктура.Организация 			= ДокументОбъект.Организация;
				НовыйДокументСФСтруктура.Проведен 				= Результат.Проведен;
				МассивДокументов.Добавить(НовыйДокументСФСтруктура);
			КонецЕсли;
		КонецЕсли;
		//-- Локализация
		
		Если СоздаватьПриходныйКассовыйОрдер И ДокументПроведен Тогда
			СоздатьДокументОплаты(НовыйДокумент.Ссылка, МассивДокументов, ПараметрыФормирования, ПараметрыОснования.ДокументОснование);
		КонецЕсли;
		
	Иначе
		НовыйДокументСтруктура.ЕстьОшибки 			= Истина;
	КонецЕсли;
	
	МассивДокументов.Добавить(НовыйДокументСтруктура);
	
КонецПроцедуры

Процедура СоздатьДокументОплаты(ДокументОснование, МассивДокументов, ПараметрыФормирования, МассивРаспоряжений = Неопределено) Экспорт
	
	НовыйДокумент = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
	НовыйДокумент.Заполнить(ДокументОснование);
	НовыйДокумент.Дата = ТекущаяДатаСеанса();
	
	Если НовыйДокумент.СуммаДокумента = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если МассивРаспоряжений = Неопределено Тогда
		МассивРаспоряжений = Новый Массив;
		МассивРаспоряжений.Добавить(ДокументОснование);
	КонецЕсли;
	
	НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
	
	НовыйДокументСтруктура = НовыйСозданныйДокумент();
	ЗаполнитьЗначенияСвойств(НовыйДокументСтруктура, НовыйДокумент);
	НовыйДокументСтруктура.Документ 			= НовыйДокумент.Ссылка;
	НовыйДокументСтруктура.МассивРаспоряжений 	= МассивРаспоряжений;
	
	Если НовыйДокумент.ПроверитьЗаполнение() Тогда
		Попытка
			НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			НовыйДокументСтруктура.Проведен 			= Истина;
			НовыйДокументСтруктура.Печатать 			= ПараметрыФормирования.ПечататьПриходныйКассовыйОрдер;
		Исключение
			НовыйДокументСтруктура.Проведен 			= Ложь;
			НовыйДокументСтруктура.ЕстьОшибки 			= Истина;

			ТекстОшибки = НСтр("ru = 'Проведение документа %1 завершено с ошибкой'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, НовыйДокумент);
			ЗаписьЖурналаРегистрации(ТекстОшибки,
						УровеньЖурналаРегистрации.Ошибка,,,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	Иначе
		НовыйДокументСтруктура.Проведен 			= Ложь;
		НовыйДокументСтруктура.ЕстьОшибки 			= Истина;
	КонецЕсли;
	
	МассивДокументов.Добавить(НовыйДокументСтруктура);
	
КонецПроцедуры

// Возвращает таблицу подключенного оборудования в разрезе касс и организаций
// 
// Параметры:
// 	СозданныеДокументы - Массив из Структура - где:
// 		* Документ - ДокументСсылка
// 		* Проведен - Булево
// 		* ЕстьОшибки - Булево
// 		* МассивРаспоряжений - Массив из ДокументСсылка
// 		* Организация - СправочникСсылка.Организации
// 		* Касса - СправочникСсылка.Кассы
// 	ТаблицаОборудования - ДанныеФормыКоллекция
// 	
Процедура ПолучитьПодключенноеОборудование(СозданныеДокументы, ТаблицаОборудования) Экспорт
	
	ТаблицаПоиска = Новый ТаблицаЗначений;
	ТаблицаПоиска.Колонки.Добавить("Организация");
	ТаблицаПоиска.Колонки.Добавить("Касса");
	Для Каждого Элемент Из СозданныеДокументы Цикл
		Если Элемент.Проведен Тогда
			НоваяСтрока = ТаблицаПоиска.Добавить();
			НоваяСтрока.Организация = Элемент.Организация;
			НоваяСтрока.Касса = Элемент.Касса;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПоиска.Свернуть("Организация,Касса");
	
	Для Каждого Строка Из ТаблицаПоиска Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Организация", Строка.Организация);
		СтруктураПоиска.Вставить("ТорговыйОбъект", Строка.Касса);
		
		МассивОборудования = ФормированиеФискальныхЧековСервер.ПодключенноеОборудованиеПечатиЧеков(СтруктураПоиска);
		Для Каждого Элемент Из МассивОборудования Цикл
			НоваяСтрока = ТаблицаОборудования.Добавить();
			НоваяСтрока.Организация = Строка.Организация;
			НоваяСтрока.Касса = Строка.Касса;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразовать соответствие в таблицу значений.
// 
// Параметры:
//  СоответствиеРаспоряжений - Соответствие - Соответствие распоряжений:
// * Ключ - ДокументСсылка.ЗаказКлиента -
// * Значение - Структура -:
// ** СостояниеНакладной - Число -
// ** СостояниеОрдера - Число -
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Преобразовать соответствие в таблицу значений:
// * Ключ - Массив - 
// * СостояниеНакладной - Число -
// * СостояниеОрдера - Число -
Функция ПреобразоватьСоответствиеВТаблицуЗначений(СоответствиеРаспоряжений)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));

	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Ключ", Новый ОписаниеТипов(МассивТипов));
	ТаблицаЗначений.Колонки.Добавить("СостояниеНакладной", Новый ОписаниеТипов("Число"));
	ТаблицаЗначений.Колонки.Добавить("СостояниеОрдера", Новый ОписаниеТипов("Число"));
	
	ТаблицаЗаказов = Новый ТаблицаЗначений;
	ТаблицаЗаказов.Колонки.Добавить("Ключ", Новый ОписаниеТипов(МассивТипов));
	ТаблицаЗаказов.Колонки.Добавить("СостояниеНакладной", Новый ОписаниеТипов("Число"));
	ТаблицаЗаказов.Колонки.Добавить("СостояниеОрдера", Новый ОписаниеТипов("Число"));
	ТаблицаЗаказов.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	Для каждого КлючИЗначение Из СоответствиеРаспоряжений Цикл
		
		Ключ = КлючИЗначение.Ключ;
		
		Если ТипЗнч(Ключ) = Тип("Структура") Тогда
			
			ОтборПоЗаказуИСкладу = Новый Структура();
			ОтборПоЗаказуИСкладу.Вставить("Ключ", Ключ.ДокументОснование);
			ОтборПоЗаказуИСкладу.Вставить("Склад", Ключ.Склад);
			
			НайденныеСтроки = ТаблицаЗаказов.НайтиСтроки(ОтборПоЗаказуИСкладу);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаЗаказов.Добавить();
				НоваяСтрока.Ключ = Ключ.ДокументОснование;
				НоваяСтрока.Склад = Ключ.Склад;
				НоваяСтрока.СостояниеНакладной = КлючИЗначение.Значение.СостояниеНакладной;
				НоваяСтрока.СостояниеОрдера = КлючИЗначение.Значение.СостояниеОрдера;
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока.Ключ = КлючИЗначение.Ключ;
			НоваяСтрока.СостояниеНакладной = КлючИЗначение.Значение.СостояниеНакладной;
			НоваяСтрока.СостояниеОрдера = КлючИЗначение.Значение.СостояниеОрдера;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицыПоДокументам = Новый Структура();
	ТаблицыПоДокументам.Вставить("ТаблицаРаспоряжений", ТаблицаЗначений);
	ТаблицыПоДокументам.Вставить("ТаблицаЗаказов", ТаблицаЗаказов);
	
	Возврат ТаблицыПоДокументам;
	
КонецФункции

// Возвращаемое значение:
// 	Структура - где:
// * ЕстьОшибки - Булево
// * Касса - СправочникСсылка.Кассы
// * Организация - СправочникСсылка.Организации
// * МассивРаспоряжений - Массив из ДокументСсылка
// * Печатать - Булево
// * Проведен - Булево
// * Документ - ДокументСсылка 
//
Функция НовыйСозданныйДокумент()
	
	Результат = Новый Структура;
	Результат.Вставить("Документ");
	Результат.Вставить("Проведен");
	Результат.Вставить("Печатать");
	Результат.Вставить("МассивРаспоряжений");
	Результат.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Результат.Вставить("Касса", Справочники.Кассы.ПустаяСсылка());
	Результат.Вставить("ЕстьОшибки");

	Возврат Результат;
	
КонецФункции


#Область ОбеспечениеБезопасностиДанных

// Возвращает данные из безопасного хранилища текущего пользователя по переданным ключам
// 
// Параметры:
// 	Ключи - см. ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища.Ключи
// 	
// Возвращаемое значение:
// 	Неопределено, Произвольный, Структура - 
//
Функция ПрочитатьДанныеИзБезопасногоХранилища(Ключи) Экспорт
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ЗащищенныеДанные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Владелец, Ключи);
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЗащищенныеДанные
	
КонецФункции

Процедура УдалитьДанныеИзБезопасногоХранилища(Ключи) Экспорт
	
	Владелец = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища(Владелец, Ключи);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаКомплектаДокументов

// Функция-конструктор параметров формирования комплекта документов
// 
// Возвращаемое значение:
// 	Структура - где:
// * НеОткрыватьФормуСозданногоДокумента 	- Булево
// * СоздаватьСчетФактуру 					- Булево
// * ПробиватьФискальныйЧек 				- Булево
// * СоздаватьПриходныйКассовыйОрдер 		- Булево
// * СоздаватьДокументПродажи 				- Булево
// * ПечататьПередачуТоваровХранителю 		- Булево
// * ПечататьПриходныйКассовыйОрдер 		- Булево
// * ПечататьРеализациюТоваровУслуг 		- Булево
// * ПечататьАктВыполненныхРабот 			- Булево
// * СохраненыНастройкиОформления 			- Булево
// * СостояниеОрдера 						- Строка
// * СостояниеНакладной 					- Строка
// * Склад 									- СправочникСсылка.Склады
// * Организация 							- СправочникСсылка.Организации
// * КлючОбъекта 							- Строка
// * ОтдельныеНакладныеПоТоварамСОсобенностьюУчета 		- Булево
// 
Функция НовыеПараметрыОформленияКомплектаДокументов() Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КлючОбъекта",							"");
	СтруктураПараметров.Вставить("Организация",							Справочники.Организации.ПустаяСсылка());
	СтруктураПараметров.Вставить("Склад",								Справочники.Склады.ПустаяСсылка());
	СтруктураПараметров.Вставить("СостояниеНакладной",					"");
	СтруктураПараметров.Вставить("СостояниеОрдера",						"");
	СтруктураПараметров.Вставить("СохраненыНастройкиОформления",		Ложь);
	
	СтруктураПараметров.Вставить("ПечататьАктВыполненныхРабот",			Ложь);
	СтруктураПараметров.Вставить("ПечататьРеализациюТоваровУслуг",		Ложь);
	СтруктураПараметров.Вставить("ПечататьПриходныйКассовыйОрдер",		Ложь);
	СтруктураПараметров.Вставить("ПечататьПередачуТоваровХранителю",	Ложь);
	СтруктураПараметров.Вставить("СоздаватьДокументПродажи",			Ложь);
	СтруктураПараметров.Вставить("СоздаватьПриходныйКассовыйОрдер",		Ложь);
	СтруктураПараметров.Вставить("ПробиватьФискальныйЧек",				Ложь);
	//++ Локализация
	СтруктураПараметров.Вставить("СоздаватьСчетФактуру",				Ложь);
	//-- Локализация
	СтруктураПараметров.Вставить("НеОткрыватьФормуСозданногоДокумента",	Ложь);
	СтруктураПараметров.Вставить(
		"ИмяФормыСозданныеДокументы",
		"Обработка.ЖурналДокументовПродажи.Форма.ФормаСозданныеДокументы");
	СтруктураПараметров.Вставить("ОтдельныеНакладныеПоТоварамСОсобенностьюУчета",	Ложь);
	
	//Параметры формы "ОбщаяФорма.ФормаСозданныхДокументов"
	СтруктураПараметров.Вставить("ВидимыеКолонки",						Новый Массив);
	СтруктураПараметров.Вставить("СобытияОбновления",					Новый Массив);
	СтруктураПараметров.Вставить("ПараметрыДополнены",					Ложь);
	
	Возврат СтруктураПараметров;

КонецФункции

// Получает из хранилища настроек текущего пользователя параметры формирования комплекта документов
// 
// Параметры:
// 	КлючОбъекта - Строка - ключ получаемых настроек
// 
// Возвращаемое значение:
// 	см. НовыеПараметрыОформленияКомплектаДокументов
//
Функция ПолучитьНастройкуКомплектаДокументов(КлючОбъекта) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("КлючОбъекта", КлючОбъекта);
	Отбор.Вставить("Пользователь", ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
	Выборка = ХранилищеСистемныхНастроек.Выбрать(Отбор);

	НовыеНастройки = НовыеПараметрыОформленияКомплектаДокументов();
	Если Выборка.Следующий() Тогда
		СохраненныеНастройки = ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСоответствиеВСтруктуру(Выборка.Настройки);
		// на тот случай, если настройка новая и еще ни разу не была сохранена
		ЗаполнитьЗначенияСвойств(НовыеНастройки, СохраненныеНастройки);
	КонецЕсли;
	НовыеНастройки.КлючОбъекта = КлючОбъекта;
	
	Возврат НовыеНастройки;
	
КонецФункции

// Сохраняет в хранилище настроек текущего пользователя параметры формирования комплекта документов
// 
// Параметры:
// 	Настройки - см. НовыеПараметрыОформленияКомплектаДокументов
// 	КлючОбъекта - Строка - ключ получаемых настроек
//
Процедура СохранитьНастройкуКомплектаДокументов(Настройки, КлючОбъекта) Экспорт
	
	Настройки.Вставить("СохраненыНастройкиОформления", Истина);
	
	ХранилищеСистемныхНастроек.Сохранить(
		КлючОбъекта,,
		ОбщегоНазначенияУТКлиентСервер.ПреобразоватьСтруктуруВСоответствие(Настройки),,
		ПользователиИнформационнойБазы.ТекущийПользователь().Имя);
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Добавляет в список ошибок новую ошибку пользователя для дальнейшей отправки с помощью
// процедуры ПродажиКлиент.СообщитьОшибкиПользователю().
// Предназначена для накопления списка ошибок с последующей обработкой этого списка, перед тем как вывести
// пользователю. 
//
// Параметры:
//   Объект - ЛюбаяСсылка,
//            ЛюбойОбъект - объект, в котором обнаружена ошибка,
//            Строка      - описание объекта, в котором обнаружена ошибка.
//   ТекстОшибки - Строка - Текст сообщения.
//   ПолеОшибки - Строка  - Полное имя реквизита, в котором обнаружена ошибка.
//
Процедура ДобавитьОшибкуПользователю(
		Ошибки,
		Объект,
		ТекстОшибки,
		ПолеОшибки="")
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	Ошибка = СообщениеОбъекта(ТекстОшибки, Объект, ПолеОшибки);
	
	Ошибки.Добавить(Ошибка);
	
КонецПроцедуры

// Возвращает сообщение об ошибке заполнения в реквизите объекта.
//
// Параметры:
//   Текст  - Строка      - Текст сообщения.
//   Объект - ЛюбаяСсылка,
//            ЛюбойОбъект - объект, в котором обнаружена ошибка,
//            Строка      - описание объекта, в котором обнаружена ошибка.
//   Поле   - Строка      - Полное имя реквизита, в котором обнаружена ошибка.
//
// Возвращаемое значение:
//   СообщениеПользователю - Сообщение об ошибке.
//
Функция СообщениеОбъекта(Текст, Объект, Поле = "") Экспорт
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	
	Если ТипЗнч(Объект) = Тип("Строка") Тогда
		Сообщение.ПутьКДанным = Объект;
	Иначе
		Сообщение.КлючДанных = Объект;
	КонецЕсли;
	
	Возврат Сообщение;
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область ПакетнаяОбработкаТабличныхЧастейСлужебная

Функция ТекстЗапросаИсточникаУсловияПродаж(Знач ЗаполнятьПоСоглашению)
	
	Если ЗаполнятьПоСоглашению Тогда
		
		ТекстЗапроса =
		"(ВЫБРАТЬ
		|	СоглашенияСКлиентами.ИндивидуальныйВидЦены КАК ВидЦены,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Ссылка = &Соглашение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СоглашенияСКлиентами.ВидЦен,
		|	2
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
		|ГДЕ
		|	СоглашенияСКлиентами.Ссылка = &Соглашение)";
		
	Иначе
		
		ТекстЗапроса =
		"(ВЫБРАТЬ
		|	Партнеры.ИндивидуальныйВидЦены КАК ВидЦены,
		|	1 КАК Приоритет
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Ссылка = &Партнер
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Партнеры.ВидЦен,
		|	2
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Ссылка = &Партнер)";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстыЗапросовУсловияПродажПакетнаяОбработка(УсловияПродажПоУслугам)
	
	Результат = Новый СписокЗначений;
	
	Если УсловияПродажПоУслугам Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	ВтИсточникДанных.Номенклатура КАК Номенклатура,
		|	ВтИсточникДанных.Характеристика КАК Характеристика,
		|	СоглашениеШапка.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеШапка.ВидЦен
		|	КОНЕЦ КАК ВидЦены,
		|	ЕСТЬNULL(СоглашениеТовары.Цена, 0) КАК Цена
		|ПОМЕСТИТЬ ВременнаяТаблицаВидыЦен
		|ИЗ
		|	ВтИсточникДанных КАК ВтИсточникДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ВтИсточникДанных.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|		ПО (СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка)
		|		И ВтИсточникДанных.Номенклатура = СоглашениеТовары.Номенклатура
		|		И ВтИсточникДанных.Характеристика = СоглашениеТовары.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
		|		И (СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)";
		
		Результат.Добавить(ТекстЗапроса, "ВременнаяТаблицаВидыЦен");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Валюта КАК Валюта,
		|	КурсЧислитель КАК КурсЧислитель,
		|	КурсЗнаменатель КАК КурсЗнаменатель
		|ПОМЕСТИТЬ ТаблицаКурсовВалют
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта";
		
		Результат.Добавить(ТекстЗапроса, "ТаблицаКурсовВалют");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	Характеристика КАК Характеристика,
		|	ВидЦены КАК ВидЦены,
		|	Цена КАК Цена,
		|	Упаковка КАК Упаковка,
		|	Валюта КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, Характеристика, ВидЦены) В
		|		(ВЫБРАТЬ
		|			Номенклатура,
		|			Характеристика,
		|			ВидЦены
		|		ИЗ
		|			ВременнаяТаблицаВидыЦен)) КАК ТаблицаЦенСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ВидЦены";
		
		Результат.Добавить(ТекстЗапроса, "ВременнаяТаблицаЦеныНоменклатуры");
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаВидыЦен.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	ВременнаяТаблицаВидыЦен.Валюта КАК Валюта,
		|	ВременнаяТаблицаВидыЦен.ВидЦены КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаВидыЦен.Цена > 0
		|			ТОГДА ВременнаяТаблицаВидыЦен.Цена * ВЫБОР
		|				КОГДА &Валюта <> ВременнаяТаблицаВидыЦен.Валюта
		|					ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель /
		|								(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|		КОГДА ВременнаяТаблицаВидыЦен.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
		|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена * ВЫБОР
		|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
		|					ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель /
		|								(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	ВременнаяТаблицаВидыЦен КАК ВременнаяТаблицаВидыЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЦеныНоменклатуры КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВременнаяТаблицаВидыЦен.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		И ВременнаяТаблицаВидыЦен.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|		И ВременнаяТаблицаВидыЦен.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыСрезПоследнихВалютаДокумента
		|		ПО КурсыСрезПоследнихВалютаДокумента.Валюта = &Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыСрезПоследнихВалютаСоглашения
		|		ПО (КурсыСрезПоследнихВалютаСоглашения.Валюта = ВременнаяТаблицаВидыЦен.Валюта)";
		
		Результат.Добавить(ТекстЗапроса, "ЗаполнитьУсловияПродаж");
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВтИсточникДанных.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	ВтИсточникДанных.Номенклатура КАК Номенклатура,
		|	ВтИсточникДанных.Характеристика КАК Характеристика,
		|	СоглашениеШапка.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL
		|			ТОГДА СоглашениеТовары.ВидЦены
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ТОГДА СоглашениеШапка.ВидЦен
		|	КОНЕЦ КАК ВидЦены,
		|	ЕСТЬNULL(СоглашениеТовары.Цена, 0) КАК Цена,
		|	СоглашениеТовары.Упаковка КАК Упаковка,
		|	&ТекстЗапросаКоэффициентУпаковки3 КАК КоэффициентУпаковкиСоглашения,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
		|			ТОГДА СоглашениеТовары.СрокПоставки
		|		ИНАЧЕ ВЫБОР
		|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
		|				ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
		|			ИНАЧЕ СоглашениеШапка.СрокПоставки
		|		КОНЕЦ
		|	КОНЕЦ КАК СрокПоставки
		|ПОМЕСТИТЬ ВременнаяТаблицаВидыЦен
		|ИЗ
		|	ВтИсточникДанных КАК ВтИсточникДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
		|		ПО ВтИсточникДанных.Номенклатура = СправочникНоменклатура.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|		ПО (СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка)
		|		И ВтИсточникДанных.Номенклатура = СоглашениеТовары.Номенклатура
		|		И ВтИсточникДанных.Характеристика = СоглашениеТовары.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
		|		И (СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки3",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"СоглашениеТовары.Упаковка",
				"СоглашениеТовары.Номенклатура"));
		
		Результат.Добавить(ТекстЗапроса, "ВременнаяТаблицаВидыЦен");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Валюта КАК Валюта,
		|	КурсЧислитель КАК КурсЧислитель,
		|	КурсЗнаменатель КАК КурсЗнаменатель
		|ПОМЕСТИТЬ ТаблицаКурсовВалют
		|ИЗ
		|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта";
		
		Результат.Добавить(ТекстЗапроса, "ТаблицаКурсовВалют");
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Номенклатура КАК Номенклатура,
		|	Характеристика КАК Характеристика,
		|	ВидЦены КАК ВидЦены,
		|	Цена КАК Цена,
		|	Упаковка КАК Упаковка,
		|	Валюта КАК Валюта
		|ПОМЕСТИТЬ ВременнаяТаблицаЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, Характеристика, ВидЦены) В
		|		(ВЫБРАТЬ
		|			Номенклатура,
		|			Характеристика,
		|			ВидЦены
		|		ИЗ
		|			ВременнаяТаблицаВидыЦен)) КАК ТаблицаЦенСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ВидЦены";
		
		Результат.Добавить(ТекстЗапроса, "ВременнаяТаблицаЦеныНоменклатуры");
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВременнаяТаблицаВидыЦен.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
		|	ВременнаяТаблицаВидыЦен.Валюта КАК Валюта,
		|	ВременнаяТаблицаВидыЦен.ВидЦены КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА ВременнаяТаблицаВидыЦен.Цена > 0
		|			ТОГДА ВЫБОР
		|				КОГДА ВременнаяТаблицаВидыЦен.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА &ТекстЗапросаКоэффициентУпаковки1
		|				ИНАЧЕ 1
		|			КОНЕЦ * ВременнаяТаблицаВидыЦен.Цена / ЕСТЬNULL(ВременнаяТаблицаВидыЦен.КоэффициентУпаковкиСоглашения, 1) * ВЫБОР
		|				КОГДА &Валюта <> ВременнаяТаблицаВидыЦен.Валюта
		|					ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаСоглашения.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель /
		|								(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаСоглашения.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|		КОГДА ВременнаяТаблицаВидыЦен.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|		И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
		|			ТОГДА ВЫБОР
		|				КОГДА ВременнаяТаблицаВидыЦен.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|					ТОГДА &ТекстЗапросаКоэффициентУпаковки1
		|				ИНАЧЕ 1
		|			КОНЕЦ * ЦеныНоменклатурыСрезПоследних.Цена / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
		|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
		|					ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.КурсЧислитель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель, 0) > 0
		|						И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.КурсЧислитель * КурсыСрезПоследнихВалютаДокумента.КурсЗнаменатель /
		|								(КурсыСрезПоследнихВалютаДокумента.КурсЧислитель * КурсыСрезПоследнихВалютаЦены.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|				ИНАЧЕ 1
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Цена,
		|	ВременнаяТаблицаВидыЦен.СрокПоставки КАК СрокПоставки
		|ИЗ
		|	ВременнаяТаблицаВидыЦен КАК ВременнаяТаблицаВидыЦен
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаЦеныНоменклатуры КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ВременнаяТаблицаВидыЦен.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|		И ВременнаяТаблицаВидыЦен.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|		И ВременнаяТаблицаВидыЦен.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыСрезПоследнихВалютаДокумента
		|		ПО КурсыСрезПоследнихВалютаДокумента.Валюта = &Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыСрезПоследнихВалютаСоглашения
		|		ПО (КурсыСрезПоследнихВалютаСоглашения.Валюта = ВременнаяТаблицаВидыЦен.Валюта)";
			
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки1",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ВЫРАЗИТЬ(ВременнаяТаблицаВидыЦен.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
				"ВЫРАЗИТЬ(ВременнаяТаблицаВидыЦен.Номенклатура КАК Справочник.Номенклатура)"));
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстЗапросаКоэффициентУпаковки2",
			Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
				"ЦеныНоменклатурыСрезПоследних.Упаковка",
				"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
		Результат.Добавить(ТекстЗапроса, "ЗаполнитьУсловияПродаж");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстыЗапросовУсловияПродаж25ПакетнаяОбработка(ПараметрыДействия)
	
	Результат = Новый СписокЗначений;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТаблицаТовары.ВидЦены КАК ВидЦены,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА
	|			ВидыНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ КАК ХарактеристикаЦО,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоСерии = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Серия.СерияНоменклатурыДляЦенообразования
	|	КОНЕЦ, ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка)) КАК СерияЦО,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК УпаковкаЦО
	|ПОМЕСТИТЬ ТаблицаТоварыДоп
	|ИЗ
	|	ВтИсточникДанных КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = ТаблицаТовары.Номенклатура.ВидНоменклатуры)";
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаТоварыДоп");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.ВидЦены КАК ВидЦены,
	|	МИНИМУМ(ВложенныйЗапрос.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВременнаяТаблицаВидыЦен
	|ИЗ
	|	&ТекстЗапросаИсточникаУсловияПродаж КАК ВложенныйЗапрос
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ВидЦены";
	
	ЗаполнятьПоСоглашению = ЗначениеЗаполнено(ПараметрыДействия.Соглашение);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаИсточникаУсловияПродаж",
		ТекстЗапросаИсточникаУсловияПродаж(ЗаполнятьПоСоглашению));
	
	Результат.Добавить(ТекстЗапроса, "ВременнаяТаблицаВидыЦен");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОтбора.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТаблицаОтбора.Номенклатура КАК Номенклатура,
	|	ТаблицаОтбора.Упаковка КАК Упаковка,
	|	ТаблицаОтбора.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО КАК СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО КАК УпаковкаЦО,
	|	&ЗначениеВидаЦенПоИсточнику КАК ВидЦены,
	|	МИНИМУМ(ВременнаяТаблицаВидыЦен.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	ТаблицаТоварыДоп КАК ТаблицаОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаВидыЦен КАК ВременнаяТаблицаВидыЦен
	|		ПО (ИСТИНА)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОтбора.ИдентификаторСтрокиВТ,
	|	ТаблицаОтбора.Номенклатура,
	|	ТаблицаОтбора.Упаковка,
	|	ТаблицаОтбора.ХарактеристикаЦО,
	|	ТаблицаОтбора.СерияЦО,
	|	ТаблицаОтбора.УпаковкаЦО,
	|	&ЗначениеВидаЦенПоИсточнику
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтрокиВТ,
	|	Номенклатура,
	|	Упаковка,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены";
	
	Если ЗаполнятьПоСоглашению Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ЗначениеВидаЦенПоИсточнику",
			"ВременнаяТаблицаВидыЦен.ВидЦены");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ЗначениеВидаЦенПоИсточнику",
			"ВЫБОР
			|		КОГДА ВременнаяТаблицаВидыЦен.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			ТОГДА ТаблицаОтбора.ВидЦены
			|		ИНАЧЕ ВременнаяТаблицаВидыЦен.ВидЦены
			|	КОНЕЦ");
		
	КонецЕсли;
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаОтбора");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Валюта КАК Валюта,
	|	КурсЧислитель КАК КурсЧислитель,
	|	КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ ТаблицаКурсовВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта";
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаКурсовВалют");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОтбора.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) /
	|		ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) * ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|				И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель / (КурсыВалюты.КурсЧислитель *
	|						КурсыВалютыЦены.КурсЗнаменатель)
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ЦеныНоменклатурыСрезПоследних.СерияЦО КАК СерияЦО,
	|	ЦеныНоменклатурыСрезПоследних.УпаковкаЦО КАК УпаковкаЦО,
	|	ТаблицаОтбора.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаРезультата
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры25.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), (Номенклатура, ХарактеристикаЦО, СерияЦО,
	|		УпаковкаЦО, ВидЦены) В
	|		(ВЫБРАТЬ
	|			Т.Номенклатура,
	|			Т.ХарактеристикаЦО,
	|			Т.СерияЦО,
	|			Т.УпаковкаЦО,
	|			Т.ВидЦены
	|		ИЗ
	|			ТаблицаОтбора КАК Т)) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалютыЦены
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсовВалют КАК КурсыВалюты
	|		ПО КурсыВалюты.Валюта = &Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = ТаблицаОтбора.Номенклатура
	|		И ЦеныНоменклатурыСрезПоследних.ХарактеристикаЦО = ТаблицаОтбора.ХарактеристикаЦО
	|		И ЦеныНоменклатурыСрезПоследних.СерияЦО = ТаблицаОтбора.СерияЦО
	|		И ЦеныНоменклатурыСрезПоследних.УпаковкаЦО = ТаблицаОтбора.УпаковкаЦО
	|		И ЦеныНоменклатурыСрезПоследних.ВидЦены = ТаблицаОтбора.ВидЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтрокиВТ,
	|	Номенклатура,
	|	ХарактеристикаЦО,
	|	СерияЦО,
	|	УпаковкаЦО,
	|	ВидЦены";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВЫРАЗИТЬ(ТаблицаОтбора.Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения)",
			"ВЫРАЗИТЬ(ТаблицаОтбора.Номенклатура КАК Справочник.Номенклатура)"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	Результат.Добавить(ТекстЗапроса, "ТаблицаРезультата");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРезультата.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТаблицаРезультата.Номенклатура КАК Номенклатура,
	|	ТаблицаРезультата.ХарактеристикаЦО КАК ХарактеристикаЦО,
	|	ТаблицаРезультата.СерияЦО КАК СерияЦО,
	|	ТаблицаРезультата.УпаковкаЦО КАК УпаковкаЦО,
	|	МИНИМУМ(ТаблицаРезультата.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаРезультатаПриоритеты
	|ИЗ
	|	ТаблицаРезультата КАК ТаблицаРезультата
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРезультата.ИдентификаторСтрокиВТ,
	|	ТаблицаРезультата.Номенклатура,
	|	ТаблицаРезультата.ХарактеристикаЦО,
	|	ТаблицаРезультата.СерияЦО,
	|	ТаблицаРезультата.УпаковкаЦО";
	
	Результат.Добавить(ТекстЗапроса, "ТаблицаРезультатаПриоритеты");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРезультата.ИдентификаторСтрокиВТ КАК ИдентификаторСтрокиВТ,
	|	ТаблицаРезультата.ВидЦены КАК ВидЦены,
	|	ТаблицаРезультата.Цена КАК Цена
	|ИЗ
	|	ТаблицаРезультатаПриоритеты КАК ТаблицаРезультатаПриоритеты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРезультата КАК ТаблицаРезультата
	|		ПО ТаблицаРезультатаПриоритеты.ИдентификаторСтрокиВТ = ТаблицаРезультата.ИдентификаторСтрокиВТ
	|		И ТаблицаРезультатаПриоритеты.Номенклатура = ТаблицаРезультата.Номенклатура
	|		И ТаблицаРезультатаПриоритеты.ХарактеристикаЦО = ТаблицаРезультата.ХарактеристикаЦО
	|		И ТаблицаРезультатаПриоритеты.СерияЦО = ТаблицаРезультата.СерияЦО
	|		И ТаблицаРезультатаПриоритеты.УпаковкаЦО = ТаблицаРезультата.УпаковкаЦО
	|		И ТаблицаРезультатаПриоритеты.Приоритет = ТаблицаРезультата.Приоритет";
	
	Результат.Добавить(ТекстЗапроса, "ЗаполнитьУсловияПродаж");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти
