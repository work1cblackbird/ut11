#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ
		Или Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыИнформированияЕГАИС.КПередаче);
			
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыИнформированияЕГАИС.ПереданВУТМ;
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыИнформированияЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
			
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМОтменаПередачи Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыИнформированияЕГАИС.ОтменаПередачи;
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыИнформированияЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(
			ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Неопределено - не требуется
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ ЕГАИС.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - новый статус документа ЕГАИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ОбменДаннымиЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	Если ОбщегоНазначенияЕГАИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульЧекЕГАИС = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ЧекЕГАИС");
		МодульЧекЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ОбменДаннымиЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаЧекаНаВозврат(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	Если ОбщегоНазначенияЕГАИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульЧекЕГАИС = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ЧекЕГАИС");
		МодульЧекЕГАИС.ПриИзмененииСтатусаЧекаНаВозврат(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	КонецЕсли;
	
КонецПроцедуры

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ОбменДаннымиЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ОбменДаннымиЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОбменДаннымиЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, Перечисления.ВидыДокументовЕГАИС.ЧекККМ, ДокументСсылка, Ложь, Ложь);
	
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыИнформированияЕГАИС.Черновик;
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыИнформированияЕГАИС.КПередаче);
	Результат.Добавить(Перечисления.СтатусыИнформированияЕГАИС.ПереданВУТМ);
	
	Возврат Результат;
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыИнформированияЕГАИС.ПереданВУТМ);
	
	Возврат Результат;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

Функция ЧекXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц, Операция = Неопределено) Экспорт
	
	СообщенияXML = Новый Массив;
	
	Если Операция = Неопределено Тогда
		Операция = Перечисления.ВидыДокументовЕГАИС.ЧекККМ;
	КонецЕсли;
	
	Шапка  = РезультатыЗапроса["Шапка"].Выбрать();
	Товары = РезультатыЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	ФорматОбменаМенееV4 = Не Перечисления.ФорматыОбменаЕГАИС.ФорматОбменаНеМенееV4(ФорматОбмена);
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(Операция, ФорматОбмена);
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(Операция, ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	Если Шапка.Количество() > 1 Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |По данным сопоставления найдено несколько организаций ЕГАИС'");
		
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ОрганизацияЕГАИС) Тогда
		
		ТекстСообщения = НСтр("ru = 'Ошибка сопоставления организаций ЕГАИС с данными информационной базы.
		                            |Не удалось найти организацию ЕГАИС'");
		
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстСообщения);
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	Выборка = РезультатыЗапроса["ВложенныеШтрихкоды"].Выбрать();
	
	Если ОбщегоНазначенияЕГАИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		
		МодульШтрихкодированиеЕГАИС = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеЕГАИС");
		
		ВложенныеШтрихкодыУпаковок = МодульШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоВыборкеИМенеджеруВТ(
			Выборка, МенеджерВременныхТаблиц);
		
		АкцизныеМарки = Новый ТаблицаЗначений;
		АкцизныеМарки.Колонки.Добавить("ИдентификаторСтроки",  Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
		АкцизныеМарки.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
		АкцизныеМарки.Колонки.Добавить("КодАкцизнойМарки",     ОбщегоНазначения.ОписаниеТипаСтрока(200));
		АкцизныеМарки.Колонки.Добавить("Количество",           Метаданные.ОпределяемыеТипы.КоличествоЕГАИСНеотрицательное.Тип);
		АкцизныеМарки.Колонки.Добавить("Коэффициент",          ОбщегоНазначения.ОписаниеТипаЧисло(12, 3));
		АкцизныеМарки.Колонки.Добавить("ЧастичноеВыбытие",     Новый ОписаниеТипов("Булево"));
		АкцизныеМарки.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
		АкцизныеМарки.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
		АкцизныеМарки.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
		АкцизныеМарки.Колонки.Добавить("КоличествоВПотребительскойУпаковке", ОбщегоНазначения.ОписаниеТипаЧисло(18, 8));
		
		НоменклатураСЧастичнымВыбытием = Новый Массив;
		
		Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			Если СтрокаТЧ.ЧастичноеВыбытие Тогда
				Если НоменклатураСЧастичнымВыбытием.Найти(СтрокаТЧ.Номенклатура) = Неопределено Тогда
					НоменклатураСЧастичнымВыбытием.Добавить(СтрокаТЧ.Номенклатура);
				КонецЕсли;
				Если ФорматОбменаМенееV4 Тогда
					ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеXML,
						СтрШаблон(
							НСтр("ru = 'Акцизная марка %1 не может быть обработана по причине: формат обмена %2 не поддерживает частичное выбытие'"),
							СтрокаТЧ.Штрихкод,
							ФорматОбмена));
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = АкцизныеМарки.Добавить();
			НоваяСтрока.ИдентификаторСтроки  = СтрокаТЧ.ИдентификаторСтроки;
			НоваяСтрока.АлкогольнаяПродукция = СтрокаТЧ.АлкогольнаяПродукция;
			НоваяСтрока.КодАкцизнойМарки     = СтрокаТЧ.Штрихкод;
			НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
			НоваяСтрока.Серия                = СтрокаТЧ.Серия;
			НоваяСтрока.ЧастичноеВыбытие     = СтрокаТЧ.ЧастичноеВыбытие;
			Если СтрокаТЧ.Коэффициент = 0 Тогда
				НоваяСтрока.КоличествоВПотребительскойУпаковке = 1;
			Иначе
				НоваяСтрока.КоличествоВПотребительскойУпаковке = СтрокаТЧ.Коэффициент;
			КонецЕсли;
			Если СтрокаТЧ.Количество = 0 Тогда
				НоваяСтрока.Количество = 1;
			Иначе
				НоваяСтрока.Количество = СтрокаТЧ.Количество;
			КонецЕсли;
			Если НоваяСтрока.ЧастичноеВыбытие Тогда
				Если СтрокаТЧ.Коэффициент = 0 Тогда
					НоваяСтрока.Коэффициент = 1;
				Иначе
					НоваяСтрока.Коэффициент = СтрокаТЧ.ЕмкостьПотребительскойУпаковки / СтрокаТЧ.Коэффициент;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
	Иначе
		
		АкцизныеМарки = РезультатыЗапроса["АкцизныеМарки"].Выгрузить();
		
	КонецЕсли;
	
	ЕстьЧастичноеВыбытие = НоменклатураСЧастичнымВыбытием.Количество() > 0;
	ИспользоватьФорматОбменаV4 = Не ФорматОбменаМенееV4 И ЕстьЧастичноеВыбытие;
	
	ПараметрыОтбора = Новый Структура("Номенклатура,Характеристика,Серия");
	
	Если ИспользоватьФорматОбменаV4 Тогда
		
		#Область ФорматОбмена_V4
		
		ЧекXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "ChequeV4Type");
			
		#Область ФормированиеСообшенияОбменаШапка
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(
			ЧекXDTO, "Identity", 
			СтрШаблон(
				"%1%2%3",
				Шапка.СерийныйНомерККМ,
				Формат(Шапка.НомерСмены, "ЧГ=0"),
				Формат(Шапка.НомерЧекаККМ, "ЧГ=0")), СообщениеXML, 3);
		
		ЧекXDTO.Header = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ЧекXDTO, "Header");
		
		ЧекXDTO.Content = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ЧекXDTO, "Content");
		
		#КонецОбласти
		
		#Область ПодготовкаДанных
		
		ТаблицаТовары = Товары.Скопировать(,
			"НомерСтроки,ИдентификаторСтроки,Номенклатура,Характеристика,Серия,Штрихкод,Количество,Цена,ОбъемДАЛ");
		
		ТаблицаТовары.Колонки.Добавить("ЧастичноеВыбытие", Новый ОписаниеТипов("Булево"));
		ТаблицаТовары.Колонки.Добавить("АкцизныеМарки",    Новый ОписаниеТипов("Массив"));
		ТаблицаТовары.Колонки.Добавить("КоличествоЕГАИС",  Метаданные.ОпределяемыеТипы.КоличествоЕГАИСНеотрицательное.Тип);
		ТаблицаТовары.Колонки.Добавить("ЦенаЕГАИС",        Метаданные.ОпределяемыеТипы.ДенежнаяСуммаГосИСНеотрицательная.Тип);
		
		Для Каждого СтрокаТЧ Из АкцизныеМарки Цикл
			
			КоличествоКРаспределению = СтрокаТЧ.Количество;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ЧастичноеВыбытие",    Ложь);
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТЧ.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
			СтруктураПоиска.Вставить("Серия",          СтрокаТЧ.Серия);
			
			РаспределитьАкцизнуюМаркуПоТаблицеТоваров(ТаблицаТовары, СтруктураПоиска, СтрокаТЧ, КоличествоКРаспределению);
			
			Если КоличествоКРаспределению > 0 Тогда
				
				СтруктураПоиска.Вставить("Номенклатура",   СтрокаТЧ.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
				СтруктураПоиска.Вставить("Серия",          СтрокаТЧ.Серия);
				
				РаспределитьАкцизнуюМаркуПоТаблицеТоваров(ТаблицаТовары, СтруктураПоиска, СтрокаТЧ, КоличествоКРаспределению);
				
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ФормированиеСообшенияОбменаСписок
		
		ТипЧека = Неопределено;
		Для Каждого СтрокаТЧ Из ТаблицаТовары Цикл
			
			Если СтрокаТЧ.Количество = 0 Тогда
				
				Если СтрокаТЧ.ЦенаЕГАИС < 0 Тогда
					Цена = Формат(-СтрокаТЧ.ЦенаЕГАИС, "ЧДЦ=2; ЧРД=.; ЧГ=0");
					Если ТипЧека = Неопределено Тогда
						ТипЧека = "Возврат";
					КонецЕсли;
				Иначе
					Цена = Формат(СтрокаТЧ.ЦенаЕГАИС, "ЧДЦ=2; ЧРД=.; ЧГ=0");
					Если ТипЧека = Неопределено Тогда
						ТипЧека = "Продажа";
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаТЧ.ЧастичноеВыбытие Тогда
					ИмяОбъектаXDTO = "Catering";
				Иначе
					ИмяОбъектаXDTO = "Bottle";
				КонецЕсли;
				
				Для Каждого КодАкцизнойМарки Из СтрокаТЧ.АкцизныеМарки Цикл
					
					ОбъектXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяОбъектаXDTO, ЧекXDTO.Content);
					
					РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "barcode", КодАкцизнойМарки, СообщениеXML);
					
					Если ЗначениеЗаполнено(СтрокаТЧ.Штрихкод)
						И ЭтоШтрихкодEAN(СтрокаТЧ.Штрихкод)
						И Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(СтрокаТЧ.Штрихкод) Тогда
						РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ean", СтрокаТЧ.Штрихкод, СообщениеXML);
					Иначе
						РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "ean", "0000000000000", СообщениеXML);
					КонецЕсли;
					
					РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "price", Цена, СообщениеXML);
					
					Если СтрокаТЧ.ЧастичноеВыбытие Тогда
						РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОбъектXDTO, "Volume", СтрокаТЧ.КоличествоЕГАИС, СообщениеXML);
					КонецЕсли;
					
					ЧекXDTO.Content[ИмяОбъектаXDTO].Добавить(ОбъектXDTO);
					
				КонецЦикла;
				
			Иначе
				
				ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
						СтрШаблон(
							НСтр("ru = 'Указано недостаточное количество акцизных марок в строке %1 табличной части ""Товары""'"), СтрокаТЧ.НомерСтроки));
				
			КонецЕсли;
			
		КонецЦикла;
		
		#КонецОбласти
		
		#Область ЗаполнениеСообшенияОбменаШапка
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Date",     Формат(Шапка.Дата, "ДФ=yyyy-MM-ddTHH:mm:ss"), СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Kassa",    Шапка.СерийныйНомерККМ,                       СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Shift",    Шапка.НомерСмены,                             СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Number",   Шапка.НомерЧекаККМ,                           СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Type",     ТипЧека,                                      СообщениеXML);
		
		#КонецОбласти
		
		ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЧекXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
		
		#КонецОбласти
		
	ИначеЕсли Не ФорматОбменаМенееV4 Тогда
		
		ОписаниеНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Товары.ВыгрузитьКолонку("Номенклатура"));
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			ДанныеОписанияНоменклатуры = ОписаниеНоменклатуры[СтрокаТЧ.Номенклатура];
			Если ДанныеОписанияНоменклатуры <> Неопределено
				И ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке <> 0
				И ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке <> 1 Тогда
				СтрокаТЧ.Цена       = Окр(СтрокаТЧ.Цена * ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке, 2);
				СтрокаТЧ.Количество = Окр(СтрокаТЧ.Количество / ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке, 0);
			КонецЕсли;
		КонецЦикла;
		
		ФорматОбмена = Перечисления.ФорматыОбменаЕГАИС.V3;
		ПространствоИмен = СтрЗаменить(ПространствоИмен, "ChequeV4", "ChequeV3");
		ИмяТипа = СтрЗаменить(ИмяТипа, "ChequeV4", "ChequeV3");
		
		ЧекXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "ChequeV3Type");
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(
			ЧекXDTO, "Identity",
			СтрШаблон(
				"%1%2%3",
				Шапка.СерийныйНомерККМ,
				Формат(Шапка.НомерСмены, "ЧГ=0"),
				Формат(Шапка.НомерЧекаККМ, "ЧГ=0")), СообщениеXML, 3);
		
		ЧекXDTO.Header = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ЧекXDTO, "Header");
		
		ЧекXDTO.Content = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ЧекXDTO, "Content");
		
		ТипЧека = Неопределено;
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Если СтрокаТЧ.Цена < 0 Тогда
				Цена = Формат(-СтрокаТЧ.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
				Если ТипЧека = Неопределено Тогда
					ТипЧека = "Возврат";
				КонецЕсли;
			Иначе
				Цена = Формат(СтрокаТЧ.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
				Если ТипЧека = Неопределено Тогда
					ТипЧека = "Продажа";
				КонецЕсли;
			КонецЕсли;
			
			КодыАкцизныхМарок = Новый Массив;
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТЧ);
			
			КоличествоМарок = СтрокаТЧ.Количество;
			
			НайденныеСтроки = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если КоличествоМарок > 0 Тогда
					КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
					АкцизныеМарки.Удалить(НайденнаяСтрока);
					КоличествоМарок = КоличествоМарок - 1;
				КонецЕсли;
			КонецЦикла;
			
			Если КодыАкцизныхМарок.Количество() = СтрокаТЧ.Количество Тогда
				
				Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
					
					Bottle = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle", ЧекXDTO.Content);
					
					РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "barcode", КодАкцизнойМарки,  СообщениеXML);
					Если Не ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
						РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", "0000000000000", СообщениеXML);
					ИначеЕсли ЭтоШтрихкодEAN(СтрокаТЧ.Штрихкод) Тогда
						Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(СтрокаТЧ.Штрихкод) Тогда
							РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", "0000000000000", СообщениеXML);
						Иначе
							РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", СтрокаТЧ.Штрихкод, СообщениеXML);
						КонецЕсли;
					Иначе
						РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", "0000000000000", СообщениеXML);
					КонецЕсли;
					РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "price", Цена, СообщениеXML);
					
					ЧекXDTO.Content.Bottle.Добавить(Bottle);
					
				КонецЦикла;
				
			Иначе
				
				ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
						СтрШаблон(
							НСтр("ru = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""'"), СтрокаТЧ.НомерСтроки));
				
			КонецЕсли;
			
		КонецЦикла;
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Date",     Формат(Шапка.Дата, "ДФ=yyyy-MM-ddTHH:mm:ss"), СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Kassa",    Шапка.СерийныйНомерККМ,                       СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Shift",    Шапка.НомерСмены,                             СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Number",   Шапка.НомерЧекаККМ,                           СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO.Header, "Type",     ТипЧека,                                      СообщениеXML);
		
		ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЧекXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
		
	Иначе
		
		ОписаниеНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Товары.ВыгрузитьКолонку("Номенклатура"));
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			ДанныеОписанияНоменклатуры = ОписаниеНоменклатуры[СтрокаТЧ.Номенклатура];
			Если ДанныеОписанияНоменклатуры <> Неопределено
				И ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке <> 0
				И ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке <> 1 Тогда
				СтрокаТЧ.Цена       = Окр(СтрокаТЧ.Цена * ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке, 2);
				СтрокаТЧ.Количество = Окр(СтрокаТЧ.Количество / ДанныеОписанияНоменклатуры.КоличествоВПотребительскойУпаковке, 0);
			КонецЕсли;
		КонецЦикла;
		
		АдресТорговогоОбъекта = "";
		СопоставлениеОбъектовЕГАИСПереопределяемый.АдресТорговогоОбъекта(АдресТорговогоОбъекта, Шапка.ТорговыйОбъект);
		
		Если Не ЗначениеЗаполнено(АдресТорговогоОбъекта) Тогда
			ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(НСтр("ru = 'Не заполнен адрес торгового объекта: %1'"), Шапка.ТорговыйОбъект));
			СообщенияXML.Добавить(СообщениеXML);
			Возврат СообщенияXML;
		КонецЕсли;
		
		ЧекXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "inn",      Шапка.ИНН,                           СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kpp",      Шапка.КПП,                           СообщениеXML, Неопределено, Истина);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "address",  АдресТорговогоОбъекта,               СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "name",     Строка(Шапка.ТорговыйОбъект),        СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "kassa",    Шапка.СерийныйНомерККМ,              СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "shift",    Шапка.НомерСмены,                    СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "number",   Шапка.НомерЧекаККМ,                  СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЧекXDTO, "datetime", Формат(Шапка.Дата, "ДФ=ddMMyyHHmm"), СообщениеXML);
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			
			Цена  = Формат(СтрокаТЧ.Цена, "ЧДЦ=2; ЧРД=.; ЧГ=0");
			Объем = Формат(СтрокаТЧ.Объем, "ЧДЦ=4; ЧРД=.; ЧГ=0");
			
			КодыАкцизныхМарок = Новый Массив;
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТЧ);
			
			КоличествоМарок = СтрокаТЧ.Количество;
			
			НайденныеСтроки = АкцизныеМарки.НайтиСтроки(ПараметрыОтбора);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если КоличествоМарок > 0 Тогда
					КодыАкцизныхМарок.Добавить(НайденнаяСтрока.КодАкцизнойМарки);
					АкцизныеМарки.Удалить(НайденнаяСтрока);
					КоличествоМарок = КоличествоМарок - 1;
				КонецЕсли;
			КонецЦикла;
			
			Если КодыАкцизныхМарок.Количество() = СтрокаТЧ.Количество Тогда
				
				Для Каждого КодАкцизнойМарки Из КодыАкцизныхМарок Цикл
					
					Bottle = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Bottle");
					
					РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "price"  , Цена,              СообщениеXML);
					РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "barcode", КодАкцизнойМарки,  СообщениеXML);
					
					Если ЭтоШтрихкодEAN(СтрокаТЧ.Штрихкод) Тогда
						РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "ean", СтрокаТЧ.Штрихкод, СообщениеXML);
					КонецЕсли;
					
					РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Bottle, "volume" , Объем,             СообщениеXML);
					
					ЧекXDTO.Bottle.Добавить(Bottle);
					
				КонецЦикла;
				
			Иначе
				
				ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
						СтрШаблон(
							НСтр("ru = 'Не заполнены акцизные марки в строке %1 табличной части ""Товары""'"), СтрокаТЧ.НомерСтроки));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстСообщенияXML = РаботаСXMLЕГАИС.ЧекXDTOВXML(ЧекXDTO, ПространствоИмен, ИмяТипа);
		
	КонецЕсли;
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = Операция;
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаПроверкиЗаполнения

Процедура ПроверитьОтсутствиеНемаркируемойПродукции(Объект, Отказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.АлкогольнаяПродукция,
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО Товары.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|ГДЕ
	|	НЕ КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции.Маркируемый
	|");
	
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(, "АлкогольнаяПродукция, НомерСтроки"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	НомерОшибки = 1;
	КоличествоОшибок = Выборка.Количество();
	
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = НСтр("ru = 'В строке %1 указана немаркируемая алкогольная продукция ""%2""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Выборка.НомерСтроки, Выборка.АлкогольнаяПродукция);
		
		Если НомерОшибки = КоличествоОшибок Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + 
				НСтр("ru = 'Операции с немаркируемой алкогольной продукцией должны отражаться документами ""%1""'");
			
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ЧекЕГАИС") Тогда
				ТипДокументаДляНемаркируемойПродукции = НСтр("ru = 'Акт списания ЕГАИС'");
			Иначе
				ТипДокументаДляНемаркируемойПродукции = НСтр("ru = 'Акт постановки на баланс ЕГАИС'");
			КонецЕсли;
			
			ТекстОшибки = СтрШаблон(ТекстОшибки, ТипДокументаДляНемаркируемойПродукции);
		КонецЕсли;
		
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			Объект,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "АлкогольнаяПродукция"),,
			Отказ);
			
		НомерОшибки = НомерОшибки + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоШтрихкодEAN(Штрихкод) Экспорт
	
	Если Штрихкод = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипEAN = ФабрикаXDTO.Тип("http://fsrar.ru/WEGAIS/Common", "EANType");
	
	Попытка
		ТипEAN.Проверить(Штрихкод);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура РаспределитьАкцизнуюМаркуПоТаблицеТоваров(ТаблицаТовары, СтруктураПоиска, СтрокаТЧ, КоличествоКРаспределению) Экспорт

	// Данные чека в формате xml v4 должны передаваться:
	//  секция Bottle - данные о целых бутылках
	//  секция Catering - данные о частичном выбытии в мл.
	// На момент реализации алгоритма формирования сообщения, УТМ не примает данные в секции Bottle.
	// Временно реализован механизм, который переводит целые бутылки в мл. и передает их,
	// как частичное выбытие всего объема бутылки.
	ВременноРаспределятьПолныеБутылки = Истина;

	НайденныеСтроки = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);

	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

		Если КоличествоКРаспределению = 0 Тогда
			Прервать;
		КонецЕсли;

		Если НайденнаяСтрока.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		Количество = Мин(КоличествоКРаспределению, НайденнаяСтрока.Количество);

		НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - Количество;

		Если СтрокаТЧ.ЧастичноеВыбытие Тогда
			НоваяСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока,, "АкцизныеМарки");
			НоваяСтрока.ЧастичноеВыбытие = Истина;
			НоваяСтрока.Количество       = 0;
			НоваяСтрока.КоличествоЕГАИС  = Окр(Количество * СтрокаТЧ.Коэффициент, 0);
			НоваяСтрока.ЦенаЕГАИС        = НайденнаяСтрока.Цена * Количество;
			НоваяСтрока.АкцизныеМарки.Добавить(СтрокаТЧ.КодАкцизнойМарки);

			Если НайденнаяСтрока.Количество = 0
				И НайденнаяСтрока.АкцизныеМарки.Количество() = 0 Тогда
				ТаблицаТовары.Удалить(НайденнаяСтрока);
			КонецЕсли;
		// {временно (до исправления)
		ИначеЕсли ВременноРаспределятьПолныеБутылки Тогда
			НоваяСтрока = ТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока,, "АкцизныеМарки");
			НоваяСтрока.ЧастичноеВыбытие = Истина;
			НоваяСтрока.Количество       = 0;
			НоваяСтрока.КоличествоЕГАИС  = Окр(Количество * НайденнаяСтрока.ОбъемДАЛ * 10000, 0);
			НоваяСтрока.ЦенаЕГАИС        = НайденнаяСтрока.Цена * СтрокаТЧ.КоличествоВПотребительскойУпаковке;
			НоваяСтрока.АкцизныеМарки.Добавить(СтрокаТЧ.КодАкцизнойМарки);

			Если НайденнаяСтрока.Количество = 0
				И НайденнаяСтрока.АкцизныеМарки.Количество() = 0 Тогда
				ТаблицаТовары.Удалить(НайденнаяСтрока);
			КонецЕсли;
		// временно (до исправления)}
		Иначе
			НайденнаяСтрока.КоличествоЕГАИС = НайденнаяСтрока.КоличествоЕГАИС + 1;
			НайденнаяСтрока.АкцизныеМарки.Добавить(СтрокаТЧ.КодАкцизнойМарки);
			Если НайденнаяСтрока.ЦенаЕГАИС = 0 Тогда
				НайденнаяСтрока.ЦенаЕГАИС = НайденнаяСтрока.Цена * СтрокаТЧ.КоличествоВПотребительскойУпаковке;
			КонецЕсли;
		КонецЕсли;

		КоличествоКРаспределению = КоличествоКРаспределению - Количество;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти