
#Область ПрограммныйИнтерфейс

Функция ИмяПодсистемы() Экспорт
	
	Возврат "ЗЕРНО";
	
КонецФункции

// Определяет включение режима использования тестового контура ЗЕРНО.
//
// Возвращаемое значение:
//  Булево - Истина, если включен режим работы с тестовым контуром.
//
Функция РежимРаботыСТестовымКонтуромЗЕРНО() Экспорт
	
	Возврат ИнтеграцияЗЕРНОВызовСервера.РежимРаботыСТестовымКонтуромЗЕРНО();
	
КонецФункции

Функция ПредставлениеОКПД2(Наименование, Идентификатор) Экспорт
	
	Возврат СтрШаблон(НСтр("ru = '%1 (ОКПД2: %2)'"), Наименование, Идентификатор);
	
КонецФункции

Функция ПредставлениеКодТНВЭД(Наименование, Код) Экспорт
	
	Возврат СтрШаблон("%1 (%2)", Наименование, Код);
	
КонецФункции

Функция ПредставлениеДопустимыхЗначенийПоДиапазону(ДиапазонДопустимыхЗначений) Экспорт
	
	МассивСтрок = Новый Массив;
	Если ЗначениеЗаполнено(ДиапазонДопустимыхЗначений.ДиапазонС) Тогда
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'от %1'"), ДиапазонДопустимыхЗначений.ДиапазонС));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДиапазонДопустимыхЗначений.ДиапазонПо) Тогда
		МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'до %1'"), ДиапазонДопустимыхЗначений.ДиапазонПо));
	КонецЕсли;
	
	Возврат СтрСоединить(МассивСтрок, " ");
	
КонецФункции

Функция ПодсказкаКСостояниюОбмена(ИдентификаторПроблемы, ИмяЗапроса,Элемент = Неопределено) Экспорт
	
	Если ИдентификаторПроблемы = "ДлительноеОтсутствиеОбменаСДИЗ" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru='Синхронизация данных может занять неприемлемое время (в зависимости от количества предприятий - от 1 часа
				         |до нескольких дней). Рекомендуется заново'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='запросить СДИЗ'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "ЕстьРасхожденияДатыСинхронизацииИДатыОбменаСДИЗ" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Возможно, что в процессе обмена происходят ошибки времени выполнения. Рекомендуется провести анализ'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='журнала регистрации'"),,,, "e1cib/app/Обработка.ЖурналРегистрации"));
		СтрокаЗаголовка.Добавить(Символы.ПС);
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'по событиям ЗЕРНО на предмет наличия ошибок.'")));
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	ИначеЕсли ИдентификаторПроблемы = "НеАктуальныеСДИЗ" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Синхронизация записей складского журнала требуется для поддержания журнала в актуальном состоянии.
				|Рекомендуется'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='выполнить обмен'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
	
	ИначеЕсли ИдентификаторПроблемы = "СинхронизацияНеВыполняласьДлительноеВремя" Тогда
		
		СтрокаЗаголовка = Новый Массив;
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='Синхронизация не выполнялась длительное время. Рекомендуется'")));
		СтрокаЗаголовка.Добавить(" ");
		СтрокаЗаголовка.Добавить(
			Новый ФорматированнаяСтрока(
				Нстр("ru='выполнить синхронизацию'"),,,, "ВыполнитьОбмен"));
		СтрокаЗаголовка.Добавить(".");
		
		Возврат Новый ФорматированнаяСтрока(СтрокаЗаголовка);
		
	КонецЕсли;
	
КонецФункции

#Область ПредставленияТабличныхЧастейСтрокой

// Возвращает настройки для формирования надписи-представления табличной части
//
// Параметры:
//  ПоляПодстановки - Строка - имена колонок коллекции, которые будут использоваться в представлении
// 
// Возвращаемое значение:
//  Структура - с параметрами:
//   * Поля  - Строка - имена колонок табличной части, которые будут использоваться в представлении,
//      в порядке подстановки в шаблон (разделитель - ",");
//   * Пустая      - Строка - надпись по умолчанию для пустой коллекции (по умолчанию "не заполнено");
//   * НеЗаполнено - Строка - надпись по умолчанию для пустого значения элемента (по умолчанию "не заполнено");
//   * Шаблон      - Строка, Массив Из Строка - шаблон вывода строки коллекции (по умолчанию "%1"), 
//      если передан массив то объединяться будут только части с непустыми параметрами;
//   * Количество  - Число  - количество строк выводимых в представлении (по умолчанию 1);
//   * Разделитель - Строка - строка, которой будут разделяться выводимые элементы табличной части (по умолчанию ",");
//   * Уникальные  - Булево - вывод уникальных представлений строк (по умолчанию Ложь);
//   * Пустые      - Булево - вывод представлений строк из пустых элементов (по умолчанию Истина).
//
Функция ПараметрыПредставленияТабличнойЧасти(ПоляПодстановки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Поля",        ПоляПодстановки);
	Результат.Вставить("Пустая",      НСтр("ru = '<не заполнено>'"));
	Результат.Вставить("НеЗаполнено", НСтр("ru = '<не заполнено>'"));
	Результат.Вставить("Шаблон",      "%1");
	Результат.Вставить("Количество",  1);
	Результат.Вставить("Разделитель", ", ");
	Результат.Вставить("Уникальные",  Ложь);
	Результат.Вставить("Пустые",      Истина);
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ идентификаторов партий
//   (стандартное поле, уникальные записи)
//
// Возвращаемое значение:
//  См. ПараметрыПредставленияТабличнойЧасти.
//
Функция ПараметрыПредставленияТабличнойЧастиПартий() Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("ИдентификаторПартии");
	Результат.Уникальные = Истина;
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ связанные документы
//   (стандартные поля, переопределенные шаблон, представление пустой ТЧ)
//
// Возвращаемое значение:
//  См. ПараметрыПредставленияТабличнойЧасти.
//
Функция ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов() Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("ТипДокумента,Номер,Дата");
	Результат.Пустая = НСтр("ru = '<не заполнены>'");
	Результат.Шаблон = НСтр("ru = '%1 №%2 от %3'");
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ транспортные средства
//   (стандартные поля, переопределенные шаблон, представление пустой ТЧ)
// 
// Возвращаемое значение:
//  См. ПараметрыПредставленияТабличнойЧасти.
Функция ПараметрыПредставленияТабличнойЧастиТранспортныеСредства() Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("НомерТранспортногоСредства, НомерАвтомобильногоКонтейнера, ТипТранспорта");
	Результат.Пустая = "";
	Результат.Шаблон = Новый Массив();
	Результат.Шаблон.Добавить(НСтр("ru = '№ ТС: %1'"));
	Результат.Шаблон.Добавить(НСтр("ru = '№ контейнера: %1'"));
	Результат.Шаблон.Добавить(НСтр("ru = '(%1)'"));
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ транспортные средства
//   (стандартные поля, переопределенные шаблон, представление пустой ТЧ)
// 
// Возвращаемое значение:
//  См. ПараметрыПредставленияТабличнойЧасти.
Функция ПараметрыПредставленияТабличнойЧастиКорректируемыеСДИЗ() Экспорт
	
	Результат = ПараметрыПредставленияТабличнойЧасти("СДИЗ");
	Результат.Пустая = "";
	Результат.Шаблон = НСтр("ru = '%1'");
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройки для формирования надписи-представления ТЧ места перегрузки
//   (стандартные поля, переопределенные шаблон, представление пустой ТЧ)
//   Параметры:
// 	ИмяПоляПредставления - Неопределено, Строка - Имя основного поля представления
// Возвращаемое значение:
//  См. ПараметрыПредставленияТабличнойЧасти.
//
Функция ПараметрыПредставленияТабличнойЧастиМестаПерегрузки(ИмяПоляПредставления = Неопределено) Экспорт
	
	Если ИмяПоляПредставления = Неопределено Тогда
		ИмяПоляПредставления = "Адрес";
	КонецЕсли;
	Результат = ПараметрыПредставленияТабличнойЧасти(ИмяПоляПредставления);
	Результат.Пустая = НСтр("ru = '<не заполнены>'");
	Результат.Шаблон = НСтр("ru = '%1'");

	Возврат Результат;
	
КонецФункции

// Формирует надпись (представление) гиперссылки для перехода в данные таб. части
// 
// Параметры:
//  Данные - ДанныеФормыКоллекция, ТаблицаЗначений, Массив из СтрокаТаблицыЗначений - данные информацию о которых необходимо вывести;
//  ПараметрыНадписи - Структура, Строка -См. ПараметрыНадписиПредставленияТабличнойЧасти()(строка вызывает конструктор структуры)
// 
// Возвращаемое значение:
//  Строка - пользовательское представление табличной части
Функция СформироватьНадписьПоДаннымТабличнойЧасти(Данные, ПараметрыНадписи) Экспорт
	
	Если ТипЗнч(ПараметрыНадписи) = Тип("Строка") Тогда
		// Передано имя реквизита, считаем что строка-шаблон состоит только из него:
		ПараметрыНадписи = ПараметрыПредставленияТабличнойЧасти(ПараметрыНадписи);
	КонецЕсли;
	
	ИменаКолонок = СтрРазделить(ПараметрыНадписи.Поля, ",");
	
	КоличествоСтрок = Данные.Количество();
	
	МассивВыводимых = Новый Массив;
	МассивПрочих    = Новый Массив;
	СчетчикСтрок    = 0;
	
	Для НомерВыводимойСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаТабличнойЧасти = Данные[НомерВыводимойСтроки-1];
		Если ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
			ДобавляемаяСтрока = Новый Массив;
		Иначе
			ДобавляемаяСтрока = ПараметрыНадписи.Шаблон;
		КонецЕсли;
		ЭтоПустаяСтрока = Истина;
		
		Для Ит = 0 По ИменаКолонок.ВГраница() Цикл
			ЗначениеПараметра = "";
			ИмяКолонки = СокрЛП(ИменаКолонок[Ит]);
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонки]) Тогда
				ЗначениеПараметра = СтрокаТабличнойЧасти[ИмяКолонки];
				Если ТипЗнч(ЗначениеПараметра) = Тип("Дата") Тогда
					ЗначениеПараметра = Формат(ЗначениеПараметра, "ДЛФ=D");
				КонецЕсли;
				ЭтоПустаяСтрока = Ложь;
			КонецЕсли;
			Если ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяКолонки]) Тогда
					ДобавляемаяСтрока.Добавить(СтрЗаменить(ПараметрыНадписи.Шаблон[Ит],"%1", ЗначениеПараметра));
				КонецЕсли;
			Иначе
				ДобавляемаяСтрока = СтрЗаменить(ДобавляемаяСтрока, "%"+Формат(Ит+1,"ЧГ="), ЗначениеПараметра);
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоПустаяСтрока Тогда
			ДобавляемаяСтрока = ПараметрыНадписи.Пустая;
		ИначеЕсли ТипЗнч(ПараметрыНадписи.Шаблон) = Тип("Массив") Тогда
			ДобавляемаяСтрока = СтрСоединить(ДобавляемаяСтрока, " ");
		КонецЕсли;
		
		Если ЭтоПустаяСтрока И НЕ ПараметрыНадписи.Пустые Тогда
			Продолжить;
		ИначеЕсли ПараметрыНадписи.Уникальные И МассивВыводимых.Найти(ДобавляемаяСтрока) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли СчетчикСтрок < ПараметрыНадписи.Количество Тогда
			МассивВыводимых.Добавить(ДобавляемаяСтрока);
		ИначеЕсли ПараметрыНадписи.Уникальные И МассивПрочих.Найти(ДобавляемаяСтрока) <> Неопределено Тогда
			Продолжить;
		Иначе 
			МассивПрочих.Добавить(ДобавляемаяСтрока);
		КонецЕсли;
		
		СчетчикСтрок = СчетчикСтрок + 1;
		
		//Если надо вывести все - дальше не считаем
		Если СчетчикСтрок = ПараметрыНадписи.Количество
			И ПараметрыНадписи.Пустые
			И НЕ ПараметрыНадписи.Уникальные Тогда
			СчетчикСтрок = КоличествоСтрок;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СчетчикСтрок = 0 Тогда
		Возврат ПараметрыНадписи.Пустая;
	КонецЕсли;
	
	СтрокаРезультата = СтрСоединить(МассивВыводимых, ПараметрыНадписи.Разделитель);
	
	Если СчетчикСтрок > ПараметрыНадписи.Количество Тогда
		СтрокаРезультата = СтрШаблон(НСтр("ru = '%1 (+ еще %2...)'"), СтрокаРезультата, СчетчикСтрок - ПараметрыНадписи.Количество);
	КонецЕсли;
	
	Возврат СтрокаРезультата;
	
КонецФункции

Функция ПутьКСерверуСИнформациейПоСДИЗ(ИдентификаторФГИС, ВидПродукции) Экспорт
	
	АдресСервера = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.АдресСервера();
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна") Тогда
		Возврат СтрШаблон("https://%1/sdizs-gpb/show/%2", АдресСервера, ИдентификаторФГИС);
	Иначе
		Возврат СтрШаблон("https://%1/sdizs/show/%2", АдресСервера, ИдентификаторФГИС);
	КонецЕсли;
	
КонецФункции

Функция ПутьКСерверуСИнформациейОПартии(ИдентификаторФГИС, ВидПродукции) Экспорт
	
	АдресСервера = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.АдресСервера();
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна") Тогда
		Возврат СтрШаблон("https://%1/lots/gpb/%2", АдресСервера, ИдентификаторФГИС);
	Иначе
		Возврат СтрШаблон("https://%1/lots/%2", АдресСервера, ИдентификаторФГИС);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

// Расширенные виды продукции:
//   Возвращает исходные и "двойные" (с ВетИС) виды продукции, допустимые для номенклатуры
//   при известном виде продукции объекта ФГИС "Зерно"
// Параметры:
//  ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - исходные виды продукции
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ВидыПродукцииИС - расширенные виды продукции
Функция РасширенныеВидыПродукции(Знач ВидыПродукции) Экспорт
	
	Результат = Новый Массив;
	Если ВидыПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
		Результат.Добавить(ВидыПродукции);
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС"));
	ИначеЕсли ВидыПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна") Тогда
		Результат.Добавить(ВидыПродукции);
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС"));
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("Массив") Или ТипЗнч(ВидыПродукции) = Тип("ФиксированныйМассив") Тогда
		Для Каждого ВидПродукции Из ВидыПродукции Цикл
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
				Результат.Добавить(ВидПродукции);
				Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС"));
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна") Тогда
				Результат.Добавить(ВидПродукции);
				Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(Результат);
	Возврат Результат;
	
КонецФункции

// Виды продукции ФГИС "Зерно" по расширенным видам продукции:
//   Возвращает исходные виды продукции для "двойных" (с ВетИС) из номенклатуры
//   для заполнения реквизитов объекта 
// Параметры:
//  ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - расширенные виды продукции
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ВидыПродукцииИС - базовые виды продукции
Функция ВидыПродукции(ВидыПродукции) Экспорт
	
	Результат = Новый Массив;
	Если ВидыПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
		Результат.Добавить(ВидыПродукции);
	ИначеЕсли ВидыПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС") Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно"));
	ИначеЕсли ВидыПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна") Тогда
		Результат.Добавить(ВидыПродукции);
	ИначеЕсли ВидыПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС") Тогда
		Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна"));
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		Для Каждого ВидПродукции Из ВидыПродукции Цикл
			Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
				Результат.Добавить(ВидПродукции);
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЗерноВЕТИС") Тогда
				Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно"));
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна") Тогда
				Результат.Добавить(ВидПродукции);
			ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗернаВЕТИС") Тогда
				Результат.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Устанавливает параметры выбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора
//  ВидыПродукции - ПеречислениеСсылка.ВидыПродукцииИС, Массив Из ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции.
//  ИмяПоляВвода - Строка - имя поля ввода номенклатуры.
Процедура УстановитьПараметрыВыбораНоменклатуры(Форма, ВидыПродукции, ИмяПоляВвода = "ТоварыНоменклатура") Экспорт
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		Форма, РасширенныеВидыПродукции(ВидыПродукции), ИмяПоляВвода);
	
КонецПроцедуры

#КонецОбласти

#Область ПодборПартий

// Это выбор партии ЗЕРНО.
// 
// Параметры:
//  ВыбранноеЗначение - Произвольный
// 
// Возвращаемое значение:
//  Булево - Это выбор партии ЗЕРНО
Функция ЭтоВыборПартииЗЕРНО(ВыбранноеЗначение) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Операция")
		И ВыбранноеЗначение.Операция = "ПодборВыборПартииЗЕРНО" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодборПартий

Функция РезультатВыбораПартииЗЕРНО(ВыбранноеЗначение) Экспорт
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("Операция", "ПодборВыборПартииЗЕРНО");
	РезультатВыбора.Вставить("Партия", ВыбранноеЗначение.Партия);
	Если ЗначениеЗаполнено(ВыбранноеЗначение.Номенклатура) Тогда
		РезультатВыбора.Вставить("Номенклатура", ВыбранноеЗначение.Номенклатура);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбранноеЗначение.Характеристика) Тогда
		РезультатВыбора.Вставить("Характеристика", ВыбранноеЗначение.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбранноеЗначение.Серия) Тогда
		РезультатВыбора.Вставить("Серия", ВыбранноеЗначение.Серия);
	КонецЕсли;
	РезультатВыбора.Вставить("ОКПД2", ВыбранноеЗначение.ОКПД2);
	РезультатВыбора.Вставить(
		"ОКПД2Представление", ПредставлениеОКПД2(ВыбранноеЗначение.НаименованиеВидаСХКультуры, ВыбранноеЗначение.ОКПД2));
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение.КодТНВЭД) Тогда
		РезультатВыбора.Вставить("КодТНВЭД", ВыбранноеЗначение.КодТНВЭД);
	КонецЕсли;
	
	РезультатВыбора.Вставить("КоличествоЗЕРНО",              ВыбранноеЗначение.ДоступныйОстаток);
	РезультатВыбора.Вставить("КоличествоОстатокПартииЗЕРНО", ВыбранноеЗначение.Остаток);
	
	РезультатВыбора.Вставить("ЦельИспользования", ВыбранноеЗначение.ЦельИспользования);
	
	Возврат РезультатВыбора;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеСтруктур

// Возвращает параметры формы по-умолчанию
//
//	Параметры:
//		ТипРедактируемогоОбъекта - Тип - на основании данного параметра накладываются ограничения на список выбора колонок "ТипДокумента" 
//	
//	Возвращаемое значение:
//	Структура - структура параметров со следующими свойствами:
//		* ТолькоПросмотр - Булево - Если устанавливать в истину, форма списка связанных документов будет не доступна для редактирования;
//		* ПрочиеДокументы - Булево - Доступно редактирование типа документа в виде строки
//		* ДанныеДокументов - Массив Из Структура - требует обязательного заполнения перед вызовом и открытия формы
//		* ВидыДокументов - Массив Из ПеречислениеСсылка.ВидыКлассификаторовЗЕРНО
//		* ДополнительныеПараметры - Неопределено - дополнительные параметры при открытии формы.
Функция ПараметрыФормыРедактированияСвязанныхДокументов(ТипРедактируемогоОбъекта) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТолькоПросмотр",          Ложь);
	Результат.Вставить("ПрочиеДокументы",         Ложь);
	Результат.Вставить("ДанныеДокументов",        Новый Массив());
	Результат.Вставить("ВидыДокументов",          Новый Массив());
	Результат.Вставить("ДополнительныеПараметры", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает параметры формы редактирования документов сертификации по-умолчанию
//
//	Возвращаемое значение:
//	Структура - структура параметров со следующими свойствами:
//		* ТолькоПросмотр - Булево - Если устанавливать в истину, форма списка связанных документов будет не доступна для редактирования;
//		* ДанныеДокументов - Массив Из Структура - требует обязательного заполнения перед вызовом и открытия формы
//		* ЦельИспользования - Неопределено, СправочникСсылка.КлассификаторНСИЗЕРНО - цель партии для определения вида заполняемых документов.
//		* ДополнительныеПараметры - Неопределено - дополнительные параметры при открытии формы.
Функция ПараметрыФормыРедактированияДокументовСертификации() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТолькоПросмотр",          Ложь);
	Результат.Вставить("ДанныеДокументов",        Новый Массив());
	Результат.Вставить("ЦельИспользования",       Неопределено);
	Результат.Вставить("ДополнительныеПараметры", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает структура данных документов сертификации при оформлении СДИЗ.
// 
// Возвращаемое значение:
//	Структура - структура параметров со следующими свойствами:
//		* ТипДокумента - Неопределено.
//		* Номер - Неопределено.
//		* Дата - Неопределено.
//		* СрокДействия - Неопределено.
//		* ИдентификаторПроисхожденияВЕТИС - Неопределено.
//		* ИдентификаторПроисхожденияВЕТИССтрокой - Неопределено.
//		* ВидДокументаВСД - Неопределено.
//		* СерияВСД - Неопределено.
Функция ИнициализироватьСтруктуруДанныеСертификации() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ТипДокумента",                           Неопределено);
	Результат.Вставить("Номер",                                  Неопределено);
	Результат.Вставить("Дата",                                   Неопределено);
	Результат.Вставить("СрокДействия",                           Неопределено);
	Результат.Вставить("ИдентификаторПроисхожденияВЕТИС",        Неопределено);
	Результат.Вставить("ИдентификаторПроисхожденияВЕТИССтрокой", Неопределено);
	Результат.Вставить("ВидДокументаВСД",                        Неопределено);
	Результат.Вставить("СерияВСД",                               Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Возвращает реквизиты СДИЗ, которые должны совпадать в рамках одного документа гашения
// 
// Параметры:
//  УчитыватьДатуОформления - Булево - Учитывать дату оформления
// 
// Возвращаемое значение:
//  Структура - реквизиты СДИЗ, которые должны совпадать.
Функция РеквизитыПодбораСДИЗПриГашении(УчитыватьДатуОформления = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидОперации");
	Результат.Вставить("Продавец");
	Результат.Вставить("Грузоотправитель");
	Результат.Вставить("Покупатель");
	Результат.Вставить("Грузополучатель");
	
	Если УчитыватьДатуОформления Тогда
		Результат.Вставить("ДатаОформления");
	КонецЕсли;
	
	//@skip-warning: типы полей любые; структуры используются для сравнения
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Добавляет в свойство структуры сообщения текст ошибки
//
// Параметры:
//  Сообщение    - Структура - сообщение, в которое добавляется текст ошибки.
//  ТекстОшибки  - Строка - добавляемый текст ошибки.
//
Процедура ДобавитьТекстОшибки(Сообщение, ТекстОшибки) Экспорт
	
	Если Сообщение.Ошибки.Получить(ТекстОшибки) <> Неопределено Тогда
		Возврат;
	Иначе
		Сообщение.Ошибки.Вставить(ТекстОшибки, Истина);
	КонецЕсли;
	
	Если Сообщение.ТекстОшибки = "" Тогда
		Сообщение.ТекстОшибки = ТекстОшибки;
	Иначе
		Сообщение.ТекстОшибки = Сообщение.ТекстОшибки + Символы.ПС + ТекстОшибки;
	КонецЕсли;
	
	Сообщение.ТребуетсяПодписание = Ложь;
	
КонецПроцедуры

Функция ДокументыПраваСобственностиЗЕРНО() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ДокументПраваСобственностиАктПриемаПередачи"));
	Результат.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ДокументПраваСобственностиСчетФактура"));
	Результат.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ДокументПраваСобственностиТОРГ12"));
	Результат.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ДокументПраваСобственностиУПД"));
	
	Возврат Результат;
	
КонецФункции

#Область ОбработкаЗависимыхТабличныхЧастей

Процедура ОчиститьДанныеТабличныхЧастейПоСтроке(Форма, ЗначениеОтбора, ИмяСвойстваОтбора, МассивТабличныхЧастей = "") Экспорт
	
	Если ПустаяСтрока(МассивТабличныхЧастей) Тогда
		МассивТабличныхЧастей = Новый Массив;
		МассивТабличныхЧастей.Добавить("ПотребительскиеСвойства");
	КонецЕсли;
	
	Для Каждого ИмяТабличнойЧасти Из МассивТабличныхЧастей Цикл
		ОчиститьДанныеТабличнойЧастиПоСтроке(Форма, ЗначениеОтбора, ИмяСвойстваОтбора, ИмяТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьДанныеТабличнойЧастиПоСтроке(Форма, ЗначениеОтбора, ИмяСвойстваОтбора, ИмяТабличнойЧасти) Экспорт
	
	Объект = Форма.Объект;
	ПараметрыОтбора = Новый Структура(ИмяСвойстваОтбора, ЗначениеОтбора);
	
	НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект[ИмяТабличнойЧасти].Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьДанныеТабличныхЧастейПоСтроке(Форма, ЗначениеОтбора, ИмяСвойстваОтбора, НовоеЗначениеОтбора, МассивТабличныхЧастей = "") Экспорт
	
	Если ПустаяСтрока(МассивТабличныхЧастей) Тогда
		МассивТабличныхЧастей = Новый Массив;
		МассивТабличныхЧастей.Добавить("ПотребительскиеСвойства");
	КонецЕсли;
	
	Для Каждого ИмяТабличнойЧасти Из МассивТабличныхЧастей Цикл
		СкопироватьДанныеТабличнойЧастиПоСтроке(Форма, ЗначениеОтбора, ИмяСвойстваОтбора, НовоеЗначениеОтбора, ИмяТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьДанныеТабличнойЧастиПоСтроке(Форма, ЗначениеОтбора, ИмяСвойстваОтбора, НовоеЗначениеОтбора, ИмяТабличнойЧасти) Экспорт
	
	Объект = Форма.Объект;
	ПараметрыОтбора = Новый Структура(ИмяСвойстваОтбора, ЗначениеОтбора);
	
	НайденныеСтроки = Объект[ИмяТабличнойЧасти].НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока[ИмяСвойстваОтбора] = НовоеЗначениеОтбора;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПотребительскимиСвойствами

Функция ЗаполнитьПотребительскиеСвойстваПоДаннымКеша(Форма, ОКПД2, ИдентификаторСтроки = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОКПД2", ОКПД2);
	ПотребительскиеСвойства = Форма.КэшПотребительскихСвойств.НайтиСтроки(ПараметрыОтбора);
	
	Если ПотребительскиеСвойства.Количество() Тогда
		
		Если ИдентификаторСтроки <> Неопределено Тогда
			ОчиститьДанныеТабличнойЧастиПоСтроке(Форма, ИдентификаторСтроки, "ИдентификаторСтрокиТоваров", "ПотребительскиеСвойства");
		КонецЕсли;
		
		Для Каждого Строка Из ПотребительскиеСвойства Цикл
			НоваяСтрока = Объект.ПотребительскиеСвойства.Добавить();
			ЗаполнитьСтрокуПотребительскогоСвойства(Форма, НоваяСтрока, Строка, ИдентификаторСтроки);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ЗаполнитьСтрокуПотребительскогоСвойства(Форма, СтрокаПриемник, ДанныеЗаполнения, ИдентификаторСтроки = Неопределено) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, ДанныеЗаполнения);
	Если ИдентификаторСтроки <> Неопределено Тогда
		СтрокаПриемник.ИдентификаторСтрокиТоваров = ИдентификаторСтроки;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Число") Тогда
		
		СтрокаПриемник.Значение = 0;
		СтрокаПриемник.ДиапазонИспользуется = Истина;
		
	ИначеЕсли ДанныеЗаполнения.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Булево") Тогда
		
		СтрокаПриемник.Значение = Ложь;
		
	Иначе // Строка и Перечисление
		
		СтрокаПриемник.Значение = "";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СтруктураИнтервала(НачалоПериода, КонецПериода = Неопределено) Экспорт
	
	Интервал = Новый Структура;
	Интервал.Вставить("НачалоПериода", НачалоПериода);
	Интервал.Вставить("КонецПериода", КонецПериода);
	
	Возврат Интервал;
	
КонецФункции

// Параметры формироваиня представления сопоставления.
// 
// Параметры:
//  ОбязательноеЗаполнение - Булево - Обязательное заполнение
// 
// Возвращаемое значение:
//  Структура - Параметры формироваиня представления сопоставления:
// * ОбязательноеЗаполнение - Булево -
Функция ПараметрыФормированияПредставленияСопоставления(ОбязательноеЗаполнение = Ложь) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ОбязательноеЗаполнение", ОбязательноеЗаполнение);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПараметрыНумерованнойОшибки(ТекстОшибки) Экспорт
	
	Для Каждого КлючИЗначение Из ИнтеграцияЗЕРНОКлиентСерверПовтИсп.ПараметрыОшибокПоКодам() Цикл
		Если СтрНайти(ТекстОшибки, СтрШаблон("%1.", КлючИЗначение.Ключ)) > 0 Тогда
			Возврат КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

#Область РаботаСТНВЭД

Процедура ОбновитьСписокВыбораКодаТНВЭД(Форма, ОКПД2, ИмяЭлемента = "ТоварыКодТНВЭД", КодТНВЭДВШапке = Ложь) Экспорт
	
	КэшВидовСельхозКультур = Форма["КэшВидовСельхозКультур"];
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОКПД2", ОКПД2);
	КодыТНВЭД = КэшВидовСельхозКультур.НайтиСтроки(ПараметрыОтбора);
	
	Элемент = Форма.Элементы[ИмяЭлемента];
	Элемент.СписокВыбора.Очистить();
	
	Для Каждого СтрокаКэша Из КодыТНВЭД Цикл
		Элемент.СписокВыбора.Добавить(СтрокаКэша.КодТНВЭД, СтрокаКэша.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяЗаполнениеКодаТНВЭД(НазначениеПартии) Экспорт
	
	Возврат НазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ")
			Или НазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВвозНаТерриториюРФ");
	
КонецФункции

Функция ТипХраненияТребуетУказанияПлощади(ТипХранения) Экспорт
	Возврат ТипХранения = "1"
		Или ТипХранения = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ТипХраненияОбособленное");
КонецФункции

#КонецОбласти

Функция УникальныеПеревозчики(Форма, МассивИменТабличныхЧастей = Неопределено, УчитыватьПодразделение = Ложь) Экспорт
	
	Объект = Форма.Объект;
	ВозвращаемоеЗначение = Новый Соответствие();
	Если МассивИменТабличныхЧастей = Неопределено Тогда
		МассивИменТабличныхЧастей = Новый Массив;
		МассивИменТабличныхЧастей.Добавить("ТранспортныеСредства");
		МассивИменТабличныхЧастей.Добавить("МестаПерегрузки");
	КонецЕсли;
	
	
	Для Каждого ИмяТабличнойЧасти Из МассивИменТабличныхЧастей Цикл
		
		Для Каждого СтрокаТаблицы Из Объект[ИмяТабличнойЧасти] Цикл
			
			Если УчитыватьПодразделение Тогда
				
				Подразделения = ВозвращаемоеЗначение[СтрокаТаблицы.Перевозчик];
				Если Подразделения = Неопределено Тогда
					Подразделения = Новый Массив;
					ВозвращаемоеЗначение[СтрокаТаблицы.Перевозчик] = Подразделения;
				ИначеЕсли Подразделения.Найти(СтрокаТаблицы.Подразделение) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Подразделения.Добавить(СтрокаТаблицы.Подразделение);
				
			Иначе
				
				Если ВозвращаемоеЗначение[СтрокаТаблицы.Перевозчик] <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ВозвращаемоеЗначение.Вставить(СтрокаТаблицы.Перевозчик, Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ИнициализироватьПараметрыНастройкиОбмена(ВидНастройкиОбмена) Экспорт
	
	ПараметрыНастройкиОбмена = Новый Структура;
	
	Если ВидНастройкиОбмена = ПредопределенноеЗначение("Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаСДИЗ") Тогда
		ПараметрыНастройкиОбмена.Вставить("ВидПродукции",
			ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
		ПараметрыНастройкиОбмена.Вставить("ТипОрганизации",                 0);
		ПараметрыНастройкиОбмена.Вставить("ЗапрашиватьПогашенияСДИЗ",       Ложь);
		ПараметрыНастройкиОбмена.Вставить("ЗапрашиватьОтказыПогашенийСДИЗ", Ложь);
		ПараметрыНастройкиОбмена.Вставить("ДнейЗагрузки",                   1);
	ИначеЕсли ВидНастройкиОбмена = ПредопределенноеЗначение("Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаПартий") Тогда
		ПараметрыНастройкиОбмена.Вставить("ВидПродукции",
			ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
		ПараметрыНастройкиОбмена.Вставить("Операция",
			ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПустаяСсылка"));
		ПараметрыНастройкиОбмена.Вставить("ДнейЗагрузки", 1);
	ИначеЕсли ВидНастройкиОбмена = ПредопределенноеЗначение("Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаМестФормированияПартий") Тогда
		ПараметрыНастройкиОбмена.Вставить("ДнейЗагрузки", 1);
	ИначеЕсли ВидНастройкиОбмена = ПредопределенноеЗначение("Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаРезультатовИсследований") Тогда
		ПараметрыНастройкиОбмена.Вставить("ДнейЗагрузки", 1);
	ИначеЕсли ВидНастройкиОбмена = ПредопределенноеЗначение("Перечисление.ВидыНастроекОбменаЗЕРНО.ЗагрузкаАктовОтбораПроб") Тогда
		ПараметрыНастройкиОбмена.Вставить("ДнейЗагрузки", 1);
	КонецЕсли;
	
	Возврат ПараметрыНастройкиОбмена;
	
КонецФункции

Функция ИнициализироватьСтруктуруЗаполненияСлужебныхРеквизитовНоменклатуры() Экспорт
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Номенклатура");
	СтруктураЗаполнения.Вставить("Характеристика");
	СтруктураЗаполнения.Вставить("Серия");
	СтруктураЗаполнения.Вставить("ЕдиницаИзмерения");
	СтруктураЗаполнения.Вставить("ХарактеристикиИспользуются");
	СтруктураЗаполнения.Вставить("ТипНоменклатуры");
	СтруктураЗаполнения.Вставить("СтатусУказанияСерий");
	
	СтруктураЗаполнения.Вставить("КодТНВЭД");
	СтруктураЗаполнения.Вставить("ОКПД2");
	СтруктураЗаполнения.Вставить("ОКПД2Представление");
	
	СтруктураЗаполнения.Вставить("Количество");
	СтруктураЗаполнения.Вставить("КоличествоЗЕРНО");
	
	Возврат СтруктураЗаполнения;
	
КонецФункции

#КонецОбласти