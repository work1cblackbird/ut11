////////////////////////////////////////////////////////////////////////////////
// В модуле собраны процедуры и функции, которые вызываются при обращении к информационной базе
// из общего модуля "РабочееМестоРаботникаСклада", а также при обращении функций web-сервиса.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает число - количество документов-заданий доступных для выполнения работником склада 
// при обращении к функции GetJobsCount web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	Прокси - WSПрокси - прокси для вызова web-сервиса,
//	ТипЗадания - Строка - тип складского задания.
//
// Возвращаемое значение:
//	Число - количество доступных для выполнения заданий заданного вида.
//
Функция КоличествоСкладскихЗаданий(Форма, Прокси, ТипЗадания) Экспорт
	
	ИдСклада = СокрЛП(Форма.Склад.УникальныйИдентификатор());
	ИдПомещения = СокрЛП(Форма.Помещение.УникальныйИдентификатор());
	ИдИсполнителя = СокрЛП(Форма.Пользователь.УникальныйИдентификатор());
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	ТипЗаданияWS = ТипЗаданияWS(ТипЗадания, Прокси.ФабрикаXDTO, ВерсияСервиса);
	
	КоличествоЗаданий = Прокси.GetJobsCount(ИдСклада, ИдПомещения, ТипЗаданияWS, ИдИсполнителя, Истина);
	
	Возврат КоличествоЗаданий;
	
КонецФункции

// Возвращает - количество документов-заданий доступных для выполнения работником склада.
//
// Параметры:
//	ИдСклада - Строка - идентификатор склада;
//	ИдПомещения - Строка - идентификатор помещения;
//	ТипЗадания - ЗначениеXDTO - ТипыЗаданий XDTO-пакета WMSMobileClientExchange - тип складского задания;
//	ИдИсполнителя - Строка - идентификатор пользователя;
//	ВсеИсполнители - Булево - Истина, получение количества всех доступных складских заданий.
//
// Возвращаемое значение:
//	Число - количество доступных для выполнения заданий заданного вида.
//
Функция КоличествоСкладскихЗаданийWS(ИдСклада, ИдПомещения, ТипЗадания, ИдИсполнителя, ВсеИсполнители) Экспорт
	
	Склад = СсылкаСправочника(ИдСклада, "Склады");
	Помещение = СсылкаСправочника(ИдПомещения, "СкладскиеПомещения");
	Исполнитель = СсылкаСправочника(ИдИсполнителя, "Пользователи");
	
	ИсполнителиЗаданий = Новый Массив;
	ИсполнителиЗаданий.Добавить(Исполнитель);
	
	Если ВсеИсполнители Тогда
		ИсполнителиЗаданий.Добавить(Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	Исполнители = Новый ФиксированныйМассив(ИсполнителиЗаданий);
	
	КоличествоЗаданий = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.КоличествоСкладскихЗаданийДляВыполнения(Склад,
		Помещение, ТипЗадания, Исполнители);
	
	Возврат КоличествоЗаданий;
	
КонецФункции

// Возвращает таблицу заданий, выбранного типа операции при обращении к функции
// GetJobsTable web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	ТипЗадания - Строка - тип складского задания.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица заданий.
//
Функция ТаблицаЗаданий(Форма, ТипЗадания) Экспорт
	
	ИмяДокумента = ИмяДокумента(ТипЗадания);
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль,Форма.МестоположениеWSDL, ВерсияСервиса);
	
	ИдСклада = СокрЛП(Форма.Склад.УникальныйИдентификатор());
	ИдПомещения = СокрЛП(Форма.Помещение.УникальныйИдентификатор());
	ИдИсполнителя = СокрЛП(Форма.Пользователь.УникальныйИдентификатор());
	
	ТипЗаданияWS = ТипЗаданияWS(ТипЗадания, Прокси.ФабрикаXDTO, ВерсияСервиса);
	ТаблицаЗаданий = Форма.Задания.Выгрузить();
	ТаблицаЗаданийWS = Прокси.GetJobsTable(ИдСклада, ИдПомещения, ТипЗаданияWS, ИдИсполнителя, Истина);
	
	ТаблицаЗаданий.Очистить();
	ЗаполнитьТаблицуЗаданий(ТаблицаЗаданий, ТаблицаЗаданийWS, ИмяДокумента);
	
	Возврат ТаблицаЗаданий;
	
КонецФункции

// Возвращает таблицу заданий типа 'ТаблицаЗаданий' XDTO-пакета WMSMobileClientExchange*, 
// выбранного типа операции.
//
// Параметры:
//	ИдСклада - Строка - идентификатор склада;
//	ИдПомещения - Строка - идентификатор помещения;
//	ТипЗадания - ЗначениеXDTO - ТипыЗаданий XDTO-пакета WMSMobileClientExchange* - тип складского задания;
//	ИдИсполнителя - Строка - идентификатор пользователя;
//	ВсеИсполнители - Булево - получение всех доступных складских заданий.
//	ВерсияСервиса - Строка - версия сервиса в формате "A.B.C"? фактически указывает на ws и пакет WMSMobileClientExchange_A_B_C
//
// Возвращаемое значение:
//	ЗначениеXDTO - ТаблицаЗаданий XDTO пакета WMSMobileClientExchange, таблица заданий.
//
Функция ТаблицаЗаданийWS(ИдСклада, ИдПомещения, ТипЗадания, ИдИсполнителя, ВсеИсполнители, ВерсияСервиса = "") Экспорт
	
	Склад = СсылкаСправочника(ИдСклада, "Склады");
	Помещение = СсылкаСправочника(ИдПомещения, "СкладскиеПомещения");
	Исполнитель = СсылкаСправочника(ИдИсполнителя, "Пользователи");
	
	ИсполнителиЗаданий = Новый Массив;
	ИсполнителиЗаданий.Добавить(Исполнитель);
	
	Если ВсеИсполнители Тогда
		ИсполнителиЗаданий.Добавить(Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	Исполнители = Новый ФиксированныйМассив(ИсполнителиЗаданий);
	
	ТаблицаЗаданий = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ТаблицаЗаданий(Склад, Помещение, ТипЗадания,
		Исполнители);
	
	ТаблицаЗаданийWS = ТаблицаЗаданийXDTO(ТаблицаЗаданий, ВерсияСервиса);
	
	Возврат ТаблицаЗаданийWS;
	
КонецФункции

// Возвращает структуру со служебной информацией о задании при сканировании штрихкода складского
// задания, а также при обращении к функции GetJobIDAndTypeByBarcode web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	Штрихкод - Строка - штрихкод складского задания,
//	ТипЗадания - Строка - тип складского задания.
//	ГлубинаДетализацииМаркировки - Число - глубина детализации 
//
// Возвращаемое значение:
//	см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ПараметрыЗаданияПоШтрихкоду(Форма, Штрихкод, ТипЗадания, ГлубинаДетализацииМаркировки = 0) Экспорт
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервиса);
	
	ИдСклада = СокрЛП(Форма.Склад.УникальныйИдентификатор());
	ИдПомещения = СокрЛП(Форма.Помещение.УникальныйИдентификатор());
	ИдИсполнителя = СокрЛП(Форма.Пользователь.УникальныйИдентификатор());
	
	ТипЗаданияWS = ТипЗаданияWS(ТипЗадания, Прокси.ФабрикаXDTO, ВерсияСервиса);
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания();
	Если ПустаяСтрока(ВерсияСервиса) Тогда
		ПараметрыЗаданияWS = Прокси.GetJobIDAndTypeByBarcode(
			Штрихкод, ИдСклада, ИдПомещения, ИдИсполнителя, ТипЗаданияWS);
	Иначе
		ПараметрыЗаданияWS = Прокси.GetJobIDAndTypeByBarcode(
			Штрихкод, ИдСклада, ИдПомещения, ИдИсполнителя, ТипЗаданияWS, ГлубинаДетализацииМаркировки);
	КонецЕсли; 
	
	ТипЗадания = ТипЗаданияWS;
	ПараметрыЗадания.ТипЗадания = ТипЗадания;
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗадания, Форма, "Склад, Помещение");
	ЗаполнитьПараметрыЗадания(Форма.Объект, ПараметрыЗадания, ПараметрыЗаданияWS);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Возвращает сведения со служебной информацией складского задания типа 'ПараметрыЗадания' 
// XDTO-пакета WMSMobileClientExchange. Функция вызывается при сканировании штрихкода документа
// складского задания.
//
// Параметры:
//	Штрихкод - Строка - штрихкод складского задания;
//	ИдСклада - Строка - идентификатор склада;
//	ИдПомещения - Строка - идентификатор помещения;
//	ИдИсполнителя - Строка - идентификатор исполнителя складского задания;
//	ТипЗадания - ЗначениеXDTO - ТипыЗаданий XDTO-пакета WMSMobileClientExchange - тип складского задания;
//	ГлубинаДетализацииМаркировки - Число - глубина детализация информации по маркированным упаковкам:
//				0 - без детализации
//				999 - без ограничения вложенности.
//	ВерсияСервиса - Строка - постфикс версии сервиса.
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыЗадания XDTO-пакета WMSMobileClientExchange.
//
Функция ПараметрыЗаданияПоШтрихкодуWS(Штрихкод, ИдСклада, ИдПомещения, ИдИсполнителя, ТипЗадания,
	ГлубинаДетализацииМаркировки = 0, ВерсияСервиса = "") Экспорт
	
	Склад = СсылкаСправочника(ИдСклада, "Склады");
	Помещение = СсылкаСправочника(ИдПомещения, "СкладскиеПомещения");
	Исполнитель = СсылкаСправочника(ИдИсполнителя, "Пользователи");
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗаданияПоШтрихкоду(
		Штрихкод, Склад, Помещение, Исполнитель, ТипЗадания,, ГлубинаДетализацииМаркировки);
	ПараметрыЗаданияWS = ПараметрыЗаданияWS(ПараметрыЗадания, ВерсияСервиса);
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Возвращает структуру со служебной информацией о задании. Функция вызывается при выборе задания 
// из табличной части 'Задания' формы обработки 'РабочееМестоРаботникаСклада', а также при 
// обращении к функции GetAndTakeAllotmentPickJob web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	Задание - ДокументСсылка - ссылка документа складского задания.
//
// Возвращаемое значение:
// см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ПараметрыЗаданияПриПринятииВРаботу(Форма, Задание) Экспорт
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервиса);
	
	ТипЗадания = Форма.ПараметрыРежима.ТипЗадания;
	ТипЗаданияWS = ТипЗаданияWS(ТипЗадания, Прокси.ФабрикаXDTO, ВерсияСервиса);
	
	ИдЗадания = СокрЛП(Задание.УникальныйИдентификатор());
	ИдИсполнителя = СокрЛП(Форма.Пользователь.УникальныйИдентификатор());
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания();
	Если ПустаяСтрока(ВерсияСервиса) Тогда
		ПараметрыЗаданияWS = Прокси.GetAndTakeAllotmentPickJob(ИдЗадания, ИдИсполнителя, ТипЗаданияWS);
	Иначе
		ПараметрыЗаданияWS = Прокси.GetAndTakeAllotmentPickJob(ИдЗадания, ИдИсполнителя, ТипЗаданияWS,1);
	КонецЕсли; 
	
	ПараметрыЗадания.ТипЗадания = ТипЗадания;
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "Склад, Помещение");
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗадания, РеквизитыЗадания);
	ЗаполнитьПараметрыЗадания(Форма.Объект, ПараметрыЗадания, ПараметрыЗаданияWS);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Возвращает сведения со служебной информацией складского задания типа 'ПараметрыЗадания' 
// XDTO-пакета WMSMobileClientExchange, при выборе задания из табличной части 'Задания' формы обработки 
// 'РабочееМестоРаботникаСклада'.
//
// Параметры:
//	ИдЗадания - Строка - идентификатор документа задания;
//	ИдИсполнителя - Строка - идентификатор исполнителя складского задания;
//	ТипЗадания - ЗначениеXDTO - ТипыЗаданий XDTO-пакета WMSMobileClientExchange - тип складского задания.
//	ГлубинаДетализацииМаркировки - Число - 
//	ВерсияСервиса - Строка - 
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыЗадания XDTO-пакета WMSMobileClientExchange.
//
Функция ПараметрыЗаданияПриПринятииВРаботуWS(ИдЗадания, ИдИсполнителя, ТипЗадания,
	ГлубинаДетализацииМаркировки = 0, ВерсияСервиса = "") Экспорт
	
	Пользователь = СсылкаСправочника(ИдИсполнителя, "Пользователи");
	Задание = СсылкаЗадания(ИдЗадания, ТипЗадания);
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗаданияПриПринятииВРаботу(
		Задание, Пользователь);
	ПараметрыЗадания.Вставить("Задание", Задание);
	
	ПараметрыЗаданияWS = ПараметрыЗаданияWS(ПараметрыЗадания, ВерсияСервиса);
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Возвращает таблицу ячеек зон приемки и отгрузки по указанному складу при обращении 
// к функции GetAcceptanceAreas web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица с описанием складских зон приемки и отгрузки:
//		* Ячейка - СправочникСсылка.СкладскиеЯчейки - адрес складской ячейки;
//		* ТипЯчейки - ПеречислениеСсылка.ТипыСкладскихЯчеек - тип складской ячейки;
//		* Склад - СправочникСсылка.Склады - склад, в котором расположена ячейка приемки (отгрузки);
//		* НаименованиеСклада - Строка - наименование склада;
//		* КодЯчейки - Строка - строковое представление складской ячейки.
//
Функция ЗоныПриемкиОтгрузки(Форма) Экспорт
	
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервисаИзФормы(Форма));
	
	ИдСклада = СокрЛП(Форма.Склад.УникальныйИдентификатор());
	ИдПомещения = СокрЛП(Форма.Помещение.УникальныйИдентификатор());;
	
	ПараметрыСпискаЯчеекWS= Прокси.GetAcceptanceAreas(ИдСклада, ИдПомещения);
	
	ЗоныПриемкиОтгрузки = Форма.ЗоныПриемкиОтгрузки.Выгрузить();
	ЗоныПриемкиОтгрузки.Очистить();
	
	ЗаполнитьЗоныПриемкиОтгрузки(ЗоныПриемкиОтгрузки, ПараметрыСпискаЯчеекWS.ЗоныПриемкиОтгрузки);
	
	Возврат ЗоныПриемкиОтгрузки;
	
КонецФункции

// Возвращает таблицу ячеек зон приемки и отгрузки по указанному складу.
//
// Параметры:
//	ИдСклада - Строка - идентификатор склада,
//	ИдПомещения - Строка - идентификатор помещения.
//	ВерсияСервиса - Строка - 
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыСпискаЯчеек XDTO-пакета WMSMobileClientExchange*.
//
Функция ЗоныПриемкиОтгрузкиWS(ИдСклада, ИдПомещения, ВерсияСервиса = "") Экспорт
	
	Склад = СсылкаСправочника(ИдСклада, "Склады");
	Помещение = СсылкаСправочника(ИдПомещения, "СкладскиеПомещения");
	
	ЗоныПриемкиОтгрузки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗоныПриемкиОтгрузки(Склад, Помещение);
	ПараметрыСпискаЯчеекWS = ПараметрыСпискаЯчеекWS(ЗоныПриемкиОтгрузки, ВерсияСервиса);
	
	Возврат ПараметрыСпискаЯчеекWS;
	
КонецФункции

// Возвращает таблицу товаров, хранящихся в ячейке по ссылке ячейки при обращении к функции 
// GetGoodsOfCellStored web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	Ячейка - СправочникСсылка.СкладскиеЯчейки - складская ячейка.
//
// Возвращаемое значение:
//	см. ТаблицаТоварыЯчейки
//
Функция ТоварыЯчейки(Форма, Ячейка) Экспорт
	
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервисаИзФормы(Форма));
	
	ИдЯчейки = СокрЛП(Ячейка.УникальныйИдентификатор());
	ПараметрыТоваровЯчейкиWS = Прокси.GetGoodsOfCellStored(ИдЯчейки);
	
	ТоварыЯчейки = ТаблицаТоварыЯчейки();
	ЗаполнитьТоварыЯчейки(ТоварыЯчейки, ПараметрыТоваровЯчейкиWS.ТоварыЯчейки);
	
	Возврат ТоварыЯчейки;
	
КонецФункции

// Возвращает таблицу товаров, хранящихся в ячейке.
//
// Параметры:
//	ИдЯчейки - Строка - идентификатор складской ячейки.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыТоваровЯчейки XDTO-пакета WMSMobileClientExchange.
//
Функция ТоварыЯчейкиWS(ИдЯчейки, ВерсияСервиса = "") Экспорт
	
	Ячейка = СсылкаСправочника(ИдЯчейки, "СкладскиеЯчейки");
	РеквизитыЯчейки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ячейка, "Владелец, Помещение");
	
	ТоварыЯчейки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ТоварыЯчейки(РеквизитыЯчейки.Владелец,
		РеквизитыЯчейки.Помещение, Ячейка);
	
	ДополнитьДаннымиТоварыЯчейки(ТоварыЯчейки);
	ПараметрыТоваровЯчейкиWS = ПараметрыТоваровЯчейкиWS(Неопределено, ТоварыЯчейки, ВерсияСервиса);
	
	Возврат ПараметрыТоваровЯчейкиWS;
	
КонецФункции

// Возвращает таблицу товаров, хранящихся в ячейке по штрихкоду ячейки при обращении к функции 
// GetGoodsOfCellStoredByBarcode web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	Штрихкод - Строка - штрихкод ячейки.
//
// Возвращаемое значение:
//	Структура:
//	*КодВозврата - Число
//	*Ячейка - см. СсылкаСправочника
//
Функция ТоварыЯчейкиПоШтрихкоду(Форма, Штрихкод) Экспорт
	
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервисаИзФормы(Форма));

	ИдСклада = СокрЛП(Форма.Склад.УникальныйИдентификатор());
	ИдПомещения = СокрЛП(Форма.Помещение.УникальныйИдентификатор());
	
	ПараметрыТоваровЯчейкиWS = Прокси.GetGoodsOfCellStoredByBarcode(Штрихкод, ИдСклада, ИдПомещения); // ОбъектXDTO
	
	ПараметрыЯчейки = Новый Структура;
	
	Если Не ПараметрыТоваровЯчейкиWS.Успешно Тогда
		ПараметрыЯчейки.Вставить("КодВозврата", 0);
		Возврат ПараметрыЯчейки;
	Иначе
		ПараметрыЯчейки.Вставить("КодВозврата", 1);
		ПараметрыЯчейки.Вставить("Ячейка", СсылкаСправочника(ПараметрыТоваровЯчейкиWS.Ячейка["Ссылка"], "СкладскиеЯчейки"));
	КонецЕсли;
	
	Возврат ПараметрыЯчейки;
	
КонецФункции

// Возвращает таблицу товаров, хранящихся в ячейке.
//
// Параметры:
//	Штрихкод - Строка - штрихкод складской ячейки,
//	ИдСклада - Строка - идентификатор склада,
//	ИдПомещения - Строка - идентификатор помещения.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыТоваровЯчейки XDTO-пакета WMSMobileClientExchange.
//
Функция ТоварыЯчейкиПоШтрихкодуWS(Штрихкод, ИдСклада, ИдПомещения, ВерсияСервиса = "") Экспорт
	
	Склад = СсылкаСправочника(ИдСклада, "Склады");
	Помещение = СсылкаСправочника(ИдПомещения, "СкладскиеПомещения");
	
	ПараметрыЯчейки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НайтиЯчейкуПоШтрихкоду(Склад, Помещение, Штрихкод,
		Истина);
	
	Если ПараметрыЯчейки.КодВозврата = 0 Тогда
		ПараметрыТоваровЯчейкиWS = ПараметрыТоваровЯчейкиWS(Неопределено, Неопределено, ВерсияСервиса);
		Возврат ПараметрыТоваровЯчейкиWS;
	Иначе
		ТоварыЯчейки = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ТоварыЯчейки(Склад, Помещение, 
			ПараметрыЯчейки.Ячейка);
	КонецЕсли;
	
	ДополнитьДаннымиТоварыЯчейки(ТоварыЯчейки);
	ПараметрыТоваровЯчейкиWS = ПараметрыТоваровЯчейкиWS(ПараметрыЯчейки, ТоварыЯчейки, ВерсияСервиса);
	
	Возврат ПараметрыТоваровЯчейкиWS;
	
КонецФункции

// Вызывается при завершении отбора товаров складской операции "Перемещение", а также при обращении 
// к функции SetPickedGoodsInAllotmentPickJob web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//
// Возвращаемое значение:
//	см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ОбработатьОтсканированныеТоварыОтбораПеремещения(Форма) Экспорт
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервиса);
	
	ОтсканированныеТоварыWS = ОтсканированныеТоварыWS(Форма, Прокси.ФабрикаXDTO);
	ИдЗадания = СокрЛП(Форма.ПараметрыРежима.Задание.УникальныйИдентификатор());
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания();
	ПараметрыЗаданияWS = Прокси.SetPickedGoodsInAllotmentPickJob(ИдЗадания, ОтсканированныеТоварыWS);
	
	ЗаполнитьПараметрыОбработкиОтсканированныхТоваров(ПараметрыЗадания, ПараметрыЗаданияWS, Форма.Объект);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Вызывается при завершении отбора товаров при выполнении задания перемещения.
//
// Параметры:
//	ИдЗадания - Строка - идентификатор документа складского задания;
//	ОтсканированныеТоварыWS - ЗначениеXDTO - таблица XDTO-пакета WMSMobileClientExchange - таблица отсканированных
//		товаров.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыОбработкиОтсканированныхТоваров XDTO-пакета WMSMobileClientExchange.
//
Функция ОбработатьОтсканированныеТоварыОтбораПеремещенияWS(ИдЗадания, ОтсканированныеТоварыWS, ВерсияСервиса = "") Экспорт
	
	Задание = СсылкаЗадания(ИдЗадания, "Перемещение");
	
	ТаблицаОтсканированныеТовары = ТаблицаОтсканированныеТовары();
	ОтсканированныеТовары = ТоварыСкладскогоЗадания(ТаблицаОтсканированныеТовары, ОтсканированныеТоварыWS);
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОбработатьОтсканированныеТоварыОтбораПеремещения(
		Задание, ОтсканированныеТовары, Неопределено);
	ПараметрыЗаданияWS = ПараметрыОбработкиОтсканированныхТоваровОтбораWS(ПараметрыЗадания, ВерсияСервиса);
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Отменяет выполнение текущего складского задания, переводит в первоначальный статус, 
// при обращении к функции CancelJob web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	Задание - ДокументСсылка - ссылка документа складского задания.
//
// Возвращаемое значение:
//	см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ОтменитьВыполнениеЗадания(Форма, Задание) Экспорт
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервиса);
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ИсходныйИсполнитель = ПараметрыРежима.ИсходныйИсполнитель;
	
	ИдЗадания = СокрЛП(Задание.УникальныйИдентификатор());
	ИдИсполнителя = СокрЛП(ИсходныйИсполнитель.УникальныйИдентификатор());
	
	ТипЗаданияWS = ТипЗаданияWS(ТипЗадания, Прокси.ФабрикаXDTO, ВерсияСервиса);
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания();
	ПараметрыЗаданияWS = Прокси.CancelJob(ИдЗадания, ИдИсполнителя, ТипЗаданияWS);
	
	ЗаполнитьПараметрыОтменыВыполненияЗадания(ПараметрыЗадания, ПараметрыЗаданияWS);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Отменяет выполнение текущего складского задания, переводит в первоначальный статус.
//
// Параметры:
//	ИдЗадания - Строка - идентификатор складского задания;
//	ИдИсполнителя - Строка - идентификатор пользователя;
//	ТипЗадания - ЗначениеXDTO - ТипыЗаданий XDTO-пакета WMSMobileClientExchange - тип складского задания.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыОтменыВыполненияЗадания - XDTO-пакета WMSMobileClientExchange.
//
Функция ОтменитьВыполнениеЗаданияWS(ИдЗадания, ИдИсполнителя, ТипЗадания, ВерсияСервиса = "") Экспорт
	
	Задание = СсылкаЗадания(ИдЗадания, ТипЗадания);
	ИсходныйИсполнитель = СсылкаСправочника(ИдИсполнителя, "Пользователи");
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ОтменитьВыполнениеЗадания(Задание,
		ИсходныйИсполнитель, ТипЗадания);
	ПараметрыЗаданияWS = ПараметрыОтменыВыполненияСкладскогоЗаданияWS(ПараметрыЗадания, ВерсияСервиса);
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Завершает выполнение складского задания. При сканировании товаров - отсканированные товары
//  переносятся в табличные части документов, при наборе - создаются новые складские задания.
//  Устанавливаются нужные статусы у документов, выполняется проведение документов.
//  Вызывается при обращении к функции CompleteJob web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения	 - форма мобильного рабочего места работника склада,
//  Задание	 - ДокументСсылка	 - ссылка документа складского задание.
// 
// Возвращаемое значение:
//  см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ЗавершитьВыполнениеСкладскогоЗадания(Форма, Задание) Экспорт
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервиса);
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ИсходныйИсполнитель = ПараметрыРежима.ИсходныйИсполнитель;
	
	ИдЗадания = СокрЛП(Задание.УникальныйИдентификатор());
	ИдИсполнителя = СокрЛП(ИсходныйИсполнитель.УникальныйИдентификатор());
	
	ТипЗаданияWS = ТипЗаданияWS(ТипЗадания, Прокси.ФабрикаXDTO, ВерсияСервиса);
	ДополнительныеПараметрыWS = ДополнительныеПараметрыWS(Форма, ТипЗадания, Прокси.ФабрикаXDTO);
	ОтсканированныеТоварыWS = ОтсканированныеТоварыWS(Форма, Прокси.ФабрикаXDTO);
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания();
	Если ВерсияСервиса = "" Тогда
		ПараметрыЗаданияWS = Прокси.CompleteJob(
			ИдЗадания, ИдИсполнителя, ОтсканированныеТоварыWS, ТипЗаданияWS, ДополнительныеПараметрыWS);
	Иначе
		ДанныеМарок = Неопределено;
		//++ Локализация
		Если Форма.Элементы.Найти("МаркировкаВерхнегоУровня") <> Неопределено Тогда
			ДанныеМарок = МаркировкаВерхнегоУровняWS(Форма.МаркировкаВерхнегоУровня, ТипЗадания, ВерсияСервиса);
		КонецЕсли;
		//-- Локализация
		ПараметрыЗаданияWS = Прокси.CompleteJob(
			ИдЗадания, ИдИсполнителя, ОтсканированныеТоварыWS, ТипЗаданияWS, ДополнительныеПараметрыWS, ДанныеМарок);
	КонецЕсли; 
	
	ЗаполнитьПараметрыЗавершенияСкладскогоЗадания(ПараметрыЗадания, ПараметрыЗаданияWS);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Завершает выполнение складского задания. При сканировании товаров - отсканированные товары
// переносятся в табличные части документов, при наборе - создаются новые складские задания.
// Устанавливаются нужные статусы у документов, выполняется проведение документов.
//
// Параметры:
//	ИдЗадания - Строка - идентификатор задания;
//	ИдИсполнителя - Строка - идентификатор исполнителя складского задания;
//	ОтсканированныеТоварыWS - ЗначениеXDTO - таблица XDTO-пакета WMSMobileClientExchange - данные отсканированных товаров;
//	ТипЗадания - ЗначениеXDTO - ТипыЗаданий XDTO-пакета WMSMobileClientExchange - тип складского задания;
//	ДополнительныеПараметры - ЗначениеXDTO - ПараметрыЗавершенияПеремещения XDTO-пакета WMSMobileClientExchange - 
//		дополнительные параметры складской операции "Перемещение".
//	МаркировкаВерхнегоУровня - СписокXDTO,Неопределено - список маркировки упаковок
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыЗавершенияСкладскогоЗадания XDTO-пакета WMSMobileClientExchange.
//
Функция ЗавершитьВыполнениеСкладскогоЗаданияWS(
	ИдЗадания, ИдИсполнителя, ОтсканированныеТоварыWS, ТипЗадания, ДополнительныеПараметры,
	МаркировкаВерхнегоУровня = Неопределено, ВерсияСервиса = "") Экспорт
	
	Задание = СсылкаЗадания(ИдЗадания, ТипЗадания);
	ИсходныйИсполнитель = СсылкаСправочника(ИдИсполнителя, "Пользователи");
	
	ТаблицаОтсканированныеТовары = ТаблицаОтсканированныеТовары();
	ОтсканированныеТовары = ТоварыСкладскогоЗадания(ТаблицаОтсканированныеТовары, ОтсканированныеТоварыWS);
	
	ТаблицаОтсканированныеМарки = РабочееМестоРаботникаСкладаЛокализация.ТаблицаОтсканированныеМарки();
	СканированныеЗначенияМарок = РабочееМестоРаботникаСкладаЛокализация.ОтсканированныеМарки(
																			ТаблицаОтсканированныеМарки, 
																			МаркировкаВерхнегоУровня, 
																			ВерсияСервиса);
	
	ПараметрыЗадания = ПараметрыЗавершенияЗадания(Задание, ИсходныйИсполнитель, ОтсканированныеТовары, ТипЗадания,
		ДополнительныеПараметры, СканированныеЗначенияМарок);
	ПараметрыЗаданияWS = ПараметрыЗавершенияСкладскогоЗаданияWS(ПараметрыЗадания, ВерсияСервиса);
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Вызывается при завершении выполнения набора товаров для создания нового задания на размещение, 
// а также при обращении к функции CompleteJobNewLocation web-сервиса "WMSMobileClientExchange".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//
// Возвращаемое значение:
//	см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//
Функция ЗавершитьВыполнениеЗаданияНовоеРазмещение(Форма) Экспорт
	
	Прокси = ПроксиВебСервиса(Форма.ИмяПользователя, Форма.Пароль, Форма.МестоположениеWSDL, ВерсияСервисаИзФормы(Форма));
	
	Объект = Форма.Объект;
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	ИдСклада = СокрЛП(Объект.Склад.УникальныйИдентификатор());
	ИдПомещения = СокрЛП(Объект.Помещение.УникальныйИдентификатор());
	ИдЗоныПриемки = СокрЛП(ПараметрыРежима.ЗонаПриемки.УникальныйИдентификатор());
	ИдИсполнителя = СокрЛП(Объект.Исполнитель.УникальныйИдентификатор());
	
	ОтсканированныеТоварыWS = ОтсканированныеТоварыWS(Форма, Прокси.ФабрикаXDTO);
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания();
	ПараметрыЗаданияWS = Прокси.CompleteJobNewLocation(ИдСклада, ИдПомещения, ИдЗоныПриемки, ИдИсполнителя,
		ОтсканированныеТоварыWS);
	
	ЗаполнитьПараметрыЗавершенияСкладскогоЗадания(ПараметрыЗадания, ПараметрыЗаданияWS);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Вызывается при завершении выполнения набора товаров для создания нового задания на размещение.
//
//	Параметры:
//	ИдСклада - Строка - идентификатор склада;
//	ИдПомещения - Строка - идентификатор помещения;
//	ИдЗоныПриемки - Строка - идентификатор ячейки;
//	ИдИсполнителя - Строка - идентификатор исполнителя складского задания;
//	ОтсканированныеТоварыWS - ЗначениеXDTO - таблица XDTO-пакета WMSMobileClientExchange - данные отсканированных 
//		товаров.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыЗавершенияСкладскогоЗадания XDTO-пакета WMSMobileClientExchange.
//
Функция ЗавершитьВыполнениеЗаданияНовоеРазмещениеWS(
		ИдСклада, ИдПомещения, ИдЗоныПриемки, ИдИсполнителя, ОтсканированныеТоварыWS, ВерсияСервиса = "") Экспорт
	
	Склад = СсылкаСправочника(ИдСклада, "Склады");
	Исполнитель = СсылкаСправочника(ИдИсполнителя, "Пользователи");
	Помещение = СсылкаСправочника(ИдПомещения, "СкладскиеПомещения");
	ЗонаПриемки = СсылкаСправочника(ИдЗоныПриемки, "СкладскиеЯчейки");
	
	ТаблицаОтсканированныеТовары = ТаблицаОтсканированныеТовары();
	ОтсканированныеТовары = ТоварыСкладскогоЗадания(ТаблицаОтсканированныеТовары, ОтсканированныеТоварыWS);
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеЗаданияНовоеРазмещение(Склад,
		Помещение, ЗонаПриемки, Исполнитель, ОтсканированныеТовары, Неопределено);
	ПараметрыЗаданияWS = ПараметрыЗавершенияСкладскогоЗаданияWS(ПараметрыЗадания, ВерсияСервиса);
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Возвращает версию сервиса для штатной обработки рабочего места работника склада
// Возвращаемое значение:
//	Строка -
//
Функция ОсновнаяВерсияСервиса() Экспорт
	Возврат "2.5.9";
КонецФункции

// Версия сервиса из формы.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма
// 
// Возвращаемое значение:
//  Строка - версия сервиса
Функция ВерсияСервисаИзФормы(Форма) Экспорт
	
	Если ТипЗнч(Форма) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		ВсеРеквизиты = Форма.ПолучитьРеквизиты();	//Массив из РеквизитФормы
		ИмяРеквизитаВерсии = "ВерсияСервиса";
		
		Для каждого Элем Из ВсеРеквизиты Цикл
			Если Элем.Имя = ИмяРеквизитаВерсии Тогда
				
				Возврат Форма[ИмяРеквизитаВерсии];
				
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
	
	Возврат ОсновнаяВерсияСервиса();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СериализацияПараметровСкладскихЗаданий

// Возвращает 'ПараметрыЗадания' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ПараметрыЗадания - Структура - параметры складского задания.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыЗадания XDTO-пакета WMSMobileClientExchange.
//
Функция ПараметрыЗаданияWS(ПараметрыЗадания, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	СтруктураПараметровЗадания = СтруктураПараметровЗадания();
	ЗаполнитьСтруктуруПараметровЗадания(СтруктураПараметровЗадания, ПараметрыЗадания, ВерсияСервиса);
	
	ПараметрыЗаданияТип = ФабрикаXDTO.Тип(URIИмен, "ПараметрыЗадания");
	ПараметрыЗаданияWS = ФабрикаXDTO.Создать(ПараметрыЗаданияТип);
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗаданияWS, СтруктураПараметровЗадания);
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Возвращает структуру для хранения данных 'ПараметрыЗадания' XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураПараметровЗадания()
	
	СтруктураПараметровЗадания = Новый Структура;
	
	СтруктураПараметровЗадания.Вставить("Успешно", Ложь);
	СтруктураПараметровЗадания.Вставить("ТекстСообщения", "");
	СтруктураПараметровЗадания.Вставить("ПорядокОбработки");
	СтруктураПараметровЗадания.Вставить("ИсходныйИсполнитель");
	СтруктураПараметровЗадания.Вставить("ОтборРазмещениеТоваров");
	СтруктураПараметровЗадания.Вставить("ПересчетТоваров");
	СтруктураПараметровЗадания.Вставить("ПриходныйОрдерНаТовары");
	СтруктураПараметровЗадания.Вставить("РасходныйОрдерНаТовары");
	
	Возврат СтруктураПараметровЗадания;
	
КонецФункции

// Заполняет 'СтруктураПараметров' данными документа складского задания.
//
// Параметры:
//	СтруктураПараметров - Структура,
//	ПараметрыЗадания - Структура - параметры складского задания.
//	ВерсияСервиса - Строка
//
Процедура ЗаполнитьСтруктуруПараметровЗадания(СтруктураПараметров, ПараметрыЗадания, Знач ВерсияСервиса)
	
	СтруктураПараметров.Успешно = (ПараметрыЗадания.КодВозврата = 1);
	СтруктураПараметров.ТекстСообщения = ПараметрыЗадания.ТекстСообщения;
	
	Если Не СтруктураПараметров.Успешно Тогда
		Возврат;
	КонецЕсли;
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	СтруктураПараметров.ИсходныйИсполнитель = ПользовательWS(ПараметрыЗадания.ИсходныйИсполнитель, ФабрикаXDTO, URIИмен);
	СтруктураПараметров.ПорядокОбработки = ПорядокОбработкиЗаданияWS(ПараметрыЗадания.ПорядокОбработки, URIИмен);
	
	СтруктураДокумента = СтруктураСкладскогоЗадания(ТипЗадания);
	ЗаполнитьСтруктуруСкладскогоЗадания(СтруктураДокумента, ПараметрыЗадания, ВерсияСервиса);
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ОтборРазмещениеТоваровТип = ФабрикаXDTO.Тип(URIИмен, "ОтборРазмещениеТоваров");
		ОтборРазмещениеТоваровWS = ФабрикаXDTO.Создать(ОтборРазмещениеТоваровТип);
		
		ЗаполнитьЗначенияСвойств(ОтборРазмещениеТоваровWS, СтруктураДокумента);
		
		СтруктураПараметров.ОтборРазмещениеТоваров = ОтборРазмещениеТоваровWS;
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		ПриходныйОрдерНаТоварыТип = ФабрикаXDTO.Тип(URIИмен, "ПриходныйОрдерНаТовары");
		ПриходныйОрдерНаТоварыWS = ФабрикаXDTO.Создать(ПриходныйОрдерНаТоварыТип);
		
		ЗаполнитьЗначенияСвойств(ПриходныйОрдерНаТоварыWS, СтруктураДокумента);
		
		СтруктураПараметров.ПриходныйОрдерНаТовары = ПриходныйОрдерНаТоварыWS;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		ПересчетТоваровТип = ФабрикаXDTO.Тип(URIИмен, "ПересчетТоваров");
		ПересчетТоваровWS = ФабрикаXDTO.Создать(ПересчетТоваровТип);
		
		ЗаполнитьЗначенияСвойств(ПересчетТоваровWS, СтруктураДокумента);
		
		СтруктураПараметров.ПересчетТоваров = ПересчетТоваровWS;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		РасходныйОрдерНаТоварыТип = ФабрикаXDTO.Тип(URIИмен, "РасходныйОрдерНаТовары");
		РасходныйОрдерНаТоварыWS = ФабрикаXDTO.Создать(РасходныйОрдерНаТоварыТип);
		
		ЗаполнитьЗначенияСвойств(РасходныйОрдерНаТоварыWS, СтруктураДокумента);
		
		СтруктураПараметров.РасходныйОрдерНаТовары = РасходныйОрдерНаТоварыWS;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет 'СтруктураДокумента' данными документа складского задания.
//
// Параметры:
//	СтруктураДокумента - см. СтруктураСкладскогоЗадания
//	ПараметрыЗадания - Структура - параметры складского задания.
//	ВерсияСервиса - Строка
//
Процедура ЗаполнитьСтруктуруСкладскогоЗадания(СтруктураДокумента, ПараметрыЗадания, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	СтруктураДокумента.Ссылка = СокрЛП(ПараметрыЗадания.Задание.УникальныйИдентификатор());
	СтруктураДокумента.Склад = СкладWS(ПараметрыЗадания.Склад, ФабрикаXDTO, URIИмен);
	СтруктураДокумента.Помещение = ПомещениеWS(ПараметрыЗадания.Помещение, ФабрикаXDTO, URIИмен);
	
	СтрокаРеквизитовДокумента = "Дата, Номер, Проведен";
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗадания.Задание, СтрокаРеквизитовДокумента);
	
	ЗаполнитьЗначенияСвойств(СтруктураДокумента, РеквизитыДокумента);
	
	//++ Локализация
	СтруктураДокумента.МаркировкаВерхнегоУровня = МаркировкаВерхнегоУровняWS(
		ПараметрыЗадания.МаркировкаВерхнегоУровня,ТипЗадания,ВерсияСервиса);
	
	СтруктураДокумента.МаркировкаДетализированная = МаркировкаДетализированнаяWS(
		ПараметрыЗадания.МаркировкаДетализированная,ТипЗадания,ВерсияСервиса);
	//-- Локализация
		
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ЗаполнитьОтборРазмещениеТоваровWS(СтруктураДокумента, ПараметрыЗадания, ВерсияСервиса);
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		ЗаполнитьПриходныйОрдерНаТоварыWS(СтруктураДокумента, ПараметрыЗадания, ВерсияСервиса);
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		ЗаполнитьПересчетТоваровWS(СтруктураДокумента, ПараметрыЗадания, ВерсияСервиса);
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ЗаполнитьРасходныйОрдерНаТоварыWS(СтруктураДокумента, ПараметрыЗадания, ВерсияСервиса);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет 'СтруктураДокумента' данными документа 'Отбор (размещение) товаров'.
//
// Параметры:
//	СтруктураДокумента - см. СтруктураСкладскогоЗадания
//	ПараметрыЗадания - Структура.
//	ВерсияСервиса - Строка
//
Процедура ЗаполнитьОтборРазмещениеТоваровWS(СтруктураДокумента, ПараметрыЗадания, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	СтруктураДокумента.Статус = СтатусОтбораРазмещенияТоваровWS(ПараметрыЗадания.Статус, URIИмен);
	СтруктураДокумента.Исполнитель = ПользовательWS(ПараметрыЗадания.Исполнитель, ФабрикаXDTO, URIИмен);
	
	Если ТипЗадания = "Отбор" Тогда
		
		ИмяТаблицы = "ОтборРазмещениеТоваровТоварыОтбор";
		
		СтруктураДокумента.ЗонаОтгрузки = ОбластьХраненияWS(ПараметрыЗадания.ЗонаОтгрузки, ФабрикаXDTO, URIИмен);
		СтруктураДокумента.ТоварыОтбор = ТоварыСкладскогоЗаданияWS(
			ПараметрыЗадания.ТоварыОтбор, ТипЗадания, ИмяТаблицы, ВерсияСервиса);
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ИмяТаблицы = "ОтборРазмещениеТоваровТоварыРазмещение";
		
		СтруктураДокумента.ЗонаПриемки = ОбластьХраненияWS(ПараметрыЗадания.ЗонаПриемки,ФабрикаXDTO, URIИмен);
		СтруктураДокумента.ТоварыРазмещение = ТоварыСкладскогоЗаданияWS(
			ПараметрыЗадания.ТоварыРазмещение, ТипЗадания, ИмяТаблицы, ВерсияСервиса);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		СтруктураДокумента.ЗонаОтгрузки = ОбластьХраненияWS(ПараметрыЗадания.ЗонаОтгрузки, ФабрикаXDTO, URIИмен);
		СтруктураДокумента.ЗонаПриемки = ОбластьХраненияWS(ПараметрыЗадания.ЗонаПриемки, ФабрикаXDTO, URIИмен);
		
		ИмяТаблицы = "ОтборРазмещениеТоваровТоварыОтбор";
		СтруктураДокумента.ТоварыОтбор = ТоварыСкладскогоЗаданияWS(
			ПараметрыЗадания.ТоварыОтбор, ТипЗадания, ИмяТаблицы, ВерсияСервиса);
		
		ИмяТаблицы = "ОтборРазмещениеТоваровТоварыРазмещение";
		СтруктураДокумента.ТоварыРазмещение = ТоварыСкладскогоЗаданияWS(
		ПараметрыЗадания.ТоварыРазмещение, ТипЗадания, ИмяТаблицы, ВерсияСервиса);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет 'СтруктураДокумента' данными документа 'Пересчет товаров'.
//
// Параметры:
//	СтруктураДокумента - Структура - документ 'Пересчет товаров',
//	ПараметрыЗадания - Структура.
//	ВерсияСервиса - Строка
//
Процедура ЗаполнитьПересчетТоваровWS(СтруктураДокумента, ПараметрыЗадания, ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ИмяТаблицы = "ПересчетТоваровТовары";
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	СтруктураДокумента.Статус = СтатусПересчетаТоваровWS(ПараметрыЗадания.Статус, URIИмен);
	СтруктураДокумента.Исполнитель = ПользовательWS(ПараметрыЗадания.Исполнитель, ФабрикаXDTO, URIИмен);
	СтруктураДокумента.Товары = ТоварыСкладскогоЗаданияWS(ПараметрыЗадания.Товары, ТипЗадания, ИмяТаблицы, ВерсияСервиса);
	
КонецПроцедуры

// Заполняет 'СтруктураДокумента' данными документа 'Приходный ордер на товары'.
//
// Параметры:
//	СтруктураДокумента - Структура - документ 'Приходный ордер на товары',
//	ПараметрыЗадания - Структура.
//	ВерсияСервиса - Строка
//
Процедура ЗаполнитьПриходныйОрдерНаТоварыWS(СтруктураДокумента, ПараметрыЗадания, ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	СтруктураДокумента.Статус = СтатусПриходногоОрдераWS(ПараметрыЗадания.Статус, URIИмен);
	СтруктураДокумента.Ответственный = ПользовательWS(ПараметрыЗадания.Ответственный, ФабрикаXDTO, URIИмен);
	
КонецПроцедуры

// Заполняет 'СтруктураДокумента' данными документа 'Расходный ордер на товары.
//
// Параметры:
//	СтруктураДокумента - Структура - документ 'Расходный ордер на товары,
//	ПараметрыЗадания - Структура.
//	ВерсияСервиса - Строка
//
Процедура ЗаполнитьРасходныйОрдерНаТоварыWS(СтруктураДокумента, ПараметрыЗадания, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	ИмяТаблицы = "РасходныйОрдерНаТоварыОтгружаемыеТовары";
	
	СтруктураДокумента.Статус = СтатусРасходногоОрдераWS(ПараметрыЗадания.Статус, URIИмен);
	СтруктураДокумента.Контролер = ПользовательWS(ПараметрыЗадания.Контролер, ФабрикаXDTO, URIИмен);
	СтруктураДокумента.ДатаОтгрузки = ПараметрыЗадания.ДатаОтгрузки;
	СтруктураДокумента.ОтгружаемыеТовары = ТоварыСкладскогоЗаданияWS(
		ПараметрыЗадания.ОтгружаемыеТовары, ТипЗадания, ИмяТаблицы, ВерсияСервиса);
	
КонецПроцедуры

#КонецОбласти

#Область ДесериализацияПараметровСкладскихЗаданий

// Заполняет 'ПараметрыЗадания' данными документа складского задания, полученными через web-сервис.
//
// Параметры:
//	Объект - ОбработкаОбъект.РабочееМестоРаботникаСклада,
//	ПараметрыЗадания - см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//	ПараметрыЗаданияWS - ОбъектXDTO
//	
Процедура ЗаполнитьПараметрыЗадания(Объект, ПараметрыЗадания, ПараметрыЗаданияWS)
	
	Если Не ПараметрыЗаданияWS.Успешно Тогда
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = ПараметрыЗаданияWS.ТекстСообщения;
		
		Возврат;
	КонецЕсли;
	
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	ПараметрыЗадания.ПорядокОбработки = ПорядокОбработкиЗадания(ПараметрыЗаданияWS.ПорядокОбработки);
	ПараметрыЗадания.ИсходныйИсполнитель = СсылкаСправочника(ПараметрыЗаданияWS.ИсходныйИсполнитель["Ссылка"],
		"Пользователи");
	
	ИмяДокументаВКоллекции = "";
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ЗаполнитьОтборРазмещениеТоваров(Объект, ПараметрыЗадания, ПараметрыЗаданияWS.ОтборРазмещениеТоваров);
		ИмяДокументаВКоллекции = "ОтборРазмещениеТоваров";
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		ЗаполнитьПриходныйОрдерНаТовары(ПараметрыЗадания, ПараметрыЗаданияWS.ПриходныйОрдерНаТовары);
		ИмяДокументаВКоллекции = "ПриходныйОрдерНаТовары";
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		ЗаполнитьПересчетТоваров(Объект, ПараметрыЗадания, ПараметрыЗаданияWS.ПересчетТоваров);
		ИмяДокументаВКоллекции = "ПересчетТоваров";
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ЗаполнитьРасходныйОрдерНаТовары(Объект, ПараметрыЗадания, ПараметрыЗаданияWS.РасходныйОрдерНаТовары);
		ИмяДокументаВКоллекции = "РасходныйОрдерНаТовары";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяДокументаВКоллекции) Тогда
		Возврат;
	КонецЕсли;
	
	// ++Локализация
	
	//Дозаполним данные маркировки
	ДанныеДокумента = ПараметрыЗаданияWS[ИмяДокументаВКоллекции];
	ИмяКоллекции = "МаркировкаВерхнегоУровня";
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента, ИмяКоллекции) Тогда
		
		// Маркировка верхнего уровня
		КоллекцияМарок = ДанныеДокумента[ИмяКоллекции];
		Если КоллекцияМарок <> Неопределено Тогда
			ЗначенияШК = КоллекцияМарок.ЗначениеШтрихкода;
			Для каждого Элем Из ЗначенияШК Цикл
				
				Если ПараметрыЗадания[ИмяКоллекции] = Неопределено Тогда
					ПараметрыЗадания[ИмяКоллекции] = НовыйМаркировкаВерхнегоУровня(); // ТаблицаЗначений
				КонецЕсли; 
				
				НовСтрока = ПараметрыЗадания[ИмяКоллекции].Добавить(); // СтрокаТаблицыЗначений
				НовСтрока.ЗначениеШтрихкода = Элем;
				
			КонецЦикла;
		КонецЕсли;
		
		// детальные данные
		ИмяКоллекции = "МаркировкаДетализированная";
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеДокумента, ИмяКоллекции) Тогда
		
			Если ДанныеДокумента[ИмяКоллекции] <> Неопределено Тогда
				СтрокиМаркировкаДетализированная = 
					ПараметрыЗаданияWS[ИмяДокументаВКоллекции][ИмяКоллекции].ПолучитьСписок("Строка"); 
					
				ЗаполнитьМаркировкаДетализированная(ПараметрыЗадания, СтрокиМаркировкаДетализированная);
			КонецЕсли; 
		
		КонецЕсли; 
		
	КонецЕсли;
	
	// --Локализация
	
КонецПроцедуры

// ++Локализация

Процедура ЗаполнитьМаркировкаДетализированная(ПараметрыЗадания, МаркировкаДетализированнаяWS)
	
	Если ТипЗнч(ПараметрыЗадания.МаркировкаДетализированная) <> Тип("ТаблицаЗначений") Тогда
		ПараметрыЗадания.МаркировкаДетализированная = НовыйМаркировкаДетализированная();
	КонецЕсли; 
	
	ПараметрыЗадания.МаркировкаДетализированная.Очистить();
	
	ПромежуточнаяТаблица = НовыйТаблицаТоваровМаркировки();
	
	Для каждого Элем Из МаркировкаДетализированнаяWS Цикл
		
		ФиктивнаяСтрока = ПромежуточнаяТаблица.Добавить();
		ЗаполнитьНоменклатуруСкладскогоЗадания(ФиктивнаяСтрока, Элем.Номенклатура);
		ЗаполнитьХарактеристикуСкладскогоЗадания(ФиктивнаяСтрока, Элем.Характеристика);
		ЗаполнитьСериюСкладскогоЗадания(ФиктивнаяСтрока, Элем.Серия);
		ЗаполнитьУпаковкуСкладскогоЗадания(ФиктивнаяСтрока,Элем.Упаковка);
		
		ДетальнаяСтрока = ПараметрыЗадания.МаркировкаДетализированная.Добавить();
		ЗаполнитьЗначенияСвойств(ДетальнаяСтрока, Элем);
		ЗаполнитьЗначенияСвойств(ДетальнаяСтрока, ФиктивнаяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

// --Локализация

// Заполняет 'ПараметрыЗадания' данными документа 'Отбор (размещение) товаров', полученными, 
// через web-сервис.
//
// Параметры:
//	Объект - ОбработкаОбъект.РабочееМестоРаботникаСклада,
//	ПараметрыЗадания - см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ПараметрыЗадания
//	ОтборРазмещенияТоваровWS - ОбъектXDTO - 
//			ОтборРазмещенияТоваров XDTO-пакета WMSMobileClientExchange - данные документа 'Отбор (размещение) товаров'.
//
Процедура ЗаполнитьОтборРазмещениеТоваров(Объект, ПараметрыЗадания, ОтборРазмещенияТоваровWS)
	
	ТипЗадания = ПараметрыЗадания.ТипЗадания;
	
	Задание = СсылкаДокумента(ОтборРазмещенияТоваровWS.Ссылка, "ОтборРазмещениеТоваров");
	Исполнитель = СсылкаСправочника(ОтборРазмещенияТоваровWS.Исполнитель["Ссылка"], "Пользователи");
	
	ПараметрыЗадания.Проведен = ОтборРазмещенияТоваровWS.Проведен;
	ПараметрыЗадания.Статус = СтатусОтбораРазмещенияТоваров(ОтборРазмещенияТоваровWS.Статус);
	
	ПараметрыЗадания.Вставить("Задание", Задание);
	ПараметрыЗадания.Вставить("Исполнитель", Исполнитель);
	
	Если ТипЗадания = "Отбор" Тогда
		
		ЗонаОтгрузки = СсылкаСправочника(ОтборРазмещенияТоваровWS.ЗонаОтгрузки.Ссылка, "СкладскиеЯчейки");
		Распоряжение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыЗадания.Задание, "Распоряжение");
		
		Объект.ТоварыОтбор.Очистить();
		ТоварыОтбор = Объект.ТоварыОтбор.Выгрузить();
		
		ПараметрыЗадания.ТоварыОтбор = ТоварыСкладскогоЗадания(ТоварыОтбор, ОтборРазмещенияТоваровWS.ТоварыОтбор);
		
		ПараметрыЗадания.Вставить("Распоряжение", Распоряжение);
		ПараметрыЗадания.Вставить("ЗонаОтгрузки", ЗонаОтгрузки);
		ПараметрыЗадания.Вставить("НаименованиеЗоныОтгрузки", ОтборРазмещенияТоваровWS.ЗонаОтгрузки.Код);
		
		ПараметрыЗадания.Вставить("ЗонаПриемки");
		ПараметрыЗадания.Вставить("НаименованиеЗоныПриемки");
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Объект.ТоварыРазмещение.Очистить();
		ТоварыРазмещение = Объект.ТоварыРазмещение.Выгрузить();
		
		ЗонаПриемки = СсылкаСправочника(ОтборРазмещенияТоваровWS.ЗонаПриемки.Ссылка, "СкладскиеЯчейки");
		
		ПараметрыЗадания.ТоварыРазмещение = ТоварыСкладскогоЗадания(ТоварыРазмещение,
			ОтборРазмещенияТоваровWS.ТоварыРазмещение);
		
		ПараметрыЗадания.Вставить("ЗонаПриемки", ЗонаПриемки);
		ПараметрыЗадания.Вставить("НаименованиеЗоныПриемки", ОтборРазмещенияТоваровWS.ЗонаПриемки.Код);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ЗонаПриемки = СсылкаСправочника(ОтборРазмещенияТоваровWS.ЗонаПриемки.Ссылка, "СкладскиеЯчейки");
		ЗонаОтгрузки = СсылкаСправочника(ОтборРазмещенияТоваровWS.ЗонаОтгрузки.Ссылка, "СкладскиеЯчейки");
		
		Объект.ТоварыОтбор.Очистить();
		ТоварыОтбор = Объект.ТоварыОтбор.Выгрузить();
		
		Объект.ТоварыРазмещение.Очистить();
		ТоварыРазмещение = Объект.ТоварыРазмещение.Выгрузить();
		
		ПараметрыЗадания.ТоварыОтбор = ТоварыСкладскогоЗадания(ТоварыОтбор, ОтборРазмещенияТоваровWS.ТоварыОтбор);
		ПараметрыЗадания.ТоварыРазмещение = ТоварыСкладскогоЗадания(ТоварыРазмещение,
			ОтборРазмещенияТоваровWS.ТоварыРазмещение);
		
		ПараметрыЗадания.Вставить("ЗонаПриемки", ЗонаПриемки);
		ПараметрыЗадания.Вставить("ЗонаОтгрузки", ЗонаОтгрузки);
		ПараметрыЗадания.Вставить("НаименованиеЗоныПриемки", ОтборРазмещенияТоваровWS.ЗонаПриемки.Код);
		ПараметрыЗадания.Вставить("НаименованиеЗоныОтгрузки", ОтборРазмещенияТоваровWS.ЗонаОтгрузки.Код);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет 'ПараметрыЗадания' данными документа 'Пересчет товаров', полученными через web-сервис.
//
// Параметры:
//	Объект - ОбработкаОбъект.РабочееМестоРаботникаСклада,
//	ПараметрыЗадания - Структура,
//	ПересчетТоваровWS - ОбъектXDTO - 
//			ПересчетТоваров XDTO-пакета WMSMobileClientExchange - данные документа 'Пересчет товаров'.
//
Процедура ЗаполнитьПересчетТоваров(Объект, ПараметрыЗадания, ПересчетТоваровWS)
	
	Задание = СсылкаДокумента(ПересчетТоваровWS.Ссылка, "ПересчетТоваров");
	Исполнитель = СсылкаСправочника(ПересчетТоваровWS.Исполнитель["Ссылка"], "Пользователи");
	
	Объект.Товары.Очистить();
	Товары = Объект.Товары.Выгрузить();
	
	ПараметрыЗадания.Проведен = ПересчетТоваровWS.Проведен;
	ПараметрыЗадания.Статус = СтатусПересчетаТоваров(ПересчетТоваровWS.Статус);
	ПараметрыЗадания.Товары = ТоварыСкладскогоЗадания(Товары, ПересчетТоваровWS.Товары);
	
	ПараметрыЗадания.Вставить("Задание", Задание);
	ПараметрыЗадания.Вставить("Исполнитель", Исполнитель);
	
КонецПроцедуры

// Заполняет 'ПараметрыЗадания' данными документа 'Приходный ордер на товары', полученными через web-сервис.
//
// Параметры:
//	Объект - ОбработкаОбъект.РабочееМестоРаботникаСклада,
//	ПараметрыЗадания - Структура,
//	ПриходныйОрдерНаТоварыWS - ОбъектXDTO - 
//			ПриходныйОрдерНаТовары XDTO-пакета WMSMobileClientExchange - данные документа 'Приходный ордер на товары'.
//
Процедура ЗаполнитьПриходныйОрдерНаТовары(ПараметрыЗадания, ПриходныйОрдерНаТоварыWS)
	
	Задание = СсылкаДокумента(ПриходныйОрдерНаТоварыWS.Ссылка, "ПриходныйОрдерНаТовары");
	Ответственный = СсылкаСправочника(ПриходныйОрдерНаТоварыWS.Ответственный["Ссылка"], "Пользователи");
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "Распоряжение, СкладскаяОперация");
	
	Распоряжение = РеквизитыЗадания.Распоряжение;
	СкладскаяОперация = РеквизитыЗадания.СкладскаяОперация;
	
	ПараметрыЗадания.Проведен = ПриходныйОрдерНаТоварыWS.Проведен;
	ПараметрыЗадания.Статус = СтатусПриходногоОрдераНаТовары(ПриходныйОрдерНаТоварыWS.Статус);
	
	ПараметрыЗадания.Вставить("Задание", Задание);
	ПараметрыЗадания.Вставить("Распоряжение",Распоряжение);
	ПараметрыЗадания.Вставить("Ответственный", Ответственный);
	ПараметрыЗадания.Вставить("СкладскаяОперация", СкладскаяОперация);
	
КонецПроцедуры

// Заполняет 'ПараметрыЗадания' данными документа 'Расходный ордер на товары', полученными через web-сервис.
//
// Параметры:
//	Объект - ОбработкаОбъект.РабочееМестоРаботникаСклада,
//	ПараметрыЗадания - Структура,
//	РасходныйОрдерНаТоварыWS - ОбъектXDTO - 
//			РасходныйОрдерНаТовары XDTO-пакета WMSMobileClientExchange - данные документа 'Расходный ордер на товары'.
//
Процедура ЗаполнитьРасходныйОрдерНаТовары(Объект, ПараметрыЗадания, РасходныйОрдерНаТоварыWS)
	
	Задание = СсылкаДокумента(РасходныйОрдерНаТоварыWS.Ссылка, "РасходныйОрдерНаТовары");	// ДокументСсылка.РасходныйОрдерНаТовары
	Контролер = СсылкаСправочника(РасходныйОрдерНаТоварыWS.Контролер["Ссылка"], "Пользователи");
	СкладскаяОперация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задание, "СкладскаяОперация");
	
	Объект.ОтгружаемыеТовары.Очистить();
	ОтгружаемыеТовары = Объект.ОтгружаемыеТовары.Выгрузить();
	
	ПараметрыЗадания.Проведен = РасходныйОрдерНаТоварыWS.Проведен;
	ПараметрыЗадания.Статус = СтатусРасходногоОрдера(РасходныйОрдерНаТоварыWS.Статус);
	ПараметрыЗадания.ОтгружаемыеТовары = ТоварыСкладскогоЗадания(ОтгружаемыеТовары,
		РасходныйОрдерНаТоварыWS.ОтгружаемыеТовары);
	
	ПараметрыЗадания.Вставить("Задание", Задание);
	ПараметрыЗадания.Вставить("ДатаОтгрузки", РасходныйОрдерНаТоварыWS.ДатаОтгрузки);
	ПараметрыЗадания.Вставить("Контролер", Контролер);
	ПараметрыЗадания.Вставить("СкладскаяОперация", СкладскаяОперация);
	
КонецПроцедуры

#КонецОбласти

#Область СериализацияДополнительныхПараметров

// Возвращает 'ДополнительныеПараметры' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	ТипЗадания - Строка - тип складского задания,
//	Фабрика - ФабрикаXDTO, Неопределено -
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыЗадания XDTO-пакета WMSMobileClientExchange.
//
Функция ДополнительныеПараметрыWS(Форма, ТипЗадания, Фабрика)
	
	Если Не (ТипЗадания = "Перемещение") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ДополнительныеПараметры = СтруктураДополнительныеПараметры();
	ЗаполнитьДополнительныеПараметры(Форма, ДополнительныеПараметры, Фабрика);
	
	ПараметрыЗавершенияПеремещенияТип = Фабрика.Тип(URIИмен, "ПараметрыЗавершенияПеремещения");
	ДополнительныеПараметрыWS = Фабрика.Создать(ПараметрыЗавершенияПеремещенияТип);
	
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыWS, ДополнительныеПараметры);
	
	Возврат ДополнительныеПараметрыWS;
	
КонецФункции

// Возвращает структуру для хранения данных дополнительных параметрах складской операции "Перемещение товаров".
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураДополнительныеПараметры()
	
	СтруктураДополнительныеПараметры = Новый Структура();
	
	СтруктураДополнительныеПараметры.Вставить("ЗонаПриемки");
	СтруктураДополнительныеПараметры.Вставить("ЗонаОтгрузки");
	СтруктураДополнительныеПараметры.Вставить("ОтборОтсканирован");
	
	Возврат СтруктураДополнительныеПараметры;
	
КонецФункции

// Заполняет 'ДополнительныеПараметры' данными складкой операции "Перемещение".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//	ДополнительныеПараметры - Структура
//	Фабрика - ФабрикаXDTO
//
Процедура ЗаполнитьДополнительныеПараметры(Форма, ДополнительныеПараметры, Фабрика)
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	ПараметрыРежима = Форма.ПараметрыРежима;
	
	ДополнительныеПараметры.ЗонаПриемки = ОбластьХраненияWS(ПараметрыРежима.ЗонаПриемки, Фабрика, URIИмен);
	ДополнительныеПараметры.ЗонаОтгрузки = ОбластьХраненияWS(ПараметрыРежима.ЗонаОтгрузки, Фабрика, URIИмен);
	ДополнительныеПараметры.ОтборОтсканирован = ПараметрыРежима.ОтборОтсканирован;
	
КонецПроцедуры

#КонецОбласти

#Область ДесериализацияПараметровЗавершенияСкладскогоЗадания

// Возвращает 'ПараметрыЗадания' после завершения выполнения складской операции.
//
// Параметры:
//	Задание - ДокументСсылка - ссылка документа складского задания,
//	ИсходныйИсполнитель - СправочникСсылка.Пользователи - исходный исполнитель складского задания,
//	ОтсканированныеТовары - ТаблицаЗначений - таблица отсканированных товаров документа складского задания,
//	ТипЗадания - Строка - тип складского задания,
//	ДополнительныеПараметры - Структура, Неопределено - параметры складской операции "Перемещение".
//	СканированныеЗначенияМарок - СписокЗначений:
//		*Значение - СправочникСсылка - сопоставленная ссылка
//		*Представление - Строка - значение штрихкода марки
//
// Возвращаемое значение:
//	Структура.
//
Функция ПараметрыЗавершенияЗадания(
	Задание, ИсходныйИсполнитель, ОтсканированныеТовары, ТипЗадания, ДополнительныеПараметры, СканированныеЗначенияМарок)
	
	Если ТипЗадания = "Пересчет" Тогда
		
		ПарметрыЗавершения = 
			РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НовыйЗавершитьВыполнениеСкладскогоЗаданияПараметры();
		ПарметрыЗавершения.Задание = Задание;
		ПарметрыЗавершения.ТЗОтсканированныеТовары = ОтсканированныеТовары;
		ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеСкладскогоЗадания(
			ПарметрыЗавершения);
		
	ИначеЕсли ТипЗадания = "Отбор" Тогда
		
		ПарметрыЗавершения = 
			РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НовыйЗавершитьВыполнениеСкладскогоЗаданияПараметры();
		ПарметрыЗавершения.Задание = Задание;
		ПарметрыЗавершения.ТоварыДляСканирования = ОтсканированныеТовары;
		ПарметрыЗавершения.СканированныеЗначенияМарок = СканированныеЗначенияМарок;
		ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеСкладскогоЗадания(
			ПарметрыЗавершения);
		
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		ПарметрыЗавершения = 
			РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НовыйЗавершитьВыполнениеСкладскогоЗаданияПараметры();
		ПарметрыЗавершения.Задание = Задание;
		ПарметрыЗавершения.ТоварыДляСканирования = ОтсканированныеТовары;
		ПарметрыЗавершения.СканированныеЗначенияМарок = СканированныеЗначенияМарок;
		ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеСкладскогоЗадания(
			ПарметрыЗавершения);
		
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		ПараметрыЗадания = ПараметрыЗавершенияЗаданияПеремещениеТоваров(Задание, ИсходныйИсполнитель, ОтсканированныеТовары,
			ДополнительныеПараметры);
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		ПараметрыЗадания = ПараметрыЗавершенияЗаданияПроверкаОтбора(Задание, ИсходныйИсполнитель, ОтсканированныеТовары,
		СканированныеЗначенияМарок);
		
	КонецЕсли;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Параметры:
// 		Задание - ДокументСсылка, УникальныйИдентификатор - 
// 		ИсходныйИсполнитель - СправочникСсылка.Пользователи, УникальныйИдентификатор -
// 		ТоварыДляСканирования - ТаблицаЗначений
// 		ДополнительныеПараметры - Структура, ЗначениеXDTO, ОбъектXDTO, Неопределено - содержит:
// 			* ЗонаПриемки - СправочникСсылка.СкладскиеЯчейки
// 			* ЗонаОтгрузки - СправочникСсылка.СкладскиеЯчейки
// 	
// Возвращаемое значение:
// 		см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеСкладскогоЗадания
//
Функция ПараметрыЗавершенияЗаданияПеремещениеТоваров(Задание, ИсходныйИсполнитель, ТоварыДляСканирования,
		ДополнительныеПараметры)
	
	ОтборОтсканирован = ДополнительныеПараметры.ОтборОтсканирован;
	ЗонаПриемки = СсылкаСправочника(ДополнительныеПараметры.ЗонаПриемки["Ссылка"], "СкладскиеЯчейки");
	ЗонаОтгрузки = СсылкаСправочника(ДополнительныеПараметры.ЗонаОтгрузки["Ссылка"], "СкладскиеЯчейки");
	
	ПарметрыЗавершения = 
		РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.НовыйЗавершитьВыполнениеСкладскогоЗаданияПараметры();
	ПарметрыЗавершения.Задание = Задание;
	ПарметрыЗавершения.ТоварыДляСканирования = ТоварыДляСканирования;
	ПарметрыЗавершения.ЗонаПриемки = ЗонаПриемки;
	ПарметрыЗавершения.ЗонаОтгрузки = ЗонаОтгрузки;
	ПарметрыЗавершения.ОтборОтсканирован = ОтборОтсканирован;
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеСкладскогоЗадания(
		ПарметрыЗавершения);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Возвращает 'ПараметрыЗадания' после завершения выполнения складской операции "Проверка отбора".
//
// Параметры:
//	Задание - ДокументСсылка - ссылка документа складского задания.
//	ИсходныйИсполнитель - СправочникСсылка.Пользователи - исходный исполнитель складского задания,
//	ОтсканированныеТовары - ТаблицаЗначений - таблица отсканированных товаров документа складского задания.
//	СканированныеЗначенияМарок - ТаблицаЗначений
//
// Возвращаемое значение:
//	Структура.
//
Функция ПараметрыЗавершенияЗаданияПроверкаОтбора(Задание, 
													ИсходныйИсполнитель, 
													ОтсканированныеТовары,
													СканированныеЗначенияМарок)
	
	СтрокаРеквизитов = "Склад, Помещение";
	РеквизитыЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, СтрокаРеквизитов);
	
	ИспользуетсяАдресноеХранилище = СкладыСервер.ИспользоватьАдресноеХранение(РеквизитыЗадания.Склад,
		РеквизитыЗадания.Помещение, , Ложь);
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ЗавершитьВыполнениеЗаданияПроверкаОтбора(
		РеквизитыЗадания.Склад, РеквизитыЗадания.Помещение, Задание, ОтсканированныеТовары, Неопределено,
		ИспользуетсяАдресноеХранилище,СканированныеЗначенияМарок);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Заполняет 'ПараметрыЗадания' данными документа складского задания после завершения выполнения складской операции.
//
// Параметры:
//	ПараметрыЗадания - Структура,
//	ПараметрыЗаданияWS - ЗначениеXDTO- ПараметрыЗадания XDTO-пакета WMSMobileClientExchange - параметры складского задания.
//
Процедура ЗаполнитьПараметрыЗавершенияСкладскогоЗадания(ПараметрыЗадания, ПараметрыЗаданияWS)
	
	Если Не ПараметрыЗаданияWS.Успешно Тогда
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = ПараметрыЗаданияWS.ТекстСообщения;
	КонецЕсли;
	
	Если ПараметрыЗаданияWS.Задание <> Неопределено Тогда
		Задание = СсылкаЗадания(ПараметрыЗаданияWS.Задание, "Размещение");
		
		ПараметрыЗадания.Вставить("Задание", Задание);
	КонецЕсли;
	
	Если ПараметрыЗаданияWS.НеотгружаемыеТовары <> Неопределено Тогда
		ТаблицаНеотгружаемыеТовары = ТаблицаНеотгружаемыеТовары();
		НеотгружаемыеТовары = НеотгружаемыеТовары(ТаблицаНеотгружаемыеТовары, ПараметрыЗаданияWS.НеОтгружаемыеТовары);
		
		ПараметрыЗадания.Вставить("НеотгружаемыеТовары", НеотгружаемыеТовары);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СериализацияПрочихОбъектовXDTOПакета

// Возвращает 'ПараметрыЗавершенияСкладскогоЗадания'.
//
// Параметры:
//	ПараметрыЗадания - Структура - параметры складского задания.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыЗавершенияСкладскогоЗадания XDTO-пакета WMSMobileClientExchange.
//
Функция ПараметрыЗавершенияСкладскогоЗаданияWS(ПараметрыЗадания, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ПараметрыЗаданияТип = ФабрикаXDTO.Тип(URIИмен, "ПараметрыЗавершенияСкладскогоЗадания");
	ПараметрыЗаданияWS = ФабрикаXDTO.Создать(ПараметрыЗаданияТип);
	
	ПараметрыЗаданияWS.Успешно = ПараметрыЗадания.КодВозврата = 1;
	ПараметрыЗаданияWS.ТекстСообщения = ПараметрыЗадания.ТекстСообщения;
	
	Если ПараметрыЗадания.Свойство("Задание") Тогда
		ИдЗадания = СокрЛП(ПараметрыЗадания.Задание.УникальныйИдентификатор());
		ПараметрыЗаданияWS.Задание = ИдЗадания;
	КонецЕсли;
	
	Если ПараметрыЗадания.Свойство("НеотгружаемыеТовары") Тогда
		ДополнитьДаннымиНеотгружаемыеТовары(ПараметрыЗадания.НеотгружаемыеТовары);
		ПараметрыЗаданияWS.НеотгружаемыеТовары = НеотгружаемыеТоварыWS(ПараметрыЗадания.НеотгружаемыеТовары, ВерсияСервиса);
	КонецЕсли;

	//++ Локализация
	Если ПараметрыЗаданияWS.Успешно 
		И ПараметрыЗадания.Свойство("РезультатПроверкиМаркировки") Тогда
		ПараметрыЗаданияWS.РезультатПроверкиМаркировки = 
			РезультатПроверкиМаркировкиWS(ПараметрыЗадания.РезультатПроверкиМаркировки, ВерсияСервиса);
	КонецЕсли; 
	//-- Локализация

	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Возвращает 'ПараметрыОбработкиОтсканированныхТоваров'.
//
// Параметры:
//	ПараметрыЗадания - Структура - параметры складского задания.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыОбработкиОтсканированныхТоваров XDTO-пакета WMSMobileClientExchange.
//
Функция ПараметрыОбработкиОтсканированныхТоваровОтбораWS(ПараметрыЗадания, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ПараметрыЗаданияТип = ФабрикаXDTO.Тип(URIИмен, "ПараметрыОбработкиОтсканированныхТоваров");
	ПараметрыЗаданияWS = ФабрикаXDTO.Создать(ПараметрыЗаданияТип);
	
	ПараметрыЗаданияWS.Успешно = ПараметрыЗадания.КодВозврата = 1;
	ПараметрыЗаданияWS.ТекстСообщения = ПараметрыЗадания.ТекстСообщения;
	
	Если ПараметрыЗаданияWS.Успешно Тогда
		ПараметрыЗаданияWS.ТоварыОтбор = ТоварыСкладскогоЗаданияWS(
			ПараметрыЗадания.ТоварыОтбор, "Отбор","ОтборРазмещениеТоваровТоварыОтбор", ВерсияСервиса);
	КонецЕсли;
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Возвращает 'ПараметрыОтменыВыполненияЗадания'.
//
// Параметры:
//	ПараметрыЗадания - Структура - параметры складского задания.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыОтменыВыполненияЗадания XDTO-пакета WMSMobileClientExchange.
//
Функция ПараметрыОтменыВыполненияСкладскогоЗаданияWS(ПараметрыЗадания, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ПараметрыЗаданияТип = ФабрикаXDTO.Тип(URIИмен, "ПараметрыОтменыВыполненияЗадания");
	ПараметрыЗаданияWS = ФабрикаXDTO.Создать(ПараметрыЗаданияТип);
	
	ПараметрыЗаданияWS.Успешно = ПараметрыЗадания.КодВозврата = 1;
	ПараметрыЗаданияWS.ТекстСообщения = ПараметрыЗадания.ТекстСообщения;
	
	Возврат ПараметрыЗаданияWS;
	
КонецФункции

// Возвращает 'ПараметрыСпискаЯчеек'.
//
// Параметры:
//	ЗоныПриемкиОтгрузки - ТаблицаЗначений - таблица складских ячеек.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыСпискаЯчеек XDTO-пакета WMSMobileClientExchange.
//
Функция ПараметрыСпискаЯчеекWS(ЗоныПриемкиОтгрузки, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ПараметрыСпискаЯчеекТип = ФабрикаXDTO.Тип(URIИмен, "ПараметрыСпискаЯчеек");
	ПараметрыСпискаЯчеекWS = ФабрикаXDTO.Создать(ПараметрыСпискаЯчеекТип);
	
	ПараметрыСпискаЯчеекWS.Успешно = Истина;
	ПараметрыСпискаЯчеекWS.ТекстСообщения = "";
	ПараметрыСпискаЯчеекWS.ЗоныПриемкиОтгрузки = ЗоныПриемкиОтгрузкиXDTO(ЗоныПриемкиОтгрузки, ВерсияСервиса);
	
	Возврат ПараметрыСпискаЯчеекWS;
	
КонецФункции

// Возвращает 'ПараметрыТоваровЯчейки'.
//
// Параметры:
//	ПараметрыЯчейки -см. РабочееМестоРаботникаСкладаПрограммныйИнтерфейс.ТоварыЯчейки
//	ТоварыЯчейки - ТаблицаЗначений - таблица товаров, хранящихся в ячейке.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ПараметрыТоваровЯчейки XDTO-пакета WMSMobileClientExchange:
//		* Успешно - Булево
//		* ТекстСообщения - Строка
//		* Ячейка - см. СкладскаяЯчейкаWS
//		* ТоварыЯчейки - см. ТоварыЯчейкиXDTO
//
Функция ПараметрыТоваровЯчейкиWS(ПараметрыЯчейки, ТоварыЯчейки, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ПараметрыТоваровЯчейкиТип = ФабрикаXDTO.Тип(URIИмен, "ПараметрыТоваровЯчейки");
	ПараметрыТоваровЯчейкиWS = ФабрикаXDTO.Создать(ПараметрыТоваровЯчейкиТип);
	
	Если (ПараметрыЯчейки = Неопределено)
		И (ТоварыЯчейки = Неопределено) Тогда
		
		ПараметрыТоваровЯчейкиWS.Успешно = Ложь;
		ПараметрыТоваровЯчейкиWS.ТекстСообщения = НСтр("ru = 'Не удалось получить информацию по штрихкоду'");
		
	Иначе
		ПараметрыТоваровЯчейкиWS.Успешно = Истина;
		ПараметрыТоваровЯчейкиWS.ТекстСообщения = "";
		
		Если Не (ПараметрыЯчейки = Неопределено) Тогда
			ПараметрыТоваровЯчейкиWS.Ячейка = СкладскаяЯчейкаWS(ПараметрыЯчейки, ФабрикаXDTO, URIИмен);
		Иначе
			ПараметрыТоваровЯчейкиWS.Ячейка = Неопределено;
		КонецЕсли;
		
		ПараметрыТоваровЯчейкиWS.ТоварыЯчейки = ТоварыЯчейкиXDTO(ТоварыЯчейки, ВерсияСервиса);
	КонецЕсли;
	
	Возврат ПараметрыТоваровЯчейкиWS;
	
КонецФункции

#КонецОбласти

#Область ДесериализацияПрочихОбъектовXDTOПакета

// Заполняет 'ПараметрыЗадания' данными документа 'Отбор (размещение) товаров' 
// после завершения процесса отбора товаров из ячеек складской операции "Перемещение".
//
// Параметры:
//	ПараметрыЗадания - Структура,
//	ПараметрыЗаданияWS - ЗначениеXDTO- ПараметрыЗадания XDTO-пакета WMSMobileClientExchange - параметры складского задания,
//	Объект - ОбработкаОбъект.РабочееМестоРаботникаСклада
//
Процедура ЗаполнитьПараметрыОбработкиОтсканированныхТоваров(ПараметрыЗадания, ПараметрыЗаданияWS, Объект)
	
	Если Не ПараметрыЗаданияWS.Успешно Тогда
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = ПараметрыЗаданияWS.ТекстСообщения;
	КонецЕсли;
	
	Если ПараметрыЗаданияWS.ТоварыОтбор <> Неопределено Тогда
		ТоварыОтбор = Объект.ТоварыОтбор.Выгрузить();
		ТоварыОтбор.Очистить();
		
		ПараметрыЗадания.ТоварыОтбор = ТоварыСкладскогоЗадания(ТоварыОтбор, ПараметрыЗаданияWS.ТоварыОтбор);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет 'ПараметрыЗадания' первоначальными данными документа складского задания до принятия задания к исполнению.
//
// Параметры:
//	ПараметрыЗадания - Структура,
//	ПараметрыЗаданияWS - ЗначениеXDTO- ПараметрыЗадания XDTO-пакета WMSMobileClientExchange - параметры складского задания.
//
Процедура ЗаполнитьПараметрыОтменыВыполненияЗадания(ПараметрыЗадания, ПараметрыЗаданияWS)
	
	Если Не ПараметрыЗаданияWS.Успешно Тогда
		ПараметрыЗадания.КодВозврата = 0;
		ПараметрыЗадания.ТекстСообщения = ПараметрыЗаданияWS.ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СериализацияПеречислений

// Возвращает значение перечисления "ПорядокОбработкиСкладскогоЗадания".
//
// Параметры:
//	ПорядокОбработкиЗаданияWS - ЗначениеXDTO - ПорядокОбработкиСкладскогоЗадания XDTO-пакета 
//		WMSMobileClientExchange - порядок обработки складского задания.
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.ПорядокОбработкиСкладскогоЗадания - значение перечисления.
//
Функция ПорядокОбработкиЗадания(ПорядокОбработкиЗаданияWS)
	
	ПорядокОбработкиОбъект = Метаданные.Перечисления.ПорядокОбработкиСкладскогоЗадания.ЗначенияПеречисления.Найти(
		ПорядокОбработкиЗаданияWS);
	
	Если ПорядокОбработкиОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.ПорядокОбработкиСкладскогоЗадания.ЗначенияПеречисления.Индекс(
			ПорядокОбработкиОбъект);
		ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.Получить(ИндексЗначения);
	Иначе
		ПорядокОбработки = Перечисления.ПорядокОбработкиСкладскогоЗадания.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПорядокОбработки;
	
КонецФункции

// Возвращает значение перечисления "СтатусыОтборовРазмещенийТоваров".
//
// Параметры:
//	СтатусЗаданияWS - ЗначениеXDTO - СтатусыОтборовРазмещенийТоваров XDTO-пакета 
//		WMSMobileClientExchange - статус документа "Отбор (размещение) товаров".
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.СтатусыОтборовРазмещенийТоваров - значение перечисления.
//
Функция СтатусОтбораРазмещенияТоваров(СтатусЗаданияWS)
	
	СтатусЗаданияОбъект = Метаданные.Перечисления.СтатусыОтборовРазмещенийТоваров.ЗначенияПеречисления.Найти(
		СтатусЗаданияWS);
	
	Если СтатусЗаданияОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.СтатусыОтборовРазмещенийТоваров.ЗначенияПеречисления.Индекс(
			СтатусЗаданияОбъект);
		СтатусЗадания = Перечисления.СтатусыОтборовРазмещенийТоваров.Получить(ИндексЗначения);
	Иначе
		СтатусЗадания = Перечисления.СтатусыОтборовРазмещенийТоваров.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатусЗадания;
	
КонецФункции

// Возвращает значение перечисления "СтатусыПересчетовТоваров".
//
// Параметры:
//	СтатусЗаданияWS - ЗначениеXDTO - СтатусыПересчетовТоваров XDTO-пакета 
//		WMSMobileClientExchange - статус документа "Пересчеты товаров".
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.СтатусыПересчетовТоваров - значение перечисления.
//
Функция СтатусПересчетаТоваров(СтатусЗаданияWS)
	
	СтатусЗаданияОбъект = Метаданные.Перечисления.СтатусыПересчетовТоваров.ЗначенияПеречисления.Найти(
		СтатусЗаданияWS);
	
	Если СтатусЗаданияОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.СтатусыПересчетовТоваров.ЗначенияПеречисления.Индекс(
			СтатусЗаданияОбъект);
		СтатусЗадания = Перечисления.СтатусыПересчетовТоваров.Получить(ИндексЗначения);
	Иначе
		СтатусЗадания = Перечисления.СтатусыПересчетовТоваров.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатусЗадания;
	
КонецФункции

// Возвращает значение перечисления "СтатусыПриходныхОрдеров".
//
// Параметры:
//	СтатусЗаданияWS - ЗначениеXDTO - СтатусыПриходныхОрдеров XDTO-пакета 
//		WMSMobileClientExchange - статус документа "Приходный ордер на товары".
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.СтатусыПриходныхОрдеров - значение перечисления.
//
Функция СтатусПриходногоОрдераНаТовары(СтатусЗаданияWS)
	
	СтатусЗаданияОбъект = Метаданные.Перечисления.СтатусыПриходныхОрдеров.ЗначенияПеречисления.Найти(
		СтатусЗаданияWS);
	
	Если СтатусЗаданияОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.СтатусыПриходныхОрдеров.ЗначенияПеречисления.Индекс(
			СтатусЗаданияОбъект);
		СтатусЗадания = Перечисления.СтатусыПриходныхОрдеров.Получить(ИндексЗначения);
	Иначе
		СтатусЗадания = Перечисления.СтатусыПриходныхОрдеров.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатусЗадания;
	
КонецФункции

// Возвращает значение перечисления "СтатусыРасходныхОрдеров".
//
// Параметры:
//	СтатусЗаданияWS - ЗначениеXDTO - СтатусыРасходныхОрдеров XDTO-пакета 
//		WMSMobileClientExchange - статус документа "Расходный ордер на товары".
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.СтатусыРасходныхОрдеров - значение перечисления.
//
Функция СтатусРасходногоОрдера(СтатусЗаданияWS)
	
	СтатусЗаданияОбъект = Метаданные.Перечисления.СтатусыРасходныхОрдеров.ЗначенияПеречисления.Найти(
		СтатусЗаданияWS);
	
	Если СтатусЗаданияОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.СтатусыРасходныхОрдеров.ЗначенияПеречисления.Индекс(
			СтатусЗаданияОбъект);
		СтатусЗадания = Перечисления.СтатусыРасходныхОрдеров.Получить(ИндексЗначения);
	Иначе
		СтатусЗадания = Перечисления.СтатусыРасходныхОрдеров.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СтатусЗадания;
	
КонецФункции

// Возвращает значение перечисления "ТипыИзмеряемыхВеличин".
//
// Параметры:
//	ТипИзмеряемойВеличиныWS - ЗначениеXDTO - ТипыИзмеряемыхВеличин XDTO-пакета 
//		WMSMobileClientExchange - тип измеряемой величины единицы измерения.
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.ТипыИзмеряемыхВеличин - значение перечисления.
//
Функция ТипИзмеряемойВеличины(ТипИзмеряемойВеличиныWS)
	
	ТипИзмеряемойВеличиныОбъект = Метаданные.Перечисления.ТипыИзмеряемыхВеличин.ЗначенияПеречисления.Найти(
		ТипИзмеряемойВеличиныWS);
	
	Если ТипИзмеряемойВеличиныОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.ТипыИзмеряемыхВеличин.ЗначенияПеречисления.Индекс(
			ТипИзмеряемойВеличиныОбъект);
		ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.Получить(ИндексЗначения);
	Иначе
		ТипИзмеряемойВеличины = Перечисления.ТипыИзмеряемыхВеличин.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТипИзмеряемойВеличины;
	
КонецФункции

// Возвращает значение перечисления "ТипыНоменклатуры".
//
// Параметры:
//	ТипНоменклатурыWS - ЗначениеXDTO - ТипыНоменклатуры XDTO-пакета WMSMobileClientExchange - тип номенклатуры.
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.ТипыНоменклатуры - значение перечисления.
//
Функция ТипНоменклатуры(ТипНоменклатурыWS)
	
	ТипНоменклатурыОбъект = Метаданные.Перечисления.ТипыНоменклатуры.ЗначенияПеречисления.Найти(
		ТипНоменклатурыWS);
	
	Если ТипНоменклатурыОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.ТипыНоменклатуры.ЗначенияПеречисления.Индекс(ТипНоменклатурыОбъект);
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Получить(ИндексЗначения);
	Иначе
		ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТипНоменклатуры;
	
КонецФункции

// Возвращает значение перечисления "ТипыСкладскихЯчеек".
//
// Параметры:
//	ТипЯчейкиWS - ЗначениеXDTO - ТипыСкладскихЯчеек XDTO-пакета WMSMobileClientExchange - тип ячейки.
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.ТипыСкладскихЯчеек - значение перечисления.
//
Функция ТипСкладскойЯчейки(ТипЯчейкиWS) Экспорт
	
	ТипСкладскойЯчейкиОбъект = Метаданные.Перечисления.ТипыСкладскихЯчеек.ЗначенияПеречисления.Найти(ТипЯчейкиWS);
	
	Если ТипСкладскойЯчейкиОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.ТипыСкладскихЯчеек.ЗначенияПеречисления.Индекс(ТипСкладскойЯчейкиОбъект);
		ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.Получить(ИндексЗначения);
	Иначе
		ТипСкладскойЯчейки = Перечисления.ТипыСкладскихЯчеек.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТипСкладскойЯчейки;
	
КонецФункции

// Возвращает значение перечисления "ТочностьУказанияСрокаГодностиWS".
//
// Параметры:
//	ТочностьУказанияСрокаГодностиWS - ОбъектXDTO 
//
// Возвращаемое значение:
//	 ПеречислениеСсылка.ТочностиУказанияСрокаГодности - ТочностьУказанияСрокаГодностиWS - значение перечисления.
//
Функция ТочностьУказанияСрокаГодности(ТочностьУказанияСрокаГодностиWS)
	
	ТочностьУказанияСрокаГодностиОбъект =
		Метаданные.Перечисления.ТочностиУказанияСрокаГодности.ЗначенияПеречисления.Найти(ТочностьУказанияСрокаГодностиWS);
	
	Если ТочностьУказанияСрокаГодностиОбъект <> Неопределено Тогда
		ИндексЗначения = Метаданные.Перечисления.ТочностиУказанияСрокаГодности.ЗначенияПеречисления.Индекс(
			ТочностьУказанияСрокаГодностиОбъект);
		ТочностьУказанияСрокаГодности = Перечисления.ТочностиУказанияСрокаГодности.Получить(ИндексЗначения);
	Иначе
		ТочностьУказанияСрокаГодности = Перечисления.ТочностиУказанияСрокаГодности.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТочностьУказанияСрокаГодности;
	
КонецФункции

#КонецОбласти

#Область ДесериализацияПеречислений

// Возвращает ЗначениеXDTO 'ДействияСоСтрокамиОрдеровНаОтгрузку' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ДействиеСоСтрокойОрдераНаОтгрузку - ПеречислениеСсылка.ДействияСоСтрокамиОрдеровНаОтгрузку - действие со строками Расходного ордера на товары.
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ДействиеСоСтрокойОрдераНаОтгрузкуWS(ДействиеСоСтрокойОрдераНаОтгрузку, URIИмен)
	
	ДействиеСоСтрокойОрдераНаОтгрузкуТип = ФабрикаXDTO.Тип(URIИмен, "ДействияСоСтрокамиОрдеровНаОтгрузку");
	
	Если ЗначениеЗаполнено(ДействиеСоСтрокойОрдераНаОтгрузку) Тогда
		ИндексЗначения = Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.Индекс(ДействиеСоСтрокойОрдераНаОтгрузку);
		ОбъектМетаданных = 
			Метаданные.Перечисления.ДействияСоСтрокамиОрдеровНаОтгрузку.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		ДействиеСоСтрокойОрдераНаОтгрузкуСтрокой = ОбъектМетаданных.Имя;
	Иначе
		ДействиеСоСтрокойОрдераНаОтгрузкуСтрокой = "";
	КонецЕсли;
	
	ДействиеСоСтрокойОрдераНаОтгрузкуWS = ФабрикаXDTO.Создать(ДействиеСоСтрокойОрдераНаОтгрузкуТип,
		ДействиеСоСтрокойОрдераНаОтгрузкуСтрокой);
	
	Возврат ДействиеСоСтрокойОрдераНаОтгрузкуWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'ПорядокОбработкиСкладскогоЗадания' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ПорядокОбработкиЗадания - ПеречислениеСсылка.ПорядокОбработкиСкладскогоЗадания -порядок обработки складского задания,
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ПорядокОбработкиЗаданияWS(ПорядокОбработкиЗадания, URIИмен)
	
	ПорядокОбработкиЗаданияТип = ФабрикаXDTO.Тип(URIИмен, "ПорядокОбработкиСкладскогоЗадания");
	
	Если ЗначениеЗаполнено(ПорядокОбработкиЗадания) Тогда
		ИндексЗначения = Перечисления.ПорядокОбработкиСкладскогоЗадания.Индекс(ПорядокОбработкиЗадания);
		ОбъектМетаданных = 
			Метаданные.Перечисления.ПорядокОбработкиСкладскогоЗадания.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		ПорядокОбработкиЗаданияСтрокой = ОбъектМетаданных.Имя;
	Иначе
		ПорядокОбработкиЗаданияСтрокой = "";
	КонецЕсли;
	
	ПорядокОбработкиЗаданияWS = ФабрикаXDTO.Создать(ПорядокОбработкиЗаданияТип, ПорядокОбработкиЗаданияСтрокой);
	
	Возврат ПорядокОбработкиЗаданияWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'СтатусыОтборовРазмещенийТоваров' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Статус - ПеречислениеСсылка.СтатусыОтборовРазмещенийТоваров - статус документа 'Отбор (размещение) товаров',
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция СтатусОтбораРазмещенияТоваровWS(Статус, URIИмен)
	
	СтатусТип = ФабрикаXDTO.Тип(URIИмен, "СтатусыОтборовРазмещенийТоваров");
	
	Если ЗначениеЗаполнено(Статус) Тогда
		ИндексЗначения = Перечисления.СтатусыОтборовРазмещенийТоваров.Индекс(Статус);
		ОбъектМетаданных = 
			Метаданные.Перечисления.СтатусыОтборовРазмещенийТоваров.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		СтатусСтрокой = ОбъектМетаданных.Имя;
	Иначе
		СтатусСтрокой = "";
	КонецЕсли;
	
	СтатусWS = ФабрикаXDTO.Создать(СтатусТип, СтатусСтрокой);
	
	Возврат СтатусWS;
	
КонецФункции

// Возвращает ЗначениеXDTO'СтатусыПересчетовТоваров' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Статус - ПеречислениеСсылка.СтатусыПересчетовТоваров - статус документа 'Пересчеты товаров',
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция СтатусПересчетаТоваровWS(Статус, URIИмен)
	
	СтатусТип = ФабрикаXDTO.Тип(URIИмен, "СтатусыПересчетовТоваров");
	
	Если ЗначениеЗаполнено(Статус) Тогда
		ИндексЗначения = Перечисления.СтатусыПересчетовТоваров.Индекс(Статус);
		ОбъектМетаданных = 
			Метаданные.Перечисления.СтатусыПересчетовТоваров.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		СтатусСтрокой = ОбъектМетаданных.Имя;
	Иначе
		СтатусСтрокой = "";
	КонецЕсли;
	
	СтатусWS = ФабрикаXDTO.Создать(СтатусТип, СтатусСтрокой);
	
	Возврат СтатусWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'СтатусыПриходныхОрдеров' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Статус - ПеречислениеСсылка.СтатусыПриходныхОрдеров - статус документа 'Приходный ордер на товары',
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция СтатусПриходногоОрдераWS(Статус, URIИмен)
	
	СтатусТип = ФабрикаXDTO.Тип(URIИмен, "СтатусыПриходныхОрдеров");
	
	Если ЗначениеЗаполнено(Статус) Тогда
		ИндексЗначения = Перечисления.СтатусыПриходныхОрдеров.Индекс(Статус);
		ОбъектМетаданных = 
			Метаданные.Перечисления.СтатусыПриходныхОрдеров.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		СтатусСтрокой = ОбъектМетаданных.Имя;
	Иначе
		СтатусСтрокой = "";
	КонецЕсли;
	
	СтатусWS = ФабрикаXDTO.Создать(СтатусТип, СтатусСтрокой);
	
	Возврат СтатусWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'СтатусыРасходныхОрдеров' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Статус - ПеречислениеСсылка.СтатусыРасходныхОрдеров - статус документа 'Расходный ордер на товары',
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция СтатусРасходногоОрдераWS(Статус, URIИмен)
	
	СтатусТип = ФабрикаXDTO.Тип(URIИмен, "СтатусыРасходныхОрдеров");
	
	Если ЗначениеЗаполнено(Статус) Тогда
		ИндексЗначения = Перечисления.СтатусыРасходныхОрдеров.Индекс(Статус);
		ОбъектМетаданных = 
			Метаданные.Перечисления.СтатусыРасходныхОрдеров.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		СтатусСтрокой = ОбъектМетаданных.Имя;
	Иначе
		СтатусСтрокой = "";
	КонецЕсли;
	
	СтатусWS = ФабрикаXDTO.Создать(СтатусТип, СтатусСтрокой);
	
	Возврат СтатусWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'ТипыЗаданий' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ТипЗадания - Строка - тип складского задания,
//	Фабрика - ФабрикаXDTO, Неопределено - ФабрикаXDTO прокси соединения.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - тип складского задания.
//
Функция ТипЗаданияWS(ТипЗадания, Фабрика, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ТипыЗаданийТип = Фабрика.Тип(URIИмен, "ТипыЗаданий");
	ТипЗаданияWS = Фабрика.Создать(ТипыЗаданийТип, ТипЗадания);
	
	Возврат ТипЗаданияWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'ТипыИзмеряемыхВеличин' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ТипИзмеряемойВеличины - ПеречислениеСсылка.ТипыИзмеряемыхВеличин - тип измеряемой величины единицы измерения,
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ТипИзмеряемойВеличиныWS(ТипИзмеряемойВеличины, URIИмен)
	
	ТипИзмеряемойВеличиныТип = ФабрикаXDTO.Тип(URIИмен, "ТипыИзмеряемыхВеличин");
	
	Если ЗначениеЗаполнено(ТипИзмеряемойВеличины) Тогда
		ИндексЗначения = Перечисления.ТипыИзмеряемыхВеличин.Индекс(ТипИзмеряемойВеличины);
		ОбъектМетаданных = 
			Метаданные.Перечисления.ТипыИзмеряемыхВеличин.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		ТипИзмеряемойВеличиныСтрокой = ОбъектМетаданных.Имя;
	Иначе
		ТипИзмеряемойВеличиныСтрокой = "";
	КонецЕсли;
	
	ТипИзмеряемойВеличиныWS = ФабрикаXDTO.Создать(ТипИзмеряемойВеличиныТип, ТипИзмеряемойВеличиныСтрокой);
	
	Возврат ТипИзмеряемойВеличиныWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'ТипыНоменклатуры' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры - тип номенклатуры,
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ТипНоменклатурыWS(ТипНоменклатуры, URIИмен)
	
	ТипНоменклатурыТип = ФабрикаXDTO.Тип(URIИмен, "ТипыНоменклатуры");
	
	Если ЗначениеЗаполнено(ТипНоменклатуры) Тогда
		ИндексЗначения = Перечисления.ТипыНоменклатуры.Индекс(ТипНоменклатуры);
		ОбъектМетаданных = 
			Метаданные.Перечисления.ТипыНоменклатуры.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		ТипНоменклатурыСтрокой = ОбъектМетаданных.Имя;
	Иначе
		ТипНоменклатурыСтрокой = "";
	КонецЕсли;
	
	ТипНоменклатурыWS = ФабрикаXDTO.Создать(ТипНоменклатурыТип, ТипНоменклатурыСтрокой);
	
	Возврат ТипНоменклатурыWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'ТипыСкладскихЯчеек' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ТипЯчейки - ПеречислениеСсылка.ТипыСкладскихЯчеек - тип ячейки,
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ТипСкладскойЯчейкиWS(ТипЯчейки, URIИмен) Экспорт
	
	ТипСкладскойЯчейкиТип = ФабрикаXDTO.Тип(URIИмен, "ТипыСкладскихЯчеек");
	
	Если ЗначениеЗаполнено(ТипЯчейки) Тогда
		ИндексЗначения = Перечисления.ТипыСкладскихЯчеек.Индекс(ТипЯчейки);
		ОбъектМетаданных = 
			Метаданные.Перечисления.ТипыСкладскихЯчеек.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		ТипСкладскойЯчейкиСтрокой = ОбъектМетаданных.Имя;
	Иначе
		ТипСкладскойЯчейкиСтрокой = "";
	КонецЕсли;
	
	ТипСкладскойЯчейкиСтрокойWS = ФабрикаXDTO.Создать(ТипСкладскойЯчейкиТип, ТипСкладскойЯчейкиСтрокой);
	
	Возврат ТипСкладскойЯчейкиСтрокойWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'ТочностиУказанияСрокаГодности' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ТочностьУказанияСрокаГодности - ОбъектXDTO,Неопределено
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange*.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ТочностьУказанияСрокаГодностиWS(ТочностьУказанияСрокаГодности, URIИмен)
	
	ТочностьУказанияСрокаГодностиТип = ФабрикаXDTO.Тип(URIИмен, "ТочностиУказанияСрокаГодности");
	
	Если ЗначениеЗаполнено(ТочностьУказанияСрокаГодности) Тогда
		ИндексЗначения = Перечисления.ТочностиУказанияСрокаГодности.Индекс(ТочностьУказанияСрокаГодности);
		ОбъектМетаданных = 
			Метаданные.Перечисления.ТочностиУказанияСрокаГодности.ЗначенияПеречисления.Получить(ИндексЗначения); // ОбъектМетаданныхПеречисление
		ТочностьУказанияСрокаГодностиСтрокой = ОбъектМетаданных.Имя;
	Иначе
		ТочностьУказанияСрокаГодностиСтрокой = "";
	КонецЕсли;
	
	ТочностьУказанияСрокаГодностиWS = ФабрикаXDTO.Создать(ТочностьУказанияСрокаГодностиТип,
		ТочностьУказанияСрокаГодностиСтрокой);
	
	Возврат ТочностьУказанияСрокаГодностиWS;
	
КонецФункции

#КонецОбласти

#Область СериализацияПростыхОбъектов

// Возвращает ЗначениеXDTO 'ВидыНоменклатуры' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ВидНоменклатурыWS(СтрокаТоваров, Фабрика, URIИмен)
	
	СтруктураВидаНоменклатуры = СтруктураВидаНоменклатуры();
	
	СтруктураВидаНоменклатуры.Ссылка = СокрЛП(СтрокаТоваров.ВидНоменклатуры.УникальныйИдентификатор());
	СтруктураВидаНоменклатуры.Наименование = "";
	
	СтруктураВидаНоменклатуры.ТипНоменклатуры = ТипНоменклатурыWS(СтрокаТоваров.ТипНоменклатуры, URIИмен);
	СтруктураВидаНоменклатуры.ТочностьУказанияСрокаГодностиСерии = 
		ТочностьУказанияСрокаГодностиWS(СтрокаТоваров.ТочностьУказанияСрокаГодностиСерии, URIИмен);
	
	ИсключаемыеСвойства = "ТипНоменклатуры, ТочностьУказанияСрокаГодностиСерии";
	ЗаполнитьЗначенияСвойств(СтруктураВидаНоменклатуры, СтрокаТоваров, , ИсключаемыеСвойства);
	
	ВидНоменклатурыТип = Фабрика.Тип(URIИмен, "ВидыНоменклатуры");
	ВидНоменклатурыWS = Фабрика.Создать(ВидНоменклатурыТип);
	
	ЗаполнитьЗначенияСвойств(ВидНоменклатурыWS, СтруктураВидаНоменклатуры);
	
	Возврат ВидНоменклатурыWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'ЕдиницыИзмерения' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	НаименованиеРеквизита - Строка - наименование вида единицы измерения,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ЕдиницаИзмеренияWS(СтрокаТоваров, НаименованиеРеквизита, Фабрика, URIИмен)
	
	ТипИзмеряемойВеличины = Неопределено;
	СтруктураЕдиницыИзмерения = СтруктураЕдиницыИзмерения();
	
	Если НаименованиеРеквизита = "ЕдиницаИзмерения" Тогда
		ЕдиницаИзмерения = СтрокаТоваров.ЕдиницаИзмерения;
		Наименование = СтрокаТоваров.НаименованиеЕдиницыИзмерения;
		
		Если СтрокаТоваров.Владелец().Колонки.Найти("ТипИзмеряемойВеличины") <> Неопределено Тогда
			ТипИзмеряемойВеличины = СтрокаТоваров.ТипИзмеряемойВеличины;
		КонецЕсли;
	Иначе
		
		Если НаименованиеРеквизита = "ЕдиницаИзмеренияВеса" Тогда
			ЕдиницаИзмерения = СтрокаТоваров.ЕдиницаИзмеренияВеса;
			Наименование = СтрокаТоваров.НаименованиеЕдиницыИзмеренияВеса;
		Иначе
			ЕдиницаИзмерения = СтрокаТоваров.ЕдиницаИзмеренияОбъема;
			Наименование = СтрокаТоваров.НаименованиеЕдиницыИзмеренияОбъема;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЕдиницыИзмерения.Ссылка = СокрЛП(ЕдиницаИзмерения.УникальныйИдентификатор());
	СтруктураЕдиницыИзмерения.Наименование = СокрЛП(Наименование);
	
	Если ТипИзмеряемойВеличины <> Неопределено Тогда
		СтруктураЕдиницыИзмерения.ТипИзмеряемойВеличины = ТипИзмеряемойВеличиныWS(ТипИзмеряемойВеличины, URIИмен);
	КонецЕсли;
	
	ЕдиницаИзмеренияТип = Фабрика.Тип(URIИмен, "ЕдиницыИзмерения");
	ЕдиницаИзмеренияWS = Фабрика.Создать(ЕдиницаИзмеренияТип);
	
	ЗаполнитьЗначенияСвойств(ЕдиницаИзмеренияWS, СтруктураЕдиницыИзмерения);
	
	Возврат ЕдиницаИзмеренияWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'СкладскиеЯчейки' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ОбластьХранения - СправочникСсылка.СкладскиеЯчейки - зона приемки (отгрузки) товаров,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ОбластьХраненияWS(ОбластьХранения, Фабрика, URIИмен) Экспорт
	
	ОбластьХраненияТип = Фабрика.Тип(URIИмен, "СкладскиеЯчейки");
	ОбластьХраненияWS = Фабрика.Создать(ОбластьХраненияТип);
	
	ОбластьХраненияWS.Ссылка = СокрЛП(ОбластьХранения.УникальныйИдентификатор());
	ОбластьХраненияWS.Код = СокрЛП(ЗначениеРеквизита(ОбластьХранения, "Код"));
	
	ОбластьХраненияWS.ТипСкладскойЯчейки = ТипСкладскойЯчейкиWS(ЗначениеРеквизита(ОбластьХранения,
		"ТипСкладскойЯчейки"), URIИмен);
	ОбластьХраненияWS.Штрихкод = ШтрихкодированиеПечатныхФорм.ЧисловойКодПоСсылке(ОбластьХранения);
	
	Возврат ОбластьХраненияWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'Назначения' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция НазначениеWS(СтрокаТоваров, Фабрика, URIИмен)
	
	СтруктураНазначения = СтруктураСправочника();
	
	СтруктураНазначения.Ссылка = СокрЛП(СтрокаТоваров.Назначение.УникальныйИдентификатор());
	СтруктураНазначения.Наименование = СокрЛП(СтрокаТоваров.НаименованиеНазначения);
	
	НазначениеТип = Фабрика.Тип(URIИмен, "Назначения");
	Назначение = Фабрика.Создать(НазначениеТип);
	
	ЗаполнитьЗначенияСвойств(Назначение, СтруктураНазначения);
	
	Возврат Назначение;
	
КонецФункции

// Возвращает ЗначениеXDTO 'Номенклатура' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция НоменклатураWS(СтрокаТоваров, Фабрика, URIИмен)
	
	СтруктураНоменклатуры = СтруктураНоменклатуры();
	
	СтруктураНоменклатуры.Ссылка = СокрЛП(СтрокаТоваров.Номенклатура.УникальныйИдентификатор());
	СтруктураНоменклатуры.Наименование = СокрЛП(СтрокаТоваров.НаименованиеНоменклатуры);
	
	Если СтрокаТоваров.Владелец().Колонки.Найти("АртикулНоменклатуры") <> Неопределено Тогда
		СтруктураНоменклатуры.Артикул = СокрЛП(СтрокаТоваров.АртикулНоменклатуры);
		СтруктураНоменклатуры.Описание = СокрЛП(СтрокаТоваров.ОписаниеНоменклатуры);
	КонецЕсли;
	
	Если СтрокаТоваров.Владелец().Колонки.Найти("ВидНоменклатуры") <> Неопределено Тогда
		Если ЗначениеЗаполнено(СтрокаТоваров.ВидНоменклатуры) Тогда
			СтруктураНоменклатуры.ВидНоменклатуры = ВидНоменклатурыWS(СтрокаТоваров, Фабрика, URIИмен);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНоменклатуры.ЕдиницаИзмерения = ЕдиницаИзмеренияWS(СтрокаТоваров, "ЕдиницаИзмерения",
		Фабрика, URIИмен);
	
	Если СтрокаТоваров.Владелец().Колонки.Найти("ЕдиницаИзмеренияВеса") <> Неопределено Тогда
		СтруктураНоменклатуры.ЕдиницаИзмеренияВеса = ЕдиницаИзмеренияWS(СтрокаТоваров, "ЕдиницаИзмеренияВеса",
			Фабрика, URIИмен);
		
		СтруктураНоменклатуры.ЕдиницаИзмеренияОбъема = ЕдиницаИзмеренияWS(СтрокаТоваров, "ЕдиницаИзмеренияОбъема",
			Фабрика, URIИмен);
	КонецЕсли;
	
	Если СтрокаТоваров.Владелец().Колонки.Найти("ШтрихкодНоменклатуры") <> Неопределено Тогда
		СтруктураНоменклатуры.Штрихкод = СтрокаТоваров.ШтрихкодНоменклатуры;
	КонецЕсли;
	
	НоменклатураТип = Фабрика.Тип(URIИмен, "Номенклатура");
	НоменклатураWS = Фабрика.Создать(НоменклатураТип);
	
	ЗаполнитьЗначенияСвойств(НоменклатураWS, СтруктураНоменклатуры);
	
	Возврат НоменклатураWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'Пользователи' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Пользователь - СправочникСсылка.Пользователи - исполнитель складского задания,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	 ЗначениеXDTO.
//
Функция ПользовательWS(Пользователь, Фабрика, URIИмен)
	
	ПользовательТип = Фабрика.Тип(URIИмен, "Пользователи");
	ПользовательWS = Фабрика.Создать(ПользовательТип);
	
	ПользовательWS.Ссылка = СокрЛП(Пользователь.УникальныйИдентификатор());
	ПользовательWS.Наименование = СокрЛП(ЗначениеРеквизита(Пользователь, "Представление"));
	
	Возврат ПользовательWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'Помещения' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Помещение - СправочникСсылка.СкладскиеПомещения - складское помещение,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ПомещениеWS(Помещение, Фабрика, URIИмен)
	
	ПомещениеТип = Фабрика.Тип(URIИмен, "Помещения");
	ПомещениеWS = Фабрика.Создать(ПомещениеТип);
	
	ПомещениеWS.Ссылка = СокрЛП(Помещение.УникальныйИдентификатор());
	ПомещениеWS.Наименование = СокрЛП(ЗначениеРеквизита(Помещение, "Представление"));
	
	Возврат ПомещениеWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'СерииНоменклатуры' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция СерияНоменклатурыWS(СтрокаТоваров, Фабрика, URIИмен)
	
	СтруктураСерии = СтруктураСерииНоменклатуры();
	
	СтруктураСерии.Ссылка = СокрЛП(СтрокаТоваров.Серия.УникальныйИдентификатор());
	СтруктураСерии.Наименование = СокрЛП(СтрокаТоваров.НаименованиеСерии);
	
	Если СтрокаТоваров.Владелец().Колонки.Найти("НомерСерии") <> Неопределено Тогда
		СтруктураСерии.Номер = СокрЛП(СтрокаТоваров.НомерСерии);
		СтруктураСерии.ГоденДо = СтрокаТоваров.ГоденДо;
	КонецЕсли;
	
	СерияТип = Фабрика.Тип(URIИмен, "СерииНоменклатуры");
	СерияWS = Фабрика.Создать(СерияТип);
	
	ЗаполнитьЗначенияСвойств(СерияWS, СтруктураСерии);
	
	Возврат СерияWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'Склады' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Склад - СправочникСсылка.Склады - склад,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция СкладWS(Склад, Фабрика, URIИмен)
	
	СкладТип = Фабрика.Тип(URIИмен, "Склады");
	СкладWS = Фабрика.Создать(СкладТип);
	
	СкладWS.Ссылка = СокрЛП(Склад.УникальныйИдентификатор());
	СкладWS.Наименование = СокрЛП(ЗначениеРеквизита(Склад, "Представление"));
	
	Возврат СкладWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'СкладскиеЯчейки' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	СправочникСсылка.СкладскиеЯчейки - ЗначениеXDTO.
//
Функция СкладскаяЯчейкаWS(СтрокаТоваров, Фабрика, URIИмен)
	
	СтруктураЯчейки = СтруктураСкладскойЯчейки();
	
	СтруктураЯчейки.Ссылка = СокрЛП(СтрокаТоваров.Ячейка.УникальныйИдентификатор());
	СтруктураЯчейки.Код = СокрЛП(СтрокаТоваров.КодЯчейки);
	СтруктураЯчейки.Штрихкод = СтрокаТоваров.ШтрихкодЯчейки;
	
	ЯчейкаТип = Фабрика.Тип(URIИмен, "СкладскиеЯчейки");
	ЯчейкаWS = Фабрика.Создать(ЯчейкаТип);
	
	ЗаполнитьЗначенияСвойств(ЯчейкаWS, СтруктураЯчейки, , "ТипСкладскойЯчейки");
	
	Возврат ЯчейкаWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'ХарактеристикиНоменклатуры' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция ХарактеристикаНоменклатурыWS(СтрокаТоваров, Фабрика, URIИмен)
	
	СтруктураХарактеристики = СтруктураСправочника();
	
	СтруктураХарактеристики.Ссылка = СокрЛП(СтрокаТоваров.Характеристика.УникальныйИдентификатор());
	СтруктураХарактеристики.Наименование = СокрЛП(СтрокаТоваров.НаименованиеХарактеристики);
	
	ХарактеристикаТип = Фабрика.Тип(URIИмен, "ХарактеристикиНоменклатуры");
	ХарактеристикаWS = Фабрика.Создать(ХарактеристикаТип);
	
	ЗаполнитьЗначенияСвойств(ХарактеристикаWS, СтруктураХарактеристики);
	
	Возврат ХарактеристикаWS;
	
КонецФункции

// Возвращает ЗначениеXDTO 'УпаковкиНоменклатуры' XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	Фабрика - ФабрикаXDTO
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	ЗначениеXDTO.
//
Функция УпаковкаНоменклатурыWS(СтрокаТоваров, Фабрика, URIИмен)
	
	СтруктураУпаковки = СтруктураУпаковкиНоменклатуры();
	
	СтруктураУпаковки.Ссылка = СокрЛП(СтрокаТоваров.Упаковка.УникальныйИдентификатор());
	СтруктураУпаковки.Наименование = СокрЛП(СтрокаТоваров.НаименованиеУпаковки);
	
	Если СтрокаТоваров.Владелец().Колонки.Найти("ВесУпаковки") <> Неопределено Тогда
		СтруктураУпаковки.Вес = СтрокаТоваров.ВесУпаковки;
		СтруктураУпаковки.Объем = СтрокаТоваров.ОбъемУпаковки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураУпаковки, СтрокаТоваров);
	
	УпаковкаТип = Фабрика.Тип(URIИмен, "УпаковкиНоменклатуры");
	УпаковкаWS = Фабрика.Создать(УпаковкаТип);
	
	ЗаполнитьЗначенияСвойств(УпаковкаWS, СтруктураУпаковки);
	
	Возврат УпаковкаWS;
	
КонецФункции

#КонецОбласти

#Область ДесериализацииПростыхОбъектов

// Заполняет "НеотгружаемыеТовары" данными номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	НоменклатураWS - ЗначениеXDTO - Номенклатура XDTO-пакета WMSMobileClientExchange - данные номенклатуры.
//
Процедура ЗаполнитьНоменклатуруНеотгружаемыхТоваров(СтрокаТоваров, НоменклатураWS)
	
	Если НоменклатураWS <> Неопределено Тогда
		СтрокаТоваров.Номенклатура = СсылкаСправочника(НоменклатураWS.Ссылка, "Номенклатура");
		СтрокаТоваров.НаименованиеНоменклатуры = НоменклатураWS.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку таблицы значений данными вида номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	ВидНоменклатурыWS - ОбъектXDTO - 
//				ВидыНоменклатуры XDTO-пакета WMSMobileClientExchange - данные вида номенклатуры.
//
Процедура ЗаполнитьВидНоменклатурыСкладскогоЗадания(СтрокаТоваров, ВидНоменклатурыWS)
	
	Если ВидНоменклатурыWS <> Неопределено Тогда
		
		СтрокаТоваров.ВидНоменклатуры = СсылкаСправочника(ВидНоменклатурыWS.Ссылка, "ВидыНоменклатуры");
		СтрокаТоваров.ТипНоменклатуры = ТипНоменклатуры(ВидНоменклатурыWS.ТипНоменклатуры);
		СтрокаТоваров.ТочностьУказанияСрокаГодностиСерии = ТочностьУказанияСрокаГодности(
			ВидНоменклатурыWS.ТочностьУказанияСрокаГодностиСерии);
		
		ИсключаемыеСвойства = "ТипНоменклатуры, ТочностьУказанияСрокаГодностиСерии";
		
		ЗаполнитьЗначенияСвойств(СтрокаТоваров, ВидНоменклатурыWS, , ИсключаемыеСвойства);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку таблицы значений данными единицы измерения.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	ЕдиницаИзмеренияWS - ОбъектXDTO - 
//					ЕдиницыИзмерения XDTO-пакета WMSMobileClientExchange - данные единицы измерения,
//	ВидЕдиницыИзмерения - Строка - вид единицы измерения.
//
Процедура ЗаполнитьЕдиницуИзмеренияСкладскогоЗадания(СтрокаТоваров, ЕдиницаИзмеренияWS, ВидЕдиницыИзмерения)
	
	Если ЕдиницаИзмеренияWS <> Неопределено Тогда
		
		Если ВидЕдиницыИзмерения = "ЕдиницаИзмерения" Тогда
			СтрокаТоваров.ЕдиницаИзмерения = СсылкаСправочника(ЕдиницаИзмеренияWS.Ссылка, "УпаковкиЕдиницыИзмерения");
			СтрокаТоваров.НаименованиеЕдиницыИзмерения = ЕдиницаИзмеренияWS.Наименование;
			
			Если СтрокаТоваров.Владелец().Колонки.Найти("ТипИзмеряемойВеличины") <> Неопределено Тогда
				СтрокаТоваров.ТипИзмеряемойВеличины = ТипИзмеряемойВеличины(ЕдиницаИзмеренияWS.ТипИзмеряемойВеличины);
			КонецЕсли;
		ИначеЕсли ВидЕдиницыИзмерения = "ЕдиницаИзмеренияВеса" Тогда
			СтрокаТоваров.ЕдиницаИзмеренияВеса = СсылкаСправочника(ЕдиницаИзмеренияWS.Ссылка, "УпаковкиЕдиницыИзмерения");
			СтрокаТоваров.НаименованиеЕдиницыИзмеренияВеса = ЕдиницаИзмеренияWS.Наименование;
		ИначеЕсли ВидЕдиницыИзмерения = "ЕдиницаИзмеренияОбъема" Тогда
			СтрокаТоваров.ЕдиницаИзмеренияОбъема = СсылкаСправочника(ЕдиницаИзмеренияWS.Ссылка, "УпаковкиЕдиницыИзмерения");
			СтрокаТоваров.НаименованиеЕдиницыИзмеренияОбъема = ЕдиницаИзмеренияWS.Наименование;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку таблицы значений данными назначения номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	НазначениеWS - ЗначениеXDTO - Назначения XDTO-пакета WMSMobileClientExchange - данные назначения номенклатуры.
//
Процедура ЗаполнитьНазначениеСкладскогоЗадания(СтрокаТоваров, НазначениеWS)
	
	Если НазначениеWS <> Неопределено Тогда
		СтрокаТоваров.Назначение = СсылкаСправочника(НазначениеWS.Ссылка, "Назначения");
		СтрокаТоваров.НаименованиеНазначения = НазначениеWS.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку таблицы значений данными номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	НоменклатураWS - ОбъектXDTO - 
//				Номенклатура XDTO-пакета WMSMobileClientExchange - данные номенклатуры.
//
Процедура ЗаполнитьНоменклатуруСкладскогоЗадания(СтрокаТоваров, НоменклатураWS)
	
	Если НоменклатураWS <> Неопределено Тогда
		СтрокаТоваров.Номенклатура = СсылкаСправочника(НоменклатураWS.Ссылка, "Номенклатура");
		СтрокаТоваров.НаименованиеНоменклатуры = НоменклатураWS.Наименование;
		СтрокаТоваров.АртикулНоменклатуры = НоменклатураWS.Артикул;
		СтрокаТоваров.ОписаниеНоменклатуры = НоменклатураWS.Описание;
		
		Если СтрокаТоваров.Владелец().Колонки.Найти("ШтрихкодНоменклатуры") <> Неопределено Тогда
			СтрокаТоваров.ШтрихкодНоменклатуры = НоменклатураWS.Штрихкод;
		КонецЕсли;
		
		ЗаполнитьВидНоменклатурыСкладскогоЗадания(СтрокаТоваров, НоменклатураWS.ВидНоменклатуры);
		ЗаполнитьЕдиницуИзмеренияСкладскогоЗадания(СтрокаТоваров, НоменклатураWS.ЕдиницаИзмерения, "ЕдиницаИзмерения");
		ЗаполнитьЕдиницуИзмеренияСкладскогоЗадания(СтрокаТоваров, НоменклатураWS.ЕдиницаИзмеренияВеса,
			"ЕдиницаИзмеренияВеса");
		ЗаполнитьЕдиницуИзмеренияСкладскогоЗадания(СтрокаТоваров, НоменклатураWS.ЕдиницаИзмеренияОбъема,
			"ЕдиницаИзмеренияОбъема");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу 'ЗоныПриемкиОтгрузки' данными складских ячеек.
//
// Параметры:
//	СтрокаТаблицы - ТаблицаЗначений,
//	ЯчейкаWS - ОбъектXDTO - 
//					СкладскиеЯчейки XDTO-пакета WMSMobileClientExchange - данные ячейки.
//
Процедура ЗаполнитьПараметрыОбластиХранения(СтрокаТаблицы, ЯчейкаWS)
	
	СтрокаТаблицы.Ячейка = СсылкаСправочника(ЯчейкаWS.Ссылка, "СкладскиеЯчейки");
	СтрокаТаблицы.КодЯчейки = ЯчейкаWS.Код;
	СтрокаТаблицы.ТипЯчейки = ТипСкладскойЯчейки(ЯчейкаWS.ТипСкладскойЯчейки);
	
КонецПроцедуры

// Заполняет таблицу 'ЗоныПриемкиОтгрузки' данными склада.
//
// Параметры:
//	СтрокаТаблицы - ТаблицаЗначений,
//	СкладWS - ЗначениеXDTO - Склады XDTO-пакета WMSMobileClientExchange - данные склада.
//
Процедура ЗаполнитьПараметрыСклада(СтрокаТаблицы, СкладWS)
	
	СтрокаТаблицы.Склад = СсылкаСправочника(СкладWS.Ссылка, "Склады");
	СтрокаТаблицы.НаименованиеСклада = СкладWS.Наименование;
	
КонецПроцедуры

// Заполняет строку таблицы значений данными характеристики номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	ЯчейкаWS - ЗначениеXDTO - СкладскиеЯчейки XDTO-пакета WMSMobileClientExchange - данные ячейки.
//
Процедура ЗаполнитьПараметрыЯчейки(СтрокаТоваров, ЯчейкаWS)
	
	Если ЯчейкаWS <> Неопределено Тогда
		СтрокаТоваров.Ячейка = СсылкаСправочника(ЯчейкаWS.Ссылка, "СкладскиеЯчейки");
		СтрокаТоваров.КодЯчейки = ЯчейкаWS.Код;
		СтрокаТоваров.ШтрихкодЯчейки = ЯчейкаWS.Штрихкод;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет "НеотгружаемыеТовары" данными серии номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	СерияWS - ЗначениеXDTO - СерииНоменклатуры XDTO-пакета WMSMobileClientExchange - данные серии номенклатуры.
//
Процедура ЗаполнитьСериюНеотгружаемыхТоваров(СтрокаТоваров, СерияWS)
	
	Если СерияWS <> Неопределено Тогда
		СтрокаТоваров.Серия = СсылкаСправочника(СерияWS.Ссылка, "СерииНоменклатуры");
		СтрокаТоваров.НаименованиеСерии = СерияWS.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку таблицы значений данными серии номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	СерияWS - ЗначениеXDTO - СерииНоменклатуры XDTO-пакета WMSMobileClientExchange - данные серии номенклатуры,
//	ИспользоватьПараметрыСерии - Булево - Истина, используются дополнительные параметры серии.
//
Процедура ЗаполнитьСериюСкладскогоЗадания(СтрокаТоваров, СерияWS, ИспользоватьПараметрыСерии = Ложь)
	
	Если СерияWS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СерияWS.Ссылка <> Неопределено Тогда
		СтрокаТоваров.Серия = СсылкаСправочника(СерияWS.Ссылка, "СерииНоменклатуры");
		СтрокаТоваров.НаименованиеСерии = СерияWS.Наименование;
	КонецЕсли;
	
	Если ИспользоватьПараметрыСерии Тогда
		СтрокаТоваров.НомерСерии = СерияWS.Номер;
		СтрокаТоваров.ГоденДо = СерияWS.ГоденДо;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет "НеотгружаемыеТовары" данными упаковки номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	УпаковкаWS - ЗначениеXDTO - УпаковкиНоменклатуры XDTO-пакета WMSMobileClientExchange - данные упаковки номенклатуры.
//
Процедура ЗаполнитьУпаковкуНеотгружаемыхТоваров(СтрокаТоваров, УпаковкаWS)
	
	Если УпаковкаWS <> Неопределено Тогда
		СтрокаТоваров.Упаковка = СсылкаСправочника(УпаковкаWS.Ссылка, "УпаковкиЕдиницыИзмерения");
		СтрокаТоваров.НаименованиеУпаковки = УпаковкаWS.Наименование;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет строку таблицы значений данными упаковки номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	УпаковкаWS - ЗначениеXDTO - УпаковкиНоменклатуры XDTO-пакета WMSMobileClientExchange - данные упаковки номенклатуры.
//
Процедура ЗаполнитьУпаковкуСкладскогоЗадания(СтрокаТоваров, УпаковкаWS)
	
	Если УпаковкаWS = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УпаковкаWS.Ссылка <> Неопределено Тогда
		СтрокаТоваров.Упаковка = СсылкаСправочника(УпаковкаWS.Ссылка, "УпаковкиЕдиницыИзмерения");
		СтрокаТоваров.НаименованиеУпаковки = УпаковкаWS.Наименование;
	КонецЕсли;
	
	СтрокаТоваров.ВесУпаковки = УпаковкаWS.Вес;
	СтрокаТоваров.ОбъемУпаковки = УпаковкаWS.Объем;
	
	ЗаполнитьЗначенияСвойств(СтрокаТоваров, УпаковкаWS);
	
КонецПроцедуры

// Заполняет строку таблицы значений данными характеристики номенклатуры.
//
// Параметры:
//	СтрокаТоваров - СтрокаТаблицыЗначений,
//	ХарактеристикаWS - ЗначениеXDTO - ХарактеристикиНоменклатуры XDTO-пакета WMSMobileClientExchange - данные характеристики номенклатуры.
//
Процедура ЗаполнитьХарактеристикуСкладскогоЗадания(СтрокаТоваров, ХарактеристикаWS)
	
	Если ХарактеристикаWS <> Неопределено Тогда
		СтрокаТоваров.Характеристика = СсылкаСправочника(ХарактеристикаWS.Ссылка, "ХарактеристикиНоменклатуры");
		СтрокаТоваров.НаименованиеХарактеристики = ХарактеристикаWS.Наименование;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СериализацииТаблиц

// Возвращает таблицу 'СписокЯчеек', заполненную данными складских ячеек.
//
// Параметры:
//	ЗоныПриемкиОтгрузки - ТаблицаЗначений - таблица складских ячеек.
//
// Возвращаемое значение:
//	ЗначениеXDTO - СписокЯчеек XDTO-пакета WMSMobileClientExchange.
//
Функция ЗоныПриемкиОтгрузкиXDTO(ЗоныПриемкиОтгрузки, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	СписокЯчеекТип = ФабрикаXDTO.Тип(URIИмен, "СписокЯчеек");
	СтрокаСпискаЯчеекТип = ФабрикаXDTO.Тип(URIИмен, "СписокЯчеекСтрока");
	
	ЗоныПриемкиОтгрузкиWS = ФабрикаXDTO.Создать(СписокЯчеекТип);
	
	Для Каждого СтрокаСпискаЯчеек Из ЗоныПриемкиОтгрузки Цикл
		
		СтруктураСтрокиСпискаЯчеек = СтруктураСтрокиСписокЯчеек();
		СтрокаСпискаЯчеекWS = ФабрикаXDTO.Создать(СтрокаСпискаЯчеекТип);
		
		ЗаполнитьСтрокуСпискаЯчеек(СтруктураСтрокиСпискаЯчеек, СтрокаСпискаЯчеек, URIИмен);
		ЗаполнитьЗначенияСвойств(СтрокаСпискаЯчеекWS, СтруктураСтрокиСпискаЯчеек);
		
		ЗоныПриемкиОтгрузкиWSСтрока = ЗоныПриемкиОтгрузкиWS["Строка"]; // СписокXDTO
		ЗоныПриемкиОтгрузкиWSСтрока.Добавить(СтрокаСпискаЯчеекWS);
		
	КонецЦикла;
	
	Возврат ЗоныПриемкиОтгрузкиWS;
	
КонецФункции

// Возвращает 'ТаблицаНеотгружаемыхТоваров' данными о товарах.
//
// Параметры:
//	Товары - ТаблицаЗначений - таблица неотгружаемых товаров.
//
// Возвращаемое значение:
//	ЗначениеXDTO - ТаблицаНеотгружаемыхТоваров XDTO-пакета WMSMobileClientExchange.
//
Функция НеотгружаемыеТоварыWS(Товары, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ТоварыТип = ФабрикаXDTO.Тип(URIИмен, "ТаблицаНеотгружаемыхТоваров");
	СтрокаТоварыТип = ФабрикаXDTO.Тип(URIИмен, "ТаблицаНеотгружаемыхТоваровСтрока");
	
	НеотгружаемыеТоваровWS = ФабрикаXDTO.Создать(ТоварыТип);
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		СтрокаТоваровWS = ФабрикаXDTO.Создать(СтрокаТоварыТип);
		СтруктураСтрокиТоваров = СтруктураСтрокиНеотгружаемыеТовары();
		
		ЗаполнитьСтрокуНеотгружаемыхТоваров(СтруктураСтрокиТоваров, СтрокаТоваров, ВерсияСервиса);
		ЗаполнитьЗначенияСвойств(СтрокаТоваровWS, СтруктураСтрокиТоваров);
		
		НеотгружаемыеТоваровWSСтрока = НеотгружаемыеТоваровWS["Строка"]; // СписокXDTO
		НеотгружаемыеТоваровWSСтрока.Добавить(СтрокаТоваровWS);
		
	КонецЦикла;
	
	Возврат НеотгружаемыеТоваровWS;
	
КонецФункции

// Возвращает 'ТаблицаОтсканированныхТоваров'.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада,
//	Фабрика - ФабрикаXDTO, Неопределено -
//
// Возвращаемое значение:
//	ЗначениеXDTO - ТаблицаОтсканированныхТоваров XDTO-пакета WMSMobileClientExchange.
//
Функция ОтсканированныеТоварыWS(Форма, Фабрика)
	
	ВерсияСервиса = ВерсияСервисаИзФормы(Форма);
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	ОтсканированныеТовары = ОтсканированныеТоварыСкладскогоЗадания(Форма);
	
	ТоварыТип = Фабрика.Тип(URIИмен, "ТаблицаОтсканированныхТоваров");
	СтрокаТоварыТип = Фабрика.Тип(URIИмен, "ТаблицаОтсканированныхТоваровСтрока");
	
	ОтсканированныеТоварыWS = Фабрика.Создать(ТоварыТип);
	
	Для Каждого СтрокаТоваров Из ОтсканированныеТовары Цикл
		
		СтрокаТоваровWS = Фабрика.Создать(СтрокаТоварыТип);
		СтруктураСтрокиТоваров = СтруктураСтрокиОтсканированныеТовары();
		
		ЗаполнитьСтрокуТоваровСкладскогоЗадания(СтруктураСтрокиТоваров, СтрокаТоваров, Фабрика, ВерсияСервиса);
		ЗаполнитьЗначенияСвойств(СтрокаТоваровWS, СтруктураСтрокиТоваров);
		
		ОтсканированныеТоварыWSСтрока = ОтсканированныеТоварыWS["Строка"]; // СписокXDTO
		ОтсканированныеТоварыWSСтрока.Добавить(СтрокаТоваровWS);
		
	КонецЦикла;
	
	Возврат ОтсканированныеТоварыWS;
	
КонецФункции

// Возвращает 'ТаблицаЗаданий' XDTO-пакета WMSMobileClientExchange, заполненную данными складских заданий.
//
// Параметры:
//	ТаблицаЗаданий - ТаблицаЗначений.
//
// Возвращаемое значение:
//	ЗначениеXDTO - ТаблицаЗаданий XDTO-пакета WMSMobileClientExchange.
//
Функция ТаблицаЗаданийXDTO(ТаблицаЗаданий, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ТаблицаЗаданийТип = ФабрикаXDTO.Тип(URIИмен, "ТаблицаЗаданий");
	СтрокаТаблицыЗаданийТип = ФабрикаXDTO.Тип(URIИмен, "СтрокаТаблицыЗаданий");
	
	ЕстьВес = (ТаблицаЗаданий.Колонки.Найти("Вес") <> Неопределено);
	ЕстьПорядокДоставки = (ТаблицаЗаданий.Колонки.Найти("ПорядокДоставки") <> Неопределено);
	
	ТаблицаЗаданийWS = ФабрикаXDTO.Создать(ТаблицаЗаданийТип);
	
	Для Каждого СтрокаТаблицыЗаданий Из ТаблицаЗаданий Цикл
		
		СтруктураСтрокиТаблицыЗаданий = СтруктураСтрокиТаблицыЗаданий(ЕстьВес, ЕстьПорядокДоставки);
		ЗаполнитьСтрокуТаблицыЗаданий(СтруктураСтрокиТаблицыЗаданий, СтрокаТаблицыЗаданий, URIИмен);
		
		СтрокаТаблицыЗаданийWS = ФабрикаXDTO.Создать(СтрокаТаблицыЗаданийТип);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗаданийWS, СтруктураСтрокиТаблицыЗаданий);
		
		ТаблицаЗаданийWSСтрока = ТаблицаЗаданийWS["Строка"]; // СписокXDTO
		ТаблицаЗаданийWSСтрока.Добавить(СтрокаТаблицыЗаданийWS);
		
	КонецЦикла;
	
	Возврат ТаблицаЗаданийWS;
	
КонецФункции

// Возвращает таблицу товаров складского задания XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	Товары - ТаблицаЗначений - таблица товаров,
//	ТипЗадания - Строка- тип складского задания,
//	ИмяТипаТаблицы - Строка
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - Таблица XDTO-пакета WMSMobileClientExchange.
//
Функция ТоварыСкладскогоЗаданияWS(Товары, ТипЗадания, ИмяТипаТаблицы, Знач ВерсияСервиса)
	
	URIИмен =URIПространстваИмен(ВерсияСервиса);
	
	ТоварыТип = ФабрикаXDTO.Тип(URIИмен, ИмяТипаТаблицы);
	СтрокаТоварыТип = ФабрикаXDTO.Тип(URIИмен, ИмяТипаТаблицы + "Строка");
	
	ТоварыСкладскогоЗаданияWS = ФабрикаXDTO.Создать(ТоварыТип);
	
	Для Каждого СтрокаТоваров Из Товары Цикл
		
		СтрокаТоваровWS = ФабрикаXDTO.Создать(СтрокаТоварыТип);
		
		Если ИмяТипаТаблицы = "ОтборРазмещениеТоваровТоварыОтбор" Тогда
			СтруктураСтрокиТоваров = СтруктураСтрокиТоварыОтбор();
		ИначеЕсли ИмяТипаТаблицы = "ОтборРазмещениеТоваровТоварыРазмещение" Тогда
			СтруктураСтрокиТоваров = СтруктураСтрокиТоварыРазмещение();
		ИначеЕсли ИмяТипаТаблицы = "ПересчетТоваровТовары" Тогда
			СтруктураСтрокиТоваров = СтруктураСтрокиТовары();
		ИначеЕсли ИмяТипаТаблицы = "РасходныйОрдерНаТоварыОтгружаемыеТовары" Тогда
			СтруктураСтрокиТоваров = СтруктураСтрокиОтгружаемыеТовары();
		КонецЕсли;
		
		ЗаполнитьСтрокуТоваровСкладскогоЗадания(СтруктураСтрокиТоваров, СтрокаТоваров, ФабрикаXDTO, ВерсияСервиса);
		ЗаполнитьЗначенияСвойств(СтрокаТоваровWS, СтруктураСтрокиТоваров);
		
		ТоварыСкладскогоЗаданияWSСтрока = ТоварыСкладскогоЗаданияWS["Строка"];	// СписокXDTO
		ТоварыСкладскогоЗаданияWSСтрока.Добавить(СтрокаТоваровWS);
		
	КонецЦикла;
	
	Возврат ТоварыСкладскогоЗаданияWS;
	
КонецФункции

//++ Локализация

Функция МаркировкаВерхнегоУровняWS(Марки, ТипЗадания, Знач ВерсияСервиса)
	
	Если НЕ ЗначениеЗаполнено(Марки) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипЗадания <> "Приемка"
		И ТипЗадания <> "ПроверкаОтбора"
		И ТипЗадания <> "Отбор" Тогда
		Возврат Неопределено;
	КонецЕсли; 

	URIИмен =URIПространстваИмен(ВерсияСервиса);
	
	МаркировкаТип = ФабрикаXDTO.Тип(URIИмен, "ТаблицаМаркировкиВерхнегоУровня");
	
	Если МаркировкаТип = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	МаркировкаВерхнегоУровняWS = ФабрикаXDTO.Создать(МаркировкаТип);
	ЗначенияШтрихкодов = МаркировкаВерхнегоУровняWS.ЗначениеШтрихкода;	// СписокXDTO
	
	Для Каждого Элем Из Марки Цикл
		
		ЗначенияШтрихкодов.Добавить(Элем.ЗначениеШтрихкода);
		
	КонецЦикла;
	
	Возврат МаркировкаВерхнегоУровняWS;

КонецФункции

Функция МаркировкаДетализированнаяWS(Марки, ТипЗадания, Знач ВерсияСервиса)

	Если НЕ ЗначениеЗаполнено(Марки) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипЗадания <> "Приемка"
		И ТипЗадания <> "ПроверкаОтбора"
		И ТипЗадания <> "Отбор" Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ИмяТаблицыМаркировки = "ТаблицаМаркировкиДетализированная";
	МаркировкаТип = ФабрикаXDTO.Тип(URIИмен, ИмяТаблицыМаркировки);
	
	Если МаркировкаТип = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИмяСтрокиМаркировки = "ТаблицаМаркировкиДетализированная"+"Строка";
	МаркировкаСтрокаТип = ФабрикаXDTO.Тип(URIИмен, ИмяСтрокиМаркировки);
	
	МаркировкаДетализированнаяWS = ФабрикаXDTO.Создать(МаркировкаТип);
	МаркировкаДетализированнаяСтрокиWS = МаркировкаДетализированнаяWS.Строка;	//СписокXDTO
	
	ТаблицаРеквизитов = НовыйТаблицаТоваровМаркировки();
	
	Для Каждого ЭлементМарка Из Марки Цикл
		
		СтрокаМаркировкиWS = ФабрикаXDTO.Создать(МаркировкаСтрокаТип);
		
		СтрокаМаркировкиWS.ЗначениеШтрихкода = ЭлементМарка.ЗначениеШтрихкода;
		СтрокаМаркировкиWS.РодительскаяУпаковкаМаркировкиЗначениеШтрихкода = 
			ЭлементМарка.РодительскаяУпаковкаМаркировкиЗначениеШтрихкода;
		СтрокаМаркировкиWS.ТипУпаковкиМаркировки = ТипУпаковкиМаркировкиWS(ЭлементМарка.ТипУпаковкиМаркировки,ВерсияСервиса);
		
		Если ЗначениеЗаполнено(ЭлементМарка.Номенклатура) Тогда
			
			ЛитералНаименование = "Наименование";
			
			СтрокаРеквизитов = ТаблицаРеквизитов.Добавить();	//СтрокаТаблицыЗначений
			КартаРеквизитов = Новый Структура;
			КартаРеквизитов.Вставить("Номенклатура", "Ссылка");
			КартаРеквизитов.Вставить("НаименованиеНоменклатуры", ЛитералНаименование);
			КартаРеквизитов.Вставить("АртикулНоменклатуры", "Артикул");
			КартаРеквизитов.Вставить("ВидНоменклатуры");
			КартаРеквизитов.Вставить("ТипНоменклатуры");
			КартаРеквизитов.Вставить("ЕдиницаИзмерения");
			КартаРеквизитов.Вставить("НаименованиеЕдиницыИзмерения", "ЕдиницаИзмерения.Наименование");
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементМарка.Номенклатура,КартаРеквизитов);	// Структура
			ЗаполнитьЗначенияСвойств(СтрокаРеквизитов, РеквизитыНоменклатуры);
			СтрокаМаркировкиWS.Номенклатура = НоменклатураWS(СтрокаРеквизитов, ФабрикаXDTO, URIИмен);
			
			Если ЗначениеЗаполнено(ЭлементМарка.Характеристика) Тогда
				СтрокаРеквизитов.ХарактеристикаНоменклатуры = ЭлементМарка.Характеристика;
				СтрокаРеквизитов.НаименованиеХарактеристики = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементМарка.Характеристика, ЛитералНаименование);
				СтрокаМаркировкиWS.Характеристика = СерияНоменклатурыWS(СтрокаРеквизитов, ФабрикаXDTO, URIИмен);
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ЭлементМарка.Серия) Тогда
				СтрокаРеквизитов.Серия = ЭлементМарка.Серия;
				СтрокаРеквизитов.НаименованиеСерии = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементМарка.Серия, ЛитералНаименование);
				СтрокаМаркировкиWS.Серия = СерияНоменклатурыWS(СтрокаРеквизитов, ФабрикаXDTO, URIИмен);
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ЭлементМарка.Упаковка) Тогда
				СтрокаРеквизитов.Упаковка = ЭлементМарка.Упаковка;
				СтрокаРеквизитов.НаименованиеУпаковки = 
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементМарка.Упаковка, ЛитералНаименование);
				СтрокаМаркировкиWS.Упаковка = УпаковкаНоменклатурыWS(СтрокаРеквизитов, ФабрикаXDTO, URIИмен);
			КонецЕсли; 
			
		КонецЕсли; 
		СтрокаМаркировкиWS.Количество = ЭлементМарка.Количество;
		
		МаркировкаДетализированнаяСтрокиWS.Добавить(СтрокаМаркировкиWS);
		
	КонецЦикла;
	
	Возврат МаркировкаДетализированнаяWS;

КонецФункции

// Возвращаемое значение:
//	ТаблицаЗначений:
//	*Номенклатура - СправочникСсылка.Номенклатура
//	*НаименованиеНоменклатуры - Строка
//	*ОписаниеНоменклатуры - Строка
//	*АртикулНоменклатуры - Строка
//	*ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//	*ТипыНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
//	*ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения
//	*НаименованиеЕдиницыИзмерения - Строка
//	*ТипИзмеряемойВеличины - ПеречислениеСсылка.ТипыИзмеряемыхВеличин
//	*ХарактеристикаНоменклатуры - СправочникСсылка.ХарактеристикиНоменклатуры
//	*НаименованиеХарактеристики - Строка
//	*Серия - СправочникСсылка.СерииНоменклатуры
//	*ТочностьУказанияСрокаГодностиСерии - ПеречислениеСсылка.ТочностиУказанияСрокаГодности
//	*НаименованиеСерии - Строка
//	*Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//	*НаименованиеУпаковки - Строка
Функция НовыйТаблицаТоваровМаркировки()
	
	ТипСтрокаНаименование = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	ТипСтрокаОписание = ОбщегоНазначения.ОписаниеТипаСтрока(1000);
	ТипЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(12,3);
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаРеквизитов.Колонки.Добавить("НаименованиеНоменклатуры", ТипСтрокаНаименование);
	ТаблицаРеквизитов.Колонки.Добавить("ОписаниеНоменклатуры", ТипСтрокаОписание);
	ТаблицаРеквизитов.Колонки.Добавить("АртикулНоменклатуры", ТипСтрокаНаименование);
	ТаблицаРеквизитов.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	ТаблицаРеквизитов.Колонки.Добавить("ТипНоменклатуры", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"));
	ТаблицаРеквизитов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРеквизитов.Колонки.Добавить("НаименованиеЕдиницыИзмерения", ТипСтрокаНаименование);
	//ТаблицаРеквизитов.Колонки.Добавить("ТипИзмеряемойВеличины", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИзмеряемыхВеличин"));
	ТаблицаРеквизитов.Колонки.Добавить("ХарактеристикаНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаРеквизитов.Колонки.Добавить("НаименованиеХарактеристики", ТипСтрокаНаименование);
	ТаблицаРеквизитов.Колонки.Добавить("Серия", Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ТаблицаРеквизитов.Колонки.Добавить("ТочностьУказанияСрокаГодностиСерии", Новый ОписаниеТипов("ПеречислениеСсылка.ТочностиУказанияСрокаГодности"));
	ТаблицаРеквизитов.Колонки.Добавить("НаименованиеСерии", ТипСтрокаНаименование);
	ТаблицаРеквизитов.Колонки.Добавить("Упаковка", Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаРеквизитов.Колонки.Добавить("НаименованиеУпаковки", ТипСтрокаНаименование);
	ТаблицаРеквизитов.Колонки.Добавить("ВесУпаковки", ТипЧисло);
	ТаблицаРеквизитов.Колонки.Добавить("ОбъемУпаковки", ТипЧисло);
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция ТипУпаковкиМаркировкиWS(Знач ТипУпаковки, Знач ВерсияСервиса)
	
	Если ПустаяСтрока(ВерсияСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПространствоИмен = URIПространстваИмен(ВерсияСервиса);
	ТипXDTO = ФабрикаXDTO.Тип(ПространствоИмен,"ТипыУпаковокМаркировки");
	Если ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		Возврат ФабрикаXDTO.Создать(ТипXDTO, "ЕдиничныйТовар");
	ИначеЕсли ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка") Тогда
		Возврат ФабрикаXDTO.Создать(ТипXDTO, "МонотоварнаяУпаковка");
	ИначеЕсли ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка") Тогда
		Возврат ФабрикаXDTO.Создать(ТипXDTO, "МультитоварнаяУпаковка");
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

Функция РезультатПроверкиМаркировкиWS(Знач ТаблицаРезультата, Знач ВерсияСервиса)
	
	Если ТипЗнч(ТаблицаРезультата) <> Тип("ТаблицаЗначений")
		Или ПустаяСтрока(ВерсияСервиса) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПространствоИмен = URIПространстваИмен(ВерсияСервиса);
	ТипТаблицаПроверкиМарок = ФабрикаXDTO.Тип(ПространствоИмен,"ТаблицаПроверкиМарок");
	ТипРезультатКонтроля = ФабрикаXDTO.Тип(ПространствоИмен,"РезультатыКонтроляМаркировки");
	ТипРезультатКонтроляСтрока = ФабрикаXDTO.Тип(ПространствоИмен,"ТаблицаПроверкиМарокСтрока");
	
	РезультатПроверкиМаркировкиWS = ФабрикаXDTO.Создать(ТипТаблицаПроверкиМарок);

	Для каждого ТекСтрока Из ТаблицаРезультата Цикл
		
		Если ТекСтрока.ЗначениеПринято Тогда
			РезультатКонтроля = ФабрикаXDTO.Создать(ТипРезультатКонтроля, "Корректно");
		ИначеЕсли ТекСтрока.ЭтоВложеннаяУпаковка Тогда
			РезультатКонтроля = ФабрикаXDTO.Создать(ТипРезультатКонтроля, "Вложенная");
		ИначеЕсли ТекСтрока.ЛишниеТовары Тогда
			РезультатКонтроля = ФабрикаXDTO.Создать(ТипРезультатКонтроля, "НеСоответствуетТоварномуСоставу");
		ИначеЕсли ТекСтрока.НетДанных Тогда
			РезультатКонтроля = ФабрикаXDTO.Создать(ТипРезультатКонтроля, "НетДанных");
		КонецЕсли; 
		
		РезультатКонтроляСтрокаWS = ФабрикаXDTO.Создать(ТипРезультатКонтроляСтрока);	//ОбъектXDTO
		
		РезультатКонтроляСтрокаWS.ЗначениеШтрихкода = ТекСтрока.ЗначениеШтрихкода;
		РезультатКонтроляСтрокаWS.ЗначениеПринято = ТекСтрока.ЗначениеПринято;
		РезультатКонтроляСтрокаWS.РезультатКонтроля = РезультатКонтроля;
		
		СтрокаКоллекции = РезультатПроверкиМаркировкиWS.Строка;	// СписокXDTO
		СтрокаКоллекции.Добавить(РезультатКонтроляСтрокаWS);
		
	КонецЦикла;
	
	Возврат РезультатПроверкиМаркировкиWS;
	
КонецФункции // РезультатПроверкиМаркировкиWS()

//-- Локализация

// Возвращает таблицу 'ТоварыЯчейки' XDTO-пакета WMSMobileClientExchange, заполненную данными товаров,
// хранящихся в ячейке.
//
// Параметры:
//	ТоварыЯчейки - ТаблицаЗначений - таблица товаров хранящихся в ячейке.
//	ВерсияСервиса - Строка
//
// Возвращаемое значение:
//	ЗначениеXDTO - ТоварыЯчейки XDTO-пакета WMSMobileClientExchange.
//
Функция ТоварыЯчейкиXDTO(ТоварыЯчейки, Знач ВерсияСервиса)
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	ТоварыЯчейкиТип = ФабрикаXDTO.Тип(URIИмен, "ТоварыЯчейки");
	СтрокаТоварыЯчейкиТип = ФабрикаXDTO.Тип(URIИмен, "ТоварыЯчейкиСтрока");
	
	ТоварыЯчейкиWS = ФабрикаXDTO.Создать(ТоварыЯчейкиТип);
	
	Для Каждого СтрокаТоваровЯчейки Из ТоварыЯчейки Цикл
		
		СтруктураСтрокиТоварыЯчейки = СтруктураСтрокиТоварыЯчейки();
		ЗаполнитьСтрокуТоварыЯчейки(СтруктураСтрокиТоварыЯчейки, СтрокаТоваровЯчейки, ВерсияСервиса);
		
		СтрокаТоварыЯчейкиWS = ФабрикаXDTO.Создать(СтрокаТоварыЯчейкиТип);
		ЗаполнитьЗначенияСвойств(СтрокаТоварыЯчейкиWS, СтруктураСтрокиТоварыЯчейки);
		
		ТоварыЯчейкиWSСтрока = ТоварыЯчейкиWS["Строка"]; // СписокXDTO
		ТоварыЯчейкиWSСтрока.Добавить(СтрокаТоварыЯчейкиWS);
		
	КонецЦикла;
	
	Возврат ТоварыЯчейкиWS;
	
КонецФункции

#КонецОбласти

#Область СериализацииСтрокТаблиц

// Заполняет строку 'ТаблицаНеотгружаемыхТоваров' данными о товарах.
//
// Параметры:
//	СтруктураСтроки - Структура,
//	СтрокаТоваров - СтрокаТаблицыЗначений - данные товара.
//	ВерсияСервиса - Строка
//
Процедура ЗаполнитьСтрокуНеотгружаемыхТоваров(СтруктураСтроки, СтрокаТоваров, ВерсияСервиса)
	
	URIИмен =URIПространстваИмен(ВерсияСервиса);
	
	Если ЗначениеЗаполнено(СтрокаТоваров.Характеристика) Тогда
		СтруктураСтроки.Характеристика = ХарактеристикаНоменклатурыWS(СтрокаТоваров, ФабрикаXDTO, URIИмен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТоваров.Назначение) Тогда
		СтруктураСтроки.Назначение = НазначениеWS(СтрокаТоваров, ФабрикаXDTO, URIИмен);
	КонецЕсли;
	
	СтруктураСтроки.Номенклатура = НоменклатураWS(СтрокаТоваров, ФабрикаXDTO, URIИмен);
	СтруктураСтроки.Упаковка = УпаковкаНоменклатурыWS(СтрокаТоваров, ФабрикаXDTO, URIИмен);
	СтруктураСтроки.Серия = СерияНоменклатурыWS(СтрокаТоваров,ФабрикаXDTO, URIИмен);
	
	ИсключаемыеСвойства = "Номенклатура, Характеристика, Назначение, Упаковка, Серия";
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТоваров, , ИсключаемыеСвойства);
	
КонецПроцедуры

// Заполняет строку 'СписокЯчеек' данными ячеек.
//
// Параметры:
//	СтруктураСтрокиЯчейки - Структура,
//	СтрокаЯчейки - СтрокаТаблицыЗначений - данные ячейки,
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
Процедура ЗаполнитьСтрокуСпискаЯчеек(СтруктураСтрокиЯчейки, СтрокаЯчейки, URIИмен) Экспорт
	
	СтруктураСтрокиЯчейки.Ячейка = ОбластьХраненияWS(СтрокаЯчейки.Ячейка, ФабрикаXDTO, URIИмен);
	СтруктураСтрокиЯчейки.Склад = СкладWS(СтрокаЯчейки.Склад, ФабрикаXDTO, URIИмен);
	
КонецПроцедуры

// Заполняет строку 'ТаблицаЗаданий'.
//
// Параметры:
//	СтруктураСтроки - Структура,
//	СтрокаТаблицы - СтрокаТаблицыЗначений - данные товаров, содержит в том числе:
//		* Ссылка - СправочникСсылка
//	URIИмен - Строка - URIПространстваИмен XDTO-пакета WMSMobileClientExchange.
//
Процедура ЗаполнитьСтрокуТаблицыЗаданий(СтруктураСтроки, СтрокаТаблицы, URIИмен)
	
	СтруктураСтроки.Ссылка = СокрЛП(СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
	СтруктураСтроки.Исполнитель = ПользовательWS(СтрокаТаблицы.Исполнитель, ФабрикаXDTO, URIИмен);
	
	ИсключаемыеСвойства = "Ссылка, Исполнитель";
	
	Если СтруктураСтроки.Свойство("Вес") Тогда
		ИсключаемыеСвойства = ИсключаемыеСвойства + ", " + "ЕдиницаИзмерения";
		СтруктураСтроки.ЕдиницаИзмерения = ЕдиницаИзмеренияWS(СтрокаТаблицы, "ЕдиницаИзмерения",
			ФабрикаXDTO, URIИмен);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицы, , ИсключаемыеСвойства);
	
КонецПроцедуры

// Заполняет строку таблицы товаров XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	СтруктураСтроки - Структура,
//	СтрокаТоваров - СтрокаТаблицыЗначений - данные товаров.
//	Фабрика - ФабрикаXDTO
//
Процедура ЗаполнитьСтрокуТоваровСкладскогоЗадания(СтруктураСтроки, СтрокаТоваров, Фабрика, Знач ВерсияСервиса) Экспорт
	
	ИсключаемыеСвойства = "";
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	Если СтруктураСтроки.Свойство("Действие") Тогда
		СтруктураСтроки.Действие = ДействиеСоСтрокойОрдераНаОтгрузкуWS(СтрокаТоваров.Действие, URIИмен);
		ИсключаемыеСвойства = "Действие";
	КонецЕсли;
	
	Если СтруктураСтроки.Свойство("Ячейка") Тогда
		СтруктураСтроки.Ячейка = СкладскаяЯчейкаWS(СтрокаТоваров, Фабрика, URIИмен);
		ИсключаемыеСвойства = "Ячейка";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТоваров.НомерСтроки) Тогда
		СтрокаТоваров.НомерСтроки = 0;
	КонецЕсли;
	
	СтруктураСтроки.Номенклатура = НоменклатураWS(СтрокаТоваров, Фабрика, URIИмен);
	СтруктураСтроки.Характеристика = ХарактеристикаНоменклатурыWS(СтрокаТоваров, Фабрика, URIИмен);
	СтруктураСтроки.Назначение = НазначениеWS(СтрокаТоваров, Фабрика, URIИмен);
	СтруктураСтроки.Упаковка = УпаковкаНоменклатурыWS(СтрокаТоваров, Фабрика, URIИмен);
	СтруктураСтроки.Серия = СерияНоменклатурыWS(СтрокаТоваров, Фабрика, URIИмен);
	
	ИсключаемыеСвойства = ИсключаемыеСвойства + ", " + "Номенклатура, Характеристика, Назначение, Упаковка, Серия";
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТоваров, , ИсключаемыеСвойства);
	
КонецПроцедуры

// Заполняет строку 'ТоварыЯчейки' XDTO-пакета WMSMobileClientExchange данными товара.
//
// Параметры:
//	СтруктураСтроки - Структура,
//	СтрокаТоваров - СтрокаТаблицыЗначений - данные товара.
//
Процедура ЗаполнитьСтрокуТоварыЯчейки(СтруктураСтроки, СтрокаТоваров, Знач ВерсияСервиса) Экспорт
	
	URIИмен = URIПространстваИмен(ВерсияСервиса);
	
	Если ЗначениеЗаполнено(СтрокаТоваров.Характеристика) Тогда
		СтруктураСтроки.Характеристика = ХарактеристикаНоменклатурыWS(СтрокаТоваров, ФабрикаXDTO, URIИмен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТоваров.Упаковка) Тогда
		СтруктураСтроки.Упаковка = УпаковкаНоменклатурыWS(СтрокаТоваров, ФабрикаXDTO, URIИмен);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТоваров.Серия) Тогда
		СтруктураСтроки.Серия = СерияНоменклатурыWS(СтрокаТоваров, ФабрикаXDTO, URIИмен);
	КонецЕсли;
	
	СтруктураСтроки.Номенклатура = НоменклатураWS(СтрокаТоваров, ФабрикаXDTO, URIИмен);
	ИсключаемыеСвойства = "Номенклатура, Характеристика, Упаковка, Серия";
	
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТоваров, , ИсключаемыеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область ДесериализацииТаблиц

// Заполняет таблицу 'ЗоныПриемкиОтгрузки' данными складских ячеек.
//
// Параметры:
//	ЗоныПриемкиОтгрузки - ТаблицаЗначений,
//	ЗоныПриемкиОтгрузкиWS - ЗначениеXDTO - СписокЯчеек XDTO-пакета WMSMobileClientExchange.
//
Процедура ЗаполнитьЗоныПриемкиОтгрузки(ЗоныПриемкиОтгрузки, ЗоныПриемкиОтгрузкиWS)
	
	Для Каждого СтрокаЯчеекWS Из ЗоныПриемкиОтгрузкиWS["Строка"] Цикл
		
		НоваяСтрока = ЗоныПриемкиОтгрузки.Добавить();
		
		ЗаполнитьПараметрыОбластиХранения(НоваяСтрока, СтрокаЯчеекWS.Ячейка);
		ЗаполнитьПараметрыСклада(НоваяСтрока, СтрокаЯчеекWS.Склад);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет 'ТаблицаЗаданий'.
//
// Параметры:
//	ТаблицаЗаданий - ТаблицаЗначений,
//	ТаблицаЗаданийWS - ЗначениеXDTO - ТаблицаЗаданий XDTO-пакета WMSMobileClientExchange - таблица складских заданий,
//	ИмяДокумента - Строка - наименование объекта документа складского задания.
//
Процедура ЗаполнитьТаблицуЗаданий(ТаблицаЗаданий, ТаблицаЗаданийWS, ИмяДокумента)
	
	Для Каждого СтрокаЗаданияWS Из ТаблицаЗаданийWS["Строка"] Цикл
		
		НоваяСтрока = ТаблицаЗаданий.Добавить();
		
		НоваяСтрока.Ссылка = СсылкаДокумента(СтрокаЗаданияWS.Ссылка, ИмяДокумента);
		НоваяСтрока.Номер = СтрокаЗаданияWS.Номер;
		
		НоваяСтрока.Исполнитель = СсылкаСправочника(СтрокаЗаданияWS.Исполнитель.Ссылка, "Пользователи");
		НоваяСтрока.НаименованиеИсполнителя = СтрокаЗаданияWS.Исполнитель.Наименование;
		
		Если СтрокаЗаданияWS.ЕдиницаИзмерения <> Неопределено Тогда
			НоваяСтрока.Вес = СтрокаЗаданияWS.Вес;
			
			НоваяСтрока.ЕдиницаИзмерения = СсылкаСправочника(СтрокаЗаданияWS.ЕдиницаИзмерения.Ссылка,
				"УпаковкиЕдиницыИзмерения");
			НоваяСтрока.НаименованиеЕдиницыИзмерения = СтрокаЗаданияWS.ЕдиницаИзмерения.Наименование;
		КонецЕсли;
		
		Если СтрокаЗаданияWS.ПорядокДоставки <> Неопределено Тогда
			НоваяСтрока.ПорядокДоставки = СтрокаЗаданияWS.ПорядокДоставки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет 'ТоварыЯчейки' данными товаров, хранящихся в ячейке.
//
// Параметры:
//	ТоварыЯчейки - ТаблицаЗначений,
//	ТоварыЯчейкиWS - ЗначениеXDTO - ТоварыЯчейки XDTO-пакета WMSMobileClientExchange - таблица товаров ячейки.
//
Процедура ЗаполнитьТоварыЯчейки(ТоварыЯчейки, ТоварыЯчейкиWS)
	
	Для Каждого СтрокаТоваровWS Из ТоварыЯчейкиWS["Строка"] Цикл
		
		НоваяСтрока = ТоварыЯчейки.Добавить();
		
		ЗаполнитьНоменклатуруНеотгружаемыхТоваров(НоваяСтрока, СтрокаТоваровWS.Номенклатура);
		ЗаполнитьХарактеристикуСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Характеристика);
		ЗаполнитьУпаковкуНеотгружаемыхТоваров(НоваяСтрока, СтрокаТоваровWS.Упаковка);
		ЗаполнитьЕдиницуИзмеренияСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Номенклатура.ЕдиницаИзмерения,
			"ЕдиницаИзмерения");
		ЗаполнитьСериюНеотгружаемыхТоваров(НоваяСтрока, СтрокаТоваровWS.Серия);
		
		ИсключаемыеСвойства = "Номенклатура, Характеристика, Упаковка, Серия";
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваровWS, , ИсключаемыеСвойства);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает таблицу 'НеотгружаемыеТовары', заполненную данными неотгружаемых товаров.
//
// Параметры:
//	Товары - ТаблицаЗначений,
//	ТоварыWS - ЗначениеXDTO - Таблица XDTO-пакета WMSMobileClientExchange - таблица неотгружаемых товаров.
//
// Возвращаемое значение:
//	ТаблицаЗначений.
//
Функция НеотгружаемыеТовары(Товары, ТоварыWS) Экспорт
	
	Для Каждого СтрокаТоваровWS Из ТоварыWS["Строка"] Цикл
		
		НоваяСтрока = Товары.Добавить();
		
		ЗаполнитьНоменклатуруНеотгружаемыхТоваров(НоваяСтрока, СтрокаТоваровWS.Номенклатура);
		ЗаполнитьХарактеристикуСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Характеристика);
		ЗаполнитьНазначениеСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Назначение);
		ЗаполнитьУпаковкуНеотгружаемыхТоваров(НоваяСтрока, СтрокаТоваровWS.Упаковка);
		ЗаполнитьСериюНеотгружаемыхТоваров(НоваяСтрока, СтрокаТоваровWS.Серия);
		
		ИсключаемыеСвойства = "Номенклатура, Характеристика, Назначение, Упаковка, Серия";
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваровWS, , ИсключаемыеСвойства);
		
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

// Возвращает таблицу товаров складского задания.
//
// Параметры:
//	Товары - ТаблицаЗначений,
//	ТоварыWS - ЗначениеXDTO - Таблица XDTO-пакета WMSMobileClientExchange - таблица с данными товаров складского задания.
//
// Возвращаемое значение:
//	ТаблицаЗначений.
//
Функция ТоварыСкладскогоЗадания(Товары, ТоварыWS) Экспорт
	
	ИспользоватьПараметрыСерии = (Товары.Колонки.Найти("НомерСерии") <> Неопределено);
	
	Для Каждого СтрокаТоваровWS Из ТоварыWS["Строка"] Цикл
		
		НоваяСтрока = Товары.Добавить();
		
		Если Товары.Колонки.Найти("Действие") <> Неопределено Тогда
			ИсключаемыеСвойства = "";
		Иначе
			ИсключаемыеСвойства = "Ячейка, ";
			ЗаполнитьПараметрыЯчейки(НоваяСтрока, СтрокаТоваровWS.Ячейка);
		КонецЕсли;
		
		ЗаполнитьНоменклатуруСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Номенклатура);
		ЗаполнитьХарактеристикуСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Характеристика);
		ЗаполнитьНазначениеСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Назначение);
		ЗаполнитьУпаковкуСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Упаковка);
		ЗаполнитьСериюСкладскогоЗадания(НоваяСтрока, СтрокаТоваровWS.Серия, ИспользоватьПараметрыСерии);
		
		ИсключаемыеСвойства = ИсключаемыеСвойства + "Номенклатура, Характеристика, Назначение, Упаковка, Серия";
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваровWS, , ИсключаемыеСвойства);
		
	КонецЦикла;
	
	Возврат Товары;
	
КонецФункции

#КонецОбласти

#Область СтруктурыДокументов

// Возвращает структуру для хранения общих реквизитов документов складских заданий.
//
// Возвращаемое значение:
//	Структура:
//	*Ссылка - Строка - строковое представление УИДа
//	*Дата - Дата
//	*Номер - Строка
//	*Проведен - Булево
//
Функция СтруктураДокумента()
	
	СтруктураДокумента = Новый Структура;
	
	СтруктураДокумента.Вставить("Ссылка", "");
	СтруктураДокумента.Вставить("Дата", Дата("00010101"));
	СтруктураДокумента.Вставить("Номер", "");
	СтруктураДокумента.Вставить("Проведен", Ложь);
	
	Возврат СтруктураДокумента;
	
КонецФункции

// Возвращает структуру для хранения данных документа складского задания.
//
// Возвращаемое значение:
//	см. СтруктураДокумента
//
Функция СтруктураСкладскогоЗадания(ТипЗадания)
	
	СтруктураСкладскогоЗадания = СтруктураДокумента();
	
	СтруктураСкладскогоЗадания.Вставить("Склад");
	СтруктураСкладскогоЗадания.Вставить("Помещение");
	СтруктураСкладскогоЗадания.Вставить("Статус");
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Пересчет"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		СтруктураСкладскогоЗадания.Вставить("Исполнитель");
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		
		СтруктураСкладскогоЗадания.Вставить("Ответственный");
		СтруктураСкладскогоЗадания.Вставить("ЗонаПриемки");
		СтруктураСкладскогоЗадания.Вставить("Товары");
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		
		СтруктураСкладскогоЗадания.Вставить("Контролер");
		СтруктураСкладскогоЗадания.Вставить("ДатаОтгрузки");
		СтруктураСкладскогоЗадания.Вставить("ОтгружаемыеТовары");
		
	КонецЕсли;
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Приемка"
		Или ТипЗадания = "ПроверкаОтбора" Тогда
	
		СтруктураСкладскогоЗадания.Вставить("МаркировкаВерхнегоУровня");
		СтруктураСкладскогоЗадания.Вставить("МаркировкаДетализированная");
	
	КонецЕсли; 
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		СтруктураСкладскогоЗадания.Вставить("ЗонаОтгрузки");
		СтруктураСкладскогоЗадания.Вставить("ЗонаПриемки");
		СтруктураСкладскогоЗадания.Вставить("ТоварыОтбор");
		СтруктураСкладскогоЗадания.Вставить("ТоварыРазмещение");
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		
		СтруктураСкладскогоЗадания.Вставить("Товары");
		
	КонецЕсли;
	
	Возврат СтруктураСкладскогоЗадания;
	
КонецФункции

#КонецОбласти

#Область СтруктурыТаблиц

// Возвращает структуру для хранения данных строки таблицы 'ТаблицаНеотгружаемыхТоваров'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиНеотгружаемыеТовары()
	
	СтруктураСтрокиТоваров = Новый Структура;
	
	СтруктураСтрокиТоваров.Вставить("Номенклатура");
	СтруктураСтрокиТоваров.Вставить("Характеристика");
	СтруктураСтрокиТоваров.Вставить("Назначение");
	СтруктураСтрокиТоваров.Вставить("Упаковка");
	СтруктураСтрокиТоваров.Вставить("Серия");
	СтруктураСтрокиТоваров.Вставить("Количество", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковок", 0);
	
	Возврат СтруктураСтрокиТоваров;
	
КонецФункции

// Возвращает структуру для хранения данных строки таблицы 'РасходныйОрдерНаТоварыОтгружаемыеТовары'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиОтгружаемыеТовары()
	
	СтруктураСтрокиТоваров = СтруктураСтрокиТоварыРасходногоОрдера();
	
	СтруктураСтрокиТоваров.Вставить("НеОтгружать", 0);
	СтруктураСтрокиТоваров.Вставить("Количество", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоНеОтгружать", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоВДокументе", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковок", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокНеОтгружать", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокВДокументе", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокВДокументеНеотгружаемые", 0);
	
	Возврат СтруктураСтрокиТоваров;
	
КонецФункции

// Возвращает структуру для хранения данных строки 'ТаблицаОтсканированныхТоваров'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиОтсканированныеТовары()
	
	СтруктураСтрокиТоваров = СтруктураСтрокиТоварыОтбораРазмещенияТоваров();
	
	СтруктураСтрокиТоваров.Вставить("Количество", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоВДокументе", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоОтсканировано", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковок", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокВДокументе", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокОтсканировано", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокНеОтгружать", 0);
	
	Возврат СтруктураСтрокиТоваров;
	
КонецФункции

// Возвращает структуру для хранения данных строки 'СписокЯчеек'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиСписокЯчеек()
	
	СтруктураСтрокиСписокЯчеек = Новый Структура;
	
	СтруктураСтрокиСписокЯчеек.Вставить("Ячейка");
	СтруктураСтрокиСписокЯчеек.Вставить("Склад");
	
	Возврат СтруктураСтрокиСписокЯчеек;
	
КонецФункции

// Возвращает структуру для хранения данных строки таблицы 'ТаблицаЗаданий'  XDTO-пакета WMSMobileClientExchange.
//
// Параметры:
//	ЕстьВес - Булево - Истина, используются данные веса товаров задания,
//	ЕстьПорядокДоставки - Булево - Истина, используются данные о способах доставки.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиТаблицыЗаданий(ЕстьВес, ЕстьПорядокДоставки)
	
	СтруктураСтрокиТаблицыЗаданий = Новый Структура;
	
	СтруктураСтрокиТаблицыЗаданий.Вставить("Ссылка");
	СтруктураСтрокиТаблицыЗаданий.Вставить("Номер");
	СтруктураСтрокиТаблицыЗаданий.Вставить("Исполнитель");
	
	Если ЕстьПорядокДоставки Тогда
		СтруктураСтрокиТаблицыЗаданий.Вставить("ПорядокДоставки");
	КонецЕсли;
	
	Если ЕстьВес Тогда
		СтруктураСтрокиТаблицыЗаданий.Вставить("Вес");
		СтруктураСтрокиТаблицыЗаданий.Вставить("ЕдиницаИзмерения");
	КонецЕсли;
	
	Возврат СтруктураСтрокиТаблицыЗаданий;
	
КонецФункции

// Возвращает структуру для хранения данных строки таблицы 'Товары' XDTO-пакета WMSMobileClientExchange.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиТовары()
	
	СтруктураСтрокиТоваров = СтруктураСтрокиТоварыОтбораРазмещенияТоваров();
	
	СтруктураСтрокиТоваров.Вставить("ИзлишекПорча", Ложь);
	СтруктураСтрокиТоваров.Вставить("Количество", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоФакт", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковок", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоВДокументе", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокФакт", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокВДокументе", 0);
	
	Возврат СтруктураСтрокиТоваров;
	
КонецФункции

// Возвращает структуру для хранения данных строки таблиц документа 'ОтборРазмещениеТоваров'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиТоварыОтбораРазмещенияТоваров()
	
	СтруктураСтрокиТоваров = Новый Структура;
	
	СтруктураСтрокиТоваров.Вставить("НомерСтроки", 0);
	СтруктураСтрокиТоваров.Вставить("Ячейка");
	СтруктураСтрокиТоваров.Вставить("Номенклатура");
	СтруктураСтрокиТоваров.Вставить("Характеристика");
	СтруктураСтрокиТоваров.Вставить("Назначение");
	СтруктураСтрокиТоваров.Вставить("Упаковка");
	СтруктураСтрокиТоваров.Вставить("Серия");
	СтруктураСтрокиТоваров.Вставить("СтатусУказанияСерий");
	
	Возврат СтруктураСтрокиТоваров;
	
КонецФункции

// Возвращает структуру для хранения данных строки таблицы 'ОтборРазмещениеТоваровТоварыОтбор'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиТоварыОтбор()
	
	СтруктураСтрокиТоваров = СтруктураСтрокиТоварыОтбораРазмещенияТоваров();
	
	СтруктураСтрокиТоваров.Вставить("Количество", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоОтобрано", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковок", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокОтобрано", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокВДокументе", 0);
	
	Возврат СтруктураСтрокиТоваров;
	
КонецФункции

// Возвращает структуру для хранения данных строки таблицы 'ОтборРазмещениеТоваровТоварыРазмещение'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиТоварыРазмещение()
	
	СтруктураСтрокиТоваров = СтруктураСтрокиТоварыОтбораРазмещенияТоваров();
	
	СтруктураСтрокиТоваров.Вставить("Количество", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоРазмещено", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковок", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокРазмещено", 0);
	СтруктураСтрокиТоваров.Вставить("КоличествоУпаковокВДокументе", 0);
	
	Возврат СтруктураСтрокиТоваров;
	
КонецФункции

// Возвращает структуру для хранения данных строки таблицы документа 'РасходныйОрдерНаТовары'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиТоварыРасходногоОрдера()
	
	СтруктураСтрокиТоваров = Новый Структура;
	
	СтруктураСтрокиТоваров.Вставить("НомерСтроки", 0);
	СтруктураСтрокиТоваров.Вставить("Номенклатура");
	СтруктураСтрокиТоваров.Вставить("Характеристика");
	СтруктураСтрокиТоваров.Вставить("Назначение");
	СтруктураСтрокиТоваров.Вставить("Упаковка");
	СтруктураСтрокиТоваров.Вставить("Серия");
	СтруктураСтрокиТоваров.Вставить("СтатусУказанияСерий");
	
	Возврат СтруктураСтрокиТоваров;
	
КонецФункции

// Возвращает структуру для хранения данных строки 'ТоварыЯчейки'.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСтрокиТоварыЯчейки()
	
	СтруктураСтрокиТоварыЯчейки = Новый Структура;
	
	СтруктураСтрокиТоварыЯчейки.Вставить("Номенклатура");
	СтруктураСтрокиТоварыЯчейки.Вставить("Характеристика");
	СтруктураСтрокиТоварыЯчейки.Вставить("Упаковка");
	СтруктураСтрокиТоварыЯчейки.Вставить("Серия");
	СтруктураСтрокиТоварыЯчейки.Вставить("Количество", 0);
	
	Возврат СтруктураСтрокиТоварыЯчейки;
	
КонецФункции

#КонецОбласти

#Область СтруктурыПростыхТипов

// Возвращает структуру для хранения данных справочника объекта.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСправочника()
	
	СтруктураСправочника = Новый Структура;
	
	СтруктураСправочника.Вставить("Ссылка");
	СтруктураСправочника.Вставить("Наименование", "");
	
	Возврат СтруктураСправочника;
	
КонецФункции

// Возвращает структуру для хранения данных вида номенклатуры.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураВидаНоменклатуры()
	
	СтруктураВидаНоменклатуры = СтруктураСправочника();
	
	СтруктураВидаНоменклатуры.Вставить("ИспользоватьНомерСерии", Ложь);
	СтруктураВидаНоменклатуры.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	СтруктураВидаНоменклатуры.Вставить("ТипНоменклатуры");
	СтруктураВидаНоменклатуры.Вставить("ТочностьУказанияСрокаГодностиСерии",
		Перечисления.ТочностиУказанияСрокаГодности.ПустаяСсылка());
	
	Возврат СтруктураВидаНоменклатуры;
	
КонецФункции

// Возвращает структуру для хранения данных единицы измерения.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураЕдиницыИзмерения()
	
	СтруктураЕдиницыИзмерения = СтруктураСправочника();
	СтруктураЕдиницыИзмерения.Вставить("ТипИзмеряемойВеличины");
	
	Возврат СтруктураЕдиницыИзмерения;
	
КонецФункции

// Возвращает структуру для хранения данных номенклатуры.
//
// Возвращаемое значение:
//	Структура:
//	*Артикул - Строка
//	*ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры
//	*ЕдиницаИзмерения - СправочникСсылка.УпаковкиЕдиницыИзмерения
//	*ЕдиницаИзмеренияВеса - СправочникСсылка.УпаковкиЕдиницыИзмерения
//	*ЕдиницаИзмеренияОбъема - СправочникСсылка.УпаковкиЕдиницыИзмерения
//	*Описание - Строка
//	*Штрихкод - Строка
//
Функция СтруктураНоменклатуры()
	
	СтруктураНоменклатуры = СтруктураСправочника();
	
	СтруктураНоменклатуры.Вставить("Артикул", "");
	СтруктураНоменклатуры.Вставить("ВидНоменклатуры");
	СтруктураНоменклатуры.Вставить("ЕдиницаИзмерения");
	СтруктураНоменклатуры.Вставить("ЕдиницаИзмеренияВеса");
	СтруктураНоменклатуры.Вставить("ЕдиницаИзмеренияОбъема");
	СтруктураНоменклатуры.Вставить("Описание", "");
	СтруктураНоменклатуры.Вставить("Штрихкод", "");
	
	Возврат СтруктураНоменклатуры;
	
КонецФункции

// Возвращает структуру для хранения данных серии номенклатуры.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСерииНоменклатуры()
	
	СтруктураСерииНоменклатуры = СтруктураСправочника();
	
	СтруктураСерииНоменклатуры.Вставить("Номер", "");
	СтруктураСерииНоменклатуры.Вставить("ГоденДо", Дата("00010101"));
	
	Возврат СтруктураСерииНоменклатуры;
	
КонецФункции

// Возвращает структуру для хранения данных ячейки XDTO-пакета.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураСкладскойЯчейки()
	
	СтруктураСкладскойЯчейки = Новый Структура;
	
	СтруктураСкладскойЯчейки.Вставить("Ссылка");
	СтруктураСкладскойЯчейки.Вставить("Код", "");
	СтруктураСкладскойЯчейки.Вставить("ТипСкладскойЯчейки");
	СтруктураСкладскойЯчейки.Вставить("Штрихкод", "");
	
	Возврат СтруктураСкладскойЯчейки;
	
КонецФункции

// Возвращает структуру для хранения данных упаковки номенклатуры.
//
// Возвращаемое значение:
//	Структура.
//
Функция СтруктураУпаковкиНоменклатуры()
	
	СтруктураУпаковкиНоменклатуры = СтруктураСправочника();
	
	СтруктураУпаковкиНоменклатуры.Вставить("Вес", 0);
	СтруктураУпаковкиНоменклатуры.Вставить("Коэффициент", 1);
	СтруктураУпаковкиНоменклатуры.Вставить("КоэффициентЕдиницыИзмеренияВеса", 0);
	СтруктураУпаковкиНоменклатуры.Вставить("КоэффициентЕдиницыИзмеренияОбъема", 0);
	СтруктураУпаковкиНоменклатуры.Вставить("Объем", 0);
	
	Возврат СтруктураУпаковкиНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область КонструкторыТаблицЗначений

// Возвращает таблицу 'НеотгружаемыеТовары'.
//
// Возвращаемое значение:
//	ТаблицаЗначений.
//
Функция ТаблицаНеотгружаемыеТовары()
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипУпаковка = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ТипНазначение = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	ТипСерия = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
	
	ТипСтрокаНаименование = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ТипКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	НеотгружаемыеТовары = Новый ТаблицаЗначений;
	
	НеотгружаемыеТовары.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	НеотгружаемыеТовары.Колонки.Добавить("НаименованиеНоменклатуры", ТипСтрокаНаименование);
	НеотгружаемыеТовары.Колонки.Добавить("Характеристика", ТипХарактеристика);
	НеотгружаемыеТовары.Колонки.Добавить("НаименованиеХарактеристики", ТипСтрокаНаименование);
	НеотгружаемыеТовары.Колонки.Добавить("Назначение", ТипНазначение);
	НеотгружаемыеТовары.Колонки.Добавить("НаименованиеНазначения", ТипСтрокаНаименование);
	НеотгружаемыеТовары.Колонки.Добавить("Серия", ТипСерия);
	НеотгружаемыеТовары.Колонки.Добавить("НаименованиеСерии", ТипСтрокаНаименование);
	НеотгружаемыеТовары.Колонки.Добавить("Упаковка", ТипУпаковка);
	НеотгружаемыеТовары.Колонки.Добавить("НаименованиеУпаковки", ТипСтрокаНаименование);
	НеотгружаемыеТовары.Колонки.Добавить("Количество", ТипКоличество);
	НеотгружаемыеТовары.Колонки.Добавить("КоличествоУпаковок", ТипКоличество);
	
	Возврат НеотгружаемыеТовары;
	
КонецФункции

// Возвращает таблицу "ОтсканированныеТовары".
//
// Возвращаемое значение:
//	ТаблицаЗначений.
//
Функция ТаблицаОтсканированныеТовары()
	
	ТипЯчейка = Новый ОписаниеТипов("СправочникСсылка.СкладскиеЯчейки");
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипВидНоменклатуры = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
	ТипТипНоменклатуры = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры");
	ТипТочностиУказанияСрокаГодности = Новый ОписаниеТипов("ПеречислениеСсылка.ТочностиУказанияСрокаГодности");
	ТипТипИзмеряемойВеличины = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыИзмеряемыхВеличин");
	ТипЕдиницаИзмерения = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипУпаковка = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ТипНазначение = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	ТипСерия = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСтрокаАртикула = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50));
	ТипСтрокаОписания = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1024));
	ТипСтрокаНомерСерии = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200));
	ТипСтрокаНаименование = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ТипДата = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	ТипСтатусУказанияСерии = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный));
	
	ОтсканированныеТовары = Новый ТаблицаЗначений;
	
	ОтсканированныеТовары.Колонки.Добавить("НомерСтроки", ТипЯчейка);
	ОтсканированныеТовары.Колонки.Добавить("Ячейка", ТипЯчейка);
	ОтсканированныеТовары.Колонки.Добавить("КодЯчейки", ТипЯчейка);
	ОтсканированныеТовары.Колонки.Добавить("ШтрихкодЯчейки", ТипСтрокаАртикула);
	ОтсканированныеТовары.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	ОтсканированныеТовары.Колонки.Добавить("НаименованиеНоменклатуры", ТипСтрокаНаименование);
	ОтсканированныеТовары.Колонки.Добавить("АртикулНоменклатуры", ТипСтрокаАртикула);
	ОтсканированныеТовары.Колонки.Добавить("ОписаниеНоменклатуры", ТипСтрокаОписания);
	ОтсканированныеТовары.Колонки.Добавить("ВидНоменклатуры", ТипВидНоменклатуры);
	ОтсканированныеТовары.Колонки.Добавить("ТипНоменклатуры", ТипТипНоменклатуры);
	ОтсканированныеТовары.Колонки.Добавить("ИспользоватьНомерСерии", ТипБулево);
	ОтсканированныеТовары.Колонки.Добавить("ИспользоватьСрокГодностиСерии", ТипБулево);
	ОтсканированныеТовары.Колонки.Добавить("ТочностьУказанияСрокаГодностиСерии", ТипТочностиУказанияСрокаГодности);
	ОтсканированныеТовары.Колонки.Добавить("Характеристика", ТипХарактеристика);
	ОтсканированныеТовары.Колонки.Добавить("НаименованиеХарактеристики", ТипСтрокаНаименование);
	ОтсканированныеТовары.Колонки.Добавить("Назначение", ТипНазначение);
	ОтсканированныеТовары.Колонки.Добавить("НаименованиеНазначения", ТипСтрокаНаименование);
	ОтсканированныеТовары.Колонки.Добавить("Серия", ТипСерия);
	ОтсканированныеТовары.Колонки.Добавить("НаименованиеСерии", ТипСтрокаНаименование);
	ОтсканированныеТовары.Колонки.Добавить("НомерСерии", ТипСтрокаНомерСерии);
	ОтсканированныеТовары.Колонки.Добавить("ГоденДо", ТипДата);
	ОтсканированныеТовары.Колонки.Добавить("СтатусУказанияСерий", ТипСтатусУказанияСерии);
	ОтсканированныеТовары.Колонки.Добавить("ЕдиницаИзмерения", ТипЕдиницаИзмерения);
	ОтсканированныеТовары.Колонки.Добавить("НаименованиеЕдиницыИзмерения", ТипСтрокаНаименование);
	ОтсканированныеТовары.Колонки.Добавить("ЕдиницаИзмеренияВеса", ТипЕдиницаИзмерения);
	ОтсканированныеТовары.Колонки.Добавить("НаименованиеЕдиницыИзмеренияВеса", ТипСтрокаНаименование);
	ОтсканированныеТовары.Колонки.Добавить("ЕдиницаИзмеренияОбъема", ТипЕдиницаИзмерения);
	ОтсканированныеТовары.Колонки.Добавить("НаименованиеЕдиницыИзмеренияОбъема", ТипСтрокаНаименование);
	ОтсканированныеТовары.Колонки.Добавить("ТипИзмеряемойВеличины", ТипТипИзмеряемойВеличины);
	ОтсканированныеТовары.Колонки.Добавить("Упаковка", ТипУпаковка);
	ОтсканированныеТовары.Колонки.Добавить("НаименованиеУпаковки", ТипСтрокаНаименование);
	ОтсканированныеТовары.Колонки.Добавить("Коэффициент", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("КоэффициентЕдиницыИзмеренияВеса", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("КоэффициентЕдиницыИзмеренияОбъема", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("ВесУпаковки", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("ОбъемУпаковки", ТипКоличество);
	
	ОтсканированныеТовары.Колонки.Добавить("Количество", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("КоличествоВДокументе", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("КоличествоОтсканировано", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("КоличествоУпаковок", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("КоличествоУпаковокВДокументе", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("КоличествоУпаковокОтсканировано", ТипКоличество);
	ОтсканированныеТовары.Колонки.Добавить("КоличествоУпаковокНеОтгружать", ТипКоличество);
	
	Возврат ОтсканированныеТовары;
	
КонецФункции

// Возвращает таблицу "ТоварыЯчейки".
//
// Возвращаемое значение:
//	ТаблицаЗначений.
//
Функция ТаблицаТоварыЯчейки()
	
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипЕдиницаИзмерения = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипУпаковка = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ТипСерия = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
	
	ТипСтрокаНаименование = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100));
	ТипКоличество = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	
	ТоварыЯчейки = Новый ТаблицаЗначений;
	
	ТоварыЯчейки.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	ТоварыЯчейки.Колонки.Добавить("НаименованиеНоменклатуры", ТипСтрокаНаименование);
	ТоварыЯчейки.Колонки.Добавить("Характеристика", ТипХарактеристика);
	ТоварыЯчейки.Колонки.Добавить("НаименованиеХарактеристики", ТипСтрокаНаименование);
	ТоварыЯчейки.Колонки.Добавить("Серия", ТипСерия);
	ТоварыЯчейки.Колонки.Добавить("НаименованиеСерии", ТипСтрокаНаименование);
	ТоварыЯчейки.Колонки.Добавить("Упаковка", ТипУпаковка);
	ТоварыЯчейки.Колонки.Добавить("НаименованиеУпаковки", ТипСтрокаНаименование);
	ТоварыЯчейки.Колонки.Добавить("ЕдиницаИзмерения", ТипЕдиницаИзмерения);
	ТоварыЯчейки.Колонки.Добавить("НаименованиеЕдиницыИзмерения", ТипСтрокаНаименование);
	ТоварыЯчейки.Колонки.Добавить("Количество", ТипКоличество);
	
	Возврат ТоварыЯчейки;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОтсканированныхТоваровСкладскихЗаданий

// Возвращает таблицу отсканированных товаров складских операций "Отбор" и "Перемещение", 
// после выполнения отбора товаров из ячеек.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//
// Возвращаемое значение:
//	ТаблицаЗначений - отсканированные товары складского задания.
//
Функция ОтсканированныеТоварыОтбора(Форма)
	
	ТоварыДляСканирования = Форма.ТоварыДляСканирования;
	ОтсканированныеТовары = ТоварыДляСканирования.Выгрузить();
	Отбор = Новый Структура("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка");
	
	ТЗОтсканированныеТовары = Форма.ОтсканированныеТовары.Выгрузить();
	ТЗОтсканированныеТовары.Свернуть("Ячейка, Номенклатура, Характеристика, Назначение, Упаковка, Серия, НомерСерии,
			|ГоденДо, Коэффициент, СтатусУказанияСерий", "КоличествоУпаковокОтсканировано");
	
	Для Каждого СтрокаТоваров Из ТоварыДляСканирования Цикл
		
		Если СерииУказываютсяПоФактуОтбора(СтрокаТоваров.СтатусУказанияСерий) Тогда
			
			ЗаполнитьЗначенияСвойств(Отбор, СтрокаТоваров);
			
			ВсегоОтсканированоУпаковок = 0;
			НайденныеСтроки = ОтсканированныеТовары.НайтиСтроки(Отбор);
			НайденныеСтрокиПоСериям = ТЗОтсканированныеТовары.НайтиСтроки(Отбор);
			
			Строка = НайденныеСтроки[0];
			ИндексНовойСтроки = ОтсканированныеТовары.Индекс(Строка);
			
			Если НайденныеСтрокиПоСериям.Количество() > 0 Тогда
				ПерваяСтрока = НайденныеСтрокиПоСериям[0];
			КонецЕсли;
			
			Для каждого СтрокаТовараССерией Из НайденныеСтрокиПоСериям Цикл
				
				ИндексНовойСтроки = ИндексНовойСтроки + 1;
				
				Если СтрокаТовараССерией = ПерваяСтрока Тогда
					
					КоличествоОтсканировано = ПерваяСтрока.КоличествоУпаковокОтсканировано;
					
					Если НайденныеСтрокиПоСериям.Количество() > 0 Тогда
						КоличествоОтсканировано = 0;
						
						Для Каждого СтрокаТовараПоСерии Из НайденныеСтрокиПоСериям Цикл
							КоличествоОтсканировано = КоличествоОтсканировано + СтрокаТовараПоСерии.КоличествоУпаковокОтсканировано;
						КонецЦикла;
					КонецЕсли;
					
					КоличествоОтсканировано = КоличествоОтсканировано - ПерваяСтрока.КоличествоУпаковокОтсканировано;
					КоличествоУпаковокОтсканировано = СтрокаТоваров.КоличествоУпаковокОтсканировано - КоличествоОтсканировано;
					КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаТоваров.Коэффициент;
					
				Иначе
					КоличествоУпаковокОтсканировано = СтрокаТовараССерией.КоличествоУпаковокОтсканировано;
					КоличествоОтсканировано = КоличествоУпаковокОтсканировано * СтрокаТовараССерией.Коэффициент;
				КонецЕсли;
				
				НоваяСтрока = ОтсканированныеТовары.Вставить(ИндексНовойСтроки);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.НомерСерии = СтрокаТовараССерией.НомерСерии;
				НоваяСтрока.ГоденДо = СтрокаТовараССерией.ГоденДо;
				
				НоваяСтрока.КоличествоУпаковок = КоличествоУпаковокОтсканировано;
				НоваяСтрока.КоличествоУпаковокОтсканировано = КоличествоУпаковокОтсканировано;
				НоваяСтрока.КоличествоУпаковокВДокументе = КоличествоУпаковокОтсканировано;
				
				ВсегоОтсканированоУпаковок = ВсегоОтсканированоУпаковок + КоличествоУпаковокОтсканировано;
				
			КонецЦикла;
			
			ОсталосьОтсканироватьУпаковок = СтрокаТоваров.КоличествоУпаковок - ВсегоОтсканированоУпаковок;
			
			Если ОсталосьОтсканироватьУпаковок <= 0 Тогда
				ОтсканированныеТовары.Удалить(Строка);
			Иначе
				Строка.КоличествоУпаковокВДокументе = ОсталосьОтсканироватьУпаковок;
				Строка.КоличествоУпаковок = ОсталосьОтсканироватьУпаковок;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьПустыеСтрокиОтсканированныеТовары(ОтсканированныеТовары);
	
	Возврат ОтсканированныеТовары;
	
КонецФункции

// Возвращает таблицу отсканированных товаров складской операции "Пересчет".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//
// Возвращаемое значение:
//	ТаблицаЗначений - отсканированные товары складского задания.
//
Функция ОтсканированныеТоварыПересчета(Форма)
	
	ТЗОтсканированныеТовары = Форма.ОтсканированныеТовары.Выгрузить();
	ОтсканированныеТовары = Форма.ТоварыДляСканирования.Выгрузить();
	ОтсканированныеТовары.Очистить();
	
	Для Каждого СтрокаТоваров Из ТЗОтсканированныеТовары Цикл
		НоваяСтрока = ОтсканированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
	КонецЦикла;
	
	Возврат ОтсканированныеТовары;
	
КонецФункции

// Возвращает таблицу отсканированных товаров складской операции "Проверка отбора".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//
// Возвращаемое значение:
//	ТаблицаЗначений - отсканированные товары складского задания.
//
Функция ОтсканированныеТоварыПроверкиОтбора(Форма)
	
	ТЗОтсканированныеТовары = Форма.ОтсканированныеТовары.Выгрузить();
	ОтсканированныеТовары = Форма.ТоварыДляСканирования.Выгрузить();
	ОтсканированныеТовары.Очистить();
	
	Для Каждого СтрокаТоваров Из ТЗОтсканированныеТовары Цикл
		НоваяСтрока = ОтсканированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
	КонецЦикла;
	
	Для Каждого СтрокаТоваров Из Форма.ТоварыДляСканирования Цикл
		
		Если ЭтоТара(СтрокаТоваров)
			И СтрокаТоваров.КоличествоУпаковокОтсканировано > 0 Тогда
			
			НоваяСтрока = ОтсканированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтсканированныеТовары;
	
КонецФункции

// Возвращает таблицу отсканированных товаров складской операции "Новое размещение".
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//
// Возвращаемое значение:
//	ТаблицаЗначений - отсканированные товары складского задания.
//
Функция ОтсканированныеТоварыНовогоРазмещения(Форма)
	
	ТЗОтсканированныеТовары = Форма.ОтсканированныеТовары.Выгрузить();
	ОтсканированнаяТара = Форма.РеквизитФормыВЗначение("ОтсканированнаяТара");
	
	ОтсканированныеТовары = Форма.ТоварыДляСканирования.Выгрузить();
	ОтсканированныеТовары.Очистить();
	
	Для Каждого СтрокаТоваров Из ТЗОтсканированныеТовары Цикл
		НоваяСтрока = ОтсканированныеТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТоваров);
	КонецЦикла;
	
	Для каждого СтрокаТовара Из ОтсканированнаяТара.Строки Цикл
		
		Для Каждого СтрокаТары Из СтрокаТовара.Строки Цикл
			
			Если СтрокаТары.КоличествоУпаковокОтсканировано = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ОтсканированныеТовары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТары);
			
			НоваяСтрока.КоличествоУпаковок = СтрокаТары.КоличествоУпаковокОтсканировано;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ОтсканированныеТовары;
	
КонецФункции

// Возвращает таблицу отсканированных товаров документа складского задания.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - форма мобильного рабочего места работника склада.
//
// Возвращаемое значение:
//	ТаблицаЗначений - отсканированные товары складского задания.
//
Функция ОтсканированныеТоварыСкладскогоЗадания(Форма)
	
	ПараметрыРежима = Форма.ПараметрыРежима;
	ТипЗадания = ПараметрыРежима.ТипЗадания;
	ЭтоНаборТоваров = ПараметрыРежима.НаборТоваров;
	
	Если ТипЗадания = "Отбор" Тогда
		ОтсканированныеТовары = ОтсканированныеТоварыОтбора(Форма);
	ИначеЕсли ТипЗадания = "Размещение" Тогда
		
		Если ЭтоНаборТоваров Тогда
			ОтсканированныеТовары = ОтсканированныеТоварыНовогоРазмещения(Форма);
		Иначе
			ОтсканированныеТовары = Форма.ТоварыДляСканирования.Выгрузить();
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		ОтсканированныеТовары = ОтсканированныеТоварыПересчета(Форма);
	ИначеЕсли ТипЗадания = "Перемещение" Тогда
		
		Если Не ПараметрыРежима.ОтборОтсканирован Тогда
			ОтсканированныеТовары = ОтсканированныеТоварыОтбора(Форма);
		Иначе
			ОтсканированныеТовары = Форма.ТоварыДляСканирования.Выгрузить();
		КонецЕсли;
		
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ОтсканированныеТовары = ОтсканированныеТоварыПроверкиОтбора(Форма);
	КонецЕсли;
	
	Возврат ОтсканированныеТовары;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Функция возвращает URIПространстваИмен соответствующего XDTO-пакета WMSMobileClientExchange*.
//
Функция URIПространстваИмен(ВерсияСервиса)
	
	ИмяСервиса = "WMSMobileClientExchange";
	
	ИмяСервиса = ПолноеИмяСервиса(ИмяСервиса,ВерсияСервиса);
	
	Сервис = Метаданные.WebСервисы.Найти(ИмяСервиса);
	
	Если Сервис = Неопределено Тогда
		ШаблонИсключения = НСтр("ru = 'Не найден Web-сервис ""%1""'");
		ВызватьИсключение СтрШаблон(ШаблонИсключения,ИмяСервиса);
	Иначе
		Возврат Сервис.ПространствоИмен;
	КонецЕсли; 
	
КонецФункции

// Создает прокси веб-сервиса. В случае ошибки вызывается исключение.
//
// Параметры:
//	ИмяПользователя - Строка - имя пользователя, указываемое при авторизации,
//	Пароль - Строка - пароль, указываемый при авторизации,
//	МестоположениеWSDL - Строка - местоположение WSDL файла, откуда будет получено определение web-сервиса.
//	ВерсияСервиса - Строка,Неопределено - используется для получения суффикса имени сервиса, схемы и пространства имен,
//		значение Неопределено преобразуется в суффикс по-умолчанию.
//
// Возвращаемое значение:
//	WSПрокси - Прокси web-сервиса.
//
Функция ПроксиВебСервиса(ИмяПользователя, Пароль, Знач МестоположениеWSDL, Знач ВерсияСервиса = "") Экспорт
	
	Если ВерсияСервиса = Неопределено Тогда
		ВерсияСервиса = ОсновнаяВерсияСервиса();
	КонецЕсли; 
	
	Если ПустаяСтрока(МестоположениеWSDL) Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения к веб-сервису.
			|
			|В параметрах соединения не указан URL информационной базы'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МестоположениеWSDL)
		И (Прав(МестоположениеWSDL, 1) <> "/")
		И (Прав(МестоположениеWSDL, 1) <> "\") Тогда
		
		МестоположениеWSDL = МестоположениеWSDL + "/";
		
	КонецЕсли;
	
	ИмяСервиса = "WMSMobileClientExchange";
	ИмяСервиса = ПолноеИмяСервиса(ИмяСервиса,ВерсияСервиса);
	МестоположениеWSDL = СтрШаблон("%1ws/%2.1cws?wsdl", МестоположениеWSDL, ИмяСервиса);
	
	Если ПустаяСтрока(ИмяПользователя) Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка подключения к веб-сервису.
			|
			|В параметрах соединения не указан пользователь'");
	КонецЕсли;
	
	Попытка
		URIИмен = URIПространстваИмен(ВерсияСервиса);
		СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(МестоположениеWSDL);
		
		ИспользуетсяЗащищенноеСоединение = СтруктураURI.Схема = "https";
		Если ИспользуетсяЗащищенноеСоединение Тогда
			
			ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение();
			ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("https");
			
		Иначе
			
			ЗащищенноеСоединение = Неопределено;
			ИнтернетПрокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси("http");
			
		КонецЕсли;
		
		Определение = Новый WSОпределения(МестоположениеWSDL,
			ИмяПользователя,
			Пароль,
			ИнтернетПрокси,
			60,
			ЗащищенноеСоединение);
		
		Прокси = Новый WSПрокси(
			Определение,
			URIИмен,
			ИмяСервиса,
			СтрШаблон("%1Soap", ИмяСервиса),
			ИнтернетПрокси,
			60,
			ЗащищенноеСоединение);
		
	Исключение
		ТекстСообщение = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Подключение к информационной базе'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , ,
			ТекстСообщение);
		
		ВызватьИсключение НСтр("ru = 'Ошибка подключения к веб-сервису.
			|
			|Возможно не прошла авторизация, указан неверный адрес веб-сервиса 
			|или информационная база не опубликована на веб-сервере.
			|
			|Подробности в журнале регистрации.'");
	КонецПопытки;
	
	Прокси.Пользователь = ИмяПользователя;
	Прокси.Пароль = Пароль;
	
	Возврат Прокси;
	
КонецФункции

// Дополняет данными таблицу 'НеотгружаемыеТовары'.
//
// Параметры:
//	НеотгружаемыеТовары - ТаблицаЗначений - таблица неотгружаемых товаров.
//
Процедура ДополнитьДаннымиНеотгружаемыеТовары(НеотгружаемыеТовары)
	
	Запрос = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("Товары", НеотгружаемыеТовары);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ НеотгружаемыеТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеотгружаемыеТовары.НомерСтроки КАК НомерСтроки,
	|	НеотгружаемыеТовары.Номенклатура,
	|	ЕСТЬNULL(ТчНоменклатура.Ссылка.Представление, """") КАК НаименованиеНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.Артикул, """") КАК АртикулНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.Описание, """") КАК ОписаниеНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры, ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.ПустаяСсылка)) КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.Представление, """") КАК НаименованиеВидаНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	НеотгружаемыеТовары.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ТчХарактеристики.Ссылка.Представление, """") КАК НаименованиеХарактеристики,
	|	НеотгружаемыеТовары.Назначение КАК Назначение,
	|	ЕСТЬNULL(ТчНазначения.Ссылка.Представление, """") КАК НаименованиеНазначения,
	|	НеотгружаемыеТовары.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(ТчУпаковки.Ссылка.Представление, """") КАК НаименованиеУпаковки,
	|	НеотгружаемыеТовары.Серия КАК Серия,
	|	ЕСТЬNULL(ТчСерии.Ссылка.Представление, """") КАК НаименованиеСерии,
	|	ЕСТЬNULL(&Коэффициент1, 1) КАК Коэффициент,
	|	ЕСТЬNULL(&Коэффициент2, 1) КАК КоэффициентЕдиницыИзмеренияВеса,
	|	ЕСТЬNULL(&Коэффициент3, 1) КАК КоэффициентЕдиницыИзмеренияОбъема,
	|	&ВесУпаковки КАК ВесУпаковки,
	|	&ОбъемУпаковки КАК ОбъемУпаковки,
	|	ЕСТЬNULL(ТчНоменклатура.ЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ТчНоменклатура.ЕдиницаИзмерения, """") КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(ТчНоменклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияВеса,
	|	ЕСТЬNULL(ТчНоменклатура.ВесЕдиницаИзмерения.Представление, """") КАК НаименованиеЕдиницыИзмеренияВеса,
	|	ЕСТЬNULL(ТчНоменклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияОбъема,
	|	ЕСТЬNULL(ТчНоменклатура.ОбъемЕдиницаИзмерения.Представление, """") КАК НаименованиеЕдиницыИзмеренияОбъема,
	|	ЕСТЬNULL(ТчНоменклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины, ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ПустаяСсылка)) КАК ТипИзмеряемойВеличины,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ) КАК ИспользоватьНомерСерии,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.точностиУказанияСрокаГодности.ПустаяСсылка)) КАК ТочностьУказанияСрокаГодностиСерии,
	|	НеотгружаемыеТовары.Количество КАК Количество,
	|	НеотгружаемыеТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ИЗ
	|	НеотгружаемыеТовары КАК НеотгружаемыеТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТчНоменклатура
	|		ПО НеотгружаемыеТовары.Номенклатура = ТчНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ТчХарактеристики
	|		ПО НеотгружаемыеТовары.Характеристика = ТчХарактеристики.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК ТчНазначения
	|		ПО НеотгружаемыеТовары.Назначение = ТчНазначения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК ТчСерии
	|		ПО НеотгружаемыеТовары.Серия = ТчСерии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ТчУпаковки
	|		ПО НеотгружаемыеТовары.Упаковка = ТчУпаковки.Ссылка";
	
	ИсточникУпаковки = "ТчУпаковки";
	ИсточникНоменклатуры = "ТчНоменклатура";
	ИсточникЕдиницыИзмеренияВеса = "ТчНоменклатура.ВесЕдиницаИзмерения";
	ИсточникЕдиницыИзмеренияОбъема = "ТчНоменклатура.ОбъемЕдиницаИзмерения";
	
	// Подстановка "Коэффициент1" - коэффициент упаковки
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры));
	
	// Подстановка "Коэффициент2" - коэффициент единицы измерения веса номенклатуры
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияВеса, Неопределено));
	
	// Подстановка "Коэффициент3" - коэффициент единицы измерения объема номенклатуры
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияОбъема, Неопределено));
	
	// Подстановка "ВесУпаковки"
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВесУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, Ложь));
	
	// Подстановка "ОбъемУпаковки"
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъемУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, Ложь));
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	НеотгружаемыеТовары = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры

// Дополняет данными таблицу 'ТоварыЯчейки'.
//
// Параметры:
//	ТоварыЯчейки - ТаблицаЗначений - таблица товаров, хранящихся в ячейке.
//
Процедура ДополнитьДаннымиТоварыЯчейки(ТоварыЯчейки)
	
	Запрос = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	Запрос.УстановитьПараметр("ТоварыЯчейки", ТоварыЯчейки);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	Товары.Серия КАК Серия,
	|	Товары.НаименованиеСерии КАК НаименованиеСерии,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	Товары.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	&ТоварыЯчейки КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДляЗапроса.Номенклатура КАК Номенклатура,
	|	ТоварыДляЗапроса.НаименованиеНоменклатуры КАК НаименованиеНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.Артикул, """") КАК АртикулНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.Описание, """") КАК ОписаниеНоменклатуры,
	|	ТчНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.Представление, """") КАК НаименованиеВидаНоменклатуры,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.ТипНоменклатуры, ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПустаяСсылка)) КАК ТипНоменклатуры,
	|	ТоварыДляЗапроса.Характеристика КАК Характеристика,
	|	ТоварыДляЗапроса.НаименованиеХарактеристики КАК НаименованиеХарактеристики,
	|	ТоварыДляЗапроса.Упаковка КАК Упаковка,
	|	ТоварыДляЗапроса.НаименованиеУпаковки КАК НаименованиеУпаковки,
	|	ТоварыДляЗапроса.Серия КАК Серия,
	|	ТоварыДляЗапроса.НаименованиеСерии КАК НаименованиеСерии,
	|	ТоварыДляЗапроса.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТоварыДляЗапроса.НаименованиеЕдиницыИзмерения КАК НаименованиеЕдиницыИзмерения,
	|	ЕСТЬNULL(&Коэффициент1, 1) КАК Коэффициент,
	|	ЕСТЬNULL(&Коэффициент2, 1) КАК КоэффициентЕдиницыИзмеренияВеса,
	|	ЕСТЬNULL(&Коэффициент3, 1) КАК КоэффициентЕдиницыИзмеренияОбъема,
	|	&ВесУпаковки КАК ВесУпаковки,
	|	&ОбъемУпаковки КАК ОбъемУпаковки,
	|	ЕСТЬNULL(ТчНоменклатура.ВесЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияВеса,
	|	ЕСТЬNULL(ТчНоменклатура.ВесЕдиницаИзмерения.Представление, """") КАК НаименованиеЕдиницыИзмеренияВеса,
	|	ЕСТЬNULL(ТчНоменклатура.ОбъемЕдиницаИзмерения, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) КАК ЕдиницаИзмеренияОбъема,
	|	ЕСТЬNULL(ТчНоменклатура.ОбъемЕдиницаИзмерения.Представление, """") КАК НаименованиеЕдиницыИзмеренияОбъема,
	|	ТоварыДляЗапроса.ТипИзмеряемойВеличины КАК ТипИзмеряемойВеличины,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.ИспользоватьНомерСерии, ЛОЖЬ) КАК ИспользоватьНомерСерии,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.ИспользоватьСрокГодностиСерии, ЛОЖЬ) КАК ИспользоватьСрокГодностиСерии,
	|	ЕСТЬNULL(ТчНоменклатура.ВидНоменклатуры.ТочностьУказанияСрокаГодностиСерии, ЗНАЧЕНИЕ(Перечисление.ТочностиУказанияСрокаГодности.ПустаяСсылка)) КАК ТочностьУказанияСрокаГодностиСерии,
	|	ТоварыДляЗапроса.Количество КАК Количество
	|ИЗ
	|	ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТчНоменклатура
	|		ПО ТоварыДляЗапроса.Номенклатура = ТчНоменклатура.Ссылка";
	
	ИсточникУпаковки = "ТоварыДляЗапроса.Упаковка";
	ИсточникНоменклатуры = "ТоварыДляЗапроса.Номенклатура";
	ИсточникЕдиницыИзмеренияВеса = "ТчНоменклатура.ВесЕдиницаИзмерения";
	ИсточникЕдиницыИзмеренияОбъема = "ТчНоменклатура.ОбъемЕдиницаИзмерения";
	
	// Подстановка "Коэффициент1" - коэффициент упаковки
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникУпаковки, ИсточникНоменклатуры));
	
	// Подстановка "Коэффициент2" - коэффициент единицы измерения веса номенклатуры
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияВеса, Неопределено));
	
	// Подстановка "Коэффициент3" - коэффициент единицы измерения объема номенклатуры
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Коэффициент3",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(ИсточникЕдиницыИзмеренияОбъема, Неопределено));
	
	// Подстановка "ВесУпаковки"
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВесУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, Ложь));
	
	// Подстановка "ОбъемУпаковки"
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъемУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковки, ИсточникНоменклатуры, Ложь));
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТоварыЯчейки = РезультатЗапроса.Выгрузить();
	
КонецПроцедуры

// Возвращает значение реквизита по ссылке на объект.
//
// Параметры:
//	Ссылка - СправочникСсылка, ДокументСсылка - ссылка на объект, элемент справочника, документ,
//	ИмяРеквизита - Строка.
//
// Возвращаемое значение:
//	Произвольный.
//
Функция ЗначениеРеквизита(Ссылка, ИмяРеквизита)
	
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
	Возврат Наименование;
	
КонецФункции

// Возвращает наименование объекта документа складского задания.
//
// Параметры:
//	ТипЗадания - Строка - тип складского задания.
//
// Возвращаемое значение:
//	Строка - наименование объекта документа складского задания.
//
Функция ИмяДокумента(ТипЗадания)
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		
		ИмяДокумента = "ОтборРазмещениеТоваров";
		
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		ИмяДокумента = "ПриходныйОрдерНаТовары";
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		ИмяДокумента = "ПересчетТоваров";
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		ИмяДокумента = "РасходныйОрдерНаТовары";
	КонецЕсли;
	
	Возврат ИмяДокумента;
	
КонецФункции

// Возвращает признак указания серий по факту отбора.
//
// Параметры:
//	СтатусУказанияСерий - Число - статус указания серий.
//
// Возвращаемое значение:
//	Булево - Истина, серии указываются по факту отбора.
//
Функция СерииУказываютсяПоФактуОтбора(СтатусУказанияСерий)
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(3);
	МассивСтатусов.Добавить(4);
	
	Возврат Не (МассивСтатусов.Найти(СтатусУказанияСерий) = Неопределено);
	
КонецФункции

// Возвращает идентификатор ссылки документа по имени объекта.
//
// Параметры:
//	ИдСтрокой - Строка - идентификатор документа складского задания,
//	ИмяДокумента - Строка- имя объекта документа складского задания.
//
// Возвращаемое значение:
//	ДокументСсылка
//
Функция СсылкаДокумента(ИдСтрокой, ИмяДокумента)
	
	ИдДокумента = Новый УникальныйИдентификатор(ИдСтрокой);
	СсылкаДокумента = Документы[ИмяДокумента].ПолучитьСсылку(ИдДокумента);
	
	Возврат СсылкаДокумента;
	
КонецФункции

// Возвращает идентификатор ссылки документа складского задания по типу складской операции.
//
// Параметры:
//	ИдЗадания - Строка - идентификатор документа складского задания,
//	ТипЗадания - Строка- тип складского задания.
//
// Возвращаемое значение:
//	УникальныйИдентификатор - идентификатор ссылки документа складского задания.
//
Функция СсылкаЗадания(ИдЗадания, ТипЗадания)
	
	Если ТипЗадания = "Отбор"
		Или ТипЗадания = "Размещение"
		Или ТипЗадания = "Перемещение" Тогда
		Задание = СсылкаДокумента(ИдЗадания, "ОтборРазмещениеТоваров");
	ИначеЕсли ТипЗадания = "Приемка" Тогда
		Задание = СсылкаДокумента(ИдЗадания, "ПриходныйОрдерНаТовары");
	ИначеЕсли ТипЗадания = "Пересчет" Тогда
		Задание = СсылкаДокумента(ИдЗадания, "ПересчетТоваров");
	ИначеЕсли ТипЗадания = "ПроверкаОтбора" Тогда
		Задание = СсылкаДокумента(ИдЗадания, "РасходныйОрдерНаТовары");
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

// Возвращает идентификатор ссылки справочника по имени объекта.
//
// Параметры:
//	ИдСтрокой - Строка - идентификатор справочника,
//	ИмяСправочника - Строка- имя объекта справочника.
//
// Возвращаемое значение:
//	СправочникСсылка - идентификатор ссылки справочника.
//
Функция СсылкаСправочника(ИдСтрокой, ИмяСправочника) Экспорт
	
	ИдСправочника = Новый УникальныйИдентификатор(ИдСтрокой);
	СсылкаСправочника = Справочники[ИмяСправочника].ПолучитьСсылку(ИдСправочника);
	
	Возврат СсылкаСправочника;
	
КонецФункции

// Удаляет строки в'ОтсканированныеТовары', значения которых в колонке 'Количество' равно 0.
//
// Параметры:
//	ОтсканированныеТовары - ТаблицаЗначений.
//
Процедура УдалитьПустыеСтрокиОтсканированныеТовары(ОтсканированныеТовары)
	
	Отбор = Новый Структура("КоличествоУпаковок", 0);
	МассивПустыхСтрок = ОтсканированныеТовары.НайтиСтроки(Отбор);
	
	Для Каждого ПустаяСтрока Из МассивПустыхСтрок Цикл
		ОтсканированныеТовары.Удалить(ПустаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, является ли данная номенклатура тарой.
//
// Параметры:
//	СтруктураДанных - ДанныеФормыСтруктура, Структура -
//
// Возвращаемое значение:
//	Булево - Истина, номенклатура является тарой.
//
Функция ЭтоТара(СтруктураДанных)
	
	Возврат (СтруктураДанных.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
КонецФункции

Функция ПолноеИмяСервиса(Знач ИмяСервиса, Знач ВерсияСервиса = "")

	Если ЗначениеЗаполнено(ВерсияСервиса) Тогда
		ЧастиВерсии = СтрРазделить(ВерсияСервиса,".",Ложь);
		ЧастиВерсии.Вставить(0,ИмяСервиса);
		ИмяСервиса = СтрСоединить(ЧастиВерсии,"_");
	КонецЕсли; 
	
	Возврат ИмяСервиса;

КонецФункции // ПолноеИмяСервиса()

#КонецОбласти

#Область Конструкторы

// ++ Локализация

// Возвращаемое значенние:
//	ЗначениеШтрихкода - Строка.
Функция НовыйМаркировкаВерхнегоУровня()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ЗначениеШтрихкода", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Возврат Результат;
	
КонецФункции

// Возвращаемое значенние:
//	*ЗначениеШтрихкода - Строка
//	*РодительскаяУпаковкаМаркировкиЗначениеШтрихкода - Строка
//	*ТипУпаковкиМаркировки - ПеречислениеСсылка.ТипыУпаковок
//	*Номенклатура - СправочникСсылка.Номенклатура
//	*Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//	*Серия - СправочникСсылка.СерииНоменклатуры
//	*Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//	*Количество - Число
//	*НаименованиеНоменклатуры - Строка.
Функция НовыйМаркировкаДетализированная()

	ТипСтрокаШтрихкод = ОбщегоНазначения.ОписаниеТипаСтрока(200);
	ТипСтрокаНаименование = ОбщегоНазначения.ОписаниеТипаСтрока(150);
	ТипУпаковки = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок");
	ТипНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ТипХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ТипСерия = Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры");
	ТипУпаковка = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	ТипКоличество = ОбщегоНазначения.ОписаниеТипаЧисло(12,2,ДопустимыйЗнак.Неотрицательный);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ЗначениеШтрихкода", ТипСтрокаШтрихкод);
	Результат.Колонки.Добавить("РодительскаяУпаковкаМаркировкиЗначениеШтрихкода", ТипСтрокаШтрихкод);
	Результат.Колонки.Добавить("ТипУпаковкиМаркировки", ТипУпаковки);
	Результат.Колонки.Добавить("Номенклатура", ТипНоменклатура);
	
	Результат.Колонки.Добавить("Характеристика", ТипХарактеристика);
	Результат.Колонки.Добавить("Серия", ТипСерия);
	Результат.Колонки.Добавить("Упаковка", ТипУпаковка);
	Результат.Колонки.Добавить("Количество", ТипКоличество);
	
	Результат.Колонки.Добавить("НаименованиеНоменклатуры", ТипСтрокаНаименование);
	
	Возврат Результат;
	
КонецФункции

// -- Локализация

#КонецОбласти

#КонецОбласти