#Область ПрограммныйИнтерфейс

// Код процедур и функций

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#Область СобытияЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриВыбореЭлемента(Форма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриАктивизацииЯчейки(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события элемента.
//
Процедура ПриНачалеРедактирования(Форма, Элемент, НоваяСтрока, Копирование, ДополнительныеПараметры) Экспорт
	
	//++ НЕ ГОСИС
	
	//-- НЕ ГОСИС
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора номенклатуры.
//
// Параметры:
//  ОповещениеПриЗавершении - ОписаниеОповещения - Метод формы, который обрабатывает событие выбора.
//  ВыбранноеЗначение       - ОпределяемыйТип.Номенклатура - Результат выбора.
//  ИсточникВыбора          - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
Процедура ОбработкаВыбораНоменклатуры(ОповещениеПриЗавершении, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Если ТипЗнч(ОповещениеПриЗавершении.Модуль) = Тип("ФормаКлиентскогоПриложения") Тогда
		ОповещениеПриЗавершении.Модуль.Модифицированность = Истина;
	КонецЕсли;
	Если СтрНачинаетсяС(ИсточникВыбора.ИмяФормы, "Справочник.Номенклатура") Тогда
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока          - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения   - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
//  ПараметрыЗаполнения    - Неопределено,
//                           См. ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти - 
Процедура ПриИзмененииНоменклатуры(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий = Неопределено,
	ПараметрыЗаполнения = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Характеристика") Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу",
			ТекущаяСтрока.Характеристика);
			
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Серия")
			И ПараметрыУказанияСерий <> Неопределено Тогда
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
			Новый Структура("Номенклатура", "ТипНоменклатуры"));
			
		ПараметрыУказанияСерийКопия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыУказанияСерий, Ложь);
		Если ПараметрыУказанияСерийКопия.Свойство("Товары") Тогда
			ПараметрыУказанияСерийКопия = ПараметрыУказанияСерийКопия.Товары;
		КонецЕсли;
	
		Склад = Неопределено;
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
			Новый Структура("ПараметрыУказанияСерий, Склад", ПараметрыУказанияСерийКопия, Склад));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ЕдиницаИзмерения") Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЕдиницаИзмерения", Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	Если ИнтеграцияИСУТКлиентСервер.ТребуетсяЗаполнениеПродукцииСАТУРН(Форма, ТекущаяСтрока) Тогда
		СтруктураДействий.Вставить("ЗаполнитьПродукциюСАТУРН");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоВУпаковкеСАТУРН") Тогда
		
		Если ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН
			И Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоСАТУРН") Тогда
			ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН = Ложь;
		КонецЕсли;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		ПараметрыВыполнения.Вставить("ЕстьТипИзмеряемойВеличины",
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипИзмеряемойВеличиныСАТУРН"));
		
		СтруктураДействий.Вставить("ПересчитатьТипИзмеряемойВеличиныСАТУРН", ПараметрыВыполнения);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоУпаковок") 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоДляСАТУРН", ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Количество() > 0 Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму подбора номенклатуры.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки подбора,
//  ОповещениеПриЗавершении - ОписаниеОповещения - процедура, вызываемая после закрытия формы подбора.
Процедура ОткрытьФормуПодбораНоменклатуры(Форма, ОповещениеПриЗавершении = Неопределено) Экспорт
	
	ОсобенностьУчета = ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН");
	
	ТипЗначенияСсылки = ТипЗнч(Форма.Объект.Ссылка);
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Форма.Объект.Ссылка);
	Иначе
		Если ТипЗначенияСсылки = Тип("ДокументСсылка.АктИнвентаризацииСАТУРН") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт инвентаризации ФГИС ""Сатурн""'"));
		ИначеЕсли ТипЗначенияСсылки = Тип("ДокументСсылка.АктПримененияСАТУРН") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Акт применения ФГИС ""Сатурн""'"));
		ИначеЕсли ТипЗначенияСсылки = Тип("ДокументСсылка.ЗапросОстатковПартийСАТУРН") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Запрос остатков партий ФГИС ""Сатурн""'"));
		ИначеЕсли ТипЗначенияСсылки = Тип("ДокументСсылка.ИмпортПродукцииСАТУРН") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Импорт продукции ФГИС ""Сатурн""'"));
		ИначеЕсли ТипЗначенияСсылки = Тип("ДокументСсылка.НакладнаяСАТУРН") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Накладная ФГИС ""Сатурн""'"));
		ИначеЕсли ТипЗначенияСсылки = Тип("ДокументСсылка.ПланПримененияСАТУРН") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='План применения ФГИС ""Сатурн""'"));
		ИначеЕсли ТипЗначенияСсылки = Тип("ДокументСсылка.ПроизводственнаяОперацияСАТУРН") Тогда
			ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru='Производственная операция ФГИС ""Сатурн""'"));
		КонецЕсли;
	КонецЕсли;
	
	ЗапрашиватьКоличество = ТипЗначенияСсылки <> Тип("ДокументСсылка.ЗапросОстатковПартийСАТУРН");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОсобенностьУчета",                        ОсобенностьУчета);
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Не ЗапрашиватьКоличество);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Не ЗапрашиватьКоличество);
	ПараметрыФормы.Вставить("Заголовок",                               ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                    Форма.Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                Форма.Объект.Ссылка);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                  Истина);
	
	ОткрытьФорму(
		"Обработка.ПодборТоваровВДокументПродажи.Форма",
		ПараметрыФормы,
		Форма,
		Форма.УникальныйИдентификатор,,,
		ОповещениеПриЗавершении);
	
КонецПроцедуры

// Обрабатывает результат выбора в форму документа САТУРН (например из формы подбора номенклатуры,
//   при использовании множественного выбора вместо закрытия формы подбора с общим результатом).
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой вызывается команда открытия обработки сопоставления,
//  ВыбранноеЗначение - Произвольный - результат выбора.
//  ИсточникВыбора    - ФормаКлиентскогоПриложения - форма, в которой произведен выбор.
Процедура ОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Открывает форму создания номенклатуры.
//
// Параметры:
//  Форма                 - ФормаКлиентскогоПриложения - форма, в которой вызывается команда создания номенклатуры,
//  ПараметрыНоменклатуры - См. ИнтеграцияСАТУРНВызовСервера.ПараметрыСозданияНоменклатуры
Процедура ОткрытьФормуСозданияНоменклатуры(Форма, ПараметрыНоменклатуры) Экспорт
	
	ОсобенностьУчета = Новый Массив;
	ОсобенностьУчета.Добавить(ПредопределенноеЗначение("Перечисление.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияСАТУРН"));
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ДополнительныеПараметры", ПараметрыНоменклатуры);
	
	ПараметрыФормы.Вставить("ОсобенностьУчета", ОсобенностьУчета);
	ПараметрыФормы.Вставить("ТипНоменклатуры",  ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормы, Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

// Выполняется при начале выбора характеристики. Требуется определить и открыть форму выбора.
//
// Параметры:
//  Владелец     - ФормаКлиентскогоПриложения            - форма, в которой вызывается команда выбора характеристики.
//  ДанныеСтроки - ДанныеФормыЭлементКоллекции - текущие данные строки таблицы товаров откуда производится выбор.
//  СтандартнаяОбработка - Булево - Выключается в переопределении
//  ИмяКолонкиНоменклатура - Строка - имя колонки с данными номенклатуры.
//  Описание - ОписаниеОповещения - Вызывается при выборе значения в форме выбора.
//
Процедура ПриНачалеВыбораХарактеристики(
	Владелец, ДанныеСтроки, СтандартнаяОбработка, ИмяКолонкиНоменклатура="Номенклатура", Описание=Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыХарактеристики = Новый Структура;
	ПараметрыХарактеристики.Вставить("Номенклатура", ДанныеСтроки[ИмяКолонкиНоменклатура]);
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.ФормаВыбора", ПараметрыХарактеристики, Владелец,,,, Описание);
	
КонецПроцедуры

// Выполняет действия при изменении характеристики номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока        - ДанныеФормыЭлементКоллекции - текущие данные редактируемой строки таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
Процедура ПриИзмененииХарактеристики(Форма, ТекущаяСтрока, КэшированныеЗначения) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ИнтеграцияИСУТКлиентСервер.ТребуетсяЗаполнениеПродукцииСАТУРН(Форма, ТекущаяСтрока) Тогда
		СтруктураДействий.Вставить("ЗаполнитьПродукциюСАТУРН");
	КонецЕсли;
	
	Если СтруктураДействий.Количество() > 0 Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

// Выполняет действия при изменении серии номенклатуры в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке,
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы
Процедура ПриИзмененииСерии(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий) Экспорт
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение = ТекущаяСтрока.Серия;
	
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	Если Форма.ИмяФормы = "Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаДокумента" Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "НомерПартии") Тогда
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий.Товары, ВыбранноеЗначение);
		Иначе
			НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий.Сырье, ВыбранноеЗначение);
		КонецЕсли;
	Иначе
		НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ПараметрыУказанияСерий, ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	Если ИнтеграцияИСУТКлиентСервер.ТребуетсяЗаполнениеПродукцииСАТУРН(Форма, ТекущаяСтрока) Тогда
		СтруктураДействий.Вставить("ЗаполнитьПродукциюСАТУРН");
	КонецЕсли;
	
	Если СтруктураДействий.Количество() > 0 Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Выполняется при обработке выбора. Требуется выделить и обработать событие выбора серии.
// 
// Параметры:
//  Форма                  - ФормаКлиентскогоПриложения - Форма для которой требуется обработать событие выбора.
//  ВыбранноеЗначение      - ОпределяемыйТип.СерияНоменклатуры - результат выбора.
//  ИсточникВыбора         - ФормаКлиентскогоПриложения - Форма, в которой произведен выбор.
//  ПараметрыУказанияСерий - ФиксированнаяСтруктура - параметры указаний серий формы.
Процедура ОбработкаВыбораСерии(Форма, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий) Экспорт
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		НоменклатураКлиент.ОбработатьУказаниеСерии(Форма, ИсточникВыбора.ПараметрыУказанияСерий, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Упаковки

// Выполняет действия при изменении упаковки в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//  ПараметрыЗаполнения  - Неопределено,
//                         См. ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииУпаковки(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоВУпаковкеСАТУРН") Тогда
		
		Если ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН
			И Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоСАТУРН") Тогда
			ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН = Ложь;
		КонецЕсли;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		ПараметрыВыполнения.Вставить("ЕстьТипИзмеряемойВеличины",
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипИзмеряемойВеличиныСАТУРН"));
		
		СтруктураДействий.Вставить("ПересчитатьТипИзмеряемойВеличиныСАТУРН", ПараметрыВыполнения);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоУпаковок") 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
			СтруктураДействий.Вставить("ПересчитатьКоличествоДляСАТУРН", ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Количество() > 0 Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия при изменении типа измеряемой величины в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//  ПараметрыЗаполнения  - Неопределено,
//                        См. ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииТипаИзмеряемойВеличины(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоВУпаковкеСАТУРН") Тогда
		
		Если ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН
			И Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоСАТУРН") Тогда
			ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН = Ложь;
		КонецЕсли;
		
		ПараметрыВыполнения = Новый Структура;
		ПараметрыВыполнения.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
		ПараметрыВыполнения.Вставить("ЕстьТипИзмеряемойВеличины",
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "ТипИзмеряемойВеличиныСАТУРН"));
		
		СтруктураДействий.Вставить("ПересчитатьТипИзмеряемойВеличиныСАТУРН", ПараметрыВыполнения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Количество() > 0 Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Количество

// Выполняет действия при изменении подобранного количества (поле КоличествоУпаковок) в строке таблицы формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой произошло событие,
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка таблицы товаров,
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//  ПараметрыЗаполнения  - Неопределено,
//                         См. ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти.
Процедура ПриИзмененииКоличестваУпаковок(Форма, ТекущаяСтрока, КэшированныеЗначения, ПараметрыЗаполнения = Неопределено) Экспорт
	
	СтруктураДействий = Новый Структура;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоУпаковок") 
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "Упаковка") Тогда
		
		Если ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН
			И Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, "КоличествоСАТУРН") Тогда
			ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН = Ложь;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоДляСАТУРН", ПараметрыЗаполнения);
		
	КонецЕсли;
	
	Если СтруктураДействий.Количество() > 0 Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОКПД2

Процедура ПриИзмененииОКПД2(Форма, Элемент) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриНачалеВыбораОКПД2(Форма, Элемент, ДанныеВыбора, ТекущееЗначение, СтандартнаяОбработка) Экспорт
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("РежимВыбора",   Истина);
	
	ОткрытьФорму("Справочник.КлассификаторОКПД2.Форма.ФормаСписка",
		ПараметрыВыбора,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ПриОбработкеВыбораОКПД2(Форма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ПриАвтоподбореОКПД2(Форма, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
