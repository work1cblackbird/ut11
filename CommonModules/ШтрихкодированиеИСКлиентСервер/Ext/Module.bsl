#Область ПрограммныйИнтерфейс

// Определяет принадлежность имени объекта к контексту.
//
// Параметры:
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка, ОбработкаМенеджер - контекст.
//  ИмяОбъекта - Строка - Имя объекта.
// Возвращаемое значение:
//  Булево - Истина, если имя объекта принадлежит контексту.
Функция ЭтоКонтекстОбъекта(Контекст, Знач ИмяОбъекта) Экспорт
	
	ДанныеОбъекта = Ложь;
	ЭтоФорма      = Ложь;
	Разделитель   = ".";
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
		Или (ТипЗнч(Контекст) = Тип("Структура") И Контекст.Свойство("ИмяФормы")) Тогда
		
		ЭтоФорма       = Истина;
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Контекст.ИмяФормы, Разделитель);
		ИмяФормы       = МассивПодстрок[0] + Разделитель + МассивПодстрок[1];
		
	Иначе
		
		ДанныеОбъекта         = Истина;
		МассивПодстрок    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяОбъекта, Разделитель);
		
		Если МассивПодстрок[0] <> "Документ" Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивПодстрок[0] = МассивПодстрок[0] + "Ссылка";
		ИмяОбъекта = СтрСоединить(МассивПодстрок, Разделитель);
		
	КонецЕсли;
	
	Возврат ЭтоФорма И ИмяФормы = ИмяОбъекта Или ДанныеОбъекта И ТипЗнч(Контекст.Ссылка) = Тип(ИмяОбъекта);
	
КонецФункции

// Включает в параметрах сканирования обработку штрихкодов номенклатуры, не относящейся к библиотеке
// 
// Параметры:
//   ПараметрыСканирования - см. БазовыеПараметрыСканирования
//
Процедура ВключитьПоддержкуПрочейПродукции(ПараметрыСканирования) Экспорт
	
	ПараметрыСканирования.ДопустимыеВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПустаяСсылка"));
	
КонецПроцедуры

// Заполняет параметры сканирования по контексту.
//
// Параметры:
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  Контекст - ФормаКлиентскогоПриложения, ДокументСсылка, СправочникСсылка, ОбработкаМенеджер - контекст.
Процедура ЗаполнитьПараметрыСканирования(ПараметрыСканирования, Контекст) Экспорт
	
	ПараметрыСканирования.Вставить("ДетализацияСтруктурыХранения", ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияИС.ПустаяСсылка"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет обработку и кэширование выбора данных после уточнения информации по продукции в диалоговом окне.
//
// Параметры:
//  Форма           - ФормаКлиентскогоПриложения - источник вызова.
//  ДанныеВыбора    - Структура                  - Данные сохраненного выбора.
//  ЗапомнитьВыбор  - Булево                     - Истина, если необходимо запомнить выбор.
//
Процедура ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(Форма, Знач ДанныеВыбора, Знач ЗапомнитьВыбор = Неопределено) Экспорт

	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДанныеВыбораПоМаркируемойПродукции") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗапомнитьВыбор = Неопределено Тогда
		// В качестве данных выбора пришли данные штрихкода после обработки
		Если ДанныеВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// Разбор пришедшей структуры на составляющие Данные выбора / Запомнить выбор
		ДанныеВыбора = ДанныеВыбора.ДополнительныеПараметры;
		Если ТипЗнч(ДанныеВыбора) <> Тип("Структура") Тогда
			Возврат;
		ИначеЕсли Не ДанныеВыбора.Свойство("ЗапомнитьВыбор", ЗапомнитьВыбор) Тогда
			Возврат;
		ИначеЕсли ЗапомнитьВыбор И Не ДанныеВыбора.Свойство("ДанныеВыбора", ДанныеВыбора) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗапомнитьВыбор Тогда
		Если ДанныеВыбора.ТребуетВзвешивания
			Или ДанныеВыбора.ЧастичноеВыбытие
			Или ДанныеВыбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет") Тогда
			ДанныеВыбора.Удалить("Количество");
		КонецЕсли;
		Форма.ДанныеВыбораПоМаркируемойПродукции = ДанныеВыбора;
	Иначе 
		Форма.ДанныеВыбораПоМаркируемойПродукции = Неопределено;
		Если ТипЗнч(ДанныеВыбора) = Тип("Структура")
			И ДанныеВыбора.Свойство("ДополнительныеПараметры") Тогда
			Если ДанныеВыбора.ДополнительныеПараметры.Свойство("ЗапомнитьВыбор") Тогда
				ДанныеВыбора.ДополнительныеПараметры.Удалить("ЗапомнитьВыбор");
			КонецЕсли;
			Если ДанныеВыбора.ДополнительныеПараметры.Свойство("ДанныеВыбора") Тогда
				ДанныеВыбора.ДополнительныеПараметры.Удалить("ДанныеВыбора");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Форма.СохраненВыборПоМаркируемойПродукции = ЗапомнитьВыбор;
	ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
	
КонецПроцедуры

// Формирует представление сохраненного выбора маркируемой продукции после уточнения информации в диалоговом окне.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма для отображения настроек
Процедура ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("ГруппаПредставлениеСохраненногоВыбора") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = Форма.ДанныеВыбораПоМаркируемойПродукции;
	ОбщаяДлина = 0;
	ДлинаСтроки = 90;
	Если Не Форма.СохраненВыборПоМаркируемойПродукции Тогда
		
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Ложь;
		
	Иначе
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Сохранен выбор:'"));
		МассивСтрок.Добавить(" ");
		
		ОбщаяДлина = СтрДлина(МассивСтрок[0]) + 1;
		ТребуетсяЗапятая = Ложь;
		Если ДанныеВыбора.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Номенклатура), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		ИначеЕсли ДанныеВыбора.Свойство("ПредставлениеНоменклатуры") И ЗначениеЗаполнено(ДанныеВыбора.ПредставлениеНоменклатуры) Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ДанныеВыбора.ПредставлениеНоменклатуры,,
				Форма.ЦветТекстаПоля,, "ОткрытьНоменклатуру"));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Характеристика") И ЗначениеЗаполнено(ДанныеВыбора.Характеристика) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Характеристика), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьХарактеристику"));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("Серия") И ЗначениеЗаполнено(ДанныеВыбора.Серия) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.Серия), Ложь),,
				Форма.ЦветТекстаПоля,, "ОткрытьСерию"));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ПричинаПеремаркировки")
			И ЗначениеЗаполнено(ДанныеВыбора.ПричинаПеремаркировки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			ТекстПредставления = СтрШаблон("причина: %1", ДанныеВыбора.ПричинаПеремаркировки);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстПредставления,,));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ДобавлятьНовуюУпаковку") И ДанныеВыбора.ДобавлятьНовуюУпаковку Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'добавлять пустые упаковки'"),,));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
				
		Если ДанныеВыбора.Свойство("ШаблонЭтикетки") И ЗначениеЗаполнено(ДанныеВыбора.ШаблонЭтикетки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			ТекстПредставления = СтрШаблон("шаблон этикетки: %1", ДанныеВыбора.ШаблонЭтикетки);
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ТекстПредставления,, Форма.ЦветТекстаПоля,, "ОткрытьШаблонЭтикетки"));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("СразуНаПринтер") И ДанныеВыбора.СразуНаПринтер Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'сразу на принтер'"),,));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ИдентификаторПроисхожденияВЕТИС") И ЗначениеЗаполнено(ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				ИнтеграцияИСКлиентСервер.ПредставлениеНаименования(Строка(ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС), Ложь),,
				Форма.ЦветТекстаПоля,, ПолучитьНавигационнуюСсылку(ДанныеВыбора.ИдентификаторПроисхожденияВЕТИС)));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ГоденДо") Тогда
			Если ЗначениеЗаполнено(ДанныеВыбора.ГоденДо) Тогда
				Если ТребуетсяЗапятая Тогда
					МассивСтрок.Добавить(", ");
					ДлинаСтроки = ДлинаСтроки + 2;
				КонецЕсли;
				ПредставлениеСрокаГодности = ?(ДанныеВыбора.Свойство("СкоропортящаясяПродукция") И ДанныеВыбора.СкоропортящаясяПродукция,
					Формат(ДанныеВыбора.ГоденДо, "ДФ='dd.MM.yyyy HH '; ДЛФ=;"), Формат(ДанныеВыбора.ГоденДо, "ДФ='dd.MM.yyyy'; ДЛФ=;"));
				МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'Срок годности: %1'"), ПредставлениеСрокаГодности));
				ТребуетсяЗапятая = Истина;
				ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
			ИначеЕсли ДанныеВыбора.Свойство("СохраненВыборПустогоСрокаГодности")
				И ДанныеВыбора.СохраненВыборПустогоСрокаГодности Тогда
				Если ТребуетсяЗапятая Тогда
					МассивСтрок.Добавить(", ");
					ДлинаСтроки = ДлинаСтроки + 2;
				КонецЕсли;
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Срок годности: <не указан>'"),,));
				ТребуетсяЗапятая = Истина;
				ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ВидУпаковки")
			И ДанныеВыбора.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.ОбъемноСортовойУчет")
			И ДанныеВыбора.Свойство("КодМаркировки")
			И ЗначениеЗаполнено(ДанныеВыбора.КодМаркировки) Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'учитывать как ОСУ'"),,));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		Если ДанныеВыбора.Свойство("ОбработатьБезМаркировки") И ДанныеВыбора.ОбработатьБезМаркировки Тогда
			Если ТребуетсяЗапятая Тогда
				МассивСтрок.Добавить(", ");
				ДлинаСтроки = ДлинаСтроки + 2;
			КонецЕсли;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'без КМ'"),,));
			ТребуетсяЗапятая = Истина;
			ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок);
		КонецЕсли;
		
		МассивСтрок.Добавить(". ");
		Если ОбщаяДлина > 80 Тогда
			МассивСтрок.Добавить(Символы.ПС);
		КонецЕсли;
		МассивСтрок.Добавить("(");
		
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Сбросить'"),
				Новый Шрифт(,,,,Истина),
				Форма.ЦветГиперссылки,,
				"СброситьСохраненныеДанныеВыбораПоМаркируемойПродукции"));
		
		МассивСтрок.Добавить(")");
		
		Форма.ПредставлениеСохраненногоВыбора = Новый ФорматированнаяСтрока(МассивСтрок);
		Элементы.ПредставлениеСохраненногоВыбора.Высота = СтрЧислоВхождений(Форма.ПредставлениеСохраненногоВыбора, Символы.ПС) + 1;
		Элементы.ПредставлениеСохраненногоВыбора.РастягиватьПоВертикали = Ложь;
		Элементы.ГруппаПредставлениеСохраненногоВыбора.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на формат GS1. Если штрихкод является штрихкодом GS1 - приводит к формату со скобками.
//
// Параметры:
//  Штрихкод - Строка - Значение штрихкода.
// Возвращаемое значение:
//  Строка - Значение штрихкода.
Функция ШтрихкодВФорматеGS1(Штрихкод) Экспорт
	
	ЧтениеШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
	Если Не ЧтениеШтрихкода.Результат = Неопределено Тогда
		
		Если ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		ИначеЕсли ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128")
			Или ЧтениеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
			
			ШтрихкодGS1 = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ЧтениеШтрихкода.Результат, Истина);
			Возврат ШтрихкодGS1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Штрихкод;
	
КонецФункции

// Вычисляет GCP из GTIN.
// 
// Параметры:
//  Штрихкод - Строка - GTIN.
// Возвращаемое значение:
//  Строка - Вычисленное значение GCP.
Функция GCPизGTIN(Знач Штрихкод) Экспорт
	
	ШтрихкодEAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(Штрихкод);
	GCP = Лев(ШтрихкодEAN, 7);
	
	Возврат GCP;
	
КонецФункции

Функция ВидыУпаковокДляПередачиОтчетаОНанесении() Экспорт
	
	Результат = Новый Соответствие();
	
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская"), Истина);
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая"),       Истина);
	Результат.Вставить(ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Набор"),           Истина);
	
	Возврат Результат;

КонецФункции

// Возвращает структуру данных RFID.
// 
// Параметры:
//  СырыеДанные - Неопределено, Структура - данные инициализации
// 
// Возвращаемое значение:
//  Структура -Инициализировать данные RFID:
// * TID - Строка - TID
// * EPC - Строка - Значение EPC в виде HEX строки
// * EPC_BIN - Строка - Значение EPC в виде бинарной строки
// * Формат - Строка - Распознанный формат данных SGTIN-96 или SGTIN-198
// * GTIN - Строка - GTIN
// * URI - Строка - EPC Tag URI
// * RFIDМеткаНеЧитаемая - Булево - Метка не читаемая
Функция ИнициализироватьДанныеRFID(СырыеДанные = Неопределено) Экспорт
	
	ДанныеRFID = Новый Структура;
	
	ДанныеRFID.Вставить("TID", "");
	ДанныеRFID.Вставить("EPC", "");                   // Значение EPC в виде HEX строки
	ДанныеRFID.Вставить("EPC_BIN", "");               // Значение EPC в виде бинарной строки
	ДанныеRFID.Вставить("Формат", "");                // Распознанный формат данных SGTIN-96 или SGTIN-198  
	ДанныеRFID.Вставить("GTIN", "");                  // GTIN
	ДанныеRFID.Вставить("URI", "");                   // EPC Tag URI
	ДанныеRFID.Вставить("RFIDМеткаНеЧитаемая", Ложь); // Метка не читаемая
	
	Если СырыеДанные <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеRFID, СырыеДанные);
		
		РезультатПроверки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ТребуетсяИндивидуализацияRFID(СырыеДанные, СырыеДанные.GTIN);
		Если РезультатПроверки.НужноЗаписатьМетку Тогда
			ДанныеRFID.GTIN = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеRFID;

КонецФункции

Функция СтатусRFID(ДанныеRFID, GTIN) Экспорт
	
	Если ДанныеRFID = Неопределено
		Или Не ЗначениеЗаполнено(ДанныеRFID.TID)
		Или Не ЗначениеЗаполнено(ДанныеRFID.EPC) Тогда
		
		СтатусRFID = 0;
		
	Иначе
		
		ТребуетсяИндивидуализацияRFID = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ТребуетсяИндивидуализацияRFID(ДанныеRFID, GTIN).НужноЗаписатьМетку;
		
		Если ТребуетсяИндивидуализацияRFID Тогда
			СтатусRFID = 1;
		Иначе
			СтатусRFID = 2;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтатусRFID;
	
КонецФункции

Функция DECIMALПредставлениеSGTINRFID(ДанныеRFID) Экспорт
	
	РезультатДекодирования = СтрРазделить(МенеджерОборудованияКлиентСервер.ДекодированиеДанныхSGTIN(ДанныеRFID.EPC).URI, ":");
	DECIMALПредставлениеSGTIN = РезультатДекодирования[РезультатДекодирования.Количество() - 1];
	
	Возврат DECIMALПредставлениеSGTIN;
	
КонецФункции

Функция ТребуетсяСброситьСохраненныйВыбор(ДанныеВыбора, ДанныеШтрихкода) Экспорт
	
	Если ДанныеВыбора = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ЗначениеЗаполнено(ДанныеВыбора.GTIN)
			И (Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(ДанныеШтрихкода.GTIN) Или Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура))
			И ДанныеШтрихкода.GTIN <> ДанныеВыбора.GTIN Тогда
		Возврат Истина;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		Если ДанныеШтрихкода.Номенклатура <> ДанныеВыбора.Номенклатура Тогда
			Возврат Истина;
		ИначеЕсли ДанныеШтрихкода.Характеристика <> ДанныеВыбора.Характеристика Тогда
			Возврат Истина;
		ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.Серия) И ДанныеШтрихкода.Серия <> ДанныеВыбора.Серия Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ДанныеВыбора.ОбработатьБезМаркировки И ДанныеШтрихкода.СоставКодаМаркировки <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Проверка однородности состава кода маркировки
	СохраненныеПоля = ПроверяемыеПоляСоставаКодаМаркировки();
	СохраненныйСостав = ДанныеВыбора.СоставКодаМаркировки;
	Если СохраненныйСостав <> Неопределено Тогда
		Для Каждого Признак Из СохраненныеПоля Цикл
			СохраненныеПоля[Признак.Ключ] = СохраненныйСостав.Свойство(Признак.Ключ) И ЗначениеЗаполнено(СохраненныйСостав[Признак.Ключ]);
		КонецЦикла;
	КонецЕсли;
	ВходящиеПоля = ПроверяемыеПоляСоставаКодаМаркировки();
	ВходящийСостав = ДанныеШтрихкода.СоставКодаМаркировки;
	Если ВходящийСостав <> Неопределено Тогда
		Для Каждого Признак Из ВходящиеПоля Цикл
			ВходящиеПоля[Признак.Ключ] = ВходящийСостав.Свойство(Признак.Ключ) И ЗначениеЗаполнено(ВходящийСостав[Признак.Ключ]);
		КонецЦикла;
	КонецЕсли;
	Для Каждого Признак Из СохраненныеПоля Цикл
		Если Признак.Значение
			И Не (ВходящиеПоля[Признак.Ключ] И СохраненныйСостав[Признак.Ключ]=ВходящийСостав[Признак.Ключ]) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботасСохраненнымВыбором

Функция ПроверяемыеПоляСоставаКодаМаркировки()
	Результат = Новый Структура;
	Результат.Вставить("МРЦСтрокой", Ложь);
	Результат.Вставить("ГоденДо", Ложь);
	Результат.Вставить("СкоропортящаясяПродукция", Ложь);
	Результат.Вставить("КодАлкогольнойПродукции", Ложь);
	Возврат Результат;
КонецФункции

Процедура ДобавитьРазделительСтрок(ДлинаСтроки,ОбщаяДлина,МассивСтрок)
	ДлинаЭлемента = СтрДлина(МассивСтрок[МассивСтрок.ВГраница()]);
	ОбщаяДлина = ОбщаяДлина + ДлинаЭлемента;
	Если ОбщаяДлина > ДлинаСтроки Тогда
		МассивСтрок.Вставить(МассивСтрок.ВГраница(), Символы.ПС);
		ОбщаяДлина = ДлинаЭлемента;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#КонецОбласти
