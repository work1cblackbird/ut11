#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Новая таблица поиска вскрытых потребительских упаковок.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица поиска кодов маркировки на оборудовании розлива:
// * Номенклатура - ОпределяемыйТип.Номенклатура -
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры -
// * Серия - ОпределяемыйТип.СерияНоменклатуры -
// * Количество - Число -
// * УчитыватьСерии - Булево -
// * ИндексИсходнойСтроки - Число -
Функция НоваяТаблицаПоискаВскрытыхПотребительскихУпаковок() Экспорт
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаТовары.Колонки.Добавить("Количество",           ОбщегоНазначения.ОписаниеТипаЧисло(18, 2));
	ТаблицаТовары.Колонки.Добавить("УчитыватьСерии",       Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Колонки.Добавить("ИндексИсходнойСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат ТаблицаТовары;
	
КонецФункции

// Всткрые потребительские упаковки по таблице товаров.
//
// Параметры:
//  ТаблицаТовары - см. НоваяТаблицаПоискаВскрытыхПотребительскихУпаковок
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  ТребуетсяПолныйКодМаркировки - Булево - Требуется полный код маркировки
//  ТолькоПолноеСоответствие - Булево - Искать без учета подменной номенклатуры
//
// Возвращаемое значение:
//  ТаблицаЗначений - Коды маркировки подключенные к оборудованию розлива:
// * Номенклатура - ОпределяемыйТип.Номенклатура -
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры -
// * Серия - ОпределяемыйТип.СерияНоменклатуры -
// * ИндексИсходнойСтроки - Число -
// * Остаток - Число - остаток вскрытой потребительской упаковки в базовых единицах номенклатуры
// * УчитыватьСерии - Булево -
// * ВариантЧастичногоВыбытия - ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС -
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС -
// * КодМаркировки - ОпределяемыйТип.ШтрихкодУпаковкиИС -
// * Комментарий - ОпределяемыйТип.ОборудованиеРозливаИСМП-
// * КодМаркировкиСтрокой - Строка -
// * ПолныйКодМаркировки - Строка -
// * GTIN - ОпределяемыйТип.GTIN - 
Функция ВскрытыеПотребительскиеУпаковкиПоТаблицеТоваров(ТаблицаТовары, ПараметрыСканирования, ТребуетсяПолныйКодМаркировки = Ложь, ТолькоПолноеСоответствие = Ложь) Экспорт
	
	Если ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		Возврат ВскрытыеПотребительскиеУпаковкиРасширенная(ТаблицаТовары, ПараметрыСканирования, ТребуетсяПолныйКодМаркировки, ТолькоПолноеСоответствие);
	Иначе
		Возврат ВскрытыеПотребительскиеУпаковкиРМК(ТаблицаТовары, ПараметрыСканирования, ТолькоПолноеСоответствие);
	КонецЕсли;

КонецФункции

// Возвращает описание вскрытых потребительских упаковок по кодам маркировки.
//
// Параметры:
//   КодМаркировки - ОпределяемыйТип.ШтрихкодУпаковкиИС, Массив Из ОпределяемыйТип.ШтрихкодУпаковкиИС - Код маркировки кега
//   ТребуетсяОстаток - Булево - требуется остаток (выполняется получение остатка по данным выбытия ЕГАИС)
// Возвращаемое значение:
//   Соответствие из КлючИЗначение - вскрытые потребительские упаковки:
//    * Ключ - ОпределяемыйТип.ШтрихкодУпаковкиИС - штрихкод потребительской упаковки
//    * Значение - см. ИнициализироватьДанныеВскрытияПотребительскойУпаковки
Функция ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(КодМаркировки, ТребуетсяОстаток = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(КодМаркировки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоРасширеннаяВерсияГосИС = ОбщегоНазначенияИС.ЭтоРасширеннаяВерсияГосИС();
	Запрос                    = Новый Запрос();
	
	Если ЭтоРасширеннаяВерсияГосИС Тогда
		Запрос.Текст = ТекстЗапросаВскрытыеПотребительскиеУпаковкиПоКодуМаркировки();
	Иначе
		Запрос.Текст = ТекстЗапросаВскрытыеПотребительскиеУпаковкиПоКодуМаркировкиРМК();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("КодМаркировки", КодМаркировки);
	ДанныеУпаковок = Запрос.Выполнить().Выгрузить();
	
	Если ЭтоРасширеннаяВерсияГосИС Тогда
		
		ОтборАлкоголь = Новый Структура("ВидПродукции", Перечисления.ВидыПродукцииИС.Алкогольная);
		АлкогольныеУпаковки = ДанныеУпаковок.Скопировать(ОтборАлкоголь).ВыгрузитьКолонку("КодМаркировки");
	
		Если АлкогольныеУпаковки.Количество() Тогда
			ДанныеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(АлкогольныеУпаковки, "Номенклатура");
			НоменлатураУпаковок = Новый Массив();
			Для Каждого КлючИЗначение Из ДанныеНоменклатуры Цикл
				НоменлатураУпаковок.Добавить(КлючИЗначение.Значение);
			КонецЦикла;
			ОписанияНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(НоменлатураУпаковок);
		КонецЕсли;
	
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ДанныеУпаковок Цикл
		
		ДанныеВскрытия = ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
		ЗаполнитьЗначенияСвойств(ДанныеВскрытия, СтрокаТаблицы);
		Результат.Вставить(СтрокаТаблицы.КодМаркировки, ДанныеВскрытия);
		
		Если ЭтоРасширеннаяВерсияГосИС
			И СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			
			Номенклатура         = ДанныеНоменклатуры[СтрокаТаблицы.КодМаркировки];
			ОписаниеНоменклатуры = ОписанияНоменклатуры[Номенклатура];
			Если ОписаниеНоменклатуры = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеВскрытия.Остаток = ОписаниеНоменклатуры.ЕмкостьПотребительскойУпаковки - СтрокаТаблицы.КоличествоЧастичногоВыбытия;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет данные вскрытия потребительской упаковки.
// Параметр СохраненныеДанные используется для изменения ранее полученных данных при необоходимости.
//
// Параметры:
//   ДанныеПодключения - См. ИнициализироватьДанныеВскрытияПотребительскойУпаковки
//   СохраненныеДанные - Неопределено
//                     - см. ИнициализироватьДанныеВскрытияПотребительскойУпаковки
//
Процедура ЗаписатьВскрытиеПотребительскойУпаковки(ДанныеПодключения, СохраненныеДанные = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СохраненныеДанные = Неопределено Тогда
		КодМаркировки = ДанныеПодключения.КодМаркировки;
	Иначе
		КодМаркировки = СохраненныеДанные.КодМаркировки;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.КодМаркировки.Установить(КодМаркировки, Истина);
	
	Если СохраненныеДанные = Неопределено Тогда
		НаборЗаписей.Прочитать();
	КонецЕсли;
	
	Если НаборЗаписей.Выбран() И СохраненныеДанные = Неопределено Тогда
		
		Если НаборЗаписей.Количество() Тогда
			ЗаписьНабора = НаборЗаписей[0];
		Иначе
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.КодМаркировки = КодМаркировки;
		КонецЕсли;
		
		Для Каждого Реквизит Из Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.Реквизиты Цикл
			ЗаписьНабора[Реквизит.Имя] = ДанныеПодключения[Реквизит.Имя];
		КонецЦикла;
		
		Для Каждого Ресурс Из Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.Ресурсы Цикл
			ЗаписьНабора[Ресурс.Имя] = ДанныеПодключения[Ресурс.Имя];
		КонецЦикла;
		
	ИначеЕсли СохраненныеДанные <> Неопределено Тогда
		
		Если НаборЗаписей.Количество() Тогда
			ЗаписьНабора = НаборЗаписей[0];
		Иначе
			ЗаписьНабора = НаборЗаписей.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, СохраненныеДанные);
		
		Для Каждого Реквизит Из Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.Реквизиты Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПодключения, Реквизит.Имя)
				И ДанныеПодключения[Реквизит.Имя] <> Неопределено Тогда
				ЗаписьНабора[Реквизит.Имя] = ДанныеПодключения[Реквизит.Имя];
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Ресурс Из Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.Ресурсы Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПодключения, Ресурс.Имя)
				И ДанныеПодключения[Ресурс.Имя] <> Неопределено Тогда
				ЗаписьНабора[Ресурс.Имя] = ДанныеПодключения[Ресурс.Имя];
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, ДанныеПодключения);
		
	КонецЕсли;
	
	ЗаписьНабора.Комментарий = СокрЛП(ЗаписьНабора.Комментарий);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Новая таблица отключения кег от оборудования розлива.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Новая таблица отключения кег от оборудования розлива:
// * КодМаркировки    - ОпределяемыйТип.ШтрихкодУпаковкиИС - код маркировки вскрытой потребительской упаковки
// * УчитыватьОстаток - Булево - удалять запись только если нет остатка, иначе - изменить статус
Функция НоваяТаблицаОтключенияВскрытыхПотребительскихУпаковок() Экспорт
	
	ТаблицаКодыМаркировки = Новый ТаблицаЗначений();
	ТаблицаКодыМаркировки.Колонки.Добавить("КодМаркировки",    Метаданные.ОпределяемыеТипы.ШтрихкодУпаковкиИС.Тип);
	ТаблицаКодыМаркировки.Колонки.Добавить("УчитыватьОстаток", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаКодыМаркировки;
	
КонецФункции

// Отключить вскрытые потребительские упаковки.
//
// Параметры:
//  КодыМаркировки - см. НоваяТаблицаОтключенияВскрытыхПотребительскихУпаковок
//
// Возвращаемое значение:
// Структура:
// * ТекстОшибки - Неопределено, Строка - Текст ошибки при наличии
Функция ОтключитьВскрытыеПотребительскиеУпаковки(КодыМаркировки) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТекстОшибки");
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ПолноеИмя());
	ЭлементБлокировки.ИсточникДанных = КодыМаркировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодМаркировки", "КодМаркировки");
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		ДанныеПодключений = ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(КодыМаркировки.ВыгрузитьКолонку("КодМаркировки"));
		
		Для Каждого СтрокаТаблицы Из КодыМаркировки Цикл
			
			ДанныеПодключения = ДанныеПодключений[СтрокаТаблицы.КодМаркировки];
			Если ДанныеПодключения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			УдалитьЗапись = Ложь;
			
			Если (Не ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС()
				Или ДанныеПодключения.СтатусИСМП = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.ПодключеноВоВнешнейСистеме
				Или Не ЗначениеЗаполнено(ДанныеПодключения.ДальнейшееДействие)) Тогда
				
				УдалитьЗапись = Истина;
				
			ИначеЕсли (ДанныеПодключения.СтатусИСМП = Перечисления["СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП"].ПодключеноКОборудованию
				Или ДанныеПодключения.ДальнейшееДействие = Перечисления["ДальнейшиеДействияПоВзаимодействиюИСМП"].НеТребуется) Тогда
				
				Если СтрокаТаблицы.УчитыватьОстаток Тогда
					УдалитьЗапись = (ДанныеПодключения.Остаток <= 0);
				Иначе
					УдалитьЗапись = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если УдалитьЗапись Тогда
				УдалитьВскрытыеПотребительскиеУпаковки(СтрокаТаблицы.КодМаркировки);
			ИначеЕсли ДанныеПодключения.Статус <> Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.Отключено Тогда
				НовыеДанныеПодключения = ИнициализироватьДанныеВскрытияПотребительскойУпаковки();
				НовыеДанныеПодключения.Статус = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.Отключено;
				ЗаписатьВскрытиеПотребительскойУпаковки(НовыеДанныеПодключения, ДанныеПодключения);
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка отключения вскрытой потребительской упаковки:
				       |%1'"),
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'Ошибка отключения вскрытой потребительской упаковки:
				       |%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВозвращаемоеЗначение.ТекстОшибки = ТекстОшибки;
		
		ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстОшибки,
			НСтр("ru = 'ИС МП'", ОбщегоНазначения.КодОсновногоЯзыка()),
			Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС,
			ТекстОшибкиПодробно);
		
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Списки) Экспорт

	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульУправлениеДоступомИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомИСПереопределяемый");
		МодульУправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
			Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС, Списки);
	КонецЕсли;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команды) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	Если ОбщегоНазначенияИСМП.ЭтоРасширеннаяВерсияГосИС() Тогда
		Если ВидФормы = "ФормаСписка" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма       = "ОбщаяФорма.ВскрытыеПотребительскиеУпаковкиИС";
		ИначеЕсли ВидФормы = "ФормаЗаписи" Тогда
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма       = "ОбщаяФорма.ВскрытиеПотребительскойУпаковкиИС";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализировать данные подключения к оборудованию.
//
// Возвращаемое значение:
//  Структура - Инициализировать данные подключения к оборудованию:
// * КодМаркировки - СправочникСсылка.ШтрихкодыУпаковокТоваров -
// * Организация - ОпределяемыйТип.Организация -
// * Подразделение - ОпределяемыйТип.Подразделение -
// * Склад - ОпределяемыйТип.Склад -
// * Комментарий - ОпределяемыйТип.ОборудованиеРозливаИСМП -
// * Статус - ПеречислениеСсылка.СтатусыВскрытыхПотребительскихУпаковокИС -
// * СтатусИСМП - ПеречислениеСсылка.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП -
// * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП -
// * Документ - ДокументСсылка.ПодключениеКегаКОборудованиюРозливаИСМП -
// * КодФИАС - ОпределяемыйТип.УникальныйИдентификаторИС -
// * ОбъемСлива - Число -
// * СрокРеализации - Дата -
// * ДатаПодключения - Дата -
// * ПолныйКодМаркировки - Строка - полный код маркировки (для РМК)
// * Остаток - Число - остаток в кеге по данным информационной базы
// * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции кода маркировки
// * Коэффициент - Число - коэффициент пересчета остатка в базовые единицы номенклатуры
Функция ИнициализироватьДанныеВскрытияПотребительскойУпаковки() Экспорт

	ДанныеПодключения = Новый Структура();
	ДанныеПодключения.Вставить("КодМаркировки");
	ДанныеПодключения.Вставить("Организация");
	ДанныеПодключения.Вставить("Подразделение");
	ДанныеПодключения.Вставить("Склад");
	ДанныеПодключения.Вставить("Комментарий");
	ДанныеПодключения.Вставить("Статус");
	ДанныеПодключения.Вставить("Документ");
	ДанныеПодключения.Вставить("СрокРеализации");
	ДанныеПодключения.Вставить("ДатаПодключения");
	ДанныеПодключения.Вставить("Ответственный");
	ДанныеПодключения.Вставить("АдресПодключения");
	ДанныеПодключения.Вставить("АдресПодключенияСтрокой");
	ДанныеПодключения.Вставить("ОбъемСлива");
	ДанныеПодключения.Вставить("КодФИАС");
	ДанныеПодключения.Вставить("СтатусИСМП");
	ДанныеПодключения.Вставить("ДальнейшееДействие");
	ДанныеПодключения.Вставить("ПолныйКодМаркировки");
	ДанныеПодключения.Вставить("Остаток");
	ДанныеПодключения.Вставить("ВидПродукции");
	ДанныеПодключения.Вставить("Коэффициент", 1);
	
	Возврат ДанныеПодключения;

КонецФункции

Процедура УдалитьВскрытыеПотребительскиеУпаковки(КодМаркировки) Экспорт

	Если ТипЗнч(КодМаркировки) = Тип("Массив") Тогда
		НаборКодовМаркировки = КодМаркировки;
	Иначе
		НаборКодовМаркировки = Новый Массив();
		НаборКодовМаркировки.Добавить(КодМаркировки);
	КонецЕсли;

	Для Каждого ЗначениеКодаМаркировки Из НаборКодовМаркировки Цикл

		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КодМаркировки.Установить(ЗначениеКодаМаркировки, Истина);
		НаборЗаписей.Записать();

	КонецЦикла;

КонецПроцедуры

Функция ВскрытыеПотребительскиеУпаковкиРасширенная(ТаблицаТовары, ПараметрыСканирования, ТребуетсяПолныйКодМаркировки = Ложь, ТолькоПолноеСоответствие = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ИсходнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ИсходнаяТаблицаТовары.Серия                КАК Серия,
		|	ИсходнаяТаблицаТовары.УчитыватьСерии       КАК УчитыватьСерии,
		|	ИсходнаяТаблицаТовары.ИндексИсходнойСтроки КАК ИндексИсходнойСтроки,
		|	ИсходнаяТаблицаТовары.Количество           КАК Количество,
		|	ИсходнаяТаблицаТовары.ИсточникОписания     КАК ИсточникОписания
		|ПОМЕСТИТЬ ИсходнаяТаблицаТовары
		|ИЗ
		|	&Товары КАК ИсходнаяТаблицаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура        КАК Номенклатура,
		|	НастройкиЧастичногоВыбытияПродукцииИС.Характеристика      КАК Характеристика,
		|	ИсходнаяТаблицаТовары.Серия                               КАК Серия,
		|	ИсходнаяТаблицаТовары.УчитыватьСерии                      КАК УчитыватьСерии,
		|	ИсходнаяТаблицаТовары.ИндексИсходнойСтроки                КАК ИндексИсходнойСтроки,
		|	ИсходнаяТаблицаТовары.Количество                          КАК Количество,
		|	ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия           КАК ВариантЧастичногоВыбытия,
		|	ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки     КАК ЕмкостьПотребительскойУпаковки,
		|	ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке КАК КоличествоВПотребительскойУпаковке
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	ИсходнаяТаблицаТовары КАК ИсходнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЧастичногоВыбытияПродукцииИС КАК НастройкиЧастичногоВыбытияПродукцииИС
		|		ПО ИсходнаяТаблицаТовары.Номенклатура = НастройкиЧастичногоВыбытияПродукцииИС.НоменклатураЧастичногоВыбытия
		|		И ИсходнаяТаблицаТовары.Характеристика = НастройкиЧастичногоВыбытияПродукцииИС.ХарактеристикаЧастичногоВыбытия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО НастройкиЧастичногоВыбытияПродукцииИС.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
		|ГДЕ
		|	ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИсходнаяТаблицаТовары.Номенклатура,
		|	ИсходнаяТаблицаТовары.Характеристика,
		|	ИсходнаяТаблицаТовары.Серия,
		|	ИсходнаяТаблицаТовары.УчитыватьСерии,
		|	ИсходнаяТаблицаТовары.ИндексИсходнойСтроки,
		|	ИсходнаяТаблицаТовары.Количество,
		|	ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия,
		|	ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки,
		|	ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке
		|ИЗ
		|	ИсходнаяТаблицаТовары КАК ИсходнаяТаблицаТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|		ПО ИсходнаяТаблицаТовары.ИсточникОписания = ОписаниеНоменклатурыИС.Номенклатура
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &ТолькоПолноеСоответствие
		|			ТОГДА ОписаниеНоменклатурыИС.ВариантЧастичногоВыбытия = ЗНАЧЕНИЕ(Перечисление.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура)
		|			ИНАЧЕ ИСТИНА
		|	КОНЕЦ
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	Товары.Номенклатура                                            КАК Номенклатура,
		|	Товары.Характеристика                                          КАК Характеристика,
		|	ШтрихкодыУпаковокТоваров.Серия                                 КАК Серия,
		|	Товары.ИндексИсходнойСтроки                                    КАК ИндексИсходнойСтроки,
		|	Товары.УчитыватьСерии                                          КАК УчитыватьСерии,
		|	Товары.ВариантЧастичногоВыбытия                                КАК ВариантЧастичногоВыбытия,
		|	Товары.ЕмкостьПотребительскойУпаковки                          КАК ЕмкостьПотребительскойУпаковки,
		|	Товары.КоличествоВПотребительскойУпаковке                      КАК КоличествоВПотребительскойУпаковке,
		|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки                КАК КодМаркировки,
		|	ВскрытыеПотребительскиеУпаковкиИС.Комментарий                  КАК Комментарий,
		|	ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции                 КАК ВидПродукции,
		|	ПРЕДСТАВЛЕНИЕ(ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки) КАК КодМаркировкиСтрокой,
		|	ВЫБОР
		|		КОГДА ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции = &ВидПродукцииАлкоголь
		|			ТОГДА (Товары.ЕмкостьПотребительскойУпаковки - ЕСТЬNULL(АкцизныеМаркиЕГАИС.КоличествоЧастичногоВыбытия, 0))
		|		ИНАЧЕ ВскрытыеПотребительскиеУпаковкиИС.Остаток
		|	КОНЕЦ КАК Остаток
		|ИЗ
		|	РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС КАК ВскрытыеПотребительскиеУпаковкиИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки = ШтрихкодыУпаковокТоваров.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
		|		ПО ШтрихкодыУпаковокТоваров.Номенклатура = Товары.Номенклатура
		|		И ШтрихкодыУпаковокТоваров.Характеристика = Товары.Характеристика
		|		И ВЫБОР
		|			КОГДА Товары.УчитыватьСерии
		|				ТОГДА ШтрихкодыУпаковокТоваров.Серия = Товары.Серия
		|				ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
		|		ПО ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки = АкцизныеМаркиЕГАИС.АкцизнаяМарка
		|		И АкцизныеМаркиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
		|ГДЕ
		|	ВскрытыеПотребительскиеУпаковкиИС.Склад    = &Склад
		|	И ВскрытыеПотребительскиеУпаковкиИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыВскрытыхПотребительскихУпаковокИС.Подключено)
		|	И ВЫБОР
		|		КОГДА ВскрытыеПотребительскиеУпаковкиИС.Организация = &ПустаяОрганизация
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ВскрытыеПотребительскиеУпаковкиИС.Организация = &Организация
		|	КОНЕЦ
		|	И ВЫБОР
		|		КОГДА ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		КОГДА ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции = &ВидПродукцииАлкоголь
		|			ТОГДА (Товары.ЕмкостьПотребительскойУпаковки - ЕСТЬNULL(АкцизныеМаркиЕГАИС.КоличествоЧастичногоВыбытия, 0)) > 0
		|		ИНАЧЕ ВскрытыеПотребительскиеУпаковкиИС.Остаток > 0
		|	КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	ВскрытыеПотребительскиеУпаковкиИС.ДатаПодключения";
	
	ИсточникиОписанияПоНоменклатура = Новый Соответствие();
	
	ДополнительныеОписания = ОбщегоНазначенияИС.ДополнитьИсточникиОписанияНоменклатуры(
		ТаблицаТовары.ВыгрузитьКолонку("Номенклатура"));
	
	Для Каждого КлючИЗначение Из ДополнительныеОписания Цикл
		Для Каждого Номенклатура Из КлючИЗначение.Значение Цикл
			ИсточникиОписанияПоНоменклатура.Вставить(Номенклатура, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаТовары.Колонки.Найти("ИсточникОписания") = Неопределено Тогда
		ТаблицаТовары.Колонки.Добавить("ИсточникОписания", Метаданные.ОпределяемыеТипы["ИсточникОписанияНоменклатурыИС"].Тип);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		ИсточникОписания = ИсточникиОписанияПоНоменклатура[СтрокаТаблицы.Номенклатура];
		Если ИсточникОписания = Неопределено Тогда
			СтрокаТаблицы.ИсточникОписания = СтрокаТаблицы.Номенклатура;
		Иначе
			СтрокаТаблицы.ИсточникОписания = ИсточникОписания;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Товары",                   ТаблицаТовары);
	Запрос.УстановитьПараметр("ТолькоПолноеСоответствие", ТолькоПолноеСоответствие);
	Запрос.УстановитьПараметр("Склад",                    ПараметрыСканирования.Склад);
	Запрос.УстановитьПараметр("Организация",              ПараметрыСканирования.Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация",        ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация"));
	Запрос.УстановитьПараметр("ВидПродукцииАлкоголь",     Перечисления.ВидыПродукцииИС.Алкогольная);
	Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаАлкогольнаяПродукция(ПараметрыСканирования) Тогда
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ПараметрыСканирования.ОрганизацияЕГАИС);
	Иначе
		Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Неопределено);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	ТаблицаКодовМаркировки = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКодовМаркировки.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
	
	Для Каждого СтрокаТаблицы Из ТаблицаКодовМаркировки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ЕмкостьПотребительскойУпаковки)
			И ЗначениеЗаполнено(СтрокаТаблицы.КоличествоВПотребительскойУпаковке)
			И СтрокаТаблицы.ВариантЧастичногоВыбытия = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.ТекущаяНоменклатура Тогда
			Коэффициент = (СтрокаТаблицы.КоличествоВПотребительскойУпаковке / СтрокаТаблицы.ЕмкостьПотребительскойУпаковки);
		Иначе
			Коэффициент = 1;
		КонецЕсли;
		
		СтрокаТаблицы.Остаток = СтрокаТаблицы.Остаток * Коэффициент;
		
		Если СтрокаТаблицы.ВидПродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			СтрокаТаблицы.КодМаркировкиСтрокой,
			?(ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции), СтрокаТаблицы.ВидПродукции, Перечисления.ВидыПродукцииИС.Пиво));
		
		Если ДанныеРазбора <> Неопределено
			И ДанныеРазбора.СоставКодаМаркировки <> Неопределено Тогда
			СтрокаТаблицы.GTIN = ДанныеРазбора.СоставКодаМаркировки.GTIN;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТребуетсяПолныйКодМаркировки Тогда

		МодульШтрихкодированиеИСМП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеИСМП");

		ТаблицаКодовМаркировки.Колонки.Добавить("ПолныйКодМаркировки", Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.Реквизиты.ПолныйКодМаркировки.Тип);

		СтрокиТаблицыПоКодамМаркировки = Новый Соответствие();
		ТаблицаПоиска = МодульШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкивПуле();
		Для Каждого СтрокаТаблицы Из ТаблицаКодовМаркировки Цикл
			СтрокиТаблицыПоКодамМаркировки.Вставить(СтрокаТаблицы.КодМаркировкиСтрокой, СтрокаТаблицы);
			МодульШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
					СтрокаТаблицы.КодМаркировкиСтрокой,
					ТаблицаПоиска);
		КонецЦикла;

		КодыМаркировкиВПуле = МодульШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(ТаблицаПоиска, "ПолныйКодМаркировки");

		Для Каждого СтрокаТаблицы Из КодыМаркировкиВПуле Цикл

			ИсходнаяСтрока = СтрокиТаблицыПоКодамМаркировки[СтрокаТаблицы.КодМаркировки];
			ИсходнаяСтрока.ПолныйКодМаркировки = СтрокаТаблицы.ПолныйКодМаркировки;

		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаКодовМаркировки;

КонецФункции

Функция ВскрытыеПотребительскиеУпаковкиРМК(ТаблицаТовары, ПараметрыСканирования, ТолькоПолноеСоответствие = Ложь)
	
	ВозвращаемоеЗначение = Новый ТаблицаЗначений();
	ВозвращаемоеЗначение.Колонки.Добавить("КодМаркировки",            Метаданные.ОпределяемыеТипы.ШтрихкодУпаковкиИС.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("Номенклатура",             Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("Характеристика",           Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("Серия",                    Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("ИндексИсходнойСтроки",     ОбщегоНазначения.ОписаниеТипаЧисло(3));
	ВозвращаемоеЗначение.Колонки.Добавить("УчитыватьСерии",           Новый ОписаниеТипов("Булево"));
	ВозвращаемоеЗначение.Колонки.Добавить("ВариантЧастичногоВыбытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыУчетаЧастичногоВыбытияИС"));
	ВозвращаемоеЗначение.Колонки.Добавить("Комментарий",              Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.Реквизиты.Комментарий.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("КодМаркировкиСтрокой",     Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.Реквизиты.ПолныйКодМаркировки.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("ПолныйКодМаркировки",      Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.Реквизиты.ПолныйКодМаркировки.Тип);
	ВозвращаемоеЗначение.Колонки.Добавить("Остаток",                  ОбщегоНазначения.ОписаниеТипаЧисло(10, 3));
	ВозвращаемоеЗначение.Колонки.Добавить("ВидПродукции",             Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ВозвращаемоеЗначение.Колонки.Добавить("GTIN",                     Метаданные.ОпределяемыеТипы.GTIN.Тип);
	
	ОбщегоНазначенияИСПереопределяемый.ПриОпределенииВскрытыхПотребительскихУпаковок(
		ВозвращаемоеЗначение,
		ТаблицаТовары,
		ПараметрыСканирования,
		ТолькоПолноеСоответствие);
	
	Индекс = 0;
	Для Каждого СтрокаТаблицы Из ВозвращаемоеЗначение Цикл
		СтрокаТаблицы.ИндексИсходнойСтроки = Индекс;
		Индекс = Индекс +1 ;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ТекстЗапросаВскрытыеПотребительскиеУпаковкиПоКодуМаркировки()
	Возврат "ВЫБРАТЬ
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка,
	|	МАКСИМУМ(АкцизныеМаркиЕГАИС.КоличествоЧастичногоВыбытия) КАК КоличествоЧастичногоВыбытия
	|ПОМЕСТИТЬ ВыбытиеАлкогольнойПродукции
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
	|ГДЕ
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка В (&КодМаркировки)
	|	И (АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии)
	|	ИЛИ АкцизныеМаркиЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВскрытаяБутылка))
	|СГРУППИРОВАТЬ ПО
	|	АкцизныеМаркиЕГАИС.АкцизнаяМарка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки,
	|	ВскрытыеПотребительскиеУпаковкиИС.Организация,
	|	ВскрытыеПотребительскиеУпаковкиИС.Подразделение,
	|	ВскрытыеПотребительскиеУпаковкиИС.Комментарий,
	|	ВскрытыеПотребительскиеУпаковкиИС.Статус,
	|	ВскрытыеПотребительскиеУпаковкиИС.Склад,
	|	ВскрытыеПотребительскиеУпаковкиИС.Документ,
	|	ВскрытыеПотребительскиеУпаковкиИС.СрокРеализации,
	|	ВскрытыеПотребительскиеУпаковкиИС.ДатаПодключения,
	|	ВскрытыеПотребительскиеУпаковкиИС.Ответственный,
	|	ВскрытыеПотребительскиеУпаковкиИС.КодФИАС,
	|	ВскрытыеПотребительскиеУпаковкиИС.АдресПодключения,
	|	ВскрытыеПотребительскиеУпаковкиИС.АдресПодключенияСтрокой,
	|	ВскрытыеПотребительскиеУпаковкиИС.ОбъемСлива,
	|	ВЫБОР
	|		КОГДА ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|			ТОГДА 0
	|		ИНАЧЕ ВскрытыеПотребительскиеУпаковкиИС.Остаток
	|	КОНЕЦ КАК Остаток,
	|	ВскрытыеПотребительскиеУпаковкиИС.ПолныйКодМаркировки,
	|	ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции,
	|	СтатусыДокументовИСМП.Статус КАК СтатусИСМП,
	|	СтатусыДокументовИСМП.ДальнейшееДействие1 КАК ДальнейшееДействие,
	|	ЕСТЬNULL(ВыбытиеАлкогольнойПродукции.КоличествоЧастичногоВыбытия, 0) КАК КоличествоЧастичногоВыбытия
	|ИЗ
	|	РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС КАК ВскрытыеПотребительскиеУпаковкиИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ВскрытыеПотребительскиеУпаковкиИС.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыбытиеАлкогольнойПродукции КАК ВыбытиеАлкогольнойПродукции
	|		ПО ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки = ВыбытиеАлкогольнойПродукции.АкцизнаяМарка
	|ГДЕ
	|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки В (&КодМаркировки)"
КонецФункции

Функция ТекстЗапросаВскрытыеПотребительскиеУпаковкиПоКодуМаркировкиРМК()
	Возврат "
	|ВЫБРАТЬ
	|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки,
	|	ВскрытыеПотребительскиеУпаковкиИС.Организация,
	|	ВскрытыеПотребительскиеУпаковкиИС.Подразделение,
	|	ВскрытыеПотребительскиеУпаковкиИС.Комментарий,
	|	ВскрытыеПотребительскиеУпаковкиИС.Статус,
	|	ВскрытыеПотребительскиеУпаковкиИС.Склад,
	|	ВскрытыеПотребительскиеУпаковкиИС.Документ,
	|	ВскрытыеПотребительскиеУпаковкиИС.СрокРеализации,
	|	ВскрытыеПотребительскиеУпаковкиИС.ДатаПодключения,
	|	ВскрытыеПотребительскиеУпаковкиИС.Ответственный,
	|	ВскрытыеПотребительскиеУпаковкиИС.КодФИАС,
	|	ВскрытыеПотребительскиеУпаковкиИС.АдресПодключения,
	|	ВскрытыеПотребительскиеУпаковкиИС.АдресПодключенияСтрокой,
	|	ВскрытыеПотребительскиеУпаковкиИС.ОбъемСлива,
	|	ВскрытыеПотребительскиеУпаковкиИС.Остаток,
	|	ВскрытыеПотребительскиеУпаковкиИС.ПолныйКодМаркировки,
	|	ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции
	|ИЗ
	|	РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС КАК ВскрытыеПотребительскиеУпаковкиИС
	|ГДЕ
	|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки В (&КодМаркировки)";
КонецФункции

#КонецОбласти

#КонецЕсли
