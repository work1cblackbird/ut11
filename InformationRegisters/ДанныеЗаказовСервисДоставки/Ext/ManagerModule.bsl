
#Область ПрограммныйИнтерфейс

// Создает записи по данным заказа сервиса доставки.
//
// Параметры:
// 	ПараметрыЗаказа - Структура:
// 		* ТипГрузоперевозки - Число
// 		* Организация - ОпределяемыйТип.ОрганизацияСервисДоставки
// 		* Идентификатор - Строка
// 		* ДокументыОснования - Массив Из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки.
//
Процедура СоздатьОбновитьДанныеЗаказа(ПараметрыЗаказа) Экспорт
	
	Если ПараметрыЗаказа.ДокументыОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеЗаказовСервисДоставки");
	ЭлементБлокировки.УстановитьЗначение("ТипГрузоперевозки", ПараметрыЗаказа.ТипГрузоперевозки);
	ЭлементБлокировки.УстановитьЗначение("Организация", ПараметрыЗаказа.Организация);
	ЭлементБлокировки.УстановитьЗначение("Идентификатор", ПараметрыЗаказа.Идентификатор);
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ДанныеЗаказовСервисДоставки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТипГрузоперевозки.Установить(ПараметрыЗаказа.ТипГрузоперевозки);
		НаборЗаписей.Отбор.Организация.Установить(ПараметрыЗаказа.Организация);
		НаборЗаписей.Отбор.Идентификатор.Установить(ПараметрыЗаказа.Идентификатор);
		
		НаборЗаписей.Прочитать();
		
		ЗарегистрированныеДокументы = НаборЗаписей.Выгрузить(, "ДокументОснование").ВыгрузитьКолонку("ДокументОснование");
		
		Для Каждого ДокументОснование Из ПараметрыЗаказа.ДокументыОснования Цикл
			
			Если ЗарегистрированныеДокументы.Найти(ДокументОснование) = Неопределено Тогда
				
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыЗаказа);
				НоваяЗапись.ДокументОснование = ДокументОснование;
				НоваяЗапись.ЕстьИзмененияТоварногоСостава = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Ошибка записи данных заказа сервиса доставки
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

// Возвращает список заказов, требующих повторной отправки в сервис в виду изменения товарного состава оснований.
// товарного состава в документах-основаниях.
//
// Параметры:
// 	ПараметрыОтбораЗаказов - Структура:
// 		* ТипГрузоперевозки - Число - Условный параметр, не используется при наличии параметра Список
// 		* Организация - ОпределяемыйТип.ОрганизацияСервисДоставки - Условный параметр, не используется при наличии параметра Список
// 		* Список - Массив Из Структура:
// 			** Идентификатор - Строка - Идентификатор заказа на доставку.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция ЗаказыКПовторнойОтправке(ПараметрыОтбораЗаказов) Экспорт
	
	Результат = Новый СписокЗначений();
	
	ТипГрузоперевозки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "ТипГрузоперевозки");
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "Организация");
	Список = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "Список");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Идентификатор КАК Идентификатор,
	|	ТаблицаРегистра.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ТаблицаРегистра
	|ГДЕ
	|	&ОсновноеУсловие
	|	И ТаблицаРегистра.ЕстьИзмененияТоварногоСостава";
	
	Если Список = Неопределено Тогда
		
		ОсновноеУсловие = "ТаблицаРегистра.ТипГрузоперевозки = &ТипГрузоперевозки
					|	И ТаблицаРегистра.Организация = &Организация";
		Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
		Запрос.УстановитьПараметр("Организация", Организация);
		
	Иначе
		
		ОсновноеУсловие = "ТаблицаРегистра.Идентификатор В (&МассивИдентификаторов)";
		
		МассивИдентификаторов = Новый Массив;
		
		Для Каждого Структура Из Список Цикл
			МассивИдентификаторов.Добавить(Структура.Идентификатор);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОсновноеУсловие", ОсновноеУсловие);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Идентификатор, Выборка.Представление, Истина);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Устанавливает признак изменения всех заказов сервисов доставки по документу-основанию.
//
// Параметры:
// 	ОтборНабораЗаписей - Структура.
// 	ЕстьИзмененияТоварногоСостава - Булево.
//
Процедура УстановитьПризнакИзмененияЗаказов(ОтборНабораЗаписей, ЕстьИзмененияТоварногоСостава) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеЗаказовСервисДоставки");
	
	Для Каждого ЭлементОтбора Из ОтборНабораЗаписей Цикл
		ЭлементБлокировки.УстановитьЗначение(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
	КонецЦикла;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ДанныеЗаказовСервисДоставки.СоздатьНаборЗаписей();
		
		Для Каждого ЭлементОтбора Из ОтборНабораЗаписей Цикл
			НаборЗаписей.Отбор[ЭлементОтбора.Ключ].Установить(ЭлементОтбора.Значение);
		КонецЦикла;
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Запись.ЕстьИзмененияТоварногоСостава = ЕстьИзмененияТоварногоСостава;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Ошибка записи данных заказа сервиса доставки
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
	КонецПопытки;
	
КонецПроцедуры

// Получает список заказов на доставку, введенных на основании передаваемого документа.
//
// Параметры:
// 	ПараметрыОтбораЗаказов - Структура:
// 		* ТипГрузоперевозки - Число
// 		* Организация - ОпределяемыйТип.ОрганизацияСервисДоставки
// 		* ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки,
// 			Массив Из ОпределяемыйТип.ОснованиеЗаказаСервисДоставки.
//
// Возвращаемое значение:
// 	СписокЗначений Из Строка.
//
Функция СписокЗаказовПоОснованию(ПараметрыОтбораЗаказов) Экспорт
	
	Результат = Новый СписокЗначений();
	
	ДокументОснование = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "ДокументОснование");
	ТипГрузоперевозки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "ТипГрузоперевозки");
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтбораЗаказов, "Организация");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.УстановитьПараметр("ТипГрузоперевозки", ТипГрузоперевозки);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Идентификатор,
	|	ТипГрузоперевозки,
	|	Представление
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ТаблицаРегистра
	|ГДЕ
	|	ДокументОснование В (&ДокументОснование)
	|	И &ТекстУсловияПоТипуГрузоперевозки
	|	И &ТекстУсловияПоОрганизации";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияПоТипуГрузоперевозки",
		?(ЗначениеЗаполнено(ТипГрузоперевозки), "ТипГрузоперевозки = &ТипГрузоперевозки", "ИСТИНА"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстУсловияПоОрганизации",
		?(ЗначениеЗаполнено(Организация), "Организация = &Организация", "ИСТИНА"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Идентификатор, Выборка.Представление);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получает количество заказов на доставку, введенных на основании передаваемого документа.
//
// Параметры:
// 	ДокументОснование - ОпределяемыйТип.ОснованиеЗаказаСервисДоставки.
//
// Возвращаемое значение:
// 	Результат - Число - Количество заказов.
//
Функция КоличествоЗаказовПоОснованию(ДокументОснование) Экспорт
	
	Результат = 0;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Идентификатор) КАК Количество
	|ИЗ
	|	РегистрСведений.ДанныеЗаказовСервисДоставки КАК ТаблицаРегистра
	|ГДЕ
	|	ДокументОснование = &ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Результат = Выборка.Количество;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
