
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		Элементы.ФормаУстановитьОтображениеВсех.Видимость = Ложь;
		Пользователь = Параметры.Отбор.Пользователь;
	КонецЕсли;
	
	ОписаниеФорм = Новый Соответствие;
	Для Каждого ЗначениеПеречисления Из ОткрытиеФормПриНачалеРаботыСистемы.ИспользуемыеФормыПриНачалеРаботыСистемы() Цикл
		ОписаниеФорм.Вставить(
			ЗначениеПеречисления, 
			ОткрытиеФормПриНачалеРаботыСистемыКлиентСерверПереопределяемый.НастройкиФормы(ЗначениеПеречисления));
	КонецЦикла;
	
	ПараметрыФорм = ОбщегоНазначения.ФиксированныеДанные(ОписаниеФорм);
	
	ОбновитьТаблицуНастроекФормНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ВРег(ИмяСобытия) = ВРег("Запись_НастройкиОткрытияФормПриНачалеРаботыСистемы") Тогда
		Если ТипЗнч(Источник) = Тип("Структура") Тогда
			ОбновитьЗаписьТаблицыНастроекФорм(Источник);			
		Иначе
			ОбновитьТаблицуНастроекФорм();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкиФорм

&НаКлиенте
Процедура НастройкиФормВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуЗаписиРегистра();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьНастройку(Команда)
	ОткрытьФормуЗаписиРегистра();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтображениеВсех(Команда)
	
	ОтображатьВсе = НЕ ОтображатьВсе;
	Элементы.ФормаУстановитьОтображениеВсех.Пометка = ОтображатьВсе;
	
	ОбновитьТаблицуНастроекФорм();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// НастройкиФормы

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиФормНастройкиФормы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиФорм.НеобходимыНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для формы не задаются настройки>'"));

	// НастройкиФормы

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиФормНастройкиФормы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиФорм.НеобходимыНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиФорм.НастройкиУстановлены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<настройки не заданы>'"));

	// НастройкиФормы

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НастройкиФормНастройкиФормы.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкиФорм.ФормаДоступна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<форма недоступна (недостаточно прав)>'"));

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаписиРегистра()
	ТекущиеДанные = Элементы.НастройкиФорм.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТекущиеДанные.ФормаДоступна Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Пользователю недоступна роль ""%1"".'"),
			ПараметрыФорм[ТекущиеДанные.ОткрываемаяФорма].Роль);
			
		ПоказатьПредупреждение(, ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОткрываемойФормы = Новый Структура;
	
	ПараметрыОткрываемойФормы.Вставить("Пользователь",     ТекущиеДанные.Пользователь);
	ПараметрыОткрываемойФормы.Вставить("ОткрываемаяФорма", ТекущиеДанные.ОткрываемаяФорма);
	
	Если ТекущиеДанные.ОткрыватьПоУмолчанию
	 Или ТекущиеДанные.НастройкиУстановлены Тогда
		
		КлючЗаписиПараметровФорм = КлючЗаписиПараметровФорм(ТекущиеДанные.Пользователь, ТекущиеДанные.ОткрываемаяФорма);
		
		Если Не КлючЗаписиПараметровФорм.Пустой() Тогда
			ПараметрыОткрываемойФормы.Вставить("Ключ", КлючЗаписиПараметровФорм);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные.НеобходимыНастройки Тогда
		ИмяОткрываемойФормы = ТекущиеДанные.ИмяФормыНастроек;
	Иначе
		ИмяОткрываемойФормы = "РегистрСведений.НастройкиОткрытияФормПриНачалеРаботыСистемы.ФормаЗаписи";
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьТаблицуНастроекФорм", ЭтаФорма);
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыОткрываемойФормы, ЭтаФорма,,,,ОписаниеОповещения);
		
КонецПроцедуры

&НаСервере
Функция КлючЗаписиПараметровФорм(Пользователь, ОткрываемаяФорма)
	
	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("Пользователь",     Пользователь);
	СтруктураИзмерений.Вставить("ОткрываемаяФорма", ОткрываемаяФорма);
	
	Возврат РегистрыСведений.НастройкиОткрытияФормПриНачалеРаботыСистемы.СоздатьКлючЗаписи(СтруктураИзмерений);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуНастроекФорм(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОбновитьТаблицуНастроекФормНаСервере(Результат, ДополнительныеПараметры); 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуНастроекФормНаСервере(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	НастройкиФорм.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	(Пользователи.Ссылка = &ПользовательДляОтбора
	|			ИЛИ &ПользовательДляОтбора = НЕОПРЕДЕЛЕНО)
	|	И НЕ Пользователи.Недействителен
	|	И НЕ Пользователи.Служебный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пользователи.Наименование";
	
	Если НЕ Пользователь.Пустая() Тогда
		Запрос.УстановитьПараметр("ПользовательДляОтбора", Пользователь);
	ИначеЕсли НЕ Пользователи.ЭтоПолноправныйПользователь(,, Ложь) Тогда
		Запрос.УстановитьПараметр("ПользовательДляОтбора", Пользователи.ТекущийПользователь());
	Иначе
		Запрос.УстановитьПараметр("ПользовательДляОтбора", Неопределено);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторПользователяИБ) Тогда
			Продолжить;
		КонецЕсли;
			
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.ИдентификаторПользователяИБ);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоПолноправныйПользователь = ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
		
		Для Каждого ПараметрыФормы Из ПараметрыФорм Цикл
			
			РольДоступна = ЭтоПолноправныйПользователь
				ИЛИ ПользовательИБ.Роли.Содержит(Метаданные.Роли[ПараметрыФормы.Значение.Роль]);
			
			Если ОтображатьВсе ИЛИ РольДоступна Тогда
				
			 	НоваяСтрока = НастройкиФорм.Добавить();
				
				НоваяСтрока.Пользователь     = Выборка.Пользователь;
				НоваяСтрока.ОткрываемаяФорма = ПараметрыФормы.Ключ;
				НоваяСтрока.ФормаДоступна	 = РольДоступна;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыФормы.Значение, "ПараметрЗапуска, НеобходимыНастройки, ИмяФормыНастроек");
			 
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНастроекФорм.Пользователь,
	|	ТаблицаНастроекФорм.НеобходимыНастройки,
	|	ТаблицаНастроекФорм.ОткрываемаяФорма,
	|	ТаблицаНастроекФорм.ПараметрЗапуска,
	|	ТаблицаНастроекФорм.ИмяФормыНастроек,
	|	ТаблицаНастроекФорм.ФормаДоступна
	|ПОМЕСТИТЬ НастройкиФорм
	|ИЗ
	|	&ТаблицаНастроекФорм КАК ТаблицаНастроекФорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиФорм.Пользователь,
	|	НастройкиФорм.ОткрываемаяФорма,
	|	НастройкиФорм.НеобходимыНастройки,
	|	НастройкиФорм.ПараметрЗапуска,
	|	НастройкиФорм.ИмяФормыНастроек,
	|	НастройкиФорм.ФормаДоступна,
	|	ЕСТЬNULL(НастройкиОткрытияФормПриНачалеРаботыСистемы.ТекстовоеПредставлениеПараметров, """") КАК НастройкиФормы,
	|	ЕСТЬNULL(НастройкиОткрытияФормПриНачалеРаботыСистемы.ОткрыватьПоУмолчанию, ЛОЖЬ) КАК ОткрыватьПоУмолчанию,
	|	ВЫБОР
	|		КОГДА НастройкиОткрытияФормПриНачалеРаботыСистемы.Пользователь ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НастройкиУстановлены
	|ИЗ
	|	НастройкиФорм КАК НастройкиФорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОткрытияФормПриНачалеРаботыСистемы КАК НастройкиОткрытияФормПриНачалеРаботыСистемы
	|		ПО НастройкиФорм.Пользователь = НастройкиОткрытияФормПриНачалеРаботыСистемы.Пользователь
	|			И НастройкиФорм.ОткрываемаяФорма = НастройкиОткрытияФормПриНачалеРаботыСистемы.ОткрываемаяФорма";
	
	Запрос.УстановитьПараметр("ТаблицаНастроекФорм", РеквизитФормыВЗначение("НастройкиФорм"));
	
	НастройкиФорм.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если Не НастройкиФорм.Количество() Тогда
		Элементы.ФормаИзменитьНастройку.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаписьТаблицыНастроекФорм(КлючЗаписиРегистра)
	
	ПараметрыОтбора = Новый Структура("Пользователь, ОткрываемаяФорма");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, КлючЗаписиРегистра);
	
	НайденныеСтроки = НастройкиФорм.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат; // оповещение предназначено не для этой формы
	КонецЕсли;
	
	СтрокаТаблицыНастроекФорм = НайденныеСтроки[0];
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОткрытияФормПриНачалеРаботыСистемы.ТекстовоеПредставлениеПараметров,
	|	НастройкиОткрытияФормПриНачалеРаботыСистемы.ОткрыватьПоУмолчанию
	|ИЗ
	|	РегистрСведений.НастройкиОткрытияФормПриНачалеРаботыСистемы КАК НастройкиОткрытияФормПриНачалеРаботыСистемы
	|ГДЕ
	|	НастройкиОткрытияФормПриНачалеРаботыСистемы.Пользователь = &Пользователь
	|	И НастройкиОткрытияФормПриНачалеРаботыСистемы.ОткрываемаяФорма = &ОткрываемаяФорма";
	
	Запрос.УстановитьПараметр("Пользователь",     ПараметрыОтбора.Пользователь);
	Запрос.УстановитьПараметр("ОткрываемаяФорма", ПараметрыОтбора.ОткрываемаяФорма);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтрокаТаблицыНастроекФорм.НастройкиФормы       = Выборка.ТекстовоеПредставлениеПараметров;
		СтрокаТаблицыНастроекФорм.ОткрыватьПоУмолчанию = Выборка.ОткрыватьПоУмолчанию;
		СтрокаТаблицыНастроекФорм.НастройкиУстановлены = Истина;
	Иначе
		СтрокаТаблицыНастроекФорм.НастройкиФормы       = "";
		СтрокаТаблицыНастроекФорм.ОткрыватьПоУмолчанию = Ложь;
		СтрокаТаблицыНастроекФорм.НастройкиУстановлены = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
