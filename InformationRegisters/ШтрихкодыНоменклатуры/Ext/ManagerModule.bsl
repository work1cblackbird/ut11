#Если НЕ МобильныйАвтономныйСервер Тогда
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возращает соответствие с данными штрихкодов
//
// Параметры:
//  КэшированныеЗначения - см. ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения
//  Штрихкоды - Массив - обрабатываемые штрихкоды.
//
Процедура ПолучитьДанныеПоШтрихкодам(КэшированныеЗначения, Штрихкоды) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод                      КАК Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура                  КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры  КАК ТипНоменклатуры,
	|	ШтрихкодыНоменклатуры.Характеристика                КАК Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка                      КАК Упаковка,
	|	ШтрихкодыНоменклатуры.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто) КАК ТоварноеМесто,
	|	ПРЕДСТАВЛЕНИЕ(ШтрихкодыНоменклатуры.Номенклатура)   КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ШтрихкодыНоменклатуры.Характеристика) КАК ХарактеристикаПредставление,
	|	ШтрихкодыНоменклатуры.Номенклатура.ПодакцизныйТовар КАК ПодакцизныйТовар,
	|	&ОпределениеПризнакаМаркируемаяПродукция            КАК МаркируемаяПродукция,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА
	|			ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                                              КАК ХарактеристикиИспользуются,
	|	ШтрихкодыНоменклатуры.Номенклатура.ИспользоватьУпаковки            КАК ИспользоватьУпаковки,
	|	МАКСИМУМ(УпаковкиНоменклатуры.Ссылка)                              КАК ЕдиничнаяУпаковка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УпаковкиНоменклатуры.Ссылка)                  КАК КоличествоЕдиничныхУпаковок,
	|	ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора,
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)) КАК ВариантРасчетаЦеныНабора,
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения, ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения) КАК
	|		ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
	|		ПО ВЫБОР
	|			КОГДА УпаковкиНоменклатуры.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	|			И ЕСТЬNULL(УпаковкиНоменклатуры.Знаменатель, 0) <> 0
	|				ТОГДА ВЫРАЗИТЬ(УпаковкиНоменклатуры.Числитель / УпаковкиНоменклатуры.Знаменатель КАК ЧИСЛО(27, 11))
	|			ИНАЧЕ 0
	|		КОНЕЦ = 1
	|		И
	|		НЕ УпаковкиНоменклатуры.ПометкаУдаления
	|		И ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения = УпаковкиНоменклатуры.ЕдиницаИзмерения
	|		И
	|			(ШтрихкодыНоменклатуры.Номенклатура.НаборУпаковок <> ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|		И ШтрихкодыНоменклатуры.Номенклатура.НаборУпаковок = УпаковкиНоменклатуры.Владелец
	|		ИЛИ
	|			ШтрихкодыНоменклатуры.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
	|		И ШтрихкодыНоменклатуры.Номенклатура = УпаковкиНоменклатуры.Владелец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО ВариантыКомплектацииНоменклатуры.Владелец = ШтрихкодыНоменклатуры.Номенклатура
	|		И ВариантыКомплектацииНоменклатуры.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|		И ВариантыКомплектацииНоменклатуры.Основной
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В (&МассивШтрихкодов)
	|СГРУППИРОВАТЬ ПО
	|	ШтрихкодыНоменклатуры.Штрихкод,
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка,
	|	ЕСТЬNULL(ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора,
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)),
	|	ЕСТЬNULL(УпаковкиНоменклатуры.ЕдиницаИзмерения, ШтрихкодыНоменклатуры.Номенклатура.ЕдиницаИзмерения),
	|	ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры,
	|	ШтрихкодыНоменклатуры.Номенклатура.ПодакцизныйТовар,
	|	ШтрихкодыНоменклатуры.Номенклатура.ИспользоватьУпаковки,
	|	ВЫБОР
	|		КОГДА
	|			ШтрихкодыНоменклатуры.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	&ОпределениеПризнакаМаркируемаяПродукция";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ШтрихкодыНоменклатуры.Упаковка",
		"ШтрихкодыНоменклатуры.Номенклатура"));
	
	ОпределениеПризнакаМаркируемаяПродукция = "ЛОЖЬ";
	НоменклатураЛокализация.ЗаполнитьТекстМаркируемаяПродукция(ОпределениеПризнакаМаркируемаяПродукция, "ШтрихкодыНоменклатуры.Номенклатура");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеПризнакаМаркируемаяПродукция);
	
	МассивШтрихкодов = Новый Массив;
	
	Для Каждого ТекШтрихкод Из Штрихкоды Цикл
		Штрихкод = ВРег(СокрЛП(ТекШтрихкод));
		МассивШтрихкодов.Добавить(Штрихкод);
		
		ИнформацияПоШтрихкодам = ОбработкаТабличнойЧастиКлиентСервер.СтруктураКешируемойИнформацииПоШтрихкоду();
		ИнформацияПоШтрихкодам.Штрихкод = Штрихкод;
		КэшированныеЗначения.Штрихкоды.Вставить(Штрихкод, ИнформацияПоШтрихкодам);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекДанные = КэшированныеЗначения.Штрихкоды[ВРег(СокрЛП(Выборка.Штрихкод))];
		ТекДанные.Номенклатура                    = Выборка.Номенклатура;
		ТекДанные.ТипНоменклатуры                 = Выборка.ТипНоменклатуры;
		ТекДанные.Характеристика                  = Выборка.Характеристика;
		ТекДанные.Упаковка                        = Выборка.Упаковка;
		ТекДанные.КоличествоУпаковок              = 1;
		ТекДанные.ПодакцизныйТовар                = Выборка.ПодакцизныйТовар;
		ТекДанные.МаркируемаяПродукция            = Выборка.МаркируемаяПродукция;
		ТекДанные.ХарактеристикиИспользуются      = Выборка.ХарактеристикиИспользуются;
		ТекДанные.Коэффициент                     = Выборка.Коэффициент;
		ТекДанные.ЕдиницаИзмерения                = Выборка.ЕдиницаИзмерения;
		ТекДанные.ЕдиничнаяУпаковка               = ?(Выборка.КоличествоЕдиничныхУпаковок = 1 И Выборка.Коэффициент = 1,
		                                              Выборка.ЕдиничнаяУпаковка,
		                                              Неопределено);
		ТекДанные.НесколькоЕдиничныхУпаковок      = Выборка.КоличествоЕдиничныхУпаковок > 1 И Не Выборка.ТоварноеМесто;
		ТекДанные.НеизвестныйШтрихкод             = Ложь;
		ТекДанные.ВариантРасчетаЦеныНабора        = Выборка.ВариантРасчетаЦеныНабора;
		ТекДанные.ПредставлениеНоменклатуры       = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураПредставление,
			Выборка.ХарактеристикаПредставление);
	КонецЦикла;
	
КонецПроцедуры

// Функция вычисляет контрольный символ кода EAN.
//
// Параметры:
//  Штрихкод - Строка - штрихкод (без контрольной цифры).
//  Тип      - Число - тип штрихкода (13 для EAN13, 8 для EAN8).
//
// Возвращаемое значение:
//  Строка - Контрольный символ штрихкода.
//
Функция КонтрольныйСимволEAN(ШтрихКод, Тип) Экспорт

	Четн   = 0;
	Нечетн = 0;

	КоличествоИтераций = ?(Тип = 13, 6, 4);

	Для Индекс = 1 По КоличествоИтераций Цикл
		Если (Тип = 8) И (Индекс = КоличествоИтераций) Тогда
		Иначе
			Четн   = Четн   + Сред(ШтрихКод, 2 * Индекс, 1);
		КонецЕсли;
		Нечетн = Нечетн + Сред(ШтрихКод, 2 * Индекс - 1, 1);
	КонецЦикла;

	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;

	КонтЦифра = 10 - (Четн + Нечетн) % 10;

	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));

КонецФункции

// Процедура выполняет преобразование штрихкода, полученного
// из весов с печатью этикеток в штрихкод, пригодный для поиска в БД.
//
// Параметры:
//  ТекШтрихкод               - Строка
//  ПрефиксыВесовыхШтрихкодов - Массив.
//
Процедура ПреобразоватьВесовойШтрихкод(ТекШтрихкод, ПрефиксыВесовыхШтрихкодов) Экспорт
	
	Если СтрДлина(ТекШтрихкод.Штрихкод) = 13 // EAN13
		И Лев(ТекШтрихкод.Штрихкод, 1) = "2" // Внутренний штрихкод
		И ПрефиксыВесовыхШтрихкодов.Найти(Сред(ТекШтрихкод.Штрихкод, 2, 1)) <> Неопределено Тогда // Найден префикс весового товара
		
		// Штрихкод является весовым, выполняем преобразование.
		// Формат весового штрихкода: 2 + П + ЧЧЧЧЧ + BBBBB + K
		// Где,
		//  П     - Префикс весового товара
		//  ЧЧЧЧЧ - код весового товара
		//  BBBBB - Вес
		//  К     - Контрольное число.
		
		Код = Сред(ТекШтрихкод.Штрихкод, 3, 5);
		Вес = Число(Сред(ТекШтрихкод.Штрихкод, 8, 2)) + Число(Сред(ТекШтрихкод.Штрихкод, 10, 3)) / 1000;
		
		ТекШтрихкод.Штрихкод   = ПолучитьШтрихкодВесовогоТовараПоКоду(Код,,Истина);
		ТекШтрихкод.Количество = ТекШтрихкод.Количество * Вес;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает префикс штрихкода для текущего узла информационной базы
//
// Возвращаемое значение:
//  Строка - Префикс узла штрихкода.
//
Функция ПрефиксУзлаШтрихкода() Экспорт
	
	Возврат Формат(Константы.ПрефиксШтрихкодовУзлаРИБ.Получить(),"ЧЦ=1; ЧН=; ЧВН=");
	
КонецФункции

// Функция возвращает формат весового штрихкода для запросов.
//
// Параметры:
//  ПрефиксВесовогоШтрихкода - Строка - Префиск весового штрихкода.
//  Загрузка - Булево - Префиск выполнения загрузки данных.
//
// Возвращаемое значение:
//  Строка - Шаблон весового штрихкода.
//
Функция ФорматВесовогоШтрихкода(ПрефиксВесовогоШтрихкода, Загрузка = Ложь) Экспорт
	
	Если Загрузка Тогда
		Возврат "2[\_][0-9][0-9][0-9][0-9][0-9]00000[\_]";
	Иначе
		Возврат "2[\_]" + Строка(СтрЗаменить(ПрефиксВесовогоШтрихкода, "_", "\_")) + "[0-9][0-9][0-9][0-9]00000[\_]";
	КонецЕсли;
	
КонецФункции

// Возращает массив со штрихкодами.
//
// Параметры:
//  Номенклатура   - СправочникСсылка.Номенклатура - Номенклатура.
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - Характеристика номенклатуры.
//  Упаковка       - СправочникСсылка.УпаковкиЕдиницыИзмерения - Упаковка.
//
// Возвращаемое значение:
//  Массив - Штрихкоды номенклатуры.
//
Функция ШтрихкодыНоменклатуры(Номенклатура, Характеристика, Упаковка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура = &Номенклатура
	|	И ШтрихкодыНоменклатуры.Характеристика = &Характеристика
	|	И ШтрихкодыНоменклатуры.Упаковка = &Упаковка
	|";

	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("Упаковка", Упаковка);

	Штрихкоды = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Штрихкод");
	
	ВозвращаемоеЗначение = Новый Массив;
	Для Каждого ЭлементМассива Из Штрихкоды Цикл
		ВозвращаемоеЗначение.Добавить(ПодготовитьШтрихкод(ЭлементМассива));
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Шаблон весового штрихкода дополняется префиксом узла и контрольным числом.
//
// Параметры:
//  Штрихкод - Строка - Штрихкод
//
// Возвращаемое значение:
//  Строка - Штрихкод
//
Функция ПодготовитьШтрихкод(Знач Штрихкод) Экспорт
	
	Если СтрДлина(Штрихкод) = 13 И Лев(Штрихкод, 2) = "2_" Тогда
		Диапазон = ЗначениеНастроекПовтИсп.ДиапазонВесовыхШтрихкодовПоУмолчанию();
		
		Если Диапазон = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не определены диапазоны весовых штрихкодов.'");	
		КонецЕсли;
		
		Строка = Диапазон + Сред(Штрихкод, 3, 5) + "00000";
		Возврат Строка + КонтрольныйСимволEAN(Строка, 13);
	КонецЕсли;
	
	Возврат Штрихкод; 
	
КонецФункции

// Возвращает текст сообщения о недостатке свободных кодов весовых штрихкодов
//
// Возвращаемое значение:
//  Строка - Текст сообщения
//
Функция ТекстСообщенияНетСвободныхКодовВесовыхШтрихкодов() Экспорт
	Возврат НСтр("ru = 'Нет свободных кодов весовых штрихкодов.
		               |Штрихкод не сформирован.'")	
КонецФункции

// Возвращает текст сообщения о недостатке свободных кодов штучных штрихкодов
//
// Возвращаемое значение:
//  Строка - Текст сообщения
//
Функция ТекстСообщенияНетСвободныхКодовШтучныхШтрихкодов() Экспорт
	Возврат НСтр("ru = 'Нет свободных кодов в доступных диапазонах штучных штрихкодов.
		               |Штрихкод не сформирован.'")	
КонецФункции

// Возвращает текст сообщения о отсутствии настройки диапазонов штучных штрихкодов
//
// Возвращаемое значение:
//  Строка - Текст сообщения
//
Функция ТекстСообщенияНеНастроеныДоступныеДиапазоныШтучныхШтрихкодов() Экспорт
	Возврат НСтр("ru = 'Не настроены доступные диапазоны штучных штрихкодов.
		               |Штрихкод не сформирован.'")	
КонецФункции

// Функция осуществляет формирование штрихкода EAN13 для
// штучного товара.
//
// Возвращаемое значение:
//  Строка - Штрихкод штучного товара.
//
Функция СформироватьШтрихкодEAN13() Экспорт

	ПрефиксУзлаШтрихкода = ПрефиксУзлаШтрихкода();
	
	Код = Неопределено;
	Диапазон = Неопределено;
	Диапазоны = ПолучитьМаксимальныеЗначенияКодовШтучныхШтрихкодов();
	Если Диапазоны = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияНеНастроеныДоступныеДиапазоныШтучныхШтрихкодов());
		Возврат Неопределено;
	КонецЕсли;
	Для Каждого СтрокаТЧ Из Диапазоны Цикл
		Код = СтрокаТЧ.Код + 1;
		Диапазон = СтрокаТЧ.Диапазон;
		Прервать;
	КонецЦикла;
	
	Если Код = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияНетСвободныхКодовШтучныхШтрихкодов());
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьШтрихкодПоКоду(Код, Диапазон, ПрефиксУзлаШтрихкода);

КонецФункции

// Функция осуществляет формирование штрихкода EAN13 для
// весового товара.
//
// Возвращаемое значение:
//  Строка - Штрихкод весового товара.
//
Функция СформироватьШтрихкодВесовогоТовараEAN13() Экспорт

	ПрефиксУзлаШтрихкода = ПрефиксУзлаШтрихкода();

	Код = ПолучитьМаксимальноеЗначениеКодаВесовыхШтрихкодов();
	
	Если Код = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияНетСвободныхКодовВесовыхШтрихкодов());
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьШтрихкодВесовогоТовараПоКоду(Код + 1, ПрефиксУзлаШтрихкода);

КонецФункции

// Функция возвращает штрихкод, создаваемый из кода с префиксами и контрольным символом.
//
// Параметры:
//  Код                  - Число  - Код.
//  Диапазон             - Строка - Диапазон.
//  ПрефиксУзлаШтрихкода - Строка - Префикс узла.
//
// Возвращаемое значение:
//  Строка - Штрихкод.
//
Функция ПолучитьШтрихкодПоКоду(Код, Диапазон, ПрефиксУзлаШтрихкода) Экспорт

	Штрихкод = Строка(Диапазон) + ПрефиксУзлаШтрихкода + Формат(Код, "ЧЦ=9; ЧВН=; ЧГ=");
	Штрихкод = Штрихкод + КонтрольныйСимволEAN(ШтрихКод, 13);

	Возврат Штрихкод;

КонецФункции

// Функция возвращает штрихкод весового товара,
// создаваемый из кода с префиксом весового товара и контрольным символом.
//
// Параметры:
//  Код                   - Число  - Код.
//  ПрефиксУзлаШтрихкода - Строка - Префикс весового товара.
//  Загрузка              - Булево - Признак загрузки.
//
// Возвращаемое значение:
//  Строка - Шаблон штрихкода весового товара.
//
Функция ПолучитьШтрихкодВесовогоТовараПоКоду(Код, ПрефиксУзлаШтрихкода = "_", Загрузка = Ложь) Экспорт

	Если Загрузка Тогда
		КодТовара = Формат(Код, "ЧЦ=5; ЧВН=; ЧГ=");
	Иначе
		КодТовара = Строка(ПрефиксУзлаШтрихкода) + Формат(Код, "ЧЦ=4; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Штрихкод = "2_" + КодТовара + "00000";
	
	КонтрольныйСимволEAN = "_";
	Штрихкод = Штрихкод + КонтрольныйСимволEAN;

	Возврат Штрихкод;

КонецФункции

// Функция возвращает массив настроек диапазонов штрихкодов по умолчанию
//
// Возвращаемое значение:
//  Массив - Настройки диапазонов штрихкодов.
//
Функция НастройкиДиапазоновШтрихкодовПоУмолчанию() Экспорт
	
	НастройкиДиапазоновШтрихкодов = Новый Массив;

	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Ложь;
	Настройка.Диапазон = "20";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "21";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "22";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "23";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "24";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "25";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "26";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "27";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "28";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Настройка = Новый Структура("Весовой, Диапазон");
	Настройка.Весовой  = Истина;
	Настройка.Диапазон = "29";
	НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
	
	Возврат НастройкиДиапазоновШтрихкодов;
	
КонецФункции

// Функция возвращает массив настроек диапазонов штрихкодов
//
// Возвращаемое значение:
//  Массив - Настройки диапазонов штрихкодов.
//
Функция НастройкиДиапазоновШтрихкодов() Экспорт
	
	НастройкиДиапазоновШтрихкодов = Новый Массив;
	
	Настройки = Константы.НастройкиПрефиксацииШтрихкодов.Получить().Получить();
	Если Настройки = Неопределено Тогда
		
		НастройкиДиапазоновШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.НастройкиДиапазоновШтрихкодовПоУмолчанию();
		
	Иначе
		
		Попытка
			Для Каждого СтрокаТЧ Из Настройки Цикл
				Настройка = Новый Структура("Весовой, Диапазон");
				Настройка.Весовой  = СтрокаТЧ.Весовой;
				Настройка.Диапазон = СтрокаТЧ.Диапазон;
				НастройкиДиапазоновШтрихкодов.Добавить(Настройка);
			КонецЦикла;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка формата настроек диапазонов штрихкодов. Загружены настройки по умолчанию.'"));
			НастройкиДиапазоновШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.НастройкиДиапазоновШтрихкодовПоУмолчанию();
		КонецПопытки
		
	КонецЕсли;
	
	Возврат НастройкиДиапазоновШтрихкодов;
	
КонецФункции

// Функция возвращает массив максимальное значений кодов штучных штрихкодов
// по диапазонам.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Максимальные значения кодов по диапазонам.
//
Функция ПолучитьМаксимальныеЗначенияКодовШтучныхШтрихкодов() Экспорт
	
	ДиапазоныШтучныхШтрихкодов = ЗначениеНастроекПовтИсп.ДиапазоныШтучныхШтрихкодов();
	
	Если ДиапазоныШтучныхШтрихкодов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеТипаЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(15, 0);
	
	МаксимальныеЗначения = Новый ТаблицаЗначений();
	МаксимальныеЗначения.Колонки.Добавить("Код",		ОписаниеТипаЧисла);
	МаксимальныеЗначения.Колонки.Добавить("Диапазон",	ОбщегоНазначения.ОписаниеТипаСтрока(2));
	
	ПрефиксУзла			= Строка(Константы.ПрефиксШтрихкодовУзлаРИБ.Получить());
	ТекстыЗапросов		= Новый Массив;
	СтрокиНачалаКода	= Новый Массив;
	
	Для Каждого СтрокаТЧ Из ДиапазоныШтучныхШтрихкодов Цикл
		
		ТекстЗапросаСтроки =
		"ВЫБРАТЬ
		|	""#СтрокаТЧДиапазон""							КАК Диапазон,
		|	ПОДСТРОКА(ШтрихкодыНоменклатуры.Штрихкод, 4, 9)	КАК КодСтрока,
		|	ШтрихкодыНоменклатуры.Штрихкод					КАК Штрихкод
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""#СтрокаТЧНачалоКода__________""";
		
		СтрокаТЧНачалоКода = СтрокаТЧ.Диапазон + ПрефиксУзла;
		
		ТекстЗапросаСтроки = СтрЗаменить(ТекстЗапросаСтроки, "#СтрокаТЧДиапазон", СтрокаТЧ.Диапазон);
		ТекстЗапросаСтроки = СтрЗаменить(ТекстЗапросаСтроки, "#СтрокаТЧНачалоКода", СтрокаТЧНачалоКода);
		
		ТекстыЗапросов.Добавить(ТекстЗапросаСтроки);
		
		СтрокаМаксимальногоЗначения = МаксимальныеЗначения.Добавить();
		СтрокаМаксимальногоЗначения.Диапазон	= СтрокаТЧ.Диапазон;
		СтрокаМаксимальногоЗначения.Код			= 0;
		
		СтрокиНачалаКода.Добавить(СтрокаТЧНачалоКода);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	КодСтрока УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ПроверенныеДиапазоны = Новый Массив;
	КоличествоДиапазонов = МаксимальныеЗначения.Количество();
	
	МаксимальныйКодШтучногоТовара = МаксимальныйКодШтучногоТовара();
	
	Для Каждого СтрокаТЧ Из РезультатЗапроса Цикл
		
		Если ПроверенныеДиапазоны.Количество() = КоличествоДиапазонов Тогда
			Прервать;
		ИначеЕсли СтрокиНачалаКода.Найти(Лев(СтрокаТЧ.Штрихкод, 3)) = Неопределено
			Или ПроверенныеДиапазоны.Найти(СтрокаТЧ.Диапазон) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Код = ОписаниеТипаЧисла.ПривестиЗначение(СтрокаТЧ.КодСтрока);
		СтрокаМаксимальногоЗначения = МаксимальныеЗначения.Найти(СтрокаТЧ.Диапазон, "Диапазон");
		
		Если Код = 0 Тогда
			Продолжить;
		ИначеЕсли Код >= МаксимальныйКодШтучногоТовара Тогда
			ПроверенныеДиапазоны.Добавить(СтрокаТЧ.Диапазон);
			МаксимальныеЗначения.Удалить(СтрокаМаксимальногоЗначения);
			
			Продолжить;
		КонецЕсли;
		
		СтрокаМаксимальногоЗначения.Код = Код;
		
		ПроверенныеДиапазоны.Добавить(СтрокаТЧ.Диапазон);
		
	КонецЦикла;
	
	Возврат МаксимальныеЗначения;
	
КонецФункции

// Функция возвращает максимальное значение кода весового товара
// из зарегистрированных в системе штрихкодов.
//
// Возвращаемое значение:
//  Число - Максимальный код весового товара.
//
Функция ПолучитьМаксимальноеЗначениеКодаВесовыхШтрихкодов() Экспорт
	
	ПрефиксУзла = Строка(Константы.ПрефиксШтрихкодовУзлаРИБ.Получить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод					КАК Штрихкод,
	|	ПОДСТРОКА(ШтрихкодыНоменклатуры.Штрихкод, 4, 4)	КАК КодСтрока
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО ""2_#ПрефиксУзла#____00000_""
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтрока УБЫВ";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#ПрефиксУзла#", ПрефиксУзла);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ОписаниеТипаЧисла				= ОбщегоНазначения.ОписаниеТипаЧисло(15, 0);
	КоличествоСтроковыхЗначений		= 0;
	МаксимальныйКодВесовогоТовара	= МаксимальныйКодВесовогоТовара();
	
	СтрокиНачалаКода = Новый Массив;
	СтрокиНачалаКода.Добавить("20" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("21" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("22" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("23" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("24" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("25" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("26" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("27" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("28" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("29" + ПрефиксУзла);
	СтрокиНачалаКода.Добавить("2_" + ПрефиксУзла);
	
	КонтрольныеСимволы = Новый Массив;
	КонтрольныеСимволы.Добавить("0");
	КонтрольныеСимволы.Добавить("1");
	КонтрольныеСимволы.Добавить("2");
	КонтрольныеСимволы.Добавить("3");
	КонтрольныеСимволы.Добавить("4");
	КонтрольныеСимволы.Добавить("5");
	КонтрольныеСимволы.Добавить("6");
	КонтрольныеСимволы.Добавить("7");
	КонтрольныеСимволы.Добавить("8");
	КонтрольныеСимволы.Добавить("9");
	КонтрольныеСимволы.Добавить("_");
	
	Для Каждого СтрокаТЧ Из РезультатЗапроса Цикл
		
		Если СтрокиНачалаКода.Найти(Лев(СтрокаТЧ.Штрихкод, 3)) = Неопределено
			Или КонтрольныеСимволы.Найти(Прав(СтрокаТЧ.Штрихкод, 1)) = Неопределено Тогда
			
			КоличествоСтроковыхЗначений = КоличествоСтроковыхЗначений + 1;
			
			Продолжить;
			
		КонецЕсли;
		
		Код = ОписаниеТипаЧисла.ПривестиЗначение(СтрокаТЧ.КодСтрока);
		
		Если Код >= МаксимальныйКодВесовогоТовара Тогда
			Продолжить;
		ИначеЕсли Код = 0 Тогда
			КоличествоСтроковыхЗначений = КоличествоСтроковыхЗначений + 1;
			
			Продолжить;
		КонецЕсли;
		
		Возврат Код;
		
	КонецЦикла;
	
	Если МаксимальныйКодВесовогоТовара > 0
		И КоличествоСтроковыхЗначений = РезультатЗапроса.Количество() Тогда
		
		Код = 0;
		
		Возврат Код;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает максимальный код штучного товара.
//
// Возвращаемое значение:
//  Число - Максимальный код штучного товара.
//
Функция МаксимальныйКодШтучногоТовара() Экспорт
	
	Возврат 999999999;
	
КонецФункции

// Функция возвращает максимальный код весового товара.
//
// Возвращаемое значение:
//  Число - Максимальный код весового товара.
//
Функция МаксимальныйКодВесовогоТовара() Экспорт
	
	Возврат 9999;
	
КонецФункции

// Обработчик обновления УТ 11.1.5.7
// 
Процедура ЗаполнитьКонстантыПодсистемыШтрихкодирования() Экспорт

	НастройкиДиапазоновШтрихкодов = РегистрыСведений.ШтрихкодыНоменклатуры.НастройкиДиапазоновШтрихкодовПоУмолчанию();
	ПрефиксШтучногоШтрихкода = Константы.ПрефиксШтучногоШтрихкода.Получить();
	
	Если ЗначениеЗаполнено(СокрЛП(ПрефиксШтучногоШтрихкода)) Тогда
		Константы.ПрефиксШтрихкодовУзлаРИБ.Установить(ПрефиксШтучногоШтрихкода);
	Иначе
		Константы.ПрефиксШтрихкодовУзлаРИБ.Установить("0");
	КонецЕсли;
	
	Константы.ВыгружатьВнутренниеШтрихкодыШтучныхТоваров.Установить(Истина);
	Константы.НастройкиПрефиксацииШтрихкодов.Установить(Новый ХранилищеЗначения(НастройкиДиапазоновШтрихкодов));
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ ИСТИНА
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ЗначениеРазрешено(Номенклатура)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
#КонецЕсли