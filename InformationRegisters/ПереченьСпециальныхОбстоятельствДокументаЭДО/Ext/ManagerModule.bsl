#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Обновить перечень спец обстоятельств.
// 
// Параметры:
//  Данные - Строка - Строка JSON содержит массив структур:
//  *Parent - Строка - Наименование родителя
//  *Child - Массив Из Структура:
//  **Code - Строка - Код
//  **Name - Строка - Наименование
Процедура ОбновитьПереченьСпецОбстоятельств(Данные) Экспорт
	
	Операция = НСтр("ru = 'Обновление перечня кодов специальных обстоятельств'");
	
	Если Не ЗначениеЗаполнено(Данные) Тогда
		ПодробныйТекстОшибки = НСтр("ru = 'Передана пустая строка JSON'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки);
		Возврат;
	КонецЕсли;
	Попытка
		ПереченьСпецОбстоятельств = ОбщегоНазначенияБЭД.JSONЗначение(Данные);
	Исключение
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = НСтр("ru = 'Ошибка чтения json с перечнем кодов специальных обстоятельств'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстОшибки);
		Возврат;
	КонецПопытки;
	ТаблицаРегистра = Новый ТаблицаЗначений;
	Строка5 = ОбщегоНазначения.ОписаниеТипаСтрока(5);
	СтрокаНеограниченная = Новый ОписаниеТипов("Строка");
	ТаблицаРегистра.Колонки.Добавить("Код", Строка5);
	ТаблицаРегистра.Колонки.Добавить("Наименование", СтрокаНеограниченная);
	ТаблицаРегистра.Колонки.Добавить("Родитель", СтрокаНеограниченная);
	Для Каждого ДанныеРодителя Из ПереченьСпецОбстоятельств Цикл
		Для Каждого ДанныеЗаписи Из ДанныеРодителя.Child Цикл
			СтрокаЗаписи = ТаблицаРегистра.Добавить();
			СтрокаЗаписи.Код = ДанныеЗаписи.Code;
			СтрокаЗаписи.Наименование = ДанныеЗаписи.Name;
			СтрокаЗаписи.Родитель = ДанныеРодителя.Parent;
		КонецЦикла;
	КонецЦикла;
	ТаблицаРегистра.Свернуть("Код, Родитель, Наименование");
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		Блокировка.Добавить("РегистрСведений.ПереченьСпециальныхОбстоятельствДокументаЭДО");
		Блокировка.Заблокировать();
	
		НаборЗаписейРегистра = СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Прочитать();
		НаборЗаписейРегистра.Загрузить(ТаблицаРегистра);
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРегистра);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ТекстОшибки = НСтр("ru = 'При обновлении перечня кодов специальных обстоятельств произошла ошибка'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ПодробныйТекстОшибки, ТекстОшибки);
		
	КонецПопытки;
КонецПроцедуры

// Описание специального обстоятельства ФНС.
// 
// Параметры:
//  КодСпециальногоОбстоятельства - Строка -Код специального обстоятельства
// 
// Возвращаемое значение:
//  Структура - Описание специального обстоятельства ФНС:
// * Код - Строка
// * Наименование - Строка
Функция ОписаниеСпециальногоОбстоятельстваФНС(КодСпециальногоОбстоятельства) Экспорт
	Результат = Новый Структура("Код, Наименование", "", "");
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Код = КодСпециальногоОбстоятельства;
	МенеджерЗаписи.Прочитать();
	ЗаполнитьЗначенияСвойств(Результат, МенеджерЗаписи);
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	Если Параметры.Свойство("ДанныеИзСервиса") Тогда
		ОбновитьПереченьСпецОбстоятельств(Параметры.ДанныеИзСервиса);
	Иначе
		ТекстМакет = ПолучитьМакет("ПереченьСпециальныхОбстоятельствДокументаЭДО");
		ОбновитьПереченьСпецОбстоятельств(ТекстМакет.ПолучитьТекст());
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли