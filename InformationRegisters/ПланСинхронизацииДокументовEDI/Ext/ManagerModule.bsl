#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверитьИсполняющиеФоновыеЗадания() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланСинхронизацииДокументовEDI.Очередность,
	|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект,
	|	ПланСинхронизацииДокументовEDI.СценарийВыполнения,
	|	ПланСинхронизацииДокументовEDI.ИдентификаторФоновогоЗадания КАК КлючЗадания
	|ИЗ
	|	РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПланСинхронизацииДокументовEDI
	|ГДЕ
	|	ПланСинхронизацииДокументовEDI.ИдентификаторФоновогоЗадания <> """"
	|	И
	|		ПланСинхронизацииДокументовEDI.СостояниеВыполнения = Значение(Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Очередность", "Очередность");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПрикладнойОбъект", "ПрикладнойОбъект");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СценарийВыполнения", "СценарийВыполнения");
		Блокировка.Заблокировать();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Задание = СостояниеЗадания(Выборка.КлючЗадания);
			Если Задание = Неопределено Или Задание.Состояние = СостояниеФоновогоЗадания.Завершено
				Или Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					
				НаборЗаписей = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПрикладнойОбъект.Установить(Выборка.ПрикладнойОбъект);
				НаборЗаписей.Отбор.СценарийВыполнения.Установить(Выборка.СценарийВыполнения);
				НаборЗаписей.Отбор.Очередность.Установить(Выборка.Очередность);
				НаборЗаписей.Прочитать();
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.ИдентификаторФоновогоЗадания = Неопределено;
				КонецЦикла;
				
				НаборЗаписей.Записать();
			ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
				Ошибка = Задание.ИнформацияОбОшибке;
				
				ЗафиксироватьОшибкуВыполнениеСценария(Выборка.ПрикладнойОбъект, Выборка,
					Новый Структура("ТекстОшибки, ПодробноеОписаниеОшибки",
					КраткоеПредставлениеОшибки(Ошибка), ПодробноеПредставлениеОшибки(Ошибка)));
			КонецЕсли;
				
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибкиВыполнения(НСтр("ru='Актуализация плана синхронизации с сервисом 1С:EDI.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Обновление параметров выполнения синхронизации с сервисом.
// 
// Параметры:
// 	ДанныеСценария - Структура - Ключ плана, для которого требуется обновить параметры.
// 	
// 	ОбновлениеПараметровВыполнения - Структура - параметры выполнения, подлежащие обновлению.
// 
Процедура АктуализироватьПараметрыВыполнения(Знач ДанныеСценария, Знач ОбновлениеПараметровВыполнения) Экспорт
	
	ИмяОперации = СтрШаблон(НСтр("ru='Актуализация параметров выполнения синхронизации для объекта %1.'"),
		Строка(ДанныеСценария.ПрикладнойОбъект));
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", ДанныеСценария.ПрикладнойОбъект);
		ЭлементБлокировки.УстановитьЗначение("СценарийВыполнения", ДанныеСценария.СценарийВыполнения);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрикладнойОбъект.Установить(ДанныеСценария.ПрикладнойОбъект);
		НаборЗаписей.Отбор.Очередность.Установить(ДанныеСценария.Очередность);
		НаборЗаписей.Отбор.СценарийВыполнения.Установить(ДанныеСценария.СценарийВыполнения);
				
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполнена Тогда
				Продолжить;
			КонецЕсли;
				
			ЗаполнитьЗначенияСвойств(Запись, ОбновлениеПараметровВыполнения);
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибкиВыполнения(ИмяОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Изымает из очереди на выполнение синхронизации 10 объектов и возвращает ссылки на них. В случае, если очередь
//    пуста - возвращает Неопределено.
// 
// Параметры:
// 	ИдентификаторФоновогоЗадания - Строка - Ключ фонового задания, выполняющего синхронизацию.
// Возвращаемое значение:
// 	Массив, Неопределено - объекты синхронизации.
//
Функция ПорцияОбъектовСинхронизации(Знач ИдентификаторФоновогоЗадания) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаИсполнения", ТекущаяУниверсальнаяДата());
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект КАК ПрикладнойОбъект
		|ИЗ
		|	РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПланСинхронизацииДокументовEDI
		|СГРУППИРОВАТЬ ПО
		|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект
		|ИМЕЮЩИЕ
		|	МАКСИМУМ(ПланСинхронизацииДокументовEDI.ДатаИсполнения) < &ДатаИсполнения
		|	И МАКСИМУМ(ПланСинхронизацииДокументовEDI.ИдентификаторФоновогоЗадания) = """"
		|	И СУММА(ВЫБОР
		|		КОГДА ПланСинхронизацииДокументовEDI.СостояниеВыполнения В
		|		(ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.Ошибка),
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.ОжидаетсяСопоставление),
		|			ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.ОшибкаПроверкиСопоставления))
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ) = 0";
	
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЗафиксироватьТранзакцию();
			
			Возврат Неопределено;
		КонецЕсли;
		
		Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ПрикладнойОбъект");
		Для Каждого ОбъектСинхронизации Из Результат Цикл
			НаборЗаписей = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПрикладнойОбъект.Установить(ОбъектСинхронизации);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ИдентификаторФоновогоЗадания = ИдентификаторФоновогоЗадания;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
			
		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Неопределено;
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Помещает обратно в очередь на выполнение синхронизации прикладные объекты
// 
// Параметры:
// 	ОбъектыСинхронизации - Массив - Объекты синхронизации
//
Процедура ОсвободитьОбъектыСинхронизации(Знач ОбъектыСинхронизации) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Для Каждого ОбъектСинхронизации Из ОбъектыСинхронизации Цикл
			ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", ОбъектСинхронизации);
		КонецЦикла;
		Блокировка.Заблокировать();
	
		Для Каждого ОбъектСинхронизации Из ОбъектыСинхронизации Цикл
			НаборЗаписей = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПрикладнойОбъект.Установить(ОбъектСинхронизации);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись.ИдентификаторФоновогоЗадания = "";
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает текущее состояние синхронизации прикладного объекта с сервисом
// 
// Параметры:
//  ПрикладнойОбъект - ОпределяемыйТип.ПрикладнойОбъектEDI - объект синхронизации.
// Возвращаемое значение:
// 	Структура - Описание:
// * ПодробноеОписаниеОшибки - Строка - подробное описание ошибки, возникшей на данном этапе.
// * ТекстОшибки - Строка - краткое описание ошибки, возникшей на данном этапе.
// * ДанныеСопоставленияНоменклатуры - Структура - результат сопоставления номенклатуры при получении документа 
//      из сервиса.
// * ОкончаниеВыполнения - Дата - окончание выполнения данного этапа.
// * НачалоВыполнения - Дата - начало выполнения данного этапа.
// * СостояниеВыполнения - ПеречислениеСсылка.СостоянияСинхронизацииДокументовEDI - состояние выполнения синхронизации.
//
Функция ТекущееСостояние(Знач ПрикладнойОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("СостояниеВыполнения", Перечисления.СостоянияСинхронизацииДокументовEDI.Выполнена);
	Результат.Вставить("НачалоВыполнения", Дата(1,1,1,0,0,0));
	Результат.Вставить("ОкончаниеВыполнения", Дата(1,1,1,0,0,0));
	Результат.Вставить("ДанныеСопоставленияНоменклатуры", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ПодробноеОписаниеОшибки", "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрикладнойОбъект", ПрикладнойОбъект);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланСинхронизацииДокументовEDI.СостояниеВыполнения КАК СостояниеВыполнения,
		|	ПланСинхронизацииДокументовEDI.ПодробноеОписаниеОшибки КАК ПодробноеОписаниеОшибки,
		|	ПланСинхронизацииДокументовEDI.ДанныеСопоставленияНоменклатуры КАК ДанныеСопоставленияНоменклатуры,
		|	ПланСинхронизацииДокументовEDI.НачалоВыполнения КАК НачалоВыполнения,
		|	ПланСинхронизацииДокументовEDI.ОкончаниеВыполнения КАК ОкончаниеВыполнения,
		|	ПланСинхронизацииДокументовEDI.ТекстОшибки КАК ТекстОшибки
		|ИЗ
		|	РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПланСинхронизацииДокументовEDI
		|ГДЕ
		|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект = &ПрикладнойОбъект
		|	И ПланСинхронизацииДокументовEDI.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.Выполнена)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПланСинхронизацииДокументовEDI.Очередность,
		|	ПланСинхронизацииДокументовEDI.ОчередностьВыполненияЭтапа";
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеСостояния = РезультатЗапроса.Выгрузить()[0];
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеСостояния,
		"СостояниеВыполнения, НачалоВыполнения, ОкончаниеВыполнения, ТекстОшибки, ПодробноеОписаниеОшибки");
	
	Результат.ДанныеСопоставленияНоменклатуры = ДанныеСостояния.ДанныеСопоставленияНоменклатуры.Получить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

// Возвращает данные следующего по очереди этапа синхронизации для данного прикладного объекта. Если все этапы 
//    отработаны - результатом будет Неопределено.
// 
// Параметры:
// 	ПрикладнойОбъект - ОпределяемыйТип.ПрикладнойОбъектEDI - прикладной объект, для которого требуется получить
// 	   следующий по очереди этап синхронизации с сервисом.
// Возвращаемое значение:
// 	Структура, Неопределено - Запись плана синхронизации.
//
Функция СледующийЭтап(Знач ПрикладнойОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрикладнойОбъект", ПрикладнойОбъект);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПланСинхронизацииДокументовEDI.ЭтапСинхронизации КАК ЭтапСинхронизации,
		|	ПланСинхронизацииДокументовEDI.СостояниеВыполнения КАК СостояниеВыполнения,
		|	ПланСинхронизацииДокументовEDI.НомерРевизии КАК НомерРевизии,
		|	ПланСинхронизацииДокументовEDI.ИдентификаторАсинхронногоОбработчика КАК ИдентификаторАсинхронногоОбработчика,
		|	ПланСинхронизацииДокументовEDI.Организация КАК Организация,
		|	ПланСинхронизацииДокументовEDI.Контрагент КАК Контрагент,
		|	ПланСинхронизацииДокументовEDI.Менеджер КАК Менеджер,
		|	ПланСинхронизацииДокументовEDI.ВариантУказанияНоменклатуры КАК ВариантУказанияНоменклатуры,
		|	ПланСинхронизацииДокументовEDI.ТипДокумента КАК ТипДокумента,
		|	ПланСинхронизацииДокументовEDI.СценарийВыполнения КАК СценарийВыполнения,
		|	ПланСинхронизацииДокументовEDI.Команда КАК Команда,
		|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект КАК ПрикладнойОбъект,
		|	ПланСинхронизацииДокументовEDI.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
		|	ПланСинхронизацииДокументовEDI.ИдентификаторВерсии КАК ИдентификаторВерсии,
		|	ПланСинхронизацииДокументовEDI.Очередность КАК Очередность,
		|	ПланСинхронизацииДокументовEDI.ТаблицаСопоставления КАК ТаблицаСопоставления,
		|	ПланСинхронизацииДокументовEDI.ХэшДокументаСервиса,
		|	ПланСинхронизацииДокументовEDI.ИдентификаторФоновогоЗадания,
		|	ПланСинхронизацииДокументовEDI.БизнесПроцессПоДокументуЗавершен
		|ИЗ
		|	РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПланСинхронизацииДокументовEDI
		|ГДЕ
		|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект = &ПрикладнойОбъект
		|	И
		|		ПланСинхронизацииДокументовEDI.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.Выполнена)
		|УПОРЯДОЧИТЬ ПО
		|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект,
		|	ПланСинхронизацииДокументовEDI.Очередность,
		|	ПланСинхронизацииДокументовEDI.СценарийВыполнения,
		|	ПланСинхронизацииДокументовEDI.ОчередностьВыполненияЭтапа";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Результат = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", Результат.ПрикладнойОбъект);
		ЭлементБлокировки.УстановитьЗначение("СценарийВыполнения", Результат.СценарийВыполнения);
		Блокировка.Заблокировать();
		
		Если Не ЭтапНаВыполнении(Результат) Тогда
			Запись = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьМенеджерЗаписи();
			Запись.ПрикладнойОбъект = Результат.ПрикладнойОбъект;
			Запись.СценарийВыполнения = Результат.СценарийВыполнения;
			Запись.Очередность = Результат.Очередность;
			Запись.ЭтапСинхронизации = Результат.ЭтапСинхронизации;
			Запись.Прочитать();
			
			Запись.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполняется;
			Запись.НачалоВыполнения = ТекущаяДатаСеанса();
			Запись.ТекстОшибки = "";
			Запись.ПодробноеОписаниеОшибки = "";
			Запись.ИдентификаторАсинхронногоОбработчика = "";
			Запись.ОкончаниеВыполнения = Дата(1,1,1,0,0,0);
			
			Запись.Записать(Истина);
			
			ЗаполнитьЗначенияСвойств(Результат, Запись);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Возврат Неопределено;
	КонецПопытки;
	
	Результат.ТаблицаСопоставления = Результат.ТаблицаСопоставления.Получить();
	
	Возврат Результат;
	
КонецФункции

// Конструктор параметров синхронизации с сервисом
// 
// Возвращаемое значение:
//  Структура - Параметры синхронизации с сервисом.
//   * Организация - ОпределяемыйТип.Организация - Организация, от имени которой формируется запрос к сервису.
//        Выступает в роли отправителя электронного документа.
//   * ХэшДокументаСервиса - Строка - Хеш сумма по алгоритму MD5 от последнего отправленного электронного документа,
//        соответствующего данному прикладному объекту.
//   * ИдентификаторВСервисе - Строка - Идентификатор прикладного объекта в сервисе.
//   * ИдентификаторВерсии - Строка - Идентификатор версии электронного документа в сервисе.
//   * Менеджер - ОпределяемыйТип.ПользовательEDI - Ответственный за документ.
//   * ВариантУказанияНоменклатуры - ПеречислениеСсылка.ВариантыУказанияНоменклатурыБЭД - вариант указания номенклатуры
//        в прикладном объекте.
//   * НомерРевизии - Строка - Номер редактируемой ревизии электронного документа в сервисе.
//   * Контрагент - ОпределяемыйТип.КонтрагентБЭД - получатель электронного документа
//   * КомандаПроцесса - ПеречислениеСсылка.КомандыПроцессаЗаказаEDI - Маршрут перехода в статусной модели 1С:EDI.
//   * СценарийВыполнения - ПеречислениеСсылка.СценарииВыполненияКомандEDI - Алгоритм синхронизации с сервисом.
//   * Документ - ОпределяемыйТип.ПрикладнойОбъектEDI - Объект синхронизации.
//
Функция НовыйПараметрыСинхронизацииССервисом() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Организация");
	Результат.Вставить("СценарийВыполнения");
	Результат.Вставить("КомандаПроцесса");
	Результат.Вставить("Контрагент");
	Результат.Вставить("Менеджер");
	Результат.Вставить("ВариантУказанияНоменклатуры");
	Результат.Вставить("Документ");
	Результат.Вставить("ИдентификаторВСервисе");
	Результат.Вставить("ИдентификаторВерсии");
	Результат.Вставить("НомерРевизии");
	Результат.Вставить("ХэшДокументаСервиса");
	
	Возврат Результат;
	
КонецФункции

// Инициализирует план синхронизации прикладного объекта с сервисом по заданному сценарию.
// 
// Параметры:
// 	ПараметрыВыполнения - Структура - Параметры синхронизации с сервисом. См. НовыйПараметрыСинхронизацииССервисом()
// 	ЕстьОшибки - Булево - Флаг ошибки построения плана.
// 	ТекстОшибки - Строка - Подробное описание ошибки.
//
Процедура СоздатьПлан(Знач ПараметрыВыполнения, ЕстьОшибки = Ложь, ТекстОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПрикладнойОбъект = ПараметрыВыполнения.Документ;
	ТипДокумента = РаботаСДаннымиEDIСлужебный.ТипДокументаEDI(ПрикладнойОбъект);
	Очередность = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ДатаИсполнения = ТекущаяУниверсальнаяДата();
	Сценарий = ПараметрыВыполнения.СценарийВыполнения;
	ИмяОперации = СтрШаблон(НСтр("ru='Построение плана синхронизации для объекта %1.'"),
		Строка(ПрикладнойОбъект));

	Если Не ЗначениеЗаполнено(Сценарий) Или Не ЗначениеЗаполнено(ПрикладнойОбъект) Тогда
		ТекстОшибки = ТекстОшибкиВыполнения(ИмяОперации, НСтр("ru='Переданы некорректные параметры построения плана.'"), ЕстьОшибки);
		
		Возврат;
	КонецЕсли;
	
	ОписаниеСценария = СценарииСинхронизации().Найти(Сценарий, "Сценарий");
	Если Не ЗначениеЗаполнено(ОписаниеСценария) Тогда
		ТекстОшибки = ТекстОшибкиВыполнения(ИмяОперации,
			СтрШаблон(НСтр("ru='Неизвестный сценарий синхронизации: %1.'"), Строка(Сценарий)), ЕстьОшибки);
		
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", ПрикладнойОбъект);
		Блокировка.Заблокировать();
		
		ПредыдущийПлан = ПредыдущийПлан(ПрикладнойОбъект, Очередность);
		Если ПредыдущийПлан <> Неопределено И ПредыдущийПлан.СценарийВыполнения = Сценарий Тогда
			Если ПредыдущийПлан.НаВыполнении Тогда
				ЗафиксироватьТранзакцию();
				
				Возврат;
			Иначе
				НаборЗаписей = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПрикладнойОбъект.Установить(ПрикладнойОбъект);
				НаборЗаписей.Отбор.Очередность.Установить(ПредыдущийПлан.Очередность);
				НаборЗаписей.Отбор.СценарийВыполнения.Установить(Сценарий);
				
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
		
		УдалитьОтработанныеСценарии(ПрикладнойОбъект, ОписаниеСценария.Метрика);
		
		НаборЗаписей = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрикладнойОбъект.Установить(ПрикладнойОбъект);
		НаборЗаписей.Отбор.Очередность.Установить(Очередность);
		НаборЗаписей.Отбор.СценарийВыполнения.Установить(Сценарий);
		
		ОчередностьВыполненияЭтапа = 1;
		
		Для Каждого Этап Из ОписаниеСценария.Этапы Цикл
			Запись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(Запись, ПараметрыВыполнения);
			
			Запись.ПрикладнойОбъект = ПрикладнойОбъект;
			Запись.ДатаИсполнения = ДатаИсполнения;
			Запись.ТипДокумента = ТипДокумента;
			Запись.ЭтапСинхронизации = Этап;
			Запись.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Требуется;
			Запись.ОчередностьВыполненияЭтапа = ОчередностьВыполненияЭтапа;
			Запись.Очередность = Очередность;
			Запись.Метрика = ОписаниеСценария.Метрика;
			
			Если ДляВыполненияЭтапаНеобходимаКоманда(Этап) Тогда
				Запись.Команда = ПараметрыВыполнения.КомандаПроцесса;
			КонецЕсли;
			
			ОчередностьВыполненияЭтапа = ОчередностьВыполненияЭтапа + 1;
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ТекстОшибкиВыполнения(ИмяОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ЕстьОшибки);
	КонецПопытки;

КонецПроцедуры

// Возобновляет выполнение последнего остановленного сценария синхронизации по данному прикладному объекту.
// 
// Параметры:
// 	ПрикладнойОбъект - ОпределяемыйТип.ПрикладнойОбъектEDI - Объект синхронизации.
// 	ДополнительныеПараметры - Неопределено - Структура - Параметры выполнения плана, требующие обновления.
// 	ЕстьОшибки - Булево - Флаг ошибки выполнения метода.
//
Процедура ПродолжитьВыполнениеТекущегоПлана(Знач ПрикладнойОбъект, Знач ДополнительныеПараметры = Неопределено,
	ЕстьОшибки = Ложь) Экспорт
	
	ИмяОперации = СтрШаблон(НСтр("ru='Повтор синхронизации объекта %1.'"), Строка(ПрикладнойОбъект));
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", ПрикладнойОбъект);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПрикладнойОбъект", ПрикладнойОбъект);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланСинхронизацииДокументовEDI.Очередность КАК Очередность,
		|	ПланСинхронизацииДокументовEDI.СценарийВыполнения КАК СценарийВыполнения
		|ИЗ
		|	РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПланСинхронизацииДокументовEDI
		|ГДЕ
		|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект = &ПрикладнойОбъект
		|	И ПланСинхронизацииДокументовEDI.Очередность В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ПланСинхронизацииДокументовEDI.Очередность КАК Очередность
		|			ИЗ
		|				РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПланСинхронизацииДокументовEDI
		|			ГДЕ
		|				ПланСинхронизацииДокументовEDI.ПрикладнойОбъект = &ПрикладнойОбъект
		|				И ПланСинхронизацииДокументовEDI.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.Выполнена)
		|			УПОРЯДОЧИТЬ ПО
		|				ПланСинхронизацииДокументовEDI.Очередность,
		|				ПланСинхронизацииДокументовEDI.ОчередностьВыполненияЭтапа)";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ЕстьОшибки = Истина;
			
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	
		Для Каждого ЗаписьВПлане Из РезультатЗапроса.Выгрузить() Цикл
			
			НаборЗаписей = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Очередность.Установить(ЗаписьВПлане.Очередность);
			НаборЗаписей.Отбор.СценарийВыполнения.Установить(ЗаписьВПлане.СценарийВыполнения);
			НаборЗаписей.Отбор.ПрикладнойОбъект.Установить(ПрикладнойОбъект);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Запись.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполнена Тогда
					Продолжить;
				КонецЕсли;
					
				Запись.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Требуется;
				Запись.ИдентификаторАсинхронногоОбработчика = Неопределено;
				Запись.ДанныеСопоставленияНоменклатуры = Неопределено;
				Запись.ИдентификаторФоновогоЗадания = "";
				Запись.ТекстОшибки = "";
				
				Если ДополнительныеПараметры <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(Запись, ДополнительныеПараметры);

					Для Каждого КлючЗначение Из ДополнительныеПараметры Цикл
						
						Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Запись, КлючЗначение.Ключ) Тогда
							Если КлючЗначение.Значение <> Неопределено 
								И ТипЗнч(Запись[КлючЗначение.Ключ]) = Тип("ХранилищеЗначения") Тогда
								
								Запись[КлючЗначение.Ключ] = Новый ХранилищеЗначения(КлючЗначение.Значение);
							Иначе
								Запись[КлючЗначение.Ключ] = КлючЗначение.Значение;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ТекстОшибкиВыполнения(ИмяОперации, ТекстОшибки, ЕстьОшибки);
	КонецПопытки;

КонецПроцедуры

// Фиксирует выполнение этапа синхронизации.
// 
// Параметры:
// 	ПрикладнойОбъект - ОпределяемыйТип.ПрикладнойОбъектEDI - Объект синхронизации.
// 	ДанныеЭтапа - Структура - описание выполненного этапа.
//  * СценарийВыполнения - ПеречислениеСсылка.СценарииВыполненияКомандEDI - Алгоритм синхронизации с сервисом.
// 	* Очередность - Число - позиция плана в очереди на выполнение.
// 	* ЭтапСинхронизации - ПеречислениеСсылка.ЭтапыСинхронизацииДокументовEDI - Этап синхронизации с сервисом.
// 	ЕстьОшибки - Булево - флаг ошибки выполнения метода
//
Процедура ОтметитьВыполнениеЭтапа(Знач ПрикладнойОбъект, Знач ДанныеЭтапа, ЕстьОшибки = Ложь) Экспорт
	
	ИмяОперации = СтрШаблон(НСтр("ru='Отметка о выполнении этапа синхронизации %1 для объекта %2.'"),
		Строка(ДанныеЭтапа.ЭтапСинхронизации), Строка(ПрикладнойОбъект));
		
	ИзмененияЭтапа = Новый Структура("СостояниеВыполнения, ИдентификаторАсинхронногоОбработчика, ОкончаниеВыполнения",
		Перечисления.СостоянияСинхронизацииДокументовEDI.Выполнена, Неопределено, ТекущаяДатаСеанса());
	
	ИзменитьСостояниеВыполненияЭтапа(ИмяОперации, ПрикладнойОбъект, ДанныеЭтапа, ИзмененияЭтапа, ЕстьОшибки);
	
КонецПроцедуры

// Фиксирует ошибку выполнения этапа и останавливает синхронизацию по данному прикладному объекту.
// 
// Параметры:
// 	ПрикладнойОбъект - ОпределяемыйТип.ПрикладнойОбъектEDI - Объект синхронизации.
// 	ДанныеЭтапа - Структура - описание выполненного этапа.
//  * СценарийВыполнения - ПеречислениеСсылка.СценарииВыполненияКомандEDI - Алгоритм синхронизации с сервисом.
// 	* Очередность - Число - позиция плана в очереди на выполнение.
// 	* ЭтапСинхронизации - ПеречислениеСсылка.ЭтапыСинхронизацииДокументовEDI - Этап синхронизации с сервисом.
// 	РезультатВыполнения - Структура - Результат выполнения этапа.
// 	* ТекстОшибки - Строка - Краткое представление ошибки.
// 	* ПодробноеОписаниеОшибки - Строка - Подробное представление ошибки.
// 	ЕстьОшибки - Булево - флаг ошибки выполнения метода
//
Процедура ЗафиксироватьОшибкуВыполнениеСценария(Знач ПрикладнойОбъект, Знач ДанныеЭтапа, Знач РезультатВыполнения,
	ЕстьОшибки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяОперации = СтрШаблон(НСтр("ru='Отметка о выполнении этапа синхронизации %1 для объекта %2.'"),
		Строка(ДанныеЭтапа.ЭтапСинхронизации), Строка(ПрикладнойОбъект));
		
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", ПрикладнойОбъект);
		ЭлементБлокировки.УстановитьЗначение("СценарийВыполнения", ДанныеЭтапа.СценарийВыполнения);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ПрикладнойОбъект", ПрикладнойОбъект);
		Запрос.УстановитьПараметр("Очередность", ДанныеЭтапа.Очередность);
		Запрос.УстановитьПараметр("СценарийВыполнения", ДанныеЭтапа.СценарийВыполнения);
		Запрос.УстановитьПараметр("ЭтапСОшибкой", ДанныеЭтапа.ЭтапСинхронизации);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоследующиеЭтапы.ПрикладнойОбъект КАК ПрикладнойОбъект,
		|	ПоследующиеЭтапы.СценарийВыполнения КАК СценарийВыполнения,
		|	ПоследующиеЭтапы.Очередность КАК Очередность,
		|	ПоследующиеЭтапы.ЭтапСинхронизации КАК ЭтапСинхронизации
		|ИЗ
		|	РегистрСведений.ПланСинхронизацииДокументовEDI КАК ЗаписьСОшибкой
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПоследующиеЭтапы
		|		ПО ЗаписьСОшибкой.ПрикладнойОбъект = ПоследующиеЭтапы.ПрикладнойОбъект
		|			И ЗаписьСОшибкой.Очередность = ПоследующиеЭтапы.Очередность
		|			И ЗаписьСОшибкой.СценарийВыполнения = ПоследующиеЭтапы.СценарийВыполнения
		|			И ЗаписьСОшибкой.ОчередностьВыполненияЭтапа <= ПоследующиеЭтапы.ОчередностьВыполненияЭтапа
		|ГДЕ
		|	ЗаписьСОшибкой.ПрикладнойОбъект = &ПрикладнойОбъект
		|	И ЗаписьСОшибкой.Очередность = &Очередность
		|	И ЗаписьСОшибкой.СценарийВыполнения = &СценарийВыполнения
		|	И ЗаписьСОшибкой.ЭтапСинхронизации = &ЭтапСОшибкой";
		
		Выборка = Запрос.Выполнить().Выгрузить();
		Для Каждого ЭлементВыборки Из Выборка Цикл
			Запись = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, ЭлементВыборки);
			Запись.Прочитать();
			
			Если Запись.ЭтапСинхронизации = ДанныеЭтапа.ЭтапСинхронизации Тогда
				Запись.ИдентификаторФоновогоЗадания = "";
				Запись.ТекстОшибки = РезультатВыполнения.ТекстОшибки;
				Запись.ПодробноеОписаниеОшибки = РезультатВыполнения.ПодробноеОписаниеОшибки;
				Запись.ОкончаниеВыполнения = ТекущаяДатаСеанса();
			КонецЕсли;
			
			Запись.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Ошибка;
			Запись.Записать(Истина);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибкиВыполнения(ИмяОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗафиксироватьРезультатПроверкиСопоставления(Знач ПрикладнойОбъект, Знач ДанныеЭтапа,
	Знач ДанныеСопоставленияНоменклатуры, ЕстьОшибки = Ложь) Экспорт
	
	ИмяОперации = СтрШаблон(
		НСтр("ru='Запись ошибок при проверке сопоставления номенклатуры на этапе синхронизации %1 для объекта %2.'"),
		Строка(ДанныеЭтапа.ЭтапСинхронизации), Строка(ПрикладнойОбъект));
		
	ИзмененияЭтапа = Новый Структура("СостояниеВыполнения, ДанныеСопоставленияНоменклатуры, ОкончаниеВыполнения",
		Перечисления.СостоянияСинхронизацииДокументовEDI.ОшибкаПроверкиСопоставления,
		Новый ХранилищеЗначения(ДанныеСопоставленияНоменклатуры), ТекущаяДатаСеанса());
		
	ИзменитьСостояниеВыполненияЭтапа(ИмяОперации, ПрикладнойОбъект, ДанныеЭтапа, ИзмененияЭтапа, ЕстьОшибки);
	
КонецПроцедуры

Процедура ОжидатьОтветаСервиса(Знач ПрикладнойОбъект, Знач ДанныеЭтапа, Знач РезультатВыполнения, ЕстьОшибки = Ложь) Экспорт
	
	ИмяОперации = СтрШаблон(
		НСтр("ru='Переход к ожиданию результата выполнения асинхронного задания %1 для объекта %2 на этапе %3.'"),
		РезультатВыполнения.ИдентификаторЗаданияСервиса, Строка(ПрикладнойОбъект), Строка(ДанныеЭтапа.ЭтапСинхронизации));
		
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", ПрикладнойОбъект);
		ЭлементБлокировки.УстановитьЗначение("СценарийВыполнения", ДанныеЭтапа.СценарийВыполнения);
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьМенеджерЗаписи();
		Запись.ПрикладнойОбъект = ПрикладнойОбъект;
		Запись.СценарийВыполнения = ДанныеЭтапа.СценарийВыполнения;
		Запись.Очередность = ДанныеЭтапа.Очередность;
		Запись.ЭтапСинхронизации = ДанныеЭтапа.ЭтапСинхронизации;
		Запись.Прочитать();
		
		Если Не Запись.Выбран() Тогда
			ОтменитьТранзакцию();
			
			ВызватьИсключение ТекстОшибкиПланНеИнициализирован(ПрикладнойОбъект);
		КонецЕсли;
		
		Запись.ИдентификаторАсинхронногоОбработчика = РезультатВыполнения.ИдентификаторЗаданияСервиса;
		Запись.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполняется;
		Запись.ДатаИсполнения = ТекущаяУниверсальнаяДата() + ТаймаутОпросаСервиса();
		Запись.ХэшДокументаСервиса = РезультатВыполнения.ХешДокументаСервиса;
			
		Запись.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибкиВыполнения(ИмяОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ЕстьОшибки);
	КонецПопытки;
		
КонецПроцедуры

Процедура ОжидатьСопоставленияНоменклатуры(Знач ПрикладнойОбъект, Знач ДанныеЭтапа,
	Знач ДанныеСопоставленияНоменклатуры, ЕстьОшибки = Ложь) Экспорт
	
	ИмяОперации = СтрШаблон(
		НСтр("ru='Переход к ожиданию сопоставления номенклатуры для объекта %1 на этапе %2.'"),
		Строка(ПрикладнойОбъект), Строка(ДанныеЭтапа.ЭтапСинхронизации));
		
	ИзмененияЭтапа = Новый Структура("СостояниеВыполнения, ДанныеСопоставленияНоменклатуры",
		Перечисления.СостоянияСинхронизацииДокументовEDI.ОжидаетсяСопоставление,
		Новый ХранилищеЗначения(ДанныеСопоставленияНоменклатуры));
	
	ИзменитьСостояниеВыполненияЭтапа(ИмяОперации, ПрикладнойОбъект, ДанныеЭтапа, ИзмененияЭтапа, ЕстьОшибки);
	
КонецПроцедуры

// Зафиксировать успешное выполнение плана синхронизации. Записи в очереди по данному плану будут удалены.
// 
// Параметры:
// 	ОбъектСинхронизации - ОпределяемыйТип.ПрикладнойОбъектEDI - Объект синхронизации с сервисом.
// 	СценарийВыполнения - ПеречислениеСсылка.СценарииВыполненияКомандEDI - Алгоритм выполнения синхронизации.
// 	Очередность - Число - позиция плана в очереди на выполнение.
// 	ЕстьОшибки - Булево - Флаг ошибки выполнения метода
//
Процедура ПланВыполнен(Знач ОбъектСинхронизации, Знач СценарийВыполнения, Знач Очередность, ЕстьОшибки = Ложь) Экспорт
	
	ИмяОперации = СтрШаблон(НСтр("ru='Завершение синхронизации для объекта %1.'"),
		Строка(ОбъектСинхронизации));
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", ОбъектСинхронизации);
		ЭлементБлокировки.УстановитьЗначение("СценарийВыполнения", СценарийВыполнения);
		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрикладнойОбъект.Установить(ОбъектСинхронизации);
		НаборЗаписей.Отбор.СценарийВыполнения.Установить(СценарийВыполнения);
		НаборЗаписей.Отбор.Очередность.Установить(Очередность);
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибкиВыполнения(ИмяОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ЕстьОшибки);
	КонецПопытки;
		
КонецПроцедуры

// Стартует фоновое задание, выполняющее синхронизацию с сервисом.
// 
// Параметры:
// 	ИмяПроцедуры - Строка - Экспортный метод общего модуля, ответственный за обработку этапов синхронизации.
//
Процедура ЗапуститьСинхронизацию(Знач ИмяПроцедуры) Экспорт
	
	Если АктивноеЗаданиеСинхронизации() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеИсполняющегоФоновогоЗадания();
	ПараметрыВыполнения.КлючФоновогоЗадания = КлючИсполняющегоФоновогоЗадания();
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяПроцедуры, ПараметрыВыполнения.КлючФоновогоЗадания);

КонецПроцедуры

// Отвечает на вопрос, может ли выполняться данный сценарий по отношению к прикладному объекту, бизнес процесс
//   по которому в контексте статусной модели 1С:EDI завершен.
// 
// Параметры:
// 	СценарийВыполнения - ПеречислениеСсылка.СценарииВыполненияКомандEDI - Проверяемый сценарий.
// Возвращаемое значение:
// 	Булево - Если сценарий может быть выполнен - Истина. В противном случае - Ложь.
//
Функция СценарийДоступенПоОкончанииБизнесПроцесса(Знач СценарийВыполнения) Экспорт
	
	ОписаниеСценария = СценарииСинхронизации().Найти(СценарийВыполнения, "Сценарий");
	Если ОписаниеСценария = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru='Для сценария %1 не описаны правила выполнения.'"), СценарийВыполнения);
	КонецЕсли;
	
	Возврат ОписаниеСценария.ДоступенПоОкончанииБизнесПроцесса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтапНаВыполнении(Знач ДанныеЭтапа)
	
	Возврат ДанныеЭтапа.СостояниеВыполнения = Перечисления.СостоянияСинхронизацииДокументовEDI.Выполняется;
	
КонецФункции

Функция ПредыдущийПлан(Знач ПрикладнойОбъект, Знач Очередность)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрикладнойОбъект", ПрикладнойОбъект);
	Запрос.УстановитьПараметр("Очередность", Очередность);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПредыдущиеСценарии.СценарийВыполнения,
	|	ПредыдущиеСценарии.Очередность,
	|	ПредыдущиеСценарии.Метрика,
	|	ПредыдущиеСценарии.НаВыполнении > 0 КАК НаВыполнении
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланСинхронизацииДокументовEDI.СценарийВыполнения,
	|		ПланСинхронизацииДокументовEDI.Очередность,
	|		ПланСинхронизацииДокументовEDI.Метрика,
	|		СУММА(ВЫБОР
	|			КОГДА
	|				ПланСинхронизацииДокументовEDI.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НаВыполнении
	|	ИЗ
	|		РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПланСинхронизацииДокументовEDI
	|	ГДЕ
	|		ПланСинхронизацииДокументовEDI.ПрикладнойОбъект = &ПрикладнойОбъект
	|		И ПланСинхронизацииДокументовEDI.Очередность <= &Очередность
	|	СГРУППИРОВАТЬ ПО
	|		ПланСинхронизацииДокументовEDI.СценарийВыполнения,
	|		ПланСинхронизацииДокументовEDI.Очередность,
	|		ПланСинхронизацииДокументовEDI.Метрика) КАК ПредыдущиеСценарии
	|УПОРЯДОЧИТЬ ПО
	|	ПредыдущиеСценарии.Очередность УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

Функция НовыйСценарииСинхронизации()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("ПеречислениеСсылка.СценарииВыполненияКомандEDI"));
	Результат.Колонки.Добавить("Метрика", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("Этапы", Новый ОписаниеТипов("Массив"));
	Результат.Колонки.Добавить("ДоступенПоОкончанииБизнесПроцесса", Новый ОписаниеТипов("Булево"));
	
	Результат.Индексы.Добавить("Сценарий");
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьСценарий(ДоступныеСценарии, Знач Сценарий, Знач Метрика, Знач Этапы, Знач ВыполнятьВсегда = Ложь)
	
	Запись = ДоступныеСценарии.Найти(Сценарий, "Сценарий");
	Если Запись = Неопределено Тогда
		Запись = ДоступныеСценарии.Добавить();
		Запись.Сценарий = Сценарий;
	КонецЕсли;
		
	Запись.Метрика = Метрика;
	Запись.Этапы = Этапы;
	Запись.ДоступенПоОкончанииБизнесПроцесса = ВыполнятьВсегда;
	
КонецПроцедуры

Функция ДляВыполненияЭтапаНеобходимаКоманда(Знач Этап)
	
	Возврат Этап = Перечисления.ЭтапыСинхронизацииДокументовEDI.ИзменитьСтатусВСервисе;
	
КонецФункции

Процедура УдалитьОтработанныеСценарии(Знач ПрикладнойОбъект, Знач Метрика)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрикладнойОбъект", ПрикладнойОбъект);
	Запрос.УстановитьПараметр("Метрика", Метрика);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланСинхронизацииДокументовEDI.Очередность КАК Очередность,
	|	ПланСинхронизацииДокументовEDI.СценарийВыполнения КАК СценарийВыполнения
	|ИЗ
	|	РегистрСведений.ПланСинхронизацииДокументовEDI КАК ПланСинхронизацииДокументовEDI
	|ГДЕ
	|	ПланСинхронизацииДокументовEDI.ПрикладнойОбъект = &ПрикладнойОбъект
	|	И ПланСинхронизацииДокументовEDI.Метрика >= &Метрика
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланСинхронизацииДокументовEDI.СценарийВыполнения,
	|	ПланСинхронизацииДокументовEDI.Очередность
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА ПланСинхронизацииДокументовEDI.СостояниеВыполнения В (
	|						ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.Ошибка))
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) > 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА ПланСинхронизацииДокументовEDI.СостояниеВыполнения В (
	|						ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.Выполняется),
	|						ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.Требуется),
	|						ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.ОжидаетсяСопоставление),
	|						ЗНАЧЕНИЕ(Перечисление.СостоянияСинхронизацииДокументовEDI.ОшибкаПроверкиСопоставления))
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) = 0)";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлементВыборки Из Выборка Цикл
		ПланВыполнен(ПрикладнойОбъект, ЭлементВыборки.СценарийВыполнения, ЭлементВыборки.Очередность);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьСостояниеВыполненияЭтапа(Знач ИмяОперации, Знач ПрикладнойОбъект, Знач ДанныеЭтапа,
	ИзмененияЭтапа, ЕстьОшибки = Ложь)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПланСинхронизацииДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ПрикладнойОбъект", ПрикладнойОбъект);
		ЭлементБлокировки.УстановитьЗначение("СценарийВыполнения", ДанныеЭтапа.СценарийВыполнения);
		Блокировка.Заблокировать();
		
		Запись = РегистрыСведений.ПланСинхронизацииДокументовEDI.СоздатьМенеджерЗаписи();
		Запись.ПрикладнойОбъект = ПрикладнойОбъект;
		Запись.СценарийВыполнения = ДанныеЭтапа.СценарийВыполнения;
		Запись.Очередность = ДанныеЭтапа.Очередность;
		Запись.ЭтапСинхронизации = ДанныеЭтапа.ЭтапСинхронизации;
		Запись.Прочитать();
		
		Если Не Запись.Выбран() Тогда
			ОтменитьТранзакцию();
			
			ВызватьИсключение ТекстОшибкиПланНеИнициализирован(ПрикладнойОбъект);
		КонецЕсли;
			
		ЗаполнитьЗначенияСвойств(Запись, ИзмененияЭтапа);
		
		Запись.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибкиВыполнения(ИмяОперации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ЕстьОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция АктивноеЗаданиеСинхронизации()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Наименование, Состояние",
		НаименованиеИсполняющегоФоновогоЗадания(), СостояниеФоновогоЗадания.Активно);
		
	ИсполняющиеФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор); 
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ИсполняющиеФоновыеЗадания.Количество() > 0 Тогда
		Возврат ИсполняющиеФоновыеЗадания[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СостояниеЗадания(Знач КлючЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ", КлючЗадания));
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НайденныеЗадания.Количество() Тогда
		Возврат НайденныеЗадания[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НаименованиеИсполняющегоФоновогоЗадания()
	
	Возврат "edi_data_synhronization_worker_3bf1f8a9699b4ddab316dd16b70b42d9";
	
КонецФункции

Функция КлючИсполняющегоФоновогоЗадания()
	
	Возврат Строка(Новый УникальныйИдентификатор());
	
КонецФункции

Функция СценарииСинхронизации()
	
	Результат = НовыйСценарииСинхронизации();
	
	ИнициализироватьСценарий(Результат, Перечисления.СценарииВыполненияКомандEDI.СоздатьДокументВСервисе,
		 1, ЭтапыСоздатьЗаказВСервисе(), );
	ИнициализироватьСценарий(Результат, Перечисления.СценарииВыполненияКомандEDI.ИзменитьСтатусДокументаВСервисе,
		 2, ЭтапыИзменитьСтатус());
	ИнициализироватьСценарий(Результат, Перечисления.СценарииВыполненияКомандEDI.ОтправитьНаСогласованиеВерсиюОрганизации,
		 2, ЭтапыОтправитьНаСогласованиеВерсиюОрганизации());
	ИнициализироватьСценарий(Результат, Перечисления.СценарииВыполненияКомандEDI.ПринятьВерсиюКонтрагента,
		 2, ЭтапыПринятьВерсиюКонтрагента(), Истина);
	ИнициализироватьСценарий(Результат, Перечисления.СценарииВыполненияКомандEDI.СкачатьВерсиюИзСервиса,
		 3, ЭтапыСкачатьВерсиюИзСервиса(), Истина);
	ИнициализироватьСценарий(Результат, Перечисления.СценарииВыполненияКомандEDI.ОтправитьВерсиюВСервис,
		 3, ЭтапыОтправитьВерсиюВСервис());

	Возврат Результат;
	
КонецФункции

Функция ЭтапыСоздатьЗаказВСервисе()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ВыполнитьПрикладныеПроверки);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ПроверитьСопоставлениеНоменклатуры);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.СоздатьВСервисе);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ОчиститьДокументыГотовыеКОтправке);
	
	Возврат Результат
	
КонецФункции

Функция ЭтапыИзменитьСтатус()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ВыполнитьПрикладныеПроверки);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ИзменитьСтатусВСервисе);
	
	Возврат Результат
	
КонецФункции

Функция ЭтапыПринятьВерсиюКонтрагента()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ВыполнитьПрикладныеПроверки);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ОбновитьПрикладнойОбъектИзСервиса);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ОбновитьВСервисе);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ИзменитьСтатусВСервисе);
	
	Возврат Результат
	
КонецФункции

Функция ЭтапыОтправитьНаСогласованиеВерсиюОрганизации()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ВыполнитьПрикладныеПроверки);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ПроверитьСопоставлениеНоменклатуры);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ОбновитьВСервисе);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ИзменитьСтатусВСервисе);
	
	Возврат Результат
	
КонецФункции

Функция ЭтапыСкачатьВерсиюИзСервиса()
	
	Результат = Новый Массив;
	
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ОбновитьПрикладнойОбъектИзСервиса);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ОбновитьВСервисе);
	
	Возврат Результат
	
КонецФункции

Функция ЭтапыОтправитьВерсиюВСервис()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ВыполнитьПрикладныеПроверки);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ПроверитьСопоставлениеНоменклатуры);
	Результат.Добавить(Перечисления.ЭтапыСинхронизацииДокументовEDI.ОбновитьВСервисе);
	
	Возврат Результат
	
КонецФункции

Функция ТекстОшибкиПланНеИнициализирован(Знач ПрикладнойОбъект)
	
	Возврат СтрШаблон(НСтр("ru='План синхронизации объекта %1 не инициализирован'"), Строка(ПрикладнойОбъект));
	
КонецФункции

Функция ТекстОшибкиВыполнения(Знач ИмяОперации, Знач ТекстОшибки, ЕстьОшибки = Неопределено)
	
	ЕстьОшибки = Истина;
	
	ПредставлениеОшибки = Новый Массив;
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Ошибка взаимодействия с сервисом 1С:EDI'")));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Операция: %1.'"), ИмяОперации));
	ПредставлениеОшибки.Добавить(СтрШаблон(НСтр("ru='Текст ошибки: %1'"), ТекстОшибки));
	
	Результат = СтрСоединить(ПредставлениеОшибки, Символы.ПС);
	
	ЗаписьЖурналаРегистрации(
		СтрШаблон(НСтр("ru='%1: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), 
		ИнтеграцияССервисомEDIСлужебный.СобытиеЖурналаРегистрацииСервисEDI(), ИмяОперации),
		УровеньЖурналаРегистрации.Ошибка,,, Результат);

	Возврат Результат;
		
КонецФункции

Функция ТаймаутОпросаСервиса()
	
	Возврат 30;
	
КонецФункции

#КонецОбласти

#КонецЕсли