#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.РеестрДокументов);
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам международного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
КонецПроцедуры

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРеестрДокументов = Неопределено;
	Если НЕ ТаблицыДляДвижений.Свойство("Таблица" + "РеестрДокументов", ТаблицаРеестрДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Набор.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Набор.Отбор.Ссылка.Установить(Документ);
	Набор.ЗагрузитьСОбработкой(ТаблицаРеестрДокументов);
	Набор.Записать();
	
	ОбновлениеИнформационнойБазыУТ.ОтметитьВыполнениеОбработкиИнтерактивно(Набор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Записывает в регистр данные по переданному разделителю записи.
//
// Параметры:
//  ТаблицыДляДвижений		 - Структура - содержит по ключу ТаблицыДляДвижений структуру
//  	имеющую ключ ТаблицаРеестрДокументов (ТаблицаЗначений).
//  РазделительЗаписи		 - Строка - измерение, по которому необходимо выполнить запись
//  ЗамещатьЗаписи			 - Булево - определяет режим замещения существующих записей разделителя. Истина - перед записью существующие
//		записи будут удалены. Ложь - записи будут дописаны к уже существующим в информационной базе записям.
//
Процедура ЗаписатьДанныеРазделителя(ТаблицыДляДвижений, РазделительЗаписи, ЗамещатьЗаписи = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = РегистрыСведений.РеестрДокументов.СоздатьНаборЗаписей();
	Набор.Отбор.РазделительЗаписи.Установить(РазделительЗаписи);
	Набор.ЗагрузитьСОбработкой(ТаблицыДляДвижений["Таблица" + "РеестрДокументов"]);
	Набор.Записать(ЗамещатьЗаписи);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

// Возвращает признак, того отражаются ли данные полученного объекта в реестре сведений или нет.
//
// Параметры:
//	ПроверяемыйОбъект - ДокументОбъект, ДокументСсылка, ДанныеФормыСтруктура, ОбъектМетаданных - 
//
// Возвращаемое значение:
//	Булево - Истина, если данные полученного объекта, отражаются в реестре сведений.
//
Функция ОбъектВключенВСоставДанныхРеестра(ПроверяемыйОбъект) Экспорт
	
	ТипЗначения = ТипЗнч(ПроверяемыйОбъект);
	Если ТипЗначения = Тип("ДанныеФормыСтруктура") Тогда
		Если Не ПроверяемыйОбъект.Свойство("Ссылка") Тогда
			Возврат Ложь;
		КонецЕсли;
		ТипСсылки = ТипЗнч(ПроверяемыйОбъект.Ссылка);
	Иначе	
		Если ТипЗначения = Тип("ОбъектМетаданных") Тогда
			МетаданныеЗначения = ПроверяемыйОбъект; // ОбъектМетаданныхДокумент
		Иначе
			МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗначения); // ОбъектМетаданныхДокумент
			
			Если МетаданныеЗначения = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоДокумент(МетаданныеЗначения) Тогда
			Возврат Ложь;
		КонецЕсли;

		ТипСсылки = ТипЗнч(МетаданныеЗначения.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение());
	КонецЕсли;

	Возврат Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.СодержитТип(ТипСсылки);
	
КонецФункции

// Инициализирует и записывает данные документов, полученных объектов метаданных, в регистр сведений.
//
// Параметры:
//	ОбъектыМетаданных - Соответствие - объекты метаданных:
//		* Ключ		- ОбъектМетаданныхДокумент	- объект метаданных документа.
//		* Значение	- Неопределено				- пустое значение.
//
Процедура ОтразитьДанныеДокументовВРеестре(ОбъектыМетаданных) Экспорт
	
	ИменаОбъектов		= Новый Массив;
	СсылкиДокументов	= Новый Массив;
	
	Для Каждого ЭлементДанных Из ОбъектыМетаданных Цикл
		ОбъектДанных		= ЭлементДанных.Ключ;
		ПолноеИмяОбъекта	= ОбъектДанных.ПолноеИмя();
		
		ИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	КонецЦикла;
	
	НеиспользуемыеПоля = Новый Массив;
	НеиспользуемыеПоля.Добавить("Дополнительно");
	НеиспользуемыеПоля.Добавить("НомерПервичногоДокумента");
	НеиспользуемыеПоля.Добавить("ИдентификаторЗаписи");
	
	Для Каждого ПолноеИмяОбъекта Из ИменаОбъектов Цикл
		
		ИмяДокумента = СтрРазделить(ПолноеИмяОбъекта, ".")[1];
		РезультатАдаптацииЗапроса = Документы[ИмяДокумента].АдаптированныйТекстЗапросаДвиженийПоРегистру("РеестрДокументов");
		Регистраторы = ОбновлениеИнформационнойБазыУТ.ДанныеНезависимогоРегистраДляПерепроведения(
							РезультатАдаптацииЗапроса,
							"РегистрСведений.РеестрДокументов",
							ПолноеИмяОбъекта,
							НеиспользуемыеПоля);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СсылкиДокументов, Регистраторы.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
	Для Каждого Ссылка Из СсылкиДокументов Цикл
		ТаблицыДанных = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, "РеестрДокументов");
		РегистрыСведений.РеестрДокументов.ЗаписатьДанные(ТаблицыДанных, Ссылка, Неопределено, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает коллекцию типов, которые включены в измерение 'Ссылка'.
//
// Возвращаемое значение:
//	Массив Из Тип - коллекция типов, которые включены в измерение 'Ссылка'.
//
Функция ТипыДокументовРеестра() Экспорт
	
	ТипыСсылки = Метаданные.РегистрыСведений.РеестрДокументов.Измерения.Ссылка.Тип.Типы();
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	//++ Локализация
	ИсключаемыеТипы.Очистить();
	//-- Локализация
	
	Если ИсключаемыеТипы.Количество() Тогда
		ТипыДокументов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ТипыСсылки, ИсключаемыеТипы);
	Иначе
		ТипыДокументов = ТипыСсылки;
	КонецЕсли;
	
	Возврат ТипыДокументов;
	
КонецФункции

// Возвращает ключ записи реестра по переданной ссылке документа.
//
// Параметры:
//	Ссылка - ДокументСсылка - ссылка на документ для которого необходимо сформировать ключ записи реестра.
//
// Возвращаемое значение:
//	РегистрСведенийКлючЗаписи.РеестрДокументов - если для ссылки ключ не найден, то возвращается Неопределено.
//
Функция КлючЗаписиДокумента(Ссылка) Экспорт
	
	ПоляВыборки = Новый Массив;
	ИмяРегистра = Метаданные.РегистрыСведений.РеестрДокументов.Имя;
	Для Каждого Измерение Из Метаданные.РегистрыСведений.РеестрДокументов.Измерения Цикл
		ПоляВыборки.Добавить(Символы.Таб + ИмяРегистра + "." + Измерение.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|&ПоляВыборки
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Ссылка = &Ссылка
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", СтрСоединить(ПоляВыборки,"," + Символы.ПС));
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗароса = Запрос.Выполнить();
	Выборка = РезультатЗароса.Выбрать();
	КлючЗаписи = Неопределено;
	Если Выборка.Следующий() Тогда
		ДанныеКлюча = Новый Структура;
		Для Каждого Колонка Из РезультатЗароса.Колонки Цикл
			ДанныеКлюча.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;
		КлючЗаписи = РегистрыСведений.РеестрДокументов.СоздатьКлючЗаписи(ДанныеКлюча);
	КонецЕсли;
	
	Возврат КлючЗаписи;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	ЧтениеОбъектаРазрешено(Ссылка)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	ИзменениеОбъектаРазрешено(Ссылка)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.19.37";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a81d07e9-0d8b-4816-9c92-2fdc0f7aea6c");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	ОписаниеОбработчика = Новый Массив;
	ОписаниеОбработчика.Добавить(
		НСтр("ru = 'Обновление записей регистра сведений ""Реестр документов"".'"));
	
	
	Обработчик.Комментарий = СтрСоединить(ОписаниеОбработчика, Символы.ПС);
	
	Читаемые = Новый Массив;
	
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура =
		"РегистрыСведений.РеестрДокументов.ОбработатьДанныеКазначействаДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("26f1cd1b-f817-4769-ae2f-4e5f9b1923f4");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКазначействаКОбработке";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	Описания = Новый Массив;
	Описания.Добавить(НСтр("ru = 'Обработка записей регистра сведений ""Реестр документов"" по документам раздела ""Казначейство"":'"));
	Описания.Добавить(НСтр("ru = '- добавление записей по документу ""Заявка на расходование денежных средств"" с операциями ""Выплата по ведомости на лицевые счета"" и ""Выплата по ведомости по зарплатному проекту"";'"));
	
	//++ Локализация
	Описания.Добавить(НСтр("ru = '- изменение операции ""Оплата самозанятому"" на операцию ""Оплата поставщику"";'"));
	Описания.Добавить(НСтр("ru = '- добавление записей по документу ""Заявка на расходование денежных средств"" с операцией ""Оплата поставщику"" с флагом ""Оплата самозанятому"";'"));
	//-- Локализация

	Обработчик.Комментарий = СтрСоединить(Описания, Символы.ПС);
	Обработчик.Многопоточный = Истина;

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура =
		"РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеИдентификаторовЗаписей";
	Обработчик.Версия = "11.5.20.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("3de75ee9-f8b2-12e4-92f1-0070668b35ac");
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляЗаполненияИдентификаторовЗаписей";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	Описания = Новый Массив;
	Описания.Добавить(НСтр("ru = 'Обработка записей регистра сведений ""Реестр документов"":'"));
	Описания.Добавить(НСтр("ru = '- заполнение идентификаторов'"));

	Обработчик.Комментарий = СтрСоединить(Описания, Символы.ПС);
	Обработчик.Многопоточный = Истина;

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.РеестрДокументов.ОбработатьДанныеКазначействаДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура =
		"РегистрыСведений.РеестрДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсиюВводОстатков";
	Обработчик.Версия = "11.5.20.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dd0dc9cd-f9e2-4abe-b3a4-9bf1a2dc85ee");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления =
		"РегистрыСведений.РеестрДокументов.ЗарегистрироватьДанныеКОбработкеДляИзмененияВводОстатков";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	Описания = Новый Массив;
	Описания.Добавить(НСтр("ru = 'Обработка записей регистра сведений ""Реестр документов"" по документам ввода остатков'"));
	Описания.Добавить(НСтр("ru = '- изменение значений ""Сумма"" и ""Валюта"" по документу ""Ввод остатков расчетов по эквайрингу""'"));
	Описания.Добавить(НСтр("ru = '- изменение значений ""Сумма"" и ""Валюта"" по документу ""Ввод остатков денежных средств""'"));
	 
	Обработчик.Комментарий = СтрСоединить(Описания, Символы.ПС);

	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковДенежныхСредств.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");

	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатковРасчетовПоЭквайрингу.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатковДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

// Регистрирует документы к обработке для изменения.
//
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработке(Параметры) Экспорт 
	
	ПолноеИмяРегистра  = "РегистрСведений.РеестрДокументов";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Ссылка.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	ПолныеИменаОбъектов = Новый Массив;
	
	ПараметрыВыборки.ПолныеИменаОбъектов  = СтрСоединить(ПолныеИменаОбъектов, ",");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", ПолноеИмяРегистра);
	
	
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ВсеКлючиОбработаны = Истина;
	
	ОбъектыМетаданных = Справочники.КлючиРеестраДокументов.ОбъектыМетаданныхЗакешированныеВКлючахРеестра();
	ОбъектыМетаданных.Вставить(Метаданные.Справочники.КлючиРеестраДокументов);
	
	Для Каждого ОбъектМетаданных Из ОбъектыМетаданных Цикл
		ЕстьЗаблокированные = ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь,
			ОбъектМетаданных.Ключ.ПолноеИмя());
		Если ЕстьЗаблокированные Тогда
			ВсеКлючиОбработаны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ВсеКлючиОбработаны Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ИмяИзмеренияДляОтбора = "Ссылка";
	ДополнительныеПараметры.ЗаписыватьВОднойТранзакции = Ложь;
	ДополнительныеПараметры.НужнаДополнительнаяОбработкаЗаписей = Истина;
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	ВсеСделано = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(Неопределено,
																			"РегистрСведений.РеестрДокументов",
																			Параметры.Очередь,
																			ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ВсеСделано;
	
КонецПроцедуры


// Регистрирует к обработке: документы "Зяавка на расходование ДС" с операциями "Выплата по ведомости на лицевые счета"
// и "Выплата по ведомости по зарплатному проекту" для добавления; документы с операцией "Оплата самозанятому"; 
// документы с операцией "Оплата поставщику", которых нет в регистре.
// 
// Параметры:
//  Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки.
//
Процедура ЗарегистрироватьДанныеКазначействаКОбработке(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ СписокЗаявок
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.ХозяйственнаяОперацияПоЗарплате В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту), 
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета))
		|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен
		|

		//++ Локализация

		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
		|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен
		|	И ЗаявкаНаРасходованиеДенежныхСредств.ОперацияССамозанятым
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)
		|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен

		//-- Локализация

		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписокЗаявок.Ссылка КАК Ссылка
		|ИЗ
		|	СписокЗаявок КАК СписокЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО СписокЗаявок.Ссылка = РеестрДокументов.Ссылка
		|ГДЕ
		|	РеестрДокументов.Ссылка ЕСТЬ NULL
		|

		//++ Локализация

		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеестрДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)

		//-- Локализация
		|";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);

КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ОбработатьДанныеКазначействаДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

// Зарегистрирует данные к обработке для заполнения идентификаторов записей.
// 
// Параметры:
//  Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки.
Процедура ЗарегистрироватьДанныеКОбработкеДляЗаполненияИдентификаторовЗаписей(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РеестрДокументов";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РеестрДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|ГДЕ
		|	РеестрДокументов.ИдентификаторЗаписи = """"
		|	И РеестрДокументов.Ссылка <> НЕОПРЕДЕЛЕНО";
		
	РегистрируемыеКортежи = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеКортежи, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеИдентификаторовЗаписей(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.РеестрДокументов";
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Константы.ИспользоватьМеханизмИзмененияНастроекСписковДокументов.Установить(Истина);
		Возврат;
	КонецЕсли;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяОбъекта;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеестрДокументов.ТипСсылки КАК ТипСсылки,
	|	РеестрДокументов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РеестрДокументов.ДатаДокументаИБ КАК ДатаДокументаИБ,
	|	РеестрДокументов.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	РеестрДокументов.Организация КАК Организация,
	|	РеестрДокументов.Партнер КАК Партнер,
	|	РеестрДокументов.МестоХранения КАК МестоХранения,
	|	РеестрДокументов.Контрагент КАК Контрагент,
	|	РеестрДокументов.Подразделение КАК Подразделение,
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.РазделительЗаписи КАК РазделительЗаписи,
	|	РеестрДокументов.НомерДокументаИБ КАК НомерДокументаИБ,
	|	РеестрДокументов.Статус КАК Статус,
	|	РеестрДокументов.Ответственный КАК Ответственный,
	|	РеестрДокументов.ДополнительнаяЗапись КАК ДополнительнаяЗапись,
	|	РеестрДокументов.Дополнительно КАК Дополнительно,
	|	РеестрДокументов.Комментарий КАК Комментарий,
	|	РеестрДокументов.Проведен КАК Проведен,
	|	РеестрДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК ДатаПервичногоДокумента,
	|	РеестрДокументов.Сумма КАК Сумма,
	|	РеестрДокументов.Валюта КАК Валюта,
	|	РеестрДокументов.Договор КАК Договор,
	|	РеестрДокументов.НомерПервичногоДокумента КАК НомерПервичногоДокумента,
	|	РеестрДокументов.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РеестрДокументов.ДатаОтраженияВУчете КАК ДатаОтраженияВУчете,
	|	РеестрДокументов.Приоритет КАК Приоритет,
	|	РеестрДокументов.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	РеестрДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	РеестрДокументов.СторноИсправление КАК СторноИсправление,
	|	РеестрДокументов.Автор КАК Автор,
	|	РеестрДокументов.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Ссылка В (&СписокДокументов)
	|ИТОГИ
	|ПО
	|	Ссылка";
	
	МассивДокументовКОбработке = ОбновляемыеДанные.ВыгрузитьКолонку("Ссылка");
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументовКОбработке);
	
	ОбновляемыеДанныеУспешноОбработаны = Истина;
	
	#Область БлокировкаЗаписейРегистраПоСпискуДокументов

	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
	ЭлементБлокировки.ИсточникДанных = ОбновляемыеДанные;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");

	НачатьТранзакцию();

	Попытка
		
		Блокировка.Заблокировать();

		ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

		Пока ВыборкаДокументы.Следующий() Цикл

			НаборЗаписей = СоздатьНаборЗаписей();
			ВыборкаЗаписиРегистра = ВыборкаДокументы.Выбрать();

			НаборЗаписейИзменен = НаборЗаписейПоДокументуИзменен(НаборЗаписей, ВыборкаДокументы.Ссылка,
				ВыборкаЗаписиРегистра);

			Если НаборЗаписейИзменен Тогда
				НаборЗаписей.Записать();
			КонецЕсли;

		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбновляемыеДанные.Скопировать(, "Ссылка"), ДополнительныеПараметры);
		
		ЗафиксироватьТранзакцию();
		
		ШаблонСообщения = НСтр("ru = 'Регистр сведений ""Реестр документов"". Обработана порция документов: %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, МассивДокументовКОбработке.Количество());
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , ,
				ТекстСообщения);
	
	Исключение
		
		ОтменитьТранзакцию();
		
		ОбновляемыеДанныеУспешноОбработаны = Ложь;
		
	КонецПопытки;

	#КонецОбласти
	
	#Область ПодокументнаяБлокировкаЗаписейРегистра

	Если ОбновляемыеДанныеУспешноОбработаны = Ложь Тогда

		ОбъектовОбработано = 0;
		ПроблемныхОбъектов = 0;
		ИсключенияПриОбновлении = Новый Массив;

		СписокОписаний = Новый Массив;
		СписокОписаний.Добавить(НСтр(
			"ru = 'Не удалось обработать документы по обработчику регистра сведений ""Реестр документов"":'"));
		СписокОписаний.Добавить(НСтр("ru = '- заполнение идентификаторов записей'"));

		Для Каждого ТекущийЭлемент Из ОбновляемыеДанные Цикл

			ПричинаИсключения = 0;
			Рекомендация = "";

			НачатьТранзакцию();

			Попытка

				ПричинаИсключения = 1; // Блокировка

				Блокировка = Новый БлокировкаДанных;
				
				// Блокировка регистра "Реестр документов".
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РеестрДокументов");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийЭлемент.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;

				Блокировка.Заблокировать();

				ПричинаИсключения = 2; // ПлохиеДанные
				Рекомендация = НСтр("ru = 'Перезапишите документ вручную.'");

				НаборЗаписей = СоздатьНаборЗаписей();
				НаборЗаписейИзменен = НаборЗаписейПоДокументуИзменен(НаборЗаписей, ТекущийЭлемент.Ссылка, Неопределено);

				ПричинаИсключения = 3; // Запись
				Если НаборЗаписейИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;

				ОбъектовОбработано = ОбъектовОбработано + 1;
				ЗафиксироватьТранзакцию();

			Исключение

				ОтменитьТранзакцию();

				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ТекущийЭлемент.Ссылка);

				Если ПричинаИсключения = 2 Тогда

					ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
						ТекущийЭлемент.Ссылка, Рекомендация, ИнформацияОбОшибке());
					ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);

				ИначеЕсли ПричинаИсключения = 3 Тогда

					ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
						ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
					ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);

				КонецЕсли;

			КонецПопытки;

		КонецЦикла;

		Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда

			СписокОписаний.Добавить(НСтр("ru = 'Всего пропущено: %1'"));
			ТекстСообщения = СтрШаблон(СтрСоединить(СписокОписаний, Символы.ПС), ПроблемныхОбъектов);
			ВызватьИсключение ТекстСообщения;

		Иначе

			ШаблонСообщения = НСтр("ru = 'Регистр сведений ""Реестр документов"". Обработана порция документов: %1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , ,
				ТекстСообщения);

		КонецЕсли;

		ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);

	КонецЕсли;

	#КонецОбласти
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если Параметры.ОбработкаЗавершена Тогда
		Константы.ИспользоватьМеханизмИзмененияНастроекСписковДокументов.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует к обработке документы ввода остатков для исправления данных "Сумма" и "Валюта"
// в реестре документов.
// 
// Параметры:
//  Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляИзмененияВводОстатков(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаРегистров = Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	ПараметрыВыборки.ИмяИзмеренияДляОтбора = "Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводОстатковРасчетовПоЭквайрингуРасчетыПоЭквайрингу.Ссылка КАК Ссылка,
		|	РеестрДокументов.Валюта КАК Валюта,
		|	РеестрДокументов.Сумма КАК Сумма,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВводОстатковРасчетовПоЭквайрингуРасчетыПоЭквайрингу.Валюта) КАК НесколькоВалют
		|ПОМЕСТИТЬ ДанныеДокументаЭквайринга
		|ИЗ
		|	Документ.ВводОстатковРасчетовПоЭквайрингу.РасчетыПоЭквайрингу КАК ВводОстатковРасчетовПоЭквайрингуРасчетыПоЭквайрингу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ВводОстатковРасчетовПоЭквайрингуРасчетыПоЭквайрингу.Ссылка = РеестрДокументов.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВводОстатковРасчетовПоЭквайрингуРасчетыПоЭквайрингу.Ссылка,
		|	РеестрДокументов.Валюта,
		|	РеестрДокументов.Сумма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВводОстатков.Ссылка,
		|	РеестрДокументов.Валюта,
		|	РеестрДокументов.Сумма,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВводОстатков.БанковскийСчет.ВалютаДенежныхСредств)
		|ИЗ
		|	Документ.ВводОстатковДенежныхСредств.БанковскиеСчета КАК ВводОстатков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ВводОстатков.Ссылка = РеестрДокументов.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВводОстатков.Ссылка,
		|	РеестрДокументов.Валюта,
		|	РеестрДокументов.Сумма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВводОстатков.Ссылка,
		|	РеестрДокументов.Валюта,
		|	РеестрДокументов.Сумма,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВводОстатков.Касса.ВалютаДенежныхСредств)
		|ИЗ
		|	Документ.ВводОстатковДенежныхСредств.Кассы КАК ВводОстатков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ВводОстатков.Ссылка = РеестрДокументов.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВводОстатков.Ссылка,
		|	РеестрДокументов.Валюта,
		|	РеестрДокументов.Сумма
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВводОстатков.Ссылка,
		|	РеестрДокументов.Валюта,
		|	РеестрДокументов.Сумма,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВводОстатков.КассаККМ.ВалютаДенежныхСредств)
		|ИЗ
		|	Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ВводОстатков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
		|		ПО ВводОстатков.Ссылка = РеестрДокументов.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВводОстатков.Ссылка,
		|	РеестрДокументов.Валюта,
		|	РеестрДокументов.Сумма
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.Ссылка КАК Ссылка
		|ИЗ
		|	ДанныеДокументаЭквайринга КАК ИсходныеДанные
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ИсходныеДанные.НесколькоВалют > 1
		|				ТОГДА ИсходныеДанные.Сумма <> 0
		|			ИНАЧЕ ИсходныеДанные.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|		КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РеестрДокументов");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РезультатЗапроса, ДополнительныеПараметры);

КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюВводОстатков(Параметры) Экспорт
	
	ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
// Заполнение идентификаторов записей регистра "Реестр документов".
// 
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.РеестрДокументов - Набор записей
//  СсылкаНаДокумент - ДокументСсылка - Ссылка на документ
//  ЗаписиПоДокументу - ВыборкаИзРезультатаЗапроса, Неопределено - Выборка записей регистра по документу
// 
// Возвращаемое значение:
//  Булево - Набор записей регистра "Реестр документов" по документу был изменен
Функция НаборЗаписейПоДокументуИзменен(НаборЗаписей, СсылкаНаДокумент, ЗаписиПоДокументу = Неопределено)
	
	НаборЗаписейИзменен = Ложь;
	
	НаборЗаписей.Отбор.Ссылка.Установить(СсылкаНаДокумент);
	
	Если ЗаписиПоДокументу = Неопределено Тогда
		
		НаборЗаписей.Прочитать();
		
	Иначе
		
		Пока ЗаписиПоДокументу.Следующий() Цикл

			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ЗаписиПоДокументу);

		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Не ЗначениеЗаполнено(Запись.ИдентификаторЗаписи) Тогда
			
			Запись.ИдентификаторЗаписи = Строка(Новый УникальныйИдентификатор);
			НаборЗаписейИзменен = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НаборЗаписейИзменен;
	
КонецФункции
		
#КонецОбласти

#КонецЕсли
