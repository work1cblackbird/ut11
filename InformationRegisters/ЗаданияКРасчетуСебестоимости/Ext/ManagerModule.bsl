#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает имя константы, хранящей номер задания для данного регистра.
//
// Возвращаемое значение:
//	Строка - Строковое предствление имени константы НомерЗаданияКРасчетуСебестоимости.
Функция ИмяКонстантыНомераЗадания() Экспорт
	
	Возврат Метаданные.Константы.НомерЗаданияКРасчетуСебестоимости.Имя;
	
КонецФункции

// Увеличивает значение номера задания в константе.
//
// Возвращаемое значение:
//	Число - Предыдущий номер задания из константы "Номер задания к расчету себестоимости".
Функция УвеличитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Возвращает значение номера задани из константы.
//
// Возвращаемое значение:
//	Число - Номер текущего задания из константы "Номер задания к расчету себестоимости".
Функция ПолучитьНомерЗадания() Экспорт
	
	Возврат ЗакрытиеМесяцаСервер.ТекущийНомерЗадания(ИмяКонстантыНомераЗадания());
	
КонецФункции

// Метод создает запись регистра с заданными параметрами.
//
// Параметры:
//	ПериодЗадания   - Дата - Начало периода, для которого необходимо зарегистрировать задание к расчету
//	ДокументЗадания - ДокументСсылка - документ регистратор создавший движение в зависимых регистрах
//	Организация - СправочникСсылка.Организации - организация, по которой необходим перерасчет
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы
//	ИзмененыДанныеДляПартионногоУчетаВерсии21 - Булево - если Истина, то для таких изменений не требуется создавать записи в периоде, в котором используется партионный учет версии 2.2,
//		т.к. эти изменения больше не влияют на результат расчета партий/себестоимости (влияли только в версии 2.1);
//		если Ложь, то значит изменились данные, влияющие на результаты расчета партий версии 2.1. и версии 2.2,
//		т.е. запись для таких изменений нужна всегда, независимо от ее периода.
//
Процедура СоздатьЗаписьРегистра(ПериодЗадания, ДокументЗадания = Неопределено, Организация = Неопределено,
				НомерЗадания = Неопределено, ИзмененыДанныеДляПартионногоУчетаВерсии21 = Ложь) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если ИзмененыДанныеДляПартионногоУчетаВерсии21
	 И РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ПериодЗадания)) Тогда
		Возврат; // измененные данные не требуют перерасчета партий/себестоимости
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокументЗадания) И НЕ ЗначениеЗаполнено(Организация) Тогда
		
		// Создаем задание для каждой организации ИБ
		МассивОрганизаций = РасчетСебестоимостиПрикладныеАлгоритмы.СвязиОрганизацийПоСхемеИнтеркампани();
		
	Иначе
		
		МассивОрганизаций = Новый Массив;
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			// Попытаемся определить организацию по умолчанию.
			// Если не удастся, то будет вызвано платформенное исключение при записи.
			МассивОрганизаций.Добавить(Справочники.Организации.ОрганизацияПоУмолчанию());
		ИначеЕсли ТипЗнч(Организация) = Тип("Массив") Тогда
			МассивОрганизаций = Организация;
		Иначе
			МассивОрганизаций.Добавить(Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	// Запишем задания.
	НачатьТранзакцию();
	
	Попытка
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Для Каждого ТекущаяОрганизация Из МассивОрганизаций Цикл
			
			НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Месяц.Установить(НачалоМесяца(ПериодЗадания));
			НаборЗаписей.Отбор.Документ.Установить(ДокументЗадания);
			НаборЗаписей.Отбор.Организация.Установить(ТекущаяОрганизация);
			НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("СформированПрограммно", Истина);
			
			Запись = НаборЗаписей.Добавить();
			
			Запись.Месяц        = НачалоМесяца(ПериодЗадания);
			Запись.Документ     = ДокументЗадания;
			Запись.Организация  = ТекущаяОрганизация;
			Запись.НомерЗадания = НомерЗадания;
			
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение ТекстОшибки;
	КонецПопытки;
	
КонецПроцедуры

// Метод создает записи регистра с параметрами, полученными запросом.
//
// Параметры:
//	Выборка - ВыборкаИзРезультатаЗапроса - выборка, содержащая данные для формирования записей.
//  НомерЗадания - Число - номер задания; если не задано, то будет установлено значение из соответствующей константы.
//	ИзмененыДанныеДляПартионногоУчетаВерсии21 - Булево - если Истина, то для таких изменений не требуется создавать записи в периоде, в котором используется партионный учет версии 2.2,
//		т.к. эти изменения больше не влияют на результат расчета партий/себестоимости (влияли только в версии 2.1);
//		если Ложь, то значит изменились данные, влияющие на результаты расчета партий версии 2.1. и версии 2.2,
//		т.е. запись для таких изменений нужна всегда, независимо от ее периода.
//
Процедура СоздатьЗаписиРегистраПоДаннымВыборки(Выборка, НомерЗадания = Неопределено, ИзмененыДанныеДляПартионногоУчетаВерсии21 = Ложь) Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		// В РИБ данный регистр обрабатывается только в главном узле.
		Возврат;
	КонецЕсли;
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СтруктураПолей = Новый Структура("Месяц, Организация, Документ");
		
		Если НомерЗадания = Неопределено Тогда
			НомерЗадания = ПолучитьНомерЗадания();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
			
			СоздатьЗаписьРегистра(
				СтруктураПолей.Месяц,
				СтруктураПолей.Документ,
				СтруктураПолей.Организация,
				НомерЗадания,
				ИзмененыДанныеДляПартионногоУчетаВерсии21);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки    = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать задание к расчету себестоимости за %1 в организации %2 по причине: %3'"),
			Выборка.Месяц,
			Выборка.Организация,
			ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Партионный учет'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет очистку заданий к расчету себестоимости.
//
//	Параметры:
//		НачалоПериода - Дата - начало периода очистки, если не задано, то отбор не используется.
//		КонецПериода - Дата - окончание периода очистки, если не задано, то отбор не используется.
//		Организация - СправочникСсылка.Организации, Массив - отбор по организациям, если не задан, то отбор не используется.
//
Процедура ОчиститьЗаписиЗаПериод(НачалоПериода = Неопределено, КонецПериода = Неопределено, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.Месяц КАК Месяц,
	|	Т.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ЗаданияКРасчетуСебестоимости КАК Т
	|ГДЕ
	|	&Отбор
	|";
	
	ОтборПериод = "";
	ОтборОрганизация = "";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ОтборОрганизация = "Т.Организация В (&МассивОрганизаций)";
		
		Запрос.УстановитьПараметр("МассивОрганизаций", Организация);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(НачалоПериода) И ЗначениеЗаполнено(КонецПериода) Тогда
		
		ОтборПериод = "Т.Месяц МЕЖДУ &НачалоПериода И &КонецПериода";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
		Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(КонецПериода));
		
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) Тогда
		
		ОтборПериод = "Т.Месяц >= &НачалоПериода";
		
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));
		
	ИначеЕсли ЗначениеЗаполнено(КонецПериода) Тогда
		
		ОтборПериод = "Т.Месяц <= &КонецПериода";
		
		Запрос.УстановитьПараметр("КонецПериода",  КонецМесяца(КонецПериода));
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОрганизация) И ЗначениеЗаполнено(ОтборПериод) Тогда
		ТекстОтбор = ОтборОрганизация + " И " + ОтборПериод;
		
	ИначеЕсли ЗначениеЗаполнено(ОтборОрганизация) Тогда
		ТекстОтбор = ОтборОрганизация;
		
	ИначеЕсли ЗначениеЗаполнено(ОтборПериод) Тогда
		ТекстОтбор = ОтборПериод;
		
	Иначе
		ТекстОтбор = "ИСТИНА";
	
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Отбор", ТекстОтбор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Месяц.Установить(Выборка.Месяц);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет описания регистров для их подключения к механизму дат запрета изменения.
//
Процедура ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ПартииПрочихРасходов.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ПрочиеРасходы.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.СебестоимостьТоваров.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ТоварыОрганизаций.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ТоварыОрганизацийКПередаче.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"ОрганизацияВладелец");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию.ПолноеИмя(),
										"Период",
										"РегламентныеОперации",
										"Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных,
										Метаданные.РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.ПолноеИмя(),
										"Период",
										"ФинансовыйКонтур");
	

	РасчетСебестоимостиЛокализация.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
