#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает статус заказа.
//
// Параметры:
//  Заказ - ДокументСсылка.ЗаказКлиента - Заказ.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыСборкиИДоставки - Текущий статус распоряжения
//
Функция ПолучитьСтатусЗаказа(Заказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыСборкиИДоставки.Статус КАК Статус,
	|	СтатусыСборкиИДоставки.ДанныеЗаказа КАК ДанныеЗаказа
	|ИЗ
	|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
	|ГДЕ
	|	СтатусыСборкиИДоставки.Распоряжение = &Распоряжение";

	Запрос.УстановитьПараметр("Распоряжение", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Статус;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает промежуточно сохраненные данные заказа.
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказКлиента - Заказ.
//
// Возвращаемое значение:
//  ХранилищеЗначения - сохраненные промежуточные данные сборки.
//
Функция ПолучитьПромежуточныеДанныеСборки(Распоряжение) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыСборкиИДоставки.ДанныеЗаказа КАК ДанныеЗаказа
	|ИЗ
	|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
	|ГДЕ
	|	СтатусыСборкиИДоставки.Распоряжение = &Распоряжение";

	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.ДанныеЗаказа;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Записывает статус переданного распоряжения.
// 
// Параметры:
// 	Распоряжение - ДокументСсылка.ЗаказКлиента, ДокументСсылка.РеализацияТоваровУслуг - 
// 	Отказ - Булево
// 	УдалениеПроведения - Булево
//
Процедура ЗаписатьСтатусИзРаспоряжения(Распоряжение, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		СтатусЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Статус");
		Если СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
			УдалитьЗаписьСоСтатусом(Распоряжение);
			Возврат;
		КонецЕсли;
		
		ТоварыРаспоряжения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Товары").Выгрузить(); // ТаблицаЗначений
		
		Если СтатусЗаказа = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			КоличествоСтрок = ТоварыРаспоряжения.Количество();
			
			ПараметрыПоиска = Новый Структура("Отменено", Истина);
			ОтмененныеСтроки = ТоварыРаспоряжения.НайтиСтроки(ПараметрыПоиска);
			
			Если КоличествоСтрок = ОтмененныеСтроки.Количество() Тогда
				РегистрыСведений.СтатусыСборкиИДоставки.ЗаписатьСтатус(Распоряжение, Перечисления.СтатусыСборкиИДоставки.Отменен);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УдалениеПроведения Тогда
		УдалитьЗаписьСоСтатусом(Распоряжение);
		Возврат
	КонецЕсли;
	
	СтатусУстановлен = СтатусРаспоряженияУстановлен(Распоряжение);
	
	Если СтатусУстановлен Тогда
		Возврат;
	КонецЕсли;
	
	Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Склад");
	ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Дата");
	
	СборкаПоддерживается = СкладыСервер.ЕстьПоддержкаСборкиЗаказов(Склад, ДатаДокумента);
	Если СборкаПоддерживается Тогда
		Статус = Перечисления.СтатусыСборкиИДоставки.КСборке;
		ЗаписатьСтатус(Распоряжение, Статус);
		Возврат;
	КонецЕсли;
	
	ДоставкаПоддерживается = СкладыСервер.ЕстьПоддержкаДоставкиСвоимиКурьерами(Склад, ДатаДокумента);
	Если ДоставкаПоддерживается Тогда
		Статус = Перечисления.СтатусыСборкиИДоставки.ГотовКДоставке;
		ЗаписатьСтатус(Распоряжение, Статус);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает статус переданному распоряжению.
// 
// Параметры:
// 	Распоряжение - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ЗаказКлиента - 
// 	Статус - ПеречислениеСсылка.СтатусыСборкиИДоставки
//
Процедура ЗаписатьСтатус(Распоряжение, Статус) Экспорт
	
	ЗаписьРегистра = РегистрыСведений.СтатусыСборкиИДоставки.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Распоряжение = Распоряжение;
	ЗаписьРегистра.Прочитать();
	
	ЗаписьРегистра.Распоряжение = Распоряжение;
	ЗаписьРегистра.Статус = Статус;

	ТоварыРаспоряжения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Распоряжение, "Товары").Выгрузить(); // ТаблицаЗначений
	ЗаписьРегистра.КоличествоСтрокВЗаказе = ТоварыРаспоряжения.Количество();
	
	Попытка
		ЗаписьРегистра.Записать(Истина);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось записать статус.'");
		ТекстОшибки = ТекстОшибки + Символы.ПС + ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Записывает промежуточную информацию по сборке.
// 
// Параметры:
// 	Распоряжение - ДокументСсылка.ЗаказКлиента, ДокументСсылка.РеализацияТоваровУслуг - 
// 	Данные - ХранилищеЗначения
// 	КоличествоСтрокСобрано - Число
//
Процедура ЗаписатьПромежуточныеДанныеСборки(Распоряжение, Данные, КоличествоСтрокСобрано) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтатусыСборкиИДоставки.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Распоряжение.Установить(Распоряжение);
	НаборЗаписей.Прочитать(); 
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.ДанныеЗаказа = Данные;
		Запись.КоличествоСтрокСобрано = КоличествоСтрокСобрано;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СтатусРаспоряженияУстановлен(Распоряжение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыСборкиИДоставки.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыСборкиИДоставки КАК СтатусыСборкиИДоставки
		|ГДЕ
		|	СтатусыСборкиИДоставки.Распоряжение = &Распоряжение";
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьЗаписьСоСтатусом(Распоряжение)
	
	Набор = РегистрыСведений.СтатусыСборкиИДоставки.СоздатьНаборЗаписей();
	Набор.Отбор.Распоряжение.Установить(Распоряжение);
	Набор.Записать(Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
