
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;

	ИспользоватьПричиныОтменыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов");
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	УчетнаяЗапись = Параметры.УчетнаяЗапись;
	ДанныеТорговойПлощадки = ДанныеПоТорговойПлощадке(УчетнаяЗапись);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОтборыСписковКлиентСервер.ЗаполнитьСписокВыбораОтбораПоАктуальности(Элементы.ОтборСрокВыполнения.СписокВыбора);
	ИндексЭлемента = Элементы.ОтборСрокВыполнения.СписокВыбора.Количество() - 1;
	Элементы.ОтборСрокВыполнения.СписокВыбора.Вставить(ИндексЭлемента, "НаЭтойНеделе", НСтр("ru = 'На этой неделе'"));
	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриСозданииНаСервере(
		Список,
		Актуальность,
		Элементы.ОтборСрокВыполнения.СписокВыбора,
		ДатаСобытия,
		СтруктураБыстрогоОтбора);
	
	Если ОтборыСписковКлиентСервер.НеобходимОтборПоСостояниюПриСозданииНаСервере(Состояние, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоСостояниюСервер();
	КонецЕсли;
	
	Перечисления.СтатусыЗаказовТорговыхПлощадок.ЗаполнитьСписокВыбора(Элементы.ОтборСтатус.СписокВыбора, Ложь);
	
	ЗаполнитьСписокВыбораОтбораПоСостояниюСервер(Элементы.ОтборСостояние.СписокВыбора);
	
	ИспользоватьРеализациюПоНесколькимЗаказам           = ПолучитьФункциональнуюОпцию("ИспользоватьРеализациюПоНесколькимЗаказам");
	ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам = ПолучитьФункциональнуюОпцию("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента        = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	ИспользоватьОрдернуюСхемуПриОтгрузке                = ПолучитьФункциональнуюОпцию("ИспользоватьОрдернуюСхемуПриОтгрузке");
	
	УстановитьВидимостьЭлементов();
	
	Если НЕ ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		Элементы.УстановитьСтатусКВыполнению.Заголовок = НСтр("ru='В резерве'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ИспользуемыеТипыДокументов = Новый Массив;
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКомандыСпискаОсновные;
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО; // ГруппаФормы
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Элементы.ПредставлениеСостояния;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.СервисEDI
	ПараметрыИнтеграцииEDI = ДокументыEDIИнтеграция.ПараметрыФормыСпискаПрикладногоДокументаEDI();
	ПараметрыИнтеграцииEDI.ИмяРеквизитаСписок                                          = "Список";
	ПараметрыИнтеграцииEDI.ТипДокумента                                                = Тип("ДокументСсылка.ЗаказКлиента");
	ПараметрыИнтеграцииEDI.ИмяГруппыРазмещенияЭлементаБыстрогоОтбора                   = "ГруппаБыстрыеОтборы";
	ПараметрыИнтеграцииEDI.ИмяПсевдонимаОсновнойТаблицы                                = "ДокументЗаказКлиента";
	ПараметрыИнтеграцииEDI.СостояниеEDIРазмещатьПередЭлементом                         = "СписокУчетнаяЗапись";
	ПараметрыИнтеграцииEDI.ИмяЭлементаФормыСписок                                      = "Список";
	ПараметрыИнтеграцииEDI.ОтображатьПереходВСписокДокументыКЗагрузке                  = Истина;
	ПараметрыИнтеграцииEDI.ИмяГруппыРазмещенияЭлементаПереходВСписокДокументыКЗагрузке = "ГруппаСмотриТакжеПодвал";
	
	ДокументыEDIИнтеграция.ФормаСпискаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка, ПараметрыИнтеграцииEDI);
	// Конец ЭлектронноеВзаимодействие.СервисEDI
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"РегистрСведений.ЗаказыТорговыхПлощадок.ПриОткрытии");
	
	УстановитьОтборПоУчетнойЗаписи();
	УстановитьОтборПоСтатусу();
	ИзменитьОтборСтрогоПоДатеСобытия();
	УстановитьДатуАктуальности();
	
	ИзменитьЛоготип();
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// ЭлектронноеВзаимодействие.СервисEDI
	ПодключитьОбработчикОжидания("ОбновлениеИнформацииEDI", 300);
	// Конец ЭлектронноеВзаимодействие.СервисEDI
	
	ЗаполнитьСведенияПоЗаказамИОтправлениям(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "МП_ОбновлениеСведенийПоЗаказамИОтправлениям"
			Или ИмяСобытия = "Запись_ЗаказКлиента"
			Или ИмяСобытия = "Запись_ПередачаТоваровХранителю"
			Или ИмяСобытия = "Запись_РеализацияТоваровУслуг" Тогда
		Элементы.Список.Обновить();
		
	ИначеЕсли (ИмяСобытия = "ВыполненаЗагрузкаЗаказовТорговойПлощадки"
					Или ИмяСобытия = "ВыполненаОтменаСборкиЗаказовНаТорговойПлощадке"
					Или ИмяСобытия = "ВыполненоПодтверждениеСборкиЗаказовНаТорговойПлощадке")
				И Параметр = УчетнаяЗапись Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ПараметрыОповещения = Новый Структура("ИмяСобытия", ИмяСобытия);
			Оповещение = Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, ПараметрыОповещения);
			ОбработатьШтрихкоды(Оповещение, МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	// ЭлектронноеВзаимодействие.СервисEDI
	ДокументыEDIИнтеграцияКлиент.ОбработкаОповещенияФормаСписка(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.СервисEDI
	
	ОбработкаОповещенияФрагмент(ИмяСобытия);
	
	Если ИмяСобытия = "Запись_ЗаказКлиента"
			Или ИмяСобытия = "ЗакрытиеЗаказов" Тогда
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант"
				И (Источник = "ИспользоватьЗаказыКлиентов"
					Или Источник = "ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		УстановитьВидимостьЭлементов();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	ОтборыСписковКлиентСервер.ОтборПоАктуальностиПриЗагрузкеИзНастроек(
		Список,
		Актуальность,
		Элементы.ОтборСрокВыполнения.СписокВыбора,
		ДатаСобытия,
		СтруктураБыстрогоОтбора,
		Настройки);
	
	Если ОтборыСписковКлиентСервер.НеобходимОтборПоСостояниюПриЗагрузкеИзНастроек(Состояние, СтруктураБыстрогоОтбора, Настройки) Тогда
		УстановитьОтборПоСостояниюСервер();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.СервисEDI
	ДокументыEDIИнтеграция.ПриЗагрузкеДанныхИзНастроекНаСервере(ЭтотОбъект, Настройки);
	// Конец ЭлектронноеВзаимодействие.СервисEDI

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)

	// ЭлектронноеВзаимодействие.СервисEDI
	ДокументыEDIИнтеграция.ПриСохраненииДанныхВНастройкахНаСервере(ЭтотОбъект, Настройки);
	// Конец ЭлектронноеВзаимодействие.СервисEDI

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборУчетнаяЗаписьПриИзменении(Элемент)

	ДанныеТорговойПлощадки = ДанныеПоТорговойПлощадке(УчетнаяЗапись);
	УстановитьОтборПоУчетнойЗаписи();
	ЗаполнитьСведенияПоЗаказамИОтправлениям(Истина);
	
	ИзменитьЛоготип();

КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)

	УстановитьОтборПоСтатусу();

КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеПриИзменении(Элемент)

	УстановитьОтборПоСостояниюСервер();

КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияПриИзменении(Элемент)

	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(
		Список,
		Актуальность,
		ДатаСобытия,
		Элементы.ОтборСрокВыполнения.СписокВыбора);
	ИзменитьОтборСтрогоПоДатеСобытия();
	УстановитьДатуАктуальности();

КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОбщегоНазначенияУТКлиент.ПриВыбореОтбораПоАктуальности(
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		ЭтотОбъект,
		Список,
		"Актуальность",
		"ОтборСрокВыполнения",
		"ДатаСобытия");

КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполненияОчистка(Элемент, СтандартнаяОбработка)

	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОтборСостояниеОчистка(Элемент, СтандартнаяОбработка)

	Если Состояние = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтборСкладТорговойПлощадкиПриИзменении(Элемент)

	УстановитьОтборПоСкладу();

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаOzonНажатие(Элемент)

	ОчиститьСообщения();
	
	ИмяОткрываемойФормы = "Обработка.УправлениеПродажамиНаOzon.Форма.СписокЗаказов";
	
	ЗаголовокФормы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Заказы, отгружаемые со складов продавца <%1>'"), ДанныеТорговойПлощадки.ПостфиксЗаголовкаФормы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись",               УчетнаяЗапись);
	ПараметрыФормы.Вставить("ЗаголовокФормы",              ЗаголовокФормы);
	ПараметрыФормы.Вставить("ЭтоFBO",                      Ложь);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "FBS" + ДанныеТорговойПлощадки.ИдентификаторКлиента);
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы,, "FBS");

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЖурналПродажиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
			СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ИмяОткрываемойФормы = "Обработка.ЖурналДокументовПродажи.Форма.СписокДокументов";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УникальныйИдентификаторФормы", Ложь);
	
	ДополнительныеСвойства = Новый Структура;
	ДополнительныеСвойства.Вставить("ДанныеТорговойПлощадки", ДанныеТорговойПлощадки);
	ДополнительныеСвойства.Вставить("КлючНазначенияФормы",    "РаботаСПродажамиМП");
	
	ИнтеграцияСМаркетплейсамиКлиент.ДополнитьПараметрыФормы(
		ПараметрыФормы,
		ДополнительныеСвойства,
		ИмяОткрываемойФормы);
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы,, ПараметрыФормы.УникальныйИдентификаторФормы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриИзменении(Элемент)

	ОбеспечениеВДокументахКлиент.СписокПриИзменении(ЭтотОбъект, "Документ.ЗаказКлиента");

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ПоказатьСодержимоеТекущейЯчейки(Поле);

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ПоказатьСодержимоеТекущейЯчейки(Элемент.ТекущийЭлемент);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	// ЭлектронноеВзаимодействие.СервисEDI
	ДокументыEDIИнтеграция.ПриПолученииДанныхНаСервереСписокДокументов(
		Перечисления.ТипыДокументовEDI.ЗаказКлиента,
		ИмяЭлемента,
		Настройки,
		Строки);
	// Конец ЭлектронноеВзаимодействие.СервисEDI

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписок(Команда)

	УстановитьДатуАктуальности();
	ЗаполнитьСведенияПоЗаказамИОтправлениям();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКВыполнению(Команда)

	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента Тогда
		ЗаголовокСтатуса = НСтр("ru='К выполнению'");
	Иначе
		ЗаголовокСтатуса = НСтр("ru='В резерве'");
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""%ИмяСтатуса%"". Продолжить?'");
	ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ИмяСтатуса%", ЗаголовокСтатуса);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыделенныеСтроки",ВыделенныеСтроки);
	ДопПараметры.Вставить("СтатусДокументов", "КОбеспечению");
	ДопПараметры.Вставить("ЗаголовокСтатуса", ЗаголовокСтатуса);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусДокументовЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКОтгрузке(Команда)

	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заказов будет установлен статус ""К отгрузке"". Продолжить?'");
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ВыделенныеСтроки",ВыделенныеСтроки);
	ДопПараметры.Вставить("СтатусДокументов", "КОтгрузке");
	ДопПараметры.Вставить("ЗаголовокСтатуса", НСтр("ru='К отгрузке'"));
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусДокументовЗавершение", ЭтотОбъект, ДопПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)

	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеЗаказы = ВыделенныеЗаказы(ВыделенныеСтроки);
	
	СтруктураЗакрытия = Новый Структура;
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.ЗагрузитьЗначения(ВыделенныеЗаказы);
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказов);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
		ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)

	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Элементы.Список);

КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)

	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ОчиститьСообщения();
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);

КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);

КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)

	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидимостьСостоянияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО(ЭтотОбъект, Элементы.ПредставлениеСостояния);

КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ПечатьЭтикеток(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыПечати = ПолучитьОбъектыПечати(ВыделенныеСтроки);
	
	Если ОбъектыПечати.Количество() > 0 Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЭтоЗаказКлиента", Истина);
		ПараметрыОткрытия.Вставить("ЭтоFBO",          Ложь);
		ПараметрыОткрытия.Вставить("Объекты",         ОбъектыПечати);
		
		ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.ПечатьЭтикеток",
			ПараметрыОткрытия, 
			ЭтотОбъект);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выделенных строк печать этикеток не предусмотрена.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьНастройкуКомплектаДокументов(Команда)

	КлючОбъекта = "Обработка.ЖурналДокументовПродажи.Форма.КОформлениюНакладных/ТекущиеДанные";
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьНастройкуКомплектаДокументовЗавершение", ЭтотОбъект, КлючОбъекта);
	
	ПараметрыФормы = ПродажиВызовСервера.ПолучитьНастройкуКомплектаДокументов(КлючОбъекта);
	ОткрытьФорму("Обработка.ЖурналДокументовПродажи.Форма.ПараметрыОформленияДокументовПродажи",
		ПараметрыФормы,
		ЭтотОбъект,
		,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	ЭлементОформления = СписокУсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Документ имеет высокий приоритет'");
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	ЭлементОформления = СписокУсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Документ имеет низкий приоритет'");
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента") Тогда
		// Выделение цветом состояния "Закрыт"
		ЭлементОформления = СписокУсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Представление = НСтр("ru = 'Выделение цветом состояния ""Закрыт""'");
		
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Состояние");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияЗаказовКлиентов.Закрыт;
		
		СписокКонечныхСтатусов = Новый СписокЗначений;
		СписокКонечныхСтатусов.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен);
		СписокКонечныхСтатусов.Добавить(Перечисления.СтатусыЗаказовТорговыхПлощадок.Доставлен);
		
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = СписокКонечныхСтатусов;
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗакрытыйДокумент);
	КонецЕсли;
	
	// Представление даты сборки в прошлом.
	ЭлементОформления = СписокУсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты сборки - в прошлом'");
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаПлановойОтгрузки");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаПлановойОтгрузки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДЛФ=D");
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Представление даты сборки сегодня.
	ЭлементОформления = СписокУсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты сборки - сегодня'");
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаПлановойОтгрузки");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаПлановойОтгрузки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоЭтогоДня);
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаПлановойОтгрузки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", НСтр("ru = 'ДФ=ЧЧ:мм'"));
	
	// Представление даты сборки в будущем.
	ЭлементОформления = СписокУсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Представление даты сборки - в будущем'");
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаПлановойОтгрузки");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДатаПлановойОтгрузки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = Новый СтандартнаяДатаНачала(ВариантСтандартнойДатыНачала.НачалоСледующегоДня);
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yyyy ЧЧ:мм'");
	
	// Выделение цветом просроченного заказа
	ЭлементОформления = СписокУсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Представление = НСтр("ru = 'Выделение цветом просроченного отправления'");
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("НомерОтправления");
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ДатаПлановойОтгрузки");
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Просрочен");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныйДокумент);
	
	// Представление даты заказа.
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
		ЭтотОбъект,
		"Список.ДатаЗаказа",
		Элементы.СписокДатаЗаказа.Имя);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПоТорговойПлощадке(УчетнаяЗапись)

	// Заполнить данные из настроек интеграции.
	ДанныеТорговойПлощадки = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись);
	
	Возврат ДанныеТорговойПлощадки;

КонецФункции

&НаКлиенте
Процедура ИзменитьЛоготип()

	Элементы.ГиперссылкаЗаказыНаТорговойПлощадке.Картинка =
		ИнтеграцияСМаркетплейсамиКлиентСервер.ЛоготипТорговойПлощадки(ДанныеТорговойПлощадки.ВидМаркетплейса);

КонецПроцедуры

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)

	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);

КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Знач Оповещение, Данные)

	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.Список.ТекущаяСтрока = Ссылка;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьШтрихкодыЗавершение",
			ЭтотОбъект,
			Новый Структура("Данные, Оповещение", Данные, Оповещение));
		ПоказатьЗначение(ОписаниеОповещения, Ссылка);
		Возврат;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	ОбработатьШтрихкодыФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыЗавершение(ДополнительныеПараметры) Экспорт

	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ОбработатьШтрихкодыФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодыФрагмент(Знач Оповещение)

	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПоказатьСодержимоеТекущейЯчейки(Поле)

	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОтгрузки)
			И (Поле.Имя = "СписокНомерОтправления"
				Или Поле.Имя = "СписокДокументОтгрузки"
				Или Поле.Имя = "СуммаДокументаОтгрузки") Тогда
		ПоказатьЗначение(, ТекущиеДанные.ДокументОтгрузки);
		
	ИначеЕсли Поле.Имя = "СписокПроцентОтгрузки" Или Поле.Имя = "СписокСостояние" Тогда
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(ТекущиеДанные.Ссылка);
		
		Если ТекущиеДанные.ЭтоЗаказКакСчет Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму("Отчет.СостояниеВыполненияДокументов.Форма.ФормаОтчета",
			Новый Структура("ВходящиеДокументы", СписокДокументов),
			ЭтотОбъект,
			Ложь);
		
	Иначе
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоУчетнойЗаписи()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"УчетнаяЗапись",
		УчетнаяЗапись,
		,
		,
		ЗначениеЗаполнено(УчетнаяЗапись));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСтатусу()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"Статус",
		ОтборСтатус,
		,
		,
		ЗначениеЗаполнено(ОтборСтатус));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуАктуальности()

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДатаАктуальности",
		ОбщегоНазначенияКлиент.ДатаСеанса());
	ПодключитьОбработчикОжидания("УстановитьДатуАктуальности", 10*60, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам()

	ОбеспечениеВДокументахКлиент.ПроверитьВыполнениеЗаданияРаспределенияЗапасовПоЗаказам(ЭтотОбъект, Элементы.Список);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораОтбораПоСостояниюСервер(СписокВыбора)

	СписокВыбора.Добавить("ВсеОткрытые", НСтр("ru='Все открытые'"));
	СписокВыбора.Добавить("ВсеОжидающиеИсполнения", НСтр("ru='Все ожидающие исполнения'"));
	
	СписокВыбора.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению);
	СписокВыбора.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение);
	СписокВыбора.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке);
	СписокВыбора.Добавить(Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки);
	Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты") 
		ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки") Тогда
		СписокВыбора.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию);
	КонецЕсли;
	СписокВыбора.Добавить(Перечисления.СостоянияЗаказовКлиентов.Закрыт);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоСостояниюСервер()

	Если Состояние = "ВсеОткрытые" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Состояние",
			Перечисления.СостоянияЗаказовКлиентов.Закрыт, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления",
			Ложь,,, Истина);
		
	ИначеЕсли Состояние = "ВсеОжидающиеОплаты" Тогда
		
		МассивСостояний = Новый Массив();
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Состояние",
			МассивСостояний, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления",
			Ложь,,, Истина);
		
	ИначеЕсли Состояние = "ВсеОжидающиеИсполнения" Тогда
		
		МассивСостояний = Новый Массив();
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяСогласование);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКОбеспечению);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКОтгрузке);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки);
		МассивСостояний.Добавить(Перечисления.СостоянияЗаказовКлиентов.ГотовКЗакрытию);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Состояние",
			МассивСостояний, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления",
			Ложь,,, Истина);
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Состояние",
			Состояние, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Состояние));
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ПометкаУдаления",
			,,, Ложь);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()

	ЕстьДоступНаИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказКлиента);
	ИспользоватьЗаказыКлиентов                      = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента    = ПолучитьФункциональнуюОпцию("ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента");
	
	Элементы.УстановитьСтатусКОтгрузке.Видимость = ИспользоватьРасширенныеВозможностиЗаказаКлиента
													И Не ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента;
	
	Элементы.СписокСуммаОтгрузки.Видимость           = ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.СписокПроцентОтгрузки.Видимость         = ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.СписокСостояние.Видимость               = ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	Элементы.ЕстьРасхожденияОрдерНакладная.Видимость = ИспользоватьРасширенныеВозможностиЗаказаКлиента;
	
	Элементы.УстановитьСтатусЗакрыт.Видимость        = ПравоДоступа("Изменение",Метаданные.Документы.ЗаказКлиента);
	
	КомандыОбеспеченияВидимы = ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента И ЕстьДоступНаИзменение;
	Элементы.СписокОтгрузитьЗаказ.Видимость                      = КомандыОбеспеченияВидимы;
	Элементы.СписокРезервироватьЗаказ.Видимость                  = КомандыОбеспеченияВидимы;
	Элементы.СписокКОбеспечениюЗаказ.Видимость                   = КомандыОбеспеченияВидимы;
	Элементы.СписокРезервироватьПоМереПоступленияЗаказ.Видимость = КомандыОбеспеченияВидимы;
	Элементы.СписокНеОбеспечиватьЗаказ.Видимость                 = КомандыОбеспеченияВидимы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СписокСостояниеОбеспеченияСпискаЗаказов",
		"Видимость",
		ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента);
		
	ДоступностьКоманд = ИспользоватьЗаказыКлиентов И ИспользоватьРасширенныеВозможностиЗаказаКлиента;
									
	Элементы.ЗагрузитьНовыеЗаказы.Доступность     = ДоступностьКоманд;
	Элементы.ЗаполнитьИРаспределить.Доступность   = ДоступностьКоманд;
	Элементы.ПодтвердитьСборкуЗаказов.Доступность = ДоступностьКоманд;
	Элементы.ОтменитьСборкуЗаказов.Доступность    = ДоступностьКоманд;
	Элементы.СписокПечатьЭтикеток.Доступность     = ДоступностьКоманд;
	
	Элементы.КонтекстноеМенюЗагрузитьЗаказы.Доступность          = ДоступностьКоманд;
	Элементы.КонтекстноеМенюЗаполнитьИРаспределить.Доступность   = ДоступностьКоманд;
	Элементы.КонтекстноеМенюПодтвердитьСборкуЗаказов.Доступность = ДоступностьКоманд;
	Элементы.КонтекстноеМенюОтменитьСборкуЗаказов.Доступность    = ДоступностьКоманд;
	Элементы.КонтекстноеМенюПечатьЭтикеток.Доступность           = ДоступностьКоманд;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСведенияПоЗаказамИОтправлениям(ЗаполнитьСписокСкладов = Ложь)

	ОчиститьСообщения();
	
	Элементы.КартинкаДлительноеОжиданиеРасширеннаяПодсказка.Ширина = 0;
	Элементы.СтраницыСостояния.ТекущаяСтраница = Элементы.ГруппаЗаполнениеВыполняется;
	
	Если ЗаполнитьСписокСкладов Тогда
		Элементы.ОтборСкладТорговойПлощадки.СписокВыбора.Очистить();
		Элементы.ОтборСкладТорговойПлощадки.СписокВыбора.Добавить("", НСтр("ru = '<Заполнение списка...>'"));
		
		Если Не ПустаяСтрока(ОтборСкладТорговойПлощадки) Тогда
			ОтборСкладТорговойПлощадки = "";
			УстановитьОтборПоСкладу();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Заголовок = НСтр("ru = 'Заполнение сведений по заказам и отправлениям'");
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ПараметрыЗавершения = Новый Структура("ЗаполнитьСписокСкладов", ЗаполнитьСписокСкладов);
	ОповещениеОЗавершении =
		Новый ОписаниеОповещения("ЗаполнениеСведенийПоЗаказамИОтправлениямЗавершение", ЭтотОбъект, ПараметрыЗавершения);
	
	ДлительнаяОперация = ЗапуститьЗаполнениеСведенийПоЗаказамИОтправлениям(
																			УчетнаяЗапись,
																			УникальныйИдентификатор,
																			ЗаполнитьСписокСкладов);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапуститьЗаполнениеСведенийПоЗаказамИОтправлениям(УчетнаяЗапись, УникальныйИдентификатор, ЗаполнитьСписокСкладов)

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания =
		НСтр("ru = 'Интеграция с маркетплейсами. Заполнение сведений по заказам и отправлениям.'");
	
	ИмяМетода = "РегистрыСведений.ЗаказыТорговыхПлощадок.ОбновитьСведенияПоЗаказамИОтправлениям";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, УчетнаяЗапись, ЗаполнитьСписокСкладов);

КонецФункции

&НаКлиенте
Процедура ЗаполнениеСведенийПоЗаказамИОтправлениямЗавершение(РезультатЗадания, ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры.ЗаполнитьСписокСкладов Тогда
		Элементы.ОтборСкладТорговойПлощадки.СписокВыбора.Очистить();
	КонецЕсли;
	
	Элементы.КартинкаДлительноеОжиданиеРасширеннаяПодсказка.Ширина = 1;
	Элементы.СтраницыСостояния.ТекущаяСтраница = Элементы.ГруппаЗаполнениеЗавершено;
	
	Если РезультатЗадания <> Неопределено
			И РезультатЗадания.Статус = "Выполнено" Тогда
		Результат = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
		УдалитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
			
		Если ДополнительныеПараметры.ЗаполнитьСписокСкладов Тогда
			Для Каждого ЭлементСписка Из Результат.СписокСкладов Цикл
				Элементы.ОтборСкладТорговойПлощадки.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЦикла;
		КонецЕсли;
		
		ИнтеграцияСМаркетплейсамиКлиент.ВывестиСостояние(Результат.ОписаниеОшибки,, Истина);
		
	Иначе
		ШаблонОшибки = НСтр("ru = 'Не удалось заполнить сведения по заказам и отправлениям по причине: %1'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(РезультатЗадания = Неопределено,
			ПредставлениеНеизвестнойОшибки,
			РезультатЗадания.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ПодробноеПредставлениеОшибки);
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	УстановитьОтборПоСкладу();
	
	Оповестить("МП_ОбновлениеСведенийПоЗаказамИОтправлениям",,);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоСкладу()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"ИдентификаторСкладаТорговойПлощадки",
		ОтборСкладТорговойПлощадки,
		,
		,
		ЗначениеЗаполнено(ОтборСкладТорговойПлощадки));

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
	ОбработкаОповещенияФрагмент(ИмяСобытия);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия)

	Если ИмяСобытия = "ЗачтенаОплата"
			ИЛИ ПродажиКлиент.ИзменилисьДокументыОплатыКлиентам(ИмяСобытия)
			ИЛИ ИмяСобытия = "ЗакрытиеЗаказов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусДокументовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	СтатусДокументов = ДополнительныеПараметры.СтатусДокументов;
	ЗаголовокСтатуса = ДополнительныеПараметры.ЗаголовокСтатуса;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	КоличествоОбработанных = УстановитьСтатусДокументовНаСервере(ВыделенныеСтроки, СтатусДокументов);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(
		Элементы.Список,
		КоличествоОбработанных,
		ВыделенныеСтроки.Количество(),
		ЗаголовокСтатуса);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьСтатусДокументовНаСервере(ВыделенныеСтроки, СтатусДокументов)

	МассивДокументов = ВыделенныеЗаказы(ВыделенныеСтроки);
	КоличествоОбработанных =
		ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(МассивДокументов, СтатусДокументов);
	
	Возврат КоличествоОбработанных;

КонецФункции

&НаСервереБезКонтекста
Функция ВыделенныеЗаказы(ВыделенныеСтроки)

	МассивДокументов = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		МассивДокументов.Добавить(ВыделеннаяСтрока.Заказ);
	КонецЦикла;

	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивДокументов);

КонецФункции

&НаКлиенте
Процедура ИзменитьОтборСтрогоПоДатеСобытия()

	КоллекцияЭлементов = Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы;
	Представление = НСтр("ru = 'Отбор по дате события'");
	ДатаНачалаСобытия = Дата(1, 1, 1);
	
	ГруппаОтбора =
		ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	
	Если ГруппаОтбора <> Неопределено Тогда
		Если Актуальность = "Сегодня"
				Или Актуальность = "Завтра"
				Или Актуальность = "Послезавтра" Тогда
			НовыйВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			// ДатаСобытия не изменяется.
		ИначеЕсли Актуальность = "НаЭтойНеделе" Тогда
			НовыйВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ДатаАктуальности = ОбщегоНазначенияКлиент.ДатаСеанса();
			ДатаСобытия = КонецНедели(ОбщегоНазначенияКлиент.ДатаСеанса());
			ДатаНачалаСобытия = НачалоНедели(ДатаАктуальности);
		ИначеЕсли Актуальность = "ЧерезНеделю" Тогда
			НовыйВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			// ДатаСобытия не изменяется.
		Иначе
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из ГруппаОтбора.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСобытия")
					И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
				ЭлементОтбора.ВидСравнения = НовыйВидСравнения;
				ЭлементОтбора.ПравоеЗначение = ДатаСобытия;
				ЭлементОтбора.Использование  = Истина;
			ИначеЕсли ЗначениеЗаполнено(ДатаНачалаСобытия)
					И ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаСобытия")
					И Не ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
				ЭлементОтбора.ПравоеЗначение = ДатаНачалаСобытия;
				ЭлементОтбора.Использование  = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбъектыПечати(ВыделенныеСтроки)

	ОбъектыПечати = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ЗначениеЗаполнено(ВыделеннаяСтрока.ДокументОтгрузки) Тогда
			ОбъектыПечати.Добавить(ВыделеннаяСтрока.ДокументОтгрузки);
		ИначеЕсли ЗначениеЗаполнено(ВыделеннаяСтрока.Заказ) Тогда
			ОбъектыПечати.Добавить(ВыделеннаяСтрока.Заказ);
		КонецЕсли;
	КонецЦикла;

	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбъектыПечати);

КонецФункции

#Область НастройкаКомплектаДокументов

&НаКлиенте
Процедура ПолучитьНастройкуКомплектаДокументовЗавершение(Результат, КлючОбъекта) Экспорт 

	Если Результат <> Неопределено Тогда
		ПродажиВызовСервера.СохранитьНастройкуКомплектаДокументов(Результат, КлючОбъекта);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

// ЭлектронноеВзаимодействие.СервисEDI
	
#Область EDI

&НаКлиенте
Процедура Подключаемый_СтатусEDIОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ДокументыEDIИнтеграцияКлиент.ОтборСтатусEDIОбработкаВыбора(
		ЭтотОбъект,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтатусEDIОчистка(Элемент, СтандартнаяОбработка)

	ДокументыEDIИнтеграцияКлиент.ОтборСтатусEDIОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОформляемыеДокументыEDIОбработкаНавигационнойСсылки(Элемент,
			НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	ДокументыEDIИнтеграцияКлиент.ОформляемыеДокументыEDIОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеИнформацииEDI()

	ДокументыEDIИнтеграцияКлиент.ВыполнитьОбновлениеИнформацииСпискаДокументов(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ТипыДокументовEDI.ЗаказКлиента"));

КонецПроцедуры

#КонецОбласти

// Конец ЭлектронноеВзаимодействие.СервисEDI

#КонецОбласти
