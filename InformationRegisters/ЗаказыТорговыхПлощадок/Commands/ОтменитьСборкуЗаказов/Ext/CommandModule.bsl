
#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)

	ОчиститьСообщения();
	
	ЕстьУчетнаяЗапись =
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыВыполненияКоманды.Источник, "УчетнаяЗапись");
	Если Не ЕстьУчетнаяЗапись Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не предусмотрена отмена сборки заказов из этого источника.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("УчетнаяЗапись", ПараметрыВыполненияКоманды.Источник.УчетнаяЗапись);
	ПараметрыЗадания.Вставить("Форма",         ПараметрыВыполненияКоманды.Источник);
	
	ПолучитьОтправленияДляОтмены(ПараметрыЗадания);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьОтправленияДляОтмены(Знач Параметры)

	Форма = Параметры.Форма;
	
	ОтправленияДляОтмены = Новый Структура;
	ОтправленияДляОтмены.Вставить("Заказы",      Новый Массив);
	ОтправленияДляОтмены.Вставить("Отправления", Новый Массив);
	
	Если Форма.ИмяФормы = "Обработка.УправлениеПродажамиНаOzon.Форма.СписокЗаказов" Тогда
		ИмяТаблицы = "ТаблицаЗаказов";
		
		ИдентификаторыВыделенныхСтрок = Форма.Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
		ОтправленияДляОтмены = ПолучитьОтправленияДоступныеДляОтмены(ИдентификаторыВыделенныхСтрок,
			Форма.ТаблицаЗаказов);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.УправлениеПродажамиНаOzon.Форма.СоставЗаказа" Тогда
		ИмяТаблицы    = "";
		СтатусОтменен = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.Отменен");
		
		Если Форма.СтатусОтправления = СтатусОтменен Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отправление %1 уже отменено.'"),
				Форма.НомерОтправления);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Иначе
			ОтправленияДляОтмены.Заказы.Добавить(Форма.ДокументЗаказа);
			ОтправленияДляОтмены.Отправления.Добавить(Форма.НомерОтправления);
		КонецЕсли;
		
	Иначе
		ИмяТаблицы = "Список";
		
		КлючиВыделенныхСтрок = Форма.Элементы.Список.ВыделенныеСтроки;
		ОтправленияДляОтмены = ПолучитьОтправленияДоступныеДляОтмены(КлючиВыделенныхСтрок);
	КонецЕсли;
	
	Если ОтправленияДляОтмены.Отправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИмяТаблицы",        ИмяТаблицы);
	Параметры.Вставить("Заказы",            ОтправленияДляОтмены.Заказы);
	Параметры.Вставить("НомераОтправлений", ОтправленияДляОтмены.Отправления);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОтменитьСборкуЗаказов", ЭтотОбъект, Параметры);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись", Параметры.УчетнаяЗапись);
	
	ОткрытьФорму("РегистрСведений.ЗаказыТорговыхПлощадок.Форма.ВыборПричиныОтмены", 
		ПараметрыОткрытия,
		Параметры.Форма,
		,
		,
		,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтправленияДоступныеДляОтмены(ВыделенныеСтроки, Таблица = Неопределено)

	НомерОтправления  = "";
	СтатусОтправления = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ПустаяСсылка");
	СтатусОтменен     = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.Отменен");
	
	ЗаказыДляОтмены      = Новый Массив;
	ОтправленияДляОтмены = Новый Массив;
	ОтправленияПрочие    = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("РегистрСведенийКлючЗаписи.ЗаказыТорговыхПлощадок") Тогда
			ДанныеСтроки = ДанныеОтправленияИзРегистраНаСервере(ВыделеннаяСтрока);
		ИначеЕсли ТипЗнч(ВыделеннаяСтрока) = Тип("Число") И Таблица <> Неопределено Тогда
			ДанныеСтроки = Таблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Иначе
			ДанныеСтроки = Неопределено;
		КонецЕсли;
		
		Если ДанныеСтроки <> Неопределено Тогда
			Заказ             = ДанныеСтроки.ДокументЗаказа;
			НомерОтправления  = ДанныеСтроки.НомерОтправления;
			СтатусОтправления = ДанныеСтроки.СтатусОтправления;
			
			Если СтатусОтправления = СтатусОтменен Тогда
				ОтправленияПрочие.Добавить(НомерОтправления);
			Иначе
				ЗаказыДляОтмены.Добавить(Заказ);
				ОтправленияДляОтмены.Добавить(НомерОтправления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтправленияДляОтмены.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет отправлений, доступных для отмены.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	ИначеЕсли ОтправленияПрочие.Количество() > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Уже отменены следующие отправления: %1.'"),
			СтрСоединить(ОтправленияПрочие, ", "));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Заказы",      ЗаказыДляОтмены);
	Результат.Вставить("Отправления", ОтправленияДляОтмены);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеОтправленияИзРегистраНаСервере(КлючЗаписи)

	ДанныеОтправления = Новый Структура;   
	ДанныеОтправления.Вставить("ДокументЗаказа",   Документы.ЗаказКлиента.ПустаяСсылка());
	ДанныеОтправления.Вставить("НомерОтправления", "");
	ДанныеОтправления.Вставить("СтатусОтправления",
		ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ПустаяСсылка"));
	
	ДанныеСтроки = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, КлючЗаписи);
	ДанныеСтроки.Прочитать();
	
	Если ДанныеСтроки.Выбран() Тогда               
		ДанныеОтправления.ДокументЗаказа    = ДанныеСтроки.Заказ;
		ДанныеОтправления.НомерОтправления  = ДанныеСтроки.НомерОтправления;
		ДанныеОтправления.СтатусОтправления = ДанныеСтроки.Статус;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеОтправления;

КонецФункции

// Обработка выбора ответа.
//
// Параметры:
//   ПричинаОтмены           - Структура - выбранное значение:
//     * Идентификатор         - Число - идентификатор причины отмены отправления;
//     * Наименование          - Строка - наименование причины отмены;
//     * Ссылка                - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина отмены 1С.
//   ДополнительныеПараметры - Структура из КлючИЗначение - параметры обработки ответа.
//
&НаКлиенте
Процедура ОтменитьСборкуЗаказов(ПричинаОтмены, ДополнительныеПараметры) Экспорт

	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДополнительныеПараметры.НомераОтправлений) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ПараметрыОтмены = Новый Структура;
	ПараметрыОтмены.Вставить("УчетнаяЗапись",      ДополнительныеПараметры.УчетнаяЗапись);
	ПараметрыОтмены.Вставить("ИдентификаторФормы", ДополнительныеПараметры.Форма.УникальныйИдентификатор);
	ПараметрыОтмены.Вставить("Заказы",             ДополнительныеПараметры.Заказы);
	ПараметрыОтмены.Вставить("НомераОтправлений",  ДополнительныеПараметры.НомераОтправлений);
	
	ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.ПустаяСсылка");
	
	ДлительнаяОперация = ОтменитьСборкуЗаказовНаСервере(
		ПараметрыОтмены,
		ПричинаОтмены,
		ДополнительныеПараметры.УчетнаяЗапись,
		ВидМаркетплейса);
		
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОтменитьСборкуЗаказовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ДополнительныеПараметры.Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания             = Истина;
	ПараметрыОжидания.ТекстСообщения                   = НСтр("ru = 'Завершена фоновая отмена сборки/доставки заказов.'");;
	ПараметрыОжидания.ОповещениеПользователя.Показать  = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст     = Строка(ВидМаркетплейса);
	ПараметрыОжидания.ОповещениеПользователя.Пояснение = НСтр("ru = 'Завершена фоновая отмена сборки/доставки заказов.'");
	ПараметрыОжидания.ОповещениеПользователя.Картинка  =
		ИнтеграцияСМаркетплейсамиКлиентСервер.ЛоготипТорговойПлощадки(ВидМаркетплейса);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция ОтменитьСборкуЗаказовНаСервере(Знач ПараметрыОтмены, Знач ПричинаОтмены, Знач УчетнаяЗапись, ВидМаркетплейса)

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ПараметрыОтмены.ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение            = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания  = НСтр("ru = 'Ozon. Отмена сборки/доставки заказов.'");
	ПараметрыВыполнения.ЗапуститьВФоне               = Истина;
	ПараметрыВыполнения.ПрерватьВыполнениеЕслиОшибка = Истина;
	
	ИмяМетода = "ИнтеграцияСМаркетплейсамиСервер.ОтменитьЗаказыНаТорговойПлощадке";
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, 
		ИмяМетода,
		ПараметрыОтмены.УчетнаяЗапись,
		ПараметрыОтмены.Заказы,
		ПараметрыОтмены.НомераОтправлений,
		ПричинаОтмены);

КонецФункции

&НаКлиенте
// Обработка оповещения отмены сборки заказов.
//
// Параметры:
//   РезультатЗадания - см. ДлительныеОперации.ВыполнитьВФоне.
//   ДополнительныеПараметры - Произвольный - дополнительные параметры оповещения.
//
Процедура ОтменитьСборкуЗаказовЗавершение(РезультатЗадания, ДополнительныеПараметры) Экспорт

	Если РезультатЗадания <> Неопределено Тогда
		Если РезультатЗадания.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗадания.ПодробноеПредставлениеОшибки);
			
		ИначеЕсли РезультатЗадания.Статус = "Выполнено" Тогда
			Ошибка = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
			УдалитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
			
			ИнтеграцияСМаркетплейсамиКлиент.ВывестиСостояние(Ошибка, Неопределено, Истина);
			
			Если Не ПустаяСтрока(ДополнительныеПараметры.ИмяТаблицы) Тогда
				Форма = ДополнительныеПараметры.Форма; // ФормаКлиентскогоПриложения
				Форма.Элементы[ДополнительныеПараметры.ИмяТаблицы].Обновить();
			КонецЕсли;
			
			Оповестить("ВыполненаОтменаСборкиЗаказовНаТорговойПлощадке", ДополнительныеПараметры.УчетнаяЗапись);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
