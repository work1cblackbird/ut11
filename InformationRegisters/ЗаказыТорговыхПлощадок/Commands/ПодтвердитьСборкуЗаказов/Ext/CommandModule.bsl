#Область ОбработчикиСобытий

&НаКлиенте
Процедура ОбработкаКоманды(ПараметрКоманды, ПараметрыВыполненияКоманды)

	ОчиститьСообщения();
	
	ЕстьУчетнаяЗапись =
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыВыполненияКоманды.Источник, "УчетнаяЗапись");
	Если Не ЕстьУчетнаяЗапись Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не предусмотрено подтверждение сборки заказов из этого источника.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("УчетнаяЗапись", ПараметрыВыполненияКоманды.Источник.УчетнаяЗапись);
	ПараметрыЗадания.Вставить("Форма", ПараметрыВыполненияКоманды.Источник);
	
	ПолучитьОтправленияДляСборки(ПараметрыЗадания);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПолучитьОтправленияДляСборки(Знач Параметры)

	Форма = Параметры.Форма;
	
	ОжидающиеСборки = Новый Структура;
	ОжидающиеСборки.Вставить("Заказы",      Новый Массив);
	ОжидающиеСборки.Вставить("Отправления", Новый Массив);
	
	Если Форма.ИмяФормы = "Обработка.УправлениеПродажамиНаOzon.Форма.СписокЗаказов" Тогда
		ИмяТаблицы = "ТаблицаЗаказов";
		
		ИдентификаторыВыделенныхСтрок = Форма.Элементы.ТаблицаЗаказов.ВыделенныеСтроки;
		ОжидающиеСборки = ПолучитьОтправленияОжидающиеСборки(ИдентификаторыВыделенныхСтрок, Форма.ТаблицаЗаказов);
		
	ИначеЕсли Форма.ИмяФормы = "Обработка.УправлениеПродажамиНаOzon.Форма.СоставЗаказа" Тогда
		ИмяТаблицы = "";
		
		СтатусОжидаетСборки =
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки");
		
		Если Форма.СтатусОтправления = СтатусОжидаетСборки Тогда
			ОжидающиеСборки.Заказы.Добавить(Форма.ДокументЗаказа);
			ОжидающиеСборки.Отправления.Добавить(Форма.НомерОтправления);
		Иначе
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Подтверждение сборки не требуется для отправления %1.'"),
				Форма.НомерОтправления);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	Иначе
		ИмяТаблицы = "Список";
		
		КлючиВыделенныхСтрок = Форма.Элементы.Список.ВыделенныеСтроки;
		ОжидающиеСборки = ПолучитьОтправленияОжидающиеСборки(КлючиВыделенныхСтрок);
	КонецЕсли;
	
	Если ОжидающиеСборки.Отправления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("ИмяТаблицы",        ИмяТаблицы);
	Параметры.Вставить("Заказы",            ОжидающиеСборки.Заказы);
	Параметры.Вставить("НомераОтправлений", ОжидающиеСборки.Отправления);
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПодтвердитьСборкуЗаказов", ЭтотОбъект, Параметры);
	
	ТекстВопроса = НСтр("ru = 'Подтвердить сборку для выделенных отправлений?'");
	ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

КонецПроцедуры

&НаКлиенте
Функция ПолучитьОтправленияОжидающиеСборки(ВыделенныеСтроки, Таблица = Неопределено)

	НомерОтправления  = "";
	СтатусОтправления = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ПустаяСсылка");
	
	СтатусОжидаетСборки =
		ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки");
		
	ЗаказыОжидающиеСборки      = Новый Массив;
	ОтправленияОжидающиеСборки = Новый Массив;
	ОтправленияПрочие          = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Если ТипЗнч(ВыделеннаяСтрока) = Тип("РегистрСведенийКлючЗаписи.ЗаказыТорговыхПлощадок") Тогда
			ДанныеСтроки = ДанныеОтправленияИзРегистраНаСервере(ВыделеннаяСтрока);
		ИначеЕсли ТипЗнч(ВыделеннаяСтрока) = Тип("Число") И Таблица <> Неопределено Тогда
			ДанныеСтроки = Таблица.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Иначе
			ДанныеСтроки = Неопределено;
		КонецЕсли;
		
		Если ДанныеСтроки <> Неопределено Тогда
			Заказ             = ДанныеСтроки.ДокументЗаказа;
			НомерОтправления  = ДанныеСтроки.НомерОтправления;
			СтатусОтправления = ДанныеСтроки.СтатусОтправления;
		
			Если СтатусОтправления = СтатусОжидаетСборки Тогда
				ЗаказыОжидающиеСборки.Добавить(Заказ);
				ОтправленияОжидающиеСборки.Добавить(НомерОтправления);
			Иначе
				ОтправленияПрочие.Добавить(НомерОтправления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ОтправленияОжидающиеСборки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет отправлений, требующих подтверждение сборки.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	ИначеЕсли ОтправленияПрочие.Количество() > 0 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подтверждение сборки не требуется для следующих отправлений: %1.'"),
			СтрСоединить(ОтправленияПрочие, ", "));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Заказы",      ЗаказыОжидающиеСборки);
	Результат.Вставить("Отправления", ОтправленияОжидающиеСборки);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ДанныеОтправленияИзРегистраНаСервере(КлючЗаписи)

	ДанныеОтправления = Новый Структура;
	ДанныеОтправления.Вставить("ДокументЗаказа",   Документы.ЗаказКлиента.ПустаяСсылка());
	ДанныеОтправления.Вставить("НомерОтправления", "");
	ДанныеОтправления.Вставить("СтатусОтправления",
		ПредопределенноеЗначение("Перечисление.СтатусыЗаказовТорговыхПлощадок.ПустаяСсылка"));
	
	ДанныеСтроки = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, КлючЗаписи);
	ДанныеСтроки.Прочитать();
	
	Если ДанныеСтроки.Выбран() Тогда
		ДанныеОтправления.ДокументЗаказа    = ДанныеСтроки.Заказ;
		ДанныеОтправления.НомерОтправления  = ДанныеСтроки.НомерОтправления;
		ДанныеОтправления.СтатусОтправления = ДанныеСтроки.Статус;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеОтправления;

КонецФункции

// Обработка выбора ответа.
//
// Параметры:
//   Ответ - КодВозвратаДиалога - выбранный ответ.
//   Параметры - Структура из КлючИЗначение - параметры обработки ответа.
//
&НаКлиенте
Процедура ПодтвердитьСборкуЗаказов(Ответ, Знач Параметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Форма             = Параметры.Форма;
	УчетнаяЗапись     = Параметры.УчетнаяЗапись;
	Заказы            = Параметры.Заказы;
	НомераОтправлений = Параметры.НомераОтправлений;
	
	Если Не ЗначениеЗаполнено(НомераОтправлений) Тогда
		Возврат;
	КонецЕсли;

	ТекстОжидания = НСтр("ru = 'Выполняется подтверждение сборки выделенных заказов.'");
	
	ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.ПустаяСсылка");
	
	ДлительнаяОперация = ВыполнитьПодтверждениеСборкиЗаказов(
		УчетнаяЗапись,
		Форма.УникальныйИдентификатор,
		Заказы,
		НомераОтправлений,
		ВидМаркетплейса);
	
	Логотип = ИнтеграцияСМаркетплейсамиКлиентСервер.ЛоготипТорговойПлощадки(ВидМаркетплейса);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(Форма);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения = ТекстОжидания;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ОповещениеПользователя.Текст = ВидМаркетплейса;
	ПараметрыОжидания.ОповещениеПользователя.Пояснение =
		НСтр("ru = 'Завершено фоновое подтверждение сборки заказов.'");
	ПараметрыОжидания.ОповещениеПользователя.НавигационнаяСсылка = "";
	ПараметрыОжидания.ОповещениеПользователя.Картинка = Логотип;
	
	Параметры.Удалить("НомераОтправлений");
	
	Обработчик = Новый ОписаниеОповещения("ВыполнитьПодтверждениеСборкиЗаказовЗавершение",
		ЭтотОбъект,
		Параметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Функция ВыполнитьПодтверждениеСборкиЗаказов(Знач УчетнаяЗапись, Знач ИдентификаторФормы, Знач Заказы,
			Знач НомераОтправлений, ВидМаркетплейса)

	ВидМаркетплейса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ВидМаркетплейса");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(ИдентификаторФормы);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Подтверждение сборки заказов.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИмяМетода = "ИнтеграцияСМаркетплейсамиСервер.ПодтвердитьСборкуЗаказовНаТорговойПлощадке";
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода,
		УчетнаяЗапись,
		Заказы,
		НомераОтправлений);

КонецФункции

&НаКлиенте
// Обработка оповещения подтверждения сборки заказов.
//
// Параметры:
//   РезультатЗадания - см. ДлительныеОперации.ВыполнитьВФоне.
//   ДополнительныеПараметры - Произвольный - дополнительные параметры оповещения.
//
Процедура ВыполнитьПодтверждениеСборкиЗаказовЗавершение(РезультатЗадания, ДополнительныеПараметры) Экспорт

	Если РезультатЗадания <> Неопределено Тогда
		Если РезультатЗадания.Статус = "Ошибка" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатЗадания.ПодробноеПредставлениеОшибки);
			
		ИначеЕсли РезультатЗадания.Статус = "Выполнено" Тогда
			Ошибка = ПолучитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
			УдалитьИзВременногоХранилища(РезультатЗадания.АдресРезультата);
			
			ИнтеграцияСМаркетплейсамиКлиент.ВывестиСостояние(Ошибка, Неопределено, Истина);
			
			Если Не ПустаяСтрока(ДополнительныеПараметры.ИмяТаблицы) Тогда
				Форма = ДополнительныеПараметры.Форма; // ФормаКлиентскогоПриложения
				Форма.Элементы[ДополнительныеПараметры.ИмяТаблицы].Обновить();
			КонецЕсли;
			
			Оповестить("ВыполненоПодтверждениеСборкиЗаказовНаТорговойПлощадке", ДополнительныеПараметры.УчетнаяЗапись);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
