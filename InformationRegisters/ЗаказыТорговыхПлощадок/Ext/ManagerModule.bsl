
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет указать объекты метаданных, для которых задана логика ограничения доступа к данным.
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(УчетнаяЗапись.Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Проверяет заказ и возвращает сведения по отправлениям.
//
// Параметры:
//   Заказы                              - Массив из ДокументСсылка.ЗаказКлиента - проверяемый заказ.
//   РезультатПроверкиЗаказов            - Соответствие из см. ИнтеграцияСМаркетплейсамиКлиентСервер.РезультатПроверкиЗаказа -
//                                       - Неопределено - результат проверки заказов. 
//   ЗаполнитьДанныеПоНомерамОтправлений - Булево - признак заполнения данных по отправлениям.
//   ЗаполнитьСведенияОбЭкземплярах      - Булево - признак заполнения данных по экземплярам.
//
// Возвращаемое значение:
//   Соответствие из см. ИнтеграцияСМаркетплейсамиКлиентСервер.РезультатПроверкиЗаказа.
//
Функция ПроверитьЗаказы(Заказы, РезультатПроверкиЗаказов = Неопределено,
			ЗаполнитьДанныеПоНомерамОтправлений = Ложь, ЗаполнитьСведенияОбЭкземплярах = Ложь) Экспорт

	Если РезультатПроверкиЗаказов = Неопределено Тогда
		РезультатПроверкиЗаказов = Новый Соответствие;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Заказы, Документы.ЗаказКлиента.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПроверкиЗаказов(ЗаполнитьСведенияОбЭкземплярах);
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыборкаОтправленийСНезаполненнымиДанными = ПакетЗапроса[ПакетЗапроса.ВГраница() - 1].Выбрать();
	Пока ВыборкаОтправленийСНезаполненнымиДанными.Следующий() Цикл
		РезультатПроверкиЗаказа = ИнтеграцияСМаркетплейсамиКлиентСервер.РезультатПроверкиЗаказа(
			ВыборкаОтправленийСНезаполненнымиДанными.Заказ,
			РезультатПроверкиЗаказов);
		РезультатПроверкиЗаказа.ОтправленияСНезаполненнымиДанными.Добавить(ВыборкаОтправленийСНезаполненнымиДанными.НомерОтправления);
	КонецЦикла;
	
	ВыборкаОтправленийИзмененных = ПакетЗапроса[ПакетЗапроса.ВГраница() - 3].Выбрать();
	Пока ВыборкаОтправленийИзмененных.Следующий() Цикл
		РезультатПроверкиЗаказа = ИнтеграцияСМаркетплейсамиКлиентСервер.РезультатПроверкиЗаказа(
			ВыборкаОтправленийИзмененных.Заказ,
			РезультатПроверкиЗаказов);
		РезультатПроверкиЗаказа.ОтправленияИзмененные.Добавить(ВыборкаОтправленийИзмененных.НомерОтправления);
		
		Если ЗначениеЗаполнено(ВыборкаОтправленийИзмененных.ДокументОтгрузки) Тогда
			РезультатПроверкиЗаказа.ИзмененныеДокументыОтгрузки.Вставить(ВыборкаОтправленийИзмененных.ДокументОтгрузки,
				ВыборкаОтправленийИзмененных.НомерОтправления);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнитьДанныеПоНомерамОтправлений Тогда
		КлючиДанныхДляЗаписи = РегистрыСведений.ЗаказыТорговыхПлощадок.КлючиДанныхДляЗаписиЗаказаТорговойПлощадки();
	КонецЕсли;
	
	СтатусОжидаетСборки = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки;
	СтатусОтменен       = Перечисления.СтатусыЗаказовТорговыхПлощадок.Отменен;
	
	ВыборкаЗаказов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказов.Следующий() Цикл
		РезультатПроверкиЗаказа = ИнтеграцияСМаркетплейсамиКлиентСервер.РезультатПроверкиЗаказа(ВыборкаЗаказов.Заказ, РезультатПроверкиЗаказов);
		РезультатПроверкиЗаказа.ХозяйственнаяОперация = ВыборкаЗаказов.ХозяйственнаяОперация;
		РезультатПроверкиЗаказа.УчетнаяЗапись         = ВыборкаЗаказов.УчетнаяЗапись;
		РезультатПроверкиЗаказа.ВидМаркетплейса       = ВыборкаЗаказов.ВидМаркетплейса;
		
		ВыборкаОтправлений = ВыборкаЗаказов.Выбрать();
		Пока ВыборкаОтправлений.Следующий() Цикл
			РезультатПроверкиЗаказа.МаксимальныйИдентификаторЭкземпляра =
				Макс(РезультатПроверкиЗаказа.МаксимальныйИдентификаторЭкземпляра,
					ВыборкаОтправлений.МаксимальныйИдентификаторЭкземпляра);
			
			Если ВыборкаОтправлений.Статус <> СтатусОжидаетСборки Тогда
				РезультатПроверкиЗаказа.ОтправленияНеВСборке.Добавить(ВыборкаОтправлений.НомерОтправления);
				
				Если ВыборкаОтправлений.Статус = СтатусОтменен Тогда
					РезультатПроверкиЗаказа.ОтправленияОтмененные.Добавить(ВыборкаОтправлений.НомерОтправления);
				КонецЕсли;
			Иначе
				РезультатПроверкиЗаказа.ОтправленияВСборке.Добавить(ВыборкаОтправлений.НомерОтправления);
				
				Если ВыборкаОтправлений.КоличествоЗаписей = 0 Тогда
					РезультатПроверкиЗаказа.ОтправленияБезТоваров.Добавить(ВыборкаОтправлений.НомерОтправления);
				ИначеЕсли ВыборкаОтправлений.КоличествоПеренесенныхПозиций > 0 Тогда
					РезультатПроверкиЗаказа.ОтправленияИзмененные.Добавить(ВыборкаОтправлений.НомерОтправления);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаОтправлений.ДокументОтгрузки) Тогда
					РезультатПроверкиЗаказа.ОтправленияБезДокументовОтгрузки.Добавить(ВыборкаОтправлений.НомерОтправления);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗаполнитьДанныеПоНомерамОтправлений Тогда
				ДанныеОтправления = Новый Структура(КлючиДанныхДляЗаписи);
				ЗаполнитьЗначенияСвойств(ДанныеОтправления, ВыборкаОтправлений);
				РезультатПроверкиЗаказа.ДанныеПоНомерамОтправлений.Вставить(ВыборкаОтправлений.НомерОтправления, ДанныеОтправления);
			КонецЕсли;
		КонецЦикла;
		
		РезультатПроверкиЗаказа.ОтправленияИзмененные =
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатПроверкиЗаказа.ОтправленияИзмененные);
		
		ПроверитьГотовностьОтправленийКПодтверждениюСборки(РезультатПроверкиЗаказа);
	КонецЦикла;
	
	Если ЗаполнитьСведенияОбЭкземплярах Тогда
		ВыборкаЗаказов = ПакетЗапроса[ПакетЗапроса.ВГраница() - 8].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказов.Следующий() Цикл
			РезультатПроверкиЗаказа = ИнтеграцияСМаркетплейсамиКлиентСервер.РезультатПроверкиЗаказа(
				ВыборкаЗаказов.Заказ,
				РезультатПроверкиЗаказов);
			
			ВыборкаЭкземпляров = ВыборкаЗаказов.Выбрать();
			Пока ВыборкаЭкземпляров.Следующий() Цикл
				РезультатПроверкиЗаказа.ЭкземплярыБезДокументовОтгрузки.Добавить(ВыборкаЭкземпляров.ИдентификаторЭкземпляра);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат РезультатПроверкиЗаказов;

КонецФункции

// Заполняет или обновляет данные по экземплярам на основании данных документов учетной системы.
//
// Параметры:
//   Заказы - Массив из Строка - список обрабатываемых заказов.
//   Автор  - Неопределено, СправочникСсылка.Пользователи - пользователь,
//                инициировавший оформление документов отгрузки.
//
// Возвращаемое значение:
//   Структура - результат заполнения сведений:
//     * ИнформацияОбОшибке       - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * РезультатПроверкиЗаказов - Соответствие из см. ИнтеграцияСМаркетплейсамиКлиентСервер.РезультатПроверкиЗаказа.
//
Функция ОформитьДокументыОтгрузки(Заказы, Автор = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИнформацияОбОшибке",       ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка());
	Результат.Вставить("РезультатПроверкиЗаказов", Новый Соответствие);
	
	СписокОшибок = Новый Массив;
	
	ПараметрыЗаполнения =
		РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ПараметрыЗаполненияДанныхПоЭкземплярам();
	ПараметрыЗаполнения.ПроверитьЗаказы                = Истина;
	ПараметрыЗаполнения.ВернутьСведенияПоТоварам       = Истина;
	
	РезультатЗаполненияЭкземпляров =
		РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ЗаполнитьДанныеПоЭкземплярам(
			Заказы, ПараметрыЗаполнения);
	
	СведенияПоТоварам = РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ПодготовитьСведенияПоТоварамДляЗаполненияДокументовОтгрузки(
		РезультатЗаполненияЭкземпляров.СведенияПоТоварам);
	
	ТекстОшибки = ПерезаполнитьДокументыОтгрузки(
		РезультатЗаполненияЭкземпляров.РезультатПроверкиЗаказов,
		СведенияПоТоварам,
		Автор);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СписокОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
	ТекстОшибки = СоздатьДокументыОтгрузки(
		РезультатЗаполненияЭкземпляров.РезультатПроверкиЗаказов,
		СведенияПоТоварам,
		Автор);
		
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		СписокОшибок.Добавить(ТекстОшибки);
	КонецЕсли;
	
	РезультатЗаполненияЭкземпляров =
		РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ЗаполнитьДанныеПоЭкземплярам(
			Заказы,
			ПараметрыЗаполнения);
	
	Результат.РезультатПроверкиЗаказов = РезультатЗаполненияЭкземпляров.РезультатПроверкиЗаказов;
	
	Если СписокОшибок.Количество() > 0 Тогда
		Результат.ИнформацияОбОшибке.КодОшибки      = "Ошибка_ЗаполнениеДокументовОтгрузки";
		Результат.ИнформацияОбОшибке.ОписаниеОшибки = СтрСоединить(СписокОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		Если Параметры.Свойство("ФиксированныеНастройки") Тогда
			ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Параметры.ФиксированныеНастройки.Отбор, "УчетнаяЗапись");
			Если ЭлементыОтбора.Количество() > 0
					И ЭлементыОтбора[0].Использование Тогда
				ДанныеТорговойПлощадки = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(ЭлементыОтбора[0].ПравоеЗначение);
				
				Параметры.Вставить("УчетнаяЗапись",               ЭлементыОтбора[0].ПравоеЗначение);
				Параметры.Вставить("КлючНазначенияИспользования", "FBS" + ДанныеТорговойПлощадки.ИдентификаторКлиента);
				
				ВыбраннаяФорма       = "РегистрСведений.ЗаказыТорговыхПлощадок.Форма.ФормаСпискаЗаказов";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает постфикс для формирования нового временного номера отправления.
//
// Возвращаемое значение:
//   Строка - постфикс отправления.
//
Функция ПостфиксНовогоОтправления() Экспорт

	Возврат "-Новое";

КонецФункции

// Генерирует номер нового отправления по номеру заказа.
//
// Параметры:
//   НомерЗаказа                   - Строка - номер заказа по данным торговой площадки.
//   КоличествоОтправленийПоЗаказу - Число - количество номеров отправлений по заказу.
//
// Возвращаемое значение:
//   Строка - номер нового отправления.
//
Функция НомерНовогоОтправления(НомерЗаказа, КоличествоОтправленийПоЗаказу) Экспорт

	НомерОтправления = НомерЗаказа + ПостфиксНовогоОтправления()
		+ Формат(КоличествоОтправленийПоЗаказу + 1, "ЧГ=");
	
	Возврат НомерОтправления;

КонецФункции

// Выделяет из номера отправления порядковый номер.
// Если отправление без ПостфиксНовогоОтправления(), возвращается 0.
//
// Параметры:
//   НомерОтправления - Строка - номер отправления.
//
// Возвращаемое значение:
//   Число - порядковый номер отправления.
//
Функция ПорядковыйНомерНовогоОтправления(Знач НомерОтправления) Экспорт

	Постфикс = ПостфиксНовогоОтправления();
	
	Позиция = СтрНайти(НомерОтправления, Постфикс);
	Если Позиция = 0 Тогда
		ПорядковыйНомер = 0;
	Иначе
		НомерОтправления = Сред(НомерОтправления, Позиция);
		НомерОтправления = СтрЗаменить(НомерОтправления, Постфикс, "");
		
		ПорядковыйНомер = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(НомерОтправления);
	КонецЕсли;
	
	Возврат ПорядковыйНомер;

КонецФункции

// Возвращает ключи записи регистра заказов торговых площадок.
//
// Возвращаемое значение:
//   Строка - строка, содержащая поля РегистрСведений.ЗаказыТорговыхПлощадок.
//
Функция КлючиДанныхДляЗаписиЗаказаТорговойПлощадки() Экспорт

	СтруктураПоМенеджеруЗаписи = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
		Новый Соответствие,
		Метаданные.РегистрыСведений.ЗаказыТорговыхПлощадок);
	
	КлючиДанныхДляЗаписи = ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(СтруктураПоМенеджеруЗаписи, ",");
	
	КлючиДанныхДляЗаписи = КлючиДанныхДляЗаписи + ",ДатаДокументаОтгрузки,НомерДокументаОтгрузки";
	
	Возврат КлючиДанныхДляЗаписи;

КонецФункции

// Обновляет сведения по заказам и отправлениям и возвращает список складов торговых площадок.
//
// Параметры:
//   УчетнаяЗапись          - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись торговой площадки.
//   ЗаполнитьСписокСкладов - Булево - признак необходимости заполнения списка складов торговой площадки.
//
// Возвращаемое значение:
//   Структура - ответ из ключей:
//     * ОписаниеОшибки - см. ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка.
//     * СписокСкладов  - СписокЗначений из Строка - список идентификаторов и представлений складов.
//
Функция ОбновитьСведенияПоЗаказамИОтправлениям(УчетнаяЗапись, ЗаполнитьСписокСкладов = Истина) Экспорт

	ОписаниеОшибки = ИнтеграцияСМаркетплейсамиСервер.НоваяОшибка();
	ОписаниеОшибки.Детализация = Новый Массив;
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	Результат.Вставить("СписокСкладов",  Новый СписокЗначений);
	
	// Получение списка складов.
	Если ЗаполнитьСписокСкладов Тогда
		ТекстОшибки = ЗаполнитьСписокСкладов(Результат.СписокСкладов, УчетнаяЗапись);
		
		Если Не ПустаяСтрока(ТекстОшибки) Тогда
			Результат.ОписаниеОшибки.Детализация.Добавить(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение сведений по заказам и отправлениям.
	ТекстОшибки = ЗаполнитьСведенияПоЗаказамИОтправлениям(УчетнаяЗапись);
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Результат.ОписаниеОшибки.Детализация.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Актуализирует состав записей регистра РегистрыСведений.ЗаказыТорговыхПлощадок.
//
// Параметры:
//   Заказ                      - ДокументСсылка.ЗаказКлиента - заказ для обновления сведений об отправлениях.
//   ДанныеПоНомерамОтправлений - Соответствие из КлючИЗначение - список номеров отправлений и документов отгрузки,
//                                   где ключ - номер отправления, значение - структура из состава полей
//                                   регистра РегистрыСведений.ЗаказыТорговыхПлощадок.
//
// Возвращаемое значение:
//   Строка - текст ошибки.
//
Функция ЗаписатьСведенияОбОтправлениях(Заказ, ДанныеПоНомерамОтправлений) Экспорт

	ТекстОшибки = "";
	
	Если Не ЗначениеЗаполнено(ДанныеПоНомерамОтправлений) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных =
			БлокировкаДанных.Добавить("РегистрСведений.ЗаказыТорговыхПлощадок");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.УстановитьЗначение("Заказ", Заказ);
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Заказ);
		НаборЗаписей.Прочитать();
		
		ЗаписиКУдалению = Новый Массив;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			ДанныеПоНомеруОтправления = ДанныеПоНомерамОтправлений[Запись.НомерОтправления];
			Если ДанныеПоНомеруОтправления = Неопределено Тогда
				ЗаписиКУдалению.Добавить(Запись);
			Иначе
				Запись.ДокументОтгрузки              = ДанныеПоНомеруОтправления.ДокументОтгрузки;
				Запись.НомерРодительскогоОтправления = ДанныеПоНомеруОтправления.НомерРодительскогоОтправления;
				ДанныеПоНомерамОтправлений.Удалить(Запись.НомерОтправления);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Запись Из ЗаписиКУдалению Цикл
			НаборЗаписей.Удалить(Запись);
		КонецЦикла;
		
		Для Каждого ДанныеПоНомеруОтправления Из ДанныеПоНомерамОтправлений Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ДанныеПоНомеруОтправления.Значение);
			
			Запись.НомерОтправления     = ДанныеПоНомеруОтправления.Ключ;
			Запись.Статус               = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки;
			Запись.ДатаУстановкиСтатуса = ТекущаяДатаСеанса();
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось записать данные по номерам отправлений для заказа %1 по причине: %2.'"),
			Заказ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТекстОшибки;

КонецФункции

// Устанавливает статус заказа.
//
// Параметры:
//   Заказ                        - ДокументСсылка.ЗаказКлиента - заказ, для которого изменяется статус.
//   ДокументОтгрузки             - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ПередачаТоваровХранителю - документ отгрузки.
//   Статус                       - ПеречислениеСсылка.СтатусыЗаказовТорговыхПлощадок - устанавливаемый статус.
//   ИмяСобытияЖурналаРегистрации - Строка - см. ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации().
//
// Возвращаемое значение:
//   Булево - признак успешного выполнения.
//
Функция УстановитьСтатус(Заказ, ДокументОтгрузки, Статус, ИмяСобытияЖурналаРегистрации = "") Экспорт
	
	Если ПустаяСтрока(ИмяСобытияЖурналаРегистрации) Тогда
		ИмяСобытияЖурналаРегистрации = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации();
	КонецЕсли;
	
	ВыполненоУспешно = Истина;
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ЗаказыТорговыхПлощадок");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.УстановитьЗначение("Заказ",            Заказ);
		ЭлементБлокировкиДанных.УстановитьЗначение("ДокументОтгрузки", ДокументОтгрузки);
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Заказ);
		НаборЗаписей.Отбор.ДокументОтгрузки.Установить(ДокументОтгрузки);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей[0].Статус                     = Статус;
			НаборЗаписей[0].ДатаУстановкиСтатуса       = ТекущаяДатаСеанса();
			НаборЗаписей[0].ТребуетсяПолучениеЭтикеток = (НаборЗаписей[0].Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке);
			
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВыполненоУспешно = Ложь;
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При установке статуса заказа <%1> возникла ошибка: %2.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Заказ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

// Устанавливает статус отправления заказа.
//
// Параметры:
//   Заказ            - ДокументСсылка.ЗаказКлиента - заказ.
//   НомерОтправления - Строка - номер отправления по данным учетной системы.
//   Статус           - ПеречислениеСсылка.СтатусыЗаказовТорговыхПлощадок - устанавливаемый статус.
//   ИмяСобытия       - см. ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации.
//
// Возвращаемое значение:
//   Строка - текст ошибки.
//
Функция УстановитьСтатусОтправления(Заказ, НомерОтправления, Статус, ИмяСобытия = "") Экспорт

	ТекстОшибки = "";
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных =
		БлокировкаДанных.Добавить("РегистрСведений.ЗаказыТорговыхПлощадок");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.УстановитьЗначение("Заказ", Заказ);
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Заказ);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.НомерОтправления = НомерОтправления Тогда
				Запись.Статус                     = Статус;
				Запись.ДатаУстановкиСтатуса       = ТекущаяДатаСеанса();
				Запись.ТребуетсяПолучениеЭтикеток = (НаборЗаписей[0].Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке);
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить статус заказа <%1> по отправлению <%2> по причине: %3.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Заказ,
			НомерОтправления,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
	Возврат ТекстОшибки;

КонецФункции

// Заменяет номер отправления для заказа после подтверждения сборки выделенных товаров.
//
// Параметры:
//   Заказ                 - ДокументСсылка.ЗаказКлиента - заказ.
//   НомерОтправления      - Строка - номер отправления по данным учетной системы.
//   НовыйНомерОтправления - Строка - номер отправления по данным торговой площадки.
//   Статус                - Неопределено, ПеречислениеСсылка.СтатусыЗаказовТорговыхПлощадок - устанавливаемый статус.
//   ИмяСобытия            - см. ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации.
//
// Возвращаемое значение:
//   Строка - текст ошибки.
//
Функция ЗаменитьНомерОтправления(Заказ, НомерОтправления, НовыйНомерОтправления, Статус = Неопределено, ИмяСобытия = "") Экспорт

	ТекстОшибки = "";
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных =
		БлокировкаДанных.Добавить("РегистрСведений.ЗаказыТорговыхПлощадок");
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировкиДанных.УстановитьЗначение("Заказ", Заказ);
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Заказ);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.НомерОтправления = НомерОтправления Тогда
				Запись.НомерОтправления = НовыйНомерОтправления;
				
				Если Статус <> Неопределено Тогда
					Запись.Статус                     = Статус;
					Запись.ДатаУстановкиСтатуса       = ТекущаяДатаСеанса();
					Запись.ТребуетсяПолучениеЭтикеток = (НаборЗаписей[0].Статус = Перечисления.СтатусыЗаказовТорговыхПлощадок.ГотовКОтгрузке);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось изменить номер отправления с <%1> на <%2> для заказа <%3> по причине: %4.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			НомерОтправления,
			НовыйНомерОтправления,
			Заказ,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			
		ЗаписьЖурналаРегистрации(ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
	КонецПопытки;
	
	Возврат ТекстОшибки;

КонецФункции

// Определяет данные регистра сведений, соответствующие условиям поиска.
//
// Параметры:
//   Заказ            - ДокументСсылка.ЗаказКлиента, Неопределено - заказ.
//   ДокументОтгрузки - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ПередачаТоваровХранителю, Неопределено - документ отгрузки.
//
// Возвращаемое значение:
//   Неопределено - при пустых значениях параметров;
//   Структура - данные регистра сведений, соответствующие условиям поиска.
//
Функция ПолучитьДанныеЗаказа(Заказ = Неопределено, ДокументОтгрузки = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если Заказ = Неопределено
			И ДокументОтгрузки = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	*
		|ИЗ
		|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ЗаказКлиента
		|		ПО ЗаказыТорговыхПлощадок.Заказ = ЗаказКлиента.Ссылка
		|ГДЕ
		|	ЗаказыТорговыхПлощадок.Заказ = &Заказ
		|	И ЗаказыТорговыхПлощадок.ДокументОтгрузки = &ДокументОтгрузки";
	
	Запрос.УстановитьПараметр("Заказ",            Заказ);
	Запрос.УстановитьПараметр("ДокументОтгрузки", ДокументОтгрузки);
	
	Если Заказ = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказыТорговыхПлощадок.Заказ = &Заказ", "ИСТИНА");
	КонецЕсли;
	Если ДокументОтгрузки = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказыТорговыхПлощадок.ДокументОтгрузки = &ДокументОтгрузки", "ИСТИНА");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДанных    = РезультатЗапроса.Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ВыборкаДанных.Следующий() Тогда
		Результат = Новый Структура;
		Для Каждого ЭлементКоллекции Из РезультатЗапроса.Колонки Цикл
			Если ЭлементКоллекции.ТипЗначения = Новый ОписаниеТипов("РезультатЗапроса") Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(ЭлементКоллекции.Имя, ВыборкаДанных[ЭлементКоллекции.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает список недоступных к отмене заказов и их номеров отправлений.
//
// Параметры:
//   Заказы              - Массив из ДокументСсылка.ЗаказКлиента - заказ.
//   НомераОтправлений   - Массив из Строка - номер отправления.
//   РезультатЗаполнения - см. РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ЗаполнитьДанныеПоЭкземплярам.
//
// Возвращаемое значение:
//   Структура - результат проверки с ключами:
//     * ИнформацияДляПользователя     - Строка - описание недоступных к отмене заказов и отправлений.
//     * НедоступныеКОтменеОтправления - Соответствие из КлючИЗначение - список недоступных к отмене заказов в ключе
//                                         и их номеров отправлений в значении.
//
Функция ПроверитьВозможностьОтменыТоваровОтправления(Заказы, НомераОтправлений, РезультатЗаполнения) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("ИнформацияДляПользователя",     "");
	Результат.Вставить("НедоступныеКОтменеОтправления", Новый Соответствие);
	
	СписокСообщений = Новый Массив;
	
	ШаблонСообщения = НСтр("ru = 'Для заказа ""%1"" уже отменены отправления: %2.'");
	
	РезультатПроверкиЗаказов = РезультатЗаполнения.РезультатПроверкиЗаказов;
	
	Если РезультатПроверкиЗаказов = Неопределено Или РезультатПроверкиЗаказов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из РезультатПроверкиЗаказов Цикл
		Заказ = КлючИЗначение.Ключ;
		РезультатПроверкиЗаказа = КлючИЗначение.Значение;
		
		Если Не ЗначениеЗаполнено(Заказ) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтправленияОтмененные = Новый Массив;
		
		Для Каждого НомерОтправления Из РезультатПроверкиЗаказа.ОтправленияОтмененные Цикл
			Индекс = НомераОтправлений.Найти(НомерОтправления);
			Если Индекс <> Неопределено Тогда
				ОтправленияОтмененные.Добавить(НомерОтправления);
				НомераОтправлений.Удалить(Индекс);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтправленияОтмененные.Количество() > 0 Тогда
			СписокСообщений.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										ШаблонСообщения,
										Заказ,
										СтрСоединить(ОтправленияОтмененные, ", ")));
		КонецЕсли;
	КонецЦикла;
	
	СведенияПоТоварам = РезультатЗаполнения.СведенияПоТоварам;
	
	Если СведенияПоТоварам = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияПоТоварам.Заказ КАК Заказ,
		|	СведенияПоТоварам.НомерОтправления КАК НомерОтправления,
		|	СведенияПоТоварам.Номенклатура КАК Номенклатура,
		|	СведенияПоТоварам.Характеристика КАК Характеристика,
		|	СведенияПоТоварам.Склад КАК Склад,
		|	СведенияПоТоварам.ИдентификаторСтрокиЗаполнен КАК ОформленДокументОтгрузки,
		|	СведенияПоТоварам.КОтгрузке КАК КОтгрузке,
		|	СведенияПоТоварам.Отменено КАК Отменено,
		|	СведенияПоТоварам.ДокументОтгрузкиКОформлению КАК ДокументОтгрузкиКОформлению,
		|	СведенияПоТоварам.Количество КАК Количество
		|ПОМЕСТИТЬ СведенияПоТоварам
		|ИЗ
		|	&СведенияПоТоварам КАК СведенияПоТоварам
		|ГДЕ
		|	СведенияПоТоварам.Заказ В(&Заказы)
		|	И СведенияПоТоварам.НомерОтправления В(&НомераОтправлений)
		|	И СведенияПоТоварам.КОтгрузке
		|	И НЕ СведенияПоТоварам.Отменено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СведенияПоТоварам.Заказ КАК Заказ,
		|	СведенияПоТоварам.НомерОтправления КАК НомерОтправления
		|ПОМЕСТИТЬ ОтгруженныеОтправления
		|ИЗ
		|	СведенияПоТоварам КАК СведенияПоТоварам
		|ГДЕ
		|	СведенияПоТоварам.ОформленДокументОтгрузки
		|	И НЕ СведенияПоТоварам.ДокументОтгрузкиКОформлению
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтгруженныеОтправления.Заказ КАК Заказ,
		|	ОтгруженныеОтправления.НомерОтправления КАК НомерОтправления
		|ИЗ
		|	ОтгруженныеОтправления КАК ОтгруженныеОтправления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СведенияПоТоварам.Заказ КАК Заказ,
		|	СведенияПоТоварам.НомерОтправления КАК НомерОтправления,
		|	СведенияПоТоварам.Номенклатура КАК Номенклатура,
		|	СведенияПоТоварам.Характеристика КАК Характеристика,
		|	СведенияПоТоварам.Склад КАК Склад,
		|	СУММА(ВЫБОР
		|			КОГДА СведенияПоТоварам.ДокументОтгрузкиКОформлению
		|				ТОГДА СведенияПоТоварам.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Количество
		|ИЗ
		|	СведенияПоТоварам КАК СведенияПоТоварам
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОтгруженныеОтправления КАК ОтгруженныеОтправления
		|		ПО СведенияПоТоварам.Заказ = ОтгруженныеОтправления.Заказ
		|			И СведенияПоТоварам.НомерОтправления = ОтгруженныеОтправления.НомерОтправления
		|ГДЕ
		|	ОтгруженныеОтправления.НомерОтправления ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияПоТоварам.Заказ,
		|	СведенияПоТоварам.НомерОтправления,
		|	СведенияПоТоварам.Номенклатура,
		|	СведенияПоТоварам.Характеристика,
		|	СведенияПоТоварам.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА СведенияПоТоварам.ДокументОтгрузкиКОформлению
		|				ТОГДА СведенияПоТоварам.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СведенияПоТоварам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОтгруженныеОтправления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки КАК Заказ,
		|	ТоварыКОтгрузкеОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика КАК Характеристика,
		|	ТоварыКОтгрузкеОстатки.Склад КАК Склад,
		|	СУММА(ТоварыКОтгрузкеОстатки.ВРезервеОстаток) КАК Зарезервировано,
		|	0 КАК ЗарезервированоОбработано,
		|	СУММА(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - (ТоварыКОтгрузкеОстатки.КСборкеОстаток + ТоварыКОтгрузкеОстатки.СобираетсяОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток)) КАК КОтгрузкеНаСкладе,
		|	0 КАК КОтгрузкеНаСкладеОбработано,
		|	ЛОЖЬ КАК Обработана
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(&ТекущаяДата, ДокументОтгрузки В (&Заказы)) КАК ТоварыКОтгрузкеОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
		|	ТоварыКОтгрузкеОстатки.Номенклатура,
		|	ТоварыКОтгрузкеОстатки.Характеристика,
		|	ТоварыКОтгрузкеОстатки.Склад
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыКОтгрузкеОстатки.ВРезервеОстаток) + СУММА(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - (ТоварыКОтгрузкеОстатки.КСборкеОстаток + ТоварыКОтгрузкеОстатки.СобираетсяОстаток + ТоварыКОтгрузкеОстатки.СобраноОстаток)) > 0";
	
	Запрос.УстановитьПараметр("ТекущаяДата",       ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Заказы",            Заказы);
	Запрос.УстановитьПараметр("НомераОтправлений", НомераОтправлений);
	Запрос.УстановитьПараметр("СведенияПоТоварам", СведенияПоТоварам);
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОтгруженныхОтправлений = ПакетЗапроса[ПакетЗапроса.ВГраница() - 4].Выбрать();
	Пока ВыборкаОтгруженныхОтправлений.Следующий() Цикл
		НомераОтправленийЗаказа = Результат.НедоступныеКОтменеОтправления[ВыборкаОтгруженныхОтправлений.Заказ];
		Если НомераОтправленийЗаказа = Неопределено Тогда
			НомераОтправленийЗаказа = Новый Массив;
		КонецЕсли;
		НомераОтправленийЗаказа.Добавить(ВыборкаОтгруженныхОтправлений.НомерОтправления);
		Результат.НедоступныеКОтменеОтправления.Вставить(ВыборкаОтгруженныхОтправлений.Заказ, НомераОтправленийЗаказа);
		
		Индекс = НомераОтправлений.Найти(ВыборкаОтгруженныхОтправлений.НомерОтправления);
		Если Индекс <> Неопределено Тогда
			НомераОтправлений.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаДанныхПоЗаказам = ПакетЗапроса[ПакетЗапроса.ВГраница()].Выгрузить();
	
	ВыборкаНеотгруженныхОтправлений = ПакетЗапроса[ПакетЗапроса.ВГраница() - 3].Выбрать();
	Пока ВыборкаНеотгруженныхОтправлений.Следующий() Цикл
		НомераОтправленийЗаказа = Результат.НедоступныеКОтменеОтправления[ВыборкаНеотгруженныхОтправлений.Заказ];
		Если НомераОтправленийЗаказа = Неопределено Тогда
			НомераОтправленийЗаказа = Новый Массив;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Заказ",          ВыборкаНеотгруженныхОтправлений.Заказ);
		Отбор.Вставить("Номенклатура",   ВыборкаНеотгруженныхОтправлений.Номенклатура);
		Отбор.Вставить("Характеристика", ВыборкаНеотгруженныхОтправлений.Характеристика);
		Отбор.Вставить("Склад",          ВыборкаНеотгруженныхОтправлений.Склад);
		Отбор.Вставить("Обработана",     Ложь);
		
		СтрокиЗаказа = ТаблицаДанныхПоЗаказам.НайтиСтроки(Отбор);
		Если СтрокиЗаказа.Количество() = 0 Тогда
			НомераОтправленийЗаказа.Добавить(ВыборкаНеотгруженныхОтправлений.НомерОтправления);
			
			Индекс = НомераОтправлений.Найти(ВыборкаНеотгруженныхОтправлений.НомерОтправления);
			Если Индекс <> Неопределено Тогда
				НомераОтправлений.Удалить(Индекс);
			КонецЕсли;
		Иначе
			СтрокаЗаказа = СтрокиЗаказа[0];
			
			Если ВыборкаНеотгруженныхОтправлений.Количество <= (СтрокаЗаказа.Зарезервировано - СтрокаЗаказа.ЗарезервированоОбработано) Тогда
				СтрокаЗаказа.ЗарезервированоОбработано   = СтрокаЗаказа.ЗарезервированоОбработано
															+ ВыборкаНеотгруженныхОтправлений.Количество;
			ИначеЕсли ВыборкаНеотгруженныхОтправлений.Количество <= (СтрокаЗаказа.КОтгрузкеНаСкладе -СтрокаЗаказа.КОтгрузкеНаСкладеОбработано) Тогда
				СтрокаЗаказа.КОтгрузкеНаСкладеОбработано = СтрокаЗаказа.КОтгрузкеНаСкладеОбработано
															+ ВыборкаНеотгруженныхОтправлений.Количество;
			Иначе
				НомераОтправленийЗаказа.Добавить(ВыборкаНеотгруженныхОтправлений.НомерОтправления);
				
				Индекс = НомераОтправлений.Найти(ВыборкаНеотгруженныхОтправлений.НомерОтправления);
				Если Индекс <> Неопределено Тогда
					НомераОтправлений.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаЗаказа.Обработана = (СтрокаЗаказа.Зарезервировано = СтрокаЗаказа.ЗарезервированоОбработано
										И СтрокаЗаказа.КОтгрузкеНаСкладе = СтрокаЗаказа.КОтгрузкеНаСкладеОбработано);
		КонецЕсли;
		
		Если НомераОтправленийЗаказа.Количество() > 0 Тогда
			Результат.НедоступныеКОтменеОтправления.Вставить(ВыборкаНеотгруженныхОтправлений.Заказ, НомераОтправленийЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	ШаблонСообщения1 = НСтр("ru = 'Для заказа ""%1"" недоступна отмена отправления %2, т.к. оно собрано на складе или отгружено. Для отмены исключите товары указанного отправления из складских документов и документов отгрузки.'");
	ШаблонСообщения2 = НСтр("ru = 'Для заказа ""%1"" недоступна отмена отправлений %2, т.к. они собраны на складе или отгружены. Для отмены исключите товары указанных отправлений из складских документов и документов отгрузки.'");
	
	Для Каждого ДанныеЗаказа Из Результат.НедоступныеКОтменеОтправления Цикл
		Если ДанныеЗаказа.Значение.Количество() = 1 Тогда
			Шаблон = ШаблонСообщения1;
		Иначе
			Шаблон = ШаблонСообщения2;
		КонецЕсли;
		
		СписокСообщений.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										Шаблон,
										ДанныеЗаказа.Ключ,
										СтрСоединить(ДанныеЗаказа.Значение, ", ")));
	КонецЦикла;
	
	Результат.ИнформацияДляПользователя = СтрСоединить(СписокСообщений, Символы.ПС);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПроверкиЗаказов(ЗаполнитьСведенияОбЭкземплярах = Ложь)

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	СведенияПоТоварам.Заказ КАК Заказ,
		|	СведенияПоТоварам.ИдентификаторЭкземпляра КАК ИдентификаторЭкземпляра,
		|	СведенияПоТоварам.НомерОтправления КАК НомерОтправления,
		|	СведенияПоТоварам.ДокументОтгрузки КАК ДокументОтгрузки,
		|	СведенияПоТоварам.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		|	НЕ ЕСТЬNULL(ТоварыЗаказов.Отменено, ИСТИНА)
		|		И СведенияПоТоварам.ДокументОтгрузки <> НЕОПРЕДЕЛЕНО
		|		И СведенияПоТоварам.ИдентификаторСтроки = """" КАК ПозицияПеренесена,
		|	НЕ ЕСТЬNULL(ТоварыЗаказов.Отменено, ИСТИНА) КАК ПозицияКОтгрузке,
		|	СведенияПоТоварам.ИдентификаторСтроки = """" КАК НетПривязкиКОтгрузке,
		|	НЕ ЕСТЬNULL(ТоварыЗаказов.Отменено, ИСТИНА)
		|		И (СведенияПоТоварам.ДокументОтгрузки = НЕОПРЕДЕЛЕНО
		|			ИЛИ ВЫБОР
		|				КОГДА СведенияПоТоварам.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		|					ТОГДА НЕ ВЫРАЗИТЬ(СведенияПоТоварам.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Проведен
		|				КОГДА СведенияПоТоварам.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		|					ТОГДА НЕ ВЫРАЗИТЬ(СведенияПоТоварам.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Проведен
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ) КАК НетОтгрузки,
		|	ВЫБОР
		|		КОГДА СведенияПоТоварам.ТребуетсяСтранаПроисхождения
		|					И СведенияПоТоварам.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|				ИЛИ СведенияПоТоварам.ТребуетсяМаркировка
		|					И СведенияПоТоварам.ПолныйКодМаркировки = """"
		|				ИЛИ (СведенияПоТоварам.ТребуетсяНомерГТД
		|					ИЛИ СведенияПоТоварам.ТребуетсяРНПТ)
		|					И СведенияПоТоварам.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
		|				ИЛИ СведенияПоТоварам.ТребуетсяУИН
		|					И СведенияПоТоварам.УИН = """"
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТребуетсяЗаполнить
		|ПОМЕСТИТЬ СведенияПоТоварам
		|ИЗ
		|	РегистрСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок КАК СведенияПоТоварам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.Товары КАК ТоварыЗаказов
		|		ПО СведенияПоТоварам.Заказ = ТоварыЗаказов.Ссылка
		|			И СведенияПоТоварам.КодСтроки = ТоварыЗаказов.КодСтроки
		|ГДЕ
		|	СведенияПоТоварам.Заказ В(&Заказы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ,
		|	НомерОтправления";
	
	Если ЗаполнитьСведенияОбЭкземплярах Тогда
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
			+ "ВЫБРАТЬ
			  |	СведенияПоТоварам.Заказ КАК Заказ,
			  |	СведенияПоТоварам.ИдентификаторЭкземпляра КАК ИдентификаторЭкземпляра
			  |ИЗ
			  |	СведенияПоТоварам КАК СведенияПоТоварам
			  |ГДЕ
			  |	СведенияПоТоварам.НетОтгрузки
			  |ИТОГИ ПО
			  |	Заказ";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
		+ "ВЫБРАТЬ
		  |	ЗаказыТорговыхПлощадок.Заказ КАК Заказ,
		  |	ЗаказыТорговыхПлощадок.УчетнаяЗапись КАК УчетнаяЗапись,
		  |	ЗаказыТорговыхПлощадок.НомерОтправления КАК НомерОтправления,
		  |	МИНИМУМ(ЗаказыТорговыхПлощадок.ДокументОтгрузки) КАК ДокументОтгрузки,
		  |	МИНИМУМ(ЗаказыТорговыхПлощадок.НомерРодительскогоОтправления) КАК НомерРодительскогоОтправления,
		  |	МИНИМУМ(ЗаказыТорговыхПлощадок.Статус) КАК Статус,
		  |	ЕСТЬNULL(МАКСИМУМ(СведенияПоТоварам.ИдентификаторЭкземпляра), 0) КАК МаксимальныйИдентификаторЭкземпляра,
		  |	ЕСТЬNULL(МАКСИМУМ(ЗаказыТорговыхПлощадок.ДокументОтгрузки <> НЕОПРЕДЕЛЕНО
		  |				И (СведенияПоТоварам.Заказ ЕСТЬ NULL
		  |					ИЛИ СведенияПоТоварам.ПозицияКОтгрузке
		  |						И (СведенияПоТоварам.НетПривязкиКОтгрузке
		  |							ИЛИ СведенияПоТоварам.ДокументОтгрузки <> ЗаказыТорговыхПлощадок.ДокументОтгрузки))), ИСТИНА) КАК ЕстьРасхождения,
		  |	ЕСТЬNULL(СУММА(ВЫБОР
		  |				КОГДА СведенияПоТоварам.Заказ ЕСТЬ NULL
		  |					ТОГДА 0
		  |				КОГДА НЕ СведенияПоТоварам.НетПривязкиКОтгрузке
		  |					ТОГДА 0
		  |				КОГДА НЕ СведенияПоТоварам.ПозицияПеренесена
		  |					ТОГДА 0
		  |				ИНАЧЕ ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
		  |			КОНЕЦ), 1) КАК КоличествоПеренесенныхПозиций,
		  |	ЕСТЬNULL(СУММА(ВЫБОР
		  |				КОГДА СведенияПоТоварам.Заказ ЕСТЬ NULL
		  |					ТОГДА 0
		  |				ИНАЧЕ ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
		  |			КОНЕЦ), 0) КАК КоличествоЗаписей
		  |ПОМЕСТИТЬ ОтправленияПоЗаказам
		  |ИЗ
		  |	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		  |		ЛЕВОЕ СОЕДИНЕНИЕ СведенияПоТоварам КАК СведенияПоТоварам
		  |		ПО ЗаказыТорговыхПлощадок.Заказ = СведенияПоТоварам.Заказ
		  |			И ЗаказыТорговыхПлощадок.НомерОтправления = СведенияПоТоварам.НомерОтправления
		  |ГДЕ
		  |	ЗаказыТорговыхПлощадок.Заказ В(&Заказы)
		  |
		  |СГРУППИРОВАТЬ ПО
		  |	ЗаказыТорговыхПлощадок.Заказ,
		  |	ЗаказыТорговыхПлощадок.УчетнаяЗапись,
		  |	ЗаказыТорговыхПлощадок.НомерОтправления
		  |
		  |ИНДЕКСИРОВАТЬ ПО
		  |	Заказ,
		  |	НомерОтправления
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	ЗаказыТорговыхПлощадок.Заказ КАК Заказ,
		  |	ЗаказыТорговыхПлощадок.УчетнаяЗапись КАК УчетнаяЗапись
		  |ПОМЕСТИТЬ ЗаказыТорговыхПлощадок
		  |ИЗ
		  |	ОтправленияПоЗаказам КАК ЗаказыТорговыхПлощадок
		  |
		  |ИНДЕКСИРОВАТЬ ПО
		  |	Заказ
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	1 КАК Порядок,
		  |	ОтправленияПоЗаказам.Заказ КАК Заказ,
		  |	ОтправленияПоЗаказам.Заказ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		  |	ОтправленияПоЗаказам.УчетнаяЗапись КАК УчетнаяЗапись,
		  |	ОтправленияПоЗаказам.УчетнаяЗапись.ВидМаркетплейса КАК ВидМаркетплейса,
		  |	ОтправленияПоЗаказам.НомерОтправления КАК НомерОтправления,
		  |	ОтправленияПоЗаказам.НомерРодительскогоОтправления КАК НомерРодительскогоОтправления,
		  |	ОтправленияПоЗаказам.ДокументОтгрузки КАК ДокументОтгрузки,
		  |	ВЫБОР
		  |		КОГДА ОтправленияПоЗаказам.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		  |			ТОГДА ВЫРАЗИТЬ(ОтправленияПоЗаказам.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Номер
		  |		КОГДА ОтправленияПоЗаказам.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		  |			ТОГДА ВЫРАЗИТЬ(ОтправленияПоЗаказам.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Номер
		  |		ИНАЧЕ """"
		  |	КОНЕЦ КАК НомерДокументаОтгрузки,
		  |	ВЫБОР
		  |		КОГДА ОтправленияПоЗаказам.ДокументОтгрузки ССЫЛКА Документ.ПередачаТоваровХранителю
		  |			ТОГДА ВЫРАЗИТЬ(ОтправленияПоЗаказам.ДокументОтгрузки КАК Документ.ПередачаТоваровХранителю).Дата
		  |		КОГДА ОтправленияПоЗаказам.ДокументОтгрузки ССЫЛКА Документ.РеализацияТоваровУслуг
		  |			ТОГДА ВЫРАЗИТЬ(ОтправленияПоЗаказам.ДокументОтгрузки КАК Документ.РеализацияТоваровУслуг).Дата
		  |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		  |	КОНЕЦ КАК ДатаДокументаОтгрузки,
		  |	ОтправленияПоЗаказам.Статус КАК Статус,
		  |	ОтправленияПоЗаказам.МаксимальныйИдентификаторЭкземпляра КАК МаксимальныйИдентификаторЭкземпляра,
		  |	ОтправленияПоЗаказам.КоличествоПеренесенныхПозиций КАК КоличествоПеренесенныхПозиций,
		  |	ОтправленияПоЗаказам.КоличествоЗаписей КАК КоличествоЗаписей
		  |ИЗ
		  |	ОтправленияПоЗаказам КАК ОтправленияПоЗаказам
		  |
		  |ОБЪЕДИНИТЬ ВСЕ
		  |
		  |ВЫБРАТЬ
		  |	2,
		  |	СведенияПоТоварам.Заказ,
		  |	СведенияПоТоварам.Заказ.ХозяйственнаяОперация,
		  |	ЕСТЬNULL(МАКСИМУМ(ЗаказыТорговыхПлощадок.УчетнаяЗапись), ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка)),
		  |	ЕСТЬNULL(МАКСИМУМ(ЗаказыТорговыхПлощадок.УчетнаяЗапись.ВидМаркетплейса), ЗНАЧЕНИЕ(Перечисление.ВидыМаркетплейсов.ПустаяСсылка)),
		  |	СведенияПоТоварам.НомерОтправления,
		  |	СведенияПоТоварам.НомерРодительскогоОтправления,
		  |	НЕОПРЕДЕЛЕНО,
		  |	"""",
		  |	ДАТАВРЕМЯ(1, 1, 1),
		  |	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки),
		  |	МАКСИМУМ(СведенияПоТоварам.ИдентификаторЭкземпляра),
		  |	СУММА(ВЫБОР
		  |			КОГДА СведенияПоТоварам.НомерРодительскогоОтправления = """"
		  |				ТОГДА 0
		  |			КОГДА СведенияПоТоварам.ДокументОтгрузки <> НЕОПРЕДЕЛЕНО
		  |				ТОГДА ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0))
		  |			ИНАЧЕ 0
		  |		КОНЕЦ),
		  |	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(17, 0)))
		  |ИЗ
		  |	СведенияПоТоварам КАК СведенияПоТоварам
		  |		ЛЕВОЕ СОЕДИНЕНИЕ ОтправленияПоЗаказам КАК ОтправленияПоЗаказам
		  |		ПО СведенияПоТоварам.Заказ = ОтправленияПоЗаказам.Заказ
		  |			И СведенияПоТоварам.НомерОтправления = ОтправленияПоЗаказам.НомерОтправления
		  |		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		  |		ПО СведенияПоТоварам.Заказ = ЗаказыТорговыхПлощадок.Заказ
		  |ГДЕ
		  |	ОтправленияПоЗаказам.НомерОтправления ЕСТЬ NULL
		  |
		  |СГРУППИРОВАТЬ ПО
		  |	СведенияПоТоварам.Заказ,
		  |	СведенияПоТоварам.НомерОтправления,
		  |	СведенияПоТоварам.НомерРодительскогоОтправления,
		  |	СведенияПоТоварам.Заказ.ХозяйственнаяОперация
		  |
		  |УПОРЯДОЧИТЬ ПО
		  |	НомерОтправления
		  |ИТОГИ
		  |	МАКСИМУМ(ХозяйственнаяОперация),
		  |	МАКСИМУМ(УчетнаяЗапись),
		  |	МАКСИМУМ(ВидМаркетплейса)
		  |ПО
		  |	Заказ
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |УНИЧТОЖИТЬ ЗаказыТорговыхПлощадок
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	ИзмененныеОтправления.Порядок КАК Порядок,
		  |	ИзмененныеОтправления.Заказ КАК Заказ,
		  |	ИзмененныеОтправления.НомерОтправления КАК НомерОтправления,
		  |	ИзмененныеОтправления.ДокументОтгрузки КАК ДокументОтгрузки
		  |ИЗ
		  |	(ВЫБРАТЬ
		  |		1 КАК Порядок,
		  |		СведенияПоТоварам.Заказ КАК Заказ,
		  |		СведенияПоТоварам.НомерОтправления КАК НомерОтправления,
		  |		ЕСТЬNULL(ОтправленияПоЗаказам.ДокументОтгрузки, НЕОПРЕДЕЛЕНО) КАК ДокументОтгрузки
		  |	ИЗ
		  |		СведенияПоТоварам КАК СведенияПоТоварам
		  |			ЛЕВОЕ СОЕДИНЕНИЕ ОтправленияПоЗаказам КАК ОтправленияПоЗаказам
		  |			ПО СведенияПоТоварам.Заказ = ОтправленияПоЗаказам.Заказ
		  |				И СведенияПоТоварам.НомерОтправления = ОтправленияПоЗаказам.НомерОтправления
		  |	ГДЕ
		  |		СведенияПоТоварам.ПозицияПеренесена
		  |		И ОтправленияПоЗаказам.ДокументОтгрузки ЕСТЬ NULL
		  |	
		  |	ОБЪЕДИНИТЬ ВСЕ
		  |	
		  |	ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |		2,
		  |		СведенияПоТоварам.Заказ,
		  |		ЕСТЬNULL(ОтправленияПоЗаказам.НомерОтправления, """"),
		  |		СведенияПоТоварам.ДокументОтгрузки
		  |	ИЗ
		  |		СведенияПоТоварам КАК СведенияПоТоварам
		  |			ЛЕВОЕ СОЕДИНЕНИЕ ОтправленияПоЗаказам КАК ОтправленияПоЗаказам
		  |			ПО СведенияПоТоварам.Заказ = ОтправленияПоЗаказам.Заказ
		  |				И СведенияПоТоварам.ДокументОтгрузки = ОтправленияПоЗаказам.ДокументОтгрузки
		  |	ГДЕ
		  |		СведенияПоТоварам.ПозицияПеренесена
		  |		И СведенияПоТоварам.НомерОтправления <> ОтправленияПоЗаказам.НомерОтправления
		  |		И ОтправленияПоЗаказам.ДокументОтгрузки ЕСТЬ НЕ NULL 
		  |	
		  |	ОБЪЕДИНИТЬ ВСЕ
		  |	
		  |	ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |		3,
		  |		ОтправленияПоЗаказам.Заказ,
		  |		ОтправленияПоЗаказам.НомерОтправления,
		  |		ОтправленияПоЗаказам.ДокументОтгрузки
		  |	ИЗ
		  |		ОтправленияПоЗаказам КАК ОтправленияПоЗаказам
		  |	ГДЕ
		  |		ОтправленияПоЗаказам.ЕстьРасхождения) КАК ИзмененныеОтправления
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |УНИЧТОЖИТЬ ОтправленияПоЗаказам
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	СведенияПоТоварам.Заказ КАК Заказ,
		  |	СведенияПоТоварам.НомерОтправления КАК НомерОтправления
		  |ИЗ
		  |	СведенияПоТоварам КАК СведенияПоТоварам
		  |ГДЕ
		  |	СведенияПоТоварам.ТребуетсяЗаполнить
		  |	И СведенияПоТоварам.ПозицияКОтгрузке";
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов()
		+ "УНИЧТОЖИТЬ СведенияПоТоварам";
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ПроверитьГотовностьОтправленийКПодтверждениюСборки(РезультатПроверкиЗаказа)

	ДетализацияПроблемПоОтправлениям = Новый Соответствие;
	
	Для Каждого ЗаписьИзДанныхПоНомерамОтправлений Из РезультатПроверкиЗаказа.ДанныеПоНомерамОтправлений Цикл
		НомерОтправления = ЗаписьИзДанныхПоНомерамОтправлений.Ключ;
		
		ВСборке =
			(РезультатПроверкиЗаказа.ОтправленияНеВСборке.Найти(НомерОтправления) = Неопределено);
		ЕстьТовары =
			(РезультатПроверкиЗаказа.ОтправленияБезТоваров.Найти(НомерОтправления) = Неопределено);
		ЕстьНеЗаполненыеДанные =
			(РезультатПроверкиЗаказа.ОтправленияСНезаполненнымиДанными.Найти(НомерОтправления) <> Неопределено);
		ЕстьДокументОтгрузки =
			(РезультатПроверкиЗаказа.ОтправленияБезДокументовОтгрузки.Найти(НомерОтправления) = Неопределено);
		ИзмененДокументОтгрузки =
			(РезультатПроверкиЗаказа.ОтправленияИзмененные.Найти(НомерОтправления) <> Неопределено);
		
		Если ВСборке И ЕстьТовары И Не ЕстьНеЗаполненыеДанные
				И ЕстьДокументОтгрузки И Не ИзмененДокументОтгрузки Тогда
			РезультатПроверкиЗаказа.ОтправленияКПодтверждениюСборки.Добавить(НомерОтправления);
		Иначе
			Проблемы = Новый Массив;
			
			Если Не ВСборке Тогда
				Проблемы.Добавить(НСтр("ru = 'Сборка отправления не требуется.'"));
			ИначеЕсли Не ЕстьТовары Тогда
				Проблемы.Добавить(НСтр("ru = 'Не найдены товары отправления.'"));
			Иначе
				Если ЕстьНеЗаполненыеДанные Тогда
					Проблемы.Добавить(НСтр("ru = 'Есть незаполненные данные по товарам отправления.'"));
				КонецЕсли;
				
				Если Не ЕстьДокументОтгрузки Или ИзмененДокументОтгрузки Тогда
					Проблемы.Добавить(НСтр("ru = 'Требуется оформление документа отгрузки.'"));
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Проблемы) Тогда
				ДетализацияПроблемПоОтправлениям.Вставить(НомерОтправления, Проблемы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверкиЗаказа.ДетализацияПроблемПоОтправлениям = ДетализацияПроблемПоОтправлениям;

КонецПроцедуры

Функция ЗаполнитьСписокСкладов(СписокСкладов, УчетнаяЗапись)

	ТекстОшибки = "";
	
	СписокПроблемныхУчетныхЗаписей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК УчетнаяЗапись,
		|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса КАК ВидМаркетплейса
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	&Условие";
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстЗамены = "УчетныеЗаписиМаркетплейсов.Ссылка = &УчетнаяЗапись";
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Иначе
		ТекстЗамены = "НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстЗамены);
	
	ВыборкаУчетныхЗаписей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУчетныхЗаписей.Следующий() Цикл
		Если ВыборкаУчетныхЗаписей.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
			РезультатПолученияСкладов =
				ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьСкладыСервиса(ВыборкаУчетныхЗаписей.УчетнаяЗапись);
			
			ПолеПроверки         = "ЭтоRealFBS";
			ПредставлениеFBS     = "FBS";
			ПредставлениеRealFBS = "RealFBS";
		Иначе
			РезультатПолученияСкладов = Неопределено;
		КонецЕсли;
		
		Если РезультатПолученияСкладов <> Неопределено Тогда
			Если РезультатПолученияСкладов.ОшибкаПолученияСкладовИзСервиса Тогда
				СписокПроблемныхУчетныхЗаписей.Добавить(ВыборкаУчетныхЗаписей.УчетнаяЗапись);
			КонецЕсли;
			
			Для Каждого СтрокаСклада Из РезультатПолученияСкладов.ТаблицаСкладов Цикл
				ПредставлениеЗначения = СтрокаСклада.НаименованиеОбъектаМаркетплейса
										 + " (" + ?(СтрокаСклада[ПолеПроверки], ПредставлениеRealFBS, ПредставлениеFBS)
										 + ", " + СтрокаСклада.Статус + ")";
				
				СписокСкладов.Добавить(СтрокаСклада.ИдентификаторОбъектаМаркетплейса, ПредставлениеЗначения);
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СписокПроблемныхУчетныхЗаписей) Тогда
			ТекстШаблона = НСтр("ru = 'Не удалось получить список складов для учетных записей: %1. Подробнее см. журнал регистрации.
				|Заполнение списка складов выполнено из сохраненных настроек.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстШаблона,
				СтрСоединить(СписокПроблемныхУчетныхЗаписей, ", "));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстОшибки;

КонецФункции

Функция ЗаполнитьСведенияПоЗаказамИОтправлениям(УчетнаяЗапись)

	ТекстОшибки = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыТорговыхПлощадок.Заказ КАК Заказ
		|ИЗ
		|	РегистрСведений.ЗаказыТорговыхПлощадок КАК ЗаказыТорговыхПлощадок
		|ГДЕ
		|	ЗаказыТорговыхПлощадок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки)
		|	И &Условие";
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ТекстЗамены = "ЗаказыТорговыхПлощадок.УчетнаяЗапись = &УчетнаяЗапись";
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", ТекстЗамены);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Заказы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Заказ");
		
		РезультатЗаполнения =
			РегистрыСведений.ДополнительныеСведенияПоТоварамЗаказовТорговыхПлощадок.ЗаполнитьДанныеПоЭкземплярам(Заказы);
		
		Если Не ПустаяСтрока(РезультатЗаполнения.ИнформацияОбОшибке.КодОшибки) Тогда
			ТекстОшибки = РезультатЗаполнения.ИнформацияОбОшибке.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОшибки;

КонецФункции

Функция ПерезаполнитьДокументыОтгрузки(РезультатПроверкиЗаказов, СведенияПоТоварам, Автор = Неопределено)

	СписокОшибок = Новый Массив;
	
	Для Каждого ДанныеПоЗаказу Из РезультатПроверкиЗаказов Цикл
		Заказ                   = ДанныеПоЗаказу.Ключ;
		РезультатПроверкиЗаказа = ДанныеПоЗаказу.Значение;
		
		ИмяСобытия = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации(РезультатПроверкиЗаказа.ВидМаркетплейса);
		
		// Отменить проведение всех документов отгрузки для заказа перед перезаполнением.
		ПроблемныеДокументы = Новый Массив;
		
		Для Каждого ДанныеДокументаОтгрузки Из РезультатПроверкиЗаказа.ИзмененныеДокументыОтгрузки Цикл
			ДокументОтгрузки = ДанныеДокументаОтгрузки.Ключ;
			
			ДокументОбъект = ДокументОтгрузки.ПолучитьОбъект();
			ОписаниеОшибки = ИнтеграцияСМаркетплейсамиСервер.ЗаблокироватьДокумент(ДокументОбъект, ИмяСобытия);
			
			Если ПустаяСтрока(ОписаниеОшибки) Тогда
				Если ДокументОбъект.Проведен Или ДокументОбъект.Товары.Количество() > 0 Тогда
					ДокументОбъект.Товары.Очистить();
					
					Результат = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПровестиДокумент(ДокументОбъект, Ложь, ИмяСобытия);
					Если Не Результат.ЗаписьВыполнена Тогда
						СписокОшибок.Добавить(Результат.ОписаниеОшибки);
					КонецЕсли;
				КонецЕсли;
			Иначе
				СписокОшибок.Добавить(ОписаниеОшибки);
				ПроблемныеДокументы.Добавить(ДокументОтгрузки);
			КонецЕсли;
			
			ДокументОбъект.Разблокировать();
		КонецЦикла;
		
		// Перезаполнить документы отгрузки.
		ЕстьНеактуальныеДокументыОтгрузки = Ложь;
		
		Если РезультатПроверкиЗаказа.ИзмененныеДокументыОтгрузки.Количество() > 0 Тогда
			ДанныеЗаполнения = ДанныеЗаполненияДокументаОтгрузки(Заказ, РезультатПроверкиЗаказа, Автор);
			
			Для Каждого ДанныеДокументаОтгрузки Из РезультатПроверкиЗаказа.ИзмененныеДокументыОтгрузки Цикл
				ДокументОтгрузки = ДанныеДокументаОтгрузки.Ключ;
				
				Если ПроблемныеДокументы.Найти(ДокументОтгрузки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеЗаполнения.НомерОтправления              = ДанныеДокументаОтгрузки.Значение;
				ДанныеЗаполнения.НомерРодительскогоОтправления = "";
				
				ОписаниеОшибки = ОформитьДокументОтгрузки(
					ДокументОтгрузки,
					ДанныеЗаполнения,
					СведенияПоТоварам,
					ИмяСобытия);
					
				Если ДокументОтгрузки = Неопределено Или ДокументОтгрузки <> ДанныеДокументаОтгрузки.Ключ Тогда
					ЕстьНеактуальныеДокументыОтгрузки = Истина;
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
					СписокОшибок.Добавить(ОписаниеОшибки);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьНеактуальныеДокументыОтгрузки Тогда
			ОписаниеОшибки = ЗаписатьСведенияОбОтправлениях(
								Заказ,
								РезультатПроверкиЗаказа.ДанныеПоНомерамОтправлений);
			
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				СписокОшибок.Добавить(ОписаниеОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(СписокОшибок, Символы.ПС);

КонецФункции

Функция СоздатьДокументыОтгрузки(РезультатПроверкиЗаказов, СведенияПоТоварам, Автор = Неопределено)

	СписокОшибок = Новый Массив;
	
	Для Каждого ДанныеПоЗаказу Из РезультатПроверкиЗаказов Цикл
		Заказ                   = ДанныеПоЗаказу.Ключ;
		РезультатПроверкиЗаказа = ДанныеПоЗаказу.Значение;
		
		ИмяСобытия = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации(РезультатПроверкиЗаказа.ВидМаркетплейса);
		
		ДанныеЗаполнения = ДанныеЗаполненияДокументаОтгрузки(Заказ, РезультатПроверкиЗаказа, Автор);
		
		Для Каждого НомерОтправления Из РезультатПроверкиЗаказа.ОтправленияБезДокументовОтгрузки Цикл
			ДокументОтгрузки = Неопределено;
			
			ДанныеЗаполнения.НомерОтправления              = НомерОтправления;
			ДанныеЗаполнения.НомерРодительскогоОтправления = "";
			
			ОписаниеОшибки = ОформитьДокументОтгрузки(
				ДокументОтгрузки,
				ДанныеЗаполнения,
				СведенияПоТоварам,
				ИмяСобытия);
			
			Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
				НачатьТранзакцию();
				
				Попытка
					БлокировкаДанных = Новый БлокировкаДанных;
					ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.ЗаказыТорговыхПлощадок");
					ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Разделяемый;
					ЭлементБлокировкиДанных.УстановитьЗначение("Заказ", Заказ);
					БлокировкаДанных.Заблокировать();
					
					НаборЗаписей = РегистрыСведений.ЗаказыТорговыхПлощадок.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Заказ.Установить(Заказ);
					НаборЗаписей.Прочитать();
					
					Запись = Неопределено;
					Для Каждого Запись Из НаборЗаписей Цикл
						Если Запись.НомерОтправления = НомерОтправления Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Запись <> Неопределено Тогда
						Если Запись.НомерОтправления <> НомерОтправления Тогда
							Запись = НаборЗаписей.Добавить();
							ЗаполнитьЗначенияСвойств(Запись, НаборЗаписей[0],,
								"ДокументОтгрузки, Статус, ДатаУстановкиСтатуса, НомерОтправления, НомерРодительскогоОтправления");
							Запись.Статус               = Перечисления.СтатусыЗаказовТорговыхПлощадок.ОжидаетСборки;
							Запись.ДатаУстановкиСтатуса = ТекущаяДатаСеанса();
							Запись.НомерОтправления     = НомерОтправления;
						КонецЕсли;
						
						Запись.ДокументОтгрузки              = ДокументОтгрузки;
						Запись.НомерРодительскогоОтправления = ДанныеЗаполнения.НомерРодительскогоОтправления;
						
						НаборЗаписей.Записать(Истина);
					КонецЕсли;
					
					ЗафиксироватьТранзакцию();
					
				Исключение
					ОтменитьТранзакцию();
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'При установке документа отгрузки <%1> заказу <%2> возникла ошибка: %3.'",
							ОбщегоНазначения.КодОсновногоЯзыка()),
						ДокументОтгрузки,
						Заказ,
						ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						
					ЗаписьЖурналаРегистрации(ИмяСобытия,
						УровеньЖурналаРегистрации.Ошибка,,,
						ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОписаниеОшибки) Тогда
				СписокОшибок.Добавить(ОписаниеОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Возврат СтрСоединить(СписокОшибок, Символы.ПС);

КонецФункции

Функция ОформитьДокументОтгрузки(ДокументОтгрузки, ДанныеЗаполнения, СведенияПоТоварам, ИмяСобытия = "")

	ОписаниеОшибки = "";
	
	Если ПустаяСтрока(ИмяСобытия) Тогда
		ИмяСобытия = ИнтеграцияСМаркетплейсамиСервер.СобытиеЖурналаРегистрации();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ХозяйственнаяОперация) Тогда
		Возврат ОписаниеОшибки;
	КонецЕсли;
	
	ВидМаркетплейса = ИнтеграцияСМаркетплейсамиПовтИсп.ПредставлениеВидаТорговойПлощадки(ДанныеЗаполнения.ВидМаркетплейса);
	ДанныеЗаполнения.Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = '(%1) %2. Отгрузка отправления %3'"),
										ВидМаркетплейса,
										ДанныеЗаполнения.УчетнаяЗапись,
										ДанныеЗаполнения.НомерОтправления);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЗаказКлиента",     ДанныеЗаполнения.ДокументОснование);
	Отбор.Вставить("НомерОтправления", ДанныеЗаполнения.НомерОтправления);
	Отбор.Вставить("КОтгрузке",        Истина);
	
	СтрокиОтправления = СведенияПоТоварам.НайтиСтроки(Отбор);
	Если СтрокиОтправления.Количество() > 0 Тогда
		ДанныеЗаполнения.Товары = СтрокиОтправления;
		
		ДанныеЗаполнения.НомерРодительскогоОтправления = СтрокиОтправления[0].НомерРодительскогоОтправления;
		
		ДокументОбъект = Неопределено;
		Если ДокументОтгрузки <> Неопределено Тогда
			ДокументОбъект = ДокументОтгрузки.ПолучитьОбъект();	// ДокументОбъект.РеализацияТоваровУслуг, ДокументОбъект.ПередачаТоваровХранителю
			ОписаниеОшибки = ИнтеграцияСМаркетплейсамиСервер.ЗаблокироватьДокумент(ДокументОбъект, ИмяСобытия);
		КонецЕсли;
		
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ЗаполнитьДокументОтгрузки(ДокументОбъект, ДанныеЗаполнения, ИмяСобытия);
			Если ДокументОтгрузки = Неопределено И ДокументОбъект <> Неопределено Тогда
				ДокументОтгрузки = ДокументОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДокументОтгрузки = Неопределено;
	КонецЕсли;
	
	Отбор.Вставить("КОтгрузке", Ложь);
	Отбор.Вставить("Отменено",  Ложь);
	
	СтрокиБезОтгрузки = СведенияПоТоварам.НайтиСтроки(Отбор);
	Если СтрокиБезОтгрузки.Количество() > 0 Тогда
		Если ДанныеЗаполнения.РасширенныеВозможностиЗаказа Тогда
			ШаблонСообщения =
				НСтр("ru = 'В отправлении ""%1"" есть неотгружаемые товары. Для отгрузки установите товарам действие ""%2"".'");
			Параметр2 = Перечисления.ВариантыОбеспечения.Отгрузить;
		Иначе
			ШаблонСообщения =
				НСтр("ru = 'В отправлении ""%1"" есть неотгружаемые товары. Для отгрузки установите заказу статус ""%2"".'");
			Параметр2 = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		КонецЕсли;
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонСообщения,
								ДанныеЗаполнения.НомерОтправления,
								Параметр2);
		
		ОписаниеОшибки = ?(ПустаяСтрока(ОписаниеОшибки), "", Символы.ПС) + ТекстСообщения;
	КонецЕсли;
	
	Возврат ОписаниеОшибки

КонецФункции

Функция ЗаполнитьДокументОтгрузки(ДокументОтгрузки, ДанныеЗаполнения, ИмяСобытия = "")

	ТекстОшибки = "";
	
	ДанныеПоМенеджеруНакладной = Новый Структура;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		МенеджерНакладной = Документы.ПередачаТоваровХранителю;
		Обработчик = ПередачаТоваровХранителюЛокализация;
		ИмяТаблицыТоваровДокумента = "ТоварыПередачи";
		
		РасширенноеЗаполнениеОстатков = Ложь;
		
	ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности Тогда
		МенеджерНакладной = Документы.РеализацияТоваровУслуг;
		Обработчик = РеализацияТоваровУслугЛокализация;
		ИмяТаблицыТоваровДокумента = "ТоварыРеализации";
		
		РасширенноеЗаполнениеОстатков = Истина;
		
		ДанныеПоМенеджеруНакладной.Вставить("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		ДанныеПоМенеджеруНакладной.Вставить("Статус", Перечисления.СтатусыРеализацийТоваровУслуг.ВПути);
		
	ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		МенеджерНакладной = Документы.РеализацияТоваровУслуг;
		Обработчик = РеализацияТоваровУслугЛокализация;
		ИмяТаблицыТоваровДокумента = "ТоварыРеализации";
		
		РасширенноеЗаполнениеОстатков = Истина;
		
		ДанныеПоМенеджеруНакладной.Вставить("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		
	Иначе
		ТекстОшибки = НСтр("ru = 'Указана неверная хозяйственная операция в заказе.'");
	КонецЕсли;
	
	ЭтоНовыйДокумент = (ДокументОтгрузки = Неопределено
							Или ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОтгрузки.Ссылка) <> МенеджерНакладной);
	
	Если ЭтоНовыйДокумент Тогда
		ДокументОтгрузки = МенеджерНакладной.СоздатьДокумент();
		ДокументОтгрузки.Дата = ТекущаяДатаСеанса();
	Иначе
		ДокументОтгрузки.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОтгрузки, ДанныеПоМенеджеруНакладной);
	
	ПараметрыОформления = Новый Структура;
	ПараметрыОформления.Вставить("ВводитьНаОснованииНепроведенного", Истина);
	ПараметрыОформления.Вставить("ЗаполнятьПоОстаткам",              Ложь);
	ПараметрыОформления.Вставить("ПоЗаказам",                        Истина);
	ПараметрыОформления.Вставить("ПоОрдерам",                        Ложь);
	
	ДанныеЗаполнения.Вставить("ПараметрыОформления", ПараметрыОформления);
	
	ДокументОтгрузки.Заполнить(ДанныеЗаполнения);
	
	Если ДокументОтгрузки.Товары.Количество() > 0 Тогда
		Отбор = Новый Структура("ЗаказКлиента", ДанныеЗаполнения.ДокументОснование);
		
		СтрокиКУдалению = ДокументОтгрузки.Товары.НайтиСтроки(Отбор);
		Для Каждого СтрокаТовара Из СтрокиКУдалению Цикл
			ДокументОтгрузки.Товары.Удалить(СтрокаТовара);
		КонецЦикла;
	КонецЕсли;
	
	МассивЗаказов = Новый Массив;
	МассивЗаказов.Добавить(ДанныеЗаполнения.ДокументОснование);
	
	ТипЧисло     = Новый ОписаниеТипов("Число");
	ТипЧисло15_3 = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 3));
	
	Товары = ДокументОтгрузки.Товары.ВыгрузитьКолонки();
	Товары.Колонки.Добавить("КоличествоВНакладной",         ТипЧисло15_3);
	Товары.Колонки.Добавить("Коэффициент",                  ТипЧисло);
	Товары.Колонки.Добавить("КоличествоВЗаказе",            ТипЧисло15_3);
	Товары.Колонки.Добавить("КоличествоУпаковокВЗаказе",    ТипЧисло15_3);
	Товары.Колонки.Добавить("КоличествоВОрдере",            ТипЧисло15_3);
	Товары.Колонки.Добавить("КоличествоУпаковокВОрдере",    ТипЧисло15_3);
	Товары.Колонки.Добавить("ОрдернаяСхемаПриОтгрузке",     ТипЧисло15_3);
	Товары.Добавить();
	
	ТоварыДокумента = ДокументОтгрузки.Товары.ВыгрузитьКолонки();
	Для Каждого СтрокаТовара Из ДанныеЗаполнения.Товары Цикл
		ЗаполнитьЗначенияСвойств(ТоварыДокумента.Добавить(), СтрокаТовара);
	КонецЦикла;
	
	ДанныеОтбора = Новый Структура(РеквизитыЗаполнения());
	ЗаполнитьЗначенияСвойств(ДанныеОтбора, ДокументОтгрузки);
	ДанныеОтбора.Вставить(ИмяТаблицыТоваровДокумента, ТоварыДокумента);
	
	ПараметрыЗаполнения = Новый Структура;
	Если РасширенноеЗаполнениеОстатков Тогда
		ПараметрыЗаполнения.Вставить("ВариантОформления",                           ДокументОтгрузки.ВариантОформленияПродажи);
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("ПодборПоЗаказамОрдерам",                          Истина);
	ПараметрыЗаполнения.Вставить("ПараметрыОформления",                             ПараметрыОформления);
	ПараметрыЗаполнения.Вставить("ИспользоватьРасширенныеВозможностиЗаказаКлиента", Истина);
	
	Обработчик.ДополнитьПараметрыЗаполнения(ПараметрыЗаполнения, ДокументОтгрузки);
	
	ШтрихкодыУпаковок = Новый ТаблицаЗначений;
	ШтрихкодыУпаковок.Колонки.Добавить("ШтрихкодУпаковки",     Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ШтрихкодыУпаковок.Колонки.Добавить("ИзОрдера",             Новый ОписаниеТипов("Булево"));
	ШтрихкодыУпаковок.Колонки.Добавить("ВыгружатьВРеализацию", Новый ОписаниеТипов("Булево"));
	ШтрихкодыУпаковок.Колонки.Добавить("ЗаказКлиента",         Новый ОписаниеТипов("ДокументСсылка.ЗаказКлиента"));
	ШтрихкодыУпаковок.Колонки.Добавить("Номенклатура",         Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ШтрихкодыУпаковок.Колонки.Добавить("Характеристика",       Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ШтрихкодыУпаковок.Колонки.Добавить("Серия",                Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	ШтрихкодыУпаковок.Колонки.Добавить("Использован",          Новый ОписаниеТипов("Булево"));
	
	Если РасширенноеЗаполнениеОстатков Тогда
		МенеджерНакладной.ЗаполнитьПоОстаткамЗаказов(
			ДанныеОтбора,
			Товары,
			ДокументОтгрузки.СкидкиНаценки,
			ДокументОтгрузки.НачислениеБонусныхБаллов,
			ДокументОтгрузки.Склад,
			МассивЗаказов,
			ПараметрыЗаполнения,
			ШтрихкодыУпаковок);
	Иначе
		МенеджерНакладной.ЗаполнитьПоОстаткамЗаказов(
			ДанныеОтбора,
			Товары,
			ДокументОтгрузки.Склад,
			МассивЗаказов,
			ПараметрыЗаполнения);
	КонецЕсли;
	
	СтрокиПересчета = Новый Массив;
	
	ЕстьСуммаВзаиморасчетов = (Товары.Колонки.Найти("СуммаВзаиморасчетов") <> Неопределено);
	
	Для Каждого СтрокаИсточник Из Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаИсточник.ЗаказКлиента) Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоКОтгрузке = СтрокаИсточник.КоличествоВНакладной;
		Если КоличествоКОтгрузке <> 0 Тогда
			СтрокаТовара = ДокументОтгрузки.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, СтрокаИсточник);
			Если ЕстьСуммаВзаиморасчетов Тогда
				СтрокаТовара.СуммаВзаиморасчетов = 0;
			КонецЕсли;
			
			Если СтрокаТовара.Количество <> КоличествоКОтгрузке Тогда
				СтрокаТовара.Количество         = КоличествоКОтгрузке;
				СтрокаТовара.КоличествоУпаковок = КоличествоКОтгрузке / СтрокаИсточник.Коэффициент;
				
				СтрокиПересчета.Добавить(СтрокаТовара);
			ИначеЕсли СтрокаТовара.Сумма = 0 Тогда
				СтрокиПересчета.Добавить(СтрокаТовара);
			КонецЕсли;
			
			Если РасширенноеЗаполнениеОстатков Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Номенклатура",   СтрокаТовара.Номенклатура);
				Отбор.Вставить("Характеристика", СтрокаТовара.Характеристика);
				Отбор.Вставить("Использован",    Ложь);
				
				СтрокиШтрихкодов = ШтрихкодыУпаковок.НайтиСтроки(Отбор);
				Для Каждого СтрокаШтрихкода Из СтрокиШтрихкодов Цикл
					ЗаполнитьЗначенияСвойств(ДокументОтгрузки.ШтрихкодыУпаковок.Добавить(), СтрокаШтрихкода);
					
					СтрокаШтрихкода.Использован = Истина;
					КоличествоКОтгрузке = КоличествоКОтгрузке - 1;
					Если КоличествоКОтгрузке = 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиПересчета.Количество() > 0 Тогда
		СтруктураДействий = Новый Структура;
		
		Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		ИначеЕсли ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
				Или ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ДокументОтгрузки);
			
			СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
			СтруктураДействий.Вставить("ПересчитатьСумму");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
			СтруктураДействий.Вставить("ПересчитатьСуммуАвтоматическойСкидки");
			СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
			СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(СтрокиПересчета, СтруктураДействий, Неопределено);
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности
			Или ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту Тогда
		ДокументОтгрузки.СкидкиРассчитаны = Истина;
		
		ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(
			ДанныеЗаполнения.ДокументОснование,
			ДокументОтгрузки.Товары,
			"ЗаказКлиента");
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОтгрузки, МенеджерНакладной);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОтгрузки, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Автор) Тогда
		ДокументОтгрузки.Автор = ДанныеЗаполнения.Автор;
	КонецЕсли;
	
	ДокументОтгрузки.Комментарий = ДанныеЗаполнения.Комментарий;
	
	Результат = ИнтеграцияСМаркетплейсамиСервер.ЗаписатьПровестиДокумент(ДокументОтгрузки, Истина, ИмяСобытия);
	Если Не Результат.ЗаписьВыполнена Тогда
		ТекстОшибки = Результат.ОписаниеОшибки;
	ИначеЕсли Не ДокументОтгрузки.Проведен Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Документ %1 не проведен.'"),
							ДокументОтгрузки.Ссылка);
	КонецЕсли;
	
	Возврат ТекстОшибки;

КонецФункции

Функция ДанныеЗаполненияДокументаОтгрузки(Заказ, РезультатПроверкиЗаказа, Автор = Неопределено)

	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументОснование",             Заказ);
	ДанныеЗаполнения.Вставить("ХозяйственнаяОперация",         РезультатПроверкиЗаказа.ХозяйственнаяОперация);
	ДанныеЗаполнения.Вставить("УчетнаяЗапись",                 РезультатПроверкиЗаказа.УчетнаяЗапись);
	ДанныеЗаполнения.Вставить("ВидМаркетплейса",               РезультатПроверкиЗаказа.ВидМаркетплейса);
	ДанныеЗаполнения.Вставить("НомерОтправления",              "");
	ДанныеЗаполнения.Вставить("НомерРодительскогоОтправления", "");
	ДанныеЗаполнения.Вставить("Товары",                        Новый Массив);
	ДанныеЗаполнения.Вставить("Комментарий",                   "");
	ДанныеЗаполнения.Вставить("Автор",                         Автор);
	ДанныеЗаполнения.Вставить("РасширенныеВозможностиЗаказа",  ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента"));
	
	Возврат ДанныеЗаполнения;

КонецФункции

Функция РеквизитыЗаполнения()

	Возврат "Ссылка, ХозяйственнаяОперация, Организация, Партнер, Контрагент, Соглашение, Договор,
			|Валюта, ВалютаВзаиморасчетов, Сделка, НалогообложениеНДС, ЦенаВключаетНДС, ПорядокРасчетов,
			|НаправлениеДеятельности, ТребуетсяЗалогЗаТару, ВернутьМногооборотнуюТару";

КонецФункции

#КонецОбласти

#КонецЕсли
