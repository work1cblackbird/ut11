// @strict-types


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  Структура:
//  * Данные - Строка - при значении свойства ТипДанных = ИмяФайла.
//           - ТабличныйДокумент - при значении свойства ТипДанных = ТабличныйДокумент.
//  * ТипДанных - ПеречислениеСсылка.ТипыДанныхВизуализацииДокументаЭДО
//  * ВерсияДанных - Строка
//  * ИдентификаторПравила - Строка
//  * ДатаОбновленияПравила - Дата
Функция НовыеСвойстваВизуализации() Экспорт
	Свойства = Новый Структура;
	Свойства.Вставить("Данные", "");
	Свойства.Вставить("ТипДанных", Перечисления.ТипыДанныхВизуализацииДокументаЭДО.ПустаяСсылка());
	Свойства.Вставить("ВерсияДанных", "");
	Свойства.Вставить("ИдентификаторПравила", "");
	Свойства.Вставить("ДатаОбновленияПравила", '00010101');
	Возврат Свойства;
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  СвойстваВизуализации - см. НовыеСвойстваВизуализации
Процедура Записать(ЭлектронныйДокумент, СвойстваВизуализации) Экспорт
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаписьНабора.ЭлектронныйДокумент = ЭлектронныйДокумент;
	ЗаписьНабора.Данные = Новый ХранилищеЗначения(СвойстваВизуализации.Данные, Новый СжатиеДанных(9));
	ЗаписьНабора.ТипДанных = СвойстваВизуализации.ТипДанных;
	ЗаписьНабора.ВерсияДанных = СвойстваВизуализации.ВерсияДанных;
	ЗаписьНабора.ИдентификаторПравила = СвойстваВизуализации.ИдентификаторПравила;
	ЗаписьНабора.ДатаОбновленияПравила = СвойстваВизуализации.ДатаОбновленияПравила;
	НаборЗаписей.Записать();
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//  * ВерсияДанных - Строка
Функция НовыеВерсииДанныхДокументов() Экспорт
	ВерсииДанныхДокументов = Новый ТаблицаЗначений();
	ВерсииДанныхДокументов.Колонки.Добавить("ЭлектронныйДокумент",
		Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйДокументВходящийЭДО, ДокументСсылка.ЭлектронныйДокументИсходящийЭДО"));
	ВерсииДанныхДокументов.Колонки.Добавить("ВерсияДанных", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	Возврат ВерсииДанныхДокументов;
КонецФункции

// Параметры:
//  ВерсииДанныхДокументов - см. НовыеВерсииДанныхДокументов
Процедура ОчиститьИзмененныеВизуализацииДокументов(ВерсииДанныхДокументов) Экспорт
	
	Выборка = ВыборкаДокументовСИзмененнойВизуализацией(ВерсииДанныхДокументов);
	
	Если Выборка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(Выборка.ЭлектронныйДокумент);
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ВерсииДанныхДокументов - см. НовыеВерсииДанныхДокументов
// 
// Возвращаемое значение:
//  - Неопределено
//  - ВыборкаИзРезультатаЗапроса:
//  * ЭлектронныйДокумент - ДокументСсылка.ЭлектронныйДокументВходящийЭДО,ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
Функция ВыборкаДокументовСИзмененнойВизуализацией(ВерсииДанныхДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииДанныхДокументов.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ВерсииДанныхДокументов.ВерсияДанных КАК ВерсияДанных
		|ПОМЕСТИТЬ ВерсииДанныхДокументов
		|ИЗ
		|	&ВерсииДанныхДокументов КАК ВерсииДанныхДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВерсииДанныхДокументов.ЭлектронныйДокумент
		|ИЗ
		|	ВерсииДанныхДокументов КАК ВерсииДанныхДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВизуализацииДокументовОблачногоЭДО КАК ВизуализацииДокументовОблачногоЭДО
		|		ПО ВерсииДанныхДокументов.ЭлектронныйДокумент = ВизуализацииДокументовОблачногоЭДО.ЭлектронныйДокумент
		|		И ВерсииДанныхДокументов.ВерсияДанных <> ВизуализацииДокументовОблачногоЭДО.ВерсияДанных";
	
	Запрос.УстановитьПараметр("ВерсииДанныхДокументов", ВерсииДанныхДокументов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выбрать();
	
КонецФункции

#КонецОбласти

#КонецЕсли