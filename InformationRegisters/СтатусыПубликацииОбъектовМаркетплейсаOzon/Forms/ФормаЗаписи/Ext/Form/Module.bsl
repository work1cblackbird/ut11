#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполнитьЗапись;

&НаКлиенте
Перем ВыполнитьПубликациюТовара;

&НаКлиенте
Перем УчетнаяЗаписьДеактивирована;

&НаКлиенте
Перем ЭтоЗакрытиеФормы;

&НаКлиенте
Перем ИдентификаторКатегорииМаркетплейса;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// Доступен только подбор товаров.
	НовыйПараметр = Новый ПараметрВыбора("Отбор.ТипНоменклатуры",
		Новый ФиксированныйМассив(ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОтборПоНоменклатуре()));
	НовыйМассив = Новый Массив;
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);

	Элементы.Номенклатура.ПараметрыВыбора = НовыеПараметры;

	Если Не Запись.ВидОбъектаМаркетплейса.Пустая()
		И Запись.ВидОбъектаМаркетплейса <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар") Тогда
		ТекстСообщения = НСтр("ru = 'Редактирование данного вида объекта маркетплейса необходимо выполнять из формы публикации карточки товара.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;

	Если Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		УстановитьЗаголовокФормы(ЭтотОбъект);
		
		Если Параметры.Свойство("УчетнаяЗаписьМаркетплейса") Тогда
			Параметры.Свойство("УчетнаяЗаписьМаркетплейса", Запись.УчетнаяЗаписьМаркетплейса);
			Параметры.Свойство("Номенклатура", Запись.Номенклатура);
			Параметры.Свойство("Характеристика", Запись.Характеристика);
			Параметры.Свойство("Упаковка", Запись.Упаковка);
		КонецЕсли;

		Если Запись.УчетнаяЗаписьМаркетплейса.Пустая() Тогда
			Запись.УчетнаяЗаписьМаркетплейса =
				Справочники.УчетныеЗаписиМаркетплейсов.ОсновнаяУчетнаяЗапись(Перечисления.ВидыМаркетплейсов.МаркетплейсOzon);
		КонецЕсли;

		Если Запись.УчетнаяЗаписьМаркетплейса.Пустая() Тогда
			Элементы.УчетнаяЗаписьМаркетплейса.ТолькоПросмотр = Ложь;
		КонецЕсли;

		Запись.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Товар");
		
		ОписаниеДанныхТовара = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьОписаниеНовогоТовараМаркетплейса();

		Элементы.СтраницаОписаниеОшибки.Видимость = Ложь;
	Иначе
		ПометкаУдаленияУчетнойЗаписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.УчетнаяЗаписьМаркетплейса, "ПометкаУдаления");

		Если ПометкаУдаленияУчетнойЗаписи = Истина Тогда
			УстановитьДоступностьРедактированияКарточки(ЭтотОбъект);
		КонецЕсли;

		ИдентификаторТовараДляГиперссылки = ?(ПустаяСтрока(Запись.ИдентификаторFBOSKU), Запись.ИдентификаторFBSSKU, Запись.ИдентификаторFBOSKU);
		Если Не ПустаяСтрока(ИдентификаторТовараДляГиперссылки) Тогда
			НавигационнаяСсылкаНаТовар = ИнтеграцияСМаркетплейсомOzonКлиентСервер.НавигационнаяСсылкаНаТовар(ИдентификаторТовараДляГиперссылки);
		КонецЕсли;
	КонецЕсли;
	
	ВариантОтображенияАтрибутов = "Основные";
	ОбновленияДанныхРазрешено = ИнтеграцияСМаркетплейсомOzonВызовСервера.ОбновленияДанныхТорговойПлощадкиРазрешено(Запись.УчетнаяЗаписьМаркетплейса);
	
	НеИспользуютсяХарактеристикиНоменклатуры = Не ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	Если НеИспользуютсяХарактеристикиНоменклатуры Тогда
		ХарактеристикаПредставление = Запись.Характеристика;
		Элементы.Характеристика.Видимость = Ложь;
		Элементы.ХарактеристикаПредставление.Видимость = ЗначениеЗаполнено(Запись.Характеристика);
	КонецЕсли;

	НеИспользуютсяУпаковкиНоменклатуры = Не ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	Если НеИспользуютсяУпаковкиНоменклатуры Тогда
		ДополнениеПодсказкиУпаковки = " " + НСтр("ru = '(Использование упаковок отключено)'");
		Элементы.Упаковка.Подсказка = Элементы.Упаковка.Подсказка + ДополнениеПодсказкиУпаковки;
		Элементы.Упаковка.Видимость = ЗначениеЗаполнено(Запись.Упаковка);
		Элементы.Упаковка.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьХарактеристикиУпаковки();

	Элементы.СтраницаДанныеТовара.Видимость = Истина;
	Элементы.СтраницаРедактированияАтрибутовТовара.Видимость = Ложь;

	УстановитьУсловноеОформление();
	
	ИзменитьВидимостьЭлементовОбъединенияВОднуКарточку();

	Шаблон = НСтр("ru = 'Описание товара из реквизита ""%1"" выбранной номенклатуры'");
	ПредставлениеРеквизитаОписания = Метаданные.Справочники.Номенклатура.Реквизиты.Описание.Представление();
	Элементы.ОписаниеОбъектаМаркетплейса.Подсказка =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ПредставлениеРеквизитаОписания);

	ОбновитьПараметрыСпискаИзображений();
	ОбновитьПараметрыСпискаСертификатов();

	МассивКолонок = Новый Массив;
	ТаблицаЗначенийРеквизитовФормы = РеквизитФормыВЗначение("ТаблицаЗначенийРеквизитов");
	Для Каждого Колонка Из ТаблицаЗначенийРеквизитовФормы.Колонки Цикл
		МассивКолонок.Добавить(Колонка.Имя);
	КонецЦикла;
	КолонкиТаблицыЗначенийРеквизитов = СтрСоединить(МассивКолонок, ",");

	Элементы.ПерейтиКСсылкеНаТовар.Доступность = Не ПустаяСтрока(НавигационнаяСсылкаНаТовар);

	СвойстваСпискаТоваров = СертификатыТовара.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	СвойстваСпискаТоваров.Вставить("НедействительныеСтатусыРосаккредитации", НоменклатураКлиентСерверЛокализация.НедействительныеСтатусыРосаккредитации());

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УчетнаяЗаписьДеактивирована = Ложь;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ПриОткрытии";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

	Если Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Товар находится в архиве. Редактирование карточки товара недоступно. Возврат товара из архива выполняется в личном кабинете торговой площадки.'"));
		УстановитьДоступностьРедактированияКарточки(ЭтотОбъект);
	КонецЕсли;

	УстановитьДоступностьЭлементовДляСтатуса();

	ПроверитьНаличиеИзмененийЗначенийРеквизитов1С();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)

	ЭтоЗакрытиеФормы = Истина;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Не Запись.Номенклатура.Пустая() И Запись.Характеристика.Пустая()
		И ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры")
		И Справочники.Номенклатура.ХарактеристикиИспользуются(Запись.Номенклатура) Тогда
		ПредставлениеПоля = Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.Измерения.Характеристика.Представление();
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не заполнено поле ""%1"".'"),
				ПредставлениеПоля);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Запись.Характеристика",, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ОбновитьТаблицуСертификатов = Ложь;
	
	Если ИмяСобытия = "УчетнаяЗаписьДеактивирована" Тогда
		Если Параметр = Запись.УчетнаяЗаписьМаркетплейса Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Учетная запись маркетплейса удалена. Редактирование карточки товара недоступно.'"));

			УстановитьДоступностьРедактированияКарточки(ЭтотОбъект);
			УстановитьДоступностьЭлементовДляСтатуса();
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "Запись_УчетныеЗаписиМаркетплейсов" Тогда
		Если Параметр = Запись.УчетнаяЗаписьМаркетплейса Тогда
			ОбновленияДанныхРазрешено = ИнтеграцияСМаркетплейсомOzonВызовСервера.ОбновленияДанныхТорговойПлощадкиРазрешено(Запись.УчетнаяЗаписьМаркетплейса);
			УстановитьДоступностьЭлементовДляСтатуса();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" Тогда
		Элементы.ТаблицаИзображений.Обновить();
		ТаблицаИзображенийПриАктивизацииСтроки(Элементы.ТаблицаИзображений);
		
		ОбновитьТаблицуСертификатов = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_СертификатНоменклатуры" Или ИмяСобытия = "Запись_СертификатНоменклатурыOzon" Тогда
		ОбновитьТаблицуСертификатов = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_Номенклатура" Тогда
		Элементы.ТаблицаИзображений.Обновить();
		ТаблицаИзображенийПриАктивизацииСтроки(Элементы.ТаблицаИзображений);
		
		ОбновитьТаблицуСертификатов = Истина;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" И Источник = "ИспользоватьСертификатыНоменклатуры" Тогда
		ОбновитьПараметрыСпискаСертификатов();
		ОбновитьТаблицуСертификатов = Истина;
		
	КонецЕсли;
	
	Если ОбновитьТаблицуСертификатов И Элементы.СтраницаСертификаты.Видимость Тогда
		Элементы.ТаблицаСертификатов.Обновить();
		ТаблицаСертификатовПриАктивизацииСтроки(Элементы.ТаблицаСертификатов);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)

	ОчиститьСообщения();

	ПроверитьНаличиеИзмененийЗначенийРеквизитов1С();

	Если ВыполнитьЗапись <> Истина Тогда
		РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара();
		Если РезультатПроверки.Свойство("ПрерватьЗапись") И РезультатПроверки.ПрерватьЗапись Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Элементы.СтраницаОписаниеОшибки.Видимость = Не ПустаяСтрока(Запись.ОписаниеОшибки);

		Если РезультатПроверки.ЕстьКритичныеОшибки Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки;

			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветПриПроверкеЗаполненияАтрибутов", ЭтотОбъект, ПараметрыЗаписи);
			ТекстВопроса = НСтр("ru = 'Обнаружены ошибки заполнения атрибутов товара. Продолжить запись?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
		Иначе
			Если ИзменитьСтатусПубликации Тогда
				Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
			КонецЕсли;

			ВыполнитьЗапись = ЭтоЗакрытиеФормы;
		КонецЕсли;
	Иначе
		ВыполнитьЗапись = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = Новый Структура;
	КлючЗаписи.Вставить("УчетнаяЗаписьМаркетплейса", ТекущийОбъект.УчетнаяЗаписьМаркетплейса);
	КлючЗаписи.Вставить("ВидОбъектаМаркетплейса",    ТекущийОбъект.ВидОбъектаМаркетплейса);
	КлючЗаписи.Вставить("Номенклатура",              ТекущийОбъект.Номенклатура);
	КлючЗаписи.Вставить("Характеристика",            ТекущийОбъект.Характеристика);
	КлючЗаписи.Вставить("Упаковка",                  ТекущийОбъект.Упаковка);
	КлючЗаписи.Вставить("ОбъектПубликации",          ТекущийОбъект.ОбъектПубликации);
	
	Если ЗаписьСуществует(КлючЗаписи) 
			И (Не ТекущийОбъект.Выбран() 
				Или ТекущийОбъект.УчетнаяЗаписьМаркетплейса <> Запись.ИсходныйКлючЗаписи.УчетнаяЗаписьМаркетплейса
				Или ТекущийОбъект.ВидОбъектаМаркетплейса <> Запись.ИсходныйКлючЗаписи.ВидОбъектаМаркетплейса
				Или ТекущийОбъект.Номенклатура <> Запись.ИсходныйКлючЗаписи.Номенклатура
				Или ТекущийОбъект.Характеристика <> Запись.ИсходныйКлючЗаписи.Характеристика
				Или ТекущийОбъект.Упаковка <> Запись.ИсходныйКлючЗаписи.Упаковка
				Или ТекущийОбъект.ОбъектПубликации <> Запись.ИсходныйКлючЗаписи.ОбъектПубликации) Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запись текущей карточки товара невозможна. Уже существует аналогичный товар для учетной записи ""%1"".'"),
			ТекущийОбъект.УчетнаяЗаписьМаркетплейса);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);

		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ДанныеОбъекта = Новый ХранилищеЗначения(ТаблицаЗначенийРеквизитов.Выгрузить());

	Если Не Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		ИсходныйКлючЗаписи = ИнтеграцияСМаркетплейсомOzonСервер.ИсходныйКлючЗаписиПоМенеджеруЗаписи(Запись.ИсходныйКлючЗаписи,
				Метаданные.РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon);
		ПараметрыЗаписи.Вставить("ИсходныйКлючЗаписи", ИсходныйКлючЗаписи);
	КонецЕсли;

	Если (Запись.ИсходныйКлючЗаписи.Пустой() Или ИзмененыПараметрыТовара)
		И Не ПустаяСтрока(ОбъектыПубликацииАдресХранилища) Тогда
		ПараметрыЗаписи.Вставить("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища);

		ДанныеЗаписи = Новый Структура;
		ДанныеЗаписи.Вставить("УчетнаяЗаписьМаркетплейса");
		ДанныеЗаписи.Вставить("Номенклатура");
		ДанныеЗаписи.Вставить("Характеристика");
		ДанныеЗаписи.Вставить("Упаковка");
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаписи, ТекущийОбъект);
		ПараметрыЗаписи.Вставить("ДанныеЗаписи", ДанныеЗаписи);
	КонецЕсли;

	Если ТекущийОбъект.Выбран() Тогда
		ТекущийОбъект.ДатаОбновления = ТекущаяДатаСеанса();
	Иначе
		ТекущийОбъект.ДатаСоздания = ТекущаяДатаСеанса();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Оповестить("Запись_СтатусыПубликацииОбъектовМаркетплейсаOzon", ПараметрыЗаписи, Запись);
	УстановитьЗаголовокФормы(ЭтотОбъект);

	ИзменитьСтатусПубликации = Ложь;
	ИзмененыПараметрыТовара = Ложь;

	ПослеЗаписиНаСервереСлужебная(ПараметрыЗаписи);

	Если ВыполнитьПубликациюТовара = Истина Тогда
		ВыполнитьПубликациюТовара();
	КонецЕсли;

	УстановитьДоступностьЭлементовДляСтатуса();

	ОбновитьПараметрыСпискаИзображений();
	ОбновитьПараметрыСпискаСертификатов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьМаркетплейсаПриИзменении(Элемент)
	
	ОбновленияДанныхРазрешено = ИнтеграцияСМаркетплейсомOzonВызовСервера.ОбновленияДанныхТорговойПлощадкиРазрешено(Запись.УчетнаяЗаписьМаркетплейса);
	
	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "УчетнаяЗаписьПриИзменении";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Элементы.СтраницаДанныеТовара.Видимость;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	ИзменитьСтатусПубликации = Истина;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "НоменклатураПриИзменении";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Элементы.СтраницаДанныеТовара.Видимость;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)

	ИзменитьСтатусПубликации = Истина;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ХарактеристикаПриИзменении";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Элементы.СтраницаДанныеТовара.Видимость;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)

	ИзменитьСтатусПубликации = Истина;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "УпаковкаПриИзменении";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПолучитьОписаниеТовара = Элементы.СтраницаДанныеТовара.Видимость;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеТовараМаркетплейсаПриИзменении(Элемент)

	ИзменитьСтатусПубликации = Истина;

	Запись.ПредставлениеОбъектаМаркетплейса = Запись.НаименованиеОбъектаМаркетплейса;

КонецПроцедуры

&НаКлиенте
Процедура ОбъединяетсяПриИзменении(Элемент)

	ИзменитьСтатусПубликации = Истина;

	ШаблонЗаголовка = НСтр("ru = 'Объединяется с другими товарами %1'");
	Элементы.Объединяется.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
			?(Запись.ОбъединяетсяВОднуКарточку, НСтр("ru = 'по значению объединения:'"), ""));

	ИзменитьВидимостьЭлементовОбъединенияВОднуКарточку();

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОбъединенияПриИзменении(Элемент)

	ИзменитьСтатусПубликации = Истина;

	ОбъединятьТоварыВОднуКарточкуСвойства.ИзменилсяРеквизит1С = Ложь;

	Элементы.ДекорацияИзменилсяРеквизит1С.Видимость = ОбъединятьТоварыВОднуКарточкуСвойства.ИзменилсяРеквизит1С;
	Элементы.ДекорацияИзменилсяРеквизит1С.Подсказка = "";
	Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для реквизита 1С <%1> установлено значение <%2>'"),
			ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С,
			ОбъединятьТоварыВОднуКарточкуСвойства.ЗначениеРеквизита1С);
	Элементы.ЗначениеОбъединения.Подсказка = Подсказка;

	ИзменитьЗначениеВТаблицеРеквизитов();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРеквизитов

&НаКлиенте
Процедура ДеревоРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоРеквизитовЗначениеАтрибутаМаркетплейса"
			Или Поле.Имя = "ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса" Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		// Тип товара
		ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
		
		Если ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТипТовара Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		Поле.ОграничениеТипа      = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ОписаниеТипа(ТекущиеДанные.ТипЗначенияАтрибута1С, ТекущиеДанные.ТипЗначенияАтрибута);
		Поле.РедактированиеТекста = Не ТекущиеДанные.ДоступенВыборЗначенияИзСписка;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		ПутьКРеквизиту1С = НСтр("ru = 'Путь к реквизиту 1С не установлен.'");
		ТекущееОписаниеАтрибутаДереваРеквизитов = НСтр("ru = 'Назначение атрибута не задано.'");
		
	Иначе
		Если ПустаяСтрока(ТекущиеДанные.ПредставлениеРеквизита1С) Тогда
			ПутьКРеквизиту1С = НСтр("ru = 'Путь к реквизиту 1С не установлен.'");
		Иначе
			Шаблон = НСтр("ru = 'Путь к реквизиту 1С: %1.'");
			ПутьКРеквизиту1С = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущиеДанные.ПредставлениеРеквизита1С);
			
			Если ТекущиеДанные.ИзменилсяРеквизит1С Тогда
				Шаблон = НСтр("ru = 'Для реквизита 1С изменено значение <%1> на новое значение <%2>.'");
				ИнформацияПоНовомуЗначению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
						ТекущиеДанные.КэшЗначениеРеквизита1С,
						ТекущиеДанные.ЗначениеРеквизита1С);
				ПутьКРеквизиту1С = ИнформацияПоНовомуЗначению + Символы.ПС + ПутьКРеквизиту1С;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ТекущиеДанные.ОписаниеНазначенияАтрибута) Тогда
			ШаблонОписания = НСтр("ru = 'Назначение атрибута: %1'");

			ТекущееОписаниеАтрибутаДереваРеквизитов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОписания, 
					ТекущиеДанные.ОписаниеНазначенияАтрибута);
		Иначе
			ТекущееОписаниеАтрибутаДереваРеквизитов = НСтр("ru = 'Назначение атрибута не задано.'");
		КонецЕсли;
		
		ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
		ИдентификаторАтрибута_ТНВЭД     = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТНВЭД"];
		
		// Тип товара
		Если ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТипТовара Тогда
			ТекущееОписаниеАтрибутаДереваРеквизитов = "<html><body><span style='color:grey'>"
				+ НСтр("ru='Тип товара определяется автоматически согласно выбранной категории торговой площадки.'")
				+ "</span></body></html>";
			Возврат;
		
		// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
		ИначеЕсли ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТНВЭД Тогда
			ТекущееОписаниеАтрибутаДереваРеквизитов = ?(ЗначениеЗаполнено(ТекущиеДанные.ОписаниеНазначенияАтрибута), СокрЛП(ТекущееОписаниеАтрибутаДереваРеквизитов) + " ", "")
				+ НСтр("ru='Обязателен для заполнения, если товар является маркируемым. Включение учета маркировки выполняется в разделе ""Настройка интеграции с ИС МП"". При этом у вида номенклатуры необходимо заполнить настройки для типа номенклатуры. В остальных случаях необходимость заполнения ТН ВЭД продавец отслеживает самостоятельно.
						   |<a href=""https://seller-edu.ozon.ru/work-with-goods/trebovaniya-k-kartochkam-tovarov/product-information/tn-ved"" target=""_blank"">Подробнее о кодах ТН ВЭД ЕАЭС</a>'");
		КонецЕсли;
	КонецЕсли;
	
	ТекущееОписаниеАтрибутаДереваРеквизитов = "<html><body><span style='color:grey'>"
		+ СтрЗаменить(ПутьКРеквизиту1С, Символы.ПС, "<BR/>")
		+ "<BR/>"
		+ ТекущееОписаниеАтрибутаДереваРеквизитов
		+ "</span></body></html>";

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		// Тип товара
		ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
		
		Если ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТипТовара Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипЗначенияАтрибута1С = "Строка" И Не ТекущиеДанные.ТипЗначенияАтрибута = "multiline" Тогда
		ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = СтрЗаменить(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса, Символы.ПС, " ");
	КонецЕсли;

	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем = Истина;
	ТекущиеДанные.ИзменилсяРеквизит1С = Ложь;

	ТекущиеДанные.ЗначениеАтрибутаЗаполнено = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
			Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
			И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);

	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ДоступенВыборЗначенияИзСписка Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВыбораЗначенияАтрибута(Элементы.ДеревоРеквизитов.ТекущаяСтрока);
	
	ИначеЕсли ТекущиеДанные.ТипЗначенияАтрибута1С = "Строка" Тогда
		Многострочность = (ТекущиеДанные.ТипЗначенияАтрибута = "multiline");
		Подсказка = ТекущиеДанные.НаименованиеАтрибутаМаркетплейса;
		Оповещение = Новый ОписаниеОповещения("ЗначениеАтрибутаМаркетплейсаНачалоВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводСтроки(Оповещение, ТекущиеДанные.ЗначениеАтрибутаМаркетплейса, Подсказка,, Многострочность);

		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Модифицированность   = Истина;
	
	Если ТекущиеДанные.ДоступенВыборЗначенияИзСписка Тогда
		ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
		ТекущиеДанные.ЗначениеАтрибутаМаркетплейса              = "";
		ТекущиеДанные.ЗначенияАтрибутаМаркетплейса              = Новый СписокЗначений;
	Иначе
		ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = Неопределено;
	КонецЕсли;
	
	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем = Ложь;
	ТекущиеДанные.ИзменилсяРеквизит1С                 = Ложь;
	ТекущиеДанные.ЗначениеАтрибутаЗаполнено           = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
															Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут                   = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
															И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	
	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаБулевоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = ТекущиеДанные.ЗначениеАтрибутаМаркетплейсаБулево;
	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем = Истина;
	ТекущиеДанные.ИзменилсяРеквизит1С = Ложь;

	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначенияАтрибутаМаркетплейсаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораЗначенияАтрибута(Элементы.ДеревоРеквизитов.ТекущаяСтрока, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовЗначенияАтрибутаМаркетплейсаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Модифицированность   = Истина;
	
	ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
	ТекущиеДанные.ЗначениеАтрибутаМаркетплейса              = "";
	ТекущиеДанные.ЗначенияАтрибутаМаркетплейса              = Новый СписокЗначений;
	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем       = Ложь;
	ТекущиеДанные.ИзменилсяРеквизит1С                       = Ложь;
	ТекущиеДанные.ЗначениеАтрибутаЗаполнено                 = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
																Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут                         = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
																И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	
	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейсаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуВыбораЗначенияАтрибута(Элементы.ДеревоРеквизитов.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейсаОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Модифицированность   = Истина;
	
	ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
	ТекущиеДанные.ЗначениеАтрибутаМаркетплейса              = "";
	ТекущиеДанные.ЗначенияАтрибутаМаркетплейса              = Новый СписокЗначений;
	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем       = Ложь;
	ТекущиеДанные.ИзменилсяРеквизит1С                       = Ложь;
	ТекущиеДанные.ЗначениеАтрибутаЗаполнено                 = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
																Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут                         = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
																И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	
	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоАтрибутов

&НаКлиенте
Процедура ДеревоАтрибутовПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = НСтр("ru = 'Назначение атрибута не задано.'");
	Иначе
		Если ЗначениеЗаполнено(ТекущиеДанные.ОписаниеНазначенияАтрибута) Тогда
			ШаблонОписания = НСтр("ru = 'Назначение атрибута: %1'");

			ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОписания,
					ТекущиеДанные.ОписаниеНазначенияАтрибута);
		Иначе
			ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = 
					НСтр("ru = 'Назначение атрибута не задано.'");
		КонецЕсли;
		
		ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
		ИдентификаторАтрибута_ТНВЭД     = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТНВЭД"];
		
		// Тип товара
		Если ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТипТовара Тогда
			ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = НСтр("ru='Тип товара определяется автоматически согласно выбранной категории торговой площадки.'");
		
		// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
		ИначеЕсли ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТНВЭД Тогда
			ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = ?(ЗначениеЗаполнено(ТекущиеДанные.ОписаниеНазначенияАтрибута), СокрЛП(ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов) + " ", "")
				+ " " + НСтр("ru='Обязателен для заполнения, если товар является маркируемым. Включение учета маркировки выполняется в разделе ""Настройка интеграции с ИС МП"". При этом у вида номенклатуры необходимо заполнить настройки для типа номенклатуры. В остальных случаях необходимость заполнения ТН ВЭД продавец отслеживает самостоятельно.
								 |<a href=""https://seller-edu.ozon.ru/work-with-goods/trebovaniya-k-kartochkam-tovarov/product-information/tn-ved"" target=""_blank"">Подробнее о кодах ТН ВЭД ЕАЭС</a>'");
		КонецЕсли;
	КонецЕсли; 
	
	ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов = "<html><body><span style='color:grey'>" 
		+ ТекущееОписаниеНазначенияАтрибутаДереваАтрибутов 
		+ "</span></body></html>";

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаИзображений

&НаКлиенте
Процедура ТаблицаИзображенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ФормаЗаблокирована Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИзображенийПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ТаблицаИзображений.ТекущиеДанные;

	Элементы.ТаблицаИзображенийПросмотрИзображения.Доступность = ТекущиеДанные <> Неопределено
			И Не ФормаЗаблокирована;

	Элементы.ТаблицаИзображенийОтправитьИзображенияНаOzon.Доступность = ТекущиеДанные <> Неопределено
			И Не ФормаЗаблокирована   
			И ОбновленияДанныхРазрешено
			И ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации")
			И ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ПустаяСсылка");

	Элементы.ТаблицаИзображенийРедактироватьСписокИзображений.Доступность = ЗначениеЗаполнено(Запись.Номенклатура)
			И Не ФормаЗаблокирована;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ИзображениеПомеченоНаУдаление Тогда
		ПодсказкаПоИзображениям = НСтр("ru = 'Изображение не используется, т.к. помечено на удаление.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
		И Не ТекущиеДанные.ПубликуетсяВСервисах Тогда
		ПодсказкаПоИзображениям = НСтр("ru = 'Изображение не используется по причине снятия признака ""Публикуется в сервисах"".'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется") Тогда
		ПодсказкаПоИзображениям = НСтр("ru = 'Изображение не используется, т.к. не входит в 30 публикуемых изображений.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации")
		И Не ПустаяСтрока(ТекущиеДанные.ОписаниеОшибки) Тогда
		ПодсказкаПоИзображениям = НСтр("ru = 'Требуется исправление ошибок.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации") Тогда
		ПодсказкаПоИзображениям = НСтр("ru = 'Изображение подготовлено к публикации.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НаМодерации") Тогда
		ПодсказкаПоИзображениям = НСтр("ru = 'Изображение ожидает модерации.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен") Тогда
		ПодсказкаПоИзображениям = НСтр("ru = 'Изображение загружено.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ЗагруженСОшибками") Тогда
		ПодсказкаПоИзображениям = НСтр("ru = 'Изображение загружено с ошибками, см. описание ошибки.'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСертификатов

&НаКлиенте
Процедура ТаблицаСертификатовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ФормаЗаблокирована Тогда
		Возврат;
	КонецЕсли;

	ИзменитьСертификат(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ТаблицаСертификатов.ТекущиеДанные;

	Элементы.ТаблицаСертификатовПросмотрСертификата.Доступность = ТекущиеДанные <> Неопределено
			И Не Запись.ИсходныйКлючЗаписи.Пустой()
			И Не ФормаЗаблокирована
			И ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ПустаяСсылка");

	Элементы.ТаблицаСертификатовОтправитьСертификатыНаOzon.Доступность = ТекущиеДанные <> Неопределено
			И Не ФормаЗаблокирована 
			И ОбновленияДанныхРазрешено
			И ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации")
			И ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ПустаяСсылка");

	Элементы.ТаблицаСертификатовРедактироватьСписокСертификатов.Доступность = ЗначениеЗаполнено(Запись.Номенклатура)
			И Не ФормаЗаблокирована;

	Элементы.ТаблицаСертификатовДанныеНаOzonИзменены.Доступность = ТекущиеДанные <> Неопределено
			И Не ПустаяСтрока(ТекущиеДанные.ИдентификаторОбъектаМаркетплейса)
			И (ТекущиеДанные.ИзмененыРеквизиты
			Или ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется"));

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Не ТекущиеДанные.ВедетсяУчетСертификатовНоменклатуры И Не ПустаяСтрока(ТекущиеДанные.ИдентификаторОбъектаМаркетплейса) Тогда
		ПодсказкаПоСертификатам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сертификат не используется, т.к. снят признак ""Учет сертификатов номенклатуры"" у номенклатуры <%1>. Следует удалить его на площадке маркетплейса и подтвердить изменения данных в 1С.'"),
				Запись.Номенклатура);
	ИначеЕсли Не ТекущиеДанные.ВедетсяУчетСертификатовНоменклатуры Тогда
		ПодсказкаПоСертификатам = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сертификат не используется, т.к. снят признак ""Учет сертификатов номенклатуры"" у номенклатурыу номенклатуры <%1>.'"),
				Запись.Номенклатура);
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
		И Не ТекущиеДанные.ПубликуетсяВСервисах И Не ПустаяСтрока(ТекущиеДанные.ИдентификаторОбъектаМаркетплейса) Тогда
		ПодсказкаПоСертификатам = НСтр("ru = 'Сертификат не используется по причине снятия признака ""Публикуется в сервисах"". Следует удалить его на площадке маркетплейса и подтвердить изменения данных в 1С.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется")
		И Не ТекущиеДанные.Недействующий И Не ПустаяСтрока(ТекущиеДанные.ИдентификаторОбъектаМаркетплейса) Тогда
		ПодсказкаПоСертификатам = НСтр("ru = 'Сертификат не используется, т.к. помечен на удаление или изменена область действия сертификата. Следует удалить его на площадке маркетплейса и подтвердить изменения данных в 1С.'");
	ИначеЕсли ТекущиеДанные.Недействующий Тогда
		ПодсказкаПоСертификатам = НСтр("ru = 'Сертификат не действующий.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется") Тогда
		ПодсказкаПоСертификатам = НСтр("ru = 'Сертификат не используется, т.к. или снят признак ""Публикуется в сервисах"", или помечен на удаление, или изменена область действия сертификата.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен")
		И ТекущиеДанные.ИзмененыРеквизиты Тогда
		ПодсказкаПоСертификатам = НСтр("ru = 'Сертификат загружен, но у него изменились данные. Следует внести для него изменения на площадке маркетплейса и подтвердить изменения данных в 1С.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.Загружен") Тогда
		ПодсказкаПоСертификатам = НСтр("ru = 'Сертификат загружен. Следует проверять его актуальность на площадке маркетплейса, т.к. автоматически не отслеживается его состояние после прохождения модерации.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации")
		И Не ПустаяСтрока(ТекущиеДанные.ОписаниеОшибки) Тогда
		ПодсказкаПоСертификатам = НСтр("ru = 'Требуется исправление ошибок.'");
	ИначеЕсли ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации") Тогда
		ПодсказкаПоСертификатам = НСтр("ru = 'Сертификат подготовлен к публикации.'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ИзменитьСертификат(Неопределено); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ТаблицаСертификатовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	НедействительныеСтатусыРосаккредитации = Настройки.ДополнительныеСвойства.НедействительныеСтатусыРосаккредитации;

	Для Каждого СтрокаТаблицы Из Строки Цикл
		ДанныеСтроки = СтрокаТаблицы.Значение.Данные;
		Если Не ДанныеСтроки.Записан И НедействительныеСтатусыРосаккредитации.Найти(ДанныеСтроки.СтатусРосаккредитации) <> Неопределено Тогда
			ДанныеСтроки.ОписаниеОшибки = ИнтеграцияСМаркетплейсомOzonСервер.ТекстОшибкиПроверкиСертификатаВРосаккредитации(ДанныеСтроки.СтатусРосаккредитации,
					ДанныеСтроки.ДатаОбновленияСтатусаРосаккредитации);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрытьФорму(Команда)

	ЭтоЗакрытиеФормы = Истина;
	Записать();

	Если ВыполнитьЗапись = Истина Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьАтрибуты(Команда)

	АктивацияСтраницыРеквизитыТовара = Не Элементы.СтраницаРедактированияАтрибутовТовара.Видимость;
	
	Элементы.СтраницаДанныеТовара.Видимость = Ложь;
	Элементы.СтраницаРедактированияАтрибутовТовара.Видимость = Истина;

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРедактированияАтрибутовТовара;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "РедактироватьАтрибуты";

	Если АктивацияСтраницыРеквизитыТовара Тогда
		ВариантОтображенияАтрибутов = "Все";
		ИзменитьВариантОтображенияАтрибутов();
		
		ПараметрыДействий.ЗаполнитьДеревоАтрибутов = Истина;
	КонецЕсли;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКОписаниюТовара(Команда)

	Элементы.СтраницаДанныеТовара.Видимость = Истина;
	Элементы.СтраницаРедактированияАтрибутовТовара.Видимость = Ложь;

	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДанныеТовара;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ПерейтиКОписаниюТовара";
	ПараметрыДействий.ПолучитьОписаниеТовара = Истина;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗначение(Команда)

	ТекущиеДанные = Элементы.ДеревоАтрибутов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();

	Если ТекущиеДанные.Уровень = 0 Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторРодителяАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
		СтрокиПоиска = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

		Если СтрокиПоиска.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Добавляемая группа атрибутов уже присутствует списке реквизитов товара.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Для Каждого СтрокаАтрибута Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись, "Номенклатура, Характеристика, Упаковка, ИсточникКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса");
			НоваяСтрока.Категория1С = Запись.Категория;
			НоваяСтрока.ИдентификаторИсточникаКатегорииМаркетплейса = 
					СтрЗаменить(НоваяСтрока.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАтрибута);
		КонецЦикла;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
		СтрокиПоиска = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

		Если СтрокиПоиска.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Добавляемый атрибут уже присутствует списке реквизитов товара.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись, "Номенклатура, Характеристика, Упаковка, ИсточникКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса");
		НоваяСтрока.Категория1С = Запись.Категория;
		НоваяСтрока.ИдентификаторИсточникаКатегорииМаркетплейса = 
				СтрЗаменить(НоваяСтрока.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_");
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	КонецЕсли;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.Событие = "АктивизироватьСтрокуДереваРеквизитовПриДобавленииНового";
	ПараметрыДействий.Вставить("ИдентификаторАтрибутаМаркетплейсаДляДереваРеквизитов", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);

	ЗаполнитьДанныеТовара(ПараметрыДействий);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УбратьЗначение(Команда)

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();

	Если ТекущиеДанные.ОбязательныйАтрибут Тогда
		ТекстСообщения = НСтр("ru = 'Обязательный атрибут невозможно удалить.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Уровень = 0 Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторРодителяАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
		Отбор.Вставить("ОбязательныйАтрибут", Истина);
		ОбязательныеАтрибуты = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
		Если ОбязательныеАтрибуты.Количество() > 0 Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно удалить группу с обязательными атрибутами.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		// Удаление атрибутов группы.
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторРодителяАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
	Иначе
		// Удаление атрибутов.
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
		Отбор.Вставить("ИдентификаторАтрибутаМаркетплейса", ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
	КонецЕсли;

	УдаляемыеСтрокиАтрибута = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиАтрибута Цикл
		ТаблицаЗначенийРеквизитов.Удалить(УдаляемаяСтрока);
	КонецЦикла;

	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		СтрокиРодителя = ДеревоРеквизитов.ПолучитьЭлементы();
	Иначе
		СтрокиРодителя = ТекущийРодитель.ПолучитьЭлементы();
	КонецЕсли;

	СтрокиРодителя.Удалить(ТекущиеДанные);

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Все";
	ИзменитьВариантОтображенияАтрибутов(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОсновныеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Основные";
	ИзменитьВариантОтображенияАтрибутов(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДополнительныеАтрибуты(Команда)

	ВариантОтображенияАтрибутов = "Дополнительные";
	ИзменитьВариантОтображенияАтрибутов(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиСопоставленияАтрибутов(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса", Запись.УчетнаяЗаписьМаркетплейса);
	ПараметрыФормы.Вставить("ТекущаяКатегория1С",        ?(ЗначениеЗаполнено(ИсточникКатегорииМаркетплейса), ИсточникКатегорииМаркетплейса, Запись.Категория));

	ДанныеТекущейКатегорииМаркетплейса = Новый Структура;
	ДанныеТекущейКатегорииМаркетплейса.Вставить("ВладелецКатегорииМаркетплейса",      ИсточникКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("ИдентификаторКатегорииМаркетплейса", Запись.ИдентификаторКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("НаименованиеКатегорииМаркетплейса",  НаименованиеКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("ПредставлениеКатегорииМаркетплейса", НаименованиеКатегорииМаркетплейса);
	ДанныеТекущейКатегорииМаркетплейса.Вставить("Категория1С",                        ПараметрыФормы.ТекущаяКатегория1С);

	ПараметрыФормы.Вставить("ДанныеТекущейКатегорииМаркетплейса", ДанныеТекущейКатегорииМаркетплейса);

	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.СопоставлениеКатегорий", ПараметрыФормы);
	Оповестить("ОткрытиеФормыСопоставленияКатегорий", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьЗначенияАтрибутовТовара(Команда)

	ИзменитьСтатусПубликации = Истина;

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ПерезаполнитьЗначенияАтрибутовТовара";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьДанныеТовара = Истина;
	ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;
	ПараметрыДействий.ПроверитьОшибки = Истина;

	ЗаполнитьДанныеТовара(ПараметрыДействий);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеОшибок(Команда)

	ОчиститьСообщения();

	ТекущееОписаниеОшибки = Запись.ОписаниеОшибки;

	РезультатПроверки = ПроверитьЗаполнениеКарточкиТовара();
	Если РезультатПроверки.Свойство("ПрерватьЗапись") И РезультатПроверки.ПрерватьЗапись Тогда
		Возврат;
	КонецЕсли;

	Элементы.СтраницаОписаниеОшибки.Видимость = Не ПустаяСтрока(Запись.ОписаниеОшибки);
	
	Если ТекущееОписаниеОшибки <> Запись.ОписаниеОшибки 
		И Не Модифицированность И Не Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		ВыполнитьЗапись = Истина;
		Записать();
	КонецЕсли;

	Если ПустаяСтрока(Запись.ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не обнаружено ошибок заполнения атрибутов товара.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСсылкеНаТовар(Команда)

	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаНаТовар);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСертификат(Команда)

	ТекущиеДанные = Элементы.ТаблицаСертификатов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗаписьМаркетплейса");
	ПараметрыФормы.Вставить("Номенклатура");
	ПараметрыФормы.Вставить("Характеристика");
	ПараметрыФормы.Вставить("Упаковка");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Запись);
	ПараметрыФормы.Вставить("ОбъектПубликации", ТекущиеДанные.Сертификат1С);
	ПараметрыФормы.Вставить("ВидОбъектаМаркетплейса", ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Сертификат"));

	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма.КарточкаСертификата",ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСертификатыНаOzon(Команда)

	ОчиститьСообщения();

	ТекущиеДанные = Элементы.ТаблицаСертификатов.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сертификат уже в статусе <К публикации>'"));
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Недействующий Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Сертификат не действующий. Установка статуса <К публикации> невозможна'"));
		Возврат;
	КонецЕсли;

	УстановитьСтатусКПубликации(ТекущиеДанные.Сертификат1С);

	Состояние(НСтр("ru = 'Статус сертификата'"),, НСтр("ru = 'Для сертификата установлен статус <К публикации>'"));

КонецПроцедуры

&НаКлиенте
Процедура ДанныеНаOzonИзменены(Команда)

	ПодтвердитьИзменениеДанных();

	Элементы.ТаблицаСертификатов.Обновить();
	ТаблицаСертификатовПриАктивизацииСтроки(Элементы.ТаблицаСертификатов);

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписокСертификатов(Команда)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Номенклатура", Запись.Номенклатура);
	ПараметрыФормы.Вставить("ВидНоменклатуры", ВидНоменклатуры);
	ОткрытьФорму("Справочник.СертификатыНоменклатуры.Форма.ФормаСпискаКонтекст", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИзображенияНаOzon(Команда)

	ОчиститьСообщения();

	ТекущиеДанные = Элементы.ТаблицаИзображений.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Изображение уже в статусе <К публикации>'"));
		Возврат;
	КонецЕсли;

	УстановитьСтатусКПубликации(ТекущиеДанные.Изображение);

	Состояние(НСтр("ru = 'Статус изображений'"),, НСтр("ru = 'Для всех изображений установлен статус <К публикации>'"));

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписокИзображений(Команда)

	ПараметрыФормы = Новый Структура("ВладелецФайла", Запись.Номенклатура);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьТовар(Команда)

	ОчиститьСообщения();

	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ОпубликоватьТоварЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Требуется сохранение измененных данных. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		ВыполнитьПубликациюТовара();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВАрхив(Команда)

	ОчиститьСообщения();

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПеренестиВАрхивЗавершение", ЭтотОбъект,);
	ПоказатьВопрос(ОповещениеОЗавершении, 
		НСтр("ru = 'После отправки товара в архив его возврат возможен только из личного кабинета. Продолжить?'"), 
		РежимДиалогаВопрос.ДаНет, 
		, 
		КодВозвратаДиалога.Нет, 
		НСтр("ru = 'Публикация товара'"), 
		КодВозвратаДиалога.Нет);

КонецПроцедуры
	
&НаКлиенте
Процедура ВернутьИзАрхива(Команда)

	ОчиститьСообщения();

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ДлительнаяОперация = ВернутьИзАрхиваНаСервере(Запись);

	ДополнительныеПараметры = ИнтеграцияСМаркетплейсомOzonКлиент.НовоеОписаниеПараметровДействия();
	ДополнительныеПараметры.Действие = "ТоварИзАрхива";
	ДополнительныеПараметры.ОписаниеДействия = НСтр("ru = 'Возврат из архива'");
	ДополнительныеПараметры.УспешныйРезультат = НСтр("ru = 'Товар возвращен из архива'");
	ДополнительныеПараметры.РезультатСОшибками = НСтр("ru = 'При возврате товара из архива возникли ошибки. Подробности см. в журнале регистрации'");

	Оповещение = Новый ОписаниеОповещения("ДействияСТоваромОповещение", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьТовар(Команда)

	ОчиститьСообщения();

	ТекстВопроса = НСтр("ru = 'Товар будет удален, а данная карточка товара будет закрыта. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("УдалитьТоварЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокФормы(Форма)

	Форма.Заголовок = НСтр("ru = 'Публикация товара на маркетплейсе Ozon'");
	
	Если Форма.Запись.ИсходныйКлючЗаписи.Пустой() Тогда
		Форма.Заголовок = Форма.Заголовок + " ("+ НСтр("ru = 'создание'") + ")";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАтрибутовНаименованиеАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоАтрибутов.ОбязательныйАтрибут");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЯвляетсяКоллекциейЗначений");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	
	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

		ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ТипЗначенияАтрибута1С");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = "Булево";

		ОтборГруппаИ = ОтборГруппа.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
		ОтборГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

			ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ДоступенВыборЗначенияИзСписка");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;

			ОтборЭлемента = ОтборГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЯвляетсяКоллекциейЗначений");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаБулево.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли; 

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ТипЗначенияАтрибута1С");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "Булево";

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовНаименованиеАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ОбязательныйАтрибут");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ИдентификаторЗначенияАтрибутаМаркетплейса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
			Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЗначениеАтрибутаМаркетплейса"));

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);

	ОтборГруппа = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ОбязательныйАтрибут");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЗначениеАтрибутаЗаполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовИдентификаторЗначенияАтрибутаМаркетплейса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоРеквизитовЗначенияАтрибутаМаркетплейса.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ЗначениеАтрибутаЗаполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", 
			Новый ПолеКомпоновкиДанных("ДеревоРеквизитов.ПредставлениеТипаСоответствияЗначений"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);

	//

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаСертификатов.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СертификатыТовара.Недействующий");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СерыйЦветТекста1);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРедактированияКарточки(Форма, Заблокировать = Истина)

	Форма.ФормаЗаблокирована = Заблокировать;

	Форма.ТолькоПросмотр = Заблокировать;

	Элементы = Форма.Элементы;

	МассивБлокируемыхЭлементов = Новый Массив;	// Массив Из ГруппаФормы, ТаблицаФормы, ПолеФормы, КнопкаФормы
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаЗаписатьИЗакрыть);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаЗаписать);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаОпубликоватьТовар);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаПеренестиВАрхив);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ФормаУдалитьТовар);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ДанныеТовараРедактироватьАтрибуты);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ОписаниеОшибкиРедактироватьАтрибуты);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ПроверитьНаличиеОшибок);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ТаблицаИзображенийОтправитьИзображенияНаOzon);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ТаблицаСертификатовПросмотрСертификата);
	МассивБлокируемыхЭлементов.Добавить(Элементы.ТаблицаСертификатовОтправитьСертификатыНаOzon);

	Для Каждого Элемент Из МассивБлокируемыхЭлементов Цикл
		Элемент.Доступность = Не Заблокировать;
	КонецЦикла;

	Элементы.СтраницаДанныеТовара.Видимость = Истина;
	Элементы.СтраницаРедактированияАтрибутовТовара.Видимость = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовДляСтатуса()

	СтатусВАрхиве = (Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.ВАрхиве"));
	ДоступноУдаление = СтатусВАрхиве И Запись.ИдентификаторFBOSKU = "" И Запись.ИдентификаторFBSSKU = ""
			Или (Не СтатусВАрхиве И Запись.ИдентификаторFBOSKU = "" И Запись.ИдентификаторFBSSKU = ""
				И Запись.ЗаданиеПубликации = "" И Не ЗначениеЗаполнено(Запись.ДатаСозданияНаМаркетплейсе));
				
	Элементы.ФормаОпубликоватьТовар.Доступность = Не СтатусВАрхиве И Не ФормаЗаблокирована И ОбновленияДанныхРазрешено;
	Элементы.ДеревоРеквизитовОбновитьЗначенияХарактеристикТовара.Доступность = Не СтатусВАрхиве;
	Элементы.ДеревоРеквизитов.ТолькоПросмотр = СтатусВАрхиве;
	Элементы.Объединяется.ТолькоПросмотр = СтатусВАрхиве;
	Элементы.ЗначениеОбъединения.ТолькоПросмотр = СтатусВАрхиве;
	Элементы.ВыбратьЗначение.Доступность = Не СтатусВАрхиве И Не ФормаЗаблокирована;
	Элементы.УдалитьЗначение.Доступность = Не СтатусВАрхиве И Не ФормаЗаблокирована;
	Элементы.ФормаПеренестиВАрхив.Доступность = Не СтатусВАрхиве И Не УчетнаяЗаписьДеактивирована И Не ПустаяСтрока(Запись.ИдентификаторОбъектаМаркетплейса) И ОбновленияДанныхРазрешено;
	Элементы.ФормаУдалитьТовар.Доступность = ДоступноУдаление И Не УчетнаяЗаписьДеактивирована И ОбновленияДанныхРазрешено;
	Элементы.ФормаРедактироватьАтрибуты.Доступность = Не СтатусВАрхиве И Не ФормаЗаблокирована;

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьЭлементовОбъединенияВОднуКарточку()

	ДоступноОбъединениеТоваровВОднуКарточку =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъединятьТоварыВОднуКарточкуСвойства, "ДоступноОбъединениеТоваровВОднуКарточку", Ложь);
	Элементы.ГруппаОбъединениеКарточек.Видимость = ДоступноОбъединениеТоваровВОднуКарточку;
	Элементы.ЗначениеОбъединения.Видимость = Запись.ОбъединяетсяВОднуКарточку;

	ОбязательныйАтрибутОбъединения =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъединятьТоварыВОднуКарточкуСвойства, "ОбязательныйАтрибут", Ложь);
	Элементы.Объединяется.Доступность = Не ОбязательныйАтрибутОбъединения;

	ИзменилсяРеквизит1С =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъединятьТоварыВОднуКарточкуСвойства, "ИзменилсяРеквизит1С", Ложь);
	Элементы.ДекорацияИзменилсяРеквизит1С.Видимость = ИзменилсяРеквизит1С;

	Если ИзменилсяРеквизит1С Тогда
		Шаблон = НСтр("ru = 'Для реквизита 1С <%1> изменено значение <%2> на новое значение <%3>'");
		Подсказка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон,
				ОбъединятьТоварыВОднуКарточкуСвойства.Реквизит1С,
				ОбъединятьТоварыВОднуКарточкуСвойства.КэшЗначениеРеквизита1С,
				ОбъединятьТоварыВОднуКарточкуСвойства.ЗначениеРеквизита1С);

		Элементы.ДекорацияИзменилсяРеквизит1С.Подсказка = Подсказка;
		Элементы.ЗначениеОбъединения.Подсказка = Подсказка;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗначениеАтрибутаМаркетплейсаНачалоВыбораЗавершение(Значение, ДополнительныеПараметры = Неопределено) Экспорт

	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = Значение;
	ТекущиеДанные.ЗначениеАтрибутаЗаполнено = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
			Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
			И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
			
	ДеревоРеквизитовЗначениеАтрибутаМаркетплейсаПриИзменении(Элементы.ДеревоРеквизитовЗначениеАтрибутаМаркетплейса);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеКарточкиТовара()

	ЕстьКритичныеОшибки = Ложь;
	Если Не ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Номенклатура"" не заполнено'"),, "Запись.Номенклатура");
		ЕстьКритичныеОшибки = Истина;
	КонецЕсли;
	Если ХарактеристикиИспользуются И Не ЗначениеЗаполнено(Запись.Характеристика) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Поле ""Характеристика номенклатуры"" не заполнено'"),, "Запись.ХарактеристикаНоменклатуры");
		ЕстьКритичныеОшибки = Истина;
	КонецЕсли;

	Если ЕстьКритичныеОшибки Тогда
		РезультатПроверки = Новый Структура;
		РезультатПроверки.Вставить("ЕстьКритичныеОшибки", Истина);
		РезультатПроверки.Вставить("ПрерватьЗапись", Истина);
		Возврат РезультатПроверки;
	КонецЕсли;

	МассивСтрокТаблицыЗначенийРеквизитов = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаЗначенийРеквизитов Цикл
		СтруктураСтроки = Новый Структура(КолонкиТаблицыЗначенийРеквизитов);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаТаблицы);
		МассивСтрокТаблицыЗначенийРеквизитов.Добавить(СтруктураСтроки);
	КонецЦикла;

	ПараметрыФормы = Новый Структура("Запись, ВариантОтображенияАтрибутов, НаименованиеКатегорииМаркетплейса,
			|ИсточникКатегорииМаркетплейса, Валюта, Цены, СтавкаНДС, Штрихкод, ИзмененыПараметрыТовара");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект);
	ПараметрыФормы.Вставить("ТаблицаЗначенийРеквизитов", МассивСтрокТаблицыЗначенийРеквизитов);
	ПараметрыФормы.Вставить("ОтображаетсяДеревоАтрибутов", Элементы.СтраницаРедактированияАтрибутовТовара.Видимость);
	ПараметрыФормы.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);

	РезультатПроверки = ПроверитьЗаполнениеКарточкиТовараНаСервере(ПараметрыФормы);
	Если РезультатПроверки.ЕстьКритичныеОшибки Тогда
		РезультатПроверки.Свойство("КодОшибки", Запись.КодОшибки);
		РезультатПроверки.Свойство("ОписаниеОшибки", Запись.ОписаниеОшибки);
	Иначе
		Запись.КодОшибки = "";
		Запись.ОписаниеОшибки = "";
	КонецЕсли;
	РезультатПроверки.Свойство("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища);

	ДанныеОбъектаМассив = Неопределено;
	Если РезультатПроверки.Свойство("ДанныеОбъекта", ДанныеОбъектаМассив) Тогда
		ТаблицаЗначенийРеквизитов.Очистить();
		Для Каждого ДанныеРеквизита Из ДанныеОбъектаМассив Цикл
			НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеРеквизита);
		КонецЦикла;
	КонецЕсли;
	ДанныеОбъектаМассив = Неопределено;

	Возврат РезультатПроверки;

КонецФункции

&НаКлиенте
Процедура ПроверитьНаличиеИзмененийЗначенийРеквизитов1С()

	Отбор = Новый Структура("ИзменилсяРеквизит1С", Истина); 
	СтрокиСИзмененнымиАтрибутами = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);
	Запись.ИзмененыРеквизиты = (СтрокиСИзмененнымиАтрибутами.Количество() <> 0);

	Элементы.ДекорацияИзмененыРеквизиты.Видимость = Запись.ИзмененыРеквизиты;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветПриПроверкеЗаполненияАтрибутов(Ответ, ПараметрыЗаписи) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Запись.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
		ВыполнитьЗапись = Истина;
		Записать(ПараметрыЗаписи);

		Если ЭтоЗакрытиеФормы = Истина Тогда
			Закрыть();
		КонецЕсли;
	Иначе
		ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
		ПараметрыДействий.Событие = "ПередЗаписьюОтказСохраненияСОшибками";
		ПараметрыДействий.ЗаполнитьДеревоРеквизитов = Истина;

		ЗаполнитьДанныеТовара(ПараметрыДействий);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеКарточкиТовараНаСервере(Знач ПараметрыФормы)

	ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
	ПараметрыДействий.Событие = "ПередЗаписьюПроверкаЗаполнения";
	ПараметрыДействий.ПолучитьДанныеТовара = Истина;
	ПараметрыДействий.ОбновитьКатегориюМаркетплейса = ПараметрыФормы.ИзмененыПараметрыТовара;
	ПараметрыДействий.ПроверитьОшибки = Истина;
	Если ПараметрыФормы.Запись.ИсходныйКлючЗаписи.Пустой() Или ПараметрыФормы.ИзмененыПараметрыТовара Тогда
		ПараметрыДействий.ПолучитьОбъектыПубликации = Истина;
		ПараметрыДействий.ОбновитьОбъектыПубликации = Истина;
	КонецЕсли;

	ТаблицаЗначенийРеквизитов = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаЗначенийРеквизитов();
	Для Каждого ДанныеСтроки Из ПараметрыФормы.ТаблицаЗначенийРеквизитов Цикл
		НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	КонецЦикла;

	ПараметрыФормы.Вставить("ТаблицаЗначенийРеквизитов", ТаблицаЗначенийРеквизитов);
	ПараметрыФормы.Вставить("ОтображаетсяДеревоАтрибутов", Ложь);

	ПараметрыФункции = ПараметрыФункцииЗаполненияКарточкиТовара(ПараметрыДействий, ПараметрыФормы);
	РезультатПроверки = ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьДанныеКарточкиТовара(ПараметрыФункции, 
		ПараметрыФормы.Запись.УчетнаяЗаписьМаркетплейса,
		ПараметрыДействий);

	ОбъектыПубликации = Неопределено;
	Если РезультатПроверки.Свойство("ОбъектыПубликации", ОбъектыПубликации) Тогда
		ОбъектыПубликацииАдресХранилища = ПоместитьВоВременноеХранилище(ОбъектыПубликации, ПараметрыФормы.УникальныйИдентификатор);
		РезультатПроверки.Вставить("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища);
		РезультатПроверки.Удалить("ОбъектыПубликации");
	КонецЕсли;

	ДанныеОбъекта = Неопределено;
	Если РезультатПроверки.Свойство("ДанныеОбъекта", ДанныеОбъекта) Тогда
		РезультатПроверки.Вставить("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища);
		РезультатПроверки.Удалить("ДанныеОбъекта");
		МассивДанныхРеквизитов = ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеОбъекта);
		РезультатПроверки.Вставить("ДанныеОбъекта", МассивДанныхРеквизитов);
	КонецЕсли;

	Возврат РезультатПроверки;

КонецФункции

&НаСервереБезКонтекста
Процедура ПослеЗаписиНаСервереСлужебная(ПараметрыЗаписи)

	ОбъектыПубликацииАдресХранилища = Неопределено;
	Если ПараметрыЗаписи.Свойство("ОбъектыПубликацииАдресХранилища", ОбъектыПубликацииАдресХранилища) Тогда
		ОбъектыПубликации = ПолучитьИзВременногоХранилища(ОбъектыПубликацииАдресХранилища);
		УдалитьИзВременногоХранилища(ОбъектыПубликацииАдресХранилища);

		Если ОбъектыПубликации <> Неопределено Тогда
			ИсходныйКлючЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ИсходныйКлючЗаписи", Новый Структура);
			Если ИсходныйКлючЗаписи.Количество() > 0 Тогда
				ОбъектыПубликации.ЗаполнитьЗначения(ИсходныйКлючЗаписи, "ИсходныйКлючЗаписи");
			КонецЕсли;

			ТаблицаПубликации = ИнтеграцияСМаркетплейсомOzonСервер.НоваяТаблицаПубликацииТоваров();
			СтрокаПубликации = ТаблицаПубликации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПубликации, ПараметрыЗаписи.ДанныеЗаписи);
			СтрокаПубликации.ОбъектыПубликации = ОбъектыПубликации;

			ИнтеграцияСМаркетплейсомOzonСервер.СоздатьЗаписиВРегистреСтатусовПубликацииОбъектовМаркетплейсаOzon(ТаблицаПубликации);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьХарактеристикиУпаковки(ИзменениеНоменклатуры = Ложь)

	Если Не ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		ХарактеристикиИспользуются = Ложь;

		Элементы.Характеристика.ТолькоПросмотр = Истина;
		Запись.Характеристика                             = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		Элементы.Характеристика.ПодсказкаВвода            = НСтр("ru = '<Характеристики не используются>'");
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Характеристика.ОтметкаНезаполненного     = Ложь;

		Элементы.Упаковка.ТолькоПросмотр = Истина;
		Элементы.Упаковка.ПодсказкаВвода = НСтр("ru = '<Упаковки не используются>'");

		Возврат;
	КонецЕсли;

	РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринадлежатВладельцу(
		Запись.Номенклатура, 
		Запись.Характеристика, 
		Запись.Упаковка);

	ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;

	Если ИзменениеНоменклатуры Тогда
		Запись.Характеристика = РезультатПроверки.Характеристика;
		Запись.Упаковка       = РезультатПроверки.Упаковка;
	КонецЕсли;

	Если Не ХарактеристикиИспользуются Тогда
		Элементы.Характеристика.ТолькоПросмотр            = Истина;
		Элементы.Характеристика.ПодсказкаВвода            = НСтр("ru = '<Характеристики не используются>'");
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Характеристика.ОтметкаНезаполненного     = Ложь;
	Иначе
		Элементы.Характеристика.ТолькоПросмотр            = Ложь;
		Элементы.Характеристика.ПодсказкаВвода            = НСтр("ru = '<Выбрать характеристику>'");
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Номенклатура, "ИспользоватьУпаковки") Тогда
		Элементы.Упаковка.ТолькоПросмотр = Истина;
		Элементы.Упаковка.ПодсказкаВвода = НСтр("ru = '<Упаковки не используются>'");
	Иначе
		Элементы.Упаковка.ТолькоПросмотр = Ложь;
		Элементы.Упаковка.ПодсказкаВвода = НСтр("ru = '<Выбрать упаковку>'");
	КонецЕсли;
	
	Если ИзменениеНоменклатуры Или Не ЗначениеЗаполнено(БазоваяЕдиницаИзмерения) Тогда
		БазоваяЕдиницаИзмерения          = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Номенклатура, "ЕдиницаИзмерения");
		Элементы.Упаковка.ПодсказкаВвода = БазоваяЕдиницаИзмерения;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТовара(ПараметрыДействий)

	ОчиститьСообщения();

	Если ПараметрыДействий.Событие <> "ПриОткрытии" И Запись.УчетнаяЗаписьМаркетплейса.Пустая() Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо выбрать учетную запись.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Запись.УчетнаяЗаписьМаркетплейса");
		Возврат;
	КонецЕсли;

	ИдентификаторКатегорииМаркетплейса = Запись.ИдентификаторКатегорииМаркетплейса;

	Если ПараметрыДействий.ЗаполнитьДеревоАтрибутов И ЗначениеЗаполнено(Запись.ИдентификаторКатегорииМаркетплейса) Тогда
		ИдентификаторКэшаКатегории = "Категория_" + Запись.ИдентификаторКатегорииМаркетплейса;
		ДанныеКэша = ИнтеграцияСМаркетплейсомOzonКлиент.ПолучитьДанныеИзКэшаКатегорий(ИдентификаторКэшаКатегории);

		ПараметрыДействий.Вставить("ИдентификаторКэшаКатегории", ИдентификаторКэшаКатегории);
		ПараметрыДействий.Вставить("ДанныеКэша", ДанныеКэша);
	КонецЕсли;

	ДлительнаяОперация = ЗаполнитьДанныеТовараНаСервере(ПараметрыДействий);

	Если ДлительнаяОперация <> Неопределено Тогда

		Если ПараметрыДействий.ПолучитьДанныеТовара И Не Элементы.СтраницаРедактированияАтрибутовТовара.Видимость Тогда
			Элементы.СтраницыСтатуса.ТекущаяСтраница = Элементы.СтраницаДлительноеОжидание;
		КонецЕсли;

		Если ПараметрыДействий.ЗаполнитьДеревоРеквизитов Тогда
			Элементы.СтраницыДереваРеквизитов.ТекущаяСтраница = Элементы.СтраницаДлительногоОжиданияДереваРеквизитов;
		КонецЕсли;

		Если ПараметрыДействий.ЗаполнитьДеревоАтрибутов Тогда
			Элементы.СтраницыДереваАтрибутов.ТекущаяСтраница = Элементы.СтраницаДлительногоОжиданияДереваАтрибутов;
		КонецЕсли;

		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДанныеТовараЗавершение", ЭтотОбъект, ПараметрыДействий);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеТовараНаСервере(ПараметрыДействий)

	Если ПараметрыДействий.Событие = "НоменклатураПриИзменении" Тогда
		НоменклатураПриИзмененииНаСервере();
		Если Не ХарактеристикиИспользуются Или ЗначениеЗаполнено(Запись.Характеристика) Тогда
			ПараметрыДействий.ПроверитьОшибки = Истина;
		Иначе
			ДеревоРеквизитов.ПолучитьЭлементы().Очистить();
			ТаблицаЗначенийРеквизитов.Очистить();
		КонецЕсли;

		ИзмененыПараметрыТовара = Истина;
	ИначеЕсли ПараметрыДействий.Событие = "ХарактеристикаПриИзменении" Тогда
		ХарактеристикаПриИзмененииНаСервере();
		ПараметрыДействий.ПроверитьОшибки = Истина;

		ИзмененыПараметрыТовара = Истина;
	ИначеЕсли ПараметрыДействий.Событие = "УпаковкаПриИзменении" Тогда
		УпаковкаПриИзмененииНаСервере();
		ПараметрыДействий.ПроверитьОшибки = Истина;

		ИзмененыПараметрыТовара = Истина;
	КонецЕсли;

	Если ИзмененыПараметрыТовара Тогда
		ОбновитьПараметрыСпискаИзображений();
		ОбновитьПараметрыСпискаСертификатов();
	КонецЕсли;

	ПараметрыДействий.ОбновитьКатегориюМаркетплейса = ИзмененыПараметрыТовара Или ПустаяСтрока(Запись.ИдентификаторКатегорииМаркетплейса);

	Если ПараметрыДействий.ОбновитьКатегориюМаркетплейса И Элементы.СтраницаДанныеТовара.Видимость Тогда
		ПараметрыДействий.ПолучитьОписаниеТовара = Истина;
	КонецЕсли;

	Если ПараметрыДействий.Событие = "НоменклатураПриИзменении"
			Или ПараметрыДействий.Событие = "ПриОткрытии" Тогда
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Номенклатура, "ВидНоменклатуры");
		Иначе
			ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДействий.ОбновитьДанныеТовара И ИзмененыПараметрыТовара Тогда
		Запись.НаименованиеОбъектаМаркетплейса =
			ИнтеграцияСМаркетплейсомOzonСервер.ПредставлениеТоварнойПозиции(Запись.Номенклатура, Запись.Характеристика, Запись.Упаковка);
		Запись.ПредставлениеОбъектаМаркетплейса = Запись.НаименованиеОбъектаМаркетплейса;
		Запись.ОписаниеОбъектаМаркетплейса = "";
	КонецЕсли;

	Если ЗначениеЗаполнено(Запись.Номенклатура)
			И (Не ПараметрыДействий.Событие = "НоменклатураПриИзменении"
				Или Не ХарактеристикиИспользуются 
				Или ЗначениеЗаполнено(Запись.Характеристика)) Тогда

		ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ЗаполнитьДанныеКарточкиТовара";
		НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Заполнение данных товара'");

		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;

		ПараметрыФормы = Новый Структура("Запись, ВариантОтображенияАтрибутов, НаименованиеКатегорииМаркетплейса,
			|ИсточникКатегорииМаркетплейса, Валюта, Цены, СтавкаНДС, Штрихкод");
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ЭтотОбъект);
		ПараметрыФормы.Вставить("ТаблицаЗначенийРеквизитов", ТаблицаЗначенийРеквизитов.Выгрузить());
		ПараметрыФормы.Вставить("ОтображаетсяДеревоАтрибутов", Элементы.СтраницаРедактированияАтрибутовТовара.Видимость);

		ПараметрыФункции = ПараметрыФункцииЗаполненияКарточкиТовара(ПараметрыДействий, ПараметрыФормы);

		Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода,
				ПараметрыФункции, Запись.УчетнаяЗаписьМаркетплейса, ПараметрыДействий);
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыФункцииЗаполненияКарточкиТовара(ПараметрыДействий, ПараметрыФормы)

	Запись = ПараметрыФормы.Запись;

	ОписаниеТовара = ИнтеграцияСМаркетплейсомOzonСервер.СписокСвойствТовараДляКарточкиТовара();
	ЗаполнитьЗначенияСвойств(ОписаниеТовара, Запись);
	ОписаниеТовара.НаименованиеКатегорииМаркетплейса = ПараметрыФормы.НаименованиеКатегорииМаркетплейса;
	ОписаниеТовара.Категория1С = Запись.Категория;
	ОписаниеТовара.Валюта = ПараметрыФормы.Валюта;
	ОписаниеТовара.Цены = ПараметрыФормы.Цены;
	ОписаниеТовара.СтавкаНДС = ПараметрыФормы.СтавкаНДС;

	Если ПараметрыДействий.ЗаполнитьДеревоАтрибутов Или ПараметрыФормы.ОтображаетсяДеревоАтрибутов Тогда
		ПараметрыЗаполненияДереваАтрибутов = ИнтеграцияСМаркетплейсомOzonСервер.ПараметрыДляЗаполненияАтрибутовКатегории();
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполненияДереваАтрибутов, Запись);
		ПараметрыЗаполненияДереваАтрибутов.ВариантОтображенияАтрибутов = ПараметрыФормы.ВариантОтображенияАтрибутов;
		ПараметрыЗаполненияДереваАтрибутов.ИдентификаторКатегорииМаркетплейса = Запись.ИдентификаторКатегорииМаркетплейса;
		ПараметрыЗаполненияДереваАтрибутов.ПоляСхемыКомпоновкиДанных = ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьПоляСхемыДляПолученияРеквизитовАтрибутов();
		
		ПараметрыЗаполненияДереваАтрибутов.ИсточникКатегорииМаркетплейса = ПараметрыФормы.ИсточникКатегорииМаркетплейса;
		Если ЗначениеЗаполнено(ПараметрыФормы.ИсточникКатегорииМаркетплейса) Тогда
			ПараметрыЗаполненияДереваАтрибутов.ИдентификаторИсточникаКатегорииМаркетплейса =
					СтрЗаменить(ПараметрыФормы.ИсточникКатегорииМаркетплейса.УникальныйИдентификатор(), "-", "_");
		КонецЕсли;

		Если ПараметрыДействий.Свойство("ИдентификаторКэшаКатегории") Тогда
			ПараметрыЗаполненияДереваАтрибутов.Вставить("ИдентификаторКэшаКатегории", ПараметрыДействий.ИдентификаторКэшаКатегории);
			ПараметрыЗаполненияДереваАтрибутов.Вставить("ДанныеКэша", ПараметрыДействий.ДанныеКэша);  
		КонецЕсли;
	КонецЕсли;

	ПараметрыФункции = Новый Структура;
	ПараметрыФункции.Вставить("ОписаниеТовара", ОписаниеТовара);
	ПараметрыФункции.Вставить("ДанныеОбъекта", ПараметрыФормы.ТаблицаЗначенийРеквизитов);
	ПараметрыФункции.Вставить("ПараметрыЗаполненияДереваАтрибутов", ПараметрыЗаполненияДереваАтрибутов);
	ПараметрыФункции.Вставить("ОтображаетсяДеревоАтрибутов", ПараметрыФормы.ОтображаетсяДеревоАтрибутов);

	Возврат ПараметрыФункции;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеТовараЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено И Результат.Статус = "Выполнено" Тогда
		ДанныеКэша = Неопределено;
		ЗаполнитьДанныеТовараЗавершениеНаСервере(Результат.АдресРезультата, ДанныеКэша, ДополнительныеПараметры);

		Если ДополнительныеПараметры.Свойство("ИдентификаторКэшаКатегории") И ЗначениеЗаполнено(ДанныеКэша) Тогда
			ИнтеграцияСМаркетплейсомOzonКлиент.СохранитьДанныеВКэшКатегорий(ДанныеКэша, ДополнительныеПараметры.ИдентификаторКэшаКатегории);
			ДанныеКэша = Неопределено;
		КонецЕсли;

		Если ДополнительныеПараметры.ОбновитьДанныеТовара Тогда
			Модифицированность = Истина;
		КонецЕсли; 
		
		Если ИдентификаторКатегорииМаркетплейса <> Запись.ИдентификаторКатегорииМаркетплейса Тогда
			ВариантОтображенияАтрибутов = "Все";

			ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
			ПараметрыДействий.Событие = "ОбновитьДеревоАтрибутов";
			ПараметрыДействий.ЗаполнитьДеревоАтрибутов = Истина;
			ЗаполнитьДанныеТовара(ПараметрыДействий);

			ИдентификаторКатегорииМаркетплейса = Запись.ИдентификаторКатегорииМаркетплейса;
		КонецЕсли;

		Если ДополнительныеПараметры.ЗаполнитьДеревоРеквизитов И Элементы.СтраницаРедактированияАтрибутовТовара.Видимость Тогда
			Для Каждого СтрокаДерева Из ДеревоРеквизитов.ПолучитьЭлементы() Цикл
				Если СтрокаДерева.Уровень = 0 Тогда
					Элементы.ДеревоРеквизитов.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ЭтоЗакрытиеФормы <> Истина Тогда
		ШаблонОшибки = НСтр("ru = 'Не удалось заполнить данные товара по причине: %1. Подробнее см. журнал регистрации.'");
		ПредставлениеНеизвестнойОшибки = НСтр("ru = 'Неизвестная ошибка выполнения операции'");
		ПодробноеПредставлениеОшибки = ?(Результат = Неопределено, ПредставлениеНеизвестнойОшибки, Результат.ПодробноеПредставлениеОшибки);
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

	Если ДополнительныеПараметры.ПолучитьДанныеТовара Тогда
		Элементы.СтраницыСтатуса.ТекущаяСтраница = Элементы.СтраницаСтатус;
		Элементы.СтраницаОписаниеОшибки.Видимость = Не ПустаяСтрока(Запись.ОписаниеОшибки);

		Если Элементы.СтраницаОписаниеОшибки.Видимость Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;

	Если ДополнительныеПараметры.ЗаполнитьДеревоРеквизитов Тогда
		Элементы.СтраницыДереваРеквизитов.ТекущаяСтраница = Элементы.СтраницаКомандДереваРеквизитов;

		ПроверитьНаличиеИзмененийЗначенийРеквизитов1С();
	КонецЕсли;

	Если ДополнительныеПараметры.ЗаполнитьДеревоАтрибутов Тогда
		Элементы.СтраницыДереваАтрибутов.ТекущаяСтраница = Элементы.СтраницаКомандДереваАтрибутов;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТовараЗавершениеНаСервере(АдресХранилища, ДанныеКэша = Неопределено, ДополнительныеПараметры = Неопределено)

	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
	ИдентификаторАтрибута_ТНВЭД = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТНВЭД"];
	ОтборМаркируемаяПродукция   = Новый Структура("ИдентификаторАтрибутаМаркетплейса", ИдентификаторАтрибута_ТНВЭД);
	ЭтоМаркируемаяПродукция     = Ложь;
	
	Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
		ЭтоМаркируемаяПродукция = НоменклатураЛокализация.ЭтоМаркируемаяПродукция(Запись.Номенклатура);
	КонецЕсли;

	СообщениеПользователю = "";
	Если Результат.Свойство("СообщениеПользователю", СообщениеПользователю) Тогда
		ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю);
	КонецЕсли;

	ДанныеОбъектаФормы = Неопределено;
	Если Результат.Свойство("ДанныеОбъекта", ДанныеОбъектаФормы) Тогда
		// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
		Если ЭтоМаркируемаяПродукция Тогда
			НайденныеСтроки = ДанныеОбъектаФормы.НайтиСтроки(ОтборМаркируемаяПродукция);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ОбязательныйАтрибут = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			ЗначениеВРеквизитФормы(ДанныеОбъектаФормы, "ТаблицаЗначенийРеквизитов");
		Исключение 
			Запись.ОписаниеОшибки = НСтр("ru = 'Необходимо перезаполнить атрибуты товара, т.к. формат сохраненных данных отличается от текущего.'");
		КонецПопытки;
	КонецЕсли;

	Категория1С = Неопределено;
	Если Результат.Свойство("Категория1С", Категория1С) Тогда
		Запись.Категория = Категория1С;
	КонецЕсли;

	Если ДополнительныеПараметры.ОбновитьДанныеТовара Тогда
		ЕстьКритичныеОшибки = Ложь;
		Если Результат.Свойство("ЕстьКритичныеОшибки", ЕстьКритичныеОшибки) И ЕстьКритичныеОшибки = Истина Тогда
			Запись.КодОшибки      = Результат.КодОшибки;
			Запись.ОписаниеОшибки = Результат.ОписаниеОшибки;
		ИначеЕсли ДополнительныеПараметры.ПроверитьОшибки Тогда
			Запись.КодОшибки      = "";
			Запись.ОписаниеОшибки = "";
		КонецЕсли;
	КонецЕсли;

	ДанныеДляПубликации = Неопределено;
	Если Результат.Свойство("ДанныеДляПубликации", ДанныеДляПубликации) Тогда
		Если ДополнительныеПараметры.ОбновитьДанныеТовара Тогда
			ЗаполнитьЗначенияСвойств(Запись, ДанныеДляПубликации);
		КонецЕсли;

		Если ДанныеДляПубликации.Свойство("ИсточникКатегорииМаркетплейса") Тогда
			ИсточникКатегорииМаркетплейса = ДанныеДляПубликации.ИсточникКатегорииМаркетплейса;
		КонецЕсли;

		ДанныеДляПубликации.Свойство("НаименованиеКатегорииМаркетплейса", НаименованиеКатегорииМаркетплейса);
		
		Если ЗначениеЗаполнено(Запись.ИдентификаторКатегорииМаркетплейса) Тогда
			Если СтрНайти(Запись.ИдентификаторКатегорииМаркетплейса, "_") = 0 Тогда
				НаименованиеКатегорииМаркетплейса = НаименованиеКатегорииМаркетплейса + ИнтеграцияСМаркетплейсомOzonСервер.ПостфиксУстаревшейКатегории();
			Иначе
				НеактивнаяКатегорияМаркетплейса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеДляПубликации, "НеактивнаяКатегорияМаркетплейса", Ложь);
				Если НеактивнаяКатегорияМаркетплейса Тогда
					НаименованиеКатегорииМаркетплейса = НаименованиеКатегорииМаркетплейса + ИнтеграцияСМаркетплейсомOzonСервер.ПостфиксНеиспользуемойКатегории();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ДанныеДляПубликации.Свойство("ОбъединятьТоварыВОднуКарточкуСвойства", ОбъединятьТоварыВОднуКарточкуСвойства);
		ДанныеДляПубликации.Свойство("Валюта", Валюта);
		ДанныеДляПубликации.Свойство("Цены", Цены);
		ДанныеДляПубликации.Свойство("СтавкаНДС", СтавкаНДС);
		ДанныеДляПубликации.Свойство("ОписаниеСертификацииКатегорииМаркетплейса", ОписаниеСертификацииКатегорииМаркетплейса);

		Запись.ОбъединяетсяВОднуКарточку = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбъединятьТоварыВОднуКарточкуСвойства,
			"ДоступноОбъединениеТоваровВОднуКарточку", Ложь);

		ИзменитьВидимостьЭлементовОбъединенияВОднуКарточку();

		ДополнительныеПараметры.Вставить("ИдентификаторКэшаКатегории", "Категория_" + Запись.ИдентификаторКатегорииМаркетплейса);
	КонецЕсли;

	ДеревоРеквизитовФормы = Неопределено;
	Если Результат.Свойство("ДеревоРеквизитов", ДеревоРеквизитовФормы) Тогда
		// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
		Если ЭтоМаркируемаяПродукция Тогда
			НайденныеСтроки = ДеревоРеквизитовФормы.Строки.НайтиСтроки(ОтборМаркируемаяПродукция, Истина);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ОбязательныйАтрибут = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДеревоРеквизитовФормы, "ДеревоРеквизитов");

		Если ДополнительныеПараметры.Событие = "АктивизироватьСтрокуДереваРеквизитовПриДобавленииНового" Тогда
			ИдентификаторТекущейСтроки = 0;
			ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
				"ИдентификаторАтрибутаМаркетплейса", 
				ИдентификаторТекущейСтроки,
				ДеревоРеквизитов.ПолучитьЭлементы(), 
				ДополнительныеПараметры.ИдентификаторАтрибутаМаркетплейсаДляДереваРеквизитов, 
				Ложь);
			Элементы.ДеревоРеквизитов.ТекущаяСтрока = ИдентификаторТекущейСтроки;
		КонецЕсли;
	КонецЕсли;

	УстановитьЗаголовокДереваАтрибутов(Элементы.ДекорацияЗаголовокДереваАтрибутов, НаименованиеКатегорииМаркетплейса);

	ДеревоАтрибутовФормы = Неопределено;
	Если Результат.Свойство("ДеревоАтрибутов", ДеревоАтрибутовФормы) Тогда
		// Маркируемая продукция (ТНВЭД, коды ЕАЭС)
		Если ЭтоМаркируемаяПродукция Тогда
			НайденныеСтроки = ДеревоАтрибутовФормы.Строки.НайтиСтроки(ОтборМаркируемаяПродукция, Истина);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].ОбязательныйАтрибут = Истина;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДеревоАтрибутовФормы, "ДеревоАтрибутов");
	КонецЕсли; 

	Результат.Свойство("ДанныеКэша", ДанныеКэша);

	Результат.Свойство("ОписаниеДанныхТовара", ОписаниеДанныхТовара);

	Если ДополнительныеПараметры.Событие = "ПриОткрытии" Тогда
		ИсточникКатегорииМаркетплейса = Запись.ИсточникКатегорииМаркетплейса;
		НаименованиеКатегорииМаркетплейса =
			?(НаименованиеКатегорииМаркетплейса = "", Запись.НаименованиеКатегорииМаркетплейса, НаименованиеКатегорииМаркетплейса);

		Если Не ЗначениеЗаполнено(ИсточникКатегорииМаркетплейса) Тогда
			ДанныеИсточникаКатегорииМаркетплейса =
				ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьТекущийИсточникКатегорииМаркетплейса(Запись.УчетнаяЗаписьМаркетплейса, Запись.Категория, Истина);
			ИсточникКатегорииМаркетплейса = ДанныеИсточникаКатегорииМаркетплейса.ИсточникКатегорииМаркетплейса;
			НаименованиеКатегорииМаркетплейса = ДанныеИсточникаКатегорииМаркетплейса.НаименованиеИсточникаКатегорииМаркетплейса;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗаголовокДереваАтрибутов(ДекорацияЗаголовокДереваАтрибутов, НаименованиеКатегорииМаркетплейса)

	ШаблонЗаголовка = НСтр("ru = 'Атрибуты категории маркетплейса <%1>:'");
	Если ПустаяСтрока(НаименованиеКатегорииМаркетплейса) Тогда
		НаименованиеКатегорииМаркетплейса = НСтр("ru = 'Категория маркетплейса не определена'");
	КонецЕсли;

	ДекорацияЗаголовокДереваАтрибутов.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка,
		НаименованиеКатегорииМаркетплейса);

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтображенияАтрибутов(ПерезаполнитьДеревоАтрибутов = Ложь)

	Элементы.ПоказатьВсеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Все");
	Элементы.ПоказатьОсновныеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Основные");
	Элементы.ПоказатьДополнительныеАтрибуты.Пометка = (ВариантОтображенияАтрибутов = "Дополнительные");

	СтрокиАтрибутов = ДеревоАтрибутов.ПолучитьЭлементы();
	СтрокиАтрибутов.Очистить();

	Если ПерезаполнитьДеревоАтрибутов Тогда
		ПараметрыДействий = ИнтеграцияСМаркетплейсомOzonКлиентСервер.ПараметрыДействийДляКарточкиТовара();
		ПараметрыДействий.ЗаполнитьДеревоАтрибутов = Истина;

		ЗаполнитьДанныеТовара(ПараметрыДействий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораЗначенияАтрибута(ИдентификаторСтроки, МножественныйВыбор = Ложь)

	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	Иначе
		ТекущиеДанные = ДеревоРеквизитов.НайтиПоИдентификатору(ИдентификаторСтроки);

		Если ТекущиеДанные = Неопределено Или Не ТекущиеДанные.ДоступенВыборЗначенияИзСписка Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ИдентификаторАтрибута_ТипТовара = ИнтеграцияСМаркетплейсомOzonКлиентСервер.КонстантыСервиса()["ИдентификаторАтрибута_ТипТовара"];
	
	// Тип товара
	Если ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса = ИдентификаторАтрибута_ТипТовара Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("УчетнаяЗаписьМаркетплейса",          Запись.УчетнаяЗаписьМаркетплейса);
	ПараметрыВыбора.Вставить("ИдентификаторКатегорииМаркетплейса", ТекущиеДанные.ИдентификаторКатегорииМаркетплейса);
	ПараметрыВыбора.Вставить("ИдентификаторАтрибутаМаркетплейса",  ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
	ПараметрыВыбора.Вставить("НаименованиеАтрибутаМаркетплейса",   ТекущиеДанные.НаименованиеАтрибутаМаркетплейса);
	ПараметрыВыбора.Вставить("Описание",                           СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		НСтр("ru = 'Выбор значения маркетплейса для атрибута <%1>'"), 
																		ТекущиеДанные.НаименованиеАтрибутаМаркетплейса));

	Если МножественныйВыбор Тогда
		ПараметрыВыбора.Вставить("ТекущееЗначениеАтрибута", ТекущиеДанные.ЗначенияАтрибутаМаркетплейса);
		
		ИмяФормыВыбора = "ВыборСпискаЗначенийМаркетплейса";
	Иначе
		ПараметрыВыбора.Вставить("ТекущееЗначениеАтрибута", ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
		ПараметрыВыбора.Вставить("ИдентификаторТекущегоЗначенияАтрибута", ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса);
		
		ИмяФормыВыбора = "ВыборЗначенияМаркетплейса";
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекущиеДанные.АдресХранилищаДоступныхЗначений) Тогда
		ПараметрыВыбора.Вставить("АдресХранилищаДоступныхЗначений", ТекущиеДанные.АдресХранилищаДоступныхЗначений);
	КонецЕсли;

	ОбработчикВыбораЗначения = Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтотОбъект, ИдентификаторСтроки);
	ОткрытьФорму("Обработка.УправлениеПродажамиНаOzon.Форма." + ИмяФормыВыбора,
			ПараметрыВыбора, ЭтотОбъект,,,, ОбработчикВыбораЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ДеревоРеквизитов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.АдресХранилищаДоступныхЗначений = ВыбранноеЗначение.АдресХранилищаДоступныхЗначений;

	ПараметрыАтрибута = Новый Структура;
	ПараметрыАтрибута.Вставить("ИдентификаторАтрибута",              ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса);
	ПараметрыАтрибута.Вставить("ИдентификаторЗначенияАтрибута",      ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса);
	ПараметрыАтрибута.Вставить("НовыйИдентификаторЗначенияАтрибута", "");
	ПараметрыАтрибута.Вставить("ТекущийРодитель",                    ТекущиеДанные.ПолучитьРодителя());
	
	Если ВыбранноеЗначение.Свойство("ЗначенияАтрибута") Тогда
		ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
		ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = "";
		ТекущиеДанные.ЗначенияАтрибутаМаркетплейса = ВыбранноеЗначение.ЗначенияАтрибута;
	Иначе
		ПараметрыАтрибута.Вставить("НовыйИдентификаторЗначенияАтрибута", ВыбранноеЗначение.ИдентификаторЗначенияАтрибута);
		
		ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса = ВыбранноеЗначение.ИдентификаторЗначенияАтрибута;
		ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = ВыбранноеЗначение.ЗначениеАтрибута;
		ТекущиеДанные.ЗначенияАтрибутаМаркетплейса = Новый СписокЗначений;
	КонецЕсли;

	ТекущиеДанные.ЗначениеАтрибутаЗаполнено = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() > 0)
			Или ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
	ТекущиеДанные.НеЗаполненАтрибут = (ТекущиеДанные.ЗначенияАтрибутаМаркетплейса.Количество() = 0)
			И Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);

	ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем = Истина;
	ТекущиеДанные.ИзменилсяРеквизит1С = Ложь;

	ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);
	
	Если ИнтеграцияСМаркетплейсомOzonКлиентСервер.ТребуетсяПересчетВесогабаритныхХарактеристик(ПараметрыАтрибута.ИдентификаторАтрибута, 
			ПараметрыАтрибута.ИдентификаторЗначенияАтрибута, ПараметрыАтрибута.НовыйИдентификаторЗначенияАтрибута) Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПересчитатьВесогабаритныеХарактеристики", ЭтотОбъект, ПараметрыАтрибута);
		ПоказатьВопрос(ОповещениеОЗавершении, 
			НСтр("ru = 'Пересчитать связанные весогабаритные характеристики в новые единицы измерения (пересчет будет выполнен до целых значений)?'"), 
			РежимДиалогаВопрос.ДаНет, 
			, 
			КодВозвратаДиалога.Да, 
			НСтр("ru = 'Публикация товара'"), 
			КодВозвратаДиалога.Нет);
	КонецЕсли;

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВесогабаритныеХарактеристики(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.ТекущийРодитель = Неопределено Тогда
			ДополнительныеПараметры.ТекущийРодитель = ДеревоРеквизитов;
		КонецЕсли;
		
		ВесогабаритныеХарактеристики = ИнтеграцияСМаркетплейсомOzonВызовСервера.ПутьКРеквизитам1СПоУмолчанию();
		
		ПоказателиЕдиницыИзмерения   = Неопределено;
		СписокВыбораЕдиницыИзмерения = Неопределено;
		
		Если ВесогабаритныеХарактеристики.Свойство("Атрибут_" + ДополнительныеПараметры.ИдентификаторАтрибута, ПоказателиЕдиницыИзмерения)
				И ПоказателиЕдиницыИзмерения.Свойство("СписокВыбора", СписокВыбораЕдиницыИзмерения) Тогда
			ЧислительЕдиницыИзмерения        = 1;
			ЗнаменательЕдиницыИзмерения      = 1;
			НовыйЧислительЕдиницыИзмерения   = 1;
			НовыйЗнаменательЕдиницыИзмерения = 1;
			
			Для Каждого ЭлементКоллекции Из СписокВыбораЕдиницыИзмерения Цикл
				Если ЭлементКоллекции.ИдентификаторЗначенияАтрибутаМаркетплейса = ДополнительныеПараметры.ИдентификаторЗначенияАтрибута Тогда
					ЧислительЕдиницыИзмерения   = ЭлементКоллекции.Числитель;
					ЗнаменательЕдиницыИзмерения = ЭлементКоллекции.Знаменатель;
				ИначеЕсли ЭлементКоллекции.ИдентификаторЗначенияАтрибутаМаркетплейса = ДополнительныеПараметры.НовыйИдентификаторЗначенияАтрибута Тогда
					НовыйЧислительЕдиницыИзмерения   = ЭлементКоллекции.Числитель;
					НовыйЗнаменательЕдиницыИзмерения = ЭлементКоллекции.Знаменатель;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТекущиеДанные Из ДополнительныеПараметры.ТекущийРодитель.ПолучитьЭлементы() Цикл
				Показатель = Неопределено;
				ИдентификаторЕдиницыИзмерения = Неопределено;
				
				Если ВесогабаритныеХарактеристики.Свойство("Атрибут_" + ТекущиеДанные.ИдентификаторАтрибутаМаркетплейса, Показатель)
						И Показатель.Свойство("ИдентификаторЕдиницыИзмерения", ИдентификаторЕдиницыИзмерения)
						И ИдентификаторЕдиницыИзмерения = "Атрибут_" + ДополнительныеПараметры.ИдентификаторАтрибута Тогда
					ТекущиеДанные.ЗначениеАтрибутаМаркетплейса = Окр(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса
							* (?(ЧислительЕдиницыИзмерения = 0, 1, ЧислительЕдиницыИзмерения) / ?(ЗнаменательЕдиницыИзмерения = 0, 1, ЗнаменательЕдиницыИзмерения))
							/ (?(НовыйЧислительЕдиницыИзмерения = 0, 1, НовыйЧислительЕдиницыИзмерения) / ?(НовыйЗнаменательЕдиницыИзмерения = 0, 1, НовыйЗнаменательЕдиницыИзмерения)),
						0, РежимОкругления.Окр15как20);
					
					ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем = Истина;
					ТекущиеДанные.ИзменилсяРеквизит1С                 = Ложь;
					ТекущиеДанные.ЗначениеАтрибутаЗаполнено           = ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);
					ТекущиеДанные.НеЗаполненАтрибут                   = Не ЗначениеЗаполнено(ТекущиеДанные.ЗначениеАтрибутаМаркетплейса);

					ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеВТаблицеРеквизитов(ТекущиеДанные = Неопределено)

	Если ТекущиеДанные = Неопределено Тогда
		// Это изменение значения объединения в одну карточку.
		ТекущиеДанные = Новый Структура;
		ТекущиеДанные.Вставить("ИдентификаторКатегорииМаркетплейса", Запись.ИдентификаторКатегорииМаркетплейса);
		ТекущиеДанные.Вставить("ИдентификаторАтрибутаМаркетплейса", ОбъединятьТоварыВОднуКарточкуСвойства.ИдентификаторАтрибута);
		ТекущиеДанные.Вставить("ЯвляетсяКоллекциейЗначений", Ложь);
		ТекущиеДанные.Вставить("ЗначениеАтрибутаМаркетплейса", Запись.ЗначениеОбъединенияВОднуКарточку);
		ТекущиеДанные.Вставить("ИдентификаторЗначенияАтрибутаМаркетплейса", "");
		ТекущиеДанные.Вставить("ЗначениеАтрибутаЗаданоПользователем", Истина);
		ТекущиеДанные.Вставить("ИзменилсяРеквизит1С", ОбъединятьТоварыВОднуКарточкуСвойства.ИзменилсяРеквизит1С);
	Иначе
		Если ТекущиеДанные.ЯвляетсяКоллекциейЗначений Тогда
			СписокЗначенийАтрибута = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ТекущиеДанные.ЗначенияАтрибутаМаркетплейса);
		Иначе
			СписокЗначенийАтрибута = Новый СписокЗначений;
		КонецЕсли;

	КонецЕсли;

	Отбор = Новый Структура("ИдентификаторКатегорииМаркетплейса, ИдентификаторАтрибутаМаркетплейса");
	ЗаполнитьЗначенияСвойств(Отбор, ТекущиеДанные);

	СтрокиАтрибута = ТаблицаЗначенийРеквизитов.НайтиСтроки(Отбор);

	СтрокаДанныхАтрибута = Неопределено;
	СтрокиРеквизитовКУдалению = Новый Массив;

	Для Каждого СтрокаАтрибута Из СтрокиАтрибута Цикл
		Если ТекущиеДанные.ЯвляетсяКоллекциейЗначений Тогда
			Если СписокЗначенийАтрибута.Количество() > 0 Тогда
				Если ТекущиеДанные.ДоступенВыборЗначенияИзСписка Тогда
					СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса = СписокЗначенийАтрибута[0].Значение;
					СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса = СписокЗначенийАтрибута[0].Представление;
				Иначе
					СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
					СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса = СписокЗначенийАтрибута[0].Значение;
				КонецЕсли;

				СтрокаАтрибута.ЗначениеАтрибутаЗаданоПользователем = ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем;
				СтрокаАтрибута.ИзменилсяРеквизит1С = ТекущиеДанные.ИзменилсяРеквизит1С;
				СтрокаАтрибута.НеЗаполненАтрибут = ПустаяСтрока(СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса)
						И Не ЗначениеЗаполнено(СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса);

				СписокЗначенийАтрибута.Удалить(СписокЗначенийАтрибута[0]);
				СтрокаДанныхАтрибута = СтрокаАтрибута;
			Иначе
				СтрокиРеквизитовКУдалению.Добавить(СтрокаАтрибута);
			КонецЕсли;
		Иначе
			СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса = ТекущиеДанные.ИдентификаторЗначенияАтрибутаМаркетплейса;
			СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса = ТекущиеДанные.ЗначениеАтрибутаМаркетплейса;
			СтрокаАтрибута.ЗначениеАтрибутаЗаданоПользователем = ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем;
			СтрокаАтрибута.ИзменилсяРеквизит1С = ТекущиеДанные.ИзменилсяРеквизит1С;
			СтрокаАтрибута.НеЗаполненАтрибут = ПустаяСтрока(СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса)
					И Не ЗначениеЗаполнено(СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса);
		КонецЕсли;
	КонецЦикла;

	Для Каждого СтрокаУдаления Из СтрокиРеквизитовКУдалению Цикл
		Если СтрокаДанныхАтрибута = Неопределено Тогда
			СтрокаДанныхАтрибута = СтрокаУдаления;
			СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
			СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса = "";
			СтрокаАтрибута.ЗначениеАтрибутаЗаданоПользователем = ТекущиеДанные.ЗначениеАтрибутаЗаданоПользователем;
			СтрокаАтрибута.ИзменилсяРеквизит1С = ТекущиеДанные.ИзменилсяРеквизит1С;
			СтрокаАтрибута.НеЗаполненАтрибут = ПустаяСтрока(СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса)
					И Не ЗначениеЗаполнено(СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса);
			Продолжить;
		КонецЕсли;

		ТаблицаЗначенийРеквизитов.Удалить(СтрокаУдаления);
	КонецЦикла;

	Если СтрокаДанныхАтрибута <> Неопределено Тогда
		Для Каждого ЗначениеАтрибута Из СписокЗначенийАтрибута Цикл
			НоваяСтрока = ТаблицаЗначенийРеквизитов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхАтрибута,, "ЗначениеАтрибутаМаркетплейса, ИдентификаторЗначенияАтрибутаМаркетплейса");

			Если НоваяСтрока.ДоступенВыборЗначенияИзСписка Тогда
				НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = ЗначениеАтрибута.Значение;
				НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ЗначениеАтрибута.Представление;
			Иначе
				НоваяСтрока.ИдентификаторЗначенияАтрибутаМаркетплейса = "";
				НоваяСтрока.ЗначениеАтрибутаМаркетплейса = ЗначениеАтрибута.Значение;
			КонецЕсли;

			СтрокаАтрибута.ЗначениеАтрибутаЗаданоПользователем = Истина;
			СтрокаАтрибута.НеЗаполненАтрибут = ПустаяСтрока(СтрокаАтрибута.ИдентификаторЗначенияАтрибутаМаркетплейса)
					И Не ЗначениеЗаполнено(СтрокаАтрибута.ЗначениеАтрибутаМаркетплейса);
		КонецЦикла;
	КонецЕсли;

	ПроверитьНаличиеИзмененийЗначенийРеквизитов1С();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыгрузитьНулевыеОстатки(Знач КлючЗаписи)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанных();
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Выгрузить нулевые остатки товаров.'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВыгрузитьНулевыеОстаткиТоваров";
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, ИмяМетода, КлючЗаписи.УчетнаяЗаписьМаркетплейса, ТаблицаТоваров);

КонецФункции

&НаСервереБезКонтекста
Функция ПеренестиВАрхивНаСервере(Знач КлючЗаписи)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанных();
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Перенести товары в архив.'");

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ПеренестиСписокТоваровВАрхив";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, КлючЗаписи.УчетнаяЗаписьМаркетплейса, ТаблицаТоваров);

КонецФункции

&НаСервереБезКонтекста
Функция ВернутьИзАрхиваНаСервере(Знач КлючЗаписи)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанных();
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Вернуть товары из архива.'");

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВернутьСписокТоваровИзАрхива";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, КлючЗаписи.УчетнаяЗаписьМаркетплейса, ТаблицаТоваров);

КонецФункции

&НаСервереБезКонтекста
Функция УдалитьТоварыНаСервере(Знач КлючЗаписи)

	ТаблицаТоваров = ИнтеграцияСМаркетплейсомOzonСервер.СведенияОВыгруженныхДанных();
	НоваяСтрока = ТаблицаТоваров.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, КлючЗаписи);

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Удалить товары.'");

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.УдалитьСписокТоваровБезSKUИзАрхива";
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода, КлючЗаписи.УчетнаяЗаписьМаркетплейса, ТаблицаТоваров);

КонецФункции

&НаСервере
Процедура ОбновитьПараметрыСпискаСертификатов()

	Элементы.СтраницаСертификаты.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСертификатыНоменклатуры");
	
	Если Элементы.СтраницаСертификаты.Видимость Тогда
		СертификатыТовара.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДатаСеанса());
		СертификатыТовара.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьМаркетплейса", Запись.УчетнаяЗаписьМаркетплейса);
		СертификатыТовара.Параметры.УстановитьЗначениеПараметра("Номенклатура", Запись.Номенклатура);
		Если Запись.ИсходныйКлючЗаписи.Пустой() Или Не ИзмененыПараметрыТовара Тогда
			СертификатыТовара.Параметры.УстановитьЗначениеПараметра("Характеристика", Запись.Характеристика);
			СертификатыТовара.Параметры.УстановитьЗначениеПараметра("Упаковка", Запись.Упаковка);
		Иначе
			СертификатыТовара.Параметры.УстановитьЗначениеПараметра("Характеристика", Запись.ИсходныйКлючЗаписи.Характеристика);
			СертификатыТовара.Параметры.УстановитьЗначениеПараметра("Упаковка", Запись.ИсходныйКлючЗаписи.Упаковка);
		КонецЕсли;
		СертификатыТовара.Параметры.УстановитьЗначениеПараметра("ВидНоменклатуры",
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запись.Номенклатура, "ВидНоменклатуры"));
		СертификатыТовара.Параметры.УстановитьЗначениеПараметра("СтатусНовый", ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСпискаИзображений()
	
	ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("УчетнаяЗаписьМаркетплейса", Запись.УчетнаяЗаписьМаркетплейса);
	ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("Номенклатура", Запись.Номенклатура);
	Если Запись.ИсходныйКлючЗаписи.Пустой() Или Не ИзмененыПараметрыТовара Тогда
		ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("Характеристика", Запись.Характеристика);
		ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("Упаковка", Запись.Упаковка);
	Иначе
		ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("Характеристика", Запись.ИсходныйКлючЗаписи.Характеристика);
		ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("Упаковка", Запись.ИсходныйКлючЗаписи.Упаковка);
	КонецЕсли;
	ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("СтатусНовый", 
			ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации"));
		
	ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("РасширенияИзображений", 
			ИнтеграцияСМаркетплейсомOzonСервер.РасширенияИзображений());

	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Присоединенный файл изображения товара не выгружается на маркетплейс, т.к. не соответствует требуемым форматам файлов: %1.'"),
			СтрСоединить(ИнтеграцияСМаркетплейсомOzonСервер.РасширенияИзображений(), ", "));
	ИзображенияТовара.Параметры.УстановитьЗначениеПараметра("ОписаниеОшибки", ОписаниеОшибки);

КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()

	УстановитьДоступностьХарактеристикиУпаковки(Истина);
	ОбновитьПараметрыСпискаИзображений();
	ОбновитьПараметрыСпискаСертификатов();

КонецПроцедуры

&НаСервере
Процедура ХарактеристикаПриИзмененииНаСервере()

	ОбновитьПараметрыСпискаСертификатов();

КонецПроцедуры

&НаСервере
Процедура УпаковкаПриИзмененииНаСервере()

	ОбновитьПараметрыСпискаСертификатов();

КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусКПубликации(ОбъектПубликации)

	Если ТипЗнч(ОбъектПубликации) = Тип("СправочникСсылка.СертификатыНоменклатуры") Тогда
		МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись, "УчетнаяЗаписьМаркетплейса, Номенклатура, Характеристика, Упаковка");
		МенеджерЗаписи.ОбъектПубликации = ОбъектПубликации;
		МенеджерЗаписи.ВидОбъектаМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Сертификат");
		МенеджерЗаписи.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
		МенеджерЗаписи.Записать();
	Иначе
		ВидОбъекта = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Изображение");

		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
			ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", Запись.УчетнаяЗаписьМаркетплейса);
			ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъекта);
			ЭлементБлокировкиДанных.УстановитьЗначение("Номенклатура", Запись.Номенклатура);
			ЭлементБлокировкиДанных.УстановитьЗначение("Характеристика", Запись.Характеристика);
			ЭлементБлокировкиДанных.УстановитьЗначение("Упаковка", Запись.Упаковка);
			БлокировкаДанных.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(Запись.УчетнаяЗаписьМаркетплейса);
			НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВидОбъекта);
			НаборЗаписей.Отбор.Номенклатура.Установить(Запись.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(Запись.Характеристика);
			НаборЗаписей.Отбор.Упаковка.Установить(Запись.Упаковка);
			НаборЗаписей.Прочитать();

			Если НаборЗаписей.Количество() > 0 Тогда
				Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
					Если ЗаписьНабора.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется") Тогда
						ЗаписьНабора.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			НаборЗаписей.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстИсключения = НСтр("ru = 'Не удалось установить статус ""К публикации"" для изображений.'");
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьТоварЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьПубликациюТовара = Истина;
		Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПубликациюТовара()

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	ПараметрыОжидания.ТекстСообщения       = НСтр("ru = 'Выполняется отправка товара на модерацию.'");

	ДлительнаяОперация = ВыполнитьПубликациюТовараНаСервере(Запись, ТаблицаЗначенийРеквизитов);

	ДополнительныеПараметры = ИнтеграцияСМаркетплейсомOzonКлиент.НовоеОписаниеПараметровДействия();
	ДополнительныеПараметры.Действие = "ПубликацияТовара";
	ДополнительныеПараметры.ОписаниеДействия = НСтр("ru = 'Отправка товара на модерацию'");
	ДополнительныеПараметры.УспешныйРезультат = НСтр("ru = 'Товар отправлен на модерацию'");
	ДополнительныеПараметры.РезультатСОшибками = НСтр("ru = 'Не удалось отправить товар на модерацию. См. описание ошибки в карточке товара.'");

	Оповещение = Новый ОписаниеОповещения("ДействияСТоваромОповещение", ЭтотОбъект, ДополнительныеПараметры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);

	ВыполнитьПубликациюТовара = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПубликациюТовараНаСервере(Знач Запись, Знач ТаблицаЗначенийРеквизитов)

	ЗаписьДляИзменений = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьДляИзменений, Запись);
	ЗаписьДляИзменений.ДанныеОбъекта = Новый ХранилищеЗначения(ТаблицаЗначенийРеквизитов.Выгрузить());
	ЗаписьДляИзменений.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.КПубликации");
	ЗаписьДляИзменений.Записать();

	ИмяМетода = "ИнтеграцияСМаркетплейсомOzonСервер.ВыполнитьПубликациюТоваров";
	НаименованиеФоновогоЗадания = НСтр("ru = 'Ozon. Публикация товаров'");

	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеФоновогоЗадания;

	МассивИдентификаторовПубликации = Новый Массив;
	МассивИдентификаторовПубликации.Добавить(Запись.ИдентификаторПубликации);

	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, ИмяМетода,
			Запись.УчетнаяЗаписьМаркетплейса, МассивИдентификаторовПубликации);

КонецФункции

&НаКлиенте
Процедура ПеренестиВАрхивЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

		ДлительнаяОперация = ВыгрузитьНулевыеОстатки(Запись);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Неопределено, ПараметрыОжидания);

		ДлительнаяОперация = ПеренестиВАрхивНаСервере(Запись);

		ДополнительныеПараметры = ИнтеграцияСМаркетплейсомOzonКлиент.НовоеОписаниеПараметровДействия();
		ДополнительныеПараметры.Действие = "ТоварВАрхив";
		ДополнительныеПараметры.ОписаниеДействия = НСтр("ru = 'Перенос в архив'");
		ДополнительныеПараметры.УспешныйРезультат = НСтр("ru = 'Товар перенесен в архив'");
		ДополнительныеПараметры.РезультатСОшибками = НСтр("ru = 'При переносе товара в архив возникли ошибки. Подробности см. в журнале регистрации'");

		Оповещение = Новый ОписаниеОповещения("ДействияСТоваромОповещение", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТоварЗавершение(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры = ИнтеграцияСМаркетплейсомOzonКлиент.НовоеОписаниеПараметровДействия();
		ДополнительныеПараметры.Действие = "УдалениеТовара";
		ДополнительныеПараметры.ОписаниеДействия = НСтр("ru = 'Удаление товара'");
		ДополнительныеПараметры.УспешныйРезультат = НСтр("ru = 'Товар удален'");
		ДополнительныеПараметры.РезультатСОшибками = НСтр("ru = 'При удалении товара возникли ошибки. Подробности см. в журнале регистрации'");

		Если ПустаяСтрока(Запись.ИдентификаторОбъектаМаркетплейса) Тогда
			Сообщение = УдалитьТоварИзРегистраНаСервере();

			Если Не ПустаяСтрока(Сообщение) Тогда
				Состояние(ДополнительныеПараметры.ОписаниеДействия,, Сообщение);
			Иначе
				Состояние(ДополнительныеПараметры.ОписаниеДействия,, ДополнительныеПараметры.УспешныйРезультат);
			КонецЕсли;

			ДействияСТоваромОповещение(, ДополнительныеПараметры);
		Иначе
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

			ДлительнаяОперация = УдалитьТоварыНаСервере(Запись);
			Оповещение = Новый ОписаниеОповещения("ДействияСТоваромОповещение", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействияСТоваромОповещение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	РезультатДействия = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Статус = "Выполнено"
	И Результат.Свойство("АдресРезультата") Тогда
		РезультатДействия = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;

	Если ДополнительныеПараметры.Действие = "УдалениеТовара" Тогда
		ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(РезультатДействия, ДополнительныеПараметры);
		ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);
		Закрыть();
	Иначе
		Если (ДополнительныеПараметры.Действие = "ТоварИзАрхива" Или ДополнительныеПараметры.Действие = "ТоварВАрхив")
			И РезультатДействия <> Неопределено Тогда
			ОчиститьСообщения();
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(РезультатДействия, ДополнительныеПараметры);
			УстановитьДоступностьРедактированияКарточки(ЭтотОбъект, Ложь);
			УстановитьДоступностьЭлементовДляСтатуса();
		ИначеЕсли ДополнительныеПараметры.Действие = "ПубликацияТовара" И РезультатДействия <> Неопределено Тогда
			ИнтеграцияСМаркетплейсомOzonКлиент.ВывестиСостояние(РезультатДействия, ДополнительныеПараметры, Истина);
		КонецЕсли;

		Прочитать();

		Элементы.СтраницаОписаниеОшибки.Видимость = Не ПустаяСтрока(Запись.ОписаниеОшибки);

		Если Элементы.СтраницаОписаниеОшибки.Видимость Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОписаниеОшибки;
		КонецЕсли;

		ОповеститьОбИзменении(Запись.ИсходныйКлючЗаписи);

		Элементы.ТаблицаИзображений.Обновить();
		Элементы.ТаблицаСертификатов.Обновить();
	КонецЕсли;

	УстановитьДоступностьЭлементовДляСтатуса();

КонецПроцедуры

&НаСервере
Функция УдалитьТоварИзРегистраНаСервере()

	ТекстОшибки = "";

	Попытка
		МенеджерЗаписи = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Запись);
		МенеджерЗаписи.Удалить();
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось удалить товар <%1> по причине: %2'"),
				Запись.НаименованиеОбъектаМаркетплейса,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;

	Возврат ТекстОшибки;

КонецФункции

&НаСервере
Процедура ПодтвердитьИзменениеДанных()

	ТекущаяСтрока = Элементы.ТаблицаСертификатов.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ВидОбъекта = ПредопределенноеЗначение("Перечисление.ВидыОбъектовМаркетплейсов.Сертификат");

	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon");
		ЭлементБлокировкиДанных.УстановитьЗначение("УчетнаяЗаписьМаркетплейса", Запись.УчетнаяЗаписьМаркетплейса);
		ЭлементБлокировкиДанных.УстановитьЗначение("ВидОбъектаМаркетплейса", ВидОбъекта);
		ЭлементБлокировкиДанных.УстановитьЗначение("ОбъектПубликации", ТекущаяСтрока.Ссылка);
		БлокировкаДанных.Заблокировать();

		НаборЗаписей = РегистрыСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьМаркетплейса.Установить(Запись.УчетнаяЗаписьМаркетплейса);
		НаборЗаписей.Отбор.ВидОбъектаМаркетплейса.Установить(ВидОбъекта);
		НаборЗаписей.Отбор.ОбъектПубликации.Установить(ТекущаяСтрока.Ссылка);
		НаборЗаписей.Прочитать();

		Для Каждого ЗаписьОбъектаПубликации Из НаборЗаписей Цикл
			Если ЗаписьОбъектаПубликации.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбъектовМаркетплейсаOzon.НеИспользуется") Тогда
				ЗаписьОбъектаПубликации.ИдентификаторОбъектаМаркетплейса = "";
			Иначе
				ЗаписьОбъектаПубликации.ИзмененыРеквизиты = Ложь;
			КонецЕсли;
		КонецЦикла;

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Шаблон = НСтр("ru = 'Не удалось подтвердить изменения для сертификата <%1>.'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ТекущаяСтрока.Ссылка);
		ВызватьИсключение ТекстИсключения;
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаписьСуществует(КлючЗаписи)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовМаркетплейсаOzon КАК СтатусыПубликацииОбъектовМаркетплейсаOzon
		|ГДЕ
		|	СтатусыПубликацииОбъектовМаркетплейсаOzon.УчетнаяЗаписьМаркетплейса = &УчетнаяЗаписьМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ВидОбъектаМаркетплейса = &ВидОбъектаМаркетплейса
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Номенклатура = &Номенклатура
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Характеристика = &Характеристика
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.Упаковка = &Упаковка
		|	И СтатусыПубликацииОбъектовМаркетплейсаOzon.ОбъектПубликации = &ОбъектПубликации";

	Запрос.Параметры.Вставить("УчетнаяЗаписьМаркетплейса", КлючЗаписи.УчетнаяЗаписьМаркетплейса);
	Запрос.Параметры.Вставить("ВидОбъектаМаркетплейса",    КлючЗаписи.ВидОбъектаМаркетплейса);
	Запрос.Параметры.Вставить("Номенклатура",              КлючЗаписи.Номенклатура);
	Запрос.Параметры.Вставить("Характеристика",            КлючЗаписи.Характеристика);
	Запрос.Параметры.Вставить("Упаковка",                  КлючЗаписи.Упаковка);
	Запрос.Параметры.Вставить("ОбъектПубликации",          КлючЗаписи.ОбъектПубликации);

	РезультатЗапроса = Запрос.Выполнить();
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

#КонецОбласти
