#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура УдалитьНастройкуЗаполненияПолей(Отправитель, Получатель, Договор, ВидЭлектронногоДокумента, Формат) Экспорт
	
	Если Не ЗначениеЗаполнено(Отправитель)
		ИЛИ Не ЗначениеЗаполнено(Получатель)
		ИЛИ Не ЗначениеЗаполнено(ВидЭлектронногоДокумента)
		ИЛИ Не ЗначениеЗаполнено(Формат) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Отбор.Получатель.Установить(Получатель);
	НаборЗаписей.Отбор.Договор.Установить(Договор);
	НаборЗаписей.Отбор.ВидЭлектронногоДокумента.Установить(ВидЭлектронногоДокумента);
	НаборЗаписей.Отбор.Формат.Установить(Формат);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиЗаполненияДополнительныхПолей;
	ПолноеИмяРегистра = МетаданныеОбъекта.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки        = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	
	// Переход на новую архитектуру настроек ЭДО.
	// 1. Заполнение новых измерений: Отправитель, Получатель, Договор
	// 2. Конвертация идентификатора формата.
	// 3. Конвертация видов ЭД (УПД и УКД).
	// 4. Заполнение вида документа значением СправочникСсылка.ВидыДокументовЭДО.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"// набор для перехода на новую архитектуру
	|ВЫБРАТЬ
	|	&Отправитель КАК Отправитель,
	|	&Получатель КАК Получатель,
	|	&ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	|	&Формат КАК Формат,
	|	НастройкиЗаполненияДополнительныхПолей.УдалитьФормат,
	|	НастройкиЗаполненияДополнительныхПолей.УдалитьНастройкаЭДО,
	|	НастройкиЗаполненияДополнительныхПолей.УдалитьВидЭлектронногоДокумента
	|ИЗ
	|	РегистрСведений.НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
	|ГДЕ
	|	(НастройкиЗаполненияДополнительныхПолей.Отправитель = &Отправитель
	|	И НастройкиЗаполненияДополнительныхПолей.Получатель = &Получатель
	|	И НастройкиЗаполненияДополнительныхПолей.Договор В (&ПустойДоговор)
	|	И НастройкиЗаполненияДополнительныхПолей.УдалитьНастройкаЭДО <> &УдалитьНастройкаЭДО
	|	И НастройкиЗаполненияДополнительныхПолей.Формат = &Формат
	|	И НастройкиЗаполненияДополнительныхПолей.УдалитьФормат <> &УдалитьФормат)
	|	ИЛИ
	|		(НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
	|	И
	|		НастройкиЗаполненияДополнительныхПолей.УдалитьВидЭлектронногоДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|// набор для обработки дублей
	|ВЫБРАТЬ
	|	НастройкиЗаполненияДополнительныхПолей.Отправитель,
	|	НастройкиЗаполненияДополнительныхПолей.Получатель,
	|	НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента,
	|	НастройкиЗаполненияДополнительныхПолей.Формат,
	|	&УдалитьФормат,
	|	&УдалитьНастройкаЭДО,
	|	&УдалитьВидЭлектронногоДокумента
	|ИЗ
	|	РегистрСведений.НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
	|ГДЕ
	|	НастройкиЗаполненияДополнительныхПолей.Договор В (&ПустойДоговор)
	|	И НастройкиЗаполненияДополнительныхПолей.Отправитель <> &Отправитель
	|	И НастройкиЗаполненияДополнительныхПолей.Получатель <> &Получатель
	|СГРУППИРОВАТЬ ПО
	|	НастройкиЗаполненияДополнительныхПолей.Отправитель,
	|	НастройкиЗаполненияДополнительныхПолей.Получатель,
	|	НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента,
	|	НастройкиЗаполненияДополнительныхПолей.Формат
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(НастройкиЗаполненияДополнительныхПолей.Договор) > 1";
	
	ПустыеЗначенияИзмерений = ПустыеЗначенияИзмерений();
	Для Каждого ИмяИЗначение Из ПустыеЗначенияИзмерений Цикл
		Запрос.УстановитьПараметр(ИмяИЗначение.Ключ, ИмяИЗначение.Значение);
	КонецЦикла;
	ПустойДоговор = ОбменСКонтрагентамиИнтеграция.ВсеПустыеЗначенияДоговораСКонтрагентомЭДО();
	Запрос.УстановитьПараметр("ПустойДоговор", ПустойДоговор);
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры);
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиЗаполненияДополнительныхПолей;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ПараметрыОтметкиВыполнения.ЭтоДвижения = Ложь;
	ПараметрыОтметкиВыполнения.ПолноеИмяРегистра = ПолноеИмяОбъекта;
	ПараметрыОтметкиВыполнения.ОтметитьВсеРегистраторы = Ложь;
	ПараметрыОтметкиВыполнения.ЭтоНезависимыйРегистрСведений = Истина;
	
	Если ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Неопределено, "Справочник.ВидыДокументовЭДО") Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	РезультатПерехода = ОбработатьДанныеДляПереходаНаНовуюАрхитектуру(ВыбранныеДанные, ПараметрыОтметкиВыполнения);
	РезультатОбъединенияДублей = ОбработатьДанныеДляОбъединенияДублей(ВыбранныеДанные, ПараметрыОтметкиВыполнения);

	ОбработаноОбъектов = РезультатПерехода.ОбработаноОбъектов + РезультатОбъединенияДублей.ОбработаноОбъектов;
	ПроблемныхОбъектов = РезультатПерехода.ПроблемныхОбъектов + РезультатОбъединенияДублей.ПроблемныхОбъектов;
	
	Если ОбработаноОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые настройки заполнения дополнительных полей (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция настроек заполнения дополнительных полей: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработаноОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов  = Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбработаноОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Функция ПустыеЗначенияИзмерений()
	ИмяИЗначение = Новый Структура;
	МетаданныеРегистра = Метаданные.РегистрыСведений.НастройкиЗаполненияДополнительныхПолей;
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ИмяИЗначение.Вставить(Измерение.Имя, Измерение.Тип.ПривестиЗначение());
	КонецЦикла;
	Возврат ИмяИЗначение;
КонецФункции

Процедура ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры)
	
	// Определим общее количество объектов к обработке.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ПараметрыВыборки.ВыбиратьПорциями = Ложь;
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьИзмеренияНезависимогоРегистраСведенийДляОбработки(
			Параметры.Очередь, "РегистрСведений.НастройкиЗаполненияДополнительныхПолей", ПараметрыВыборки);
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеревестиНаНовуюАрхитектуру(Набор, РеквизитыНастройки, НастройкиОтправки,
	СоответствиеФорматов, СоответствиеВидовДокументов, Записать)
	
	ТипыДокументов = Новый Массив;
	Для каждого Запись Из Набор Цикл
		Если ТипыДокументов.Найти(Запись.УдалитьВидЭлектронногоДокумента) = Неопределено Тогда
			ТипыДокументов.Добавить(Запись.УдалитьВидЭлектронногоДокумента);
		КонецЕсли;
	КонецЦикла;
	
	ВидыДокументовЗаменяемыеУПДУКД = ЭлектронныеДокументыЭДО.ВидыДокументовЗаменяемыеУПДУКД();
	ВидДокументаУПД = ВидыДокументовЗаменяемыеУПДУКД.УПД.ВидДокумента;
	ВидДокументаУКД = ВидыДокументовЗаменяемыеУПДУКД.УКД.ВидДокумента;
	
	Для каждого Запись Из Набор Цикл
		
		Если (Не ЗначениеЗаполнено(Запись.Отправитель)
			И Не ЗначениеЗаполнено(Запись.Получатель)
			И Не ЗначениеЗаполнено(Запись.Договор)
			И Не ЗначениеЗаполнено(Запись.Формат)
			И ЗначениеЗаполнено(Запись.УдалитьФормат)
			И ЗначениеЗаполнено(Запись.УдалитьНастройкаЭДО))
			Или (Не ЗначениеЗаполнено(Запись.ВидЭлектронногоДокумента)
				И ЗначениеЗаполнено(Запись.УдалитьВидЭлектронногоДокумента)) Тогда
			
			Если ЗначениеЗаполнено(Запись.УдалитьНастройкаЭДО) Тогда
				Запись.Отправитель = РеквизитыНастройки.Организация;
				Запись.Получатель = РеквизитыНастройки.Контрагент;
				Запись.Договор = РеквизитыНастройки.Договор;
				
				КлючФормата = Строка(Запись.УдалитьВидЭлектронногоДокумента) + "_" + Запись.УдалитьФормат;
				НовыйФормат = СоответствиеФорматов[КлючФормата];
				Если Не ЗначениеЗаполнено(НовыйФормат) Тогда
					НовыйФормат = Запись.УдалитьФормат;
				КонецЕсли;
				Запись.Формат = НовыйФормат;
				Записать = Истина;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Запись.ВидЭлектронногоДокумента) И ЗначениеЗаполнено(Запись.УдалитьВидЭлектронногоДокумента) Тогда
				Отбор = Новый Структура("Отправитель, Получатель, Договор");
				ЗаполнитьЗначенияСвойств(Отбор, Запись);
				СтрокиТаблицыНастроек = НастройкиОтправки.НайтиСтроки(Отбор);
				Если СтрокиТаблицыНастроек.Количество() Тогда
					Настройка = СтрокиТаблицыНастроек[0];
					Если Настройка.ИспользоватьУПД 
						И Запись.УдалитьВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.СчетФактура Тогда
						НовыйВидДокумента = ВидДокументаУПД;
					ИначеЕсли Настройка.ИспользоватьУКД 
						И Запись.УдалитьВидЭлектронногоДокумента = Перечисления.ТипыДокументовЭДО.КорректировочныйСчетФактура Тогда
						НовыйВидДокумента = ВидДокументаУКД;
					Иначе
						НовыйВидДокумента = СоответствиеВидовДокументов[Запись.УдалитьВидЭлектронногоДокумента];
					КонецЕсли;
					
					Запись.ВидЭлектронногоДокумента = НовыйВидДокумента;
				КонецЕсли;
				Записать = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеДляПереходаНаНовуюАрхитектуру(ВсеДанные, ПараметрыОтметкиВыполнения)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиЗаполненияДополнительныхПолей;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ПустыеЗначенияИзмерений = ПустыеЗначенияИзмерений();
	Отбор = Новый Структура("Получатель, Отправитель, ВидЭлектронногоДокумента, Формат");
	ЗаполнитьЗначенияСвойств(Отбор, ПустыеЗначенияИзмерений);
	ДанныеКОбработке = ВсеДанные.Скопировать(Отбор);
	
	Если ЗначениеЗаполнено(ДанныеКОбработке) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка КАК НастройкаЭДО,
		|	УдалитьСоглашенияОбИспользованииЭД.Организация КАК Организация,
		|	УдалитьСоглашенияОбИспользованииЭД.Контрагент КАК Контрагент,
		|	УдалитьСоглашенияОбИспользованииЭД.ДоговорКонтрагента КАК Договор,
		|	УдалитьСоглашенияОбИспользованииЭД.ИспользоватьУПД КАК ИспользоватьУПД,
		|	УдалитьСоглашенияОбИспользованииЭД.ИспользоватьУКД КАК ИспользоватьУКД
		|ИЗ
		|	Справочник.УдалитьСоглашенияОбИспользованииЭД КАК УдалитьСоглашенияОбИспользованииЭД
		|ГДЕ
		|	УдалитьСоглашенияОбИспользованииЭД.Ссылка В (&Настройки)";
		
		Запрос.УстановитьПараметр("Настройки", ДанныеКОбработке.ВыгрузитьКолонку("УдалитьНастройкаЭДО"));
		Выборка = Запрос.Выполнить().Выбрать();
		РеквизитыНастроек = Новый Соответствие;
		Пока Выборка.Следующий() Цикл
			РеквизитыНастройки = Новый Структура("Организация, Контрагент, Договор, ИспользоватьУПД, ИспользоватьУКД");
			ЗаполнитьЗначенияСвойств(РеквизитыНастройки, Выборка);
			РеквизитыНастроек.Вставить(Выборка.НастройкаЭДО, РеквизитыНастройки);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыбранныеДанные.УдалитьФормат КАК УдалитьФормат,
		|	ВыбранныеДанные.УдалитьНастройкаЭДО КАК УдалитьНастройкаЭДО,
		|	ВыбранныеДанные.УдалитьВидЭлектронногоДокумента КАК УдалитьВидЭлектронногоДокумента
		|ПОМЕСТИТЬ ВыбранныеДанные
		|ИЗ
		|	&ВыбранныеДанные КАК ВыбранныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиЗаполненияДополнительныхПолей.Получатель КАК Получатель,
		|	НастройкиЗаполненияДополнительныхПолей.Отправитель КАК Отправитель,
		|	НастройкиЗаполненияДополнительныхПолей.Договор КАК Договор
		|ПОМЕСТИТЬ НастройкиЗаполненияДополнительныхПолей
		|ИЗ
		|	ВыбранныеДанные КАК ВыбранныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
		|		ПО ВыбранныеДанные.УдалитьФормат = НастройкиЗаполненияДополнительныхПолей.УдалитьФормат
		|			И ВыбранныеДанные.УдалитьНастройкаЭДО = НастройкиЗаполненияДополнительныхПолей.УдалитьНастройкаЭДО
		|			И ВыбранныеДанные.УдалитьВидЭлектронногоДокумента = НастройкиЗаполненияДополнительныхПолей.УдалитьВидЭлектронногоДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастройкиЗаполненияДополнительныхПолей.Отправитель КАК Отправитель,
		|	НастройкиЗаполненияДополнительныхПолей.Получатель КАК Получатель,
		|	НастройкиЗаполненияДополнительныхПолей.Договор КАК Договор,
		|	ЕСТЬNULL(ЕСТЬNULL(НастройкиОтправкиЭлектронныхДокументов.ИспользоватьУПД, НастройкиОтправкиЭлектронныхДокументовБезДоговора.ИспользоватьУПД), ЛОЖЬ) КАК ИспользоватьУПД,
		|	ЕСТЬNULL(ЕСТЬNULL(НастройкиОтправкиЭлектронныхДокументов.ИспользоватьУКД, НастройкиОтправкиЭлектронныхДокументовБезДоговора.ИспользоватьУКД), ЛОЖЬ) КАК ИспользоватьУКД
		|ИЗ
		|	НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументов
		|		ПО НастройкиЗаполненияДополнительныхПолей.Отправитель = НастройкиОтправкиЭлектронныхДокументов.Отправитель
		|			И НастройкиЗаполненияДополнительныхПолей.Получатель = НастройкиОтправкиЭлектронныхДокументов.Получатель
		|			И НастройкиЗаполненияДополнительныхПолей.Договор = НастройкиОтправкиЭлектронныхДокументов.Договор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтправкиЭлектронныхДокументов КАК НастройкиОтправкиЭлектронныхДокументовБезДоговора
		|		ПО НастройкиЗаполненияДополнительныхПолей.Отправитель = НастройкиОтправкиЭлектронныхДокументовБезДоговора.Отправитель
		|			И НастройкиЗаполненияДополнительныхПолей.Получатель = НастройкиОтправкиЭлектронныхДокументовБезДоговора.Получатель
		|			И НастройкиЗаполненияДополнительныхПолей.Договор В (&ПустойДоговор)
		|			И НастройкиОтправкиЭлектронныхДокументовБезДоговора.Договор В (&ПустойДоговор)
		|";
		
		Запрос.УстановитьПараметр("ВыбранныеДанные", ДанныеКОбработке);
		ПустойДоговор = ОбменСКонтрагентамиИнтеграция.ВсеПустыеЗначенияДоговораСКонтрагентомЭДО();
		Запрос.УстановитьПараметр("ПустойДоговор", ПустойДоговор);
		НастройкиОтправки = Запрос.Выполнить().Выгрузить();
		
		СоответствиеФорматов = НастройкиЭДО.СоответствиеСтарыхФорматовНовым();
		
		СоответствиеВидовДокументов = ОбменСКонтрагентамиИнтеграция.СоответствиеВидовЭДВидамДокументовЭДО();
		
		Для Каждого СтрокаДанных Из ДанныеКОбработке Цикл
			
			РеквизитыНастройки = РеквизитыНастроек[СтрокаДанных.УдалитьНастройкаЭДО];
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("УдалитьФормат", СтрокаДанных.УдалитьФормат);
				ЭлементБлокировки.УстановитьЗначение("УдалитьНастройкаЭДО", СтрокаДанных.УдалитьНастройкаЭДО);
				ЭлементБлокировки.УстановитьЗначение("УдалитьВидЭлектронногоДокумента", СтрокаДанных.УдалитьВидЭлектронногоДокумента);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				Записать = Ложь;
				
				Набор = СоздатьНаборЗаписей();
				Набор.Отбор.УдалитьФормат.Установить(СтрокаДанных.УдалитьФормат);
				Набор.Отбор.УдалитьНастройкаЭДО.Установить(СтрокаДанных.УдалитьНастройкаЭДО);
				Набор.Отбор.УдалитьВидЭлектронногоДокумента.Установить(СтрокаДанных.УдалитьВидЭлектронногоДокумента);
				
				Набор.Прочитать();
				
				ПеревестиНаНовуюАрхитектуру(Набор, РеквизитыНастройки, НастройкиОтправки,
					СоответствиеФорматов, СоответствиеВидовДокументов, Записать);
				
				Если Записать Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(Набор);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Набор, ПараметрыОтметкиВыполнения);
				КонецЕсли;
				
				ОбработаноОбъектов = ОбработаноОбъектов + 1;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				ТекстСообщения = НСтр("ru = 'Не удалось обработать настройки заполнения дополнительных полей по причине:'") + Символы.ПС
					+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					МетаданныеОбъекта,, ТекстСообщения);
				
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат НовыйРезультатОбработки(ОбработаноОбъектов, ПроблемныхОбъектов);
	
КонецФункции

Функция ОбработатьДанныеДляОбъединенияДублей(ВсеДанные, ПараметрыОтметкиВыполнения)
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиЗаполненияДополнительныхПолей;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ОбработаноОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ПустыеЗначенияИзмерений = ПустыеЗначенияИзмерений();
	Отбор = Новый Структура("УдалитьФормат, УдалитьНастройкаЭДО, УдалитьВидЭлектронногоДокумента");
	ЗаполнитьЗначенияСвойств(Отбор, ПустыеЗначенияИзмерений);
	ДанныеКОбработке = ВсеДанные.Скопировать(Отбор);
	
	Если ЗначениеЗаполнено(ДанныеКОбработке) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("КлючиКОбработке", ДанныеКОбработке);
		ПустойДоговор = ОбменСКонтрагентамиИнтеграция.ВсеПустыеЗначенияДоговораСКонтрагентомЭДО();
		Запрос.УстановитьПараметр("ПустойДоговор", ПустойДоговор);
		Запрос.Текст = "ВЫБРАТЬ
					   |	Получатель,
					   |	Отправитель,
					   |	ВидЭлектронногоДокумента,
					   |	Формат
					   |ПОМЕСТИТЬ КлючиКОбработке
					   |ИЗ
					   |	&КлючиКОбработке КАК КлючиКОбработке
					   |;
					   |
					   |ВЫБРАТЬ
					   |	НастройкиЗаполненияДополнительныхПолей.Получатель,
					   |	НастройкиЗаполненияДополнительныхПолей.Отправитель,
					   |	НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента,
					   |	НастройкиЗаполненияДополнительныхПолей.Формат,
					   |	НастройкиЗаполненияДополнительныхПолей.Настройка
					   |ИЗ
					   |	РегистрСведений.НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
					   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиКОбработке КАК КлючиКОбработке
					   |		ПО НастройкиЗаполненияДополнительныхПолей.Получатель = КлючиКОбработке.Получатель
					   |		И НастройкиЗаполненияДополнительныхПолей.Отправитель = КлючиКОбработке.Отправитель
					   |		И НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента = КлючиКОбработке.ВидЭлектронногоДокумента
					   |		И НастройкиЗаполненияДополнительныхПолей.Формат = КлючиКОбработке.Формат
					   |		И НастройкиЗаполненияДополнительныхПолей.Договор В (&ПустойДоговор)";
		ДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		ПараметрыПоиска = Новый Структура("Получатель, Отправитель, ВидЭлектронногоДокумента, Формат");
		
		Для Каждого Ключ Из ДанныеКОбработке Цикл
			ОбщаяНастройка = Новый Массив;
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, Ключ);
			ДетальныеЗаписи.Сбросить();
			Пока ДетальныеЗаписи.НайтиСледующий(ПараметрыПоиска) Цикл
				ДанныеНастройки = ДетальныеЗаписи.Настройка.Получить();
				Если Не ЗначениеЗаполнено(ДанныеНастройки) Тогда
					Продолжить;
				КонецЕсли;
				ТекущаяНастройка = ОбщегоНазначенияБЭД.JSONЗначение(ДанныеНастройки);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбщаяНастройка, ТекущаяНастройка);
			КонецЦикла;
			
			ТаблицаНастроек = НастройкиОтправкиЭДОСлужебный.НоваяНастройкаЗаполненияДополнительныхПолей(ОбщаяНастройка);
			ТаблицаНастроек.ЗаполнитьЗначения("", "Идентификатор");
			ИменаКолонок = Новый Массив;
			Для Каждого ОписаниеКолонки Из ТаблицаНастроек.Колонки Цикл
				ИменаКолонок.Добавить(ОписаниеКолонки.Имя);
			КонецЦикла;
			ИменаКолонокСтрокой = СтрСоединить(ИменаКолонок, ", ");
			ТаблицаНастроек.Свернуть(ИменаКолонокСтрокой);
			Для Каждого СтрокаНастроек Из ТаблицаНастроек Цикл
				СтрокаНастроек.Идентификатор = "f" + СтрЗаменить(Новый УникальныйИдентификатор, "-", ""); 
			КонецЦикла;
			НастройкиСтруктурой = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаНастроек);
			ДанныеОбщейНастройки = ОбщегоНазначенияБЭД.JSONСтрока(НастройкиСтруктурой); 
			
			НачатьТранзакцию();
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
				ЭлементБлокировки.УстановитьЗначение("Получатель", Ключ.Получатель);
				ЭлементБлокировки.УстановитьЗначение("Отправитель", Ключ.Отправитель);
				ЭлементБлокировки.УстановитьЗначение("ВидЭлектронногоДокумента", Ключ.ВидЭлектронногоДокумента);
				ЭлементБлокировки.УстановитьЗначение("Формат", Ключ.Формат);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				НаборОчистки = СоздатьНаборЗаписей();
				НаборОчистки.ОбменДанными.Загрузка = Истина;
				НаборОчистки.Отбор.Получатель.Установить(Ключ.Получатель);
				НаборОчистки.Отбор.Отправитель.Установить(Ключ.Отправитель);
				НаборОчистки.Отбор.ВидЭлектронногоДокумента.Установить(Ключ.ВидЭлектронногоДокумента);
				НаборОчистки.Отбор.Формат.Установить(Ключ.Формат);
				Для Каждого Вариант Из ПустойДоговор Цикл
					НаборОчистки.Отбор.Договор.Установить(Вариант);
					НаборОчистки.Записать();
				КонецЦикла;
				НовыйНабор = СоздатьНаборЗаписей();
				НовыйНабор.Отбор.Получатель.Установить(Ключ.Получатель);
				НовыйНабор.Отбор.Договор.Установить(Неопределено);
				НовыйНабор.Отбор.Отправитель.Установить(Ключ.Отправитель);
				НовыйНабор.Отбор.ВидЭлектронногоДокумента.Установить(Ключ.ВидЭлектронногоДокумента);
				НовыйНабор.Отбор.Формат.Установить(Ключ.Формат);
				
				НоваяЗапись = НовыйНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ПараметрыПоиска);
				НоваяЗапись.Договор = Неопределено;
				НоваяЗапись.Настройка = Новый ХранилищеЗначения(ДанныеОбщейНастройки, Новый СжатиеДанных(9));
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НовыйНабор);
				ОбработаноОбъектов = ОбработаноОбъектов + 1;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
				ТекстСообщения = НСтр("ru = 'Не удалось обработать настройки заполнения дополнительных полей по причине:'") + Символы.ПС
					+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
					МетаданныеОбъекта,, ТекстСообщения);
				
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	Возврат НовыйРезультатОбработки(ОбработаноОбъектов, ПроблемныхОбъектов);
КонецФункции

Функция НовыйРезультатОбработки(ОбработаноОбъектов, ПроблемныхОбъектов)
	Возврат Новый ФиксированнаяСтруктура("ОбработаноОбъектов, ПроблемныхОбъектов", ОбработаноОбъектов, ПроблемныхОбъектов);
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли