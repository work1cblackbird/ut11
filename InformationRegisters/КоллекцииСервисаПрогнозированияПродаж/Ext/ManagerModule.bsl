#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получить информацию коллекции.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
// 
// Возвращаемое значение:
//  см. ШаблонЗаполненияПолейКоллекций - Получить информацию коллекции
Функция ПолучитьИнформациюКоллекции(Коллекция) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция,
	|	КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции,
	|	КоллекцииСервисаПрогнозированияПродаж.ИзмененФормат,
	|	КоллекцииСервисаПрогнозированияПродаж.ИзмененыОтборы,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаАктуальности,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаНачалаПоследнейВыгрузки,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаПоследнейВыгрузки,
	|	КоллекцииСервисаПрогнозированияПродаж.КоличествоДанныхВыгруженное,
	|	КоллекцииСервисаПрогнозированияПродаж.КоличествоДанныхНаСервере
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж
	|ГДЕ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция = &Коллекция";
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	
	Ответ = ШаблонЗаполненияПолейКоллекций();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Ответ, Выборка);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// Получить все коллекции.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//    * Ключ - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//    * Значение - см. ШаблонЗаполненияПолейКоллекций
Функция ПолучитьВсеКоллекции() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция,
	|	КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции,
	|	КоллекцииСервисаПрогнозированияПродаж.ИзмененФормат,
	|	КоллекцииСервисаПрогнозированияПродаж.ИзмененыОтборы,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаАктуальности,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаНачалаПоследнейВыгрузки,
	|	КоллекцииСервисаПрогнозированияПродаж.ДатаПоследнейВыгрузки,
	|	КоллекцииСервисаПрогнозированияПродаж.КоличествоДанныхВыгруженное,
	|	КоллекцииСервисаПрогнозированияПродаж.КоличествоДанныхНаСервере
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж";
	
	Ответ = Новый Соответствие();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаОтвета = ШаблонЗаполненияПолейКоллекций();
		ЗаполнитьЗначенияСвойств(СтрокаОтвета, Выборка);
		Ответ.Вставить(Выборка.Коллекция, СтрокаОтвета);
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

// Очистить коллекции.
//
Процедура ОчиститьКоллекции() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж
	|ГДЕ
	|	КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции <> """"
	|	И КоллекцииСервисаПрогнозированияПродаж.ДатаНачалаПоследнейВыгрузки > ДАТАВРЕМЯ(1, 1, 1)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	
	Коллекции = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Коллекции.Добавить(Выборка.Коллекция);
	КонецЦикла;
	
	Для Каждого Коллекция Из Коллекции Цикл
		
		НачатьТранзакцию();
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.КоллекцииСервисаПрогнозированияПродаж");
			ЭлементБлокировкиДанных.УстановитьЗначение("Коллекция", Коллекция);
			ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
			БлокировкаДанных.Заблокировать();
			
			Запись = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.СоздатьМенеджерЗаписи();
			Запись.Коллекция = Коллекция;
			Запись.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж,
				,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Очистить коллекцию.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
Процедура ОчиститьКоллекцию(Коллекция) Экспорт
	ПустыеЗначения = ШаблонЗаполненияПолейКоллекций();
	ЗаписатьИнформациюКоллекции(Коллекция, ПустыеЗначения);
КонецПроцедуры

// Количество выгруженных коллекций.
// 
// Возвращаемое значение:
//  Число - Количество выгруженных коллекций
Функция КоличествоВыгруженныхКоллекций() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КоллекцииСервисаПрогнозированияПродаж.Коллекция) КАК КоличествоВыгруженныхКоллекций
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж
	|ГДЕ
	|	КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции <> """"";
	
	Ответ = ШаблонЗаполненияПолейКоллекций();
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоВыгруженныхКоллекций;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Коллекция выгружалась.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
// 
// Возвращаемое значение:
//  Булево - Коллекция выгружалась
Функция КоллекцияВыгружалась(Коллекция) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция
	|ИЗ
	|	РегистрСведений.КоллекцииСервисаПрогнозированияПродаж КАК КоллекцииСервисаПрогнозированияПродаж
	|ГДЕ
	|	КоллекцииСервисаПрогнозированияПродаж.Коллекция = &Коллекция
	|	И КоллекцииСервисаПрогнозированияПродаж.ИдКоллекции <> """"
	|	И КоллекцииСервисаПрогнозированияПродаж.ДатаНачалаПоследнейВыгрузки > ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.УстановитьПараметр("Коллекция", Коллекция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Записать информацию коллекции.
// 
// Параметры:
//  Коллекция - ПеречислениеСсылка.КоллекцииСервисаПрогнозированияПродаж -
//  ЗначенияПолейКоллекции - см. ШаблонЗаполненияПолейКоллекций
Процедура ЗаписатьИнформациюКоллекции(Коллекция, ЗначенияПолейКоллекции) Экспорт
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.КоллекцииСервисаПрогнозированияПродаж");
		ЭлементБлокировкиДанных.УстановитьЗначение("Коллекция", Коллекция);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
	
		НаборЗаписей = РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Коллекция.Установить(Коллекция);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ЗначенияПолейКоллекции);
		Запись.Коллекция = Коллекция;
		
		НаборЗаписей.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖурналаРегистрации = СервисПрогнозированияПереопределяемый.ТекстСобытиеЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.РегистрыСведений.КоллекцииСервисаПрогнозированияПродаж,
			,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Шаблон заполнения полей коллекций.
// 
// Возвращаемое значение:
//  Структура - Шаблон заполнения полей коллекций:
// * ИдКоллекции - Строка -
// * ИзмененФормат - Булево -
// * ИзмененыОтборы - Булево -
// * ДатаАктуальности - Дата -
// * ДатаНачалаПоследнейВыгрузки - Дата -
// * ДатаПоследнейВыгрузки - Дата -
// * КоличествоДанныхВыгруженное - Число -
// * КоличествоДанныхНаСервере - Число -
Функция ШаблонЗаполненияПолейКоллекций()
	
	Ответ = Новый Структура();
	Ответ.Вставить("ИдКоллекции", "");
	Ответ.Вставить("ИзмененФормат", Ложь);
	Ответ.Вставить("ИзмененыОтборы", Ложь);
	Ответ.Вставить("ДатаАктуальности", Дата(1,1,1));
	Ответ.Вставить("ДатаНачалаПоследнейВыгрузки", Дата(1,1,1));
	Ответ.Вставить("ДатаПоследнейВыгрузки", Дата(1,1,1));
	Ответ.Вставить("КоличествоДанныхВыгруженное", 0);
	Ответ.Вставить("КоличествоДанныхНаСервере", 0);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#КонецЕсли
