
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Запись, ЭтотОбъект);
	
	ЕдиницаИзмеренияВеса   = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	УстановитьУмолчания();
	
	Если Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "НастройкаФормированияПоРабочимУчасткам" Тогда
		ЗаполнитьОграниченияПоРабочемуУчасткуОтбор();
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.НастройкиСозданияЗаданийНаПеремещение.Заголовок = НСтр("ru = 'Создание заданий на подпитку'");
	КонецЕсли;
	
	Если Параметры.Ключ.Пустой() Тогда
		
		ТекстИсключения = НСтр("ru = 'Создавать настройки можно только из форм склада (помещения) с адресным хранением остатков.'");
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	ПриОткрытииПерейтиНаВкладку = "";
	Параметры.Свойство("ПриОткрытииПерейтиНаВкладку",ПриОткрытииПерейтиНаВкладку);
	Если ПриОткрытииПерейтиНаВкладку = "НастройкиСозданияПересчетов" Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.НастройкиСозданияПересчетов;
	ИначеЕсли ПриОткрытииПерейтиНаВкладку = "НастройкиСозданияЗаданийНаПеремещение" Тогда
		Элементы.ГруппаВкладки.ТекущаяСтраница = Элементы.НастройкиСозданияЗаданийНаПеремещение;
	КонецЕсли;
	
	Элементы.РегламентныеЗаданияПересчетов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВСписке", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Создание регламентных заданий (получение уникального идентификатора)
	УстановитьПривилегированныйРежим(Истина);
	
	// Задание прогноза
	НаименованиеЗадания = НСтр("ru = 'Прогноз расхода упаковок (%ПредставлениеСклада%)'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, 
		"%ПредставлениеСклада%", 
		СкладыСервер.ПолучитьПредставлениеСклада(ТекущийОбъект.Склад,
			ТекущийОбъект.Помещение));
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Запись.ИспользоватьПрогнозРасходаУпаковок);
	ПараметрыЗадания.Вставить("Наименование", Лев(НаименованиеЗадания, 128));
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(ТекущийОбъект.Склад);
	ПараметрыРегламентногоЗадания.Добавить(ТекущийОбъект.Помещение);
	
	ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРасчетаПоказателейПрогноза);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.РегламентноеЗаданиеРасчетаПоказателейПрогноза) Тогда
		Задание = Неопределено;
	Иначе
		Задание = РегламентныеЗаданияСервер.Задание(ТекущийОбъект.РегламентноеЗаданиеРасчетаПоказателейПрогноза);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.РасчетПоказателейПрогнозаРасходаУпаковок);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	
	ТекущийОбъект.РегламентноеЗаданиеРасчетаПоказателейПрогноза = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	// Задание на создание заданий на отбор
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаОтбор);
	
	НаименованиеЗадания = НСтр("ru = 'Создание заданий на отбор на складе ""%ПредставлениеСклада%""'");
	НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания, 
		"%ПредставлениеСклада%", 
		СкладыСервер.ПолучитьПредставлениеСклада(ТекущийОбъект.Склад,
			ТекущийОбъект.Помещение));
	ПараметрыЗадания.Вставить("Наименование", НаименованиеЗадания);
	
	СтруктураПараметров = СкладыСервер.СтруктураПараметровСозданияЗаданийНаОтборПодпитку();
	СтруктураПараметров.Склад = ТекущийОбъект.Склад;
	СтруктураПараметров.Помещение = ТекущийОбъект.Помещение;
	СтруктураПараметров.НастройкаФормированияПоРабочимУчасткам = ТекущийОбъект.НастройкаФормированияПоРабочимУчасткамОтбор;
	СтруктураПараметров.ОграничиватьПоВесу = ТекущийОбъект.ОграничиватьПоВесуОтбор;
	СтруктураПараметров.ОграничиватьПоОбъему = ТекущийОбъект.ОграничиватьПоОбъемуОтбор;
	СтруктураПараметров.ОграничениеПоВесу = ТекущийОбъект.ОграничениеПоВесуОтбор;
	СтруктураПараметров.ОграничениеПоОбъему = ТекущийОбъект.ОграничениеПоОбъемуОтбор;
	СтруктураПараметров.РабочийУчасток = ТекущийОбъект.РабочийУчастокОтбор;
	СтруктураПараметров.ПоВсемРаспоряжениям = Истина;
	
	ПараметрыРегламентногоЗадания = Новый Массив;
	ПараметрыРегламентногоЗадания.Добавить(СтруктураПараметров);
	
	ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);
	ПараметрыЗадания.Вставить("Расписание", РасписаниеСозданияЗаданийНаОтбор);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийНаОтбор) Тогда
		Задание = Неопределено;
	Иначе
		Задание = РегламентныеЗаданияСервер.Задание(ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийНаОтбор);
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СозданиеЗаданийНаОтбор);
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
	КонецЕсли;
	
	ТекущийОбъект.РегламентноеЗаданиеСозданиеЗаданийнаОтбор = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	// Задания на создание пересчетов товаров
	СтрокиЗаданийКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданийПересчетов Цикл
				
		Если Не ЗначениеЗаполнено(СтрокаТаблицыРегламентныхЗаданий.Идентификатор) Тогда
			Задание = Неопределено;
		Иначе
			Задание = РегламентныеЗаданияСервер.Задание(СтрокаТаблицыРегламентныхЗаданий.Идентификатор);
		КонецЕсли;
		
		Если СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Удаление" Тогда
			
			Если Задание <> Неопределено Тогда 
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЕсли;
			СтрокиЗаданийКУдалению.Добавить(СтрокаТаблицыРегламентныхЗаданий);
			
		Иначе // "Создание" или "Изменение"
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Наименование", СтрокаТаблицыРегламентныхЗаданий.Наименование);
			ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", СтрокаТаблицыРегламентныхЗаданий.ИнтервалПовтораПриАварийномЗавершении);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", СтрокаТаблицыРегламентныхЗаданий.КоличествоПовторовПриАварийномЗавершении);
			ПараметрыЗадания.Вставить("Расписание", СтрокаТаблицыРегламентныхЗаданий.Расписание);
			ПараметрыРегламентногоЗадания = Новый Массив;
			ПараметрыРегламентногоЗадания.Добавить(СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов);
			ПараметрыЗадания.Вставить("Параметры", ПараметрыРегламентногоЗадания);
			
			Если Задание = Неопределено Тогда
				ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПересчетТоваров);
				Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
				СтрокаТаблицыРегламентныхЗаданий.Идентификатор = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
			Иначе
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицыРегламентныхЗаданий Из СтрокиЗаданийКУдалению Цикл
		ТаблицаРегламентныхЗаданийПересчетов.Удалить(СтрокаТаблицыРегламентныхЗаданий);
	КонецЦикла; 
	
	ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров = "";
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданийПересчетов Цикл
		ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров = 
			ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров 
			+ ?(ЗначениеЗаполнено(ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров),",","") 
			+ Строка(СтрокаТаблицыРегламентныхЗаданий.Идентификатор);
	КонецЦикла;
		
	// Задания на создание перемещения (отбор, размещение) товаров
	СтрокиЗаданийКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданийПеремещений Цикл
				
		Если Не ЗначениеЗаполнено(СтрокаТаблицыРегламентныхЗаданий.Идентификатор) Тогда
			Задание = Неопределено;
		Иначе
			Задание = РегламентныеЗаданияСервер.Задание(СтрокаТаблицыРегламентныхЗаданий.Идентификатор);
		КонецЕсли;
		
		Если СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Удаление" Тогда
			
			Если Задание <> Неопределено Тогда 
				РегламентныеЗаданияСервер.УдалитьЗадание(Задание);
			КонецЕсли;
			СтрокиЗаданийКУдалению.Добавить(СтрокаТаблицыРегламентныхЗаданий);
			
		Иначе // "Создание" или "Изменение"
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", Истина);
			ПараметрыЗадания.Вставить("Наименование", СтрокаТаблицыРегламентныхЗаданий.Наименование);
			ПараметрыЗадания.Вставить("ИнтервалПовтораПриАварийномЗавершении", 
				СтрокаТаблицыРегламентныхЗаданий.ИнтервалПовтораПриАварийномЗавершении);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 
				СтрокаТаблицыРегламентныхЗаданий.КоличествоПовторовПриАварийномЗавершении);
			ПараметрыЗадания.Вставить("Расписание", СтрокаТаблицыРегламентныхЗаданий.Расписание);
			ПараметрыЗадания.Вставить("Параметры", 
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПеремещений));
			
			Если Задание = Неопределено Тогда
				ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.СозданиеЗаданийНаПеремещение);
				Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
				СтрокаТаблицыРегламентныхЗаданий.Идентификатор = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
			Иначе
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, ПараметрыЗадания);
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицыРегламентныхЗаданий Из СтрокиЗаданийКУдалению Цикл
		ТаблицаРегламентныхЗаданийПеремещений.Удалить(СтрокаТаблицыРегламентныхЗаданий);
	КонецЦикла; 
	
	ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПеремещение = "";
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданийПеремещений Цикл
		ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПеремещение = 
			ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПеремещение 
			+ ?(ЗначениеЗаполнено(ТекущийОбъект.РегламентныеЗаданияСозданияЗаданийНаПеремещение),",","") 
			+ Строка(СтрокаТаблицыРегламентныхЗаданий.Идентификатор);
	КонецЦикла;
				
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьУмолчания();
	
	РасписаниеРасчетаПоказателейПрогноза = Новый РасписаниеРегламентногоЗадания;
	РасписаниеСозданияЗаданийНаОтбор	 = Новый РасписаниеРегламентногоЗадания;
	
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = Запись.РегламентноеЗаданиеРасчетаПоказателейПрогноза;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	Если Задание <> Неопределено Тогда
		РасписаниеРасчетаПоказателейПрогноза = Задание.Расписание;
		Элементы.РасписаниеСтрокой.Заголовок = Строка(РасписаниеРасчетаПоказателейПрогноза);
	КонецЕсли;
	
	ИдентификаторЗадания = Запись.РегламентноеЗаданиеСозданиеЗаданийНаОтбор;
	
	Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	Если Задание <> Неопределено Тогда
		РасписаниеСозданияЗаданийНаОтбор	   						= Задание.Расписание;
		Элементы.РасписаниеСозданияЗаданийНаОтборСтрокой.Заголовок  = Строка(РасписаниеСозданияЗаданийНаОтбор);
	КонецЕсли;
	
	ТаблицаРегламентныхЗаданийПересчетов.Очистить();
	
	Если ЗначениеЗаполнено(Запись.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров) Тогда
		МассивИдентификаторов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запись.РегламентныеЗаданияСозданияЗаданийНаПересчетТоваров);
		Для Каждого ИдентификаторЗаданияСтрока Из МассивИдентификаторов Цикл
			ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗаданияСтрока);
			Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
			Если Задание <> Неопределено Тогда
				ЗаполнитьНаименование	= Истина;
				ЗаполняемыеСвойства		= "Расписание, ИнтервалПовтораПриАварийномЗавершении, КоличествоПовторовПриАварийномЗавершении";
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Задание, "Наименование") Тогда
					ЗаполнитьНаименование	= Ложь;
					ЗаполняемыеСвойства		= ЗаполняемыеСвойства + ", " + "Наименование";
				КонецЕсли;
				
				СтрокаТаблицыРегламентныхЗаданий = ТаблицаРегламентныхЗаданийПересчетов.Добавить();
				СтрокаТаблицыРегламентныхЗаданий.ОтображатьВСписке = Истина;
				СтрокаТаблицыРегламентныхЗаданий.Идентификатор = ИдентификаторЗадания;
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРегламентныхЗаданий, Задание, ЗаполняемыеСвойства);
				
				ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПересчетов(
					СтрокаТаблицыРегламентныхЗаданий.Идентификатор,
					СтрокаТаблицыРегламентныхЗаданий.ДатаОкончания,
					СтрокаТаблицыРегламентныхЗаданий.СостояниеВыполнения,
					Ложь);
				
				Если Задание.Параметры.Количество() > 0 Тогда
					СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов = Задание.Параметры[0];
					
					Если ЗаполнитьНаименование Тогда
						СтрокаТаблицыРегламентныхЗаданий.Наименование = НаименованиеРегламентногоЗадания(
																			Задание.Параметры[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРегламентныхЗаданийПеремещений.Очистить();
	
	Если ЗначениеЗаполнено(Запись.РегламентныеЗаданияСозданияЗаданийНаПеремещение) Тогда
		МассивИдентификаторов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Запись.РегламентныеЗаданияСозданияЗаданийНаПеремещение);
		Для Каждого ИдентификаторЗаданияСтрока Из МассивИдентификаторов Цикл
			ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗаданияСтрока);
			Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
			Если Задание <> Неопределено Тогда
				ЗаполнитьНаименование	= Истина;
				ЗаполняемыеСвойства		= "Расписание, ИнтервалПовтораПриАварийномЗавершении, КоличествоПовторовПриАварийномЗавершении";
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Задание, "Наименование") Тогда
					ЗаполнитьНаименование	= Ложь;
					ЗаполняемыеСвойства		= ЗаполняемыеСвойства + ", " + "Наименование";
				КонецЕсли;
				
				СтрокаТаблицыРегламентныхЗаданий = ТаблицаРегламентныхЗаданийПеремещений.Добавить();
				СтрокаТаблицыРегламентныхЗаданий.ОтображатьВСписке = Истина;
				СтрокаТаблицыРегламентныхЗаданий.Идентификатор = ИдентификаторЗадания;
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыРегламентныхЗаданий, Задание, ЗаполняемыеСвойства);
				
				ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПеремещений(
					СтрокаТаблицыРегламентныхЗаданий.Идентификатор,
					СтрокаТаблицыРегламентныхЗаданий.ДатаОкончания,
					СтрокаТаблицыРегламентныхЗаданий.СостояниеВыполнения,
					Ложь);
				
				Если Задание.Параметры.Количество() > 0 Тогда
					СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПеремещений = Задание.Параметры[0];
					
					Если ЗаполнитьНаименование Тогда
						СтрокаТаблицыРегламентныхЗаданий.Наименование = НаименованиеРегламентногоЗадания(
																			Задание.Параметры[0],
																			"ЗаданиеПеремещения");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ СкладыСервер.ИспользоватьРабочиеУчастки(Запись.Склад, Запись.Помещение) Тогда
		Элементы.ГруппаНастройкиПоРабочимУчасткам.Доступность 				= Ложь;
		Элементы.РабочийУчасток.Доступность 								= Ложь;
	КонецЕсли;
	
	Элементы.РегламентныеЗаданияПересчетов.Доступность = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.НастройкиАдресныхСкладов);
	
	УстановитьДоступность(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьПрогнозРасходаУпаковокПриИзменении(Элемент)
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеСозданиеЗаданийНаОтборПриИзменении(Элемент)
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФормированияПоРабочимУчасткамПриИзменении(Элемент)
	Если Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "ПоОдномуРабочемуУчастку"
		И ЗначениеЗаполнено(Запись.РабочийУчастокОтбор) Тогда
		РабочийУчастокОтборПриИзмененииСервер();
	Иначе
		УстановитьДоступность(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьПоОбъемуПриИзменении(Элемент)
	Элементы.ОграничениеПоОбъему.Доступность = Запись.ОграничиватьПоОбъемуОтбор;
	Элементы.ЕдиницаИзмеренияОбъема.Доступность = Запись.ОграничиватьПоОбъемуОтбор;
КонецПроцедуры

&НаКлиенте
Процедура ОграничиватьПоВесуПриИзменении(Элемент)
	Элементы.ОграничениеПоВесу.Доступность = Запись.ОграничиватьПоВесуОтбор;
	Элементы.ЕдиницаИзмеренияВеса.Доступность = Запись.ОграничиватьПоВесуОтбор;
КонецПроцедуры

&НаКлиенте
Процедура РабочийУчастокПриИзменении(Элемент)
	РабочийУчастокОтборПриИзмененииСервер();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегламентныеЗадания

&НаКлиенте
Процедура РегламентныеЗаданияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Элемент = Элементы.РегламентныеЗаданияПересчетов Тогда
		ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПересчетов(?(Копирование, "Скопировать", "Добавить"));
	ИначеЕсли Элемент = Элементы.РегламентныеЗаданияПеремещений Тогда
		ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПеремещений(?(Копирование, "Скопировать", "Добавить"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент = Элементы.РегламентныеЗаданияПересчетов Тогда
		ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПересчетов("Редактировать");
	ИначеЕсли Элемент = Элементы.РегламентныеЗаданияПеремещений Тогда
		ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПеремещений("Редактировать");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
		
	Модифицированность = Истина;
	Если Элемент = Элементы.РегламентныеЗаданияПересчетов Тогда
		ТекущаяСтрока = ТаблицаРегламентныхЗаданийПересчетов.НайтиПоИдентификатору(Элементы.РегламентныеЗаданияПересчетов.ТекущаяСтрока);
		ТекущаяСтрока.СостояниеМодификации = "Удаление";
		ТекущаяСтрока.ОтображатьВСписке = Ложь;
		Элементы.РегламентныеЗаданияПересчетов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВСписке", Истина);
	ИначеЕсли Элемент = Элементы.РегламентныеЗаданияПеремещений Тогда
		ТекущаяСтрока = ТаблицаРегламентныхЗаданийПеремещений.НайтиПоИдентификатору(Элементы.РегламентныеЗаданияПеремещений.ТекущаяСтрока);
		ТекущаяСтрока.СостояниеМодификации = "Удаление";
		ТекущаяСтрока.ОтображатьВСписке = Ложь;
		Элементы.РегламентныеЗаданияПеремещений.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВСписке", Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписаниеРасчетаПоказателейПрогноза(Команда)
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРасчетаПоказателейПрогноза);
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеРасчетаПоказателейПрогнозаЗавершение", ЭтотОбъект, Новый Структура("ДиалогРасписания", ДиалогРасписания)));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРасчетаПоказателейПрогнозаЗавершение(Расписание, ДополнительныеПараметры) Экспорт
    
    ДиалогРасписания = ДополнительныеПараметры.ДиалогРасписания;
    
    
    Если Расписание <> Неопределено Тогда
        
        Если РасписаниеРасчетаПоказателейПрогноза <> ДиалогРасписания.Расписание Тогда
            Модифицированность = Истина;
            РасписаниеРасчетаПоказателейПрогноза = ДиалогРасписания.Расписание;
            Элементы.РасписаниеСтрокой.Заголовок = Строка(РасписаниеРасчетаПоказателейПрогноза);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеСозданияЗаданийНаОтбор(Команда)
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеСозданияЗаданийНаОтбор);
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеСозданияЗаданийНаОтборЗавершение", ЭтотОбъект, Новый Структура("ДиалогРасписания", ДиалогРасписания)));
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеСозданияЗаданийНаОтборЗавершение(Расписание, ДополнительныеПараметры) Экспорт
    
    ДиалогРасписания = ДополнительныеПараметры.ДиалогРасписания;
    
    
    Если Расписание <> Неопределено Тогда
        
        Если РасписаниеСозданияЗаданийНаОтбор <> ДиалогРасписания.Расписание Тогда
            Модифицированность = Истина;
            РасписаниеСозданияЗаданийНаОтбор   						  	= ДиалогРасписания.Расписание;
            Элементы.РасписаниеСозданияЗаданийНаОтборСтрокой.Заголовок  = Строка(РасписаниеСозданияЗаданийНаОтбор);
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиОповещений

&НаКлиенте
Процедура РедактированияРегламентногоЗаданияНаСозданиеПересчетовЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	Действие = "";
	Результат.Свойство("Действие",Действие);
	Если Действие = "Отмена" Тогда
		// действия при закрытии формы по кнопке "Отмена"
		Возврат;
	ИначеЕсли Действие = "ЗакрытьИСохранитьРегламентноеЗадание" Тогда
		// действия при закрытии формы по кнопке "Закрыть и сохранить регламентное задание"
		Модифицированность = Истина;
		
		ДействиеНадРегламентнымЗаданием = "";
		Результат.Свойство("ДействиеНадРегламентнымЗаданием",ДействиеНадРегламентнымЗаданием);
		Если ДействиеНадРегламентнымЗаданием = "Скопировать" ИЛИ ДействиеНадРегламентнымЗаданием = "Добавить" Тогда
			СтрокаТаблицыРегламентныхЗаданий = ТаблицаРегламентныхЗаданийПересчетов.Добавить();
			СтрокаТаблицыРегламентныхЗаданий.ОтображатьВСписке = Истина;
			СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Создание";
			СтрокаТаблицыРегламентныхЗаданий.Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ИначеЕсли ДействиеНадРегламентнымЗаданием = "Редактировать" Тогда
			СтрокаТаблицыРегламентныхЗаданий = Элементы.РегламентныеЗаданияПересчетов.ТекущиеДанные;
			СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = ?(СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Создание","Создание","Изменение");
		КонецЕсли;
			
		Результат.Свойство("РасписаниеРегламентногоЗадания",				СтрокаТаблицыРегламентныхЗаданий.Расписание);
		Результат.Свойство("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	СтрокаТаблицыРегламентныхЗаданий.ИнтервалПовтораПриАварийномЗавершении);
		Результат.Свойство("ПриОшибкахПовторятьРегламентноеЗадание",		СтрокаТаблицыРегламентныхЗаданий.КоличествоПовторовПриАварийномЗавершении);
		Результат.Свойство("НаименованиеРегламентногоЗадания",				СтрокаТаблицыРегламентныхЗаданий.Наименование);
		Результат.Свойство("НастройкиСозданияПересчетов",					СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов);
		СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов.Вставить("Склад", Запись.Склад);
		СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПересчетов.Вставить("Помещение", Запись.Помещение);
	КонецЕсли;
	
	ОбновитьИнформациюОСостоянииРегламентныхЗаданийНаСозданиеПересчетовСервер();
КонецПроцедуры

&НаКлиенте
Процедура РедактированияРегламентногоЗаданияНаСозданиеПеремещенийЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	Действие = "";
	Результат.Свойство("Действие",Действие);
	Если Действие = "Отмена" Тогда
		// действия при закрытии формы по кнопке "Отмена"
		Возврат;
	ИначеЕсли Действие = "ЗакрытьИСохранитьРегламентноеЗадание" Тогда
		// действия при закрытии формы по кнопке "Закрыть и сохранить регламентное задание"
		Модифицированность = Истина;
		
		ДействиеНадРегламентнымЗаданием = "";
		Результат.Свойство("ДействиеНадРегламентнымЗаданием",ДействиеНадРегламентнымЗаданием);
		Если ДействиеНадРегламентнымЗаданием = "Скопировать" ИЛИ ДействиеНадРегламентнымЗаданием = "Добавить" Тогда
			СтрокаТаблицыРегламентныхЗаданий = ТаблицаРегламентныхЗаданийПеремещений.Добавить();
			СтрокаТаблицыРегламентныхЗаданий.ОтображатьВСписке = Истина;
			СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Создание";
			СтрокаТаблицыРегламентныхЗаданий.Идентификатор = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		ИначеЕсли ДействиеНадРегламентнымЗаданием = "Редактировать" Тогда
			СтрокаТаблицыРегламентныхЗаданий = Элементы.РегламентныеЗаданияПеремещений.ТекущиеДанные;
			СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = 
				?(СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Создание", 
					"Создание", 
					"Изменение");
		КонецЕсли;
			
		Результат.Свойство("РасписаниеРегламентногоЗадания",				СтрокаТаблицыРегламентныхЗаданий.Расписание);
		Результат.Свойство("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	СтрокаТаблицыРегламентныхЗаданий.ИнтервалПовтораПриАварийномЗавершении);
		Результат.Свойство("ПриОшибкахПовторятьРегламентноеЗадание",		СтрокаТаблицыРегламентныхЗаданий.КоличествоПовторовПриАварийномЗавершении);
		Результат.Свойство("НаименованиеРегламентногоЗадания",				СтрокаТаблицыРегламентныхЗаданий.Наименование);
		Результат.Свойство("НастройкиСозданияПеремещений",					СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПеремещений);
		СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПеремещений.Вставить("Склад", Запись.Склад);
		СтрокаТаблицыРегламентныхЗаданий.НастройкиСозданияПеремещений.Вставить("Помещение", Запись.Помещение);
	КонецЕсли;
	
	ОбновитьИнформациюОСостоянииРегламентныхЗаданийНаСозданиеПеремещенийСервер();
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступность(Форма)
	Форма.Элементы.КоличествоДнейАнализа.Доступность              = Форма.Запись.ИспользоватьПрогнозРасходаУпаковок;
	Форма.Элементы.МинимальнаяВероятностьОтгрузки.Доступность     = Форма.Запись.ИспользоватьПрогнозРасходаУпаковок;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаX.Доступность = Форма.Запись.ИспользоватьПрогнозРасходаУпаковок;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаY.Доступность = Форма.Запись.ИспользоватьПрогнозРасходаУпаковок;
	Форма.Элементы.УровеньОбслуживанияУпаковокКлассаZ.Доступность = Форма.Запись.ИспользоватьПрогнозРасходаУпаковок;
	
	Форма.Элементы.НастроитьРасписаниеРасчетаПоказателейПрогноза.Доступность        = Форма.Запись.ИспользоватьПрогнозРасходаУпаковок;
	Форма.Элементы.НастроитьРасписаниеСозданияЗаданийНаОтбор.Доступность    		= Форма.Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаОтбор;
	Форма.Элементы.ДопНастройкиСозданияЗаданийНаОтбор.Доступность					= Форма.Запись.ИспользоватьРегламентноеЗаданиеСозданияЗаданийНаОтбор;
	
	Форма.Элементы.РабочийУчасток.Доступность 				= Форма.Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "ПоОдномуРабочемуУчастку";
	Форма.Элементы.ОграничениеПоОбъему.Доступность 			= Форма.Запись.ОграничиватьПоОбъемуОтбор;
	Форма.Элементы.ЕдиницаИзмеренияОбъема.Доступность 		= Форма.Запись.ОграничиватьПоОбъемуОтбор;
	Форма.Элементы.ОграничениеПоВесу.Доступность			= Форма.Запись.ОграничиватьПоВесуОтбор;
	Форма.Элементы.ЕдиницаИзмеренияВеса.Доступность			= Форма.Запись.ОграничиватьПоВесуОтбор;
	
	Если Форма.Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "СРазбиениемПоРабочимУчасткам" Тогда
		Форма.Элементы.ГруппаНастройкиОграничения.ТекущаяСтраница = Форма.Элементы.СтраницаОграничиватьНадпись;
	Иначе
		Форма.Элементы.ГруппаНастройкиОграничения.ТекущаяСтраница = Форма.Элементы.СтраницаОграничиватьФлаги;
	КонецЕсли;
	
	Форма.Элементы.РегламентныеЗаданияПеремещений.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВСписке", Истина);
	Форма.Элементы.РегламентныеЗаданияПересчетов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОтображатьВСписке", Истина);
	 
КонецПроцедуры

&НаСервере
Процедура УстановитьУмолчания()
	
	Если Не ЗначениеЗаполнено(Запись.РабочийУчастокОтбор) Тогда
		Запись.РабочийУчастокОтбор = Справочники.РабочиеУчастки.РабочийУчастокПоУмолчанию(Запись.Склад,Запись.Помещение);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Запись.НастройкаФормированияПоРабочимУчасткамОтбор)
		Или Не СкладыСервер.ИспользоватьРабочиеУчастки(Запись.Склад, Запись.Помещение) Тогда
		Запись.НастройкаФормированияПоРабочимУчасткамОтбор = "БезРазбиенияПоРабочимУчасткам";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РабочийУчастокОтборПриИзмененииСервер()
	ЗаполнитьОграниченияПоРабочемуУчасткуОтбор();
	УстановитьДоступность(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОграниченияПоРабочемуУчасткуОтбор()
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Запись.РабочийУчастокОтбор,
	"ОграничиватьПоВесу,ОграничениеПоВесу,ОграничиватьПоОбъему,ОграничениеПоОбъему");
	
	Запись.ОграничиватьПоВесуОтбор = ЗначенияРеквизитов.ОграничиватьПоВесу;
	Запись.ОграничениеПоВесуОтбор = ЗначенияРеквизитов.ОграничениеПоВесу;
	Запись.ОграничиватьПоОбъемуОтбор = ЗначенияРеквизитов.ОграничиватьПоОбъему;
	Запись.ОграничениеПоОбъемуОтбор = ЗначенияРеквизитов.ОграничениеПоОбъему; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПересчетов(Действие)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад", Запись.Склад);
	ПараметрыФормы.Вставить("Помещение", Запись.Помещение);
	ПараметрыФормы.Вставить("ДействиеНадРегламентнымЗаданием",Действие);
	ТекущиеДанные = Элементы.РегламентныеЗаданияПересчетов.ТекущиеДанные;
	Если Действие = "Редактировать" ИЛИ Действие = "Скопировать" Тогда
		ПараметрыФормы.Вставить("НаименованиеРегламентногоЗадания", 			ТекущиеДанные.Наименование);
		ПараметрыФормы.Вставить("РасписаниеРегламентногоЗадания",				ТекущиеДанные.Расписание);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьРегламентноеЗадание", 		ТекущиеДанные.КоличествоПовторовПриАварийномЗавершении);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	ТекущиеДанные.ИнтервалПовтораПриАварийномЗавершении);
		Если ТекущиеДанные.НастройкиСозданияПересчетов = Неопределено Тогда
			ПараметрыФормы.Вставить("НастройкиСозданияПересчетов", 
				Новый Структура("ПересчетПоНаполненности,ПересчетПоОсобымУсловиям,
					|ПересчетСомнительныхЯчеек,ПересчетПоНастройкамПериодичности,ПересчетПоЯчейкамСОтрицательнымиОстатками,НастройкиОтбора,
					|РазбиватьПоРабочимУчасткам,РазбиватьПоКоличествуЯчеек,КоличествоЯчеекВЗадании"));
		Иначе
			ПараметрыФормы.Вставить("НастройкиСозданияПересчетов", ТекущиеДанные.НастройкиСозданияПересчетов);
		КонецЕсли;
	Иначе // "Добавить"
		НаименованиеРегламентногоЗадания = НСтр("ru = 'Создание заданий на пересчет товаров на складе ""%ПредставлениеСклада%""'");
		НаименованиеРегламентногоЗадания = СтрЗаменить(НаименованиеРегламентногоЗадания, "%ПредставлениеСклада%" , ПолучитьПредставлениеСклада(Запись.Склад,
																														Запись.Помещение));
		ПараметрыФормы.Вставить("НаименованиеРегламентногоЗадания", 			НаименованиеРегламентногоЗадания);
		ПараметрыФормы.Вставить("РасписаниеРегламентногоЗадания",				Новый РасписаниеРегламентногоЗадания);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьРегламентноеЗадание", 		0);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	0);
		ПараметрыФормы.Вставить("НастройкиСозданияПересчетов", 					
			Новый Структура("ПересчетПоНаполненности,ПересчетПоОсобымУсловиям,
				|ПересчетСомнительныхЯчеек,ПересчетПоНастройкамПериодичности,ПересчетПоЯчейкамСОтрицательнымиОстатками,НастройкиОтбора,
				|РазбиватьПоРабочимУчасткам,РазбиватьПоКоличествуЯчеек,КоличествоЯчеекВЗадании"));
	КонецЕсли;
	
	ОповещениеОкончаниеРедактированияРегламентногоЗаданияСозданияПересчетов = 
		Новый ОписаниеОповещения("РедактированияРегламентногоЗаданияНаСозданиеПересчетовЗавершение", ЭтаФорма);
		
	ОткрытьФорму("Документ.ПересчетТоваров.Форма.ФормаНастроекСозданияЗаданийНаПересчет", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОповещениеОкончаниеРедактированияРегламентногоЗаданияСозданияПересчетов, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавлениеИзменениеРегламентногоЗаданияНаСозданиеПеремещений(Действие)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Склад", Запись.Склад);
	ПараметрыФормы.Вставить("Помещение", Запись.Помещение);
	ПараметрыФормы.Вставить("ДействиеНадРегламентнымЗаданием", Действие);
	ТекущиеДанные = Элементы.РегламентныеЗаданияПеремещений.ТекущиеДанные;
	Если Действие = "Редактировать" ИЛИ Действие = "Скопировать" Тогда
		ПараметрыФормы.Вставить("НаименованиеРегламентногоЗадания", 			ТекущиеДанные.Наименование);
		ПараметрыФормы.Вставить("РасписаниеРегламентногоЗадания",				ТекущиеДанные.Расписание);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьРегламентноеЗадание", 		ТекущиеДанные.КоличествоПовторовПриАварийномЗавершении);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	ТекущиеДанные.ИнтервалПовтораПриАварийномЗавершении);
		Если ТекущиеДанные.НастройкиСозданияПеремещений = Неопределено Тогда
			ПараметрыФормы.Вставить("НастройкиСозданияПеремещений", 
				Новый Структура(
					"НастройкаФормированияПоРабочимУчасткам, ОграничениеПоВесу,
					|ОграничениеПоОбъему, ОграничиватьПоВесу, ОграничиватьПоОбъему, 
					|ПравилоСозданияЗаданий, РабочийУчасток
					|"));
		Иначе
			ПараметрыФормы.Вставить("НастройкиСозданияПеремещений", ТекущиеДанные.НастройкиСозданияПеремещений);
		КонецЕсли;
	Иначе // "Добавить"
		
		ПараметрыФормы.Вставить("НаименованиеРегламентногоЗадания", 			"");
		ПараметрыФормы.Вставить("РасписаниеРегламентногоЗадания",				Новый РасписаниеРегламентногоЗадания);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьРегламентноеЗадание", 		0);
		ПараметрыФормы.Вставить("ПриОшибкахПовторятьЧерезРегламентноеЗадание",	0);
		ПараметрыФормы.Вставить("НастройкиСозданияПеремещений",
			Новый Структура(
					"НастройкаФормированияПоРабочимУчасткам, ОграничениеПоВесу,
					|ОграничениеПоОбъему, ОграничиватьПоВесу, ОграничиватьПоОбъему, 
					|ПравилоСозданияЗаданий, РабочийУчасток,
					|"));
	КонецЕсли;
	
	ОповещениеОкончаниеРедактированияРегламентногоЗаданияСозданияПеремещений = 
		Новый ОписаниеОповещения("РедактированияРегламентногоЗаданияНаСозданиеПеремещенийЗавершение", ЭтаФорма);
		
	ОткрытьФорму("РегистрСведений.НастройкиАдресныхСкладов.Форма.ФормаНастроекСозданияЗаданийНаПеремещение", 
		ПараметрыФормы, 
		ЭтаФорма,,,,
		ОповещениеОкончаниеРедактированияРегламентногоЗаданияСозданияПеремещений, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеСклада(Склад, Помещение = "")
	Возврат СкладыСервер.ПолучитьПредставлениеСклада(Склад, Помещение);
КонецФункции

&НаСервере
Процедура ОбновитьИнформациюОСостоянииРегламентныхЗаданийНаСозданиеПересчетовСервер()
	
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданийПересчетов Цикл
		Если СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Изменение" 
			ИЛИ СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "" Тогда
			ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПересчетов(
				СтрокаТаблицыРегламентныхЗаданий.Идентификатор,
				СтрокаТаблицыРегламентныхЗаданий.ДатаОкончания, 
				СтрокаТаблицыРегламентныхЗаданий.СостояниеВыполнения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОСостоянииРегламентныхЗаданийНаСозданиеПеремещенийСервер()
	
	Для Каждого СтрокаТаблицыРегламентныхЗаданий Из ТаблицаРегламентныхЗаданийПеремещений Цикл
		Если СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "Изменение" 
			ИЛИ СтрокаТаблицыРегламентныхЗаданий.СостояниеМодификации = "" Тогда
			ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПеремещений(
				СтрокаТаблицыРегламентныхЗаданий.Идентификатор,
				СтрокаТаблицыРегламентныхЗаданий.ДатаОкончания, 
				СтрокаТаблицыРегламентныхЗаданий.СостояниеВыполнения);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПересчетов(Знач ИдентификаторЗадания, ДатаОкончания, СостояниеВыполнения, Знач УстанавливатьПривилегированныйРежим = Истина)
	
	Если УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТекущееРегламентноеЗадание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	СвойстваПоследнегоФоновогоЗадания = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(ТекущееРегламентноеЗадание);
	
	Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда	
		ТекстНеОпределено 	= РегламентныеЗаданияСлужебный.ТекстНеОпределено();
		ДатаОкончания       = ТекстНеОпределено;
		СостояниеВыполнения = ТекстНеОпределено;	
	Иначе
		ДатаОкончания       = ?(ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения), СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения, "<>");
		СостояниеВыполнения = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьИнформациюОСостоянииРегламентногоЗаданияНаСозданиеПеремещений(Знач ИдентификаторЗадания, ДатаОкончания, СостояниеВыполнения, Знач УстанавливатьПривилегированныйРежим = Истина)
	
	Если УстанавливатьПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТекущееРегламентноеЗадание = РегламентныеЗаданияСервер.Задание(ИдентификаторЗадания);
	СвойстваПоследнегоФоновогоЗадания = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(ТекущееРегламентноеЗадание);
	
	Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда	
		ТекстНеОпределено 	= РегламентныеЗаданияСлужебный.ТекстНеОпределено();
		ДатаОкончания       = ТекстНеОпределено;
		СостояниеВыполнения = ТекстНеОпределено;	
	Иначе
		ДатаОкончания       = ?(ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения), СвойстваПоследнегоФоновогоЗадания.ДатаЗавершения, "<>");
		СостояниеВыполнения = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеРегламентногоЗадания(ПараметрыЗадания, ТипЗадания = "ЗаданиеПересчета")
	
	НаименованиеЗадания = "";
	
	Если ТипЗадания = "ЗаданиеПересчета" Тогда
		НаименованиеЗадания = НСтр("ru = 'Создание заданий на пересчет товаров на складе ""%ПредставлениеСклада%""'");
		НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания,
											"%ПредставлениеСклада%",
											ПолучитьПредставлениеСклада(ПараметрыЗадания.Склад, ПараметрыЗадания.Помещение));
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Создание заданий на перемещение ""%Правило%"" для склада ""%ПредставлениеСклада%""'");
		НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания,
											"%Правило%",
											СформироватьНаименованиеПравилаДляРегЗадания(ПараметрыЗадания.ПравилоСозданияЗаданий));
		НаименованиеЗадания = СтрЗаменить(НаименованиеЗадания,
											"%ПредставлениеСклада%",
											ПолучитьПредставлениеСклада(ПараметрыЗадания.Склад, ПараметрыЗадания.Помещение));
	КонецЕсли;
	
	Возврат НаименованиеЗадания;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьНаименованиеПравилаДляРегЗадания(ПравилоСозданияЗаданий)
	
	Если ПравилоСозданияЗаданий = Перечисления.ПравилаСозданияЗаданийНаОтборРазмещение.ПеремещениеПоПравиламРазмещенияОбособленныхТоваров Тогда
		Возврат НСтр("ru = 'Размещение обособленных товаров'");
	ИначеЕсли ПравилоСозданияЗаданий = Перечисления.ПравилаСозданияЗаданийНаОтборРазмещение.ПодпиткаЗонБыстрогоОтбора Тогда
		Возврат НСтр("ru = 'Подпитка зон быстрого отбора'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#КонецОбласти
