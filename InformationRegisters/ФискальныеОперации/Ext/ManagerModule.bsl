#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Менеджер = "РегистрСведений.ФискальныеОперации";
	МенеджерОборудованияВызовСервераПереопределяемый.ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОчиститьРегистрДоДаты(ДатаОчистки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// АПК: 1328-выкл
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписи
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.Дата < &ДатаОчистки";
	
	Запрос.УстановитьПараметр("ДатаОчистки", ДатаОчистки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ФискальныеОперации.СоздатьНаборЗаписей();
	Выборка      = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Очистить();
		НаборЗаписей.Отбор.ИдентификаторЗаписи.Установить(Выборка.ИдентификаторЗаписи);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	// АПК: 1328-вкл
	
КонецПроцедуры

Функция ДанныеЗаписиДляТехПоддержки(ИдентификаторФискальнойЗаписи) Экспорт
	
	// ++ Локализация
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФискальныеОперации.ДокументОснование КАК ДокументОснование,
		|	ФискальныеОперации.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
		|	ФискальныеОперации.Дата КАК Дата,
		|	ФискальныеОперации.Организация КАК Организация,
		|	ФискальныеОперации.ТорговыйОбъект КАК ТорговыйОбъект,
		|	ФискальныеОперации.ТипДокумента КАК ТипДокумента,
		|	ФискальныеОперации.ТипРасчета КАК ТипРасчета,
		|	ФискальныеОперации.НомерЧекаККМ КАК НомерЧекаККМ,
		|	ФискальныеОперации.НомерСменыККМ КАК НомерСменыККМ,
		|	ФискальныеОперации.ФискальныйПризнак КАК ФискальныйПризнак,
		|	ФискальныеОперации.Сумма КАК Сумма,
		|	ФискальныеОперации.ОплатаНаличные КАК ОплатаНаличные,
		|	ФискальныеОперации.ОплатаЭлектронно КАК ОплатаЭлектронно,
		|	ФискальныеОперации.ОплатаПостоплата КАК ОплатаПостоплата,
		|	ФискальныеОперации.ОплатаПредоплата КАК ОплатаПредоплата,
		|	ФискальныеОперации.ОплатаВстречноеПредоставление КАК ОплатаВстречноеПредоставление,
		|	ФискальныеОперации.АдресСайтаПроверки КАК АдресСайтаПроверки,
		|	ФискальныеОперации.ЗаводскойНомерФН КАК ЗаводскойНомерФН,
		|	ФискальныеОперации.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
		|	ФискальныеОперации.ДополнительныйРеквизит КАК ДополнительныйРеквизит,
		|	ФискальныеОперации.КорректируемыйДокумент КАК КорректируемыйДокумент,
		|	ФискальныеОперации.ДанныеXML КАК ДанныеXML,
		|	ФискальныеОперации.СубъектПерсональныхДанных КАК СубъектПерсональныхДанных,
		|	ФискальныеОперации.ЕдиныйЧек КАК ЕдиныйЧек,
		|	ФискальныеОперации.ИдентификаторОплатыПлатежнойСистемы КАК ИдентификаторОплатыПлатежнойСистемы,
		|	ФискальныеОперации.ТипПлатежнойСистемы КАК ТипПлатежнойСистемы,
		|	ОперацииПроверкиКМ.ИдентификаторСессии КАК ИдентификаторСессии,
		|	ОперацииПроверкиКМ.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
		|	ОперацииПроверкиКМ.ИдентификаторФискальнойОперации КАК ИдентификаторФискальнойОперации,
		|	ОперацииПроверкиКМ.ГодМесяц КАК ГодМесяц,
		|	ОперацииПроверкиКМ.ЗапросКодаМаркировки КАК ЗапросКодаМаркировки,
		|	ОперацииПроверкиКМ.РезультатПроверкиКМНаККТ КАК РезультатПроверкиКМНаККТ,
		|	ОперацииПроверкиКМ.РезультатПроверкиКМНаСервере КАК РезультатПроверкиКМНаСервере,
		|	ОперацииПроверкиКМ.РезультатЗапросаРазрешения КАК РезультатЗапросаРазрешения,
		|	ОперацииПроверкиКМ.ФлагиПроверкиОИСМ КАК ФлагиПроверкиОИСМ,
		|	ОперацииПроверкиКМ.ПокупкаПодтверждена КАК ПокупкаПодтверждена,
		|	ОперацииПроверкиКМ.Наименование КАК Наименование,
		|	ОперацииПроверкиКМ.ИдентификаторЗапросаРазрешения КАК ИдентификаторЗапросаРазрешения,
		|	ОперацииПроверкиКМ.ВремяЗапросаРазрешения КАК ВремяЗапросаРазрешения,
		|	ОперацииПроверкиКМ.КодОтветаРазрешения КАК КодОтветаРазрешения,
		|	ОперацииПроверкиКМ.Дата КАК Дата1,
		|	ОперацииПроверкиКМ.Результат КАК Результат,
		|	ОперацииПроверкиКМ.КодМаркировки КАК КодМаркировки,
		|	ОперацииПроверкиКМ.КодМаркировкиПредставление КАК КодМаркировкиПредставление,
		|	ОперацииПроверкиКМ.Штрихкод КАК Штрихкод,
		|	ОперацииПроверкиКМ.ТекстЗапросаРазрешения КАК ТекстЗапросаРазрешения
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОперацииПроверкиКМ КАК ОперацииПроверкиКМ
		|		ПО ФискальныеОперации.ИдентификаторЗаписи = ОперацииПроверкиКМ.ИдентификаторФискальнойОперации
		|ГДЕ
		|	ФискальныеОперации.ИдентификаторЗаписи = &ИдентификаторЗаписи";
	
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторФискальнойЗаписи);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивХранилищФискальныеЗаписи = Новый Массив();
	РезультатФискальнаяЗапись = ОбщегоНазначенияБПО.СтруктураИзМетаданныхРегистраСведений(
		Метаданные.РегистрыСведений.ФискальныеОперации, МассивХранилищФискальныеЗаписи);
	МассивХранилищОперацииПроверкиКМ = Новый Массив();
	РезультатПроверкаКМ = ОбщегоНазначенияБПО.СтруктураИзМетаданныхРегистраСведений(
		Метаданные.РегистрыСведений.ОперацииПроверкиКМ, МассивХранилищОперацииПроверкиКМ);
	ПерваяСтрока = Истина;
	Пока Выборка.Следующий() Цикл
		Если ПерваяСтрока Тогда
			ЗаполнитьЗначенияСвойств(РезультатФискальнаяЗапись, Выборка);
			Для Каждого Имя Из МассивХранилищФискальныеЗаписи Цикл
				РезультатФискальнаяЗапись.Вставить(Имя, Выборка[Имя].Получить());
			КонецЦикла;
			РезультатФискальнаяЗапись.Вставить("ОперацииПроверкиКМ", Новый Массив());
			ПерваяСтрока = Ложь;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ИдентификаторЗапроса) Тогда
			ЗаполнитьЗначенияСвойств(РезультатПроверкаКМ, Выборка);
			Для Каждого Имя Из МассивХранилищОперацииПроверкиКМ Цикл
				РезультатПроверкаКМ.Вставить(Имя, Выборка[Имя].Получить());
			КонецЦикла;
			РезультатФискальнаяЗапись.ОперацииПроверкиКМ.Добавить(РезультатПроверкаКМ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатФискальнаяЗапись;
	// -- Локализация
	
КонецФункции


#КонецОбласти

#КонецЕсли

