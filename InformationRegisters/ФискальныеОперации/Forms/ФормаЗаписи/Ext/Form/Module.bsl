#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Реквизиты = ОборудованиеЧекопечатающиеУстройства.ДанныеФискальнойОперации(Запись.ДокументОснование, Запись.ИдентификаторЗаписи);
	Если Реквизиты <> Неопределено Тогда
		ТекстСообщенияXML = Реквизиты.ДанныеXML.Получить();
	КонецЕсли;
	
	Элементы.КорректируемыйДокумент.Видимость = Не ПустаяСтрока(Запись.КорректируемыйДокумент);
	
	Если ЗначениеЗаполнено(ТекстСообщенияXML) 
		И (Реквизиты.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧек 
		Или Реквизиты.ТипДокумента = Перечисления.ТипыФискальныхДокументовККТ.КассовыйЧекКоррекции)
	Тогда
		ПараметрыФорматирования = Новый ПараметрыЗаписиXML("UTF-8", "1.0", Истина, Истина, "  ");
		ТекстXML.УстановитьТекст(ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования));
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Элементы.Дополнительно.Видимость = Истина;
		
		ОбщиеПараметры = ОборудованиеЧекопечатающиеУстройства.ЗагрузитьДанныеФискализацииИзXML(ТекстСообщенияXML);
		ОбщиеПараметры.ДатаВремя = Реквизиты.Дата;
		Если ЗначениеЗаполнено(ОбщиеПараметры.ПокупательEmail) Тогда
			ЭлектроннаяПочта = ОбщиеПараметры.ПокупательEmail;
		Иначе
			ЭлектроннаяПочта = ПустаяСтрокаПочты();
		КонецЕсли;
		
		ШиринаЧека = 42;
		Шаблон = ШаблоныФискальныхДокументов.ШаблонКассовыйЧек(ШиринаЧека, ОбщиеПараметры, Реквизиты);
		ШаблоныФискальныхДокументов.СформироватьДокументПоШаблону(Шаблон);
		ТабличныйДокумент = ШаблоныФискальныхДокументов.ВывестиКакТабличныйДокумент(Шаблон);
		
	Иначе
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.Дополнительно.Видимость = Ложь;
		Элементы.ГруппаДокументы.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПО.ИспользуетсяМаркировка() Тогда
		// ++ Локализация
		СписокПроверкиКМ.ТекстЗапроса = ТекстЗапросаСписокОперацийКМ();
		СписокПроверкиКМ.ОсновнаяТаблица = "РегистрСведений.ОперацииПроверкиКМ";
		СписокПроверкиКМ.ДинамическоеСчитываниеДанных = Истина;
		СписокПроверкиКМ.Параметры.УстановитьЗначениеПараметра("ИдентификаторФискальнойОперации", Запись.ИдентификаторЗаписи);
		ВиртуальныеПоля = Новый Массив();
		ВиртуальныеПоля.Добавить("РезультатПроверкиОИСМ");
		ВиртуальныеПоля.Добавить("ТипКода");
		СписокПроверкиКМ.УстановитьОграниченияИспользованияВГруппировке(ВиртуальныеПоля);
		СписокПроверкиКМ.УстановитьОграниченияИспользованияВОтборе(ВиртуальныеПоля);
		СписокПроверкиКМ.УстановитьОграниченияИспользованияВПорядке(ВиртуальныеПоля);
		// -- Локализация
	Иначе
		Элементы.ПроверкаКМ.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаСообщениеВТехПоддержку.Видимость = ОбщегоНазначенияБПО.ИспользуетсяСообщенияВСлужбуТехническойПоддержки()
			И ОбщегоНазначенияБПОСлужебныйВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
	
	МенеджерОборудованияВызовСервераПереопределяемый.ЭкземплярФискальныеОперацииПриСозданииНаСервере(Запись, ЭтаФорма, Отказ,  Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяСообщенияВСлужбуТехническойПоддержки() Тогда
		МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиБПОКлиент");
		Элементы.ФормаСообщениеВТехПоддержку.Видимость
			= МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.ОтправлятьСообщенияВТехПоддержку();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Вызов БСП
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначенияБПО.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	// Конец Вызов БСП
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Вызов БСП
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначенияБПО.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначенияБПО.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	// Конец Вызов БСП
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	МенеджерОборудованияКлиентПереопределяемый.ФормаЗаписиФискальныеОперацииОбработкаНавигационнойСсылки(
		Запись, ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервереБезКонтекста
Процедура ОтправитьЭлектронныйЧекНаСервере(ПараметрыЧека, ТекстСообщения, ПокупательEmail, ПокупательНомер)
	
	МодульРассылкаЭлектронныхЧеков = ОбщегоНазначенияБПО.ОбщийМодуль("РассылкаЭлектронныхЧеков");
	МодульРассылкаЭлектронныхЧеков.ОтправитьЭлектронныйЧек(
			ПараметрыЧека,
			ТекстСообщения, 
			ПокупательEmail,
			ПокупательНомер);
			
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаПочту(Команда)
	
	Если ЭлектроннаяПочта = ПустаяСтрокаПочты() Тогда   
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(НСтр("ru = 'Электронная почта не указана.'"));
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяРассылкаЭлектронныхЧеков() Тогда
		ПараметрыЧека = Новый Структура();
		ПараметрыЧека.Вставить("НомерЧекаККТ", Запись.НомерЧекаККМ);
		ПараметрыЧека.Вставить("ИдентификаторФискальнойЗаписи", Запись.ИдентификаторЗаписи);
		ТекстСообщения = "";
		ОтправитьЭлектронныйЧекНаСервере(
			ПараметрыЧека,
			ТекстСообщения, 
			ЭлектроннаяПочта,
			"");
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(НСтр("ru = 'Электронный чек отправлен.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьPDF(Команда)
	
	// АПК: 1348-выкл БСП может не использоваться
	Оповещение = Новый ОписаниеОповещения("СохранитьPDF_ДиалогВыбораФайла", ЭтотОбъект);
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Расширение = "pdf";
	Диалог.Фильтр = "Файлы PDF (*.pdf)|*.pdf|Все файлы|*.*";
	Диалог.Показать(Оповещение);
	// АПК: 1348-вкл
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьPDF_ДиалогВыбораФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = Результат[0];
	ТабличныйДокумент.НачатьЗапись(Новый ОписаниеОповещения("СохранитьPDF_Завершение", ЭтотОбъект), ИмяФайла, ТипФайлаТабличногоДокумента.PDF);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьPDF_Завершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(НСтр("ru = 'Не удалось записать файл.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКопииЧека(Команда)

	ПараметрыОперации = ОборудованиеЧекопечатающиеУстройстваКлиентСервер.ПараметрыПечатьКопииЧека();  
	ПараметрыОперации.ФискальныйПризнак = Запись.ФискальныйПризнак;     
	ПараметрыОперации.Аппаратно = Ложь;
	ПараметрыОперации.НомерЧека = Запись.НомерЧекаККМ;   
	
	Доступность = Ложь;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПечатьКопииЧека_Завершение", ЭтотОбъект);
	ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьПечатьКопииЧека(ОповещениеПриЗавершении, УникальныйИдентификатор, Неопределено, ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКопииЧека_Завершение(РезультатВыполнения, Параметры) Экспорт
	
	Доступность = Истина;
	
	ОчиститьСообщения();
	
	Если НЕ РезультатВыполнения.Результат Тогда
		ТекстСообщения = РезультатВыполнения.ОписаниеОшибки;
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти                 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АдресПочтыНажатие(Элемент, СтандартнаяОбработка)    
	
	СтандартнаяОбработка = Ложь;
	Строка = ?(ЭлектроннаяПочта = ПустаяСтрокаПочты(), "", ЭлектроннаяПочта);;
	Оповещение = Новый ОписаниеОповещения("АдресПочтыНажатиеЗавершение", ЭтотОбъект);
	ПоказатьВводСтроки(Оповещение, Строка, НСтр("ru = 'Электронная почта для отправки'"));  
	
КонецПроцедуры

&НаКлиенте
Процедура АдресПочтыНажатиеЗавершение(Строка, ДополнительныеПараметры) Экспорт
	
	Если Строка = Неопределено Тогда
		ЭлектроннаяПочта = ЭлектроннаяПочта;
	Иначе
		Если ПустаяСтрока(Строка) Тогда
			ЭлектроннаяПочта = ПустаяСтрокаПочты();
		Иначе
			ЭлектроннаяПочта = Строка;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти                 

#Область СлужебныеПроцедурыИФункции

// Форматирует текст сообщения в формате XML
//
&НаСервере
Функция ФорматироватьXMLСПараметрами(ТекстСообщенияXML, ПараметрыФорматирования)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстСообщенияXML);
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(ПараметрыФорматирования);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПустаяСтрокаПочты()
	
	Возврат НСтр("ru = '<не задано>'"); 

КонецФункции

&НаСервереБезКонтекста
Процедура СписокПроверкиКМПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	МодульМенеджерОборудованияМаркировка = ОбщегоНазначенияБПО.ОбщийМодуль("МенеджерОборудованияМаркировка");
	МодульМенеджерОборудованияМаркировка.ПриПолученииДанныхСпискаОперацийПроверкиКМ(ИмяЭлемента, Настройки, Строки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияДляТехподдержки(ИдентификаторФискальнойЗаписи)
	
	Возврат РегистрыСведений.ФискальныеОперации.ДанныеЗаписиДляТехПоддержки(ИдентификаторФискальнойЗаписи);
	
КонецФункции

&НаКлиенте
Процедура СообщениеВТехПоддержку(Команда)
	
	МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиБПОКлиент");
	ПараметрыСообщения = МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.ПараметрыОтправкиСообщенияОбОшибке();
	ПараметрыСообщения.ДополнительныеДанные = СведенияДляТехподдержки(Запись.ИдентификаторЗаписи);
	
	ПараметрыСообщения.ТекстОшибки = НСтр("ru = 'Информация о фискальной операции для тех.поддержки'");
	ОписаниеОповещения = Новый ОписаниеОповещения("СообщениеВТехническуюПоддержкуЗавершение", ЭтотОбъект);
	МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.НачатьОтправкуСообщенияОбОшибке(ОписаниеОповещения, ПараметрыСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеВТехническуюПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(Результат.КодОшибки) Тогда
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(Результат.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры 

// ++ Локализация

&НаСервере
Функция ТекстЗапросаСписокОперацийКМ()

	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегистрСведенийОперацииПроверкиКМ.ИдентификаторСессии КАК ИдентификаторСессии,
	               |	РегистрСведенийОперацииПроверкиКМ.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	               |	РегистрСведенийОперацииПроверкиКМ.ИдентификаторФискальнойОперации КАК ИдентификаторФискальнойОперации,
	               |	РегистрСведенийОперацииПроверкиКМ.ГодМесяц КАК ГодМесяц,
	               |	РегистрСведенийОперацииПроверкиКМ.ЗапросКодаМаркировки КАК ЗапросКодаМаркировки,
	               |	РегистрСведенийОперацииПроверкиКМ.РезультатПроверкиКМНаККТ КАК РезультатПроверкиКМНаККТ,
	               |	РегистрСведенийОперацииПроверкиКМ.РезультатПроверкиКМНаСервере КАК РезультатПроверкиКМНаСервере,
	               |	РегистрСведенийОперацииПроверкиКМ.ФлагиПроверкиОИСМ КАК ФлагиПроверкиОИСМ,
	               |	РегистрСведенийОперацииПроверкиКМ.Дата КАК Дата,
	               |	РегистрСведенийОперацииПроверкиКМ.Результат КАК Результат,
	               |	РегистрСведенийОперацииПроверкиКМ.КодМаркировки КАК КодМаркировки,
	               |	НЕ РегистрСведенийОперацииПроверкиКМ.ПокупкаПодтверждена КАК ОтказОтПокупки,
	               |	РегистрСведенийОперацииПроверкиКМ.Наименование КАК Номенклатура,
	               |	ВЫРАЗИТЬ("""" КАК СТРОКА(4)) КАК РезультатПроверкиОИСМ,
	               |	РегистрСведенийОперацииПроверкиКМ.Штрихкод КАК Штрихкод,
	               |	РегистрСведенийОперацииПроверкиКМ.КодМаркировкиПредставление КАК КодМаркировкиПредставление,
	               |	ВЫРАЗИТЬ(NULL КАК Перечисление.ТипыИдентификаторовТовараККТ) КАК ТипКода,
	               |	РегистрСведенийОперацииПроверкиКМ.КодОтветаРазрешения КАК КодОтветаРазрешения,
	               |	РегистрСведенийОперацииПроверкиКМ.ВремяЗапросаРазрешения КАК ВремяЗапросаРазрешения
	               |ИЗ
	               |	РегистрСведений.ОперацииПроверкиКМ КАК РегистрСведенийОперацииПроверкиКМ
	               |ГДЕ
	               |	РегистрСведенийОперацииПроверкиКМ.ИдентификаторФискальнойОперации = &ИдентификаторФискальнойОперации";
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаСписокОперацийКМ()

// -- Локализация


#КонецОбласти
