#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// см. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры, ФайлыКлассификатора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторыКлассификаторов = ОбщегоНазначенияЕГАИС.ИдентификаторыКлассификаторов();
	ОписаниеКлассификатора        = ИдентификаторыКлассификаторов[Идентификатор];
	
	НачатьТранзакцию();
	
	ДанныеУспешноЗагружены = Ложь;
	Блокировка             = Новый БлокировкаДанных();
	Блокировка.Добавить(Метаданные.РегистрыСведений.МинимальныеЦеныПодакцизныхТоваровИС.ПолноеИмя());
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Для Каждого ИмяФайла Из ФайлыКлассификатора Цикл
			
			Чтение = Новый ЧтениеJSON;
			Чтение.ОткрытьФайл(ИмяФайла);
			
			Попытка
				ДанныеКлассификатора = ПрочитатьJSON(Чтение);
			Исключение
				ДанныеКлассификатора = Неопределено;
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка. Не удалось прочитать исходные данные классификатора %1
					           |%2'"),
					ОписаниеКлассификатора.ВидКлассификатора,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Чтение.Закрыть();
			
			Если ДанныеКлассификатора = Неопределено Тогда
				ВызватьИсключение ТекстОшибки
			КонецЕсли;
			
			ЗаполнитьДанныеПоМинимальнымЦенамАлкогольнойТабачнойПродукции(ДанныеКлассификатора);
			
		КонецЦикла;
		
		ДанныеУспешноЗагружены = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибкиПодробно = СтрШаблон(
			НСтр("ru = 'Ошибка при обновлении классификатора %1:
			           |%2'"),
			ОписаниеКлассификатора.ВидКлассификатора,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстОшибкиПодробно,
			НСтр("ru = 'Работа с классификаторами'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ВызватьИсключение ТекстОшибкиПодробно;
		
	КонецПопытки;
	
	Если ДанныеУспешноЗагружены Тогда
		Обработан = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоМинимальнымЦенамАлкогольнойТабачнойПродукции(ОбновленныеДанные)
	
    МинимальныеЦеныАП = ОбновленныеДанные.МинимальныеЦеныАП;
	МинимальнаяЦенаТП = ОбновленныеДанные.МинимальнаяЦенаТП;
	
	Если Не ЗначениеЗаполнено(МинимальныеЦеныАП) Тогда
		ЗаполнитьМинимальныеЦеныТабачнойПродукции(ОбновленныеДанные);
		
	Иначе
		ВидТовараТабак             = Перечисления.ВидыПодакцизныхТоваровИС.ТабачнаяПродукция;
		ДатаНачалаДействияАП       = ПрочитатьДатуJSON(ОбновленныеДанные.ДатаНачалаДействияДляАП, ФорматДатыJSON.ISO);
		ДатаОкончанияДействияАП    = ПрочитатьДатуJSON(ОбновленныеДанные.ДатаОкончанияДействияДляАП, ФорматДатыJSON.ISO);
		ВидыПодакцизныхТоваров     = ВидыПодакцизныхТоваров();
		ВидыОпераций               = ВидыОперацийКонтроляЦенПодакцизныхТоваров();
		СрокДействияСтарыхЦенДляАП = ДатаНачалаДействияАП - 1;
		
		Если ЗначениеЗаполнено(МинимальнаяЦенаТП) Тогда
			ДатаНачалаДействияТП = ПрочитатьДатуJSON(ОбновленныеДанные.ДатаНачалаДействияДляТП, ФорматДатыJSON.ISO);
		КонецЕсли;
		
		НаборЗаписейЦен = СоздатьНаборЗаписей();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НеактуальныеЦеныАП.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
		|	НеактуальныеЦеныАП.КрепостьНижняяГраница КАК КрепостьНижняяГраница,
		|	НеактуальныеЦеныАП.КрепостьВерхняяГраница КАК КрепостьВерхняяГраница,
		|	НеактуальныеЦеныАП.ДатаНачалаДействия КАК ДатаНачалаДействия,
		|	НеактуальныеЦеныАП.ДатаОкончанияДействия КАК ДатаОкончанияДействия,
		|	НеактуальныеЦеныАП.ВидОперации КАК ВидОперации,
		|	НеактуальныеЦеныАП.МинимальнаяЦена КАК МинимальнаяЦена
		|ИЗ
		|	РегистрСведений.МинимальныеЦеныПодакцизныхТоваровИС КАК НеактуальныеЦеныАП
		|ГДЕ
		|	НеактуальныеЦеныАП.ВидПодакцизногоТовара <> &ВидТовараТабак
		|	И НеактуальныеЦеныАП.ДатаОкончанияДействия > &ДатаОбновления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НеактуальныеЦеныТП.ВидПодакцизногоТовара,
		|	НеактуальныеЦеныТП.КрепостьНижняяГраница,
		|	НеактуальныеЦеныТП.КрепостьВерхняяГраница,
		|	НеактуальныеЦеныТП.ДатаНачалаДействия,
		|	НеактуальныеЦеныТП.ДатаОкончанияДействия,
		|	НеактуальныеЦеныТП.ВидОперации,
		|	НеактуальныеЦеныТП.МинимальнаяЦена
		|ИЗ
		|	РегистрСведений.МинимальныеЦеныПодакцизныхТоваровИС КАК НеактуальныеЦеныТП
		|ГДЕ
		|	НеактуальныеЦеныТП.ВидПодакцизногоТовара = &ВидТовараТабак
		|	И НеактуальныеЦеныТП.ДатаОкончанияДействия = &ПустаяДата";
		Запрос.УстановитьПараметр("ВидТовараТабак", ВидТовараТабак);
		Запрос.УстановитьПараметр("ДатаОбновления", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ПустаяДата",     Дата("00010101"));
		
		ВыборкаСуществующихЦен = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаСуществующихЦен.Следующий() Цикл
			ЗаписьНеактуальнойЦены = НаборЗаписейЦен.Добавить();
			
			ЗаполнитьЗначенияСвойств(ЗаписьНеактуальнойЦены, ВыборкаСуществующихЦен);
			
			Если ВыборкаСуществующихЦен.ВидПодакцизногоТовара = ВидТовараТабак Тогда
				Если ЗначениеЗаполнено(МинимальнаяЦенаТП) Тогда
					ЗаписьНеактуальнойЦены.ДатаОкончанияДействия = ДатаНачалаДействияТП - 1;
				КонецЕсли;
			Иначе
				ЗаписьНеактуальнойЦены.ДатаОкончанияДействия = СрокДействияСтарыхЦенДляАП;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаЦеныАП Из МинимальныеЦеныАП Цикл
			ЗаписьНовойЦены = НаборЗаписейЦен.Добавить();
			
			ЗаполнитьЗначенияСвойств(ЗаписьНовойЦены, СтрокаЦеныАП);
			
			ЗаписьНовойЦены.ДатаНачалаДействия    = ДатаНачалаДействияАП;
			ЗаписьНовойЦены.ДатаОкончанияДействия = ДатаОкончанияДействияАП;
			
			Операция = ВидыОпераций.Получить(СтрокаЦеныАП.ВидОперации);
			Если Операция <> Неопределено Тогда
				ЗаписьНовойЦены.ВидОперации = Операция;
			Иначе
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка поиска вида операции контроля цен подакцизных товаров'");
			КонецЕсли;
			
			ВидТовара = ВидыПодакцизныхТоваров.Получить(СтрокаЦеныАП.ВидПодакцизногоТовара);
			Если ВидТовара <> Неопределено Тогда
				ЗаписьНовойЦены.ВидПодакцизногоТовара = ВидТовара;
			Иначе
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка поиска вида подакцизного товаров'");
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(МинимальнаяЦенаТП) Тогда
			ЗаписьНовойЦены = НаборЗаписейЦен.Добавить();
			
			ЗаписьНовойЦены.ВидПодакцизногоТовара = ВидТовараТабак;
			ЗаписьНовойЦены.ДатаНачалаДействия    = ДатаНачалаДействияТП;
			ЗаписьНовойЦены.МинимальнаяЦена       = МинимальнаяЦенаТП;
			
		КонецЕсли;
		
		НаборЗаписейЦен.Записать();
		
	КонецЕсли;
				
КонецПроцедуры

Функция ВидыОперацийКонтроляЦенПодакцизныхТоваров()
	
	ВидыОпераций = Новый Соответствие;
	
	Для каждого ПеречислениеСсылка Из Перечисления.ВидыОперацийКонтроляЦенПодакцизныхТоваровИС Цикл
		ВидыОпераций.Вставить(Строка(ПеречислениеСсылка), ПеречислениеСсылка);
		
	КонецЦикла;
	
	Возврат ВидыОпераций;
	
КонецФункции

Функция ВидыПодакцизныхТоваров()
	
	ВидыТоваров = Новый Соответствие;
	
	Для каждого ПеречислениеСсылка Из Перечисления.ВидыПодакцизныхТоваровИС Цикл
		ВидыТоваров.Вставить(Строка(ПеречислениеСсылка), ПеречислениеСсылка);
		
	КонецЦикла;
	
	Возврат ВидыТоваров;
	
КонецФункции

Процедура ЗаполнитьМинимальныеЦеныТабачнойПродукции(ОбновленныеДанные)

	ДатаНачалаДействия = ПрочитатьДатуJSON(ОбновленныеДанные.ДатаНачалаДействияДляТП, ФорматДатыJSON.ISO);
	МинимальнаяЦенаТП  = ОбновленныеДанные.МинимальнаяЦенаТП;
	ВидТовараТабак     = Перечисления.ВидыПодакцизныхТоваровИС.ТабачнаяПродукция;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МинимальныеЦеныПодакцизныхТоваровИС.ВидПодакцизногоТовара КАК ВидПодакцизногоТовара,
	|	МинимальныеЦеныПодакцизныхТоваровИС.МинимальнаяЦена КАК МинимальнаяЦена,
	|	МинимальныеЦеныПодакцизныхТоваровИС.ДатаНачалаДействия КАК ДатаНачалаДействия
	|ИЗ
	|	РегистрСведений.МинимальныеЦеныПодакцизныхТоваровИС КАК МинимальныеЦеныПодакцизныхТоваровИС
	|ГДЕ
	|	МинимальныеЦеныПодакцизныхТоваровИС.ВидПодакцизногоТовара = &ВидПодакцизногоТовара
	|	И МинимальныеЦеныПодакцизныхТоваровИС.ДатаОкончанияДействия = &ДатаПроверки";
	Запрос.УстановитьПараметр("ВидПодакцизногоТовара", ВидТовараТабак);
	Запрос.УстановитьПараметр("ДатаПроверки", Дата("00010101"));
	
	ВыборкаСтарыхЦен = Запрос.Выполнить().Выбрать();
	
	ЗаписьСтаройЦены = СоздатьМенеджерЗаписи();
	
	Пока ВыборкаСтарыхЦен.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ЗаписьСтаройЦены, ВыборкаСтарыхЦен);
		
		ЗаписьСтаройЦены.Прочитать();
		
		Если ЗаписьСтаройЦены.Выбран() Тогда
			ЗаписьСтаройЦены.ДатаОкончанияДействия = ДатаНачалаДействия - 1;
			ЗаписьСтаройЦены.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	НаборТабачныхЦен  = СоздатьНаборЗаписей();
	ЗаписьНовойЦены   = НаборТабачныхЦен.Добавить();
	
	ЗаписьНовойЦены.ВидПодакцизногоТовара = ВидТовараТабак;
	ЗаписьНовойЦены.ДатаНачалаДействия    = ДатаНачалаДействия;
	ЗаписьНовойЦены.МинимальнаяЦена       = МинимальнаяЦенаТП;
	
	НаборТабачныхЦен.Записать(Ложь);
			
КонецПроцедуры

#КонецОбласти

#КонецЕсли