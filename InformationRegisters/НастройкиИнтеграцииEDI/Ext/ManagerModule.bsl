#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает настройки обновления прикладных документов по организации из сервиса.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * Организация             - ОпределяемыйТип.ОрганизацияEDI - организация.
// * ТипДокумента           - ПеречислениеСсылка.ТипыДокументовEDI - тип документа.
// * АвтообновлениеВключено - Булево - признак необходимости автообновления.
//
Функция НастройкиАвтообновленияПрикладныхОбъектов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	Результат.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыДокументовEDI"));
	Результат.Колонки.Добавить("АвтообновлениеВключено", Новый ОписаниеТипов("Булево"));
	
	Результат.Индексы.Добавить("Организация, ТипДокумента");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиИнтеграцииEDI.Организация                             КАК Организация,
	|	НастройкиИнтеграцииEDI.АвтоматическиОбновляемЗаказыКлиента     КАК АвтоматическиОбновляемЗаказыКлиента,
	|	НастройкиИнтеграцииEDI.АвтоматическиОбновляемЗаказыПоставщикам КАК АвтоматическиОбновляемЗаказыПоставщикам
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииEDI КАК НастройкиИнтеграцииEDI";
	
	Выборка = Запрос.Выполнить().Выгрузить();
	Для Каждого ЭлементВыборки Из Выборка Цикл
		НоваяЗапись = Результат.Добавить();
		НоваяЗапись.Организация  = ЭлементВыборки.Организация;
		НоваяЗапись.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказКлиента;
		НоваяЗапись              = ЭлементВыборки.АвтоматическиОбновляемЗаказыКлиента;
		
		НоваяЗапись = Результат.Добавить();
		НоваяЗапись.Организация  = ЭлементВыборки.Организация;
		НоваяЗапись.ТипДокумента = Перечисления.ТипыДокументовEDI.ЗаказПоставщику;
		НоваяЗапись              = ЭлементВыборки.АвтоматическиОбновляемЗаказыПоставщикам;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

// Получает настройки автообновления по организации
// 
// Параметры:
// 	Организация - организация, по которой требуется получить настройки.
// Возвращаемое значение:
// 	Структура - Описание:
// * ПричинаОтменыСтрокЗаказовКлиента - ОпределяемыйТип.ПричинаОтменыСтрокЗаказаКлиентаEDI - причина отмены строк в заказе клиента.
// * ПричинаОтменыСтрокЗаказаПоставщику - ОпределяемыйТип.ПричинаОтменыСтрокЗаказаПоставщикуEDI - причина отмены строк в заказе поставщику.
// * ОтменятьСтрокиЗаказаПоставщикуПриОтмене - Булево - надо ли отменять строки в заказе поставщику при отмене документа в сервисе.
// * ОтменятьСтрокиЗаказаКлиентаПриОтмене - Булево - надо ли отменять строки в заказе клиента при отмене документа в сервисе.
// * ОтправляемЗаказыПоставщикамEDI - Булево - отправляются ли документы в сервис EDI.
// * АвтоматическиОбновляемЗаказыПоставщикам - Булево - требуется ли автоматическое обновление заказов поставщикам при изменении в сервисе.
// * АвтоматическиОбновляемЗаказыКлиента - Булево - требуется ли автоматическое обновление заказов клиентов при изменении в сервисе.
// * АвтоматическиЗагружаемЗаказыКлиента - Булево - требуется ли автоматически загружать новые заказы клиента из сервиса.
// * ПрефиксНомеровДокументовСервис - Строка - префикс номеров документов, которые создаются в сервисе.
// * Организация - ОпределяемыйТип.ОрганизацияEDI - организация, по которой получены настройки.
//
Функция НастройкиИнтеграцииEDI(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиИнтеграции = ПараметрыНастроекИнтеграции();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	НастройкиИнтеграцииEDI.ПрефиксНомеровДокументовСервис                 КАК ПрефиксНомеровДокументовСервис,
	|	НастройкиИнтеграцииEDI.ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента КАК ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента,
	|	НастройкиИнтеграцииEDI.АвтоматическиЗагружаемЗаказыКлиента            КАК АвтоматическиЗагружаемЗаказыКлиента,
	|	НастройкиИнтеграцииEDI.АвтоматическиОбновляемЗаказыКлиента            КАК АвтоматическиОбновляемЗаказыКлиента,
	|	НастройкиИнтеграцииEDI.АвтоматическиОбновляемЗаказыПоставщикам        КАК АвтоматическиОбновляемЗаказыПоставщикам,
	|	НастройкиИнтеграцииEDI.ОтправляемЗаказыПоставщикамEDI                 КАК ОтправляемЗаказыПоставщикамEDI,
	|	НастройкиИнтеграцииEDI.ОтменятьСтрокиЗаказаКлиентаПриОтмене           КАК ОтменятьСтрокиЗаказаКлиентаПриОтмене,
	|	НастройкиИнтеграцииEDI.ОтменятьСтрокиЗаказаПоставщикуПриОтмене        КАК ОтменятьСтрокиЗаказаПоставщикуПриОтмене,
	|	НастройкиИнтеграцииEDI.ПричинаОтменыСтрокЗаказаПоставщику             КАК ПричинаОтменыСтрокЗаказаПоставщику,
	|	НастройкиИнтеграцииEDI.ПричинаОтменыСтрокЗаказовКлиента               КАК ПричинаОтменыСтрокЗаказовКлиента,
	|	НастройкиИнтеграцииEDI.ВариантОпределенияСкладаЗаказКлиента           КАК ВариантОпределенияСкладаЗаказКлиента,
	|	НастройкиИнтеграцииEDI.СкладУстанавливаемыйВЗагружаемыйЗаказаКлиента  КАК СкладУстанавливаемыйВЗагружаемыйЗаказаКлиента
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииEDI КАК НастройкиИнтеграцииEDI
	|ГДЕ
	|	НастройкиИнтеграцииEDI.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(НастройкиИнтеграции, Выборка);
		
	КонецЕсли;
	
	Если ПустаяСтрока(НастройкиИнтеграции.ПрефиксНомеровДокументовСервис) Тогда
		
		НастройкиИнтеграции.ПрефиксНомеровДокументовСервис = ПрефиксНомеровПоУмолчанию();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкиИнтеграции.ВариантОпределенияСкладаЗаказКлиента) Тогда
		
		НастройкиИнтеграции.ВариантОпределенияСкладаЗаказКлиента = Перечисления.ВариантыОпределенияСкладаВДокументахEDI.НеОпределять;
		
	КонецЕсли;
	
	НастройкиИнтеграции.Организация = Организация;
	
	Возврат НастройкиИнтеграции;
	
КонецФункции

// Получает значение настройки интеграции для организации
// 
// Параметры:
// 	Организация  - ОпределяемыйТип.ОрганизацияEDI - организация, для которой получается настройка.
// 	ИмяНастройки - Строка - имя настройки.
// Возвращаемое значение:
// 	Произвольный - значение настройки.
// 	
Функция ЗначениеНастроекИнтеграции(Организация, ИмяНастройки) Экспорт
	
	НастройкиИнтеграции = НастройкиИнтеграцииEDI(Организация);
	
	Возврат НастройкиИнтеграции[ИмяНастройки];

КонецФункции

// Выполняет обновление настроек организации в сервисе
// 
// Параметры:
//  Организация                - ОпределяемыйТип.ОрганизацияEDI - организация, для которой обновляется префикс.
//  Префикс                    - Строка - новое значение префикса.
//  ОтветственныйЗаНовыеЗаказы - ОпределяемыйТип.ПользователиEDI - ответственный менеджер по умолчанию за новые заказы клиента.
// Возвращаемое значение:
//  Структура - результат обновления:
//
Функция РезультатОбновленияНастроекОрганизации(Организация, Префикс, ОтветственныйЗаНовыеЗаказы) Экспорт
	
	ПараметрыОбновленияСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыОбновленияНастроекОрганизации();
	ПараметрыОбновленияСервис.Организация                = Организация;
	ПараметрыОбновленияСервис.Префикс                    = Префикс;
	ПараметрыОбновленияСервис.ОтветственныйЗаНовыеЗаказы = ОтветственныйЗаНовыеЗаказы;
	
	РезультатОбновления = ИнтеграцияССервисомEDIСлужебный.РезультатОбновленияНастроекОрганизацииВСервисе(ПараметрыОбновленияСервис);
	
	Возврат РезультатОбновления;
	
КонецФункции

// Получает префикс номеров документов по организации из сервиса
// 
// Параметры:
// 	Организация - ОпределяемыйТип.ОрганизацияEDI - организация, для которой получается префикс.
// Возвращаемое значение:
// 	Структура - результат получения данных с сервиса.
//
Функция РезультатПолученияНастроекОрганизацииВСервисе(Организация) Экспорт
	
	ПараметрыПолученияСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияНастроекОрганизации();
	ПараметрыПолученияСервис.Организация = Организация;
		
	РезультатПолучения = ИнтеграцияССервисомEDIСлужебный.РезультатПолученияНастроекОрганизации(ПараметрыПолученияСервис);
	
	Возврат РезультатПолучения;
		
КонецФункции

// Получает префикс номеров документов по организации из сервиса и сохраняет в информационной базе.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.ОрганизацияEDI - организация, для которой получается префикс.
// Возвращаемое значение:
// 	Структура - результат получения и обработки данных.
//
Функция РезультатПолученияИСохраненияНастроекОрганизацииВСервисе(Организация) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Успешно",     Ложь);
	Результат.Вставить("ТекстОшибки", "");

	РезультатПолучения = РезультатПолученияНастроекОрганизацииВСервисе(Организация); 
	
	Если Не РезультатПолучения.Ошибка Тогда

		НачатьТранзакцию();
	
		Попытка
				
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииEDI");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	
			Блокировка.Заблокировать();
				
			НаборЗаписей = РегистрыСведений.НастройкиИнтеграцииEDI.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				ЗаписьНабора = НаборЗаписей[0];
			Иначе
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(ЗаписьНабора, ПараметрыНастроекИнтеграции());
				ЗаписьНабора.Организация = Организация;
			КонецЕсли;
			
			ЗаписьНабора.ПрефиксНомеровДокументовСервис                 = РезультатПолучения.Данные.ПрефиксДокументов;
			ЗаписьНабора.ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента = РезультатПолучения.Данные.ОтветственныйЗаНовыеЗаказыКлиентовПоУмолчанию;
			НаборЗаписей.Записать(Истина);
			Результат.Успешно = Истина;
	
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();

			ЗаписьЖурналаРегистрации(ОбновлениеДанныхEDI.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ВызватьИсключение НСтр("ru = 'Не удалось записать информацию о настройках организации в EDI.'");
			
		КонецПопытки;
		
	Иначе
		
		Результат.ТекстОшибки = РезультатПолучения.ТекстОшибки;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Сохраняет настройки интеграции в информационной базе.
// 
// Параметры:
// 	Параметры - Структура - см.ПараметрыНастроекИнтеграции
//
Процедура СохранитьНастройкиИнтеграции(Параметры) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиИнтеграцииEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Организация", Параметры.Организация);

		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.НастройкиИнтеграцииEDI.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(Параметры.Организация);
		
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(ЗаписьНабора, Параметры);
		
		НаборЗаписей.Записать(Истина);
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(ОбновлениеДанныхEDI.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'Не удалось записать настройки интеграции.'");
		
	КонецПопытки;
	
КонецПроцедуры

// Конструктор параметров настроек интеграции по организации.
// 
// Возвращаемое значение:
// 	Структура - содержит:
// * ПричинаОтменыСтрокЗаказовКлиента - ОпределяемыйТип.ПричинаОтменыСтрокЗаказаКлиентаEDI - причина отмены строк в заказе клиента.
// * ПричинаОтменыСтрокЗаказаПоставщику - ОпределяемыйТип.ПричинаОтменыСтрокЗаказаПоставщикуEDI - причина отмены строк в заказе поставщику.
// * ОтменятьСтрокиЗаказаПоставщикуПриОтмене - Булево - надо ли отменять строки в заказе поставщику при отмене документа в сервисе.
// * ОтменятьСтрокиЗаказаКлиентаПриОтмене - Булево - надо ли отменять строки в заказе клиента при отмене документа в сервисе.
// * ОтправляемЗаказыПоставщикамEDI - Булево - отправляются ли документы в сервис EDI.
// * АвтоматическиОбновляемЗаказыПоставщикам - Булево - требуется ли автоматическое обновление заказов поставщикам при изменении в сервисе.
// * АвтоматическиОбновляемЗаказыКлиента - Булево - требуется ли автоматическое обновление заказов клиентов при изменении в сервисе.
// * АвтоматическиЗагружаемЗаказыКлиента - Булево - требуется ли автоматически загружать новые заказы клиента из сервиса.
// * ПрефиксНомеровДокументовСервис - Строка - префикс номеров документов, которые создаются в сервисе.
// * Организация - ОпределяемыйТип.ОрганизацияEDI - организация, по которой получены настройки.
//
Функция ПараметрыНастроекИнтеграции() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация",                                    Неопределено);
	Параметры.Вставить("ПрефиксНомеровДокументовСервис",                 ПрефиксНомеровПоУмолчанию());
	Параметры.Вставить("ОтветственныйПоУмолчаниюДляНовыхЗаказовКлиента", Неопределено);
	Параметры.Вставить("АвтоматическиЗагружаемЗаказыКлиента",            Ложь);
	Параметры.Вставить("АвтоматическиОбновляемЗаказыКлиента",            Ложь);
	Параметры.Вставить("АвтоматическиОбновляемЗаказыПоставщикам",        Ложь);
	Параметры.Вставить("ОтправляемЗаказыПоставщикамEDI",                 Ложь);
	Параметры.Вставить("ОтменятьСтрокиЗаказаКлиентаПриОтмене",           Ложь);
	Параметры.Вставить("ОтменятьСтрокиЗаказаПоставщикуПриОтмене",        Ложь);
	Параметры.Вставить("ОтменятьСтрокиЗаказаПоставщикуПриОтмене",        Ложь);
	Параметры.Вставить("ПричинаОтменыСтрокЗаказаПоставщику",             Неопределено);
	Параметры.Вставить("ПричинаОтменыСтрокЗаказовКлиента",               Неопределено);
	Параметры.Вставить("ВариантОпределенияСкладаЗаказКлиента",           Перечисления.ВариантыОпределенияСкладаВДокументахEDI.НеОпределять);
	Параметры.Вставить("СкладУстанавливаемыйВЗагружаемыйЗаказаКлиента",  Неопределено);
	Возврат Параметры;
	
КонецФункции

Функция ОтправлятьЗаказыПоставщикам(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиИнтеграцииEDI.ОтправляемЗаказыПоставщикамEDI
	|ИЗ
	|	РегистрСведений.НастройкиИнтеграцииEDI КАК НастройкиИнтеграцииEDI
	|ГДЕ
	|	НастройкиИнтеграцииEDI.Организация = &Организация";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.ОтправляемЗаказыПоставщикамEDI;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПрефиксНомеровПоУмолчанию()
	
	Возврат "BN";
	
КонецФункции

#КонецОбласти

#КонецЕсли