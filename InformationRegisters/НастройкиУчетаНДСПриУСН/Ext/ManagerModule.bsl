#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значения по умолчанию для ресурсов регистра.
// Имена ключей структуры должны строго соответствовать именам ресурсов регистра.
// 
// Возвращаемое значение:
// 	Структура - структура значений ресурсов регистра.
Функция ЗначенияПоУмолчанию() Экспорт
	
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("СтавкаНДС", Справочники.СтавкиНДС.БезНДС);
	СтруктураЗначений.Вставить("ОсновноеНалогообложение", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	
	Возврат СтруктураЗначений;
	
КонецФункции

// Возращает текст запроса по данным регистра.
// 
// Возвращаемое значение:
// 	Строка - Текст запроса.
Функция ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик() Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА Таблица.Период ЕСТЬ NULL ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК УчетнаяПолитикаСуществует,
	|	Таблица.Период КАК Период,
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДСПриУСН.СрезПоследних(&Период, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК Таблица
	|		ПО ГоловныеОрганизации.Организация = Таблица.Организация
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля;
	ОписаниеНастроек = ЗначенияПоУмолчанию();
	ОписаниеНастроек.Удалить("УчетнаяПолитикаСуществует");
	Для каждого Настройка Из ОписаниеНастроек Цикл
		ВыбираемыеПоля.Добавить(СтрШаблон("Таблица.%1", Настройка.Ключ));
	КонецЦикла;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует текстовое описание установленных параметров.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДатаДействия - Дата - период действия настроек.
// 	ДействующиеНастройки - Структура - действующие параметры учетной политики.
// Возвращаемое значение:
//  Строка
Функция ОписаниеДействующихПараметров(Организация, ДатаДействия = Неопределено, ДействующиеНастройки = Неопределено) Экспорт
	
	СтрокаОписанияНастроек = "";
	
	Если ДействующиеНастройки = Неопределено Тогда
		ДействующиеНастройки = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"НастройкиУчетаНДСПриУСН",
			Организация,
			ДатаДействия,
			Ложь);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДействующиеНастройки) Тогда
		СтрокаОписанияНастроек = НСтр("ru='Не заданы Ставки НДС для УСН.'");
		Возврат СтрокаОписанияНастроек;
	КонецЕсли;

	СтрокаШаблон = "%1." + Символы.ПС;  
	СтрокаШаблонЛьготногоНалогообложения = " %1, %2." + Символы.ПС;
	
	Если Не ЗначениеЗаполнено(ДействующиеНастройки.СтавкаНДС) Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек 
			+ СтрШаблон(СтрокаШаблон, 
				НСтр("ru='Применяются общие ставки НДС (20%, 10%), применяются все вычеты'"));
	ИначеЕсли ДействующиеНастройки.СтавкаНДС = Справочники.СтавкиНДС.БезНДС Тогда
		СтрокаОписанияНастроек = СтрокаОписанияНастроек 
			+ СтрШаблон(СтрокаШаблон, 
				НСтр("ru='Продажа не облагается НДС, в документах выбирается ставка ""Без НДС""'"));
	Иначе 
		СтрокаОписанияНастроек = СтрокаОписанияНастроек 
			+ НСтр("ru='Продажи облагаются НДС по льготной ставке'")
			+ СтрШаблон(СтрокаШаблонЛьготногоНалогообложения, 
				Строка(ДействующиеНастройки.СтавкаНДС),
				НСтр("ru='не применяются вычеты'"));
	КонецЕсли;
	
	Возврат СтрокаОписанияНастроек
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
   //
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиУчетаНДСПриУСН.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.20.16";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1b81975e-b1fe-43d1-ae48-54f2e0dc6cea");
	Обработчик.Многопоточный = Истина;   
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиУчетаНДСПриУСН.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра ""Ставки НДС льготного налогообложения УСН""'");
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаНДСПриУСН.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаНДСПриУСН.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");	  
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиУчетаНДСПриУСН.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры   

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.НастройкиУчетаНДСПриУСН";
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ДатаНачисленияНДСнаУСН = УчетНДС.ДатаНачалаПримененияНДСнаУСН();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиСистемыНалогообложенияСрезПоследних.Организация КАК Организация,
	|	&Период КАК Период
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(&Период,) КАК
	|		НастройкиСистемыНалогообложенияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДСПриУСН.СрезПоследних(&Период,) КАК НастройкиУчетаНДСПриУСН
	|		ПО НастройкиСистемыНалогообложенияСрезПоследних.Организация = НастройкиУчетаНДСПриУСН.Организация
	|ГДЕ
	|	НастройкиУчетаНДСПриУСН.Организация ЕСТЬ NULL
	|	И НастройкиСистемыНалогообложенияСрезПоследних.ПрименяетсяУСН"; 
	Запрос.УстановитьПараметр("Период", КонецДня(ДатаНачисленияНДСнаУСН));
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.НастройкиУчетаНДСПриУСН";
	
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ДатаНачисленияНДСнаУСН = УчетНДС.ДатаНачалаПримененияНДСнаУСН();
	
	Для каждого Выборка Из ОбновляемыеДанные Цикл
			
		НачатьТранзакцию();
				
		Попытка
			
			НаборЗаписей = РегистрыСведений.НастройкиУчетаНДСПриУСН.СоздатьНаборЗаписей(); 
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Организация", Выборка.Организация);
			
			НаборЗаписей.Отбор.Период.Установить(ДатаНачисленияНДСнаУСН);
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = ДатаНачисленияНДСнаУСН;
			НоваяЗапись.Организация = Выборка.Организация;
			НоваяЗапись.ОсновноеНалогообложение = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			НоваяЗапись.СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
			
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Организация);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

#КонецОбласти 

#КонецЕсли