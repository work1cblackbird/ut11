#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.ИзображенияТорговойПлощадки.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ПараметрыВыборки                      = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки  = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзображенияТорговойПлощадки.Организация КАК Организация,
		|	ИзображенияТорговойПлощадки.Номенклатура КАК Номенклатура,
		|	ИзображенияТорговойПлощадки.Характеристика КАК Характеристика,
		|	ИзображенияТорговойПлощадки.ФайлИзображения КАК ФайлИзображения
		|ПОМЕСТИТЬ ВР_1
		|ИЗ
		|	РегистрСведений.ИзображенияТорговойПлощадки КАК ИзображенияТорговойПлощадки
		|ГДЕ
		|	ИзображенияТорговойПлощадки.Организация = &ПустаяОрганизация
		|	И ИзображенияТорговойПлощадки.Номенклатура > &Номенклатура
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзображенияТорговойПлощадки.Организация КАК Организация,
		|	ИзображенияТорговойПлощадки.Номенклатура КАК Номенклатура,
		|	ИзображенияТорговойПлощадки.Характеристика КАК Характеристика,
		|	ИзображенияТорговойПлощадки.ФайлИзображения КАК ФайлИзображения
		|ИЗ
		|	РегистрСведений.ИзображенияТорговойПлощадки КАК ИзображенияТорговойПлощадки
		|ГДЕ
		|	ИзображенияТорговойПлощадки.Организация = &ПустаяОрганизация
		|	И (ИзображенияТорговойПлощадки.Номенклатура = &Номенклатура
		|	И ИзображенияТорговойПлощадки.Характеристика > &Характеристика
		|	И ИзображенияТорговойПлощадки.ФайлИзображения > &ФайлИзображения)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзображенияТорговойПлощадки.Организация КАК Организация,
		|	ИзображенияТорговойПлощадки.Номенклатура КАК Номенклатура,
		|	ИзображенияТорговойПлощадки.Характеристика КАК Характеристика,
		|	ИзображенияТорговойПлощадки.ФайлИзображения КАК ФайлИзображения
		|ИЗ
		|	РегистрСведений.ИзображенияТорговойПлощадки КАК ИзображенияТорговойПлощадки
		|ГДЕ
		|	ИзображенияТорговойПлощадки.Организация = &ПустаяОрганизация
		|	И (ИзображенияТорговойПлощадки.Номенклатура = &Номенклатура
		|	И ИзображенияТорговойПлощадки.Характеристика = &Характеристика
		|	И ИзображенияТорговойПлощадки.ФайлИзображения > &ФайлИзображения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ВР_1.Организация КАК Организация,
		|	ВР_1.Номенклатура КАК Номенклатура,
		|	ВР_1.Характеристика КАК Характеристика,
		|	ВР_1.ФайлИзображения КАК ФайлИзображения
		|ИЗ
		|	ВР_1 КАК ВР_1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ФайлИзображения
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	ИзмеренияРегистра = Метаданные.РегистрыСведений.ИзображенияТорговойПлощадки.Измерения;
	Номенклатура = ИзмеренияРегистра.Номенклатура.Тип.ПривестиЗначение();
	Характеристика = ИзмеренияРегистра.Характеристика.Тип.ПривестиЗначение();
	ФайлИзображения = ИзмеренияРегистра.ФайлИзображения.Тип.ПривестиЗначение();
	
	ПустаяОрганизация = ИзмеренияРегистра.Организация.Тип.ПривестиЗначение();
	Запрос.УстановитьПараметр("ПустаяОрганизация", ПустаяОрганизация);
	
	РазмерПорцииДанных = 1000;
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
		Запрос.УстановитьПараметр("ФайлИзображения", ФайлИзображения);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
		
		Если КоличествоСтрок < РазмерПорцииДанных Тогда
			Прервать;
		КонецЕсли;
		
		ПоследняяСтрока = Выгрузка[КоличествоСтрок - 1];
		
		Номенклатура    = ПоследняяСтрока.Номенклатура;
		Характеристика  = ПоследняяСтрока.Характеристика;
		ФайлИзображения = ПоследняяСтрока.ФайлИзображения;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ИзображенияТорговойПлощадки;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = 
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ЕстьОтработанныеЗаписи = Ложь;
	ПроизошлаОшибка        = Ложь;
	ТекстСообщения         = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ВременнаяТаблица.Организация КАК Организация,
		|	ВременнаяТаблица.Номенклатура КАК Номенклатура,
		|	ВременнаяТаблица.Характеристика КАК Характеристика,
		|	ВременнаяТаблица.ФайлИзображения КАК ФайлИзображения
		|ПОМЕСТИТЬ ВР_1
		|ИЗ
		|	&ОбновляемыеДанные КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВР_1.Организация КАК ОрганизацияНабор,
		|	ЕСТЬNULL(НоменклатураТорговойПлощадки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ВР_1.Номенклатура КАК Номенклатура,
		|	ВР_1.Характеристика КАК Характеристика,
		|	ВР_1.ФайлИзображения КАК ФайлИзображения,
		|	ЕСТЬNULL(ИзображенияТорговойПлощадки.Хеш, """") КАК Хеш,
		|	ЕСТЬNULL(ИзображенияТорговойПлощадки.ИдентификаторИзображения, """") КАК ИдентификаторИзображения,
		|	ЕСТЬNULL(ИзображенияТорговойПлощадки.ИдентификаторНоменклатуры, """") КАК ИдентификаторНоменклатуры,
		|	НоменклатураТорговойПлощадки.Организация ЕСТЬ NULL КАК ДанныеОтсутствуют
		|ИЗ
		|	ВР_1 КАК ВР_1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИзображенияТорговойПлощадки КАК ИзображенияТорговойПлощадки
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураТорговойПлощадки КАК НоменклатураТорговойПлощадки
		|			ПО ИзображенияТорговойПлощадки.ИдентификаторНоменклатуры = НоменклатураТорговойПлощадки.Идентификатор
		|		ПО ВР_1.Организация = ИзображенияТорговойПлощадки.Организация
		|		И ВР_1.Номенклатура = ИзображенияТорговойПлощадки.Номенклатура
		|		И ВР_1.Характеристика = ИзображенияТорговойПлощадки.Характеристика
		|		И ВР_1.ФайлИзображения = ИзображенияТорговойПлощадки.ФайлИзображения";
	
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.ОрганизацияНабор);
			НаборЗаписей.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
			НаборЗаписей.Отбор.Характеристика.Установить(ВыборкаДетальныеЗаписи.Характеристика);
			НаборЗаписей.Отбор.ФайлИзображения.Установить(ВыборкаДетальныеЗаписи.ФайлИзображения);
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			// Снимаем набор записей без организации с регистрации.
			НаборЗаписей.Прочитать();
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			// Очищаем набор без организации.
			НаборЗаписей.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			
			// Данные были изменены или удалены пользователем.
			Если НЕ ВыборкаДетальныеЗаписи.ДанныеОтсутствуют Тогда
				
				// Создаем новый набор.
				НаборЗаписейНовый = СоздатьНаборЗаписей();
				НаборЗаписейНовый.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
				НаборЗаписейНовый.Отбор.Номенклатура.Установить(ВыборкаДетальныеЗаписи.Номенклатура);
				НаборЗаписейНовый.Отбор.Характеристика.Установить(ВыборкаДетальныеЗаписи.Характеристика);
				НаборЗаписейНовый.Отбор.ФайлИзображения.Установить(ВыборкаДетальныеЗаписи.ФайлИзображения);
				
				ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписейНовый);
				
				НаборЗаписейНовый.Прочитать();
				
				Если НаборЗаписейНовый.Количество() Тогда
					Запись = НаборЗаписейНовый[0];
				Иначе
					Запись = НаборЗаписейНовый.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
				
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНовый);
				
			КонецЕсли;
			
			ЕстьОтработанныеЗаписи = Истина;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			Комментарий = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Подсистема = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ТорговыеПредложения;
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(Комментарий, Подсистема);
			
			ПроизошлаОшибка = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ЕстьОтработанныеЗаписи И ПроизошлаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = 
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли