#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.РаспоряженияНаОтгрузкуКВыполнению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.18.9";
	Обработчик.РежимВыполнения = "Отложенно"; 
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6c3251ac-f64a-4b70-a153-197feacb06c6");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.РаспоряженияНаОтгрузкуКВыполнению.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет состояния открытых распоряжений в регистр распоряжения на отгрузку к выполнению'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.УдалитьЗаказыКлиентов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");  
	
	Изменяемые = Новый Массив;                                          
	Изменяемые.Добавить(Метаданные.РегистрыСведений.РаспоряженияНаОтгрузкуКВыполнению.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.РаспоряженияНаОтгрузкуКВыполнению.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");    
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.РаспоряженияНаОтгрузку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрСведений.РаспоряженияНаОтгрузкуКВыполнению";
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.Вставить("ЭтоНезависимыйРегистрСведений", Истина);
	ДополнительныеПараметры.Вставить("ПолноеИмяРегистра", "РегистрСведений.РаспоряженияНаОтгрузкуКВыполнению");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьЗаказыКлиентовОстатки.ЗаказКлиента КАК ЗаказКлиента,
	|	УдалитьЗаказыКлиентовОстатки.Склад КАК Склад,
	|	УдалитьЗаказыКлиентовОстатки.Номенклатура КАК Номенклатура,
	|	УдалитьЗаказыКлиентовОстатки.Характеристика КАК Характеристика,
	|	УдалитьЗаказыКлиентовОстатки.Серия КАК Серия
	|ПОМЕСТИТЬ ОстаткиЗаказов
	|ИЗ
	|	РегистрНакопления.УдалитьЗаказыКлиентов.Остатки КАК УдалитьЗаказыКлиентовОстатки
	|ГДЕ
	|	УдалитьЗаказыКлиентовОстатки.КОформлениюОстаток <> 0
	|	ИЛИ УдалитьЗаказыКлиентовОстатки.КПередачеОстаток <> 0
	|	ИЛИ УдалитьЗаказыКлиентовОстатки.ЗаказаноОстаток <> 0
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыКлиентов.Склад КАК Склад,
	|	ЗаказыКлиентов.ЗаказКлиента КАК Распоряжение
	|ИЗ
	|	ОстаткиЗаказов КАК ЗаказыКлиентов
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаспоряженияНаОтгрузкуКВыполнению КАК РаспоряженияНаОтгрузкуКВыполнению
	|		ПО ЗаказыКлиентов.ЗаказКлиента = РаспоряженияНаОтгрузкуКВыполнению.Распоряжение
	|		И ЗаказыКлиентов.Склад = РаспоряженияНаОтгрузкуКВыполнению.Склад
	|ГДЕ
	|	РаспоряженияНаОтгрузкуКВыполнению.Распоряжение ЕСТЬ NULL";
		
	РегистрируемыеЗаписи = Запрос.Выполнить().Выгрузить();
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, РегистрируемыеЗаписи, ДополнительныеПараметры);
	Константы.УдалитьРаспоряженияНаОтгрузкуКВыполнениюНеЗаполнен.Установить(Истина);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.РаспоряженияНаОтгрузкуКВыполнению";
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда 
		Параметры.ОбработкаЗавершена = Истина; 
		Константы.УдалитьРаспоряженияНаОтгрузкуКВыполнениюНеЗаполнен.Установить(Ложь);
		Возврат;       
	КонецЕсли;
	ТаблицаОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);   
	Запрос = Новый Запрос();  
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьЗаказыКлиентовОбороты.ЗаказКлиента КАК Распоряжение,
	|	УдалитьЗаказыКлиентовОбороты.Склад КАК Склад,
	|	УдалитьЗаказыКлиентовОбороты.Номенклатура КАК Номенклатура,
	|	УдалитьЗаказыКлиентовОбороты.Характеристика КАК Характеристика,
	|	УдалитьЗаказыКлиентовОбороты.Серия КАК Серия,
	|	ВЫБОР
	|		КОГДА УдалитьЗаказыКлиентовОбороты.КОформлениюПриход = УдалитьЗаказыКлиентовОбороты.КОформлениюРасход
	|			ТОГДА 1
	|		КОГДА УдалитьЗаказыКлиентовОбороты.КОформлениюРасход = 0
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК СостояниеКОформлению,
	|	ВЫБОР
	|		КОГДА УдалитьЗаказыКлиентовОбороты.КПередачеПриход = УдалитьЗаказыКлиентовОбороты.КПередачеРасход
	|			ТОГДА 1
	|		КОГДА УдалитьЗаказыКлиентовОбороты.КПередачеПриход > 0
	|				И УдалитьЗаказыКлиентовОбороты.КПередачеРасход = 0
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК СостояниеКПередаче,
	|	ВЫБОР
	|		КОГДА УдалитьЗаказыКлиентовОбороты.ЗаказаноПриход = УдалитьЗаказыКлиентовОбороты.ЗаказаноРасход
	|			ТОГДА 1
	|		КОГДА УдалитьЗаказыКлиентовОбороты.ЗаказаноРасход = 0
	|				И УдалитьЗаказыКлиентовОбороты.ЗаказаноПриход > 0
	|			ТОГДА 2
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК СостояниеЗаказано
	|ПОМЕСТИТЬ ВТСостоянияРаспоряжений
	|ИЗ
	|	РегистрНакопления.УдалитьЗаказыКлиентов.Обороты(
	|			,
	|			,
	|			,
	|			ЗаказКлиента = &Распоряжение
	|			И Склад = &Склад) КАК УдалитьЗаказыКлиентовОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияРаспоряжений.Распоряжение КАК Распоряжение,
	|	СостоянияРаспоряжений.Склад КАК Склад,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.Организация) КАК Организация,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.Номер) КАК Номер,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.Дата) КАК Дата,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.СуммаДокумента) КАК СуммаДокумента,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.Валюта) КАК Валюта,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.ХозяйственнаяОперация) КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.Партнер) КАК Партнер,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.Контрагент) КАК Контрагент,
	|	МАКСИМУМ(СостоянияРаспоряжений.Распоряжение.Менеджер) КАК Менеджер,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СостоянияРаспоряжений.СостояниеКОформлению) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.Оформлены)
	|		КОГДА МАКСИМУМ(СостоянияРаспоряжений.СостояниеКОформлению) = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.НеОформлены)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.ЧастичноОформлены)
	|	КОНЕЦ КАК СостояниеКОформлению,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СостоянияРаспоряжений.СостояниеКПередаче) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.Оформлены)
	|		КОГДА МАКСИМУМ(СостоянияРаспоряжений.СостояниеКПередаче) = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.НеОформлены)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.ЧастичноОформлены)
	|	КОНЕЦ КАК СостояниеКПередаче,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(СостоянияРаспоряжений.СостояниеЗаказано) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.Оформлены)
	|		КОГДА МАКСИМУМ(СостоянияРаспоряжений.СостояниеЗаказано) = 2
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.НеОформлены)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостояниеОформленияДокументовПоРаспоряжению.ЧастичноОформлены)
	|	КОНЕЦ КАК СостояниеЗаказано
	|ИЗ
	|	ВТСостоянияРаспоряжений КАК СостоянияРаспоряжений
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияРаспоряжений.Распоряжение,
	|	СостоянияРаспоряжений.Склад
	|
	|ИМЕЮЩИЕ
	|	(МАКСИМУМ(СостоянияРаспоряжений.СостояниеКОформлению) > 1
	|		ИЛИ МАКСИМУМ(СостоянияРаспоряжений.СостояниеКПередаче) > 1
	|		ИЛИ МАКСИМУМ(СостоянияРаспоряжений.СостояниеЗаказано) > 1)"; 
	
	Для Каждого Строка Из ТаблицаОбновляемыеДанные Цикл
		НаборЗаписей = Неопределено;
		Запрос.УстановитьПараметр("Распоряжение", Строка.Распоряжение);
		Запрос.УстановитьПараметр("Склад", Строка.Склад);
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.УдалитьЗаказыКлиентов");
			ЭлементБлокировки.УстановитьЗначение("ЗаказКлиента", Строка.Распоряжение);
			ЭлементБлокировки.УстановитьЗначение("Склад", Строка.Склад);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;

			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РаспоряженияНаОтгрузкуКВыполнению");
			ЭлементБлокировки.УстановитьЗначение("Склад", Строка.Склад);
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Строка.Распоряжение);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			//@skip-check query-in-loop
			ТаблицаНабора = Запрос.Выполнить().Выгрузить();
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Склад.Установить(Строка.Склад);
			НаборЗаписей.Отбор.Распоряжение.Установить(Строка.Распоряжение);
			НаборЗаписей.Загрузить(ТаблицаНабора);
	
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Если НаборЗаписей = Неопределено Тогда
				НаборЗаписей = СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Склад.Установить(Строка.Склад);
				НаборЗаписей.Отбор.Распоряжение.Установить(Строка.Распоряжение);
			КонецЕсли;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), НаборЗаписей);
		КонецПопытки;
	КонецЦикла;    
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	Если Параметры.ОбработкаЗавершена Тогда
		Константы.УдалитьРаспоряженияНаОтгрузкуКВыполнениюНеЗаполнен.Установить(Ложь);
	КонецЕсли;
			
КонецПроцедуры        

#КонецОбласти

#КонецОбласти

#КонецЕсли
