#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает структуру значений по умолчанию для движений по ссылке на документ.
// 
// Параметры:
// 	СсылкаНаОформляемыйДокумент - ОпределяемыйТип.ДокументыЕГАИС - Ссылка на оформляемый документ.
// Возвращаемое значение:
// 	Структура - Описание:
// * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
// * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
// * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
// * УведомлениеОРегистрацииДвижения - Булево - Уведомление о регистрации движения.
// * КвитанцияПроведенЕГАИС - Булево - Квитанция проведен ЕГАИС.
// * КвитанцияПолученЕГАИС - Булево - Квитанция получен ЕГАИС.
// * Статус - ПеречислениеСсылка - Статус документа (СтатусПоУмолчанию).
// * Документ - ОпределяемыйТип.ДокументыЕГАИС - Ссылка на оформляемый документ.
//
Функция ЗначенияПоУмолчанию(СсылкаНаОформляемыйДокумент) Экспорт
	
	СтруктураЗначенияПоУмолчанию = Новый Структура;
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(СсылкаНаОформляемыйДокумент);
	
	СтруктураЗначенияПоУмолчанию.Вставить("Документ", СсылкаНаОформляемыйДокумент);
	СтруктураЗначенияПоУмолчанию.Вставить("Статус",   МенеджерОбъекта.СтатусПоУмолчанию());
	
	СтруктураЗначенияПоУмолчанию.Вставить("КвитанцияПолученЕГАИС",           Ложь);
	СтруктураЗначенияПоУмолчанию.Вставить("КвитанцияПроведенЕГАИС",          Ложь);
	СтруктураЗначенияПоУмолчанию.Вставить("УведомлениеОРегистрацииДвижения", Ложь);
	
	СтруктураЗначенияПоУмолчанию.Вставить("ДальнейшееДействие1", МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
	СтруктураЗначенияПоУмолчанию.Вставить("ДальнейшееДействие2", Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	СтруктураЗначенияПоУмолчанию.Вставить("ДальнейшееДействие3", Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	
	Возврат СтруктураЗначенияПоУмолчанию;
	
КонецФункции

// Осуществляет запись в регистр по переданным данным.
//
// Параметры:
//  ДанныеЗаписи - Структура - данные для записи в регистр (см. ЗначенияПоУмолчанию).
//
Процедура ВыполнитьЗаписьВРегистр(ДанныеЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеЗаписи);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Обработать набор записей регистра.
//
// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.СтатусыДокументовЕГАИС - Набор записей.
//  ПараметрыОбновления - См. ВозвращаемоеЗначениеДальнейшиеДействияСтатус.
//  ЭтоНовый - Булево - Признак нового объекта.
//  
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - Неопределено, ПеречислениеСсылка - Новый статус.
//   * СтарыйСтатус - Неопределено, ПеречислениеСсылка - Старый статус.
//   * ЗаписатьНабор - Неопределено, Булево - Признак необходимости записи набора.
//
Функция ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления, ЭтоНовый = Истина) Экспорт
	
	НовыйСтатус   = Неопределено;
	СтарыйСтатус  = Неопределено;
	ЗаписатьНабор = Неопределено;
	
	Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
		Если ЗаписьНабора.Статус <> ПараметрыОбновления.НовыйСтатус Или ЭтоНовый Тогда
			СтарыйСтатус = ЗаписьНабора.Статус;
			ЗаписьНабора.Статус = ПараметрыОбновления.НовыйСтатус;
			НовыйСтатус = ПараметрыОбновления.НовыйСтатус;
			ЗаписатьНабор = Истина;
		КонецЕсли;
		Если ЗаписьНабора.ДальнейшееДействие1 <> ПараметрыОбновления.ДальнейшееДействие1 Тогда
			ЗаписьНабора.ДальнейшееДействие1 = ПараметрыОбновления.ДальнейшееДействие1;
			ЗаписатьНабор = Истина;
		КонецЕсли;
		Если ЗаписьНабора.ДальнейшееДействие2 <> ПараметрыОбновления.ДальнейшееДействие2 Тогда
			ЗаписьНабора.ДальнейшееДействие2 = ПараметрыОбновления.ДальнейшееДействие2;
			ЗаписатьНабор = Истина;
		КонецЕсли;
		Если ЗаписьНабора.ДальнейшееДействие3 <> ПараметрыОбновления.ДальнейшееДействие3 Тогда
			ЗаписьНабора.ДальнейшееДействие3 = ПараметрыОбновления.ДальнейшееДействие3;
			ЗаписатьНабор = Истина;
		КонецЕсли;
		Если ПараметрыОбновления.Прочее <> Неопределено Тогда
			Для Каждого КлючИЗначение Из ПараметрыОбновления.Прочее Цикл
				Если ЗаписьНабора[КлючИЗначение.Ключ] <> ПараметрыОбновления.Прочее[КлючИЗначение.Ключ] Тогда
					ЗаписьНабора[КлючИЗначение.Ключ] = ПараметрыОбновления.Прочее[КлючИЗначение.Ключ];
					ЗаписатьНабор = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус",   НовыйСтатус);
	ВозвращаемоеЗначение.Вставить("СтарыйСтатус",  СтарыйСтатус);
	ВозвращаемоеЗначение.Вставить("ЗаписатьНабор", ЗаписатьНабор);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Изменяет и возвращает статус документа ЕГАИС.
//
// Параметры:
//  Документ - ОпределяемыйТип.ДокументыЕГАИС - Документ ЕГАИС.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//   * Прочее - Структура - Структура со свойствами:
//      ** КвитанцияПолученЕГАИС - Булево - Необходимость получения квитанции Получен в ЕГАИС.
//      ** КвитанцияПроведенЕГАИС - Булево - Необходимость получения квитанции Проведен в ЕГАИС.
//      ** УведомлениеОРегистрацииДвижения - Булево - Необходимость уведомления о регистрации движений.
//  ДополнительныеПараметры - Структура - Дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - новый статус документа ЕГАИС.
//
Функция ОбновитьСтатус(Документ, ПараметрыОбновления, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыОбновления = Неопределено Тогда
		
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Документ);
		
		ДальнейшиеДействия = Новый Массив;
		ДальнейшиеДействия.Добавить(МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию());
		
		Возврат ОбновитьСтатус(
			Документ,
			ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
				МенеджерОбъекта.СтатусПоУмолчанию(), ДальнейшиеДействия, Истина),
			ОбменДаннымиЕГАИС.ПараметрыОбновленияСтатуса());
		
	КонецЕсли;
	
	Если ПараметрыОбновления.НовыйСтатус = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка изменения статуса'");
	КонецЕсли;
	
	ЭтоНовый = Ложь;
	НаборЗаписей = НаборЗаписей(Документ, ЭтоНовый);
	ЗаписатьНабор = НаборЗаписей.Модифицированность();
	
	Результат = ОбработатьНаборЗаписей(НаборЗаписей, ПараметрыОбновления, ЭтоНовый);
	Если Результат.ЗаписатьНабор <> Неопределено Тогда
		ЗаписатьНабор = Результат.ЗаписатьНабор;
	КонецЕсли;
	НовыйСтатус  = Результат.НовыйСтатус;
	СтарыйСтатус = Результат.СтарыйСтатус;
	
	Если ЗаписатьНабор Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей.Записать();
		
		Если СтарыйСтатус <> НовыйСтатус Тогда
			
			ПолноеИмя = Документ.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			
			ПараметрыОбновленияСтатуса = ОбменДаннымиЕГАИС.ДополнитьПараметрыОбновленияСтатуса(ДополнительныеПараметры);
			
			МенеджерОбъекта.ПриИзмененииСтатусаДокумента(
				Документ,
				СтарыйСтатус, НовыйСтатус,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйСтатус;
	
КонецФункции

// Возвращает текущее состояние переданного документа ЕГАИС.
// 
// Параметры:
//  Документ - ДокументСсылка - Ссылка на переданный документ.
// Возвращаемое значение:
//  Структура - Описание:
// * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие.
// * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие.
// * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие.
// * УведомлениеОРегистрацииДвижения - Булево - Уведомление о регистрации движения.
// * КвитанцияПроведенЕГАИС - Булево - Квитанция проведения ЕГАИС.
// * КвитанцияПолученЕГАИС - Булево - Квитанция получения ЕГАИС.
// * Статус - ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС,
//   ПеречислениеСсылка.СтатусыОбработкиОстатковЕГАИС,
//   ПеречислениеСсылка.СтатусыОбработкиОтчетаЕГАИС,
//   ПеречислениеСсылка.СтатусыОбработкиПередачиВРегистр2ЕГАИС,
//   ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС,
//   ПеречислениеСсылка.СтатусыОбработкиАктаСписанияЕГАИС,
//   ПеречислениеСсылка.СтатусыИнформированияЕГАИС,
//   ПеречислениеСсылка.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС,
//   ПеречислениеСсылка.СтатусыОбработкиТТНИсходящейЕГАИС,
//   ПеречислениеСсылка.СтатусыОбработкиТТНВходящейЕГАИС - текущий статус.
// * Документ - ДокументСсылка - Ссылка на документ, для которого необходимо получить статус.
//
Функция ТекущееСостояние(Документ) Экспорт
	
	ВозвращаемоеЗначение = ЗначенияПоУмолчанию(Документ);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Документ,
	|	СтатусыДокументовЕГАИС.Статус,
	|	СтатусыДокументовЕГАИС.КвитанцияПолученЕГАИС,
	|	СтатусыДокументовЕГАИС.КвитанцияПроведенЕГАИС,
	|	СтатусыДокументовЕГАИС.УведомлениеОРегистрацииДвижения,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие3
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ = &Документ");
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение, Выборка);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Рассчитать статусы при получении квитанции.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка
//  Имя - Строка
//  СтатусОбработки - ПеречислениеСсылка
//  Статусы - ПеречислениеСсылка
//  ВыполнитьРасчетТекущегоСостояния - Булево - Выполнить расчет текущего состояния
// 
// Возвращаемое значение:
//  Структура - Рассчитать статусы при получении квитанции:
// * НовыйСтатус - Неопределено, ПеречислениеСсылка - новый статус 
// * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 1
// * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 2
// * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 3
// * Прочее - Структура - :
// ** КвитанцияПолученЕГАИС - Булево - 
// ** КвитанцияПроведенЕГАИС - Булево - 
// ** УведомлениеОРегистрацииДвижения - Булево - 
Функция РассчитатьСтатусыПриПолученииКвитанции(ДокументСсылка, Имя, СтатусОбработки, Статусы, ВыполнитьРасчетТекущегоСостояния = Истина) Экспорт
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
		
		ДальнейшиеДействия = Новый Массив;
		Статус = Неопределено;
		Если Имя = "КвитанцияПроведенЕГАИС" Тогда
			Статус = Статусы.ОшибкаПроведения;
		КонецЕсли;
		Если Статус = Неопределено Тогда
			Статус = Статусы.Ошибка;
		КонецЕсли;
		
		ДальнейшиеДействия = Новый Массив;
		Для Каждого Действие Из Статусы.ОшибкаДействия Цикл
			ДальнейшиеДействия.Добавить(Действие);
		КонецЦикла;
		
		Возврат ВозвращаемоеЗначениеДальнейшиеДействияСтатус(Статус, ДальнейшиеДействия, Истина);
		
	ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументОтменен
		Или СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ДокументРаспроведен Тогда
		
		ДальнейшиеДействия = Новый Массив;
		Для Каждого Действие Из Статусы.ОтменаПроведенияДействия Цикл
			ДальнейшиеДействия.Добавить(Действие);
		КонецЦикла;
		
		Возврат ВозвращаемоеЗначениеДальнейшиеДействияСтатус(Статусы.ОтменаПроведения, ДальнейшиеДействия, Истина);
		
	КонецЕсли;
	
	Если ВыполнитьРасчетТекущегоСостояния <> Ложь Тогда
		
		ВыполнитьРасчетТекущегоСостоянияКэш = Истина;
		
		Если ВыполнитьРасчетТекущегоСостояния = Истина Тогда
			ТекущееСостояние = ТекущееСостояние(ДокументСсылка);
		Иначе
			ТекущееСостояние = ВыполнитьРасчетТекущегоСостояния;
		КонецЕсли;
		
		Прочее = Новый Структура(Имя, Истина);
		Если Имя = "КвитанцияПроведенЕГАИС" Тогда
			Прочее.Вставить("КвитанцияПолученЕГАИС", Истина);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущееСостояние, Прочее);
		Обрабатывается = Не ((ТекущееСостояние.КвитанцияПолученЕГАИС           Или Не Статусы.КвитанцияПолученЕГАИС Или (Не ТекущееСостояние.КвитанцияПолученЕГАИС И ТекущееСостояние.КвитанцияПроведенЕГАИС))
		                   И (ТекущееСостояние.КвитанцияПроведенЕГАИС          Или Не Статусы.КвитанцияПроведенЕГАИС)
		                   И (ТекущееСостояние.УведомлениеОРегистрацииДвижения Или Не Статусы.УведомлениеОРегистрацииДвижения));
		
	Иначе
		ВыполнитьРасчетТекущегоСостоянияКэш = Ложь;
	КонецЕсли;
	
	Если (ВыполнитьРасчетТекущегоСостоянияКэш И Не Обрабатывается) Или Не ВыполнитьРасчетТекущегоСостоянияКэш Тогда
		
		ДальнейшиеДействия = Новый Массив;
		Для Каждого Действие Из Статусы.ПринятДействия Цикл
			ДальнейшиеДействия.Добавить(Действие);
		КонецЦикла;
		
		Возврат ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			Статусы.Принят, ДальнейшиеДействия, ВыполнитьРасчетТекущегоСостояния = Ложь, Прочее);
		
	Иначе
		
		ПолноеИмя = ДокументСсылка.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ДальнейшиеДействия = Новый Массив;
		
		СтатусыОшибок = МенеджерОбъекта.СтатусыОшибок();
		Если СтатусыОшибок.Найти(ТекущееСостояние.Статус) <> Неопределено Тогда;
			
			ДальнейшиеДействия.Добавить(ТекущееСостояние.ДальнейшееДействие1);
			ДальнейшиеДействия.Добавить(ТекущееСостояние.ДальнейшееДействие2);
			ДальнейшиеДействия.Добавить(ТекущееСостояние.ДальнейшееДействие3);
			
			Возврат ВозвращаемоеЗначениеДальнейшиеДействияСтатус(ТекущееСостояние.Статус, ДальнейшиеДействия, Ложь, ТекущееСостояние);
			
		Иначе
			
			Если Статусы.КвитанцияПолученЕГАИС И Не ТекущееСостояние.КвитанцияПолученЕГАИС Тогда
				ДальнейшиеДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
			КонецЕсли;
			Если Статусы.КвитанцияПроведенЕГАИС И Не ТекущееСостояние.КвитанцияПроведенЕГАИС Тогда
				ДальнейшиеДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
			КонецЕсли;
			Если Статусы.УведомлениеОРегистрацииДвижения И Не ТекущееСостояние.УведомлениеОРегистрацииДвижения Тогда
				ДальнейшиеДействия.Добавить(
					Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
			КонецЕсли;
			
			Возврат ВозвращаемоеЗначениеДальнейшиеДействияСтатус(Статусы.Обрабатывается, ДальнейшиеДействия, Ложь, ТекущееСостояние);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Рассчитать статусы
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка
//  СтатусОбработки - ПеречислениеСсылка
//  Статусы - ПеречислениеСсылка
// 
// Возвращаемое значение:
//  Структура - Рассчитать статусы:
// * НовыйСтатус - Неопределено, ПеречислениеСсылка - новый статус 
// * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 1
// * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 2
// * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 3
// * Прочее - Структура - :
// ** КвитанцияПолученЕГАИС - Булево - 
// ** КвитанцияПроведенЕГАИС - Булево - 
// ** УведомлениеОРегистрацииДвижения - Булево - 
Функция РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы) Экспорт
	
	Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.Ошибка Тогда
		
		ДальнейшиеДействия = Новый Массив;
		Для Каждого Действие Из Статусы.ОшибкаДействия Цикл
			ДальнейшиеДействия.Добавить(Действие);
		КонецЦикла;
		
		Возврат ВозвращаемоеЗначениеДальнейшиеДействияСтатус(Статусы.Ошибка, ДальнейшиеДействия, Истина);
		
	КонецЕсли;
	
	ДальнейшиеДействия = Новый Массив;
	Для Каждого Действие Из Статусы.ПринятДействия Цикл
		ДальнейшиеДействия.Добавить(Действие);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначениеДальнейшиеДействияСтатус(Статусы.Принят, ДальнейшиеДействия, Истина);
	
КонецФункции

// Рассчитать статусы к передаче.
// 
// Параметры:
//  ДокументСсылка - ДокументСсылка
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС
// 
// Возвращаемое значение:
//  Структура - Рассчитать статусы к передаче:
// * НовыйСтатус - Неопределено, ПеречислениеСсылка - новый статус
// * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 1
// * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 2
// * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальнейшее действие 3
// * Прочее - Структура - :
// ** КвитанцияПолученЕГАИС - Булево - 
// ** КвитанцияПроведенЕГАИС - Булево - 
// ** УведомлениеОРегистрацииДвижения - Булево - 
Функция РассчитатьСтатусыКПередаче(ДокументСсылка, НовыйСтатус) Экспорт
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхЕГАИС");
	
	ДальнейшиеДействия = Новый Массив;
	Если ИспользоватьАвтоматическийОбмен Тогда
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	Иначе
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	КонецЕсли;
	
	ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных);
	
	Возврат ВозвращаемоеЗначениеДальнейшиеДействияСтатус(НовыйСтатус, ДальнейшиеДействия, Истина);
	
КонецФункции

Функция ДальнейшиеДействия(Статусы) Экспорт
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Если Статусы.ДальнейшееДействие1 <> Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется Тогда
		ВозвращаемоеЗначение.Добавить(Статусы.ДальнейшееДействие1);
	КонецЕсли;
	Если Статусы.ДальнейшееДействие2 <> Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется Тогда
		ВозвращаемоеЗначение.Добавить(Статусы.ДальнейшееДействие2);
	КонецЕсли;
	Если Статусы.ДальнейшееДействие3 <> Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется Тогда
		ВозвращаемоеЗначение.Добавить(Статусы.ДальнейшееДействие3);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Выполняет запись в регистр дальнейших действий, обозначающих архивирование документов.
// 
// Параметры:
// 	ДокументыКАрхивированию - Массив Из ДокументСсылка - Документы для архивирования.
// Возвращаемое значение:
// 	Массив из См. ОбменДаннымиЕГАИСКлиентСервер.ДобавитьСтруктураИзменения - Массив результатов архивирования.
//
Функция Архивировать(ДокументыКАрхивированию) Экспорт
	
	Изменения = Новый Массив;
	
	Для Каждого ДокументСсылка Из ДокументыКАрхивированию Цикл
		
		//@skip-check query-in-loop
		ЗначенияЗаписи = ТекущееСостояние(ДокументСсылка);
		ЗначенияЗаписи.ДальнейшееДействие1 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
		ЗначенияЗаписи.ДальнейшееДействие2 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
		ЗначенияЗаписи.ДальнейшееДействие3 = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется;
		
		ТекстОшибки = "";
		
		Если Не ПравоДоступа("Изменение", ДокументСсылка.Метаданные()) Тогда
			ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа для очистки дальнейших действий по документу'");
		КонецЕсли;
	
		НачатьТранзакцию();
		
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			
			ВыполнитьЗаписьВРегистр(ЗначенияЗаписи);
			
			ДокументОснование = Неопределено;
			Если ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОснование") <> Неопределено Тогда
				ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование");
			КонецЕсли;
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОчередьПередачиДанныхЕГАИС.Сообщение КАК Сообщение
			|ИЗ
			|	РегистрСведений.ОчередьПередачиДанныхЕГАИС КАК ОчередьПередачиДанныхЕГАИС
			|ГДЕ
			|	ОчередьПередачиДанныхЕГАИС.Сообщение.Документ = &Документ");
			Запрос.Параметры.Вставить("Документ", ДокументСсылка);
			//@skip-check query-in-loop
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ОчередьПередачиДанныхЕГАИС.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Сообщение.Установить(Выборка.Сообщение, Истина);
				НаборЗаписей.Записать();
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'При архивировании документа %1 возникла ошибка:
				           |Текст ошибки: %2'"),
				ДокументСсылка,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияЕГАИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
		КонецПопытки;
		УстановитьПривилегированныйРежим(Ложь);
		
		СтрокаРезультата = ОбменДаннымиЕГАИСКлиентСервер.СтруктураИзменения();
		СтрокаРезультата.Объект            = ДокументСсылка;
		СтрокаРезультата.ДокументОснование = ДокументОснование;
		СтрокаРезультата.ТекстОшибки       = ТекстОшибки;
		
		Изменения.Добавить(СтрокаРезультата);
		
	КонецЦикла;
	
	Возврат Изменения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НаборЗаписей(Документ, ЭтоНовый)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ = &Документ");
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	НаборЗаписей = Неопределено;
	Если Выборка.Следующий() Тогда
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ, Истина);
		НаборЗаписей.Прочитать();
		
		ЭтоНовый = Ложь;
		
	Иначе
		
		НаборЗаписей = СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Документ, Истина);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗначенияПоУмолчанию(Документ));
		
		ЭтоНовый = Истина;
		
	КонецЕсли;
	
	Возврат НаборЗаписей;
	
КонецФункции

Функция СтруктураСтатусы() Экспорт
	
	Статусы = Новый Структура;
	Статусы.Вставить("Принят");
	Статусы.Вставить("Обрабатывается");
	Статусы.Вставить("Ошибка");
	Статусы.Вставить("ОшибкаПроведения");
	Статусы.Вставить("ОтменаПроведения");
	
	Статусы.Вставить("ОшибкаДействия",           Новый Массив);
	Статусы.Вставить("ПринятДействия",           Новый Массив);
	Статусы.Вставить("ОтменаПроведенияДействия", Новый Массив);
	
	Статусы.Вставить("КвитанцияПолученЕГАИС",           Истина);
	Статусы.Вставить("КвитанцияПроведенЕГАИС",          Истина);
	Статусы.Вставить("УведомлениеОРегистрацииДвижения", Истина);
	
	Возврат Статусы;
	
КонецФункции

// Возвращаемое значение дальнейшие действия статус.
// 
// Параметры:
//  Статус - Неопределено, ПеречислениеСсылка - Статус
//  ДальнейшиеДействия - Массив Из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшие действия
//  ОчиститьПрочее - Булево - Очистить прочее
//  Прочее - Неопределено, Структура - Прочее:
// * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС -
// * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС -
// * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС -
// * УведомлениеОРегистрацииДвижения - Булево -
// * КвитанцияПроведенЕГАИС - Булево -
// * КвитанцияПолученЕГАИС - Булево -
// * Статус - ПеречислениеСсылка.СтатусыОбработкиЗапросаАкцизныхМарокЕГАИС -
// * Документ - ДокументСсылка -
// 
// Возвращаемое значение:
//  Структура - Возвращаемое значение дальнейшие действия статус:
// * НовыйСтатус - См. Статус
// * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС -
// * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС -
// * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС -
// * Прочее - Структура - :
//  ** КвитанцияПолученЕГАИС           - Булево -
//  ** КвитанцияПроведенЕГАИС          - Булево -
//  ** УведомлениеОРегистрацииДвижения - Булево -
Функция ВозвращаемоеЗначениеДальнейшиеДействияСтатус(Статус, ДальнейшиеДействия, ОчиститьПрочее = Истина, Прочее = Неопределено) Экспорт
	
	ПрочееСтруктура = Новый Структура;
	ПрочееСтруктура.Вставить("КвитанцияПолученЕГАИС",           Ложь);
	ПрочееСтруктура.Вставить("КвитанцияПроведенЕГАИС",          Ложь);
	ПрочееСтруктура.Вставить("УведомлениеОРегистрацииДвижения", Ложь);
	
	Если Не ОчиститьПрочее Тогда
		ЗаполнитьЗначенияСвойств(ПрочееСтруктура, Прочее);
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("НовыйСтатус",         Статус);
	ВозвращаемоеЗначение.Вставить("ДальнейшееДействие1", Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	ВозвращаемоеЗначение.Вставить("ДальнейшееДействие2", Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	ВозвращаемоеЗначение.Вставить("ДальнейшееДействие3", Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	ВозвращаемоеЗначение.Вставить("Прочее",              ПрочееСтруктура);
	
	Индекс = 1;
	Для Каждого ДальнейшееДействие Из ДальнейшиеДействия Цикл
		ВозвращаемоеЗначение["ДальнейшееДействие" + Индекс] = ДальнейшееДействие;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрСведений.СтатусыДокументовЕГАИС";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.АктПостановкиНаБалансЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.АктСписанияЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.ВозвратИзРегистра2ЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.ПередачаВРегистр2ЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.ТТНИсходящаяЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.ЧекЕГАИС КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.ЧекЕГАИСВозврат КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Статус ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Документ
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.СтатусПроверкиИПодбора = ЗНАЧЕНИЕ(Перечисление.СтатусыПроверкиИПодбораИС.ПустаяСсылка)
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС)
	|");
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Таблица, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если ОбщегоНазначенияЕГАИС.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульИнтеграцияЕГАИС = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияЕГАИС");
		МодульИнтеграцияЕГАИС.ОбработатьДанныеДляПереходаНаНовуюВерсиюСтатусыДокументовЕГАИС(Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли