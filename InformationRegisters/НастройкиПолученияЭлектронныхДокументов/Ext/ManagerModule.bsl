// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет указать объекты метаданных, для которых задана логика ограничения доступа к данным.
//
// Параметры:
//  Ограничение - См. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Получатель)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Получатель)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ОбновлениеВерсииИБ


// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - См. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов;
	ПолноеИмяРегистра = МетаданныеОбъекта.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки        = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
	|	НастройкиПолученияЭлектронныхДокументов.Получатель,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовЭДО.ПустаяСсылка)
	|	И
	|		(НастройкиПолученияЭлектронныхДокументов.УдалитьВидДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.ПустаяСсылка)
	|	ИЛИ НастройкиПолученияЭлектронныхДокументов.УдалитьПрикладнойВидЭД <> &ПустойПрикладнойТипДокумента)
	|	ИЛИ НастройкиПолученияЭлектронныхДокументов.СпособОбработки = ""ПоступлениеТоваровУслуг""
	|	И НастройкиПолученияЭлектронныхДокументов.УдалитьВидДокумента В (&ТипыТребующиеИзменениеСпособаОбработки)
	|;
	|//////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиПолученияЭлектронныхДокументов.Отправитель,
	|	НастройкиПолученияЭлектронныхДокументов.Получатель,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя,
	|	НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя,
	|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки
	|ИЗ
	|	РегистрСведений.НастройкиПолученияЭлектронныхДокументов КАК НастройкиПолученияЭлектронныхДокументов
	|ГДЕ
	|	НастройкиПолученияЭлектронныхДокументов.СпособОбработки = &СпособОбработкиНеОтражать";
	
	Запрос.УстановитьПараметр("ПустойПрикладнойТипДокумента",
		Метаданные.ОпределяемыеТипы.ПрикладныеТипыЭлектронныхДокументовЭДО.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ТипыТребующиеИзменениеСпособаОбработки", ТипыТребующиеИзменениеСпособаОбработки());
	Запрос.УстановитьПараметр("СпособОбработкиНеОтражать", НекорректныйСпособОбработкиНеОтражать());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выгрузка = Результаты[0].Выгрузить();
	
	ВыборкаНекорректныеСпособыОбработки = Результаты[1].Выбрать();
	Пока ВыборкаНекорректныеСпособыОбработки.Следующий() Цикл
		// Проверка регистра строки, т.к. запрос его не учитывает.
		Если ВыборкаНекорректныеСпособыОбработки.СпособОбработки = НекорректныйСпособОбработкиНеОтражать() Тогда
			НоваяСтрока = Выгрузка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаНекорректныеСпособыОбработки);
		КонецЕсли;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура:
//  * ОбработкаЗавершена - Булево
//  * Очередь - Число
//  * ПрогрессВыполнения - Структура:
//  ** ВсегоОбъектов - Число
//  ** ОбработаноОбъектов - Число
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	СоответствиеВидовДокументов = ОбменСКонтрагентамиИнтеграция.СоответствиеВидовЭДВидамДокументовЭДО();
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	Для Каждого СтрокаДанных Из ВыбранныеДанные Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Записать = Ложь;
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Отправитель.Установить(СтрокаДанных.Отправитель);
			НаборЗаписей.Отбор.Получатель.Установить(СтрокаДанных.Получатель);
			НаборЗаписей.Отбор.ИдентификаторОтправителя.Установить(СтрокаДанных.ИдентификаторОтправителя);
			НаборЗаписей.Отбор.ИдентификаторПолучателя.Установить(СтрокаДанных.ИдентификаторПолучателя);
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() Тогда
				
				ДанныеНабора = НаборЗаписей.Выгрузить();
				
				ОбработатьДанные_УдалитьНастройкуДляПередачиТоваровМеждуОрганизациями(ДанныеНабора, Записать);
				ОбработатьДанные_ЗаполнитьВидДокумента(ДанныеНабора, СоответствиеВидовДокументов, Записать);
				ОбработатьДанные_УбратьДублиАктаВыполненныхРабот(ДанныеНабора, Записать);
				ОбработатьДанные_ИсправитьСпособОбработки(ДанныеНабора, Записать);
				
				НаборЗаписей.Загрузить(ДанныеНабора);
				
			КонецЕсли;

			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();

			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;

			СтруктураКлючаЗаписи = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаДанных);
			КлючЗаписиСтрокой = ОбщегоНазначенияБЭДКлиентСервер.СтруктураВСтроку(СтруктураКлючаЗаписи);

			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать настройки получения электронных документов для: %1 по причине:
											|%2'"), СтрокаДанных.Отправитель,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, МетаданныеОбъекта, КлючЗаписиСтрокой, ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр(
			"ru = 'Не удалось обработать некоторые настройки получения электронных документов (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция настроек получения электронных документов: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, МетаданныеОбъекта, , ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов =
		Параметры.ПрогрессВыполнения.ОбработаноОбъектов + ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

// См. ИнтерфейсДокументовЭДО.ПриДобавленииОбработчиковОбновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "1.9.4.4";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dcef58f0-38cb-46b9-ae67-707974f74626");
	Обработчик.Многопоточный = Истина;
	Обработчик.ОчередьОтложеннойОбработки = 3;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = '1С:Обмен с контрагентами: обновление настроек получения электронных документов'");
	
	Читаемые = Новый Массив; // Массив из Строка
	Читаемые.Добавить(Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ВидыДокументовЭДО.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив; // Массив из Строка
	Изменяемые.Добавить(Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив; // Массив из Строка
	Блокируемые.Добавить(Метаданные.РегистрыСведений.НастройкиПолученияЭлектронныхДокументов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыДокументовЭДО.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.СообщениеЭДОПрисоединенныеФайлы.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	
КонецПроцедуры

// Параметры:
//  ДанныеНабора - ТаблицаЗначений:
//  * Получатель - См. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Получатель
//  * Отправитель - См. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Отправитель
//  * ИдентификаторОтправителя - См. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
//  * ИдентификаторПолучателя - См. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
//  * ВидДокумента - См. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ВидДокумента
//  * УдалитьВидДокумента - См. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.УдалитьВидДокумента
//  * УдалитьПрикладнойВидЭД - См. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.УдалитьПрикладнойВидЭД
//  СоответствиеВидовДокументов - См. ОбменСКонтрагентамиИнтеграция.СоответствиеВидовЭДВидамДокументовЭДО
//  Записать - Булево
Процедура ОбработатьДанные_ЗаполнитьВидДокумента(ДанныеНабора, СоответствиеВидовДокументов, Записать)
	
	Индекс = ДанныеНабора.Количество() - 1;
	Пока Индекс > 0 Цикл
		
		ТекущаяЗапись = ДанныеНабора[Индекс];
		
		Если Не ЗначениеЗаполнено(ТекущаяЗапись.ВидДокумента) Тогда
			
			ВидДокумента = Неопределено;
			Если ЗначениеЗаполнено(ТекущаяЗапись.УдалитьПрикладнойВидЭД) Тогда
				ВидДокумента = СоответствиеВидовДокументов[ТекущаяЗапись.УдалитьПрикладнойВидЭД];
			ИначеЕсли ЗначениеЗаполнено(ТекущаяЗапись.УдалитьВидДокумента) Тогда 
				ВидДокумента = СоответствиеВидовДокументов[ТекущаяЗапись.УдалитьВидДокумента];
			КонецЕсли;
			
			УдалитьЗапись = Ложь;
			Если ЗначениеЗаполнено(ВидДокумента) Тогда
				ОтборСуществующихНастроек = Новый Структура("ВидДокумента", ВидДокумента);
				СуществующиеНастройки = ДанныеНабора.НайтиСтроки(ОтборСуществующихНастроек);
				Если ЗначениеЗаполнено(СуществующиеНастройки) Тогда
					УдалитьЗапись = Истина;
				Иначе
					ТекущаяЗапись.ВидДокумента = ВидДокумента;
					Записать = Истина;
				КонецЕсли;
			Иначе
				УдалитьЗапись = Истина;
			КонецЕсли;
			
			Если УдалитьЗапись Тогда
				ДанныеНабора.Удалить(ТекущаяЗапись);
				Записать = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ДанныеНабора - См. ОбработатьДанные_ЗаполнитьВидДокумента.ДанныеНабора
//  Записать - Булево
Процедура ОбработатьДанные_УдалитьНастройкуДляПередачиТоваровМеждуОрганизациями(ДанныеНабора, Записать)
	
	Отбор = Новый Структура("УдалитьВидДокумента", Перечисления.ТипыДокументовЭДО.ПередачаТоваровМеждуОрганизациями);
	УдаляемыеЗаписи = ДанныеНабора.НайтиСтроки(Отбор);
	Если ЗначениеЗаполнено(УдаляемыеЗаписи) Тогда
		Записать = Истина;
		Для Каждого Запись Из УдаляемыеЗаписи Цикл
			ДанныеНабора.Удалить(Запись);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ДанныеНабора - См. ОбработатьДанные_ЗаполнитьВидДокумента.ДанныеНабора
//  Записать - Булево
Процедура ОбработатьДанные_УбратьДублиАктаВыполненныхРабот(ДанныеНабора, Записать)
	
	ВидАктВыполненныхРабот = ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
		Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
	Отбор = Новый Структура("ВидДокумента", ВидАктВыполненныхРабот);
	СтрокиАктВыполненныхРабот = ДанныеНабора.НайтиСтроки(Отбор);
	Если СтрокиАктВыполненныхРабот.Количество() > 1 Тогда
		УдаляемаяСтрока = ДанныеНабора.Найти(Перечисления.ТипыДокументовЭДО.АктВыполненныхРабот);
		Если УдаляемаяСтрока <> Неопределено Тогда
			УдаляемаяСтрока = СтрокиАктВыполненныхРабот[0];
		КонецЕсли;
		ДанныеНабора.Удалить(УдаляемаяСтрока);
		Записать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.НастройкиПолученияЭлектронныхДокументов
//  Записать - Булево
// Параметры:
//  ДанныеНабора - См. ОбработатьДанные_ЗаполнитьВидДокумента.ДанныеНабора
//  Записать - Булево
Процедура ОбработатьДанные_ИсправитьСпособОбработки(ДанныеНабора, Записать)
	
	ТипыДокументовИзменитьСпособОбработки = ТипыТребующиеИзменениеСпособаОбработки();
	Для Каждого Запись Из ДанныеНабора Цикл
		
		Если Запись.СпособОбработки = НекорректныйСпособОбработкиНеОтражать() Тогда
			Запись.СпособОбработки = ОтражениеВУчетеЭДО.СпособОбработки_НеОтражать();
			Записать = Истина;
		КонецЕсли;
		
		Если ТипыДокументовИзменитьСпособОбработки.Найти(Запись.УдалитьВидДокумента) <> Неопределено
			И Запись.СпособОбработки = "ПоступлениеТоваровУслуг" Тогда
				
			СпособОбработки = ?(Запись.УдалитьВидДокумента = Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав,
				"АктНаПередачуПрав", "АктВыполненныхРабот");
			Запись.СпособОбработки = СпособОбработки;
			Записать = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.ТипыДокументовЭДО
Функция ТипыТребующиеИзменениеСпособаОбработки()
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.УдалитьАктИсполнитель);
	ТипыДокументов.Добавить(Перечисления.ТипыДокументовЭДО.АктНаПередачуПрав);
	
	Возврат ТипыДокументов;
	
КонецФункции

// Возвращаемое значение:
//  Строка
Функция НекорректныйСпособОбработкиНеОтражать()
	
	Возврат "НЕОТРАЖАТЬ";
	
КонецФункции

#КонецОбласти

// Параметры:
//  Получатель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Получатель
//  Отправитель - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.Отправитель
//  ИдентификаторПолучателя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
//  ИдентификаторОтправителя - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторОтправителя
// 
// Возвращаемое значение:
//  Булево
Функция Удалить(Получатель, Отправитель, ИдентификаторПолучателя, ИдентификаторОтправителя) Экспорт
	
	Результат = Истина;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Отбор.Получатель.Установить(Получатель);
	
	Если ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		НаборЗаписей.Отбор.ИдентификаторПолучателя.Установить(ИдентификаторПолучателя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторОтправителя) Тогда
		НаборЗаписей.Отбор.ИдентификаторОтправителя.Установить(ИдентификаторОтправителя);
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		// Попытка удаления. Управляемую блокировку устанавливать нет необходимости.
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось удалить настройки отражения в учете электронных документов по:
                                      |Организация: %1,
                                      |Контрагент: %2,
                                      |Идентификатор организации: %3.
                                      |Идентификатор контрагента: %4'"), Получатель, Отправитель,
                                      ИдентификаторПолучателя, ИдентификаторОтправителя);
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Удаление настроек отражения в учете ЭДО'"),
		ОбщегоНазначенияБЭД.ПодробноеПредставлениеИнформацииОбОшибке(Информация), ТекстОшибки);
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ИдентификаторУчетнойЗаписи - см. РегистрСведений.НастройкиПолученияЭлектронныхДокументов.ИдентификаторПолучателя
Процедура УдалитьПоУчетнойЗаписиЭДО(ИдентификаторУчетнойЗаписи) Экспорт
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПолучателя.Установить(ИдентификаторУчетнойЗаписи);
	НаборЗаписей.Записать();
КонецПроцедуры

#КонецОбласти

#КонецЕсли
