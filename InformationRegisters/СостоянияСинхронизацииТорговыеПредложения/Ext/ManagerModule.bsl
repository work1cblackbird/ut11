#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ПараметрыВыборки                      = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки        = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	
	ТорговоеПредложение = Неопределено;
	РазмерПорцииДанных = 1000;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение,
		|	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
		|ГДЕ
		|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение > &ТорговоеПредложение
		|				И ((СостоянияСинхронизацииТорговыеПредложения.ВариантПубликацииОстатков = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииОстатковТорговыеПредложения.ПустаяСсылка)
		|				И СостоянияСинхронизацииТорговыеПредложения.ПубликоватьОстатки) ИЛИ СостоянияСинхронизацииТорговыеПредложения.АдресЭлектроннойПочты = """")
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение
		|АВТОУПОРЯДОЧИВАНИЕ";
	
	РазмерПорцииДанныхЗапрос = СтрШаблон("ПЕРВЫЕ %1", Формат(РазмерПорцииДанных, "ЧГ=0;"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1", РазмерПорцииДанныхЗапрос);
	
	Пока Истина Цикл
		
		Запрос.УстановитьПараметр("ТорговоеПредложение", ТорговоеПредложение);
		
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрок = Выгрузка.Количество();
		
		Если КоличествоСтрок = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Выгрузка, ДополнительныеПараметры);
		
		Если КоличествоСтрок < РазмерПорцииДанных Тогда
			Прервать;
		КонецЕсли;
		
		ПоследняяСтрока = Выгрузка[КоличествоСтрок - 1];
		
		ТорговоеПредложение = ПоследняяСтрока.ТорговоеПредложение;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ЕстьОтработанныеЗаписи = Ложь;
	ПроизошлаОшибка        = Ложь;
	ТекстСообщения         = "";
	
	Для Каждого ТекущаяСтрокаРегистра Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			НаборЗаписей = СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.ТорговоеПредложение.Установить(ТекущаяСтрокаРегистра.ТорговоеПредложение);
			НаборЗаписей.Отбор.Организация.Установить(ТекущаяСтрокаРегистра.Организация);
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоНаборуЗаписей(НаборЗаписей);
			
			НаборЗаписей.Прочитать();
			
			Записать = Ложь;
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				ТекущаяЗапись = НаборЗаписей[0];
				
				ОбработатьДанныеДляПереходаНаНовуюВерсию_1_8_1_11(ТекущаяЗапись, Записать);
				
				ОбработатьДанныеДляПереходаНаНовуюВерсию_1_9_5_13(ТекущаяЗапись, Записать);
				
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЕстьОтработанныеЗаписи = Истина;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать запись по торговому предложению %1 по причине:%2%3'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, 
				ТекущаяСтрокаРегистра.ТорговоеПредложение, 
				Символы.ПС, 
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ИмяСобытия = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, МетаданныеОбъекта, 
				ТекущаяСтрокаРегистра.ТорговоеПредложение, ТекстСообщения);
			
			ПроизошлаОшибка = Истина;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ЕстьОтработанныеЗаписи И ПроизошлаОшибка Тогда
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Изменить реквизит записи регистра.
// 
// Параметры:
//  ТорговоеПредложение - ОпределяемыйТип.ТорговоеПредложение - Торговое предложение
//  ИмяРеквизита - Строка - Имя реквизита.
//  Значение - Произвольный - устанавливаемое значение реквизита.
//
Процедура СоздатьИзменитьЗаписьРегистра(ТорговоеПредложение, ИмяРеквизита, Значение) Экспорт
	
	ТекущаяЗапись = СоздатьМенеджерЗаписи();
	ТекущаяЗапись.ТорговоеПредложение = ТорговоеПредложение;
	
	СвойстваПредложения = Новый Структура("Организация");
	ТорговыеПредложенияПереопределяемый.ПолучитьСвойстваТорговогоПредложения(ТорговоеПредложение, СвойстваПредложения);
	ТекущаяЗапись.Организация = СвойстваПредложения.Организация;
	ТекущаяЗапись.Прочитать();
	
	Если Не ТекущаяЗапись.Выбран() Тогда
		ТекущаяЗапись.ТорговоеПредложение = ТорговоеПредложение;
		ТекущаяЗапись.Организация = СвойстваПредложения.Организация;
	КонецЕсли;
	
	ТекущаяЗапись[ИмяРеквизита] = Значение;
	Если Не ТекущаяЗапись.Отключено Тогда
		ТекущаяЗапись.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
	КонецЕсли;
	ТекущаяЗапись.Записать();
	
КонецПроцедуры

// См. ТорговыеПредложенияСлужебный.ИзменитьСостояниеПубликацииПрайсЛистов
//
Процедура ИзменитьСостояниеПубликацииПрайсЛистов(ПараметрыМетода) Экспорт
	
	Для Каждого ЭлементКоллекции Из ПараметрыМетода.ТорговыеПредложения Цикл
		
		Отбор = Новый Структура("ТорговоеПредложение", ЭлементКоллекции);
		
		Выборка = Выбрать(Отбор);
		
		Если Выборка.Следующий() Тогда
			
			МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
			
			СброситьДату = Ложь;
			Если ПараметрыМетода.ЭтоУдаление Тогда
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Удаление;
				СброситьДату = Истина;
			ИначеЕсли ПараметрыМетода.ЭтоОтменаУдаления Тогда
				МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.Изменение;
				СброситьДату = Истина;
			ИначеЕсли ПараметрыМетода.ЭтоОтключениеПубликации Тогда
				МенеджерЗаписи.Отключено = Истина;
				СброситьДату = Истина;
			ИначеЕсли ПараметрыМетода.ЭтоВключениеПубликации Тогда
				МенеджерЗаписи.Отключено = Ложь;
				СброситьДату = Истина;
			КонецЕсли;
			
			МенеджерЗаписи.Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
			
			Если СброситьДату Тогда
				МенеджерЗаписи.ДатаСинхронизации = '00010101';
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// См. ТорговыеПредложенияСлужебный.УстановитьСостояниеТорговыхПредложений
//
Процедура УстановитьСостояниеТорговыхПредложений(ИзмененныеПрайсЛисты, СостояниеОшибка) Экспорт
	
	Если ИзмененныеПрайсЛисты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПрайсЛисты = Новый Массив;
	
	Для каждого ПрайсЛист Из ИзмененныеПрайсЛисты Цикл
		ПрайсЛисты.Добавить(ПрайсЛист.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение КАК ТорговоеПредложение,
	|	СостоянияСинхронизацииТорговыеПредложения.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СостоянияСинхронизацииТорговыеПредложения КАК СостоянияСинхронизацииТорговыеПредложения
	|ГДЕ
	|	СостоянияСинхронизацииТорговыеПредложения.ТорговоеПредложение В(&ИзмененныеПрайсЛисты)");
	
	Запрос.УстановитьПараметр("ИзмененныеПрайсЛисты", ПрайсЛисты);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.СостоянияСинхронизацииТорговыеПредложения.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаЗапроса);
		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() 
			Или МенеджерЗаписи.Отключено Тогда
			Возврат;
		КонецЕсли;
		
		СостояниеОшибкаСинхронизации = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ОшибкаСинхронизации;
		
		Если СостояниеОшибка Тогда
			Состояние = СостояниеОшибкаСинхронизации;
		Иначе
			Состояние = Перечисления.СостоянияСинхронизацииТорговыеПредложения.ТребуетсяСинхронизация;
		КонецЕсли;
		
		Если МенеджерЗаписи.Состояние = Состояние 
			Или МенеджерЗаписи.Состояние = СостояниеОшибкаСинхронизации Тогда
			Возврат;
		КонецЕсли;
		
		МенеджерЗаписи.Состояние = Состояние;
		
		Если МенеджерЗаписи.Состояние = СостояниеОшибкаСинхронизации Тогда
			
			МенеджерЗаписи.ДействиеСинхронизации = Перечисления.ДействияСинхронизацииТорговыеПредложения.ПустаяСсылка();
			МенеджерЗаписи.ДатаСинхронизации = ТекущаяДатаСеанса();
			ТекстОшибки = НСтр("ru = 'Ошибка публикации торговых предложений.'");
			МенеджерЗаписи.ОписаниеОшибки = ТекстОшибки;
			
		КонецЕсли;
		
		МенеджерЗаписи.КоличествоОпубликованных = 
			МенеджерЗаписи.КоличествоОпубликованных - ИзмененныеПрайсЛисты[ВыборкаЗапроса.ТорговоеПредложение];
		МенеджерЗаписи.Записать(Истина);
		
	КонецЦикла;

КонецПроцедуры

Функция ЗаписьСостояниеСинхронизации(Организация, ТорговоеПредложение) Экспорт
	
	ТекущаяЗапись = СоздатьМенеджерЗаписи();
	
	ТекущаяЗапись.Организация         = Организация;
	ТекущаяЗапись.ТорговоеПредложение = ТорговоеПредложение;
	
	ТекущаяЗапись.Прочитать();
	
	Результат = Неопределено;
	
	Если ТекущаяЗапись.Выбран() Тогда
		Результат = ТекущаяЗапись;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию_1_8_1_11(ТекущаяЗапись, Записать)
	
	Если Не ЗначениеЗаполнено(ТекущаяЗапись.ВариантПубликацииОстатков) И ТекущаяЗапись.ПубликоватьОстатки Тогда
		Записать = Истина;
		ТекущаяЗапись.ВариантПубликацииОстатков = Перечисления.ВариантыПубликацииОстатковТорговыеПредложения.Наличие;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию_1_9_5_13(ТекущаяЗапись, Записать)
	
	Если ПустаяСтрока(ТекущаяЗапись.АдресЭлектроннойПочты) Тогда
		
		Отбор = Новый Структура("ПрайсЛист", ТекущаяЗапись.ТорговоеПредложение);
		СведенияОТорговомПредложении = ТорговыеПредложенияСлужебный.ПолучитьДанныеПубликации("Контакты", Отбор);
		
		ВыборкаЗапросаКонтакты = СведенияОТорговомПредложении.Контакты.Выбрать();
		ВыборкаЗапросаКонтакты.Следующий();
		
		Если Не ПустаяСтрока(ВыборкаЗапросаКонтакты.ЭлектроннаяПочта) Тогда
			Записать = Истина;
			ТекущаяЗапись.АдресЭлектроннойПочты = ВыборкаЗапросаКонтакты.ЭлектроннаяПочта;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

