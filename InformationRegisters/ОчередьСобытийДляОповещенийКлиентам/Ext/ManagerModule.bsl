
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет запись в регистр.
//
// Параметры:
//  ВидОповещения                         - СправочникСсылка.ВидыОповещенийКлиентам - вид оповещения.
//  Подписчик                             - СправочникСсылка.Партнеры - подписчик оповещения.
//  ИсточникОповещения                    - Произвольный - источник оповещения.
//  ДатаОтправки                          - Дата - Дата, в которую должно отправиться оповещение.
//  ДатаАктуальностиОтправки              - Дата - Дата, до которой имеет смысл отправлять оповещение.
//
Процедура ВыполнитьЗаписьВРегистр(ВидОповещения, 
	                              Подписчик, 
	                              ИсточникОповещения, 
	                              ДатаОтправки, 
	                              ДатаАктуальностиОтправки) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запись = РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.СоздатьМенеджерЗаписи();
	Запись.Период                   = ТекущаяДатаСеанса();
	Запись.ВидОповещения            = ВидОповещения;
	Запись.Подписчик                = Подписчик;
	Запись.ИсточникОповещения       = ИсточникОповещения;
	Запись.ДатаОтправки             = ДатаОтправки;
	Запись.ДатаАктуальностиОтправки = ДатаАктуальностиОтправки;
	
	Запись.Записать(Истина);

КонецПроцедуры

// Удаляет записи из очереди по виду оповещения ранее даты отработки.
//
// Параметры:
//  ВидОповещения  - СправочникСсылка.ВидыОповещенийКлиентам - вид оповещения, события по которому должны быть удалены.
//  ДатаУдаления  - Дата - Дата, ранее которой удаляются оповещения из очереди.
//
Процедура УдалитьЗаписиПоВидуОповещенияИзОчереди(ВидОповещения, ДатаУдаления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОчередьСобытийДляОповещенийКлиентам.Период,
	|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения,
	|	ОчередьСобытийДляОповещенийКлиентам.ИсточникОповещения
	|ИЗ
	|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ОчередьСобытийДляОповещенийКлиентам
	|ГДЕ
	|	ОчередьСобытийДляОповещенийКлиентам.ВидОповещения = &ВидОповещения
	|	И ОчередьСобытийДляОповещенийКлиентам.Период < &ДатаУдаления";
	
	Запрос.УстановитьПараметр("ВидОповещения", ВидОповещения);
	Запрос.УстановитьПараметр("ДатаУдаления", ДатаУдаления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ВидОповещения.Установить(Выборка.ВидОповещения);
		НаборЗаписей.Отбор.ИсточникОповещения.Установить(Выборка.ИсточникОповещения);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.19.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1b88775e-b1fe-43d1-ae81-54f2e0dc6ce1");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Удаление записей регистра по устаревшим объектам метаданных.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ОчередьСобытийДляОповещенийКлиентам";
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Запрос = Новый Запрос;
	ТекстыЗапросов = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ВидОповещения КАК ВидОповещения,
	|	ДанныеРегистра.ИсточникОповещения КАК ИсточникОповещения,
	|	ДанныеРегистра.Подписчик КАК Подписчик
	|ИЗ
	|	РегистрСведений.ОчередьСобытийДляОповещенийКлиентам КАК ДанныеРегистра
	|ГДЕ
	|	ЛОЖЬ
	//++ Локализация
	|	ИЛИ ДанныеРегистра.ИсточникОповещения ССЫЛКА Перечисление.УдалитьВариантыУчетаСтоимостиТМЦ
	
	//-- Локализация
	|";
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ОчередьСобытийДляОповещенийКлиентам;
	ПолноеИмяОбъекта  = МетаданныеОбъекта.ПолноеИмя();
	
	Если Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта) Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	Для каждого ЗаписьРегистра Из ОбновляемыеДанные Цикл
		
		НаборЗаписей = СоздатьНаборЗаписей();
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			
			Для каждого ЭлементИзмерения Из ОбновляемыеДанные.Колонки Цикл
				ЭлементБлокировки.УстановитьЗначение(ЭлементИзмерения.Имя, ЗаписьРегистра[ЭлементИзмерения.Имя]);
				НаборЗаписей.Отбор[ЭлементИзмерения.Имя].Установить(ЗаписьРегистра[ЭлементИзмерения.Имя]);
			КонецЦикла;
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обновить данные в регистре %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", ПолноеИмяОбъекта);
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
			МетаданныеОбъекта, Неопределено, ТекстСообщения);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли