#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом
// //
// Параметры:
//   Ограничение - Структура - подробнее УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти	

#КонецОбласти	
	
#Область СлужебныеПроцедурыИФункции

// Описывает структура метаданных регистра сведения для целей записи
//
// Возвращаемое значение:
//  Структура:
//    * ИдентификаторСообщения - Строка
//    * Организация            - СправочникСсылка.Организации
//                             - Неопределено - когда пустое
//    * ДатаСобытия            - Дата
//    * Период                 - Дата
//    * ИдентификаторПакета    - Строка
//    * СтатусОтправкиДанных   - ПеречислениеСсылка.СтатусыОтправкиДанныхВГИСНР
//    * ТекстЗапроса           - Строка
//    * ЧасовойПояс            - Строка
//    * ТекстОшибки            - Строка
//    * ВидСобытия             - ПеречислениеСсылка.ВидыСобытийГИСНР
//    * ОбъектУчета            - ДокументСсылка
//                             - Неопределено - когда пустое
// 
Функция ПолучитьИзмеренияИРесурсы() Экспорт

	Структура = Новый Структура;
	Структура.Вставить("ИдентификаторСообщения", "");
	Структура.Вставить("Организация", Неопределено);
	Структура.Вставить("ДатаСобытия", '00010101');
	Структура.Вставить("Период", '00010101');
	Структура.Вставить("ИдентификаторПакета", "");
	Структура.Вставить("СтатусОтправкиДанных", Перечисления.СтатусыОтправкиДанныхВГИСНР.ПустаяСсылка());
	Структура.Вставить("ТекстЗапроса", "");
	Структура.Вставить("ЧасовойПояс", "");
	Структура.Вставить("ТекстОшибки", "");
	Структура.Вставить("ВидСобытия", Перечисления.ВидыСобытийГИСНР.ПустаяСсылка());
	Структура.Вставить("ОбъектУчета", Неопределено);
	
	Возврат Структура;
	
КонецФункции

// Физическая запись данных в регистр сведений
//
// Параметры:
//  СтруктураИзмеренийРесурсов  - см. ПолучитьИзмеренияИРесурсы
//  МассивЭлектронныхДокументов - Массив из ДокументСсылка.ЭлектронныйДокументВходящийЭДО
//                              - Массив из ДокументСсылка.ЭлектронныйДокументИсходящийЭДО
//
Процедура ЗаписатьДанные(СтруктураИзмеренийРесурсов, МассивЭлектронныхДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(СтруктураИзмеренийРесурсов.ИдентификаторСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(СтруктураИзмеренийРесурсов.ИдентификаторСообщения);
	
	ЗаписьНабора = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(ЗаписьНабора, СтруктураИзмеренийРесурсов);
	ЗаписьНабора.ЭлектронныйДокумент = МассивЭлектронныхДокументов[0];
	
	Если НЕ ЗначениеЗаполнено(ЗаписьНабора.ОбъектУчета) И ЗначениеЗаполнено(ЗаписьНабора.ЭлектронныйДокумент) Тогда
		ЗаписьНабора.ОбъектУчета = НайтиОбъектУчетаПоДокументуЭДО(ЗаписьНабора.ЭлектронныйДокумент);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Обертка для смены статуса на "Отправлено" существующей записи регистра сведений
//
// Параметры:
//  ИдентификаторСообщения  - Строка
//
Процедура ДобавитьСтатусОтправлено(ИдентификаторСообщения) Экспорт
	
	СтатусОтправлено = Перечисления.СтатусыОтправкиДанныхВГИСНР.Отправлено;
	ОчиститьТекстЗапроса = Истина;
	ОчиститьТекстОшибки = Истина;
	
	ДобавитьНовыйСтатус(ИдентификаторСообщения, СтатусОтправлено, ОчиститьТекстЗапроса, ОчиститьТекстОшибки);
	
КонецПроцедуры

// Обертка для смены статуса на "Просрочено" существующей записи регистра сведений
//
// Параметры:
//  ИдентификаторСообщения  - Строка
//
Процедура ДобавитьСтатусПросрочено(ИдентификаторСообщения) Экспорт
	
	СтатусПросрочено = Перечисления.СтатусыОтправкиДанныхВГИСНР.Просрочено;
	ОчиститьТекстЗапроса = Истина;
	ОчиститьТекстОшибки = Истина;
	
	ДобавитьНовыйСтатус(ИдентификаторСообщения, СтатусПросрочено, ОчиститьТекстЗапроса, ОчиститьТекстОшибки);
	
КонецПроцедуры

// Обертка для смены статуса на "Ошибка" существующей записи регистра сведений
//
// Параметры:
//  ИдентификаторСообщения  - Строка
//  ТекстОшибки - Строка
//
Процедура ДобавитьСтатусОшибкаОтправки(ИдентификаторСообщения, ТекстОшибки) Экспорт
	
	СтатусОшибкаОтправки = Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки;
	ОчиститьТекстЗапроса = Ложь;
	ОчиститьТекстОшибки = Ложь;
	
	ДобавитьНовыйСтатус(ИдентификаторСообщения,
		СтатусОшибкаОтправки,
		ОчиститьТекстЗапроса,
		ОчиститьТекстОшибки,
		ТекстОшибки);
	
КонецПроцедуры

Процедура ДобавитьНовыйСтатус(ИдентификаторСообщения,
	СтатусОтправкиДанных,
	ОчиститьТекстЗапроса,
	ОчиститьТекстОшибки,
	НовыйТекстОшибки = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПустаяСтрока(ИдентификаторСообщения) Тогда
		Возврат;	
	КонецЕсли;

	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщения);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ПерваяЗаписьНабора = НаборЗаписей[0];
	
	НоваяЗапись = СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ПерваяЗаписьНабора);

	Если ОчиститьТекстОшибки Тогда
		НоваяЗапись.ТекстОшибки = "";
	ИначеЕсли Не ПустаяСтрока(НовыйТекстОшибки) Тогда
		НоваяЗапись.ТекстОшибки = НовыйТекстОшибки;
	КонецЕсли;
	 
	НоваяЗапись.СтатусОтправкиДанных = СтатусОтправкиДанных;
	
	Период = МестноеВремя(ТекущаяУниверсальнаяДата(), НоваяЗапись.ЧасовойПояс);
	НоваяЗапись.Период = Период;
	
	НоваяЗапись.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция НайтиОбъектУчетаПоДокументуЭДО(ДокументЭДО)
	
	Результат = Неопределено;
	
	ВсеДокументы = ИнтеграцияЭДО.ОбъектыУчетаАктуальногоЭлектронногоДокумента(ДокументЭДО);
	
	Если ВсеДокументы.Количество() = 0
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДанныеДокументовЭлектронногоАктированияЕИС) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДокументовЭлектронногоАктированияЕИС.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеДокументовЭлектронногоАктированияЕИС КАК ДанныеДокументовЭлектронногоАктированияЕИС
	|ГДЕ
	|	ДанныеДокументовЭлектронногоАктированияЕИС.Документ В(&Документы)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документы", ВсеДокументы);
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.Документ;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли