#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОтборОрганизации = Параметры.Организация;
	ПредставлениеДокумента = Параметры.Документ;
	ВызовПрограммный = Параметры.ВызовПрограммный;

	Если Параметры.ТолькоОшибки Тогда
		ОтборСтатуса = 1;
	КонецЕсли;

	ТолькоОшибка = Параметры.ТолькоОшибки И ЗначениеЗаполнено(ПредставлениеДокумента);
	
	Если ВызовПрограммный Тогда
		Заголовок = НСтр("ru = 'Журнал событий'");
	Иначе
		Заголовок = НСтр("ru = 'Результаты обмена данными с ГИС ""Независимый регистратор""'");
	КонецЕсли;
	
	УстановитьОтборСписка();
	УстановитьВидимостьЭлементов();
	
	Если УстановитьКартинкиКнопок() Тогда
		УстановитьУсловноеОформление();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияИнформацияОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлектронноеАктированиеЕИСГИСНРКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСпискаПриИзменении(Элемент)
	
	УстановитьОтборСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредметНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Настройки = Новый Структура();
	Настройки.Вставить("Организация", ОтборОрганизации);
	ОбработчикВыбора = Новый ОписаниеОповещения("ОтборПредметНачалоВыбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.РезультатыОбменаДаннымиСГИСНР.Форма.ПодборДокументов", Настройки, , , , ,
			ОбработчикВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборПредмет = Неопределено;
	ПредставлениеДокумента = Неопределено;
	УстановитьОтборСписка();
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьСейчас(Команда)
	
	ДлительнаяОперация = НачатьПовторнуюОтправку();
	Успешно = ДлительнаяОперация <> Неопределено;
	
	Если Успешно Тогда
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		Оповещение = Новый ОписаниеОповещения("ПриЗавершенииПовторнойОтправки", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для текущих отборов списка нет событий для отправки.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьЭлектронныйДокумент(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ПоказатьЗначение(Неопределено, ТекущаяСтрока.ЭлектронныйДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСобытие(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ВсеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяСтрока.ЭлектронныйДокумент);
		ДлительнаяОперация = НачатьПовторнуюОтправку(ВсеДокументы);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		Оповещение = Новый ОписаниеОповещения("ПриЗавершенииПовторнойОтправки", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ВсеДокументы = Новый Массив;
	Если ВызовПрограммный Тогда
		ВсеДокументы = ВыполнитьЗапрос();
	КонецЕсли;
	
	Элементы.ГруппаОтборы.Видимость = ВызовПрограммный;
	Элементы.ОтправитьСейчас.Видимость = ВызовПрограммный;
	Элементы.ГруппаКомандыОтправки.Видимость = ВызовПрограммный И ВсеДокументы.Количество();
	Элементы.ГруппаПодвал.Видимость = ВызовПрограммный;
	
	ЭлектронноеАктированиеЕИСВызовСервера.
		СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтотОбъект, СтрРазделить("Организация,ОтборОрганизации", ","));
	
	ВсегоЧасов = ЭлектронноеАктированиеЕИСГИСНР.ПредставлениеОграниченияВремениОтправки();

	ТекстПодсказки = НСтр("ru = 'Отправка данных регистрации событий в ГИС НР не является обязательной и не влияет на обмен данными с ЕИС в сфере закупок. 
		|В случае возникновения проблем с отправкой по регламенту ГИС НР %1 программа повторяет отправки.
		|Зарегистрированные события доступны для просмотра в личном кабинете <a href= ""СсылкаНаЛКЕИС"">ЕИС в сфере закупок</a>.'");
		
	Элементы.ДекорацияИнформация.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстПодсказки, ВсегоЧасов);

КонецПроцедуры

&НаСервере
Функция НачатьПовторнуюОтправку(ВсеДокументы = Неопределено)
	
	Если ВсеДокументы = Неопределено Тогда
		ВсеДокументы = ВыполнитьЗапрос();
	КонецЕсли;
	
	Если ВсеДокументы.Количество() = 0 Тогда
		Результат = Неопределено;
	Иначе
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
		Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения,
			"ЭлектронноеАктированиеЕИСГИСНР.ОтправитьЛогПоДаннымРегистра", ВсеДокументы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииПовторнойОтправки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Результат.Статус = "Ошибка" Тогда
		ТекстВопроса = НСтр("ru = 'Возникла ошибка при отправке события.
			|Содержимое ошибки: <span style=""color: ЦветТекстаВажнаяНадписьЭлАктированиеЕИС"">%1</span>'");
		ТекстВопроса = СтрШаблон(ТекстВопроса, Результат.КраткоеПредставлениеОшибки) + Символы.ПС;
			
		ЭлектронноеАктированиеЕИСГИСНРКлиент.ПоказатьФормуОшибок(ТекстВопроса);
		Возврат;
	КонецЕсли;

	МассивРезультатовОбработки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	Элементы.Список.Обновить();
	
	Если МассивРезультатовОбработки.Количество() = 0 Тогда
		ТекстВопроса = НСтр("ru = 'Выбранный электронный документ не требует регистрации события в ГИС НР'");
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Режим", "Предупреждение");
		ПараметрыФормы.Вставить("Ширина", 60);
		ПараметрыФормы.Вставить("ТекстФормы", СтроковыеФункцииКлиент.ФорматированнаяСтрока(ТекстВопроса));
		ЭлектронноеАктированиеЕИСКлиент.ОткрытьФормуИнформации(ПараметрыФормы);
		Возврат;
	КонецЕсли;
	
	Для Каждого РезультатОбработки Из МассивРезультатовОбработки Цикл
		Если РезультатОбработки.Ошибка Тогда
			Ошибки = СтрСоединить(РезультатОбработки.МассивОшибок, " ");
			Если ЗначениеЗаполнено(РезультатОбработки.ВидСобытия) Тогда
				Шаблон = НСтр("ru = 'По событию %1 от %2 повторная отправка не выполнена. %3'");
				ТекстСообщения = СтрШаблон(Шаблон,
					РезультатОбработки.ВидСобытия,
					Формат(РезультатОбработки.ДатаСобытия,
					"ДЛФ=D;"), Ошибки);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Иначе
				Шаблон = НСтр("ru = 'Повторная отправка не выполнена. %1'");
				ТекстСообщения = СтрШаблон(Шаблон, Ошибки);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		ИначеЕсли РезультатОбработки.Статус
			= ПредопределенноеЗначение("Перечисление.СтатусыОтправкиДанныхВГИСНР.Просрочено") Тогда
			Шаблон = НСтр("ru = 'По событию %1 от %2 повторная отправка не предусмотрена.'");
			ТекстСообщения = СтрШаблон(Шаблон,
				РезультатОбработки.ВидСобытия,
				Формат(РезультатОбработки.ДатаСобытия, "ДЛФ=D;"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);

		Иначе
			Если ЗначениеЗаполнено(РезультатОбработки.Документ) Тогда
				ЭлектронноеАктированиеЕИСГИСНРКлиент.ОповеститьОбОтсутствииОшибки(РезультатОбработки.Документ);
			КонецЕсли;
			Шаблон = НСтр("ru = 'По событию %1 от %2 повторная отправка выполнена успешно.'");
			ТекстСообщения = СтрШаблон(Шаблон,
				РезультатОбработки.ВидСобытия,
				Формат(РезультатОбработки.ДатаСобытия, "ДЛФ=D;"));
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПредметНачалоВыбораЗавершение(ВыборПользователя, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыборПользователя) Тогда
		ПредставлениеДокумента = ВыборПользователя.Основание;
		ОтборПредмет = ВыборПользователя.Документ;
		УстановитьОтборСписка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьКартинкиКнопок()
	
	Попытка
		Элементы.КомандыЭДО.Картинка = БиблиотекаКартинок["ЭмблемаСервиса1СЭДО"];
		Элементы.СписокПросмотрЭДО.Картинка = БиблиотекаКартинок["ОткрытьВыбранныйФайл"];
		Элементы.СписокОтправитьСобытие.Картинка = БиблиотекаКартинок["ЭлектронныйДокументИсходящий"];
	Исключение
		Элементы.СписокПросмотрЭДО.Картинка = БиблиотекаКартинок.Документ;
		Элементы.СписокОтправитьСобытие.Картинка = БиблиотекаКартинок.ОтправитьСообщение;
	КонецПопытки;
	
	ЕстьКартинки = Метаданные.ОбщиеКартинки.Найти("КоллекцияВидыСобытийЖурналаРегистрации");
	Если ЕстьКартинки <> Неопределено Тогда
		Элементы.Список.КартинкаСтрок = БиблиотекаКартинок["КоллекцияВидыСобытийЖурналаРегистрации"];
		Элементы.Список.ПутьКДаннымКартинкиСтроки = "Список.НомерКартинки";
	КонецЕсли;
	
	Возврат ЕстьКартинки = Неопределено;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборСписка()
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки);
	СписокОтбора.Добавить(Перечисления.СтатусыОтправкиДанныхВГИСНР.Просрочено);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"СтатусОтправкиДанных",
		СписокОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		НСтр("ru = 'Только ошибки'"),
		ОтборСтатуса <> 0,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"Последний",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Последние'"),
		ОтборСтатуса <> 0,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"Организация",
		ОтборОрганизации,
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Организация'"),
		ЗначениеЗаполнено(ОтборОрганизации),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"ЭлектронныйДокумент",
		ОтборПредмет,
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Документ ЭДО'"),
		ЗначениеЗаполнено(ОтборПредмет),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,
		"ОбъектУчета",
		ПредставлениеДокумента,
		ВидСравненияКомпоновкиДанных.Равно,
		НСтр("ru = 'Документ'"),
		ЗначениеЗаполнено(ПредставлениеДокумента),
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки);
	СписокОтбора.Добавить(Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаЗаполнения);
	СписокОтбора.Добавить(Перечисления.СтатусыОтправкиДанныхВГИСНР.Просрочено);

	ОформлениеВыделения = УсловноеОформление.Элементы.Добавить();
	ОформлениеВыделения.Использование = Истина;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОформлениеВыделения.Отбор,
		"Список.СтатусОтправкиДанных",
		СписокОтбора,
		ВидСравненияКомпоновкиДанных.ВСписке,
		"",
		Истина);
	НовоеПоле = ОформлениеВыделения.Поля.Элементы.Добавить();
	НовоеПоле.Использование = Истина;
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("СтатусОтправкиДанных");
	ОформлениеВыделения.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОсобогоТекста);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапрос()
	
	СхемаКомпоновкиДанных = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКомпоновкиДанных = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если НЕ ТолькоОшибка Тогда
		НастройкиКомпоновкиДанных.Отбор.Элементы.Очистить();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НастройкиКомпоновкиДанных.Отбор,
		"ПоследнийСтатусОтправкиДанных",
		ВидСравненияКомпоновкиДанных.Равно,
		Перечисления.СтатусыОтправкиДанныхВГИСНР.ОшибкаОтправки,
		"",
		Истина);
		
	Результат = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Попытка
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
			НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	МассивЭД = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Результат Цикл
		МассивЭД.Добавить(СтрокаТаблицы.ЭлектронныйДокумент);
	КонецЦикла;
	
	Возврат МассивЭД;
	
КонецФункции

#КонецОбласти