#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Менеджер = "РегистрСведений.ПлатежныеОперации";
	МенеджерОборудованияВызовСервераПереопределяемый.ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецЕсли

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет удаление записей регистра за прошлые месяцы, для ускорения очистки
// 
// Параметры:
//   ДатаОчистки - Дата - Дата в месяце до которой будет выполнена очистка, 
//     удаление записей будет выполнено до конца месяца переданной даты.
Процедура ОчиститьРегистрЗаПрошлыеМесяцы(ДатаОчистки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОперацииПроверкиКМ.ГодМесяц КАК ГодМесяц
		|ИЗ
		|	РегистрСведений.ОперацииПроверкиКМ КАК ОперацииПроверкиКМ
		|ГДЕ
		|	ОперацииПроверкиКМ.ГодМесяц < &ГодМесяцОчистки";
	
	ГодМесяцОчистки = Год(ДатаОчистки) * 100 + Месяц(ДатаОчистки);
	Запрос.УстановитьПараметр("ГодМесяцОчистки", ГодМесяцОчистки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОперацииПроверкиКМ");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГодМесяц","ГодМесяц");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		Выборка      = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.ГодМесяц.Установить(Выборка.ГодМесяц);
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Очистка операций проверки кода маркировки.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()));
	КонецПопытки
	
КонецПроцедуры

// Выполняет удаление записей регистра в месяце переданной даты
// 
// Параметры:
//   ДатаОчистки - Дата - Дата до которой в месяце даты будет выполнена очистка
//     удаление записей будет выполнено с начала месяца, по переданную дату.
Процедура ОчиститьРегистрЗаТекущийМесяц(ДатаОчистки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацииПроверкиКМ.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
		|	ОперацииПроверкиКМ.ИдентификаторСессии КАК ИдентификаторСессии
		|ИЗ
		|	РегистрСведений.ОперацииПроверкиКМ КАК ОперацииПроверкиКМ
		|ГДЕ
		|	ОперацииПроверкиКМ.ГодМесяц = &ГодМесяцОчистки
		|	И ОперацииПроверкиКМ.Дата < &ДатаОчистки";
	
	ГодМесяцОчистки = Год(ДатаОчистки) * 100 + Месяц(ДатаОчистки);
	Запрос.УстановитьПараметр("ГодМесяцОчистки", ГодМесяцОчистки);
	Запрос.УстановитьПараметр("ДатаОчистки",     ДатаОчистки);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОперацииПроверкиКМ");
		ЭлементБлокировки.ИсточникДанных = РезультатЗапроса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторСессии","ИдентификаторСессии");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторЗапроса","ИдентификаторЗапроса");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		НаборЗаписей = СоздатьНаборЗаписей();
		Выборка      = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.ИдентификаторСессии.Установить(Выборка.ИдентификаторЗапроса);
			НаборЗаписей.Отбор.ИдентификаторЗапроса.Установить(Выборка.ИдентификаторЗапроса);
			НаборЗаписей.Записать(Истина);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Очистка операций проверки кода маркировки.'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()));
	КонецПопытки
	
КонецПроцедуры

// Устанавливает значение реквизита у всех записей переданной сессии.
// 
// Параметры:
//   ИдентификаторСессии - Строка - Идентификатор сессии
//   Имя - Строка - Имя реквизита записи значение которого нужно установить
//   Значение - Произвольный - значение реквизита записи которое нужно установить
Процедура УстановитьРеквизитСессииПроверкиКМ(ИдентификаторСессии, Имя, Значение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		
		УникальныйИдентификаторСессии = Новый УникальныйИдентификатор(ИдентификаторСессии);
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОперацииПроверкиКМ");
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторСессии", УникальныйИдентификаторСессии);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИдентификаторСессии.Установить(УникальныйИдентификаторСессии);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Запись[Имя] = Значение;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка записи в журнал логирования операций проверки кода маркировки: %1'", ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияБПО.ЗаписатьОшибкуВЖурналРегистрации(
				НСтр("ru = 'Операции проверки кода маркировки.'",  ОбщегоНазначенияБПО.КодОсновногоЯзыка()),
					ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру для обновления записи по идентификаторам сессии и запроса
//
// Возвращаемое значение:
//   Структура:
//     * Ключ - Структура -содержит ключ записи, идентификаторы сессии и запроса:
//       ** ИдентификаторСессии - Строка
//       ** ИдентификаторЗапроса - Строка
//     * Результат - Булево, Неопределено - общий результат операции
//     * ЗапросКМ - Структура, Неопределено - структура запроса КМ
//     * ФлагиПроверкиОИСМ - Строка, Неопределено - флаги ответа от сервера ОИСМ
//     * ЛокальныйОтветXML - Строка - Строка XML ответ от драйвера
//     * УдаленныйОтветXML - Строка - Строка XML ответ от драйвера с сервера ОИСМ
//     * ПокупкаПодтверждена - Булево, Неопределено - флаг подтверждения покупки
//
Функция ПараметрыЗаписиРезультатаПроверкиКМ() Экспорт
	
	Ключ = Новый Структура();
	Ключ.Вставить("ИдентификаторСессии", "");
	Ключ.Вставить("ИдентификаторЗапроса", "");
	Результат = Новый Структура();
	Результат.Вставить("Ключ", Ключ);
	Результат.Вставить("Результат", Истина);
	Результат.Вставить("ЗапросКМ", Неопределено);
	Результат.Вставить("ФлагиПроверкиОИСМ", "");
	Результат.Вставить("ЛокальныйОтветXML", "");
	Результат.Вставить("УдаленныйОтветXML", "");
	Результат.Вставить("ПокупкаПодтверждена", Неопределено);
	Возврат Результат;
	
КонецФункции

// Выполняет обновление записи по переданным параметрам
// 
// Параметры: 
//   ПараметрыЗаписи - см. ПараметрыЗаписиРезультатаПроверкиКМ
//
Процедура ОбновитьРезультатыПроверкиКодаМаркировкиВРегистре(ПараметрыЗаписи) Экспорт
	
	Если ПустаяСтрока(ПараметрыЗаписи.Ключ.ИдентификаторСессии) Или ПустаяСтрока(ПараметрыЗаписи.Ключ.ИдентификаторЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторСессии.Установить(Новый УникальныйИдентификатор(ПараметрыЗаписи.Ключ.ИдентификаторСессии));
	НаборЗаписей.Отбор.ИдентификаторЗапроса.Установить(Новый УникальныйИдентификатор(ПараметрыЗаписи.Ключ.ИдентификаторЗапроса));
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Запись = НаборЗаписей.Получить(0);
	Если ЗначениеЗаполнено(ПараметрыЗаписи.ЗапросКМ) Тогда
		ЗапросКМ = ПараметрыЗаписи.ЗапросКМ;
		КодМаркировки = ЗапросКМ.КонтрольнаяМарка;
		Если Запись.КодМаркировки <> КодМаркировки Тогда
			Штрихкод = ОбщегоНазначенияБПОКлиентСервер.Base64ВШтрихкод(КодМаркировки);
			Запись.КодМаркировки = КодМаркировки;
		КонецЕсли;
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ЗапросКМ.ПараметрыXML, ,"ЗаписатьРезультатыПроверкиКодаМаркировкиВРегистр_ПреобразованиеВJSON", РегистрыСведений.ОперацииПроверкиКМ);
		ТекстJSON = ЗаписьJSON.Закрыть();
		Запись.ЗапросКодаМаркировки = Новый ХранилищеЗначения(ТекстJSON);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗаписи.ФлагиПроверкиОИСМ) Тогда
		Запись.ФлагиПроверкиОИСМ = ПараметрыЗаписи.ФлагиПроверкиОИСМ;
	КонецЕсли;
	Если ПараметрыЗаписи.Результат <> Неопределено Тогда
		Запись.Результат = ПараметрыЗаписи.Результат;
	КонецЕсли;
	Если ПараметрыЗаписи.ПокупкаПодтверждена <> Неопределено Тогда
		Запись.ПокупкаПодтверждена = ПараметрыЗаписи.ПокупкаПодтверждена;
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗаписи.ЛокальныйОтветXML) Тогда
		Запись.РезультатПроверкиКМНаККТ = Новый ХранилищеЗначения(ПараметрыЗаписи.ЛокальныйОтветXML);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыЗаписи.УдаленныйОтветXML) Тогда
		Запись.РезультатПроверкиКМНаСервере = Новый ХранилищеЗначения(ПараметрыЗаписи.УдаленныйОтветXML);
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры

// Добавляет в регистр записи по переданным параметрам
// 
// Параметры: 
//   РезультатыПроверки - Массив из см. ПараметрыЗаписиРезультатаПроверкиКМ
//
Процедура ДобавитьРезультатыПроверкиКодаМаркировкиВРегистр(РезультатыПроверки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПолученныеРанее = Новый Соответствие();
	Для Каждого РезультатПроверки Из РезультатыПроверки Цикл
		ЗапросКМ = РезультатПроверки.ЗапросКМ;
		Если ИнформацияПоРазрешительномуЗапросуПолученаРанее(ЗапросКМ) Тогда
			Данные = Новый Структура();
			Данные.Вставить("КодОтветаРазрешения", "");
			Данные.Вставить("АдресСервераЗапросаРазрешения", "");
			Данные.Вставить("ТекстЗапросаРазрешения", Неопределено);
			Данные.Вставить("РезультатЗапросаРазрешения", Неопределено);
			ДанныеПолученныеРанее.Вставить(ЗапросКМ.ИдентификаторЗапросаРазрешения, Данные);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеПолученныеРанее.Количество()>0 Тогда
		ПолучитьИнформациюПоРазрешительномуЗапросуПолученнуюРанее(ДанныеПолученныеРанее);
	КонецЕсли;
	
	ХранитьУспешныеОперации = МенеджерОборудованияМаркировка.ХранитьУспешныеОперацииРазрешения();
	НаборЗаписей = СоздатьНаборЗаписей();
	ДатаЗаписи = ОбщегоНазначенияБПО.ДатаСеанса();
	ГодМесяц = Год(ДатаЗаписи)*100+Месяц(ДатаЗаписи);
	Для Каждого РезультатПроверки Из РезультатыПроверки Цикл
		
		Если РезультатПроверки.Ключ.ИдентификаторСессии = Неопределено 
			Или РезультатПроверки.Ключ.ИдентификаторЗапроса = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не СохранятьРезультатПроверки(ХранитьУспешныеОперации, РезультатПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросКМ = РезультатПроверки.ЗапросКМ;
		Запись = НаборЗаписей.Добавить();
		Запись.ИдентификаторСессии = Новый УникальныйИдентификатор(РезультатПроверки.Ключ.ИдентификаторСессии);
		Запись.ИдентификаторЗапроса = Новый УникальныйИдентификатор(РезультатПроверки.Ключ.ИдентификаторЗапроса);
		
		КодМаркировки = ЗапросКМ.КонтрольнаяМарка;
		
		Запись.ГодМесяц = ГодМесяц;
		Запись.Результат = ?(РезультатПроверки.Результат = Неопределено, Ложь, РезультатПроверки.Результат);
		Запись.КодМаркировки = КодМаркировки;
		Запись.ФлагиПроверкиОИСМ = РезультатПроверки.ФлагиПроверкиОИСМ;
		Запись.ПокупкаПодтверждена = ?(РезультатПроверки.ПокупкаПодтверждена = Неопределено, Ложь, РезультатПроверки.ПокупкаПодтверждена);
		
		Результат = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(КодМаркировки, Истина);
		Если Результат.Разобран Тогда
			Запись.КодМаркировкиПредставление = Результат.ПредставлениеШтрихкода;
			Запись.Штрихкод = Результат.GTIN;
			Если Результат.ЕстьКриптоХвост Тогда
				Запись.КодМаркировки = Результат.ШтрихкодBase64БезКриптоХвоста;
				Запись.КодМаркировкиПредставление = Результат.ПредставлениеШтрихкодаБезКриптоХвоста;
			КонецЕсли;
		Иначе
			КодМаркировкиСимволы = ОбщегоНазначенияБПОКлиентСервер.Base64ВШтрихкод(КодМаркировки);
			КодМаркировкиСимволы = СтрЗаменить(КодМаркировкиСимволы, ОбщегоНазначенияБПОКлиентСервер.РазделительGS1(), "");
			Запись.КодМаркировкиПредставление = КодМаркировкиСимволы;
			Запись.Штрихкод = Результат.GTIN;
		КонецЕсли;

		ЛокальныйОтветXML = РезультатПроверки.ЛокальныйОтветXML;
		Если ЗначениеЗаполнено(ЛокальныйОтветXML) Тогда
			Запись.РезультатПроверкиКМНаККТ = Новый ХранилищеЗначения(ЛокальныйОтветXML);
		КонецЕсли;
		УдаленныйОтветXML = РезультатПроверки.УдаленныйОтветXML;
		Если ЗначениеЗаполнено(РезультатПроверки.УдаленныйОтветXML) Тогда
			Запись.РезультатПроверкиКМНаСервере = Новый ХранилищеЗначения(УдаленныйОтветXML);
		КонецЕсли;
		Запись.Дата = ДатаЗаписи;
		Запись.Наименование = ЗапросКМ.Наименование;
		
		Если ЗапросКМ.ЗапросРазрешенияПродажиКМ Тогда
			
			// ответ с разрешительной площадки
			Запись.АдресСервераЗапросаРазрешения = ЗапросКМ.АдресСервераЗапросаРазрешения;

			ТекстЗапросаРазрешения = ЗапросКМ.ТекстЗапросаРазрешения;
			Если Результат.ЕстьКриптоХвост Тогда
				КодМаркировкиВЛоге = ОбщегоНазначенияБПОКлиентСервер.Base64ВШтрихкод(КодМаркировки);
				Если Не ПустаяСтрока(КодМаркировкиВЛоге) Тогда
					КодМаркировкиВЛоге = СтрЗаменить(КодМаркировкиВЛоге, 
						ОбщегоНазначенияБПОКлиентСервер.РазделительGS1(), 
						ОбщегоНазначенияБПОКлиентСервер.ЭкранированныйСимволGS1());
					КодМаркировкиДляЗамены = Результат.ШтрихкодБезКриптоХвоста;
					КодМаркировкиДляЗамены = СтрЗаменить(КодМаркировкиДляЗамены, 
						ОбщегоНазначенияБПОКлиентСервер.РазделительGS1(), 
						ОбщегоНазначенияБПОКлиентСервер.ЭкранированныйСимволGS1());
					ТекстЗапросаРазрешения = СтрЗаменить(ТекстЗапросаРазрешения, 
						КодМаркировкиВЛоге,
						КодМаркировкиДляЗамены);
				КонецЕсли;
			КонецЕсли;
			Запись.ТекстЗапросаРазрешения = Новый ХранилищеЗначения(ТекстЗапросаРазрешения);
				
			РезультатЗапросаРазрешения = ЗапросКМ.РезультатЗапросаРазрешения;
			Если Результат.ЕстьКриптоХвост Тогда
				КодМаркировкиВЛоге = ОбщегоНазначенияБПОКлиентСервер.Base64ВШтрихкод(КодМаркировки);
				Если Не ПустаяСтрока(КодМаркировкиВЛоге) Тогда
					КодМаркировкиВЛоге = СтрЗаменить(КодМаркировкиВЛоге, 
						ОбщегоНазначенияБПОКлиентСервер.РазделительGS1(), 
						ОбщегоНазначенияБПОКлиентСервер.ЭкранированныйСимволGS1());
					КодМаркировкиДляЗамены = Результат.ШтрихкодБезКриптоХвоста;
					КодМаркировкиДляЗамены = СтрЗаменить(КодМаркировкиДляЗамены, 
						ОбщегоНазначенияБПОКлиентСервер.РазделительGS1(), 
						ОбщегоНазначенияБПОКлиентСервер.ЭкранированныйСимволGS1());
					РезультатЗапросаРазрешения = СтрЗаменить(
						РезультатЗапросаРазрешения, 
						КодМаркировкиВЛоге, 
						КодМаркировкиДляЗамены);
				КонецЕсли;
			КонецЕсли;
			Запись.РезультатЗапросаРазрешения = Новый ХранилищеЗначения(РезультатЗапросаРазрешения);
				
			Если ИнформацияПоРазрешительномуЗапросуПолученаРанее(ЗапросКМ) Тогда
				Данные = ДанныеПолученныеРанее.Получить(ЗапросКМ.ИдентификаторЗапросаРазрешения);
				Если ЗначениеЗаполнено(Данные) Тогда
					ЗаполнитьЗначенияСвойств(Запись, Данные);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗапросКМ.КодОтветаРазрешения) Или ЗначениеЗаполнено(ЗапросКМ.ИдентификаторЗапросаРазрешения) Тогда
				Запись.КодОтветаРазрешения = ЗапросКМ.КодОтветаРазрешения;
				Запись.ИдентификаторЗапросаРазрешения = ЗапросКМ.ИдентификаторЗапросаРазрешения;
				
				Если ТипЗнч(ЗапросКМ.ВремяЗапросаРазрешения) = Тип("Строка") Тогда
					Если СтрНайти(ЗапросКМ.ВремяЗапросаРазрешения, ".") > 0 Тогда
						Запись.ВремяЗапросаРазрешения = Дата(ЗапросКМ.ВремяЗапросаРазрешения);
					Иначе
						Запись.ВремяЗапросаРазрешения = ОбщегоНазначенияБПОКлиентСервер.TimestampВДату(ЗапросКМ.ВремяЗапросаРазрешения);
					КонецЕсли;
				Иначе
					Запись.ВремяЗапросаРазрешения = ЗапросКМ.ВремяЗапросаРазрешения;
				КонецЕсли;
				
			Иначе
				Запись.КодОтветаРазрешения = НСтр("ru = 'Таймаут'");
				Запись.ВремяЗапросаРазрешения = УниверсальноеВремя(ТекущаяДатаСеанса());
			КонецЕсли;
			
			
		КонецЕсли;
		
		Если ЗапросКМ.Свойство("ПараметрыXML") Тогда
			ЗаписьJSON = Новый ЗаписьJSON();
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ЗапросКМ.ПараметрыXML, ,"ЗаписатьРезультатыПроверкиКодаМаркировкиВРегистр_ПреобразованиеВJSON", РегистрыСведений.ОперацииПроверкиКМ);
			ТекстJSON = ЗаписьJSON.Закрыть();
			Запись.ЗапросКодаМаркировки = Новый ХранилищеЗначения(ТекстJSON);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество()>0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Привязывает идентификатор фискальной операции к указанной сессии проверки кода маркировки
// 
// Параметры:
//   ИдентификаторСессии - Строка - идентификатор сессии проверки кода маркировки
//   ИдентификаторФискальнойОперации - Строка - идентификатор фискальной записи
Процедура ОбновитьИдентификаторФискальнойОперацииРезультатаПроверкиКодаМаркировки(ИдентификаторСессии, ИдентификаторФискальнойОперации) Экспорт
	
	Если Не ЗначениеЗаполнено(ИдентификаторСессии) Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ИдентификаторФискальнойОперации) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРеквизитСессииПроверкиКМ(ИдентификаторСессии, "ИдентификаторФискальнойОперации", ИдентификаторФискальнойОперации);
	
КонецПроцедуры

Функция ЗаписатьРезультатыПроверкиКодаМаркировкиВРегистр_ПреобразованиеВJSON(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт  
	
	Возврат Строка(Значение);   
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПоложительныйОтветРазрешительногоРежима(КодОтвета)
	
	Если СокрЛП(КодОтвета) = "200" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПоложительныйОтветУведомительногоРежима(ФлагиПроверки)
	
	Если Прав(ФлагиПроверки, 4) = "1111" Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция СохранятьРезультатПроверки(ХранитьУспешныеОперации, РезультатПроверки)
	
	Если ХранитьУспешныеОперации Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не РезультатПроверки.Результат Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗапросКМ = РезультатПроверки.ЗапросКМ;

	Если ЗапросКМ.Свойство("ПараметрыXML") Тогда
		ОтсутствуетЗапросКККТ = ПустаяСтрока(ЗапросКМ.ПараметрыXML);
	Иначе
		ОтсутствуетЗапросКККТ = Истина;
	КонецЕсли;
	
	Если ОтсутствуетЗапросКККТ Тогда
		ПоложительнаяПроверкаУведомительныйРежим = Истина;
	Иначе
		ПоложительнаяПроверкаУведомительныйРежим = ПоложительныйОтветУведомительногоРежима(РезультатПроверки.ФлагиПроверкиОИСМ);
	КонецЕсли;
	
	Если ЗапросКМ.ЗапросРазрешенияПродажиКМ Тогда
		ПоложительнаяПроверкаРазрешительныйРежим = ПоложительныйОтветРазрешительногоРежима(ЗапросКМ.КодОтветаРазрешения);
	Иначе
		ПоложительнаяПроверкаРазрешительныйРежим = Истина;
	КонецЕсли;
	
	Если ЗапросКМ.ОжидатьПолучениеОтветаОИСМ Тогда
		Возврат Не ПоложительнаяПроверкаРазрешительныйРежим Или Не ПоложительнаяПроверкаУведомительныйРежим;
	Иначе
		Возврат Не ПоложительнаяПроверкаРазрешительныйРежим;
	КонецЕсли;
	
	Возврат Ложь;
	
	
КонецФункции

Функция ИнформацияПоРазрешительномуЗапросуПолученаРанее(ЗапросКМ)
	
	Если ЗначениеЗаполнено(ЗапросКМ.ИдентификаторЗапросаРазрешения)
		И ЗначениеЗаполнено(ЗапросКМ.ВремяЗапросаРазрешения) 
		И ПустаяСтрока(ЗапросКМ.АдресСервераЗапросаРазрешения)
		И ПустаяСтрока(ЗапросКМ.ТекстЗапросаРазрешения)
		И ПустаяСтрока(ЗапросКМ.РезультатЗапросаРазрешения) Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ПолучитьИнформациюПоРазрешительномуЗапросуПолученнуюРанее(ДанныеПолученныеРанее)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ОперацииПроверкиКМ.Дата) КАК Дата,
		|	ОперацииПроверкиКМ.ИдентификаторЗапросаРазрешения КАК ИдентификаторЗапросаРазрешения
		|ПОМЕСТИТЬ ДатыЗапросовРазрешений
		|ИЗ
		|	РегистрСведений.ОперацииПроверкиКМ КАК ОперацииПроверкиКМ
		|ГДЕ
		|	ОперацииПроверкиКМ.ИдентификаторЗапросаРазрешения В(&ИдентификаторыЗапросаРазрешения)
		|
		|СГРУППИРОВАТЬ ПО
		|	ОперацииПроверкиКМ.ИдентификаторЗапросаРазрешения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОперацииПроверкиКМ.ИдентификаторЗапросаРазрешения КАК ИдентификаторЗапросаРазрешения,
		|	ОперацииПроверкиКМ.АдресСервераЗапросаРазрешения КАК АдресСервераЗапросаРазрешения,
		|	ОперацииПроверкиКМ.РезультатЗапросаРазрешения КАК РезультатЗапросаРазрешения,
		|	ОперацииПроверкиКМ.ТекстЗапросаРазрешения КАК ТекстЗапросаРазрешения,
		|	ОперацииПроверкиКМ.КодОтветаРазрешения КАК КодОтветаРазрешения
		|ИЗ
		|	РегистрСведений.ОперацииПроверкиКМ КАК ОперацииПроверкиКМ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатыЗапросовРазрешений КАК ДатыЗапросовРазрешений
		|		ПО (ДатыЗапросовРазрешений.ИдентификаторЗапросаРазрешения = ОперацииПроверкиКМ.ИдентификаторЗапросаРазрешения)
		|			И (ДатыЗапросовРазрешений.Дата = ОперацииПроверкиКМ.Дата)";
	
	ИдентификаторыЗапросаРазрешения = Новый Массив();
	Для Каждого КлючЗначение Из ДанныеПолученныеРанее Цикл
		ИдентификаторыЗапросаРазрешения.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	Запрос.УстановитьПараметр("ИдентификаторыЗапросаРазрешения", ИдентификаторыЗапросаРазрешения);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Данные = ДанныеПолученныеРанее.Получить(Выборка.ИдентификаторЗапросаРазрешения);
		Данные.АдресСервераЗапросаРазрешения = Выборка.АдресСервераЗапросаРазрешения;
		Данные.ТекстЗапросаРазрешения = Новый ХранилищеЗначения(Выборка.ТекстЗапросаРазрешения.Получить());
		Данные.РезультатЗапросаРазрешения = Новый ХранилищеЗначения(Выборка.РезультатЗапросаРазрешения.Получить());
		Данные.КодОтветаРазрешения = Выборка.КодОтветаРазрешения;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти



#КонецЕсли