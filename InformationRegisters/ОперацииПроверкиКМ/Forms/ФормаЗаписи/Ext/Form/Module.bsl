#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТаблицаПроверкиСведенийОТовареПФ = МенеджерОборудованияМаркировка.ТаблицаПроверкиСведенийОТовареПФ();
	ТаблицаПроверкиСведенийОТоваре = МенеджерОборудованияМаркировка.ТаблицаПроверкиСведенийОТоваре();
	МассивШтрихкодов = Новый Массив();
	Если Не ПустаяСтрока(Запись.ФлагиПроверкиОИСМ) Тогда
		РезультатПроверки = ТаблицаПроверкиСведенийОТовареПФ[Запись.ФлагиПроверкиОИСМ];
		Элементы.РезультатПроверкиОписание.Заголовок = ТаблицаПроверкиСведенийОТоваре[Запись.ФлагиПроверкиОИСМ];
	Иначе
		Элементы.РезультатПроверки.Видимость = Ложь;
		Элементы.РезультатПроверкиОписание.Видимость = Ложь;
	КонецЕсли;
	
	Результат = МенеджерОборудованияМаркировкаКлиентСервер.РазобратьШтриховойКодТовара(Запись.КодМаркировки, Истина);
	Если Результат.Разобран Тогда
		ТипКода = Результат.ТипИдентификатораТовара;
		КодМаркировкиПредставление = Результат.ПредставлениеШтрихкода;
		Штрихкод = Результат.GTIN;
	Иначе
		ТипКода = Результат.ТипИдентификатораТовара;
		КодМаркировкиПредставление = Запись.КодМаркировки;
		Штрихкод = Запись.КодМаркировки;
	КонецЕсли;
	
	МассивШтрихкодов.Добавить(Штрихкод);
	
	Элементы.РезультатПодтверждениеПокупки.Видимость = Не Запись.ПокупкаПодтверждена;
	
	УстановитьДанныеИхХранилищаЗначений();
	
	Элементы.ФормаСообщениеВТехПоддержку.Видимость = ОбщегоНазначенияБПО.ИспользуетсяСообщенияВСлужбуТехническойПоддержки()
			И ОбщегоНазначенияБПОСлужебныйВызовСервера.ЗаполненыДанныеАутентификацииПользователяИнтернетПоддержки();
			
	Элементы.КодОтветаПредставление.Заголовок = КодОтветаГИСМТПредставление(Запись.КодОтветаРазрешения);
	
	РезультатПроверкиРР = РезультатПроверкиРазрешительногоРежима(Запись.КодОтветаРазрешения);
	
	Если КодОтветаАварийнаяСитуация(Запись.КодОтветаРазрешения) Тогда
		Элементы.ГруппаЗапросРазрешения.Видимость = Ложь;
		Элементы.ГруппаИдентификатор.Видимость = Ложь;
		Элементы.ГруппаРезультатЗапросаРазрешения.Видимость = Ложь;
		Элементы.ДекорацияИнформация.Видимость = Истина;
		Элементы.ДекорацияИнформация.Заголовок = НСтр("ru = 'Продажа разрешена в рамках аварийного режима.'");
	Иначе
		Элементы.ГруппаЗапросРазрешения.Видимость = Истина;
		Элементы.ГруппаИдентификатор.Видимость = Истина;
		Элементы.ГруппаРезультатЗапросаРазрешения.Видимость = Истина;
		Элементы.ДекорацияИнформация.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбщегоНазначенияБПОКлиент.ИспользуетсяСообщенияВСлужбуТехническойПоддержки() Тогда
		МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиБПОКлиент");
		Элементы.ФормаСообщениеВТехПоддержку.Видимость
			= МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.ОтправлятьСообщенияВТехПоддержку();
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СообщениеВТехПоддержку(Команда)
	
	МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент = ОбщегоНазначенияБПОКлиент.ОбщийМодуль("СообщенияВСлужбуТехническойПоддержкиБПОКлиент");
	ПараметрыСообщения = МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.ПараметрыОтправкиСообщенияОбОшибке();
	ПараметрыСообщения.ДополнительныеДанные = СведенияДляТехподдержки();
	
	
	ПараметрыСообщения.ТекстОшибки = НСтр("ru = 'Информация о проверке контрольной марки для тех.поддержки'");
	ОписаниеОповещения = Новый ОписаниеОповещения("СообщениеВТехническуюПоддержкуЗавершение", ЭтотОбъект);
	МодульСообщенияВСлужбуТехническойПоддержкиБПОКлиент.НачатьОтправкуСообщенияОбОшибке(ОписаниеОповещения, ПараметрыСообщения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СведенияДляТехподдержки()
	
	Результат = Новый Структура();
	Для каждого Измерение Из Метаданные.РегистрыСведений.ОперацииПроверкиКМ.Измерения Цикл
		Значение = Запись[Измерение.Имя];
		Результат.Вставить(Измерение.Имя, Значение);
	КонецЦикла;
	Для каждого Ресурс Из Метаданные.РегистрыСведений.ОперацииПроверкиКМ.Ресурсы Цикл
		Если Ресурс.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		Значение = Запись[Ресурс.Имя];
		Результат.Вставить(Ресурс.Имя, Значение);
	КонецЦикла;
	Для каждого Реквизит Из Метаданные.РегистрыСведений.ОперацииПроверкиКМ.Реквизиты Цикл
		Если Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		Значение = Запись[Реквизит.Имя];
		Результат.Вставить(Измерение.Имя, Значение);
	КонецЦикла;
	Результат.Вставить("ЗапросКодаМаркировки", ЗапросКМ);
	Результат.Вставить("РезультатПроверкиКМНаККТ", РезультатПроверкиНаККТ);
	Результат.Вставить("РезультатПроверкиКМНаСервере", РезультатПроверкиНаСервере);
	Результат.Вставить("РезультатЗапросаРазрешения", РезультатЗапросаРазрешения);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьДанныеИхХранилищаЗначений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОперацииПроверкиКМ.ЗапросКодаМаркировки КАК ЗапросКодаМаркировки,
		|	ОперацииПроверкиКМ.РезультатПроверкиКМНаККТ КАК РезультатПроверкиКМНаККТ,
		|	ОперацииПроверкиКМ.РезультатПроверкиКМНаСервере КАК РезультатПроверкиКМНаСервере,
		|	ФискальныеОперации.ДокументОснование КАК ДокументОснование,
		|	ФискальныеОперации.Дата КАК Дата,
		|	ФискальныеОперации.НомерЧекаККМ КАК НомерЧекаККМ,
		|	ОперацииПроверкиКМ.РезультатЗапросаРазрешения КАК РезультатЗапросаРазрешения,
		|	ОперацииПроверкиКМ.ТекстЗапросаРазрешения КАК ТекстЗапросаРазрешения
		|ИЗ
		|	РегистрСведений.ОперацииПроверкиКМ КАК ОперацииПроверкиКМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|		ПО ОперацииПроверкиКМ.ИдентификаторФискальнойОперации = ФискальныеОперации.ИдентификаторЗаписи
		|ГДЕ
		|	ОперацииПроверкиКМ.ИдентификаторСессии = &ИдентификаторСессии
		|	И ОперацииПроверкиКМ.ИдентификаторЗапроса = &ИдентификаторЗапроса";
	
	Запрос.УстановитьПараметр("ИдентификаторЗапроса", Запись.ИдентификаторЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторСессии", Запись.ИдентификаторСессии);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ЗапросКМ = Выборка.ЗапросКодаМаркировки.Получить();
	РезультатПроверкиНаККТ = Выборка.РезультатПроверкиКМНаККТ.Получить();
	РезультатПроверкиНаСервере = Выборка.РезультатПроверкиКМНаСервере.Получить();
	РезультатЗапросаРазрешения = Выборка.РезультатЗапросаРазрешения.Получить();
	ТекстЗапросаРазрешения = Выборка.ТекстЗапросаРазрешения.Получить();
	ДокументОснование = Выборка.ДокументОснование;
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;
	ФискальнаяОперация = Запись.ИдентификаторФискальнойОперации;
	Если ЗначениеЗаполнено(Выборка.Дата) Тогда
		ФискальнаяОперацияПредставление = 
			СтрШаблон(НСтр("ru = '%1 от %2'"), Выборка.НомерЧекаККМ, Формат(Выборка.Дата, НСтр("ru = 'ДЛФ=DT'")));
	Иначе
		Элементы.ФискальнаяОперацияПредставление.Видимость = Ложь;
	КонецЕсли;

	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючФискальнойОперации(ИдентификаторЗаписи)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ФискальныеОперации.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	РегистрСведений.ФискальныеОперации КАК ФискальныеОперации
		|ГДЕ
		|	ФискальныеОперации.ИдентификаторЗаписи = &ИдентификаторЗаписи";
	
	Запрос.УстановитьПараметр("ИдентификаторЗаписи", ИдентификаторЗаписи);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Выборка.Следующий();

	Ключ = Новый Структура();
	Ключ.Вставить("ДокументОснование", Выборка.ДокументОснование);
	Ключ.Вставить("ИдентификаторЗаписи", ИдентификаторЗаписи);
	Возврат РегистрыСведений.ФискальныеОперации.СоздатьКлючЗаписи(Ключ);
	
КонецФункции

&НаКлиенте
Процедура ФискальнаяОперацияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	Ключ = КлючФискальнойОперации(Запись.ИдентификаторФискальнойОперации);
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Ключ) Тогда
		ОткрытьФорму("РегистрСведений.ФискальныеОперации.ФормаЗаписи", Новый Структура("Ключ", Ключ));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеВТехническуюПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ПустаяСтрока(Результат.КодОшибки) Тогда
		ОбщегоНазначенияБПОКлиент.СообщитьПользователю(Результат.СообщениеОбОшибке);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция КодОтветаГИСМТПредставление(КодОтвета)
	
	ТаблицаРезультатов = Новый Соответствие();
	ТаблицаРезультатов.Вставить(Неопределено, "");  //@NON-NLS-1 @NON-NLS-2
	ТаблицаРезультатов.Вставить("", "");  //@NON-NLS-1 @NON-NLS-2
	ТаблицаРезультатов.Вставить(НСтр("ru = 'Таймаут'"), "");  //@NON-NLS-1 @NON-NLS-2
	ТаблицаРезультатов.Вставить("200", НСтр("ru = 'Успешно'"));  //@NON-NLS-1 @NON-NLS-2
	ТаблицаРезультатов.Вставить("401", НСтр("ru = 'Ошибка авторизации'"));  //@NON-NLS-1 @NON-NLS-2
	ТаблицаРезультатов.Вставить("203", НСтр("ru = 'Аварийная ситуация'"));  //@NON-NLS-1 @NON-NLS-2
	ТаблицаРезультатов.Вставить("429", НСтр("ru = 'Не доступна'"));  //@NON-NLS-1 @NON-NLS-2
	КодОтветаПредставление = ТаблицаРезультатов[КодОтвета];
	Если КодОтветаПредставление = Неопределено Тогда
		КодОтветаПредставление = НСтр("ru = 'Ошибка'")
	КонецЕсли;
	Возврат КодОтветаПредставление;
	
КонецФункции

&НаСервереБезКонтекста
Функция КодОтветаАварийнаяСитуация(КодОтвета)
	Возврат КодОтвета = "203";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПроверкиРазрешительногоРежима(КодОтвета)
	
	Если КодОтвета = Неопределено 
		Или ВРег(КодОтвета) = ВРег(НСтр("ru = 'Таймаут'")) 
		Или КодОтветаАварийнаяСитуация(КодОтвета) Тогда
		Возврат НСтр("ru = 'Проверка не пройдена, продажа разрешена.'");
	ИначеЕсли СтрНачинаетсяС(КодОтвета, "2") Тогда
		Возврат НСтр("ru = 'Проверка пройдена, продажа разрешена.'");
	ИначеЕсли ПустаяСтрока(КодОтвета) Тогда
		Возврат НСтр("ru = 'Не выполнялось.'");
	Иначе
		Возврат НСтр("ru = 'Проверка не пройдена, продажа запрещена.'");
	КонецЕсли;
	
КонецФункции

#КонецОбласти
