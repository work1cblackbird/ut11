
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область СлужебныйПрограммныйИнтерфейс

// Функция - Получить значения курса валюты договора
//
// Параметры:
//  Договор		 - 	СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - договор, по которому установлен курс
//  ДатаКурса	 - 	Дата - дата, на которую получается курс
// 
// Возвращаемое значение:
//  Структура:
//   * Договор - СправочникСсылка.ДоговорыКонтрагентов, 
//               СправочникСсылка.ДоговорыМеждуОрганизациями - Договор с установленным курсом валюты
//   * ДатаКурса - Дата - дата получения курса
//   * КурсЧислитель - Число - Числитель курса валюты на указанную дату.
//   * КурсЗнаменатель - Число - Знаменатель курса валюты на указанную дату.
//
Функция ПолучитьЗначенияКурсаВалютыДоговора(Договор, ДатаКурса)Экспорт
	
	Результат = ПолучитьПоследнее(ДатаКурса, Новый Структура("Договор", Договор));
	Если Не (ЗначениеЗаполнено(Результат.КурсЧислитель) И ЗначениеЗаполнено(Результат.КурсЗнаменатель)) Тогда
		Результат.КурсЧислитель = 1;
		Результат.КурсЗнаменатель = 1;
		Результат.Вставить("КурсНеЗадан", Истина);
	КонецЕсли;
	Результат.Вставить("Договор", Договор);
	Результат.Вставить("ДатаКурса", ДатаКурса);
	
	Возврат Результат;
	
КонецФункции

// Функция - Есть записи курса валюты договора
//
// Параметры:
//  Договор	  - 	СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - договор, по которому установлен курс
// 
// Возвращаемое значение:
//  Булево - Истина, если в регистре есть значения курса валюты по данному договору
//
Функция ЕстьЗаписиКурсаВалютыДоговора(Договор)Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Договор.Установить(Договор);
	НаборЗаписей.Прочитать();
	Возврат НаборЗаписей.Выбран() И НаборЗаписей.Количество() > 0;
	
КонецФункции

// Удаляет записи курсов по договору
//
// Параметры:
//  Договор	 - СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - Договор с курсом валюты
//
Процедура ОчиститьИсториюКурсовПоДоговору(Договор)Экспорт 
	
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Договор.Установить(Договор);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Процедура - Записать значения курса валюты договора
//
// Параметры:
//  Договор			 - 	СправочникСсылка.ДоговорыКонтрагентов, СправочникСсылка.ДоговорыМеждуОрганизациями - договор, по которому устанавливается курс
//  ДатаКурса		 - 	Дата - дата на которую необходимо записать курс
//  КурсЧислитель	 - 	Число - курс валюты
//  КурсЗнаменатель	 - 	Число - кратность курса
//
Процедура ЗаписатьЗначенияКурсаВалютыДоговора(Договор, Знач ДатаКурса, КурсЧислитель, КурсЗнаменатель)Экспорт 
	
	ДатаКурса = НачалоДня(ДатаКурса);
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Договор.Установить(Договор);
	НаборЗаписей.Прочитать();
	
	ЕстьИзменения = Ложь;
	Если НаборЗаписей.Количество() = 0 Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Договор         = Договор;
		НоваяЗапись.Период          = Дата(1980, 1, 1);
		НоваяЗапись.КурсЧислитель   = КурсЧислитель;
		НоваяЗапись.КурсЗнаменатель = КурсЗнаменатель;
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Договор         = Договор;
		НоваяЗапись.Период          = ДатаКурса;
		НоваяЗапись.КурсЧислитель   = КурсЧислитель;
		НоваяЗапись.КурсЗнаменатель = КурсЗнаменатель;
		ЕстьИзменения = Истина;
		
	Иначе
		
		ТзКурсов = НаборЗаписей.Выгрузить();
		ТзКурсов.Индексы.Добавить("Период");
		ТзКурсов.Сортировать("Период");
		// Ищем последнюю запись о курсе
		Ид = 0;
		Пока Ид < ТзКурсов.Количество() 
			И ТзКурсов[Ид].Период < ДатаКурса Цикл
			Ид = Ид + 1;
		КонецЦикла;
		Если Ид < ТзКурсов.Количество()
			И ТзКурсов[Ид].Период = ДатаКурса Тогда
			// Уже есть запись на дату курса - заменяем только если изменились значения
			Если (ТзКурсов[Ид].КурсЧислитель <> КурсЧислитель
				Или ТзКурсов[Ид].КурсЗнаменатель <> КурсЗнаменатель) Тогда 
				// Уже есть запись на дату курса - нужно заменить
				ТзКурсов[Ид].КурсЧислитель   = КурсЧислитель;
				ТзКурсов[Ид].КурсЗнаменатель = КурсЗнаменатель;
				ЕстьИзменения = Истина;
			КонецЕсли;
		ИначеЕсли Ид = 0 
			Или ТзКурсов[Ид-1].КурсЧислитель <> КурсЧислитель
			Или ТзКурсов[Ид-1].КурсЗнаменатель <> КурсЗнаменатель Тогда 
			// Нужно добавить запись раньше существующих 
			// или есть изменения по сравнению с предыдущей записью
			НоваяЗапись = ТзКурсов.Вставить(Ид);
			НоваяЗапись.Договор         = Договор;
			НоваяЗапись.Период          = ДатаКурса;
			НоваяЗапись.КурсЧислитель   = КурсЧислитель;
			НоваяЗапись.КурсЗнаменатель = КурсЗнаменатель;
			ЕстьИзменения = Истина;
		КонецЕсли;
		Если ТзКурсов[0].Период = Дата(1980, 1, 1) Тогда 
			Если ТзКурсов.Количество() = 2
				И (ТзКурсов[0].КурсЧислитель <> ТзКурсов[1].КурсЧислитель
					Или ТзКурсов[0].КурсЗнаменатель <> ТзКурсов[1].КурсЗнаменатель) Тогда 
				// Если в договоре, который уже записали сегодня поменяли курс - нужно его обновить и в записи на 1980.01.01
				ТзКурсов[0].КурсЧислитель   = ТзКурсов[1].КурсЧислитель;
				ТзКурсов[0].КурсЗнаменатель = ТзКурсов[1].КурсЗнаменатель;
				ЕстьИзменения = Истина;
			КонецЕсли;
		Иначе
			// Нужно добавить запись на 1980.01.01 если ее нет
			НоваяЗапись = ТзКурсов.Добавить();
			НоваяЗапись.Договор         = Договор;
			НоваяЗапись.Период          = Дата(1980, 1, 1);
			НоваяЗапись.КурсЧислитель   = ТзКурсов[0].КурсЧислитель;
			НоваяЗапись.КурсЗнаменатель = ТзКурсов[0].КурсЗнаменатель;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			НаборЗаписей.Загрузить(ТзКурсов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
