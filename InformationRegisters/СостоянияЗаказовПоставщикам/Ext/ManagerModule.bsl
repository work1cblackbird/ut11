#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Отражает изменения состояний заказов в регистре.
//
// Параметры:
//  Заказы - Массив из ДокументСсылка - массив отражаемых заказов.
//  Ошибки - Неопределено, Соответствие из КлючИЗначение - со структурой:
//                          *Ключ     - ДокументСсылка -
//                          *Значение - Строка - Подробное представление ошибки.
//
Процедура ОтразитьСостоянияЗаказов(Заказы, Ошибки = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка      КАК Заказ,
	|	НЕ ЗаказПоставщику.Проведен КАК УдалениеПроведения
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В (&Заказы)
	|";
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаказов = Результат.Выгрузить();
	
	КоличествоЗаказов = ТаблицаЗаказов.Количество();
	Если КоличествоЗаказов = 1 Тогда
		
		СтрокаТаблицы = ТаблицаЗаказов[0];
		
		ОтобранныеЗаказы = Новый Массив;
		ОтобранныеЗаказы.Добавить(СтрокаТаблицы.Заказ);
		
		УдалениеПроведения = СтрокаТаблицы.УдалениеПроведения;
		
		ОтразитьСостояниеЗаказа(ОтобранныеЗаказы, УдалениеПроведения, Ошибки);
		
	ИначеЕсли КоличествоЗаказов > 1 Тогда
		
		ТаблицаЗаказов.Индексы.Добавить("УдалениеПроведения");
		
		Отбор = Новый Структура("УдалениеПроведения");
		
		Отбор.УдалениеПроведения = Истина;
		ТаблицаОтобранныхЗаказов = ТаблицаЗаказов.Скопировать(Отбор, "Заказ");
		Если ТаблицаОтобранныхЗаказов.Количество() > 0 Тогда
			
			ОтобранныеЗаказы = ТаблицаОтобранныхЗаказов.ВыгрузитьКолонку("Заказ");
			ОтразитьСостояниеЗаказа(ОтобранныеЗаказы, Отбор.УдалениеПроведения, Ошибки);
			
		КонецЕсли;
		
		Отбор.УдалениеПроведения = Ложь;
		ТаблицаОтобранныхЗаказов = ТаблицаЗаказов.Скопировать(Отбор, "Заказ");
		Если ТаблицаОтобранныхЗаказов.Количество() > 0 Тогда
			
			ОтобранныеЗаказы = ТаблицаОтобранныхЗаказов.ВыгрузитьКолонку("Заказ");
			ОтразитьСостояниеЗаказа(ОтобранныеЗаказы, Отбор.УдалениеПроведения, Ошибки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет текст запроса механизма расчета состояний.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция СоответствиеЗапросовКонтрольнымРегистрам(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("РеестрДокументовИзменения", ТекстЗапросаРеестрДокументов(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ДвиженияЗаказыПоставщикамИзменение", ТекстЗапросаЗаказыПоставщикам(Запрос));
	СоответствиеТекстовЗапросов.Вставить("РасчетыСПоставщикамиИзменения", ТекстЗапросаРасчетыСПоставщиками(Запрос));
	СоответствиеТекстовЗапросов.Вставить("ТоварыКПоступлениюИзменение", ТекстЗапросаТоварыКПоступлению(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Добавляет задания к отражению состояния заказов.
// 
// Параметры:
//  Источник       - см. СостоянияДокументов.ДобавитьЗаданияКОтражениюСостоянияЗаказов.Источник
//  Заказы         - см. СостоянияДокументов.ДобавитьЗаданияКОтражениюСостоянияЗаказов.ОтражаемыеДокументы
//  Действие       - см. СостоянияДокументов.ДобавитьЗаданияКОтражениюСостоянияЗаказов.Действие
//  ТаблицаЗаданий - см. ОтложенныеЗадания.ДобавитьЗаданияВОчередь.ТаблицаЗаданий
//
Процедура ДобавитьЗаданияКОтражениюСостоянияЗаказов(
			Источник,
			Заказы,
			Действие = "",
			ТаблицаЗаданий = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		РегистрыСведений.ЗаданияКОтражениюСостоянияЗаказов.ДобавитьЗадания(Источник.Ссылка, Действие, ТаблицаЗаданий);
		
	Иначе
		
		ТипыЗаказов = ТипыЗаказовДляОтраженияСостояний();
		
		Для каждого Заказ Из Заказы Цикл
			
			Если ТипыЗаказов.Найти(ТипЗнч(Заказ)) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКОтражениюСостоянияЗаказов.ДобавитьЗадания(Заказ, Действие, ТаблицаЗаданий);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает типы заказов по которым нужно отразить состояния.
//
// Возвращаемое значение:
//  Массив из Тип - Типы заказов отражения состояний
//
Функция ТипыЗаказовДляОтраженияСостояний() Экспорт
	
	ТипыЗаказов = Новый Массив;
	ТипыЗаказов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	
	Возврат ТипыЗаказов;
	
КонецФункции

// Возвращает таблицу действий для отражения состояния заказов.
// Подробное описание в функции СостоянияДокументов.ИнициализироватьТаблицуДействийДляОтраженияСостоянияЗаказов.
// 
// Возвращаемое значение:
//  - Неопределено,
//  - см. СостоянияДокументов.ИнициализироватьТаблицуДействийДляОтраженияСостоянияЗаказов
//
Функция ДействияДляОтраженияСостоянияЗаказов() Экспорт
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура по переданной ссылке на заказ расчитывает и записывает в регистр сведений состояние заказа.
//
// Параметры:
//  Заказы - ДокументСсылка - документ, в рамках проведения которого перерасчитывается состояние
//  УдалениеПроведения - Булево - признак обработки удаления проведения
//  Ошибки - см. ОтразитьСостоянияЗаказов.Ошибки
//
Процедура ОтразитьСостояниеЗаказа(Заказы, УдалениеПроведения = Ложь, Ошибки = Неопределено)
	
	Если УдалениеПроведения Тогда
		
		Для Каждого Заказ Из Заказы Цикл
			
			Набор = РегистрыСведений.СостоянияЗаказовПоставщикам.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(Заказ);
			
			Попытка
				Набор.Записать(Истина);
			Исключение
				
				ТекстОшибки = ТекстОшибкиОтражения(Заказ, ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					Заказ.Метаданные(),
					Заказ,
					ТекстОшибки);
				
				Если Ошибки <> Неопределено Тогда
					Ошибки.Вставить(Заказ, ТекстОшибки);
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЦикла;
		
		Возврат
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Заказ, Состояние, ДатаСобытия, 
		|СуммаОплаты, ПроцентОплаты, СуммаПоступления, ПроцентПоступления, СуммаДолга, ПроцентДолга, ЕстьРасхожденияОрдерНакладная");
	
	ТаблицаСостоянийЗаказов = ТаблицаСостоянийЗаказов(Заказы);
	ТаблицаПредыдущихСостоянийЗаказов = ТаблицаПредыдущихСостоянийЗаказов(Заказы);
		
	Для Каждого СтрокаТаблицы Из ТаблицаСостоянийЗаказов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		МассивДействующихСостояний = ТаблицаПредыдущихСостоянийЗаказов.НайтиСтроки(СтруктураПоиска);
		
		СостояниеИзменено = НЕ Булево(МассивДействующихСостояний.Количество());
		Если СостояниеИзменено Тогда
			
			Набор = РегистрыСведений.СостоянияЗаказовПоставщикам.СоздатьНаборЗаписей();
			Набор.Отбор.Заказ.Установить(СтрокаТаблицы.Заказ);
			
			СтрокаНабора = Набор.Добавить();
			
			ПроцентДолгаОплатыДоОкругления = СтрокаТаблицы.ПроцентОплаты + СтрокаТаблицы.ПроцентДолга;
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентПоступления);
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентОплаты);
			ОкруглитьПроценты(СтрокаТаблицы.ПроцентДолга);
			ОстатокПослеОкругления = ПроцентДолгаОплатыДоОкругления - СтрокаТаблицы.ПроцентОплаты - СтрокаТаблицы.ПроцентДолга;
			ОкруглитьПроценты(ПроцентДолгаОплатыДоОкругления);
			// Если оплата и долг в сумме 100%, хвосты от округления добавим, по возможности, к долгу, 
			// чтобы оплата сходилась с текстом гиперссылки "Состояние расчетов"
			Если ОстатокПослеОкругления <> 0 
				И ПроцентДолгаОплатыДоОкругления = СтрокаТаблицы.ПроцентПоступления
				И СтрокаТаблицы.ПроцентОплаты > 0
				И СтрокаТаблицы.ПроцентДолга > 0 
				И СтрокаТаблицы.СуммаДолга < 0 Тогда
				Если СтрокаТаблицы.ПроцентДолга + ОстатокПослеОкругления < 1 Тогда
					СтрокаТаблицы.ПроцентОплаты = СтрокаТаблицы.ПроцентОплаты + ОстатокПослеОкругления;
				Иначе
					СтрокаТаблицы.ПроцентДолга = СтрокаТаблицы.ПроцентДолга + ОстатокПослеОкругления;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаНабора, СтрокаТаблицы);
			
			Попытка
				Набор.Записать(Истина);
			Исключение
				
				ТекстОшибки = ТекстОшибкиОтражения(СтрокаТаблицы.Заказ, ИнформацияОбОшибке());
				
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Предупреждение,
					СтрокаТаблицы.Заказ.Метаданные(),
					СтрокаТаблицы.Заказ,
					ТекстОшибки);
				
				Если Ошибки <> Неопределено Тогда
					Ошибки.Вставить(СтрокаТаблицы.Заказ, ТекстОшибки);
				КонецЕсли;
				
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ТекстОшибкиОтражения(Заказ, ИнформацияОбОшибке)
	
	Шаблон = НСтр("ru = 'Не удалось отразить состояние заказа поставщику: %1 по причине: %2'");
	
	Возврат СтрШаблон(Шаблон, Заказ, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	
КонецФункции

// Округляет проценты отгрузки, оплаты, долга
//
// Параметры:
//	ОкругляемоеЧисло - Число - округляемое число.
//
Процедура ОкруглитьПроценты(ОкругляемоеЧисло)
	
	Если ОкругляемоеЧисло > 99
		И ОкругляемоеЧисло < 100 Тогда
		
		ОкругляемоеЧисло = 99;
		
	КонецЕсли;
	
	Если ОкругляемоеЧисло > 0
		И ОкругляемоеЧисло < 1 Тогда
		
		ОкругляемоеЧисло = 1;
		
	КонецЕсли;
	
	ОкругляемоеЧисло = Окр(ОкругляемоеЧисло);
	
КонецПроцедуры

// Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		СсылкиНаДокументы - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовПоставщикам
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаПоступления - Число
//			ПроцентПоступления - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//
Функция ТаблицаСостоянийЗаказов(МассивСсылок)
	
	СоотвествиеТипов = ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивСсылок);
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	
	ТекстыПакета = Новый Массив;
	ТекстыПакета.Добавить(ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов());
	
	Если НоваяАрхитектураВзаиморасчетов Тогда
		ТекстыПакета.Добавить(ТекстЗапросаСостояниеВзаиморасчетов());
	Иначе
		ТекстыПакета.Добавить(ТекстЗапросаРасчетов());
		ТекстыПакета.Добавить(ТекстЗапросаОстатковРасчетов());
	КонецЕсли;
	
	ТекстыПоДокументам = Новый Массив;
	ТекстыСостоянияОфлайнРасчетов = Новый Массив;
	
	ПервыйЗапрос = Истина;
	
	Для Каждого ТипДокумента Из СоотвествиеТипов Цикл
		
		Если ТипДокумента.Ключ = "Документ.ЗаказПоставщику" Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТипДокумента.Ключ);
			ТекстыПоДокументам.Добавить(МенеджерОбъекта.ТекстЗапросаДляРасчетаСостоянийЗаказов());
		
			Если Не НоваяАрхитектураВзаиморасчетов Тогда
				Если ПервыйЗапрос Тогда
					ТекстыСостоянияОфлайнРасчетов.Добавить(ТекстЗапросаСостояниеОфлайнВзаиморасчетов(ТипДокумента.Ключ));
				Иначе
					ТекстыСостоянияОфлайнРасчетов.Добавить(
						СтрЗаменить(ТекстЗапросаСостояниеОфлайнВзаиморасчетов(ТипДокумента.Ключ), "ПОМЕСТИТЬ ВтСостояниеВзаиморасчетов", ""));
				КонецЕсли;
			КонецЕсли;
			
			ПервыйЗапрос = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекстыСостоянияОфлайнРасчетов.Количество() > 0 Тогда
		ТекстыПакета.Добавить(СтрСоединить(ТекстыСостоянияОфлайнРасчетов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	КонецЕсли;
	ТекстыПакета.Добавить(СтрСоединить(ТекстыПоДокументам, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()));
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыПакета, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("МассивЗаказов", МассивСсылок);
	Запрос.УстановитьПараметр("НеИспользоватьСтатусыЗаказовПоставщикам", НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПоставщикам"));
	Запрос.УстановитьПараметр("КонтролироватьЗакрытиеЗаказа", 
			ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления")
				ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты"));
	
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить());
	Запрос.УстановитьПараметр("МерныеТипыВеличин", Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДанныеОтчета", 4);
	
	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСостояний;
	
КонецФункции

// Функция возвращает текст запроса для расчета даты актуальности состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаДатСобытийСостоянийЗаказов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
		|	ОбъектыРасчетов.Объект КАК ЗаказПоставщику
		|ПОМЕСТИТЬ ВтОбъектыРасчетов
		|ИЗ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В (&МассивЗаказов)
		|;
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РасчетыСПоставщиками.Период, ДЕНЬ) КАК Период,
		|	СУММА(РасчетыСПоставщиками.КОплате) КАК КОплатеРасход,
		|	РасчетыСПоставщиками.ОбъектРасчетов.Объект КАК ЗаказПоставщику
		|ПОМЕСТИТЬ ЭтапыРасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.ОбъектРасчетов В (
		|		ВЫБРАТЬ ОбъектРасчетов ИЗ ВтОбъектыРасчетов)
		|	И РасчетыСПоставщиками.Активность
		|	И РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути)
		|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
		|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
		|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
		|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
		|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = РасчетыСПоставщиками.ОбъектРасчетов.Организация
		|	И РасчетыСПоставщиками.КОплате <> 0
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщиками.ОбъектРасчетов,
		|	НАЧАЛОПЕРИОДА(РасчетыСПоставщиками.Период, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.ОбъектРасчетов.Объект КАК ЗаказПоставщику,
		|	СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|						И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути)
		|						И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
		|						И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
		|						И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
		|						И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
		|			ТОГДА РасчетыСПоставщиками.КОплате
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК КОплатеПриход,
		|	СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			ТОГДА РасчетыСПоставщиками.КПоступлению
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК КПоступлениюРасход
		|ПОМЕСТИТЬ ОплаченоПоЗаказам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.ОбъектРасчетов В (
		|				ВЫБРАТЬ ОбъектРасчетов ИЗ ВтОбъектыРасчетов)
		|	И РасчетыСПоставщиками.Активность
		|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = РасчетыСПоставщиками.ОбъектРасчетов.Организация
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщиками.ОбъектРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЭтапыРасчетов.Период КАК Период,
		|	ЭтапыРасчетов.ЗаказПоставщику КАК ЗаказПоставщику
		|ПОМЕСТИТЬ РезультатРасчетов
		|ИЗ
		|	ЭтапыРасчетов КАК ЭтапыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЭтапыРасчетов КАК РасчетыСПоставщиками
		|		ПО (РасчетыСПоставщиками.Период <= ЭтапыРасчетов.Период)
		|			И (РасчетыСПоставщиками.ЗаказПоставщику = ЭтапыРасчетов.ЗаказПоставщику)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОплаченоПоЗаказам КАК Оплачено
		|		ПО ЭтапыРасчетов.ЗаказПоставщику = Оплачено.ЗаказПоставщику
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыРасчетов.Период,
		|	ЭтапыРасчетов.ЗаказПоставщику,
		|	Оплачено.КОплатеПриход
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСПоставщиками.КОплатеРасход) - ЕСТЬNULL(Оплачено.КОплатеПриход, 0) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(РезультатРасчетов.Период) КАК ДатаАктуальности,
		|	РезультатРасчетов.ЗаказПоставщику КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ДатыАктуальностиЗаказовПоставщикам
		|ИЗ
		|	РезультатРасчетов КАК РезультатРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	РезультатРасчетов.ЗаказПоставщику";
		
	Тексты = Новый Массив();
	Тексты.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	МИНИМУМ(ЗапасыИПотребности.ДатаСобытия) КАК МинимальнаяДатаПоступления,
		|	ЗапасыИПотребности.Заказ КАК ЗаказПоставщику
		|ПОМЕСТИТЬ ДатыПоступленияЗаказовПоставщикам
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности.Остатки(, Заказ В(&МассивЗаказов)) КАК ЗапасыИПотребности
		|ГДЕ
		|	ЗапасыИПотребности.ЗаказаноОстаток > 0
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыИПотребности.Заказ";
		
	Тексты.Добавить(ТекстЗапроса);
	
	Тексты.Добавить(
		"УНИЧТОЖИТЬ ЭтапыРасчетов;
		|УНИЧТОЖИТЬ РезультатРасчетов
		|");
	
	ТекстЗапроса = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает таблицу значений с состояниями документов.
//
//	Параметры:
//		МассивСсылок - Массив - (состоящий из ДокументСсылка) ссылки на документы, по которым
//					нужно рассчитать состояние. В модуле менеджера документов должна быть определена функция
//					ТекстЗапросаДляРасчетаДатыАктуальностиСостоянийЗаказов(), которая возвращает текст запроса по датам актуальности и
//					ТекстЗапросаДляРасчетаСостоянийЗаказов(), которая возвращает текст запроса по состояниям заказов.
//	Возвращаемое значение:
//		ТаблицаЗначений:
//			Заказ - ДокументСсылка
//			Состояние - ПеречислениеСсылка.СостоянияЗаказовПоставщикам
//			ДатаСобытия - Дата
//			СуммаОплаты - Число
//			ПроцентОплаты - Число
//			СуммаПоступления - Число
//			ПроцентПоступления - Число
//			СуммаДолга - Число
//			ПроцентДолга - Число
//			ЕстьРасхожденияОрдерНакладная - Булево
//
Функция ТаблицаПредыдущихСостоянийЗаказов(МассивСсылок)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СостоянияЗаказовПоставщикам.Заказ КАК Заказ,
	|	СостоянияЗаказовПоставщикам.Состояние КАК Состояние,
	|	СостоянияЗаказовПоставщикам.ДатаСобытия КАК ДатаСобытия,
	|	СостоянияЗаказовПоставщикам.СуммаОплаты КАК СуммаОплаты,
	|	СостоянияЗаказовПоставщикам.ПроцентОплаты КАК ПроцентОплаты,
	|	СостоянияЗаказовПоставщикам.СуммаПоступления КАК СуммаПоступления,
	|	СостоянияЗаказовПоставщикам.ПроцентПоступления КАК ПроцентПоступления,
	|	СостоянияЗаказовПоставщикам.СуммаДолга КАК СуммаДолга,
	|	СостоянияЗаказовПоставщикам.ПроцентДолга КАК ПроцентДолга,
	|	СостоянияЗаказовПоставщикам.ЕстьРасхожденияОрдерНакладная КАК ЕстьРасхожденияОрдерНакладная
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|ГДЕ
	|	СостоянияЗаказовПоставщикам.Заказ В(&МассивСсылок)");
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область СлужебныеМетодыФормированияСостояний

#Область ТекстыЗапросовПоКонтрольнымРегистрам

Функция ТекстЗапросаЗаказыПоставщикам(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ЗаказПоставщику КАК ОтражаемыйДокумент
	|ИЗ
	|	ДвиженияЗаказыПоставщикамИзменение КАК Таблица
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаРасчетов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная,
		|	ВтОбъектыРасчетов.ОбъектРасчетов КАК ОбъектРасчетовЗаказ,
		|	ВтОбъектыРасчетов.ЗаказПоставщику КАК ЗаказПоставщику,
		|	СУММА(ВЫБОР
		|			КОГДА ОбъектыРасчетов.Сумма = 0
		|				ТОГДА 0
		|			ИНАЧЕ РасчетыСПоставщикамиОбороты.КПоступлениюРасход / ОбъектыРасчетов.Сумма
		|		КОНЕЦ) КАК ДоляЗаказа
		|ПОМЕСТИТЬ ВтСвязьЗаказовНакладных
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Обороты(, , Регистратор, ОбъектРасчетов В (ВЫБРАТЬ Т.ОбъектРасчетов ИЗ ВтОбъектыРасчетов КАК Т)) КАК РасчетыСПоставщикамиОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО РасчетыСПоставщикамиОбороты.Регистратор = ОбъектыРасчетов.Объект
		|			И НЕ ОбъектыРасчетов.ПометкаУдаления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОбъектыРасчетов КАК ВтОбъектыРасчетов
		|		ПО РасчетыСПоставщикамиОбороты.ОбъектРасчетов = ВтОбъектыРасчетов.ОбъектРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Ссылка,
		|	ВтОбъектыРасчетов.ОбъектРасчетов,
		|	ВтОбъектыРасчетов.ЗаказПоставщику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеПоРасчетам.ОбъектРасчетов КАК ОбъектРасчетов,
		|	ЕСТЬNULL(СУММА(ДанныеПоРасчетам.ОплатаФакт), 0) КАК ОплатаФакт,
		|	ЕСТЬNULL(СУММА(ДанныеПоРасчетам.КОплате), 0) КАК КОплатеКонечныйОстаток
		|ПОМЕСТИТЬ ВтДанныеПоРасчетамСПоставщиками
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасчетыСПоставщиками.ОбъектРасчетов КАК ОбъектРасчетов,
		|		ВЫБОР
		|			КОГДА РасчетыСПоставщиками.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
		|				ТОГДА ВЫБОР
		|						КОГДА НЕ РасчетыСПоставщиками.КорОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|							ТОГДА РасчетыСПоставщиками.Сумма
		|							ИНАЧЕ -РасчетыСПоставщиками.Сумма
		|					КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|					КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|							ИЛИ РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
		|							ТОГДА 0
		|						ИНАЧЕ РасчетыСПоставщиками.Сумма
		|					КОНЕЦ
		|		КОНЕЦ КАК ОплатаФакт,
		|		ВЫБОР
		|			КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА РасчетыСПоставщиками.КОплате
		|			ИНАЧЕ -РасчетыСПоставщиками.КОплате
		|		КОНЕЦ КАК КОплате
		|	ИЗ
		|		Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|			ПО ДокументЗаказПоставщику.ОбъектРасчетов = РасчетыСПоставщиками.ОбъектРасчетов
		|	ГДЕ
		|		ДокументЗаказПоставщику.Ссылка В (&МассивЗаказов)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВтСвязьЗаказовНакладных.ОбъектРасчетовЗаказ КАК ОбъектРасчетов,
		|		0 КАК ОплатаФакт,
		|		ВЫБОР
		|			КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				ТОГДА РасчетыСПоставщиками.КОплате
		|			ИНАЧЕ -РасчетыСПоставщиками.КОплате
		|		КОНЕЦ КАК КОплате
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСвязьЗаказовНакладных КАК ВтСвязьЗаказовНакладных
		|			ПО РасчетыСПоставщиками.ОбъектРасчетов = ВтСвязьЗаказовНакладных.ОбъектРасчетовНакладная
		|	ГДЕ
		|		РасчетыСПоставщиками.ОбъектРасчетов В
		|				(ВЫБРАТЬ
		|					Т.ОбъектРасчетовНакладная
		|				ИЗ
		|					ВтСвязьЗаказовНакладных КАК Т)) КАК ДанныеПоРасчетам
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПоРасчетам.ОбъектРасчетов
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОстатковРасчетов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.ОбъектРасчетов         КАК ОбъектРасчетов,
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|			И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути)
		|			И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС)
		|			И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
		|			И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
		|			И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
		|		ТОГДА РасчетыСПоставщиками.КОплате
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0)                                       КАК КОплатеПриход,
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ТОГДА РасчетыСПоставщиками.КОплате
		|		ИНАЧЕ - РасчетыСПоставщиками.КОплате
		|	КОНЕЦ), 0)                                       КАК КОплатеКонечныйОстаток,
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		ТОГДА РасчетыСПоставщиками.КПоступлению
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0)                                       КАК КПоступлениюРасход,
		|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ТОГДА РасчетыСПоставщиками.Сумма
		|		ИНАЧЕ - РасчетыСПоставщиками.Сумма
		|	КОНЕЦ), 0)                                       КАК СуммаКонечныйОстаток
		|ПОМЕСТИТЬ ВтРасчетыСПоставщикамиОстатки
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.ОбъектРасчетов В (ВЫБРАТЬ Т.ОбъектРасчетов ИЗ ВтОбъектыРасчетов КАК Т)
		|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам.Организация = РасчетыСПоставщиками.ОбъектРасчетов.Организация
		|	И РасчетыСПоставщиками.Активность
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСПоставщиками.ОбъектРасчетов
		|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостояниеОфлайнВзаиморасчетов(ТипДокументаСтрокой)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ 
		|	ДокументЗаказ.Ссылка                               КАК Заказ,
		|	РасчетыСПоставщикамиОстатки.КОплатеПриход          КАК ОплаченоПоЗаказу,
		|	ВтДанныеПоРасчетамСПоставщиками.КОплатеКонечныйОстаток КАК ОсталосьОплатить,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|			ТОГДА ВЫБОР
		|				КОГДА ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ТОГДА ВЫРАЗИТЬ (ЕСТЬNULL(ОплаченоПоЗаказам.КОплатеПриход, 0) КАК ЧИСЛО(31,2))
		|				КОГДА ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|					ТОГДА ВЫРАЗИТЬ (ЕСТЬNULL(ВтДанныеПоРасчетамСПоставщиками.ОплатаФакт, 0) КАК ЧИСЛО(31,2))
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК СуммаОплаты,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|			ТОГДА ВЫБОР
		|				КОГДА ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ТОГДА ВЫРАЗИТЬ ((ЕСТЬNULL(ОплаченоПоЗаказам.КОплатеПриход, 0)) * 100 / ДокументЗаказ.СуммаДокумента КАК ЧИСЛО(20, 10))
		|				КОГДА ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|					ТОГДА ВЫРАЗИТЬ ((ЕСТЬNULL(ВтДанныеПоРасчетамСПоставщиками.ОплатаФакт, 0)) * 100 / ДокументЗаказ.СуммаДокумента КАК ЧИСЛО(20, 10))
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК ПроцентОплаты,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|				И (ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ИЛИ ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|			ТОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0)
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК СуммаПоступления,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|				И (ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ИЛИ ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0) * 100 / ДокументЗаказ.СуммаДокумента КАК ЧИСЛО(20, 10))
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК ПроцентПоступления,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|				И (ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ИЛИ ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|			ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(31,2))
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК СуммаДолга,
		|	ВЫБОР
		|		КОГДА ДокументЗаказ.Проведен
		|				И ДокументЗаказ.СуммаДокумента > 0
		|				И (ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказам)
		|					ИЛИ ДокументЗаказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|			ТОГДА ВЫРАЗИТЬ((ВЫБОР 
		|				КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) > 0 
		|					ТОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0)
		|				ИНАЧЕ ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0)
		|			КОНЕЦ * 100 / ДокументЗаказ.СуммаДокумента) КАК ЧИСЛО(20, 10))
		|		ИНАЧЕ 0
		|	КОНЕЦ                                           КАК ПроцентДолга
		|
		|ПОМЕСТИТЬ ВтСостояниеВзаиморасчетов
		|ИЗ
		|	#ИмяДокумента КАК ДокументЗаказ
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтРасчетыСПоставщикамиОстатки КАК РасчетыСПоставщикамиОстатки
		|		ПО ДокументЗаказ.ОбъектРасчетов = РасчетыСПоставщикамиОстатки.ОбъектРасчетов 
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОплаченоПоЗаказам КАК ОплаченоПоЗаказам
		|		ПО ДокументЗаказ.Ссылка = ОплаченоПоЗаказам.ЗаказПоставщику
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеПоРасчетамСПоставщиками КАК ВтДанныеПоРасчетамСПоставщиками
		|		ПО ДокументЗаказ.ОбъектРасчетов = ВтДанныеПоРасчетамСПоставщиками.ОбъектРасчетов
		|ГДЕ
		|	ДокументЗаказ.Ссылка В (&МассивЗаказов)
		|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента", ТипДокументаСтрокой);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостояниеВзаиморасчетов()
	
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыРасчетов.Ссылка КАК Ссылка,
		|	ОбъектыРасчетов.Объект КАК Объект,
		|	ОбъектыРасчетов.Сумма КАК Сумма,
		|	ОбъектыРасчетов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ВтЗаказы
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	ОбъектыРасчетов.Объект В(&МассивЗаказов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСПоставщикамиОбороты.Регистратор КАК Регистратор,
		|	РасчетыСПоставщикамиОбороты.ОбъектРасчетов КАК ОбъектРасчетов,
		|	РасчетыСПоставщикамиОбороты.КПоступлениюРасход КАК КПоступлениюРасход
		|ПОМЕСТИТЬ ВтРасчетыСПоставщиками
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ОбъектРасчетов В
		|				(ВЫБРАТЬ
		|					ВтЗаказы.Ссылка
		|				ИЗ
		|					ВтЗаказы)) КАК РасчетыСПоставщикамиОбороты
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	ОбъектРасчетов
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетовНакладная,
		|	ОбъектыРасчетовЗаказ.Ссылка КАК ОбъектРасчетовЗаказ,
		|	ОбъектыРасчетовЗаказ.Объект КАК ЗаказПоставщику,
		|	СУММА(ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА ОбъектыРасчетов.СуммаВзаиморасчетов = 0
		|				ТОГДА ВЫБОР
		|						КОГДА ОбъектыРасчетов.Сумма = 0
		|							ТОГДА 0
		|						ИНАЧЕ РасчетыСПоставщикамиОбороты.КПоступлениюРасход / ОбъектыРасчетов.Сумма
		|					КОНЕЦ
		|			ИНАЧЕ РасчетыСПоставщикамиОбороты.КПоступлениюРасход / ОбъектыРасчетов.СуммаВзаиморасчетов
		|		КОНЕЦ КАК ЧИСЛО(20,10))) КАК ДоляЗаказа,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ОбъектыРасчетовЗаказ.СуммаВзаиморасчетов = 0
		|				ТОГДА ОбъектыРасчетовЗаказ.Сумма
		|			ИНАЧЕ ОбъектыРасчетовЗаказ.СуммаВзаиморасчетов
		|		КОНЕЦ) КАК СуммаЗаказа
		|ПОМЕСТИТЬ ВтСвязьЗаказовНакладных
		|ИЗ
		|	ВтРасчетыСПоставщиками КАК РасчетыСПоставщикамиОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтЗаказы КАК ОбъектыРасчетовЗаказ
		|		ПО РасчетыСПоставщикамиОбороты.ОбъектРасчетов = ОбъектыРасчетовЗаказ.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ПО РасчетыСПоставщикамиОбороты.Регистратор = ОбъектыРасчетов.Объект
		|			И НЕ ОбъектыРасчетов.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Ссылка,
		|	ОбъектыРасчетовЗаказ.Ссылка,
		|	ОбъектыРасчетовЗаказ.Объект
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРасчетовНакладная
		|
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.Заказ                                  КАК Заказ,
		|	ЕСТЬNULL(СУММА(Расчеты.СуммаОплат), 0)         КАК СуммаОплаты,
		|	ЕСТЬNULL(СУММА(Расчеты.СуммаОплатПоЗаказу), 0) КАК ОплаченоПоЗаказу,
		|	ВЫБОР КОГДА ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) - СУММА(Расчеты.СуммаОплат) + СУММА(Расчеты.СуммаСписаний), 0) <= 0
		|		ТОГДА -ЕСТЬNULL(СУММА(Расчеты.СуммаЗадолженности), 0)
		|		ИНАЧЕ -ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) - СУММА(Расчеты.СуммаОплат) + СУММА(Расчеты.СуммаСписаний), 0)
		|	КОНЕЦ КАК ОсталосьОплатить,
		|	ЕСТЬNULL(СУММА(Расчеты.СуммаПоставок), 0)      КАК СуммаПоступления,
		|	-ЕСТЬNULL(СУММА(Расчеты.СуммаЗадолженности), 0) КАК СуммаДолга,
		|	ВЫБОР КОГДА ЕСТЬNULL(СУММА(Расчеты.СуммаОплат), 0) = 0
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов), 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(Расчеты.СуммаОплат) * 100 / МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК ЧИСЛО(20, 10))
		|	КОНЕЦ                                          КАК ПроцентОплаты,
		|	ВЫБОР КОГДА ЕСТЬNULL(СУММА(Расчеты.СуммаПоставок), 0) = 0
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов), 0) = 0
		|			ТОГДА 0
		|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(Расчеты.СуммаПоставок) * 100 / МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК ЧИСЛО(20, 10))
		|	КОНЕЦ                                          КАК ПроцентПоступления,
		|	ВЫБОР КОГДА ЕСТЬNULL(СУММА(Расчеты.СуммаЗадолженности), 0) = 0
		|		ИЛИ ЕСТЬNULL(МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов), 0) = 0
		|			ТОГДА 0 
		|		КОГДА ЕСТЬNULL(СУММА(Расчеты.СуммаЗадолженности), 0) > 0
		|			ТОГДА ВЫРАЗИТЬ(СУММА(Расчеты.СуммаЗадолженности) * 100 / МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК ЧИСЛО(20, 10))
		|		ИНАЧЕ - ВЫРАЗИТЬ(СУММА(Расчеты.СуммаЗадолженности) * 100 / МАКСИМУМ(Расчеты.СуммаПервоначальныхВзаиморасчетов) КАК ЧИСЛО(20, 10))
		|	КОНЕЦ                                          КАК ПроцентДолга
		|ПОМЕСТИТЬ ВтСостояниеВзаиморасчетов
		|ИЗ (ВЫБРАТЬ
		|		ОбъектыРасчетов.Объект        КАК Заказ,
		|		&ШаблонПоляОплачено           КАК СуммаОплат,
		|		&ШаблонПоляОплачено           КАК СуммаОплатПоЗаказу,
		|		&ШаблонПоляСписание           КАК СуммаСписаний,
		|		&ШаблонПоляПоставлено         КАК СуммаПоставок,
		|		ВЫБОР КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.Долг - РасчетыПоСрокам.Предоплата
		|			ИНАЧЕ РасчетыПоСрокам.Предоплата - РасчетыПоСрокам.Долг
		|		КОНЕЦ                         КАК СуммаЗадолженности,
		|		ВЫБОР КОГДА ОбъектыРасчетов.СуммаВзаиморасчетов = 0
		|			ТОГДА ОбъектыРасчетов.Сумма
		|			ИНАЧЕ ОбъектыРасчетов.СуммаВзаиморасчетов
		|		КОНЕЦ                         КАК СуммаПервоначальныхВзаиморасчетов
		|	ИЗ
		|			РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокам
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|				ПО РасчетыПоСрокам.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|		ГДЕ
		|			ОбъектыРасчетов.Объект В (&МассивЗаказов)
		|			И РасчетыПоСрокам.АналитикаУчетаПоПартнерам.Организация = ОбъектыРасчетов.Организация
		|			И РасчетыПоСрокам.Активность
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВтСвязьЗаказовНакладных.ЗаказПоставщику                                              КАК Заказ,
		|		ВЫРАЗИТЬ((&ШаблонПоляОплачено) * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(31,2)) КАК СуммаОплат,
		|		ВЫРАЗИТЬ((&ШаблонПоляОплачено) * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(31,2)) КАК СуммаОплатПоЗаказу,
		|		ВЫРАЗИТЬ((&ШаблонПоляСписание) * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(31,2))   КАК СуммаСписаний,
		|		ВЫРАЗИТЬ((&ШаблонПоляПоставлено) * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(31,2)) КАК СуммаПоставок,
		|		ВЫРАЗИТЬ(ВЫБОР КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА РасчетыПоСрокам.Долг - РасчетыПоСрокам.Предоплата
		|			ИНАЧЕ РасчетыПоСрокам.Предоплата - РасчетыПоСрокам.Долг
		|		КОНЕЦ * ВтСвязьЗаказовНакладных.ДоляЗаказа КАК ЧИСЛО(31,2))                          КАК СуммаЗадолженности,
		|		ВтСвязьЗаказовНакладных.СуммаЗаказа                                                  КАК СуммаПервоначальныхВзаиморасчетов
		|	ИЗ
		|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокам
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтСвязьЗаказовНакладных КАК ВтСвязьЗаказовНакладных
		|			ПО РасчетыПоСрокам.ОбъектРасчетов = ВтСвязьЗаказовНакладных.ОбъектРасчетовНакладная 
		|	ГДЕ
		|		РасчетыПоСрокам.ОбъектРасчетов В (ВЫБРАТЬ
		|							Т.ОбъектРасчетовНакладная
		|						ИЗ
		|							ВтСвязьЗаказовНакладных КАК Т)
		|		И РасчетыПоСрокам.АналитикаУчетаПоПартнерам.Организация = РасчетыПоСрокам.ОбъектРасчетов.Организация
		|		И РасчетыПоСрокам.Активность
		|	) КАК Расчеты
		|СГРУППИРОВАТЬ ПО
		|	Расчеты.Заказ
		|ИНДЕКСИРОВАТЬ ПО
		|	Заказ
		|";
	
	ШаблонПоляСуммаКорректировок = "
		|ВЫБОР 
		|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.КорректировкаПриобретения)
		|		И НЕ РасчетыПоСрокам.Сторно
		|		ТОГДА 
		|			ВЫБОР
		|				КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА ВЫБОР КОГДА Предоплата - Долг > 0 
		|							ТОГДА Предоплата - Долг
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР КОГДА Долг - Предоплата > 0 
		|						ТОГДА Долг - Предоплата
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОНЕЦ
		|	ИНАЧЕ 0
		|КОНЕЦ
		|";
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ШаблонПоляОплачено",
		СтрШаблон(
			"%1 + %2 + %3",
			ВзаиморасчетыСервер.ШаблонПоляОплаченоПоставщику(),
			ВзаиморасчетыСервер.ШаблонПоляЗачтеноПоставщиком(),
			ШаблонПоляСуммаКорректировок)); 
	ШаблонПоляСуммаКорректировок = "
		|ВЫБОР 
		|	КОГДА ТИПЗНАЧЕНИЯ(РасчетыПоСрокам.ДокументРегистратор) = ТИП(Документ.КорректировкаПриобретения)
		|		И НЕ РасчетыПоСрокам.Сторно
		|		ТОГДА 
		|			ВЫБОР
		|				КОГДА РасчетыПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА Предоплата - Долг 
		|				ИНАЧЕ Долг - Предоплата
		|			КОНЕЦ
		|	ИНАЧЕ 0
		|КОНЕЦ
		|";
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
			"&ШаблонПоляПоставлено",
			СтрШаблон(
				"%1 + %2",
				ВзаиморасчетыСервер.ШаблонПоляПоставленоПоставщиком(),
				ШаблонПоляСуммаКорректировок));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ШаблонПоляСписание", ВзаиморасчетыСервер.ШаблонПоляСписаниеПереоценкаЗадолженности());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаРасчетыСПоставщиками(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбъектыРасчетов.Объект КАК ОтражаемыйДокумент
	|ИЗ
	|	РасчетыСПоставщикамиИзменения КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Ссылка = Таблица.ОбъектРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Заказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	РасчетыСПоставщиками.ЗакупкаПоЗаказу КАК ОтражаемыйДокумент
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ОбъектыРасчетов.Объект = РасчетыСПоставщиками.ЗакупкаПоЗаказу
	|		И НЕ ОбъектыРасчетов.ПометкаУдаления
	|ГДЕ
	|	(РасчетыСПоставщиками.АналитикаУчетаПоПартнерам, РасчетыСПоставщиками.ОбъектРасчетов)
	|	В (ВЫБРАТЬ Т.АналитикаУчетаПоПартнерам, Т.ОбъектРасчетов ИЗ РасчетыСПоставщикамиИзменения КАК Т)
	|	И РасчетыСПоставщиками.ЗакупкаПоЗаказу <> НЕОПРЕДЕЛЕНО
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаТоварыКПоступлению(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.ДокументПоступления КАК ОтражаемыйДокумент
	|ИЗ
	|	ТоварыКПоступлениюИзменение КАК Таблица
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Таблица.ДокументПоступления) В (ТИП(Документ.ЗаказПоставщику))
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

Функция ТекстЗапросаРеестрДокументов(Запрос)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК ОтражаемыйДокумент
	|ИЗ
	|	РеестрДокументовИзменения КАК Таблица
	|ГДЕ
	|	Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован)
	|";
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли