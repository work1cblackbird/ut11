#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанных

Функция ИнициализироватьСоставУпаковки() Экспорт
	
	СоставУпаковки = Новый ДеревоЗначений;
	СоставУпаковки.Колонки.Добавить("Упаковка",           Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	СоставУпаковки.Колонки.Добавить("ХешСуммаУпаковки",   ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СоставУпаковки.Колонки.Добавить("ЕдиницаИзмерения",   ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СоставУпаковки.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СоставУпаковки.Колонки.Добавить("Представление",      ОбщегоНазначения.ОписаниеТипаСтрока(255));
	СоставУпаковки.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СоставУпаковки.Колонки.Добавить("Коэффициент",        ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СоставУпаковки.Колонки.Добавить("Черновик",           Новый ОписаниеТипов("Булево"));
	
	Возврат СоставУпаковки;
	
КонецФункции

Функция ИнициализироватьСоставУпаковкиНоменклатуры()
	
	СоставУпаковки = Новый ДеревоЗначений;
	СоставУпаковки.Колонки.Добавить("Упаковка",           Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	СоставУпаковки.Колонки.Добавить("ЕдиницаИзмерения",   ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СоставУпаковки.Колонки.Добавить("Наименование",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
	СоставУпаковки.Колонки.Добавить("КоличествоУпаковок", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	СоставУпаковки.Колонки.Добавить("Коэффициент",        ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	Возврат СоставУпаковки;
	
КонецФункции

Процедура ЗаполнитьИсториюИспользованияСоставаУпаковки(ТаблицаТоваров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.GTIN
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.GTIN,
	|	История.ХешСуммаУпаковки,
	|	История.Черновик,
	|	История.СоставУпаковки
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП КАК История
	|		ПО ТаблицаТоваров.Номенклатура = История.Номенклатура
	|		И ТаблицаТоваров.Характеристика = История.Характеристика
	|		И ТаблицаТоваров.GTIN = История.GTIN
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТоваров.НомерСтроки,
	|	История.Черновик,
	|	История.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ФормироватьХэшСумму",      Ложь);
	ПараметрыЗаполнения.Вставить("ФормироватьПредставление", Ложь);
	
	Пока Выборка.Следующий() Цикл
		СтрокаТоваров = ТаблицаТоваров[Выборка.НомерСтроки - 1];
		Если СтрокаТоваров.СоставУпаковки.Колонки.Количество() = 0 Тогда
			СтрокаТоваров.СоставУпаковки = ИнициализироватьСоставУпаковки();
		КонецЕсли;
		ЗаполнитьСтрокиДереваСоставаУпаковки(СтрокаТоваров.СоставУпаковки,
			Выборка.СоставУпаковки.Получить(),
			ПараметрыЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоследнийИспользованныйСоставУпаковки(ТаблицаТоваров, ДополнятьУпаковкамиНоменклатуры = Истина) Экспорт
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.GTIN
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.GTIN,
	|	МАКСИМУМ(История.Дата) КАК Дата
	|ПОМЕСТИТЬ ТаблицаДат
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП КАК История
	|		ПО ТаблицаТоваров.Номенклатура = История.Номенклатура
	|		И ТаблицаТоваров.Характеристика = История.Характеристика
	|		И ТаблицаТоваров.GTIN = История.GTIN
	|		И НЕ История.Черновик
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.GTIN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДат.НомерСтроки,
	|	ТаблицаДат.Номенклатура,
	|	ТаблицаДат.Характеристика,
	|	ТаблицаДат.GTIN,
	|	История.СоставУпаковки
	|ИЗ
	|	ТаблицаДат КАК ТаблицаДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП КАК История
	|		ПО ТаблицаДат.Номенклатура = История.Номенклатура
	|		И ТаблицаДат.Характеристика = История.Характеристика
	|		И ТаблицаДат.GTIN = История.GTIN
	|		И ТаблицаДат.Дата = История.Дата
	|		И НЕ История.Черновик";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ФормироватьХэшСумму",      Ложь);
	ПараметрыЗаполнения.Вставить("ФормироватьПредставление", Ложь);
	
	Пока Выборка.Следующий() Цикл
		СтрокаТоваров = ТаблицаТоваров[Выборка.НомерСтроки - 1];
		Если СтрокаТоваров.СоставУпаковки.Колонки.Количество() = 0 Тогда
			СтрокаТоваров.СоставУпаковки = ИнициализироватьСоставУпаковки();
		КонецЕсли;
		ЗаполнитьСтрокиДереваСоставаУпаковки(СтрокаТоваров.СоставУпаковки,
			Выборка.СоставУпаковки.Получить(),
			ПараметрыЗаполнения);
	КонецЦикла;
	
	Если ДополнятьУпаковкамиНоменклатуры Тогда
		ДополнитьТаблицуУпаковкамиНоменклатуры(ТаблицаТоваров);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуУпаковкамиНоменклатуры(ТаблицаТоваров, ДополнятьТолькоНезаполненные = Истина) Экспорт
	
	НайденныеСтроки = Новый Массив;
	Номенклатура = Новый Массив;
	
	Для Каждого СтрокаТоваров Из ТаблицаТоваров Цикл
		Если ЗначениеЗаполнено(СтрокаТоваров.Номенклатура)
			И (Не ДополнятьТолькоНезаполненные
			 Или СтрокаТоваров.СоставУпаковки.Строки.Количество() = 0) Тогда
			НайденныеСтроки.Добавить(СтрокаТоваров);
			Если Номенклатура.Найти(СтрокаТоваров.Номенклатура) = Неопределено Тогда
				Номенклатура.Добавить(СтрокаТоваров.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Номенклатура.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеУпаковок = ПолучитьСоответствиеУпаковокНоменклатуры(Номенклатура);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ФормироватьХэшСумму",      Истина);
	ПараметрыЗаполнения.Вставить("ФормироватьПредставление", Истина);
	
	Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
		Если СоответствиеУпаковок[СтрокаТоваров.Номенклатура] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТоваров.СоставУпаковки.Колонки.Количество() = 0 Тогда
			СтрокаТоваров.СоставУпаковки = ИнициализироватьСоставУпаковки();
		КонецЕсли;
		ПараметрыЗаполнения.Вставить("СтрокаДляРасчетаХеша",
			ИнтеграцияИСКлиентСервер.СтрокаДляРасчетаХешаСоставаУпаковки(СтрокаТоваров));
		ЗаполнитьСтрокиДереваСоставаУпаковки(СтрокаТоваров.СоставУпаковки,
			СоответствиеУпаковок[СтрокаТоваров.Номенклатура],
			ПараметрыЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДереваСоставаУпаковки(Приемник, Источник,
	ПараметрыЗаполнения = Неопределено, Знач ДополнительныеПараметры = Неопределено)
	
	РодительКоличествоПредставление = "";
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("КоличествоПредставление") Тогда
		РодительКоличествоПредставление = ДополнительныеПараметры.КоличествоПредставление;
	КонецЕсли;
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		СтрокаПриемника = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		Если ПараметрыЗаполнения <> Неопределено Тогда
			Если ПараметрыЗаполнения.ФормироватьХэшСумму Тогда
				КоличествоПредставление = ИнтеграцияИСКлиентСервер.ПредставлениеКоличестваСоставаУпаковкиДляРасчетаХеша(
					СтрокаПриемника, РодительКоличествоПредставление);
				СтрокаПриемника.ХешСуммаУпаковки = ОбщегоНазначенияИС.ХэшСуммаСтроки(
					ПараметрыЗаполнения.СтрокаДляРасчетаХеша + КоличествоПредставление);
				ДополнительныеПараметры = Новый Структура("КоличествоПредставление", КоличествоПредставление);
			КонецЕсли;
			Если ПараметрыЗаполнения.ФормироватьПредставление Тогда
				СтрокаПриемника.Представление = ИнтеграцияИСКлиентСервер.ПредставлениеСоставаУпаковки(
					СтрокаПриемника, СтрокаПриемника.Родитель);
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьСтрокиДереваСоставаУпаковки(СтрокаПриемника, СтрокаИсточника, ПараметрыЗаполнения, ДополнительныеПараметры);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСоответствиеУпаковокНоменклатуры(Номенклатура)
	
	ТаблицаУпаковокНоменклатуры = ИнтеграцияИСМП.ИерархияУпаковокНоменклатуры(Номенклатура);
	
	СоответствиеУпаковок = Новый Соответствие;
	ТекущаяНоменклатура = Неопределено;
	Для Каждого СтрокаУпаковокНоменклатуры Из ТаблицаУпаковокНоменклатуры Цикл
		Если ТекущаяНоменклатура <> СтрокаУпаковокНоменклатуры.Номенклатура Тогда
			ТекущаяНоменклатура = СтрокаУпаковокНоменклатуры.Номенклатура;
			СоответствиеУпаковок.Вставить(ТекущаяНоменклатура, ИнициализироватьСоставУпаковкиНоменклатуры());
			СоответствиеСтрокУпаковок = Новый Соответствие;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаУпаковокНоменклатуры.РодительУпаковки) Тогда
			Если СтрокаУпаковокНоменклатуры.Коэффициент = 1 Тогда
				СтрокаСоставаУпаковки = СтрокаУпаковокНоменклатуры.РодительУпаковки;
			Иначе
				СтрокаСоставаУпаковки = СоответствиеУпаковок[ТекущаяНоменклатура].Строки.Добавить();
			КонецЕсли;
		Иначе
			Если СоответствиеСтрокУпаковок[СтрокаУпаковокНоменклатуры.РодительУпаковки] = Неопределено Тогда
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(СоответствиеСтрокУпаковок[СтрокаУпаковокНоменклатуры.РодительУпаковки]) Тогда
				СтрокаСоставаУпаковки = СоответствиеУпаковок[ТекущаяНоменклатура].Строки.Добавить();
				СтрокаУпаковокНоменклатуры.КоличествоУпаковок = 0;
			Иначе
				СтрокаСоставаУпаковки = СоответствиеСтрокУпаковок[СтрокаУпаковокНоменклатуры.РодительУпаковки].Строки.Добавить();
			КонецЕсли;
		КонецЕсли;
		СоответствиеСтрокУпаковок.Вставить(СтрокаУпаковокНоменклатуры.Упаковка, СтрокаСоставаУпаковки);
		Если ЗначениеЗаполнено(СтрокаСоставаУпаковки) Тогда
			ЗаполнитьЗначенияСвойств(СтрокаСоставаУпаковки, СтрокаУпаковокНоменклатуры);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеУпаковок;
	
КонецФункции

#КонецОбласти

#Область ИзменениеДанных

Функция ИнициализироватьТаблицуДляЗаписиИстории() Экспорт
	
	ТаблицаДляЗаписиИстории = Новый ТаблицаЗначений;
	ТаблицаДляЗаписиИстории.Колонки.Добавить("Номенклатура",     Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДляЗаписиИстории.Колонки.Добавить("Характеристика",   Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДляЗаписиИстории.Колонки.Добавить("GTIN",             Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаДляЗаписиИстории.Колонки.Добавить("ХешСуммаУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДляЗаписиИстории.Колонки.Добавить("Черновик",         Новый ОписаниеТипов("Булево"));
	ТаблицаДляЗаписиИстории.Колонки.Добавить("СоставУпаковки",   Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Возврат ТаблицаДляЗаписиИстории;
	
КонецФункции

Функция ИнициализироватьТаблицуДляУдаленияИстории(ВключатьХешСумму = Истина) Экспорт
	
	ТаблицаДляУдаленияИстории = Новый ТаблицаЗначений;
	ТаблицаДляУдаленияИстории.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаДляУдаленияИстории.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаДляУдаленияИстории.Колонки.Добавить("GTIN",           Метаданные.ОпределяемыеТипы.GTIN.Тип);
	Если ВключатьХешСумму Тогда
		ТаблицаДляУдаленияИстории.Колонки.Добавить("ХешСуммаУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КонецЕсли;
	
	Возврат ТаблицаДляУдаленияИстории;
	
КонецФункции

Процедура ЗаписатьДанныеВИсторию(ТаблицаДляЗаписиИстории) Экспорт
	
	Если ТаблицаДляЗаписиИстории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Номенклатура,
	|	ТаблицаДанных.Характеристика,
	|	ТаблицаДанных.GTIN,
	|	ТаблицаДанных.ХешСуммаУпаковки,
	|	ТаблицаДанных.Черновик
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	История.Номенклатура,
	|	История.Характеристика,
	|	История.GTIN,
	|	История.ХешСуммаУпаковки
	|ПОМЕСТИТЬ Черновики
	|ИЗ
	|	РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП КАК История
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДанных КАК ТаблицаДанных
	|		ПО История.Номенклатура = ТаблицаДанных.Номенклатура
	|		И История.Характеристика = ТаблицаДанных.Характеристика
	|		И История.GTIN = ТаблицаДанных.GTIN
	|		И История.Черновик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.Номенклатура,
	|	ТаблицаДанных.Характеристика,
	|	ТаблицаДанных.GTIN,
	|	ТаблицаДанных.ХешСуммаУпаковки
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП КАК История
	|		ПО ТаблицаДанных.Номенклатура = История.Номенклатура
	|		И ТаблицаДанных.Характеристика = История.Характеристика
	|		И ТаблицаДанных.GTIN = История.GTIN
	|		И ТаблицаДанных.ХешСуммаУпаковки = История.ХешСуммаУпаковки
	|		И ТаблицаДанных.Черновик
	|		И НЕ История.Черновик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Черновики.Номенклатура,
	|	Черновики.Характеристика,
	|	Черновики.GTIN,
	|	Черновики.ХешСуммаУпаковки
	|ИЗ
	|	Черновики КАК Черновики
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанных КАК ТаблицаДанных
	|		ПО Черновики.Номенклатура = ТаблицаДанных.Номенклатура
	|		И Черновики.Характеристика = ТаблицаДанных.Характеристика
	|		И Черновики.GTIN = ТаблицаДанных.GTIN
	|		И Черновики.ХешСуммаУпаковки = ТаблицаДанных.ХешСуммаУпаковки
	|ГДЕ
	|	ТаблицаДанных.Номенклатура ЕСТЬ NULL";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДляЗаписиИстории);
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаЗаписей = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаЗаписей.Добавить("РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаДляЗаписиИстории;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",   "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("GTIN",           "GTIN");
	
	ДатаЗаписи = ТекущаяДата();
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаЗаписей.Заблокировать();
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		ВГраница = РезультатЗапроса.ВГраница();
		ТаблицаИстории = РезультатЗапроса[ВГраница - 1].Выгрузить();
		ТаблицаЧерновиков = РезультатЗапроса[ВГраница].Выгрузить();
		
		ИскатьСтрокиВИстории = ТаблицаИстории.Количество() > 0;
		ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика,GTIN,ХешСуммаУпаковки");
		
		Для Каждого СтрокаТаблицы Из ТаблицаДляЗаписиИстории Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ХешСуммаУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаТаблицы.Черновик И ИскатьСтрокиВИстории Тогда
				ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаТаблицы);
				НайденныеСтроки = ТаблицаИстории.НайтиСтроки(ПараметрыПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Запись = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
			Запись.Дата = ДатаЗаписи;
			Запись.Записать();
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из ТаблицаЧерновиков Цикл
			
			Запись = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
			Запись.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьНовыеДанныеВИсторию(ТаблицаДляЗаписиИстории) Экспорт
	
	Если ТаблицаДляЗаписиИстории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаДляЗаписиИстории.Колонки.Найти("НомерСтроки") = Неопределено Тогда
		ТаблицаДляЗаписиИстории.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаДляЗаписиИстории Цикл
		Строка.НомерСтроки = ТаблицаДляЗаписиИстории.Индекс(Строка) + 1;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.НомерСтроки,
	|	ТаблицаДанных.Номенклатура,
	|	ТаблицаДанных.Характеристика,
	|	ТаблицаДанных.GTIN,
	|	ТаблицаДанных.ХешСуммаУпаковки
	|ПОМЕСТИТЬ ТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.НомерСтроки
	|ИЗ
	|	ТаблицаДанных КАК ТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП КАК История
	|		ПО ТаблицаДанных.Номенклатура = История.Номенклатура
	|		И ТаблицаДанных.Характеристика = История.Характеристика
	|		И ТаблицаДанных.GTIN = История.GTIN
	|		И ТаблицаДанных.ХешСуммаУпаковки = История.ХешСуммаУпаковки
	|ГДЕ
	|	История.Номенклатура ЕСТЬ NULL";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДляЗаписиИстории);
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БлокировкаЗаписей = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаЗаписей.Добавить("РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаДляЗаписиИстории;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",     "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика",   "Характеристика");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("GTIN",             "GTIN");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХешСуммаУпаковки", "ХешСуммаУпаковки");
	
	ДатаЗаписи = ТекущаяДата();
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаЗаписей.Заблокировать();
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицы = ТаблицаДляЗаписиИстории[Выборка.НомерСтроки - 1];
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ХешСуммаУпаковки) Тогда
				Продолжить;
			КонецЕсли;
			
			Запись = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаТаблицы);
			Запись.Дата = ДатаЗаписи;
			Запись.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьДанныеИзИстории(ТаблицаДляУдаленияИстории) Экспорт
	
	Если ТаблицаДляУдаленияИстории.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаПолейОтбора = Новый Массив;
	Для Каждого Колонка Из ТаблицаДляУдаленияИстории.Колонки Цикл
		ИменаПолейОтбора.Добавить(Колонка.Имя);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого СтрокаТаблицы Из ТаблицаДляУдаленияИстории Цикл
			
			Набор = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.СоздатьНаборЗаписей();
			Для Каждого ИмяПоляОтбора Из ИменаПолейОтбора Цикл
				Набор.Отбор[ИмяПоляОтбора].Установить(СтрокаТаблицы[ИмяПоляОтбора]);
			КонецЦикла;
			Набор.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли