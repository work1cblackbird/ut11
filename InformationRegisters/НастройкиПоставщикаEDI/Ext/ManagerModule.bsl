#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Получает настройку поставщика по организации из сервиса
// 
// Параметры:
// 	Организация - ОпределяемыйТип.ОрганизацияEDI - организация, по которой надо получить настройку.
// 	Контрагент  - ОпределяемыйТип.КонтрагентEDI - поставщик.
// 	Отказ       - Булево - признак неудачи при выполнении операции
// 	ТекстОшибки - Строка - текст ошибки, если она возникла.
// Возвращаемое значение:
// 	Неопределено, Структура - Описание:
// * ИндивидуальнаяНастройка - Булево - признак того что настройка индивидуальная для организации.
// * ЗначениеНастройки - ПеречислениеСсылка.РежимыРаботыСЗаказамиКлиентаEDI - значение настройки.
// * КонтрагентЗарегистрирован - Булево - признак того, что контрагент зарегистрирован в Бизнес-сети.
//
Функция НастройкаКонтрагентаИзСервиса(Знач Организация, Знач Контрагент, Отказ, ТекстОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Контрагенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	
	РезультатПоиска = БизнесСеть.ИдентификаторыКонтрагентов(Контрагенты);
	СведенияОбКонтрагентах = РезультатПоиска.Данные;

	Если РезультатПоиска.ЕстьОшибки Тогда
		Для Каждого Ошибка Из РезультатПоиска.Ошибки Цикл
			ОписаниеОшибки = Ошибка.Значение;
			Если ОписаниеОшибки.ТипОшибки = БизнесСеть.ТипОшибкиСервисНеДоступен() Тогда
				Отказ = Истина;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиКонтрагента = ДокументыEDIИнтеграция.НовыйНастройкиКонтрагента();
	
	Если Отказ Или Не ЗначениеЗаполнено(СведенияОбКонтрагентах.Количество()) Тогда
		Возврат НастройкиКонтрагента;
	КонецЕсли;
	
	НастройкиКонтрагента.КонтрагентЗарегистрирован = Истина;
	
	ПараметрыЗапросаСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияНастроекОбменаКонтрагентов();
	ПараметрыЗапросаСервис.Организация = Организация;
	ПараметрыЗапросаСервис.Контрагенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент);
	
	РезультатЗапроса = ИнтеграцияССервисомEDIСлужебный.НастройкиОбменаКонтрагентов(ПараметрыЗапросаСервис);
	
	Отказ = РезультатЗапроса.Ошибка;
	Если Отказ Тогда
		ТекстОшибки = РезультатЗапроса.ТекстОшибки;
		
		Возврат НастройкиКонтрагента;
	КонецЕсли;
	
	ПараметрыОбновления = ПараметрыОбновленияНастройкиКонтрагентов();
	ПараметрыОбновления.Организация                 = Организация;
	ПараметрыОбновления.ДатаНачалаОбновления        = ТекущаяДатаСеанса();
	ПараметрыОбновления.ТаблицаСДанными             = РезультатЗапроса.Данные.Список;
	
	РезультатОбновления = РезультатОбновленияНастроекКонтрагентов(ПараметрыОбновления);
	
	Отказ = Не РезультатОбновления.Успешно;
	Если Отказ Тогда
		ТекстОшибки = РезультатОбновления.ТекстОшибки;
		
		Возврат НастройкиКонтрагента;
	КонецЕсли;
	
	ПараметрыПриемаЗаказовПоставщикомОтПокупателя = ПараметрыПриемаЗаказовПоставщикомОтПокупателя();
	
	Для каждого СтрокаНастройки Из РезультатЗапроса.Данные.Список Цикл
		
		Если ЗначениеЗаполнено(СтрокаНастройки.Покупатель) Тогда
			
			ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовПоПокупателю = СтрокаНастройки.РежимРаботыСЗаказами;
			
		Иначе
			
			ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовОбщий        = СтрокаНастройки.РежимРаботыСЗаказами;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовПоПокупателю = Неопределено Тогда
		НастройкиКонтрагента.ЗначениеНастройки = ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовПоПокупателю;
		НастройкиКонтрагента.ИндивидуальнаяНастройка = Истина;
	ИначеЕсли Не ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовОбщий = Неопределено Тогда
		НастройкиКонтрагента.ЗначениеНастройки = ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовОбщий;
		НастройкиКонтрагента.ИндивидуальнаяНастройка = Ложь;
	КонецЕсли;
	
	Возврат НастройкиКонтрагента;
	
КонецФункции


// Получает настройку поставщика по организации локально.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.ОрганизацияEDI - организация, по которой надо получить настройку.
// 	Контрагент  - ОпределяемыйТип.КонтрагентEDI - поставщик.
// 	ДанныеПолучены - Булево - признак успешно получения данных.
// Возвращаемое значение:
// 	Структура - Описание:
// * ИндивидуальнаяНастройка - Булево - признак того что настройка индивидуальная для организации.
// * ЗначениеНастройки - ПеречислениеСсылка.РежимыРаботыСЗаказамиКлиентаEDI - значение настройки.
// * КонтрагентЗарегистрирован - Булево - признак того, что контрагент зарегистрирован в Бизнес-сети.
//
Функция НастройкаКонтрагентаЛокально(Организация, Контрагент, ДанныеПолучены = Ложь) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СведенияОбОрганизации = СведенияОбОрганизации(Контрагент);
	
	ДанныеПолучены       = Ложь;
	НастройкиКонтрагента = ДокументыEDIИнтеграция.НовыйНастройкиКонтрагента();

	Если Не СведенияОбОрганизации.ДанныеНайдены Тогда
		Возврат НастройкиКонтрагента;
	КонецЕсли;
	
	НастройкиКонтрагента.КонтрагентЗарегистрирован = СведенияОбОрганизации.КонтрагентЗарегистрированВСервисе;
	
	Если Не НастройкиКонтрагента.КонтрагентЗарегистрирован Тогда
		Возврат НастройкиКонтрагента;
	КонецЕсли;
	
	ПараметрыПриемаЗаказовПоставщикомОтПокупателя = НастройкиПриемаЗаказовПоставщикомОтПокупателя(Контрагент, 
		Организация);
	Если ПараметрыПриемаЗаказовПоставщикомОтПокупателя = Неопределено Тогда
		НастройкиКонтрагента.ЗначениеНастройки = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
		НастройкиКонтрагента.ИндивидуальнаяНастройка = Ложь;
		
		Возврат НастройкиКонтрагента;
	КонецЕсли;
	
	ДанныеПолучены = Истина;
	
	Если Не ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовПоПокупателю = Неопределено Тогда
		НастройкиКонтрагента.ЗначениеНастройки = ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовПоПокупателю;
		НастройкиКонтрагента.ИндивидуальнаяНастройка = Истина;
	ИначеЕсли Не ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовОбщий = Неопределено Тогда
		НастройкиКонтрагента.ЗначениеНастройки = ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовОбщий;
		НастройкиКонтрагента.ИндивидуальнаяНастройка = Ложь;
	Иначе
		НастройкиКонтрагента.ЗначениеНастройки = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
		НастройкиКонтрагента.ИндивидуальнаяНастройка = Ложь;
	КонецЕсли;
	
	Возврат НастройкиКонтрагента;
	
КонецФункции

// Получает локальные настройки оформления заказов покупателями для организации
// 
// Параметры:
// 	Поставщик - ОпределяемыйТип.ОрганизацияEDI - организация, для которой получаются настройки.
// Возвращаемое значение:
// 	Структура - полученные настройки/
//
Функция НастройкиОформленияЗаказовПокупателями(Поставщик = Неопределено) Экспорт
	
	НастройкиОформления = ПараметрыОформленияЗаказовКлиентов();

	Запрос = Новый Запрос;
	
	ДокументыEDIИнтеграция.СФормироватьТекстЗапросУстановитьПараметрыПоНастройкамПоставщикаEDI(Запрос, Поставщик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользуютсяПроцессыEDI                             = Ложь;
	ЕстьПокупателиБелыйСписок                           = Ложь;
	ЕстьПокупателиЧерныйСписок                          = Ложь;
	ЕстьПокупателиВТерминахПокупателя                   = Ложь;
	ЕстьОбщееРазрешениеПриемаЗаказов                    = Ложь;
	ЕстьОбщийЗапретПриемаЗаказов                        = Ложь;
	ЕстьОбщееРазрешениеПриемаЗаказовВТерминахПокупателя = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Покупатель) Тогда
			
			Если Выборка.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ИспользуетсяСтарыйЭДО Тогда
				ИспользуютсяПроцессыEDI = Ложь;
			ИначеЕсли Выборка.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы Тогда
				ЕстьОбщийЗапретПриемаЗаказов = Истина;
				ИспользуютсяПроцессыEDI      = Истина;
			ИначеЕсли Выборка.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика Тогда
				ЕстьОбщееРазрешениеПриемаЗаказов = Истина;
				ИспользуютсяПроцессыEDI          = Истина;
			ИначеЕсли Выборка.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя Тогда
				ЕстьОбщееРазрешениеПриемаЗаказовВТерминахПокупателя = Истина;
				ИспользуютсяПроцессыEDI                             = Истина;
			КонецЕсли;
			
		Иначе
			
			ИспользуютсяПроцессыEDI      = Истина;
			
			Если Выборка.РежимРаботыСЗаказамиКлиентов      = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы Тогда
				НастройкиОформления.ПокупателиЗаказКлиентаЧерныйСписок.Добавить(Выборка.Покупатель);
				ЕстьПокупателиЧерныйСписок = Истина;
			ИначеЕсли Выборка.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика Тогда
				НастройкиОформления.ПокупателиЗаказКлиентаБелыйСписок.Добавить(Выборка.Покупатель);
				ЕстьПокупателиБелыйСписок = Истина;
			ИначеЕсли Выборка.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя Тогда
				НастройкиОформления.ПокупателиЗаказВТерминахПокупателяБелыйСписок.Добавить(Выборка.Покупатель);
				ЕстьПокупателиВТерминахПокупателя = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиОформления.ИспользуютсяПроцессыEDI = ИспользуютсяПроцессыEDI;
	
	Если ЕстьОбщееРазрешениеПриемаЗаказов Тогда
		
		НастройкиОформления.ПринимаюЗаказыОтПокупателей = Истина;
		
		Если ЕстьПокупателиБелыйСписок Тогда
			НастройкиОформления.ВариантОграниченияПриемаЗаказовОтПокупателей = Перечисления.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок;
		Иначе
			НастройкиОформления.ВариантОграниченияПриемаЗаказовОтПокупателей = Перечисления.ВариантыОграниченийСпискаКонтрагентовEDI.ЧерныйСписок;
		КонецЕсли;
		
		Если ЕстьПокупателиВТерминахПокупателя Тогда
			НастройкиОформления.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя               = Истина;
			НастройкиОформления.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными = Истина;
		КонецЕсли;
		
	ИначеЕсли ЕстьОбщееРазрешениеПриемаЗаказовВТерминахПокупателя Тогда
		
		НастройкиОформления.ПринимаюЗаказыОтПокупателей = Истина;
		
		НастройкиОформления.ВариантОграниченияПриемаЗаказовОтПокупателей            = Перечисления.ВариантыОграниченийСпискаКонтрагентовEDI.ЧерныйСписок;
		НастройкиОформления.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя = Истина;
		
	ИначеЕсли ЕстьОбщийЗапретПриемаЗаказов Тогда
		
		НастройкиОформления.ВариантОграниченияПриемаЗаказовОтПокупателей = Перечисления.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок;
		
		Если ЕстьПокупателиБелыйСписок
			Или ЕстьПокупателиВТерминахПокупателя Тогда
			
			НастройкиОформления.ПринимаюЗаказыОтПокупателей = Истина;
			
			Если ЕстьПокупателиВТерминахПокупателя Тогда
				
				НастройкиОформления.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя = Истина;
				
				Если ЕстьПокупателиБелыйСписок Тогда
					
					НастройкиОформления.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиОформления.ВариантОграниченияПриемаЗаказовОтПокупателей = Перечисления.ВариантыОграниченийСпискаКонтрагентовEDI.БелыйСписок Тогда
		
		Для Каждого Покупатель Из НастройкиОформления.ПокупателиЗаказВТерминахПокупателяБелыйСписок Цикл
			
			НастройкиОформления.ПокупателиЗаказКлиентаБелыйСписок.Добавить(Покупатель);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НастройкиОформления;
	
КонецФункции

// Конструктор параметров оформления заказов покупателями.
// 
// Возвращаемое значение:
// 	Структура - незаполненные параметры оформления заказов покупателями.
//
Функция ПараметрыОформленияЗаказовКлиентов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Поставщик",                                                             Неопределено);
	Параметры.Вставить("ПринимаюЗаказыОтПокупателей",                                           Ложь);
	Параметры.Вставить("ИспользуютсяПроцессыEDI",                                               Ложь);
	Параметры.Вставить("ВариантОграниченияПриемаЗаказовОтПокупателей",                          Неопределено);
	Параметры.Вставить("РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя",               Ложь);
	Параметры.Вставить("ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными", Ложь);
	Параметры.Вставить("ПокупателиЗаказКлиентаБелыйСписок",                                     Новый Массив);
	Параметры.Вставить("ПокупателиЗаказКлиентаЧерныйСписок",                                    Новый Массив);
	Параметры.Вставить("ПокупателиЗаказВТерминахПокупателяБелыйСписок",                         Новый Массив);
	Параметры.Вставить("СохранятьВСервисе",                                                     Ложь);
	Параметры.Вставить("СохранениеВСервисеВыполняется",                                         Ложь);
	Параметры.Вставить("РезультатСохраненияВСервисе",                                           Неопределено);
	Параметры.Вставить("ТекстОшибкиСохраненияВСервисе",                                         "");
	
	Возврат Параметры;
	
КонецФункции

// Конструктор параметров приема заказов поставщиком.
// 
// Возвращаемое значение:
// 	Структура - незаполненные параметры приема заказов поставщиком.
//
Функция ПараметрыПриемаЗаказовПоставщикомОтПокупателя() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("РежимПриемаЗаказовОбщий",        Неопределено);
	Параметры.Вставить("РежимПриемаЗаказовПоПокупателю", Неопределено);
	
	Возврат Параметры;

КонецФункции

// Получает настройки приема поставщиком.
// 
// Параметры:
// 	Поставщик  - ОпределяемыйТип.КонтрагентEDI - поставщик.
// 	Покупатель - ОпределяемыйТип.ОрганизацияEDI - организация, по которой надо получить настройку.
// 
// Возвращаемое значение:
// 	Структура - незаполненные параметры приема заказов поставщиком.
//
Функция НастройкиПриемаЗаказовПоставщикомОтПокупателя(Поставщик, Покупатель) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НастройкиПоставщикаEDI.РежимРаботыСЗаказамиКлиентов КАК РежимРаботыСЗаказамиКлиентов,
	|	""ПоПокупателю""                                    КАК ВариантРежима
	|ИЗ
	|	РегистрСведений.НастройкиПоставщикаEDI КАК НастройкиПоставщикаEDI
	|ГДЕ
	|	НастройкиПоставщикаEDI.Поставщик    = &Поставщик
	|	И НастройкиПоставщикаEDI.Покупатель = &Покупатель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиПоставщикаEDI.РежимРаботыСЗаказамиКлиентов,
	|	""ПоПоставщику""
	|ИЗ
	|	РегистрСведений.НастройкиПоставщикаEDI КАК НастройкиПоставщикаEDI
	|ГДЕ
	|	НастройкиПоставщикаEDI.Поставщик    = &Поставщик
	|	И НастройкиПоставщикаEDI.Покупатель В (&ПустыеЗначенияПокупатели)";
	
	Запрос.УстановитьПараметр("Поставщик",                Поставщик);
	Запрос.УстановитьПараметр("Покупатель",               Покупатель);
	Запрос.УстановитьПараметр("ПустыеЗначенияПокупатели", ДокументыEDI.МассивПустыхЗначенийПоОписаниюТипа(ТипыИзмерения("Покупатель")));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаРежимПриемаЗаказов = РезультатЗапроса.Выбрать();
	ПараметрыПриемаЗаказовПоставщикомОтПокупателя = ПараметрыПриемаЗаказовПоставщикомОтПокупателя();
	
	Пока ВыборкаРежимПриемаЗаказов.Следующий() Цикл
		
		Если ВыборкаРежимПриемаЗаказов.ВариантРежима = "ПоПокупателю" Тогда
			
			ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовПоПокупателю = ВыборкаРежимПриемаЗаказов.РежимРаботыСЗаказамиКлиентов;
			
		ИначеЕсли ВыборкаРежимПриемаЗаказов.ВариантРежима = "ПоПоставщику" Тогда
			
			ПараметрыПриемаЗаказовПоставщикомОтПокупателя.РежимПриемаЗаказовОбщий        = ВыборкаРежимПриемаЗаказов.РежимРаботыСЗаказамиКлиентов;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыПриемаЗаказовПоставщикомОтПокупателя;
	
КонецФункции

// Получает режим приема заказов поставщиком от покупателя из параметров.
// 
// Параметры:
// 	ПараметрыПриемаЗаказов - Структура - параметры приема заказов.
//  
//  Возвращаемое значение:
// 	Неопределено, ПеречислениеСсылка.РежимыРаботыСЗаказамиКлиентаEDI - режим приема с заказами.
//
Функция РежимПриемаЗаказовПоставщикомОтПокупателя(ПараметрыПриемаЗаказов) Экспорт
	
	Если ПараметрыПриемаЗаказов.РежимПриемаЗаказовОбщий = Неопределено Тогда
		
		Возврат Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
		
	ИначеЕсли ПараметрыПриемаЗаказов.РежимПриемаЗаказовОбщий = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыПриемаЗаказов.РежимПриемаЗаказовПоПокупателю) Тогда
			Возврат Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
		Иначе
			Возврат ПараметрыПриемаЗаказов.РежимПриемаЗаказовПоПокупателю;
		КонецЕсли;
		
	ИначеЕсли ПараметрыПриемаЗаказов.РежимПриемаЗаказовОбщий = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика
		Или ПараметрыПриемаЗаказов.РежимПриемаЗаказовОбщий = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя Тогда
		
		Если Не ЗначениеЗаполнено(ПараметрыПриемаЗаказов.РежимПриемаЗаказовПоПокупателю) Тогда
			Возврат ПараметрыПриемаЗаказов.РежимПриемаЗаказовОбщий;
		Иначе
			Возврат ПараметрыПриемаЗаказов.РежимПриемаЗаказовПоПокупателю;
		КонецЕсли;

	КонецЕсли;
	
	Возврат Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
	
КонецФункции

// Получает типа измерения регистра
// 
// Параметры:
// 	ИмяИзмерения - Строка - имя измерения.
// Возвращаемое значение:
// 	Массив - массив типов измерения.
//
Функция ТипыИзмерения(ИмяИзмерения) Экспорт
	
	Возврат Метаданные.РегистрыСведений.НастройкиПоставщикаEDI.Измерения.Найти(ИмяИзмерения).Тип.Типы();
	
КонецФункции

// Сохраняет настройки оформления заказов покупателями по организации локально, а по требованию и в сервисе.
// 
// Параметры:
// 	ПараметрыОформления - Структура - параметры оформления.
//
Процедура СохранитьНастройкиОформленияЗаказовПокупателями(ПараметрыОформления) Экспорт
	
	ОрганизацияАбонента = ПараметрыОформления.Поставщик;
	
	Если ОрганизацияАбонента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указана организация абонента сервиса 1С: EDI.'");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиПоставщикаEDI.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(ОрганизацияАбонента);
	
	Если Не ПараметрыОформления.ИспользуютсяПроцессыEDI Тогда
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Поставщик = ОрганизацияАбонента;
		НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
	
	ИначеЕсли ПараметрыОформления.ПринимаюЗаказыОтПокупателей Тогда
		
		Если ПараметрыОформления.ВариантОграниченияПриемаЗаказовОтПокупателей = Перечисления.ВариантыОграниченийСпискаКонтрагентовEDI.ЧерныйСписок Тогда
			
			Если ПараметрыОформления.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя Тогда
				
				Если ПараметрыОформления.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными Тогда
					
					Если ПараметрыОформления.ПокупателиЗаказВТерминахПокупателяБелыйСписок.Количество() > 0 Тогда
					
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Поставщик = ОрганизацияАбонента;
						НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика;
						
						Для Каждого Покупатель Из ПараметрыОформления.ПокупателиЗаказВТерминахПокупателяБелыйСписок Цикл
							
							НоваяЗапись = НаборЗаписей.Добавить();
							НоваяЗапись.Поставщик = ОрганизацияАбонента;
							НоваяЗапись.Покупатель = Покупатель;
							НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя;
							
						КонецЦикла;
						
					Иначе
						
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Поставщик = ОрганизацияАбонента;
						НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя;
						
					КонецЕсли;
					
				Иначе
					
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Поставщик = ОрганизацияАбонента;
					НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя;
					
				КонецЕсли;
				
			Иначе
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Поставщик = ОрганизацияАбонента;
				НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика;
				
			КонецЕсли;
			
			Для Каждого Покупатель Из ПараметрыОформления.ПокупателиЗаказКлиентаЧерныйСписок Цикл
				
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Поставщик = ОрганизацияАбонента;
				НоваяЗапись.Покупатель = Покупатель;
				НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
				
			КонецЦикла;
			
		Иначе
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Поставщик = ОрганизацияАбонента;
			НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
			
			Если ПараметрыОформления.РазрешитьПриниматьЗаказыВТерминахНоменклатурыПокупателя Тогда
				
				Если ПараметрыОформления.ОграничиватьКонтрагентовОформляющихЗаказВТерминахПокупателяВыбранными Тогда
					
					Для Каждого Покупатель Из ПараметрыОформления.ПокупателиЗаказВТерминахПокупателяБелыйСписок Цикл
						
						ИндексЭлемента = ПараметрыОформления.ПокупателиЗаказКлиентаБелыйСписок.Найти(Покупатель);
						Если ИндексЭлемента <> Неопределено Тогда
							
							НоваяЗапись = НаборЗаписей.Добавить();
							НоваяЗапись.Поставщик = ОрганизацияАбонента;
							НоваяЗапись.Покупатель = Покупатель;
							НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя;
							
							ПараметрыОформления.ПокупателиЗаказКлиентаБелыйСписок.Удалить(ИндексЭлемента)
							
						КонецЕсли;
						
					КонецЦикла;
					
					Для Каждого Покупатель Из ПараметрыОформления.ПокупателиЗаказКлиентаБелыйСписок Цикл
				
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Поставщик = ОрганизацияАбонента;
						НоваяЗапись.Покупатель = Покупатель;
						НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика;
				
					КонецЦикла;
					
				Иначе
					
					Для Каждого Покупатель Из ПараметрыОформления.ПокупателиЗаказКлиентаБелыйСписок Цикл
				
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Поставщик = ОрганизацияАбонента;
						НоваяЗапись.Покупатель = Покупатель;
						НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщикаИПокупателя;
				
					КонецЦикла;
					
				КонецЕсли;
				
			Иначе
				
				Для Каждого Покупатель Из ПараметрыОформления.ПокупателиЗаказКлиентаБелыйСписок Цикл
				
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Поставщик = ОрганизацияАбонента;
					НоваяЗапись.Покупатель = Покупатель;
					НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПриниматьВТерминахПоставщика;
				
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Поставщик = ОрганизацияАбонента;
		НоваяЗапись.РежимРаботыСЗаказамиКлиентов = Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.НеПриниматьЗаказы;
		
	КонецЕсли;
	
	ВозможнаЗапись = Истина;
	
	Если ПараметрыОформления.СохранятьВСервисе Тогда
		
		ПараметрыОбновленияСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыОбновленияНастройкиОбменаОрганизации();
		ПараметрыОбновленияСервис.Организация = ОрганизацияАбонента;
		
		Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
			
			НоваяСтрока = ПараметрыОбновленияСервис.Настройки.Добавить();
			НоваяСтрока.Покупатель           = ЗаписьНабора.Покупатель;
			НоваяСтрока.РежимРаботыСЗаказами = ЗаписьНабора.РежимРаботыСЗаказамиКлиентов;
			
		КонецЦикла;
		
		РезультатОбновления = ИнтеграцияССервисомEDIСлужебный.РезультатОбновленияНастроекОбменаОрганизации(ПараметрыОбновленияСервис);
		
		Если РезультатОбновления.ОжидатьОтветаСервиса Тогда
			ПараметрыОформления.СохранениеВСервисеВыполняется = Истина;
			ПараметрыОформления.РезультатСохраненияВСервисе   = РезультатОбновления.ИдентификаторЗаданияСервиса;
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				ЗаписьНабора.ИдентификаторОбновленияВСервисе = РезультатОбновления.ИдентификаторЗаданияСервиса;
			КонецЦикла;
			
		Иначе
			
			Если РезультатОбновления.Ошибка Тогда
				ПараметрыОформления.ТекстОшибкиСохраненияВСервисе = РезультатОбновления.ТекстОшибки;
				ПараметрыОформления.РезультатСохраненияВСервисе   = Ложь;
				ВозможнаЗапись                                    = Ложь;
			Иначе
				ПараметрыОформления.РезультатСохраненияВСервисе = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВозможнаЗапись Тогда
	
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Конструктор параметров записи в регистр.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Покупатель - ОпределяемыйТип.ОрганизацияEDI, ОпределяемыйТип.КонтрагентEDI - покупатель.
// * Поставщик - ОпределяемыйТип.ОрганизацияEDI, ОпределяемыйТип.КонтрагентEDI - поставщик.
// * РежимРаботыСЗаказамиКлиентов - ПеречислениеСсылка.РежимыРаботыСЗаказамиКлиентаEDI - вариант приема заказов.
//
Функция ПараметрыЗаписиВРегистр() Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимРаботыСЗаказамиКлиентов" , Перечисления.РежимыРаботыСЗаказамиКлиентаEDI.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("Поставщик",                     Неопределено);
	ПараметрыЗаписи.Вставить("Покупатель",                    Неопределено);
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Выполняет запись регистр
// 
// Параметры:
// 	ПараметрыЗаписи - Структура - см.ПараметрыЗаписиВРегистр.
//
Процедура ВыполнитьЗаписьВРегистр(ПараметрыЗаписи) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиПоставщикаEDI.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(ПараметрыЗаписи.Поставщик);
	НаборЗаписей.Отбор.Покупатель.Установить(ПараметрыЗаписи.Покупатель);
	Запись = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗаписи);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет настройки по поставщику из регистра.
// 
// Параметры:
// Организация - ОпределяемыйТип.ОрганизацияEDI, ОпределяемыйТип.КонтрагентEDI - поставщик, чьи настройки удаляются.
//
Процедура УдалитьНастройкиОрганизации(Организация) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиПоставщикаEDI.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Поставщик.Установить(Организация);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет обновление настроек по переданным организациям из сервиса и сохраняет данные о выполненном обновлении.
// 
// Параметры:
// 	Организации - Массив - организации, по которым требуется обновить настройки.
// Возвращаемое значение:
// 	Структура - Описание:
// * КоличествоЗаписей - Число - количество обновленных записей.
// * Ошибки - Массив - сообщения об ошибках, если они были.
//
Функция РезультатОбновленияНастроекОрганизацийИзСервиса(Организации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки",             Новый Массив);
	Результат.Вставить("КоличествоЗаписей",  0);
	
	Для Каждого Организация Из Организации Цикл
		
		РезультатОбновления = РезультатОбновленияНастроекОрганизацииИзСервиса(Организация);
		
		Результат.КоличествоЗаписей = Результат.КоличествоЗаписей + РезультатОбновления.КоличествоЗаписей;
		
		Если Не РезультатОбновления.Успешно Тогда
			Результат.Ошибки.Добавить();
			РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатСнятияБлокировкиОбновляемыхДанных(Организация, Перечисления.ВидыОбновляемыхДанныхEDI.НастройкиОрганизации);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновление настроек по переданным организациям из сервиса.
// 
// Параметры:
// 	Организации - Массив - организации, по которым требуется обновить настройки.
// Возвращаемое значение:
// 	Структура - Описание:
// * КоличествоЗаписей - Число - количество обновленных записей.
// * Ошибки - Массив - сообщения об ошибках, если они были.
//
Функция РезультатОбновленияНастроекКонтрагентовПоОрганизациямИзСервиса(Организации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки",             Новый Массив);
	Результат.Вставить("КоличествоЗаписей",  0);
	
	Для Каждого Организация Из Организации Цикл
		
		РезультатОбновления = РезультатОбновленияНастроекКонтрагентовПоОрганизации(Организация);
		
		Результат.КоличествоЗаписей = Результат.КоличествоЗаписей + РезультатОбновления.КоличествоЗаписей;
		
		Если Не РезультатОбновления.Успешно Тогда
			Результат.Ошибки.Добавить();
			РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатСнятияБлокировкиОбновляемыхДанных(Организация, Перечисления.ВидыОбновляемыхДанныхEDI.НастройкиПоставщиков);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область НастройкиОрганизации

Функция РезультатОбновленияНастроекМассиваОрганизаций(МассивОрганизаций) Экспорт
	
	Результат = Новый Соответствие;
	
	Для Каждого Организация Из МассивОрганизаций Цикл
		
		Результат.Вставить(Организация, РезультатОбновленияНастроекОрганизацииИзСервиса(Организация));
		РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатСнятияБлокировкиОбновляемыхДанных(Организация, Перечисления.ВидыОбновляемыхДанныхEDI.НастройкиОрганизации);
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОбновленияНастроекОрганизацииИзСервиса(Организация) Экспорт
	
	Результат = НовыйРезультатОбновления();
	
	НачалоОбновления = ТекущаяДатаСеанса();
	
	ВидОбновляемыхДанных = Перечисления.ВидыОбновляемыхДанныхEDI.НастройкиОрганизации; 
	
	РезультатПодготовкиОбновленияДанных = РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатПодготовкиОбновленияДанных(Организация, ВидОбновляемыхДанных);
	
	Если Не РезультатПодготовкиОбновленияДанных.ОбновлениеВозможно Тогда
		Результат.Успешно = Истина;
		Возврат Результат;
	КонецЕсли;

	ПараметрыЗапросаСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияНастроекОбменаОрганизации();
	ПараметрыЗапросаСервис.Организация = Организация;
	
	ТребуетсяВыполнениеЗапроса = Истина;
	ТаблицаДанных              = Неопределено;
	
	Пока ТребуетсяВыполнениеЗапроса Цикл
		
		РезультатЗапроса = ИнтеграцияССервисомEDIСлужебный.НастройкиОбменаОрганизации(ПараметрыЗапросаСервис);
		
		Если РезультатЗапроса.Ошибка Тогда
			
			ТребуетсяВыполнениеЗапроса = Ложь;
			Результат.Успешно          = Ложь;
			Результат.ТекстОшибки      = РезультатЗапроса.ТекстОшибки;
			Возврат Результат;
			
		Иначе
			
			ТаблицаСДанными = РезультатЗапроса.Данные.Список;
			ДанныеПагинации = РезультатЗапроса.Данные.Страницы;
			
			Если ТаблицаДанных = Неопределено Тогда
				ТаблицаДанных = РезультатЗапроса.Данные.Список;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Данные.Список, ТаблицаДанных);
			КонецЕсли;
			
			Если ТаблицаСДанными.Количество() > 0 Тогда
				
				ПараметрыЗапросаСервис.ПоложениеКурсора = ДанныеПагинации.СледующаяСтраница;
				ТребуетсяВыполнениеЗапроса              = ЗначениеЗаполнено(ПараметрыЗапросаСервис.ПоложениеКурсора);
				
			Иначе
				
				ТребуетсяВыполнениеЗапроса = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ТаблицаДанных = Неопределено Тогда
			
			УдалитьНастройкиОрганизации(Организация);
			
		Иначе
			
			НаборЗаписей = РегистрыСведений.НастройкиПоставщикаEDI.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Поставщик.Установить(Организация);
			
			Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
				
				СтрокаНабора = НаборЗаписей.Добавить();
				СтрокаНабора.Поставщик                    = Организация;
				СтрокаНабора.Покупатель                   = СтрокаТаблицы.Покупатель;
				СтрокаНабора.РежимРаботыСЗаказамиКлиентов = СтрокаТаблицы.РежимРаботыСЗаказами;
				
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
			ПараметрыЗаписи = РегистрыСведений.СостоянияОбновленияДанныхEDI.ПараметрыЗаписиВРегистр();
			ПараметрыЗаписи.Организация                 = Организация;
			ПараметрыЗаписи.ВидОбновляемыхДанных        = ВидОбновляемыхДанных;
			ПараметрыЗаписи.ДатаБлокировкиДляОбновления = Дата(1, 1, 1);
			ПараметрыЗаписи.ДатаОбновления              = НачалоОбновления;
			
			РегистрыСведений.СостоянияОбновленияДанныхEDI.ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат Результат;
	
	КонецПопытки;
	
	Результат.КоличествоЗаписей = ТаблицаДанных.Количество();
	Результат.Успешно     = Истина;
	
	РезультатПолученияПрефикса = РегистрыСведений.НастройкиИнтеграцииEDI.РезультатПолученияИСохраненияНастроекОрганизацииВСервисе(Организация);
	
	Если Не РезультатПолученияПрефикса.Успешно Тогда
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = РезультатПолученияПрефикса.ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НастройкиКонтрагентовПоОрганизации

Функция РезультатОбновленияНастроекКонтрагентовПоОрганизации(Организация)
	
	Результат = НовыйРезультатОбновления();
	
	НачалоОбновления = ТекущаяДатаСеанса();
	
	ВидОбновляемыхДанных = Перечисления.ВидыОбновляемыхДанныхEDI.НастройкиПоставщиков; 
	
	РезультатПодготовкиОбновленияДанных = РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатПодготовкиОбновленияДанных(Организация, ВидОбновляемыхДанных);
	
	Если Не РезультатПодготовкиОбновленияДанных.ОбновлениеВозможно Тогда
		Результат.Успешно = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОбновления = ПараметрыОбновленияНастройкиКонтрагентов();
	ПараметрыОбновления.Организация                 = Организация;
	ПараметрыОбновления.ДатаНачалаОбновления        = НачалоОбновления;
	ПараметрыОбновления.ДатаБлокировкиДляОбновления = НачалоОбновления;
	
	ПараметрыЗапросаСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияНастроекОбменаКонтрагентов();
	ПараметрыЗапросаСервис.Организация   = Организация;
	ПараметрыЗапросаСервис.Контрагенты   = РегистрыСведений.КонтрагентыБизнесСеть.КонтрагентыEDIПоОрганизации();
	ПараметрыЗапросаСервис.ДатаИзменения = РезультатПодготовкиОбновленияДанных.ДатаОбновления;
	
	ТребуетсяВыполнениеЗапроса = Истина;
	
	Пока ТребуетсяВыполнениеЗапроса Цикл
		
		РезультатЗапроса = ИнтеграцияССервисомEDIСлужебный.НастройкиОбменаКонтрагентов(ПараметрыЗапросаСервис);
		
		Если РезультатЗапроса.Ошибка Тогда
			
			ТребуетсяВыполнениеЗапроса = Ложь;
			Результат.Успешно          = Ложь;
			Результат.ТекстОшибки      = РезультатЗапроса.ТекстОшибки;
			Возврат Результат;
			
		Иначе
			
			ПараметрыОбновления.ТаблицаСДанными = РезультатЗапроса.Данные.Список;
			ДанныеПагинации                     = РезультатЗапроса.Данные.Страницы;
			
			Если ПараметрыОбновления.ТаблицаСДанными.Количество() > 0 Тогда
				
				ПараметрыОбновления.ЭтоПоследняяСтраница = Не ЗначениеЗаполнено(ПараметрыЗапросаСервис.ПоложениеКурсора);
				
				РезультатОбновления = РезультатОбновленияНастроекКонтрагентов(ПараметрыОбновления);
				
				Если РезультатОбновления.Успешно Тогда
					
					Результат.Успешно                       = Истина;
					ПараметрыЗапросаСервис.ПоложениеКурсора = ДанныеПагинации.СледующаяСтраница;
					ТребуетсяВыполнениеЗапроса              = Не ПараметрыОбновления.ЭтоПоследняяСтраница;
					Результат.КоличествоЗаписей             = Результат.КоличествоЗаписей + РезультатОбновления.КоличествоЗаписей;
					
				Иначе
					
					Результат.Успешно      = Ложь;
					Результат.ТекстОшибки  = РезультатОбновления.ТекстОшибки;
					Возврат Результат;
					
				КонецЕсли;
				
			Иначе
				
				Результат.Успешно          = Истина;
				ТребуетсяВыполнениеЗапроса = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОбновленияНастройкиКонтрагентов()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация",                 Неопределено);
	Параметры.Вставить("ВидОбновляемыхДанных",        Перечисления.ВидыОбновляемыхДанныхEDI.НастройкиПоставщиков);
	Параметры.Вставить("ДатаНачалаОбновления",        Дата(1, 1, 1));
	Параметры.Вставить("ДатаБлокировкиДляОбновления", Дата(1, 1, 1));
	Параметры.Вставить("ЭтоПоследняяСтраница",        Ложь);
	Параметры.Вставить("ТаблицаСДанными",             Неопределено);
	
	Возврат Параметры;
	
КонецФункции

Функция РезультатОбновленияНастроекКонтрагентов(ПараметрыОбновления)
	
	Результат = НовыйРезультатОбновления();
	
	НачатьТранзакцию();
	
	Попытка
		
		ТекущийПоставщик = Неопределено;
		ОжидаемИндивидуальнуюЗапись = Ложь;
							
		Для Каждого СтрокаТаблицы Из ПараметрыОбновления.ТаблицаСДанными Цикл
			
			Если ТекущийПоставщик <> СтрокаТаблицы.Поставщик Тогда
				
				Если ОжидаемИндивидуальнуюЗапись Тогда
					
					НаборЗаписей = РегистрыСведений.НастройкиПоставщикаEDI.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Поставщик.Установить(ТекущийПоставщик);
					НаборЗаписей.Отбор.Покупатель.Установить(ПараметрыОбновления.Организация);
					
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
				ТекущийПоставщик = СтрокаТаблицы.Поставщик;
				
			КонецЕсли;
			
			
			ПараметрыЗаписи = ПараметрыЗаписиВРегистр();
			
			ПараметрыЗаписи.Поставщик                    = СтрокаТаблицы.Поставщик;
			ПараметрыЗаписи.Покупатель                   = СтрокаТаблицы.Покупатель;
			ПараметрыЗаписи.РежимРаботыСЗаказамиКлиентов = СтрокаТаблицы.РежимРаботыСЗаказами;
			
			ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
			
			ОжидаемИндивидуальнуюЗапись = Не ЗначениеЗаполнено(СтрокаТаблицы.Покупатель);				
				
			Результат.КоличествоЗаписей = Результат.КоличествоЗаписей + 1;
			
			Результат.ДатаПоследнегоИзменения = СтрокаТаблицы.ДатаИзменения;
			
		КонецЦикла;
		
		Если ОжидаемИндивидуальнуюЗапись Тогда
					
			НаборЗаписей = РегистрыСведений.НастройкиПоставщикаEDI.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Поставщик.Установить(ТекущийПоставщик);
			НаборЗаписей.Отбор.Покупатель.Установить(ПараметрыОбновления.Организация);
			
			НаборЗаписей.Записать(Истина);
					
		КонецЕсли;
		
		ПараметрыЗаписи = РегистрыСведений.СостоянияОбновленияДанныхEDI.ПараметрыЗаписиВРегистр();
		ПараметрыЗаписи.Организация          = ПараметрыОбновления.Организация;
		ПараметрыЗаписи.ВидОбновляемыхДанных = ПараметрыОбновления.ВидОбновляемыхДанных;
		
		Если ПараметрыОбновления.ЭтоПоследняяСтраница Тогда
			ПараметрыЗаписи.ДатаБлокировкиДляОбновления = Дата(1, 1, 1);
			ПараметрыЗаписи.ДатаОбновления              = ПараметрыОбновления.ДатаНачалаОбновления;
		Иначе
			ПараметрыЗаписи.ДатаБлокировкиДляОбновления = ПараметрыОбновления.ДатаБлокировкиДляОбновления;
			ПараметрыЗаписи.ДатаОбновления              = Результат.ДатаПоследнегоИзменения;
		КонецЕсли;
		
		РегистрыСведений.СостоянияОбновленияДанныхEDI.ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Прочее

Функция СведенияОбОрганизации(Знач ОрганизацияСсылка)
	
	СведенияОбОрганизации = Новый Структура;
	СведенияОбОрганизации.Вставить("Идентификатор"                     , "");
	СведенияОбОрганизации.Вставить("КонтрагентЗарегистрированВСервисе" , Ложь);
	СведенияОбОрганизации.Вставить("ДанныеНайдены"                     , Ложь);
	
	Отказ = Ложь;
	КонтрагентыБизнесСети = ИнтеграцияССервисомEDIСлужебный.КонтрагентыБизнесСети(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОрганизацияСсылка), Отказ);
		
	Если Отказ Или Не ЗначениеЗаполнено(КонтрагентыБизнесСети) Тогда
		Возврат СведенияОбОрганизации;
	КонецЕсли;
	
	ЗаписьПоКонтрагенту = КонтрагентыБизнесСети.Найти(ОрганизацияСсылка, "Контрагент");
	Если Не ЗначениеЗаполнено(ЗаписьПоКонтрагенту) Тогда
		Возврат СведенияОбОрганизации;
	КонецЕсли;

	
	СведенияОбОрганизации.Идентификатор                     = ЗаписьПоКонтрагенту.Идентификатор;
	СведенияОбОрганизации.КонтрагентЗарегистрированВСервисе = Истина;
	СведенияОбОрганизации.ДанныеНайдены                     = Истина;
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Функция НовыйРезультатОбновления()
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",                 Истина);
	Результат.Вставить("ТекстОшибки",             "");
	Результат.Вставить("КоличествоЗаписей",       0);
	Результат.Вставить("ДатаПоследнегоИзменения", Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
