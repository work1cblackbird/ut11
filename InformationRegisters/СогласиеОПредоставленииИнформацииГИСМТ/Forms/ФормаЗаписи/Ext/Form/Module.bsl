
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустой() Тогда
		
		ВариантДоступа = 1; // Разрешено всем
		
		Если Параметры.ЗначенияЗаполнения.Свойство("Организация") Тогда
			Организация = ПолучитьОрганизацию(Параметры.ЗначенияЗаполнения.Организация);
			Если ЗначениеЗаполнено(Организация) Тогда
				Запись.Организация = Организация;
				ДатаИзСертификата = МинимальныйСрокДействияДоступногоПользователюСертификатаПоОрганизации(Запись.Организация);
				Если ЗначениеЗаполнено(ДатаИзСертификата) И ДатаИзСертификата > ДействителенДо Тогда
					ДействителенДо = ДатаИзСертификата;
				КонецЕсли;
				Элементы.Организация.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьДанныеФормыПоИсторииИзменений();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбновитьИсториюИзменений();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораКонтрагента(
		Новый ОписаниеОповещения("ПриВыбореКонтрагента", ЭтотОбъект), ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	Если Не ЗначениеЗаполнено(Запись.Организация) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено'"),,
			"Запись.Организация",,
			Отказ);
		
	ИначеЕсли Не ЗначениеЗаполнено(Запись.ИсходныйКлючЗаписи) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.СогласиеОПредоставленииИнформацииГИСМТ КАК СогласиеОПредоставленииИнформацииГИСМТ
		|ГДЕ
		|	СогласиеОПредоставленииИнформацииГИСМТ.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация", Запись.Организация);
		
		Если Не Запрос.Выполнить().Пустой() Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Настройка документа согласия для организации %1 уже существует'"),
					Запись.Организация),,
				"Запись.Организация",,
				Отказ);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДействителенДо = '00010101' Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Действительно до"" не заполнено'"),,
			"ДействителенДо",,
			Отказ);
		
	ИначеЕсли ДействителенДо < НачалоДня(ТекущаяДатаСеанса()) Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Срок действия документа согласия не может быть меньше текущей даты'"),,
			"ДействителенДо",,
			Отказ);
			
	КонецЕсли;
	
	Если Не Булево(ВариантДоступа) Тогда
		
		Если ДоверенныеКонтрагенты.Количество() = 0 Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Список контрагентов пуст'"),,
				"ДоверенныеКонтрагенты",,
				Отказ);
			
		Иначе
			
			КоличествоСтрокСДоступом = 0;
			
			СостоянияИНН = СостоянияИНН();
			
			Для Каждого Строка Из ДоверенныеКонтрагенты Цикл
				
				Если Не (Строка.Состояние = СостоянияИНН.ДоступПредоставлен
					Или Строка.Состояние = СостоянияИНН.КПредоставлениюДоступа) Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоСтрокСДоступом = КоличествоСтрокСДоступом + 1;
				
				ТекстСообщения = "";
				ИндексСтроки   = ДоверенныеКонтрагенты.Индекс(Строка);
				Поле           = СтрШаблон("ДоверенныеКонтрагенты[%1].ИНН", XMLСтрока(ИндексСтроки));
				
				Если ЗначениеЗаполнено(Строка.ИНН) Тогда
					
					Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
						Контрагент = Строка.Контрагент;
					Иначе
						Контрагент = СтрШаблон(НСтр("ru = 'ИНН %1'"), Строка.ИНН);
					КонецЕсли;
					
					Если ИННКорректен(Контрагент, Строка.ИНН, ТекстСообщения) Тогда
						Продолжить;
					КонецЕсли;
					
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В строке %1 ошибка: %2'"),
						ИндексСтроки + 1,
						ТекстСообщения);
					
				Иначе
					
					Если ЗначениеЗаполнено(Строка.Контрагент) Тогда
						
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'В строке %1 для контрагента %2 не заполнен ИНН'"),
							ИндексСтроки + 1,
							Строка.Контрагент);
						
					Иначе
						
						ТекстСообщения = СтрШаблон(
							НСтр("ru = 'В строке %1 не выбран контрагент'"),
							ИндексСтроки + 1);
						
						Поле = СтрШаблон("ДоверенныеКонтрагенты[%1].Контрагент", XMLСтрока(ИндексСтроки));
						
					КонецЕсли;
					
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстСообщения,,
					Поле,,
					Отказ);
				
			КонецЦикла;
			
			Если КоличествоСтрокСДоступом = 0 Тогда
				
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'В списке нет контрагентов к предоставлению доступа'"),,
					"ДоверенныеКонтрагенты",,
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ИсторияИзменений = Новый ХранилищеЗначения(ИсторияИзменений);
	ТекущийОбъект.ДействителенДо   = ДействителенДо;
	ТекущийОбъект.РазрешеноВсем    = Булево(ВариантДоступа);
	//ТекущийОбъект.Состояние        = Состояние;
	ТекущийОбъект.ХешСумма         = ХешСумма;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьКонтрагента(Команда)
	
	СостоянияИНН = СостоянияИНН();
	
	ДопустимыеСостояния = Новый Массив;
	ДопустимыеСостояния.Добавить(СостоянияИНН.КПредоставлениюДоступа);
	
	Строка = ДоверенныеКонтрагенты.Добавить();
	
	Строка.ПредставлениеСостояния = ПредставлениеСостоянийИНН()[СостоянияИНН.КПредоставлениюДоступа];
	Строка.Состояние = СостоянияИНН.КПредоставлениюДоступа;
	
	Строка.РазрешеноУдалять = Истина;
	
	Строка.ДопустимыеСостояния.ЗагрузитьЗначения(ДопустимыеСостояния);
	
	Элементы.ДоверенныеКонтрагенты.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	Элементы.ДоверенныеКонтрагенты.ТекущийЭлемент = Элементы.ДоверенныеКонтрагентыКонтрагент;
	Элементы.ДоверенныеКонтрагенты.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьКонтрагентов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораКонтрагента(ЭтотОбъект, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщенияXML(Команда)
	
	Если ЗначениеЗаполнено(ПротоколОбмена.ПротоколОбменаXML) Тогда
		
		Источник = Новый Структура;
		Источник.Вставить("ПротоколОбменаXML", ПротоколОбмена.ПротоколОбменаXML);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник",  Источник);
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Сообщения операции: Согласие о предоставлении информации'"));
		
		ОткрытьФорму(
			"ОбщаяФорма.ЛогОбменаИСМП",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзГИСМТ(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Запись.ИсходныйКлючЗаписи) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОбновитьИзГИСМТПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные для документа согласия не сохранены. Сохранить?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ЗначениеЗаполнено(ИсторияИзменений.КИзменению.ХешСумма)
		И ИсторияИзменений.КИзменению.ХешСумма <> Запись.ХешСумма Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ОбновитьИзГИСМТПродолжение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные для документа согласия не сохранены. Сохранить?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбновитьИзГИСМТЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Запись.Организация) Тогда
		ДатаИзСертификата = МинимальныйСрокДействияДоступногоПользователюСертификатаПоОрганизации(Запись.Организация);
		Если ЗначениеЗаполнено(ДатаИзСертификата) И ДатаИзСертификата > ДействителенДо Тогда
			ДействителенДо = ДатаИзСертификата;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИсториюИзменений();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешеноВсемПриИзменении(Элемент)
	
	ОбновитьИсториюИзменений();
	СформироватьТаблицуДоверенныхКонтрагентов();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействителенДоПриИзменении(Элемент)
	
	ОбновитьИсториюИзменений();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Запись.ИсходныйКлючЗаписи) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СостояниеПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Данные для документа согласия не сохранены. Сохранить?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли ЗначениеЗаполнено(ИсторияИзменений.КИзменению.ХешСумма)
		И ИсторияИзменений.КИзменению.ХешСумма <> Запись.ХешСумма Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СостояниеПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Данные для документа согласия не сохранены. Сохранить?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДоверенныеКонтрегенты

&НаКлиенте
Процедура ДоверенныеКонтрагентыПриИзменении(Элемент)
	
	ОбновитьИсториюИзменений();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенныеКонтрагентыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элемент.ПодчиненныеЭлементы.ДоверенныеКонтрагентыКонтрагент
		И ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенныеКонтрагентыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Отказ = Не ТекущиеДанные.РазрешеноУдалять;
	
	Если Отказ Тогда
		
		СостоянияИНН = СостоянияИНН();
		
		Если ТекущиеДанные.Состояние = СостоянияИНН.КОтменеДоступа
			Или ТекущиеДанные.ДопустимыеСостояния.НайтиПоЗначению(СостоянияИНН.КОтменеДоступа) = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.ПредставлениеСостояния = ПредставлениеСостоянийИНН()[СостоянияИНН.КОтменеДоступа];
		ТекущиеДанные.Состояние              = СостоянияИНН.КОтменеДоступа;
		
	КонецЕсли;
	
	ОбновитьИсториюИзменений();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенныеКонтрагентыПредставлениеСостоянияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДоверенныеКонтрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВозможныхСостояний = ТекущиеДанные.ДопустимыеСостояния;
	
	ПредставлениеСостоянийИНН = ПредставлениеСостоянийИНН();
	
	ДанныеВыбора = Новый СписокЗначений();
	Для Каждого ЭлементСписка Из СписокВозможныхСостояний Цикл
		
		ВозможноеСостояние = ЭлементСписка.Значение;
		
		ПредставлениеСостояния = ПредставлениеСостоянийИНН[ВозможноеСостояние];
		
		ДанныеВыбора.Добавить(ВозможноеСостояние, ПредставлениеСостояния);
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенныеКонтрагентыПредставлениеСостоянияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДоверенныеКонтрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПредставлениеСостояния = ПредставлениеСостоянийИНН()[ВыбранноеЗначение];
	ТекущиеДанные.Состояние              = ВыбранноеЗначение;
	
	ОбновитьИсториюИзменений();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенныеКонтрагентыПредставлениеСостоянияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДоверенныеКонтрагентыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДоверенныеКонтрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ДоверенныеКонтрагенты.ТекущийЭлемент = Элементы.ДоверенныеКонтрагентыКонтрагент Тогда
		Отказ = ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Или Не ТекущиеДанные.РазрешеноУдалять;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенныеКонтрагентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДоверенныеКонтрагентыКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Контрагент = ВыбранноеЗначение;
	
	Контрагенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбранноеЗначение);
	
	ИННКонтрагентов = ИННКонтрагентов(Контрагенты);
	
	ИНН = ИННКонтрагентов[Контрагент];
	
	ТекстСообщения = "";
	Если Не ИННКорректен(Контрагент, ИНН, ТекстСообщения) Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Контрагент %1 не может быть добавлен. %2'"),
			Контрагент,
			ТекстСообщения);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Контрагент, "ИНН");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ДоверенныеКонтрагенты.НайтиСтроки(Новый Структура("ИНН", ИНН)).Количество() > 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Контрагент %1 добавлен ранее.'"), Контрагент);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДоверенныеКонтрагенты.ТекущиеДанные;
	
	ТекущиеДанные.ИНН = ИНН;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанныеФормыПоИсторииИзменений()
	
	ИнициализироватьИсториюИзменений();
	ИнициализироватьПротоколОбмена();
	
	Если ЗначениеЗаполнено(ИсторияИзменений.КИзменению.ХешСумма) Тогда
		ВариантДоступа  = ИсторияИзменений.КИзменению.РазрешеноВсем;
		ДействителенДо = ИсторияИзменений.КИзменению.ДействителенДо;
	ИначеЕсли ЗначениеЗаполнено(ИсторияИзменений.Текущий.ХешСумма) Тогда
		ВариантДоступа  = ИсторияИзменений.Текущий.РазрешеноВсем;
		ДействителенДо = ИсторияИзменений.Текущий.ДействителенДо;
	КонецЕсли;
	
	СформироватьТаблицуДоверенныхКонтрагентов();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Элементы.Организация.ТолькоПросмотр                        = Элементы.Организация.ТолькоПросмотр Или ЗначениеЗаполнено(Запись.ИсходныйКлючЗаписи);
	Элементы.ДоверенныеКонтрагенты.ТолькоПросмотр              = Булево(ВариантДоступа);
	Элементы.ДоверенныеКонтрагенты.КоманднаяПанель.Доступность = Не Булево(ВариантДоступа);
	Элементы.ФормаПоказатьСообщенияXML.Доступность             = ЗначениеЗаполнено(ПротоколОбмена.ПротоколОбменаXML);
	
	СформироватьПредставлениеИзмененийПоИсторииИзменений();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеИзмененийПоИсторииИзменений()
	
	ПояснениеРазрешеноВсем  = "";
	ПояснениеДействителенДо = "";
	
	Если ЗначениеЗаполнено(ИсторияИзменений.КИзменению.ХешСумма) Тогда
		
		Если ЗначениеЗаполнено(ИсторияИзменений.Текущий.ХешСумма)
			И ИсторияИзменений.КИзменению.ХешСумма <> ИсторияИзменений.Текущий.ХешСумма Тогда
			
			Если ИсторияИзменений.КИзменению.РазрешеноВсем <> ИсторияИзменений.Текущий.РазрешеноВсем Тогда
				
				Если ИсторияИзменений.КИзменению.РазрешеноВсем Тогда
					ПояснениеРазрешеноВсем = НСтр("ru = 'Пока еще действует список контрагентов перечисленный ниже.'");
				Иначе
					ПояснениеРазрешеноВсем = НСтр("ru = 'Сейчас действует для всех, но будет действовать для списка ниже.'");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИсторияИзменений.КИзменению.ДействителенДо <> ИсторияИзменений.Текущий.ДействителенДо Тогда
				ПояснениеДействителенДо =
					СтрШаблон(НСтр("ru = 'Предыдущее значение было %1'"),
						Формат(ИсторияИзменений.Текущий.ДействителенДо, "ДФ=dd.MM.yyyy"));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ИсторияИзменений.Текущий.ХешСумма) Тогда
		
		
		
	КонецЕсли;
	
	Элементы.ВариантДоступаРасширеннаяПодсказка.Заголовок = ПояснениеРазрешеноВсем;
	Если ЗначениеЗаполнено(ПояснениеРазрешеноВсем) Тогда
		Элементы.ВариантДоступа.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы.ВариантДоступа.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
	Элементы.ДействителенДоРасширеннаяПодсказка.Заголовок = ПояснениеДействителенДо;
	Если ЗначениеЗаполнено(ПояснениеДействителенДо) Тогда
		Элементы.ДействителенДо.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	Иначе
		Элементы.ДействителенДо.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьИсториюИзменений()
	
	ИсторияИзменений = РеквизитФормыВЗначение("Запись").ИсторияИзменений.Получить();
	
	Если ИсторияИзменений = Неопределено Тогда
		
		ИсторияИзменений = Новый Структура;
		ИсторияИзменений.Вставить("КИзменению", ИнициализацияДанныхДокументаСогласия());
		ИсторияИзменений.Вставить("Текущий",    ИнициализацияДанныхДокументаСогласия());
		ИсторияИзменений.Вставить("Архив",      ИнициализацияДанныхДокументаСогласия());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИнициализацияДанныхДокументаСогласия()
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("РазрешеноВсем",   Ложь);
	ДанныеДокумента.Вставить("ДействителенДо", '00010101');
	ДанныеДокумента.Вставить("ДоверенныеИНН",   Новый Массив);
	ДанныеДокумента.Вставить("ХешСумма",        "");
	
	ДанныеДокумента.Вставить("ДатаПодписания");
	ДанныеДокумента.Вставить("РегистрационныйНомер");
	ДанныеДокумента.Вставить("Идентификатор");
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьПротоколОбмена()
	
	ПротоколОбмена = РеквизитФормыВЗначение("Запись").ПротоколОбмена.Получить();
	
	Если ПротоколОбмена = Неопределено Тогда
		ПротоколОбмена = Новый Структура;
		ПротоколОбмена.Вставить("ПротоколОбменаXML", Неопределено);
		ПротоколОбмена.Вставить("ОписаниеОшибки",    Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуДоверенныхКонтрагентов()
	
	ДоверенныеКонтрагенты.Очистить();
	
	СостоянияИНН = СостоянияИНН();
	
	СтрокиПоИНН = Новый Соответствие;
	
	СостояниеДляТекущегоДокумента = СостоянияИНН.ДоступПредоставлен;
	
	Если ЗначениеЗаполнено(ИсторияИзменений.КИзменению.ХешСумма)
		И Не ИсторияИзменений.КИзменению.РазрешеноВсем Тогда
		
		Если СписокДоверенныхКонтрагентовИзменился(ИсторияИзменений.КИзменению, ИсторияИзменений.Текущий) Тогда
			
			СостояниеДляТекущегоДокумента = СостоянияИНН.КОтменеДоступа;
			
			ДопустимыеСостояния = Новый Массив;
			ДопустимыеСостояния.Добавить(СостоянияИНН.КПредоставлениюДоступа);
			
			Для Каждого ИНН Из ИсторияИзменений.КИзменению.ДоверенныеИНН Цикл
				
				Строка = ДоверенныеКонтрагенты.Добавить();
				Строка.ИНН       = ИНН;
				Строка.Состояние = СостоянияИНН.КПредоставлениюДоступа;
				
				Строка.РазрешеноУдалять = Истина;
				
				Строка.ДопустимыеСостояния.ЗагрузитьЗначения(ДопустимыеСостояния);
				
				СтрокиПоИНН[ИНН] = Строка;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсторияИзменений.Текущий.ХешСумма)
		И Не ИсторияИзменений.Текущий.РазрешеноВсем Тогда
		
		ДопустимыеСостояния = Новый Массив;
		ДопустимыеСостояния.Добавить(СостоянияИНН.ДоступПредоставлен);
		ДопустимыеСостояния.Добавить(СостоянияИНН.КОтменеДоступа);
		
		Для Каждого ИНН Из ИсторияИзменений.Текущий.ДоверенныеИНН Цикл
			
			Строка = СтрокиПоИНН[ИНН];
			
			Если Строка = Неопределено Тогда
				
				Строка = ДоверенныеКонтрагенты.Добавить();
				Строка.ИНН       = ИНН;
				Строка.Состояние = СостояниеДляТекущегоДокумента;
				
				СтрокиПоИНН[ИНН] = Строка;
				
			Иначе
				
				Строка.Состояние = СостоянияИНН.ДоступПредоставлен;
				
			КонецЕсли;
			
			Строка.РазрешеноУдалять = Ложь;
			
			Строка.ДопустимыеСостояния.ЗагрузитьЗначения(ДопустимыеСостояния);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсторияИзменений.Архив.ХешСумма)
		И Не (ИсторияИзменений.Архив.РазрешеноВсем
			Или ИсторияИзменений.КИзменению.РазрешеноВсем) Тогда
		
		ДопустимыеСостояния = Новый Массив;
		ДопустимыеСостояния.Добавить(СостоянияИНН.КПредоставлениюДоступа);
		ДопустимыеСостояния.Добавить(СостоянияИНН.ДоступБылОтмененВЛК);
		
		Для Каждого ИНН Из ИсторияИзменений.Архив.ДоверенныеИНН Цикл
			
			Строка = СтрокиПоИНН[ИНН];
			
			Если Строка = Неопределено Тогда
				
				Строка = ДоверенныеКонтрагенты.Добавить();
				Строка.ИНН       = ИНН;
				Строка.Состояние = СостоянияИНН.ДоступБылОтмененВЛК;
				
				Строка.РазрешеноУдалять = Истина;
				
				СтрокиПоИНН[ИНН] = Строка;
				
				Строка.ДопустимыеСостояния.ЗагрузитьЗначения(ДопустимыеСостояния);
				
			ИначеЕсли Строка.Состояние = СостоянияИНН.КПредоставлениюДоступа Тогда
				
				Строка.ДопустимыеСостояния.ЗагрузитьЗначения(ДопустимыеСостояния);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДоверенныеКонтрагенты.Количество() > 0 Тогда
		
		СоответствиеИННКонтрагентам = ИнтеграцияИСМП.КонтрагентыПоСпискуИНН(
			ДанныеФормыВЗначение(ДоверенныеКонтрагенты, Тип("ТаблицаЗначений")).ВыгрузитьКолонку("ИНН"));
		
		ПредставлениеСостоянийИНН = ПредставлениеСостоянийИНН();
		Для Каждого Строка Из ДоверенныеКонтрагенты Цикл
			
			Строка.Контрагент             = СоответствиеИННКонтрагентам[Строка.ИНН];
			Строка.ПредставлениеСостояния = ПредставлениеСостоянийИНН[Строка.Состояние];
			
		КонецЦикла;
		
КонецЕсли;

КонецПроцедуры

#Область СтроковыеПеречисления

&НаКлиентеНаСервереБезКонтекста
Функция СостоянияИНН()
	
	СостоянияИНН = Новый Структура;
	СостоянияИНН.Вставить("ДоступПредоставлен",     0);
	СостоянияИНН.Вставить("КПредоставлениюДоступа", 1);
	СостоянияИНН.Вставить("КОтменеДоступа",         2);
	СостоянияИНН.Вставить("ДоступБылОтмененВЛК",    3);
	
	Возврат СостоянияИНН;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСостоянийИНН()
	
	СостоянияИНН = СостоянияИНН();
	
	ПредставлениеСостоянийИНН = Новый Соответствие;
	ПредставлениеСостоянийИНН.Вставить(СостоянияИНН.ДоступПредоставлен,     НСтр("ru = 'Доступ предоставлен'"));
	ПредставлениеСостоянийИНН.Вставить(СостоянияИНН.КПредоставлениюДоступа, НСтр("ru = 'К предоставлению доступа'"));
	ПредставлениеСостоянийИНН.Вставить(СостоянияИНН.КОтменеДоступа,         НСтр("ru = 'К отмене доступа'"));
	ПредставлениеСостоянийИНН.Вставить(СостоянияИНН.ДоступБылОтмененВЛК,    НСтр("ru = 'Доступ был отменен в ЛК'"));
	
	Возврат ПредставлениеСостоянийИНН;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДопустимыеДействия()
	
	ДопустимыеДействия = Новый Структура;
	ДопустимыеДействия.Вставить("ОбновитьВГИСМТ", "ОбновитьВГИСМТ");
	
	Возврат ДопустимыеДействия;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДопустимыеДействияПредствление()
	
	ДопустимыеДействия = ДопустимыеДействия();
	
	ДопустимыеДействияПредствление = Новый Соответствие;
	ДопустимыеДействияПредствление.Вставить(ДопустимыеДействия.ОбновитьВГИСМТ, НСтр("ru = 'обновить в ГИС МТ'"));
	
	Возврат ДопустимыеДействияПредствление;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоверенныеКонтрагентыКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоверенныеКонтрагенты.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоверенныеКонтрагентыКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДоверенныеКонтрагенты.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореКонтрагента(Результат, ДополнительныеПараметры) Экспорт
	
	СтрокиТаблицы = Новый Соответствие;
	Для Каждого Строка Из ДоверенныеКонтрагенты Цикл
		СтрокиТаблицы.Вставить(Строка.ИНН, Строка);
	КонецЦикла;
	
	СостояниеИНН              = СостоянияИНН().КПредоставлениюДоступа;
	ПредставлениеСостоянияИНН = ПредставлениеСостоянийИНН()[СостояниеИНН];
	
	ДопустимыеСостояния = Новый Массив;
	ДопустимыеСостояния.Добавить(СостояниеИНН);
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		Контрагенты = Результат;
	Иначе
		Контрагенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат);
	КонецЕсли;
	
	ИННКонтрагентов = ИННКонтрагентов(Контрагенты);
	
	Для Каждого Контрагент Из Контрагенты Цикл
		
		ИНН = ИННКонтрагентов[Контрагент];
		
		ТекстСообщения = "";
		Если Не ИННКорректен(Контрагент, ИНН, ТекстСообщения) Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Контрагент %1 не может быть добавлен. %2'"),
				Контрагент,
				ТекстСообщения);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Контрагент, "ИНН");
			Продолжить;
		КонецЕсли;
		
		Строка = СтрокиТаблицы[ИНН];
		
		Если Строка = Неопределено Тогда
			
			Строка = ДоверенныеКонтрагенты.Добавить();
			Строка.ИНН        = ИНН;
			Строка.Контрагент = Контрагент;
			Строка.Состояние               = СостояниеИНН;
			Строка.ПредставлениеСостояния  = ПредставлениеСостоянияИНН;
			Строка.РазрешеноУдалять        = Истина;
			
			Строка.ДопустимыеСостояния.ЗагрузитьЗначения(ДопустимыеСостояния);
			
			СтрокиТаблицы.Вставить(Строка.ИНН, Строка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИННКонтрагентов(Контрагенты)
	//@skip-warning
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Контрагенты, "ИНН");
КонецФункции

&НаСервере
Функция СписокДоверенныхКонтрагентовИзменился(ДанныеДокумент1, ДанныеДокумент2)
	
	Если ДанныеДокумент1.РазрешеноВсем <> ДанныеДокумент2.РазрешеноВсем
		Или ДанныеДокумент1.ДоверенныеИНН.Количество() <> ДанныеДокумент2.ДоверенныеИНН.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СписокИНН = Новый Соответствие;
	
	Для Каждого ИНН Из ДанныеДокумент1.ДоверенныеИНН Цикл
		СписокИНН.Вставить(ИНН, Истина);
	КонецЦикла;
	
	Для Каждого ИНН Из ДанныеДокумент2.ДоверенныеИНН Цикл
		Если СписокИНН[ИНН] = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИННКорректен(Контрагент, ИНН, ТексОшибки = "")
	
	ЕстьОшибки     = Ложь;
	ТекстСообщения = "";
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		ЕстьОшибки = Истина;
		ТекстСообщения = НСтр("ru = 'ИНН не заполнен.'");
	ИначеЕсли СтрДлина(ИНН) = 10 Тогда
		ЕстьОшибки = Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Истина, ТекстСообщения);
	ИначеЕсли СтрДлина(ИНН) = 12 Тогда
		ЕстьОшибки = Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Ложь, ТекстСообщения);
	Иначе
		ЕстьОшибки = Истина;
		ТекстСообщения = НСтр("ru = 'ИНН должен состоять из 10 или 12 цифр.'");
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИсториюИзменений()
	
	ДанныеДокумента = ИнициализацияДанныхДокументаСогласия();
	ДанныеДокумента.РазрешеноВсем  = Булево(ВариантДоступа);
	ДанныеДокумента.ДействителенДо = ДействителенДо;
	
	СостоянияИНН = СостоянияИНН();
	
	ДопустимыеСостояния = Новый Массив;
	ДопустимыеСостояния.Добавить(СостоянияИНН.ДоступПредоставлен);
	ДопустимыеСостояния.Добавить(СостоянияИНН.КПредоставлениюДоступа);
	
	Если Не Булево(ВариантДоступа) Тогда
		Для Каждого Строка Из ДоверенныеКонтрагенты Цикл
			Если ДопустимыеСостояния.Найти(Строка.Состояние) <> Неопределено Тогда
				ДанныеДокумента.ДоверенныеИНН.Добавить(Строка.ИНН);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ХешСумма = РассчитатьХешСумму(ДанныеДокумента);
	
	ДанныеДокумента.ХешСумма = ХешСумма;
	
	Если ДанныеДокумента.ХешСумма = ИсторияИзменений.Текущий.ХешСумма Тогда
		ИсторияИзменений.КИзменению = ИнициализацияДанныхДокументаСогласия();
	Иначе
		ИсторияИзменений.КИзменению = ДанныеДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьХешСумму(ДанныеДокумента)
	
	Возврат СогласиеОПредоставленииИнформацииГИСМТ.ХешСуммуДокумента(ДанныеДокумента);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИзГИСМТПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьВыполнение = Ложь;
	
	Если ПроверитьЗаполнение() Тогда
		ПродолжитьВыполнение = Записать();
	КонецЕсли;
	
	Если ПродолжитьВыполнение Тогда
		ОбновитьИзГИСМТЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзГИСМТЗавершение()
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"ОбновитьВГИСМТЗавершение", ЭтотОбъект);
	
	СогласиеОПредоставленииИнформацииГИСМТКлиент.ОбновитьИнформациюПоДействующемуДокументуСогласияОПредоставленииИнформации(
		Запись.Организация, УникальныйИдентификатор, ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжитьВыполнение = Ложь;
	
	Если ПроверитьЗаполнение() Тогда
		ПродолжитьВыполнение = Записать();
	КонецЕсли;
	
	Если ПродолжитьВыполнение Тогда // Не Модифицированность И Объект.Проведен
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	ДопустимыеДействия = ДопустимыеДействия();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ДопустимыеДействия.ОбновитьВГИСМТ Тогда
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("Ссылка",              Неопределено);
		ПараметрыОбработки.Вставить("Организация",         Запись.Организация);
		ПараметрыОбработки.Вставить("ДальнейшееДействие",  ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.СогласиеОПредоставлениеИнформации"));
		ПараметрыОбработки.Вставить("ХешСумма",            Запись.ХешСумма);
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"ОбновитьВГИСМТЗавершение", ЭтотОбъект, ПараметрыОбработки);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработки,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ",       Неопределено);
		ПараметрыОткрытияФормы.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВГИСМТЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
	ЗаполнитьДанныеФормыПоИсторииИзменений();
	ОбновитьСостояние();
	УправлениеЭлементамиФормы();
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.СогласиеОПредоставленииИнформацииГИСМТ"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояние()
	
	ДопустимыеДействия = ДопустимыеДействия();
	
	Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.Черновик;
	
	Если ЗначениеЗаполнено(Запись.Статус) Тогда
		Статус = Запись.Статус;
	КонецЕсли;
	
	СтатусыОшибок = Новый Массив;
	СтатусыОшибок.Добавить(Перечисления.СтатусыОбработкиСогласияГИСМТ.СозданиеСогласияОшибкаПередачи);
	СтатусыОшибок.Добавить(Перечисления.СтатусыОбработкиСогласияГИСМТ.СозданиеАннулированияСогласияОшибкаПередачи);
	СтатусыОшибок.Добавить(Перечисления.СтатусыОбработкиСогласияГИСМТ.ПодписаниеСогласияОшибкаПередачи);
	СтатусыОшибок.Добавить(Перечисления.СтатусыОбработкиСогласияГИСМТ.ПодписаниеАннулированияСогласияОшибкаПередачи);
	СтатусыОшибок.Добавить(Перечисления.СтатусыОбработкиСогласияГИСМТ.ПроверкаРегистрацииКонтрагентовОшибка);
	СтатусыОшибок.Добавить(Перечисления.СтатусыОбработкиСогласияГИСМТ.Ошибка);
	
	ЦветТекста = Неопределено;
	Если СтатусыОшибок.Найти(Статус) <> Неопределено Тогда
		ЦветТекста = ЦветаСтиля.ЦветТекстаПроблемаГосИС;
	КонецЕсли;
	
	СостояниеПредставление = Новый ФорматированнаяСтрока(Строка(Статус),, ЦветТекста);
	
	Действие = Неопределено;
	
	Если Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.Черновик Тогда
		
		Действие = ДопустимыеДействия.ОбновитьВГИСМТ;
		
	ИначеЕсли Статус = Перечисления.СтатусыОбработкиСогласияГИСМТ.СогласиеПодписано Тогда
		
		ДанныеИзменены =
			ИсторияИзменений.КИзменению.ХешСумма <> ИсторияИзменений.Текущий.ХешСумма
			И ЗначениеЗаполнено(ИсторияИзменений.Текущий.ХешСумма)
			И ЗначениеЗаполнено(ИсторияИзменений.КИзменению.ХешСумма);
		
		Если ДанныеИзменены Тогда
			Действие = ДопустимыеДействия.ОбновитьВГИСМТ;
		КонецЕсли;
		
	ИначеЕсли СтатусыОшибок.Найти(Статус) <> Неопределено Тогда
		
		Действие = ДопустимыеДействия.ОбновитьВГИСМТ;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПротоколОбмена.ОписаниеОшибки) Тогда
		
		ОписаниеОшибки = ПротоколОбмена.ОписаниеОшибки;
		
		ЦветСтиля = ЦветаСтиля.ЦветГиперссылкиГосИС;
		
		СтрокаПричина = Новый ФорматированнаяСтрока(
			НСтр("ru = 'причина'"),
			Новый Шрифт(,,,,Истина),
			ЦветСтиля,
			,
			"ПоказатьПричинуОшибки");
		
		СтрокиПредставленияСостояния = Новый Массив;
		СтрокиПредставленияСостояния.Добавить(СостояниеПредставление);
		СтрокиПредставленияСостояния.Добавить(" ");
		СтрокиПредставленияСостояния.Добавить("(");
		СтрокиПредставленияСостояния.Добавить(СтрокаПричина);
		СтрокиПредставленияСостояния.Добавить(")");
		
		СостояниеПредставление = Новый ФорматированнаяСтрока(СтрокиПредставленияСостояния);
		
	Иначе
		
		ОписаниеОшибки = "";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Действие) Тогда
		
		ДопустимыеДействияПредствление = ДопустимыеДействияПредствление();
		
		ЦветСтиля = ЦветаСтиля.ЦветГиперссылкиГосИС;
		
		СтрокаДальнейшееДействие = Новый ФорматированнаяСтрока(
			ДопустимыеДействияПредствление[Действие],
			Новый Шрифт(,,,,Истина),
			ЦветСтиля,
			,
			Действие);
		
		СтрокиПредставленияСостояния = Новый Массив;
		СтрокиПредставленияСостояния.Добавить(СостояниеПредставление);
		СтрокиПредставленияСостояния.Добавить(",");
		СтрокиПредставленияСостояния.Добавить(" ");
		СтрокиПредставленияСостояния.Добавить(СтрокаДальнейшееДействие);
		
		СостояниеПредставление = Новый ФорматированнаяСтрока(СтрокиПредставленияСостояния);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МинимальныйСрокДействияДоступногоПользователюСертификатаПоОрганизации(Организация) Экспорт
	
	ЕстьПравоДоступаЧтение = ПравоДоступа("Чтение", Метаданные.Справочники.СертификатыКлючейЭлектроннойПодписиИШифрования);
	Если Не ЕстьПравоДоступаЧтение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат,
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо КАК ДействителенДо
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	(СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ТекущийПользователь
	|		ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ПустойПользователь
	|		ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ПользовательНеУказан)
	|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван
	|	И (СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = &ТекущаяОрганизация
	|		ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = &ПустаяОрганизация)
	|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	|	И (СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо > &ТекущаяДатаСеанса ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо = ДАТАВРЕМЯ(1, 1, 1))
	|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.УдалитьСостояниеЗаявления = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявленияНаВыпускСертификата.Отклонено)
	|УПОРЯДОЧИТЬ ПО
	|	ДействителенДо";
	
	Запрос.УстановитьПараметр("ТекущийПользователь"  , Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь"   , ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Пользователь"));
	Запрос.УстановитьПараметр("ПользовательНеУказан" , Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("ПустаяОрганизация",     ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация"));
	Запрос.УстановитьПараметр("ТекущаяОрганизация"   , Организация);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса"    , ОбщегоНазначения.ТекущаяДатаПользователя());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	Возврат ВыборкаДетальныеЗаписи.ДействителенДо;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьОрганизацию(Организации)
	
	Организация = Неопределено;
	
	Если Не ЗначениеЗаполнено(Организации) Тогда
	ИначеЕсли ТипЗнч(Организации) = Тип("СписокЗначений") Тогда
		Если Организации.Количество() = 1 Тогда
			Организация = Организации[0].Значение;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Организации) = Тип("Массив") Тогда
		Если Организации.Количество() = 1 Тогда
			Организация = Организации[0];
		КонецЕсли;
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

#КонецОбласти
