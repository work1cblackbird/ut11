#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Функция определяет статус соединения и согласия
//
// Параметры:
//	ПараметрыЗапроса - Структура - параметры запроса
//	ПараметрыЗаполнения - Структура - параметры заполнения
//
// Возвращаемое значение:
//	Структура - Результат обработки:
//	* ИнформацияОПодключении - Строка
//	* СогласиеАктивно - Булево
//	* СоединениеАктивно - Булево
//
Функция СтатусСогласияПоТекущемуПодключению(ПараметрыЗапроса, ПараметрыЗаполнения) Экспорт
	
	СтруктураВозврат = Новый Структура("ИнформацияОПодключении,СогласиеАктивно,СоединениеАктивно", "", Ложь, Ложь);
	
	Если ПараметрыЗапроса.ИдентификаторОрганизации = ""
		ИЛИ ПараметрыЗапроса.ИдентификаторПровайдера = ""
		ИЛИ ПараметрыЗапроса.ИдентификаторСоединения = "" Тогда
		Возврат СтруктураВозврат;
	КонецЕсли;	

	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторСоединения)
		И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторСогласия) Тогда
		
		ПараметрыОтветаОтСервиса = ПроверитьСтатусыСоединенияИСогласия(ПараметрыЗаполнения);
		
		Если ПараметрыОтветаОтСервиса.СтатусОтвета = СтатусыОтвета.ОтветПолучен Тогда
			 
			 ЗаполнитьЗначенияСвойств(СтруктураВозврат, ПараметрыОтветаОтСервиса);
			 
		 КонецЕсли;
		 
	КонецЕсли;	

	Возврат СтруктураВозврат;	 		 

КонецФункции

// Функция Получает данные в сервисе для дальнейшей авторизации
//
// Параметры:
//	ПараметрыЗаполнения - Структура - параметры заполнения
//
// Возвращаемое значение:
//	Структура - Результат обработки:
//	* СтатусОтвета - Строка
//	* ПараметрыЗаполнения - Строка
//	* МассивОшибок - Массив из Строка
//
Функция ПолучениеДанныхДляАвторизации(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗапроса = ОбменССервисомBankFeedsСервер.ПреобразоватьВПараметрыЗапроса(ПараметрыЗаполнения);
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен);
	РезультатОбработки.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	РезультатОбработки.Вставить("МассивОшибок", Новый Массив());
	
	СтатусСогласия = СтатусСогласияПоТекущемуПодключению(ПараметрыЗапроса, ПараметрыЗаполнения);
	
	// Если нужно создать новое подключение, то обнулим параметры существующего соединения 
	Если ПараметрыЗаполнения.ТолькоНовоеПодключение Тогда
		ПараметрыЗапроса.ИдентификаторПровайдера = "";	
		ПараметрыЗапроса.ИдентификаторСоединения = "";
		СтатусСогласия.СогласиеАктивно = Ложь;
	КонецЕсли;	
	
	// Если идентификатор уже получили, то не нужно заново его получать
	Если ПараметрыЗапроса.ИдентификаторОрганизации = ""
		ИЛИ ПараметрыЗапроса.ИдентификаторПровайдера = ""
		ИЛИ ПараметрыЗапроса.ИдентификаторСоединения = ""
		ИЛИ НЕ СтатусСогласия.СогласиеАктивно 
		ИЛИ НЕ СтатусСогласия.СоединениеАктивно  Тогда
		
		ПараметрыОтветаОтСервиса = ОбменССервисомBankFeedsСервер.ЗарегистрироватьПодключение(ПараметрыЗапроса);
		
		ЗаполнитьЗначенияСвойств(РезультатОбработки, ПараметрыОтветаОтСервиса);  
		
		Если ПараметрыОтветаОтСервиса.СтатусОтвета = СтатусыОтвета.ОтветПолучен  Тогда
			
			НачатьТранзакцию();
			Попытка
		
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодключенияКБанкамBankFeeds");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Организация", ПараметрыЗаполнения.Организация);
				ЭлементБлокировки.УстановитьЗначение("Банк",        ПараметрыЗаполнения.Банк);
				Блокировка.Заблокировать();
				
				ЗаписьРегистраСведений = РегистрыСведений.ПодключенияКБанкамBankFeeds.СоздатьМенеджерЗаписи();
				
				ЗаписьРегистраСведений.Организация = ПараметрыЗаполнения.Организация;
				ЗаписьРегистраСведений.Банк = ПараметрыЗаполнения.Банк;
				ЗаписьРегистраСведений.НастройкиСервиса= ПараметрыЗаполнения.НастройкиСервиса;
				ЗаполнитьЗначенияСвойств(ЗаписьРегистраСведений, ПараметрыОтветаОтСервиса.ПараметрыЗаполнения);
				
				ХранилищеРеквизитовРегистрации = Новый ХранилищеЗначения(ПараметрыЗаполнения.РеквизитыРегистрации);
				
				ЗаписьРегистраСведений.РеквизитыРегистрации = ХранилищеРеквизитовРегистрации;
				
				ЗаписьРегистраСведений.Записать();
				
				РезультатОбработки.Вставить("СсылкаНаАвторизацию", ПараметрыОтветаОтСервиса.СсылкаНаАвторизацию);
				
				ЗафиксироватьТранзакцию();
		
			Исключение
				
			ОтменитьТранзакцию();
			ВызватьИсключение;
				
			КонецПопытки;
		КонецЕсли;
		
	Иначе

		РезультатОбработки.СтатусОтвета = СтатусыОтвета.ЗапросНеНуженДанныеГотовы;
		
	КонецЕсли;	
	
	Возврат РезультатОбработки;
	
КонецФункции	

// Функция проверяет статусы соединение и согласия в сервисе
//
// Параметры:
//	ПараметрыЗаполнения - Структура - параметры заполнения
//
// Возвращаемое значение:
//	Структура - Результат обработки:
//	* СтатусОтвета - Строка
//	* ПараметрыЗаполнения - Строка
//	* МассивОшибок - Массив из Строка
//	* СоединениеАктивно - Булево
//	* СогласиеАктивно - Булево
//
Функция ПроверитьСтатусыСоединенияИСогласия(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗапроса = ОбменССервисомBankFeedsСервер.ПреобразоватьВПараметрыЗапроса(ПараметрыЗаполнения);
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен);
	РезультатОбработки.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	РезультатОбработки.Вставить("МассивОшибок", Новый Массив());
	РезультатОбработки.Вставить("СоединениеАктивно", Ложь);
	РезультатОбработки.Вставить("СогласиеАктивно", Ложь);  

	ИнформацияОПодключении = НСтр("ru = 'Соединение не активно'");

	РезультатОбработки.Вставить("ИнформацияОПодключении", ИнформацияОПодключении);
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегистрСведений.ПодключенияКБанкамBankFeeds.Форма.ФормаЗаписи.ЗапуститьПроверкуСтатусаСоединенияИСогласия");
		
	// Если идентификатор уже получили, то не нужно заново его получать
	Если ПараметрыЗапроса.ИдентификаторОрганизации <> ""
		И ПараметрыЗапроса.ИдентификаторСоединения <> "" Тогда
		
		ПараметрыОтветаОтСервиса = ОбменССервисомBankFeedsСервер.ПроверитьСтатусСоединенияИСогласия(ПараметрыЗапроса);
		
		ЗаполнитьЗначенияСвойств(РезультатОбработки, ПараметрыОтветаОтСервиса);  
		
		Если ПараметрыОтветаОтСервиса.СтатусОтвета = СтатусыОтвета.ОтветПолучен  Тогда
			
			СтатусСогласия = ПараметрыОтветаОтСервиса.СтатусСогласия;	
			СрокДействияСогласия = ПараметрыОтветаОтСервиса.СрокДействияСогласия;	
			ДатаОкончанияСогласия = ПараметрыОтветаОтСервиса.ДатаОкончанияСогласия;	
			СтатусСоединения = ПараметрыОтветаОтСервиса.СтатусСоединения;	
			
			РезультатОбработки.СоединениеАктивно = СтатусСоединения = "active";
			РезультатОбработки.СогласиеАктивно = СтатусСогласия = "active";
			
			Если РезультатОбработки.СоединениеАктивно 
				И РезультатОбработки.СогласиеАктивно Тогда
				
				Если СрокДействияСогласия = Неопределено Тогда

					ИнформацияОПодключении = НСтр("ru = 'Соединение активно'");
					
				Иначе	
					ИнформацияОПодключении = 
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Согласие действует: %1 дней (%2)'"), СрокДействияСогласия, ДатаОкончанияСогласия);
				КонецЕсли;
			
			ИначеЕсли НЕ РезультатОбработки.СогласиеАктивно	Тогда
							
				ИнформацияОПодключении = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1'"), 
																			?(СтатусСогласия = "expired", НСтр("ru = 'Истек срок согласия'"),
																			НСтр("ru = 'Отозвано согласие'")));
			ИначеЕсли НЕ РезультатОбработки.СоединениеАктивно Тогда
							
				ИнформацияОПодключении = НСтр("ru = 'Соединение не активно'");
				
			КонецЕСли;	

			РезультатОбработки.ИнформацияОПодключении = ИнформацияОПодключении;
		КонецЕсли;
		
	КонецЕсли;	
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);
		
	Возврат РезультатОбработки;
	
КонецФункции	

// Функция Обновляет соединение в сервисе
//
// Параметры:
//	ПараметрыЗаполнения - Структура - параметры заполнения
//
// Возвращаемое значение:
//	Структура - Результат обработки:
//	* СтатусОтвета - Строка
//	* ПараметрыЗаполнения - Строка
//	* МассивОшибок - Массив из Строка
//
Функция ОбновлениеСоединения(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗапроса = ОбменССервисомBankFeedsСервер.ПреобразоватьВПараметрыЗапроса(ПараметрыЗаполнения);
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен);
	РезультатОбработки.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	РезультатОбработки.Вставить("МассивОшибок", Новый Массив());
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегистрСведений.ПодключенияКБанкамBankFeeds.Форма.ФормаЗаписи.ОбновитьСоединение");
			
	// Если идентификатор уже получили, то не нужно заново его получать
	Если ПараметрыЗапроса.ИдентификаторОрганизации <> ""
		ИЛИ ПараметрыЗапроса.ИдентификаторСоединения <> "" Тогда
		
		ПараметрыОтветаОтСервиса = ОбменССервисомBankFeedsСервер.ОбновитьСоединение(ПараметрыЗапроса);
		
		ЗаполнитьЗначенияСвойств(РезультатОбработки, ПараметрыОтветаОтСервиса);  
		
		Если ПараметрыОтветаОтСервиса.СтатусОтвета = СтатусыОтвета.ОтветПолучен  Тогда
			
			РезультатОбработки.Вставить("СсылкаНаОбновлениеСоединения", ПараметрыОтветаОтСервиса.СсылкаНаОбновлениеСоединения);
			
		КонецЕсли;
		
	Иначе

		РезультатОбработки.СтатусОтвета = СтатусыОтвета.ЗапросНеНуженДанныеГотовы;
		
	КонецЕсли;	
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);
		
	Возврат РезультатОбработки;
	
КонецФункции	

// Функция выполняет чтение банковских счетов по организации
//
// Параметры:
//	ПараметрыЗаполнения - Структура - параметры заполнения
//
// Возвращаемое значение:
//	Структура - Результат обработки:
//	см. ОбменССервисомBankFeedsСервер.ЧтениеБанковскихСчетовОрганизации
//
Функция ЧтениеБанковскихСчетовПоОрганизации(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗапроса = ОбменССервисомBankFeedsСервер.ПреобразоватьВПараметрыЗапроса(ПараметрыЗаполнения);
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегистрСведений.ПодключенияКБанкамBankFeeds.Форма.ФормаПодключения.ЧтениеБанковскихСчетовПоОрганизации");
		
	ПараметрыОтветаОтСервиса = ОбменССервисомBankFeedsСервер.ЧтениеБанковскихСчетовОрганизации(ПараметрыЗапроса);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);	
	
	Возврат ПараметрыОтветаОтСервиса;
	
КонецФункции

// Функция подключает организацию к сервису
//
// Параметры:
//	ПараметрыЗаполнения - Структура - параметры заполнения
//
// Возвращаемое значение:
//	Структура - Результат обработки:
//	* СтатусОтвета - Строка
//	* ИдентификаторСчета - Строка
//	* МассивОшибок - Массив из Строка
//
Функция ПодключениеКСервису(ПараметрыЗаполнения) Экспорт

	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегистрСведений.ПодключенияКБанкамBankFeeds.Форма.ФормаПодключения.Выполняет подключение к сервису");
	
	ПараметрыЗапроса = ОбменССервисомBankFeedsСервер.ПреобразоватьВПараметрыЗапроса(ПараметрыЗаполнения);
	ПараметрыОтветаОтСервиса = ОбменССервисомBankFeedsСервер.ПолучитьДанныеПодключенияПослеАвторизацииПользователя(
		ПараметрыЗапроса);
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("СтатусОтвета", ПараметрыОтветаОтСервиса.СтатусОтвета);
	РезультатОбработки.Вставить("ИдентификаторСчета", ПараметрыОтветаОтСервиса.ПараметрыЗаполнения.ИдентификаторСчета);
	РезультатОбработки.Вставить("МассивОшибок", ПараметрыОтветаОтСервиса.МассивОшибок);
	
	Если ПараметрыОтветаОтСервиса.СтатусОтвета = СтатусыОтвета.ОтветПолучен Тогда
		
		НачатьТранзакцию();
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодключенияКБанкамBankFeeds");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Организация", ПараметрыЗаполнения.Организация);
			ЭлементБлокировки.УстановитьЗначение("Банк",        ПараметрыЗаполнения.Банк);
			Блокировка.Заблокировать();
			
			ЗаписьРегистраСведений = РегистрыСведений.ПодключенияКБанкамBankFeeds.СоздатьМенеджерЗаписи();
			
			ЗаписьРегистраСведений.Организация = ПараметрыЗаполнения.Организация;
			ЗаписьРегистраСведений.Банк = ПараметрыЗаполнения.Банк;
			ЗаписьРегистраСведений.НастройкиСервиса= ПараметрыЗаполнения.НастройкиСервиса;
			ЗаписьРегистраСведений.ДатаПодключения = ТекущаяДатаСеанса();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистраСведений, ПараметрыОтветаОтСервиса.ПараметрыЗаполнения);
			
			РеквизитыРегистрации = Новый ХранилищеЗначения(ПараметрыЗаполнения.РеквизитыРегистрации);
			
			ЗаписьРегистраСведений.РеквизитыРегистрации = РеквизитыРегистрации;
			
			ЗаписьРегистраСведений.Записать();
			
			ЗафиксироватьТранзакцию();
		
		Исключение
				
			ОтменитьТранзакцию();
			ВызватьИсключение;
				
		КонецПопытки;
		
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);
			
	Возврат РезультатОбработки;

КонецФункции	

// Функция проверяет соединение к к сервису
//
// Параметры:
//	ПараметрыЗаполнения - Структура - параметры заполнения
//
// Возвращаемое значение:
//	Структура - Результат обработки:
//	* СтатусОтвета - Строка
//	* ИдентификаторСчета - Строка
//	* МассивОшибок - Массив из Строка
//
Функция ПроверкаОбновленияСоединенияКСервису(ПараметрыЗаполнения) Экспорт

	ПараметрыЗапроса = ОбменССервисомBankFeedsСервер.ПреобразоватьВПараметрыЗапроса(ПараметрыЗаполнения);
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегистрСведений.ПодключенияКБанкамBankFeeds.МодульМенеджера.ПроверкаОбновленияСоединенияКСервису");	
	
	ПараметрыОтветаОтСервиса = ОбменССервисомBankFeedsСервер.ПолучитьДанныеПодключенияПослеАвторизацииПользователя(
		ПараметрыЗапроса);
	
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	
	Если ПараметрыОтветаОтСервиса.СтатусОтвета = СтатусыОтвета.ОтветПолучен Тогда
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПодключенияКБанкамBankFeeds");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Организация", ПараметрыЗаполнения.Организация);
			ЭлементБлокировки.УстановитьЗначение("Банк",        ПараметрыЗаполнения.Банк);
			Блокировка.Заблокировать();
			
			ЗаписьРегистраСведений = РегистрыСведений.ПодключенияКБанкамBankFeeds.СоздатьМенеджерЗаписи();
			ЗаписьРегистраСведений.Организация = ПараметрыЗаполнения.Организация;
			ЗаписьРегистраСведений.Банк = ПараметрыЗаполнения.Банк;
			ЗаписьРегистраСведений.Прочитать();
			
			ЗаписьРегистраСведений.ИдентификаторСогласия = ПараметрыЗапроса.ИдентификаторСогласия;
			
			ЗаписьРегистраСведений.Записать(Истина);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли;
	
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("СтатусОтвета", ПараметрыОтветаОтСервиса.СтатусОтвета);
	РезультатОбработки.Вставить("ИдентификаторСчета", ПараметрыОтветаОтСервиса.ПараметрыЗаполнения.ИдентификаторСчета);
	РезультатОбработки.Вставить("МассивОшибок", ПараметрыОтветаОтСервиса.МассивОшибок);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);
		
	Возврат РезультатОбработки;

КонецФункции	

// Функция отзывает согласие в сервисе по соединению
//
// Параметры:
//	ПараметрыЗаполнения - Структура - параметры заполнения
//
// Возвращаемое значение:
//	Структура - Результат обработки:
//	* СтатусОтвета - Строка
//	* ПараметрыЗаполнения - Строка
//	* СтатусСогласия - Строка
//	* МассивОшибок - Массив из Строка
//
Функция ОтзывСогласия(ПараметрыЗаполнения) Экспорт
	
	ПараметрыЗапроса = ОбменССервисомBankFeedsСервер.ПреобразоватьВПараметрыЗапроса(ПараметрыЗаполнения);
	СтатусыОтвета = СловарьBankFeedsСлужебный.СтатусыОтвета();
	РезультатОбработки = Новый Структура;
	РезультатОбработки.Вставить("СтатусОтвета", СтатусыОтвета.ОтветНеПолучен);
	РезультатОбработки.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	РезультатОбработки.Вставить("МассивОшибок", Новый Массив()); 
	РезультатОбработки.Вставить("СтатусСогласия", ""); 
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"РегистрСведений.ПодключенияКБанкамBankFeeds.Форма.ФормаЗаписи.ОтозватьСогласие");
			
	Если ПараметрыЗапроса.ИдентификаторОрганизации <> ""
		ИЛИ ПараметрыЗапроса.ИдентификаторСоединения <> "" Тогда
		
		ПараметрыОтветаОтСервиса = ОбменССервисомBankFeedsСервер.ОтзывСогласия(ПараметрыЗапроса);
		
		ЗаполнитьЗначенияСвойств(РезультатОбработки, ПараметрыОтветаОтСервиса);  
		
		Если ПараметрыОтветаОтСервиса.СтатусОтвета = СтатусыОтвета.ОтветПолучен  Тогда
			
			РезультатОбработки.СтатусСогласия = ПараметрыОтветаОтСервиса.СтатусСогласия;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);
		
	Возврат РезультатОбработки;
	
КонецФункции	

#КонецОбласти

#КонецЕсли