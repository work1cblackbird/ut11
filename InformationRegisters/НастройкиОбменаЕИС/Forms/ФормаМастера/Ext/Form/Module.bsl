 #Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	
	ИспользуетсяНесколькоОрганизаций = ЭлектронноеАктированиеЕИСВызовСервера.
		ИспользуетсяНесколькоОрганизаций();
	
	Если НЕ ИспользуетсяНесколькоОрганизаций И НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = ЭлектронноеАктированиеЕИС.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	ЭлектронноеАктированиеЕИСВызовСервера.
		СкрытьЭлементыФормыПриИспользованииОднойОрганизации(ЭтотОбъект, "Организация");
	
	ЗаполнитьТекущиеНастройки();
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОрганизацияПриИзменении(Элементы.Организация);
	УправлениеЭлементамиНР();
	ОбновитьСостояниеПлагина();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ЭлектронноеАктированиеЕИСГИСНРКлиент.ИмяОповещенияИзменениеНастройкиПлагина() Тогда
		ОбновитьСостояниеПлагина();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодписантыНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Подписанты", Новый Массив);
	Для каждого Строка Из Подписанты Цикл
		Подписант = Новый Структура("ФИО, Должность");
		ЗаполнитьЗначенияСвойств(Подписант, Строка);
		ПараметрыФормы.Подписанты.Добавить(Подписант);
	КонецЦикла;
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕИС.Форма.ФормаПодписантов",
		ПараметрыФормы, ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьТекущиеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияЭтаповОбработкаНавигационнойСсылки(Элемент,
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НавигационнаяСсылкаЛК = "ЛичныйКабинетЕИС";
	НавигационнаяСсылкаИнструкция = "Инструкция";
	НавигационнаяСсылкаМастерНастройки = "МастерНастройки";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = НавигационнаяСсылкаМастерНастройки Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"РаботаМастераНастройкиЗавершение", ЭтотОбъект);
		ГиперссылкаАвтоматическаяНастройка = ГиперссылкаАвтоматическаяНастройка();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ГиперссылкаАвтоматическаяНастройка, ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = НавигационнаяСсылкаИнструкция Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОткрытияИнструкцийЗавершение", ЭтотОбъект);
		ГиперссылкаИнструкция = ГиперссылкаИнструкция();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ГиперссылкаИнструкция, ОписаниеОповещения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = НавигационнаяСсылкаЛК Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьЛичныйКабинетЕИСЗавершение", ЭтотОбъект);
		
		ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
		ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
		ПараметрыЗапускаПрограммы.Оповещение = ОписаниеОповещения;
		
		ГиперссылкаЛК = ГиперссылкаЛичныйКабинет();
		ФайловаяСистемаКлиент.ЗапуститьПрограмму(ГиперссылкаЛК, ПараметрыЗапускаПрограммы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрационныйНомерЕРУЗПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ДанныеЛичногоКабинетаПолучены = Ложь;
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ТокенАвторизацииПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ДанныеЛичногоКабинетаПолучены = Ложь;
	УправлениеЭУ();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменСГИСНРВключенПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ВидеозаписьГИСНРВключена = ВидеозаписьГИСНРВключена И ОбменСГИСНРВключен;
	УправлениеЭлементамиНР();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиВидеоЗаписиОбработкаНавигационнойСсылки(
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);

	Если НЕ ЭлектронноеАктированиеЕИСГИСНРКлиент.ОткрытьНавигационнуюСсылку(
		НавигационнаяСсылкаФорматированнойСтроки,
		ПараметрыФормы) Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидеозаписьГИСНРВключенаПриИзменении(Элемент)

	Модифицированность = Истина;
	УправлениеЭлементамиНР();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	Если Модифицированность И НЕ ДанныеЛичногоКабинетаПолучены Тогда
		ТекстОшибки = ЗаполнитьСведенияОПоставщике();
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураЗаписи = ПодготовитьДанныеЗаписиРегистра();
	СохранитьНастройкиОбменаЕИС(СтруктураЗаписи);
	Модифицированность = Ложь;
	Закрыть(Истина);
	Оповестить(ЭлектронноеАктированиеЕИСКлиент.ИмяСобытияСохраненияНастроекПодключения());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСведенияОбУчастнике(Команда)
	
	Если ЕстьДанныеДляПолученияСведений(Истина) Тогда
		ТекстОшибки = ЗаполнитьСведенияОПоставщике();
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ГиперссылкаЛичныйКабинет()
	
	Возврат ЭлектронноеАктированиеЕИС.ГиперссылкаНаЛичныйКабинетУчастникаГосзакупок();
	
КонецФункции

&НаСервереБезКонтекста
Функция ГиперссылкаИнструкция()
	
	Возврат ЭлектронноеАктированиеЕИС.ГиперссылкаНаИнструкциюПоРучнойНастройкеРабочегоМеста();
	
КонецФункции

&НаСервереБезКонтекста
Функция ГиперссылкаАвтоматическаяНастройка()
	
	Возврат ЭлектронноеАктированиеЕИС.ГиперссылкаНаИнструкциюПоАвтоматическойНастройкеРабочегоМеста();
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояниеПлагина()

	ОбработкаСостояния = Новый ОписаниеОповещения("СостояниеПодключенногоПлагина", ЭтотОбъект);
	ЭлектронноеАктированиеЕИСГИСНРКлиент.ВидеоЗаписьИнициализация(ОбработкаСостояния);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеПодключенногоПлагина(РезультатВызова, ДополнительныеПараметры) Экспорт
	
	ОбновитьСостояниеПлагина();
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаМастераНастройкиЗавершение(ПриложениеЗапущено, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПриложениеЗапущено Тогда
		ТекстОшибки = НСтр("ru='Не удалось открыть страницу загрузки мастера настройки.'");
		ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытияИнструкцийЗавершение(ПриложениеЗапущено, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПриложениеЗапущено Тогда
		ТекстОшибки = НСтр("ru='Не удалось открыть инструкцию.'");
		ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЛичныйКабинетЕИСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат.КодВозврата) Тогда
		Шаблон = НСтр("ru='Не удалось открыть личный кабинет. Операционная система вернула код %1.'");
		ТекстОшибки = СтрШаблон(Шаблон, Результат.КодВозврата);
		ЭлектронноеАктированиеЕИСКлиент.ВывестиОшибку(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПодключенногоПлагина(РезультатВызова, ДополнительныеПараметры) Экспорт
	
	ПлагинПроблемы = РезультатВызова.ВидПроблемы;
	УправлениеЭлементамиНР();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиНР()
	
	ЭлектронноеАктированиеЕИСГИСНР.ДобавитьПодсказкуДляГИСНР(Элементы.НадписьЭтап5);
	СостояниеПодключенияПлагина
		= ЭлектронноеАктированиеЕИСГИСНР.ОписаниеПроблемПлагина(ПлагинПроблемы, Ложь, НЕ ВидеозаписьГИСНРБылаВключена);
	
	Элементы.ВидеозаписьГИСНРВключена.Доступность = ОбменСГИСНРВключен;
	Элементы.ДекорацияНастройкиВидеоЗаписи.Заголовок = СостояниеПодключенияПлагина.Текст;
	Элементы.ГруппаНастройкиГИСНРПроблемы.ЦветФона = СостояниеПодключенияПлагина.Фон;
	Элементы.ГруппаНастройкиГИСНРПроблемы.Доступность = ВидеозаписьГИСНРВключена;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеЗаписиРегистра()
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Организация", Организация);
	СтруктураЗаписи.Вставить("ТокенАвторизации", ТокенАвторизации);
	СтруктураЗаписи.Вставить("РегистрационныйНомерЕРУЗ", РегистрационныйНомерЕРУЗ);
	СтруктураЗаписи.Вставить("ИдентификаторУчастникаДокументооборота",
		ИдентификаторУчастникаДокументооборота);
	СтруктураЗаписи.Вставить("ТипОрганизации",
		Перечисления.ВидыУчастниковЭлектронногоАктированияЕИС.Поставщик);
	СтруктураЗаписи.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
	СтруктураЗаписи.Вставить("ОбменВключен", Истина);
	СтруктураЗаписи.Вставить("ОбменСГИСНРВключен", ОбменСГИСНРВключен);
	СтруктураЗаписи.Вставить("ВидеозаписьГИСНРВключена", ВидеозаписьГИСНРВключена);
	
	Возврат СтруктураЗаписи;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСведенияОПоставщике()
	
	Результат = "";
	
	СтруктураЗаписи = ПодготовитьДанныеЗаписиРегистра();
	РезультатСведенияОПоставщике =
		ЭлектронноеАктированиеЕИС.СведенияОПоставщикеИЕгоПодписантах(Организация, СтруктураЗаписи);
	Если РезультатСведенияОПоставщике.Выполнено Тогда
		СведенияОПоставщике = РезультатСведенияОПоставщике.СведенияОПоставщике;
		ИдентификаторУчастникаДокументооборота =
			СведенияОПоставщике.ИдентификаторУчастникаДокументооборота;
		НаименованиеОрганизации = СведенияОПоставщике.ПолноеНаименование;
		Подписанты.Очистить();
		Для каждого Подписант Из СведенияОПоставщике.Подписанты Цикл
			Строка = Подписанты.Добавить();
			Строка.ФИО = СтрШаблон("%1 %2 %3", Подписант.Фамилия,
				Подписант.Имя, Подписант.Отчество);
			Строка.Должность = Подписант.Должность;
			ЭлектронноеАктированиеЕИС.СохранитьПодписанта(Организация, Подписант)
		КонецЦикла;
		СклоняемаяСтрока = НСтр("ru='сотрудник'");
		КоличествоПодписантов = Подписанты.Количество();
		ПодписантыНадпись = ПолучитьСклоненияСтрокиПоЧислу(
			СклоняемаяСтрока,
			КоличествоПодписантов, ,
			"ЧС=Количественное",
			"ПД=Именительный")[0];
		ДанныеЛичногоКабинетаПолучены = Истина;
	Иначе
		Результат = РезультатСведенияОПоставщике.ОписаниеОшибки;
		ДанныеЛичногоКабинетаПолучены = Ложь;
	КонецЕсли;
	
	УправлениеЭУ();
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УправлениеЭУ()
	
	Если ДанныеЛичногоКабинетаПолучены Тогда
		Элементы.НаименованиеОрганизации.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Элементы.ИдентификаторУчастникаДокументооборота.ЦветТекста = ЦветаСтиля.ЦветТекстаПоля;
		Элементы.ПодписантыНадпись.ЦветТекста = ЭлектронноеАктированиеЕИС.ЦветТекстаГиперссылки();
		Элементы.ПодписантыНадпись.Гиперссылка = Истина;
	Иначе
		НаименованиеОрганизации = НадписьТребуетсяПолучитьЗначение();
		ИдентификаторУчастникаДокументооборота = НадписьТребуетсяПолучитьЗначение();
		ПодписантыНадпись = НадписьТребуетсяПолучитьЗначение();
		
		СерыйЦвет = ЭлектронноеАктированиеЕИС.ЦветТекстаСерый();
		Элементы.НаименованиеОрганизации.ЦветТекста = СерыйЦвет;
		Элементы.ИдентификаторУчастникаДокументооборота.ЦветТекста = СерыйЦвет;
		Элементы.ПодписантыНадпись.ЦветТекста = СерыйЦвет;
		Элементы.ПодписантыНадпись.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОбменаЕИС(СтруктураЗаписи)
	
	НоваяНастройка = РегистрыСведений.НастройкиОбменаЕИС.СоздатьМенеджерЗаписи();
	НоваяНастройка.Организация = СтруктураЗаписи.Организация;
	НоваяНастройка.Прочитать();
	ЗаполнитьЗначенияСвойств(НоваяНастройка, СтруктураЗаписи);
	НоваяНастройка.ОбменВключен = Истина;
	
	НоваяНастройка.Записать();
	
	Если ЭлектронноеАктированиеЕИС.РазрешаетсяИспользоватьЭлектронноеАктированиеДляПоставщиков()
		И НЕ ЭлектронноеАктированиеЕИС.ИспользоватьЭлектронноеАктированиеВЕИС() Тогда
		УстановитьПривилегированныйРежим(Истина);
		// Включаем функциональную опцию.
		Константы.ИспользоватьЭлектронноеАктированиеВЕИС.Установить(Истина);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НадписьТребуетсяПолучитьЗначение()
	
	Возврат НСтр("ru='<не заполнено>'");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТекущиеНастройки()
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = Новый Структура("Организация", Организация);
		Выборка = РегистрыСведений.НастройкиОбменаЕИС.Выбрать(Отбор);
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		Иначе
			ОбменСГИСНРВключен = Истина;
			ВидеозаписьГИСНРВключена = Ложь;
		КонецЕсли;
		ВидеозаписьГИСНРБылаВключена = ВидеозаписьГИСНРВключена;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДанныеДляПолученияСведений(ВыводитьОшибки = Ложь)
	
	ДанныеЗаполнены = Истина;
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru='Не заполнена организация.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Организация");
		КонецЕсли;
		ДанныеЗаполнены = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РегистрационныйНомерЕРУЗ) Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru='Не заполнен номер реестровой записи в ЕРУЗ.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "РегистрационныйНомерЕРУЗ");
		КонецЕсли;
		ДанныеЗаполнены = Ложь;
	Иначе
		Если СтрДлина(СокрЛП(РегистрационныйНомерЕРУЗ)) < 8 Тогда
			Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("ru='Длина номера реестровой записи в ЕРУЗ меньше 8 цифр.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "РегистрационныйНомерЕРУЗ");
			КонецЕсли;
			ДанныеЗаполнены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТокенАвторизации) Тогда
		Если ВыводитьОшибки Тогда
			ТекстСообщения = НСтр("ru='Не заполнен токен-ключ авторизации.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ТокенАвторизации");
		КонецЕсли;
		ДанныеЗаполнены = Ложь;
	Иначе
		Если СтрНайти(ТокенАвторизации, " ") > 0 Тогда
			Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("ru='Токен-ключ содержит пробелы.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ТокенАвторизации");
			КонецЕсли;
			ДанныеЗаполнены = Ложь;
		КонецЕсли;
		Если СтрДлина(СокрЛП(ТокенАвторизации)) < 36 Тогда
			Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("ru='Длина токен-ключа меньше 36 символов.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ТокенАвторизации");
			КонецЕсли;
			ДанныеЗаполнены = Ложь;
		КонецЕсли;
		Если НЕ СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(СокрЛП(ТокенАвторизации)) Тогда
			Если ВыводитьОшибки Тогда
				ТекстСообщения = НСтр("ru='Токен-ключ имеет неверный формат.'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ТокенАвторизации");
			КонецЕсли;
			ДанныеЗаполнены = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗаполнены;
	
КонецФункции

#КонецОбласти
