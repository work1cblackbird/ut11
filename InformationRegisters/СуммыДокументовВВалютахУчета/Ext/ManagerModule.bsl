#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует таблицу сумм документов в валютах регламентированного и управленческого учета.
// Сохраняет пересчитанные данные документа в регистр СуммыДокументовВВалютахУчета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос отражения документа.
// 	ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
// 	Регистры - Неопределено, Структура, Строка - Список регистров для отражения.
// 		                                         Если Неопределено, то инициализруется только ВтСуммыДокументовВВалютахУчета.
// 	ТекстЗапросаДанныхДокументов - Строка - Запрос источников данных документов, которые используются для проведения и нуждаются в пересчете
// 		Описание полей текста запроса:
//        ИсточникДанных - Строка - Имя источника данных - является гранулой пересчета данных. Например, "Товары".
//        РаспределятьОбщуюСумму - Булево - Если Истина, то выполняется пересчет общей суммы источника в валюты учета и распределение ее на строки.
//                                          Если Ложь, то выполняется построчный пересчет сумм по курсу.
//        
//        Ссылка - ДокументСсылка - Ссылка на документ
//        Дата - Дата - Дата документа.
//        Организация - СправочникСсылка.Организации - Организация документа.
//        ВалютаДокумента - СправочникСсылка.Валюты - Валюта документа.
//        ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с клиентом или поставщиком. Обязательно указывается, если ТипРасчетов заполнен.
//        ПериодБазыНДС - Дата - Дата, на которую выполняется определение базы начисления НДС.
//        ДатаКурса - Дата - Дата для получения курсов валют.
//        
//        НомерСтроки - Число - Номер строки табличной части. Если данные получаются по шапке, то 0.
//        ИдентификаторСтроки - Строка - Уникальные идентификатор данных документа (может указываться как для строки табличной части, так и для "шапки" документа).
//        
//        СуммаБезНДС - Число - Сумма НДС по строке в валюте документа.
//        СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - Ставка НДС в строке табличной части или в "шапке" документа.
//        СуммаНДС - Число - Сумма НДС по строке в валюте документа.
//        СуммаВзаиморасчетов - Число - Сумма в валюте взаиморасчетов.
//        СуммаНДСВзаиморасчетов - Число - Сумам НДС в валюте взаиморасчетов.
//        СуммаБезНДСРегл - Число - Сумма без НДС в валюте регламентированного учета.
//        СуммаБезНДСУпр - Число - Сумма без НДС в валюте управленческого учета учета.
//        
//        ОтражаетсяВРасчетах - Булево - Признак того, что строка влияет на взаиморасчеты с контрагентами (образует фактическую или плановую задолженность) 
//        ОбъектРасчетов - НЕОПРЕДЕЛЕНО, СправочникСсылка.ОбъектыРасчетов - Объект расчетов должен быть заполнен, если ОтражаетсяВРасчетах = Истина
//        ПересчитыватьПоДаннымРасчетов - Булево - Признак того, что требуется пересчет сумм в валюте регл. и упр. учета по данным взаиморасчетов.
//                                                 Пересчет необходим, если документ выполняет зачет авансов.
//
// Шаблон текста запроса
// 	ВЫБРАТЬ
//	|	""ДанныеДокумента"" КАК ИсточникДанных,
//	|	ЛОЖЬ КАК РаспределятьОбщуюСумму,
//	|	ТаблицаДокумента.Ссылка КАК Ссылка,
//	|	ТаблицаДокумента.Дата КАК Дата,
//	|	ТаблицаДокумента.Организация КАК Организация,
//	|	ТаблицаДокумента.Валюта КАК ВалютаДокумента,
//	|	ТаблицаДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
//	|	ТаблицаДокумента.Дата КАК ПериодБазыНДС,
//	|	ТаблицаДокумента.Дата КАК ДатаКурса,
//	|
//	|	0 КАК НомерСтроки,
//	|	"""" КАК ИдентификаторСтроки,
//	|	ТаблицаДокумента.СуммаСНДС - ТаблицаДокумента.СуммаНДС КАК СуммаБезНДС,
//	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС,
//	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,`
//	|	ТаблицаДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
//	|	ТаблицаДокумента.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
//	|	0 КАК СуммаБезНДСРегл,
//	|	0 КАК СуммаБезНДСУпр,
//	|	
//	|	ИСТИНА КАК ОтражаетсяВРасчетах,
//	|	ТаблицаДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
//	|	ИСТИНА КАК ПересчитыватьПоДаннымРасчетов
//	|ИЗ
//	|	<ПолноеИмяДокумента> КАК ТаблицаДокумента
//	|
//	|ГДЕ
//	|	ТаблицаДокумента.Ссылка В (&Ссылка)".
//
Процедура СформироватьПоДаннымДокумента(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанныхДокументов) Экспорт
	
	ИмяРегистра = Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета.Имя;
	Если Регистры <> Неопределено И НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли;
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтСуммыДокументовВВалютахУчета", ТекстыЗапроса) 
		ИЛИ Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВтСуммыДокументовВВалютахУчета") <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив();
	
	ВалютаУправленческогоУчета = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	Если Не ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
		МассивСтрок.Добавить(НСтр("ru = 'Не заполнена валюта управленческого учета'"));
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок.Добавить(НСтр("ru = 'Для настройки необходимо перейти в раздел ""НСИ и администрирование""-""Предприятие""-""Валюты"".'"));
		ВызватьИсключение СтрСоединить(МассивСтрок, Символы.ПС);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ИсточникДанных              КАК ИсточникДанных,
	|	ДанныеДокумента.РаспределятьОбщуюСумму      КАК РаспределятьОбщуюСумму,
	|	ДанныеДокумента.Ссылка                      КАК Регистратор,
	|	ДанныеДокумента.Дата                        КАК Период,
	|	ДанныеДокумента.Организация                 КАК Организация,
	|	ДанныеДокумента.ВалютаДокумента             КАК Валюта,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ВалютаВзаиморасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЕСТЬNULL(ОбъектыРасчетов.ВалютаВзаиморасчетов, НЕОПРЕДЕЛЕНО) 
	|		ИНАЧЕ ДанныеДокумента.ВалютаВзаиморасчетов 
	|	КОНЕЦ                                       КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ПериодБазыНДС               КАК ПериодБазыНДС,
	|	ДанныеДокумента.ДатаКурса                   КАК ДатаКурса,
	|
	|	ДанныеДокумента.НомерСтроки                 КАК НомерСтроки,
	|	ДанныеДокумента.ИдентификаторСтроки         КАК ИдентификаторСтроки,
	|	ДанныеДокумента.СуммаБезНДС                 КАК СуммаБезНДС,
	|	ДанныеДокумента.СтавкаНДС                   КАК СтавкаНДС,
	|	ДанныеДокумента.СуммаНДС                    КАК СуммаНДС,
	|	ДанныеДокумента.СуммаВзаиморасчетов         КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.СуммаНДСВзаиморасчетов      КАК СуммаНДСВзаиморасчетов,
	|	ДанныеДокумента.СуммаБезНДСРегл             КАК СуммаБезНДСРегл,
	|	ДанныеДокумента.СуммаБезНДСУпр              КАК СуммаБезНДСУпр,
	|	
	|	ДанныеДокумента.ОтражаетсяВРасчетах КАК ОтражаетсяВРасчетах,
	|	ДанныеДокумента.ОбъектРасчетов      КАК ОбъектРасчетов,
	|	ДанныеДокумента.ПересчитыватьПоДаннымРасчетов КАК ПересчитыватьПоДаннымРасчетов,
	|	ЕСТЬNULL(ОбъектыРасчетов.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ЕСТЬNULL(
	|		ОбъектыРасчетов.Договор.ВариантКурсаДоговора, 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК ВариантКурсаДоговора
	|	
	|ПОМЕСТИТЬ ДанныеДокументаПредварительная
	|ИЗ
	|	&ТекстЗапросаДанныхДокументов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ДанныеДокумента.ОбъектРасчетов = ОбъектыРасчетов.Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ИдентификаторСтроки
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаДанныхДокументов", "(" + ТекстЗапросаДанныхДокументов + ")");	
	ЗапросИнициализации = Новый Запрос;
	ЗапросИнициализации.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросИнициализации.УстановитьПараметр("ВалютаУправленческогоУчета",     ВалютаУправленческогоУчета);
	Для каждого Параметр Из Запрос.Параметры Цикл
		ЗапросИнициализации.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	ЗапросИнициализации.Текст = ТекстЗапроса;
	ЗапросИнициализации.Выполнить();
	
	ПересчитатьТаблицуВВалютыУчета(ЗапросИнициализации.МенеджерВременныхТаблиц);
	
	ЗапросИнициализации.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.ИсточникДанных                          КАК ИсточникДанных,
	|	ДанныеДокументов.РаспределятьОбщуюСумму                  КАК РаспределятьОбщуюСумму,
	|	ДанныеДокументов.Регистратор                             КАК Ссылка,
	|	ДанныеДокументов.Период                                  КАК Дата,
	|	ДанныеДокументов.Организация                             КАК Организация,
	|	ДанныеДокументов.Валюта                                  КАК ВалютаДокумента,
	|	ДанныеДокументов.ВалютаВзаиморасчетов                    КАК ВалютаВзаиморасчетов,
	|	ДанныеДокументов.ПериодБазыНДС                           КАК ПериодБазыНДС,
	|
	|	ДанныеДокументов.ИдентификаторСтроки                     КАК ИдентификаторСтроки,
	|	ДанныеДокументов.НомерСтроки                             КАК НомерСтроки,
	|	ДанныеДокументов.СтавкаНДС                               КАК СтавкаНДС,
	|	ДанныеДокументов.СуммаБезНДС + ДанныеДокументов.СуммаНДС КАК СуммаСНДС,
	|	ДанныеДокументов.СуммаНДС                                КАК СуммаНДС,
	|	ДанныеДокументов.СуммаБезНДС                             КАК СуммаБезНДС,
	|	ДанныеДокументов.СуммаВзаиморасчетов                     КАК СуммаВзаиморасчетов,
	|	ДанныеДокументов.СуммаНДСВзаиморасчетов                  КАК СуммаНДСВзаиморасчетов,
	|	
	|	ДанныеДокументов.ОтражаетсяВРасчетах КАК ОтражаетсяВРасчетах,
	|	ДанныеДокументов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеДокументов.ПересчитыватьПоДаннымРасчетов КАК ПересчитыватьПоДаннымРасчетов,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета 
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|				ТОГДА ДанныеДокументов.СуммаВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСУпр + ДанныеДокументов.СуммаНДСУпр
	|		КОНЕЦ) КАК СуммаСНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр,
	|		ВЫБОР 
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСУпр
	|		КОНЕЦ) КАК СуммаБезНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСУпр,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета 
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаНДСУпр
	|		КОНЕЦ) КАК СуммаНДСУпр,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = Организации.ВалютаРегламентированногоУчета
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСРегл 
	|		КОНЕЦ 
	|	) КАК СуммаБезНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.СуммаНДСРегл, 
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = Организации.ВалютаРегламентированногоУчета 
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаНДСРегл
	|		КОНЕЦ
	|	) КАК СуммаНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = Организации.ВалютаРегламентированногоУчета
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаВзаиморасчетов <> 0
	|				ТОГДА ДанныеДокументов.СуммаВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.СуммаБезНДСРегл + ДанныеДокументов.СуммаНДСРегл
	|		КОНЕЦ
	|	) КАК СуммаСНДСРегл,
	|
	|	ЕСТЬNULL(Суммы.БазаНДСРегл,
	|		ВЫБОР
	|			КОГДА ДанныеДокументов.СтавкаНДС В (ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|				ТОГДА 0
	|			КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = Организации.ВалютаРегламентированногоУчета
	|			      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|			      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|			ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|			ИНАЧЕ ДанныеДокументов.БазаНДСРегл
	|		КОНЕЦ 
	|	) КАК БазаНДСРегл,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Суммы.СуммаПриведенная, 0) = 0
	|			ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|		ИНАЧЕ Суммы.СуммаПриведенная
	|	КОНЕЦ КАК СуммаПриведенная,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Суммы.СуммаПриведеннаяРегл, 0) = 0
	|			ТОГДА ЕСТЬNULL(Суммы.СуммаБезНДСРегл,
	|					ВЫБОР
	|						КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = Организации.ВалютаРегламентированногоУчета
	|						      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|						      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|							ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|						ИНАЧЕ ДанныеДокументов.СуммаБезНДСРегл 
	|					КОНЕЦ)
	|		ИНАЧЕ Суммы.СуммаПриведеннаяРегл
	|	КОНЕЦ КАК СуммаПриведеннаяРегл,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Суммы.СуммаПриведеннаяУпр, 0) = 0
	|			ТОГДА ЕСТЬNULL(Суммы.СуммаБезНДСУпр,
	|					ВЫБОР 
	|						КОГДА ДанныеДокументов.ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|						      И ДанныеДокументов.Валюта <> ДанныеДокументов.ВалютаВзаиморасчетов
	|						      И ДанныеДокументов.СуммаНДСВзаиморасчетов <> 0
	|							ТОГДА ДанныеДокументов.СуммаВзаиморасчетов - ДанныеДокументов.СуммаНДСВзаиморасчетов
	|						ИНАЧЕ ДанныеДокументов.СуммаБезНДСУпр
	|					КОНЕЦ)
	|		ИНАЧЕ Суммы.СуммаПриведеннаяУпр
	|	КОНЕЦ КАК СуммаПриведеннаяУпр,
	|	ВЫБОР
	|		КОГДА Суммы.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИзРегистра
	|
	|ПОМЕСТИТЬ ВтСуммыДокументовВВалютахУчета
	|ИЗ
	|	СуммыДокументовВВалютахУчета КАК ДанныеДокументов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО Организации.Ссылка = ДанныеДокументов.Организация
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		ДанныеДокументов.Регистратор = Суммы.Регистратор
	|		И ДанныеДокументов.Период = Суммы.Период
	|		И ДанныеДокументов.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|		И ДанныеДокументов.ВалютаВзаиморасчетов = Суммы.ВалютаВзаиморасчетов
	|		И ДанныеДокументов.Валюта = Суммы.Валюта
	|		И ДанныеДокументов.СтавкаНДС = Суммы.СтавкаНДС
	|		И ДанныеДокументов.СуммаВзаиморасчетов = Суммы.СуммаВзаиморасчетов
	|		И ДанныеДокументов.СуммаБезНДС = Суммы.СуммаБезНДС
	|		И ДанныеДокументов.СуммаНДС = Суммы.СуммаНДС
	|		И ДанныеДокументов.Валюта = Суммы.Валюта
	|		И ДанныеДокументов.ВалютаВзаиморасчетов = Суммы.ВалютаВзаиморасчетов
	|		И ДанныеДокументов.ПериодБазыНДС = Суммы.ПериодБазыНДС
	|		И ДанныеДокументов.ОтражаетсяВРасчетах = Суммы.ОтражаетсяВРасчетах
	|		И ДанныеДокументов.ОбъектРасчетов = Суммы.ОбъектРасчетов
	|		И ДанныеДокументов.ПересчитыватьПоДаннымРасчетов = Суммы.ПересчитыватьПоДаннымРасчетов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ИдентификаторСтроки
	|;
	|
	|//////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СуммыДокументовВВалютахУчета
	|";
	УстановитьПривилегированныйРежим(Истина);
	ЗапросИнициализации.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		
		Если НЕ Запрос.Параметры.Свойство("ВалютаУправленческогоУчета") Тогда
			Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",     ВалютаУправленческогоУчета);
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Суммы.Ссылка КАК Регистратор,
		|	Суммы.Дата КАК Период,
		|	
		|	Суммы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	
		|	Суммы.СуммаБезНДС КАК СуммаБезНДС,
		|	Суммы.СуммаНДС  КАК СуммаНДС,
		|	
		|	Суммы.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
		|	Суммы.БазаНДСРегл КАК БазаНДСРегл,
		|	Суммы.СуммаНДСРегл КАК СуммаНДСРегл,
		|	Суммы.СуммаБезНДСУпр КАК СуммаБезНДСУпр,
		|	Суммы.СуммаНДСУпр КАК СуммаНДСУпр,
		|	Суммы.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов,
		|	Суммы.СуммаНДСВзаиморасчетов  КАК СуммаНДСВзаиморасчетов,
		|	
		|	Суммы.ВалютаДокумента КАК Валюта,
		|	Суммы.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	Суммы.СтавкаНДС КАК СтавкаНДС,
		|	
		|	Суммы.ПериодБазыНДС КАК ПериодБазыНДС,
		|
		|	Суммы.ОтражаетсяВРасчетах КАК ОтражаетсяВРасчетах,
		|	ВЫБОР
		|		КОГДА НЕ Суммы.ОтражаетсяВРасчетах
		|			ТОГДА НЕОПРЕДЕЛЕНО
		|		ИНАЧЕ Суммы.ОбъектРасчетов
		|	КОНЕЦ КАК ОбъектРасчетов,
		|	(Суммы.ОтражаетсяВРасчетах И Суммы.ПересчитыватьПоДаннымРасчетов) КАК ПересчитыватьПоДаннымРасчетов,
		|	ВЫБОР
		|		КОГДА (Суммы.ОтражаетсяВРасчетах И Суммы.ПересчитыватьПоДаннымРасчетов)
		|			ТОГДА ЕСТЬNULL(Суммы.ОбъектРасчетов.ТипРасчетов, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТипРасчетов,
		|	Суммы.СуммаПриведенная КАК СуммаПриведенная,
		|	Суммы.СуммаПриведеннаяУпр КАК СуммаПриведеннаяУпр,
		|	Суммы.СуммаПриведеннаяРегл КАК СуммаПриведеннаяРегл
		|
		|ИЗ
		|	ВтСуммыДокументовВВалютахУчета КАК Суммы
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|	ПО
		|		Суммы.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Суммы.ИсточникДанных,
		|	Суммы.НомерСтроки";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	КонецЕсли;
	
КонецПроцедуры

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета);
		
	КонецЕсли;
	
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета);
		
	КонецЕсли;

	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "СуммыДокументовВВалютахУчета");
	
КонецПроцедуры

#КонецОбласти

// Синхронизация регл.сумм в учетных регистрах по данным СуммыДокументовВВалютахУчета
// Параметры:
// 	РегистраторыСумм - ДокументСсылка, Массив - одиночный ДокументСсылка или массив типов ДокументСсылка.
Процедура ОбновитьДвиженияДокументов(РегистраторыСумм) Экспорт
	
	СоставОбновления = Новый Структура();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СоставОбновления, УчетНДСУП.РегистрыУчетаНДС());
	
	// регистры партий к синхронизации регл.сумм
	СоставОбновления.Вставить("ПрочиеДоходы", РегистрыНакопления.ПрочиеДоходы.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ПрочиеРасходы", РегистрыНакопления.ПрочиеРасходы.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ПартииПрочихРасходов", РегистрыНакопления.ПартииПрочихРасходов.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ПрочаяВыручка", РегистрыНакопления.ПрочаяВыручка.СоздатьНаборЗаписей());
	// регистры себестоимости к синхронизации регл.сумм
	СоставОбновления.Вставить("СебестоимостьТоваров", РегистрыНакопления.СебестоимостьТоваров.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ВыручкаИСебестоимостьПродаж", РегистрыНакопления.ВыручкаИСебестоимостьПродаж.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("Закупки", РегистрыНакопления.Закупки.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ПрочиеАктивыПассивы", РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ДвиженияКонтрагентДоходыРасходы", РегистрыНакопления.ДвиженияКонтрагентДоходыРасходы.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ДвиженияКонтрагентКонтрагент", РегистрыНакопления.ДвиженияКонтрагентКонтрагент.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ДвиженияПоПрочимАктивамПассивам", РегистрыНакопления.ДвиженияПоПрочимАктивамПассивам.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ТоварыКОформлениюОтчетовКомитенту", РегистрыНакопления.ТоварыКОформлениюОтчетовКомитенту.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("УслугиКОформлениюОтчетовПринципалу", РегистрыНакопления.УслугиКОформлениюОтчетовПринципалу.СоздатьНаборЗаписей());
	СоставОбновления.Вставить("ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках", РегистрыНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.СоздатьНаборЗаписей());
	
	РегистрыПартий = РасчетСебестоимостиЛокализация.РегистрыУчетаПартий();
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СоставОбновления, РегистрыПартий);
	
	//++ Локализация


	//-- Локализация
	
	Регистраторы = ОбщегоНазначенияУТКлиентСервер.Массив(РегистраторыСумм);
	Для Каждого Ссылка Из Регистраторы Цикл
		ОбновитьДвиженияДокумента(Ссылка, СоставОбновления);
	КонецЦикла;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьИсправлениеДокументов") Тогда
		ДокументыСторно = ИсправлениеДокументов.СторноДокументы(Регистраторы);
		Для каждого СтрокаТаблицы Из ДокументыСторно Цикл
			ОбновитьДвиженияДокумента(СтрокаТаблицы.Ссылка, СоставОбновления);	
		КонецЦикла;
	КонецЕсли;

	//++ Локализация


	//-- Локализация

	СоставОбновления.Удалить("ПрочиеДоходы");
	СоставОбновления.Удалить("ПрочиеРасходы");
	СоставОбновления.Удалить("ПрочаяВыручка");
	СоставОбновления.Удалить("ПартииПрочихРасходов");
	СоставОбновления.Удалить("СебестоимостьТоваров");
	СоставОбновления.Удалить("ВыручкаИСебестоимостьПродаж");
	СоставОбновления.Удалить("Закупки");
	СоставОбновления.Удалить("ДвиженияКонтрагентДоходыРасходы");
	СоставОбновления.Удалить("ДвиженияКонтрагентКонтрагент");
	
	СоставОбновления.Удалить("ТоварыКОформлениюОтчетовКомитенту");

	//++ Локализация


	//-- Локализация
	
	Для Каждого РегистрПартий Из РегистрыПартий Цикл
		СоставОбновления.Удалить(РегистрПартий.Ключ);
	КонецЦикла;
	
	СФ = УчетНДСУП.СчетаФактурыВыданныеПоДокументамОснованиям(Регистраторы, Истина);
	Для Каждого Документ Из СФ Цикл
		Если Не Документ.РучнаяКорректировкаСуммДокумента
			И (Документ.Корректировочный Или Документ.Исправление) Тогда
			// Для корректировочных и исправлений СФ перепроводим документ,
			// при этом дополнительно перезаполняется табличная часть Товары.
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаДокументов_Отключить", Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбновитьДвиженияДокумента(Документ.Ссылка, СоставОбновления);
		КонецЕсли;
	КонецЦикла;
	
	СФ = УчетНДСУП.СчетаФактурыПолученныеПоДокументамОснованиям(Регистраторы, Истина);
	Для Каждого Документ Из СФ Цикл
		Если Не Документ.РучнаяКорректировкаСуммДокумента Тогда
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			ДокументОбъект.ДополнительныеСвойства.Вставить("ПроверкаДокументов_Отключить", Истина);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ОбновитьДвиженияДокумента(Документ.Ссылка, СоставОбновления);
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьУправленческийБаланс") Тогда
		
		Обработки.ДвиженияАктивовПассивов.ОтразитьДокументыВУправленческомБалансе(Регистраторы);
		
	КонецЕсли;// Необходимо формировать упр. баланс
	
КонецПроцедуры

// Запускает распределение сумм документов валютах регламентированного и управленческого учета, если это нужно.
// Условия пересчета:
// 1. В регистре СуммыДокументовВВалютахУчета для пересчитываемого регистратора должен быть заполнен реквизит ТипРасчетов.
// 2. Сумма строк в валюте регламентированного или управленческого учета должна отличаться от суммы движений по регистрам расчетов.
// Параметры:
//		МассивДокументов - Массив из ДокументСсылка - Массив документов, по которым нужно проверить и запустить пересчет сумм.
// Возвращаемое Значение:
//		Массив из ДокументСсылка - массив документов, по которым были обновлены данные регистра сведений.
//
Функция РассчитатьСуммыДокументовВВалютахУчета(МассивДокументов) Экспорт
	
	Запрос = Новый Запрос;
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ЭтоПроверка", Ложь);
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", НоваяАрхитектураВзаиморасчетов);
	Запрос.УстановитьПараметр("ПоВсемДокументам", Ложь);
	
	// Запрос документов, по которым суммы в валютах учета не совпадают с данными взаиморасчетов.
	Запрос.Текст = ТекстЗапросаДокументовДляПересчета();
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	КоличествоРезультатов = МассивРезультатов.Количество();
	
	ТаблицаДокументовДляПересчета = МассивРезультатов[КоличествоРезультатов-1].Выгрузить();
	
	Если (ТаблицаДокументовДляПересчета.Количество() > 0)
		И Константы.РаспределятьФактическиеРасчетыФоновымЗаданием.Получить() Тогда
		ВызватьИсключение ВзаиморасчетыСервер.ТекстПредупрежденияЗагрузкаДокументовВзаиморасчетов();
	КонецЕсли;
	
	МассивДокументовСКлиентами = ТаблицаДокументовДляПересчета.Скопировать(
		Новый Структура("ТипРасчетов",Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом)).ВыгрузитьКолонку("РасчетныйДокумент");
	МассивДокументовСПоставщиками = ТаблицаДокументовДляПересчета.Скопировать(
		Новый Структура("ТипРасчетов",Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)).ВыгрузитьКолонку("РасчетныйДокумент");
	
	Если МассивДокументовСКлиентами.Количество() > 0 Тогда
		РассчитатьПоДаннымВзаиморасчетов("РасчетыСКлиентами", МассивДокументовСКлиентами);
	КонецЕсли;
	Если МассивДокументовСПоставщиками.Количество() > 0 Тогда
		РассчитатьПоДаннымВзаиморасчетов("РасчетыСПоставщиками", МассивДокументовСПоставщиками);
	КонецЕсли;
	
	МассивИзмененныхДокументов = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИзмененныхДокументов, МассивДокументовСКлиентами);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивИзмененныхДокументов, МассивДокументовСПоставщиками);
	
	Если НоваяАрхитектураВзаиморасчетов Тогда
		МассивДокументовДляДисконтирования = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			МассивДокументов,
			МассивИзмененныхДокументов);
		Если МассивДокументовДляДисконтирования.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				МассивИзмененныхДокументов,
				РассчитатьДисконтирование(МассивДокументовДляДисконтирования));
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивИзмененныхДокументов;
	
КонецФункции

// Выполняет распределение сумм документов валютах регламентированного и управленческого учета по данным взаиморасчетов.
// 
// Параметры:
// 	ТипРасчетов - Строка - Тип расчетов, по данным которых необходимо рассчитать суммы.
// 	                       Может принимать значения "РасчетыСКлиентами" или "РасчетыСПоставшиками".
// 	МассивДокументов - Неопределено, Массив - Документы, по которым нужно рассчитать суммы.
// 	                                          Если Неопределено, то расчет выполняется по всем документам.
//
Процедура РассчитатьПоДаннымВзаиморасчетов(ТипРасчетов, МассивДокументов) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.Период КАК Период,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.КорректировкаПриобретения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКорректировкаПриобретения,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|			ТОГДА ИСТИНА 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКорректировкаРеализации,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.КорректировкаРеализации)
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование 
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.КорректировкаПриобретения)
	|			ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ОснованиеКорректировки,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|				И ПриобретениеТоваровУслуг.ДатаКурсаВалютыДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПриобретениеТоваровУслуг.ДатаКурсаВалютыДокумента
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ПриобретениеУслугПрочихАктивов)
	|				И ПриобретениеУслугПрочихАктивов.ДатаКурсаВалютыДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ПриобретениеУслугПрочихАктивов.ДатаКурсаВалютыДокумента
	|		ИНАЧЕ ДанныеРегистра.Период 
	|	КОНЕЦ КАК ДатаКурса
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютахУчета КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ПО ДанныеРегистра.Регистратор = ПриобретениеТоваровУслуг.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|		ПО ДанныеРегистра.Регистратор = ПриобретениеУслугПрочихАктивов.Ссылка
	|
	|ГДЕ
	|	ДанныеРегистра.ТипРасчетов = &ТипРасчетов
	|	И ДанныеРегистра.ПересчитыватьПоДаннымРасчетов
	|	И (ДанныеРегистра.Валюта <> ДанныеРегистра.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|		И ДанныеРегистра.ВалютаВзаиморасчетов <> ДанныеРегистра.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|		ИЛИ ДанныеРегистра.Валюта <> &ВалютаУправленческогоУчета
	|			И ДанныеРегистра.ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета)
	|	И ДанныеРегистра.Регистратор В (&МассивДокументов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	Период
	|;
	|
	////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Ссылка,
	|	ДанныеРегистра.Активность КАК Активность,
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	ДанныеРегистра.СуммаБезНДС          КАК СуммаБезНДС,
	|	ДанныеРегистра.СуммаНДС             КАК СуммаНДС,
	|	ДанныеРегистра.СуммаБезНДСРегл      КАК СуммаБезНДСРегл,
	|	ДанныеРегистра.СуммаНДСРегл         КАК СуммаНДСРегл,
	|	ДанныеРегистра.БазаНДСРегл          КАК БазаНДСРегл,
	|	ДанныеРегистра.СуммаБезНДСУпр       КАК СуммаБезНДСУпр,
	|	ДанныеРегистра.СуммаНДСУпр          КАК СуммаНДСУпр,
	|	ДанныеРегистра.СуммаВзаиморасчетов  КАК СуммаВзаиморасчетов,
	|	ДанныеРегистра.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|
	|	ДанныеРегистра.Валюта                     КАК Валюта,
	|	ДанныеРегистра.ВалютаВзаиморасчетов       КАК ВалютаВзаиморасчетов,
	|	ДанныеРегистра.СтавкаНДС                  КАК СтавкаНДС,
	|	ДанныеРегистра.ТипРасчетов                КАК ТипРасчетов,
	|	ДанныеРегистра.ОбъектРасчетов             КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Организация               КАК Организация,
	|	ОбъектыРасчетов.Договор                   КАК Договор,
	|	ОбъектыРасчетов.ОплатаВВалюте             КАК ОплатаВВалюте,
	|	ЕСТЬNULL(
	|		ОбъектыРасчетов.Договор.ВариантКурсаДоговора, 
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыКурсаДоговора.Переменный)) КАК ВариантКурсаДоговора,
	|	ДанныеРегистра.ПериодБазыНДС              КАК ПериодБазыНДС,
	|	ТаблицаДокументов.ДатаКурса               КАК ДатаКурса,
	|	ДанныеРегистра.ОтражаетсяВРасчетах        КАК ОтражаетсяВРасчетах,
	|	ДанныеРегистра.ПересчитыватьПоДаннымРасчетов КАК ПересчитыватьПоДаннымРасчетов,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ТипРасчетов = &ТипРасчетов
	|			И (ДанныеРегистра.СуммаБезНДС + ДанныеРегистра.СуммаНДС) <> 0
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьСуммы,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ТипРасчетов = &ТипРасчетов
	|		ТОГДА ДанныеРегистра.СуммаБезНДС + ДанныеРегистра.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.ТипРасчетов = &ТипРасчетов
	|		ТОГДА ДанныеРегистра.СуммаВзаиморасчетов
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВзаиморасчетовДляПересчета,
	|	
	|	ТаблицаДокументов.ЭтоКорректировкаПриобретения КАК ЭтоКорректировкаПриобретения,
	|	ТаблицаДокументов.ЭтоКорректировкаРеализации КАК ЭтоКорректировкаРеализации,
	|
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаБезНДС + ДанныеРегистра.СуммаНДС < 0
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСторно
	|
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютахУчета КАК ДанныеРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
	|		ПО ДанныеРегистра.Регистратор = ТаблицаДокументов.Регистратор
	|			И ДанныеРегистра.Период = ТаблицаДокументов.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ДанныеРегистра.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|	
	|УПОРЯДОЧИТЬ ПО 
	|	ЭтоКорректировкаПриобретения 
	|
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	СУММА(СуммаСНДС),
	|	СУММА(СуммаБезНДСРегл),
	|	СУММА(СуммаНДСРегл),
	|	СУММА(СуммаБезНДСУпр),
	|	СУММА(СуммаНДСУпр),
	|	СУММА(СуммаВзаиморасчетовДляПересчета),
	|	МАКСИМУМ(ВалютаВзаиморасчетов),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ТипРасчетов),
	|	МАКСИМУМ(ПериодБазыНДС),
	|	МАКСИМУМ(ДатаКурса),
	|	МАКСИМУМ(ЭтоКорректировкаПриобретения),
	|	МАКСИМУМ(ЭтоКорректировкаРеализации),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Договор),
	|	МАКСИМУМ(ОплатаВВалюте),
	|	МАКСИМУМ(ВариантКурсаДоговора)
	|ПО
	|	ДанныеРегистра.Регистратор КАК Ссылка,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА ДанныеРегистра.СуммаБезНДС + ДанныеРегистра.СуммаНДС < 0
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСторно
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Регистратор КАК Регистратор
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|
	|УПОРЯДОЧИТЬ ПО 
	|	ТаблицаДокументов.Период
	|;
	|
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Регистратор КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СУММА(СуммыДокументовВВалютахУчета.СуммаБезНДС + СуммыДокументовВВалютахУчета.СуммаНДС) <> 0
	|			ТОГДА СУММА(СуммыДокументовВВалютахУчета.БазаНДСРегл + СуммыДокументовВВалютахУчета.СуммаНДСРегл) 
	|					/ СУММА(СуммыДокументовВВалютахУчета.СуммаБезНДС + СуммыДокументовВВалютахУчета.СуммаНДС) 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КурсНДСКорректировки
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|	ПО
	|		ТаблицаДокументов.ОснованиеКорректировки = СуммыДокументовВВалютахУчета.Регистратор
	|ГДЕ
	|	(ТаблицаДокументов.ЭтоКорректировкаПриобретения ИЛИ ТаблицаДокументов.ЭтоКорректировкаРеализации)
	|	И НЕ ТаблицаДокументов.ОснованиеКорректировки ССЫЛКА Документ.ПервичныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Регистратор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Регистратор КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПервичныйДокумент.СуммаДокумента <> 0
	|			ТОГДА ПервичныйДокумент.СуммаРегл
	|					/ ПервичныйДокумент.СуммаДокумента
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КурсНДСКорректировки
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ПервичныйДокумент КАК ПервичныйДокумент
	|	ПО
	|		ТаблицаДокументов.ОснованиеКорректировки = ПервичныйДокумент.Ссылка
	|ГДЕ
	|	ТаблицаДокументов.ОснованиеКорректировки ССЫЛКА Документ.ПервичныйДокумент
	|";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ВалютаУправленческогоУчета = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", ВалютаУправленческогоУчета);
	
	Запрос.УстановитьПараметр("ТипРасчетов", 
		?(ТипРасчетов = "РасчетыСКлиентами",
		Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом,
		Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком));
		
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПоДокументам = МассивРезультатов[1]; // РезультатЗапроса - 
	ДокументыКПересчету   = МассивРезультатов[2].Выгрузить().ВыгрузитьКолонку("Регистратор");
	ТаблицаСуммДляРаспределения = СуммыДокументовДляПострочногоРаспределения(ДокументыКПересчету);
	ТаблицаСуммДляРаспределения.Индексы.Добавить("Регистратор, ОбъектРасчетов, ТипРасчетов");
	
	КурсыНДСКорректировок = МассивРезультатов[3].Выгрузить();
	КурсыНДСКорректировок.Индексы.Добавить("Ссылка");
	
	ТаблицаСуммыДокумента = РегистрыСведений.СуммыДокументовВВалютахУчета.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ТаблицаСуммыДокумента.Колонки.Добавить("СуммаСНДСРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаСуммыДокумента.Колонки.Добавить("СуммаСНДСУпр", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаСуммыДокумента.Колонки.Добавить("СуммаДляБазыНДС", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	
	ДанныеГрафиковОплат = ГрафикиОплатыДляДисконтирования(МассивДокументов, ТипРасчетов);
	
	КэшКурсовВалют = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют();
	КэшКурсовВалютДоговора = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалютДоговоров();
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	
	ВыборкаПоДокументу = РезультатПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		ВыборкаПоОбъектуРасчетов = ВыборкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОбъектуРасчетов.Следующий() Цикл
			
			ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ВыборкаПоОбъектуРасчетов.Организация);
			КурсПоДоговору = ВыборкаПоОбъектуРасчетов.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре;
			
			Если КурсПоДоговору И ВыборкаПоДокументу.Валюта = ВыборкаПоДокументу.ВалютаВзаиморасчетов Тогда
				КурсВалютыДокумента = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						ВыборкаПоОбъектуРасчетов.Договор, 
						ВыборкаПоОбъектуРасчетов.ДатаКурса, 
						КэшКурсовВалютДоговора);
			Иначе
				КурсВалютыДокумента = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
						ВыборкаПоДокументу.Валюта, 
						ВыборкаПоОбъектуРасчетов.ДатаКурса, 
						КэшКурсовВалют,
						ВалютаРегламентированногоУчета);
			КонецЕсли;
			
			Если КурсПоДоговору Тогда
				КурсВалютыВзаиморасчетов = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						ВыборкаПоОбъектуРасчетов.Договор, 
						ВыборкаПоОбъектуРасчетов.ДатаКурса,
						КэшКурсовВалютДоговора);
			Иначе
				КурсВалютыВзаиморасчетов = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
						ВыборкаПоДокументу.ВалютаВзаиморасчетов, 
						ВыборкаПоОбъектуРасчетов.ДатаКурса,
						КэшКурсовВалют,
						ВалютаРегламентированногоУчета);
			КонецЕсли;
			
			Если КурсПоДоговору И ВалютаУправленческогоУчета = ВыборкаПоДокументу.ВалютаВзаиморасчетов Тогда
				КурсВалютыУпр = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						ВыборкаПоОбъектуРасчетов.Договор, 
						ВыборкаПоОбъектуРасчетов.ДатаКурса, 
						КэшКурсовВалютДоговора);
			Иначе
				КурсВалютыУпр = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
						ВалютаУправленческогоУчета,
						ВыборкаПоОбъектуРасчетов.ДатаКурса,
						КэшКурсовВалют,
						ВалютаРегламентированногоУчета);
			КонецЕсли;
			
			Если КурсПоДоговору 
				И ВыборкаПоДокументу.Валюта = ВыборкаПоДокументу.ВалютаВзаиморасчетов
				И НЕ ВыборкаПоДокументу.ОплатаВВалюте Тогда
				КурсВалютыДокументаДляБазыНДС = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						ВыборкаПоОбъектуРасчетов.Договор, 
						ВыборкаПоОбъектуРасчетов.ПериодБазыНДС, 
						КэшКурсовВалютДоговора);
			Иначе
				КурсВалютыДокументаДляБазыНДС = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
						ВыборкаПоДокументу.Валюта,
						ВыборкаПоОбъектуРасчетов.ПериодБазыНДС,
						КэшКурсовВалют,
						ВалютаРегламентированногоУчета);
			КонецЕсли;
			
			Если КурсПоДоговору 
				И НЕ ВыборкаПоДокументу.ОплатаВВалюте Тогда
				КурсВалютыВзаиморасчетовДляБазыНДС = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						ВыборкаПоОбъектуРасчетов.Договор, 
						ВыборкаПоОбъектуРасчетов.ПериодБазыНДС, 
						КэшКурсовВалютДоговора);
			Иначе
				КурсВалютыВзаиморасчетовДляБазыНДС = 
					РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(
						ВыборкаПоДокументу.ВалютаВзаиморасчетов,
						ВыборкаПоОбъектуРасчетов.ПериодБазыНДС,
						КэшКурсовВалют,
						ВалютаРегламентированногоУчета);
			КонецЕсли;
			
			РасчетыСуммаВВалюте = 0;
			РасчетыПредоплатаВВалюте = 0;
			РасчетыСуммаРегл = 0;
			РасчетыПредоплатаРегл = 0;
			
			РасчетыСуммаУпр = 0;
			РасчетыПредоплатаУпр = 0;
			
			РасчетыСуммаУменьшенияВВалюте = 0;
			РасчетыСуммаУменьшенияРегл = 0;
			РасчетыСуммаУменьшенияУпр = 0;
			РасчетыПредоплатаУменьшениеВВалюте = 0;
			РасчетыПредоплатаУменьшениеРегл = 0;
			
			РасчетыСуммаУвеличенияВВалюте = 0;
			РасчетыСуммаУвеличенияРегл = 0;
			РасчетыСуммаУвеличенияУпр = 0;
			РасчетыПредоплатаУвеличениеВВалюте = 0;
			РасчетыПредоплатаУвеличениеРегл = 0;
			
			РасчетыПредоплатаВВалютеДоОтгрузки = 0;
			РасчетыПредоплатаРеглДоОтгрузки = 0;
			
			КоэффициентПересчетаРегл = КурсВалютыВзаиморасчетов;
			КоэффициентПересчетаУпр = КурсВалютыВзаиморасчетов / КурсВалютыУпр;
			
			ОплатаВВалюте      = Ложь;
			НалогообложениеНДС = Неопределено;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Регистратор",  ВыборкаПоДокументу.Ссылка);
			СтруктураПоиска.Вставить("ТипРасчетов",  ВыборкаПоОбъектуРасчетов.ТипРасчетов);
			СтруктураПоиска.Вставить("ОбъектРасчетов",  ВыборкаПоОбъектуРасчетов.ОбъектРасчетов);
			РезультатПоискаСуммДляРаспределения = ТаблицаСуммДляРаспределения.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоискаСуммДляРаспределения.Количество() > 0 Тогда
				
				СуммыДляРаспределения = РезультатПоискаСуммДляРаспределения[0];
				
				РасчетыСуммаВВалюте = СуммыДляРаспределения.Долг + СуммыДляРаспределения.Предоплата;
				РасчетыПредоплатаВВалюте = СуммыДляРаспределения.Предоплата;
				
				РасчетыСуммаРегл = СуммыДляРаспределения.ДолгРегл + СуммыДляРаспределения.ПредоплатаРегл;
				РасчетыПредоплатаРегл = СуммыДляРаспределения.ПредоплатаРегл;
				
				РасчетыСуммаУпр = СуммыДляРаспределения.ДолгУпр + СуммыДляРаспределения.ПредоплатаУпр;
				РасчетыПредоплатаУпр = СуммыДляРаспределения.ПредоплатаУпр;
				
				РасчетыСуммаУменьшенияВВалюте = 
					?(СуммыДляРаспределения.Предоплата <= 0, СуммыДляРаспределения.Предоплата, 0)
					+ ?(СуммыДляРаспределения.Долг <= 0, СуммыДляРаспределения.Долг, 0);
				РасчетыСуммаУменьшенияРегл = 
					?(СуммыДляРаспределения.Предоплата <= 0, СуммыДляРаспределения.ПредоплатаРегл, 0)
					+ ?(СуммыДляРаспределения.Долг <= 0, СуммыДляРаспределения.ДолгРегл, 0);
				РасчетыСуммаУменьшенияУпр =
					?(СуммыДляРаспределения.Предоплата <= 0, СуммыДляРаспределения.ПредоплатаУпр, 0)
					+ ?(СуммыДляРаспределения.Долг <= 0, СуммыДляРаспределения.ДолгУпр, 0);
				РасчетыПредоплатаУменьшениеВВалюте = 
					?(СуммыДляРаспределения.Предоплата <= 0, СуммыДляРаспределения.Предоплата, 0);
				РасчетыПредоплатаУменьшениеРегл = 
					?(СуммыДляРаспределения.Предоплата <= 0, СуммыДляРаспределения.ПредоплатаРегл, 0);
				
				РасчетыСуммаУвеличенияВВалюте = 
					?(СуммыДляРаспределения.Предоплата >= 0, СуммыДляРаспределения.Предоплата, 0)
					+ ?(СуммыДляРаспределения.Долг >= 0, СуммыДляРаспределения.Долг, 0);
				РасчетыСуммаУвеличенияРегл = 
					?(СуммыДляРаспределения.Предоплата >= 0, СуммыДляРаспределения.ПредоплатаРегл, 0)
					+ ?(СуммыДляРаспределения.Долг >= 0, СуммыДляРаспределения.ДолгРегл, 0);
				РасчетыСуммаУвеличенияУпр =
					?(СуммыДляРаспределения.Предоплата >= 0, СуммыДляРаспределения.ПредоплатаУпр, 0)
					+ ?(СуммыДляРаспределения.Долг >= 0, СуммыДляРаспределения.ДолгУпр, 0);
				РасчетыПредоплатаУвеличениеВВалюте = 
					?(СуммыДляРаспределения.Предоплата >= 0, СуммыДляРаспределения.Предоплата, 0);
				РасчетыПредоплатаУвеличениеРегл = 
					?(СуммыДляРаспределения.Предоплата >= 0, СуммыДляРаспределения.ПредоплатаРегл, 0);
				
				РасчетыПредоплатаВВалютеДоОтгрузки = 
					?(СуммыДляРаспределения.ПредоплатаДоОтгрузки >= 0, СуммыДляРаспределения.ПредоплатаДоОтгрузки, 0);
				РасчетыПредоплатаРеглДоОтгрузки = 
					?(СуммыДляРаспределения.ПредоплатаДоОтгрузки >= 0, СуммыДляРаспределения.ПредоплатаРеглДоОтгрузки, 0);
				
				ОплатаВВалюте  = ?(СуммыДляРаспределения.ОплатаВВалюте = NULL, Ложь, СуммыДляРаспределения.ОплатаВВалюте);
				НалогообложениеНДС = ?(СуммыДляРаспределения.НалогообложениеНДС = NULL, Неопределено, СуммыДляРаспределения.НалогообложениеНДС);
				
				Если НоваяАрхитектураВзаиморасчетов Тогда
					// Не проверяем знаменатель, так как необходимо исключение в случае некорректных движений
					КоэффициентПересчетаРегл = СуммыДляРаспределения.ЧислительРегл/СуммыДляРаспределения.ЗнаменательРегл;
					КоэффициентПересчетаУпр = СуммыДляРаспределения.ЧислительУпр/СуммыДляРаспределения.ЗнаменательУпр;
				Иначе
					КоэффициентПересчетаРегл = ?(
						СуммыДляРаспределения.ЗнаменательРегл = 0,
						0,
						СуммыДляРаспределения.ЧислительРегл/СуммыДляРаспределения.ЗнаменательРегл);
					КоэффициентПересчетаУпр = ?(
						СуммыДляРаспределения.ЗнаменательУпр = 0,
						0,
						СуммыДляРаспределения.ЧислительУпр/СуммыДляРаспределения.ЗнаменательУпр);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыборкаПоОбъектуРасчетов.СуммаВзаиморасчетовДляПересчета <> РасчетыСуммаВВалюте Тогда
				РасчетыСуммаРегл = 
					РасчетыПредоплатаРегл 
					+ Окр(ВыборкаПоОбъектуРасчетов.СуммаВзаиморасчетовДляПересчета * КурсВалютыВзаиморасчетов, 2) 
					- Окр(РасчетыПредоплатаВВалюте * КурсВалютыВзаиморасчетов, 2);
					
				РасчетыСуммаУпр = 
					РасчетыПредоплатаУпр 
					+ Окр(ВыборкаПоОбъектуРасчетов.СуммаВзаиморасчетовДляПересчета * КурсВалютыВзаиморасчетов / КурсВалютыУпр, 2) 
					- Окр(РасчетыПредоплатаВВалюте * КурсВалютыВзаиморасчетов / КурсВалютыУпр, 2);
			КонецЕсли;
			
			ВыборкаПоТипуЗаписи = ВыборкаПоОбъектуРасчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоТипуЗаписи.Следующий() Цикл
				
				СуммаСНДС      = ВыборкаПоТипуЗаписи.СуммаСНДС;
				СуммаВзаиморасчетов = ВыборкаПоТипуЗаписи.СуммаВзаиморасчетовДляПересчета;
				
				Если ВыборкаПоТипуЗаписи.ЭтоСторно И СуммаВзаиморасчетов = РасчетыСуммаУменьшенияВВалюте Тогда
					СуммаРеглДляРаспределения = РасчетыСуммаУменьшенияРегл;
					СуммаУпрДляРаспределения = РасчетыСуммаУменьшенияУпр;
				ИначеЕсли НЕ ВыборкаПоТипуЗаписи.ЭтоСторно И СуммаВзаиморасчетов = РасчетыСуммаУвеличенияВВалюте Тогда
					СуммаРеглДляРаспределения = РасчетыСуммаУвеличенияРегл;
					СуммаУпрДляРаспределения = РасчетыСуммаУвеличенияУпр;
				ИначеЕсли ВыборкаПоОбъектуРасчетов.СуммаВзаиморасчетовДляПересчета = РасчетыСуммаВВалюте Тогда
					// Итоговая сумма по документу и сумма в регистрах взаиморасчетов совпадают.
					// При этом есть строки документа на увеличение и на уменьшение.
					СуммаРеглДляРаспределения = Окр(СуммаВзаиморасчетов * КоэффициентПересчетаРегл, 2);
					РазницаРегл = 
						СуммаРеглДляРаспределения 
						+ Окр((ВыборкаПоОбъектуРасчетов.СуммаВзаиморасчетовДляПересчета - СуммаВзаиморасчетов) * КоэффициентПересчетаРегл, 2)
						- РасчетыСуммаРегл;
					Если (РазницаРегл < 0 И ВыборкаПоТипуЗаписи.ЭтоСторно) ИЛИ (РазницаРегл > 0 И НЕ ВыборкаПоТипуЗаписи.ЭтоСторно) Тогда
						СуммаРеглДляРаспределения = СуммаРеглДляРаспределения + РазницаРегл;
					КонецЕсли;
					
					СуммаУпрДляРаспределения = Окр(СуммаВзаиморасчетов * КоэффициентПересчетаУпр, 2);
					РазницаУпр = 
						СуммаУпрДляРаспределения 
						+ Окр((ВыборкаПоОбъектуРасчетов.СуммаВзаиморасчетовДляПересчета - СуммаВзаиморасчетов) * КоэффициентПересчетаУпр, 2)
						- РасчетыСуммаУпр;
					Если (РазницаУпр < 0 И ВыборкаПоТипуЗаписи.ЭтоСторно) ИЛИ (РазницаУпр > 0 И НЕ ВыборкаПоТипуЗаписи.ЭтоСторно) Тогда
						СуммаУпрДляРаспределения = СуммаУпрДляРаспределения + РазницаУпр;
					КонецЕсли;
				Иначе
					// Сумма в регистрах взаиморасчетов не совпадает с итоговой суммой документа.
					// Например, реализация находится в статусе "В пути".
					СуммаРеглДляРаспределения = РасчетыСуммаРегл;
					СуммаУпрДляРаспределения = РасчетыСуммаУпр;	
				КонецЕсли;
				
				Если ВыборкаПоТипуЗаписи.ЭтоКорректировкаПриобретения 
					ИЛИ ВыборкаПоТипуЗаписи.ЭтоКорректировкаРеализации Тогда
					
					// Курс корректировки НДС должен соответствовать курсу отражения НДС документа основания.
					КурсНДСКорректировки = КурсВалютыДокументаДляБазыНДС;
					СтрокаТаблицыКурсовНДСКорректировок = КурсыНДСКорректировок.Найти(ВыборкаПоТипуЗаписи.Ссылка, "Ссылка");
					Если СтрокаТаблицыКурсовНДСКорректировок <> Неопределено
						И СтрокаТаблицыКурсовНДСКорректировок.КурсНДСКорректировки <> Неопределено Тогда
						КурсНДСКорректировки = СтрокаТаблицыКурсовНДСКорректировок.КурсНДСКорректировки;
					КонецЕсли;
					
					БазаСНДСРеглПоДокументу = Окр(СуммаСНДС * КурсНДСКорректировки, 2);
					
				ИначеЕсли ВыборкаПоТипуЗаписи.ЭтоСторно Тогда
					БазаСНДСРеглПоДокументу = СуммаРеглДляРаспределения;
				Иначе
					БазаСНДСРеглПоДокументу = 
						РасчетыПредоплатаРеглДоОтгрузки+ Окр((СуммаВзаиморасчетов - РасчетыПредоплатаВВалютеДоОтгрузки) * КурсВалютыВзаиморасчетовДляБазыНДС, 2);
				КонецЕсли;
				
				УчтеноБазыРаспределения = 0;
				УжеРаспределеноРегл = 0;
				УжеРаспределеноУпр = 0;
				УжеРаспределеноСуммаДляБазыНДС = 0;
				
				КурсВалютыУпрСУчетомЗачтенныхАвансов = КурсВалютыУпр;
				Если СуммаУпрДляРаспределения <> 0 Тогда
					КурсВалютыУпрСУчетомЗачтенныхАвансов = СуммаРеглДляРаспределения / СуммаУпрДляРаспределения;
				КонецЕсли;
				
				Выборка = ВыборкаПоТипуЗаписи.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Запись = ТаблицаСуммыДокумента.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Выборка);
					
					Если НЕ Выборка.ПересчитатьСуммы Тогда
						Продолжить;
					КонецЕсли;
					
					СуммаСНДССтроки = Выборка.СуммаБезНДС + Выборка.СуммаНДС;
					
					Запись.СуммаСНДСРегл = Окр(СуммаРеглДляРаспределения * (УчтеноБазыРаспределения + СуммаСНДССтроки) / СуммаСНДС, 2) - УжеРаспределеноРегл;
					Запись.СуммаСНДСУпр  = Окр(СуммаУпрДляРаспределения * (УчтеноБазыРаспределения + СуммаСНДССтроки) / СуммаСНДС, 2) - УжеРаспределеноУпр;
					Запись.СуммаДляБазыНДС  = Окр(БазаСНДСРеглПоДокументу * (УчтеноБазыРаспределения + СуммаСНДССтроки) / СуммаСНДС, 2) - УжеРаспределеноСуммаДляБазыНДС;
					
					УчтеноБазыРаспределения = УчтеноБазыРаспределения + СуммаСНДССтроки;
					УжеРаспределеноРегл     = УжеРаспределеноРегл + Запись.СуммаСНДСРегл;
					УжеРаспределеноУпр      = УжеРаспределеноУпр + Запись.СуммаСНДСУпр;
					УжеРаспределеноСуммаДляБазыНДС = УжеРаспределеноСуммаДляБазыНДС + Запись.СуммаДляБазыНДС; 
					
					Если (ВыборкаПоДокументу.ВалютаВзаиморасчетов = ВалютаРегламентированногоУчета
						 ИЛИ ВыборкаПоДокументу.Валюта = ВалютаРегламентированногоУчета)
						 И ((ВыборкаПоТипуЗаписи.СуммаБезНДСРегл + ВыборкаПоТипуЗаписи.СуммаНДСРегл) = СуммаРеглДляРаспределения) Тогда
						ПересчитыватьРегл = Ложь;
					Иначе
						ПересчитыватьРегл = Истина;
					КонецЕсли;
					
					Если (ВыборкаПоДокументу.ВалютаВзаиморасчетов = ВалютаУправленческогоУчета
						 ИЛИ ВыборкаПоДокументу.Валюта = ВалютаУправленческогоУчета)
						 И ((ВыборкаПоТипуЗаписи.СуммаБезНДСУпр + ВыборкаПоТипуЗаписи.СуммаНДСУпр) = СуммаУпрДляРаспределения) Тогда
						ПересчитыватьУпр = Ложь;
					Иначе
						ПересчитыватьУпр = Истина;
					КонецЕсли;
					
					Если ПересчитыватьРегл Тогда
						Если ЗначениеЗаполнено(Запись.СтавкаНДС) Тогда
							// Рассчитаем НДС и суммы без НДС в валюте регл. и упр. учета
							Если НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭлектронныеУслуги Тогда
								// По электронным услугам базой является общая сумма.
								// НДС рассчитвается от общей суммы, по расчетной ставке.
								Запись.БазаНДСРегл = (Запись.СуммаБезНДС + Запись.СуммаНДС) * КурсВалютыДокумента;
								Если Запись.СуммаНДС = 0 Тогда 
									Запись.СуммаНДСРегл = 0;
								Иначе
									Запись.СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Запись.БазаНДСРегл, Выборка.СтавкаНДС, Ложь);
								КонецЕсли;
							
							ИначеЕсли ОплатаВВалюте Тогда
								// База НДС рассчитывается по курсу на дату документа
								Запись.БазаНДСРегл = Запись.СуммаБезНДС * КурсВалютыДокументаДляБазыНДС;
								Если Запись.СуммаНДС = 0 Тогда 
									Запись.СуммаНДСРегл = 0;
								Иначе
									Запись.СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Запись.БазаНДСРегл, Выборка.СтавкаНДС, Ложь);
								КонецЕсли;
							Иначе
								// Расчет базы НДС по данным взаиморасчетов (с учетом зачтенных предоплат)
								Если Запись.СуммаНДС = 0 Тогда 
									Запись.СуммаНДСРегл = 0;
								Иначе
									Запись.СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(Запись.СуммаДляБазыНДС, Запись.СтавкаНДС);
								КонецЕсли;
								Запись.БазаНДСРегл = Запись.СуммаДляБазыНДС - Запись.СуммаНДСРегл;
							КонецЕсли;
						КонецЕсли;
						Запись.СуммаБезНДСРегл = Запись.СуммаСНДСРегл - Запись.СуммаНДСРегл;
					КонецЕсли;
					
					Если ПересчитыватьУпр ИЛИ ПересчитыватьРегл Тогда
						Если Запись.СуммаБезНДС = 0 Тогда
							Запись.СуммаНДСУпр = Запись.СуммаСНДСУпр;
							Запись.СуммаБезНДСУпр  = 0;
						Иначе
							Запись.СуммаНДСУпр = ?(КурсВалютыУпрСУчетомЗачтенныхАвансов = 0, 0, Запись.СуммаНДСРегл / КурсВалютыУпрСУчетомЗачтенныхАвансов);
							Запись.СуммаБезНДСУпр  = Запись.СуммаСНДСУпр - Запись.СуммаНДСУпр;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		ПривестиСуммыДокумента(ДанныеГрафиковОплат, ТаблицаСуммыДокумента, КэшКурсовВалют, КэшКурсовВалютДоговора, ВыборкаПоДокументу.Ссылка);
		ЗаписатьДвиженияПроцентныхРасходовДисконтирования(ДанныеГрафиковОплат, ВыборкаПоДокументу.Ссылка);
				
		НаборЗаписей = РегистрыСведений.СуммыДокументовВВалютахУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументу.Ссылка);
		НаборЗаписей.Загрузить(ТаблицаСуммыДокумента);
		НаборЗаписей.Записать();
		
		ТаблицаСуммыДокумента.Очистить();
		
	КонецЦикла;
	
	ОбновитьДвиженияДокументов(ДокументыКПересчету);
	
КонецПроцедуры

//	Запрос документов, по которым суммы в валютах учета не совпадают с данными взаиморасчетов.
//
//	Возвращаемое значение:
//		Строка - текст запроса.
Функция ТекстЗапросаДокументовДляПересчета() Экспорт
	
	МассивТекстовЗапроса = Новый Массив();
	МассивТекстовЗапроса.Добавить(ТекстЗапросаСуммВзаиморасчетов("ВтСуммыВзаиморасчетов"));
	МассивТекстовЗапроса.Добавить(ТекстЗапросаСравненияДокументовДляПересчета());
	
	Возврат СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаСравненияДокументовДляПересчета()
	
	ТекстСравнения = "
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДокументРегистратор               КАК РасчетныйДокумент,
	|	ВложенныйЗапрос.ТипРасчетов                       КАК ТипРасчетов,
	|	ВложенныйЗапрос.ОбъектРасчетов                    КАК ОбъектРасчетов,
	|	СУММА(ВложенныйЗапрос.СуммаУвеличенияРеглРасчеты) КАК СуммаУвеличенияРеглРасчеты,
	|	СУММА(ВложенныйЗапрос.СуммаУвеличенияУпрРасчеты)  КАК СуммаУвеличенияУпрРасчеты,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияРеглРасчеты) КАК СуммаУменьшенияРеглРасчеты,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияУпрРасчеты)  КАК СуммаУменьшенияУпрРасчеты,
	|	СУММА(ВложенныйЗапрос.СуммаУвеличенияРегл)        КАК СуммаУвеличенияРегл,
	|	СУММА(ВложенныйЗапрос.СуммаУвеличенияУпр)         КАК СуммаУвеличенияУпр,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияРегл)        КАК СуммаУменьшенияРегл,
	|	СУММА(ВложенныйЗапрос.СуммаУменьшенияУпр)         КАК СуммаУменьшенияУпр
	|ИЗ
	|	(ВЫБРАТЬ
	|		СуммыВзаиморасчетов.ТипРасчетов                    КАК ТипРасчетов,
	|		СуммыВзаиморасчетов.Регистратор                    КАК ДокументРегистратор,
	|		СуммыВзаиморасчетов.ОбъектРасчетов                 КАК ОбъектРасчетов,
	|		ВЫБОР 
	|			КОГДА НЕ СуммыВзаиморасчетов.ВозможныРазвернутыеДвижения И СуммыВзаиморасчетов.ПредоплатаРегл + СуммыВзаиморасчетов.ДолгРегл > 0
	|				ТОГДА ВЫБОР 
	|						КОГДА СуммыВзаиморасчетов.ПредоплатаРегл + СуммыВзаиморасчетов.ДолгРегл > 0
	|							ТОГДА СуммыВзаиморасчетов.ПредоплатаРегл + СуммыВзаиморасчетов.ДолгРегл
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|						КОГДА СуммыВзаиморасчетов.ПредоплатаРегл > 0 
	|							ТОГДА СуммыВзаиморасчетов.ПредоплатаРегл 
	|						ИНАЧЕ 0 
	|					КОНЕЦ 
	|				+ ВЫБОР 
	|						КОГДА СуммыВзаиморасчетов.ДолгРегл > 0
	|							ТОГДА СуммыВзаиморасчетов.ДолгРегл 
	|						ИНАЧЕ 0 
	|					КОНЕЦ
	|		КОНЕЦ                                             КАК СуммаУвеличенияРеглРасчеты,
	|		ВЫБОР 
	|			КОГДА НЕ СуммыВзаиморасчетов.ВозможныРазвернутыеДвижения
	|				ТОГДА ВЫБОР 
	|						КОГДА СуммыВзаиморасчетов.ПредоплатаУпр + СуммыВзаиморасчетов.ДолгУпр > 0
	|							ТОГДА СуммыВзаиморасчетов.ПредоплатаУпр + СуммыВзаиморасчетов.ДолгУпр
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|						КОГДА СуммыВзаиморасчетов.ПредоплатаУпр > 0 
	|							ТОГДА СуммыВзаиморасчетов.ПредоплатаУпр 
	|						ИНАЧЕ 0 
	|					КОНЕЦ 
	|				+ ВЫБОР 
	|						КОГДА СуммыВзаиморасчетов.ДолгУпр > 0
	|							ТОГДА СуммыВзаиморасчетов.ДолгУпр 
	|						ИНАЧЕ 0 
	|					КОНЕЦ
	|		КОНЕЦ                                             КАК СуммаУвеличенияУпрРасчеты,
	|		ВЫБОР 
	|			КОГДА НЕ СуммыВзаиморасчетов.ВозможныРазвернутыеДвижения
	|				ТОГДА ВЫБОР 
	|						КОГДА  СуммыВзаиморасчетов.ПредоплатаРегл + СуммыВзаиморасчетов.ДолгРегл < 0 
	|							ТОГДА СуммыВзаиморасчетов.ПредоплатаРегл + СуммыВзаиморасчетов.ДолгРегл
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|						КОГДА СуммыВзаиморасчетов.ПредоплатаРегл < 0 
	|							ТОГДА СуммыВзаиморасчетов.ПредоплатаРегл 
	|						ИНАЧЕ 0 
	|					КОНЕЦ 
	|				+ ВЫБОР 
	|						КОГДА СуммыВзаиморасчетов.ДолгРегл < 0
	|							ТОГДА СуммыВзаиморасчетов.ДолгРегл 
	|						ИНАЧЕ 0 
	|					КОНЕЦ
	|		КОНЕЦ                                             КАК СуммаУменьшенияРеглРасчеты,
	|		ВЫБОР 
	|			КОГДА НЕ СуммыВзаиморасчетов.ВозможныРазвернутыеДвижения 
	|				ТОГДА ВЫБОР 
	|						КОГДА СуммыВзаиморасчетов.ПредоплатаУпр + СуммыВзаиморасчетов.ДолгУпр < 0 
	|							ТОГДА СуммыВзаиморасчетов.ПредоплатаУпр + СуммыВзаиморасчетов.ДолгУпр
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|						КОГДА СуммыВзаиморасчетов.ПредоплатаУпр < 0 
	|							ТОГДА СуммыВзаиморасчетов.ПредоплатаУпр 
	|						ИНАЧЕ 0 
	|					КОНЕЦ 
	|				+ ВЫБОР 
	|						КОГДА СуммыВзаиморасчетов.ДолгУпр < 0
	|							ТОГДА СуммыВзаиморасчетов.ДолгУпр 
	|						ИНАЧЕ 0 
	|					КОНЕЦ
	|		КОНЕЦ                                             КАК СуммаУменьшенияУпрРасчеты,
	|		ВЫБОР 
	|			КОГДА НЕ СуммыВзаиморасчетов.ВозможныРазвернутыеДвижения
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияРегл,0) + ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияРегл,0) > 0
	|							ТОГДА ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияРегл,0) + ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияРегл,0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияРегл,0)
	|		КОНЕЦ                                             КАК СуммаУвеличенияРегл,
	|		ВЫБОР 
	|			КОГДА НЕ СуммыВзаиморасчетов.ВозможныРазвернутыеДвижения
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияУпр,0) + ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияУпр,0) > 0
	|							ТОГДА ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияУпр,0) + ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияУпр,0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияУпр,0)
	|		КОНЕЦ                                             КАК СуммаУвеличенияУпр,
	|		ВЫБОР 
	|			КОГДА НЕ СуммыВзаиморасчетов.ВозможныРазвернутыеДвижения
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияРегл,0) + ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияРегл,0) < 0
	|							ТОГДА ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияРегл,0) + ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияРегл,0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияРегл,0)
	|		КОНЕЦ                                             КАК СуммаУменьшенияРегл,
	|		ВЫБОР 
	|			КОГДА НЕ СуммыВзаиморасчетов.ВозможныРазвернутыеДвижения
	|				ТОГДА
	|					ВЫБОР
	|						КОГДА ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияУпр,0) + ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияУпр,0) < 0
	|							ТОГДА ЕСТЬNULL(СуммыДокументов.СуммаУвеличенияУпр,0) + ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияУпр,0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(СуммыДокументов.СуммаУменьшенияУпр,0)
	|		КОНЕЦ                                             КАК СуммаУменьшенияУпр
	|	ИЗ
	|		ВтСуммыВзаиморасчетов КАК СуммыВзаиморасчетов
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыВзаиморасчетов.Регистратор = СуммыДокументов.Регистратор
	|					И СуммыВзаиморасчетов.ТипРасчетов = СуммыДокументов.ТипРасчетов
	|					И СуммыВзаиморасчетов.ОбъектРасчетов = СуммыДокументов.ОбъектРасчетов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//Общие суммы корректировок
	|	ВЫБРАТЬ
	|		СуммыРасчетов.ТипРасчетов                                         КАК ТипРасчетов,
	|		СуммыРасчетов.Регистратор                                         КАК Регистратор,
	|		СуммыРасчетов.ОбъектРасчетов                                      КАК ОбъектРасчетов,
	|		
	|		ВЫРАЗИТЬ(СуммыРасчетов.СуммаВзаиморасчетовРегл / СуммыРасчетов.СуммаВзаиморасчетов КАК ЧИСЛО(30,10))
	|		 * СуммыРасчетов.СуммаОбщая                                       КАК СуммаУвеличенияРеглРасчеты,
	|		
	|		ВЫРАЗИТЬ((СуммыРасчетов.СуммаВзаиморасчетовРегл / СуммыРасчетов.СуммаВзаиморасчетов) КАК ЧИСЛО(30,10))
	|			/ (ВЫРАЗИТЬ(СуммыРасчетов.СуммаВзаиморасчетовРегл / СуммыРасчетов.СуммаВзаиморасчетовУпр КАК ЧИСЛО(30,10)))
	|			* СуммыРасчетов.СуммаОбщая                                    КАК СуммаУвеличенияУпрРасчеты,
	|		
	|		- ВЫРАЗИТЬ(СуммыРасчетов.СуммаВзаиморасчетовРегл / СуммыРасчетов.СуммаВзаиморасчетов КАК ЧИСЛО(30,10))
	|			* СуммыРасчетов.СуммаОбщая                                    КАК СуммаУменьшенияРеглРасчеты,
	|	
	|		ВЫРАЗИТЬ(-(СуммыРасчетов.СуммаВзаиморасчетовРегл / СуммыРасчетов.СуммаВзаиморасчетов) КАК ЧИСЛО(30,10))
	|			/ ВЫРАЗИТЬ((СуммыРасчетов.СуммаВзаиморасчетовРегл / СуммыРасчетов.СуммаВзаиморасчетовУпр) КАК ЧИСЛО(30,10))
	|			* СуммыРасчетов.СуммаОбщая                                    КАК СуммаУменьшенияУпрРасчеты,
	|		
	|		0                                                                 КАК СуммаУвеличенияРегл,
	|		0                                                                 КАК СуммаУвеличенияУпр,
	|		0                                                                 КАК СуммаУменьшенияРегл,
	|		0                                                                 КАК СуммаУменьшенияУпр
	|	ИЗ
	|		ВтСуммыВзаиморасчетовКорректировок КАК СуммыРасчетов
	|	ГДЕ
	|		СуммыРасчетов.СуммаВзаиморасчетов <> 0
	|		И СуммыРасчетов.СуммаВзаиморасчетовУпр <> 0) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ &ЭтоПроверка 
	|	ИЛИ ВЫБОР 
	|			КОГДА ВложенныйЗапрос.ДокументРегистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.ДокументРегистратор КАК Документ.РеализацияТоваровУслуг).Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути)
	|				КОГДА ВложенныйЗапрос.ДокументРегистратор ССЫЛКА Документ.РеализацияУслугПрочихАктивов
	|				ТОГДА ВЫРАЗИТЬ(ВложенныйЗапрос.ДокументРегистратор КАК Документ.РеализацияУслугПрочихАктивов).Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ТипРасчетов,
	|	ВложенныйЗапрос.ОбъектРасчетов,
	|	ВложенныйЗапрос.ДокументРегистратор
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВложенныйЗапрос.СуммаУвеличенияРеглРасчеты) - СУММА(ВложенныйЗапрос.СуммаУвеличенияРегл) >= 0.01
	|		ИЛИ СУММА(ВложенныйЗапрос.СуммаУвеличенияУпрРасчеты) - СУММА(ВложенныйЗапрос.СуммаУвеличенияУпр) >= 0.01
	|		ИЛИ СУММА(ВложенныйЗапрос.СуммаУвеличенияРеглРасчеты) - СУММА(ВложенныйЗапрос.СуммаУвеличенияРегл) <= -0.01
	|		ИЛИ СУММА(ВложенныйЗапрос.СуммаУвеличенияУпрРасчеты) - СУММА(ВложенныйЗапрос.СуммаУвеличенияУпр) <= -0.01
	|		ИЛИ СУММА(ВложенныйЗапрос.СуммаУменьшенияРеглРасчеты) - СУММА(ВложенныйЗапрос.СуммаУменьшенияРегл) >= 0.01
	|		ИЛИ СУММА(ВложенныйЗапрос.СуммаУменьшенияУпрРасчеты) - СУММА(ВложенныйЗапрос.СуммаУменьшенияУпр) >= 0.01
	|		ИЛИ СУММА(ВложенныйЗапрос.СуммаУменьшенияРеглРасчеты) - СУММА(ВложенныйЗапрос.СуммаУменьшенияРегл) <= -0.01
	|		ИЛИ СУММА(ВложенныйЗапрос.СуммаУменьшенияУпрРасчеты) - СУММА(ВложенныйЗапрос.СуммаУменьшенияУпр) <= -0.01)
	|";
		
	Возврат ТекстСравнения;
	
КонецФункции

Процедура ОбновитьДвиженияДокумента(Ссылка, СоставОбновления)
	Перем Таблица;
	
	НачатьТранзакцию();
	Попытка
		Таблицы = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, СоставОбновления);
		
		Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Дата");
		Документ = ПроведениеДокументов.ЭмуляцияДокумента(Ссылка, Дата);
		МенеджерВТ = Новый МенеджерВременныхТаблиц();
		
		Для Каждого ОписаниеОбновления Из СоставОбновления Цикл
			Если Таблицы.Свойство("Таблица" + ОписаниеОбновления.Ключ, Таблица) И ЗначениеЗаполнено(Таблица) Тогда
				
				//++ Локализация
			
			
				//-- Локализация
								
				Набор = ОписаниеОбновления.Значение; // РегистрНакопленияНаборЗаписей.ДвиженияДенежныеСредстваКонтрагент - 
				Набор.Отбор.Регистратор.Установить(Ссылка);
				Набор.Загрузить(Таблица);
				ПроведениеДокументов.УстановитьДопСвойстваРегистра(Набор, Документ, МенеджерВТ);
				Набор.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
				Набор.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
		
		ПроведениеДокументов.СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВТ);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = НСтр("ru = 'Не удалось записать движения %Обновление% по причине %Причина%'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Обновление%", Ссылка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ОписаниеОшибки());
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Частичное обновление движений документа'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, 
			ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки
КонецПроцедуры

Функция ТекстЗапросаСуммВзаиморасчетов(ИмяВТ = "")
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СуммыДокументовВВалютахУчета.ТипРасчетов               КАК ТипРасчетов,
	|	СуммыДокументовВВалютахУчета.ОбъектРасчетов            КАК ОбъектРасчетов,
	|	СуммыДокументовВВалютахУчета.Регистратор               КАК Регистратор,
	|	МАКСИМУМ(НАЧАЛОПЕРИОДА(СуммыДокументовВВалютахУчета.Период, ДЕНЬ)) КАК Период,
	|	СУММА(ВЫБОР КОГДА (СуммыДокументовВВалютахУчета.СуммаБезНДСРегл + СуммыДокументовВВалютахУчета.СуммаНДСРегл) >= 0 
	|			ТОГДА СуммыДокументовВВалютахУчета.СуммаБезНДСРегл + СуммыДокументовВВалютахУчета.СуммаНДСРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ)                                               КАК СуммаУвеличенияРегл,
	|	СУММА(ВЫБОР КОГДА (СуммыДокументовВВалютахУчета.СуммаБезНДСУпр  + СуммыДокументовВВалютахУчета.СуммаНДСУпр) >= 0 
	|			ТОГДА СуммыДокументовВВалютахУчета.СуммаБезНДСУпр + СуммыДокументовВВалютахУчета.СуммаНДСУпр
	|		ИНАЧЕ 0 
	|	КОНЕЦ)                                               КАК СуммаУвеличенияУпр,
	|	СУММА(ВЫБОР КОГДА (СуммыДокументовВВалютахУчета.СуммаБезНДСРегл + СуммыДокументовВВалютахУчета.СуммаНДСРегл) < 0 
	|			ТОГДА СуммыДокументовВВалютахУчета.СуммаБезНДСРегл + СуммыДокументовВВалютахУчета.СуммаНДСРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ)                                               КАК СуммаУменьшенияРегл,
	|	СУММА(ВЫБОР КОГДА (СуммыДокументовВВалютахУчета.СуммаБезНДСУпр + СуммыДокументовВВалютахУчета.СуммаНДСУпр) < 0 
	|			ТОГДА СуммыДокументовВВалютахУчета.СуммаБезНДСУпр + СуммыДокументовВВалютахУчета.СуммаНДСУпр
	|		ИНАЧЕ 0 
	|	КОНЕЦ)                                               КАК СуммаУменьшенияУпр
	|ПОМЕСТИТЬ ВТСуммыДокументов
	|ИЗ
	|	РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|ГДЕ
	|	(СуммыДокументовВВалютахУчета.Регистратор В (&МассивДокументов) ИЛИ &ПоВсемДокументам)
	|	И СуммыДокументовВВалютахУчета.ПересчитыватьПоДаннымРасчетов
	|	И (СуммыДокументовВВалютахУчета.Валюта <> СуммыДокументовВВалютахУчета.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|		И СуммыДокументовВВалютахУчета.ВалютаВзаиморасчетов <> СуммыДокументовВВалютахУчета.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|		ИЛИ СуммыДокументовВВалютахУчета.Валюта <> &ВалютаУпрУчета
	|			И СуммыДокументовВВалютахУчета.ВалютаВзаиморасчетов <> &ВалютаУпрУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	СуммыДокументовВВалютахУчета.Регистратор,
	|	СуммыДокументовВВалютахУчета.ОбъектРасчетов,
	|	СуммыДокументовВВалютахУчета.ТипРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// Увеличение - увеличение отгрузки/поставки.
	|// В суммах документов есть строки с минусом (уменьшение) и плюсом (увеличение).
	|// В расчетах эти суммы отражаются отдельно и могут взаимозачитываться.
	|// Поэтому для сравнения из взаиморасчетов вычисляется общая сумма, которая есть и в увеличении долга и в уменьшении.
	|// Пример: Корректировка уменьшает отгрузку на 100 и увеличивает на 120, общая сумма будет равна 100.
	|// В сравнение с данными сумм документов берется общая сумма + свернутая сумма взаиморасчетов из ВтСуммыВзаиморасчетов.
	|// Пример: Сумма взаиморасчетов (Уменьшение) = 100 + 0, Сумма взаиморасчетов увеличение = 100 + 20.
	|//
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.ДокументРегистратор                           КАК Регистратор,
	|	РасчетыСКлиентами.ОбъектРасчетов                                КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта                                        КАК Валюта,
	|	ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРегистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК СвязанныйДокумент,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРегистратор КАК Документ.КорректировкаРеализации).ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРегистратор КАК Документ.КорректировкаРеализации).ДокументОснование.ДатаПереходаПраваСобственности
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРегистратор КАК Документ.КорректировкаРеализации).ДокументОснование.Дата
	|	КОНЕЦ                                                           КАК Дата,
	|	РасчетыСКлиентами.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	РасчетыСКлиентами.ОбъектРасчетов.ОплатаВВалюте                  КАК ОплатаВВалюте,
	|	РасчетыСКлиентами.ОбъектРасчетов.НалогообложениеНДС             КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА РасчетыСКлиентами.Долг
	|		ИНАЧЕ РасчетыСКлиентами.Предоплата
	|	КОНЕЦ)                                                             КАК СуммаУвеличение,
	|	СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА -РасчетыСКлиентами.Долг
	|		ИНАЧЕ -РасчетыСКлиентами.Предоплата
	|	КОНЕЦ)                                                          КАК СуммаУменьшение
	|ПОМЕСТИТЬ ВтСвязанныеДокументыКорректировок
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|			ПО СуммыДокументов.Регистратор = РасчетыСКлиентами.ДокументРегистратор
	|ГДЕ
	|	РасчетыСКлиентами.ДокументРегистратор ССЫЛКА Документ.КорректировкаРеализации
	|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.ДокументРегистратор,
	|	РасчетыСКлиентами.ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта,
	|	ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРегистратор КАК Документ.КорректировкаРеализации).ДокументОснование,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРегистратор КАК Документ.КорректировкаРеализации).ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРегистратор КАК Документ.КорректировкаРеализации).ДокументОснование.ДатаПереходаПраваСобственности
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКлиентами.ДокументРегистратор КАК Документ.КорректировкаРеализации).ДокументОснование.Дата
	|	КОНЕЦ,
	|	РасчетыСКлиентами.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета,
	|	РасчетыСКлиентами.ОбъектРасчетов.ОплатаВВалюте,
	|	РасчетыСКлиентами.ОбъектРасчетов.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.ДокументРегистратор                           КАК Регистратор,
	|	РасчетыСПоставщиками.ОбъектРасчетов                                КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта                                        КАК Валюта,
	|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ДокументРегистратор КАК Документ.КорректировкаПриобретения).ДокументОснование КАК СвязанныйДокумент,
	|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ДокументРегистратор КАК Документ.КорректировкаПриобретения).Дата КАК Дата,
	|	РасчетыСПоставщиками.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	РасчетыСПоставщиками.ОбъектРасчетов.ОплатаВВалюте                  КАК ОплатаВВалюте,
	|	РасчетыСПоставщиками.ОбъектРасчетов.НалогообложениеНДС             КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА РасчетыСПоставщиками.Долг
	|		ИНАЧЕ РасчетыСПоставщиками.Предоплата
	|	КОНЕЦ)                                                             КАК СуммаУвеличение,
	|	СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА -РасчетыСПоставщиками.Долг
	|		ИНАЧЕ -РасчетыСПоставщиками.Предоплата
	|	КОНЕЦ)                                                             КАК СуммаУменьшение
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|			ПО СуммыДокументов.Регистратор = РасчетыСПоставщиками.ДокументРегистратор
	|ГДЕ
	|	РасчетыСПоставщиками.ДокументРегистратор ССЫЛКА Документ.КорректировкаПриобретения
	|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.ДокументРегистратор,
	|	РасчетыСПоставщиками.ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта,
	|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ДокументРегистратор КАК Документ.КорректировкаПриобретения).ДокументОснование,
	|	ВЫРАЗИТЬ(РасчетыСПоставщиками.ДокументРегистратор КАК Документ.КорректировкаПриобретения).Дата,
	|	РасчетыСПоставщиками.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета,
	|	РасчетыСПоставщиками.ОбъектРасчетов.ОплатаВВалюте,
	|	РасчетыСПоставщиками.ОбъектРасчетов.НалогообложениеНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКлиентами.Регистратор                                   КАК Регистратор,
	|	РасчетыСКлиентами.ЗаказКлиента                                  КАК ОбъектРасчетов,
	|	РасчетыСКлиентами.Валюта                                        КАК Валюта,
	|	ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование КАК СвязанныйДокумент,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование.ДатаПереходаПраваСобственности
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование.Дата
	|	КОНЕЦ                                                           КАК Дата,
	|	РасчетыСКлиентами.ЗаказКлиента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	РасчетыСКлиентами.ЗаказКлиента.ОплатаВВалюте                  КАК ОплатаВВалюте,
	|	РасчетыСКлиентами.ЗаказКлиента.НалогообложениеНДС             КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА РасчетыСКлиентами.Долг
	|		ИНАЧЕ РасчетыСКлиентами.Предоплата
	|	КОНЕЦ)                                                             КАК СуммаУвеличение,
	|	СУММА(ВЫБОР КОГДА РасчетыСКлиентами.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА -РасчетыСКлиентами.Долг
	|		ИНАЧЕ -РасчетыСКлиентами.Предоплата
	|	КОНЕЦ)                                                          КАК СуммаУменьшение
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|			ПО СуммыДокументов.Регистратор = РасчетыСКлиентами.Регистратор
	|ГДЕ
	|	РасчетыСКлиентами.Регистратор ССЫЛКА Документ.КорректировкаРеализации
	|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента)
	|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|	И РасчетыСКлиентами.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКлиентами.Регистратор,
	|	РасчетыСКлиентами.ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта,
	|	ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование,
	|	ВЫБОР КОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование ССЫЛКА Документ.РеализацияТоваровУслуг
	|		ТОГДА ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование.ДатаПереходаПраваСобственности
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКлиентами.Регистратор КАК Документ.КорректировкаРеализации).ДокументОснование.Дата
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСПоставщиками.Регистратор                                   КАК Регистратор,
	|	РасчетыСПоставщиками.ЗаказПоставщику                               КАК ОбъектРасчетов,
	|	РасчетыСПоставщиками.Валюта                                        КАК Валюта,
	|	ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование КАК СвязанныйДокумент,
	|	ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.КорректировкаПриобретения).Дата КАК Дата,
	|	РасчетыСПоставщиками.ЗаказПоставщику.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	РасчетыСПоставщиками.ЗаказПоставщику.ОплатаВВалюте                  КАК ОплатаВВалюте,
	|	РасчетыСПоставщиками.ЗаказПоставщику.НалогообложениеНДС             КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА РасчетыСПоставщиками.Долг
	|		ИНАЧЕ РасчетыСПоставщиками.Предоплата
	|	КОНЕЦ)                                                             КАК СуммаУвеличение,
	|	СУММА(ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ТОГДА -РасчетыСПоставщиками.Долг
	|		ИНАЧЕ -РасчетыСПоставщиками.Предоплата
	|	КОНЕЦ)                                                             КАК СуммаУменьшение
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|			ПО СуммыДокументов.Регистратор = РасчетыСПоставщиками.Регистратор
	|ГДЕ
	|	РасчетыСПоставщиками.Регистратор ССЫЛКА Документ.КорректировкаПриобретения
	|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику)
	|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами)
	|	И РасчетыСПоставщиками.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами)
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСПоставщиками.Регистратор,
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта,
	|	ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.КорректировкаПриобретения).ДокументОснование,
	|	ВЫРАЗИТЬ(РасчетыСПоставщиками.Регистратор КАК Документ.КорректировкаПриобретения).Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДокументы.СвязанныйДокумент              КАК СвязанныйДокумент,
	|	ТабДокументы.Валюта                         КАК Валюта,
	|	ТабДокументы.БазоваяВалюта                  КАК БазоваяВалюта,
	|	МАКСИМУМ(ТабДокументы.ПериодВалютыРасчетов) КАК ПериодВалютыРасчетов,
	|	МАКСИМУМ(ТабДокументы.ПериодВалютыУпр)      КАК ПериодВалютыУпр
	|ПОМЕСТИТЬ ВтПериодыКурсовСвязанныхДокументов
	|ИЗ (
	|	ВЫБРАТЬ
	|		ТабДокументы.СвязанныйДокумент       КАК СвязанныйДокумент,
	|		ТабДокументы.Валюта                  КАК Валюта,
	|		КурсыВалютыРасчетов.БазоваяВалюта    КАК БазоваяВалюта,
	|		КурсыВалютыРасчетов.Период           КАК ПериодВалютыРасчетов,
	|		ДАТАВРЕМЯ(1,1,1)                     КАК ПериодВалютыУпр
	|	ИЗ
	|		ВтСвязанныеДокументыКорректировок КАК ТабДокументы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютыРасчетов
	|				ПО КурсыВалютыРасчетов.Валюта = ТабДокументы.Валюта
	|					И ТабДокументы.ВалютаРегламентированногоУчета = КурсыВалютыРасчетов.БазоваяВалюта
	|					И ТабДокументы.Дата >= КурсыВалютыРасчетов.Период
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ТабДокументы.СвязанныйДокумент       КАК СвязанныйДокумент,
	|		ТабДокументы.Валюта                  КАК Валюта,
	|		КурсыВалютыУпр.БазоваяВалюта         КАК БазоваяВалюта,
	|		ДАТАВРЕМЯ(1,1,1)                     КАК ПериодВалютыРасчетов,
	|		КурсыВалютыУпр.Период                КАК ПериодВалютыУпр
	|	ИЗ
	|		ВтСвязанныеДокументыКорректировок КАК ТабДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалютыУпр
	|			ПО КурсыВалютыУпр.Валюта = &ВалютаУпрУчета
	|				И ТабДокументы.ВалютаРегламентированногоУчета = КурсыВалютыУпр.БазоваяВалюта
	|				И ТабДокументы.Дата >= КурсыВалютыУпр.Период) КАК ТабДокументы
	|СГРУППИРОВАТЬ ПО
	|		ТабДокументы.СвязанныйДокумент,
	|		ТабДокументы.Валюта,
	|		ТабДокументы.БазоваяВалюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расчеты.Регистратор                    КАК Регистратор,
	|	Расчеты.ОбъектРасчетов                 КАК ОбъектРасчетов,
	|	Расчеты.ОплатаВВалюте                  КАК ОплатаВВалюте,
	|	Расчеты.НалогообложениеНДС             КАК НалогообложениеНДС,
	|	Расчеты.СвязанныйДокумент              КАК СвязанныйДокумент,
	|	Расчеты.ТипРасчетов                    КАК ТипРасчетов,
	|	Расчеты.СуммаУменьшение                КАК СуммаУменьшение,
	|	Расчеты.СуммаУвеличение                КАК СуммаУвеличение,
	|	ВЫБОР КОГДА Расчеты.СуммаУвеличение > -Расчеты.СуммаУменьшение
	|		ТОГДА -Расчеты.СуммаУменьшение
	|		ИНАЧЕ Расчеты.СуммаУвеличение
	|	КОНЕЦ                                  КАК СуммаОбщая,
	|	СУММА(Расчеты.СуммаВзаиморасчетов)     КАК СуммаВзаиморасчетов,
	|	СУММА(Расчеты.СуммаВзаиморасчетовРегл) КАК СуммаВзаиморасчетовРегл,
	|	СУММА(Расчеты.СуммаВзаиморасчетовУпр)  КАК СуммаВзаиморасчетовУпр,
	|	СУММА(Расчеты.СуммаВзаиморасчетовРегл) КАК ЧислительРегл,
	|	СУММА(Расчеты.СуммаВзаиморасчетов)     КАК ЗнаменательРегл,
	|	СУММА(Расчеты.СуммаВзаиморасчетовУпр)  КАК ЧислительУпр,
	|	СУММА(Расчеты.СуммаВзаиморасчетов)     КАК ЗнаменательУпр
	|ПОМЕСТИТЬ ВтСуммыВзаиморасчетовКорректировок
	|ИЗ (
	|	ВЫБРАТЬ
	|		СвязанныеДокументы.Регистратор                 КАК Регистратор,
	|		СвязанныеДокументы.ОбъектРасчетов              КАК ОбъектРасчетов,
	|		СвязанныеДокументы.ОплатаВВалюте               КАК ОплатаВВалюте,
	|		СвязанныеДокументы.НалогообложениеНДС          КАК НалогообложениеНДС,
	|		СвязанныеДокументы.СвязанныйДокумент           КАК СвязанныйДокумент,
	|		СвязанныеДокументы.ТипРасчетов                 КАК ТипРасчетов,
	|		СвязанныеДокументы.СуммаУменьшение             КАК СуммаУменьшение,
	|		СвязанныеДокументы.СуммаУвеличение             КАК СуммаУвеличение,
	|		ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.Долг,0)     КАК СуммаВзаиморасчетов,
	|		ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ДолгРегл,0) КАК СуммаВзаиморасчетовРегл,
	|		ЕСТЬNULL(РасчетыСКлиентамиПоСрокам.ДолгУпр,0)  КАК СуммаВзаиморасчетовУпр
	|	ИЗ
	|		ВтСвязанныеДокументыКорректировок КАК СвязанныеДокументы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|				ПО СвязанныеДокументы.СвязанныйДокумент = РасчетыСКлиентамиПоСрокам.ДокументРегистратор
	|					И СвязанныеДокументы.ОбъектРасчетов = РасчетыСКлиентамиПоСрокам.ОбъектРасчетов
	|					И РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					И РасчетыСКлиентамиПоСрокам.Долг > 0 
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И СвязанныеДокументы.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СвязанныеДокументы.Регистратор                    КАК Регистратор,
	|		СвязанныеДокументы.ОбъектРасчетов                 КАК ОбъектРасчетов,
	|		СвязанныеДокументы.ОплатаВВалюте                  КАК ОплатаВВалюте,
	|		СвязанныеДокументы.НалогообложениеНДС             КАК НалогообложениеНДС,
	|		СвязанныеДокументы.СвязанныйДокумент              КАК СвязанныйДокумент,
	|		СвязанныеДокументы.ТипРасчетов                    КАК ТипРасчетов,
	|		СвязанныеДокументы.СуммаУменьшение                КАК СуммаУменьшение,
	|		СвязанныеДокументы.СуммаУвеличение                КАК СуммаУвеличение,
	|		ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.Долг,0)     КАК СуммаВзаиморасчетов,
	|		ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ДолгРегл,0) КАК СуммаВзаиморасчетовРегл,
	|		ЕСТЬNULL(РасчетыСПоставщикамиПоСрокам.ДолгУпр,0)  КАК СуммаВзаиморасчетовУпр
	|	ИЗ
	|		ВтСвязанныеДокументыКорректировок КАК СвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|			ПО СвязанныеДокументы.СвязанныйДокумент = РасчетыСПоставщикамиПоСрокам.ДокументРегистратор
	|				И СвязанныеДокументы.ОбъектРасчетов = РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов
	|				И РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И РасчетыСПоставщикамиПоСрокам.Долг > 0
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И СвязанныеДокументы.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СвязанныеДокументы.Регистратор                                                   КАК Регистратор,
	|		СвязанныеДокументы.ОбъектРасчетов                                                КАК ОбъектРасчетов,
	|		СвязанныеДокументы.ОплатаВВалюте                                                 КАК ОплатаВВалюте,
	|		СвязанныеДокументы.НалогообложениеНДС                                            КАК НалогообложениеНДС,
	|		СвязанныеДокументы.СвязанныйДокумент                                             КАК СвязанныйДокумент,
	|		СвязанныеДокументы.ТипРасчетов                                                   КАК ТипРасчетов,
	|		СвязанныеДокументы.СуммаУменьшение                                               КАК СуммаУменьшение,
	|		СвязанныеДокументы.СуммаУвеличение                                               КАК СуммаУвеличение,
	|		ВЫБОР КОГДА ЕСТЬNULL(РасчетыСКлиентами.ВидДвижения,Неопределено) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.Долг,0) + ЕСТЬNULL(РасчетыСКлиентами.Предоплата,0)
	|			ИНАЧЕ -ЕСТЬNULL(РасчетыСКлиентами.Долг,0) - ЕСТЬNULL(РасчетыСКлиентами.Предоплата,0)
	|		КОНЕЦ                                                                            КАК СуммаВзаиморасчетов,
	|		ВЫБОР КОГДА ЕСТЬNULL(РасчетыСКлиентами.ВидДвижения,Неопределено) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.ДолгРегл,0) + ЕСТЬNULL(РасчетыСКлиентами.ПредоплатаРегл,0)
	|			ИНАЧЕ -ЕСТЬNULL(РасчетыСКлиентами.ДолгРегл,0) - ЕСТЬNULL(РасчетыСКлиентами.ПредоплатаРегл,0)
	|		КОНЕЦ                                                                            КАК СуммаВзаиморасчетовРегл,
	|		ВЫБОР КОГДА ЕСТЬNULL(РасчетыСКлиентами.ВидДвижения,Неопределено) = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА ЕСТЬNULL(РасчетыСКлиентами.ДолгУпр,0) + ЕСТЬNULL(РасчетыСКлиентами.ПредоплатаУпр,0)
	|			ИНАЧЕ -ЕСТЬNULL(РасчетыСКлиентами.ДолгУпр,0) - ЕСТЬNULL(РасчетыСКлиентами.ПредоплатаУпр,0)
	|		КОНЕЦ                                                                            КАК СуммаВзаиморасчетовУпр
	|	ИЗ
	|		ВтСвязанныеДокументыКорректировок КАК СвязанныеДокументы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК РасчетыСКлиентами
	|				ПО СвязанныеДокументы.СвязанныйДокумент = РасчетыСКлиентами.Регистратор
	|					И СвязанныеДокументы.ОбъектРасчетов = РасчетыСКлиентами.ЗаказКлиента
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И СвязанныеДокументы.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СвязанныеДокументы.Регистратор                                                   КАК Регистратор,
	|		СвязанныеДокументы.ОбъектРасчетов                                                КАК ОбъектРасчетов,
	|		СвязанныеДокументы.ОплатаВВалюте                                                 КАК ОплатаВВалюте,
	|		СвязанныеДокументы.НалогообложениеНДС                                            КАК НалогообложениеНДС,
	|		СвязанныеДокументы.СвязанныйДокумент                                             КАК СвязанныйДокумент,
	|		СвязанныеДокументы.ТипРасчетов                                                   КАК ТипРасчетов,
	|		СвязанныеДокументы.СуммаУменьшение                                               КАК СуммаУменьшение,
	|		СвязанныеДокументы.СуммаУвеличение                                               КАК СуммаУвеличение,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыСПоставщиками.Долг + РасчетыСПоставщиками.Предоплата
	|			ИНАЧЕ -РасчетыСПоставщиками.Долг - РасчетыСПоставщиками.Предоплата
	|		КОНЕЦ                                                                            КАК СуммаВзаиморасчетов,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыСПоставщиками.ДолгРегл + РасчетыСПоставщиками.ПредоплатаРегл
	|			ИНАЧЕ -РасчетыСПоставщиками.ДолгРегл - РасчетыСПоставщиками.ПредоплатаРегл
	|		КОНЕЦ                                                                            КАК СуммаВзаиморасчетовРегл,
	|		ВЫБОР КОГДА РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА РасчетыСПоставщиками.ДолгУпр + РасчетыСПоставщиками.ПредоплатаУпр
	|			ИНАЧЕ -РасчетыСПоставщиками.ДолгУпр - РасчетыСПоставщиками.ПредоплатаУпр
	|		КОНЕЦ                                                                            КАК СуммаВзаиморасчетовУпр
	|	ИЗ
	|		ВтСвязанныеДокументыКорректировок КАК СвязанныеДокументы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК РасчетыСПоставщиками
	|				ПО СвязанныеДокументы.СвязанныйДокумент = РасчетыСПоставщиками.Регистратор
	|					И СвязанныеДокументы.ОбъектРасчетов = РасчетыСПоставщиками.ЗаказПоставщику
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И СвязанныеДокументы.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СвязанныеДокументы.Регистратор                                                   КАК Регистратор,
	|		СвязанныеДокументы.ОбъектРасчетов                                                КАК ОбъектРасчетов,
	|		СвязанныеДокументы.ОплатаВВалюте                                                 КАК ОплатаВВалюте,
	|		СвязанныеДокументы.НалогообложениеНДС                                            КАК НалогообложениеНДС,
	|		СвязанныеДокументы.СвязанныйДокумент                                             КАК СвязанныйДокумент,
	|		СвязанныеДокументы.ТипРасчетов                                                   КАК ТипРасчетов,
	|		СвязанныеДокументы.СуммаУменьшение                                               КАК СуммаУменьшение,
	|		СвязанныеДокументы.СуммаУвеличение                                               КАК СуммаУвеличение,
	|		ВЫРАЗИТЬ(СвязанныеДокументы.СвязанныйДокумент КАК Документ.ПервичныйДокумент).СуммаДокумента КАК СуммаВзаиморасчетов,
	|		ВЫРАЗИТЬ(СвязанныеДокументы.СвязанныйДокумент КАК Документ.ПервичныйДокумент).СуммаРегл      КАК СуммаВзаиморасчетовРегл,
	|		ВЫРАЗИТЬ(СвязанныеДокументы.СвязанныйДокумент КАК Документ.ПервичныйДокумент).СуммаУпр       КАК СуммаВзаиморасчетовУпр
	|	ИЗ
	|		ВтСвязанныеДокументыКорректировок КАК СвязанныеДокументы
	|	ГДЕ
	|		СвязанныеДокументы.СвязанныйДокумент ССЫЛКА Документ.ПервичныйДокумент
	|) КАК Расчеты
	|СГРУППИРОВАТЬ ПО
	|	Расчеты.ТипРасчетов,
	|	Расчеты.Регистратор,
	|	Расчеты.ОбъектРасчетов,
	|	Расчеты.ОплатаВВалюте,
	|	Расчеты.НалогообложениеНДС,
	|	Расчеты.СвязанныйДокумент,
	|	ВЫБОР КОГДА Расчеты.СуммаУвеличение > Расчеты.СуммаУменьшение 
	|			ТОГДА Расчеты.СуммаУменьшение
	|		ИНАЧЕ Расчеты.СуммаУвеличение
	|	КОНЕЦ,
	|	Расчеты.СуммаУменьшение,
	|	Расчеты.СуммаУвеличение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.ТипРасчетов                  КАК ТипРасчетов,
	|	ДанныеРегистра.Регистратор                  КАК Регистратор,
	|	ДанныеРегистра.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ДанныеРегистра.ВозможныРазвернутыеДвижения  КАК ВозможныРазвернутыеДвижения,
	|	МАКСИМУМ(ДанныеРегистра.ОплатаВВалюте)      КАК ОплатаВВалюте,
	|	МАКСИМУМ(ДанныеРегистра.НалогообложениеНДС) КАК НалогообложениеНДС,
	|	СУММА(ДанныеРегистра.СуммаПредоплата)       КАК Предоплата,
	|	СУММА(ДанныеРегистра.СуммаДолг)             КАК Долг,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл)        КАК ПредоплатаРегл,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр)         КАК ПредоплатаУпр,
	|	СУММА(ДанныеРегистра.ДолгРегл)              КАК ДолгРегл,
	|	СУММА(ДанныеРегистра.ДолгУпр)               КАК ДолгУпр,
	|	СУММА(ДанныеРегистра.СуммаПредоплатаДоОтгрузки) КАК ПредоплатаДоОтгрузки,
	|	СУММА(ДанныеРегистра.ПредоплатаРеглДоОтгрузки) КАК ПредоплатаРеглДоОтгрузки,
	|	СУММА(ДанныеРегистра.СуммаПредоплата)
	|		+ СУММА(ДанныеРегистра.СуммаДолг)       КАК СуммаРасчетов,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл)
	|		+ СУММА(ДанныеРегистра.ДолгРегл)        КАК СуммаРасчетовРегл,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр)
	|		+ СУММА(ДанныеРегистра.ДолгУпр)         КАК СуммаРасчетовУпр
	|ПОМЕСТИТЬ ВтСвернутыеСуммыВзаиморасчетов
	|ИЗ
	|	(
	|	//Суммы  документов с клиентами
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|		ДанныеРегистра.Регистратор                                      КАК Регистратор,
	|		ДанныеРегистра.ЗаказКлиента                                     КАК ОбъектРасчетов,
	|		ДанныеРегистра.ЗаказКлиента.ОплатаВВалюте                       КАК ОплатаВВалюте,
	|		ДанныеРегистра.ЗаказКлиента.НалогообложениеНДС                  КАК НалогообложениеНДС,
	|	
	|		ВЫБОР
	|				КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -ДанныеРегистра.Предоплата
	|				ИНАЧЕ ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                           КАК СуммаПредоплата,
	|		ВЫБОР
	|				КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -ДанныеРегистра.Предоплата
	|				ИНАЧЕ ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                           КАК СуммаПредоплатаДоОтгрузки,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА ДанныеРегистра.Долг
	|			КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -ДанныеРегистра.Долг
	|				ИНАЧЕ 0
	|		КОНЕЦ                                                           КАК СуммаДолг,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ДанныеРегистра.ПредоплатаРегл
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                           КАК ПредоплатаРегл,
	|		
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ДанныеРегистра.ПредоплатаРегл
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                           КАК ПредоплатаРеглДоОтгрузки,
	|		
	|		ВЫБОР 
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ДанныеРегистра.ПредоплатаУпр
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДанныеРегистра.ПредоплатаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                           КАК ПредоплатаУпр,
	|	
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДанныеРегистра.ДолгРегл
	|			КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -ДанныеРегистра.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                           КАК ДолгРегл,
	|	
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ДанныеРегистра.ДолгУпр
	|			КОГДА ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА -ДанныеРегистра.ДолгУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                           КАК ДолгУпр,
	|		ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРеализации КАК ВозможныРазвернутыеДвижения
	|	
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыДокументов.Регистратор = ДанныеРегистра.Регистратор
	|					И СуммыДокументов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И СуммыДокументов.ОбъектРасчетов = ДанныеРегистра.ЗаказКлиента
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И ДанныеРегистра.Регистратор В (&МассивДокументов)
	|		И НЕ ДанныеРегистра.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом),
	|												ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера))
	|		И (ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности) И (ДанныеРегистра.Долг < 0 ИЛИ ДанныеРегистра.Предоплата < 0))
	|		И НЕ (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|				И ДанныеРегистра.ЗаказКлиента.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация))
	|		И (ДанныеРегистра.Валюта <> ДанныеРегистра.ЗаказКлиента.Организация.ВалютаРегламентированногоУчета
	|			ИЛИ ДанныеРегистра.Валюта <> &ВалютаУпрУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//Реализации в статусе ""В пути""
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|		ДанныеРегистра.Регистратор                                      КАК Регистратор,
	|		ДанныеРегистра.ЗаказКлиента                                     КАК ОбъектРасчетов,
	|		ДанныеРегистра.Регистратор.ОплатаВВалюте                        КАК ОплатаВВалюте,
	|		ДанныеРегистра.Регистратор.НалогообложениеНДС                   КАК НалогообложениеНДС,
	|
	|		ДанныеРегистра.Предоплата                                       КАК СуммаПредоплата,
	|		ДанныеРегистра.Предоплата                                       КАК СуммаПредоплатаДоОтгрузки,
	|		0                                                               КАК СуммаДолг,
	|		ДанныеРегистра.ПредоплатаРегл                                   КАК ПредоплатаРегл,
	|		ДанныеРегистра.ПредоплатаРегл                                   КАК ПредоплатаРеглДоОтгрузки,
	|		ДанныеРегистра.ПредоплатаУпр                                    КАК ПредоплатаУпр,
	|		0                                                               КАК ДолгРегл,
	|		0                                                               КАК ДолгУпр,
	|		ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаРеализации КАК ВозможныРазвернутыеДвижения
	|	
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоДокументам КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыДокументов.Регистратор = ДанныеРегистра.Регистратор
	|					И СуммыДокументов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И СуммыДокументов.ОбъектРасчетов = ДанныеРегистра.ЗаказКлиента
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|		И ВЫБОР 
	|			КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.РеализацияТоваровУслуг).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути)
	|				КОГДА ДанныеРегистра.Регистратор ССЫЛКА Документ.РеализацияУслугПрочихАктивов
	|				ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.Регистратор КАК Документ.РеализацияУслугПрочихАктивов).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|		ДанныеРегистра.ДокументРегистратор                              КАК Регистратор,
	|		ДанныеРегистра.ОбъектРасчетов                                   КАК ОбъектРасчетов,
	|		ДанныеРегистра.ОбъектРасчетов.ОплатаВВалюте                     КАК ОплатаВВалюте,
	|		ДанныеРегистра.ОбъектРасчетов.НалогообложениеНДС                КАК НалогообложениеНДС,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.Предоплата
	|			ИНАЧЕ -ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                          КАК СуммаПредоплата,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ДатаВозникновения > СуммыДокументов.Период
	|				ТОГДА 0
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.Предоплата
	|			ИНАЧЕ -ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                          КАК СуммаПредоплатаДоОтгрузки,
	|		ВЫБОР 
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -ДанныеРегистра.Долг
	|			ИНАЧЕ ДанныеРегистра.Долг
	|		КОНЕЦ                                                           КАК СуммаДолг,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ -ДанныеРегистра.ПредоплатаРегл
	|		КОНЕЦ                                                           КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ДатаВозникновения > СуммыДокументов.Период
	|				ТОГДА 0
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ -ДанныеРегистра.ПредоплатаРегл 
	|		КОНЕЦ                                                           КАК ПредоплатаРеглДоОтгрузки,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ТОГДА ДанныеРегистра.ПредоплатаУпр
	|			ИНАЧЕ -ДанныеРегистра.ПредоплатаУпр
	|		КОНЕЦ                                                           КАК ПредоплатаУпр,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -ДанныеРегистра.ДолгРегл
	|			ИНАЧЕ ДанныеРегистра.ДолгРегл
	|		КОНЕЦ                                                           КАК ДолгРегл,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА -ДанныеРегистра.ДолгУпр
	|			ИНАЧЕ ДанныеРегистра.ДолгУпр
	|		КОНЕЦ                                                           КАК ДолгУпр,
	|		ДанныеРегистра.ДокументРегистратор ССЫЛКА Документ.КорректировкаРеализации КАК ВозможныРазвернутыеДвижения
	|	
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыДокументов.Регистратор = ДанныеРегистра.ДокументРегистратор
	|					И СуммыДокументов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И СуммыДокументов.ОбъектРасчетов = ДанныеРегистра.ОбъектРасчетов
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) <> ТИП(Документ.КорректировкаЗадолженности)
	|		И НЕ ДанныеРегистра.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера))
	|		И (ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) = ТИП(Документ.ВзаимозачетЗадолженности))
	|		И НЕ (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|				И ДанныеРегистра.ОбъектРасчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация))
	|		И (ДанныеРегистра.Валюта <> ДанныеРегистра.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|			ИЛИ ДанныеРегистра.Валюта <> &ВалютаУпрУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|		ДанныеРегистра.ДокументРегистратор                              КАК Регистратор,
	|		ДанныеРегистра.ОбъектРасчетов                                   КАК ОбъектРасчетов,
	|		ДанныеРегистра.ОбъектРасчетов.ОплатаВВалюте                     КАК ОплатаВВалюте,
	|		ДанныеРегистра.ОбъектРасчетов.НалогообложениеНДС                КАК НалогообложениеНДС,
	|		ДанныеРегистра.Предоплата                                       КАК СуммаПредоплата,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ДатаВозникновения > СуммыДокументов.Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                           КАК СуммаПредоплатаДоОтгрузки,
	|		ДанныеРегистра.Долг                                             КАК СуммаДолг,
	|		ДанныеРегистра.ПредоплатаРегл                                   КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ДатаВозникновения > СуммыДокументов.Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеРегистра.ПредоплатаРегл 
	|		КОНЕЦ                                                           КАК ПредоплатаРеглДоОтгрузки,
	|		ДанныеРегистра.ПредоплатаУпр                                    КАК ПредоплатаУпр,
	|		ДанныеРегистра.ДолгРегл                                         КАК ДолгРегл,
	|		ДанныеРегистра.ДолгУпр                                          КАК ДолгУпр,
	|		ЛОЖЬ                                                            КАК ВозможныРазвернутыеДвижения
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыДокументов.Регистратор = ДанныеРегистра.ДокументРегистратор
	|					И СуммыДокументов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И СуммыДокументов.ОбъектРасчетов = ДанныеРегистра.ОбъектРасчетов
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) = ТИП(Документ.КорректировкаЗадолженности)
	|		И НЕ ДанныеРегистра.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаКлиента))
	|		И (ДанныеРегистра.Валюта <> ДанныеРегистра.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|			ИЛИ ДанныеРегистра.Валюта <> &ВалютаУпрУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	//Реализации в статусе ""В пути""
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|		ДанныеРегистра.ДокументРегистратор                              КАК Регистратор,
	|		ДанныеРегистра.ОбъектРасчетов                                   КАК ОбъектРасчетов,
	|		ДанныеРегистра.ДокументРегистратор.ОплатаВВалюте                КАК ОплатаВВалюте,
	|		ДанныеРегистра.ДокументРегистратор.НалогообложениеНДС           КАК НалогообложениеНДС,
	|		ДанныеРегистра.Предоплата                                       КАК СуммаПредоплата,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ДатаВозникновения <= СуммыДокументов.Период
	|				ТОГДА ДанныеРегистра.Предоплата
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                           КАК СуммаПредоплатаДоОтгрузки,
	|		0                                                               КАК СуммаДолг,
	|		ДанныеРегистра.ПредоплатаРегл                                   КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ДатаВозникновения <= СуммыДокументов.Период
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                           КАК ПредоплатаРеглДоОтгрузки,
	|		ДанныеРегистра.ПредоплатаУпр                                    КАК ПредоплатаУпр,
	|		0                                                               КАК ДолгРегл,
	|		0                                                               КАК ДолгУпр,
	|		ДанныеРегистра.ДокументРегистратор ССЫЛКА Документ.КорректировкаРеализации КАК ВозможныРазвернутыеДвижения
	|	
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыДокументов.Регистратор = ДанныеРегистра.ДокументРегистратор
	|					И СуммыДокументов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					И СуммыДокументов.ОбъектРасчетов = ДанныеРегистра.ОбъектРасчетов
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РезервированиеАвансаКлиента)
	|		И ВЫБОР 
	|			КОГДА ДанныеРегистра.ДокументРегистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|				ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.ДокументРегистратор КАК Документ.РеализацияТоваровУслуг).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути)
	|				КОГДА ДанныеРегистра.ДокументРегистратор ССЫЛКА Документ.РеализацияУслугПрочихАктивов
	|				ТОГДА ВЫРАЗИТЬ(ДанныеРегистра.ДокументРегистратор КАК Документ.РеализацияУслугПрочихАктивов).Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.ВПути)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	//Суммы документов с поставщиками
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|		ДанныеРегистра.Регистратор                                         КАК Регистратор,
	|		ДанныеРегистра.ЗаказПоставщику                                     КАК АналитикаУчетаПоПартнерам,
	|		ДанныеРегистра.ЗаказПоставщику.ОплатаВВалюте                       КАК ОплатаВВалюте,
	|		ДанныеРегистра.ЗаказПоставщику.НалогообложениеНДС                  КАК НалогообложениеНДС,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.Предоплата
	|			ИНАЧЕ -ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                              КАК СуммаПредоплата,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.Предоплата
	|			ИНАЧЕ -ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                              КАК СуммаПредоплатаДоОтгрузки,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.Долг
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				ТОГДА -ДанныеРегистра.Долг
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                              КАК СуммаДолг,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ -ДанныеРегистра.ПредоплатаРегл
	|		КОНЕЦ                                                              КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ -ДанныеРегистра.ПредоплатаРегл 
	|		КОНЕЦ                                                              КАК ПредоплатаРеглДоОтгрузки,
	|		
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.ПредоплатаУпр
	|			ИНАЧЕ -ДанныеРегистра.ПредоплатаУпр
	|		КОНЕЦ                                                              КАК ПредоплатаУпр,
	|		
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.ДолгРегл
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
	|				И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				ТОГДА -ДанныеРегистра.ДолгРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                              КАК ДолгРегл,
	|		
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ДанныеРегистра.ДолгУпр
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				И ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности)
	|				ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.ВзаимозачетЗадолженности
	|				ТОГДА -ДанныеРегистра.ДолгУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ                                                              КАК ДолгУпр,
	|		ДанныеРегистра.Регистратор ССЫЛКА Документ.КорректировкаПриобретения КАК ВозможныРазвернутыеДвижения
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоДокументам КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыДокументов.Регистратор = ДанныеРегистра.Регистратор
	|					И СуммыДокументов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И СуммыДокументов.ОбъектРасчетов = ДанныеРегистра.ЗаказПоставщику
	|	ГДЕ
	|		НЕ &НоваяАрхитектураВзаиморасчетов
	|		И НЕ ДанныеРегистра.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом),
	|													ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера))
	|		И (ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.Регистратор) = ТИП(Документ.ВзаимозачетЗадолженности) И (ДанныеРегистра.Долг < 0 ИЛИ ДанныеРегистра.Предоплата < 0))
	|		И НЕ (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|				И ДанныеРегистра.ЗаказПоставщику.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация))
	|		И (ДанныеРегистра.Валюта <> ДанныеРегистра.ЗаказПоставщику.Организация.ВалютаРегламентированногоУчета
	|			ИЛИ ДанныеРегистра.Валюта <> &ВалютаУпрУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|		ДанныеРегистра.ДокументРегистратор                                 КАК Регистратор,
	|		ДанныеРегистра.ОбъектРасчетов                                      КАК ОбъектРасчетов,
	|		ДанныеРегистра.ОбъектРасчетов.ОплатаВВалюте                        КАК ОплатаВВалюте,
	|		ДанныеРегистра.ОбъектРасчетов.НалогообложениеНДС                   КАК НалогообложениеНДС,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ДанныеРегистра.Предоплата
	|			ИНАЧЕ ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                              КАК СуммаПредоплата,
	|		ВЫБОР 
	|			КОГДА ДанныеРегистра.ДатаВозникновения > СуммыДокументов.Период
	|				ТОГДА 0
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ДанныеРегистра.Предоплата
	|			ИНАЧЕ ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                              КАК СуммаПредоплатаДоОтгрузки,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|			ТОГДА -ДанныеРегистра.Долг
	|			ИНАЧЕ ДанныеРегистра.Долг
	|		КОНЕЦ                                                              КАК СуммаДолг,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ ДанныеРегистра.ПредоплатаРегл
	|		КОНЕЦ                                                              КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ДатаВозникновения > СуммыДокументов.Период
	|				ТОГДА 0
	|			КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ДанныеРегистра.ПредоплатаРегл
	|			ИНАЧЕ ДанныеРегистра.ПредоплатаРегл 
	|		КОНЕЦ                                                              КАК ПредоплатаРеглДоОтгрузки,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 
	|			ТОГДА -ДанныеРегистра.ПредоплатаУпр
	|			ИНАЧЕ ДанныеРегистра.ПредоплатаУпр
	|		КОНЕЦ                                                              КАК ПредоплатаУпр,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|			ТОГДА -ДанныеРегистра.ДолгРегл
	|			ИНАЧЕ ДанныеРегистра.ДолгРегл
	|		КОНЕЦ                                                              КАК ДолгРегл,
	|		ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|			ТОГДА -ДанныеРегистра.ДолгУпр
	|			ИНАЧЕ ДанныеРегистра.ДолгУпр
	|		КОНЕЦ                                                              КАК ДолгУпр,
	|		ДанныеРегистра.ДокументРегистратор ССЫЛКА Документ.КорректировкаПриобретения КАК ВозможныРазвернутыеДвижения
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыДокументов.Регистратор = ДанныеРегистра.ДокументРегистратор
	|					И СуммыДокументов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И СуммыДокументов.ОбъектРасчетов = ДанныеРегистра.ОбъектРасчетов
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) <> ТИП(Документ.КорректировкаЗадолженности)
	|		И НЕ (ДанныеРегистра.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|				И ДанныеРегистра.ОбъектРасчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация))
	|		И НЕ ДанныеРегистра.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера))
	|		И (ДанныеРегистра.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) = ТИП(Документ.ВзаимозачетЗадолженности))
	|		И (ДанныеРегистра.Валюта <> ДанныеРегистра.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|			ИЛИ ДанныеРегистра.Валюта <> &ВалютаУпрУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|		ДанныеРегистра.ДокументРегистратор                                 КАК Регистратор,
	|		ДанныеРегистра.ОбъектРасчетов                                      КАК ОбъектРасчетов,
	|		ДанныеРегистра.ОбъектРасчетов.ОплатаВВалюте                        КАК ОплатаВВалюте,
	|		ДанныеРегистра.ОбъектРасчетов.НалогообложениеНДС                   КАК НалогообложениеНДС,
	|		ДанныеРегистра.Предоплата                                          КАК СуммаПредоплата,
	|		ВЫБОР 
	|			КОГДА ДанныеРегистра.ДатаВозникновения > СуммыДокументов.Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеРегистра.Предоплата
	|		КОНЕЦ                                                              КАК СуммаПредоплатаДоОтгрузки,
	|		ДанныеРегистра.Долг                                                КАК СуммаДолг,
	|		ДанныеРегистра.ПредоплатаРегл                                      КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА ДанныеРегистра.ДатаВозникновения > СуммыДокументов.Период
	|				ТОГДА 0
	|			ИНАЧЕ ДанныеРегистра.ПредоплатаРегл 
	|		КОНЕЦ                                                              КАК ПредоплатаРеглДоОтгрузки,
	|		ДанныеРегистра.ПредоплатаУпр                                       КАК ПредоплатаУпр,
	|		ДанныеРегистра.ДолгРегл                                            КАК ДолгРегл,
	|		ДанныеРегистра.ДолгУпр                                             КАК ДолгУпр,
	|		ЛОЖЬ                                                               КАК ВозможныРазвернутыеДвижения
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК ДанныеРегистра
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСуммыДокументов КАК СуммыДокументов
	|				ПО СуммыДокументов.Регистратор = ДанныеРегистра.ДокументРегистратор
	|					И СуммыДокументов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|					И СуммыДокументов.ОбъектРасчетов = ДанныеРегистра.ОбъектРасчетов
	|	ГДЕ
	|		&НоваяАрхитектураВзаиморасчетов
	|		И ТИПЗНАЧЕНИЯ(ДанныеРегистра.ДокументРегистратор) = ТИП(Документ.КорректировкаЗадолженности)
	|		И НЕ ДанныеРегистра.ХозяйственнаяОперация В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗачетАвансаПоставщику))
	|		И (ДанныеРегистра.Валюта <> ДанныеРегистра.ОбъектРасчетов.Организация.ВалютаРегламентированногоУчета
	|			ИЛИ ДанныеРегистра.Валюта <> &ВалютаУпрУчета)
	|) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО 
	|	ДанныеРегистра.ТипРасчетов,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.ВозможныРазвернутыеДвижения
	|;
	|ВЫБРАТЬ
	|	ДанныеРегистровРасчетов.ТипРасчетов                  КАК ТипРасчетов,
	|	ДанныеРегистровРасчетов.Регистратор                  КАК Регистратор,
	|	ДанныеРегистровРасчетов.ОбъектРасчетов               КАК ОбъектРасчетов,
	|	ДанныеРегистровРасчетов.ВозможныРазвернутыеДвижения  КАК ВозможныРазвернутыеДвижения,
	|	ДанныеРегистровРасчетов.ОплатаВВалюте                КАК ОплатаВВалюте,
	|	ДанныеРегистровРасчетов.НалогообложениеНДС           КАК НалогообложениеНДС,
	|	ДанныеРегистровРасчетов.Предоплата                   КАК Предоплата,
	|	ДанныеРегистровРасчетов.ПредоплатаДоОтгрузки         КАК ПредоплатаДоОтгрузки,
	|	ДанныеРегистровРасчетов.Долг                         КАК Долг,
	|	ДанныеРегистровРасчетов.ПредоплатаРегл               КАК ПредоплатаРегл,
	|	ДанныеРегистровРасчетов.ПредоплатаРеглДоОтгрузки     КАК ПредоплатаРеглДоОтгрузки,
	|	ДанныеРегистровРасчетов.ПредоплатаУпр                КАК ПредоплатаУпр,
	|	ДанныеРегистровРасчетов.ДолгРегл                     КАК ДолгРегл,
	|	ДанныеРегистровРасчетов.ДолгУпр                      КАК ДолгУпр,
	|	ЕСТЬNULL(СуммыКорректировок.ЧислительРегл, ДанныеРегистровРасчетов.СуммаРасчетовРегл) КАК ЧислительРегл,
	|	ЕСТЬNULL(СуммыКорректировок.ЗнаменательРегл, ДанныеРегистровРасчетов.СуммаРасчетов) КАК ЗнаменательРегл,
	|	ЕСТЬNULL(СуммыКорректировок.ЧислительУпр, ДанныеРегистровРасчетов.СуммаРасчетовУпр) КАК ЧислительУпр,
	|	ЕСТЬNULL(СуммыКорректировок.ЗнаменательУпр, ДанныеРегистровРасчетов.СуммаРасчетов) КАК ЗнаменательУпр
	|ПОМЕСТИТЬ ИмяВт
	|ИЗ
	|	ВтСвернутыеСуммыВзаиморасчетов КАК ДанныеРегистровРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСуммыВзаиморасчетовКорректировок КАК СуммыКорректировок
	|			ПО ДанныеРегистровРасчетов.Регистратор = СуммыКорректировок.Регистратор
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ИмяВт", ИмяВТ);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"ПОМЕСТИТЬ" + " " + Символы.ПС, "");
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает для каждого регистратора суммы расчетов в валютах регламентированного и управленческого учета для распределения.
// Параметры:
//		МассивРегистраторов - Массив - Массив документов, по которым нужно расчитать суммы.
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица сумм и коэффициентов:
//	 *	ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - тип расчетов регистратора.
//	 *	Регистратор - ДокументСсылка - Документ, для которого произведен расчет.
//	 *	АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика учета расчетов по партнерам.
//	 *	ОплатаВВалюте - Булево - Признак оплаты в иностранной валюте.
//	 *	НалогообложениеНДС - ПеречислениеСсылка.ТипыНалогообложенияНДС - Налогообложение НДС документа.
//	 *	СуммаВзаиморасчетов - Число - Сумма взаиморасчетов документа, всегда положительная.
//	 *	ПредоплатаРегл - Число - Сумма зачтенной/возвращенной предоплаты в валюте регламентированного учета.
//	 *	ПредоплатаУпр - Число - Сумма зачтенной/возвращенной предоплаты в валюте управленческого учета.
//	 *	ДолгРегл - Число - Сумма погашенного/возникшего долга в валюте регламентированного учета.
//	 *	ДолгУпр - Число - Сумма погашенного/возникшего долга в валюте управленческого учета.
//	 *	КоэффициентРегл - Число - Коэффициент пересчета суммы расчетов в валюту регламентированного учета оснований корректировок.
//	 *	КоэффициентУпр - Число - Коэффициент пересчета суммы расчетов в валюту управленческого учета оснований корректировок.
//
Функция СуммыДокументовДляПострочногоРаспределения(МассивРегистраторов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаСуммВзаиморасчетов();
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивРегистраторов);
	Запрос.УстановитьПараметр("ПоВсемДокументам", НЕ ЗначениеЗаполнено(МассивРегистраторов));
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", Константы.НоваяАрхитектураВзаиморасчетов.Получить());
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();
	
КонецФункции

Процедура ПересчитатьТаблицуВВалютыУчета(МенеджерВременныхТаблиц)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ОбъектыРасчетов.НалогообложениеНДС,
	|	                                Неопределено) КАК НалогообложениеНДС,
	|	ЕСТЬNULL(ОбъектыРасчетов.ОплатаВВалюте, Ложь) КАК ОплатаВВалюте,
	|	ТаблицаТоваров.ИсточникДанных,
	|	ТаблицаТоваров.РаспределятьОбщуюСумму КАК РаспределятьОбщуюСумму,
	|	ТаблицаТоваров.Регистратор КАК Регистратор,
	|	ТаблицаТоваров.Период КАК Период,
	|	ТаблицаТоваров.Организация КАК Организация,
	|	ТаблицаТоваров.Валюта КАК Валюта,
	|	ТаблицаТоваров.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаТоваров.ПериодБазыНДС КАК ПериодБазыНДС,
	|	ТаблицаТоваров.ДатаКурса КАК ДатаКурса,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТоваров.СуммаБезНДС КАК СуммаБезНДС,
	|	ТаблицаТоваров.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаНДС КАК СуммаНДС,
	|	ТаблицаТоваров.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаТоваров.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
	|	ТаблицаТоваров.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
	|	ТаблицаТоваров.СуммаБезНДСУпр КАК СуммаБезНДСУпр,
	|	ТаблицаТоваров.ОтражаетсяВРасчетах КАК ОтражаетсяВРасчетах,
	|	ТаблицаТоваров.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТаблицаТоваров.ПересчитыватьПоДаннымРасчетов КАК ПересчитыватьПоДаннымРасчетов,
	|	ТаблицаТоваров.Договор КАК Договор,
	|	ТаблицаТоваров.ВариантКурсаДоговора КАК ВариантКурсаДоговора,
	|	ВЫБОР
	|		КОГДА (ТаблицаТоваров.СуммаБезНДС + ТаблицаТоваров.СуммаНДС) < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Знак
	|ИЗ
	|	ДанныеДокументаПредварительная КАК ТаблицаТоваров
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ТаблицаТоваров.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТоваров.НомерСтроки
	|ИТОГИ
	|	СУММА(СуммаБезНДС),
	|	СУММА(СуммаНДС),
	|	СУММА(СуммаБезНДСРегл),
	|	СУММА(СуммаБезНДСУпр),
	|	МАКСИМУМ(ПериодБазыНДС)
	|ПО
	|	Регистратор,
	|	Валюта,
	|	Организация,
	|	ДатаКурса,
	|	Договор,
	|	ВариантКурсаДоговора,
	|	ВалютаВзаиморасчетов,
	|	РаспределятьОбщуюСумму,
	|	ИсточникДанных,
	|	Знак
	|";
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписейСуммыДокументов = РегистрыСведений.СуммыДокументовВВалютахУчета.СоздатьНаборЗаписей();
	СуммыДокументовВВалютахУчета = НаборЗаписейСуммыДокументов.Выгрузить(); // ТаблицаЗначений -
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если СуммыДокументовВВалютахУчета.Колонки.Найти(Колонка.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если Колонка.ТипЗначения <> Новый ОписаниеТипов("Неопределено") Тогда
			ОписаниеТиповКолонки = Колонка.ТипЗначения;
		Иначе
			ОписаниеТиповКолонки = ОбщегоНазначения.ОписаниеТипаВсеСсылки();
		КонецЕсли;
		СуммыДокументовВВалютахУчета.Колонки.Добавить(Колонка.Имя, ОписаниеТиповКолонки);
	КонецЦикла;
	СуммыДокументовВВалютахУчета.Колонки.Удалить("Активность");
	СуммыДокументовВВалютахУчета.Колонки.Удалить("МоментВремени");
	
	КэшКурсовВалют = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют();
	КэшКурсовВалютДоговора = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалютДоговоров();
	
	ВыборкаПоДокументу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		ВыборкаПоВалюте = ВыборкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоВалюте.Следующий() Цикл
			
			ВыборкаПоОрганизации = ВыборкаПоВалюте.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОрганизации.Следующий() Цикл
				
				ВыборкаПоДате = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоДате.Следующий() Цикл
					
					ВыборкаПоДоговору = ВыборкаПоДате.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПоДоговору.Следующий() Цикл
						
						ВыборкаПоКурсуВалютыДоговора = ВыборкаПоДоговору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПоКурсуВалютыДоговора.Следующий() Цикл
							
							ВыборкаПоВалютеВзаиморасчетов = ВыборкаПоКурсуВалютыДоговора.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока ВыборкаПоВалютеВзаиморасчетов.Следующий() Цикл
								
								ВыборкаПоТипуПересчета = ВыборкаПоВалютеВзаиморасчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								Пока ВыборкаПоТипуПересчета.Следующий() Цикл
									
									ВыборкаПоИсточникуДанных = ВыборкаПоТипуПересчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
									Если ВыборкаПоТипуПересчета.РаспределятьОбщуюСумму Тогда
										#Область РаспределятьОбщуюСумму
										Пока ВыборкаПоИсточникуДанных.Следующий() Цикл
											ВыборкаЗнак = ВыборкаПоИсточникуДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
											Пока ВыборкаЗнак.Следующий() Цикл
												Если ВыборкаЗнак.СуммаБезНДС + ВыборкаЗнак.СуммаНДС <> 0 Тогда
													ПересчитатьТаблицуВВалютыУчетРаспределениемОбщейСуммы(ВыборкаЗнак, СуммыДокументовВВалютахУчета, КэшКурсовВалют, КэшКурсовВалютДоговора);
												Иначе
													ПересчитатьТаблицуВВалютыУчетаПострочно(ВыборкаЗнак, СуммыДокументовВВалютахУчета, КэшКурсовВалют, КэшКурсовВалютДоговора);
												КонецЕсли
											КонецЦикла;
										КонецЦикла;
										#КонецОбласти
									Иначе
										#Область ПересчетПоКурсу
										Пока ВыборкаПоИсточникуДанных.Следующий() Цикл
											ВыборкаЗнак = ВыборкаПоИсточникуДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
											Пока ВыборкаЗнак.Следующий() Цикл
												ПересчитатьТаблицуВВалютыУчетаПострочно(ВыборкаЗнак, СуммыДокументовВВалютахУчета, КэшКурсовВалют, КэшКурсовВалютДоговора);
											КонецЦикла;
										КонецЦикла;
										#КонецОбласти
									КонецЕсли;
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Поместим результат во временную таблицу
	МассивПолейВыборки = Новый Массив;
	Для Каждого Колонка Из СуммыДокументовВВалютахУчета.Колонки Цикл
		МассивПолейВыборки.Добавить(Колонка.Имя);
	КонецЦикла;
	ТекстПолейВыборки = СтрСоединить(МассивПолейВыборки, ",");
	
	ТекстЗапроса = "
	|УНИЧТОЖИТЬ ДанныеДокументаПредварительная
	|;
	|ВЫБРАТЬ
	|	&ПоляВыборки
	|ПОМЕСТИТЬ СуммыДокументовВВалютахУчета
	|ИЗ 
	|	&Таблица КАК Таблица
	|ИНДЕКСИРОВАТЬ ПО
	|		Регистратор,
	|		ИдентификаторСтроки,
	|		Период";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыборки", ТекстПолейВыборки);
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Таблица", СуммыДокументовВВалютахУчета);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ПересчитатьТаблицуВВалютыУчетаПострочно(ВыборкаЗнак, СуммыДокументовВВалютахУчета, КэшКурсовВалют, КэшКурсовВалютДоговора)
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ВыборкаЗнак.Организация);
	ВалютаУправленческогоУчета = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	
	Выборка = ВыборкаЗнак.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяЗапись = СуммыДокументовВВалютахУчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		// Для платежей в валюте курс договора не используется, в соответствии с движениями денежных средств
		КурсДоговораПрименим = Не ЭтоРегистраторДвиженийДенежныхСредств(Выборка.Регистратор) Или Выборка.Валюта = ВалютаРегламентированногоУчета;
		
		Если Выборка.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре 
			И Выборка.Валюта = Выборка.ВалютаВзаиморасчетов
			И КурсДоговораПрименим Тогда
			КурсВалютыДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(Выборка.Договор, Выборка.ДатаКурса, КэшКурсовВалютДоговора);
		Иначе
			КурсВалютыДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(Выборка.Валюта, Выборка.ДатаКурса, КэшКурсовВалют, ВалютаРегламентированногоУчета);
		КонецЕсли;
		
		КурсВалютыРеглУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВалютаРегламентированногоУчета, Выборка.ДатаКурса, КэшКурсовВалют, ВалютаРегламентированногоУчета);
		Если КурсВалютыРеглУчета = 0 Тогда
			КурсВалютыРеглУчета = 1;
		КонецЕсли;
		
		ПериодБазыНДС = ?(ЗначениеЗаполнено(ВыборкаЗнак.ПериодБазыНДС), ВыборкаЗнак.ПериодБазыНДС, ВыборкаЗнак.ДатаКурса);
		КурсВалютыДокументаДляБазыНДС = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВыборкаЗнак.Валюта, ПериодБазыНДС, КэшКурсовВалют, ВалютаРегламентированногоУчета);
		Если КурсВалютыДокументаДляБазыНДС = 0 Тогда
			КурсВалютыДокументаДляБазыНДС = 1;
		КонецЕсли; 
		
		Сумма = Выборка.СуммаБезНДС + Выборка.СуммаНДС;
		
		РассчитатьСуммуНДСРегл = Ложь;
		Если ВалютаРегламентированногоУчета = Выборка.Валюта Тогда   
			СуммаСНДСРегл = Сумма;
			СуммаНДСРегл = Выборка.СуммаНДС;
			БазаНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СуммаБезНДСРегл) Тогда
			БазаНДСРегл = Выборка.СуммаБезНДСРегл;
			СуммаНДСРегл = 0;
			СуммаСНДСРегл = БазаНДСРегл;
		ИначеЕсли ВалютаРегламентированногоУчета = Выборка.ВалютаВзаиморасчетов Тогда  
			СуммаСНДСРегл = Выборка.СуммаВзаиморасчетов;
			Если ЗначениеЗаполнено(Выборка.СуммаНДСВзаиморасчетов) Тогда
				СуммаНДСРегл = Выборка.СуммаНДСВзаиморасчетов;
				БазаНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
			Иначе
				РассчитатьСуммуНДСРегл = Истина;
			КонецЕсли;	
		Иначе
			СуммаСНДСРегл = Окр(Сумма * КурсВалютыДокумента / КурсВалютыРеглУчета, 2);
			РассчитатьСуммуНДСРегл = Истина;
		КонецЕсли; 
		
		Если РассчитатьСуммуНДСРегл Тогда
			Если Выборка.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭлектронныеУслуги Тогда
				БазаНДСРегл = Сумма * КурсВалютыДокумента;
				СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСРегл, Выборка.СтавкаНДС, Ложь);
			ИначеЕсли Выборка.ОплатаВВалюте  Тогда
				БазаНДСРегл = Выборка.СуммаБезНДС * КурсВалютыДокументаДляБазыНДС;
				Если Выборка.СуммаНДС = 0 Тогда 
					СуммаНДСРегл = 0;
				Иначе
					СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(БазаНДСРегл, Выборка.СтавкаНДС, Ложь);
				КонецЕсли;
			Иначе
				Если Выборка.СуммаНДС = 0 Тогда 
					СуммаНДСРегл = 0;
				Иначе
					СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСРегл, Выборка.СтавкаНДС);
				КонецЕсли;
				БазаНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
			КонецЕсли;	
		КонецЕсли;		
		
		НоваяЗапись.СуммаНДСРегл =  СуммаНДСРегл;
		НоваяЗапись.СуммаБезНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
		НоваяЗапись.БазаНДСРегл = БазаНДСРегл;
		
		Если Выборка.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре 
			И ВалютаУправленческогоУчета = Выборка.ВалютаВзаиморасчетов
			И КурсДоговораПрименим Тогда
			КурсВалютыУпрУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(Выборка.Договор, Выборка.ДатаКурса, КэшКурсовВалютДоговора);
		Иначе
			КурсВалютыУпрУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВалютаУправленческогоУчета, Выборка.ДатаКурса, КэшКурсовВалют, ВалютаРегламентированногоУчета);
		КонецЕсли;
		Если КурсВалютыУпрУчета = 0 Тогда
			КурсВалютыУпрУчета = 1;
		КонецЕсли;
		
		Если ВалютаУправленческогоУчета = Выборка.Валюта Тогда
			СуммаСНДСУпр = Сумма;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СуммаБезНДСУпр) Тогда
			СуммаСНДСУпр = Выборка.СуммаБезНДСУпр;
		ИначеЕсли ВалютаУправленческогоУчета = Выборка.ВалютаВзаиморасчетов
			И Выборка.СуммаВзаиморасчетов <> 0 Тогда
			СуммаСНДСУпр = Выборка.СуммаВзаиморасчетов;
		Иначе
			СуммаСНДСУпр = Окр(Сумма * КурсВалютыДокумента / КурсВалютыУпрУчета, 2);
		КонецЕсли;
		
		Если Выборка.СуммаБезНДС = 0 Тогда
			НоваяЗапись.СуммаНДСУпр = СуммаСНДСУпр;
			НоваяЗапись.СуммаБезНДСУпр = 0;
		Иначе
			НоваяЗапись.СуммаНДСУпр = СуммаНДСРегл / КурсВалютыУпрУчета;
			НоваяЗапись.СуммаБезНДСУпр = СуммаСНДСУпр - НоваяЗапись.СуммаНДСУпр;
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры

Процедура ПересчитатьТаблицуВВалютыУчетРаспределениемОбщейСуммы(ВыборкаЗнак, СуммыДокументовВВалютахУчета, КэшКурсовВалют, КэшКурсовВалютДоговора)
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ВыборкаЗнак.Организация);
	ВалютаУправленческогоУчета = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	
	// Для платежей в валюте курс договора не используется, в соответствии с движениями денежных средств
	КурсДоговораПрименим = Не ЭтоРегистраторДвиженийДенежныхСредств(ВыборкаЗнак.Регистратор) Или ВыборкаЗнак.Валюта = ВалютаРегламентированногоУчета;
	
	КурсВалютыРеглУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВалютаРегламентированногоУчета, ВыборкаЗнак.ДатаКурса, КэшКурсовВалют, ВалютаРегламентированногоУчета);
	Если КурсВалютыРеглУчета = 0 Тогда
		КурсВалютыРеглУчета = 1;
	КонецЕсли;
	Если ВыборкаЗнак.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре 
		И ВыборкаЗнак.Валюта = ВыборкаЗнак.ВалютаВзаиморасчетов
		И КурсДоговораПрименим Тогда
		КурсВалютыДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(ВыборкаЗнак.Договор, ВыборкаЗнак.ДатаКурса, КэшКурсовВалютДоговора);
	Иначе
		КурсВалютыДокумента = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВыборкаЗнак.Валюта, ВыборкаЗнак.ДатаКурса, КэшКурсовВалют, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	Если ВыборкаЗнак.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре 
		И ВалютаУправленческогоУчета = ВыборкаЗнак.ВалютаВзаиморасчетов
		И КурсДоговораПрименим Тогда
		КурсВалютыУпрУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(ВыборкаЗнак.Договор, ВыборкаЗнак.ДатаКурса, КэшКурсовВалютДоговора);
	Иначе
		КурсВалютыУпрУчета = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВалютаУправленческогоУчета, ВыборкаЗнак.ДатаКурса, КэшКурсовВалют, ВалютаРегламентированногоУчета);
	КонецЕсли;
	Если КурсВалютыУпрУчета = 0 Тогда
		КурсВалютыУпрУчета = 1;
	КонецЕсли;
	
	ПериодБазыНДС = ?(ЗначениеЗаполнено(ВыборкаЗнак.ПериодБазыНДС), ВыборкаЗнак.ПериодБазыНДС, ВыборкаЗнак.ДатаКурса);
	КурсВалютыДокументаДляБазыНДС = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВыборкаЗнак.Валюта, ПериодБазыНДС, КэшКурсовВалют, ВалютаРегламентированногоУчета);
	Если КурсВалютыДокументаДляБазыНДС = 0 Тогда
		КурсВалютыДокументаДляБазыНДС = 1;
	КонецЕсли;
	
	ОбщаяСумма = ВыборкаЗнак.СуммаБезНДС + ВыборкаЗнак.СуммаНДС;
	Если ЗначениеЗаполнено(ВыборкаЗнак.СуммаБезНДСРегл) Тогда
		ОбщаяСуммаРегл = ВыборкаЗнак.СуммаБезНДСРегл;
	Иначе
		ОбщаяСуммаРегл = Окр(ОбщаяСумма * КурсВалютыДокумента / КурсВалютыРеглУчета, 2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыборкаЗнак.СуммаБезНДСУпр) Тогда
		ОбщаяСуммаУпр = ВыборкаЗнак.СуммаБезНДСУпр;
	Иначе
		ОбщаяСуммаУпр = Окр(ОбщаяСумма * КурсВалютыДокумента / КурсВалютыУпрУчета, 2);
	КонецЕсли;
	Распределено = 0;
	РаспределеноРегл = 0;
	РаспределеноУпр = 0;
	
	Выборка = ВыборкаЗнак.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Сумма = Выборка.СуммаБезНДС + Выборка.СуммаНДС;
		
		НоваяЗапись = СуммыДокументовВВалютахУчета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
		
		РассчитатьСуммуНДСРегл = Ложь;
		
		Если ВалютаРегламентированногоУчета = Выборка.Валюта Тогда
			СуммаСНДСРегл = Сумма;
			СуммаНДСРегл = Выборка.СуммаНДС;
			БазаНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СуммаБезНДСРегл) Тогда
			СуммаСНДСРегл = Выборка.СуммаБезНДСРегл;
			СуммаНДСРегл = 0;
			БазаНДСРегл = СуммаСНДСРегл;
		ИначеЕсли ВалютаРегламентированногоУчета = Выборка.ВалютаВзаиморасчетов
			И Выборка.СуммаВзаиморасчетов <> 0 Тогда
			СуммаСНДСРегл = Выборка.СуммаВзаиморасчетов;
			Если ЗначениеЗаполнено(Выборка.СуммаНДСВзаиморасчетов) Тогда
				СуммаНДСРегл = Выборка.СуммаНДСВзаиморасчетов;
				БазаНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
			ИНаче
				РассчитатьСуммуНДСРегл = Истина;
			КонецЕсли;
		Иначе
			СуммаСНДСРегл = Окр(ОбщаяСуммаРегл * (Распределено + Сумма) / ОбщаяСумма, 2) - РаспределеноРегл;
			РассчитатьСуммуНДСРегл = Истина;
		КонецЕсли;
		
		Если РассчитатьСуммуНДСРегл Тогда
			Если Выборка.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ЭлектронныеУслуги Тогда
				БазаНДСРегл = (Выборка.СуммаБезНДС + Выборка.СуммаНДС) * КурсВалютыДокумента;
				СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСРегл, Выборка.СтавкаНДС, Ложь);
			ИначеЕсли Выборка.ОплатаВВалюте  Тогда
				БазаНДСРегл = Выборка.СуммаБезНДС * КурсВалютыДокументаДляБазыНДС;
				Если Выборка.СуммаНДС = 0 Тогда 
					СуммаНДСРегл = 0;
				Иначе
					СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(БазаНДСРегл, Выборка.СтавкаНДС, Ложь);
				КонецЕсли;
			Иначе
				Если Выборка.СуммаНДС = 0 Тогда 
					СуммаНДСРегл = 0;
				Иначе
					СуммаНДСРегл = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(СуммаСНДСРегл, Выборка.СтавкаНДС);
				КонецЕсли;
				БазаНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
			КонецЕсли;
		КонецЕсли;
		
		РаспределеноРегл = РаспределеноРегл + СуммаСНДСРегл;
		НоваяЗапись.СуммаНДСРегл = СуммаНДСРегл;
		НоваяЗапись.СуммаБезНДСРегл = СуммаСНДСРегл - СуммаНДСРегл;
		НоваяЗапись.БазаНДСРегл = БазаНДСРегл;
		
		Если ВалютаУправленческогоУчета = Выборка.Валюта Тогда
			СуммаСНДСУпр = Сумма;
		ИначеЕсли ЗначениеЗаполнено(Выборка.СуммаБезНДСУпр) Тогда
			СуммаСНДСУпр = Выборка.СуммаБезНДСУпр;
		ИначеЕсли ВалютаУправленческогоУчета = Выборка.ВалютаВзаиморасчетов
			И Выборка.СуммаВзаиморасчетов <> 0 Тогда
			СуммаСНДСУпр = Выборка.СуммаВзаиморасчетов;
		Иначе
			СуммаСНДСУпр = Окр(ОбщаяСуммаУпр * (Распределено + Сумма) / ОбщаяСумма, 2) - РаспределеноУпр;
		КонецЕсли;
		РаспределеноУпр = РаспределеноУпр + СуммаСНДСУпр;
		
		Если Выборка.СуммаБезНДС = 0 Тогда
			НоваяЗапись.СуммаНДСУпр = СуммаСНДСУпр;
			НоваяЗапись.СуммаБезНДСУпр = 0;
		Иначе
			НоваяЗапись.СуммаНДСУпр = СуммаНДСРегл / КурсВалютыУпрУчета;
			НоваяЗапись.СуммаБезНДСУпр = СуммаСНДСУпр - НоваяЗапись.СуммаНДСУпр;
		КонецЕсли;
		
		Распределено = Распределено + Сумма;
		
	КонецЦикла;

КонецПроцедуры

Функция ЭтоРегистраторДвиженийДенежныхСредств(ДокументСсылка)
	
	Возврат
		Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные.СтандартныеРеквизиты.Регистратор.Тип.СодержитТип(ТипЗнч(ДокументСсылка))
		Или Метаданные.РегистрыНакопления.ДенежныеСредстваНаличные.СтандартныеРеквизиты.Регистратор.Тип.СодержитТип(ТипЗнч(ДокументСсылка));

КонецФункции

#Область Дисконтирование 

Функция РассчитатьДисконтирование(МассивДокументов)
	
	ДокументыКПересчету = Новый Массив;
	ДанныеГрафиковОплат = ГрафикиОплатыДляДисконтирования(МассивДокументов, "РасчетыСПоставщиками", ДокументыКПересчету);
	КэшКурсовВалют = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалют();
	КэшКурсовВалютДоговора = РаботаСКурсамиВалютУТ.ИнициализироватьКэшКурсовВалютДоговоров();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеРегистра.Регистратор КАК Регистратор,
		|	ДанныеРегистра.Период КАК Период
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютахУчета КАК ДанныеРегистра
		|ГДЕ
		|	ДанныеРегистра.Регистратор В(&МассивДокументов)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СуммыДокументовВВалютахУчета.Активность КАК Активность,
		|	СуммыДокументовВВалютахУчета.Период КАК Период,
		|	СуммыДокументовВВалютахУчета.Регистратор КАК Ссылка,
		|	СуммыДокументовВВалютахУчета.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	СуммыДокументовВВалютахУчета.СуммаБезНДС КАК СуммаБезНДС,
		|	СуммыДокументовВВалютахУчета.СуммаНДС КАК СуммаНДС,
		|	СуммыДокументовВВалютахУчета.СуммаБезНДСРегл КАК СуммаБезНДСРегл,
		|	СуммыДокументовВВалютахУчета.БазаНДСРегл КАК БазаНДСРегл,
		|	СуммыДокументовВВалютахУчета.СуммаНДСРегл КАК СуммаНДСРегл,
		|	СуммыДокументовВВалютахУчета.СуммаБезНДСУпр КАК СуммаБезНДСУпр,
		|	СуммыДокументовВВалютахУчета.СуммаНДСУпр КАК СуммаНДСУпр,
		|	СуммыДокументовВВалютахУчета.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	СуммыДокументовВВалютахУчета.СуммаНДСВзаиморасчетов КАК СуммаНДСВзаиморасчетов,
		|	СуммыДокументовВВалютахУчета.СуммаПриведенная КАК СуммаПриведенная,
		|	СуммыДокументовВВалютахУчета.СуммаПриведеннаяУпр КАК СуммаПриведеннаяУпр,
		|	СуммыДокументовВВалютахУчета.СуммаПриведеннаяРегл КАК СуммаПриведеннаяРегл,
		|	СуммыДокументовВВалютахУчета.Валюта КАК Валюта,
		|	СуммыДокументовВВалютахУчета.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
		|	СуммыДокументовВВалютахУчета.СтавкаНДС КАК СтавкаНДС,
		|	СуммыДокументовВВалютахУчета.ПериодБазыНДС КАК ПериодБазыНДС,
		|	СуммыДокументовВВалютахУчета.ОтражаетсяВРасчетах КАК ОтражаетсяВРасчетах,
		|	СуммыДокументовВВалютахУчета.ОбъектРасчетов КАК ОбъектРасчетов,
		|	СуммыДокументовВВалютахУчета.ПересчитыватьПоДаннымРасчетов КАК ПересчитыватьПоДаннымРасчетов,
		|	СуммыДокументовВВалютахУчета.ТипРасчетов КАК ТипРасчетов,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(СуммыДокументовВВалютахУчета.Регистратор) = ТИП(Документ.КорректировкаПриобретения)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоКорректировкаПриобретения
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументов КАК ТаблицаДокументов
		|		ПО СуммыДокументовВВалютахУчета.Период = ТаблицаДокументов.Период
		|			И СуммыДокументовВВалютахУчета.Регистратор = ТаблицаДокументов.Регистратор
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоКорректировкаПриобретения
		|ИТОГИ ПО
		|	Ссылка
		|"; 
	Запрос.УстановитьПараметр("МассивДокументов", ДокументыКПересчету);
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаПоДокументу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	УстановитьПривилегированныйРежим(Ложь);
	// Переопределим массив для документов, у которых действительно изменилось дисконтирование
	ДокументыКПересчету = Новый Массив;
	ТаблицаСуммыДокумента = СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Пока ВыборкаПоДокументу.Следующий() Цикл
		
		Выборка = ВыборкаПоДокументу.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Запись = ТаблицаСуммыДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			
		КонецЦикла;
		
		ЕстьИзменения = ПривестиСуммыДокумента(ДанныеГрафиковОплат, ТаблицаСуммыДокумента, КэшКурсовВалют, КэшКурсовВалютДоговора, ВыборкаПоДокументу.Ссылка);
		ЗаписатьДвиженияПроцентныхРасходовДисконтирования(ДанныеГрафиковОплат, ВыборкаПоДокументу.Ссылка, ЕстьИзменения);
		Если ЕстьИзменения Тогда
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументу.Ссылка);
			НаборЗаписей.Загрузить(ТаблицаСуммыДокумента);
			НаборЗаписей.Записать(); 
			ДокументыКПересчету.Добавить(ВыборкаПоДокументу.Ссылка);
		КонецЕсли;
		
		ТаблицаСуммыДокумента.Очистить();
		
	КонецЦикла;
	
	Если ДокументыКПересчету.Количество() > 0 Тогда
		ОбновитьДвиженияДокументов(ДокументыКПересчету);
	КонецЕсли;
	
	Возврат ДокументыКПересчету;
	
КонецФункции

Функция ТекстЗапросаДанныхДисконтирования()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоСрокам.Валюта КАК Валюта,
	|	РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения КАК ДатаПлановогоПогашения,
	|	РасчетыСПоставщикамиПоСрокам.ДатаВозникновения КАК ДатаВозникновения,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА РасчетыСПоставщикамиПоСрокам.Долг
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК Долг,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгУпр
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ДолгУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ДолгРегл,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	            И РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент
	|		ТОГДА РасчетыСПоставщикамиПоСрокам.Долг
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаАванса,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	            И РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент
	|		ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгУпр
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаАвансаУпр,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	            И РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент
	|		ТОГДА РасчетыСПоставщикамиПоСрокам.ДолгРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаАвансаРегл,
	|	ВЫБОР
	|		КОГДА РасчетыСПоставщикамиПоСрокам.ДатаВозникновения > РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(РасчетыСПоставщикамиПоСрокам.ДатаВозникновения, РасчетыСПоставщикамиПоСрокам.ДатаПлановогоПогашения, ДЕНЬ)
	|	КОНЕЦ КАК ОтсрочкаПлатежа,
	|	КлючиАналитикиУчетаПоПартнерам.Договор КАК Договор,
	|	ДоговорыКонтрагентов.СтавкаДисконтирования КАК СтавкаДисконтирования,
	|	ДоговорыКонтрагентов.СрокДляПримененияДисконтирования КАК СрокДляПримененияДисконтирования,
	|	ДоговорыКонтрагентов.ВариантКурсаДоговора КАК ВариантКурсаДоговора,
	|	КлючиАналитикиУчетаПоПартнерам.Организация КАК Организация,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА РасчетыСПоставщикамиПоСрокам.Период
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ  КАК Период,
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВтГрафикОплаты
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ПО КлючиАналитикиУчетаПоПартнерам.Организация = Организации.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО КлючиАналитикиУчетаПоПартнерам.Договор = ДоговорыКонтрагентов.Ссылка
	|		ПО РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ПО РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент = КорректировкаПриобретения.Ссылка
	|ГДЕ
	|	РасчетыСПоставщикамиПоСрокам.Активность
	|	И ДоговорыКонтрагентов.СтавкаДисконтирования > 0
	|	И РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент В(&МассивДокументов)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент) В (&ТипыДокументовУчаствующихВДисконтировании)
	|	И НЕ ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоСрокам.ДокументРегистратор) В (ТИП(Документ.РасчетКурсовыхРазниц), ТИП(Документ.ВводОстатковВзаиморасчетов))
	|	И (КорректировкаПриобретения.ДокументОснование ЕСТЬ NULL
	|			ИЛИ (ТИПЗНАЧЕНИЯ(КорректировкаПриобретения.ДокументОснование) В (&ТипыДокументовУчаствующихВДисконтировании)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	Валюта,
	|	ОбъектРасчетов,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГрафикОплаты.ДатаВозникновения КАК ДатаВозникновения,
	|	МАКСИМУМ(УчетнаяПолитикаФинансовогоУчета.Период) КАК Период,
	|	УчетнаяПолитикаФинансовогоУчета.Организация КАК Организация
	|ПОМЕСТИТЬ ВтПериодыУчетнойПолитики
	|ИЗ
	|	ВтГрафикОплаты КАК ВтГрафикОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
	|		ПО ВтГрафикОплаты.ГоловнаяОрганизация = УчетнаяПолитикаФинансовогоУчета.Организация
	|			И ВтГрафикОплаты.ДатаВозникновения >= УчетнаяПолитикаФинансовогоУчета.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтГрафикОплаты.ДатаВозникновения,
	|	УчетнаяПолитикаФинансовогоУчета.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтПериодыУчетнойПолитики.ДатаВозникновения КАК ДатаВозникновения,
	|	ВтПериодыУчетнойПолитики.Период КАК Период,
	|	ВтПериодыУчетнойПолитики.Организация КАК Организация
	|ПОМЕСТИТЬ ВтУчетнаяПолитика
	|ИЗ
	|	ВтПериодыУчетнойПолитики КАК ВтПериодыУчетнойПолитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
	|		ПО ВтПериодыУчетнойПолитики.Период = УчетнаяПолитикаФинансовогоУчета.Период
	|			И ВтПериодыУчетнойПолитики.Организация = УчетнаяПолитикаФинансовогоУчета.Организация
	|ГДЕ
	|	УчетнаяПолитикаФинансовогоУчета.УчетДисконтированнойКредиторскойЗадолженностиПоставщикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтОтсрочки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВтОтсрочки.Валюта КАК Валюта,
	|	ВтОтсрочки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВтОтсрочки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВтОтсрочки.СтавкаДисконтирования КАК СтавкаДисконтирования,
	|	ВтОтсрочки.СрокДляПримененияДисконтирования КАК СрокДляПримененияДисконтирования,
	|	ВтОтсрочки.ВариантКурсаДоговора КАК ВариантКурсаДоговора
	|ПОМЕСТИТЬ ВтОтсрочки
	|ИЗ
	|	ВтГрафикОплаты КАК ВтОтсрочки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтУчетнаяПолитика КАК ВтУчетнаяПолитика
	|		ПО ВтОтсрочки.ГоловнаяОрганизация = ВтУчетнаяПолитика.Организация
	|			И ВтОтсрочки.ДатаВозникновения = ВтУчетнаяПолитика.ДатаВозникновения
	|ГДЕ
	|	ВтОтсрочки.СрокДляПримененияДисконтирования < ВтОтсрочки.ОтсрочкаПлатежа
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтОтсрочки.АналитикаУчетаПоПартнерам,
	|	ВтОтсрочки.ОбъектРасчетов,
	|	ВтОтсрочки.Валюта,
	|	ВтОтсрочки.РасчетныйДокумент,
	|	ВтОтсрочки.СрокДляПримененияДисконтирования,
	|	ВтОтсрочки.СтавкаДисконтирования,
	|	ВтОтсрочки.ВариантКурсаДоговора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	Валюта,
	|	ОбъектРасчетов,
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтГрафикОплаты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВтГрафикОплаты.Валюта КАК Валюта,
	|	ВтГрафикОплаты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВтГрафикОплаты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА ВтГрафикОплаты.ДатаВозникновения > ВтГрафикОплаты.ДатаПлановогоПогашения
	|			ТОГДА ВтГрафикОплаты.ДатаВозникновения
	|		ИНАЧЕ ВтГрафикОплаты.ДатаПлановогоПогашения
	|	КОНЕЦ КАК ДатаПлановогоПогашения,
	|	ВтГрафикОплаты.ДатаВозникновения КАК ДатаВозникновения,
	|	ВтГрафикОплаты.Долг КАК Долг,
	|	ВтГрафикОплаты.ДолгУпр КАК ДолгУпр,
	|	ВтГрафикОплаты.ДолгРегл КАК ДолгРегл,
	|	ВтГрафикОплаты.СуммаАванса КАК СуммаАванса,
	|	ВтГрафикОплаты.СуммаАвансаУпр КАК СуммаАвансаУпр,
	|	ВтГрафикОплаты.СуммаАвансаРегл КАК СуммаАвансаРегл,
	|	ВтГрафикОплаты.ОтсрочкаПлатежа КАК ОтсрочкаПлатежа,
	|	ВтОтсрочки.СтавкаДисконтирования КАК СтавкаДисконтирования,
	|	ВтОтсрочки.ВариантКурсаДоговора КАК ВариантКурсаДоговора,
	|	ВтГрафикОплаты.Договор КАК Договор,
	|	ВтГрафикОплаты.Организация КАК Организация,
	|	ВтГрафикОплаты.Период КАК Период,
	|	ВтГрафикОплаты.ОбъектРасчетов.УникальныйИдентификатор КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.НачислениеПроцентовПоДисконтированию) КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ВтГрафикОплаты КАК ВтГрафикОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОтсрочки КАК ВтОтсрочки
	|		ПО ВтГрафикОплаты.АналитикаУчетаПоПартнерам = ВтОтсрочки.АналитикаУчетаПоПартнерам
	|			И ВтГрафикОплаты.Валюта = ВтОтсрочки.Валюта
	|			И ВтГрафикОплаты.ОбъектРасчетов = ВтОтсрочки.ОбъектРасчетов
	|			И ВтГрафикОплаты.РасчетныйДокумент = ВтОтсрочки.РасчетныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлановогоПогашения
	|ИТОГИ
	|	МАКСИМУМ(АналитикаУчетаПоПартнерам),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ДатаВозникновения),
	|	МАКСИМУМ(СтавкаДисконтирования),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Период),
	|	МАКСИМУМ(Договор),
	|	МАКСИМУМ(ВариантКурсаДоговора),
	|	МАКСИМУМ(НастройкаХозяйственнойОперации)
	|ПО
	|	РасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроцентныеРасходыДисконтирования.РасчетныйДокумент КАК РасчетныйДокумент
	|ИЗ
	|	РегистрНакопления.ПроцентныеРасходыДисконтирования КАК ПроцентныеРасходыДисконтирования
	|ГДЕ
	|	ПроцентныеРасходыДисконтирования.Активность
	|	И ПроцентныеРасходыДисконтирования.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И ТИПЗНАЧЕНИЯ(ПроцентныеРасходыДисконтирования.Регистратор) В (&ТипыДокументовУчаствующихВДисконтировании)
	|	И ТИПЗНАЧЕНИЯ(ПроцентныеРасходыДисконтирования.Регистратор) <> Тип(Документ.ВводОстатковВзаиморасчетов)
	|	И ПроцентныеРасходыДисконтирования.РасчетныйДокумент В(&МассивДокументов)
	|	И НЕ ПроцентныеРасходыДисконтирования.Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоСрокам.Период КАК Период,
	|	РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|	РасчетыСПоставщикамиПоСрокам.Валюта КАК Валюта,
	|	РасчетыСПоставщикамиПоСрокам.РасчетныйДокумент КАК РасчетныйДокумент,
	|	РасчетыСПоставщикамиПоСрокам.Долг КАК Долг,
	|	РасчетыСПоставщикамиПоСрокам.ДолгРегл КАК ДолгРегл,
	|	РасчетыСПоставщикамиПоСрокам.ДолгУпр КАК ДолгУпр,
	|	ДоговорыКонтрагентов.СтавкаДисконтирования КАК СтавкаДисконтирования,
	|	РасчетыСПоставщикамиПоСрокам.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеПроцентовПоДисконтированию) КАК НастройкаХозяйственнойОперации,
	|	РасчетыСПоставщикамиПоСрокам.ДокументРегистратор КАК ДокументРегистратор,
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА
	|			ИЗ РегистрНакопления.ПроцентныеРасходыДисконтирования КАК Т
	|			ГДЕ Т.Регистратор = РасчетыСПоставщикамиПоСрокам.ДокументРегистратор) КАК ЕстьДвиженияДисконтирования
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|			ПО КлючиАналитикиУчетаПоПартнерам.Договор = ДоговорыКонтрагентов.Ссылка
	|		ПО РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	|ГДЕ
	|	РасчетыСПоставщикамиПоСрокам.Активность
	|	И РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И РасчетыСПоставщикамиПоСрокам.ДокументРегистратор В(&МассивДокументов)
	|	И ТИПЗНАЧЕНИЯ(РасчетыСПоставщикамиПоСрокам.ДокументРегистратор) = ТИП(Документ.КорректировкаПриобретения)
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	МАКСИМУМ(АналитикаУчетаПоПартнерам),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(РасчетныйДокумент),
	|	МАКСИМУМ(СтавкаДисконтирования),
	|	МАКСИМУМ(НастройкаХозяйственнойОперации),
	|	МАКСИМУМ(ЕстьДвиженияДисконтирования)
	|ПО
	|	ДокументРегистратор";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает соответствие с графиками оплат и данными расчетных документов, которые необходимо дисконтировать.
//
// Параметры:
//  МассивДокументов - Массив - Массив документов, для которых нужно проверить необходимость дисконтирования и получить график оплат.
//  ТипРасчетов - Строка - Тип расчетов, для которого будет производиться дисконтирование 
//	                       Может принимать значения "РасчетыСКлиентами" или "РасчетыСПоставшиками". 
//	                       Пока поддерживается дисконтирование только для "РасчетыСПоставщиками".
//  МассивКРасчету - Массив - Необязательный, в переданный массив будут помещены документы, которые нужно продисконтировать 
// 
// Возвращаемое значение:
//	- Неопределено - Для типа расчетов "РасчетыСКлиентами" (пока не поддерживается).
//	- Соответствие из см. СтруктураДанныхДокументаДляДисконтирования. 
//	- Соответствие из Структура: 
//	 	* ОчиститьНачислениеПроцентов - Булево - Флаг для очистки движений документа по регистру ПроцентныеРасходыДисконтирования если прекращено дисконтирование.
//	 	* ЭтоОтрицательнаяКорректировка - Булево - признак того, что дисконтируется отрицательная корректировка приобретения.
//
Функция ГрафикиОплатыДляДисконтирования(МассивДокументов, ТипРасчетов, МассивКРасчету = Неопределено)
	
	Если ТипРасчетов <> "РасчетыСПоставщиками" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ТипыДокументовУчаствующихВДисконтировании",
		РегистрыНакопления.ПроцентныеРасходыДисконтирования.ПолучитьТипыДокументовУчаствующихВДисконтировании());
	Запрос.Текст = ТекстЗапросаДанныхДисконтирования();
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	ВыборкаПоДокументам = Результат[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаНачисленыПроценты = Результат[5].Выбрать();
	ВыборкаОтрицательныхКорректировок = Результат[6].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДанныеДляДисконтирования = Новый Соответствие;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		СтруктураДокумента = СтруктураДанныхДокументаДляДисконтирования();
		ЗаполнитьЗначенияСвойств(СтруктураДокумента, ВыборкаПоДокументам);
		СтруктураДокумента.ЭтоОтрицательнаяКорректировка = Ложь;
		
		ВыборкаГрафик = ВыборкаПоДокументам.Выбрать();
		
		Пока ВыборкаГрафик.Следующий() Цикл
			НоваяСтрока = СтруктураДокумента.ГрафикОплаты.Добавить();
			НоваяСтрока.ДатаОплаты = ВыборкаГрафик.ДатаПлановогоПогашения;
			НоваяСтрока.СуммаОплаты = ВыборкаГрафик.Долг;
			НоваяСтрока.СуммаОплатыУпр = ВыборкаГрафик.ДолгУпр;
			НоваяСтрока.СуммаОплатыРегл = ВыборкаГрафик.ДолгРегл;
			НоваяСтрока.СуммаАванса = ВыборкаГрафик.СуммаАванса;
			НоваяСтрока.СуммаАвансаУпр = ВыборкаГрафик.СуммаАвансаУпр;
			НоваяСтрока.СуммаАвансаРегл = ВыборкаГрафик.СуммаАвансаРегл;
			НоваяСтрока.ОбъектРасчетов = ВыборкаГрафик.ОбъектРасчетов;
			НоваяСтрока.ИдентификаторФинЗаписи = ВыборкаГрафик.ИдентификаторФинЗаписи;
			НоваяСтрока.ЭтоАванс = ВыборкаГрафик.Долг = 0;
		КонецЦикла;
		
		ДанныеДляДисконтирования[ВыборкаПоДокументам.РасчетныйДокумент] = СтруктураДокумента;
		Если МассивКРасчету <> Неопределено Тогда
			МассивКРасчету.Добавить(ВыборкаПоДокументам.РасчетныйДокумент);
		КонецЕсли;
		
	КонецЦикла;
	
	Пока ВыборкаНачисленыПроценты.Следующий() Цикл
		Если ДанныеДляДисконтирования[ВыборкаНачисленыПроценты.РасчетныйДокумент] = Неопределено Тогда
			// Для документа прекращено дисконтирование, выполняется повторный пересчет приведенной стоимости и очистка движений начисления процентов
			ДанныеДляДисконтирования[ВыборкаНачисленыПроценты.РасчетныйДокумент] = Новый Структура("ОчиститьНачислениеПроцентов, ЭтоОтрицательнаяКорректировка", Истина, Ложь);
			Если МассивКРасчету <> Неопределено Тогда
				МассивКРасчету.Добавить(ВыборкаНачисленыПроценты.РасчетныйДокумент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пока ВыборкаОтрицательныхКорректировок.Следующий() Цикл
		
		СтруктураДокумента = СтруктураДанныхДокументаДляДисконтирования();
		ЗаполнитьЗначенияСвойств(СтруктураДокумента, ВыборкаОтрицательныхКорректировок);
		СтруктураДокумента.ЭтоОтрицательнаяКорректировка = Истина;
		ВыборкаОбъектовРасчетов = ВыборкаОтрицательныхКорректировок.Выбрать();
		Пока ВыборкаОбъектовРасчетов.Следующий() Цикл
			НоваяСтрока = СтруктураДокумента.ГрафикОплаты.Добавить();
			НоваяСтрока.СуммаОплаты = ВыборкаОбъектовРасчетов.Долг;
			НоваяСтрока.СуммаОплатыУпр = ВыборкаОбъектовРасчетов.ДолгУпр;
			НоваяСтрока.СуммаОплатыРегл = ВыборкаОбъектовРасчетов.ДолгРегл;
			НоваяСтрока.ОбъектРасчетов = ВыборкаОбъектовРасчетов.ОбъектРасчетов;
			НоваяСтрока.ИдентификаторФинЗаписи = ВыборкаОбъектовРасчетов.ИдентификаторФинЗаписи;
		КонецЦикла;
		
		ДанныеДляДисконтирования[ВыборкаОтрицательныхКорректировок.ДокументРегистратор] = СтруктураДокумента;
		Если МассивКРасчету <> Неопределено Тогда
			МассивКРасчету.Добавить(ВыборкаОтрицательныхКорректировок.ДокументРегистратор);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеДляДисконтирования;
	
КонецФункции

// Возвращает пустую структуру для хранения данных документа, необходимых для дисконтирования
// 
// Возвращаемое значение:
//  Структура:
//	 *	АналитикаУчетаПоПартнерам - СправочникСсылка - Аналитика расчетного документа
//	 *	Валюта - СправочникСсылка.Валюты - Валюта взаиморасчетов
//	 *	РасчетныйДокумент - ДокументСсылка.ПриобретениеТоваровУслуг,
//	 	                    ДокументСсылка.ПриобретениеУслугПрочихАктивов,
//	 	                    ДокументСсылка.КорректировкаПриобретения
//	 *	ДатаВозникновения - Дата - Дата приобретения
//	 *	СтавкаДисконтирования - Число - Процент, на который выполняется дисконтирования
//	 *	Договор - СправочникСсылка.ДоговорыКонтрагентов - для получения курсов валют по договору
//	 *	ВариантКурсаДоговора - ПеречислениеСсылка.ВариантыКурсаДоговора - для определения необходимости получения курсов валют по договору
//	 *	Организация - СправочникСсылка.Организации - Организация расчетного документа
//	 *	Период - Дата - время приобретения
//	 *	НастройкаХозяйственнойОперации - СправочникСсылка.НастройкиХозяйственныхОпераций - Настройка хозяйственной операции дисконтирования
//	 *	КоэффициентДисконтирования - Число - Отношение дисконтированной(приведенной) стоимости к фактической задолженности в момент приобретения
//	 *	ЭтоОтрицательнаяКорректировка - Булево - признак того, что дисконтируется отрицательная корректировка приобретения
//	 *	ЕстьДвиженияДисконтирования - Булево - Флаг, указывающий на наличие движений дисконтирования у отрицательной корректировки
//	 *	ГрафикОплаты - ТаблицаЗначений - Таблица с данными графика оплат:
//	 	**	ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов - Объект расчетов расчетного документа 
//	 	**	ДатаОплаты - Дата - Даты графика оплат
//	 	**	СуммаОплаты - Число - Суммы графика оплат, включающие НДС
//	 	**	СуммаОплатыУпр - Число - Суммы графика оплат в валюте упр. учета, включающие НДС
//	 	**	СуммаОплатыРегл - Число - Суммы графика оплат в валюте регл. учета, включающие НДС
//	 	**	СуммаАванса - Число - Сумма аванса по документу поступления
//	 	**	СуммаАвансаУпр - Число - Сумма аванса по документу поступления в валюте упр. учета
//	 	**	СуммаАвансаРегл - Число - Сумма аванса по документу поступления в валюте регл. учета
//	 	**	СуммаДисконтирования - Число - рассчитанная сумма процентов в валюте взаиморасчетов
//	 	**	СуммаДисконтированияУпр - Число - рассчитанная сумма процентов в валюте Управленческого учета
//	 	**	СуммаДисконтированияРегл - Число - рассчитанная сумма процентов в валюте Регламентированного учета организации
//	 	**	ИдентификаторФинЗаписи - Строка - Идентификатор для отражения записи в финансовом учете
//	 	**	ФактическаяЗадолженностьБезНДС - Число - Фактическая задолженность, ожидаемая в конце месяца приобретения
//	 	**	ДисконтированнаяЗадолженностьБезНДС - Число - Дисконтированная задолженность, ожидаемая в конце месяца приобретения
//	 	**	РассчитанныйОстатокПроцентов - Число - Рассчитанный остаток процентов после списания процентных расходов дисконтирования в конце месяца приобретения
//	 	**	ЭтоАванс - Булево - Признак обозначающий сумму аванса
Функция СтруктураДанныхДокументаДляДисконтирования()
	
	Результат = Новый Структура;
	Результат.Вставить("АналитикаУчетаПоПартнерам");
	Результат.Вставить("Валюта");
	Результат.Вставить("РасчетныйДокумент");
	Результат.Вставить("ДатаВозникновения");
	Результат.Вставить("СтавкаДисконтирования");
	Результат.Вставить("Организация");
	Результат.Вставить("Период");
	Результат.Вставить("НастройкаХозяйственнойОперации");
	Результат.Вставить("КоэффициентДисконтирования");
	Результат.Вставить("ЭтоОтрицательнаяКорректировка");
	Результат.Вставить("Договор");
	Результат.Вставить("ВариантКурсаДоговора");
	Результат.Вставить("ЕстьДвиженияДисконтирования", Ложь);
	
	ГрафикОплаты = Новый ТаблицаЗначений;
	
	ГрафикОплаты.Колонки.Добавить("ОбъектРасчетов", ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("СправочникСсылка.ОбъектыРасчетов")));
	ГрафикОплаты.Колонки.Добавить("ДатаОплаты", ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Дата")));
	ГрафикОплаты.Колонки.Добавить("СуммаОплаты", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("СуммаОплатыУпр", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("СуммаОплатыРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("СуммаАванса", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("СуммаАвансаУпр", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("СуммаАвансаРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("СуммаДисконтирования", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("СуммаДисконтированияУпр", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("СуммаДисконтированияРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("ИдентификаторФинЗаписи", ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Строка")));
	ГрафикОплаты.Колонки.Добавить("ФактическаяЗадолженностьБезНДС", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("ДисконтированнаяЗадолженностьБезНДС", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("РассчитанныйОстатокПроцентов", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("ФактическаяЗадолженностьБезНДСРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("ДисконтированнаяЗадолженностьБезНДСРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("РассчитанныйОстатокПроцентовРегл", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("ФактическаяЗадолженностьБезНДСУпр", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("ДисконтированнаяЗадолженностьБезНДСУпр", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("РассчитанныйОстатокПроцентовУпр", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ГрафикОплаты.Колонки.Добавить("ЭтоАванс", ОбщегоНазначенияУТ.ОписаниеТиповПоТипу(Тип("Булево")));
	
	ГрафикОплаты.Индексы.Добавить("ЭтоАванс");
	
	Результат.Вставить("ГрафикОплаты", ГрафикОплаты);
	
	Возврат Результат;
	
КонецФункции

Функция ПриведеннаяСтоимостьПлатежей(СтавкаДисконтирования, ДатыОплат, СуммыОплат, ДатаПриведения)
	
	// Для ЧИСТНЗ обязательно добавить первой строкой строку графика на дату приведения,
	// на случай, если нет оплаты в этот день
	ДатыОплат.Вставить(0, ДатаПриведения);
	СуммыОплат.Вставить(0, 0);
	
	ПриведеннаяСтоимость = ФинансовыеИнструменты.ЧИСТНЗ(СтавкаДисконтирования, СуммыОплат, ДатыОплат);
	
	// Вернем массивы к исходному виду
	ДатыОплат.Удалить(0);
	СуммыОплат.Удалить(0);
	
	Возврат Окр(ПриведеннаяСтоимость, 2);
	
КонецФункции

Функция ПривестиСуммыДокумента(ДанныеГрафиковОплат, ТаблицаСуммыДокумента, КэшКурсовВалют, КэшКурсовВалютДоговора, Документ)

	ПримененоДисконтирование = Ложь;
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	ЕстьИзменения = Ложь;
	
	Если ДанныеГрафиковОплат <> Неопределено 
		И ДанныеГрафиковОплат[Документ] <> Неопределено 
		И НоваяАрхитектураВзаиморасчетов Тогда
		
		СтруктураДанныхДокумента = ДанныеГрафиковОплат[Документ];
		
		Если Не ((СтруктураДанныхДокумента.Свойство("ОчиститьНачислениеПроцентов")
			И СтруктураДанныхДокумента.ОчиститьНачислениеПроцентов) 
			Или СтруктураДанныхДокумента.ЭтоОтрицательнаяКорректировка) Тогда
			
			// Необходимо рассчитать приведенные суммы для каждого Объекта расчетов в отдельности
			ТаблицаРезультат = СтруктураДанныхДокумента.ГрафикОплаты.СкопироватьКолонки(); // ТаблицаЗначений
			
			ТаблицаГруппировка = СтруктураДанныхДокумента.ГрафикОплаты.Скопировать(
				Новый Структура("ЭтоАванс", Ложь),
				"ОбъектРасчетов, 
				|ИдентификаторФинЗаписи, 
				|СуммаОплаты, 
				|СуммаОплатыРегл, 
				|СуммаОплатыУпр"); // ТаблицаЗначений
			ТаблицаГруппировка.Индексы.Добавить("ОбъектРасчетов, ИдентификаторФинЗаписи");
			ТаблицаГруппировка.Свернуть("ОбъектРасчетов, ИдентификаторФинЗаписи", "СуммаОплаты, СуммаОплатыРегл, СуммаОплатыУпр");
			ТаблицаАвансов = СтруктураДанныхДокумента.ГрафикОплаты.Скопировать(
				Новый Структура("ЭтоАванс", Истина),
				"ОбъектРасчетов, 
				|ДатаОплаты, 
				|СуммаАванса, 
				|СуммаАвансаРегл, 
				|СуммаАвансаУпр"); // ТаблицаЗначений
			ТаблицаАвансов.Индексы.Добавить("ОбъектРасчетов, ДатаОплаты");
			ТаблицаАвансов.Свернуть("ОбъектРасчетов, ДатаОплаты", "СуммаАванса, СуммаАвансаРегл, СуммаАвансаУпр");
			
			// Поэтому разделим суммы документа между объектами расчетов
			ТаблицаГруппировка.Колонки.Добавить("СуммаВзаиморасчетов", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
			
			КоэффициентСуммыБезНДС = ?(ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов")=0, 
				1, 
				(ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов")-ТаблицаСуммыДокумента.Итог("СуммаНДСВзаиморасчетов"))/ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов"));
			
			СуммаВзаиморасчетов = РаспределитьПропорциональноСНулевымиСуммами(ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов"),
				ТаблицаГруппировка.ВыгрузитьКолонку("СуммаОплаты"));
			Для Счетчик = 0 По ТаблицаГруппировка.Количество() - 1 Цикл
				ТаблицаГруппировка[Счетчик].СуммаВзаиморасчетов 	= СуммаВзаиморасчетов[Счетчик];
			КонецЦикла;
			
			ДатаКурсаВалют = СтруктураДанныхДокумента.ДатаВозникновения;
			Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
				ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
				Если ЗначениеЗаполнено(ДокументОснование) Тогда
					ДатаКурсаВалют = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснование, "Дата");
				КонецЕсли;
			КонецЕсли;
			КурсВалютыПоДоговору = СтруктураДанныхДокумента.ВариантКурсаДоговора = Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре;
			
			ИтогПриведеннаяСумма = 0;
			ИтогПриведеннаяСуммаУпр = 0;
			ИтогПриведеннаяСуммаРегл = 0;
			
			Отбор = Новый Структура("ОбъектРасчетов, ИдентификаторФинЗаписи, ЭтоАванс");
			Отбор.ЭтоАванс = Ложь;
			ОтборАванса = Новый Структура("ОбъектРасчетов, ДатаОплаты");
			Для Каждого СтрокаГруппировки Из ТаблицаГруппировка Цикл;
				
				ЗаполнитьЗначенияСвойств(Отбор, СтрокаГруппировки);
				ТаблицаГрафикОплаты = СтруктураДанныхДокумента.ГрафикОплаты.Скопировать(Отбор, "ДатаОплаты, СуммаОплаты, СуммаОплатыУпр, СуммаОплатыРегл");
				СуммыОплат = ТаблицаГрафикОплаты.ВыгрузитьКолонку("СуммаОплаты");
				СуммыОплатУпр= ТаблицаГрафикОплаты.ВыгрузитьКолонку("СуммаОплатыУпр");
				СуммыОплатРегл= ТаблицаГрафикОплаты.ВыгрузитьКолонку("СуммаОплатыРегл");
				ДатыОплат = ТаблицаГрафикОплаты.ВыгрузитьКолонку("ДатаОплаты");
				
				СуммаДолгаБезНДС = 0;
				СуммаДолгаБезНДСУпр = 0;
				СуммаДолгаБезНДСРегл = 0;
				СуммаАванса = 0;
				СуммаАвансаУпр = 0;
				СуммаАвансаРегл = 0;
				Для Счетчик = 0 По СуммыОплат.Количество() - 1 Цикл
					ОтборАванса.ОбъектРасчетов = СтрокаГруппировки.ОбъектРасчетов;
					ОтборАванса.ДатаОплаты = ДатыОплат[Счетчик];
					СтрокиАванса = ТаблицаАвансов.НайтиСтроки(ОтборАванса);
					Если СтрокиАванса.Количество() > 0 Тогда
						СтрокаАванса = СтрокиАванса[0];
						СуммаАванса = СуммаАванса + СтрокаАванса.СуммаАванса * КоэффициентСуммыБезНДС;
						СуммаАвансаУпр = СуммаАвансаУпр + СтрокаАванса.СуммаАвансаУпр * КоэффициентСуммыБезНДС;
						СуммаАвансаРегл = СуммаАвансаРегл + СтрокаАванса.СуммаАвансаРегл * КоэффициентСуммыБезНДС;
						СуммыОплат[Счетчик] = СуммыОплат[Счетчик] - СтрокаАванса.СуммаАванса;
						СуммыОплатУпр[Счетчик] = СуммыОплатУпр[Счетчик] - СтрокаАванса.СуммаАвансаУпр;
						СуммыОплатРегл[Счетчик] = СуммыОплатРегл[Счетчик] - СтрокаАванса.СуммаАвансаРегл;
					КонецЕсли;
					СуммыОплат[Счетчик] = СуммыОплат[Счетчик] * КоэффициентСуммыБезНДС;
					СуммыОплатУпр[Счетчик] = СуммыОплатУпр[Счетчик] * КоэффициентСуммыБезНДС;
					СуммыОплатРегл[Счетчик] = СуммыОплатРегл[Счетчик] * КоэффициентСуммыБезНДС;
					СуммаДолгаБезНДС = СуммаДолгаБезНДС + СуммыОплат[Счетчик];
					СуммаДолгаБезНДСУпр = СуммаДолгаБезНДСУпр + СуммыОплатУпр[Счетчик];
					СуммаДолгаБезНДСРегл = СуммаДолгаБезНДСРегл + СуммыОплатРегл[Счетчик];
				КонецЦикла;
				
				ПриведеннаяСумма = ПриведеннаяСтоимостьПлатежей(СтруктураДанныхДокумента.СтавкаДисконтирования/100,
					ДатыОплат,
					СуммыОплат,
					СтруктураДанныхДокумента.ДатаВозникновения); 
				
				ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(СтруктураДанныхДокумента.Организация);
				ВалютаУправленческогоУчета = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
				Если КурсВалютыПоДоговору И ВалютаУправленческогоУчета = СтруктураДанныхДокумента.Валюта Тогда
					КурсВалютыУпр = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						СтруктураДанныхДокумента.Договор,
						ДатаКурсаВалют,
						КэшКурсовВалютДоговора);
				Иначе
					КурсВалютыУпр = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(ВалютаУправленческогоУчета, 
						ДатаКурсаВалют,
						КэшКурсовВалют,
						ВалютаРегламентированногоУчета);
				КонецЕсли;
				Если КурсВалютыПоДоговору Тогда
					КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыДоговораИзКэша(
						СтруктураДанныхДокумента.Договор,
						ДатаКурсаВалют,
						КэшКурсовВалютДоговора);
				Иначе
					КурсВалютыВзаиморасчетов = РаботаСКурсамиВалютУТ.ПолучитьКурсВалютыИзКэша(СтруктураДанныхДокумента.Валюта, 
						ДатаКурсаВалют, 
						КэшКурсовВалют, 
						ВалютаРегламентированногоУчета);
				КонецЕсли;
				
				ПриведеннаяСуммаРегл = Окр(ПриведеннаяСумма * КурсВалютыВзаиморасчетов, 2);
				ПриведеннаяСуммаУпр = Окр(?(КурсВалютыУпр = 0, 0, ПриведеннаяСумма*КурсВалютыВзаиморасчетов/КурсВалютыУпр), 2);
				
				НоваяСтрока = ТаблицаРезультат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
				НоваяСтрока.СуммаДисконтирования = СуммаДолгаБезНДС - ПриведеннаяСумма;
				НоваяСтрока.СуммаДисконтированияУпр = Окр(?(КурсВалютыУпр = 0, 0, НоваяСтрока.СуммаДисконтирования*КурсВалютыВзаиморасчетов/КурсВалютыУпр), 2);
				НоваяСтрока.СуммаДисконтированияРегл = Окр(НоваяСтрока.СуммаДисконтирования * КурсВалютыВзаиморасчетов, 2);
				
				НоваяСтрока.ФактическаяЗадолженностьБезНДС = СуммаДолгаБезНДС;
				НоваяСтрока.ДисконтированнаяЗадолженностьБезНДС = ПриведеннаяСумма;
				НоваяСтрока.РассчитанныйОстатокПроцентов = СуммаДолгаБезНДС - ПриведеннаяСумма;
				
				НоваяСтрока.ФактическаяЗадолженностьБезНДСРегл = СуммаДолгаБезНДСРегл;
				НоваяСтрока.РассчитанныйОстатокПроцентовРегл = СуммаДолгаБезНДСРегл - ПриведеннаяСуммаРегл;
				НоваяСтрока.ДисконтированнаяЗадолженностьБезНДСРегл = ПриведеннаяСуммаРегл;
				
				НоваяСтрока.ФактическаяЗадолженностьБезНДСУпр = СуммаДолгаБезНДСУпр;
				НоваяСтрока.РассчитанныйОстатокПроцентовУпр = СуммаДолгаБезНДСУпр - ПриведеннаяСуммаУпр;
				НоваяСтрока.ДисконтированнаяЗадолженностьБезНДСУпр = ПриведеннаяСуммаУпр;
				
				ИтогПриведеннаяСумма = ИтогПриведеннаяСумма + ПриведеннаяСумма + СуммаАванса;
				ИтогПриведеннаяСуммаУпр = ИтогПриведеннаяСуммаУпр + ПриведеннаяСуммаУпр + СуммаАвансаУпр;
				ИтогПриведеннаяСуммаРегл = ИтогПриведеннаяСуммаРегл + ПриведеннаяСуммаРегл + СуммаАвансаРегл;
				
			КонецЦикла;
			
			РаспределениеПриведеннойСуммы = РаспределитьПропорциональноСНулевымиСуммами(ИтогПриведеннаяСумма, 
				ТаблицаСуммыДокумента.ВыгрузитьКолонку("СуммаБезНДС"));
			
			РаспределениеПриведеннойСуммыУпр = РаспределитьПропорциональноСНулевымиСуммами(ИтогПриведеннаяСуммаУпр, 
				ТаблицаСуммыДокумента.ВыгрузитьКолонку("СуммаБезНДС"));
			
			РаспределениеПриведеннойСуммыРегл = РаспределитьПропорциональноСНулевымиСуммами(ИтогПриведеннаяСуммаРегл, 
				ТаблицаСуммыДокумента.ВыгрузитьКолонку("СуммаБезНДС"));
			
			Для Счетчик = 0 По ТаблицаСуммыДокумента.Количество() - 1 Цикл
				СуммаПриведенная = РаспределениеПриведеннойСуммы[Счетчик];
				СуммаПриведеннаяУпр = РаспределениеПриведеннойСуммыУпр[Счетчик];
				СуммаПриведеннаяРегл = РаспределениеПриведеннойСуммыРегл[Счетчик];
				Если ТаблицаСуммыДокумента[Счетчик].СуммаПриведенная <> СуммаПриведенная
					Или ТаблицаСуммыДокумента[Счетчик].СуммаПриведеннаяУпр <> СуммаПриведеннаяУпр
					Или ТаблицаСуммыДокумента[Счетчик].СуммаПриведеннаяРегл <> СуммаПриведеннаяРегл Тогда
						ЕстьИзменения = Истина;
				КонецЕсли;
				ТаблицаСуммыДокумента[Счетчик].СуммаПриведенная = РаспределениеПриведеннойСуммы[Счетчик];
				ТаблицаСуммыДокумента[Счетчик].СуммаПриведеннаяУпр = РаспределениеПриведеннойСуммыУпр[Счетчик];
				ТаблицаСуммыДокумента[Счетчик].СуммаПриведеннаяРегл = РаспределениеПриведеннойСуммыРегл[Счетчик];
			КонецЦикла;
			
			ПримененоДисконтирование = Истина;
			
			// Для расчета отрицательной корректировки в этом же месяце:
			СуммаВзаиморасчетовБезНДС = ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов") - ТаблицаСуммыДокумента.Итог("СуммаНДСВзаиморасчетов");
			СтруктураДанныхДокумента.КоэффициентДисконтирования = ?(СуммаВзаиморасчетовБезНДС=0, 0, ИтогПриведеннаяСумма / СуммаВзаиморасчетовБезНДС);
			
			СтруктураДанныхДокумента.ГрафикОплаты = ТаблицаРезультат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПримененоДисконтирование
		И НоваяАрхитектураВзаиморасчетов Тогда
		
		// Расчет дисконта отрицательной корректировки 
		// Дисконтирование выше применимо только к положительной корректировке
		// Если положительная корректировка не обработана выше - значит не применяем дисконтирование
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаПриобретения") 
			И ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов") < 0 Тогда
			
			ДокументПриобретения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ДокументОснование");
			
			Если ДанныеГрафиковОплат[ДокументПриобретения] <> Неопределено 
				И ДанныеГрафиковОплат[ДокументПриобретения].Свойство("КоэффициентДисконтирования") Тогда
				КоэффициентДисконтирования = ДанныеГрафиковОплат[ДокументПриобретения].КоэффициентДисконтирования;
			Иначе
				КоэффициентДисконтирования = КоэффициентДисконтированияДокумента(ДокументПриобретения);
			КонецЕсли;
			
			Если Не (КоэффициентДисконтирования = 0 Или КоэффициентДисконтирования = 1) Тогда
				
				ЕстьИзменения = Ложь;
				Для Каждого СтрокаТаблицыСумм Из ТаблицаСуммыДокумента Цикл 
					СуммаПриведенная     = Окр(СтрокаТаблицыСумм.СуммаБезНДС * КоэффициентДисконтирования, 2);
					СуммаПриведеннаяУпр  = Окр(СтрокаТаблицыСумм.СуммаБезНДСУпр * КоэффициентДисконтирования, 2);
					СуммаПриведеннаяРегл = Окр(СтрокаТаблицыСумм.СуммаБезНДСРегл * КоэффициентДисконтирования, 2);
					Если СтрокаТаблицыСумм.СуммаПриведенная <> СуммаПриведенная
						Или СтрокаТаблицыСумм.СуммаПриведеннаяУпр <> СуммаПриведеннаяУпр
						Или СтрокаТаблицыСумм.СуммаПриведеннаяРегл <> СуммаПриведеннаяРегл Тогда
						ЕстьИзменения = Истина;
					КонецЕсли;
					СтрокаТаблицыСумм.СуммаПриведенная     = СуммаПриведенная;
					СтрокаТаблицыСумм.СуммаПриведеннаяУпр  = СуммаПриведеннаяУпр;
					СтрокаТаблицыСумм.СуммаПриведеннаяРегл = СуммаПриведеннаяРегл;
				КонецЦикла;
				Если Не ЕстьИзменения Тогда
					СтруктураДанныхДокумента.Вставить("БезИзмененийДисконтирования", Истина);
				КонецЕсли;
				
				СтруктураДанныхДокумента = ДанныеГрафиковОплат[Документ];
				СтруктураДанныхДокумента.ГрафикОплаты.Свернуть("ОбъектРасчетов, ИдентификаторФинЗаписи", 
					"СуммаОплаты, 
					|СуммаОплатыУпр, 
					|СуммаОплатыРегл, 
					|СуммаДисконтирования, 
					|СуммаДисконтированияУпр, 
					|СуммаДисконтированияРегл,
					|ФактическаяЗадолженностьБезНДС, 
					|ДисконтированнаяЗадолженностьБезНДС, 
					|РассчитанныйОстатокПроцентов, 
					|ФактическаяЗадолженностьБезНДСРегл, 
					|ДисконтированнаяЗадолженностьБезНДСРегл,
					|РассчитанныйОстатокПроцентовРегл,
					|ФактическаяЗадолженностьБезНДСУпр,
					|ДисконтированнаяЗадолженностьБезНДСУпр,
					|РассчитанныйОстатокПроцентовУпр");
				СуммаДисконтирования 		= ТаблицаСуммыДокумента.Итог("СуммаБезНДС") - ТаблицаСуммыДокумента.Итог("СуммаПриведенная");
				СуммаДисконтированияУпр 	= ТаблицаСуммыДокумента.Итог("СуммаБезНДСУпр") - ТаблицаСуммыДокумента.Итог("СуммаПриведеннаяУпр");
				СуммаДисконтированияРегл 	= ТаблицаСуммыДокумента.Итог("СуммаБезНДСРегл") - ТаблицаСуммыДокумента.Итог("СуммаПриведеннаяРегл");
				
				СуммыДисконтирования 		= РаспределитьПропорциональноСНулевымиСуммами(СуммаДисконтирования, СтруктураДанныхДокумента.ГрафикОплаты.ВыгрузитьКолонку("СуммаОплаты"));
				СуммыДисконтированияУпр 	= РаспределитьПропорциональноСНулевымиСуммами(СуммаДисконтированияУпр, СтруктураДанныхДокумента.ГрафикОплаты.ВыгрузитьКолонку("СуммаОплатыУпр"));
				СуммыДисконтированияРегл 	= РаспределитьПропорциональноСНулевымиСуммами(СуммаДисконтированияРегл, СтруктураДанныхДокумента.ГрафикОплаты.ВыгрузитьКолонку("СуммаОплатыРегл"));
				
				СуммыДолгаБезНДС 			= РаспределитьПропорциональноСНулевымиСуммами(ТаблицаСуммыДокумента.Итог("СуммаБезНДС"), СтруктураДанныхДокумента.ГрафикОплаты.ВыгрузитьКолонку("СуммаОплаты"));
				СуммыДолгаБезНДСУпр 		= РаспределитьПропорциональноСНулевымиСуммами(ТаблицаСуммыДокумента.Итог("СуммаБезНДСУпр"), СтруктураДанныхДокумента.ГрафикОплаты.ВыгрузитьКолонку("СуммаОплаты"));
				СуммыДолгаБезНДСРегл		= РаспределитьПропорциональноСНулевымиСуммами(ТаблицаСуммыДокумента.Итог("СуммаБезНДСРегл"), СтруктураДанныхДокумента.ГрафикОплаты.ВыгрузитьКолонку("СуммаОплаты"));
				
				КоэффициентСуммыБезНДС =  ?(ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов")=0, 
					1, 
					(ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов")
						- ТаблицаСуммыДокумента.Итог("СуммаНДСВзаиморасчетов"))
						/ ТаблицаСуммыДокумента.Итог("СуммаВзаиморасчетов"));
				
				Для Каждого СтрокаГрафика Из СтруктураДанныхДокумента.ГрафикОплаты Цикл
					
					Остатки = ПолучитьТекущиеОстаткиЗадолженностиИПроцентов(
						СтруктураДанныхДокумента.АналитикаУчетаПоПартнерам,
						СтруктураДанныхДокумента.Валюта,
						СтрокаГрафика.ОбъектРасчетов,
						СтруктураДанныхДокумента.РасчетныйДокумент,
						СтруктураДанныхДокумента.Период);
					
					СтрокаГрафика.СуммаДисконтирования     = - СуммыДисконтирования[СтруктураДанныхДокумента.ГрафикОплаты.Индекс(СтрокаГрафика)];
					СтрокаГрафика.СуммаДисконтированияУпр  = - СуммыДисконтированияУпр[СтруктураДанныхДокумента.ГрафикОплаты.Индекс(СтрокаГрафика)];
					СтрокаГрафика.СуммаДисконтированияРегл = - СуммыДисконтированияРегл[СтруктураДанныхДокумента.ГрафикОплаты.Индекс(СтрокаГрафика)];
					
					СтрокаГрафика.ФактическаяЗадолженностьБезНДС 			= Остатки.Долг * КоэффициентСуммыБезНДС + СуммыДолгаБезНДС[СтруктураДанныхДокумента.ГрафикОплаты.Индекс(СтрокаГрафика)];
					СтрокаГрафика.РассчитанныйОстатокПроцентов				= Остатки.СуммаДисконтирования - СтрокаГрафика.СуммаДисконтирования;
					СтрокаГрафика.ДисконтированнаяЗадолженностьБезНДС		= СтрокаГрафика.ФактическаяЗадолженностьБезНДС - СтрокаГрафика.РассчитанныйОстатокПроцентов;
					
					СтрокаГрафика.ФактическаяЗадолженностьБезНДСУпр 		= Остатки.ДолгУпр * КоэффициентСуммыБезНДС + СуммыДолгаБезНДСУпр[СтруктураДанныхДокумента.ГрафикОплаты.Индекс(СтрокаГрафика)];
					СтрокаГрафика.РассчитанныйОстатокПроцентовУпр			= Остатки.СуммаДисконтированияУпр - СтрокаГрафика.СуммаДисконтированияУпр;
					СтрокаГрафика.ДисконтированнаяЗадолженностьБезНДСУпр	= СтрокаГрафика.ФактическаяЗадолженностьБезНДСУпр - СтрокаГрафика.РассчитанныйОстатокПроцентовУпр;
					
					СтрокаГрафика.ФактическаяЗадолженностьБезНДСРегл 		= Остатки.ДолгРегл * КоэффициентСуммыБезНДС + СуммыДолгаБезНДСРегл[СтруктураДанныхДокумента.ГрафикОплаты.Индекс(СтрокаГрафика)];
					СтрокаГрафика.РассчитанныйОстатокПроцентовРегл			= Остатки.СуммаДисконтированияРегл - СтрокаГрафика.СуммаДисконтированияРегл;
					СтрокаГрафика.ДисконтированнаяЗадолженностьБезНДСРегл	= СтрокаГрафика.ФактическаяЗадолженностьБезНДСРегл - СтрокаГрафика.РассчитанныйОстатокПроцентовРегл;
					
				КонецЦикла;
				
				ПримененоДисконтирование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПримененоДисконтирование Тогда
		Для Каждого СтрокаТаблицыСумм Из ТаблицаСуммыДокумента Цикл
			СтрокаТаблицыСумм.СуммаПриведенная = СтрокаТаблицыСумм.СуммаВзаиморасчетов - СтрокаТаблицыСумм.СуммаНДСВзаиморасчетов;
			СтрокаТаблицыСумм.СуммаПриведеннаяУпр = СтрокаТаблицыСумм.СуммаБезНДСУпр;
			СтрокаТаблицыСумм.СуммаПриведеннаяРегл = СтрокаТаблицыСумм.СуммаБезНДСРегл;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЕстьИзменения;
	
КонецФункции

Функция ПолучитьТекущиеОстаткиЗадолженностиИПроцентов(АналитикаУчетаПоПартнерам, Валюта, ОбъектРасчетов, РасчетныйДокумент, Период)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Запрос.УстановитьПараметр("РасчетныйДокумент", РасчетныйДокумент);
	Запрос.УстановитьПараметр("Период", Новый Граница(Период, ВидГраницы.Исключая));
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгОстаток КАК Долг,
		|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгРеглОстаток КАК ДолгРегл,
		|	РасчетыСПоставщикамиПоСрокамОстатки.ДолгУпрОстаток КАК ДолгУпр
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
		|			&Период,
		|			АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|				И Валюта = &Валюта
		|				И ОбъектРасчетов = &ОбъектРасчетов
		|				И РасчетныйДокумент = &РасчетныйДокумент) КАК РасчетыСПоставщикамиПоСрокамОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПроцентныеРасходыДисконтированияОстатки.СуммаДисконтированияОстаток КАК СуммаДисконтирования,
		|	ПроцентныеРасходыДисконтированияОстатки.СуммаДисконтированияРеглОстаток КАК СуммаДисконтированияРегл,
		|	ПроцентныеРасходыДисконтированияОстатки.СуммаДисконтированияУпрОстаток КАК СуммаДисконтированияУпр
		|ИЗ
		|	РегистрНакопления.ПроцентныеРасходыДисконтирования.Остатки(
		|			&Период,
		|			АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам
		|				И Валюта = &Валюта
		|				И ОбъектРасчетов = &ОбъектРасчетов
		|				И РасчетныйДокумент = &РасчетныйДокумент) КАК ПроцентныеРасходыДисконтированияОстатки";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаДолг = РезультатЗапроса[0].Выбрать();
	ВыборкаПроценты = РезультатЗапроса[1].Выбрать();
	Результат = Новый Структура;
	Результат.Вставить("Долг", 0);
	Результат.Вставить("ДолгУпр", 0);
	Результат.Вставить("ДолгРегл", 0);
	Результат.Вставить("СуммаДисконтирования", 0);
	Результат.Вставить("СуммаДисконтированияУпр", 0);
	Результат.Вставить("СуммаДисконтированияРегл", 0);
	Если ВыборкаДолг.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаДолг);
	КонецЕсли;
	Если ВыборкаПроценты.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, ВыборкаПроценты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КоэффициентДисконтированияДокумента(Ссылка)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(СуммыДокументовВВалютахУчета.СуммаПриведенная), 0) КАК СуммаПриведенная,
		|	ЕСТЬNULL(СУММА(СуммыДокументовВВалютахУчета.СуммаВзаиморасчетов - СуммыДокументовВВалютахУчета.СуммаНДСВзаиморасчетов), 0) КАК СуммаБезНДС
		|ИЗ
		|	РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
		|ГДЕ
		|	СуммыДокументовВВалютахУчета.Регистратор = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(Выборка.СуммаБезНДС = 0, 0, Выборка.СуммаПриведенная / Выборка.СуммаБезНДС);
	Иначе 
		Возврат 0;
	КонецЕсли;
КонецФункции

Процедура ЗаписатьДвиженияПроцентныхРасходовДисконтирования(ДанныеГрафиковОплат, Документ, ТребуетсяЗапись = Истина)
	
	Если ДанныеГрафиковОплат <> Неопределено И ДанныеГрафиковОплат[Документ] <> Неопределено Тогда
		
		СтруктураДанныхДокумента =  ДанныеГрафиковОплат[Документ];
		НаборЗаписей = РегистрыНакопления.ПроцентныеРасходыДисконтирования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Документ);
		Если Не (СтруктураДанныхДокумента.Свойство("ОчиститьНачислениеПроцентов")
			И СтруктураДанныхДокумента.ОчиститьНачислениеПроцентов) Тогда
			Для Каждого СтрокаГрафика Из СтруктураДанныхДокумента.ГрафикОплаты Цикл
				Если СтрокаГрафика.СуммаДисконтирования = 0 
					И СтрокаГрафика.СуммаДисконтированияУпр = 0 
					И СтрокаГрафика.СуммаДисконтированияРегл = 0 
					И СтрокаГрафика.ДисконтированнаяЗадолженностьБезНДС = 0 
					И СтрокаГрафика.ДисконтированнаяЗадолженностьБезНДСУпр = 0 
					И СтрокаГрафика.ДисконтированнаяЗадолженностьБезНДСРегл = 0 Тогда
					// Нет Дисконтированной задолженности и нет изменения задолженности - дисконтирование отключено, делать запись не нужно
					Продолжить;
				КонецЕсли;
				Если СтруктураДанныхДокумента.ЭтоОтрицательнаяКорректировка Тогда
					ДвижениеНачислениеПроцентов = НаборЗаписей.ДобавитьРасход();
				Иначе
					ДвижениеНачислениеПроцентов = НаборЗаписей.ДобавитьПриход();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(ДвижениеНачислениеПроцентов, СтрокаГрафика);
				ЗаполнитьЗначенияСвойств(ДвижениеНачислениеПроцентов, СтруктураДанныхДокумента);
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураДанныхДокумента.ЭтоОтрицательнаяКорректировка Тогда
			Если СтруктураДанныхДокумента.ЕстьДвиженияДисконтирования Тогда
				Если СтруктураДанныхДокумента.Свойство("БезИзмененийДисконтирования")
					И СтруктураДанныхДокумента.БезИзмененийДисконтирования Тогда
					// Движения отрицательной корректировки не меняются
					ТребуетсяЗапись = Ложь;
				КонецЕсли;
			ИначеЕсли НаборЗаписей.Количество() = 0 Тогда
				// Движений не было и не появилось - запись не требуется
				ТребуетсяЗапись = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ТребуетсяЗапись Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РаспределитьПропорциональноСНулевымиСуммами(ИсходнаяСумма, МассивКоэффициентов)
	СуммаКоэффициентов = 0;
	Для Счетчик = 0 По МассивКоэффициентов.Количество() - 1 Цикл
		СуммаКоэффициентов = СуммаКоэффициентов + МассивКоэффициентов[Счетчик];
	КонецЦикла;
	Если ИсходнаяСумма = 0 Или СуммаКоэффициентов = 0 Тогда
		Результат = Новый Массив;
		Для Счетчик = 0 По МассивКоэффициентов.Количество() - 1 Цикл
			Результат.Добавить(0);
		КонецЦикла;
	Иначе
		Результат = ОбщегоНазначенияУТКлиентСервер.РаспределитьПропорционально(ИсходнаяСумма, МассивКоэффициентов);
	КонецЕсли; 
	Возврат Результат;
КонецФункции

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.СуммыДокументовВВалютахУчета.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.18.17";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a165ca7d-29c3-4d4b-b38a-d52beba3be15");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.СуммыДокументовВВалютахУчета.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Комментарий = НСтр("ru = 'Актуализирует движения документов ""Поступление товаров от хранителей"" и ""Прочее оприходование товаров"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Процедура регистрации данных для обработчика обновления ОбработатьДанныеДляПереходаНаВерсию.
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеТоваровОтХранителя КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|	ПО СуммыДокументовВВалютахУчета.Регистратор = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	СуммыДокументовВВалютахУчета.Регистратор ЕСТЬ NULL
	|	И ДанныеДокумента.Проведен
	|	И ИСТИНА В(
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ПоступлениеТоваровОтХранителя.Товары КАК ТаблицаТовары
	|		ГДЕ
	|			ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|			И НЕ ТаблицаТовары.Цена = 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПрочееОприходованиеТоваров КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноСписанияНаРасходы)
	|	И НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыДокументовВВалютахУчета
	|		ГДЕ
	|			СуммыДокументовВВалютахУчета.Регистратор = ДанныеДокумента.Ссылка)
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Документ.ПрочееОприходованиеТоваров.Товары КАК ТаблицаТовары
	|		ГДЕ
	|			ТаблицаТовары.Ссылка = ДанныеДокумента.Ссылка
	|			И ТаблицаТовары.ИдентификаторСтроки <> """")
	|
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.СуммыДокументовВВалютахУчета;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	ОбработкаЗавершена =
		ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
			ДокументыКОбновлению(),
			ПолноеИмяРегистра,
			Параметры.Очередь,
			ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

Функция ДокументыКОбновлению()
	
	СписокДокументов = Новый Массив;
	СписокДокументов.Добавить("Документ.ПоступлениеТоваровОтХранителя");
	СписокДокументов.Добавить("Документ.ПрочееОприходованиеТоваров");
	
	Возврат СписокДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
