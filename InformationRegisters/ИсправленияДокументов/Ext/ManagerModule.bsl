#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает исправляемый документ (первый документ цепочки) по исправлению
//
//	Параметры:
//		Исправление - ДокументСсылка - Исправление
//	
//	Возвращаемое значение:
//		ДокументСсылка -
//
Функция ИсправляемыйДокумент(Знач Исправление) Экспорт
	
	ИсправляемыйДокумент = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Исправление", Исправление);
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ИсправленияДокументов.ИсправляемыйДокумент
	|ИЗ
	|	РегистрСведений.ИсправленияДокументов КАК ИсправленияДокументов
	|ГДЕ
	|	ИсправленияДокументов.Регистратор = &Исправление";
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ИсправляемыйДокумент = Выборка.ИсправляемыйДокумент;	
	КонецЕсли;
	
	Возврат ИсправляемыйДокумент;
	
КонецФункции

// Возвращает исправления документа
//
// Параметры:
//	ИсправляемыйДокумент - ДокументСсылка - Документ, для которого необходимо исправления
//
// Возвращаемое значение:
// 	Массив из ДокументСсылка - Массив исправлений документа.
//
Функция ИсправленияДокумента(Знач ИсправляемыйДокумент) Экспорт
	
	ИсправленияДокумента = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", ИсправляемыйДокумент);

	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ИсправленияДокументов.Регистратор
	|ИЗ
	|	РегистрСведений.ИсправленияДокументов КАК ИсправленияДокументов
	|ГДЕ
	|	ИсправленияДокументов.ИсправляемыйДокумент = &ИсправляемыйДокумент";	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИсправленияДокумента.Добавить(Выборка.Регистратор);	
	КонецЦикла;
	
	Возврат ИсправленияДокумента;
	
КонецФункции	

// Возвращает исправления документов по типу документа исправления
//
// Параметры:
//	ИсправляемыеДокументы - Массив из ДокументСсылка - документы, для которых необходимы исправления
//	ТипИсправления - Строка - тип документа исправления
//
// Возвращаемое значение:
// 	Массив из ДокументСсылка - Массив исправлений документов.
//
Функция ИсправленияДокументовПоТипуИсправления(Знач ИсправляемыеДокументы, Знач ТипИсправления) Экспорт
	
	ИсправленияДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ИсправленияДокументов.Регистратор
	|ИЗ
	|	РегистрСведений.ИсправленияДокументов КАК ИсправленияДокументов
	|ГДЕ
	|	ИсправленияДокументов.ИсправляемыйДокумент В (&ИсправляемыеДокументы)";	
	
	ШаблонОтбора = "И ИсправленияДокументов.Регистратор ССЫЛКА %1";
	ТекстОтбора = СтрШаблон(ШаблонОтбора, ТипИсправления);
	
	Запрос.Текст = Запрос.Текст + ТекстОтбора;
	
	Запрос.УстановитьПараметр("ИсправляемыеДокументы", ИсправляемыеДокументы);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ИсправленияДокументов.Добавить(Выборка.Регистратор);	
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат ИсправленияДокументов;
	
КонецФункции

// Функция-конструктор параметров проверки по регистру ИсправленияДокументов.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * Ссылка - ДокументСсылка, Неопределено - Регистраторы регистра сведений ИсправленияДокументов
// * Дата - Дата
// * ИсправляемыйДокумент - ДокументСсылка, Неопределено - См. ОпределяемыйТип.ИсправляемыеДокументы
//
Функция ПараметрыПроверкиИсправленияДокументов() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка", Неопределено);
	Параметры.Вставить("Дата", Дата(1, 1, 1));
	Параметры.Вставить("ИсправляемыйДокумент", Неопределено);
	
	Возврат Параметры;
	
КонецФункции

// Проверяет изменились ли параметры регистратора относительно хранимых записей в регистре Исправление документов.
//
// Параметры:
//  ПараметрыПроверки - См. ПараметрыПроверкиИсправленияДокументов
// 
// Возвращаемое значение:
//  Булево - Истина - параметры изменильсь, Ложь - нет.
//
Функция ИзменилисьПараметрыИсправленияДокументов(ПараметрыПроверки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсправленияДокументов.Период,
		|	ИсправленияДокументов.ИсправляемыйДокумент
		|ИЗ
		|	РегистрСведений.ИсправленияДокументов КАК ИсправленияДокументов
		|ГДЕ
		|	ИсправленияДокументов.Активность = ИСТИНА
		|	И ИсправленияДокументов.Регистратор = &Регистратор
		|	И ИсправленияДокументов.ИсправляемыйДокумент = &ИсправляемыйДокумент
		|	И ИсправленияДокументов.Период = &Период";
		
	Запрос.УстановитьПараметр("Регистратор", ПараметрыПроверки.Ссылка);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", ПараметрыПроверки.ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("Период", ПараметрыПроверки.Дата);
	Результат = Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

// Возвращает документ-исправление после даты проверяемого документа.
//
// Параметры:
//  ПараметрыПроверки - См. ПараметрыПроверкиИсправленияДокументов
// 
// Возвращаемое значение:
//  ДокументСсылка, Неопределено - Регистраторы регистра РегистрСведений.ИсправляемыеДокументы
//
Функция ИсправлениеПослеДатыДокумента(ПараметрыПроверки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсправлениеПослеДатыДокумента = Неопределено;
	
	// Определим наличие исправлений больше даты документа
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсправленияДокументов.Регистратор
		|ИЗ
		|	РегистрСведений.ИсправленияДокументов КАК ИсправленияДокументов
		|ГДЕ
		|	ИсправленияДокументов.ИсправляемыйДокумент = &ИсправляемыйДокумент
		|	И НЕ ИсправленияДокументов.Регистратор = &Ссылка
		|	И ИсправленияДокументов.Период >= &Дата
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИсправленияДокументов.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", ПараметрыПроверки.Ссылка);
	Дата = ?(
		Не ЗначениеЗаполнено(ПараметрыПроверки.Ссылка) И ПараметрыПроверки.Дата = НачалоДня(ТекущаяДатаСеанса()),
		ТекущаяДатаСеанса(),
		ПараметрыПроверки.Дата);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", ПараметрыПроверки.ИсправляемыйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИсправлениеПослеДатыДокумента = Выборка.Регистратор;
	КонецЕсли;
	
	Возврат ИсправлениеПослеДатыДокумента;
	
КонецФункции

// Возвращает признак наличия актуальных исправлений документа на дату 
//
// Параметры:
//	ИсправляемыйДокумент - ДокументСсылка - исправляемый документ
//	СторнируемыйДокумент - ДокументСсылка - сторнируемый документ
//	Дата - Дата - Дата проверки
//
// Возвращаемое значение:
// 	Булево - Если Истина - Есть актуальные исправления по сторнируемому документу
//
Функция НаличиеИсправленийНаДатуДокумента(ИсправляемыйДокумент, СторнируемыйДокумент, Дата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсправленияДокументовСрезПоследних.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
		|	ИсправленияДокументовСрезПоследних.ПоследнийДокументЦепочки КАК ПоследнийДокументЦепочки
		|ИЗ
		|	РегистрСведений.ИсправленияДокументов.СрезПоследних(
		|		&Период, ИсправляемыйДокумент = &ИсправляемыйДокумент) КАК ИсправленияДокументовСрезПоследних
		|ГДЕ
		|	НЕ ИсправленияДокументовСрезПоследних.ПоследнийДокументЦепочки = НЕОПРЕДЕЛЕНО
		|	И НЕ ИсправленияДокументовСрезПоследних.ПоследнийДокументЦепочки = &СторнируемыйДокумент
		|	И НЕ ИсправленияДокументовСрезПоследних.ПоследнийДокументЦепочки.Дата < &ДатаСторнируемогоДокумента";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("СторнируемыйДокумент", СторнируемыйДокумент);
	Запрос.УстановитьПараметр("ДатаСторнируемогоДокумента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СторнируемыйДокумент, "Дата"));
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыСведений.ИсправленияДокументов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("986d01cb-d883-443d-b6d1-6d7ce1496d6d");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыСведений.ИсправленияДокументов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра ""Исправления документов""'");
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыСведений.РеестрДокументов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаПриобретения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.Сторно.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыСведений.ИсправленияДокументов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");	
	
КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений.ИсправленияДокументов";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	
	ЗаполнитьПараметрыЗапросаРегистрацииОбновления(Запрос);
	
	Запрос.Текст = ТекстЗапроса_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию();
		
	Данные = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Данные, ПолноеИмяРегистра);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрСведений.ИсправленияДокументов";
	МенеджерРегистра = РегистрыСведений.ИсправленияДокументов;
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
			
		НачатьТранзакцию();
				
		Попытка
			
			// Устанавливаем управляемую блокировку, чтобы провести ответственное чтение объекта.
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(Выборка.Регистратор.Метаданные().ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			ЕстьОшибкиОбработкиИсправлений = Ложь;
									
			НаборЗаписей = РегистрыСведений.ИсправленияДокументов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Выборка.Регистратор);
			
			Запрос.Текст = ТекстЗапроса_ИсправленийПоРегистратору(Выборка.Регистратор);
				
			Если НЕ ЗначениеЗаполнено(Запрос.Текст) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);					
				Продолжить;				
			КонецЕсли;	
			
			ВыборкаИсправления = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаИсправления.Следующий() Цикл
				ЕстьОшибкиОбработкиИсправлений = НЕ ОбновлениеИнформационнойБазыУТ.СформироватьИЗаписатьДвижения(ВыборкаИсправления.Ссылка, 
					ПолноеИмяОбъекта, МенеджерРегистра, ДополнительныеПараметры);
					
				Если ЕстьОшибкиОбработкиИсправлений Тогда
					Прервать;	
				КонецЕсли;							
			КонецЦикла;
			
			Если ЕстьОшибкиОбработкиИсправлений Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось заполнить движения исправлений'");				
				ВызватьИсключение ТекстСообщения;
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);					
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();		
		Исключение
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Функция ТекстЗапроса_ИсправленийПоРегистратору(Знач ИсправляемыйДокумент)

	ТипДокумента = ТипЗнч(ИсправляемыйДокумент);
	
	ОснованияКорректировкиПриобретения = Метаданные.Документы.КорректировкаПриобретения.Реквизиты.ДокументОснование.Тип;
	ОснованияКорректировкиРеализации = Метаданные.Документы.КорректировкаРеализации.Реквизиты.ДокументОснование.Тип;
	
	ИмяКорректировкиПриобретения = Метаданные.Документы.КорректировкаПриобретения.ПолноеИмя();
	ИмяКорректировкиРеализации = Метаданные.Документы.КорректировкаРеализации.ПолноеИмя();
	
	Текст = "";
	
	Если ТипДокумента = Тип("ДокументСсылка.ПервичныйДокумент") Тогда
		ТипПервичногоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "ТипПервичногоДокумента");	
		
		Если ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.РеализацияКлиенту Тогда
			Текст = ТекстЗапроса_ИсправленийПоРегистратору_Корректировка(ИмяКорректировкиРеализации);				
		ИначеЕсли ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументов.ПриобретениеУПоставщика Тогда
			Текст = ТекстЗапроса_ИсправленийПоРегистратору_Корректировка(ИмяКорректировкиПриобретения);	
		КонецЕсли;
		
	ИначеЕсли ОснованияКорректировкиПриобретения.СодержитТип(ТипДокумента) Тогда
		Текст = ТекстЗапроса_ИсправленийПоРегистратору_Корректировка(ИмяКорректировкиПриобретения);	
	ИначеЕсли ОснованияКорректировкиРеализации.СодержитТип(ТипДокумента) Тогда
		Текст = ТекстЗапроса_ИсправленийПоРегистратору_Корректировка(ИмяКорректировкиРеализации);	
	Иначе
		Текст = ТекстЗапроса_ИсправленийПоРегистратору_РеестрДокументов();	
	КонецЕсли;
	
	Возврат Текст;
		
КонецФункции

Функция ТекстЗапроса_ИсправленийПоРегистратору_Корректировка(Знач ИмяДокумента)
	
	Текст = 	
	
	"ВЫБРАТЬ
	|	Корректировка.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ИсправлениеОшибок,
	|	Корректировка.Дата КАК ДатаДокумента
	|ПОМЕСТИТЬ ВТ_Корректировки
	|ИЗ
	|	&ИмяДокумента КАК Корректировка
	|ГДЕ
	|	Корректировка.Проведен
	|	И Корректировка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок)
	|	И Корректировка.ДокументОснование = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Корректировка.Ссылка,
	|	ЛОЖЬ,
	|	Корректировка.Дата
	|ИЗ
	|	&ИмяДокумента КАК Корректировка
	|ГДЕ
	|	Корректировка.Проведен
	|	И Корректировка.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|	И Корректировка.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сторно.Ссылка КАК Ссылка,
	|	Сторно.Дата КАК ДатаДокумента
	|ИЗ
	|	Документ.Сторно КАК Сторно
	|ГДЕ
	|	Сторно.Проведен
	|	И Сторно.СторнируемыйДокумент В
	|			(ВЫБРАТЬ
	|				ВТ_Корректировки.Ссылка
	|			ИЗ
	|				ВТ_Корректировки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Сторно.Ссылка,
	|	Сторно.Дата
	|ИЗ
	|	Документ.Сторно КАК Сторно
	|ГДЕ
	|	Сторно.Проведен
	|	И Сторно.СторнируемыйДокумент = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Корректировки.Ссылка,
	|	ВТ_Корректировки.ДатаДокумента
	|ИЗ
	|	ВТ_Корректировки КАК ВТ_Корректировки
	|ГДЕ
	|	ВТ_Корректировки.ИсправлениеОшибок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента";	
	
	Текст = СтрЗаменить(Текст, "&ИмяДокумента", ИмяДокумента);
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапроса_ИсправленийПоРегистратору_РеестрДокументов()
	
	Текст =	
	"ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И РеестрДокументов.Проведен
	|	И РеестрДокументов.СторноИсправление
	|	И РеестрДокументов.ИсправляемыйДокумент = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеестрДокументов.ДатаДокументаИБ";
	
	Возврат Текст;
	
КонецФункции

Функция ТекстЗапроса_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию()
	
	Текст = 
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК Корректировка,
	|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование,
	|	ИСТИНА КАК ВидИсправлениеОшибок
	|ПОМЕСТИТЬ ВТ_Корректировки
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Проведен
	|	И КорректировкаРеализации.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок)
	|	И КорректировкаРеализации.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И НЕ КорректировкаРеализации.ДокументОснование В (&ПустыеСсылкиДокументОснованиеРеализации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПриобретения.Ссылка,
	|	КорректировкаПриобретения.ДокументОснование,
	|	ИСТИНА
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|ГДЕ
	|	КорректировкаПриобретения.Проведен
	|	И КорректировкаПриобретения.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок)
	|	И КорректировкаПриобретения.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И НЕ КорректировкаПриобретения.ДокументОснование В (&ПустыеСсылкиДокументОснованиеПриобретения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.ДокументОснование,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Проведен
	|	И
	|		КорректировкаРеализации.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|	И КорректировкаРеализации.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И НЕ КорректировкаРеализации.ДокументОснование В (&ПустыеСсылкиДокументОснованиеРеализации)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПриобретения.Ссылка,
	|	КорректировкаПриобретения.ДокументОснование,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|ГДЕ
	|	КорректировкаПриобретения.Проведен
	|	И
	|		КорректировкаПриобретения.ВидКорректировки = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|	И КорректировкаПриобретения.ДокументОснование <> НЕОПРЕДЕЛЕНО
	|	И НЕ КорректировкаПриобретения.ДокументОснование В (&ПустыеСсылкиДокументОснованиеПриобретения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сторно.Ссылка КАК Ссылка,
	|	ВТ_Корректировки.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_СторноКорректировок
	|ИЗ
	|	Документ.Сторно КАК Сторно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Корректировки КАК ВТ_Корректировки
	|		ПО Сторно.СторнируемыйДокумент = ВТ_Корректировки.Корректировка
	|ГДЕ
	|	Сторно.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеестрДокументов.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ВТ_Основания
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсправленияДокументов КАК ИсправленияДокументов
	|		ПО РеестрДокументов.Ссылка = ИсправленияДокументов.Регистратор
	|ГДЕ
	|	НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И РеестрДокументов.Проведен
	|	И РеестрДокументов.СторноИсправление
	|	И ТИПЗНАЧЕНИЯ(РеестрДокументов.ИсправляемыйДокумент) <> ТИП(Документ.КорректировкаРеализации)
	|	И ТИПЗНАЧЕНИЯ(РеестрДокументов.ИсправляемыйДокумент) <> ТИП(Документ.КорректировкаПриобретения)
	|	И РеестрДокументов.ИсправляемыйДокумент <> НЕОПРЕДЕЛЕНО
	|	И НЕ РеестрДокументов.ИсправляемыйДокумент В (&ПустыеСсылкиИсправляемыйДокумент)
	|	И ИсправленияДокументов.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Корректировки.ДокументОснование
	|ИЗ
	|	ВТ_Корректировки КАК ВТ_Корректировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсправленияДокументов КАК ИсправленияДокументов
	|		ПО ВТ_Корректировки.Корректировка = ИсправленияДокументов.Регистратор
	|ГДЕ
	|	ВТ_Корректировки.ВидИсправлениеОшибок
	|	И ИсправленияДокументов.Регистратор ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_СторноКорректировок.ДокументОснование
	|ИЗ
	|	ВТ_СторноКорректировок КАК ВТ_СторноКорректировок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсправленияДокументов КАК ИсправленияДокументов
	|		ПО ВТ_СторноКорректировок.Ссылка = ИсправленияДокументов.Регистратор
	|ГДЕ
	|	ИсправленияДокументов.Регистратор ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Основания.ИсправляемыйДокумент КАК Ссылка
	|ИЗ
	|	ВТ_Основания КАК ВТ_Основания";	

	Возврат Текст;
			
КонецФункции

Процедура ЗаполнитьПараметрыЗапросаРегистрацииОбновления(Запрос)
	
	ПустыеСсылкиДокументОснованиеПриобретения = Новый Массив;
	
	Для каждого Тип Из Метаданные.Документы.КорректировкаПриобретения.Реквизиты.ДокументОснование.Тип.Типы() Цикл
		ПустыеСсылкиДокументОснованиеПриобретения.Добавить(Новый (Тип));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеСсылкиДокументОснованиеПриобретения", ПустыеСсылкиДокументОснованиеПриобретения);
	
	ПустыеСсылкиДокументОснованиеРеализации = Новый Массив;
	
	Для каждого Тип Из Метаданные.Документы.КорректировкаРеализации.Реквизиты.ДокументОснование.Тип.Типы() Цикл
		ПустыеСсылкиДокументОснованиеРеализации.Добавить(Новый (Тип));
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустыеСсылкиДокументОснованиеРеализации", ПустыеСсылкиДокументОснованиеРеализации);

	ПустыеСсылкиИсправляемыйДокумент = Новый Массив;
	Для каждого Тип Из Метаданные.ОпределяемыеТипы.ИсправляемыеДокументы.Тип.Типы() Цикл
		ПустыеСсылкиИсправляемыйДокумент.Добавить(Новый (Тип));
	КонецЦикла;
	Запрос.УстановитьПараметр("ПустыеСсылкиИсправляемыйДокумент", ПустыеСсылкиИсправляемыйДокумент);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли