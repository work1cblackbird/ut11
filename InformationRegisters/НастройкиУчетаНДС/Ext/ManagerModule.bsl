#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает значения по умолчанию для ресурсов регистра.
// Имена ключей структуры должны строго соответствовать именам ресурсов регистра.
// 
// Возвращаемое значение:
// 	Структура - структура значений ресурсов регистра.
Функция ЗначенияПоУмолчанию() Экспорт
	
	СтруктураЗначений = Новый Структура;
	
	СтруктураЗначений.Вставить("ПлательщикНДС", ПолучитьФункциональнуюОпцию("ИспользоватьУчетНДС"));
	СтруктураЗначений.Вставить("РаздельныйУчетТоваровПоНалогообложениюНДС", Ложь);
	СтруктураЗначений.Вставить("РаздельныйУчетВНАПоНалогообложениюНДС", Ложь);
	СтруктураЗначений.Вставить("РаздельныйУчетПостатейныхПроизводственныхЗатратПоНалогообложениюНДС", Ложь);
	СтруктураЗначений.Вставить("ПериодичностьРаспределенияНДС", Перечисления.Периодичность.Квартал);
	СтруктураЗначений.Вставить("БазаНДС", Перечисления.ВидыБазыНДС.ВыручкаТекущегоКвартала);
	СтруктураЗначений.Вставить("ПравилоОтбораАвансовДляРегистрацииСчетовФактур", Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеДня);
	СтруктураЗначений.Вставить("УчетнаяПолитикаСуществует", Ложь);
	СтруктураЗначений.Вставить("ПериодичностьФормированияВычетовИВосстановленийНДС", Перечисления.Периодичность.Месяц);
	СтруктураЗначений.Вставить("РаспределятьНДСВМесяцеОсуществленияКапВложений", Ложь);
	СтруктураЗначений.Вставить("ФормироватьНДСПредъявленныйПриВключенииВСтоимость", Ложь);
	СтруктураЗначений.Вставить("СписыватьНДСПоРасходамНеПринимаемымВНУ", Ложь);  
	
	УчетНДСЛокализация.ДополнитьОписаниеНастроекУчетаНДСПоОрганизации(СтруктураЗначений);
	
	Возврат СтруктураЗначений;
	
КонецФункции

// Возращает текст запроса по данным регистра.
// 
// Возвращаемое значение:
// 	Строка - Текст запроса.
Функция ТекстЗапросаДействующиеПараметрыНалоговУчетныхПолитик() Экспорт
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР КОГДА Таблица.Период ЕСТЬ NULL Тогда
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК УчетнаяПолитикаСуществует,
	|	Таблица.Период КАК Период,
	|	ГоловныеОрганизации.ОбособленноеПодразделение КАК Организация
	|ИЗ
	|	ВтГоловныеОрганизации КАК ГоловныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаНДС.СрезПоследних(&Период, Организация В
	|			(ВЫБРАТЬ
	|				ГоловныеОрганизации.Организация
	|			ИЗ
	|				ВтГоловныеОрганизации КАК ГоловныеОрганизации)) КАК Таблица
	|		ПО ГоловныеОрганизации.Организация = Таблица.Организация
	|";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ВыбираемыеПоля = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].ВыбираемыеПоля;
	ОписаниеНастроек = ЗначенияПоУмолчанию();
	ОписаниеНастроек.Удалить("УчетнаяПолитикаСуществует");
	Для каждого Настройка Из ОписаниеНастроек Цикл
		ВыбираемыеПоля.Добавить(СтрШаблон("Таблица.%1", Настройка.Ключ));
	КонецЦикла;
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует текстовое описание установленных параметров.
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации - ссылка на организацию.
// 	ДатаДействия - Дата - период действия настроек.
// 	ДействующиеНастройки - Структура - действующие параметры учетной политики.
// Возвращаемое значение:
//  Строка
Функция ОписаниеДействующихПараметров(Организация, ДатаДействия = Неопределено, ДействующиеНастройки = Неопределено) Экспорт
	
	СтрокаОписанияНастроек = "";
	
	Если ДействующиеНастройки = Неопределено Тогда
		ДействующиеНастройки = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"НастройкиУчетаНДС",
			Организация,
			ДатаДействия,
			Ложь);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДействующиеНастройки) Тогда
		СтрокаОписанияНастроек = НСтр("ru='Не заданы параметры.'");
		Возврат СтрокаОписанияНастроек;
	КонецЕсли;

	СтрокаШаблон = "%1: %2." + Символы.ПС;
	СтрокаШаблонБулево = "%1." + Символы.ПС;
	МассивСтрокОписанияПараметров = Новый Массив;  
	Если ДействующиеНастройки.ПлательщикНДС Тогда
		МассивСтрокОписанияПараметров.Добавить(
			СтрШаблон(СтрокаШаблонБулево,
				НСтр("ru='Организация является плательщиком НДС'")));
		МассивСтрокОписанияПараметров.Добавить(
			СтрШаблон(СтрокаШаблон,
				НСтр("ru = 'Правило отбора авансов'"),
				ДействующиеНастройки.ПравилоОтбораАвансовДляРегистрацииСчетовФактур));
		Если ДействующиеНастройки.РаздельныйУчетТоваровПоНалогообложениюНДС Тогда
			МассивСтрокОписанияПараметров.Добавить(СтрШаблон(СтрокаШаблонБулево, НСтр("ru='Используется раздельный учет НДС'")));
		КонецЕсли;
	Иначе
		МассивСтрокОписанияПараметров.Добавить(СтрШаблон(СтрокаШаблонБулево, НСтр("ru='Организация не является плательщиком НДС'")));
	КонецЕсли;
	
	УчетНДСЛокализация.ДополнитьОписаниеДействующихНастроекУчетаНДС(МассивСтрокОписанияПараметров, ДействующиеНастройки);
	
	СтрокаОписанияНастроек = СтрСоединить(МассивСтрокОписанияПараметров, Символы.ВК);
	
	Возврат СтрокаОписанияНастроек
	
КонецФункции

// Возвращает параметры выбора статей и аналитик.
// 
// Параметры:
//  Организация - СправочникСсылка.Организации - Организация, для которой выполняется настройка
//  Дата - Дата - Период, на который выполняется настройка
//  ВариантУчетаНДСПриИзмененииВидаДеятельности - ПеречислениеСсылка.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую - Вариант учета НДС
//  
// Возвращаемое значение:
//  См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики.
//
Функция ПараметрыВыбораСтатейИАналитик(Организация, Дата, ВариантУчетаНДСПриИзмененииВидаДеятельности) Экспорт
	
	ИспользоватьУчетПрочихДоходовРасходов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	ЭтоНеБазовая = ПолучитьФункциональнуюОпцию("НеБазоваяВерсия");
	ВключатьВПрочиеРасходы = Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ВключатьВПрочиеРасходы;
	ВключатьВСтоимостьИлиРасходыВЗависимостиОтПериода = Перечисления.ВариантыУчетаНДСПриИзмененииВидаДеятельностиНаНеоблагаемую.ВключатьВСтоимостьИлиРасходыВЗависимостиОтПериода;
	
	ПараметрыСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"НастройкиСистемыНалогообложения", Организация, Дата, Истина);
	
	МассивПараметров = Новый Массив;
	
	#Область СтатьяРасходовНеНДС
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Запись";
	ПараметрыВыбора.Статья      = "СтатьяРасходовНеНДС";
	
	ПараметрыВыбора.ДоступностьПоОперации = 
		ИспользоватьУчетПрочихДоходовРасходов
		И (ВариантУчетаНДСПриИзмененииВидаДеятельности = ВключатьВПрочиеРасходы
			ИЛИ ВариантУчетаНДСПриИзмененииВидаДеятельности = ВключатьВСтоимостьИлиРасходыВЗависимостиОтПериода);
	
	ПараметрыВыбора.СкрыватьСтатьюНедоступнуюПоОперации = Истина;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовНеНДС";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяЗатратНеНДС");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовНеНДС");
	
	МассивПараметров.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	#Область СтатьяРасходовЕНВД
	ПараметрыСистемыНалогообложения = НастройкиНалоговУчетныхПолитик.ДействующиеПараметрыНалоговУчетныхПолитикНаДату(
			"НастройкиСистемыНалогообложения", Организация, Дата, Истина);
	Если ПараметрыСистемыНалогообложения = Неопределено Тогда
		ПрименяетсяЕНВД = Ложь;
	Иначе
		ПрименяетсяЕНВД = ПараметрыСистемыНалогообложения.ПрименяетсяЕНВД;
	КонецЕсли;
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Запись";
	ПараметрыВыбора.Статья      = "СтатьяРасходовЕНВД";
	
	ПараметрыВыбора.ДоступностьПоОперации = ПрименяетсяЕНВД
		И ИспользоватьУчетПрочихДоходовРасходов
		И (ВариантУчетаНДСПриИзмененииВидаДеятельности = ВключатьВПрочиеРасходы
			ИЛИ ВариантУчетаНДСПриИзмененииВидаДеятельности = ВключатьВСтоимостьИлиРасходыВЗависимостиОтПериода);
	
	ПараметрыВыбора.СкрыватьСтатьюНедоступнуюПоОперации = Истина;
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовЕНВД";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяЗатратЕНВД");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовЕНВД");
	
	МассивПараметров.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	#Область СтатьяРасходовСписаниеНДС
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Запись";
	ПараметрыВыбора.Статья      = "СтатьяРасходовСписаниеНДС";
	
	ПараметрыВыбора.ДоступностьПоОперации = ИспользоватьУчетПрочихДоходовРасходов И ЭтоНеБазовая;
	
	ПараметрыВыбора.СкрыватьСтатьюНедоступнуюПоОперации = Истина;
	 
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходовСписаниеНДС";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходовСписаниеНДС");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходовСписаниеНДС");
	
	МассивПараметров.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	Возврат МассивПараметров;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаЗаписи" Тогда
		Если ПолучитьФункциональнуюОпцию("ЛокализацияРФ") Тогда
			ВыбраннаяФорма = "ФормаЗаписиРФ";
			СтандартнаяОбработка = Ложь; 
		Иначе
			ВыбраннаяФорма = "ФормаЗаписи";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#КонецЕсли