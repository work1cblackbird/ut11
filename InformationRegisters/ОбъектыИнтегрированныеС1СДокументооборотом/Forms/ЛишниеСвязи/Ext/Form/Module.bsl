#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.ИнтеграцияС1СДокументооборотВсеСсылкиПереопределяемый.Тип.Типы() Цикл
		ИнтеграцияС1СДокументооборотВсеСсылки.Добавить(Тип);
	КонецЦикла;
	
	Для Каждого СвязьДО Из Параметры.ЛишниеСвязиДО Цикл
		ЗаполнитьЗначенияСвойств(ЛишниеСвязиДО.Добавить(), СвязьДО);
	КонецЦикла;
	
	Для Каждого СвязьИС Из Параметры.ЛишниеСвязиИС Цикл
		ЗаполнитьЗначенияСвойств(ЛишниеСвязиИС.Добавить(), СвязьИС);
	КонецЦикла;
	
	Если ЛишниеСвязиДО.Количество() = 0 И ЛишниеСвязиИС.Количество() = 0 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СокращенноеНаименованиеКонфигурации =
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.СокращенноеНаименованиеКонфигурации();
	
	Если ЛишниеСвязиДО.Количество() = 0 Тогда
		Элементы.ГруппаЛишниеСвязиДО.Видимость = Ложь;
	Иначе
		Если ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
			Элементы.ПояснениеЛишниеСвязиДО.Заголовок = СтрШаблон(
				НСтр("ru = 'В базе 1С:Документооборот есть ссылки на несуществующие объекты %1.'"),
				СокращенноеНаименованиеКонфигурации);
			Элементы.ЛишниеСвязиДОТипОбъектаИС.Заголовок = СтрШаблон(
				НСтр("ru = 'Тип объекта %1'"),
				СокращенноеНаименованиеКонфигурации);
			Элементы.ЛишниеСвязиДОИдентификаторОбъектаИС.Заголовок = СтрШаблон(
				НСтр("ru = 'Идентификатор объекта %1'"),
				СокращенноеНаименованиеКонфигурации);
			Элементы.ЛишниеСвязиДОУстановитьСвязьСНовымОбъектомИС.Заголовок = СтрШаблон(
				НСтр("ru = 'Установить новую связь с объектом %1'"),
				СокращенноеНаименованиеКонфигурации);
			Элементы.ЛишниеСвязиДОКонтекстноеМенюУстановитьСвязьСНовымОбъектомИС.Заголовок = СтрШаблон(
				НСтр("ru = 'Установить новую связь с объектом %1'"),
				СокращенноеНаименованиеКонфигурации);
		КонецЕсли;
	КонецЕсли;
	
	Если ЛишниеСвязиИС.Количество() = 0 Тогда
		Элементы.ГруппаЛишниеСвязиИС.Видимость = Ложь;
	Иначе
		Если ЗначениеЗаполнено(СокращенноеНаименованиеКонфигурации) Тогда
			Элементы.ПояснениеЛишниеСвязиИС.Заголовок = СтрШаблон(
				НСтр("ru = 'В базе %1 есть ссылки на несуществующие объекты 1С:Документооборот.'"),
				СокращенноеНаименованиеКонфигурации);
			Элементы.ЛишниеСвязиИСУдалитьСвязиИС.Заголовок = СтрШаблон(
				НСтр("ru = 'Удалить лишние связи в базе %1'"),
				СокращенноеНаименованиеКонфигурации);
			Элементы.ЗаголовокЛишниеСвязиИС.Заголовок = СтрШаблон(
				НСтр("ru = 'Лишние связи в базе %1'"),
				СокращенноеНаименованиеКонфигурации);
			Элементы.ЛишниеСвязиИСОбъектИС.Заголовок = СтрШаблон(
				НСтр("ru = 'Объект %1'"),
				СокращенноеНаименованиеКонфигурации);
			Элементы.ЛишниеСвязиИСКонтекстноеМенюОткрытьОбъектИС.Заголовок = СтрШаблон(
				НСтр("ru = 'Открыть объект %1'"),
				СокращенноеНаименованиеКонфигурации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛишниеСвязиИС

&НаКлиенте
Процедура ЛишниеСвязиИСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ЛишниеСвязиИСОбъектИС" Тогда
		ОткрытьОбъектИС();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЛишниеСвязиДО

&НаКлиенте
Процедура ЛишниеСвязиДОВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ЛишниеСвязиДООбъектДО" Тогда
		ОткрытьОбъектДО();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтметитьЛишниеСвязиДО(Команда)
	
	Для Каждого Строка Из ЛишниеСвязиДО Цикл
		Строка.Отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьЛишниеСвязиИС(Команда)
	
	Для Каждого Строка Из ЛишниеСвязиИС Цикл
		Строка.Отметка = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиЛишниеСвязиДО(Команда)
	
	Для Каждого Строка Из ЛишниеСвязиДО Цикл
		Строка.Отметка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиЛишниеСвязиИС(Команда)
	
	Для Каждого Строка Из ЛишниеСвязиИС Цикл
		Строка.Отметка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектДОКоманда(Команда)
	
	ОткрытьОбъектДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектИСКоманда(Команда)
	
	ОткрытьОбъектИС();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязиДО(Команда)
	
	УдалитьСвязиДОНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязиИС(Команда)
	
	УдалитьСвязиИСНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСНовымОбъектомДО(Команда)
	
	ТекущиеДанные = Элементы.ЛишниеСвязиИС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипОбъектаДО) Тогда
		УстановитьСвязьСНовымОбъектомДОПослеВыбораТипа(ТекущиеДанные.ТипОбъектаДО, ТекущиеДанные)
	Иначе
		Оповещение = Новый ОписаниеОповещения("УстановитьСвязьСНовымОбъектомДОПослеВыбораТипа", ЭтотОбъект, ТекущиеДанные);
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить("DMDocument", НСтр("ru = 'Документ'"));
		СписокТипов.Добавить("DMCorrespondent", НСтр("ru = 'Контрагент'"));
		СписокТипов.Добавить("DMMeeting", НСтр("ru = 'Мероприятие'"));
		СписокТипов.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа данных'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСНовымОбъектомДОПослеВыбораТипа(Знач ТипОбъектаДО, ТекущиеДанные) Экспорт
	
	Если ТипОбъектаДО = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ТипОбъектаДО) = Тип("Строка") Тогда
		СтарыйТипОбъектаДО = ТипОбъектаДО;
	ИначеЕсли ТипЗнч(ТипОбъектаДО) = Тип("ЭлементСпискаЗначений") Тогда
		СтарыйТипОбъектаДО = "";
		ТипОбъектаДО = ТипОбъектаДО.Значение;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОбъектИС", ТекущиеДанные.ОбъектИС);
	ПараметрыОповещения.Вставить("СтарыйТипОбъектаДО", СтарыйТипОбъектаДО);
	ПараметрыОповещения.Вставить("СтарыйИдентификаторОбъектаДО", ТекущиеДанные.ИдентификаторОбъектаДО);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьСвязьСНовымОбъектомДОЗавершениеВыбора",
		ЭтотОбъект,
		ПараметрыОповещения);
	
	МодульИнтеграцияС1СДокументооборот3Клиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияС1СДокументооборот3Клиент");
	МодульИнтеграцияС1СДокументооборот3Клиент.ВыбратьЗначениеПоТипуОбъекта(Оповещение, ТипОбъектаДО);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСНовымОбъектомДОЗавершениеВыбора(Результат, ПараметрыОповещения) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		УстановитьСвязьСНовымОбъектомДОНаСервере(
			ПараметрыОповещения.ОбъектИС,
			ПараметрыОповещения.СтарыйТипОбъектаДО,
			ПараметрыОповещения.СтарыйИдентификаторОбъектаДО,
			Результат.РеквизитТип,
			Результат.РеквизитID);
		Для Каждого Строка Из ЛишниеСвязиИС Цикл
			Если Строка.ОбъектИС = ПараметрыОповещения.ОбъектИС
					И Строка.ТипОбъектаДО = ПараметрыОповещения.СтарыйТипОбъектаДО
					И Строка.ИдентификаторОбъектаДО = ПараметрыОповещения.СтарыйИдентификаторОбъектаДО Тогда
				ЛишниеСвязиИС.Удалить(ЛишниеСвязиИС.Индекс(Строка));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСНовымОбъектомИС(Команда)
	
	ТекущиеДанные = Элементы.ЛишниеСвязиДО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ТипОбъектаИС) Тогда
		УстановитьСвязьСНовымОбъектомИСПослеВыбораТипа(ТекущиеДанные.ТипОбъектаИС, ТекущиеДанные)
	Иначе
		Оповещение = Новый ОписаниеОповещения("УстановитьСвязьСНовымОбъектомИСПослеВыбораТипа", ЭтотОбъект, ТекущиеДанные);
		ИнтеграцияС1СДокументооборотВсеСсылки.ПоказатьВыборЭлемента(Оповещение, НСтр("ru = 'Выбор типа данных'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСНовымОбъектомИСПослеВыбораТипа(Знач ТипОбъектаИС, ТекущиеДанные) Экспорт
	
	Если ТипОбъектаИС = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ТипОбъектаИС) = Тип("Строка") Тогда
		СтарыйТипОбъектаИС = ТипОбъектаИС;
		ТипОбъектаИС = Тип(СтрЗаменить(ТипОбъектаИС, ".", "Ссылка."));
	ИначеЕсли ТипЗнч(ТипОбъектаИС) = Тип("ЭлементСпискаЗначений") Тогда
		СтарыйТипОбъектаИС = "";
		ТипОбъектаИС = ТипОбъектаИС.Значение;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("СтарыйТипОбъектаИС", СтарыйТипОбъектаИС);
	ПараметрыОповещения.Вставить("СтарыйИдентификаторОбъектаИС", ТекущиеДанные.ИдентификаторОбъектаИС);
	ПараметрыОповещения.Вставить("ТипОбъектаДО", ТекущиеДанные.ТипОбъектаДО);
	ПараметрыОповещения.Вставить("ИдентификаторОбъектаДО", ТекущиеДанные.ИдентификаторОбъектаДО);
	
	Оповещение = Новый ОписаниеОповещения(
		"УстановитьСвязьСНовымОбъектомИСЗавершениеВыбора",
		ЭтотОбъект,
		ПараметрыОповещения);
	ПоказатьВводЗначения(
		Оповещение,,
		СтрШаблон(НСтр("ru = 'Выберите объект, связанный с ""%1""'"), ТекущиеДанные.ПредставлениеОбъектаДО),
		ТипОбъектаИС);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьСНовымОбъектомИСЗавершениеВыбора(ОбъектИС, ПараметрыОповещения) Экспорт
	
	Если ОбъектИС <> Неопределено Тогда
		УстановитьСвязьСНовымОбъектомИСНаСервере(
			ОбъектИС,
			ПараметрыОповещения.ТипОбъектаДО,
			ПараметрыОповещения.ИдентификаторОбъектаДО,
			ПараметрыОповещения.СтарыйТипОбъектаИС,
			ПараметрыОповещения.СтарыйИдентификаторОбъектаИС);
		Для Каждого Строка Из ЛишниеСвязиДО Цикл
			Если Строка.ТипОбъектаИС = ПараметрыОповещения.СтарыйТипОбъектаИС
					И Строка.ИдентификаторОбъектаИС = ПараметрыОповещения.СтарыйИдентификаторОбъектаИС
					И Строка.ТипОбъектаДО = ПараметрыОповещения.ТипОбъектаДО
					И Строка.ИдентификаторОбъектаДО = ПараметрыОповещения.ИдентификаторОбъектаДО Тогда
				ЛишниеСвязиДО.Удалить(ЛишниеСвязиДО.Индекс(Строка));
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьОбъектДО()
	
	ТекущиеДанные = Элементы.ЛишниеСвязиДО.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияС1СДокументооборот3Клиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияС1СДокументооборот3Клиент");
	МодульИнтеграцияС1СДокументооборот3Клиент.ОткрытьОбъектДО(ТекущиеДанные.ОбъектДО);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектИС()
	
	ТекущиеДанные = Элементы.ЛишниеСвязиИС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.ОбъектИС);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьСНовымОбъектомДОНаСервере(ОбъектИС, СтарыйТипОбъектаДО, СтарыйИдентификаторОбъектаДО,
		НовыйТипОбъектаДО, НовыйИдентификаторОбъектаДО)
	
	НачатьТранзакцию();
	
	Попытка
		
		// На стороне ДО парной связи нет. Удаляем связь только из регистра на стороне ИС.
		РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.УдалитьСвязь(
			СтарыйИдентификаторОбъектаДО,
			СтарыйТипОбъектаДО,
			ОбъектИС);
		
		// Добавим новую связь в базы ДО и ИС.
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
			НовыйИдентификаторОбъектаДО,
			НовыйТипОбъектаДО,
			ОбъектИС);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязьСНовымОбъектомИСНаСервере(ОбъектИС, ТипОбъектаДО, ИдентификаторОбъектаДО,
		СтарыйТипОбъектаИС, СтарыйИдентификаторОбъектаИС)
	
	НачатьТранзакцию();
	
	Попытка
		
		// На стороне ИС парной связи нет. Удаляем связь только из регистра на стороне ДО.
		Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRemoveObjectLinkRequest");
		Запрос.ownerObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
			Прокси,,
			СтарыйИдентификаторОбъектаИС,
			СтарыйТипОбъектаИС);
		Запрос.linkedObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			ИдентификаторОбъектаДО,
			ТипОбъектаДО);
		Ответ = ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьЗапрос(Прокси, Запрос);
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
		// Добавим новую связь в базы ДО и ИС.
		ИнтеграцияС1СДокументооборотБазоваяФункциональностьВызовСервера.ДобавитьСвязь(
			ИдентификаторОбъектаДО,
			ТипОбъектаДО,
			ОбъектИС);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязиДОНаСервере()
	
	Прокси = ИнтеграцияС1СДокументооборотБазоваяФункциональностьПовтИсп.ПолучитьПрокси();
	МассивЗапросов = Новый Массив;
	
	КоличествоСтрок = ЛишниеСвязиДО.Количество();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		Строка = ЛишниеСвязиДО[КоличествоСтрок - НомерСтроки];
		Если Не Строка.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		// На стороне ИС парной связи нет. Удаляем связь только из регистра на стороне ДО.
		Запрос = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьОбъект(Прокси, "DMRemoveObjectLinkRequest");
		Запрос.ownerObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьExternalObject(
			Прокси,,
			Строка.ИдентификаторОбъектаИС,
			Строка.ТипОбъектаИС);
		Запрос.linkedObject = ИнтеграцияС1СДокументооборотБазоваяФункциональность.СоздатьObjectID(
			Прокси,
			Строка.ИдентификаторОбъектаДО,
			Строка.ТипОбъектаДО);
		МассивЗапросов.Добавить(Запрос);
		
		ЛишниеСвязиДО.Удалить(ЛишниеСвязиДО.Индекс(Строка));
	КонецЦикла;
	
	Если МассивЗапросов.Количество() > 0 Тогда
		ИнтеграцияС1СДокументооборотБазоваяФункциональность.ВыполнитьПакетныйЗапрос(
			Прокси,
			МассивЗапросов,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязиИСНаСервере()
	
	НачатьТранзакцию();
	
	Попытка
		
		КоличествоСтрок = ЛишниеСвязиИС.Количество();
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Строка = ЛишниеСвязиИС[КоличествоСтрок - НомерСтроки];
			Если Не Строка.Отметка Тогда
				Продолжить;
			КонецЕсли;
			
			// На стороне ДО парной связи нет. Удаляем связь только из регистра на стороне ИС.
			РегистрыСведений.ОбъектыИнтегрированныеС1СДокументооборотом.УдалитьСвязь(
				Строка.ИдентификаторОбъектаДО,
				Строка.ТипОбъектаДО,
				Строка.ОбъектИС);
			
			ЛишниеСвязиИС.Удалить(ЛишниеСвязиИС.Индекс(Строка));
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти