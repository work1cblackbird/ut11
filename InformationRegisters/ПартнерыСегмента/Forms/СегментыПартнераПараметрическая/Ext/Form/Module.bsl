
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если НЕ Параметры.Свойство("Партнер") Тогда
		Возврат;
	КонецЕсли;
	
	НеФормироватьДинамическиеСегменты = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Заголовок = НСтр("ru = 'Сегменты контрагента'");
	КонецЕсли;
	
	Партнер = Параметры.Партнер;
	НаименованиеПартнера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Партнер, "Наименование");
	Заголовок = Заголовок + " (" + НаименованиеПартнера + ")";
	
	ЕстьПравоНаИзменение = СегментыСервер.ЕстьПравоИзмененияСоставаСегментов("Партнеры");
	МассивЗависимыхРеквизитов = Новый Массив;
	МассивЗависимыхРеквизитов.Добавить("ВключитьВСегмент");
	МассивЗависимыхРеквизитов.Добавить("УдалитьИзСегмента");
	МассивЗависимыхРеквизитов.Добавить("СегментыКонтекстноеМенюВключитьВСегмент");
	МассивЗависимыхРеквизитов.Добавить("СегментыКонтекстноеМенюУдалитьИзСегмента");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЗависимыхРеквизитов, "Видимость", ЕстьПравоНаИзменение);
	
	ЗаполнитьТаблицуСегментов("Ручные");
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыТипыСегментовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.СтраницыТипыСегментов.ТекущаяСтраница = Элементы.СтраницаОбновляемыеИДинамические 
		И (НЕ СписокДинамическихИОбновляемыхСегментовСформирован) Тогда
		
		ЗаполнитьТаблицуСегментов("ОбновляемыеИДинамические");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДинамическиеСегментыНеВыведеныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОтобразитьДинамическиеСегменты" Тогда
		НеФормироватьДинамическиеСегменты = Ложь;
		ЗаполнитьТаблицуСегментов("ОбновляемыеИДинамические");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСегменты

&НаКлиенте
Процедура СегментыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.СтраницыТипыСегментов.ТекущаяСтраница = Элементы.СтраницаОбновляемыеИДинамические Тогда
		ТекущиеДанные = Элементы.ОбновляемыеИДинамические.ТекущиеДанные;
	ИначеЕсли Элементы.СтраницыТипыСегментов.ТекущаяСтраница = Элементы.СтраницаСформированныеВручную Тогда
		ТекущиеДанные = Элементы.Сегменты.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "СегментыСегмент" ИЛИ Поле.Имя = "ОбновляемыеИДинамическиеСегмент"  Тогда
		
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Сегмент);
		
	ИначеЕсли Поле.Имя = "СегментыОтветственный" ИЛИ Поле.Имя = "ОбновляемыеИДинамическиеОтветственный"Тогда
		
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ответственный);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВключитьВСегмент(Команда)
	
	ВключитьУдалитьВСегментКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСегмента(Команда)
	
	ВключитьУдалитьВСегментКлиент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Элементы.СтраницыТипыСегментов.ТекущаяСтраница = Элементы.СтраницаСформированныеВручную Тогда
		ЗаполнитьТаблицуСегментов("Ручные");
	Иначе
		ЗаполнитьТаблицуСегментов("ОбновляемыеИДинамические");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанныеПоДинамическимСегментам()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СегментыПартнеров.Ссылка КАК Сегмент,
	|	СегментыПартнеров.Ответственный,
	|	СегментыПартнеров.СпособФормирования
	|ИЗ
	|	Справочник.СегментыПартнеров КАК СегментыПартнеров
	|ГДЕ
	|	(НЕ СегментыПартнеров.ЭтоГруппа)
	|	И (НЕ СегментыПартнеров.ПометкаУдаления)
	|	И СегментыПартнеров.СпособФормирования = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияСегментов.ФормироватьДинамически)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоДинамическихСегментов = Выборка.Количество();
	Если НеФормироватьДинамическиеСегменты Тогда
		
		Если КоличествоДинамическихСегментов < 5 Тогда
			
			НеФормироватьДинамическиеСегменты = Ложь;
			Элементы.ДекорацияДинамическиеСегментыНеВыведены.Видимость = Ложь;
			
		Иначе
			
			Элементы.ДекорацияДинамическиеСегментыНеВыведены.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеФормироватьДинамическиеСегменты Тогда
		СписокДинамическихИОбновляемыхСегментовСформирован = Истина;
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ОбновляемыеИДинамические.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		НоваяСтрока.ВходитВСегмент = СегментыСервер.ВходитВСегмент(Партнер, Выборка.Сегмент);
		
	КонецЦикла;
	
	Элементы.ДекорацияДинамическиеСегментыНеВыведены.Видимость = Ложь;
	СписокДинамическихИОбновляемыхСегментовСформирован         = Истина;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьТаблицуСегментов(ТипТаблицы)
	
	Если ТипТаблицы = "Ручные" Тогда
		
		ТипФормирования = "ФормироватьВручную";
		ИмяТаблицы = "Сегменты";
		
	ИначеЕсли ТипТаблицы = "ОбновляемыеИДинамические" Тогда
		
		ТипФормирования = "ПериодическиОбновлять";
		ИмяТаблицы = "ОбновляемыеИДинамические";
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ЭтаФорма[ИмяТаблицы].Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СегментыПартнеров.Ссылка КАК Сегмент,
	|	ВЫБОР
	|		КОГДА ПартнерыСегмента.Партнер ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВходитВСегмент,
	|	СегментыПартнеров.Ответственный
	|ИЗ
	|	Справочник.СегментыПартнеров КАК СегментыПартнеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|		ПО (ПартнерыСегмента.Сегмент = СегментыПартнеров.Ссылка)
	|			И (ПартнерыСегмента.Партнер = &Партнер)
	|ГДЕ
	|	(НЕ СегментыПартнеров.ПометкаУдаления)
	|	И (НЕ СегментыПартнеров.ЭтоГруппа)
	|	И СегментыПартнеров.СпособФормирования = &ТипФормирования";
	
	Запрос.УстановитьПараметр("ТипФормирования", Перечисления.СпособыФормированияСегментов[ТипФормирования]);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	ЭтаФорма[ИмяТаблицы].Загрузить(Запрос.Выполнить().Выгрузить());
	
	Если ТипТаблицы = "ОбновляемыеИДинамические" Тогда
		
		Для каждого СтрокаТаблицы Из ЭтаФорма[ИмяТаблицы] Цикл
			СтрокаТаблицы.СпособФормирования = Перечисления.СпособыФормированияСегментов.ПериодическиОбновлять;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипТаблицы = "ОбновляемыеИДинамические" Тогда
		
		ЗаполнитьДанныеПоДинамическимСегментам();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуСегментов()

&НаКлиенте
Процедура ВключитьУдалитьВСегментКлиент(Включить)
	
	ВыделенныеСтроки = Элементы.Сегменты.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбрабатываемыхСегментов = Новый Массив;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.Сегменты.ДанныеСтроки(ВыделеннаяСтрока);
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ВходитВСегмент = Включить Тогда
			Продолжить;
		Иначе
			МассивОбрабатываемыхСегментов.Добавить(ДанныеСтроки.Сегмент);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивОбрабатываемыхСегментов.Количество() > 0 Тогда
		
		ВключитьУдалитьВСегментСервер(МассивОбрабатываемыхСегментов, Включить);
		Если Включить Тогда
			Оповестить("ДобавлениеПартнераВСегмент");
		Иначе
			Оповестить("УдалениеПартнераИзСегмента");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВключитьУдалитьВСегментКлиент()

&НаСервере
Процедура ВключитьУдалитьВСегментСервер(МассивОбрабатываемыхСегментов,Включить);
	
	Для каждого ЭлементМассива Из МассивОбрабатываемыхСегментов Цикл
		
		Если Включить Тогда
			
			СегментыСервер.ДобавитьПартнераВСегмент(ЭлементМассива,Партнер);
			
		Иначе
			
			СегментыСервер.УдалитьПартнераИзСегмента(ЭлементМассива,Партнер);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьТаблицуСегментов("Ручные");
	
КонецПроцедуры // ВключитьУдалитьВСегментСервер()

#КонецОбласти
