
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбменДаннымиУТ.ВЭтомУзлеДоступноВыполнениеОперацийЗакрытияМесяца(Отказ) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоМеждународнаяВерсия = Истина;
	//++ Локализация
	ЭтоМеждународнаяВерсия = Ложь;
	//-- Локализация
	
	// Соберем системные настройки в структуру РежимРаботы.
	РежимРаботы = Новый Структура;
	РежимРаботы.Вставить("БазоваяВерсия", 				 ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	РежимРаботы.Вставить("УправлениеПредприятием",		 ПолучитьФункциональнуюОпцию("УправлениеПредприятием"));
	РежимРаботы.Вставить("КомплекснаяАвтоматизация",	 ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация"));
	РежимРаботы.Вставить("УправлениеТорговлей",			 ПолучитьФункциональнуюОпцию("УправлениеТорговлей"));
	РежимРаботы.Вставить("ВозможнаНастройкаРасписания",  НЕ ОбщегоНазначения.РазделениеВключено());
	
	РежимРаботы.Вставить("ДоступенУправленческийУчет", Истина);
	РежимРаботы.Вставить("ДоступенРегламентированныйУчет",
		Ложь
		);
	РежимРаботы.Вставить("ДоступенМеждународныйУчет",
		Ложь
		);
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	Организация = Параметры.Организация;
	ОрганизацияПредыдущая = Организация;
	
	ТекущийПериод = НачалоМесяца(ТекущаяДатаСеанса());
	
	Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		РежимЗакрытияТекущегоПериода = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие;
	Иначе
		РежимЗакрытияТекущегоПериода = Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие;
	КонецЕсли;
	
	// Выполним настройку свойств элементов формы.
	ЗаполнитьСостояниеРегламентногоЗадания();
	
	НастроитьЭлементыПриИнициализацииФормы();
	
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"НастроитьРасписаниеРегламентногоЗаданияЗавершение",
		ЭтотОбъект,
		Новый Структура("Диалог", Диалог));
	
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СохранитьРеквизитыРегламентногоЗадания();
	
	ОрганизацияПредыдущая = Организация;
	
	ЗаполнитьСостояниеРегламентногоЗадания();
	
	НастроитьДоступностьПолей();
	
	СохраняемыйРеквизит = Новый УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	ОрганизацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	СохраняемыйРеквизит = Новый УникальныйИдентификатор;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьОУПриИзменении(Элемент)
	
	Если НЕ ЗакрыватьОперативныйУчетВПрошломПериоде Тогда
		
		ЗакрыватьРегламентированныйУчетВПрошломПериоде = Ложь;
		ЗакрыватьМеждународныйУчетВПрошломПериоде = Ложь;
		
	КонецЕсли;
	
	НастроитьДоступностьПолей();
	
	СохраняемыйРеквизит = Новый УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьРУПриИзменении(Элемент)
	
	Если НЕ ЗакрыватьРегламентированныйУчетВПрошломПериоде Тогда
		
		ЗакрыватьМеждународныйУчетВПрошломПериоде = Ложь;
		
	КонецЕсли;
	
	НастроитьДоступностьПолей();
	
	СохраняемыйРеквизит = Новый УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьМУПриИзменении(Элемент)
	
	НастроитьДоступностьПолей();
	
	СохраняемыйРеквизит = Новый УникальныйИдентификатор;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьТекущийПериодПриИзменении(Элемент)
	Если Не ЗакрыватьОперативныйУчетВТекущемПериоде Тогда
		ЗакрыватьРегламентированныйУчетВТекущемПериоде = Ложь;
	КонецЕсли;
	НастроитьДоступностьПолей();
	СохраняемыйРеквизит = Новый УникальныйИдентификатор;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьРУВТекущемПериодеПриИзменении(Элемент)
	СохраняемыйРеквизит = Новый УникальныйИдентификатор;
КонецПроцедуры

&НаКлиенте
Процедура РежимЗакрытияПриИзменении(Элемент)
	НастроитьДоступностьПолей();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьЭлементыПриИнициализацииФормы()
	
	// Заполним список выбора организаций доступными пользователю организациями.
	СписокВыбора = Элементы.Организация.СписокВыбора;
	СписокВыбора.ЗагрузитьЗначения(Справочники.Организации.ДоступныеОрганизации(Истина));
	СписокВыбора.Вставить(0, Справочники.Организации.ПустаяСсылка(), НСтр("ru='<По всем организациям>'"));
	
	ВидимостьМУ = Ложь;
	
	Элементы.ГруппаЗакрытияМесяцаОУ.Доступность = РежимРаботы.ДоступенУправленческийУчет;
	Элементы.ГруппаЗакрытияМесяцаРУ.Доступность = РежимРаботы.ДоступенРегламентированныйУчет;
	Элементы.ГруппаЗакрытияМесяцаРУ.Видимость = РежимРаботы.ДоступенРегламентированныйУчет; 
	Элементы.ЗакрыватьРегламентированныйУчетВТекущемПериоде.Видимость = РежимРаботы.ДоступенРегламентированныйУчет;
	Элементы.ГруппаЗакрытияМесяцаМУ.Доступность = РежимРаботы.ДоступенМеждународныйУчет;
	Элементы.ГруппаЗакрытияМесяцаМУ.Видимость   = ВидимостьМУ;
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность = РежимРаботы.ВозможнаНастройкаРасписания;
		
	РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ЗаполнитьПризнакНаличияЗаданияУОрганизаций(Элементы.Организация.СписокВыбора);
	
	НастроитьДоступностьПолей();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступностьПолей()
	
	// Прошлые периоды
	Элементы.ЗакрыватьРегламентированныйУчетВПрошломПериоде.Доступность = ЗакрыватьОперативныйУчетВПрошломПериоде;
	Элементы.ЗакрыватьМеждународныйУчетВПрошломПериоде.Доступность = ЗакрыватьРегламентированныйУчетВПрошломПериоде;
	
	// Текущий период
	Элементы.РежимЗакрытияТекущегоПериода.Доступность = РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22();
	Элементы.ЗакрыватьРегламентированныйУчетВТекущемПериоде.Доступность = ЗакрыватьОперативныйУчетВТекущемПериоде;
	
КонецПроцедуры


#Область РегламентноеЗадание

&НаСервере
Процедура ЗаполнитьСостояниеРегламентногоЗадания()
	
	ОписаниеЗадания = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПолучитьРегламентноеЗаданиеПоОрганизации(Организация);
	
	ДатаНачалаЗакрытияПрошлогоПериода = ОписаниеЗадания.ДатаНачалаЗакрытияПрошлогоПериода;
	ЗакрыватьОперативныйУчетВПрошломПериоде = ОписаниеЗадания.ЗакрыватьОперативныйУчетВПрошломПериоде;
	ЗакрыватьРегламентированныйУчетВПрошломПериоде = ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВПрошломПериоде;
	ЗакрыватьМеждународныйУчетВПрошломПериоде = ОписаниеЗадания.ЗакрыватьМеждународныйУчетВПрошломПериоде;
	РежимЗакрытияТекущегоПериода = ОписаниеЗадания.РежимЗакрытияТекущегоПериода;
	ЗакрыватьОперативныйУчетВТекущемПериоде = ОписаниеЗадания.ЗакрыватьОперативныйУчетВТекущемПериоде;
	ЗакрыватьРегламентированныйУчетВТекущемПериоде = ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВТекущемПериоде;
	
	Если Не ЗначениеЗаполнено(РежимЗакрытияТекущегоПериода) Тогда
		Если РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
			РежимЗакрытияТекущегоПериода = Перечисления.РежимыЗакрытияМесяца.ПредварительноеЗакрытие;
		Иначе
			РежимЗакрытияТекущегоПериода = Перечисления.РежимыЗакрытияМесяца.ОкончательноеЗакрытие;
		КонецЕсли;
	КонецЕсли;
	
	ЗаданиеСуществует = ОписаниеЗадания.ЗаданиеСуществует;
	
	Если ОписаниеЗадания.Задание <> Неопределено Тогда
		РасписаниеРегламентногоЗадания = ОписаниеЗадания.Задание.Расписание;
	Иначе
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
		
	Если НЕ РежимРаботы.ВозможнаНастройкаРасписания
	 И Строка(РасписаниеРегламентногоЗадания) = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		РасписаниеРегламентногоЗадания = ПредопределенноеРасписание();
	КонецЕсли;
	
	ОбновитьПредставлениеРасписанияИСостояния(ОписаниеЗадания);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРеквизитыРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользованиеЗадания = ЗакрыватьОперативныйУчетВПрошломПериоде
		ИЛИ ЗакрыватьРегламентированныйУчетВПрошломПериоде
		ИЛИ ЗакрыватьМеждународныйУчетВПрошломПериоде
		ИЛИ ЗакрыватьОперативныйУчетВТекущемПериоде
		ИЛИ ЗакрыватьРегламентированныйУчетВТекущемПериоде;
	
	Если НЕ ЗаданиеСуществует И НЕ ИспользованиеЗадания Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимРаботы.ВозможнаНастройкаРасписания
	 И Строка(РасписаниеРегламентногоЗадания) = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		РасписаниеРегламентногоЗадания = ПредопределенноеРасписание();
	КонецЕсли;
	
	ОписаниеЗадания = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ПолучитьРегламентноеЗаданиеПоОрганизации(ОрганизацияПредыдущая);
	
	ОрганизацииКРасчету = Новый Массив;
	ОрганизацииКРасчету.Добавить(ОрганизацияПредыдущая);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", ИспользованиеЗадания);
	ПараметрыЗадания.Вставить("Параметры",     ОрганизацииКРасчету);
	ПараметрыЗадания.Вставить("Расписание",    РасписаниеРегламентногоЗадания);
	
	Если ОписаниеЗадания.Задание = Неопределено Тогда
		
		СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Закрытие месяца по организации: %1'"),
			?(ЗначениеЗаполнено(ОрганизацияПредыдущая), СокрЛП(ОрганизацияПредыдущая), НСтр("ru = 'По всем организациям.'")));
		
		ПараметрыЗадания.Вставить("Наименование", СтрокаНаименования);
		ПараметрыЗадания.Вставить("Метаданные",	  Метаданные.РегламентныеЗадания.ЗакрытиеМесяца);
		
		ОписаниеЗадания.Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
	Иначе
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(ОписаниеЗадания.Задание, ПараметрыЗадания);
		
	КонецЕсли;
	
	ОписаниеЗадания.ИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(ОписаниеЗадания.Задание);
	ОписаниеЗадания.СостояниеЗадания 	 = ОбщегоНазначенияУТ.ПолучитьСостояниеПоследнегоЗадания(ОписаниеЗадания.Задание);
	ОписаниеЗадания.Использование 		 = ИспользованиеЗадания;
	
	ОписаниеЗадания.ДатаНачалаЗакрытияПрошлогоПериода = ДатаНачалаЗакрытияПрошлогоПериода;
	ОписаниеЗадания.ЗакрыватьОперативныйУчетВПрошломПериоде = ЗакрыватьОперативныйУчетВПрошломПериоде;
	ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВПрошломПериоде = ЗакрыватьРегламентированныйУчетВПрошломПериоде;
	ОписаниеЗадания.ЗакрыватьМеждународныйУчетВПрошломПериоде = ЗакрыватьМеждународныйУчетВПрошломПериоде;
	ОписаниеЗадания.РежимЗакрытияТекущегоПериода = РежимЗакрытияТекущегоПериода;
	ОписаниеЗадания.ЗакрыватьОперативныйУчетВТекущемПериоде = ЗакрыватьОперативныйУчетВТекущемПериоде;
	ОписаниеЗадания.ЗакрыватьРегламентированныйУчетВТекущемПериоде = ЗакрыватьРегламентированныйУчетВТекущемПериоде;
	
	РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ЗаписатьРегламентноеЗаданиеПоОрганизации(ОписаниеЗадания);
	РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.ЗаполнитьПризнакНаличияЗаданияУОрганизаций(Элементы.Организация.СписокВыбора);
	
	ОбновитьПредставлениеРасписанияИСостояния(ОписаниеЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеРасписанияИСостояния(ОписаниеЗадания = Неопределено)
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок =
		АудитСостоянияСистемыКлиентСервер.ПредставлениеРасписания(РасписаниеРегламентногоЗадания);
		
	Если ОписаниеЗадания <> Неопределено И ОписаниеЗадания.СостояниеЗадания <> Неопределено Тогда
		
		Если ОписаниеЗадания.СостояниеЗадания.Состояние = Неопределено Тогда
			СостояниеЗадания = НСтр("ru = 'Не выполнялось'");
		Иначе
			
			УточнениеПланирования = "";
			
			Если ОписаниеЗадания.СостояниеЗадания.Состояние = Перечисления.СостоянияЗаданий.Запланировано
			 И ЗначениеЗаполнено(ОписаниеЗадания.СостояниеЗадания.ДатаПлан) Тогда
				УточнениеПланирования = " (" + СокрЛП(ОписаниеЗадания.СостояниеЗадания.ДатаПлан) + ")";
			КонецЕсли;
			
			СостояниеЗадания =
				СокрЛП(ОписаниеЗадания.СостояниеЗадания.Состояние) + УточнениеПланирования + "; "
					+ НСтр("ru='последнее выполнение'") + ": "
					+ ?(ЗначениеЗаполнено(ОписаниеЗадания.СостояниеЗадания.ДатаЗавершения), СокрЛП(ОписаниеЗадания.СостояниеЗадания.ДатаЗавершения), НСтр("ru = 'еще не выполнялось'"));
			
		КонецЕсли;
		
	ИначеЕсли ОписаниеЗадания <> Неопределено Тогда
		
		СостояниеЗадания = НСтр("ru='Не настроено'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗаданияЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если Расписание <> Неопределено Тогда
		
		РасписаниеРегламентногоЗадания = Диалог.Расписание;
		ОбновитьПредставлениеРасписанияИСостояния();
		
	КонецЕсли;
	
	СохраняемыйРеквизит = Новый УникальныйИдентификатор;
	
КонецПроцедуры

&НаСервере
Функция ПредопределенноеРасписание(ДляМеждународногоУчета = Ложь)
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы            = Месяцы;
	Расписание.ДниНедели         = ДниНедели;
	Расписание.ПериодПовтораДней = 1; // каждый день
	
	Расписание.ВремяНачала = Дата('00010101220000'); // 22:00
		
	Возврат Расписание;
	
КонецФункции

#КонецОбласти

#КонецОбласти
