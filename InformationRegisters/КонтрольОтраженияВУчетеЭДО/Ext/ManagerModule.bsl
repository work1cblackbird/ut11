// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.КонтрольОтраженияВУчетеЭДО;
	ПолноеИмяРегистра  = МетаданныеРегистра.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоНезависимыйРегистрСведений = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки        = ОбновлениеИнформационнойБазы.СпособВыборкиИзмеренияНезависимогоРегистраСведений();
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	
	РегистрацияДанныхДляОбработки(ДополнительныеПараметры, Параметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура:
//  * Очередь - Произвольный
//  * ПрогрессВыполнения - Структура:
//  ** ОбработаноОбъектов - Число
//  ** ВсегоОбъектов - Число
//  * ОбработкаЗавершена - Булево
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.КонтрольОтраженияВУчетеЭДО;
	ПолноеИмяРегистра  = МетаданныеРегистра.ПолноеИмя();
	МенеджерРегистра   = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	НаборСсылок = ВыбранныеДанные.ВыгрузитьКолонку("ЭлектронныйДокумент"); // Массив из см. РегистрСведений.КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		Попытка
			
			ВыполнитьКонтрольОтраженияВУчете(СсылкаНаОбъект);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(СсылкаНаОбъект);
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			
		Исключение
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать входящий электронный документ: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые входящие электронные документы (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция входящих электронных документов: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеРегистра,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

// Параметры:
//  ДополнительныеПараметры - см. ОбновлениеИнформационнойБазы.ОтметитьКОбработке.ДополнительныеПараметры
//  Параметры - см. ОбновлениеИнформационнойБазы.ОтметитьКОбработке.ОсновныеПараметры
Процедура РегистрацияДанныхДляОбработки(ДополнительныеПараметры, Параметры)
	
	РазмерПорции = 1000;
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ЭлектронныйДокументВходящийЭДО.Ссылка КАК ЭлектронныйДокумент
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящийЭДО КАК ЭлектронныйДокументВходящийЭДО
	|ГДЕ
	|	ЭлектронныйДокументВходящийЭДО.Ссылка > &ПорядокОбхода
	|	И НЕ ЭлектронныйДокументВходящийЭДО.УдалитьСостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытСОтклонением), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.Аннулирован), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ОжидаетсяПодтверждениеАннулирования), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.НеСформирован), ЗНАЧЕНИЕ(Перечисление.СостоянияДокументовЭДО.ЗакрытПринудительно))
	|	И НЕ ЭлектронныйДокументВходящийЭДО.УдалитьВидДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовЭДО.УдалитьПроизвольный)
	|	И НЕ 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					Документ.ЭлектронныйДокументВходящийЭДО.УдалитьДокументыОснования КАК ЭлектронныйДокументВходящийДокументыОснования
	|				ГДЕ
	|					ЭлектронныйДокументВходящийЭДО.Ссылка = ЭлектронныйДокументВходящийДокументыОснования.Ссылка)
	|	И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК КонтрольОтраженияВУчетеЭДО
	|				ГДЕ
	|					КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент = ЭлектронныйДокументВходящийЭДО.Ссылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронныйДокументВходящийЭДО.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "1000", Формат(РазмерПорции, "ЧГ=")); 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ПорядокОбхода = Документы.ЭлектронныйДокументВходящийЭДО.ПустаяСсылка();
	ОтработаныВсеДанные = Ложь;
	
	Пока Не ОтработаныВсеДанные Цикл
		
		Запрос.УстановитьПараметр("ПорядокОбхода", ПорядокОбхода);
		
		//@skip-check query-in-loop - порционная обработка.
		ДанныеДляРегистрации = Запрос.Выполнить().Выгрузить();
		КоличествоСтрок      = ДанныеДляРегистрации.Количество();
		
		Если КоличествоСтрок < РазмерПорции Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		
		Если КоличествоСтрок > 0 Тогда
			ПорядокОбхода = ДанныеДляРегистрации[КоличествоСтрок - 1].ЭлектронныйДокумент; // ДокументСсылка.ЭлектронныйДокументВходящийЭДО
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеДляРегистрации, ДополнительныеПараметры);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлектронныйДокумент - см. РегистрСведений.КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент
Процедура ВыполнитьКонтрольОтраженияВУчете(ЭлектронныйДокумент)
	
	ДанныеДокументовДляОтраженияВУчете = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлектронныйДокумент));
	
	Если ЗначениеЗаполнено(ДанныеДокументовДляОтраженияВУчете) Тогда
		ОтражениеВУчетеЭДО.ВключитьКонтрольОтраженияВУчете(ДанныеДокументовДляОтраженияВУчете[0]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Возвращаемое значение:
//  Структура:
// * СопоставитьНоменклатуру - см. РегистрСведений.КонтрольОтраженияВУчетеЭДО.СопоставитьНоменклатуру
// * СоздатьУчетныйДокумент - см. РегистрСведений.КонтрольОтраженияВУчетеЭДО.СоздатьУчетныйДокумент
// * ПровестиУчетныйДокумент - см. РегистрСведений.КонтрольОтраженияВУчетеЭДО.ПровестиУчетныйДокумент
Функция НовыеПараметрыКонтроля() Экспорт
	Параметры = Новый Структура;
	Параметры.Вставить("СопоставитьНоменклатуру", Ложь);
	Параметры.Вставить("СоздатьУчетныйДокумент", Ложь);
	Параметры.Вставить("ПровестиУчетныйДокумент", Ложь);
	Возврат Параметры;
КонецФункции

// Параметры:
//  ЭлектронныйДокумент - см. РегистрСведений.КонтрольОтраженияВУчетеЭДО.ЭлектронныйДокумент
//  ПараметрыКонтроля - Неопределено
//                    - см. НовыеПараметрыКонтроля
Процедура Записать(ЭлектронныйДокумент, ПараметрыКонтроля = Неопределено) Экспорт
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронныйДокумент.Установить(ЭлектронныйДокумент);
	
	Запись = НаборЗаписей.Добавить();
	Запись.ЭлектронныйДокумент = ЭлектронныйДокумент;
	
	Если ПараметрыКонтроля = Неопределено Тогда
		Запись.СопоставитьНоменклатуру = Истина;
		Запись.СоздатьУчетныйДокумент = Истина;
		Запись.ПровестиУчетныйДокумент = Истина;
	Иначе
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыКонтроля);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли