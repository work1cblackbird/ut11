#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ДанныеКодовМаркировки(КодыМаркировки) Экспорт
	
	Если КодыМаркировки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИсходныеДанные = Новый ТаблицаЗначений;
	ИсходныеДанные.Колонки.Добавить("КодМаркировки",          Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ИсходныеДанные.Колонки.Добавить("ХешСуммаКодаМаркировки", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	
	Для Каждого КодМаркировки Из КодыМаркировки Цикл
		
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.КодМаркировки          = КодМаркировки;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(КодМаркировки);
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсходныеДанные.КодМаркировки          КАК КодМаркировки,
	|	ИсходныеДанные.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.ДокументОснование         КАК ДокументОснование,
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию            КАК ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗ.КодМаркировки             КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки    КАК ХешСуммаКодаМаркировки,
	|	ПулКодовМаркировкиСУЗ.Статус                    КАК Статус,
	|	ПулКодовМаркировкиСУЗ.Организация               КАК Организация,
	|	ПулКодовМаркировкиСУЗ.СтанцияУправленияЗаказами КАК СтанцияУправленияЗаказами,
	|	ПулКодовМаркировкиСУЗ.Номенклатура              КАК Номенклатура,
	|	ПулКодовМаркировкиСУЗ.Характеристика            КАК Характеристика,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки       КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная  КАК ДатаЭмиссииУниверсальная,
	|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная   КАК ДатаПечатиУниверсальная,
	|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки          КАК ШтрихкодУпаковки,
	|	ПулКодовМаркировкиСУЗ.GTIN                      КАК GTIN,
	|	ПулКодовМаркировкиСУЗ.ВидПродукции              КАК ВидПродукции,
	|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена,
	|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот        КАК СпособВводаВОборот,
	|	ПулКодовМаркировкиСУЗ.Шаблон                    КАК Шаблон,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки          КАК ХешСуммаУпаковки,
	|	ПулКодовМаркировкиСУЗ.МаркировкаОстатков        КАК МаркировкаОстатков,
	|	ПулКодовМаркировкиСУЗ.ТипШтрихкода              КАК ТипШтрихкода,
	|	ПулКодовМаркировкиСУЗ.ВидКИЗ                    КАК ВидКИЗ,
	|	ПулКодовМаркировкиСУЗ.РазмерКИЗ                 КАК РазмерКИЗ,
	|	&ТребуетВзвешивания                             КАК ТребуетВзвешивания,
	|	&ПроизвольнаяЕдиницаУчета                       КАК ПроизвольнаяЕдиницаУчета,
	|	// Требуется отслеживать наличие в пуле в начала обработки сканирования
	|	ВЫБОР
	|			КОГДА ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная = ДатаВремя(1,1,1)
	|		ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК СохраненоПриСканировании
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ИсходныеДанные.КодМаркировки          = ПулКодовМаркировкиСУЗ.КодМаркировки
	|		 И ИсходныеДанные.ХешСуммаКодаМаркировки = ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеИС
	|		ПО &ТоварыОписаниеНоменклатурыИС
	|");
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(Запрос.Текст, "ОписаниеИС", "ПулКодовМаркировкиСУЗ.Номенклатура");
	
	Запрос.УстановитьПараметр("ИсходныеДанные", ИсходныеДанные);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеПула = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеПула.Индексы.Добавить("КодМаркировки");
	
	Возврат ДанныеПула;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ, Ограничение);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команды) Экспорт
	Возврат;
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.АвтоМасштаб         = Ложь;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПулКодовМаркировкиСУЗ_ЭтикеткаИСМП";
		
		ДанныеПечати = Новый Структура;
		ДанныеПечати.Вставить("СтруктураДанных",            ПараметрыПечати.СтруктураДанных);
		ДанныеПечати.Вставить("Документ",                   ПараметрыПечати.СтруктураДанных.Документ);
		ДанныеПечати.Вставить("КаждаяЭтикеткаНаНовомЛисте", ПараметрыПечати.СтруктураДанных.КаждаяЭтикеткаНаНовомЛисте);
		ДанныеПечати.Вставить("РазрешитьПовторнуюПечать",   ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки());
		
		РаспечататьЭтикеткиИЗафиксироватьДатуПечати(ДанныеПечати, ТабличныйДокумент);
		
		Если ТипЗнч(ТабличныйДокумент) = Тип("Массив") Тогда

			ПечатнаяФорма = УправлениеПечатью.СведенияОПечатнойФорме(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП");
			Если ПечатнаяФорма <> Неопределено Тогда
				КоллекцияПечатныхФорм.Удалить(ПечатнаяФорма);
			КонецЕсли;

			КомплектПечатныхФорм = ПодготовитьКомплектПечатныхФорм();
			ПрефиксИмениМакета = СтрШаблон("%1_%2", НСтр("ru = 'ЭтикеткаИСМП'"), Новый УникальныйИдентификатор);
			НомерМакета = 0;
			Для Каждого СтруктураДокумента Из ТабличныйДокумент Цикл

				НомерМакета = НомерМакета + 1;
				ИмяМакета = СтрШаблон("%1_%2", ПрефиксИмениМакета, НомерМакета);
				ПечатнаяФорма = ДобавитьПечатнуюФормуВКомплект(
					КомплектПечатныхФорм, ИмяМакета, "", 1);
				СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, ПечатнаяФорма);

				УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
					КоллекцияПечатныхФорм,
					ИмяМакета,
					СтруктураДокумента.Заголовок,
					СтруктураДокумента.ТабличныйДокумент);

			КонецЦикла;

			КомплектПечатныхФорм = Неопределено;

		Иначе
			УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
				КоллекцияПечатныхФорм,
				"ЭтикеткаКодМаркировкиИСМП",
				НСтр("ru = 'Этикетка (обувь, одежда, табак...)'"),
				ТабличныйДокумент);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтатусыВыведенИзОборота() Экспорт
	
	Статусы = Новый Массив();
	Статусы.Добавить(Перечисления.СтатусыКодовМаркировкиСУЗ.Использован);
	Статусы.Добавить(Перечисления.СтатусыКодовМаркировкиСУЗ.Отбракован);
	
	Возврат Статусы;
	
КонецФункции

Функция РассчитатьТаблицуСостоянияПоЗаказу(Заказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = ЗапросСостоянияКодовПоЗаказу(Заказ);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЕстьНераспределенныеКоды(ДокументОснование) Экспорт
	
	ТаблицаСостояния = РассчитатьТаблицуСостоянияПоЗаказу(ДокументОснование);
	Возврат ТаблицаСостояния.Итог("КоличествоРезервировать") > 0;
	
КонецФункции

Процедура ЗарезервироватьКодыПодЗаказ(Параметры, АдресРезультата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МаркировкаОстатков  = Неопределено;
	ТаблицаНоменклатуры = НоваяТаблицаНоменклатуры(Параметры);
	Параметры.Свойство("МаркировкаОстатков", МаркировкаОстатков);
	
	Запрос = ЗапросСвободныхКодовПоЗаказу(Параметры.Документ, ТаблицаНоменклатуры, МаркировкаОстатков);
	Запрос.Текст = Запрос.Текст + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СвободныеКоды.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	СвободныеКоды КАК СвободныеКоды
	|СГРУППИРОВАТЬ ПО
	|	СвободныеКоды.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозможныеСвободныеКоды.ДокументОснование
	|ИЗ
	|	ВозможныеСвободныеКоды КАК ВозможныеСвободныеКоды
	|СГРУППИРОВАТЬ ПО
	|	ВозможныеСвободныеКоды.ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Заказ
	|";
	Результат = Запрос.Выполнить();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		ЭлементБлокировки.ИсточникДанных = Результат;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументОснование", "ДокументОснование");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		
		Запрос = ЗапросСостоянияКодовПоЗаказу(Параметры.Документ, Ложь, ТаблицаНоменклатуры, МаркировкаОстатков);
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвободныеКоды.КодМаркировки          КАК КодМаркировки,
		|	СвободныеКоды.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
		|	СвободныеКоды.ПолныйКодМаркировки    КАК ПолныйКодМаркировки,
		|	СвободныеКоды.ДокументОснование      КАК ДокументОснование,
		|	СвободныеКоды.ЗаказНаЭмиссию         КАК ЗаказНаЭмиссию,
		|	СвободныеКоды.ВидПродукции           КАК ВидПродукции,
		|	СвободныеКоды.Номенклатура           КАК Номенклатура,
		|	СвободныеКоды.Характеристика         КАК Характеристика,
		|	СвободныеКоды.СпособВводаВОборот     КАК СпособВводаВОборот
		|ИЗ
		|	СвободныеКоды КАК СвободныеКоды
		|ГДЕ
		|	СвободныеКоды.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозможныеСвободныеКоды.КодМаркировки          КАК КодМаркировки,
		|	ВозможныеСвободныеКоды.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
		|	ВозможныеСвободныеКоды.ПолныйКодМаркировки    КАК ПолныйКодМаркировки,
		|	ВозможныеСвободныеКоды.ДокументОснование      КАК ДокументОснование,
		|	ВозможныеСвободныеКоды.ЗаказНаЭмиссию         КАК ЗаказНаЭмиссию,
		|	ВозможныеСвободныеКоды.ВидПродукции           КАК ВидПродукции,
		|	ВозможныеСвободныеКоды.Номенклатура           КАК Номенклатура,
		|	ВозможныеСвободныеКоды.Характеристика         КАК Характеристика,
		|	ВозможныеСвободныеКоды.СпособВводаВОборот     КАК СпособВводаВОборот
		|ИЗ
		|	ВозможныеСвободныеКоды КАК ВозможныеСвободныеКоды
		|ГДЕ
		|	ВозможныеСвободныеКоды.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ДокументОснование  КАК ДокументОснование,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ВидПродукции       КАК ВидПродукции,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Номенклатура       КАК Номенклатура,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Характеристика     КАК Характеристика,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
		|	СУММА(ДоступноКРезрвированиюПоИзлишкамПредварительно.Количество)  КАК Количество
		|ИЗ
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно КАК ДоступноКРезрвированиюПоИзлишкамПредварительно
		|ГДЕ
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Организация = &Организация
		|СГРУППИРОВАТЬ ПО
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ДокументОснование,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ВидПродукции,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Номенклатура,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Характеристика,
		|	ДоступноКРезрвированиюПоИзлишкамПредварительно.СпособВводаВОборот		
		|ИМЕЮЩИЕ
		|	СУММА(ДоступноКРезрвированиюПоИзлишкамПредварительно.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыОснования.ДокументОснование КАК ДокументОснование,
		|	КОЛИЧЕСТВО(ПулКодовМаркировкиСУЗ.ДокументОснование) КАК КоличествоЗаписей
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СвободныеКоды.ДокументОснование КАК ДокументОснование
		|	ИЗ
		|		СвободныеКоды КАК СвободныеКоды
		|
		|	ОБЪЕДИНИТЬ
		|
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ВозможныеСвободныеКоды.ДокументОснование КАК ДокументОснование
		|	ИЗ
		|		ВозможныеСвободныеКоды КАК ВозможныеСвободныеКоды) КАК ДокументыОснования
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|	ПО ДокументыОснования.ДокументОснование = ПулКодовМаркировкиСУЗ.ДокументОснование
		|СГРУППИРОВАТЬ ПО
		|	ДокументыОснования.ДокументОснование
		|";
		Результаты = Запрос.ВыполнитьПакет();
		КоличествоРезультатов = Результаты.Количество();
		
		ТаблицаДокументыОснования = Результаты[КоличествоРезультатов - 1].Выгрузить();
		ТаблицаДокументыОснования.Индексы.Добавить("ДокументОснование");
		
		ВыборкаДоступноКРезервированию = Результаты[КоличествоРезультатов - 2].Выбрать();
		ВыборкаВозможныеСвободныеКоды  = Результаты[КоличествоРезультатов - 3].Выбрать();
		ВыборкаСвободныеКоды           = Результаты[КоличествоРезультатов - 4].Выбрать();
		
		ТаблицаСостояниеКодов = Результаты[КоличествоРезультатов - 5].Выгрузить();
		
		ТаблицаКодыМаркировки = НоваяТаблицаРезультатаРезервирования();
				
		СоответствиеКодовОснованиям = Новый Соответствие();
		
		Для Каждого СтрокаСостоянияКодов Из ТаблицаСостояниеКодов Цикл
			КоличествоРезервировать = СтрокаСостоянияКодов.КоличествоРезервировать;
			
			Если КоличествоРезервировать = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
			Если ЗначениеЗаполнено(СтрокаСостоянияКодов.СпособВводаВОборот) Тогда
				СтруктураПоиска.Вставить("СпособВводаВОборот");
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСостоянияКодов);
			
			ВыборкаСвободныеКоды.Сбросить();
			ВыборкаДоступноКРезервированию.Сбросить();

			Пока ВыборкаСвободныеКоды.НайтиСледующий(СтруктураПоиска)
				И КоличествоРезервировать > 0 Цикл
				ДобавитьКодВСоответствиеКодовОснованиям(ВыборкаСвободныеКоды, СоответствиеКодовОснованиям);
				КоличествоРезервировать = КоличествоРезервировать - 1;
			КонецЦикла;
			
			Пока ВыборкаДоступноКРезервированию.НайтиСледующий(СтруктураПоиска)
				И КоличествоРезервировать > 0 Цикл
				ДоступноКРезервированию = ВыборкаДоступноКРезервированию.Количество;
				
				СтруктураПоискаДоступных = Новый Структура("ДокументОснование,Номенклатура,Характеристика");
				Если ЗначениеЗаполнено(СтрокаСостоянияКодов.СпособВводаВОборот) Тогда
					СтруктураПоискаДоступных.Вставить("СпособВводаВОборот");
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДоступных, ВыборкаДоступноКРезервированию);
				
				ВыборкаВозможныеСвободныеКоды.Сбросить();
				
				Пока ВыборкаВозможныеСвободныеКоды.НайтиСледующий(СтруктураПоискаДоступных)
					И ДоступноКРезервированию > 0 И КоличествоРезервировать > 0 Цикл
					ДобавитьКодВСоответствиеКодовОснованиям(ВыборкаВозможныеСвободныеКоды, СоответствиеКодовОснованиям);
					ДоступноКРезервированию = ДоступноКРезервированию - 1;
					КоличествоРезервировать = КоличествоРезервировать - 1;
				КонецЦикла;
			КонецЦикла;
			
			КоличествоЗарезервировано = СтрокаСостоянияКодов.КоличествоРезервировать - КоличествоРезервировать;
			
			СтрокаСостоянияКодов.КоличествоПечатать = СтрокаСостоянияКодов.КоличествоПечатать + КоличествоЗарезервировано;
			СтрокаСостоянияКодов.КоличествоРезервировать = КоличествоРезервировать;
		КонецЦикла;
		
		НаборЗаписейПоЗаказу = СоздатьНаборЗаписей();
		НаборЗаписейПоЗаказу.Отбор.ДокументОснование.Установить(Параметры.Документ);
		
		Для Каждого КлючИЗначение Из СоответствиеКодовОснованиям Цикл
			
			ДокументОснование = ДокументОснованиеИзСоответствияКодам(КлючИЗначение);
			
			КоличествоЗаписейДляИзменения = КлючИЗначение.Значение.Количество();
			
			НайденнаяСтрока = ТаблицаДокументыОснования.Найти(ДокументОснование, "ДокументОснование");
			Если НайденнаяСтрока = Неопределено Тогда
				КоличествоЗаписей = 0;
			Иначе
				КоличествоЗаписей = НайденнаяСтрока.КоличествоЗаписей;
			КонецЕсли;
			
			ЗаписыватьНабором = КоличествоЗаписейДляИзменения > 1 И КоличествоЗаписей / КоличествоЗаписейДляИзменения < 100;
			
			Если ЗаписыватьНабором Тогда
				
				НаборЗаписейПоОснованию = СоздатьНаборЗаписей();
				НаборЗаписейПоОснованию.Отбор.ДокументОснование.Установить(ДокументОснование);
				НаборЗаписейПоОснованию.Прочитать();
				
				КоличествоЗаписей = НаборЗаписейПоОснованию.Количество();
				
				РезервированныеКоды = Новый Массив;
				Для Каждого Данные Из КлючИЗначение.Значение Цикл
					РезервированныеКоды.Добавить(Данные.КодМаркировки);
				КонецЦикла;
				
				Для ОбратныйИндекс = 1 По КоличествоЗаписей Цикл
					ПроверяемаяЗапись = НаборЗаписейПоОснованию[КоличествоЗаписей - ОбратныйИндекс];
					Если РезервированныеКоды.Найти(ПроверяемаяЗапись.КодМаркировки) <> Неопределено Тогда
						НоваяЗаписьПоЗаказу = НаборЗаписейПоЗаказу.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗаписьПоЗаказу, ПроверяемаяЗапись,, "ДокументОснование");
						НоваяЗаписьПоЗаказу.ДокументОснование = Параметры.Документ;
						
						НоваяСтрокаПоКоду = ТаблицаКодыМаркировки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоКоду, НоваяЗаписьПоЗаказу);
						
						НаборЗаписейПоОснованию.Удалить(КоличествоЗаписей - ОбратныйИндекс);
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписейПоОснованию.Записать(Истина);
				
			Иначе
				
				Для Каждого Данные Из КлючИЗначение.Значение Цикл
					Запись = СоздатьМенеджерЗаписи();
					Запись.ДокументОснование = ДокументОснование;
					ЗаполнитьЗначенияСвойств(Запись, Данные);
					Запись.Прочитать();
					Если Запись.Выбран() Тогда
						НоваяЗаписьПоЗаказу = НаборЗаписейПоЗаказу.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗаписьПоЗаказу, Запись,, "ДокументОснование");
						НоваяЗаписьПоЗаказу.ДокументОснование = Параметры.Документ;
						
						НоваяСтрокаПоКоду = ТаблицаКодыМаркировки.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоКоду, НоваяЗаписьПоЗаказу);
						
						Запись.Удалить();
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		НаборЗаписейПоЗаказу.Записать(Ложь);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Произошла ошибка при резервировании кодов маркировки.'");
		ТекстОшибки = ТекстОшибки + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВызватьИсключение ТекстОшибки;
	
	КонецПопытки;
	
	РезультатРезервирования = Новый Структура();
	РезультатРезервирования.Вставить("ТаблицаСостояниеКодов", ТаблицаСостояниеКодов);
	РезультатРезервирования.Вставить("ТаблицаКодыМаркировки", ТаблицаКодыМаркировки);

	ПоместитьВоВременноеХранилище(РезультатРезервирования, АдресРезультата);
	
КонецПроцедуры

Процедура ЗаполнитьДеревоСуществующихУпаковокПоДокументу(ДеревоУпаковок,
	Документ, ВидПродукции = Неопределено, ДляПечати = Истина) Экспорт
	
	Если ДеревоУпаковок.Колонки.Найти("КоличествоИтог") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("КоличествоИтог", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	КонецЕсли;
	Если ДеревоУпаковок.Колонки.Найти("ЭтоНабор") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("ЭтоНабор",             Новый ОписаниеТипов("Булево"));
		ДеревоУпаковок.Колонки.Добавить("ЭтоГрупповаяУпаковка", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ДеревоУпаковок.Колонки.Найти("ПредставлениеНоменклатуры") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Документ",          Документ);
	ПараметрыВыполнения.Вставить("ВидПродукции",      ВидПродукции);
	ПараметрыВыполнения.Вставить("ДляПечати",         ДляПечати);

	Запрос = ЗапросДереваСуществующихУпаковок(ПараметрыВыполнения);
	
	Результат = Запрос.ВыполнитьПакет();
	ВГраница = Результат.ВГраница();
	
	ТаблицаУпаковок = Результат[ВГраница - 1].Выгрузить();
	ДанныеУпаковок = ПолучитьДанныеУпаковокСоСтруктурой(ТаблицаУпаковок);
	
	ТекущийВидПродукции               = Неопределено;
	ТекущаяХешСуммаУпаковки           = "";
	ТекущийКодМаркировки              = "";
	ОбщиеПоля                         = "ХешСуммаУпаковки,Номенклатура,Характеристика,GTIN,Шаблон,СпособВводаВОборот";
	ДанныеУпаковки                    = Неопределено;
	СтрокаУпаковки                    = Неопределено;
	СодержимоеУпаковки                = Неопределено;
	ПредставлениеНоменклатурыУпаковки = "";
	
	Выборка = Результат[ВГраница].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийКодМаркировки <> Выборка.КодМаркировки Тогда
			
			ТекущийКодМаркировки = Выборка.КодМаркировки;
			
			ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				Выборка.НоменклатураПредставление,
				Выборка.ХарактеристикаПредставление,,,
				ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
				Выборка.ПредставлениеИзКешаОписанияОстатков, Выборка.ВидПродукции));
			
			Если ТекущаяХешСуммаУпаковки <> Выборка.ХешСуммаУпаковки Тогда
				
				ТекущаяХешСуммаУпаковки = Выборка.ХешСуммаУпаковки;
				
				Если ТекущийВидПродукции <> Выборка.ВидПродукции Тогда
					ТекущийВидПродукции = Выборка.ВидПродукции;
					ВидПродукцииИспользуетГрупповыеУпаковки = ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетГрупповыеУпаковки(ТекущийВидПродукции);
					ШаблоныГрупповойУпаковки                = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(ТекущийВидПродукции, 4);
					ЭтоТабачнаяПродукция                    = ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ТекущийВидПродукции);
				КонецЕсли;
				
				Если ВидПродукцииИспользуетГрупповыеУпаковки
					И ШаблоныГрупповойУпаковки.НайтиПоЗначению(Выборка.Шаблон) <> Неопределено Тогда
					ЭтоГрупповаяУпаковка = Истина;
					Если ЭтоТабачнаяПродукция Тогда
						ТекстНаборГрупповаяУпаковка = НСтр("ru = 'блок'");
					Иначе
						ТекстНаборГрупповаяУпаковка = НСтр("ru = 'групповая упаковка'");
					КонецЕсли;
				Иначе
					ЭтоГрупповаяУпаковка = Ложь;
					ТекстНаборГрупповаяУпаковка = НСтр("ru = 'набор'");
				КонецЕсли;
				
				Если ДанныеУпаковки <> Неопределено Тогда
					Если ДанныеУпаковки.ЭтоПроизвольнаяУпаковка Тогда
						СтрокаУпаковки.Содержимое = ИнтеграцияИС.ПредставлениеСоставаУпаковки(СодержимоеУпаковки);
						СтрокаУпаковки.ПредставлениеНоменклатуры = СтрокаУпаковки.Содержимое;
					ИначеЕсли ДляПечати И СтрокаУпаковки.ЭтоУпаковка Тогда
						КоличествоИтог = СтрокаУпаковки.Количество * СтрокаУпаковки.КоличествоИтог;
						СтрокаУпаковки = СтрокаУпаковки.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаУпаковки, СтрокаУпаковки.Родитель, ОбщиеПоля);
						СтрокаУпаковки.Содержимое = ПредставлениеНоменклатурыУпаковки;
						СтрокаУпаковки.ПредставлениеНоменклатуры = СтрокаУпаковки.Содержимое;
						СтрокаУпаковки.Количество = 1;
						СтрокаУпаковки.КоличествоИтог = КоличествоИтог;
					КонецЕсли;
				КонецЕсли;
				
				ДанныеУпаковки = ДанныеУпаковок[ТекущаяХешСуммаУпаковки];
				
				СтрокаУпаковки = ДеревоУпаковок.Строки.Добавить();
				
				Если ДанныеУпаковки.БезУпаковки Тогда
					ЗаполнитьЗначенияСвойств(СтрокаУпаковки, Выборка, ОбщиеПоля);
					СтрокаУпаковки.КоличествоИтог = Выборка.КоличествоВУпаковке * Выборка.КоличествоУпаковок;
					Если ЭтоГрупповаяУпаковка Тогда
						СтрокаУпаковки.ЭтоГрупповаяУпаковка = Истина;
					Иначе
						СтрокаУпаковки.ЭтоНабор = Истина;
					КонецЕсли;
					СтрокаУпаковки.Содержимое = СтрШаблон("%1, %2",
						ТекстНаборГрупповаяУпаковка,
						ПредставлениеНоменклатуры);
					СтрокаУпаковки.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
				ИначеЕсли ДанныеУпаковки.ЭтоПроизвольнаяУпаковка Тогда
					СодержимоеУпаковки = ИнтеграцияИС.ИнициализироватьСодержимоеУпаковки();
					
					СтрокаУпаковки.ХешСуммаУпаковки = Выборка.ХешСуммаУпаковки;
					СтрокаУпаковки.Количество = Выборка.КоличествоВУпаковке;
					СтрокаУпаковки.КоличествоИтог = Выборка.КоличествоУпаковок;
					Если ДляПечати Тогда
						СтрокаУпаковки.ЭтоУпаковка = Истина;
					КонецЕсли;
					
					СтрокаПродукции = ДобавитьСтрокуВСоставПроизвольнойУпаковки(СтрокаУпаковки, Выборка,
						ОбщиеПоля, ПредставлениеНоменклатуры, СодержимоеУпаковки);
				Иначе
					ПредставлениеНоменклатурыУпаковки = ПредставлениеНоменклатуры;
					СтрокиТекущейУпаковки = Новый Массив;
					ЗаполнитьЗначенияСвойств(СтрокаУпаковки, Выборка, ОбщиеПоля);
					СтруктураУпаковки = Новый Массив;
					СтруктураУпаковкиИзДерева(ДанныеУпаковки.ДеревоСтруктурыУпаковки, СтруктураУпаковки);
					ВГраница = СтруктураУпаковки.ВГраница();
					Для Индекс = 0 По ВГраница Цикл
						Если ЭтоГрупповаяУпаковка
							И Индекс = ВГраница Тогда
							Прервать;
						КонецЕсли;
						СтрокаСоставаУпаковки = СтруктураУпаковки[Индекс];
						Если ЗначениеЗаполнено(СтрокаСоставаУпаковки.ЕдиницаИзмерения) Тогда
							НаименованиеУпаковки = СтрокаСоставаУпаковки.ЕдиницаИзмерения;
						Иначе
							Если Индекс = 0 Тогда
								КоличествоВУпаковкеРасчетное = Выборка.КоличествоВУпаковке;
							Иначе
								КоличествоВУпаковкеРасчетное = КоличествоВУпаковкеРасчетное / СтрокаУпаковки.Количество;
							КонецЕсли;
							Если СтрокаСоставаУпаковки.КоличествоВУпаковке > 0 Тогда
								КоличествоВУпаковке = СтрокаСоставаУпаковки.КоличествоВУпаковке;
							Иначе
								КоличествоВУпаковке = КоличествоВУпаковкеРасчетное;
							КонецЕсли;
							НаименованиеУпаковки = СтрШаблон("%1 (%2 %3)",
								НСтр("ru = 'Короб'"),
								КоличествоВУпаковке,
								НСтр("ru = 'ед'"));
						КонецЕсли;
						Если Индекс = 0 Тогда
							СтрокаУпаковки.Содержимое = СтрШаблон("%1, %2",
								НаименованиеУпаковки,
								ПредставлениеНоменклатуры);
							СтрокаУпаковки.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
							КоличествоИтог = Выборка.КоличествоУпаковок;
						Иначе
							КоличествоИтог = СтрокаУпаковки.Количество * СтрокаУпаковки.КоличествоИтог;
							СтрокаУпаковки = СтрокаУпаковки.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаУпаковки, Выборка, ОбщиеПоля);
							СтрокаУпаковки.Содержимое = НаименованиеУпаковки;
							СтрокаУпаковки.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
						КонецЕсли;
						СтрокаУпаковки.Количество = СтрокаСоставаУпаковки.КоличествоВложенныхЕдиниц;
						СтрокаУпаковки.КоличествоИтог = КоличествоИтог;
						Если ДляПечати Тогда
							СтрокаУпаковки.ЭтоУпаковка = Истина;
						КонецЕсли;
						СтрокиТекущейУпаковки.Добавить(СтрокаУпаковки);
					КонецЦикла;
				КонецЕсли;
				
			Иначе
				СтрокаУпаковки.Количество = СтрокаУпаковки.Количество + Выборка.КоличествоВУпаковке;
				
				СтрокаПродукции = ДобавитьСтрокуВСоставПроизвольнойУпаковки(СтрокаУпаковки, Выборка,
					ОбщиеПоля, ПредставлениеНоменклатуры, СодержимоеУпаковки);
			КонецЕсли;
			
		Иначе
			Если ДанныеУпаковки.БезУпаковки Тогда
				СтрокаУпаковки.Количество = СтрокаУпаковки.Количество + Выборка.КоличествоВУпаковке;
			ИначеЕсли ДанныеУпаковки.ЭтоПроизвольнаяУпаковка Тогда
				Если Не СтрокаПродукции.ЭтоНабор
					И Не СтрокаПродукции.ЭтоГрупповаяУпаковка Тогда
					Если ЭтоГрупповаяУпаковка Тогда
						СтрокаПродукции.ЭтоГрупповаяУпаковка = Истина;
					Иначе
						СтрокаПродукции.ЭтоНабор = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если СтрокиТекущейУпаковки <> Неопределено Тогда
					КоличествоИтог = СтрокаУпаковки.Количество * СтрокаУпаковки.КоличествоИтог;
					СтрокаУпаковки = СтрокаУпаковки.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаУпаковки, СтрокаУпаковки.Родитель, ОбщиеПоля);
					СтрокаУпаковки.КоличествоИтог = КоличествоИтог;
					СтрокаУпаковки.Содержимое = ТекстНаборГрупповаяУпаковка;
					СтрокаУпаковки.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
					СтрокиТекущейУпаковки.Добавить(СтрокаУпаковки);
					Для Каждого СтрокаУпаковки Из СтрокиТекущейУпаковки Цикл
						Если ЭтоГрупповаяУпаковка Тогда
							СтрокаУпаковки.ЭтоГрупповаяУпаковка = Истина;
						Иначе
							СтрокаУпаковки.ЭтоНабор = Истина;
						КонецЕсли;
					КонецЦикла;
					СтрокиТекущейУпаковки = Неопределено;
				КонецЕсли;
				СтрокаУпаковки.Количество = СтрокаУпаковки.Количество + Выборка.КоличествоВУпаковке;
			КонецЕсли;
			
			Если ДляПечати Тогда
				Если ДанныеУпаковки.ЭтоПроизвольнаяУпаковка Тогда
					СтрокаВложеннойЕдиницы = СтрокаПродукции.Строки.Добавить();
				Иначе
					СтрокаВложеннойЕдиницы = СтрокаУпаковки.Строки.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаВложеннойЕдиницы, Выборка, ОбщиеПоля);
				СтрокаВложеннойЕдиницы.ЭтоВложеннаяЕдиница = Истина;
				СтрокаВложеннойЕдиницы.Количество = Выборка.КоличествоВУпаковке;
				СтрокаВложеннойЕдиницы.КоличествоИтог = Выборка.КоличествоВУпаковке * Выборка.КоличествоУпаковок;
				СтрокаВложеннойЕдиницы.Содержимое = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
					Выборка.НоменклатураПредставление,
					Выборка.ХарактеристикаПредставление,,,
					ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
					Выборка.ПредставлениеИзКешаОписанияОстатков, Выборка.ВидПродукции));
				СтрокаВложеннойЕдиницы.ПредставлениеНоменклатуры = СтрокаВложеннойЕдиницы.Содержимое;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеУпаковки <> Неопределено Тогда
		Если ДанныеУпаковки.ЭтоПроизвольнаяУпаковка Тогда
			СтрокаУпаковки.Содержимое = ИнтеграцияИС.ПредставлениеСоставаУпаковки(СодержимоеУпаковки);
			СтрокаУпаковки.ПредставлениеНоменклатуры = СтрокаУпаковки.Содержимое;
		ИначеЕсли ДляПечати И СтрокаУпаковки.ЭтоУпаковка Тогда
			КоличествоИтог = СтрокаУпаковки.Количество * СтрокаУпаковки.КоличествоИтог;
			СтрокаУпаковки = СтрокаУпаковки.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУпаковки, СтрокаУпаковки.Родитель, ОбщиеПоля);
			СтрокаУпаковки.Содержимое = ПредставлениеНоменклатурыУпаковки;
			СтрокаУпаковки.ПредставлениеНоменклатуры = СтрокаУпаковки.Содержимое;
			СтрокаУпаковки.Количество = 1;
			СтрокаУпаковки.КоличествоИтог = КоличествоИтог;
		КонецЕсли;
	КонецЕсли;
	
	ДеревоУпаковок.Строки.Сортировать("ПредставлениеНоменклатуры", Истина);
	
	Если ДляПечати Тогда
		ЗаполнитьДанныеДляПечатиВДеревеУпаковок(ДеревоУпаковок, ТаблицаУпаковок);
	КонецЕсли;
	
КонецПроцедуры

//Возвращает структуру для наложения отборов на регистр ПулКодовМаркировкиСУЗ
// 
//Параметры:
//   Документ                   - ДокументСсылка - источник отбора.
//   ВыбиратьСвязанныеОснования - Булево         - Управляет функция выбора документов, связанных основанием.
//
//Возвращаемое значение:
//   Структура - Где ключ - это имя измерения регистра по типу документа, значение - ссылка на документ.
//
Функция СтруктураОтбораДокументаПоТипуДокумента(Документ, ВыбиратьСвязанныеОснования = Ложь) Экспорт
	
	СтруктураОтбораДокументы = Новый Структура;
	
	Если Не ЗначениеЗаполнено(Документ) Тогда
		Возврат СтруктураОтбораДокументы;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если ТипДокумента = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		
		СтруктураОтбораДокументы.Вставить("ЗаказНаЭмиссию", Документ);
		
	ИначеЕсли Метаданные.ОпределяемыеТипы["ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП"].Тип.СодержитТип(ТипДокумента) Тогда
		
		Если ВыбиратьСвязанныеОснования Тогда
			
			МассивОснований = ПечатьЭтикетокИСМП.МассивСвязанныхДокументовОснований(Документ);
			
			СтруктураОтбораДокументы.Вставить("ДокументОснование", МассивОснований);
			
		Иначе
			
			СтруктураОтбораДокументы.Вставить("ДокументОснование", Документ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОтбораДокументы;
	
КонецФункции

// Процедура разбирает переданные данные для печати и для каждого пакета данных выполняет вызов процедуры,
// которая выполняет блокировку записей пула, печать этикеток и сохраняет дату печати.
// 
// Параметры:
// 	ДанныеПечати - Структура - Входные данные печати
// 	ТабличныйДокумент - ТабличныйДокумент - Табличный документ для вывода результатов,
// 	                    Массив из Структура из
// 	                     Заголовок - Строка - Название табличного документа для отображения в форме печати,
// 	                     ТабличныйДокумент - ТабличныйДокумент- Табличный документ для вывода результатов.
// 	СтруктураНастроек - Структура - Дополнительные настройки печати
// 	ДанныеПоВыбраннымКодам - Массив, Неопределено -Выходной параметр выбранных кодов из пула.
// 	ВстроеннаяПечать - Булево - Производить печать во встроенный макет (без шаблона).
Процедура РаспечататьЭтикеткиИЗафиксироватьДатуПечати(
	ДанныеПечати,
	ТабличныйДокумент,
	СтруктураНастроек = Неопределено,
	ДанныеПоВыбраннымКодам = Неопределено,
	ВстроеннаяПечать = Ложь) Экспорт
	
	Если ДанныеПечати.Свойство("СтруктураДанных") Тогда
		СтруктураОбъектовПечати = ДанныеПечати.СтруктураДанных;
	Иначе
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СтруктураОбъектовПечати.Свойство("ПакетнаяПечать")
		И СтруктураОбъектовПечати.ПакетнаяПечать Тогда
		
		ТабличныйДокумент = Новый Массив;
		КоличествоОшибок = 0;
		ОбъектыПечати = СтруктураОбъектовПечати.ОбъектыПечати;
		Для Каждого СтруктураОбъектаПечати Из ОбъектыПечати Цикл
			ТекущийТабличныйДокумент = Новый Структура;
			ТекущийТабличныйДокумент.Вставить("Заголовок", СтруктураОбъектаПечати.Заголовок);
			ТекущийТабличныйДокумент.Вставить("ТабличныйДокумент", Новый ТабличныйДокумент);
			
			СтруктураОбъектовПечати.Вставить("ОбъектыПечати", СтруктураОбъектаПечати.ОбъектыПечати);
			
			Попытка
				РаспечататьЭтикеткиИЗафиксироватьДатуПечатиДляОбъектовПечати(ДанныеПечати, СтруктураОбъектовПечати,
					ТекущийТабличныйДокумент.ТабличныйДокумент, СтруктураНастроек, ДанныеПоВыбраннымКодам, ВстроеннаяПечать);
				
				ТабличныйДокумент.Добавить(ТекущийТабличныйДокумент);
			Исключение
				КоличествоОшибок = КоличествоОшибок + 1;
			КонецПопытки;
		КонецЦикла;
		
		Если КоличествоОшибок > 0 Тогда
			КоличествоОбъектовПечати = ОбъектыПечати.Количество();
			Если КоличествоОшибок = КоличествоОбъектовПечати Тогда
				ВызватьИсключение НСтр("ru = 'При формировании печатной формы возникли ошибки.
					|Не удалось обработать объекты для печати.'");
			Иначе
				ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
					НСтр("ru = 'При формировании печатной формы возникли ошибки. Обработано объектов для печати %1 из %2'"),
					КоличествоОбъектовПечати - КоличествоОшибок,
					КоличествоОбъектовПечати));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		РаспечататьЭтикеткиИЗафиксироватьДатуПечатиДляОбъектовПечати(ДанныеПечати, СтруктураОбъектовПечати,
			ТабличныйДокумент, СтруктураНастроек, ДанныеПоВыбраннымКодам, ВстроеннаяПечать);
	КонецЕсли;
	
КонецПроцедуры

// Удаляет использованные коды маркировки из пула в случаях:
//   * Все коды маркировки по основанию распечатаны, основание полностью оформлено (по основанию)
//   * Основание не указано или архивировано, коды маркировки распечатаны (по использованным кодам).
//
Процедура ОчисткаПулаКодовМаркировки() Экспорт
	
	СрокХраненияКодовВПуле = Константы.СрокХраненияИспользованныхКодовМаркировки.Получить();
	Если СрокХраненияКодовВПуле = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОчисткиПула", НачалоДня(ТекущаяДатаСеанса()) - 86400 * СрокХраненияКодовВПуле);
	Запрос.УстановитьПараметр("ПустоеОснование", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ОснованиеСтатусыОформленияДокументовИСМП"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулКодовМаркировкиСУЗ.ДокументОснование
	|ПОМЕСТИТЬ ПроверяемыеОснования
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеОснования.ДокументОснование
	|ПОМЕСТИТЬ ОснованияДляАрхивирования
	|ИЗ
	|	ПроверяемыеОснования КАК ПроверяемыеОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ПроверяемыеОснования.ДокументОснование = ПулКодовМаркировкиСУЗ.ДокументОснование
	|		И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|		ПО ПроверяемыеОснования.ДокументОснование = СтатусыОформленияДокументовИСМП.Основание
	|		И
	|			СтатусыОформленияДокументовИСМП.СтатусОформления <> ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.Оформлено)
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ДокументОснование ЕСТЬ NULL
	|	И СтатусыОформленияДокументовИСМП.Основание ЕСТЬ NULL
	|;
	|
	|// Полностью распечатанные по основаниям/////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроверяемыеОснования.ДокументОснование
	|ИЗ
	|	ОснованияДляАрхивирования КАК ПроверяемыеОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ПроверяемыеОснования.ДокументОснование = ПулКодовМаркировкиСУЗ.ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	ПроверяемыеОснования.ДокументОснование
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная) < &ДатаОчисткиПула
	|;
	|
	|// Распечатанные без оснований///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|		ПО ПулКодовМаркировкиСУЗ.ДокументОснование = СтатусыОформленияДокументовИСМП.Основание
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС КАК ВскрытыеПотребительскиеУпаковкиИС
	|		ПО ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки = ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки
	|ГДЕ
	|	(ПулКодовМаркировкиСУЗ.ДокументОснование В(&ПустоеОснование)
	|		ИЛИ ЕСТЬNULL(СтатусыОформленияДокументовИСМП.Архивный, ЛОЖЬ))
	|	И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1,1,1)
	|	И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная < &ДатаОчисткиПула
	|	И ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	ПулКодовМаркировкиСУЗ.КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
	|";
	Пакет = Запрос.ВыполнитьПакет();
	
	ВыборкаОснования = Пакет[2].Выбрать();
	
	Набор = СоздатьНаборЗаписей();
	Пока ВыборкаОснования.Следующий() Цикл
		
		Набор.Отбор.ДокументОснование.Установить(ВыборкаОснования.ДокументОснование);
		НачатьТранзакцию();
		Попытка
			
			Набор.Записать();
			
			Основания = Новый Массив;
			Основания.Добавить(ВыборкаОснования.ДокументОснование);
			РегистрыСведений.СтатусыОформленияДокументовИСМП.АрхивироватьРаспоряженияКОформлению(
				Основания,
				Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПустаяСсылка());
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru='ИСМП'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				РегистрыСведений.ПулКодовМаркировкиСУЗ,
				ВыборкаОснования.ДокументОснование,
				СтрШаблон(
					НСтр("ru='Ошибка при очистке пула кодов маркировки по причине: %1'"),
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	КонецЦикла;
	
	ВыборкаКоды = Пакет[3].Выбрать();
	
	Набор = СоздатьНаборЗаписей();
	Пока ВыборкаКоды.Следующий() Цикл
		Набор.Отбор.КодМаркировки.Установить(ВыборкаКоды.КодМаркировки);
		Набор.Отбор.ХешСуммаКодаМаркировки.Установить(ВыборкаКоды.ХешСуммаКодаМаркировки);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Удаляет коды маркировки из пула после успешной передачи отчета о нанесении.
//
// Параметры:
//   КодыМаркировки - См. ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки.
Процедура ОчисткаПулаКодовМаркировкиПоОтчетуОНанесении(КодыМаркировки) Экспорт
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.ИсточникДанных = КодыМаркировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодМаркировки", "КодМаркировки");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХешСуммаКодаМаркировки", "ХешСуммаКодаМаркировки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Набор = СоздатьНаборЗаписей();
	Для Каждого СтрокаПулаКодовМаркировки Из КодыМаркировки Цикл
		Набор.Отбор.КодМаркировки.Установить(СтрокаПулаКодовМаркировки.КодМаркировки);
		Набор.Отбор.ХешСуммаКодаМаркировки.Установить(СтрокаПулаКодовМаркировки.ХешСуммаКодаМаркировки);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Удаляет неиспользованные коды маркировки из пула с истекшим сроком годности
//
Процедура УдалениеНеиспользованныхКодовМаркировки() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНастроек", НастройкиУдаленияНеиспользованныхКодовМаркировки());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНастроек.ВидПродукции,
	|	ТаблицаНастроек.ДатаЭмиссии
	|ПОМЕСТИТЬ ТаблицаНастроек
	|ИЗ
	|	&ТаблицаНастроек КАК ТаблицаНастроек
	|;
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.ДокументОснование,
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗ.КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
	|ПОМЕСТИТЬ ДанныеДляУдаления
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНастроек КАК ТаблицаНастроек
	|	ПО ПулКодовМаркировкиСУЗ.ВидПродукции = ТаблицаНастроек.ВидПродукции
	|	И ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная < ТаблицаНастроек.ДатаЭмиссии
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию.ТипОплатыКодовМаркировки <> ЗНАЧЕНИЕ(Перечисление.ТипыОплатыКодовМаркировкиСУЗ.ОплатаПоЭмиссии)
	|	И ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию.СервисПровайдер = ЗНАЧЕНИЕ(Справочник.СервисПровайдерыСУЗ.ПустаяСсылка)
	|;
	|ВЫБРАТЬ
	|	ДанныеДляУдаления.ЗаказНаЭмиссию,
	|	КОЛИЧЕСТВО(1) КАК КоличествоЗаписейКУдалению
	|ПОМЕСТИТЬ ИтогиПоЗаказамВременная
	|ИЗ
	|	ДанныеДляУдаления КАК ДанныеДляУдаления
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляУдаления.ЗаказНаЭмиссию
	|;
	|ВЫБРАТЬ
	|	ИтогиПоЗаказам.ЗаказНаЭмиссию,
	|	ИтогиПоЗаказам.КоличествоЗаписейКУдалению,
	|	КОЛИЧЕСТВО(1) КАК КоличествоЗаписейВсего
	|ПОМЕСТИТЬ ИтогиПоЗаказам
	|ИЗ
	|	ИтогиПоЗаказамВременная КАК ИтогиПоЗаказам
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|	ПО ИтогиПоЗаказам.ЗаказНаЭмиссию = ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
	|СГРУППИРОВАТЬ ПО
	|	ИтогиПоЗаказам.ЗаказНаЭмиссию,
	|	ИтогиПоЗаказам.КоличествоЗаписейКУдалению
	|;
	|ВЫБРАТЬ
	|	ИтогиПоЗаказам.ЗаказНаЭмиссию
	|ИЗ
	|	ИтогиПоЗаказам КАК ИтогиПоЗаказам
	|ГДЕ
	|	ИтогиПоЗаказам.КоличествоЗаписейКУдалению = ИтогиПоЗаказам.КоличествоЗаписейВсего
	|;
	|ВЫБРАТЬ
	|	ДанныеДляУдаления.ДокументОснование,
	|	ДанныеДляУдаления.ЗаказНаЭмиссию,
	|	ДанныеДляУдаления.КодМаркировки,
	|	ДанныеДляУдаления.ХешСуммаКодаМаркировки
	|ИЗ
	|	ДанныеДляУдаления КАК ДанныеДляУдаления
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИтогиПоЗаказам КАК ИтогиПоЗаказам
	|	ПО ДанныеДляУдаления.ЗаказНаЭмиссию = ИтогиПоЗаказам.ЗаказНаЭмиссию
	|	И ИтогиПоЗаказам.КоличествоЗаписейКУдалению <> ИтогиПоЗаказам.КоличествоЗаписейВсего";
	
	Результат = Запрос.ВыполнитьПакет();
	ВГраница = Результат.ВГраница();
	
	Выборка = Результат[ВГраница - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.ЗаказНаЭмиссию.Установить(Выборка.ЗаказНаЭмиссию);
		Набор.Записать();
	КонецЦикла;
	
	Выборка = Результат[ВГраница].Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Удалить();
	КонецЦикла;
	
КонецПроцедуры

#Область ПечатьКодовМаркировки

// Подготавливает данные для печати этикеток ИС
// 
// Параметры:
// 	ДанныеПечати - Структура - Данные для печати
// Возвращаемое значение:
// 	Структура, Неопределено - Описание:
// * РезультатРезервирования - Массив - Результат резервированных кодов маркировки
// * ТабличныйДокумент - ТабличныйДокумент - Напечатанные коды маркировки
Функция ПечатьЭтикетокСРезервированиемПоДокументу(ДанныеПечати) Экспорт
	
	СтруктураНастроек = ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП();
	СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте = ДанныеПечати.КаждаяЭтикеткаНаНовомЛисте;
	
	ТабличныйДокумент       = Новый ТабличныйДокумент();
	РезультатРезервирования = Неопределено;
	Попытка
		РаспечататьЭтикеткиИЗафиксироватьДатуПечати(
			ДанныеПечати, ТабличныйДокумент, СтруктураНастроек, РезультатРезервирования);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("ТабличныйДокумент",       ТабличныйДокумент);
	СтруктураРезультат.Вставить("РезультатРезервирования", РезультатРезервирования);
	
	Возврат СтруктураРезультат;
	
КонецФункции

// Выполняет инициализацию компоновщика настроек для вывода на печать кодов маркировки в линейную таблицу
//
// Параметры:
// 	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных.
Процедура ИнициализироватьКомпоновщикНастроекДляПечатиТаблицыКодовМаркировки(КомпоновщикНастроек) Экспорт
	
	СхемаКомпоновкиДанных = Неопределено;
	ПечатьЭтикетокИСМППереопределяемый.ПриОпределенииСхемыКомпоновкиДанныхДляПечатиТаблицыКодовМаркировки(СхемаКомпоновкиДанных);
	
	Если СхемаКомпоновкиДанных = Неопределено Тогда
		СхемаКомпоновкиДанных = ПолучитьМакет("ПоляШаблонаИСМПТаблица");
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных);
	
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
	Настройки = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки.Получить());
	
КонецПроцедуры

// Возвращает новую таблицу для печати этикеток
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Новая пустая таблица для заполнения данными печати
Функция НоваяТаблицаДанныхДляПечатиЭтикеток() Экспорт
	
	НаборВременный = СоздатьНаборЗаписей();
	
	ОписаниеТипаСтрока   = Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип;
	ОписаниеТипаЧисло    = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ОписаниеТипаХешСумма = Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.ХешСуммаКодаМаркировки.Тип;
	
	ТаблицаИтог        = НаборВременный.Выгрузить(,"Номенклатура, Характеристика");
	
	ТаблицаИтог.Колонки.Добавить("Серия",                Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаИтог.Колонки.Добавить("УчетноеКоличество",    Новый ОписаниеТипов("Число"));
	ТаблицаИтог.Колонки.Добавить("Количество",           ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("КоличествоПечать",     ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("Порядок",              ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("Штрихкод",             ОписаниеТипаСтрока);
	ТаблицаИтог.Колонки.Добавить("ТипШтрихкода",         Новый ОписаниеТипов("ПеречислениеСсылка.ТипыШтрихкодов"));
	ТаблицаИтог.Колонки.Добавить("ШтрихкодУпаковки",     Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаИтог.Колонки.Добавить("Упаковка",             Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаИтог.Колонки.Добавить("КодМаркировки",        ОписаниеТипаСтрока);
	ТаблицаИтог.Колонки.Добавить("НомерВГруппе",         ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ТаблицаИтог.Колонки.Добавить("СодержимоеКоличество", ОписаниеТипаЧисло);
	ТаблицаИтог.Колонки.Добавить("ШаблонЭтикетки",       Метаданные.ОпределяемыеТипы.ШаблонЭтикеткиИС.Тип);
	ТаблицаИтог.Колонки.Добавить("Шаблон",               Новый ОписаниеТипов("ПеречислениеСсылка.ШаблоныКодовМаркировкиСУЗ"));
	ТаблицаИтог.Колонки.Добавить("СпособВводаВОборот",   Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВводаВОборотСУЗ"));
	ТаблицаИтог.Колонки.Добавить("СрокГодности",         Новый ОписаниеТипов("Дата",,,,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаИтог.Колонки.Добавить("ЭтоКодМаркировки",     Новый ОписаниеТипов("Булево"));
	ТаблицаИтог.Колонки.Добавить("Организация",          Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаИтог.Колонки.Добавить("ВидПродукции",         Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ТаблицаИтог.Колонки.Добавить("ХешСуммаКодаМаркировки", ОписаниеТипаХешСумма);
	ТаблицаИтог.Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаИтог.Колонки.Добавить("GTIN",                 Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаИтог.Колонки.Добавить("КодУпаковки",          ОписаниеТипаСтрока);
	ТаблицаИтог.Колонки.Добавить("ХешСуммаКодаУпаковки", ОписаниеТипаХешСумма);
	
	МассивТиповПризнакаМаркировкиОстатков = Новый Массив();
	МассивТиповПризнакаМаркировкиОстатков.Добавить(Тип("Булево"));
	МассивТиповПризнакаМаркировкиОстатков.Добавить(Тип("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	ТаблицаИтог.Колонки.Добавить("МаркировкаОстатков", Новый ОписаниеТипов(МассивТиповПризнакаМаркировкиОстатков));
	ТаблицаИтог.Индексы.Добавить("Количество");
	
	Возврат ТаблицаИтог;
	
КонецФункции

// Используя объект платформы СхемаЗапроса добавляет условие по документу в зависимости от типа документа
// 
// Параметры:
// 	Запрос - Запрос - Экземпляр объекта запроса, текст которого необходимо модифицировать
// 	СтруктураОтбораДокументы - Структура - Описание:
// * Ключ - Строка - Имя поля, на значение которог необходимо установить отбор
// * Значение - ДокументСсылка - Значение отбора, которое необходимо установить
// 	ИндексПакета - Число, Неопределено - Индекс запроса в пакете, в который необходимо добавить условие,
//	если Неопределено - условие добавляется в последний запрос.
Процедура ДобавитьВЗапросПечатиУсловияПоДокументу(Запрос, СтруктураОтбораДокументы, ИндексПакета = Неопределено) Экспорт
	
	Если СтруктураОтбораДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	Если ИндексПакета = Неопределено Тогда
		ПоследнийПакет = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	Иначе
		ПоследнийПакет = СхемаЗапроса.ПакетЗапросов.Получить(ИндексПакета);
	КонецЕсли;
	
	Операторы = ПоследнийПакет.Операторы.Получить(0);
	Для Каждого КлючЗначение Из СтруктураОтбораДокументы Цикл
		Операторы.Отбор.Добавить(СтрШаблон("%1 В (&%2)", КлючЗначение.Ключ, КлючЗначение.Ключ));
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция НоваяТаблицаРезультатаРезервирования() Экспорт
	
	ТаблицаИтог = Новый ТаблицаЗначений;
	ТаблицаИтог.Колонки.Добавить(
		"Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"КодМаркировки", Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.КодМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ПолныйКодМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Реквизиты.ПолныйКодМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ХешСуммаКодаМаркировки",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Измерения.ХешСуммаКодаМаркировки.Тип);
	ТаблицаИтог.Колонки.Добавить(
		"ТипШтрихкода",
		Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ.Реквизиты.ТипШтрихкода.Тип);
	ТаблицаИтог.Колонки.Добавить("GTIN", Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаИтог.Колонки.Добавить("ИННВладельца", Новый ОписаниеТипов("Строка"));
	ТаблицаИтог.Индексы.Добавить("Номенклатура, Характеристика, GTIN");
	
	Возврат ТаблицаИтог;
	
КонецФункции

// Возвращает признак наличия в конфигурации-потребителе справочника шаблонов для печати этикеток
// 
// Возвращаемое значение:
// 	Булево - Описание
Функция ВидимостьШаблонаЭтикетки() Экспорт
	
	ШаблонЭтикеткиЭтоСправочник = Ложь;
	
	ТипыШаблонаЭтикетки = Метаданные.ОпределяемыеТипы["ШаблонЭтикеткиИС"].Тип.Типы();
	ТипВсеСправочники   = Справочники.ТипВсеСсылки();
	
	Для Каждого ТипШаблонаЭтикетки Из ТипыШаблонаЭтикетки Цикл
		Если ТипВсеСправочники.СодержитТип(ТипШаблонаЭтикетки) Тогда
			ШаблонЭтикеткиЭтоСправочник = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ШаблонЭтикеткиЭтоСправочник;
	
КонецФункции

Процедура СброситьПризнакПечатиПоЗаказу(ЗаказНаЭмиссию) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка                = Новый БлокировкаДанных();
	ЭлементБлокировки         = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.Режим   = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ЗаказНаЭмиссию", ЗаказНаЭмиссию);
	
	НаборЗаписей = СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказНаЭмиссию.Установить(ЗаказНаЭмиссию);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ЭлементНабора Из НаборЗаписей Цикл
			ЭлементНабора.ДатаПечатиУниверсальная = Неопределено;
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Произошла ошибка сбрасывании признака печати по документу %1:
				       |%2'"),
			ЗаказНаЭмиссию,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки
	
КонецПроцедуры

#КонецОбласти

// Получает коды маркировки по документам основания
// 
// Параметры:
// 	Основания    - Массив из ОпределяемыйТип.ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП - Основания для заказа на эмиссию.
// 	Напечатанные - Неопределено, Булево                                                 - Отбор по признаку печати.
// Возвращаемое значение:
// 	Массив из Структура - Коды маркировки.
Функция КодыМаркировкиПоОснованию(Основания, Напечатанные = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки КАК КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ВидПродукции КАК ВидПродукции,
	|	ПулКодовМаркировкиСУЗ.Шаблон КАК Шаблон,
	|	ПулКодовМаркировкиСУЗ.GTIN КАК GTIN,
	|	ПулКодовМаркировкиСУЗ.СрокГодности КАК СрокГодности,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки.ЗначениеШтрихкода, """") КАК КодМаркировкиУпаковки,
	|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	(ПулКодовМаркировкиСУЗ.ДокументОснование В (&Основания)
	|	И НЕ ПулКодовМаркировкиСУЗ.ДокументОснование В (&НезаполненныеЗначенияОснования)
	|	ИЛИ ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию В (&Основания))
	|	И ВЫБОР
	|		КОГДА &Напечатанные = НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		КОГДА &Напечатанные = ЛОЖЬ
	|			ТОГДА ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
	|		ИНАЧЕ ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.КодМаркировки,
	|	КодыМаркировки.ПолныйКодМаркировки,
	|	КодыМаркировки.ВидПродукции,
	|	КодыМаркировки.Шаблон
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|ГДЕ
	|	КодыМаркировки.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.СрокГодности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КодыМаркировки.КодМаркировкиУпаковки
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|ГДЕ
	|	КодыМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодыМаркировки.КодМаркировкиУпаковки УБЫВ";
	
	Запрос.УстановитьПараметр("Основания",                      Основания);
	Запрос.УстановитьПараметр("НезаполненныеЗначенияОснования", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП"));
	Запрос.УстановитьПараметр("Напечатанные",                   Напечатанные);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВГраница         = РезультатЗапроса.ВГраница();
	
	ВозвращаемоеЗначение       = Новый Массив();
	ПараметрыНормализацииКМ    = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	
	Выборка = РезультатЗапроса[ВГраница - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КодМаркировки = Выборка.КодМаркировки;
		Если Выборка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
			
			ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(
				Выборка.ПолныйКодМаркировки);
			
			Если Выборка.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка Тогда
				
				КодМаркировки = ПолныйКодМаркировки;
				
			Иначе
				
				ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
					ПолныйКодМаркировки,
					Выборка.ВидПродукции);
					
				Если ДанныеРазбора <> Неопределено Тогда
					КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
						ДанныеРазбора,
						Выборка.ВидПродукции,
						ПараметрыНормализацииКМ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяСтрока = Новый Структура;
		ТекущаяСтрока.Вставить("Штрихкод",                          КодМаркировки);
		ТекущаяСтрока.Вставить("Количество",                        1);
		ТекущаяСтрока.Вставить("ШтрихкодМаркиАлкогольнойПродукции", "");
		ТекущаяСтрока.Вставить("ШтрихкодУпаковки",                  "");
		
		ВозвращаемоеЗначение.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Выборка = РезультатЗапроса[ВГраница].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		КодМаркировки = Выборка.КодМаркировкиУпаковки;
		
		ТекущаяСтрока = Новый Структура;
		ТекущаяСтрока.Вставить("Штрихкод",                          КодМаркировки);
		ТекущаяСтрока.Вставить("Количество",                        1);
		ТекущаяСтрока.Вставить("ШтрихкодМаркиАлкогольнойПродукции", "");
		ТекущаяСтрока.Вставить("ШтрихкодУпаковки",                  "");
		
		ВозвращаемоеЗначение.Добавить(ТекущаяСтрока);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Записывает в ПулКодовМаркировкиСУЗ данные штрихкода.
// 
// Параметры:
// 	ДанныеШтрихкода       - (См. ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьДанныеШтрихкода).
// 	ПараметрыСканирования - (См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования).
// 	ДанныеЗаписи          - Структура - Поля для записи данных.
Процедура ЗаписатьДанныеКодаМаркировки(ДанныеШтрихкода, ПараметрыСканирования, ДанныеЗаписи = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодBase64) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДляЗаписи = Новый Структура();
	ДанныеДляЗаписи.Вставить("КодМаркировки",           ДанныеШтрихкода.Штрихкод);
	ДанныеДляЗаписи.Вставить("ПолныйКодМаркировки",     ДанныеШтрихкода.ШтрихкодBase64);
	ДанныеДляЗаписи.Вставить("Организация",             ПараметрыСканирования.Организация);
	ДанныеДляЗаписи.Вставить("ДатаПечатиУниверсальная", ТекущаяУниверсальнаяДата());
	ДанныеДляЗаписи.Вставить("Статус",                  Перечисления.СтатусыКодовМаркировкиИСМП.Неопределен);
	
	Если ДанныеЗаписи <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ДанныеЗаписи Цикл
			ДанныеДляЗаписи.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ДанныеДляЗаписи.Вставить(
		"ХешСуммаКодаМаркировки",
		ИнтеграцияИС.ХешированиеДанныхSHA256(ДанныеДляЗаписи.КодМаркировки));
	
	МенеджерЗаписи = СоздатьМенеджерЗаписи();
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеШтрихкода);
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ДанныеДляЗаписи);
	
	Если ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак
		И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		Если ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			МенеджерЗаписи.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка;
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			МенеджерЗаписи.Шаблон = Перечисления.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачкаGS1;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(МенеджерЗаписи.Шаблон) Тогда
		Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			МенеджерЗаписи.Шаблон = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(МенеджерЗаписи.ВидПродукции);
		ИначеЕсли ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			МенеджерЗаписи.Шаблон = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(МенеджерЗаписи.ВидПродукции, 4);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МенеджерЗаписи.Шаблон) Тогда
		МенеджерЗаписи.Шаблон = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(
			МенеджерЗаписи.ВидПродукции);
	КонецЕсли;
	
	Если МенеджерЗаписи.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		МенеджерЗаписи.МаркировкаОстатков = Истина;
	КонецЕсли;
	
	Блокировка        = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.УстановитьЗначение("ХешСуммаКодаМаркировки", ДанныеДляЗаписи.ХешСуммаКодаМаркировки);
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		НаборДанныхРезультатПроверки = РегистрыСведений.РезультатыПроверкиСредствамиККТИСМП.СоздатьНаборЗаписей();
		НаборДанныхРезультатПроверки.Отбор.ШтрихкодУпаковки.Установить(ДанныеШтрихкода.ШтрихкодУпаковки);
		
		НаборДанныхРезультатПроверки.Прочитать();
		
		Если НаборДанныхРезультатПроверки.Количество() Тогда
			
			УдаляемыеСтрокиНабора = Новый Массив();
			Для Каждого СтрокаНабора Из НаборДанныхРезультатПроверки Цикл
				Если СтрокаНабора.ТребуетсяПолныйКодМаркировки Тогда
					УдаляемыеСтрокиНабора.Добавить(СтрокаНабора);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаНабора Из УдаляемыеСтрокиНабора Цикл
				НаборДанныхРезультатПроверки.Удалить(НаборДанныхРезультатПроверки.Индекс(СтрокаНабора));
			КонецЦикла;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РезультатыПроверкиСредствамиККТИСМП");
			ЭлементБлокировки.УстановитьЗначение("ШтрихкодУпаковки", ДанныеШтрихкода.ШтрихкодУпаковки);
		
		Иначе
			НаборДанныхРезультатПроверки = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если НаборДанныхРезультатПроверки <> Неопределено Тогда
			НаборДанныхРезультатПроверки.Записать();
		КонецЕсли;
		
		МенеджерЗаписи.Записать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ДанныеШтрихкода.ЕстьВПулеКодовМаркировки = Истина;
		ДанныеШтрихкода.ПолныйКодМаркировки      = ДанныеШтрихкода.ШтрихкодBase64;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Произошла ошибка сохранения кода маркировки %1 в пул:
				       |%2'"),
			ДанныеДляЗаписи.КодМаркировки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки
	
КонецПроцедуры

Функция ЗаполнитьТаблицуПредставленийКИЗ(КодыМаркировки) Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(255)));
	Результат.Колонки.Добавить("Количество",    Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("GTIN",          Метаданные.ОпределяемыеТипы.GTIN.Тип);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходныеДанные.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	&ИсходныеДанные КАК ИсходныеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ЗначениеШтрихкода КАК КодМаркировки
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ПО ИсходныеДанные.ШтрихкодУпаковки = ШтрихкодыУпаковок.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Номенклатура, """")       КАК Номенклатура,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Характеристика, """")     КАК Характеристика,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.СпособВводаВОборот, """") КАК СпособВводаВОборот,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ВидКИЗ, """")             КАК ВидКИЗ,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.РазмерКИЗ, """")          КАК РазмерКИЗ,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.GTIN, """")               КАК GTIN,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КодыМаркировки.КодМаркировки)       КАК Количество
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО КодыМаркировки.КодМаркировки = ПулКодовМаркировкиСУЗ.КодМаркировки
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Номенклатура, """"),
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Характеристика, """"),
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.СпособВводаВОборот, """"),
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ВидКИЗ, """"),
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.РазмерКИЗ, """"),
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.GTIN, """")";

	Запрос.УстановитьПараметр("ИсходныеДанные", КодыМаркировки);

	ДанныеПулаКодовМаркировки = Запрос.Выполнить().Выгрузить();

	Для Каждого СтрокаПула Из ДанныеПулаКодовМаркировки Цикл

		Представление = ПредставлениеКИЗ(СтрокаПула);

		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.Представление = Представление;
		СтрокаТаблицы.Количество    = СтрокаПула.Количество;
		СтрокаТаблицы.GTIN          = СтрокаПула.GTIN;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ПредставлениеКИЗ(СтрокаДанных) Экспорт

	Если ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
		Префикс = НСтр("ru = 'КИЗ с индивидуализацией ('")
			+ ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				СтрокаДанных.Номенклатура,
				СтрокаДанных.Характеристика)
			+ НСтр("ru = ')'");
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаДанных.СпособВводаВОборот)
		Или ЗначениеЗаполнено(СтрокаДанных.ВидКИЗ)
		Или ЗначениеЗаполнено(СтрокаДанных.РазмерКИЗ) Тогда

		Представление = ИнтеграцияИСМПКлиентСервер.ПредставлениеПустойНоменклатурыПоВидуПродукции(
			СтрокаДанных,
			Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха,
			Префикс);

	Иначе

		Представление = ИнтеграцияИСМПКлиентСервер.ПредставлениеКИЗ();

	КонецЕсли;

	Возврат Представление;

КонецФункции

Процедура ДополнитьЗапросКодамиСМРЦ(Запрос, ЭтоЗаказНаЭмиссию, ДополнительноеУсловие) Экспорт
	
	ТаблицаКодовСМРЦ = Новый ТаблицаЗначений;
	ТаблицаКодовСМРЦ.Колонки.Добавить("КодМаркировки",              ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаКодовСМРЦ.Колонки.Добавить("ХешСуммаКодаМаркировки",     ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаКодовСМРЦ.Колонки.Добавить("КодМаркировкиСМРЦ",          ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаКодовСМРЦ.Колонки.Добавить("ХешСуммаКодаМаркировкиСМРЦ", ОбщегоНазначения.ОписаниеТипаСтрока(200));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПулКодовМаркировки.ВидПродукции,
	|	ПулКодовМаркировки.ПолныйКодМаркировки,
	|	ПулКодовМаркировки.КодМаркировки,
	|	ПулКодовМаркировки.ХешСуммаКодаМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ПулКодовМаркировки.Шаблон = ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БлокТабачныхПачек)
	|	И ПулКодовМаркировки.МаксимальнаяРозничнаяЦена > 0
	|" + ДополнительноеУсловие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		Пока Выборка.Следующий() Цикл
			ДанныеРазбораКодаМаркировки = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
				ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(Выборка.ПолныйКодМаркировки),
				Выборка.ВидПродукции, Неопределено, Неопределено,
				ПользовательскиеПараметрыРазбораКодаМаркировки);
			
			Если ДанныеРазбораКодаМаркировки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				СтрокаТаблицы = ТаблицаКодовСМРЦ.Добавить();
				СтрокаТаблицы.КодМаркировки              = Выборка.КодМаркировки;
				СтрокаТаблицы.ХешСуммаКодаМаркировки     = Выборка.ХешСуммаКодаМаркировки;
				СтрокаТаблицы.КодМаркировкиСМРЦ          = ДанныеРазбораКодаМаркировки.НормализованныйШтрихкод;
				СтрокаТаблицы.ХешСуммаКодаМаркировкиСМРЦ = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаТаблицы.КодМаркировкиСМРЦ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаКодовСМРЦ",   ТаблицаКодовСМРЦ);
	
КонецПроцедуры

Процедура ОтразитьАгрегациюКодовМаркировкиВПуле(ДеревоМаркированнойПродукции) Экспорт
	
	ТаблицаКодовМаркировки = Новый ТаблицаЗначений();
	ТаблицаКодовМаркировки.Колонки.Добавить("КодМаркировки",          ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаКодовМаркировки.Колонки.Добавить("ШтрихкодУпаковки",       Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаКодовМаркировки.Колонки.Добавить("ХешСуммаКодаМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаКодовМаркировки.Колонки.Добавить("ХешСуммаУпаковки",       ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	ТаблицаДляЗаписиИстории = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьТаблицуДляЗаписиИстории();
	
	ЗаполнитьДанныеДляАгрегации(ДеревоМаркированнойПродукции, Ложь, ТаблицаКодовМаркировки, ТаблицаДляЗаписиИстории);
	
	Если ТаблицаКодовМаркировки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ЗаписатьНовыеДанныеВИсторию(ТаблицаДляЗаписиИстории);
	
	УстановитьПривилегированныйРежим(Истина);

	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
	ЭлементБлокировки.ИсточникДанных = ТаблицаКодовМаркировки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХешСуммаКодаМаркировки", "ХешСуммаКодаМаркировки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКодовМаркировки", ТаблицаКодовМаркировки);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КодыМаркировки.КодМаркировки          КАК КодМаркировки,
	|	КодыМаркировки.ШтрихкодУпаковки       КАК ШтрихкодУпаковки,
	|	КодыМаркировки.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	КодыМаркировки.ХешСуммаУпаковки       КАК ХешСуммаУпаковки
	|ПОМЕСТИТЬ
	|	ВТКодыМаркировки
	|ИЗ
	|	&ТаблицаКодовМаркировки КАК КодыМаркировки
	|;
	|
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.*,
	|	КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковкиДляЗаписи,
	|	КодыМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковкиДляЗаписи
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировки КАК КодыМаркировки
	|		ПО ПулКодовМаркировки.КодМаркировки = КодыМаркировки.КодМаркировки
	|		 И ПулКодовМаркировки.ХешСуммаКодаМаркировки = КодыМаркировки.ХешСуммаКодаМаркировки
	|		 И (ПулКодовМаркировки.ШтрихкодУпаковки <> КодыМаркировки.ШтрихкодУпаковки
	|			ИЛИ ПулКодовМаркировки.ХешСуммаУпаковки <> КодыМаркировки.ХешСуммаУпаковки)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка,, "ШтрихкодУпаковки,ХешСуммаУпаковки");
		Запись.ШтрихкодУпаковки = Выборка.ШтрихкодУпаковкиДляЗаписи;
		Запись.ХешСуммаУпаковки = Выборка.ХешСуммаУпаковкиДляЗаписи;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьДеревоМаркируемойПродукцииДляПечати(ДеревоМаркированнойПродукции) Экспорт
	
	ЗаполнитьДанныеДляАгрегации(ДеревоМаркированнойПродукции);
	УдалитьИзДереваПрочиеЗоныПересчета(ДеревоМаркированнойПродукции);
	
КонецПроцедуры

Функция КодМаркировкиДляСохраненияВПул(СтрокаУпаковки, ПолучатьДанныеРазбора = Истина) Экспорт
	
	КодМаркировки = СтрокаУпаковки.Штрихкод;
	
	Если СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или СтрокаУпаковки.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		
		Если ПолучатьДанныеРазбора Тогда
			ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(СтрокаУпаковки.Штрихкод);
			Если ДанныеРазбора.ВидыПродукции.Количество() > 0 Тогда
				ВидПродукции = ДанныеРазбора.ВидыПродукции[0];
			Иначе
				ВидПродукции = Неопределено;
			КонецЕсли;
		Иначе
			ДанныеРазбора = СтрокаУпаковки.ДанныеРазбора;
			ВидПродукции  = СтрокаУпаковки.ВидПродукции;
		КонецЕсли;
		
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
			И ДанныеРазбора <> Неопределено
			И ДанныеРазбора.СоставКодаМаркировки.Свойство("ВключаетМРЦ")
			И ДанныеРазбора.СоставКодаМаркировки.ВключаетМРЦ Тогда
			Если Лев(СтрокаУпаковки.НормализованныйШтрихкод, 1) = Лев(СтрокаУпаковки.Штрихкод, 1) Тогда
				КодМаркировки = СтрокаУпаковки.НормализованныйШтрихкод;
			Иначе
				КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					ДанныеРазбора,
					ВидПродукции,
					РазборКодаМаркировкиИССлужебныйКлиентСерверПовтИсп.НастройкиРазбораКодаМаркировкиДляСохраненияВПул());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодМаркировки;
	
КонецФункции

Функция ЭтоПроизвольнаяОдноуровневаяУпаковка(СтрокиМаркированнойПродукции) Экспорт
	
	РодительскаяСтрока = СтрокиМаркированнойПродукции.Родитель;
	
	Если РодительскаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		И РодительскаяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
		И СтрокиМаркированнойПродукции.Количество() > 0 Тогда
		Для Каждого СтрокаМаркированнойПродукции Из СтрокиМаркированнойПродукции Цикл
			Если СтрокаМаркированнойПродукции.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция КодМаркировкиСодержитВес(ПолныйКодМаркировки) Экспорт
	
	Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
		Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(ПолныйКодМаркировки);
		Если Лев(Прав(Штрихкод, 10), 4) = "3103"
			И Лев(Прав(Штрихкод, 17), 2) = "93"
			И Прав(Штрихкод, 6) <> "000000" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюНормализацияБезМРЦ(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|ГДЕ
	|	ПулКодовМаркировкиСУЗ.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	ПараметрыОтметки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ПараметрыОтметки.ЭтоНезависимыйРегистрСведений = Истина;
	ПараметрыОтметки.ПолноеИмяРегистра = "РегистрСведений.ПулКодовМаркировкиСУЗ";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ТаблицаЗаказов, ПараметрыОтметки);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюНормализацияБезМРЦ(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "РегистрСведений.ПулКодовМаркировкиСУЗ";
	МетаданныеОбъекта = Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	РезультатСозданияТаблицы = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуИзмеренийНезависимогоРегистраСведенийДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	Если Не РезультатСозданияТаблицы.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Не РезультатСозданияТаблицы.ЕстьДанныеДляОбработки;
		Возврат;
	КонецЕсли;
	Если Не РезультатСозданияТаблицы.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЗаказов.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию
	|ИЗ
	|	ВТДляОбработкиПулКодовМаркировкиСУЗ КАК ТаблицаЗаказов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировкиДляСохраненияВПул();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("ЗаказНаЭмиссию", Выборка.ЗаказНаЭмиссию);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборДанных = СоздатьНаборЗаписей();
			НаборДанных.Отбор.ЗаказНаЭмиссию.Установить(Выборка.ЗаказНаЭмиссию);
			НаборДанных.Прочитать();
			
			ЕстьИзменения = Ложь;
			
			Для Каждого СтрокаНабораДанных Из НаборДанных Цикл
				
				СтрокаДанных = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(СтрокаНабораДанных.КодМаркировки);
				НормализованныйКод = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДанных,
					СтрокаНабораДанных.ВидПродукции,
					ПараметрыНормализацииКМ);
				
				Если СтрокаНабораДанных.КодМаркировки <> НормализованныйКод Тогда
					ЕстьИзменения                             = Истина;
					СтрокаНабораДанных.КодМаркировки          = НормализованныйКод;
					СтрокаНабораДанных.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(
						СтрокаНабораДанных.КодМаркировки)
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьИзменения Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборДанных);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборДанных,, Параметры.Очередь);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать регистр сведений: %ИмяРегистра% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРегистра%", МетаданныеОбъекта.Синоним);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Процедура выполняет блокировку записей пула, выполняет печать этикеток и сохраняет дату печати
// 
// Параметры:
// 	ДанныеПечати - Структура - Входные данные печати
// 	СтруктураОбъектовПечати - Структура - Данные, переданные для печати
// 	ТабличныйДокумент - ТабличныйДокумент - Табличный документ для вывода результатов
// 	СтруктураНастроек - Структура - Дополнительные настройки печати
// 	ДанныеПоВыбраннымКодам - Массив, Неопределено -Выходной параметр выбранных кодов из пула.
// 	ВстроеннаяПечать - Булево - Производить печать во встроенный макет (без шаблона).
Процедура РаспечататьЭтикеткиИЗафиксироватьДатуПечатиДляОбъектовПечати(ДанныеПечати, СтруктураОбъектовПечати,
	ТабличныйДокумент, СтруктураНастроек, ДанныеПоВыбраннымКодам, ВстроеннаяПечать)
	
	Документ           = Неопределено;
	РежимПечати        = "";
	МаркировкаОстатков = Неопределено;
	ОбъектыПечати      = СтруктураОбъектовПечати.ОбъектыПечати;
	
	СтруктураОбъектовПечати.Свойство("РежимПечати", РежимПечати);
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП();
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("КаждаяЭтикеткаНаНовомЛисте") Тогда
		СтруктураНастроек.Вставить("КаждаяЭтикеткаНаНовомЛисте", ДанныеПечати.КаждаяЭтикеткаНаНовомЛисте);
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("СтруктураМакетаШаблона") Тогда
		СтруктураНастроек.Вставить("СтруктураМакетаШаблона", ДанныеПечати.СтруктураМакетаШаблона);
		ВстроеннаяПечать = Ложь;
	КонецЕсли;
	
	Если ОбъектыПечати.Количество() > 0 Тогда
		МаркировкаОстатков = ОбъектыПечати[0].МаркировкаОстатков;
	КонецЕсли;
	
	ИсходнаяТаблица = НоваяТаблицаДанныхДляПечатиЭтикеток();
	НомерСтроки     = 1;
	
	КэшПредставленияНоменклатуры = ИсходнаяТаблица.СкопироватьКолонки(
		"Номенклатура,Характеристика,Серия,ВидПродукции,ПредставлениеНоменклатуры");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура");
	СтруктураПоиска.Вставить("Характеристика");
	СтруктураПоиска.Вставить("Серия");
	СтруктураПоиска.Вставить("ВидПродукции");
	
	Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
		
		НоваяСтрока = ИсходнаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбъектПечати);
		НомерСтроки   = НомерСтроки + 1;
		КодМаркировки = "";
		
		Если ЗначениеЗаполнено(НоваяСтрока.КодМаркировки) Тогда
			КодМаркировки = НоваяСтрока.КодМаркировки;
		ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Штрихкод) Тогда
			КодМаркировки = НоваяСтрока.Штрихкод;
		КонецЕсли;
		
		Если НоваяСтрока.ЭтоКодМаркировки
			И ЗначениеЗаполнено(КодМаркировки)
			И Не ЗначениеЗаполнено(НоваяСтрока.ХешСуммаКодаМаркировки) Тогда
			НоваяСтрока.ХешСуммаКодаМаркировки = ОбщегоНазначенияИС.ХэшСуммаСтроки(КодМаркировки);
		КонецЕсли;
		
		Если НоваяСтрока.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
			НоваяСтрока.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.ПустаяСсылка();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, НоваяСтрока);
		
		НайденныеСтроки = КэшПредставленияНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			Если НоваяСтрока.ЭтоКодМаркировки Тогда
				ПредставлениеНоменклатуры = ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
					НоваяСтрока.ПредставлениеНоменклатуры,
					НоваяСтрока.ВидПродукции);
			Иначе
				ПредставлениеНоменклатуры = НСтр("ru = 'Упаковка'");
			КонецЕсли;
			
			ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				НоваяСтрока.Номенклатура,
				НоваяСтрока.Характеристика,,
				НоваяСтрока.Серия,
				ПредставлениеНоменклатуры);
			
			СтрокаКэша = КэшПредставленияНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКэша, СтруктураПоиска);
			СтрокаКэша.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
			
		Иначе
			
			ПредставлениеНоменклатуры = НайденныеСтроки[0].ПредставлениеНоменклатуры;
			
		КонецЕсли;
		
		НоваяСтрока.ПредставлениеНоменклатуры = ПредставлениеНоменклатуры;
		
	КонецЦикла;
	
	ДанныеПечати.Свойство("Документ", Документ);
	
	Если Не ЗначениеЗаполнено(Документ)
		И РежимПечати <> "Выборочно" И РежимПечати <> "ВыборочноВТаблицу" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток: Не указан документ для печати'");
	КонецЕсли;

	БлокировкаЗаписей           = Новый БлокировкаДанных;
	БлокировкаПоКодамМаркировки = Истина;
	РежимНеРаспечатанныеКоды    = (РежимПечати = "НеРаспечатанныеКодыПоДокументу"
		Или РежимПечати = "НеРаспечатанныеКодыПоДокументуСРезервированием");
	РежимВыборочноВТаблицу      = РежимПечати = "ВыборочноВТаблицу";
	РежимВыборочно              = РежимПечати = "Выборочно" Или РежимВыборочноВТаблицу;
	ВыбиратьСвязанныеОснования  = Ложь;
	РезервироватьСвободныеКоды  = Ложь;
	
	Если РежимВыборочноВТаблицу Тогда
		СтруктураНастроек.ПечатьЭтикетокВТаблицу = Истина;
		СтруктураНастроек.НастройкиПечатиЭтикетокВТаблицу = СтруктураОбъектовПечати.НастройкиПечатиЭтикетокВТаблицу;
	КонецЕсли;
	
	Если РежимПечати = "НеРаспечатанныеКодыПоДокументуСРезервированием" Тогда
		ВыбиратьСвязанныеОснования = Истина;
		РезервироватьСвободныеКоды = Истина;
	КонецЕсли;
	
	ОтборПоДокументам = СтруктураОтбораДокументаПоТипуДокумента(Документ, ВыбиратьСвязанныеОснования);
	
	Для Каждого ПолеОтбора Из ОтборПоДокументам Цикл
		
		ЭлементБлокировки = БлокировкаЗаписей.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		Если ТипЗнч(ПолеОтбора.Значение) = Тип("Массив") Тогда
			
			ТаблицаБлокировки = Новый ТаблицаЗначений;
			ТаблицаБлокировки.Колонки.Добавить(ПолеОтбора.Ключ);
			
			Для Каждого ЗначениеБлокировки Из ПолеОтбора.Значение Цикл
				НоваяСтрока                  = ТаблицаБлокировки.Добавить();
				НоваяСтрока[ПолеОтбора.Ключ] = ЗначениеБлокировки;
			КонецЦикла;
			
			ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПолеОтбора.Ключ, ПолеОтбора.Ключ);
			
		Иначе
			ЭлементБлокировки.УстановитьЗначение(ПолеОтбора.Ключ, ПолеОтбора.Значение);
		КонецЕсли;
		
		БлокировкаПоКодамМаркировки = Ложь;
		
	КонецЦикла;
	
	Если БлокировкаПоКодамМаркировки Тогда
		ЭлементБлокировки                = БлокировкаЗаписей.Добавить("РегистрСведений.ПулКодовМаркировкиСУЗ");
		ЭлементБлокировки.ИсточникДанных = ИсходнаяТаблица;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("КодМаркировки",          "КодМаркировки");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ХешСуммаКодаМаркировки", "ХешСуммаКодаМаркировки");
	КонецЕсли;
	
	НачатьТранзакцию();
	
	ОбщаяТаблицаПечати       = Неопределено;
	ТаблицаДляРезервирования = Неопределено;
	ИсходнаяТаблицаВыборочно = ИсходнаяТаблица;
	
	Попытка
		
		БлокировкаЗаписей.Заблокировать();
		
		Если РежимНеРаспечатанныеКоды Тогда
			
			Результат = ТаблицаДляПечатиНеРаспечатанныеКодыПоДокументу(ИсходнаяТаблица, ОтборПоДокументам, РезервироватьСвободныеКоды, МаркировкаОстатков);
			ДобавитьВОбщуюТаблицуПечати(ОбщаяТаблицаПечати, Результат.ТаблицаДляПечати);
			ТаблицаДляРезервирования = Результат.ТаблицаДляРезервирования;
			
		КонецЕсли;
		
		Если РезервироватьСвободныеКоды И ТаблицаДляРезервирования.Количество() > 0 Тогда
			
			ПараметрыРезервирования = Новый Структура();
			ПараметрыРезервирования.Вставить("Документ",            Документ);
			ПараметрыРезервирования.Вставить("ТаблицаНоменклатуры", ТаблицаДляРезервирования);
			ПараметрыРезервирования.Вставить("МаркировкаОстатков",  МаркировкаОстатков);
			
			АдресРезультатаРезервирования = ПоместитьВоВременноеХранилище(Неопределено);
			
			ЗарезервироватьКодыПодЗаказ(ПараметрыРезервирования, АдресРезультатаРезервирования);
			
			ИсходнаяТаблицаВыборочно = НоваяТаблицаДанныхДляПечатиЭтикеток();
			
			ДополнитьТаблицуПечатиЗарезервированнымКодам(
				ИсходнаяТаблицаВыборочно, ТаблицаДляРезервирования, АдресРезультатаРезервирования, Документ);
			
			РежимВыборочно = Истина;
			
		КонецЕсли;
		
		Если РежимВыборочно Тогда
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеПечати, "РазрешитьПовторнуюПечать") Тогда
				РазрешитьПовторнуюПечать = Истина;
			КонецЕсли;
			
			ТаблицаДляПечати = ТаблицаДляПечатиПоИзвестнымКодамМаркировки(
				ИсходнаяТаблицаВыборочно, ОтборПоДокументам, РазрешитьПовторнуюПечать);
			
			ДобавитьВОбщуюТаблицуПечати(ОбщаяТаблицаПечати, ТаблицаДляПечати);
			
		КонецЕсли;
		
		Если ОбщаяТаблицаПечати.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток: Ошибка режима печати (нет данных для печати)'");
		КонецЕсли;
		
		ДополнитьПолныйКодМаркировки = Неопределено;
		ДанныеПечати.Свойство("ДополнитьПолныйКодМаркировки", ДополнитьПолныйКодМаркировки);
		Если ДополнитьПолныйКодМаркировки = Неопределено Тогда
			СтруктураОбъектовПечати.Свойство("ДополнитьПолныйКодМаркировки", ДополнитьПолныйКодМаркировки);
		КонецЕсли;
		
		Если ДополнитьПолныйКодМаркировки = "3103" Тогда
			ОбщаяТаблицаПечати.Колонки.Добавить("ПолныйКодМаркировкиИзменен", Новый ОписаниеТипов("Булево"));
			РазделительGS = РазборКодаМаркировкиИССлужебныйКлиентСервер.РазделительGS();
			// Дополнение кода тегом (3103)001300 = 1 кг. 300 грамм
			// Для Молочной продукци тег 3103 после тега 93
			// Для Морепродуктов тег 3103 после тега 93 или 92
			Для Каждого СтрокаТЧ Из ОбщаяТаблицаПечати Цикл
				Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.ПолныйКодМаркировки);
				Если Лев(Прав(Штрихкод, 6), 2) = "93"
					Или Лев(Прав(Штрихкод, 46), 2) = "92" Тогда
					Штрихкод = Штрихкод + РазделительGS + РазборКодаМаркировкиИССлужебныйКлиентСервер.ВесКодаМаркировкиСтрокой(СтрокаТЧ.УчетноеКоличество);
					СтрокаТЧ.ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(Штрихкод);
					СтрокаТЧ.Штрихкод = СтрокаТЧ.ПолныйКодМаркировки;
					СтрокаТЧ.ПолныйКодМаркировкиИзменен = Истина;
				ИначеЕсли Лев(Прав(Штрихкод, 10), 4) = "3103"
					И (Лев(Прав(Штрихкод, 17), 2) = "93"
					   Или Лев(Прав(Штрихкод, 57), 2) = "92") Тогда
					Штрихкод = Лев(Штрихкод, СтрДлина(Штрихкод) - 10) + РазборКодаМаркировкиИССлужебныйКлиентСервер.ВесКодаМаркировкиСтрокой(СтрокаТЧ.УчетноеКоличество);
					СтрокаТЧ.ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(Штрихкод);
					СтрокаТЧ.Штрихкод = СтрокаТЧ.ПолныйКодМаркировки;
					СтрокаТЧ.ПолныйКодМаркировкиИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ДополнитьПолныйКодМаркировки = "3353" Тогда
			ОбщаяТаблицаПечати.Колонки.Добавить("ПолныйКодМаркировкиИзменен", Новый ОписаниеТипов("Булево"));
			РазделительGS = РазборКодаМаркировкиИССлужебныйКлиентСервер.РазделительGS();
			// Дополнение кода тегом (3353)001300 = 1 л. 300 мл
			Для Каждого СтрокаТЧ Из ОбщаяТаблицаПечати Цикл
				Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.ПолныйКодМаркировки);
				Если Лев(Прав(Штрихкод, 6), 2) = "93" Тогда
					Штрихкод = Штрихкод + РазделительGS + РазборКодаМаркировкиИССлужебныйКлиентСервер.ОбъемКодаМаркировкиСтрокой(СтрокаТЧ.УчетноеКоличество);
					СтрокаТЧ.ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(Штрихкод);
					СтрокаТЧ.Штрихкод = СтрокаТЧ.ПолныйКодМаркировки;
					СтрокаТЧ.ПолныйКодМаркировкиИзменен = Истина;
				ИначеЕсли Лев(Прав(Штрихкод, 10), 4) = "3353"
					И Лев(Прав(Штрихкод, 17), 2) = "93" Тогда
					Штрихкод = Лев(Штрихкод, СтрДлина(Штрихкод) - 10) + РазборКодаМаркировкиИССлужебныйКлиентСервер.ОбъемКодаМаркировкиСтрокой(СтрокаТЧ.УчетноеКоличество);
					СтрокаТЧ.ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(Штрихкод);
					СтрокаТЧ.Штрихкод = СтрокаТЧ.ПолныйКодМаркировки;
					СтрокаТЧ.ПолныйКодМаркировкиИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли Лев(ДополнитьПолныйКодМаркировки, 2) = "97" Тогда
			ОбщаяТаблицаПечати.Колонки.Добавить("ПолныйКодМаркировкиИзменен", Новый ОписаниеТипов("Булево"));
			РазделительGS = РазборКодаМаркировкиИССлужебныйКлиентСервер.РазделительGS();
			// Дополнение кода тегом с заводским серийный номером
			Для Каждого СтрокаТЧ Из ОбщаяТаблицаПечати Цикл
				Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.ПолныйКодМаркировки);
				ТекущийЗаводскойСерийныйНомер = РазборКодаМаркировкиИССлужебныйКлиентСервер.ЗаводскойСерийныйНомерИзШтрихкода(Штрихкод);
				Если ТекущийЗаводскойСерийныйНомер = "" Тогда
					Штрихкод = Штрихкод + РазделительGS + ДополнитьПолныйКодМаркировки;
					СтрокаТЧ.ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(Штрихкод);
					СтрокаТЧ.Штрихкод = СтрокаТЧ.ПолныйКодМаркировки;
					СтрокаТЧ.ПолныйКодМаркировкиИзменен = Истина;
				Иначе
					Штрихкод = Лев(Штрихкод, СтрДлина(Штрихкод) - СтрДлина(ТекущийЗаводскойСерийныйНомер) - 2) + ДополнитьПолныйКодМаркировки;
					СтрокаТЧ.ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ШтрихкодВBase64(Штрихкод);
					СтрокаТЧ.Штрихкод = СтрокаТЧ.ПолныйКодМаркировки;
					СтрокаТЧ.ПолныйКодМаркировкиИзменен = Истина;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ДополнитьКолонкуПредставлениеНоменклатуры(ОбщаяТаблицаПечати);
		ВывестиВТабличныйДокументЭтикетки(ТабличныйДокумент, ОбщаяТаблицаПечати, СтруктураНастроек, ВстроеннаяПечать);
		УстановитьСостояниеРаспечатанПоТаблицеДляПечати(ОбщаяТаблицаПечати);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		ВызватьИсключение;
	КонецПопытки;
	
	ДанныеПоВыбраннымКодам = Новый Массив();
	Если ОбщаяТаблицаПечати <> Неопределено Тогда
		Для Каждого СтрокаТаблицы Из ОбщаяТаблицаПечати Цикл
			ДанныеКода = Новый Структура();
			ДанныеКода.Вставить("КодМаркировки",       СтрокаТаблицы.КодМаркировки);
			ДанныеКода.Вставить("ПолныйКодМаркировки", СтрокаТаблицы.ПолныйКодМаркировки);
			ДанныеПоВыбраннымКодам.Добавить(ДанныеКода);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьКолонкуПредставлениеНоменклатуры(ОбщаяТаблицаПечати)
	
	Для Каждого СтрокаТаблицы Из ОбщаяТаблицаПечати Цикл
		Если СтрокаТаблицы.ПредставлениеНоменклатуры = "" Тогда
			СтрокаТаблицы.ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
					СтрокаТаблицы.Номенклатура,
					СтрокаТаблицы.Характеристика);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВОбщуюТаблицуПечати(ОбщаяТаблицаПечати, Источник)
	
	Если ОбщаяТаблицаПечати = Неопределено Тогда
		ОбщаяТаблицаПечати = Источник;
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Источник, ОбщаяТаблицаПечати);
	КонецЕсли;
	
КонецПроцедуры

// Выводит на печать этикетки
// 
// Параметры:
// 	ТабличныйДокумент - ТабличныйДокумент - Результат печати.
// 	ТаблицаОбъектыПечати - ТаблицаЗначений - Исходные данные для печати.
// 	СтруктураНастроек - См. ПечатьЭтикетокИСМП.СтруктураНастроекЭтикеткаИСМП.
// 	ВстроеннаяПечать  - Булево    - Не использовать переопределение для печати.
Процедура ВывестиВТабличныйДокументЭтикетки(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек, ВстроеннаяПечать)
	
	СтандартнаяОбработка = Истина;
	
	Если Не ВстроеннаяПечать Тогда
		ПечатьЭтикетокИСМППереопределяемый.ПечатьЭтикетокИСМП(
			ТаблицаОбъектыПечати, ТабличныйДокумент, СтруктураНастроек, СтандартнаяОбработка);
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		
		Если СтруктураНастроек.ПечатьЭтикетокВТаблицу Тогда
			ПечатьЭтикетокИСМПВТаблицу(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек);
		Иначе
			ПечатьЭтикетокИСМП(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Библиотечная процедура печати.
// Процедура вывода кодов маркировки ИС МП в линейную таблицу для печати.
// 
// Параметры:
// 	ТабличныйДокумент    - ТабличныйДокумент - Результат печати.
// 	ТаблицаОбъектыПечати - ТаблицаЗначений   - Таблица с исходными данными для печати (см. РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток)
// 	СтруктураНастроек    - Структура         - Дополнительные настройки печати.
Процедура ПечатьЭтикетокИСМПВТаблицу(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек)
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ПоляШаблонаИСМПТаблица");
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	Компоновщик.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ДобавитьЭлементыНастройкиПечатиЭтикеток(Компоновщик.Настройки.Выбор.Элементы,
		СтруктураНастроек.НастройкиПечатиЭтикетокВТаблицу.Выбор.Элементы);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки);
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("НаборДанных", ТаблицаОбъектыПечати);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

// Библиотечная процедура печати
// 
// Параметры:
// 	ТабличныйДокумент    - ТабличныйДокумент - Результат печати.
// 	ТаблицаОбъектыПечати - ТаблицаЗначений   - Исходные данные для печати.
// 	СтруктураНастроек    - Структура         - Дополнительные настройки печати.
Процедура ПечатьЭтикетокИСМП(ТабличныйДокумент, ТаблицаОбъектыПечати, СтруктураНастроек)
	
	Макет         = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПФ_MXL_ЭтикеткаОбувь");
	МакетУпаковки = УправлениеПечатью.МакетПечатнойФормы(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ПФ_MXL_ЭтикеткаОбувьУпаковка");
	
	Эталон = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ЭталонИС");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
	
	ПредыдущейНомерВГруппе = Неопределено;
	ПредыдущаяСтрокаПечати = Новый Структура("Номенклатура, Характеристика, GTIN");
	
	Для Каждого СтрокаДанных Из ТаблицаОбъектыПечати Цикл
		
		ИспользоватьХарактеристики = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДанных, "Характеристика");
		
		ТекущийНомерВГруппе = СтрокаДанных.НомерВГруппе;
		Для НомерЭкземпляра = 1 По СтрокаДанных.Количество Цикл
			
			Если СтрокаДанных.ЭтоКодМаркировки Тогда
				
				Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
				Если СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
					ТипКода = 18;
				ИначеЕсли СтрокаДанных.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
					ТипКода = 24;
				Иначе
					ТипКода = 99;
				КонецЕсли;
				
				Область.Параметры.GTIN         = СтрокаДанных.GTIN;
				Область.Параметры.Наименование = СтрокаДанных.ПредставлениеНоменклатуры;
				Область.Параметры.Артикул      = СтрокаДанных.Номенклатура.Артикул;
				Область.Параметры.НомерВГруппе = СтрокаДанных.НомерВГруппе;
				
			Иначе
				
				Область                                = МакетУпаковки.ПолучитьОбласть(МакетУпаковки.ОбластьПечати.Имя);
				ТипКода                                = 2;
				Область.Параметры.НомерВГруппе         = СтрокаДанных.НомерВГруппе;
				Область.Параметры.СодержимоеКоличество = СтрокаДанных.СодержимоеКоличество;
				
			КонецЕсли;
			
			Если СтрокаДанных.ШтрихкодВBase64 Тогда
				ТипВходныхДанных = 1;
				Штрихкод         = СтрокаДанных.Штрихкод;
			Иначе
				ТипВходныхДанных = 0;
				Штрихкод         = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(СтрокаДанных.Штрихкод, ТипКода, ТипВходныхДанных);
			КонецЕсли;
			
			Для Каждого Рисунок Из Область.Рисунки Цикл
				
				Область.Параметры.ПредставлениеШтрихкода = СтрокаДанных.КодМаркировки;
				
				ПараметрыШтрихкода = Новый Структура;
				ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
				ПараметрыШтрихкода.Вставить("Штрихкод",         Штрихкод);
				ПараметрыШтрихкода.Вставить("ТипВходныхДанных", ТипВходныхДанных);
				ПараметрыШтрихкода.Вставить("ТипКода",          ТипКода);
				ПараметрыШтрихкода.Вставить("ОтображатьТекст",  Истина);
				
				ПараметрыГенерацииШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
				ЗаполнитьЗначенияСвойств(ПараметрыГенерацииШтрихкода, ПараметрыШтрихкода);
				
				РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыГенерацииШтрихкода);
				Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
					Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
				Иначе
					ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка'"));
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если СтруктураНастроек.КаждаяЭтикеткаНаНовомЛисте Тогда
			
			ТабличныйДокумент.Вывести(Область);
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
		Иначе
			
			ВывестиГоризонтальныйРазделитель = Ложь;
			Если ПредыдущейНомерВГруппе = Неопределено Тогда
				ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
			КонецЕсли;
			
			Присоединять = Истина;
			Если ТекущийНомерВГруппе = "" Тогда
				// Разбивка по номенклатуре и характеристике при печати свободных кодов
				Если ЗначениеЗаполнено(ПредыдущаяСтрокаПечати.Номенклатура)
					И (ИспользоватьХарактеристики И ПредыдущаяСтрокаПечати.Характеристика <> СтрокаДанных.Характеристика)
					Или ПредыдущаяСтрокаПечати.Номенклатура <> СтрокаДанных.Номенклатура
					Или (Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура)
						И ПредыдущаяСтрокаПечати.GTIN <> СтрокаДанных.GTIN) Тогда
					ВывестиГоризонтальныйРазделитель = Истина;
				КонецЕсли;
			ИначеЕсли ПредыдущейНомерВГруппе <> ТекущийНомерВГруппе Тогда
				ВывестиГоризонтальныйРазделитель = Истина;
				ПредыдущейНомерВГруппе = ТекущийНомерВГруппе;
			КонецЕсли;
			
			Если ВывестиГоризонтальныйРазделитель Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				Присоединять = Ложь;
			КонецЕсли;
			
			МассивОбластейПрисоединения = Новый Массив();
			МассивОбластейПрисоединения.Добавить(Область);
			
			Если Не ТабличныйДокумент.АвтоМасштаб
				И Присоединять
				И ТабличныйДокумент.ПроверитьПрисоединение(МассивОбластейПрисоединения) Тогда
				
				ТабличныйДокумент.Присоединить(Область);
				
			Иначе
				
				Если Не ТабличныйДокумент.ПроверитьВывод(Область) И Присоединять Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(Область);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ПредыдущаяСтрокаПечати, СтрокаДанных,, "GTIN");
		Если Не ЗначениеЗаполнено(СтрокаДанных.Номенклатура) Тогда
			ПредыдущаяСтрокаПечати.GTIN = СтрокаДанных.GTIN;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Возвращает таблицу кодов, выводимых на печать.
// 
// Параметры:
// 	ТаблицаНоменклатуры - ТаблицаЗначений     - Исходные данныех для печати
// 	СтруктураОтбораДокументы - Структура      - Описание:
// * ДокументОснование - ДокументСсылка       - Документ-основание для резервирования свободных кодов.
// 	РезервироватьСвободныеКоды - Булево       - Признак необходимости резервировать коды, если не достаточно для печати.
// 	МаркировкаОстатков - Булево, Неопределено - Признак печати кода для маркировки остатков.
// Возвращаемое значение:
// 	Структура - Описание:
// * ТаблицаПечати            - ТаблицаЗначений - Данные для печати этикеток.
// * ТаблицаДляРезервирования - ТаблицаЗначений - Данные для резервирования свободных кодов.
//
Функция ТаблицаДляПечатиНеРаспечатанныеКодыПоДокументу(ТаблицаНоменклатуры, СтруктураОтбораДокументы, РезервироватьСвободныеКоды, МаркировкаОстатков)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.Организация          КАК Организация,
		|	ИсходнаяТаблица.Номенклатура         КАК Номенклатура,
		|	ИсходнаяТаблица.Характеристика       КАК Характеристика,
		|	ИсходнаяТаблица.Шаблон               КАК Шаблон,
		|	ИсходнаяТаблица.СпособВводаВОборот   КАК СпособВводаВОборот,
		|	ИсходнаяТаблица.СрокГодности         КАК СрокГодности,
		|	ИсходнаяТаблица.ШаблонЭтикетки       КАК ШаблонЭтикетки,
		|	ИсходнаяТаблица.НомерВГруппе         КАК НомерВГруппе,
		|	ИсходнаяТаблица.СодержимоеКоличество КАК СодержимоеКоличество,
		|	ИсходнаяТаблица.КоличествоПечать     КАК КоличествоПечать,
		|	ИсходнаяТаблица.УчетноеКоличество    КАК УчетноеКоличество,
		|	ИсходнаяТаблица.Количество           КАК Количество,
		|	ИсходнаяТаблица.GTIN                 КАК GTIN,
		|	ИсходнаяТаблица.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
		|ПОМЕСТИТЬ ТаблицаНоменклатуры
		|ИЗ
		|	&ТаблицаНоменклатуры КАК ИсходнаяТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Номенклатура,
		|	Характеристика,
		|	Шаблон,
		|	СпособВводаВОборот,
		|	GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.КодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки,
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию,
		|	ПулКодовМаркировкиСУЗ.ДокументОснование,
		|	ПулКодовМаркировкиСУЗ.Статус,
		|	ПулКодовМаркировкиСУЗ.Организация КАК Организация,
		|	ПулКодовМаркировкиСУЗ.СтанцияУправленияЗаказами,
		|	ПулКодовМаркировкиСУЗ.Номенклатура,
		|	ПулКодовМаркировкиСУЗ.Характеристика,
		|	ПулКодовМаркировкиСУЗ.GTIN КАК GTIN,
		|	ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная,
		|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная,
		|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки,
		|	ПулКодовМаркировкиСУЗ.Шаблон,
		|	ПулКодовМаркировкиСУЗ.ТипШтрихкода,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот КАК СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.СрокГодности,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки,
		|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеНоменклатуры
		|ПОМЕСТИТЬ ДанныеРегистра
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
		|		ПО КэшОписанияОстатков.GTIN = ПулКодовМаркировкиСУЗ.GTIN
		|		И ПулКодовМаркировкиСУЗ.Номенклатура = &ПустаяНоменклатура
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА &МаркировкаОстатков = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.МаркировкаОстатков = &МаркировкаОстатков
		|	КОНЕЦ
		|	И НЕ ПулКодовМаркировкиСУЗ.Статус В (&НедоступныеСтатусы)
		|	И ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
		|	И ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки        = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Номенклатура,
		|	Характеристика,
		|	Шаблон,
		|	СпособВводаВОборот,
		|	GTIN
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеРегистра.КодМаркировки,
		|	ДанныеРегистра.ПолныйКодМаркировки Как Штрихкод,
		|	ДанныеРегистра.ПолныйКодМаркировки,
		|	ДанныеРегистра.ХешСуммаКодаМаркировки,
		|	ДанныеРегистра.ЗаказНаЭмиссию,
		|	ДанныеРегистра.ДокументОснование,
		|	ДанныеРегистра.Статус,
		|	ДанныеРегистра.Организация,
		|	ДанныеРегистра.СтанцияУправленияЗаказами,
		|	ДанныеРегистра.Номенклатура,
		|	ДанныеРегистра.Характеристика,
		|	ДанныеРегистра.GTIN КАК GTIN,
		|	ДанныеРегистра.ДатаЭмиссииУниверсальная,
		|	ДанныеРегистра.ДатаПечатиУниверсальная,
		|	ДанныеРегистра.ШтрихкодУпаковки,
		|	ДанныеРегистра.ХешСуммаУпаковки,
		|	ДанныеРегистра.Шаблон,
		|	ДанныеРегистра.СпособВводаВОборот,
		|	ДанныеРегистра.СрокГодности,
		|	ДанныеРегистра.ТипШтрихкода КАК ТипШтрихкода,
		|	ЛОЖЬ                        КАК ОтметкаПечати,
		|	ИСТИНА                      КАК ЭтоКодМаркировки,
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.ПредставлениеНоменклатуры <> """"
		|			ТОГДА ДанныеРегистра.ПредставлениеНоменклатуры
		|		ИНАЧЕ ТаблицаНоменклатуры.ПредставлениеНоменклатуры
		|	КОНЕЦ КАК ПредставлениеНоменклатуры,
		|	ТаблицаНоменклатуры.ШаблонЭтикетки,
		|	ТаблицаНоменклатуры.НомерВГруппе,
		|	ТаблицаНоменклатуры.СодержимоеКоличество,
		|	ТаблицаНоменклатуры.КоличествоПечать  КАК Количество,
		|	ТаблицаНоменклатуры.УчетноеКоличество КАК УчетноеКоличество,
		|	&ТребуетВзвешивания КАК ТребуетВзвешивания
		|ИЗ
		|	ДанныеРегистра КАК ДанныеРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|			ПО &ТоварыОписаниеНоменклатурыИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ПО ДанныеРегистра.Организация       = ТаблицаНоменклатуры.Организация
		|		И ДанныеРегистра.Шаблон             = ТаблицаНоменклатуры.Шаблон
		|		И ТаблицаНоменклатуры.СпособВводаВОборот В (ДанныеРегистра.СпособВводаВОборот, ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка))
		|		И ТаблицаНоменклатуры.СрокГодности В (ДанныеРегистра.СрокГодности, ДАТАВРЕМЯ(1, 1, 1))
		|		И ВЫБОР
		|			КОГДА ТаблицаНоменклатуры.Номенклатура = &ПустаяНоменклатура
		|				ТОГДА ДанныеРегистра.GTIN = ТаблицаНоменклатуры.GTIN
		|			ИНАЧЕ
		|				ДанныеРегистра.Номенклатура     = ТаблицаНоменклатуры.Номенклатура
		|				И ДанныеРегистра.Характеристика = ТаблицаНоменклатуры.Характеристика
		|		КОНЕЦ
		|";
	ОбщегоНазначенияИС.ОбновитьТекстЗапросаСРегистромОписаниеНоменклатурыИС(Запрос.Текст, "ОписаниеНоменклатурыИС", "ДанныеРегистра.Номенклатура");
	
	ДобавитьВЗапросПечатиУсловияПоДокументу(Запрос, СтруктураОтбораДокументы, 1);
	
	Запрос.УстановитьПараметр("НедоступныеСтатусы",  СтатусыВыведенИзОборота());
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("МаркировкаОстатков",  МаркировкаОстатков);
	Запрос.УстановитьПараметр("ПустаяНоменклатура",  ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	ТаблицаЗаписей.Колонки.Добавить("ШтрихкодВBase64", Новый ОписаниеТипов("Булево"));
	
	ТаблицаЗаписей.Индексы.Добавить("КодМаркировки");
	ТаблицаЗаписей.Индексы.Добавить("ОтметкаПечати");
	ТаблицаЗаписей.Индексы.Добавить("Организация, Номенклатура, Характеристика, Шаблон, ОтметкаПечати");
	ТаблицаЗаписей.Индексы.Добавить("Организация, Номенклатура, Характеристика, Шаблон, ОтметкаПечати, СпособВводаВОборот");
	
	Отказ                    = Ложь;
	ТаблицаДляРезервирования = ТаблицаНоменклатуры.Скопировать(Новый Структура("Количество", 0));
	ТаблицаДляРезервирования.Очистить();
	
	Для Каждого СтрокаТЧ Из ТаблицаНоменклатуры Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация",    СтрокаТЧ.Организация);
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТЧ.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТЧ.Характеристика);
		Иначе
			СтруктураПоиска.Вставить("GTIN", СтрокаТЧ.GTIN);
		КонецЕсли;
		СтруктураПоиска.Вставить("Шаблон",        СтрокаТЧ.Шаблон);
		СтруктураПоиска.Вставить("ОтметкаПечати", Ложь);
		
		Если ЗначениеЗаполнено(СтрокаТЧ.СпособВводаВОборот) Тогда
			СтруктураПоиска.Вставить("СпособВводаВОборот", СтрокаТЧ.СпособВводаВОборот);
		КонецЕсли;
		
		ПоискСтрокКодов = ТаблицаЗаписей.НайтиСтроки(СтруктураПоиска);
		ТекущееКоличество = 0;
		
		Для Каждого СтрокаКода Из ПоискСтрокКодов Цикл
			СтрокаКода.ОтметкаПечати   = Истина;
			СтрокаКода.Количество      = 1;
			СтрокаКода.Штрихкод        = СтрокаКода.ПолныйКодМаркировки;
			СтрокаКода.ШтрихкодВBase64 = Истина;
			ТекущееКоличество          = ТекущееКоличество + 1;
			Если ТекущееКоличество = СтрокаТЧ.Количество Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НеНайденоКодов = СтрокаТЧ.Количество - ТекущееКоличество;
		Если НеНайденоКодов <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если РезервироватьСвободныеКоды Тогда
			
			НоваяСтрока = ТаблицаДляРезервирования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			НоваяСтрока.Количество = НеНайденоКодов;
			
		Иначе
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка печати кода для %1, требуется кодов: %2, доступно %3'"),
				ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика),
				СтрокаТЧ.Количество,
				ТекущееКоличество);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка печати кодов маркировки'");
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТаблицаДляРезервирования", ТаблицаДляРезервирования);
	ВозвращаемоеЗначение.Вставить("ТаблицаДляПечати",         ТаблицаЗаписей.Скопировать(
		Новый Структура("ОтметкаПечати", Истина)));
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает таблицу кодов маркировки для печати.
// 
// Параметры:
// 	ТаблицаНоменклатуры - ТаблицаЗначений - Исходные данные для печати.
// 	СтруктураОтбораДокументы - Структура - Описание:
// * ДокументОснование - ДокументСсылка - Документ-основание для выбокри кодов.
// РазрешитьПовторнуюПечать - Булево - Разрашает печать ранее напечатанных кодов.
// Возвращаемое значение:
// 	ТаблицаЗначений - Данные для печати.
Функция ТаблицаДляПечатиПоИзвестнымКодамМаркировки(ТаблицаНоменклатуры, СтруктураОтбораДокументы, РазрешитьПовторнуюПечать = Неопределено)
	
	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсходнаяТаблица.КодМаркировки          КАК КодМаркировки,
	|	ИсходнаяТаблица.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	ИсходнаяТаблица.КодУпаковки            КАК КодУпаковки,
	|	ИсходнаяТаблица.ХешСуммаКодаУпаковки   КАК ХешСуммаКодаУпаковки,
	|	ИсходнаяТаблица.Номенклатура           КАК Номенклатура,
	|	ИсходнаяТаблица.Характеристика         КАК Характеристика,
	|	ИсходнаяТаблица.ШаблонЭтикетки         КАК ШаблонЭтикетки,
	|	ИсходнаяТаблица.НомерВГруппе           КАК НомерВГруппе,
	|	ИсходнаяТаблица.СодержимоеКоличество   КАК СодержимоеКоличество,
	|	ИсходнаяТаблица.СрокГодности           КАК СрокГодности,
	|	ИсходнаяТаблица.Шаблон                 КАК Шаблон,
	|	ИсходнаяТаблица.КоличествоПечать       КАК КоличествоПечать,
	|	ИсходнаяТаблица.ЭтоКодМаркировки       КАК ЭтоКодМаркировки,
	|	ИсходнаяТаблица.ШтрихкодУпаковки       КАК ШтрихкодУпаковки,
	|	ИсходнаяТаблица.ТипШтрихкода           КАК ТипШтрихкода,
	|	ИсходнаяТаблица.Количество             КАК Количество,
	|	ИсходнаяТаблица.УчетноеКоличество      КАК УчетноеКоличество,
	|	ИсходнаяТаблица.Порядок                КАК Порядок,
	|	ИсходнаяТаблица.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ИсходнаяТаблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсходнаяТаблица.КодМаркировки,
	|	ИсходнаяТаблица.ХешСуммаКодаМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировкиСУЗ.КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки,
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗ.ДокументОснование,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировкиСУЗ.Статус В (&НедоступныеСтатусы)
	|			ТОГДА ЛОЖЬ
	|		КОГДА &РазрешенаПовторнаяПечать
	|			ТОГДА ИСТИНА
	|		КОГДА ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Доступно,
	|	ПулКодовМаркировкиСУЗ.Статус,
	|	ПулКодовМаркировкиСУЗ.Организация КАК Организация,
	|	ПулКодовМаркировкиСУЗ.СтанцияУправленияЗаказами,
	|	ПулКодовМаркировкиСУЗ.Номенклатура,
	|	ПулКодовМаркировкиСУЗ.Характеристика,
	|	ПулКодовМаркировкиСУЗ.GTIN,
	|	ПулКодовМаркировкиСУЗ.СрокГодности,
	|	ПулКодовМаркировкиСУЗ.Шаблон,
	|	ПулКодовМаркировкиСУЗ.ДатаЭмиссииУниверсальная,
	|	ПулКодовМаркировкиСУЗ.ДатаПечатиУниверсальная,
	|	ПулКодовМаркировкиСУЗ.ШтрихкодУпаковки,
	|	ПулКодовМаркировкиСУЗ.ТипШтрихкода,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ТаблицаНоменклатуры.КодМаркировки         = ПулКодовМаркировкиСУЗ.КодМаркировки
	|		И ТаблицаНоменклатуры.ХешСуммаКодаМаркировки = ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПулКодовМаркировкиСУЗ.КодМаркировки,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЭтоКодМаркировки
	|			ТОГДА ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки, """")
	|		ИНАЧЕ ТаблицаНоменклатуры.КодМаркировки
	|	КОНЕЦ                                                     КАК Штрихкод,
	|	ТаблицаНоменклатуры.КодМаркировки                         КАК КодМаркировки,
	|	ТаблицаНоменклатуры.ХешСуммаКодаМаркировки                КАК ХешСуммаКодаМаркировки,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки, """") КАК ПолныйКодМаркировки,
	|	ТаблицаНоменклатуры.КодУпаковки                           КАК КодУпаковки,
	|	ТаблицаНоменклатуры.ХешСуммаКодаУпаковки                  КАК ХешСуммаКодаУпаковки,
	|	ЕСТЬNULL(Упаковки.ПолныйКодМаркировки, """") КАК ПолныйКодУпаковки,
	|	ТаблицаНоменклатуры.ШтрихкодУпаковки         КАК ШтрихкодУпаковки,
	|	ПулКодовМаркировкиСУЗ.ХешСуммаУпаковки       КАК ХешСуммаУпаковки,
	|	ТаблицаНоменклатуры.Номенклатура             КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика           КАК Характеристика,
	|	ТаблицаНоменклатуры.ШаблонЭтикетки           КАК ШаблонЭтикетки,
	|	ТаблицаНоменклатуры.НомерВГруппе             КАК НомерВГруппе,
	|	ТаблицаНоменклатуры.СодержимоеКоличество     КАК СодержимоеКоличество,
	|	ТаблицаНоменклатуры.КоличествоПечать         КАК КоличествоПечать,
	|	ТаблицаНоменклатуры.Количество               КАК Количество,
	|	ТаблицаНоменклатуры.УчетноеКоличество        КАК УчетноеКоличество,
	|	ПулКодовМаркировкиСУЗ.Организация            КАК Организация,
	|	ВЫБОР
	|		КОГДА ТаблицаНоменклатуры.ЭтоКодМаркировки
	|			ТОГДА ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Доступно, &РазрешенаПовторнаяПечать)
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ                                        КАК Доступно,
	|	ТаблицаНоменклатуры.ЭтоКодМаркировки         КАК ЭтоКодМаркировки,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ТипШтрихкода, ТаблицаНоменклатуры.ТипШтрихкода) КАК ТипШтрихкода,
	|	ПулКодовМаркировкиСУЗ.GTIN                   КАК GTIN,
	|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию         КАК ЗаказНаЭмиссию,
	|	ПулКодовМаркировкиСУЗ.ДокументОснование      КАК ДокументОснование,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.СрокГодности, ТаблицаНоменклатуры.СрокГодности) КАК СрокГодности,
	|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.Шаблон,       ТаблицаНоменклатуры.Шаблон)       КАК Шаблон,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление,
	|		ТаблицаНоменклатуры.ПредставлениеНоменклатуры) КАК ПредставлениеНоменклатуры
	|
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегистра КАК ПулКодовМаркировкиСУЗ
	|		ПО ТаблицаНоменклатуры.КодМаркировки         = ПулКодовМаркировкиСУЗ.КодМаркировки
	|		И ТаблицаНоменклатуры.ХешСуммаКодаМаркировки = ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегистра КАК Упаковки
	|		ПО ТаблицаНоменклатуры.ЭтоКодМаркировки
	|		И ТаблицаНоменклатуры.КодУпаковки          = Упаковки.КодМаркировки
	|		И ТаблицаНоменклатуры.ХешСуммаКодаУпаковки = Упаковки.ХешСуммаКодаМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО КэшОписанияОстатков.GTIN = ПулКодовМаркировкиСУЗ.GTIN
	|		И ПулКодовМаркировкиСУЗ.Номенклатура = &ПустаяНоменклатура
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатуры.Порядок";
	
	ДобавитьВЗапросПечатиУсловияПоДокументу(Запрос, СтруктураОтбораДокументы, 1);
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("НедоступныеСтатусы",  СтатусыВыведенИзОборота());
	Запрос.УстановитьПараметр("ПустаяНоменклатура",  ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	
	Если РазрешитьПовторнуюПечать = Неопределено Тогда
		Запрос.УстановитьПараметр("РазрешенаПовторнаяПечать", ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки());
	Иначе
		Запрос.УстановитьПараметр("РазрешенаПовторнаяПечать", РазрешитьПовторнуюПечать);
	КонецЕсли;
	
	ТаблицаПечати = Запрос.Выполнить().Выгрузить();
	ТаблицаПечати.Колонки.Добавить("ШтрихкодВBase64", Новый ОписаниеТипов("Булево"));
	
	ТаблицаПечати.Индексы.Добавить("Доступно");
	ТаблицаПечати.Индексы.Добавить("КодМаркировки");
	
	ТипКода          = 2;
	ТипВходныхДанных = 1;
	КэшКодовУпаковок = Новый Соответствие;
	
	Для Каждого СтрокаТЧ Из ТаблицаПечати Цикл
		
		Если СтрокаТЧ.ЭтоКодМаркировки Тогда
			Если ЗначениеЗаполнено(СтрокаТЧ.ПолныйКодМаркировки) Тогда
				СтрокаТЧ.ШтрихкодВBase64 = Истина;
				СтрокаТЧ.Штрихкод        = СтрокаТЧ.ПолныйКодМаркировки;
			Иначе
				СтрокаТЧ.Штрихкод = СтрокаТЧ.КодМаркировки;
			КонецЕсли;
		Иначе
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПолныйКодМаркировки) Тогда
				ПолныйКодМаркировки = КэшКодовУпаковок[СтрокаТЧ.КодМаркировки];
				Если ПолныйКодМаркировки = Неопределено Тогда
					ПолныйКодМаркировки = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(СтрокаТЧ.КодМаркировки, ТипКода, ТипВходныхДанных);
					КэшКодовУпаковок.Вставить(СтрокаТЧ.КодМаркировки, ПолныйКодМаркировки);
				КонецЕсли;
				СтрокаТЧ.ПолныйКодМаркировки = ПолныйКодМаркировки;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТЧ.ПолныйКодМаркировки) Тогда
				СтрокаТЧ.ШтрихкодВBase64 = Истина;
				СтрокаТЧ.Штрихкод        = СтрокаТЧ.ПолныйКодМаркировки;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ПолныйКодУпаковки)
			И ЗначениеЗаполнено(СтрокаТЧ.КодУпаковки) Тогда
			ПолныйКодМаркировки = КэшКодовУпаковок[СтрокаТЧ.КодУпаковки];
			Если ПолныйКодМаркировки = Неопределено Тогда
				ПолныйКодМаркировки = ШтрихкодированиеИС.КодGS1ДляКомпонентыПечати(СтрокаТЧ.КодУпаковки, ТипКода, ТипВходныхДанных);
				КэшКодовУпаковок.Вставить(СтрокаТЧ.КодУпаковки, ПолныйКодМаркировки);
			КонецЕсли;
			СтрокаТЧ.ПолныйКодУпаковки = ПолныйКодМаркировки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка на доступность
	НедоступныеКоды = ТаблицаПечати.НайтиСтроки(Новый Структура("Доступно", Ложь));
	Для Каждого СтрокаТЧ Из НедоступныеКоды Цикл
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для %1: код маркировки уже распечатан.'"),
			ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТЧ.Номенклатура, СтрокаТЧ.Характеристика));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка печати этикеток'");
	КонецЕсли;
	
	Возврат ТаблицаПечати;
	
КонецФункции

Процедура ДополнитьТаблицуПечатиЗарезервированнымКодам(ТаблицаДляПечатиВыборочно, ТаблицаНоменклатуры, АдресРезультатаРезервирования, СсылкаНаДокумент)
	
	РезультатРезервирования = ПолучитьИзВременногоХранилища(АдресРезультатаРезервирования).ТаблицаКодыМаркировки;
	
	ДеревоУпаковок = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НовоеДеревоУпаковок();
	ДеревоУпаковок.Колонки.Добавить("ИсходнаяСтрока");
	ДеревоУпаковок.Колонки.Добавить("ИННВладельца");
	
	ЕстьКолонкаУчетноеКоличество = ТаблицаНоменклатуры.Колонки.Найти("УчетноеКоличество") <> Неопределено;
	ОписанияНоменклатурыИС       = ОбщегоНазначенияИС.ОписаниеНоменклатуры(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНоменклатуры, "Номенклатура", Истина));
	
	РеквизитыШтрихкодовУпаковок = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаНоменклатуры, "ШтрихкодУпаковки", Истина),
		"Серия, ТипУпаковки");

	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Номенклатура",   СтрокаТаблицы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
	
		ПоискСтрокКодов = РезультатРезервирования.НайтиСтроки(СтруктураПоиска);
		Зарезервировано = ПоискСтрокКодов.Количество();
		
		Если Зарезервировано <> СтрокаТаблицы.Количество Тогда
			МассивПолейПредставления = Новый Массив();
			МассивПолейПредставления.Добавить(
				ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика));
			Если ЗначениеЗаполнено(СтрокаТаблицы.СпособВводаВОборот) Тогда
				МассивПолейПредставления.Добавить(СтрокаТаблицы.СпособВводаВОборот);
			КонецЕсли;
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось зарезервировать код маркировки для:
					       | ""%1""
					       |по причине:
					       |Не найдено свободного кода.'"),
				СтрСоединить(МассивПолейПредставления, ", "));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		СтрокаРезервирования = ПоискСтрокКодов.Получить(0);
		СтрокаДерева         = ДеревоУпаковок.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ОписаниеНоменклатурыИС = ОписанияНоменклатурыИС[СтрокаТаблицы.Номенклатура];
		Иначе
			ОписаниеНоменклатурыИС = Неопределено;
		КонецЕсли;
		
		Если ОписаниеНоменклатурыИС <> Неопределено Тогда
			СтрокаДерева.ТребуетВзвешивания = ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке = 0;
		КонецЕсли;
		
		Если ЕстьКолонкаУчетноеКоличество
			И (СтрокаТаблицы.УчетноеКоличество <> 1 Или СтрокаДерева.ТребуетВзвешивания) Тогда
			СтрокаДерева.ПроизвольнаяЕдиницаУчета          = Истина;
			СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
			СтрокаДерева.Количество                        = СтрокаТаблицы.УчетноеКоличество;
		ИначеЕсли ОписаниеНоменклатурыИС <> Неопределено
			И ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке <> 1 Тогда
			СтрокаДерева.ПроизвольнаяЕдиницаУчета          = Истина;
			СтрокаДерева.КоличествоПотребительскихУпаковок = 1;
			СтрокаДерева.Количество                        = ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке;
		КонецЕсли;
		
		СтрокаДерева.Штрихкод       = СтрокаРезервирования.КодМаркировки;
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаРезервирования);
		
		СтрокаТаблицы.КодМаркировки = СтрокаРезервирования.КодМаркировки;
		СтрокаДерева.ТипШтрихкода   = СтрокаРезервирования.ТипШтрихкода;

		ТипУпаковки = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицы.ШтрихкодУпаковки)
			И РеквизитыШтрихкодовУпаковок[СтрокаТаблицы.ШтрихкодУпаковки] <> Неопределено Тогда
			РеквизитыШтрихкодаУпаковки = РеквизитыШтрихкодовУпаковок[СтрокаТаблицы.ШтрихкодУпаковки];
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Серия) Тогда
				СтрокаДерева.Серия = РеквизитыШтрихкодаУпаковки.Серия;
			КонецЕсли;
			ТипУпаковки = РеквизитыШтрихкодаУпаковки.ТипУпаковки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипУпаковки) Тогда
			СтрокаДерева.ТипУпаковки = ТипУпаковки;
		Иначе
			СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
		КонецЕсли;
		
		СтрокаДерева.ИсходнаяСтрока          = СтрокаТаблицы;
		СтрокаТаблицы.Штрихкод               = СтрокаРезервирования.ПолныйКодМаркировки;
		СтрокаТаблицы.ХешСуммаКодаМаркировки = СтрокаРезервирования.ХешСуммаКодаМаркировки;
		
		РезультатРезервирования.Удалить(СтрокаРезервирования);
		
	КонецЦикла;
	
	ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(СсылкаНаДокумент);
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки);
	
	Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок, ПараметрыСканирования);
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СтрокаТаблицы = СтрокаДерева.ИсходнаяСтрока;

		Если ЗначениеЗаполнено(СтрокаТаблицы.ШтрихкодУпаковки) Тогда
			Обработки.РаботаСКМПриПеремаркировкеТоваровИСМП.УстановитьЗначенияНовогоКодаМаркировки(
				СтрокаТаблицы.ШтрихкодУпаковки, СтрокаДерева.ШтрихкодУпаковки);
		КонецЕсли;
		
		НоваяСтрокаПечатиВыборочно = ТаблицаДляПечатиВыборочно.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПечатиВыборочно, СтрокаДерева);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПечатиВыборочно, СтрокаТаблицы);

	КонецЦикла;
	
КонецПроцедуры

// Устанавливает признак печати по кодам маркировки.
// 
// Параметры:
// 	ТаблицаДляПечати - ТаблицаЗначений - Таблица кодов маркировки для установки признака печати.
Процедура УстановитьСостояниеРаспечатанПоТаблицеДляПечати(ТаблицаДляПечати)
	
	ДатаПечати = ТекущаяУниверсальнаяДата();
	
	СписокКолонок = "ДокументОснование,ЗаказНаЭмиссию,КодМаркировки,ХешСуммаКодаМаркировки,ПолныйКодМаркировки";
	
	ЕстьКолонкаПолныйКодМаркировкиИзменен = ТаблицаДляПечати.Колонки.Найти("ПолныйКодМаркировкиИзменен") <> Неопределено;
	Если ЕстьКолонкаПолныйКодМаркировкиИзменен Тогда
		СписокКолонок = СписокКолонок + ",ПолныйКодМаркировкиИзменен";
	КонецЕсли;
	
	Таблица = ТаблицаДляПечати.Скопировать(, СписокКолонок);
	
	Если Не ЕстьКолонкаПолныйКодМаркировкиИзменен Тогда
		Таблица.Колонки.Добавить("ПолныйКодМаркировкиИзменен", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица",    Таблица);
	Запрос.УстановитьПараметр("ДатаПечати", ДатаПечати);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.ДокументОснование КАК ДокументОснование,
	|	Таблица.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	Таблица.КодМаркировки КАК КодМаркировки,
	|	Таблица.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	Таблица.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
	|	Таблица.ПолныйКодМаркировкиИзменен КАК ПолныйКодМаркировкиИзменен
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	ЗаказНаЭмиссию,
	|	КодМаркировки,
	|	ХешСуммаКодаМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ДокументОснование КАК ДокументОснование,
	|	Таблица.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	Таблица.КодМаркировки КАК КодМаркировки,
	|	Таблица.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	Таблица.ПолныйКодМаркировки КАК ПолныйКодМаркировки,
	|	Таблица.ПолныйКодМаркировкиИзменен КАК ПолныйКодМаркировкиИзменен
	|ПОМЕСТИТЬ ТаблицаДляПечати
	|ИЗ
	|	Таблица КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ДанныеПула
	|		ПО Таблица.ДокументОснование = ДанныеПула.ДокументОснование
	|		И Таблица.ЗаказНаЭмиссию = ДанныеПула.ЗаказНаЭмиссию
	|		И Таблица.КодМаркировки = ДанныеПула.КодМаркировки
	|		И Таблица.ХешСуммаКодаМаркировки = ДанныеПула.ХешСуммаКодаМаркировки
	|ГДЕ (Таблица.ПолныйКодМаркировкиИзменен
	|		ИЛИ ДанныеПула.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1))
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	ЗаказНаЭмиссию,
	|	КодМаркировки,
	|	ХешСуммаКодаМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДляПечати.ДокументОснование КАК ДокументОснование,
	|	ТаблицаДляПечати.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию
	|ПОМЕСТИТЬ ДокументыДляПечати
	|ИЗ
	|	ТаблицаДляПечати КАК ТаблицаДляПечати
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	ЗаказНаЭмиссию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИтоги.ДокументОснование КАК ДокументОснование,
	|	ТаблицаИтоги.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|	СУММА(ТаблицаИтоги.ЗаписейПоДокументам) КАК ЗаписейПоДокументам,
	|	СУММА(ТаблицаИтоги.ЗаписейДляИзменения) КАК ЗаписейДляИзменения,
	|	ВЫБОР
	|		КОГДА СУММА(ТаблицаИтоги.ЗаписейДляИзменения) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ СУММА(ТаблицаИтоги.ЗаписейПоДокументам) / СУММА(ТаблицаИтоги.ЗаписейДляИзменения) >= 100
	|	КОНЕЦ КАК ФормироватьЗаписи
	|ПОМЕСТИТЬ ТаблицаИтоги
	|ИЗ
	|	(
	|	ВЫБРАТЬ
	|		ДокументыДляПечати.ДокументОснование КАК ДокументОснование,
	|		ДокументыДляПечати.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|		КОЛИЧЕСТВО(1) КАК ЗаписейПоДокументам,
	|		0 КАК ЗаписейДляИзменения
	|	ИЗ
	|		ДокументыДляПечати КАК ДокументыДляПечати
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ДанныеПула
	|			ПО ДокументыДляПечати.ДокументОснование = ДанныеПула.ДокументОснование
	|			И ДокументыДляПечати.ЗаказНаЭмиссию = ДанныеПула.ЗаказНаЭмиссию
	|	СГРУППИРОВАТЬ ПО
	|		ДокументыДляПечати.ДокументОснование,
	|		ДокументыДляПечати.ЗаказНаЭмиссию
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаДляПечати.ДокументОснование КАК ДокументОснование,
	|		ТаблицаДляПечати.ЗаказНаЭмиссию КАК ЗаказНаЭмиссию,
	|		0 КАК ЗаписейПоДокументам,
	|		КОЛИЧЕСТВО(1) КАК ЗаписейДляИзменения
	|	ИЗ
	|		ТаблицаДляПечати КАК ТаблицаДляПечати
	|	СГРУППИРОВАТЬ ПО
	|		ТаблицаДляПечати.ДокументОснование,
	|		ТаблицаДляПечати.ЗаказНаЭмиссию
	|	) КАК ТаблицаИтоги
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаИтоги.ДокументОснование,
	|	ТаблицаИтоги.ЗаказНаЭмиссию
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование,
	|	ЗаказНаЭмиссию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// формировать наборы записей
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаДляПечати.ПолныйКодМаркировкиИзменен, ЛОЖЬ)
	|			ТОГДА ТаблицаДляПечати.ПолныйКодМаркировки
	|		ИНАЧЕ ДанныеПула.ПолныйКодМаркировки
	|	КОНЕЦ КАК ПолныйКодМаркировки,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаДляПечати.КодМаркировки ЕСТЬ NULL
	|		И (ТаблицаДляПечати.ПолныйКодМаркировкиИзменен
	|		ИЛИ ДанныеПула.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1))
	|			ТОГДА &ДатаПечати
	|		ИНАЧЕ ДанныеПула.ДатаПечатиУниверсальная
	|	КОНЕЦ КАК ДатаПечатиУниверсальная,
	|	ДанныеПула.*
	|ИЗ
	|	ТаблицаИтоги КАК ТаблицаИтоги
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ДанныеПула
	|		ПО НЕ ТаблицаИтоги.ФормироватьЗаписи
	|		И ТаблицаИтоги.ДокументОснование = ДанныеПула.ДокументОснование
	|		И ТаблицаИтоги.ЗаказНаЭмиссию = ДанныеПула.ЗаказНаЭмиссию
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДляПечати КАК ТаблицаДляПечати
	|		ПО ДанныеПула.ДокументОснование = ТаблицаДляПечати.ДокументОснование
	|		И ДанныеПула.ЗаказНаЭмиссию = ТаблицаДляПечати.ЗаказНаЭмиссию
	|		И ДанныеПула.КодМаркировки = ТаблицаДляПечати.КодМаркировки
	|		И ДанныеПула.ХешСуммаКодаМаркировки = ТаблицаДляПечати.ХешСуммаКодаМаркировки
	|
	|ИТОГИ ПО
	|	ДанныеПула.ЗаказНаЭмиссию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// формировать записи
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаДляПечати.ПолныйКодМаркировкиИзменен
	|			ТОГДА ТаблицаДляПечати.ПолныйКодМаркировки
	|		ИНАЧЕ ДанныеПула.ПолныйКодМаркировки
	|	КОНЕЦ КАК ПолныйКодМаркировки,
	|	&ДатаПечати КАК ДатаПечатиУниверсальная,
	|	ДанныеПула.*
	|ИЗ
	|	ТаблицаИтоги КАК ТаблицаИтоги
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДляПечати КАК ТаблицаДляПечати
	|		ПО ТаблицаИтоги.ФормироватьЗаписи
	|		И ТаблицаИтоги.ДокументОснование = ТаблицаДляПечати.ДокументОснование
	|		И ТаблицаИтоги.ЗаказНаЭмиссию = ТаблицаДляПечати.ЗаказНаЭмиссию
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ДанныеПула
	|		ПО ТаблицаДляПечати.ДокументОснование = ДанныеПула.ДокументОснование
	|		И ТаблицаДляПечати.ЗаказНаЭмиссию = ДанныеПула.ЗаказНаЭмиссию
	|		И ТаблицаДляПечати.КодМаркировки = ДанныеПула.КодМаркировки
	|		И ТаблицаДляПечати.ХешСуммаКодаМаркировки = ДанныеПула.ХешСуммаКодаМаркировки";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВГраница = РезультатЗапроса.ВГраница();
	
	// Формирование наборов записей
	ВыборкаПоЗаказу = РезультатЗапроса[ВГраница - 1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоЗаказу.Следующий() Цикл
		НаборЗаписей = Неопределено;
		Выборка = ВыборкаПоЗаказу.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НаборЗаписей = Неопределено Тогда
				НаборЗаписей = СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ДокументОснование.Установить(Выборка.ДокументОснование);
				НаборЗаписей.Отбор.ЗаказНаЭмиссию.Установить(Выборка.ЗаказНаЭмиссию);
			КонецЕсли;
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		Если НаборЗаписей <> Неопределено Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
		
	// Формирование записей
	Выборка = РезультатЗапроса[ВГраница].Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает настройки комплекта печатных форм, используемых для объекта
//
// Возвращаемое значение:
// ТаблицаЗначений - таблица значений с колонками:
//  * Имя           - Строка - внутреннее имя печатной формы.
//  * Представление - Строка - пользовательской представление печатной формы.
//  * Экземпляров   - Число - количество экземпляров, выводимых на печать.
//  * Печатать      - Булево - признак, указывающий на необходимость печати печатной формы.
//  * Ссылка        - ЛюбаяСсылка
//
Функция ПодготовитьКомплектПечатныхФорм()

	КомплектПечатныхФорм = Новый ТаблицаЗначений();
	КомплектПечатныхФорм.Колонки.Добавить("Имя");
	КомплектПечатныхФорм.Колонки.Добавить("Представление");
	КомплектПечатныхФорм.Колонки.Добавить("Экземпляров");
	КомплектПечатныхФорм.Колонки.Добавить("Печатать");
	КомплектПечатныхФорм.Колонки.Добавить("Ссылка");

	Возврат КомплектПечатныхФорм;

КонецФункции

// Добавляет печатную форму в таблицу с комплектом печатных форм
// Флаг "Печатать" устанавливается в Истина, если количество печатных форм больше нуля.
//
// Параметры:
//  КомплектПечатныхФорм - см. ПодготовитьКомплектПечатныхФорм
//  Имя - Строка - внутреннее имя печатной формы
//  Представление - Строка - представление печатной формы
//  Экземпляров - Число - количество экземпляров, выводимых на печать
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений - строка с добавленной печатной формой.
//
Функция ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, Имя, Представление, Экземпляров = 0)

	НоваяПечатнаяФорма = КомплектПечатныхФорм.Добавить();
	НоваяПечатнаяФорма.Имя = Имя;
	НоваяПечатнаяФорма.Представление = Представление;
	НоваяПечатнаяФорма.Экземпляров = Экземпляров;
	НоваяПечатнаяФорма.Печатать = Экземпляров > 0;

	Возврат НоваяПечатнаяФорма;

КонецФункции

// Копирует строку в коллекцию печатных форм из строки настроек печати комплекта
//
// Параметры:
// 	КоллекцияПечатныхФорм - ТаблицаЗначений - таблица значений, передаваемая в процедуру Печать() модуля менеджера:
// 		* ИмяМакета - Строка
// 		* Экземпляров - Число
// 		* ИмяВРЕГ - Строка
// 	НастройкаПечати - СтрокаТаблицыЗначений - строка таблицы, возвращаемой функцией ПодготовитьКомплектПечатныхФорм(), содержит:
// 		* Имя - Строка
//
Процедура СкопироватьПечатнуюФормуВКоллекцию(КоллекцияПечатныхФорм, НастройкаПечати)

	НоваяСтрока = КоллекцияПечатныхФорм.Добавить();
	НоваяСтрока.ИмяМакета = НастройкаПечати.Имя;
	НоваяСтрока.Экземпляров = НастройкаПечати.Экземпляров;
	НоваяСтрока.ИмяВРЕГ = ВРЕГ(НоваяСтрока.ИмяМакета);

КонецПроцедуры

Процедура ДобавитьЭлементыНастройкиПечатиЭтикеток(ЭлементыПриемника, ЭлементыИсточника)
	
	Для Каждого ЭлементИсточника Из ЭлементыИсточника Цикл
		Если ТипЗнч(ЭлементИсточника) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			ЭлементПриемника = ЭлементыПриемника.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ЭлементИсточника);
		ИначеЕсли ТипЗнч(ЭлементИсточника) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ЭлементПриемника = ЭлементыПриемника.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ЭлементИсточника);
			ДобавитьЭлементыНастройкиПечатиЭтикеток(ЭлементПриемника.Элементы, ЭлементИсточника.Элементы);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетДанныхПоДокументу

Функция ЗапросСвободныхКодовПоЗаказу(Заказ, ТаблицаНоменклатуры, МаркировкаОстатков = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ВидыПродукцииИСМП",       ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина));
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры",     ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("РезервироватьПоТаблице",  (ТаблицаНоменклатуры.Количество() > 0));
	Запрос.УстановитьПараметр("СтатусыВыведенИзОборота", СтатусыВыведенИзОборота());
	Запрос.УстановитьПараметр("МаркировкаОстатков",      МаркировкаОстатков);
	Запрос.УстановитьПараметр("ШаблонБлок",              ИнтеграцияИСМПКлиентСервер.ШаблоныГрупповыхУпаковок());
	Запрос.УстановитьПараметр(
		"Организация",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заказ, "Организация"));
	Запрос.УстановитьПараметр(
		"НачалоGTINМаркировкиОстатков",
		ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков());
	Запрос.УстановитьПараметр(
		"ПустоеОснование",
		ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП"));
	
	Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ") Тогда
		Запрос.УстановитьПараметр("Заказ", Заказ);
	Иначе
		Запрос.УстановитьПараметр("Заказ", Метаданные.ОпределяемыеТипы["ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП"].Тип.ПривестиЗначение(Заказ));
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Заказ КАК ДокументОснование
	|ПОМЕСТИТЬ ДокументВРаботе
	|;";
	Запрос.Выполнить();
	
	СформироватьТаблицуМаркированныхТоваровОснований(Запрос, "ДокументВРаботе");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркированныеТоварыОснований.Организация        КАК Организация,
	|	МаркированныеТоварыОснований.ВидПродукции       КАК ВидПродукции,
	|	МаркированныеТоварыОснований.Номенклатура       КАК Номенклатура,
	|	МаркированныеТоварыОснований.Характеристика     КАК Характеристика,
	|	МаркированныеТоварыОснований.Шаблон             КАК Шаблон,
	|	МаркированныеТоварыОснований.СпособВводаВОборот КАК СпособВводаВОборот,
	|	МаркированныеТоварыОснований.Количество         КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	МаркированныеТоварыОснований КАК МаркированныеТоварыОснований
	|ГДЕ
	|	МаркированныеТоварыОснований.ВидПродукции В (&ВидыПродукцииИСМП)
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВидПродукции,
	|	Номенклатура,
	|	Характеристика,
	|	Шаблон,
	|	СпособВводаВОборот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаркированныеТоварыОснований;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДокументВРаботе;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пул.КодМаркировки               КАК КодМаркировки,
	|	Пул.ХешСуммаКодаМаркировки      КАК ХешСуммаКодаМаркировки,
	|	Пул.ПолныйКодМаркировки         КАК ПолныйКодМаркировки,
	|	Пул.ДокументОснование           КАК ДокументОснование,
	|	Пул.ЗаказНаЭмиссию              КАК ЗаказНаЭмиссию,
	|	Пул.ЗаказНаЭмиссию.Организация  КАК Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции КАК ВидПродукции,
	|	Пул.Номенклатура                КАК Номенклатура,
	|	Пул.Характеристика              КАК Характеристика,
	|	Пул.СпособВводаВОборот          КАК СпособВводаВОборот
	|ПОМЕСТИТЬ СвободныеКоды
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|			ПО Товары.Организация       = Пул.ЗаказНаЭмиссию.Организация
	|			И Товары.ВидПродукции       = Пул.ЗаказНаЭмиссию.ВидПродукции
	|			И Товары.Номенклатура       = Пул.Номенклатура
	|			И Товары.Характеристика     = Пул.Характеристика
	|			И Товары.Шаблон             = Пул.Шаблон
	|			И Товары.СпособВводаВОборот В
	|				(Пул.СпособВводаВОборот, Значение(Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|			ПО СтатусыОформленияДокументовИСМП.Основание = Пул.ДокументОснование
	|			И Пул.ДокументОснование <> &Заказ
	|			И СтатусыОформленияДокументовИСМП.Архивный
	|ГДЕ
	|	НЕ Пул.Статус В (&СтатусыВыведенИзОборота)
	|	И Не Пул.Шаблон В (&ШаблонБлок)
	|	И Пул.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И Пул.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1,1,1)
	|	И (Пул.ДокументОснование В(&ПустоеОснование)
	|		ИЛИ НЕ СтатусыОформленияДокументовИСМП.Архивный ЕСТЬ NULL)
	|	И ВЫБОР
	|		КОГДА &МаркировкаОстатков = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА
	|		ИНАЧЕ Пул.МаркировкаОстатков = &МаркировкаОстатков
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	Пул.КодМаркировки               КАК КодМаркировки,
	|	Пул.ХешСуммаКодаМаркировки      КАК ХешСуммаКодаМаркировки,
	|	Пул.ПолныйКодМаркировки         КАК ПолныйКодМаркировки,
	|	Пул.ДокументОснование           КАК ДокументОснование,
	|	Пул.ЗаказНаЭмиссию              КАК ЗаказНаЭмиссию,
	|	Пул.ЗаказНаЭмиссию.Организация  КАК Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции КАК ВидПродукции,
	|	Пул.Номенклатура                КАК Номенклатура,
	|	Пул.Характеристика              КАК Характеристика,
	|	Пул.Шаблон                      КАК Шаблон,
	|	Пул.СпособВводаВОборот          КАК СпособВводаВОборот
	|ПОМЕСТИТЬ ВозможныеСвободныеКоды
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Товары КАК Товары
	|			ПО Товары.Организация       = Пул.ЗаказНаЭмиссию.Организация
	|			И Товары.ВидПродукции       = Пул.ЗаказНаЭмиссию.ВидПродукции
	|			И Товары.Номенклатура       = Пул.Номенклатура
	|			И Товары.Характеристика     = Пул.Характеристика
	|			И Товары.Шаблон             = Пул.Шаблон
	|			И Товары.СпособВводаВОборот В
	|				(Пул.СпособВводаВОборот, Значение(Перечисление.СпособыВводаВОборотСУЗ.ПустаяСсылка))
	|			И Пул.ДокументОснование <> &Заказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|			ПО СтатусыОформленияДокументовИСМП.Основание = Пул.ДокументОснование
	|			И НЕ СтатусыОформленияДокументовИСМП.Архивный
	|			И СтатусыОформленияДокументовИСМП.СтатусОформления = ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления)
	|ГДЕ
	|	НЕ Пул.Статус В (&СтатусыВыведенИзОборота)
	|	И Не Пул.Шаблон В (&ШаблонБлок)
	|	И Пул.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И Пул.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1,1,1)
	|	И ВЫБОР
	|		КОГДА &МаркировкаОстатков = НЕОПРЕДЕЛЕНО ТОГДА ИСТИНА
	|		ИНАЧЕ Пул.МаркировкаОстатков = &МаркировкаОстатков
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВозможныеСвободныеКоды.ДокументОснование,
	|	ВозможныеСвободныеКоды.Организация,
	|	ВозможныеСвободныеКоды.ВидПродукции,
	|	ВозможныеСвободныеКоды.Номенклатура,
	|	ВозможныеСвободныеКоды.Характеристика,
	|	ВозможныеСвободныеКоды.Шаблон,
	|	ВозможныеСвободныеКоды.СпособВводаВОборот,
	|	КОЛИЧЕСТВО(ВозможныеСвободныеКоды.КодМаркировки) КАК Количество
	|ПОМЕСТИТЬ ВозможныйИсточникСвободныхКодов
	|ИЗ
	|	ВозможныеСвободныеКоды КАК ВозможныеСвободныеКоды
	|СГРУППИРОВАТЬ ПО
	|	ВозможныеСвободныеКоды.ДокументОснование,
	|	ВозможныеСвободныеКоды.Организация,
	|	ВозможныеСвободныеКоды.ВидПродукции,
	|	ВозможныеСвободныеКоды.Номенклатура,
	|	ВозможныеСвободныеКоды.Характеристика,
	|	ВозможныеСвободныеКоды.Шаблон,
	|	ВозможныеСвободныеКоды.СпособВводаВОборот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	ВозможныйИсточникСвободныхКодов.ДокументОснование,
	|	ВозможныйИсточникСвободныхКодов.Организация,
	|	ВозможныйИсточникСвободныхКодов.ВидПродукции
	|ПОМЕСТИТЬ ДокументыСОшибкамиОформления
	|ИЗ
	|	ВозможныйИсточникСвободныхКодов КАК ВозможныйИсточникСвободныхКодов
	|СГРУППИРОВАТЬ ПО
	|	ВозможныйИсточникСвободныхКодов.ДокументОснование,
	|	ВозможныйИсточникСвободныхКодов.Организация,
	|	ВозможныйИсточникСвободныхКодов.ВидПродукции
	|
	|";
	Запрос.Выполнить();
	
	СформироватьТаблицуМаркированныхТоваровОснований(Запрос, "ДокументыСОшибкамиОформления");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаЭмиссиюТовары.Ссылка                    КАК ЗаказНаЭмиссию,
	|	ЗаказНаЭмиссиюТовары.Ссылка.ДокументОснование  КАК ДокументОснование,
	|	ЗаказНаЭмиссиюТовары.Ссылка.Организация        КАК Организация,
	|	ЗаказНаЭмиссиюТовары.Ссылка.ВидПродукции       КАК ВидПродукции,
	|	ЗаказНаЭмиссиюТовары.Номенклатура              КАК Номенклатура,
	|	ЗаказНаЭмиссиюТовары.Характеристика            КАК Характеристика,
	|	ЗаказНаЭмиссиюТовары.Шаблон                    КАК Шаблон,
	|	ЗаказНаЭмиссиюТовары.Ссылка.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ЗаказНаЭмиссиюТовары.Количество                КАК Количество
	|ПОМЕСТИТЬ ОжидаетсяПоДокументамСОшибкамиПредварительно
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСОшибкамиОформления КАК ДокументыСОшибкамиОформления
	|		ПО ДокументыСОшибкамиОформления.ДокументОснование = ЗаказНаЭмиссиюТовары.Ссылка.ДокументОснование
	|		 И ДокументыСОшибкамиОформления.Организация  = ЗаказНаЭмиссиюТовары.Ссылка.Организация
	|		 И ДокументыСОшибкамиОформления.ВидПродукции = ЗаказНаЭмиссиюТовары.Ссылка.ВидПродукции
	|ГДЕ
	|	ЗаказНаЭмиссиюТовары.Ссылка.Проведен
	|	И Не ЗаказНаЭмиссиюТовары.Шаблон В (&ШаблонБлок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Пул.ЗаказНаЭмиссию,
	|	Пул.ЗаказНаЭмиссию.ДокументОснование,
	|	Пул.ЗаказНаЭмиссию.Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции,
	|	Пул.Номенклатура,
	|	Пул.Характеристика,
	|	Пул.Шаблон,
	|	Пул.СпособВводаВОборот,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСОшибкамиОформления КАК ДокументыСОшибкамиОформления
	|		ПО ДокументыСОшибкамиОформления.ДокументОснование = Пул.ЗаказНаЭмиссию.ДокументОснование
	|		 И ДокументыСОшибкамиОформления.Организация  = Пул.ЗаказНаЭмиссию.Организация
	|		 И ДокументыСОшибкамиОформления.ВидПродукции = Пул.ЗаказНаЭмиссию.ВидПродукции
	|		 И Не Пул.Шаблон В (&ШаблонБлок)
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ЗаказНаЭмиссию,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ДокументОснование,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Организация,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ВидПродукции,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Номенклатура,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Характеристика,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.СпособВводаВОборот,
	|	СУММА(ОжидаетсяПоДокументамСОшибкамиПредварительно.Количество) КАК Количество
	|ПОМЕСТИТЬ ОжидаетсяПоДокументамСОшибкамиОформления
	|ИЗ
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно КАК ОжидаетсяПоДокументамСОшибкамиПредварительно
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВозможныйИсточникСвободныхКодов КАК ВозможныйИсточникСвободныхКодов
	|		ПО ВозможныйИсточникСвободныхКодов.Номенклатура = ОжидаетсяПоДокументамСОшибкамиПредварительно.Номенклатура
	|		И ВозможныйИсточникСвободныхКодов.Характеристика = ОжидаетсяПоДокументамСОшибкамиПредварительно.Характеристика
	|		И ВозможныйИсточникСвободныхКодов.Шаблон = ОжидаетсяПоДокументамСОшибкамиПредварительно.Шаблон
	|		И ВозможныйИсточникСвободныхКодов.СпособВводаВОборот = ОжидаетсяПоДокументамСОшибкамиПредварительно.СпособВводаВОборот
	|		И ВозможныйИсточникСвободныхКодов.ДокументОснование = ОжидаетсяПоДокументамСОшибкамиПредварительно.ДокументОснование
	|СГРУППИРОВАТЬ ПО
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ЗаказНаЭмиссию,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ДокументОснование,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Организация,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.ВидПродукции,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Номенклатура,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.СпособВводаВОборот,
	|	ОжидаетсяПоДокументамСОшибкамиПредварительно.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ОжидаетсяПоДокументамСОшибкамиПредварительно.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаркированныеТоварыОснований.ДокументОснование  КАК ДокументОснование,
	|	МаркированныеТоварыОснований.Организация        КАК Организация,
	|	МаркированныеТоварыОснований.ВидПродукции       КАК ВидПродукции,
	|	МаркированныеТоварыОснований.Номенклатура       КАК Номенклатура,
	|	МаркированныеТоварыОснований.Характеристика     КАК Характеристика,
	|	МаркированныеТоварыОснований.СпособВводаВОборот КАК СпособВводаВОборот,
	|	-МаркированныеТоварыОснований.Количество        КАК Количество
	|ПОМЕСТИТЬ ДоступноКРезрвированиюПоИзлишкамПредварительно
	|ИЗ
	|	МаркированныеТоварыОснований КАК МаркированныеТоварыОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыСОшибкамиОформления КАК ДокументыСОшибкамиОформления
	|		ПО ДокументыСОшибкамиОформления.ДокументОснование = МаркированныеТоварыОснований.ДокументОснование
	|		 И ДокументыСОшибкамиОформления.Организация  = МаркированныеТоварыОснований.Организация
	|		 И ДокументыСОшибкамиОформления.ВидПродукции = МаркированныеТоварыОснований.ВидПродукции
	|ГДЕ
	|	МаркированныеТоварыОснований.ВидПродукции В (&ВидыПродукцииИСМП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ожидается.ДокументОснование,
	|	Ожидается.Организация,
	|	Ожидается.ВидПродукции,
	|	Ожидается.Номенклатура,
	|	Ожидается.Характеристика,
	|	Ожидается.СпособВводаВОборот,
	|	Ожидается.Количество
	|ИЗ
	|	ОжидаетсяПоДокументамСОшибкамиОформления КАК Ожидается
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВозможныйИсточникСвободныхКодов.ДокументОснование,
	|	ВозможныйИсточникСвободныхКодов.Организация,
	|	ВозможныйИсточникСвободныхКодов.ВидПродукции,
	|	ВозможныйИсточникСвободныхКодов.Номенклатура,
	|	ВозможныйИсточникСвободныхКодов.Характеристика,
	|	ВозможныйИсточникСвободныхКодов.СпособВводаВОборот,
	|	ВозможныйИсточникСвободныхКодов.Количество
	|ИЗ
	|	ВозможныйИсточникСвободныхКодов КАК ВозможныйИсточникСвободныхКодов
	|;
	|";
	
	Возврат Запрос;
	
КонецФункции

Функция ЗапросСостоянияКодовПоЗаказу(
	Заказ,
	УничтожитьТаблицыСвободныхКодов = Истина,
	ТаблицаНоменклатуры = Неопределено,
	МаркировкаОстатков = Неопределено)
	
	Если ТаблицаНоменклатуры = Неопределено Тогда
		ТаблицаНоменклатуры = НоваяТаблицаНоменклатуры();
	КонецЕсли;
	
	Запрос = ЗапросСвободныхКодовПоЗаказу(Заказ, ТаблицаНоменклатуры, МаркировкаОстатков);
	Запрос.Текст = Запрос.Текст + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ДокументОснование  КАК ДокументОснование,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Организация        КАК Организация,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ВидПродукции       КАК ВидПродукции,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Номенклатура       КАК Номенклатура,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Характеристика     КАК Характеристика,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
	|	СУММА(ДоступноКРезрвированиюПоИзлишкамПредварительно.Количество)  КАК Количество
	|ПОМЕСТИТЬ ДоступноКРезрвированию
	|ИЗ
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно КАК ДоступноКРезрвированиюПоИзлишкамПредварительно
	|СГРУППИРОВАТЬ ПО
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ДокументОснование,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Организация,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.ВидПродукции,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Номенклатура,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.Характеристика,
	|	ДоступноКРезрвированиюПоИзлишкамПредварительно.СпособВводаВОборот
	|ИМЕЮЩИЕ
	|	СУММА(ДоступноКРезрвированиюПоИзлишкамПредварительно.Количество) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвободныеКоды.ДокументОснование,
	|	СвободныеКоды.Организация,
	|	СвободныеКоды.ВидПродукции,
	|	СвободныеКоды.Номенклатура,
	|	СвободныеКоды.Характеристика,
	|	СвободныеКоды.СпособВводаВОборот,
	|	КОЛИЧЕСТВО(СвободныеКоды.КодМаркировки)
	|ИЗ
	|	СвободныеКоды КАК СвободныеКоды
	|СГРУППИРОВАТЬ ПО
	|	СвободныеКоды.ДокументОснование,
	|	СвободныеКоды.Организация,
	|	СвободныеКоды.ВидПродукции,
	|	СвободныеКоды.Номенклатура,
	|	СвободныеКоды.Характеристика,
	|	СвободныеКоды.СпособВводаВОборот
	|;
	|";
	
	Если УничтожитьТаблицыСвободныхКодов Тогда
		Запрос.Текст = Запрос.Текст + "
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ СвободныеКоды;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВозможныеСвободныеКоды;
		|";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВозможныйИсточникСвободныхКодов;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОжидаетсяПоДокументамСОшибкамиПредварительно;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОжидаетсяПоДокументамСОшибкамиОформления;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаЭмиссиюТовары.Ссылка              КАК ЗаказНаЭмиссию,
	|	ЗаказНаЭмиссиюТовары.Ссылка.Организация  КАК Организация,
	|	ЗаказНаЭмиссиюТовары.Ссылка.ВидПродукции КАК ВидПродукции,
	|	ЗаказНаЭмиссиюТовары.Номенклатура        КАК Номенклатура,
	|	ЗаказНаЭмиссиюТовары.Характеристика      КАК Характеристика,
	|	ЗаказНаЭмиссиюТовары.Количество          КАК Количество
	|ПОМЕСТИТЬ ОжидаетсяПоДокументуОснованиюПредварительно
	|ИЗ
	|	Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Товары КАК ЗаказНаЭмиссиюТовары
	|ГДЕ
	|	ЗаказНаЭмиссиюТовары.Ссылка.Проведен
	|	И ЗаказНаЭмиссиюТовары.Ссылка.ДокументОснование = &Заказ
	|	И Не ЗаказНаЭмиссиюТовары.Шаблон В(&ШаблонБлок)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Пул.ЗаказНаЭмиссию,
	|	Пул.ЗаказНаЭмиссию.Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции,
	|	Пул.Номенклатура,
	|	Пул.Характеристика,
	|	-1
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|ГДЕ
	|	Пул.ЗаказНаЭмиссию.ДокументОснование = &Заказ
	|	И Не Пул.Шаблон В(&ШаблонБлок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОжидаетсяПоДокументуОснованиюПредварительно.ЗаказНаЭмиссию    КАК ЗаказНаЭмиссию,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Организация       КАК Организация,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.ВидПродукции      КАК ВидПродукции,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Номенклатура      КАК Номенклатура,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Характеристика    КАК Характеристика,
	|	СУММА(ОжидаетсяПоДокументуОснованиюПредварительно.Количество) КАК Количество
	|ПОМЕСТИТЬ Ожидается
	|ИЗ
	|	ОжидаетсяПоДокументуОснованиюПредварительно КАК ОжидаетсяПоДокументуОснованиюПредварительно
	|СГРУППИРОВАТЬ ПО
	|	ОжидаетсяПоДокументуОснованиюПредварительно.ЗаказНаЭмиссию,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Организация,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.ВидПродукции,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Номенклатура,
	|	ОжидаетсяПоДокументуОснованиюПредварительно.Характеристика
	|ИМЕЮЩИЕ
	|	СУММА(ОжидаетсяПоДокументуОснованиюПредварительно.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пул.ЗаказНаЭмиссию.Организация  КАК Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции КАК ВидПродукции,
	|	Пул.Номенклатура                КАК Номенклатура,
	|	Пул.Характеристика              КАК Характеристика,
	|	0                               КАК КоличествоВЗаказе,
	|	0                               КАК КоличествоРезервировать,
	|	0                               КАК КоличествоЗаказано,
	|	СУММА(ВЫБОР КОГДА Пул.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1,1,1) ТОГДА 1 ИНАЧЕ 0 КОНЕЦ) КАК КоличествоПечатать,
	|	СУММА(ВЫБОР КОГДА Пул.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1,1,1) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ) КАК КоличествоРаспечатано,
	|	МАКСИМУМ(Пул.СпособВводаВОборот) КАК СпособВводаВОборот
	|ПОМЕСТИТЬ ОбщийРасчетПредварительно
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|ГДЕ
	|	Пул.ДокументОснование = &Заказ
	|СГРУППИРОВАТЬ ПО
	|	Пул.ЗаказНаЭмиссию.Организация,
	|	Пул.ЗаказНаЭмиссию.ВидПродукции,
	|	Пул.Номенклатура,
	|	Пул.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Организация,
	|	Товары.ВидПродукции,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Количество,
	|	0,
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	Товары КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ожидается.Организация,
	|	Ожидается.ВидПродукции,
	|	Ожидается.Номенклатура,
	|	Ожидается.Характеристика,
	|	0,
	|	0,
	|	СУММА(Ожидается.Количество),
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	Ожидается КАК Ожидается
	|СГРУППИРОВАТЬ ПО
	|	Ожидается.Организация,
	|	Ожидается.ВидПродукции,
	|	Ожидается.Номенклатура,
	|	Ожидается.Характеристика
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоступноКРезрвированию.Организация,
	|	ДоступноКРезрвированию.ВидПродукции,
	|	ДоступноКРезрвированию.Номенклатура,
	|	ДоступноКРезрвированию.Характеристика,
	|	0,
	|	СУММА(ДоступноКРезрвированию.Количество),
	|	0,
	|	0,
	|	0,
	|	NULL
	|ИЗ
	|	ДоступноКРезрвированию КАК ДоступноКРезрвированию
	|СГРУППИРОВАТЬ ПО
	|	ДоступноКРезрвированию.Организация,
	|	ДоступноКРезрвированию.ВидПродукции,
	|	ДоступноКРезрвированию.Номенклатура,
	|	ДоступноКРезрвированию.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщийРасчет.ВидПродукции                   КАК ВидПродукции,
	|	ОбщийРасчет.Номенклатура                   КАК Номенклатура,
	|	ОбщийРасчет.Характеристика                 КАК Характеристика,
	|	МАКСИМУМ(ОбщийРасчет.СпособВводаВОборот)   КАК СпособВводаВОборот,
	|	СУММА(ОбщийРасчет.КоличествоВЗаказе)       КАК КоличествоВЗаказе,
	|	СУММА(ОбщийРасчет.КоличествоРезервировать) КАК КоличествоРезервировать,
	|	СУММА(ОбщийРасчет.КоличествоЗаказано)      КАК КоличествоЗаказано,
	|	СУММА(ОбщийРасчет.КоличествоПечатать)      КАК КоличествоПечатать,
	|	СУММА(ОбщийРасчет.КоличествоРаспечатано)   КАК КоличествоРаспечатано,
	|	СУММА(ОбщийРасчет.КоличествоВЗаказе)
	|		- СУММА(ОбщийРасчет.КоличествоЗаказано)
	|		- СУММА(ОбщийРасчет.КоличествоПечатать)
	|		- СУММА(ОбщийРасчет.КоличествоРаспечатано) КАК Распределить
	|ПОМЕСТИТЬ ОбщийРасчет
	|ИЗ
	|	ОбщийРасчетПредварительно КАК ОбщийРасчет
	|ГДЕ
	|	ОбщийРасчет.Организация = &Организация
	|СГРУППИРОВАТЬ ПО
	|	ОбщийРасчет.ВидПродукции,
	|	ОбщийРасчет.Номенклатура,
	|	ОбщийРасчет.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбщийРасчет.ВидПродукции          КАК ВидПродукции,
	|	ОбщийРасчет.Номенклатура          КАК Номенклатура,
	|	ОбщийРасчет.Характеристика        КАК Характеристика,
	|	ОбщийРасчет.СпособВводаВОборот    КАК СпособВводаВОборот,
	|	ОбщийРасчет.КоличествоВЗаказе     КАК КоличествоВЗаказе,
	|	ОбщийРасчет.КоличествоЗаказано    КАК КоличествоЗаказано,
	|	ОбщийРасчет.КоличествоПечатать    КАК КоличествоПечатать,
	|	ОбщийРасчет.КоличествоРаспечатано КАК КоличествоРаспечатано,
	|	ВЫБОР
	|		КОГДА ОбщийРасчет.Распределить < 0 ТОГДА 0
	|		КОГДА ОбщийРасчет.Распределить < ОбщийРасчет.КоличествоРезервировать ТОГДА ОбщийРасчет.Распределить
	|		ИНАЧЕ ОбщийРасчет.КоличествоРезервировать
	|	КОНЕЦ КАК КоличествоРезервировать,
	|	ВЫБОР
	|		КОГДА ОбщийРасчет.Распределить - ОбщийРасчет.КоличествоРезервировать < 0 ТОГДА 0
	|		ИНАЧЕ ОбщийРасчет.Распределить - ОбщийРасчет.КоличествоРезервировать
	|	КОНЕЦ КАК КоличествоЗаказать
	|ИЗ
	|	ОбщийРасчет КАК ОбщийРасчет
	|";
	
	Возврат Запрос;
	
КонецФункции

Процедура СформироватьТаблицуМаркированныхТоваровОснований(Запрос, ИмяВременнойТаблицыСКолонкойДокументОснование)
	
	СтандартнаяОбработка = Истина;
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Товары.Ссылка             КАК Ссылка,
	|	Товары.Организация        КАК Организация,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.ВидПродукции       КАК ВидПродукции,
	|	Товары.Шаблон             КАК Шаблон,
	|	Товары.СпособВводаВОборот КАК СпособВводаВОборот,
	|	Товары.Количество         КАК Количество
	|ПОМЕСТИТЬ
	|	ТаблицаНоменклатурыВременная
	|ИЗ
	|	&ТаблицаНоменклатуры КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка             КАК Ссылка,
	|	Товары.Организация        КАК Организация,
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.ВидПродукции       КАК ВидПродукции,
	|	Товары.Шаблон             КАК Шаблон,
	|	Товары.СпособВводаВОборот КАК СпособВводаВОборот,
	|	Товары.Количество         КАК Количество
	|ПОМЕСТИТЬ
	|	ТоварыПредварительно
	|ИЗ
	|	ТаблицаНоменклатурыВременная КАК Товары
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.ВидПродукции,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Шины)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Велосипеды)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|			ИЛИ Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации)
	|			ИЛИ Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МедицинскиеИзделия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Антисептики)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БАДы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
	|			ИЛИ Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПродукцияИзНатуральногоМеха)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.СоковаяПродукция)
	|			ИЛИ Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БезалкогольноеПиво)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыСтандартныйКМ)
	|		" + ДополнитьШаблоныНовыхТоварныхГруппВЗапросе() + "
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков)
	|		КОГДА Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Импорт)
	|		КОГДА Товары.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Производство)
	|	КОНЕЦ,
	|	ОКР(Товары.Количество / ЕСТЬNULL(ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке, 1), 0) КАК Количество
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
	|		ПО Товары.Номенклатура = ОписаниеНоменклатурыИС.Номенклатура
	|		И ОписаниеНоменклатурыИС.КоличествоВПотребительскойУпаковке > 0
	|ГДЕ
	|	НЕ &РезервироватьПоТаблице
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка,
	|	Товары.Ссылка.Организация,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Ссылка.ВидПродукции,
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТабачнаяПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Обувь)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Обувь)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ЛегкаяПромышленность)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезВЕТИС)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Шины)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Шины)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Фотоаппараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Фотоаппараты)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Велосипеды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Велосипеды)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КреслаКоляски)
	|			ИЛИ Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации)
	|			ИЛИ Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МедицинскиеИзделия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КреслаКоляски)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Духи)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Духи)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АльтернативныйТабак)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АльтернативныйТабакПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.УпакованнаяВода)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.УпакованнаяВода)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Антисептики)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АнтисептикиСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БАДы)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БАДыСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.НикотиносодержащаяПродукцияПачка)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Пиво)
	|			ИЛИ Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Пиво)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПродукцияИзНатуральногоМеха)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.СоковаяПродукция)
	|			ИЛИ Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СоковаяПродукция)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.БезалкогольноеПиво)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БезалкогольноеПиво)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МорепродуктыСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИССтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Мясо)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИССтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РастительныеМасла)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияСтандартныйКМ)
	|		КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияСтандартныйКМ)
	|		" + ДополнитьШаблоныНовыхТоварныхГруппВЗапросе() + "
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка)
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыВводаВОборотСУЗ.Перемаркировка),
	|	1
	|ИЗ
	|	Документ.ПеремаркировкаТоваровИСМП.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ %1 КАК Основания
	|		ПО Основания.ДокументОснование = Товары.Ссылка
	|ГДЕ
	|	НЕ &РезервироватьПоТаблице";
	
	Запрос.Текст = СтрШаблон(ТекстЗапроса, ИмяВременнойТаблицыСКолонкойДокументОснование);
	
	ИнтеграцияИСМППереопределяемый.СформироватьТаблицуМаркированныхТоваровОснований(
		Запрос, ИмяВременнойТаблицыСКолонкойДокументОснование, СтандартнаяОбработка);
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыВременная
	|";
	
	Если СтандартнаяОбработка Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыПредварительно.Ссылка             КАК ДокументОснование,
		|	ТоварыПредварительно.Организация        КАК Организация,
		|	ТоварыПредварительно.Номенклатура       КАК Номенклатура,
		|	ТоварыПредварительно.Характеристика     КАК Характеристика,
		|	ТоварыПредварительно.ВидПродукции       КАК ВидПродукции,
		|	ТоварыПредварительно.Шаблон             КАК Шаблон,
		|	ТоварыПредварительно.СпособВводаВОборот КАК СпособВводаВОборот,
		|	СУММА(ТоварыПредварительно.Количество)  КАК Количество
		|ПОМЕСТИТЬ МаркированныеТоварыОснований
		|ИЗ
		|	ТоварыПредварительно КАК ТоварыПредварительно
		|СГРУППИРОВАТЬ ПО
		|	ТоварыПредварительно.Ссылка,
		|	ТоварыПредварительно.Организация,
		|	ТоварыПредварительно.Номенклатура,
		|	ТоварыПредварительно.Характеристика,
		|	ТоварыПредварительно.ВидПродукции,
		|	ТоварыПредварительно.Шаблон,
		|	ТоварыПредварительно.СпособВводаВОборот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыПредварительно
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыПредварительно
		|";
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область РезервированиеКодовМаркировки

// Подготавливает таблицу для передачи в процедуру резервирования
// (См. РегистрСведений.ПулКодовМаркировкиСУЗ.ЗарезервироватьКодыПодЗаказ)
// 
// Параметры:
// 	Параметры - Неопределено, Структура - Описание:
// * ТаблицаНоменклатуры - ТаблицаЗначений - Исходная таблица, которой необходимо инициализировать итоговую таблицу
// * Документ  - ДокументСсылка - Документ, по которому необходимо получить существующие записи из пула
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица номенклатуры для расчета резервирования
Функция НоваяТаблицаНоменклатуры(Параметры = Неопределено)
	
	ПереданаТаблицаНоменклатуры = Параметры <> Неопределено И Параметры.Свойство("ТаблицаНоменклатуры");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пул.ДокументОснование  КАК Ссылка,
	|	Пул.Организация        КАК Организация,
	|	Пул.Номенклатура       КАК Номенклатура,
	|	Пул.Характеристика     КАК Характеристика,
	|	Пул.ВидПродукции       КАК ВидПродукции,
	|	Пул.Шаблон             КАК Шаблон,
	|	Пул.СпособВводаВОборот КАК СпособВводаВОборот,
	|	1                      КАК Количество
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК Пул
	|ГДЕ
	|	&ВыбратьДанныеПула
	|	И Пул.ДокументОснование = &Документ";
	
	Если Параметры = Неопределено Тогда
		Запрос.УстановитьПараметр("Документ", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Документ", Параметры.Документ);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ВыбратьДанныеПула", ПереданаТаблицаНоменклатуры);
	ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Если ПереданаТаблицаНоменклатуры Тогда
		
		Для Каждого СтрокаТаблицы Из Параметры.ТаблицаНоменклатуры Цикл
			НоваяСтрока = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Ссылка = Параметры.Документ;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции

// Добавляет в соответствие с ключем документа массив кодов маркировки ,в случае значения Неопределено - в качестве 
// ключа используется текстовое значение "Неопределено".
// 
// Параметры:
// 	ВходноеЗначение - ВыборкаИзРезультатаЗапроса, Структура - сущетствующая структура данных с полями:
// 	 ДокументОснование, ЗаказНаЭмиссию, КодМаркировки, ХешСуммаКодаМаркировки.
// 	СоответствиеКодовОснованиям - Соответствие - Выходной параметр соответствие, в качестве ключа используется значение
// ДокументОснование, в качестве значения - массив структур кодов маркировки.
Процедура ДобавитьКодВСоответствиеКодовОснованиям(ВходноеЗначение, СоответствиеКодовОснованиям)
	
	КлючСоответствия = ВходноеЗначение.ДокументОснование;
	
	Если КлючСоответствия = Неопределено Тогда
		КлючСоответствия = "Неопределено";
	КонецЕсли;
	
	Если СоответствиеКодовОснованиям[КлючСоответствия] = Неопределено Тогда
		СоответствиеКодовОснованиям.Вставить(КлючСоответствия, Новый Массив);
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("ЗаказНаЭмиссию",         ВходноеЗначение.ЗаказНаЭмиссию);
	Данные.Вставить("КодМаркировки",          ВходноеЗначение.КодМаркировки);
	Данные.Вставить("ХешСуммаКодаМаркировки", ВходноеЗначение.ХешСуммаКодаМаркировки);
	
	СоответствиеКодовОснованиям[КлючСоответствия].Добавить(Данные);
	
КонецПроцедуры

// Возвращает значение документа основания из ключа соответствия. Используется для пребразования значения
// "Неопределено" в ключе соответствия в значение Неопределено.
// 
// Параметры:
// 	КлючИЗначение - КлючИЗначение - Описание
// Возвращаемое значение:
// 	Произвольный, Неопределено - Описание
Функция ДокументОснованиеИзСоответствияКодам(КлючИЗначение)
	
	ДокументОснование = КлючИЗначение.Ключ;
	
	Если ДокументОснование = "Неопределено" Тогда
		ДокументОснование = Неопределено;
	КонецЕсли;
	
	Возврат ДокументОснование;
	
КонецФункции

#КонецОбласти

Процедура ОчисткаПулаКодовМаркировкиПоЗаказуНаЭмиссию(ЗаказНаЭмиссию, ИдентификаторЗаказаСУЗ) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПулКодовМаркировкиСУЗ.КодМаркировки          КАК КодМаркировки,
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию           = &ЗаказНаЭмиссию
		|	И ПулКодовМаркировкиСУЗ.ИдентификаторЗаказаСУЗ = &ИдентификаторЗаказаСУЗ";

	Запрос.УстановитьПараметр("ЗаказНаЭмиссию",         ЗаказНаЭмиссию);
	Запрос.УстановитьПараметр("ИдентификаторЗаказаСУЗ", ИдентификаторЗаказаСУЗ);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Набор = СоздатьНаборЗаписей();
	Набор.Отбор.ЗаказНаЭмиссию.Установить(ЗаказНаЭмиссию);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Набор.Отбор.КодМаркировки.Установить(ВыборкаДетальныеЗаписи.КодМаркировки);
		Набор.Отбор.ХешСуммаКодаМаркировки.Установить(ВыборкаДетальныеЗаписи.ХешСуммаКодаМаркировки);
		Набор.Записать();
	КонецЦикла;

КонецПроцедуры

Функция НастройкиУдаленияНеиспользованныхКодовМаркировки()
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	ТаблицаНастроек.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	ТаблицаНастроек.Колонки.Добавить("ДатаЭмиссии",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	ДатаОтсчета = НачалоДня(ТекущаяУниверсальнаяДата());
	Сутки = 86400;
	СрокХранения = ДатаОтсчета - Сутки * 30;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.Антисептики;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	СрокХранения = ДатаОтсчета - Сутки * 60;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	СрокХранения = ДатаОтсчета - Сутки * 90;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.Шины;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Строка = ТаблицаНастроек.Добавить();
	Строка.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи;
	Строка.ДатаЭмиссии  = СрокХранения;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

#Область ЗаполнениеДереваСуществующихУпаковок

Функция ПолучитьДанныеУпаковокСоСтруктурой(ТаблицаУпаковок)
	
	ДанныеУпаковок = Новый Соответствие;
	МассивУпаковок = Новый Массив;
	
	Для Каждого Строка Из ТаблицаУпаковок Цикл
		
		ДанныеУпаковки = ИнициализироватьСтруктуруДанныхУпаковки();
		
		Если Строка.БезУпаковки Тогда
			ДанныеУпаковки.БезУпаковки = Истина;
		ИначеЕсли Строка.ПроизвольнаяУпаковка Тогда
			ДанныеУпаковки.ЭтоПроизвольнаяУпаковка = Истина;
		ИначеЕсли ЗначениеЗаполнено(Строка.СоставУпаковки) Тогда
			СтрокаСоставаУпаковки = ПолучитьСтрокуДереваПоХешСуммеУпаковки(
				Строка.СоставУпаковки.Получить(),
				Строка.ХешСуммаУпаковки);
			Если СтрокаСоставаУпаковки = Неопределено Тогда
				МассивУпаковок.Добавить(Строка.ШтрихкодУпаковки);
			Иначе
				ДеревоСтруктурыУпаковки = ИнициализироватьДеревоСтруктурыУпаковки();
				ЗаполнитьСтруктуруУпаковкиИзИстории(ДеревоСтруктурыУпаковки, СтрокаСоставаУпаковки);
				ДанныеУпаковки.Вставить("ДеревоСтруктурыУпаковки", ДеревоСтруктурыУпаковки);
			КонецЕсли;
		Иначе
			МассивУпаковок.Добавить(Строка.ШтрихкодУпаковки);
		КонецЕсли;
		
		ДанныеУпаковок.Вставить(Строка.ХешСуммаУпаковки, ДанныеУпаковки);
		
	КонецЦикла;
	
	Если МассивУпаковок.Количество() = 0 Тогда
		Возврат ДанныеУпаковок;
	КонецЕсли;
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(МассивУпаковок);
	
	УпаковкиШтрихкодов = Новый Соответствие;
	
	Для Каждого Строка Из ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
		
		НайденнаяСтрока = ТаблицаУпаковок.Найти(Строка.ШтрихкодУпаковки, "ШтрихкодУпаковки");
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоСтруктурыУпаковки = ИнициализироватьДеревоСтруктурыУпаковки();
		
		ЗаполнитьСтруктуруУпаковки(ДеревоСтруктурыУпаковки, Строка, УпаковкиШтрихкодов);
		
		ДанныеУпаковок[НайденнаяСтрока.ХешСуммаУпаковки].Вставить("ДеревоСтруктурыУпаковки", ДеревоСтруктурыУпаковки);
		
	КонецЦикла;
	
	ЗаполнитьНаименованиеУпаковок(УпаковкиШтрихкодов);
	
	Возврат ДанныеУпаковок;
	
КонецФункции

Процедура ЗаполнитьСтруктуруУпаковкиИзИстории(Приемник, Источник)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПриемника = Приемник.Строки.Добавить();
	СтрокаПриемника.ЕдиницаИзмерения = Источник.Наименование;
	Если Источник.КоличествоУпаковок = 0 Тогда
		СтрокаПриемника.КоличествоВложенныхЕдиниц = Источник.Коэффициент;
	Иначе
		СтрокаПриемника.КоличествоВложенныхЕдиниц = Источник.КоличествоУпаковок;
	КонецЕсли;
	СтрокаПриемника.КоличествоВУпаковке = Источник.Коэффициент;
	
	ЗаполнитьСтруктуруУпаковкиИзИстории(СтрокаПриемника, Источник.Родитель);
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруУпаковки(Приемник, Источник, УпаковкиШтрихкодов)
	
	Если Источник.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПриемника = Приемник.Строки.Добавить();
	СтрокаПриемника.ЕдиницаИзмерения          = "";
	СтрокаПриемника.КоличествоВложенныхЕдиниц = Источник.Строки.Количество();
	СтрокаПриемника.КоличествоВУпаковке       = Источник.КоличествоПотребительскихУпаковокПоДаннымИБ;
	
	Если Источник.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
		УпаковкиШтрихкодов.Вставить(Источник.ШтрихкодУпаковки, СтрокаПриемника);
	КонецЕсли;
	
	Если Источник.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСтруктуруУпаковки(СтрокаПриемника, Источник.Строки[0], УпаковкиШтрихкодов);
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеУпаковок(УпаковкиШтрихкодов)
	
	Если УпаковкиШтрихкодов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодыУпаковок = Новый Массив;
	Для Каждого Элемент Из УпаковкиШтрихкодов Цикл
		ШтрихкодыУпаковок.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка                        КАК ШтрихкодУпаковки,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ШтрихкодыУпаковок.Упаковка) КАК ЕдиницаИзмерения
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка В (&ШтрихкодыУпаковок)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
			УпаковкиШтрихкодов[Выборка.ШтрихкодУпаковки].ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтрокуДереваПоХешСуммеУпаковки(Источник, ХешСуммаУпаковки)
	
	Если Источник.Строки.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли Источник.Строки[0].ХешСуммаУпаковки = ХешСуммаУпаковки Тогда
		Возврат Источник.Строки[0];
	Иначе
		Возврат ПолучитьСтрокуДереваПоХешСуммеУпаковки(Источник.Строки[0], ХешСуммаУпаковки);
	КонецЕсли;
	
КонецФункции

Функция ИнициализироватьСтруктуруДанныхУпаковки()
	
	ДанныеУпаковки = Новый Структура;
	ДанныеУпаковки.Вставить("БезУпаковки",             Ложь);
	ДанныеУпаковки.Вставить("ЭтоПроизвольнаяУпаковка", Ложь);
	
	Возврат ДанныеУпаковки;
	
КонецФункции

Функция ИнициализироватьДеревоСтруктурыУпаковки()
	
	ДеревоСтруктурыУпаковки = Новый ДеревоЗначений;
	ДеревоСтруктурыУпаковки.Колонки.Добавить("КоличествоВУпаковке",        ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДеревоСтруктурыУпаковки.Колонки.Добавить("КоличествоВложенныхЕдиниц",  ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДеревоСтруктурыУпаковки.Колонки.Добавить("ЕдиницаИзмерения",           ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Возврат ДеревоСтруктурыУпаковки;
	
КонецФункции

Функция ДобавитьСтрокуВСоставПроизвольнойУпаковки(СтрокаУпаковки, Выборка,
	ОбщиеПоля, ПредставлениеНоменклатуры, СодержимоеУпаковки)
	
	СтрокаПродукции = СтрокаУпаковки.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаПродукции, Выборка, ОбщиеПоля);
	СтрокаПродукции.Количество = Выборка.КоличествоВУпаковке;
	СтрокаПродукции.КоличествоИтог = Выборка.КоличествоВУпаковке * Выборка.КоличествоУпаковок;
	СтрокаПродукции.Содержимое = ПредставлениеНоменклатуры;
	СтрокаПродукции.ПредставлениеНоменклатуры = СтрокаПродукции.Содержимое;
	
	Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
		ЭлементСодержимого = СодержимоеУпаковки.Добавить();
		ЭлементСодержимого.Номенклатура   = Выборка.НоменклатураПредставление;
		ЭлементСодержимого.Характеристика = Выборка.ХарактеристикаПредставление;
		ЭлементСодержимого.Серия          = "";
		ЭлементСодержимого.Количество     = Выборка.КоличествоВУпаковке;
	ИначеЕсли ЗначениеЗаполнено(СтрокаПродукции.Содержимое) Тогда
		ЭлементСодержимого = СодержимоеУпаковки.Добавить();
		ЭлементСодержимого.Номенклатура   = СтрокаПродукции.Содержимое;
		ЭлементСодержимого.Характеристика = "";
		ЭлементСодержимого.Серия          = "";
		ЭлементСодержимого.Количество     = Выборка.КоличествоВУпаковке;
	КонецЕсли;
	
	Возврат СтрокаПродукции;
	
КонецФункции

Процедура СтруктураУпаковкиИзДерева(ДеревоСтруктурыУпаковки, СтруктураУпаковки)
	
	Если ДеревоСтруктурыУпаковки.Строки.Количество() > 0 Тогда
		СтруктураУпаковки.Добавить(ДеревоСтруктурыУпаковки.Строки[0]);
		СтруктураУпаковкиИзДерева(ДеревоСтруктурыУпаковки.Строки[0], СтруктураУпаковки);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросДереваСуществующихУпаковок(Параметры)
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",     Параметры.Документ);
	Запрос.УстановитьПараметр("ВидПродукции", Параметры.ВидПродукции);
	
	ДополнительноеУсловие =
	"	И ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(
	|		Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)" + ?(ЗначениеЗаполнено(Параметры.ВидПродукции), "
	|	И ПулКодовМаркировки.ВидПродукции = &ВидПродукции", "");
	
	ДополнитьЗапросКодамиСМРЦ(Запрос, ЭтоЗаказНаЭмиссию, ДополнительноеУсловие);
	
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.КодМаркировки,
	|	Таблица.ХешСуммаКодаМаркировки,
	|	Таблица.КодМаркировкиСМРЦ,
	|	Таблица.ХешСуммаКодаМаркировкиСМРЦ
	|ПОМЕСТИТЬ ТаблицаКодовСМРЦ
	|ИЗ
	|	&ТаблицаКодовСМРЦ КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|	ПулКодовМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ПулКодовМаркировки.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировки.Характеристика КАК Характеристика,
	|	ПулКодовМаркировки.ВидПродукции КАК ВидПродукции,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК GTIN,
	|	ПулКодовМаркировки.Шаблон КАК Шаблон,
	|	ПулКодовМаркировки.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ, ПулКодовМаркировки.КодМаркировки) КАК КодМаркировки,
	|	ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ, ПулКодовМаркировки.ХешСуммаКодаМаркировки) КАК ХешСуммаКодаМаркировки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|				ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|			ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|				ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		Иначе """"
	|	КОНЕЦ КАК ЗначениеШтрихкодаУпаковки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|				ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|			ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|				ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода
	|		Иначе """"
	|	КОНЕЦ КАК ХешСуммаЗначенияШтрихкодаУпаковки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|						ПулКодовМаркировки.КодМаркировки) = ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|					И ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|						ПулКодовМаркировки.ХешСуммаКодаМаркировки) = ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода
	|					ТОГДА 1 // Набор или Групповая упаковка без логистической упаковки
	|				ИНАЧЕ 2 // Составляющая набора или групповой упаковки
	|			КОНЕЦ
	|		ИНАЧЕ 0 // Потребительская упаковка / Групповая упаковка / Набор, находящиеся в логистической упаковке
	|	КОНЕЦ КАК ПризнакСоставляющей" + ?(Параметры.ДляПечати, ",
	|	ПулКодовМаркировки.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1) КАК Распечатан", "") + "
	|ПОМЕСТИТЬ " + ?(Параметры.ДляПечати, "ВТКодыМаркировкиДокумента", "ВТКодыМаркировки") + "
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКодовСМРЦ КАК ТаблицаКодовСМРЦ
	|		ПО ПулКодовМаркировки.КодМаркировки = ТаблицаКодовСМРЦ.КодМаркировки
	|			И ПулКодовМаркировки.ХешСуммаКодаМаркировки = ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(
	|		Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)" + ?(ЗначениеЗаполнено(Параметры.ВидПродукции), "
	|	И ПулКодовМаркировки.ВидПродукции = &ВидПродукции", "") + ?(Параметры.ДляПечати, "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.ХешСуммаУпаковки,
	|	Упаковки.ШтрихкодУпаковки
	|ПОМЕСТИТЬ ВТШтрихкодыУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		КодыМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|		КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|		МАКСИМУМ(КодыМаркировки.Распечатан) КАК Распечатан
	|	ИЗ
	|		ВТКодыМаркировкиДокумента КАК КодыМаркировки
	|	ГДЕ
	|		КодыМаркировки.ПризнакСоставляющей <> 2
	|	СГРУППИРОВАТЬ ПО
	|		КодыМаркировки.ХешСуммаУпаковки,
	|		КодыМаркировки.ШтрихкодУпаковки
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КодыМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|		КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|		МАКСИМУМ(ВложенныеЕдиницы.Распечатан) КАК Распечатан
	|	ИЗ
	|		ВТКодыМаркировкиДокумента КАК ВложенныеЕдиницы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировкиДокумента КАК КодыМаркировки
	|			ПО ВложенныеЕдиницы.ЗначениеШтрихкодаУпаковки = КодыМаркировки.КодМаркировки
	|			И ВложенныеЕдиницы.ХешСуммаЗначенияШтрихкодаУпаковки = КодыМаркировки.ХешСуммаКодаМаркировки
	|	ГДЕ
	|		ВложенныеЕдиницы.ПризнакСоставляющей = 2
	|	СГРУППИРОВАТЬ ПО
	|		КодыМаркировки.ХешСуммаУпаковки,
	|		КодыМаркировки.ШтрихкодУпаковки) КАК Упаковки
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.ХешСуммаУпаковки,
	|	Упаковки.ШтрихкодУпаковки
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(Упаковки.Распечатан) = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.*
	|ПОМЕСТИТЬ ВТКодыМаркировки
	|ИЗ
	|	ВТКодыМаркировкиДокумента КАК КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|		ПО КодыМаркировки.ХешСуммаУпаковки = ШтрихкодыУпаковок.ХешСуммаУпаковки
	|				И КодыМаркировки.ШтрихкодУпаковки = ШтрихкодыУпаковок.ШтрихкодУпаковки
	|ГДЕ
	|	НЕ ШтрихкодыУпаковок.ХешСуммаУпаковки ЕСТЬ NULL
	|	ИЛИ КодыМаркировки.ПризнакСоставляющей = 2 И НЕ КодыМаркировки.Распечатан", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|	МАКСИМУМ(КодыМаркировки.ШтрихкодУпаковки) КАК ШтрихкодУпаковки,
	|	МАКСИМУМ(КодыМаркировки.ПризнакСоставляющей = 1) КАК БезУпаковки,
	|	КОЛИЧЕСТВО(Различные КодыМаркировки.ШтрихкодУпаковки) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТХешСуммыУпаковок
	|ИЗ
	|	ВТКодыМаркировки КАК КодыМаркировки
	|ГДЕ
	|	КодыМаркировки.ПризнакСоставляющей <> 2
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировки.ХешСуммаУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХешСуммыУпаковок.ХешСуммаУпаковки
	|ПОМЕСТИТЬ ВТПроизвольныеУпаковки
	|ИЗ
	|	ВТХешСуммыУпаковок КАК ХешСуммыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировки КАК КодыМаркировки
	|		ПО ХешСуммыУпаковок.ХешСуммаУпаковки = КодыМаркировки.ХешСуммаУпаковки
	|			И ХешСуммыУпаковок.ШтрихкодУпаковки = КодыМаркировки.ШтрихкодУпаковки
	|			И КодыМаркировки.ПризнакСоставляющей = 0
	|СГРУППИРОВАТЬ ПО
	|	ХешСуммыУпаковок.ХешСуммаУпаковки,
	|	ХешСуммыУпаковок.ШтрихкодУпаковки
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КодыМаркировки.Номенклатура) > 1
	|	ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КодыМаркировки.Характеристика) > 1
	|	ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КодыМаркировки.GTIN) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХешСуммыУпаковок.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|	ХешСуммыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ХешСуммыУпаковок.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ХешСуммыУпаковок.БезУпаковки КАК БезУпаковки,
	|	НЕ ПроизвольныеУпаковки.ХешСуммаУпаковки ЕСТЬ NULL КАК ПроизвольнаяУпаковка,
	|	История.СоставУпаковки КАК СоставУпаковки" + ?(Параметры.ДляПечати, ",
	|	ШаблоныЭтикеток.СоставУпаковки КАК СоставУпаковкиСШаблономЭтикетки", "") + "
	|ИЗ
	|	ВТХешСуммыУпаковок КАК ХешСуммыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПроизвольныеУпаковки КАК ПроизвольныеУпаковки
	|		ПО ХешСуммыУпаковок.ХешСуммаУпаковки = ПроизвольныеУпаковки.ХешСуммаУпаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияСоставаУпаковкиИСМП КАК История
	|		ПО ХешСуммыУпаковок.ХешСуммаУпаковки = История.ХешСуммаУпаковки" + ?(Параметры.ДляПечати, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШаблонаЭтикеткиУпаковкиИСМП КАК ШаблоныЭтикеток
	|		ПО ХешСуммыУпаковок.ХешСуммаУпаковки = ШаблоныЭтикеток.ХешСуммаУпаковки", "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|	КодыМаркировки.Номенклатура КАК Номенклатура,
	|	КодыМаркировки.Характеристика КАК Характеристика,
	|	КодыМаркировки.ВидПродукции КАК ВидПродукции,
	|	КодыМаркировки.GTIN КАК GTIN,
	|	КодыМаркировки.Шаблон КАК Шаблон,
	|	КодыМаркировки.СпособВводаВОборот КАК СпособВводаВОборот,
	|	КодыМаркировки.ПризнакСоставляющей КАК ПризнакСоставляющей,
	|	ХешСуммыУпаковок.КоличествоУпаковок КАК КоличествоУпаковок,
	|	КОЛИЧЕСТВО(КодыМаркировки.КодМаркировки) КАК КоличествоВУпаковке,
	|	МАКСИМУМ(КодыМаркировки.ХешСуммаКодаМаркировки) КАК КодМаркировки,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеИзКешаОписанияОстатков,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КодыМаркировки.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КодыМаркировки.Характеристика) КАК ХарактеристикаПредставление
	|ИЗ
	|	ВТКодыМаркировки КАК КодыМаркировки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТХешСуммыУпаковок КАК ХешСуммыУпаковок
	|		ПО КодыМаркировки.ХешСуммаУпаковки = ХешСуммыУпаковок.ХешСуммаУпаковки
	|		И КодыМаркировки.ШтрихкодУпаковки = ХешСуммыУпаковок.ШтрихкодУпаковки
	|		И КодыМаркировки.ПризнакСоставляющей <> 2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО КодыМаркировки.GTIN = КэшОписанияОстатков.GTIN
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировки.ХешСуммаУпаковки,
	|	КодыМаркировки.Номенклатура,
	|	КодыМаркировки.Характеристика,
	|	КодыМаркировки.ВидПродукции,
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.Шаблон,
	|	КодыМаркировки.СпособВводаВОборот,
	|	КодыМаркировки.ПризнакСоставляющей,
	|	ХешСуммыУпаковок.КоличествоУпаковок,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныеЕдиницы.ХешСуммаУпаковки,
	|	ВложенныеЕдиницы.Номенклатура,
	|	ВложенныеЕдиницы.Характеристика,
	|	ВложенныеЕдиницы.ВидПродукции,
	|	ВложенныеЕдиницы.GTIN,
	|	ВложенныеЕдиницы.Шаблон,
	|	ВложенныеЕдиницы.СпособВводаВОборот,
	|	ВложенныеЕдиницы.ПризнакСоставляющей,
	|	ХешСуммыУпаковок.КоличествоУпаковок * Количество(Различные КодыМаркировки.ХешСуммаКодаМаркировки),
	|	ВЫРАЗИТЬ(Количество(ВложенныеЕдиницы.КодМаркировки) / Количество(Различные КодыМаркировки.ХешСуммаКодаМаркировки) КАК
	|		ЧИСЛО(10, 0)),
	|	МАКСИМУМ(КодыМаркировки.ХешСуммаКодаМаркировки),
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """"),
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВложенныеЕдиницы.Номенклатура),
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВложенныеЕдиницы.Характеристика)
	|ИЗ
	|	ВТКодыМаркировки КАК ВложенныеЕдиницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировки КАК КодыМаркировки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТХешСуммыУпаковок КАК ХешСуммыУпаковок
	|			ПО КодыМаркировки.ХешСуммаУпаковки = ХешСуммыУпаковок.ХешСуммаУпаковки
	|			И КодыМаркировки.ШтрихкодУпаковки = ХешСуммыУпаковок.ШтрихкодУпаковки
	|		ПО ВложенныеЕдиницы.ХешСуммаУпаковки = КодыМаркировки.ХешСуммаУпаковки
	|		И ВложенныеЕдиницы.ЗначениеШтрихкодаУпаковки = КодыМаркировки.КодМаркировки
	|		И ВложенныеЕдиницы.ХешСуммаЗначенияШтрихкодаУпаковки = КодыМаркировки.ХешСуммаКодаМаркировки
	|		И ВложенныеЕдиницы.ПризнакСоставляющей = 2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО ВложенныеЕдиницы.GTIN = КэшОписанияОстатков.GTIN
	|СГРУППИРОВАТЬ ПО
	|	ВложенныеЕдиницы.ХешСуммаУпаковки,
	|	ВложенныеЕдиницы.Номенклатура,
	|	ВложенныеЕдиницы.Характеристика,
	|	ВложенныеЕдиницы.ВидПродукции,
	|	ВложенныеЕдиницы.GTIN,
	|	ВложенныеЕдиницы.Шаблон,
	|	ВложенныеЕдиницы.СпособВводаВОборот,
	|	ВложенныеЕдиницы.ПризнакСоставляющей,
	|	ХешСуммыУпаковок.КоличествоУпаковок,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """")
	|УПОРЯДОЧИТЬ ПО
	|	ВидПродукции,
	|	ХешСуммаУпаковки,
	|	КодМаркировки,
	|	ПризнакСоставляющей";
	
	Возврат Запрос;
	
КонецФункции

Процедура ЗаполнитьДанныеДляПечатиВДеревеУпаковок(ДеревоУпаковок, ТаблицаУпаковок)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		СтрокаТаблицы = ТаблицаУпаковок.Найти(СтрокаДерева.ХешСуммаУпаковки);
		Если СтрокаТаблицы <> Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицы.СоставУпаковкиСШаблономЭтикетки) Тогда
			СоставУпаковкиСШаблономЭтикетки = СтрокаТаблицы.СоставУпаковкиСШаблономЭтикетки.Получить();
			Если СоставУпаковкиСШаблономЭтикетки.Строки.Количество() = 1 Тогда
				ЗаполнитьДанныеДляПечатиСтрокиВДеревеУпаковок(СтрокаДерева, СоставУпаковкиСШаблономЭтикетки.Строки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляПечатиСтрокиВДеревеУпаковок(Приемник, Источник)
	
	Приемник.ШаблонЭтикетки = Источник.ШаблонЭтикетки;
	Если Приемник.ЭтоУпаковка Тогда
		Если Источник.КоличествоЭкземпляров > 0 Тогда
			Приемник.КоличествоЭкземпляров = Источник.КоличествоЭкземпляров;
		Иначе
			Приемник.КоличествоЭкземпляров = 1;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСтрок = Приемник.Строки.Количество();
	Если КоличествоСтрок = 1 И Источник.Строки.Количество() = 1 Тогда
		ЗаполнитьДанныеДляПечатиСтрокиВДеревеУпаковок(Приемник.Строки[0], Источник.Строки[0]);
	ИначеЕсли КоличествоСтрок > 1 Тогда
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,GTIN");
		Для Каждого СтрокаПриемника Из Приемник.Строки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПриемника);
			НайденныеСтроки = Источник.Строки.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьДанныеДляПечатиСтрокиВДеревеУпаковок(СтрокаПриемника, НайденныеСтроки[0]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтражениеАгрегацииВПулеИПодготовкаКПечати

Процедура ЗаполнитьДанныеДляАгрегации(ДеревоМаркированнойПродукции, ЗаполнитьДанныеВДереве = Истина,
	ТаблицаКодовМаркировки = Неопределено, ТаблицаДляЗаписиИстории = Неопределено)
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ЗаполнитьДанныеВДереве",  ЗаполнитьДанныеВДереве);
	ПараметрыВыполнения.Вставить("ТаблицаКодовМаркировки",  ТаблицаКодовМаркировки);
	ПараметрыВыполнения.Вставить("ТаблицаДляЗаписиИстории", ТаблицаДляЗаписиИстории);
	ПараметрыВыполнения.Вставить("ИспользуетсяМРЦ",
		ДеревоМаркированнойПродукции.Колонки.Найти("ВключаетМРЦ") <> Неопределено);
	
	Если ЗаполнитьДанныеВДереве Тогда
		ДеревоМаркированнойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
		ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСуммаУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	КонецЕсли;
	
	ЗаполнитьДанныеДляАгрегацииДереваУпаковок(ДеревоМаркированнойПродукции.Строки, ПараметрыВыполнения);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДляАгрегацииДереваУпаковок(СтрокиМаркированнойПродукции, ПараметрыВыполнения)
	
	Для Каждого СтрокаМаркированнойПродукции Из СтрокиМаркированнойПродукции Цикл
		
		Если ТипЗнч(СтрокаМаркированнойПродукции.ТипУпаковки) = Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП") Тогда
			ЗаполнитьДанныеДляАгрегацииДереваУпаковок(СтрокаМаркированнойПродукции.Строки, ПараметрыВыполнения);
		ИначеЕсли СтрокаМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или (СтрокаМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или СтрокаМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
			И СтрокаМаркированнойПродукции.Строки.Количество() = 0 Тогда
			Если ПараметрыВыполнения.ЗаполнитьДанныеВДереве Тогда
				Если ПараметрыВыполнения.ИспользуетсяМРЦ
					И СтрокаМаркированнойПродукции.ВключаетМРЦ Тогда
					СтрокаМаркированнойПродукции.Штрихкод = КодМаркировкиДляСохраненияВПул(СтрокаМаркированнойПродукции);
				КонецЕсли;
				СтрокаМаркированнойПродукции.ХешСумма = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаМаркированнойПродукции.Штрихкод);
			КонецЕсли;
		ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаМаркированнойПродукции.ТипУпаковки) Тогда
			ПараметрыУпаковки = Новый Структура;
			ПараметрыУпаковки.Вставить("ПроизвольнаяОдноуровневаяУпаковка",
				ЭтоПроизвольнаяОдноуровневаяУпаковка(СтрокаМаркированнойПродукции.Строки));
			ПараметрыУпаковки.Вставить("МонотоварнаяУпаковкаОдинаковойСтруктуры", Ложь);
			ПараметрыУпаковки.Вставить("ШтрихкодУпаковки", Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка());
			ПараметрыУпаковки.Вставить("ХешСуммаУпаковки", "");
			Если Не ПараметрыУпаковки.ПроизвольнаяОдноуровневаяУпаковка
				И СтрокаМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ПараметрыУпаковки.МонотоварнаяУпаковкаОдинаковойСтруктуры =
					ЭтоМонотоварнаяУпаковкаОдинаковойСтруктуры(СтрокаМаркированнойПродукции.Строки);
			КонецЕсли;
			
			ОбработатьСтрокиСоставаУпаковки(ПараметрыВыполнения.ТаблицаДляЗаписиИстории, ПараметрыУпаковки, СтрокаМаркированнойПродукции);
			
			ЗаполнитьТаблицуКодовМаркировки(
				ПараметрыВыполнения, ПараметрыУпаковки, СтрокаМаркированнойПродукции.Строки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция не рассчитана на проверку всей структуры упаковки.
// После доработки формы проверки и подбора для работы с наборами и групповыми упаковками,
// необходимо доработать состав полей дерева маркируемой продукции,
// для определения вида упаковки непосредственно при ее формировании или получении.
Функция ЭтоМонотоварнаяУпаковкаОдинаковойСтруктуры(СтрокиМаркированнойПродукции)
	
	Если СтрокиМаркированнойПродукции.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПоляПоиска = "ВидУпаковки,ТипУпаковки,Номенклатура,Характеристика,Серия,GTIN";
	ПоляПоискаУпаковки = "КоличествоПодчиненныхВсего,КоличествоПодчиненныхПотребительскихУпаковок";
	
	Для Каждого СтрокаМаркированнойПродукции Из СтрокиМаркированнойПродукции Цикл
		
		Если СтрокаМаркированнойПродукции.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая
			И СтрокаМаркированнойПродукции.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская
			И СтрокаМаркированнойПродукции.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Групповая
			И СтрокаМаркированнойПродукции.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Набор Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если СтрокиМаркированнойПродукции.Индекс(СтрокаМаркированнойПродукции) = 0 Тогда
			Если СтрокаМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтруктураПоиска = Новый Структура(ПоляПоиска);
			Иначе
				СтруктураПоиска = Новый Структура(СтрШаблон("%1,%2", ПоляПоиска, ПоляПоискаУпаковки));
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаМаркированнойПродукции);
		Иначе
			Для Каждого ЭлементПоиска Из СтруктураПоиска Цикл
				Если СтрокаМаркированнойПродукции[ЭлементПоиска.Ключ] <> ЭлементПоиска.Значение Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаМаркированнойПродукции = СтрокиМаркированнойПродукции[0];
	Если СтрокаМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат ЭтоМонотоварнаяУпаковкаОдинаковойСтруктуры(СтрокаМаркированнойПродукции.Строки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбработатьСтрокиСоставаУпаковки(ТаблицаДляЗаписиИстории, ПараметрыУпаковки, СтрокаМаркированнойПродукции)
	
	Если ПараметрыУпаковки.ПроизвольнаяОдноуровневаяУпаковка Тогда
		ОбработатьСтрокиСоставаПроизвольнойОдноуровневойУпаковки(ПараметрыУпаковки, СтрокаМаркированнойПродукции.Строки);
	ИначеЕсли ПараметрыУпаковки.МонотоварнаяУпаковкаОдинаковойСтруктуры Тогда
		ОбработатьСтрокуСоставаМонотоварнойУпаковкиОдинаковойСтруктуры(ТаблицаДляЗаписиИстории, ПараметрыУпаковки, СтрокаМаркированнойПродукции);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокиСоставаПроизвольнойОдноуровневойУпаковки(ПараметрыУпаковки, СтрокиМаркированнойПродукции)
	
	ТаблицаСостава = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НоваяСоставУпаковки();
	Для Каждого СтрокаМаркированнойПродукции Из СтрокиМаркированнойПродукции Цикл
		Если Не ЗначениеЗаполнено(СтрокаМаркированнойПродукции.Номенклатура) Тогда
			Возврат;
		КонецЕсли;
		СтрокаСостава = ТаблицаСостава.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСостава, СтрокаМаркированнойПродукции);
		СтрокаСостава.Количество = 1;
	КонецЦикла;
	
	ТаблицаСостава.Свернуть("Номенклатура,Характеристика,Серия,GTIN,Шаблон", "Количество");
	ПараметрыУпаковки.ХешСуммаУпаковки = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ХешСуммаУпаковки(ТаблицаСостава);
	ПараметрыУпаковки.ШтрихкодУпаковки = СтрокиМаркированнойПродукции.Родитель.ШтрихкодУпаковки;
	
Конецпроцедуры

Процедура ОбработатьСтрокуСоставаМонотоварнойУпаковкиОдинаковойСтруктуры(ТаблицаДляЗаписиИстории, ПараметрыУпаковки, СтрокаМаркированнойПродукции)
	
	МассивСтрокУпаковки = Новый Массив;
	ЗаполнитьМассивСтрокУпаковки(МассивСтрокУпаковки, СтрокаМаркированнойПродукции);
	
	ВГраница = МассивСтрокУпаковки.ВГраница();
	Если ВГраница <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТовара = МассивСтрокУпаковки[ВГраница];
	
	Если Не ЗначениеЗаполнено(СтрокаТовара.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТовара.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или СтрокаТовара.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
		МассивСтрокУпаковки.Удалить(ВГраница);
		ВГраница = ВГраница - 1;
	КонецЕсли;
	
	СоставУпаковки          = РегистрыСведений.ИсторияИспользованияСоставаУпаковкиИСМП.ИнициализироватьСоставУпаковки();
	СтрокаДляРасчетаХеша    = ИнтеграцияИСКлиентСервер.СтрокаДляРасчетаХешаСоставаУпаковки(СтрокаТовара);
	СтрокаСоставаУпаковки   = Неопределено;
	КоличествоПредставление = "";
	
	Для Индекс = 0 По ВГраница Цикл
		СтрокаУпаковки = МассивСтрокУпаковки[ВГраница - Индекс];
		Если СтрокаСоставаУпаковки = Неопределено Тогда
			КоличествоУпаковок    = 0;
			Коэффициент           = СтрокаУпаковки.Строки.Количество();
			СтрокаСоставаУпаковки = СоставУпаковки.Строки.Добавить();
		Иначе
			КоличествоУпаковок    = СтрокаУпаковки.Строки.Количество();
			Коэффициент           = КоличествоУпаковок * СтрокаСоставаУпаковки.Коэффициент;
			СтрокаСоставаУпаковки = СтрокаСоставаУпаковки.Строки.Добавить();
		КонецЕсли;
		СтрокаСоставаУпаковки.КоличествоУпаковок = КоличествоУпаковок;
		СтрокаСоставаУпаковки.Коэффициент        = Коэффициент;
		
		КоличествоПредставление = ИнтеграцияИСКлиентСервер.ПредставлениеКоличестваСоставаУпаковкиДляРасчетаХеша(
			СтрокаСоставаУпаковки, КоличествоПредставление);
		СтрокаСоставаУпаковки.ХешСуммаУпаковки = ОбщегоНазначенияИС.ХэшСуммаСтроки(
			СтрокаДляРасчетаХеша + КоличествоПредставление);
		
		Если ТаблицаДляЗаписиИстории <> Неопределено Тогда
			СтрокаСоставаУпаковки.ЕдиницаИзмерения = НСтр("ru = 'Короб'");
			СтрокаСоставаУпаковки.Наименование     = СтрШаблон("%1 (%2 %3)",
				СтрокаСоставаУпаковки.ЕдиницаИзмерения,
				СтрокаСоставаУпаковки.Коэффициент,
				НСтр("ru = 'ед'"));
			СтрокаСоставаУпаковки.Представление    = ИнтеграцияИСКлиентСервер.ПредставлениеСоставаУпаковки(
				СтрокаСоставаУпаковки, СтрокаСоставаУпаковки.Родитель);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДляЗаписиИстории <> Неопределено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",     СтрокаТовара.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",   СтрокаТовара.Характеристика);
		СтруктураПоиска.Вставить("ХешСуммаУпаковки", СтрокаСоставаУпаковки.ХешСуммаУпаковки);
		Если ТаблицаДляЗаписиИстории.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			СтрокаДляЗаписиИстории = ТаблицаДляЗаписиИстории.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаписиИстории, СтруктураПоиска);
			СтрокаДляЗаписиИстории.СоставУпаковки = Новый ХранилищеЗначения(СоставУпаковки);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыУпаковки.ШтрихкодУпаковки = МассивСтрокУпаковки[0].ШтрихкодУпаковки;
	ПараметрыУпаковки.ХешСуммаУпаковки = СтрокаСоставаУпаковки.ХешСуммаУпаковки;
	
Конецпроцедуры

Процедура ЗаполнитьМассивСтрокУпаковки(МассивСтрокУпаковки, СтрокаМаркированнойПродукции)
	
	МассивСтрокУпаковки.Добавить(СтрокаМаркированнойПродукции);
	
	Если СтрокаМаркированнойПродукции.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаМаркированнойПродукции.Строки.Количество() = 0 Тогда
		МассивСтрокУпаковки.Очистить();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМассивСтрокУпаковки(МассивСтрокУпаковки, СтрокаМаркированнойПродукции.Строки[0]);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуКодовМаркировки(
	ПараметрыВыполнения, ПараметрыУпаковки, СтрокиМаркированнойПродукции, ТаблицаСостава = Неопределено)
	
	РодительскаяСтрока = СтрокиМаркированнойПродукции.Родитель;
	ВерхнийУровень = ТаблицаСостава = Неопределено;
	
	Если ВерхнийУровень Тогда
		ТаблицаСостава = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НоваяСоставУпаковки();
		ТаблицаСостава.Колонки.Добавить("КодМаркировки",          ОбщегоНазначения.ОписаниеТипаСтрока(200));
		ТаблицаСостава.Колонки.Добавить("ХешСуммаКодаМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ТаблицаСостава.Колонки.Добавить("ШтрихкодУпаковки",       Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	КонецЕсли;
	
	Если ВерхнийУровень
		И (РодительскаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
		Или РодительскаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
		
		НоваяСтрока = ТаблицаСостава.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, РодительскаяСтрока);
		Если ПараметрыВыполнения.ИспользуетсяМРЦ
			И РодительскаяСтрока.ВключаетМРЦ Тогда
			НоваяСтрока.КодМаркировки = КодМаркировкиДляСохраненияВПул(РодительскаяСтрока);
		Иначе
			НоваяСтрока.КодМаркировки = РодительскаяСтрока.Штрихкод;
		КонецЕсли;
		НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
		НоваяСтрока.Количество = 1;
		
		ПараметрыУпаковки.ШтрихкодУпаковки = РодительскаяСтрока.ШтрихкодУпаковки;
		ПараметрыУпаковки.ХешСуммаУпаковки = "";
		
		Если ПараметрыВыполнения.ЗаполнитьДанныеВДереве Тогда
			РодительскаяСтрока.Штрихкод = НоваяСтрока.КодМаркировки;
			РодительскаяСтрока.ХешСумма = НоваяСтрока.ХешСуммаКодаМаркировки;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаМаркированнойПродукции Из СтрокиМаркированнойПродукции Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаМаркированнойПродукции.ТипУпаковки) Тогда
			ЗаполнитьТаблицуКодовМаркировки(
				ПараметрыВыполнения, ПараметрыУпаковки, СтрокаМаркированнойПродукции.Строки, ТаблицаСостава);
		КонецЕсли;
		
		Если СтрокаМаркированнойПродукции.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая
			И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительскаяСтрока.ТипУпаковки) Тогда
			
			НоваяСтрока = ТаблицаСостава.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаМаркированнойПродукции,, "ШтрихкодУпаковки");
			Если ПараметрыВыполнения.ИспользуетсяМРЦ
				И СтрокаМаркированнойПродукции.ВключаетМРЦ Тогда
				НоваяСтрока.КодМаркировки = КодМаркировкиДляСохраненияВПул(СтрокаМаркированнойПродукции);
			Иначе
				НоваяСтрока.КодМаркировки = СтрокаМаркированнойПродукции.Штрихкод;
			КонецЕсли;
			НоваяСтрока.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(НоваяСтрока.КодМаркировки);
			НоваяСтрока.Количество = 1;
			
			Если ПараметрыВыполнения.ЗаполнитьДанныеВДереве Тогда
				СтрокаМаркированнойПродукции.Штрихкод = НоваяСтрока.КодМаркировки;
				СтрокаМаркированнойПродукции.ХешСумма = НоваяСтрока.ХешСуммаКодаМаркировки;
			КонецЕсли;
			
			Если РодительскаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или РодительскаяСтрока.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				НоваяСтрока.ШтрихкодУпаковки = РодительскаяСтрока.ШтрихкодУпаковки;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ВерхнийУровень И ТаблицаСостава.Количество() > 0 Тогда
		
		Если ЗначениеЗаполнено(ПараметрыУпаковки.ШтрихкодУпаковки) Тогда
			ШтрихкодУпаковки = ПараметрыУпаковки.ШтрихкодУпаковки;
		Иначе
			ШтрихкодУпаковки = РодительскаяСтрока.ШтрихкодУпаковки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрыУпаковки.ХешСуммаУпаковки) Тогда
			ХешСуммаУпаковки = ПараметрыУпаковки.ХешСуммаУпаковки;
		Иначе
			КопияСостава = ТаблицаСостава.Скопировать();
			КопияСостава.Свернуть("Номенклатура,Характеристика,Серия,GTIN", "Количество");
			ХешСуммаУпаковки = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.ХешСуммаУпаковки(КопияСостава);
		КонецЕсли;
		
		Если ПараметрыВыполнения.ТаблицаКодовМаркировки <> Неопределено Тогда
			Для Каждого СтрокаСостава Из ТаблицаСостава Цикл
				НоваяСтрока = ПараметрыВыполнения.ТаблицаКодовМаркировки.Добавить();
				НоваяСтрока.КодМаркировки          = СтрокаСостава.КодМаркировки;
				НоваяСтрока.ХешСуммаКодаМаркировки = СтрокаСостава.ХешСуммаКодаМаркировки;
				НоваяСтрока.ХешСуммаУпаковки       = ХешСуммаУпаковки;
				Если ЗначениеЗаполнено(СтрокаСостава.ШтрихкодУпаковки) Тогда
					НоваяСтрока.ШтрихкодУпаковки = СтрокаСостава.ШтрихкодУпаковки;
				Иначе
					НоваяСтрока.ШтрихкодУпаковки = ШтрихкодУпаковки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыВыполнения.ЗаполнитьДанныеВДереве Тогда
			РодительскаяСтрока.ХешСуммаУпаковки = ХешСуммаУпаковки;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьИзДереваПрочиеЗоныПересчета(ДеревоМаркированнойПродукции)
	
	СтрокиДерева    = ДеревоМаркированнойПродукции.Строки;
	КоличествоСтрок = СтрокиДерева.Количество();
	
	Для Счетчик = 1 По КоличествоСтрок Цикл
		Индекс = КоличествоСтрок - Счетчик;
		СтрокаДерева = СтрокиДерева[Индекс];
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) = Тип("ПеречислениеСсылка.ПрочиеЗоныПересчетаПродукцииИСМП") Тогда
			ПеренестиСтрокиДерева(СтрокиДерева, СтрокаДерева, Индекс);
			СтрокиДерева.Удалить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиСтрокиДерева(Приемник, Источник, Индекс)
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		Индекс = Индекс + 1;
		СтрокаПриемника = Приемник.Вставить(Индекс);
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника);
		ПеренестиСтрокиДерева(СтрокаПриемника.Строки, СтрокаИсточника, -1);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НовыеТоварныеГруппыВнедрение

Функция ДополнитьШаблоныНовыхТоварныхГруппВЗапросе()
	
	Результат = "";
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС)";
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотных)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС)";
	Если ОбщегоНазначенияИСМПКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИССтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КормаДляЖивотныхБезВЕТИС)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС)";
	Если ОбщегоНазначенияИСМПКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МясоСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Мясо)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ВетеринарныеПрепаратыИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепаратыСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ВетеринарныеПрепараты)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетейСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ИгрыИИгрушкиДляДетей)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РадиоэлектроннаяПродукция)";
	Если ОбщегоНазначенияИСМПКлиентСервер.РадиоэлектроннаяПродукцияИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукцияСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.РадиоэлектроннаяПродукция)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ТитановаяМеталлопродукцияИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукцияСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТитановаяМеталлопродукция)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС)";
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукция)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС)";
	Если ОбщегоНазначенияИСМПКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИССтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КонсервированнаяПродукцияБезВЕТИС)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.РастительныеМасла)";
	Если ОбщегоНазначенияИСМПКлиентСервер.РастительныеМаслаИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМаслаСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.РастительныеМасла)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукцияСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ОптоволокноИОптоволоконнаяПродукция)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПечатнаяПродукция)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ПечатнаяПродукцияИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукцияСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПечатнаяПродукция)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.СтроительныеМатериалы)";
	Если ОбщегоНазначенияИСМПКлиентСервер.СтроительныеМатериалыИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалыСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.СтроительныеМатериалы)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ОтопительныеПриборы)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ОтопительныеПриборыИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборыСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ОтопительныеПриборы)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Бакалея)";
	Если ОбщегоНазначенияИСМПКлиентСервер.БакалеяИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.БакалеяСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.Бакалея)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов)";
	Если ОбщегоНазначенияИСМПКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9ПроцентовСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.АлкогольнаяПродукцияДо9Процентов)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ТелефоныИНоутбуки)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ТелефоныИНоутбукиИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбукиСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ТелефоныИНоутбуки)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности)";
	Если ОбщегоНазначенияИСМПКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасностиСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.ПиротехническиеИзделияИСредстваПожарнойБезопасности)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.КабельнаяПродукция)";
	Если ОбщегоНазначенияИСМПКлиентСервер.КабельнаяПродукцияИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукцияСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.КабельнаяПродукция)";
	КонецЕсли;
	
	Результат = Результат + "
	|КОГДА Товары.Ссылка.ВидПродукции = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.МоторныеМасла)";
	Если ОбщегоНазначенияИСМПКлиентСервер.МоторныеМаслаИспользуетСтандартныйКМ() Тогда
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМаслаСтандартныйКМ)";
	Иначе
		Результат = Результат + "
		|	ТОГДА ЗНАЧЕНИЕ(Перечисление.ШаблоныКодовМаркировкиСУЗ.МоторныеМасла)";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
