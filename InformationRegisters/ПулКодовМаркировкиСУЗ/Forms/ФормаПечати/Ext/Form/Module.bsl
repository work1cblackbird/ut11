#Область ОписаниеПеременных

&НаКлиенте
Перем ПорогКоличестваЭтикетокДляПредупрежденияПриПечати;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	РазрешенаПовторнаяПечать = ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки();
	
	РазмещениеЭтикетокНаЛисте = "Замостить";
	РежимФормирования         = "Этикетки";
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормы(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьХарактеристикиНоменклатуры = ИнтеграцияИС.ХарактеристикиИспользуются();
	УправлениеЭлементамиФормыПриСоздании();
	ИнициализироватьКомпоновщикНастроек();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПорогКоличестваЭтикетокДляПредупрежденияПриПечати = 3000;
	
	СвернутьДеревоУпаковок();
	УстановитьВидимостьЭлементовПоРежимуФормирования(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НастрокиКомпоновщика = Настройки["КомпоновщикНастроекТабличногоДокумента.Настройки"];
	Если НастрокиКомпоновщика <> Неопределено Тогда
		КомпоновщикНастроекТабличногоДокумента.ЗагрузитьНастройки(НастрокиКомпоновщика);
		КомпоновщикНастроекТабличногоДокумента.Восстановить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЭтоФормированиеЭтикеток(ЭтотОбъект) Тогда
		Если КомпоновщикНастроекТабличногоДокумента.Настройки.Выбор.Элементы.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не выбраны поля табличного документа'"),,
				Элементы.ПоляНастройки.ПутьКДанным,,
				Отказ);
		КонецЕсли;
	ИначеЕсли ВидимостьШаблонаЭтикетки Тогда
		Если Элементы.СтраницыКодыМаркировки.ТекущаяСтраница = Элементы.СтраницаАгрегированныеКодыМаркировки Тогда
			ТекстОшибки = НСтр("ru = 'В строке %1, для содержимого ""%2"" не для всех составляющих заполнено поле ""Шаблон этикетки""'");
			ЭлементыДерева = ДеревоАгрегированныхКодов.ПолучитьЭлементы();
			Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
				МассивЭлементов = Новый Массив;
				ПолучитьМассивЭлементовСНезаполненнымШаблономЭтикетки(МассивЭлементов, ЭлементДерева, Истина, Истина);
				Если МассивЭлементов.Количество() > 0 Тогда
					НомерСтроки = ЭлементыДерева.Индекс(ЭлементДерева) + 1;
					ТекстСообщения = СтрШаблон(ТекстОшибки, НомерСтроки, ЭлементДерева.Содержимое);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"ДеревоАгрегированныхКодов", НомерСтроки , "ШаблонЭтикетки");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТекстОшибки = НСтр("ru = 'В строке %1, для содержимого ""%2"" не заполнено поле ""Шаблон этикетки""'");
			Для Каждого Строка Из СписокКодовМаркировки Цикл
				Если Строка.КоличествоПечать > 0
					И Не ЗначениеЗаполнено(Строка.ШаблонЭтикетки) Тогда
					НомерСтроки = СписокКодовМаркировки.Индекс(Строка) + 1;
					ТекстСообщения = СтрШаблон(ТекстОшибки, НомерСтроки, Строка.Содержимое);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"СписокКодовМаркировки", НомерСтроки, "ШаблонЭтикетки");
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура РежимФормированияПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовПоРежимуФормирования(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокКодовМаркировкиКоличествоПечатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокКодовМаркировки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМаксимальноеКоличествоПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовМаркировкиШаблонЭтикеткиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокКодовМаркировки.ТекущиеДанные;
	ТекущиеДанные.ШаблонЭтикеткиИзменен = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовДеревоАгрегированныхКодов

&НаКлиенте
Процедура ДеревоАгрегированныхКодовКоличествоПечатьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоАгрегированныхКодов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМаксимальноеКоличествоПоСтроке(ТекущиеДанные);
	
	ПересчитатьКоличествоПоСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоАгрегированныхКодовШаблонЭтикеткиПриИзменении(Элемент)
	
	ДеревоАгрегированныхКодовУстановитьШаблонЭтикеткиИзменен();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоАгрегированныхКодовКоличествоЭкземпляровПриИзменении(Элемент)
	
	ДеревоАгрегированныхКодовУстановитьШаблонЭтикеткиИзменен();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)

	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПечати = ПодготовитьДанныеДляПечати();
	
	Если ДанныеПечати.КоличествоЭтикеток = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Нет данных для печати'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "СписокКодовМаркировки.КоличествоПечать");
		Возврат;
		
	КонецЕсли;
	
	Если ПечатьПроизвольныхКодов Тогда
		ОтветПользователяПродолженияПечатиОкончание(КодВозвратаДиалога.Да, ДанныеПечати);
	Иначе
		Если ДанныеПечати.КоличествоЭтикеток > ПорогКоличестваЭтикетокДляПредупрежденияПриПечати Тогда
			
			ТекстВопроса = СтрШаблон(
					НСтр("ru = 'Количество этикеток для печати превышает %1,
						       |выбранные данные можно распечатать только один раз.
						       |Продолжить?'"),
					ПорогКоличестваЭтикетокДляПредупрежденияПриПечати);
					
		Иначе
			
			ТекстВопроса = НСтр("ru = 'Распечатать этикетки по выбранным данным можно только один раз.
				                      |Продолжить?'");
			
		КонецЕсли;
		
		ОповещениеВопросПечатиОкончание = Новый ОписаниеОповещения(
			"ОтветПользователяПродолженияПечатиОкончание", ЭтотОбъект, ДанныеПечати);
		
		ПоказатьВопрос(ОповещениеВопросПечатиОкончание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ОтображатьЭтикеткуЛогистическойУпаковки",   Ложь);
	ПараметрыОткрытияФормы.Вставить("ОтображатьЭтикеткуГрупповойУпаковки",       Ложь);
	ПараметрыОткрытияФормы.Вставить("ОтображатьЭтикеткуНабора",                  Ложь);
	ПараметрыОткрытияФормы.Вставить("ОтображатьЭтикеткуПотребительскойУпаковки", Ложь);
	ПараметрыОткрытияФормы.Вставить("ОтображатьКоличествоПечать",                Ложь);
	
	ПараметрыЗаполнения    = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВыделенныеСтроки", Новый Массив);
	
	Если Элементы.СтраницыКодыМаркировки.ТекущаяСтраница = Элементы.СтраницаАгрегированныеКодыМаркировки Тогда
		
		Элемент = Элементы.ДеревоАгрегированныхКодов;
		
		Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
			
			ДанныеСтроки = ДеревоАгрегированныхКодов.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ПараметрыЗаполнения.ВыделенныеСтроки.Найти(ДанныеСтроки) = Неопределено Тогда
				ПараметрыЗаполнения.ВыделенныеСтроки.Добавить(ДанныеСтроки);
				УстановитьПризнакОтображенияПолейДляОперацииЗаполнения(ДанныеСтроки, ПараметрыОткрытияФормы);
				Если ДанныеСтроки.ВерхнийУровень Тогда
					ПараметрыОткрытияФормы.ОтображатьКоличествоПечать = Истина;
					ДополнитьМассивПодчиненнымиЭлементамиДерева(
						ДанныеСтроки.ПолучитьЭлементы(),
						ПараметрыЗаполнения.ВыделенныеСтроки,
						ПараметрыОткрытияФормы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ПараметрыОткрытияФормы.ОтображатьЭтикеткуПотребительскойУпаковки = Истина;
		ПараметрыОткрытияФормы.ОтображатьКоличествоПечать = Истина;
		
		Элемент = Элементы.СписокКодовМаркировки;
		
		Для Каждого ТекущаяСтрока Из Элемент.ВыделенныеСтроки Цикл
			ПараметрыЗаполнения.ВыделенныеСтроки.Добавить(СписокКодовМаркировки.НайтиПоИдентификатору(ТекущаяСтрока));
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВыделенныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Операция недоступна для выбранного объекта'"),,
			Элемент.Имя);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(
		"РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаПомощникЗаполненияШаблоновЭтикеток",
		ПараметрыОткрытияФормы, ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЗаполнения", ЭтотОбъект, ПараметрыЗаполнения))
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// СписокКодовМаркировки
	// ШаблонЭтикетки
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиШаблонЭтикетки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиКоличествоПечать.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// ДеревоАгрегированныхКодов
	// ШаблонЭтикетки
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовШаблонЭтикетки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовКоличествоПечать.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// КоличествоПечать
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовКоличествоПечать.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовВерхнийУровень.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	// КоличествоЭкземпляров
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовКоличествоЭкземпляров.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовЭтоУпаковка.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	// ПредставлениеШаблонаКодаМаркировки
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ПредставленияШаблоновКодаМаркировки();
	Для Каждого ЭлементСписка Из ДоступныеШаблоны Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиШаблон.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокКодовМаркировкиШаблон.ПутьКДанным);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСписка.Представление);
		
		//
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовШаблон.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДеревоАгрегированныхКодовШаблон.ПутьКДанным);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСписка.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	Элементы.Документ.Видимость = ЗначениеЗаполнено(Документ);
	
	Если НЕ ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.СписокКодовМаркировкиХарактеристика.Видимость     = Ложь;
		Элементы.ДеревоАгрегированныхКодовХарактеристика.Видимость = Ложь;
	КонецЕсли;
	
	ЕстьСвободныеКоды      = СписокКодовМаркировки.Количество() > 0;
	ЕстьАгрегированныеКоды = ДеревоАгрегированныхКодов.ПолучитьЭлементы().Количество() > 0;
	
	Элементы.СтраницаСвободныеКодыМаркировки.Видимость      = ЕстьСвободныеКоды;
	Элементы.СтраницаАгрегированныеКодыМаркировки.Видимость = ЕстьАгрегированныеКоды;
	
	Если НЕ ЕстьСвободныеКоды ИЛИ НЕ ЕстьАгрегированныеКоды Тогда
		Элементы.СтраницыКодыМаркировки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Если ЕстьСвободныеКоды Тогда
			Элементы.СписокКодовМаркировкиПечать.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ЕстьАгрегированныеКоды Тогда
			Элементы.ДеревоАгрегированныхКодовПечать.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ВидимостьШаблонаЭтикетки = ВидимостьШаблонаЭтикетки();
	
	Если ЕстьСвободныеКоды Тогда
		Элементы.СписокКодовМаркировкиШаблонЭтикетки.Видимость = ВидимостьШаблонаЭтикетки;
		Элементы.СписокКодовМаркировкиЗаполнить.Видимость      = ВидимостьШаблонаЭтикетки;
	КонецЕсли;
	
	Если ЕстьАгрегированныеКоды Тогда
		Элементы.ДеревоАгрегированныхКодовШаблонЭтикетки.Видимость = ВидимостьШаблонаЭтикетки;
		Элементы.ДеревоАгрегированныхКодовЗаполнить.Видимость      = ВидимостьШаблонаЭтикетки;
	КонецЕсли;
	
	СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораШаблонаЭтикетки(
		ЭтотОбъект,
		Элементы.СписокКодовМаркировкиШаблонЭтикетки.Имя);
	СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораШаблонаЭтикетки(
		ЭтотОбъект,
		Элементы.ДеревоАгрегированныхКодовШаблонЭтикетки.Имя);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовПоРежимуФормирования(Форма)
	
	ФормированиеЭтикеток = ЭтоФормированиеЭтикеток(Форма);
	
	Форма.Элементы.РазмещениеЭтикетокНаЛисте.Видимость                      = ФормированиеЭтикеток;
	Форма.Элементы.ДеревоАгрегированныхКодовШаблонЭтикетки.Видимость        = ФормированиеЭтикеток И Форма.ВидимостьШаблонаЭтикетки;
	Форма.Элементы.ДеревоАгрегированныхКодовКоличествоЭкземпляров.Видимость = ФормированиеЭтикеток;
	Форма.Элементы.СписокКодовМаркировкиШаблонЭтикетки.Видимость            = ФормированиеЭтикеток И Форма.ВидимостьШаблонаЭтикетки;
	Форма.Элементы.ПоляНастройки.Видимость                                  = Не ФормированиеЭтикеток;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДеревоУпаковок()
	
	ФормированиеЭтикеток = ЭтоФормированиеЭтикеток(ЭтотОбъект);
	
	Для Каждого ЭлементДерева Из ДеревоАгрегированныхКодов.ПолучитьЭлементы() Цикл
		Если ВидимостьШаблонаЭтикетки
			И ФормированиеЭтикеток Тогда
			МассивЭлементов = Новый Массив;
			ПолучитьМассивЭлементовСНезаполненнымШаблономЭтикетки(МассивЭлементов, ЭлементДерева, Истина, Ложь);
			Если МассивЭлементов.Количество() = 0 Тогда
				Элементы.ДеревоАгрегированныхКодов.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
			КонецЕсли;
		Иначе
			Элементы.ДеревоАгрегированныхКодов.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьМассивЭлементовСНезаполненнымШаблономЭтикетки(
	МассивЭлементов, ЭлементДерева, ПолучитьТолькоПервый, ВключаяТекущийЭлемент)
	
	Если ВключаяТекущийЭлемент Тогда
		Если ЭлементДерева.КоличествоПечать = 0 Тогда
			Возврат;
		ИначеЕсли Не ЗначениеЗаполнено(ЭлементДерева.ШаблонЭтикетки) Тогда
			МассивЭлементов.Добавить(ЭлементДерева);
			Если ПолучитьТолькоПервый Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТекущийЭлементДерева Из ЭлементДерева.ПолучитьЭлементы() Цикл
		Если ТекущийЭлементДерева.КоличествоПечать = 0 Тогда
			Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(ТекущийЭлементДерева.ШаблонЭтикетки) Тогда
			МассивЭлементов.Добавить(ТекущийЭлементДерева);
			Если ПолучитьТолькоПервый Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ПолучитьМассивЭлементовСНезаполненнымШаблономЭтикетки(
			МассивЭлементов, ТекущийЭлементДерева, ПолучитьТолькоПервый, Ложь);
		Если ПолучитьТолькоПервый
			И МассивЭлементов.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ВидимостьШаблонаЭтикетки()
	
	Возврат РегистрыСведений.ПулКодовМаркировкиСУЗ.ВидимостьШаблонаЭтикетки();
	
КонецФункции

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЗаполнения(ДанныеЗаполнения, ПараметрыЗаполнения) Экспорт
	
	Если ДанныеЗаполнения = Неопределено
		Или ДанныеЗаполнения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоАгрегированныеКоды = Элементы.СтраницыКодыМаркировки.ТекущаяСтраница = Элементы.СтраницаАгрегированныеКодыМаркировки;
	
	ШаблонЭтикеткиЛогистическойУпаковки   = Неопределено;
	ШаблонЭтикеткиГрупповойУпаковки       = Неопределено;
	ШаблонЭтикеткиНабора                  = Неопределено;
	ШаблонЭтикеткиПотребительскойУпаковки = Неопределено;
	КоличествоПечать                      = Неопределено;
	КоличествоЭкземпляров                 = Неопределено;
	
	ДанныеЗаполнения.Свойство("ШаблонЭтикеткиЛогистическойУпаковки",   ШаблонЭтикеткиЛогистическойУпаковки);
	ДанныеЗаполнения.Свойство("ШаблонЭтикеткиГрупповойУпаковки",       ШаблонЭтикеткиГрупповойУпаковки);
	ДанныеЗаполнения.Свойство("ШаблонЭтикеткиНабора",                  ШаблонЭтикеткиНабора);
	ДанныеЗаполнения.Свойство("ШаблонЭтикеткиПотребительскойУпаковки", ШаблонЭтикеткиПотребительскойУпаковки);
	ДанныеЗаполнения.Свойство("КоличествоПечать",                      КоличествоПечать);
	ДанныеЗаполнения.Свойство("КоличествоЭкземпляров",                 КоличествоЭкземпляров);
	
	Для Каждого СтрокаДанных Из ПараметрыЗаполнения.ВыделенныеСтроки Цикл
		
		Если ЭтоАгрегированныеКоды Тогда
			
			Если СтрокаДанных.ВерхнийУровень
				И КоличествоПечать <> Неопределено Тогда
				СтрокаДанных.КоличествоПечать = КоличествоПечать;
				УстановитьМаксимальноеКоличествоПоСтроке(СтрокаДанных);
			КонецЕсли;
			
			Если СтрокаДанных.ЭтоУпаковка Тогда
				Если ШаблонЭтикеткиЛогистическойУпаковки <> Неопределено Тогда
					СтрокаДанных.ШаблонЭтикетки        = ШаблонЭтикеткиЛогистическойУпаковки;
					СтрокаДанных.ШаблонЭтикеткиИзменен = Истина;
				КонецЕсли;
				Если КоличествоЭкземпляров <> Неопределено Тогда
					СтрокаДанных.КоличествоЭкземпляров = КоличествоЭкземпляров;
				КонецЕсли;
			ИначеЕсли СтрокаДанных.ЭтоГрупповаяУпаковка Тогда
				Если ШаблонЭтикеткиГрупповойУпаковки <> Неопределено Тогда
					СтрокаДанных.ШаблонЭтикетки        = ШаблонЭтикеткиГрупповойУпаковки;
					СтрокаДанных.ШаблонЭтикеткиИзменен = Истина;
				КонецЕсли;
			ИначеЕсли СтрокаДанных.ЭтоНабор Тогда
				Если ШаблонЭтикеткиНабора <> Неопределено Тогда
					СтрокаДанных.ШаблонЭтикетки        = ШаблонЭтикеткиНабора;
					СтрокаДанных.ШаблонЭтикеткиИзменен = Истина;
				КонецЕсли;
			Иначе
				Если ШаблонЭтикеткиПотребительскойУпаковки <> Неопределено Тогда
					СтрокаДанных.ШаблонЭтикетки        = ШаблонЭтикеткиПотребительскойУпаковки;
					СтрокаДанных.ШаблонЭтикеткиИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Если КоличествоПечать <> Неопределено Тогда
				СтрокаДанных.КоличествоПечать = КоличествоПечать;
				УстановитьМаксимальноеКоличествоПоСтроке(СтрокаДанных);
			КонецЕсли;
			
			Если ШаблонЭтикеткиПотребительскойУпаковки <> Неопределено Тогда
				СтрокаДанных.ШаблонЭтикетки        = ШаблонЭтикеткиПотребительскойУпаковки;
				СтрокаДанных.ШаблонЭтикеткиИзменен = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМаксимальноеКоличествоПоСтроке(ТекущиеДанные)
	
	Если ТекущиеДанные.КоличествоПечать > ТекущиеДанные.Количество Тогда
		ТекущиеДанные.КоличествоПечать = ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьКоличествоПоСтроке(ТекущийЭлементДерева)
	
	Для Каждого ЭлементДерева Из ТекущийЭлементДерева.ПолучитьЭлементы() Цикл
		ЭлементДерева.КоличествоПечать = ЭлементДерева.Количество / ТекущийЭлементДерева.Количество * ТекущийЭлементДерева.КоличествоПечать;
		ПересчитатьКоличествоПоСтроке(ЭлементДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоАгрегированныхКодовУстановитьШаблонЭтикеткиИзменен()
	
	ТекущиеДанные = Элементы.ДеревоАгрегированныхКодов.ТекущиеДанные;
	Пока Не ТекущиеДанные.ВерхнийУровень Цикл
		ТекущиеДанные = ТекущиеДанные.ПолучитьРодителя();
	КонецЦикла;
	ТекущиеДанные.ШаблонЭтикеткиИзменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМассивПодчиненнымиЭлементамиДерева(ЭлементыДерева, МассивЭлементов, ПараметрыОткрытияФормы)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если МассивЭлементов.Найти(ЭлементДерева) = Неопределено Тогда
			МассивЭлементов.Добавить(ЭлементДерева);
			УстановитьПризнакОтображенияПолейДляОперацииЗаполнения(ЭлементДерева, ПараметрыОткрытияФормы);
		КонецЕсли;
		ДополнитьМассивПодчиненнымиЭлементамиДерева(ЭлементДерева.ПолучитьЭлементы(), МассивЭлементов, ПараметрыОткрытияФормы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакОтображенияПолейДляОперацииЗаполнения(ДанныеСтроки, ПараметрыОткрытияФормы)
	
	Если ДанныеСтроки.ЭтоУпаковка Тогда
		ПараметрыОткрытияФормы.ОтображатьЭтикеткуЛогистическойУпаковки = Истина;
	ИначеЕсли ДанныеСтроки.ЭтоГрупповаяУпаковка Тогда
		ПараметрыОткрытияФормы.ОтображатьЭтикеткуГрупповойУпаковки = Истина;
	ИначеЕсли ДанныеСтроки.ЭтоНабор Тогда
		ПараметрыОткрытияФормы.ОтображатьЭтикеткуНабора = Истина;
	Иначе
		ПараметрыОткрытияФормы.ОтображатьЭтикеткуПотребительскойУпаковки = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область ПервоначальноеЗаполнение

&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	ТекстОшибки = "";
	
	Документ = Параметры.Документ;
	
	ПечатьПроизвольныхКодов = ЗначениеЗаполнено(Параметры.ДанныеДляПечати);
	Если ПечатьПроизвольныхКодов Тогда
		Если ТипЗнч(Параметры.ДанныеДляПечати) = Тип("Массив")
			И Параметры.ДанныеДляПечати.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'В форму печати кодов маркировки не переданы коды для печати.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			Возврат;
		КонецЕсли;
	Иначе
		
		Если Не ЗначениеЗаполнено(Документ) Тогда
			ТекстОшибки = НСтр("ru = 'В форму печати кодов маркировки не передан документ.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
			Возврат;
		КонецЕсли;
		
		ЭтоЗаказНаЭмиссию = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПулКодовМаркировки.КодМаркировки           КАК КодМаркировки,
		|	ПулКодовМаркировки.ДатаПечатиУниверсальная КАК ДатаПечатиУниверсальная
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
		|ГДЕ
		|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
		|УПОРЯДОЧИТЬ ПО
		|	ПулКодовМаркировки.ДатаПечатиУниверсальная
		|;
		|ВЫБРАТЬ
		|	Статусы.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ
		|");
		
		Запрос.УстановитьПараметр("Документ", Документ);
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[0].Пустой() Тогда
			Если ЭтоЗаказНаЭмиссию Тогда
				Если ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "СервисПровайдер")) Тогда
					ТекстОшибки = НСтр("ru = 'По заказу ""%1"" эмиссия кодов осуществляется сервис-провайдером.'");
				Иначе
					Выборка = Результат[1].Выбрать();
					Если Выборка.Следующий()
						И Выборка.Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированы Тогда
						ТекстОшибки = НСтр("ru = 'По заказу ""%1"" коды маркировки отсутствуют. Возможно, коды уже введены в оборот и удалены из пула.'");
					Иначе
						ТекстОшибки = НСтр("ru = 'По заказу ""%1"" эмиссия кодов еще не выполнена.'");
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекстОшибки = НСтр("ru = 'По документу ""%1"" отсутствуют исполненные заказы на эмиссию кодов маркировки.'");
			КонецЕсли;
		Иначе
			Выборка = Результат[0].Выбрать();
			Выборка.Следующий();
			Если ЗначениеЗаполнено(Выборка.ДатаПечатиУниверсальная) И НЕ РазрешенаПовторнаяПечать Тогда
				ТекстОшибки = НСтр("ru = 'По документу ""%1"" все коды маркировки уже распечатаны.'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстОшибки = "" Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Документ, "Организация") Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Организация");
		КонецЕсли;
	Иначе
		ТекстОшибки = СтрШаблон(ТекстОшибки, Документ);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы(Отказ)
	
	Если ПечатьПроизвольныхКодов Тогда
		ЗаполнитьПроизвольныеКодыДляПечати(Параметры.ДанныеДляПечати);
	Иначе
		Если НЕ Параметры.ТолькоАгрегированныеКоды Тогда
			Запрос = ЗапросЗаполнитьСвободныеКоды();
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицы = СписокКодовМаркировки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
				СтрокаТаблицы.КоличествоПечать = СтрокаТаблицы.Количество;
				СтрокаТаблицы.Содержимое = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
					Выборка.НоменклатураПредставление, Выборка.ХарактеристикаПредставление,,,
					ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
					Выборка.ПредставлениеНоменклатуры, Выборка.ВидПродукции));
			КонецЦикла;
			СписокКодовМаркировки.Сортировать("Содержимое");
		КонецЕсли;
		
		Если НЕ Параметры.ТолькоСвободныеКоды Тогда
			ДеревоКодов = РеквизитФормыВЗначение("ДеревоАгрегированныхКодов", Тип("ДеревоЗначений"));
			ДеревоКодов.Строки.Очистить();
			РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаполнитьДеревоСуществующихУпаковокПоДокументу(
				ДеревоКодов, Документ,, Истина);
			ЗаполнитьЭлементДереваАгрегированныхКодов(ДеревоАгрегированныхКодов, ДеревоКодов);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьСвободныеКоды      = СписокКодовМаркировки.Количество() > 0;
	ЕстьАгрегированныеКоды = ДеревоАгрегированныхКодов.ПолучитьЭлементы().Количество() > 0;
	
	Если НЕ ЕстьСвободныеКоды И НЕ ЕстьАгрегированныеКоды Тогда
		Если ПечатьПроизвольныхКодов Тогда
			ТекстОшибки = НСтр("ru = 'Коды маркировки для печати отсутствуют.'");
		Иначе
			ТекстОшибки = НСтр("ru = 'По документу ""%1"" нет кодов маркировки для печати.'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, Документ);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементДереваАгрегированныхКодов(Приемник, Источник)
	
	ВерхнийУровень = ТипЗнч(Источник) = Тип("ДеревоЗначений");
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		
		СтрокаПриемника = Приемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника, СтрокаИсточника,, "Количество");
		
		СтрокаПриемника.ВерхнийУровень      = ВерхнийУровень;
		СтрокаПриемника.Количество          = СтрокаИсточника.КоличествоИтог;
		СтрокаПриемника.КоличествоПечать    = СтрокаПриемника.Количество;
		
		Если СтрокаПриемника.ЭтоУпаковка Тогда
			СтрокаПриемника.Шаблон = Перечисления.ВидыУпаковокИС.Логистическая;
			СтрокаПриемника.ЭтоГрупповаяУпаковка = Ложь;
			СтрокаПриемника.ЭтоВложеннаяЕдиница  = Ложь;
		КонецЕсли;
		
		Если СтрокаПриемника.КоличествоЭкземпляров = 0 Тогда
			СтрокаПриемника.КоличествоЭкземпляров = 1;
		КонецЕсли;
		
		ЗаполнитьЭлементДереваАгрегированныхКодов(СтрокаПриемника, СтрокаИсточника);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапросЗаполнитьСвободныеКоды()
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ДополнительноеУсловие = 
	"	И (ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	ИЛИ ПулКодовМаркировки.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1))";
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ДополнитьЗапросКодамиСМРЦ(Запрос, ЭтоЗаказНаЭмиссию, ДополнительноеУсловие);
	
	Запрос.УстановитьПараметр("ПустаяНоменклатура",   ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустойШаблонЭтикетки", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ШаблонЭтикеткиИС"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.КодМаркировки,
	|	Таблица.ХешСуммаКодаМаркировки,
	|	Таблица.КодМаркировкиСМРЦ,
	|	Таблица.ХешСуммаКодаМаркировкиСМРЦ
	|ПОМЕСТИТЬ ТаблицаКодовСМРЦ
	|ИЗ
	|	&ТаблицаКодовСМРЦ КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.ВидПродукции КАК ВидПродукции,
	|	ПулКодовМаркировки.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировки.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК GTIN,
	|	ПулКодовМаркировки.Шаблон КАК Шаблон,
	|	ПулКодовМаркировки.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ПулКодовМаркировки.ШтрихкодУпаковки,
	|	ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ, ПулКодовМаркировки.КодМаркировки) КАК КодМаркировки,
	|	ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ, ПулКодовМаркировки.ХешСуммаКодаМаркировки) КАК ХешСуммаКодаМаркировки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|			ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|			ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		Иначе """"
	|	КОНЕЦ КАК ЗначениеШтрихкодаУпаковки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|			ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|			ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода
	|		Иначе """"
	|	КОНЕЦ КАК ХешСуммаЗначенияШтрихкодаУпаковки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|			ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|			ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакСоставляющей,
	|	ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка) КАК
	|		ВСоставеУпаковки,
	|	ПулКодовМаркировки.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1) КАК Распечатан
	|ПОМЕСТИТЬ ВТКодыМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКодовСМРЦ КАК ТаблицаКодовСМРЦ
	|		ПО ПулКодовМаркировки.КодМаркировки = ТаблицаКодовСМРЦ.КодМаркировки
	|			И ПулКодовМаркировки.ХешСуммаКодаМаркировки = ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И (ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	ИЛИ ПулКодовМаркировки.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	КодыМаркировки.КодМаркировки КАК КодМаркировки,
	|	КодыМаркировки.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	КодыМаркировки.Распечатан КАК Распечатан
	|ПОМЕСТИТЬ ВТКодыВУпаковках
	|ИЗ
	|	ВТКодыМаркировки КАК КодыМаркировки
	|ГДЕ
	|	КодыМаркировки.ВСоставеУпаковки
	|	И КодыМаркировки.ПризнакСоставляющей = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ВложенныеЕдиницы.КодМаркировки КАК КодМаркировки,
	|	ВложенныеЕдиницы.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	ВложенныеЕдиницы.Распечатан КАК Распечатан
	|ИЗ
	|	ВТКодыМаркировки КАК ВложенныеЕдиницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировки КАК КодыМаркировки
	|		ПО ВложенныеЕдиницы.ЗначениеШтрихкодаУпаковки = КодыМаркировки.КодМаркировки
	|		И ВложенныеЕдиницы.ХешСуммаЗначенияШтрихкодаУпаковки = КодыМаркировки.ХешСуммаКодаМаркировки
	|ГДЕ
	|	ВложенныеЕдиницы.ПризнакСоставляющей = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыВУпаковках.ШтрихкодУпаковки
	|ПОМЕСТИТЬ ВТУпаковки
	|ИЗ
	|	ВТКодыВУпаковках КАК КодыВУпаковках
	|СГРУППИРОВАТЬ ПО
	|	КодыВУпаковках.ШтрихкодУпаковки
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|		КОГДА КодыВУпаковках.Распечатан
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) > 0
	|	И СУММА(ВЫБОР
	|		КОГДА КодыВУпаковках.Распечатан
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ВидПродукции КАК ВидПродукции,
	|	КодыМаркировки.Номенклатура КАК Номенклатура,
	|	КодыМаркировки.Характеристика КАК Характеристика,
	|	КодыМаркировки.GTIN КАК GTIN,
	|	КодыМаркировки.Шаблон КАК Шаблон,
	|	КодыМаркировки.СпособВводаВОборот КАК СпособВводаВОборот,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КодыМаркировки.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КодыМаркировки.Характеристика) КАК ХарактеристикаПредставление,
	|	ЕСТЬNULL(ШаблоныЭтикеток.ШаблонЭтикетки, &ПустойШаблонЭтикетки) КАК ШаблонЭтикетки,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеНоменклатуры,
	|	Количество(1) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		КодыМаркировки.ВидПродукции КАК ВидПродукции,
	|		КодыМаркировки.Номенклатура КАК Номенклатура,
	|		КодыМаркировки.Характеристика КАК Характеристика,
	|		КодыМаркировки.GTIN КАК GTIN,
	|		КодыМаркировки.Шаблон КАК Шаблон,
	|		КодыМаркировки.СпособВводаВОборот КАК СпособВводаВОборот
	|	ИЗ
	|		ВТКодыМаркировки КАК КодыМаркировки
	|	ГДЕ
	|		НЕ КодыМаркировки.ВСоставеУпаковки
	|		И НЕ КодыМаркировки.Распечатан
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КодыМаркировки.ВидПродукции КАК ВидПродукции,
	|		КодыМаркировки.Номенклатура КАК Номенклатура,
	|		КодыМаркировки.Характеристика КАК Характеристика,
	|		КодыМаркировки.GTIN КАК GTIN,
	|		КодыМаркировки.Шаблон КАК Шаблон,
	|		КодыМаркировки.СпособВводаВОборот КАК СпособВводаВОборот
	|	ИЗ
	|		ВТКодыМаркировки КАК КодыМаркировки
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыВУпаковках КАК КодыВУпаковках
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУпаковки КАК Упаковки
	|				ПО КодыВУпаковках.ШтрихкодУпаковки = Упаковки.ШтрихкодУпаковки
	|				И НЕ КодыВУпаковках.Распечатан
	|			ПО КодыМаркировки.КодМаркировки = КодыВУпаковках.КодМаркировки
	|			И КодыМаркировки.ХешСуммаКодаМаркировки = КодыВУпаковках.ХешСуммаКодаМаркировки) КАК КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШаблонаЭтикеткиИСМП КАК ШаблоныЭтикеток
	|		ПО КодыМаркировки.Номенклатура = ШаблоныЭтикеток.Номенклатура
	|		И КодыМаркировки.Характеристика = ШаблоныЭтикеток.Характеристика
	|		И КодыМаркировки.GTIN = ШаблоныЭтикеток.GTIN
	|		И КодыМаркировки.Шаблон = ШаблоныЭтикеток.Шаблон
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО КодыМаркировки.GTIN = КэшОписанияОстатков.GTIN
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировки.ВидПродукции,
	|	КодыМаркировки.Номенклатура,
	|	КодыМаркировки.Характеристика,
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.Шаблон,
	|	КодыМаркировки.СпособВводаВОборот,
	|	ЕСТЬNULL(ШаблоныЭтикеток.ШаблонЭтикетки, &ПустойШаблонЭтикетки),
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """")";
	
	Возврат Запрос;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ИнициализироватьКомпоновщикНастроекДляПечатиТаблицыКодовМаркировки(КомпоновщикНастроекТабличногоДокумента);
	
КонецПроцедуры

#Область ПроизвольныеКоды

&НаСервере
Процедура ЗаполнитьПроизвольныеКодыДляПечати(ДанныеДляПечати)
	
	ТаблицаКодовМаркировки = Новый ТаблицаЗначений;
	ТаблицаКодовМаркировки.Колонки.Добавить("ИндексСтрокиДерева",     ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаКодовМаркировки.Колонки.Добавить("КодМаркировки",          ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаКодовМаркировки.Колонки.Добавить("ХешСуммаКодаМаркировки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Если ЭтоАдресВременногоХранилища(ДанныеДляПечати) Тогда
		ТаблицаКодовМаркировки.Колонки.Добавить("ХешСуммаУпаковки", ОбщегоНазначения.ОписаниеТипаСтрока(50));
		ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеДляПечати);
		УдалитьИзВременногоХранилища(ДанныеДляПечати);
		ДобавитьСтрокиИзДереваИзвестныхУпаковок(ТаблицаКодовМаркировки, ДеревоУпаковок, Истина);
	Иначе
		ДеревоУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(ДанныеДляПечати).ДеревоУпаковок;
		ДобавитьСтрокиИзДереваИзвестныхУпаковок(ТаблицаКодовМаркировки, ДеревоУпаковок, Ложь);
	КонецЕсли;
	
	АдресХранилищаДереваУпаковок = ПоместитьВоВременноеХранилище(ДеревоУпаковок, УникальныйИдентификатор);
	
	Запрос = ЗапросПроизвольныеКодыДляПечати(ТаблицаКодовМаркировки);
	
	Результат = Запрос.ВыполнитьПакет();
	ВГраница = Результат.ВГраница();
	
	ЗаполнитьСписокКодовМаркировкиПроизвольнымиКодами(Результат[ВГраница].Выбрать());
	
	ЗаполнитьДеревоАгрегированныхКодовПроизвольнымиКодами(
		Результат[ВГраница - 1], ДеревоУпаковок);
	
	ЗаполнитьИзИсторииИспользованияШаблонаЭтикеткиУпаковки(Результат[ВГраница - 2].Выгрузить());
	
	ВывестиОшибкиЗаполненияПроизвольныхКодов(
		Результат[ВГраница - 3].Выбрать(), Результат[ВГраница - 4].Выбрать(), ДеревоУпаковок);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиИзДереваИзвестныхУпаковок(Приемник, Источник,
	ШтрихкодНормализованДляПула, ИндексСтрокиДерева = -1, ХешСуммаУпаковки = "")
	
	ВерхнийУровень = ИндексСтрокиДерева = -1;
	Если ВерхнийУровень Тогда
		ИндексСтрокиДерева = 0;
	КонецЕсли;
	
	Для Каждого СтрокаИсточника Из Источник.Строки Цикл
		
		Если ШтрихкодНормализованДляПула И ВерхнийУровень Тогда
			ХешСуммаУпаковки = СтрокаИсточника.ХешСуммаУпаковки;
		КонецЕсли;
			
		Если СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
			Или СтрокаИсточника.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			СтрокаТаблицы = Приемник.Добавить();
			СтрокаТаблицы.ИндексСтрокиДерева = ИндексСтрокиДерева;
			Если ШтрихкодНормализованДляПула Тогда
				СтрокаТаблицы.КодМаркировки          = СтрокаИсточника.Штрихкод;
				СтрокаТаблицы.ХешСуммаКодаМаркировки = СтрокаИсточника.ХешСумма;
				СтрокаТаблицы.ХешСуммаУпаковки       = ХешСуммаУпаковки;
			Иначе
				СтрокаТаблицы.КодМаркировки          = РегистрыСведений.ПулКодовМаркировкиСУЗ.КодМаркировкиДляСохраненияВПул(СтрокаИсточника, Ложь);
				СтрокаТаблицы.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаТаблицы.КодМаркировки);
				
				СтрокаИсточника.Штрихкод = СтрокаТаблицы.КодМаркировки;
				СтрокаИсточника.ХешСумма = СтрокаТаблицы.ХешСуммаКодаМаркировки;
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьСтрокиИзДереваИзвестныхУпаковок(Приемник, СтрокаИсточника, ШтрихкодНормализованДляПула, ИндексСтрокиДерева, ХешСуммаУпаковки);
		
		Если ВерхнийУровень Тогда
			ИндексСтрокиДерева = ИндексСтрокиДерева + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапросПроизвольныеКодыДляПечати(ТаблицаКодовМаркировки)
	
	ЕстьХешСуммаУпаковки = ТаблицаКодовМаркировки.Колонки.Найти("ХешСуммаУпаковки") <> Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКодовМаркировки", ТаблицаКодовМаркировки);
	Запрос.УстановитьПараметр("ПустаяНоменклатура",     ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ПустойШаблонЭтикетки",   ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ШаблонЭтикеткиИС"));
	Запрос.Текст =
	"ВЫБРАТЬ" + ?(ЕстьХешСуммаУпаковки, "
	|	ТаблицаКодов.ХешСуммаУпаковки,", "") + "
	|	ТаблицаКодов.ИндексСтрокиДерева,
	|	ТаблицаКодов.КодМаркировки,
	|	ТаблицаКодов.ХешСуммаКодаМаркировки
	|ПОМЕСТИТЬ ТаблицаКодов
	|ИЗ
	|	&ТаблицаКодовМаркировки КАК ТаблицаКодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ" + ?(ЕстьХешСуммаУпаковки, "
	|	ТаблицаКодов.ХешСуммаУпаковки,", "
	|	ПулКодовМаркировки.ХешСуммаУпаковки,") + "
	|	ТаблицаКодов.ИндексСтрокиДерева,
	|	ТаблицаКодов.КодМаркировки,
	|	ТаблицаКодов.ХешСуммаКодаМаркировки,
	|	ПулКодовМаркировки.ВидПродукции,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК GTIN,
	|	ПулКодовМаркировки.Номенклатура,
	|	ПулКодовМаркировки.Характеристика,
	|	ПулКодовМаркировки.Шаблон
	|ПОМЕСТИТЬ КодыМаркировки
	|ИЗ
	|	ТаблицаКодов КАК ТаблицаКодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ПО ТаблицаКодов.КодМаркировки = ПулКодовМаркировки.КодМаркировки
	|		И ТаблицаКодов.ХешСуммаКодаМаркировки = ПулКодовМаркировки.ХешСуммаКодаМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ИндексСтрокиДерева,
	|	КодыМаркировки.КодМаркировки
	|ПОМЕСТИТЬ ОтсутствуютВПуле
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|ГДЕ
	|	КодыМаркировки.ВидПродукции ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ИндексСтрокиДерева
	|ПОМЕСТИТЬ НарушенаСтруктура
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|ГДЕ
	|	НЕ КодыМаркировки.ВидПродукции ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировки.ИндексСтрокиДерева
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КодыМаркировки.ХешСуммаУпаковки) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КодыМаркировки.ИндексСтрокиДерева
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	ОтсутствуютВПуле КАК КодыМаркировки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КодыМаркировки.ИндексСтрокиДерева
	|ИЗ
	|	НарушенаСтруктура КАК КодыМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ИндексСтрокиДерева,
	|	КодыМаркировки.КодМаркировки
	|ИЗ
	|	ОтсутствуютВПуле КАК КодыМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ИндексСтрокиДерева
	|ИЗ
	|	НарушенаСтруктура КАК КодыМаркировки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныЭтикетокУпаковок.ХешСуммаУпаковки,
	|	ШаблоныЭтикетокУпаковок.СоставУпаковки КАК СоставУпаковкиСШаблономЭтикетки
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		КодыМаркировки.ХешСуммаУпаковки
	|	ИЗ
	|		КодыМаркировки КАК КодыМаркировки
	|			ЛЕВОЕ СОЕДИНЕНИЕ СтрокиСОшибками КАК СтрокиСОшибками
	|			ПО КодыМаркировки.ИндексСтрокиДерева = СтрокиСОшибками.ИндексСтрокиДерева
	|	ГДЕ
	|		СтрокиСОшибками.ИндексСтрокиДерева ЕСТЬ NULL
	|		И КодыМаркировки.ХешСуммаУпаковки <> """") КАК КодыМаркировки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШаблонаЭтикеткиУпаковкиИСМП КАК ШаблоныЭтикетокУпаковок
	|	ПО КодыМаркировки.ХешСуммаУпаковки = ШаблоныЭтикетокУпаковок.ХешСуммаУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ИндексСтрокиДерева,
	|	КодыМаркировки.ХешСуммаУпаковки,
	|	КодыМаркировки.ВидПродукции,
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.Номенклатура,
	|	КодыМаркировки.Характеристика,
	|	КодыМаркировки.Шаблон,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КодыМаркировки.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(КодыМаркировки.Характеристика) КАК ХарактеристикаПредставление,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеНоменклатуры,
	|	КОЛИЧЕСТВО(1) КАК Количество
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиСОшибками КАК СтрокиСОшибками
	|		ПО КодыМаркировки.ИндексСтрокиДерева = СтрокиСОшибками.ИндексСтрокиДерева
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО КодыМаркировки.GTIN = КэшОписанияОстатков.GTIN
	|ГДЕ
	|	СтрокиСОшибками.ИндексСтрокиДерева ЕСТЬ NULL
	|	И КодыМаркировки.ХешСуммаУпаковки <> """"
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировки.ИндексСтрокиДерева,
	|	КодыМаркировки.ХешСуммаУпаковки,
	|	КодыМаркировки.ВидПродукции,
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.Номенклатура,
	|	КодыМаркировки.Характеристика,
	|	КодыМаркировки.Шаблон,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """")
	|ИТОГИ ПО
	|	КодыМаркировки.ХешСуммаУпаковки,
	|	КодыМаркировки.ИндексСтрокиДерева
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ИндексСтрокиДерева,
	|	КодыМаркировки.ВидПродукции,
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.Номенклатура,
	|	КодыМаркировки.Характеристика,
	|	КодыМаркировки.Шаблон,
	|	ЕСТЬNULL(КэшОписанияОстатков.Представление, """") КАК ПредставлениеНоменклатуры,
	|	ЕСТЬNULL(ШаблоныЭтикеток.ШаблонЭтикетки, &ПустойШаблонЭтикетки) КАК ШаблонЭтикетки
	|ИЗ
	|	КодыМаркировки КАК КодыМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиСОшибками КАК СтрокиСОшибками
	|		ПО КодыМаркировки.ИндексСтрокиДерева = СтрокиСОшибками.ИндексСтрокиДерева
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КэшОписанияОстатковИСМП КАК КэшОписанияОстатков
	|		ПО КодыМаркировки.GTIN = КэшОписанияОстатков.GTIN
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияИспользованияШаблонаЭтикеткиИСМП КАК ШаблоныЭтикеток
	|		ПО КодыМаркировки.Номенклатура = ШаблоныЭтикеток.Номенклатура
	|		И КодыМаркировки.Характеристика = ШаблоныЭтикеток.Характеристика
	|		И КодыМаркировки.GTIN = ШаблоныЭтикеток.GTIN
	|		И КодыМаркировки.Шаблон = ШаблоныЭтикеток.Шаблон
	|ГДЕ
	|	СтрокиСОшибками.ИндексСтрокиДерева ЕСТЬ NULL
	|	И КодыМаркировки.ХешСуммаУпаковки = """"
	|УПОРЯДОЧИТЬ ПО
	|	КодыМаркировки.GTIN,
	|	КодыМаркировки.Номенклатура,
	|	КодыМаркировки.Характеристика,
	|	КодыМаркировки.Шаблон
	|";
	
	Возврат Запрос;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокКодовМаркировкиПроизвольнымиКодами(Выборка)
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КлючНоменклатура   = Неопределено;
	КлючХарактеристика = Неопределено;
	КлючШаблон         = Неопределено;
	КлючGTIN           = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		Если КлючНоменклатура <> Выборка.Номенклатура
			Или КлючХарактеристика <> Выборка.Характеристика
			Или КлючШаблон <> Выборка.Шаблон
			Или КлючGTIN <> Выборка.GTIN Тогда
			
			СтрокаТаблицы = СписокКодовМаркировки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
			СтрокаТаблицы.Содержимое = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				Выборка.Номенклатура, Выборка.Характеристика,,,
				ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
				Выборка.ПредставлениеНоменклатуры, Выборка.ВидПродукции));
			
			КлючНоменклатура   = Выборка.Номенклатура;
			КлючХарактеристика = Выборка.Характеристика;
			КлючШаблон         = Выборка.Шаблон;
			КлючGTIN           = Выборка.GTIN;
			
		КонецЕсли;
		СтрокаТаблицы.ПроизвольныеКодыДляПечати.Добавить(Выборка.ИндексСтрокиДерева);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из СписокКодовМаркировки Цикл
		СтрокаТаблицы.Количество       = СтрокаТаблицы.ПроизвольныеКодыДляПечати.Количество();
		СтрокаТаблицы.КоличествоПечать = СтрокаТаблицы.Количество;
	КонецЦикла;
	
	СписокКодовМаркировки.Сортировать("Содержимое");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиОшибкиЗаполненияПроизвольныхКодов(НарушенаСтруктура, ОтсутствуетВПуле, ДеревоУпаковок)
	
	КоличествоКодовДляОшибки = 5;
	
	НарушенаСтруктураКоличество = НарушенаСтруктура.Количество();
	Если НарушенаСтруктураКоличество > 0 Тогда
		МассивКодов = Новый Массив;
		Пока НарушенаСтруктура.Следующий() Цикл
			МассивКодов.Добавить(ДеревоУпаковок.Строки[НарушенаСтруктура.ИндексСтрокиДерева].Штрихкод);
			Если МассивКодов.Количество() = КоличествоКодовДляОшибки Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТекстКодыМаркировки = СтрСоединить(МассивКодов, ", ");
		Если НарушенаСтруктураКоличество > КоличествоКодовДляОшибки Тогда
			ТекстКодыМаркировки = СтрШаблон(
				НСтр("ru = '%1 (+ еще %2)'"),
				ТекстКодыМаркировки,
				НарушенаСтруктураКоличество - КоличествоКодовДляОшибки);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'Нарушена структура упаковки: %1. Коды маркировки, входящие в упаковку не могут быть распечатаны. Требуется заново создать упаковку.'"),
			ТекстКодыМаркировки));
	КонецЕсли;
	
	ОтсутствуетВПулеКоличество = ОтсутствуетВПуле.Количество();
	Если ОтсутствуетВПулеКоличество > 0 Тогда
		МассивКодов = Новый Массив;
		Пока ОтсутствуетВПуле.Следующий() Цикл
			МассивКодов.Добавить(ОтсутствуетВПуле.КодМаркировки);
			Если МассивКодов.Количество() = КоличествоКодовДляОшибки Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТекстКодыМаркировки = СтрСоединить(МассивКодов, ", ");
		Если ОтсутствуетВПулеКоличество > КоличествоКодовДляОшибки Тогда
			ТекстКодыМаркировки = СтрШаблон(
				НСтр("ru = '%1 ( + еще %2 )'"),
				ТекстКодыМаркировки,
				ОтсутствуетВПулеКоличество - КоличествоКодовДляОшибки);
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'В пуле кодов маркировки не найдены коды маркировки: %1. Данные коды не могут быть распечатаны. Требуется сканирование полного кода маркировки.'"),
			ТекстКодыМаркировки));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоАгрегированныхКодовПроизвольнымиКодами(РезультатЗапроса, ДеревоУпаковок)
	
	ПоляДерева = Новый Структура;
	Если ДеревоУпаковок.Колонки.Найти("КоличествоПоДаннымИБ") <> Неопределено Тогда
		ПоляДерева.Вставить("КоличествоПоДаннымИБ",                        "КоличествоПоДаннымИБ");
		ПоляДерева.Вставить("КоличествоПотребительскихУпаковокПоДаннымИБ", "КоличествоПотребительскихУпаковокПоДаннымИБ");
	Иначе
		ПоляДерева.Вставить("КоличествоПоДаннымИБ",                        "КоличествоПодчиненныхВсего");
		ПоляДерева.Вставить("КоличествоПотребительскихУпаковокПоДаннымИБ", "КоличествоПодчиненныхПотребительскихУпаковок");
	КонецЕсли;
	
	СоставУпаковки = Обработки.ВиртуальнаяАгрегацияУпаковокИСМП.НоваяСоставУпаковки();
	СоставУпаковки.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПродукцииИС"));
	
	ЭлементыДерева = ДеревоАгрегированныхКодов.ПолучитьЭлементы();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		ВыборкаСтрока = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаСтрока.Следующий();
		
		ЭлементДерева = ЭлементыДерева.Добавить();
		ЭлементДерева.ХешСуммаУпаковки = Выборка.ХешСуммаУпаковки;
		ЭлементДерева.ВерхнийУровень = Истина;
		ЭлементДерева.ПроизвольныеКодыДляПечати.Добавить(ВыборкаСтрока.ИндексСтрокиДерева);
		
		СтрокаДерева = ДеревоУпаковок.Строки[ВыборкаСтрока.ИндексСтрокиДерева];
		
		ПроизвольнаяОдноуровневаяУпаковка = РегистрыСведений.ПулКодовМаркировкиСУЗ.ЭтоПроизвольнаяОдноуровневаяУпаковка(СтрокаДерева.Строки);
		
		СоставУпаковки.Очистить();
		СодержимоеУпаковки = ИнтеграцияИС.ИнициализироватьСодержимоеУпаковки();
		
		ВыборкаНоменклатура = ВыборкаСтрока.Выбрать();
		Пока ВыборкаНоменклатура.Следующий() Цикл
			СтрокаСоставаУпаковки = СоставУпаковки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСоставаУпаковки, ВыборкаНоменклатура, , "ПредставлениеНоменклатуры");
			
			СтрокаСодержимого = СодержимоеУпаковки.Добавить();
			СтрокаСодержимого.Серия      = "";
			СтрокаСодержимого.Количество = ВыборкаНоменклатура.Количество;
			Если ЗначениеЗаполнено(ВыборкаНоменклатура.Номенклатура) Тогда
				СтрокаСоставаУпаковки.ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
					ВыборкаНоменклатура.НоменклатураПредставление, ВыборкаНоменклатура.ХарактеристикаПредставление);
				
				СтрокаСодержимого.Номенклатура   = ВыборкаНоменклатура.НоменклатураПредставление;
				СтрокаСодержимого.Характеристика = ВыборкаНоменклатура.ХарактеристикаПредставление;
			Иначе
				ПредставлениеОстатков = ИнтеграцияИСМПКлиентСервер.ПредставлениеGTINОстаткиПоВидуПродукции(
					ВыборкаНоменклатура.ПредставлениеНоменклатуры, ВыборкаНоменклатура.ВидПродукции);
				
				СтрокаСоставаУпаковки.ПредставлениеНоменклатуры = ПредставлениеОстатков;
				
				СтрокаСодержимого.Номенклатура   = ПредставлениеОстатков;
				СтрокаСодержимого.Характеристика = "";
			КонецЕсли;
		КонецЦикла;
		
		СодержимоеУпаковки.Свернуть("Номенклатура,Характеристика,Серия", "Количество");
		
		Если СодержимоеУпаковки.Количество() = 1 Тогда
			Содержимое = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				СодержимоеУпаковки[0].Номенклатура, СодержимоеУпаковки[0].Характеристика);
		ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			Содержимое = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
				СтрокаДерева.Номенклатура, СтрокаДерева.Характеристика);
		Иначе
			Содержимое = ИнтеграцияИС.ПредставлениеСоставаУпаковки(СодержимоеУпаковки);
		КонецЕсли;
		
		Пока ВыборкаСтрока.Следующий() Цикл
			ЭлементДерева.ПроизвольныеКодыДляПечати.Добавить(ВыборкаСтрока.ИндексСтрокиДерева);
		КонецЦикла;
		
		ЭлементДерева.Количество       = ЭлементДерева.ПроизвольныеКодыДляПечати.Количество();
		ЭлементДерева.КоличествоПечать = ЭлементДерева.Количество;
		
		ПараметрыУпаковки = Новый Структура;
		ПараметрыУпаковки.Вставить("СоставУпаковки",                    СоставУпаковки);
		ПараметрыУпаковки.Вставить("Содержимое",                        Содержимое);
		ПараметрыУпаковки.Вставить("ПроизвольнаяОдноуровневаяУпаковка", ПроизвольнаяОдноуровневаяУпаковка);
		
		ЗаполнитьЭлементДереваПоСтрокеДерева(ЭлементДерева, СтрокаДерева, ПараметрыУпаковки, ПоляДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлементДереваПоСтрокеДерева(Приемник, Источник, ПараметрыУпаковки, ПоляДерева)
	
	Если ЗначениеЗаполнено(Источник.Номенклатура) Тогда
		Приемник.Номенклатура   = Источник.Номенклатура;
		Приемник.Характеристика = Источник.Характеристика;
	Иначе
		Приемник.GTIN = Источник.GTIN;
	КонецЕсли;
	
	Приемник.КоличествоЭкземпляров = 1;
	
	Если Источник.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Приемник.Шаблон      = Перечисления.ВидыУпаковокИС.Логистическая;
		Приемник.ЭтоУпаковка = Истина;
		
		Если ПараметрыУпаковки.ПроизвольнаяОдноуровневаяУпаковка Тогда
			Содержимое = ПараметрыУпаковки.Содержимое;
		Иначе
			Содержимое = СтрШаблон("%1 (%2 %3)",
				НСтр("ru = 'Короб'"),
				Источник[ПоляДерева.КоличествоПотребительскихУпаковокПоДаннымИБ],
				НСтр("ru = 'ед'"));
			Если Приемник.ВерхнийУровень Тогда
				Содержимое = Содержимое + ", " + ПараметрыУпаковки.Содержимое;
			КонецЕсли;
		КонецЕсли;
		Приемник.Содержимое = Содержимое;
	Иначе
		НайденнаяСтрока = Неопределено;
		ВидПродукции    = Неопределено;
		Шаблон          = Неопределено;
		Если ПараметрыУпаковки.СоставУпаковки.Количество() = 1 Тогда
			НайденнаяСтрока = ПараметрыУпаковки.СоставУпаковки[0];
			ВидПродукции    = НайденнаяСтрока.ВидПродукции;
			Шаблон          = НайденнаяСтрока.Шаблон;
		ИначеЕсли Источник.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
			И ПараметрыУпаковки.СоставУпаковки.Количество() > 0 Тогда
			ВидПродукции = ПараметрыУпаковки.СоставУпаковки[0].ВидПродукции;
		Иначе
			СтруктураПоиска = Новый Структура;
			Если ЗначениеЗаполнено(Источник.Номенклатура) Тогда
				СтруктураПоиска.Вставить("Номенклатура",   Источник.Номенклатура);
				СтруктураПоиска.Вставить("Характеристика", Источник.Характеристика);
			Иначе
				СтруктураПоиска.Вставить("GTIN", Источник.GTIN);
			КонецЕсли;
			
			НайденныеСтроки = ПараметрыУпаковки.СоставУпаковки.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() = 1 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				ВидПродукции    = НайденнаяСтрока.ВидПродукции;
				Шаблон          = НайденнаяСтрока.Шаблон;
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				ВидПродукции    = НайденныеСтроки[0].ВидПродукции;
			КонецЕсли;
		КонецЕсли;
		
		Если Источник.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			Приемник.ЭтоГрупповаяУпаковка = Истина;
			Если ВидПродукции <> Неопределено Тогда
				ЭтоТабачнаяПродукция = ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции);
			Иначе
				ЭтоТабачнаяПродукция = Ложь;
			КонецЕсли;
			Если ЭтоТабачнаяПродукция Тогда
				Содержимое = НСтр("ru = 'блок'");
			Иначе
				Содержимое = НСтр("ru = 'групповая упаковка'");
			КонецЕсли;
			Если Приемник.ВерхнийУровень Тогда
				Содержимое = Содержимое + ", " + ПараметрыУпаковки.Содержимое;
			КонецЕсли;
			Приемник.Содержимое = Содержимое;
			
			Если Шаблон <> Неопределено Тогда
				Приемник.Шаблон = Шаблон;
			ИначеЕсли ВидПродукции <> Неопределено Тогда
				Приемник.Шаблон = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(ВидПродукции, 4);
			КонецЕсли;
		ИначеЕсли Источник.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			Приемник.ЭтоНабор = Истина;
			Содержимое = НСтр("ru = 'набор'");
			Если Приемник.ВерхнийУровень Тогда
				Содержимое = Содержимое + ", " + ПараметрыУпаковки.Содержимое;
			КонецЕсли;
			Приемник.Содержимое = Содержимое;
			
			Если Шаблон <> Неопределено Тогда
				Приемник.Шаблон = Шаблон;
			ИначеЕсли ВидПродукции <> Неопределено Тогда
				Приемник.Шаблон = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(ВидПродукции, 5);
			КонецЕсли;
		Иначе
			Если НайденнаяСтрока = Неопределено
				И НайденныеСтроки.Количество() > 0 Тогда
				ШаблоныГрупповойУпаковки = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(ВидПродукции, 4);
				Для Каждого Строка Из НайденныеСтроки Цикл
					Если ШаблоныГрупповойУпаковки.НайтиПоЗначению(Строка.Шаблон) = Неопределено Тогда
						НайденнаяСтрока = Строка;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если НайденнаяСтрока <> Неопределено Тогда
				Приемник.Содержимое = НайденнаяСтрока.ПредставлениеНоменклатуры;
				Приемник.Шаблон     = НайденнаяСтрока.Шаблон;
			Иначе
				Приемник.Содержимое = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(Источник.Номенклатура, Источник.Характеристика);
				Если ВидПродукции <> Неопределено Тогда
					Приемник.Шаблон = ИнтеграцияИСМПКлиентСервер.ШаблонКодаМаркировкиПоВидуПродукции(ВидПродукции);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Источник.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
		СтрокиПриемника = Приемник.ПолучитьЭлементы();
		ТаблицаСоставаУпаковки = ПолучитьТаблицуСоставаУпаковки(Источник.Строки, ПоляДерева);
		Для Каждого СтрокаСоставаУпаковки Из ТаблицаСоставаУпаковки Цикл
			СтрокаПриемника = СтрокиПриемника.Добавить();
			СтрокаИсточника = Источник.Строки[СтрокаСоставаУпаковки.ИндексСтрокиДерева];
			
			Если Источник.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				СтрокаПриемника.ЭтоВложеннаяЕдиница = Истина;
			КонецЕсли;
			
			СтрокаПриемника.Количество = СтрокаСоставаУпаковки.Количество * Приемник.Количество;
			СтрокаПриемника.КоличествоПечать = СтрокаПриемника.Количество;
			
			ЗаполнитьЭлементДереваПоСтрокеДерева(СтрокаПриемника, СтрокаИсточника, ПараметрыУпаковки, ПоляДерева);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуСоставаУпаковки(СтрокиСоставаУпаковки, ПоляДерева)
	
	ТаблицаСостава = Новый ТаблицаЗначений;
	ТаблицаСостава.Колонки.Добавить("ВидУпаковки",          Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ТаблицаСостава.Колонки.Добавить("ТипУпаковки",          Новый ОписаниеТипов("ПеречислениеСсылка.ТипыУпаковок"));
	ТаблицаСостава.Колонки.Добавить("Номенклатура",         Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаСостава.Колонки.Добавить("Характеристика",       Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаСостава.Колонки.Добавить("GTIN",                 Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаСостава.Колонки.Добавить(ПоляДерева.КоличествоПоДаннымИБ,
		ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ТаблицаСостава.Колонки.Добавить(ПоляДерева.КоличествоПотребительскихУпаковокПоДаннымИБ,
		ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	СтруктураПоиска = Новый Структура;
	Для Каждого Колонка Из ТаблицаСостава.Колонки Цикл
		СтруктураПоиска.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаСостава.Колонки.Добавить("ИндексСтрокиДерева", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаСостава.Колонки.Добавить("Количество",         ОбщегоНазначения.ОписаниеТипаЧисло(5));
	
	Для Каждого СтрокаСостава Из СтрокиСоставаУпаковки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСостава);
		НайденныеСтроки = ТаблицаСостава.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТаблицы = ТаблицаСостава.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаСостава);
			СтрокаТаблицы.ИндексСтрокиДерева = СтрокиСоставаУпаковки.Индекс(СтрокаСостава);
			СтрокаТаблицы.Количество = 1;
		Иначе
			СтрокаТаблицы = НайденныеСтроки[0];
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаСостава;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИзИсторииИспользованияШаблонаЭтикеткиУпаковки(ШаблоныЭтикетокАгрегированныхКодов)
	
	Для Каждого ЭлементДерева Из ДеревоАгрегированныхКодов.ПолучитьЭлементы() Цикл
		СтрокаТаблицы = ШаблоныЭтикетокАгрегированныхКодов.Найти(ЭлементДерева.ХешСуммаУпаковки);
		Если СтрокаТаблицы <> Неопределено
			И ЗначениеЗаполнено(СтрокаТаблицы.СоставУпаковкиСШаблономЭтикетки) Тогда
			СоставУпаковкиСШаблономЭтикетки = СтрокаТаблицы.СоставУпаковкиСШаблономЭтикетки.Получить();
			Если СоставУпаковкиСШаблономЭтикетки.Строки.Количество() = 1 Тогда
				ЗаполнитьИзИсторииШаблонЭтикетки(ЭлементДерева, СоставУпаковкиСШаблономЭтикетки.Строки[0]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзИсторииШаблонЭтикетки(Приемник, Источник)
	
	Приемник.ШаблонЭтикетки = Источник.ШаблонЭтикетки;
	Если Приемник.ЭтоУпаковка И Источник.КоличествоЭкземпляров > 0 Тогда
		Приемник.КоличествоЭкземпляров = Источник.КоличествоЭкземпляров;
	КонецЕсли;
	
	СтрокиПриемника = Приемник.ПолучитьЭлементы();
	КоличествоСтрок = СтрокиПриемника.Количество();
	Если КоличествоСтрок = 1 И Источник.Строки.Количество() = 1 Тогда
		ЗаполнитьИзИсторииШаблонЭтикетки(СтрокиПриемника[0], Источник.Строки[0]);
	ИначеЕсли КоличествоСтрок > 1 Тогда
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,GTIN");
		Для Каждого СтрокаПриемника Из СтрокиПриемника Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПриемника);
			НайденныеСтроки = Источник.Строки.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЗаполнитьИзИсторииШаблонЭтикетки(СтрокаПриемника, НайденныеСтроки[0]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Печать

&НаСервере
Функция ПодготовитьДанныеДляПечати()
	
	Если ПечатьПроизвольныхКодов Тогда
		ДеревоУпаковок = ПолучитьИзВременногоХранилища(АдресХранилищаДереваУпаковок);
	КонецЕсли;
	
	Если Элементы.СтраницыКодыМаркировки.ТекущаяСтраница = Элементы.СтраницаАгрегированныеКодыМаркировки Тогда
		Если ПечатьПроизвольныхКодов Тогда
			ДанныеДляПечати = ДанныеДляПечатиПроизвольныеАгрегированныеКоды(ДеревоУпаковок);
		Иначе
			ДанныеДляПечати = ДанныеДляПечатиАгрегированныеКоды();
		КонецЕсли;
	Иначе
		Если ПечатьПроизвольныхКодов Тогда
			ДанныеДляПечати = ДанныеДляПечатиПроизвольныеСвободныеКоды(ДеревоУпаковок);
		Иначе
			ДанныеДляПечати = ДанныеДляПечатиСвободныеКоды();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

&НаСервере
Функция ДанныеДляПечатиСвободныеКоды()
	
	ДанныеДляПечати = РегистрыСведений.ПулКодовМаркировкиСУЗ.НоваяТаблицаДанныхДляПечатиЭтикеток().СкопироватьКолонки(
		"ВидПродукции,Номенклатура,Характеристика,GTIN,Шаблон,СпособВводаВОборот,ШаблонЭтикетки,
		|КоличествоПечать,Порядок,ПредставлениеНоменклатуры");
	
	ФормированиеЭтикеток = ЭтоФормированиеЭтикеток(ЭтотОбъект);
	
	Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток Тогда
		ИзмененныеШаблоныЭтикеток = РегистрыСведений.ИсторияИспользованияШаблонаЭтикеткиИСМП.ИнициализироватьТаблицуДляЗаписиДанных();
	КонецЕсли;
	
	Порядок = 0;
	Для Каждого СтрокаТаблицы Из СписокКодовМаркировки Цикл
		
		Если СтрокаТаблицы.КоличествоПечать = 0
			Или ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И Не ЗначениеЗаполнено(СтрокаТаблицы.ШаблонЭтикетки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных = ДанныеДляПечати.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
		Порядок = Порядок + 1;
		СтрокаДанных.Порядок = Порядок;
		СтрокаДанных.ПредставлениеНоменклатуры = СтрокаТаблицы.Содержимое;
		
		Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И СтрокаТаблицы.ШаблонЭтикеткиИзменен Тогда
			ИзмененныйШаблонЭтикетки = ИзмененныеШаблоныЭтикеток.Добавить();
			ЗаполнитьЗначенияСвойств(ИзмененныйШаблонЭтикетки, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = ЗапросДанныеДляПечатиСвободныеКоды(ДанныеДляПечати);
	ВыборкаИтог = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОбъектыПечати = Новый Массив;
	Отказ = Ложь;
	Порядок = 0;
	
	Пока ВыборкаИтог.Следующий() Цикл
		
		СтрокаДанных = ДанныеДляПечати[ВыборкаИтог.Порядок - 1];
		
		Если ВыборкаИтог.КодМаркировки < СтрокаДанных.КоличествоПечать Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Недостаточно кодов маркировки для печати ""%1"". Требуется: %2, доступно: %3'"),
				СтрокаДанных.ПредставлениеНоменклатуры,
				СтрокаДанных.КоличествоПечать,
				ВыборкаИтог.КодМаркировки);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
		Если Отказ Тогда
			Продолжить;
		КонецЕсли;
		
		Добавлено = 0;
		Выборка = ВыборкаИтог.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПараметрыШтрихкода = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
			ЗаполнитьЗначенияСвойств(ПараметрыШтрихкода, СтрокаДанных);
			
			Порядок = Порядок + 1;
			ПараметрыШтрихкода.Порядок = Порядок;
			
			ПараметрыШтрихкода.Организация            = Организация;
			ПараметрыШтрихкода.Количество             = 1;
			ПараметрыШтрихкода.КодМаркировки          = Выборка.КодМаркировки;
			ПараметрыШтрихкода.ХешСуммаКодаМаркировки = Выборка.ХешСуммаКодаМаркировки;
			
			ОбъектыПечати.Добавить(ПараметрыШтрихкода);
			
			Добавлено = Добавлено + 1;
			Если СтрокаДанных.КоличествоПечать = Добавлено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно выполнить печать кодов маркировки'");
	КонецЕсли;
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",              ОбъектыПечати);
	ИтоговаяСтруктура.Вставить("Документ",                   Документ);
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте(ЭтотОбъект));
	ИтоговаяСтруктура.Вставить("КоличествоЭтикеток",         ОбъектыПечати.Количество());
	ИтоговаяСтруктура.Вставить("ПакетнаяПечать",             Ложь);
	Если ФормированиеЭтикеток Тогда
		ИтоговаяСтруктура.Вставить("РежимПечати", "Выборочно");
	Иначе
		ИтоговаяСтруктура.Вставить("РежимПечати", "ВыборочноВТаблицу");
		ИтоговаяСтруктура.Вставить("НастройкиПечатиЭтикетокВТаблицу",
			КомпоновщикНастроекТабличногоДокумента.Настройки);
	КонецЕсли;
	Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И ИзмененныеШаблоныЭтикеток.Количество() > 0 Тогда
		ИтоговаяСтруктура.Вставить("ИзмененныеШаблоныЭтикеток",
			ПоместитьВоВременноеХранилище(ИзмененныеШаблоныЭтикеток, УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаСервере
Функция ДанныеДляПечатиПроизвольныеСвободныеКоды(ДеревоУпаковок)
	
	ФормированиеЭтикеток = ЭтоФормированиеЭтикеток(ЭтотОбъект);
	
	Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток Тогда
		ИзмененныеШаблоныЭтикеток = РегистрыСведений.ИсторияИспользованияШаблонаЭтикеткиИСМП.ИнициализироватьТаблицуДляЗаписиДанных();
	КонецЕсли;
	
	Порядок = 0;
	ОбъектыПечати = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СписокКодовМаркировки Цикл
		
		Если СтрокаТаблицы.КоличествоПечать = 0
			Или ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И Не ЗначениеЗаполнено(СтрокаТаблицы.ШаблонЭтикетки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И СтрокаТаблицы.ШаблонЭтикеткиИзменен Тогда
			ИзмененныйШаблонЭтикетки = ИзмененныеШаблоныЭтикеток.Добавить();
			ЗаполнитьЗначенияСвойств(ИзмененныйШаблонЭтикетки, СтрокаТаблицы);
		КонецЕсли;
		
		Порядок = Порядок + 1;
		Для Индекс = 0 По СтрокаТаблицы.КоличествоПечать - 1 Цикл
			СтрокаДереваУпаковок = ДеревоУпаковок.Строки[СтрокаТаблицы.ПроизвольныеКодыДляПечати[Индекс].Значение];
			
			ПараметрыШтрихкода = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
			ЗаполнитьЗначенияСвойств(ПараметрыШтрихкода, СтрокаТаблицы);
			
			ПараметрыШтрихкода.Порядок                = Порядок;
			ПараметрыШтрихкода.Организация            = Организация;
			ПараметрыШтрихкода.Количество             = 1;
			ПараметрыШтрихкода.КодМаркировки          = СтрокаДереваУпаковок.Штрихкод;
			ПараметрыШтрихкода.ХешСуммаКодаМаркировки = СтрокаДереваУпаковок.ХешСумма;
			
			ОбъектыПечати.Добавить(ПараметрыШтрихкода);
		КонецЦикла;
		
	КонецЦикла;
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",              ОбъектыПечати);
	ИтоговаяСтруктура.Вставить("Документ",                   Неопределено);
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте(ЭтотОбъект));
	ИтоговаяСтруктура.Вставить("КоличествоЭтикеток",         ОбъектыПечати.Количество());
	ИтоговаяСтруктура.Вставить("ПакетнаяПечать",             Ложь);
	ИтоговаяСтруктура.Вставить("РазрешитьПовторнуюПечать",   Истина);
	Если ФормированиеЭтикеток Тогда
		ИтоговаяСтруктура.Вставить("РежимПечати", "Выборочно");
	Иначе
		ИтоговаяСтруктура.Вставить("РежимПечати", "ВыборочноВТаблицу");
		ИтоговаяСтруктура.Вставить("НастройкиПечатиЭтикетокВТаблицу",
			КомпоновщикНастроекТабличногоДокумента.Настройки);
	КонецЕсли;
	Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И ИзмененныеШаблоныЭтикеток.Количество() > 0 Тогда
		ИтоговаяСтруктура.Вставить("ИзмененныеШаблоныЭтикеток",
			ПоместитьВоВременноеХранилище(ИзмененныеШаблоныЭтикеток, УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаСервере
Функция ДанныеДляПечатиАгрегированныеКоды()
	
	ДанныеДляПечати = Новый ТаблицаЗначений;
	ДанныеДляПечати.Колонки.Добавить("ХешСуммаУпаковки",      ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеДляПечати.Колонки.Добавить("Содержимое",            Новый ОписаниеТипов("Строка"));
	ДанныеДляПечати.Колонки.Добавить("КоличествоПечать",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеДляПечати.Колонки.Добавить("КоличествоРаспечатано", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеДляПечати.Колонки.Добавить("СоставУпаковки",        Новый ОписаниеТипов("ДеревоЗначений"));
	
	ФормированиеЭтикеток = ЭтоФормированиеЭтикеток(ЭтотОбъект);
	
	Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток Тогда
		ИзмененныеШаблоныЭтикеток = РегистрыСведений.ИсторияИспользованияШаблонаЭтикеткиУпаковкиИСМП.ИнициализироватьТаблицуДляЗаписиДанных();
	КонецЕсли;
	
	ХешСуммыСтрок = Новый Соответствие;
	
	Для Каждого ЭлементДерева Из ДеревоАгрегированныхКодов.ПолучитьЭлементы() Цикл
		
		Если ЭлементДерева.КоличествоПечать = 0 
			Или ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И Не ЗначениеЗаполнено(ЭлементДерева.ШаблонЭтикетки)
			Или Не ЗначениеЗаполнено(ЭлементДерева.ХешСуммаУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДанных = ДанныеДляПечати.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, ЭлементДерева);
		ХешСуммыСтрок.Вставить(СтрокаДанных.ХешСуммаУпаковки, СтрокаДанных);
		
		СоставУпаковки = РегистрыСведений.ИсторияИспользованияШаблонаЭтикеткиУпаковкиИСМП.ИнициализироватьДеревоСоставаУпаковки();
		ЗаполнитьСоставУпаковки(СоставУпаковки, ЭлементДерева);
		СтрокаДанных.СоставУпаковки = СоставУпаковки;
		
		Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И ЭлементДерева.ШаблонЭтикеткиИзменен Тогда
			ИзмененныйШаблонЭтикетки = ИзмененныеШаблоныЭтикеток.Добавить();
			ИзмененныйШаблонЭтикетки.ХешСуммаУпаковки = ЭлементДерева.ХешСуммаУпаковки;
			ИзмененныйШаблонЭтикетки.СоставУпаковки   = СоставУпаковки;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = ЗапросДанныеДляПечатиАгрегированныеКоды(ДанныеДляПечати);
	
	СоответствиеУпаковок = Новый Соответствие;
	ШтрихкодыУпаковок    = Новый Массив;
	ХешСуммаУпаковки     = "";
	Отказ                = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ХешСуммаУпаковки <> Выборка.ХешСуммаУпаковки Тогда
			ДобавленоУпаковок = 0;
			ХешСуммаУпаковки = Выборка.ХешСуммаУпаковки;
			СтрокаДанных = ХешСуммыСтрок[ХешСуммаУпаковки];
			СтрокаДанных.КоличествоРаспечатано = Выборка.КоличествоРаспечатано;
			Если Выборка.КоличествоКПечати < СтрокаДанных.КоличествоПечать Тогда
				ТекстСообщения = СтрШаблон(НСтр(
					"ru = 'Недостаточно упаковок для печати ""%1"". Требуется: %2, доступно: %3'"),
					СтрокаДанных.Содержимое,
					СтрокаДанных.КоличествоПечать,
					Выборка.КоличествоКПечати);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Не Отказ
			И ДобавленоУпаковок < СтрокаДанных.КоличествоПечать Тогда
			СоответствиеУпаковок.Вставить(Выборка.ШтрихкодУпаковки, Выборка.ХешСуммаУпаковки);
			ШтрихкодыУпаковок.Добавить(Выборка.ШтрихкодУпаковки);
			ДобавленоУпаковок = ДобавленоУпаковок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно выполнить печать агрегированных кодов'");
	КонецЕсли;
	
	ВложенныеШтрихкоды = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(ШтрихкодыУпаковок);
	ШтрихкодыУпаковок = Неопределено;
	
	ДанныеДляПечати.Колонки.Добавить("ШтрихкодыУпаковок", Новый ОписаниеТипов("Массив"));
	
	Для Каждого Строка Из ВложенныеШтрихкоды.ДеревоУпаковок.Строки Цикл
		СтрокаДанных = ХешСуммыСтрок[СоответствиеУпаковок[Строка.ШтрихкодУпаковки]];
		СтрокаДанных.ШтрихкодыУпаковок.Добавить(Строка);
	КонецЦикла;
	СоответствиеУпаковок = Неопределено;
	
	ОбъектыПечати     = Новый Массив;
	ПараметрыУпаковки = Новый Структура;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Порядок",                     0);
	ПараметрыВыполнения.Вставить("КоличествоЭтикеток",          0);
	ПараметрыВыполнения.Вставить("ШтрихкодНормализованДляПула", Ложь);
	
	Если ВариантПечати = 0 Тогда
		ОбъектыПечатиГруппы = ОбъектыПечати;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ДанныеДляПечати Цикл
		
		Если ВариантПечати = 1 Тогда
			ПараметрыВыполнения.Порядок = 0;
			ОбъектыПечатиГруппы = Новый Массив;
			СтруктураОбъектаПечати = Новый Структура;
			СтруктураОбъектаПечати.Вставить("Заголовок", СтрШаблон(
				НСтр("ru = '%1 (%2 уп.)'"),
				СтрокаДанных.Содержимое,
				СтрокаДанных.КоличествоПечать));
			СтруктураОбъектаПечати.Вставить("ОбъектыПечати", ОбъектыПечатиГруппы);
			ОбъектыПечати.Добавить(СтруктураОбъектаПечати);
		КонецЕсли;
		
		НомерУпаковки = 0;
		НомерВГруппе = СтрокаДанных.КоличествоРаспечатано;
		Для Каждого Упаковка Из СтрокаДанных.ШтрихкодыУпаковок Цикл
			
			Если ВариантПечати = 2 Тогда
				ПараметрыВыполнения.Порядок = 0;
				НомерУпаковки = НомерУпаковки + 1;
				ОбъектыПечатиГруппы = Новый Массив;
				СтруктураОбъектаПечати = Новый Структура;
				СтруктураОбъектаПечати.Вставить("Заголовок", СтрШаблон(
					НСтр("ru = '%1 (%2 из %3)'"),
					СтрокаДанных.Содержимое,
					НомерУпаковки,
					СтрокаДанных.КоличествоПечать));
				СтруктураОбъектаПечати.Вставить("ОбъектыПечати", ОбъектыПечатиГруппы);
				ОбъектыПечати.Добавить(СтруктураОбъектаПечати);
			КонецЕсли;
			
			НомерВГруппе = НомерВГруппе + 1;
			ПараметрыУпаковки.Вставить("НомерВГруппе",        НомерВГруппе);
			ПараметрыУпаковки.Вставить("НомерВГруппеСтрокой", Строка(НомерВГруппе));
			ДобавитьОбъектыПечатиУпаковки(ОбъектыПечатиГруппы, Упаковка,
				СтрокаДанных.СоставУпаковки.Строки[0], ПараметрыУпаковки, ПараметрыВыполнения);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",              ОбъектыПечати);
	ИтоговаяСтруктура.Вставить("Документ",                   Документ);
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте(ЭтотОбъект));
	ИтоговаяСтруктура.Вставить("КоличествоЭтикеток",         ПараметрыВыполнения.КоличествоЭтикеток);
	ИтоговаяСтруктура.Вставить("ПакетнаяПечать",             ВариантПечати > 0);
	Если ФормированиеЭтикеток Тогда
		ИтоговаяСтруктура.Вставить("РежимПечати",    "Выборочно");
	Иначе
		ИтоговаяСтруктура.Вставить("РежимПечати",    "ВыборочноВТаблицу");
		ИтоговаяСтруктура.Вставить("НастройкиПечатиЭтикетокВТаблицу",
			КомпоновщикНастроекТабличногоДокумента.Настройки);
	КонецЕсли;
	Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И ИзмененныеШаблоныЭтикеток.Количество() > 0 Тогда
		ИтоговаяСтруктура.Вставить("ИзмененныеШаблоныЭтикеток",
			ПоместитьВоВременноеХранилище(ИзмененныеШаблоныЭтикеток, УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаСервере
Функция ДанныеДляПечатиПроизвольныеАгрегированныеКоды(ДеревоУпаковок)
	
	ДанныеДляПечати = Новый ТаблицаЗначений;
	ДанныеДляПечати.Колонки.Добавить("ХешСуммаУпаковки",      ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ДанныеДляПечати.Колонки.Добавить("Содержимое",            Новый ОписаниеТипов("Строка"));
	ДанныеДляПечати.Колонки.Добавить("КоличествоПечать",      ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеДляПечати.Колонки.Добавить("КоличествоРаспечатано", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДанныеДляПечати.Колонки.Добавить("СоставУпаковки",        Новый ОписаниеТипов("ДеревоЗначений"));
	
	ФормированиеЭтикеток = ЭтоФормированиеЭтикеток(ЭтотОбъект);
	
	Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток Тогда
		ИзмененныеШаблоныЭтикеток = РегистрыСведений.ИсторияИспользованияШаблонаЭтикеткиУпаковкиИСМП.ИнициализироватьТаблицуДляЗаписиДанных();
	КонецЕсли;
	
	ОбъектыПечати     = Новый Массив;
	ПараметрыУпаковки = Новый Структура;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Порядок",                     0);
	ПараметрыВыполнения.Вставить("КоличествоЭтикеток",          0);
	ПараметрыВыполнения.Вставить("ШтрихкодНормализованДляПула", Истина);
	
	Если ВариантПечати = 0 Тогда
		ОбъектыПечатиГруппы = ОбъектыПечати;
	КонецЕсли;
	
	Для Каждого ЭлементДерева Из ДеревоАгрегированныхКодов.ПолучитьЭлементы() Цикл
		
		Если ЭлементДерева.КоличествоПечать = 0 
			Или ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И Не ЗначениеЗаполнено(ЭлементДерева.ШаблонЭтикетки) Тогда
			Продолжить;
		КонецЕсли;
		
		СоставУпаковки = РегистрыСведений.ИсторияИспользованияШаблонаЭтикеткиУпаковкиИСМП.ИнициализироватьДеревоСоставаУпаковки();
		ЗаполнитьСоставУпаковки(СоставУпаковки, ЭлементДерева);
		
		Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И ЭлементДерева.ШаблонЭтикеткиИзменен Тогда
			ИзмененныйШаблонЭтикетки = ИзмененныеШаблоныЭтикеток.Добавить();
			ИзмененныйШаблонЭтикетки.ХешСуммаУпаковки = ЭлементДерева.ХешСуммаУпаковки;
			ИзмененныйШаблонЭтикетки.СоставУпаковки   = СоставУпаковки;
		КонецЕсли;
		
		Если ВариантПечати = 1 Тогда
			ПараметрыВыполнения.Порядок = 0;
			ОбъектыПечатиГруппы = Новый Массив;
			СтруктураОбъектаПечати = Новый Структура;
			СтруктураОбъектаПечати.Вставить("Заголовок", СтрШаблон(
				НСтр("ru = '%1 (%2 уп.)'"),
				ЭлементДерева.Содержимое,
				ЭлементДерева.КоличествоПечать));
			СтруктураОбъектаПечати.Вставить("ОбъектыПечати", ОбъектыПечатиГруппы);
			ОбъектыПечати.Добавить(СтруктураОбъектаПечати);
		КонецЕсли;
		
		НомерУпаковки = 0;
		НомерВГруппе  = 0;
		Для Индекс = 0 По ЭлементДерева.КоличествоПечать - 1 Цикл
			
			Упаковка = ДеревоУпаковок.Строки[ЭлементДерева.ПроизвольныеКодыДляПечати[Индекс].Значение];
			
			Если ВариантПечати = 2 Тогда
				ПараметрыВыполнения.Порядок = 0;
				НомерУпаковки = НомерУпаковки + 1;
				ОбъектыПечатиГруппы = Новый Массив;
				СтруктураОбъектаПечати = Новый Структура;
				СтруктураОбъектаПечати.Вставить("Заголовок", СтрШаблон(
					НСтр("ru = '%1 (%2 из %3)'"),
					ЭлементДерева.Содержимое,
					НомерУпаковки,
					ЭлементДерева.КоличествоПечать));
				СтруктураОбъектаПечати.Вставить("ОбъектыПечати", ОбъектыПечатиГруппы);
				ОбъектыПечати.Добавить(СтруктураОбъектаПечати);
			КонецЕсли;
			
			НомерВГруппе = НомерВГруппе + 1;
			ПараметрыУпаковки.Вставить("НомерВГруппе",        НомерВГруппе);
			ПараметрыУпаковки.Вставить("НомерВГруппеСтрокой", Строка(НомерВГруппе));
			ДобавитьОбъектыПечатиУпаковки(ОбъектыПечатиГруппы, Упаковка,
				СоставУпаковки.Строки[0], ПараметрыУпаковки, ПараметрыВыполнения);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИтоговаяСтруктура = Новый Структура;
	ИтоговаяСтруктура.Вставить("ОбъектыПечати",              ОбъектыПечати);
	ИтоговаяСтруктура.Вставить("Документ",                   Неопределено);
	ИтоговаяСтруктура.Вставить("КаждаяЭтикеткаНаНовомЛисте", КаждаяЭтикеткаНаНовомЛисте(ЭтотОбъект));
	ИтоговаяСтруктура.Вставить("КоличествоЭтикеток",         ПараметрыВыполнения.КоличествоЭтикеток);
	ИтоговаяСтруктура.Вставить("ПакетнаяПечать",             ВариантПечати > 0);
	ИтоговаяСтруктура.Вставить("РазрешитьПовторнуюПечать",   Истина);
	Если ФормированиеЭтикеток Тогда
		ИтоговаяСтруктура.Вставить("РежимПечати",    "Выборочно");
	Иначе
		ИтоговаяСтруктура.Вставить("РежимПечати",    "ВыборочноВТаблицу");
		ИтоговаяСтруктура.Вставить("НастройкиПечатиЭтикетокВТаблицу",
			КомпоновщикНастроекТабличногоДокумента.Настройки);
	КонецЕсли;
	Если ВидимостьШаблонаЭтикетки И ФормированиеЭтикеток И ИзмененныеШаблоныЭтикеток.Количество() > 0 Тогда
		ИтоговаяСтруктура.Вставить("ИзмененныеШаблоныЭтикеток",
			ПоместитьВоВременноеХранилище(ИзмененныеШаблоныЭтикеток, УникальныйИдентификатор));
	КонецЕсли;
	
	Возврат ИтоговаяСтруктура;
	
КонецФункции

&НаСервере
Процедура ДобавитьОбъектыПечатиУпаковки(ОбъектыПечати, Упаковка, СтрокаСоставаУпаковки, ПараметрыУпаковки, ПараметрыВыполнения)
	
	ТекущиеПараметрыУпаковки = Новый Структура;
	ТекущиеПараметрыУпаковки.Вставить("НомерВГруппе", 0);
	
	СтруктураПоиска = Новый Структура;
	КоличествоВложенныхСтрок = СтрокаСоставаУпаковки.Строки.Количество();
	Если КоличествоВложенныхСтрок = 0 Тогда
		ВызватьИсключение СтрШаблон(НСтр(
			"ru = 'Упаковка со штрихкодом ""%1"" не соответствует заданной структуре упаковки'"),
			Упаковка.Штрихкод);
	ИначеЕсли КоличествоВложенныхСтрок = 1 Тогда
		ТекущаяСтрокаСоставаУпаковки = СтрокаСоставаУпаковки.Строки[0];
	Иначе
		ТекущаяСтрокаСоставаУпаковки = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаУпаковки Из Упаковка.Строки Цикл
		Если КоличествоВложенныхСтрок > 1 Тогда
			НуженПоиск = Истина;
			Если ТекущаяСтрокаСоставаУпаковки <> Неопределено Тогда
				Если СтруктураПоиска.Свойство("Номенклатура") Тогда
					Если СтруктураПоиска.Номенклатура = СтрокаУпаковки.Номенклатура
						И СтруктураПоиска.Характеристика = СтрокаУпаковки.Характеристика Тогда
						НуженПоиск = Ложь;
					КонецЕсли;
				ИначеЕсли СтруктураПоиска.GTIN = СтрокаУпаковки.GTIN Тогда
					НуженПоиск = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НуженПоиск Тогда
				СтруктураПоиска.Очистить();
				Если ЗначениеЗаполнено(СтрокаУпаковки.Номенклатура) Тогда
					СтруктураПоиска.Вставить("Номенклатура",   СтрокаУпаковки.Номенклатура);
					СтруктураПоиска.Вставить("Характеристика", СтрокаУпаковки.Характеристика);
				Иначе
					СтруктураПоиска.Вставить("GTIN",           СтрокаУпаковки.GTIN);
				КонецЕсли;
				НайденныеСтроки = СтрокаСоставаУпаковки.Строки.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ВызватьИсключение СтрШаблон(НСтр(
						"ru = 'Упаковка со штрихкодом ""%1"" не соответствует заданной структуре упаковки'"),
						СтрокаУпаковки.Штрихкод);
				Иначе
					ТекущаяСтрокаСоставаУпаковки = НайденныеСтроки[0];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаУпаковки.Строки.Количество() = 0 Тогда
			ПараметрыВыполнения.Порядок = ПараметрыВыполнения.Порядок + 1;
			ХешСуммаКодаУпаковки = "";
			Если ПараметрыВыполнения.ШтрихкодНормализованДляПула Тогда
				КодМаркировки          = СтрокаУпаковки.Штрихкод;
				ХешСуммаКодаМаркировки = СтрокаУпаковки.ХешСумма;
				КодУпаковки            = Упаковка.Штрихкод;
				Если Упаковка.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
					ХешСуммаКодаУпаковки = Упаковка.ХешСумма;
				КонецЕсли;
			Иначе
				КодМаркировки          = РегистрыСведений.ПулКодовМаркировкиСУЗ.КодМаркировкиДляСохраненияВПул(СтрокаУпаковки, Ложь);
				ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(КодМаркировки);
				КодУпаковки            = РегистрыСведений.ПулКодовМаркировкиСУЗ.КодМаркировкиДляСохраненияВПул(Упаковка, Ложь);
				Если Упаковка.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
					ХешСуммаКодаУпаковки = ИнтеграцияИС.ХешированиеДанныхSHA256(КодУпаковки);
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыШтрихкода                        = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
			ПараметрыШтрихкода.Организация            = Организация;
			ПараметрыШтрихкода.Номенклатура           = СтрокаУпаковки.Номенклатура;
			ПараметрыШтрихкода.Характеристика         = СтрокаУпаковки.Характеристика;
			ПараметрыШтрихкода.Серия                  = СтрокаУпаковки.Серия;
			ПараметрыШтрихкода.GTIN                   = СтрокаУпаковки.GTIN;
			ПараметрыШтрихкода.КодМаркировки          = КодМаркировки;
			ПараметрыШтрихкода.ХешСуммаКодаМаркировки = ХешСуммаКодаМаркировки;
			ПараметрыШтрихкода.КодУпаковки            = КодУпаковки;
			ПараметрыШтрихкода.ХешСуммаКодаУпаковки   = ХешСуммаКодаУпаковки;
			ПараметрыШтрихкода.ТипШтрихкода           = СтрокаУпаковки.ТипШтрихкода;
			ПараметрыШтрихкода.НомерВГруппе           = ПараметрыУпаковки.НомерВГруппеСтрокой;
			ПараметрыШтрихкода.Порядок                = ПараметрыВыполнения.Порядок;
			ПараметрыШтрихкода.ШтрихкодУпаковки       = СтрокаУпаковки.ШтрихкодУпаковки;
			ПараметрыШтрихкода.Количество             = 1;
			ПараметрыШтрихкода.ЭтоКодМаркировки       = Истина;
			Если ВидимостьШаблонаЭтикетки Тогда
				ПараметрыШтрихкода.ШаблонЭтикетки = ТекущаяСтрокаСоставаУпаковки.ШаблонЭтикетки;
			КонецЕсли;
			
			ПараметрыВыполнения.КоличествоЭтикеток = ПараметрыВыполнения.КоличествоЭтикеток + ПараметрыШтрихкода.Количество;
			ОбъектыПечати.Добавить(ПараметрыШтрихкода);
		Иначе
			ТекущиеПараметрыУпаковки.Вставить("НомерВГруппе",
				ТекущиеПараметрыУпаковки.НомерВГруппе + 1);
			ТекущиеПараметрыУпаковки.Вставить("НомерВГруппеСтрокой",
				СтрШаблон("%1-%2",
					ПараметрыУпаковки.НомерВГруппеСтрокой,
					ТекущиеПараметрыУпаковки.НомерВГруппе));
			
			ДобавитьОбъектыПечатиУпаковки(ОбъектыПечати, СтрокаУпаковки,
				ТекущаяСтрокаСоставаУпаковки, ТекущиеПараметрыУпаковки, ПараметрыВыполнения);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыВыполнения.Порядок = ПараметрыВыполнения.Порядок + 1;
	КодУпаковки          = "";
	ХешСуммаКодаУпаковки = "";
	Если ПараметрыВыполнения.ШтрихкодНормализованДляПула Тогда
		КодМаркировки          = Упаковка.Штрихкод;
		ХешСуммаКодаМаркировки = Упаковка.ХешСумма;
		Если Упаковка.Родитель <> Неопределено Тогда
			КодУпаковки = Упаковка.Родитель.Штрихкод;
			Если Упаковка.Родитель.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ХешСуммаКодаУпаковки = Упаковка.Родитель.ХешСумма;
			КонецЕсли;
		КонецЕсли;
	Иначе
		КодМаркировки          = РегистрыСведений.ПулКодовМаркировкиСУЗ.КодМаркировкиДляСохраненияВПул(Упаковка, Ложь);
		ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(КодМаркировки);
		Если Упаковка.Родитель <> Неопределено Тогда
			КодУпаковки = РегистрыСведений.ПулКодовМаркировкиСУЗ.КодМаркировкиДляСохраненияВПул(Упаковка.Родитель, Ложь);
			Если Упаковка.Родитель.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая Тогда
				ХешСуммаКодаУпаковки = ИнтеграцияИС.ХешированиеДанныхSHA256(КодУпаковки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыШтрихкода                        = ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
	ПараметрыШтрихкода.Организация            = Организация;
	ПараметрыШтрихкода.Номенклатура           = Упаковка.Номенклатура;
	ПараметрыШтрихкода.Характеристика         = Упаковка.Характеристика;
	ПараметрыШтрихкода.КодМаркировки          = КодМаркировки;
	ПараметрыШтрихкода.ХешСуммаКодаМаркировки = ХешСуммаКодаМаркировки;
	ПараметрыШтрихкода.КодУпаковки            = КодУпаковки;
	ПараметрыШтрихкода.ХешСуммаКодаУпаковки   = ХешСуммаКодаУпаковки;
	ПараметрыШтрихкода.ТипШтрихкода           = Упаковка.ТипШтрихкода;
	ПараметрыШтрихкода.НомерВГруппе           = ПараметрыУпаковки.НомерВГруппеСтрокой;
	ПараметрыШтрихкода.Порядок                = ПараметрыВыполнения.Порядок;
	ПараметрыШтрихкода.ШтрихкодУпаковки       = Упаковка.ШтрихкодУпаковки;
	ПараметрыШтрихкода.СодержимоеКоличество   = Упаковка.Строки.Количество();
	ПараметрыШтрихкода.ЭтоКодМаркировки       = Упаковка.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Логистическая;
	Если СтрокаСоставаУпаковки.КоличествоЭкземпляров > 0 Тогда
		ПараметрыШтрихкода.Количество = СтрокаСоставаУпаковки.КоличествоЭкземпляров;
	Иначе
		ПараметрыШтрихкода.Количество = 1;
	КонецЕсли;
	Если ВидимостьШаблонаЭтикетки Тогда
		ПараметрыШтрихкода.ШаблонЭтикетки = СтрокаСоставаУпаковки.ШаблонЭтикетки;
	КонецЕсли;
	
	ПараметрыВыполнения.КоличествоЭтикеток = ПараметрыВыполнения.КоличествоЭтикеток + ПараметрыШтрихкода.Количество;
	ОбъектыПечати.Добавить(ПараметрыШтрихкода);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставУпаковки(СоставУпаковки, ЭлементДерева)
	
	СтрокаСостава = СоставУпаковки.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаСостава, ЭлементДерева);
	
	Для Каждого ЭлементУпаковки Из ЭлементДерева.ПолучитьЭлементы() Цикл
		ЗаполнитьСоставУпаковки(СтрокаСостава, ЭлементУпаковки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапросДанныеДляПечатиСвободныеКоды(ДанныеДляПечати)
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	
	ДополнительноеУсловие = 
	"	И (ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	ИЛИ ПулКодовМаркировки.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1))";
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ДополнитьЗапросКодамиСМРЦ(Запрос, ЭтоЗаказНаЭмиссию, ДополнительноеУсловие);
	
	Запрос.УстановитьПараметр("ПустаяНоменклатура", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры",
		ДанныеДляПечати.Скопировать(, "Номенклатура,Характеристика,GTIN,Шаблон,Порядок"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.КодМаркировки,
	|	Таблица.ХешСуммаКодаМаркировки,
	|	Таблица.КодМаркировкиСМРЦ,
	|	Таблица.ХешСуммаКодаМаркировкиСМРЦ
	|ПОМЕСТИТЬ ТаблицаКодовСМРЦ
	|ИЗ
	|	&ТаблицаКодовСМРЦ КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.GTIN КАК GTIN,
	|	ТаблицаНоменклатуры.Шаблон КАК Шаблон,
	|	ТаблицаНоменклатуры.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВТТаблицаНоменклатуры
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.Номенклатура КАК Номенклатура,
	|	ПулКодовМаркировки.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.Номенклатура = &ПустаяНоменклатура
	|			ТОГДА ПулКодовМаркировки.GTIN
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК GTIN,
	|	ПулКодовМаркировки.Шаблон КАК Шаблон,
	|	ПулКодовМаркировки.ШтрихкодУпаковки,
	|	ПулКодовМаркировки.КодМаркировки,
	|	ПулКодовМаркировки.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ, ПулКодовМаркировки.КодМаркировки) КАК КодМаркировкиСМРЦ,
	|	ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ, ПулКодовМаркировки.ХешСуммаКодаМаркировки) КАК ХешСуммаКодаМаркировкиСМРЦ,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|				ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|				ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		Иначе """"
	|	КОНЕЦ КАК ЗначениеШтрихкодаУпаковки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|				ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|				ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода
	|		Иначе """"
	|	КОНЕЦ КАК ХешСуммаЗначенияШтрихкодаУпаковки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|				ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|				ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакСоставляющей,
	|	ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка) КАК
	|		ВСоставеУпаковки,
	|	ПулКодовМаркировки.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1) КАК Распечатан
	|ПОМЕСТИТЬ ВТКодыМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКодовСМРЦ КАК ТаблицаКодовСМРЦ
	|		ПО ПулКодовМаркировки.КодМаркировки = ТаблицаКодовСМРЦ.КодМаркировки
	|			И ПулКодовМаркировки.ХешСуммаКодаМаркировки = ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И (ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	ИЛИ ПулКодовМаркировки.ДатаПечатиУниверсальная = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	КодыМаркировки.КодМаркировки КАК КодМаркировки,
	|	КодыМаркировки.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	КодыМаркировки.Распечатан КАК Распечатан
	|ПОМЕСТИТЬ ВТКодыВУпаковках
	|ИЗ
	|	ВТКодыМаркировки КАК КодыМаркировки
	|ГДЕ
	|	КодыМаркировки.ВСоставеУпаковки
	|	И КодыМаркировки.ПризнакСоставляющей = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ВложенныеЕдиницы.КодМаркировки КАК КодМаркировки,
	|	ВложенныеЕдиницы.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|	ВложенныеЕдиницы.Распечатан КАК Распечатан
	|ИЗ
	|	ВТКодыМаркировки КАК ВложенныеЕдиницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировки КАК КодыМаркировки
	|		ПО ВложенныеЕдиницы.ЗначениеШтрихкодаУпаковки = КодыМаркировки.КодМаркировкиСМРЦ
	|		И ВложенныеЕдиницы.ХешСуммаЗначенияШтрихкодаУпаковки = КодыМаркировки.ХешСуммаКодаМаркировкиСМРЦ
	|ГДЕ
	|	ВложенныеЕдиницы.ПризнакСоставляющей = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыВУпаковках.ШтрихкодУпаковки
	|ПОМЕСТИТЬ ВТУпаковки
	|ИЗ
	|	ВТКодыВУпаковках КАК КодыВУпаковках
	|СГРУППИРОВАТЬ ПО
	|	КодыВУпаковках.ШтрихкодУпаковки
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|		КОГДА КодыВУпаковках.Распечатан
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) > 0
	|	И СУММА(ВЫБОР
	|		КОГДА КодыВУпаковках.Распечатан
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Порядок КАК Порядок,
	|	ЕСТЬNULL(КодыМаркировки.ВСоставеУпаковки, ЛОЖЬ) КАК ВСоставеУпаковки,
	|	ЕСТЬNULL(КодыМаркировки.КодМаркировки, """") КАК КодМаркировки,
	|	ЕСТЬNULL(КодыМаркировки.ХешСуммаКодаМаркировки, """") КАК ХешСуммаКодаМаркировки
	|ИЗ
	|	ВТТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КодыМаркировки.Номенклатура КАК Номенклатура,
	|			КодыМаркировки.Характеристика КАК Характеристика,
	|			КодыМаркировки.GTIN КАК GTIN,
	|			КодыМаркировки.Шаблон КАК Шаблон,
	|			КодыМаркировки.КодМаркировки КАК КодМаркировки,
	|			КодыМаркировки.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|			КодыМаркировки.ВСоставеУпаковки КАК ВСоставеУпаковки
	|		ИЗ
	|			ВТКодыМаркировки КАК КодыМаркировки
	|		ГДЕ
	|			НЕ КодыМаркировки.ВСоставеУпаковки
	|			И НЕ КодыМаркировки.Распечатан
	|
	|		ОБЪЕДИНИТЬ ВСЕ
	|
	|		ВЫБРАТЬ
	|			КодыМаркировки.Номенклатура КАК Номенклатура,
	|			КодыМаркировки.Характеристика КАК Характеристика,
	|			КодыМаркировки.GTIN КАК GTIN,
	|			КодыМаркировки.Шаблон КАК Шаблон,
	|			КодыМаркировки.КодМаркировки КАК КодМаркировки,
	|			КодыМаркировки.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
	|			КодыМаркировки.ВСоставеУпаковки КАК ВСоставеУпаковки
	|		ИЗ
	|			ВТКодыМаркировки КАК КодыМаркировки
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыВУпаковках КАК КодыВУпаковках
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУпаковки КАК Упаковки
	|					ПО КодыВУпаковках.ШтрихкодУпаковки = Упаковки.ШтрихкодУпаковки
	|					И НЕ КодыВУпаковках.Распечатан
	|				ПО КодыМаркировки.КодМаркировки = КодыВУпаковках.КодМаркировки
	|				И КодыМаркировки.ХешСуммаКодаМаркировки = КодыВУпаковках.ХешСуммаКодаМаркировки) КАК КодыМаркировки
	|		ПО ТаблицаНоменклатуры.Номенклатура = КодыМаркировки.Номенклатура
	|		И ТаблицаНоменклатуры.Характеристика = КодыМаркировки.Характеристика
	|		И ТаблицаНоменклатуры.GTIN = КодыМаркировки.GTIN
	|		И ТаблицаНоменклатуры.Шаблон = КодыМаркировки.Шаблон
	|УПОРЯДОЧИТЬ ПО
	|	Порядок, ВСоставеУпаковки, ХешСуммаКодаМаркировки
	|ИТОГИ
	|	КОЛИЧЕСТВО(КодМаркировки) КАК КодМаркировки
	|ПО
	|	Порядок";
	
	Возврат Запрос;
	
КонецФункции

&НаСервере
Функция ЗапросДанныеДляПечатиАгрегированныеКоды(ДанныеДляПечати)
	
	ЭтоЗаказНаЭмиссию = ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаказНаЭмиссиюКодовМаркировкиСУЗ");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",         Документ);
	Запрос.УстановитьПараметр("ХешСуммыУпаковок", ДанныеДляПечати.ВыгрузитьКолонку("ХешСуммаУпаковки"));
	
	ДополнительноеУсловие = 
	"	И ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И ПулКодовМаркировки.ХешСуммаУпаковки В (&ХешСуммыУпаковок)";
	
	РегистрыСведений.ПулКодовМаркировкиСУЗ.ДополнитьЗапросКодамиСМРЦ(Запрос, ЭтоЗаказНаЭмиссию, ДополнительноеУсловие);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.КодМаркировки,
	|	Таблица.ХешСуммаКодаМаркировки,
	|	Таблица.КодМаркировкиСМРЦ,
	|	Таблица.ХешСуммаКодаМаркировкиСМРЦ
	|ПОМЕСТИТЬ ТаблицаКодовСМРЦ
	|ИЗ
	|	&ТаблицаКодовСМРЦ КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПулКодовМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|	ПулКодовМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ, ПулКодовМаркировки.КодМаркировки) КАК КодМаркировки,
	|	ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ, ПулКодовМаркировки.ХешСуммаКодаМаркировки) КАК ХешСуммаКодаМаркировки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|				ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|				ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		Иначе """"
	|	КОНЕЦ КАК ЗначениеШтрихкодаУпаковки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|				ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|				ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода
	|		Иначе """"
	|	КОНЕЦ КАК ХешСуммаЗначенияШтрихкодаУпаковки,
	|	ВЫБОР
	|		КОГДА ПулКодовМаркировки.ШтрихкодУпаковки.ТипШтрихкода В
	|		(Значение(Перечисление.ТипыШтрихкодов.DataMatrix), Значение(Перечисление.ТипыШтрихкодов.GS1_DataMatrix))
	|		И (ЕСТЬNULL(ТаблицаКодовСМРЦ.КодМаркировкиСМРЦ,
	|				ПулКодовМаркировки.КодМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ЗначениеШтрихкода
	|		ИЛИ ЕСТЬNULL(ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировкиСМРЦ,
	|				ПулКодовМаркировки.ХешСуммаКодаМаркировки) <> ПулКодовМаркировки.ШтрихкодУпаковки.ХешСуммаЗначенияШтрихкода)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакСоставляющей,
	|	ПулКодовМаркировки.ДатаПечатиУниверсальная <> ДАТАВРЕМЯ(1, 1, 1) КАК Распечатан
	|ПОМЕСТИТЬ втКодыМаркировки
	|ИЗ
	|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКодовСМРЦ КАК ТаблицаКодовСМРЦ
	|		ПО ПулКодовМаркировки.КодМаркировки = ТаблицаКодовСМРЦ.КодМаркировки
	|			И ПулКодовМаркировки.ХешСуммаКодаМаркировки = ТаблицаКодовСМРЦ.ХешСуммаКодаМаркировки
	|ГДЕ
	|	ПулКодовМаркировки." + ?(ЭтоЗаказНаЭмиссию, "ЗаказНаЭмиссию", "ДокументОснование") + " = &Документ
	|	И ПулКодовМаркировки.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|	И ПулКодовМаркировки.ХешСуммаУпаковки В (&ХешСуммыУпаковок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодыМаркировки.ХешСуммаУпаковки,
	|	КодыМаркировки.ШтрихкодУпаковки,
	|	МАКСИМУМ(КодыМаркировки.Распечатан) КАК Распечатана
	|ПОМЕСТИТЬ ВТУпаковки
	|ИЗ
	|	(ВЫБРАТЬ
	|		КодыМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|		КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|		КодыМаркировки.Распечатан КАК Распечатан
	|	ИЗ
	|		ВТКодыМаркировки КАК КодыМаркировки
	|	ГДЕ
	|		КодыМаркировки.ПризнакСоставляющей = 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		КодыМаркировки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|		КодыМаркировки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|		ВложенныеЕдиницы.Распечатан КАК Распечатан
	|	ИЗ
	|		ВТКодыМаркировки КАК ВложенныеЕдиницы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыМаркировки КАК КодыМаркировки
	|			ПО ВложенныеЕдиницы.ЗначениеШтрихкодаУпаковки = КодыМаркировки.КодМаркировки
	|			И ВложенныеЕдиницы.ХешСуммаЗначенияШтрихкодаУпаковки = КодыМаркировки.ХешСуммаКодаМаркировки
	|	ГДЕ
	|		ВложенныеЕдиницы.ПризнакСоставляющей = 1) КАК КодыМаркировки
	|СГРУППИРОВАТЬ ПО
	|	КодыМаркировки.ХешСуммаУпаковки,
	|	КодыМаркировки.ШтрихкодУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.ХешСуммаУпаковки,
	|	СУММА(ВЫБОР
	|		КОГДА Упаковки.Распечатана
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоРаспечатано,
	|	СУММА(ВЫБОР
	|		КОГДА Упаковки.Распечатана
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ) КАК КоличествоКПечати
	|ПОМЕСТИТЬ ВТИтоги
	|ИЗ
	|	ВТУпаковки КАК Упаковки
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.ХешСуммаУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.ХешСуммаУпаковки КАК ХешСуммаУпаковки,
	|	Упаковки.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	Итоги.КоличествоРаспечатано КАК КоличествоРаспечатано,
	|	Итоги.КоличествоКПечати КАК КоличествоКПечати
	|ИЗ
	|	ВТУпаковки КАК Упаковки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТИтоги КАК Итоги
	|		ПО Упаковки.ХешСуммаУпаковки = Итоги.ХешСуммаУпаковки
	|ГДЕ
	|	НЕ Упаковки.Распечатана
	|УПОРЯДОЧИТЬ ПО
	|	ХешСуммаУпаковки";
	
	Возврат Запрос;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КаждаяЭтикеткаНаНовомЛисте(Форма)
	
	Возврат Форма.РазмещениеЭтикетокНаЛисте = "Отдельно";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоФормированиеЭтикеток(Форма)
	
	Возврат Форма.РежимФормирования = "Этикетки";
	
КонецФункции

&НаКлиенте
Процедура ОтветПользователяПродолженияПечатиОкончание(Ответ, ДанныеПечати) Экспорт
	
	ЕстьИзмененныеШаблоныЭтикеток = ВидимостьШаблонаЭтикетки
		И ДанныеПечати.Свойство("ИзмененныеШаблоныЭтикеток")
		И ЭтоАдресВременногоХранилища(ДанныеПечати.ИзмененныеШаблоныЭтикеток);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ЕстьИзмененныеШаблоныЭтикеток Тогда
			УдалитьИзВременногоХранилища(ДанныеПечати.ИзмененныеШаблоныЭтикеток);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПечатьЭтикетокИСМПКлиент.НапечататьЭтикеткиИСМП(ДанныеПечати, ЭтотОбъект);
	
	Если ЕстьИзмененныеШаблоныЭтикеток Тогда
		ЗаписатьИзмененныеШаблоныЭтикеток(ДанныеПечати.ИзмененныеШаблоныЭтикеток,
			Элементы.СтраницыКодыМаркировки.ТекущаяСтраница = Элементы.СтраницаАгрегированныеКодыМаркировки);
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьИзмененныеШаблоныЭтикеток(Адрес, АгрегированныеКоды)
	
	Если ЭтоАдресВременногоХранилища(Адрес) Тогда
		Попытка
			Если АгрегированныеКоды Тогда
				РегистрыСведений.ИсторияИспользованияШаблонаЭтикеткиУпаковкиИСМП.ЗаписатьДанные(
					ПолучитьИзВременногоХранилища(Адрес));
			Иначе
				РегистрыСведений.ИсторияИспользованияШаблонаЭтикеткиИСМП.ЗаписатьДанные(
					ПолучитьИзВременногоХранилища(Адрес));
			КонецЕсли;
			УдалитьИзВременногоХранилища(Адрес);
		Исключение
			ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
