#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	РазрешенаПовторнаяПечать = ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НезаполненныеЗначенияОснования",
		ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП"), Истина);
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ИнтеграцияИС.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Статус", Статус, СтруктураБыстрогоОтбора);
	ИнтеграцияИС.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Организация", Организации, СтруктураБыстрогоОтбора);
	
	СобытияФормИСМП.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам(ЭтотОбъект, "СписокКодов");
	
	УстановитьТекстОтбораПоДоступнымМетаданнымОснования();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СписокКодовОрганизацииПриИзменении(Элемент)

	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организации, Истина, "СписокКодов");
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "СписокКодов");
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "СписокКодов");
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "СписокКодов");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовОрганизацияПриИзменении(Элемент)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организация, Истина, "СписокКодов");
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "СписокКодов");
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "СписокКодов");
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокКодовОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "СписокКодов");
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаСписокКодовОтборСтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	ПараметрыФормыПечати = Новый Структура();
	ПараметрыФормыПечати.Вставить("Документ", Элементы.Список.ТекущиеДанные.ДокументОснование);
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыПечати", ЭтотОбъект);
	
	СобытияФормИСМПКлиент.ОтрытьФормуПечатиКодовМаркировок(ЭтотОбъект, ПараметрыФормыПечати, ОповещениеПриЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВиртуальнаяАгрегация(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыАгрегации = Новый Структура();
	ПараметрыФормыАгрегации.Вставить("Документ", ТекущиеДанные.ДокументОснование);
	ПараметрыФормыАгрегации.Вставить("ВидПродукции", ТекущиеДанные.ВидПродукции);
	
	ОповещениеПриЗакрытии = Новый ОписаниеОповещения("ПриЗакрытииФормыВиртуальнойАгрегации", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма",
		ПараметрыФормыАгрегации, ЭтотОбъект,,,, ОповещениеПриЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти 

#Область Прочее

&НаКлиенте
Процедура УправлениеДоступностьюКомандСписка()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Элементы.СписокПечать.Доступность = Ложь;
		Элементы.СписокВиртуальнаяАгрегация.Доступность = Ложь;
	Иначе
		Если РазрешенаПовторнаяПечать Тогда
			Элементы.СписокПечать.Доступность = Истина;
		Иначе
			Элементы.СписокПечать.Доступность = ТекущиеДанные.ЕстьНераспечатанные;
		КонецЕсли;
		
		Элементы.СписокВиртуальнаяАгрегация.Доступность = ТекущиеДанные.ЕстьНеагрегированные;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстОтбораПоДоступнымМетаданнымОснования()
	
	МетаРеквизитОснование      = Метаданные.ОпределяемыеТипы.ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП;
	ТипыДокументаОснования     = МетаРеквизитОснование.Тип.Типы();
	СтрокиСоединенияДокументов = Новый Массив;
	СтрокиОтбораДокументов     = Новый Массив;
	ДокументИмеетОснования     = Ложь;
	
	СтрокиОтбораДокументов.Добавить("ПулКодовМаркировкиСУЗ.ДокументОснование В (&НезаполненныеЗначенияОснования)");
	
	// Подготовим строки соединения и отбора по доступным документам-основаниям.
	Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
		
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
		
		Если МетаданныеОснования = Неопределено Тогда
			Продолжить;
		Иначе
			ДокументИмеетОснования = Истина;
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим соединение с документом-основанием для RLS.
		СтрокиСоединенияДокументов.Добавить(
		"	ЛЕВОЕ СОЕДИНЕНИЕ Документ." + МетаданныеОснования.Имя + " КАК ДоступКДокументу" + МетаданныеОснования.Имя + "
		|		ПО ПулКодовМаркировкиСУЗ.ДокументОснование = ДоступКДокументу" + МетаданныеОснования.Имя + ".Ссылка");
		
		СтрокиОтбораДокументов.Добавить("ДоступКДокументу" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
		
	КонецЦикла;
	
	Если ДокументИмеетОснования Тогда
		
		ТекстСоединения         = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
		ТекстОтбора         = "ГДЕ
		|	" + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + " ИЛИ ");
		
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "//%СоединениеСОснованиями%",     ТекстСоединения);
		Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "//%ОтборПоДоступнымОснованиям%", ТекстОтбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыПечати(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСписокКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВиртуальнойАгрегации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСписокКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокКодовМаркировки()
	
	Элементы.Список.Обновить();
	
	УправлениеДоступностьюКомандСписка();
	
КонецПроцедуры

#КонецОбласти 
