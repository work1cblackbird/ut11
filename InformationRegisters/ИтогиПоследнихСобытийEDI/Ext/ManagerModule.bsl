#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Конструктор параметров записи в регистр
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * КоличествоСобытий - Число - число событий.
// * Дата - Дата - день, за который рассчитано число событий.
// * Менеджер - СправочникСсылка.Пользователи - менеджер по которому рассчитаны события.
// * ТипДокумента - ПеречислениеСсылка.ТипыДокументовEDI - тип документа, по которому рассчитаны события.
// * Организация - ОпределяемыйТип.ОрганизацияEDI - организация, по которой рассчитаны события.
//
Функция ПараметрыЗаписиВРегистр() Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Организация" ,      Неопределено);
	ПараметрыЗаписи.Вставить("ТипДокумента" ,     Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("Менеджер" ,         Неопределено);
	ПараметрыЗаписи.Вставить("Дата" ,             Дата(1, 1, 1));
	ПараметрыЗаписи.Вставить("КоличествоСобытий", 0);
	Возврат ПараметрыЗаписи;
	
КонецФункции

// Выполняет запись в регистр
// 
// Параметры:
// 	ПараметрыЗаписи - Структура - см.ПараметрыЗаписиВРегистр:
//
Процедура ВыполнитьЗаписьВРегистр(ПараметрыЗаписи) Экспорт
	
	НаборЗаписей = РегистрыСведений.ИтогиПоследнихСобытийEDI.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТипДокумента.Установить(ПараметрыЗаписи.ТипДокумента);
	НаборЗаписей.Отбор.Менеджер.Установить(ПараметрыЗаписи.Менеджер);
	НаборЗаписей.Отбор.Дата.Установить(ПараметрыЗаписи.Дата);
	
	Если ПараметрыЗаписи.КоличествоСобытий > 0 Тогда
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗаписи);
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет записи из регистра по организации
// 
// Параметры:
// 	Организация - ОпределяемыйТип.ОрганизацияEDI - организация, по которой удаляются записи.
//
Процедура УдалитьИтогиПоОрганизации(Организация) Экспорт
	
	НаборЗаписей = РегистрыСведений.ИтогиПоследнихСобытийEDI.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удаляет записи из регистра по организации и дате
// 
// Параметры:
// 	Организация - ОпределяемыйТип.ОрганизацияEDI - организация, по которой удаляются записи.
// 	Дата - Дата - день, за который удаляются записи.
//
Процедура УдалитьИтогиПоОрганизацииИДате(Организация, Дата) Экспорт
	
	НаборЗаписей = РегистрыСведений.ИтогиПоследнихСобытийEDI.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	НаборЗаписей.Отбор.Дата.Установить(Дата);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Обновляет данные из сервиса
// 
// Параметры:
// 	ПараметрыПодготовки - Структура - параметры получения данных.
// 	АдресХранилища      - Строка - адрес, в который надо поместить полученные данные.
//
Процедура ОбновитьДанныеИзСервиса(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	Результат = РезультатОбновленияДанныхИзСервиса(ПараметрыПодготовки.Организации);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Обновляет данные из сервиса по указанным организациям
// 
// Параметры:
// 	Организации - Массив - организации, по которым надо обновить данные.
// Возвращаемое значение:
// 	Структура - Описание:
// * КоличествоЗаписей - Число - количество обновленных записей.
// * Ошибки    - Массив - ошибки, если они возникли в процессе получения.
//
Функция РезультатОбновленияДанныхИзСервиса(Организации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки",             Новый Массив);
	Результат.Вставить("КоличествоЗаписей",  0);
	
	Если Не ЗначениеЗаполнено(Организации) Тогда
		Возврат Результат;
	КонецЕсли;

	Для Каждого Организация Из Организации Цикл
		
		РезультатОбновления = РезультатОбновленияДанныхИзСервисаПоОрганизации(Организация);
		
		Результат.КоличествоЗаписей = Результат.КоличествоЗаписей + РезультатОбновления.КоличествоЗаписей;
		
		Если Не РезультатОбновления.Успешно Тогда
			Результат.Ошибки.Добавить();
			РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатСнятияБлокировкиОбновляемыхДанных(Организация, Перечисления.ВидыОбновляемыхДанныхEDI.ИтогиЛентыСобытий);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Удаляет лишние данные из регистра.
// 
Процедура УдалитьЛишниеЗаписи() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ИтогиПоследнихСобытийEDI.Организация  КАК Организация,
	|	ИтогиПоследнихСобытийEDI.ТипДокумента КАК ТипДокумента,
	|	ИтогиПоследнихСобытийEDI.Менеджер     КАК Менеджер,
	|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(7,0)))   КАК КоличествоЗаписей
	|ПОМЕСТИТЬ НаборыСЛишнимиЗаписями
	|ИЗ
	|	РегистрСведений.ИтогиПоследнихСобытийEDI КАК ИтогиПоследнихСобытийEDI
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтогиПоследнихСобытийEDI.Организация,
	|	ИтогиПоследнихСобытийEDI.Менеджер,
	|	ИтогиПоследнихСобытийEDI.ТипДокумента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫРАЗИТЬ(1 КАК ЧИСЛО(7,0))) > 4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборыСЛишнимиЗаписями.Организация           КАК Организация,
	|	НаборыСЛишнимиЗаписями.ТипДокумента          КАК ТипДокумента,
	|	НаборыСЛишнимиЗаписями.Менеджер              КАК Менеджер,
	|	НаборыСЛишнимиЗаписями.КоличествоЗаписей - 4 КАК КоличествоЛишнихЗаписей
	|ПОМЕСТИТЬ ИзмеренияКоличествоЛишнихЗаписей
	|ИЗ
	|	НаборыСЛишнимиЗаписями КАК НаборыСЛишнимиЗаписями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогиПоследнихСобытийEDI.Организация                     КАК Организация,
	|	ИтогиПоследнихСобытийEDI.Менеджер                        КАК Менеджер,
	|	ИтогиПоследнихСобытийEDI.Дата                            КАК Дата,
	|	ИзмеренияКоличествоЛишнихЗаписей.КоличествоЛишнихЗаписей КАК КоличествоЛишнихЗаписей,
	|	ИтогиПоследнихСобытийEDI.ТипДокумента                    КАК ТипДокумента
	|ИЗ
	|	РегистрСведений.ИтогиПоследнихСобытийEDI КАК ИтогиПоследнихСобытийEDI
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмеренияКоличествоЛишнихЗаписей КАК ИзмеренияКоличествоЛишнихЗаписей
	|		ПО ИтогиПоследнихСобытийEDI.Организация = ИзмеренияКоличествоЛишнихЗаписей.Организация
	|			И ИтогиПоследнихСобытийEDI.ТипДокумента = ИзмеренияКоличествоЛишнихЗаписей.ТипДокумента
	|			И ИтогиПоследнихСобытийEDI.Менеджер = ИзмеренияКоличествоЛишнихЗаписей.Менеджер
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ ПО
	|	Организация,
	|	Менеджер,
	|	ТипДокумента";
	
	ВыборкаОрганизации = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизации.Следующий() Цикл
		
		ВыборкаМенеджеры = ВыборкаОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаМенеджеры.Следующий() Цикл
			
			ВыборкаТипДокумента = ВыборкаМенеджеры.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаТипДокумента.Следующий() Цикл
				
				КоличествоЛишнихЗаписей    = Неопределено;
				КоличествоУдаленныхЗаписей = 0;
				
				ВыборкаДетали = ВыборкаТипДокумента.Выбрать();
				
				Пока ВыборкаДетали.Следующий() Цикл
					
					Если КоличествоЛишнихЗаписей = Неопределено Тогда
						КоличествоЛишнихЗаписей = ВыборкаДетали.КоличествоЛишнихЗаписей;
					КонецЕсли;
					
					Если КоличествоУдаленныхЗаписей = КоличествоЛишнихЗаписей Тогда
						Прервать;
					КонецЕсли;
					
					ПараметрыЗаписи = ПараметрыЗаписиВРегистр();
					
					ПараметрыЗаписи.Организация       = ВыборкаДетали.Организация;
					ПараметрыЗаписи.ТипДокумента      = ВыборкаДетали.ТипДокумента;
					ПараметрыЗаписи.Менеджер          = ВыборкаДетали.Менеджер;
					ПараметрыЗаписи.Дата              = ВыборкаДетали.Дата;
					ПараметрыЗаписи.КоличествоСобытий = 0;
					
					ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
					
					КоличествоУдаленныхЗаписей = КоличествоУдаленныхЗаписей + 1;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатОбновленияДанныхИзСервисаПоОрганизации(Организация)
	
	ВидОбновляемыхДанных = Перечисления.ВидыОбновляемыхДанныхEDI.ИтогиЛентыСобытий;
	
	РезультатПодготовкиОбновленияДанных = РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатПодготовкиОбновленияДанных(Организация, ВидОбновляемыхДанных);
	
	Если Не РезультатПодготовкиОбновленияДанных.ОбновлениеВозможно Тогда
		Результат = НовыйРезультатОбновления();
		Результат.Успешно = Истина;
		Возврат Результат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПодготовкиОбновленияДанных.ДатаОбновления) Тогда
		
		Возврат РезультатПолученияДанныхИзСервисаПоОрганизации(Организация);
		
	Иначе
		
		НачалоТекущегоОбновления       = ТекущаяДатаСеанса();
		НачалоДняТекущегоОбновления    = НачалоДня(НачалоТекущегоОбновления);
		НачалоДняПредыдущегоОбновления = НачалоДня(РезультатПодготовкиОбновленияДанных.ДатаОбновления);
		
		Если НачалоДняТекущегоОбновления = НачалоДняПредыдущегоОбновления Тогда
			
			Возврат РезультатОбновленияДанныхИзСервисаПоОрганизацииЗаДень(Организация, 
			                                                              НачалоТекущегоОбновления, 
			                                                              НачалоТекущегоОбновления);
			
		Иначе
			
			Если НачалоДняТекущегоОбновления > (НачалоДняПредыдущегоОбновления + 86400) Тогда
				Возврат РезультатПолученияДанныхИзСервисаПоОрганизации(Организация);
			Иначе
				Результат = РезультатОбновленияДанныхИзСервисаПоОрганизацииЗаДень(Организация, 
				                                                                  РезультатПодготовкиОбновленияДанных.ДатаОбновления,
				                                                                  НачалоДняТекущегоОбновления);
				Если Результат.ЕстьОшибка Тогда
					Возврат Результат;
				КонецЕсли;
				
				Возврат РезультатОбновленияДанныхИзСервисаПоОрганизацииЗаДень(Организация, НачалоТекущегоОбновления, НачалоТекущегоОбновления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция РезультатПолученияДанныхИзСервисаПоОрганизации(Организация)
	
	Результат = НовыйРезультатОбновления();
	ВидОбновляемыхДанных = Перечисления.ВидыОбновляемыхДанныхEDI.ИтогиЛентыСобытий;
	
	НачалоОбновления = ТекущаяДатаСеанса();
	
	ПараметрыЗапросаСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияСводнойИнформацииПоЛентеСобытийЗаПериод();
	ПараметрыЗапросаСервис.Организация            = Организация;
	ПараметрыЗапросаСервис.КоличествоАктивныхДней = 4;
	
	ТребуетсяВыполнениеЗапроса = Истина;
	ТаблицаДанных              = Неопределено;
	
	Пока ТребуетсяВыполнениеЗапроса Цикл
		
		РезультатЗапроса = ИнтеграцияССервисомEDIСлужебный.СводнаяИнформацияПоЛентеСобытийЗаПериод(ПараметрыЗапросаСервис);
		
		Если РезультатЗапроса.Ошибка Тогда
			
			ТребуетсяВыполнениеЗапроса = Ложь;
			Результат.Успешно          = Ложь;
			Результат.ТекстОшибки      = РезультатЗапроса.ТекстОшибки;
			Возврат Результат;
			
		Иначе
			
			ТаблицаСДанными = РезультатЗапроса.Данные.Список;
			ДанныеПагинации = РезультатЗапроса.Данные.Страницы;
			
			Если ТаблицаДанных = Неопределено Тогда
				ТаблицаДанных = РезультатЗапроса.Данные.Список;
			Иначе
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Данные.Список, ТаблицаДанных);
			КонецЕсли;
			
			Если ТаблицаСДанными.Количество() > 0 Тогда
				
				ПараметрыЗапросаСервис.ПоложениеКурсора = ДанныеПагинации.СледующаяСтраница;
				ТребуетсяВыполнениеЗапроса              = ЗначениеЗаполнено(ПараметрыЗапросаСервис.ПоложениеКурсора);
				
			Иначе
				
				ТребуетсяВыполнениеЗапроса = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ТаблицаДанных = Неопределено Тогда
			
			УдалитьИтогиПоОрганизации(Организация);
			
		Иначе
			
			НаборЗаписей = РегистрыСведений.ИтогиПоследнихСобытийEDI.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			
			Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
				
				СтрокаНабора = НаборЗаписей.Добавить();
				СтрокаНабора.Организация       = Организация;
				СтрокаНабора.ТипДокумента      = СтрокаТаблицы.ТипДокумента;
				СтрокаНабора.Менеджер          = СтрокаТаблицы.Менеджер;
				СтрокаНабора.Дата              = СтрокаТаблицы.Дата;
				СтрокаНабора.КоличествоСобытий = СтрокаТаблицы.КоличествоСобытий;
				
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
			ПараметрыЗаписи = РегистрыСведений.СостоянияОбновленияДанныхEDI.ПараметрыЗаписиВРегистр();
			ПараметрыЗаписи.Организация                 = Организация;
			ПараметрыЗаписи.ВидОбновляемыхДанных        = ВидОбновляемыхДанных;
			ПараметрыЗаписи.ДатаБлокировкиДляОбновления = Дата(1, 1, 1);
			ПараметрыЗаписи.ДатаОбновления              = НачалоОбновления;
			
			РегистрыСведений.СостоянияОбновленияДанныхEDI.ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат Результат;
	
	КонецПопытки;
	
	Результат.КоличествоЗаписей = ТаблицаДанных.Количество();
	Результат.Успешно     = Истина;		
	
	Возврат Результат;
	
КонецФункции

// Получает итоги последних событий по организации за день.
// 
// Параметры:
// 	Организация - ОпределяемыйТип.ОрганизацияEDI - организация, по которой получаются события\
// 	Дата - Дата - дата, за которую получаются события
// 	ДатаОбновления - Дата - дата начала обновлений.
// Возвращаемое значение:
// 	Структура - см.НовыйРезультатОбновления 
//
Функция РезультатОбновленияДанныхИзСервисаПоОрганизацииЗаДень(Организация, Дата, ДатаОбновления)
	
	Результат = НовыйРезультатОбновления();
	ВидОбновляемыхДанных = Перечисления.ВидыОбновляемыхДанныхEDI.ИтогиЛентыСобытий;
	
	ПараметрыЗапросаСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияСводнойИнформацииПоЛентеСобытийНаДату();
	ПараметрыЗапросаСервис.Организация = Организация;
	ПараметрыЗапросаСервис.Период      = Дата;
	
	ТребуетсяВыполнениеЗапроса = Истина;
	ТаблицаДанных              = Неопределено;
	
	Пока ТребуетсяВыполнениеЗапроса Цикл
		
		РезультатЗапроса = ИнтеграцияССервисомEDIСлужебный.СводнаяИнформацияПоЛентеСобытийНаДату(ПараметрыЗапросаСервис);
		
		Если РезультатЗапроса.Ошибка Тогда
			
			ТребуетсяВыполнениеЗапроса = Ложь;
			Результат.Успешно          = Ложь;
			Результат.ТекстОшибки      = РезультатЗапроса.ТекстОшибки;
			Возврат Результат;
			
		Иначе
			
			ТаблицаСДанными = РезультатЗапроса.Данные.Список;
			ДанныеПагинации = РезультатЗапроса.Данные.Страницы;
			
			Если ТаблицаДанных = Неопределено Тогда
				
				ТаблицаДанных = РезультатЗапроса.Данные.Список;
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РезультатЗапроса.Данные.Список, ТаблицаДанных);
				
			КонецЕсли;
			
			Если ТаблицаСДанными.Количество() > 0 Тогда
				
				ПараметрыЗапросаСервис.ПоложениеКурсора = ДанныеПагинации.СледующаяСтраница;
				ТребуетсяВыполнениеЗапроса              = ЗначениеЗаполнено(ПараметрыЗапросаСервис.ПоложениеКурсора);
				
			Иначе
				
				ТребуетсяВыполнениеЗапроса = Ложь;
				
			КонецЕсли
			
		КонецЕсли;
		
	КонецЦикла;
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ТаблицаДанных = Неопределено Тогда
			
			УдалитьИтогиПоОрганизацииИДате(Организация, Дата);
			
		Иначе
			
			НаборЗаписей = РегистрыСведений.ИтогиПоследнихСобытийEDI.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Организация);
			НаборЗаписей.Отбор.Дата.Установить(Дата);
			
			Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
				
				СтрокаНабора = НаборЗаписей.Добавить();
				СтрокаНабора.Организация       = Организация;
				СтрокаНабора.Дата              = Дата;
				СтрокаНабора.ТипДокумента      = СтрокаТаблицы.ТипДокумента;
				СтрокаНабора.Менеджер          = СтрокаТаблицы.Менеджер;
				СтрокаНабора.КоличествоСобытий = СтрокаТаблицы.КоличествоСобытий;
				
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
			ПараметрыЗаписи = РегистрыСведений.СостоянияОбновленияДанныхEDI.ПараметрыЗаписиВРегистр();
			ПараметрыЗаписи.Организация                 = Организация;
			ПараметрыЗаписи.ВидОбновляемыхДанных        = ВидОбновляемыхДанных;
			ПараметрыЗаписи.ДатаБлокировкиДляОбновления = Дата(1, 1, 1);
			ПараметрыЗаписи.ДатаОбновления              = ДатаОбновления;
			
			РегистрыСведений.СостоянияОбновленияДанныхEDI.ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
		Возврат Результат;
	
	КонецПопытки;
	
	Результат.КоличествоЗаписей = ТаблицаДанных.Количество();
	Результат.Успешно     = Истина;
	
	Возврат Результат;
	
КонецФункции

// Конструктор результата обновления
// 
// Возвращаемое значение: 
// 	Структура - Описание:
//  * Успешно                 - Булево - признак успешности выполнения обновления.
//  * ТекстОшибки             - Строка - текст ошибки, если она возникла.
//  * КоличествоЗаписей       - Число - количество обновленных записей.
//  * ДатаПоследнегоИзменения - Дата - дата последней измененной записи.
//
Функция НовыйРезультатОбновления()
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",                 Ложь);
	Результат.Вставить("ТекстОшибки",             "");
	Результат.Вставить("КоличествоЗаписей",       0);
	Результат.Вставить("ДатаПоследнегоИзменения", Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
