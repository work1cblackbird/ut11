// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Доверенность.Организация, Null КАК Истина)";
	
	Ограничение.ТекстДляВнешнихПользователей =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Доверенность.Организация, Null КАК Истина)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область РаботаСЖурналом

// Добавить новую запись в журнал машиночитаемых доверенностей.
// Существующая запись по значению хеша будет заменена.
// 
// Параметры:
//  ДанныеЗаписи - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НоваяЗаписьЖурнала
Процедура ДобавитьЗапись(ДанныеЗаписи) Экспорт
	Менеджер = СоздатьМенеджерЗаписи();
	Менеджер.ДатаИзменения = ТекущаяДатаСеанса();
	ЗаполнитьЗначенияСвойств(Менеджер, ДанныеЗаписи);
	Менеджер.ВсеДоверители = ОбщегоНазначенияБЭД.JSONСтрока(ДанныеЗаписи.Доверители);
	Менеджер.ВсеПредставители = ОбщегоНазначенияБЭД.JSONСтрока(ДанныеЗаписи.Представители);
	Менеджер.Записать();
КонецПроцедуры

// Удалить запись из журнала доверенностей
// 
// Параметры:
//  ХешДоверенности - Строка
Процедура УдалитьЗапись(ХешДоверенности) Экспорт
	Менеджер = СоздатьМенеджерЗаписи();
	Менеджер.Хеш = ХешДоверенности;
	Менеджер.Удалить();
КонецПроцедуры

#КонецОбласти

#Область Перечисления

// Типы доверителей.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ЮридическоеЛицо - Строка
// * ФилиалЮридическогоЛица - Строка
// * ИностраннаяОрганизация - Строка
// * ФилиалИностраннойОрганизации - Строка
// * ИндивидуальныйПредприниматель - Строка
// * ФизическоеЛицо - Строка
Функция ТипыДоверителей() Экспорт
	Типы = Новый Структура;
	Типы.Вставить("ЮридическоеЛицо", "Доверитель_ЮридическоеЛицо");
	Типы.Вставить("ФилиалЮридическогоЛица", "Доверитель_ФилиалЮридическогоЛица");
	Типы.Вставить("ИностраннаяОрганизация", "Доверитель_ИностраннаяОрганизация");
	Типы.Вставить("ФилиалИностраннойОрганизации", "Доверитель_ФилиалИностраннойОрганизации");
	Типы.Вставить("ИндивидуальныйПредприниматель", "Доверитель_ИндивидуальныйПредприниматель");
	Типы.Вставить("ФизическоеЛицо", "Доверитель_ФизическоеЛицо");
	Возврат Новый ФиксированнаяСтруктура(Типы);
КонецФункции

// Типы представителей.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * ЮридическоеЛицо - Строка
// * ИндивидуальныйПредприниматель - Строка
// * ФизическоеЛицо - Строка
// * ФилиалЮридическогоЛица - Строка
// * ФилиалИностраннойОрганизации - Строка
Функция ТипыПредставителей() Экспорт
	Типы = Новый Структура;
	Типы.Вставить("ЮридическоеЛицо", "Представитель_ЮридическоеЛицо");
	Типы.Вставить("ИндивидуальныйПредприниматель", "Представитель_ИндивидуальныйПредприниматель");
	Типы.Вставить("ФизическоеЛицо", "Представитель_ФизическоеЛицо");
	Типы.Вставить("ФилиалЮридическогоЛица", "Представитель_ФилиалЮридическогоЛица");
	Типы.Вставить("ФилиалИностраннойОрганизации", "Представитель_ФилиалИностраннойОрганизации");
	Возврат Новый ФиксированнаяСтруктура(Типы);
КонецФункции

#КонецОбласти

#Область СтруктурыДанных

// Новая запись журнала доверенностей.
// 
// Возвращаемое значение:
//  Структура:
// * Хеш - Строка - Натуральный ключ МЧД (SHA-512 сумма от файла доверенности)
// * Номер - ОпределяемыйТип.ЕдиныйРегистрационныйНомерДоверенности
// * Доверенность - ОпределяемыйТип.МашиночитаемаяДоверенность
// * Доверители - Массив Из См. НовыйДоверитель
// * Представители - Массив Из См. НовыйПредставитель
// * ДатаВыдачи - Дата
// * ДатаОкончанияДействия - Дата - Срок действия, дата отзыва или иная минимальная дата
//                                  прекращения действия доверенности.
// * ПометкаУдаления - Булево
// * Верна - Булево
// * Действует - Булево
Функция НоваяЗаписьЖурнала() Экспорт
	ОписаниеЗаписи = Новый Структура;
	ОписаниеЗаписи.Вставить("Хеш", "");
	ОписаниеЗаписи.Вставить("Номер",
		Метаданные.ОпределяемыеТипы.ЕдиныйРегистрационныйНомерДоверенности.Тип.ПривестиЗначение());
	ОписаниеЗаписи.Вставить("Доверенность",
		Метаданные.ОпределяемыеТипы.МашиночитаемаяДоверенность.Тип.ПривестиЗначение());
	ОписаниеЗаписи.Вставить("Доверители", Новый Массив);
	ОписаниеЗаписи.Вставить("Представители", Новый Массив);
	ОписаниеЗаписи.Вставить("ДатаВыдачи", '00010101');
	ОписаниеЗаписи.Вставить("ДатаОкончанияДействия", '00010101');
	ОписаниеЗаписи.Вставить("Верна", Ложь);
	ОписаниеЗаписи.Вставить("Действует", Ложь);
	ОписаниеЗаписи.Вставить("ПометкаУдаления", Ложь);
	Возврат ОписаниеЗаписи;
КонецФункции

// Новый доверитель.
// 
// Параметры:
//  Тип - Строка - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.ТипыДоверителей
//  ДанныеЗаполнения - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеЮридическоеЛицо
//                   - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НоваяИностраннаяОрганизация
//                   - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйИндивидуальныйПредприниматель
//                   - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеФизическоеЛицо
// 
// Поле Тип определяет, какое поле возвращаемой структуры будет инициализировано.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * Тип - Строка - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.ТипыДоверителей
// * ДанныеЮридическогоЛица - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеЮридическоеЛицо
// * ДанныеЮридическогоЛица - Неопределено
// * ДанныеИностраннойОрганизации - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НоваяИностраннаяОрганизация
// * ДанныеИностраннойОрганизации - Неопределено
// * ДанныеИндивидуальногоПредпринимателя - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйИндивидуальныйПредприниматель
// * ДанныеИндивидуальногоПредпринимателя - Неопределено
// * ДанныеФизическогоЛица - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеФизическоеЛицо
// * ДанныеФизическогоЛица - Неопределено
Функция НовыйДоверитель(Тип, ДанныеЗаполнения = Неопределено) Экспорт
	ОписаниеДоверителя = Новый Структура;
	ОписаниеДоверителя.Вставить("Тип", Тип);
	ОписаниеДоверителя.Вставить("ДанныеЮридическогоЛица", Неопределено);
	ОписаниеДоверителя.Вставить("ДанныеИностраннойОрганизации", Неопределено);
	ОписаниеДоверителя.Вставить("ДанныеИндивидуальногоПредпринимателя", Неопределено);
	ОписаниеДоверителя.Вставить("ДанныеФизическогоЛица", Неопределено);
	
	ТипыДоверителей = ТипыДоверителей();
	ТипыПредставителей = ТипыПредставителей();
	Если Тип = ТипыДоверителей.ЮридическоеЛицо
		Или Тип = ТипыПредставителей.ЮридическоеЛицо Тогда
		ОписаниеДоверителя.ДанныеЮридическогоЛица = НовоеЮридическоеЛицо();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеДоверителя.ДанныеЮридическогоЛица, ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли Тип = ТипыДоверителей.ИностраннаяОрганизация
		Или Тип = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
		ОписаниеДоверителя.ДанныеИностраннойОрганизации = НоваяИностраннаяОрганизация();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеДоверителя.ДанныеИностраннойОрганизации, ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли Тип = ТипыДоверителей.ИндивидуальныйПредприниматель
		Или Тип = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
		ОписаниеДоверителя.ДанныеИндивидуальногоПредпринимателя = НовыйИндивидуальныйПредприниматель();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеДоверителя.ДанныеИндивидуальногоПредпринимателя, ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли Тип = ТипыДоверителей.ФизическоеЛицо
		Или Тип = ТипыПредставителей.ФизическоеЛицо Тогда
		ОписаниеДоверителя.ДанныеФизическогоЛица = НовоеФизическоеЛицо();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеДоверителя.ДанныеФизическогоЛица, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	Возврат Новый ФиксированнаяСтруктура(ОписаниеДоверителя);
КонецФункции

// Новый представитель.
// 
// Параметры:
//  Тип - Строка - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.ТипыПредставителей
//  ДанныеЗаполнения - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеЮридическоеЛицо
//                   - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НоваяИностраннаяОрганизация
//                   - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйИндивидуальныйПредприниматель
//                   - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеФизическоеЛицо
// 
// Поле Тип определяет, какое поле возвращаемой структуры будет инициализировано.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
// * Тип - Строка - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.ТипыПредставителей
// * ДанныеЮридическогоЛица - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеЮридическоеЛицо
// * ДанныеЮридическогоЛица - Неопределено
// * ДанныеИндивидуальногоПредпринимателя - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйИндивидуальныйПредприниматель
// * ДанныеИндивидуальногоПредпринимателя - Неопределено
// * ДанныеФизическогоЛица - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеФизическоеЛицо
// * ДанныеФизическогоЛица - Неопределено
// * ДанныеФилиалаИностраннойОрганизации - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НоваяИностраннаяОрганизация
// * ДанныеФилиалаИностраннойОрганизации - Неопределено
// * ДанныеФилиалаЮридическогоЛица - См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеЮридическоеЛицо
// * ДанныеФилиалаЮридическогоЛица - Неопределено
Функция НовыйПредставитель(Тип, ДанныеЗаполнения = Неопределено) Экспорт
	ОписаниеПредставителя = Новый Структура;
	ОписаниеПредставителя.Вставить("Тип", Тип);
	ОписаниеПредставителя.Вставить("ДанныеЮридическогоЛица", Неопределено);
	ОписаниеПредставителя.Вставить("ДанныеИндивидуальногоПредпринимателя", Неопределено);
	ОписаниеПредставителя.Вставить("ДанныеФизическогоЛица", Неопределено);
	ОписаниеПредставителя.Вставить("ДанныеФилиалаЮридическогоЛица", Неопределено);
	ОписаниеПредставителя.Вставить("ДанныеФилиалаИностраннойОрганизации", Неопределено);
	
	ТипыДоверителей = ТипыПредставителей();
	Если Тип = ТипыДоверителей.ЮридическоеЛицо Тогда
		ОписаниеПредставителя.ДанныеЮридическогоЛица = НовоеЮридическоеЛицо();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеПредставителя.ДанныеЮридическогоЛица, ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли Тип = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
		ОписаниеПредставителя.ДанныеИндивидуальногоПредпринимателя = НовыйИндивидуальныйПредприниматель();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеПредставителя.ДанныеИндивидуальногоПредпринимателя, ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли Тип = ТипыДоверителей.ФизическоеЛицо Тогда
		ОписаниеПредставителя.ДанныеФизическогоЛица = НовоеФизическоеЛицо();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеПредставителя.ДанныеФизическогоЛица, ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли Тип = ТипыДоверителей.ФилиалИностраннойОрганизации Тогда
		ОписаниеПредставителя.ДанныеФилиалаИностраннойОрганизации = НоваяИностраннаяОрганизация();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеПредставителя.ДанныеФилиалаИностраннойОрганизации, ДанныеЗаполнения);
		КонецЕсли;
	ИначеЕсли Тип = ТипыДоверителей.ФилиалЮридическогоЛица Тогда
		ОписаниеПредставителя.ДанныеФилиалаЮридическогоЛица = НовоеЮридическоеЛицо();
		Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеПредставителя.ДанныеФилиалаЮридическогоЛица, ДанныеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	Возврат Новый ФиксированнаяСтруктура(ОписаниеПредставителя);
КонецФункции

// Сведения о доверителях из внутреннего представления.
// 
// Параметры:
//  ВнутреннееПредставление - Строка - Значение ресурса см. РегистрСведений.ЖурналМашиночитаемыхДоверенностей.ВсеДоверители
// 
// Возвращаемое значение:
//  Массив Из см. НовыйДоверитель
// 
Функция СведенияОДоверителях(ВнутреннееПредставление) Экспорт
	Возврат ОбщегоНазначенияБЭД.JSONЗначение(ВнутреннееПредставление);
КонецФункции

// Параметры:
//  Доверенности - Массив из ОпределяемыйТип.МашиночитаемаяДоверенность
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ОпределяемыйТип.МашиночитаемаяДоверенность
//  * Значение - см. НовыеДоверителиПредставители
Функция ДоверителиПредставителиДоверенностей(Доверенности) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналМашиночитаемыхДоверенностей.Доверенность,
		|	ЖурналМашиночитаемыхДоверенностей.ВсеДоверители,
		|	ЖурналМашиночитаемыхДоверенностей.ВсеПредставители
		|ИЗ
		|	РегистрСведений.ЖурналМашиночитаемыхДоверенностей КАК ЖурналМашиночитаемыхДоверенностей
		|ГДЕ
		|	ЖурналМашиночитаемыхДоверенностей.Доверенность В (&Доверенности)";
	
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДоверителиПредставители = НовыеДоверителиПредставители();
		ДоверителиПредставители.Доверители = СведенияОДоверителях(Выборка.ВсеДоверители);
		ДоверителиПредставители.Представители = ОбщегоНазначенияБЭД.JSONЗначение(Выборка.ВсеПредставители);
		
		Результат.Вставить(Выборка.Доверенность, ДоверителиПредставители);
	КонецЦикла;

	Возврат Результат;
КонецФункции

#Область ОписаниеЛиц

// Новое юридическое лицо.
// 
// Возвращаемое значение:
//  Структура -  Новое юридическое лицо:
// * Наименование - Строка 
// * ИНН - Строка 
// * КПП - Строка 
// * ОГРН - Строка 
// * ЛицаБезДоверенности - Массив Из См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеЮридическоеЛицо
//                       - Массив Из См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовыйИндивидуальныйПредприниматель
//                       - Массив Из См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеФизическоеЛицо
Функция НовоеЮридическоеЛицо() Экспорт
	ЮридическоеЛицо = Новый Структура;
	ЮридическоеЛицо.Вставить("Наименование", "");
	ЮридическоеЛицо.Вставить("ИНН", "");
	ЮридическоеЛицо.Вставить("КПП", "");
	ЮридическоеЛицо.Вставить("ОГРН", "");
	ЮридическоеЛицо.Вставить("ЛицаБезДоверенности", Новый Массив);
	Возврат ЮридическоеЛицо;
КонецФункции

// Новая иностранная организация.
// 
// Возвращаемое значение:
//  Структура:
// * Наименование - Строка 
// * ИНН - Строка 
// * КПП - Строка 
// * Руководители - Массив Из См. РегистрыСведений.ЖурналМашиночитаемыхДоверенностей.НовоеФизическоеЛицо
Функция НоваяИностраннаяОрганизация() Экспорт
	ИностраннаяОрганизация = Новый Структура;
	ИностраннаяОрганизация.Вставить("Наименование", "");
	ИностраннаяОрганизация.Вставить("ИНН", "");
	ИностраннаяОрганизация.Вставить("КПП", "");
	ИностраннаяОрганизация.Вставить("Руководители", Новый Массив);
	Возврат ИностраннаяОрганизация;
КонецФункции

// Новый индивидуальный предприниматель.
// 
// Возвращаемое значение:
//  Структура -  Новый индивидуальный предприниматель:
// * Наименование - Строка 
// * ИНН - Строка 
// * СНИЛС - Строка 
// * ОГРН - Строка 
Функция НовыйИндивидуальныйПредприниматель() Экспорт
	ИндивидуальныйПредприниматель = Новый Структура;
	ИндивидуальныйПредприниматель.Вставить("Наименование", "");
	ИндивидуальныйПредприниматель.Вставить("ИНН", "");
	ИндивидуальныйПредприниматель.Вставить("СНИЛС", "");
	ИндивидуальныйПредприниматель.Вставить("ОГРН", "");
	Возврат ИндивидуальныйПредприниматель;
КонецФункции

// Новое физическое лицо.
// 
// Возвращаемое значение:
//  Структура -  Новое физическое лицо:
// * ФИО - Строка 
// * СНИЛС - Строка 
// * ИНН - Строка 
Функция НовоеФизическоеЛицо() Экспорт
	ФизическоеЛицо = Новый Структура;
	ФизическоеЛицо.Вставить("ФИО", "");
	ФизическоеЛицо.Вставить("СНИЛС", "");
	ФизическоеЛицо.Вставить("ИНН", "");
	Возврат ФизическоеЛицо;
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
//  Структура:
// * Доверители - Массив из см. НовыйДоверитель
// * Представители - Массив из см. НовыйПредставитель
Функция НовыеДоверителиПредставители()
	Возврат Новый Структура("Доверители, Представители", Новый Массив, Новый Массив);
КонецФункции

#КонецОбласти

#КонецЕсли