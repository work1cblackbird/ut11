///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Выполняет поиск информации об операции по документу оплаты.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - документ отражающий операцию в информационной
//    базе.
//
// Возвращаемое значение:
//  Неопределено - не найдена информация об операции.
//  Структура:
//    * ИдентификаторОперации - Строка
//    * СтатусОперации - Строка
//    * ОписаниеСтатусаОперации - Строка
//    * ИдентификаторЧека - Строка
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОблачнымКассам
//    * ДанныеДляОбработки - ХранилищеЗначения - данные ответа Облачный кассы.
//
Функция ДанныеОперации(ДокументОперации) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеОперацийОблачныхКасс.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ДанныеОперацийОблачныхКасс.СтатусОперации КАК СтатусОперации,
	|	ДанныеОперацийОблачныхКасс.ИдентификаторЧека КАК ИдентификаторЧека,
	|	ДанныеОперацийОблачныхКасс.НастройкаПодключения КАК НастройкаПодключения,
	|	ДанныеОперацийОблачныхКасс.ДанныеДляОбработки КАК ДанныеДляОбработки,
	|	ДанныеОперацийОблачныхКасс.ОписаниеСтатусаОперации КАК ОписаниеСтатусаОперации
	|ИЗ
	|	РегистрСведений.ДанныеОперацийОблачныхКасс КАК ДанныеОперацийОблачныхКасс
	|ГДЕ
	|	ДанныеОперацийОблачныхКасс.ДокументОперации = &ДокументОперации";
	
	Запрос.УстановитьПараметр("ДокументОперации", ДокументОперации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат = Новый Структура();
		Результат.Вставить("ИдентификаторОперации"  , Выборка.ИдентификаторОперации);
		Результат.Вставить("СтатусОперации"         , Выборка.СтатусОперации);
		Результат.Вставить("ОписаниеСтатусаОперации", Выборка.ОписаниеСтатусаОперации);
		Результат.Вставить("ИдентификаторЧека"      , Выборка.ИдентификаторЧека);
		Результат.Вставить("НастройкаПодключения"   , Выборка.НастройкаПодключения);
		Результат.Вставить("ДанныеДляОбработки"     , Выборка.ДанныеДляОбработки.Получить());
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск ранее созданной операции или создает новую запись в случае отсутствия записи в базе данных.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - документ отражающий операцию в информационной
//    базе.
//  НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОблачнымКассам
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьИдентификаторОперации(ДокументОперации, НастройкаПодключения) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		КлючБлокировки = СоздатьКлючЗаписи(
			Новый Структура("ДокументОперации", ДокументОперации));
		ЗаблокироватьДанныеДляРедактирования(КлючБлокировки);
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеОперацийОблачныхКасс");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОперации.Установить(ДокументОперации);
		Набор.Прочитать();
		
		Если Набор.Количество() = 0
			Или ТребуетсяГенерацияНовогоИдентификатора(Набор[0]) Тогда
			
			Результат = Строка(Новый УникальныйИдентификатор());
			Замещать  = (Набор.Количество() > 0);
			
			Набор.Очистить();
			
			Запись = Набор.Добавить();
			Запись.ДокументОперации      = ДокументОперации;
			Запись.ИдентификаторОперации = Результат;
			Запись.НастройкаПодключения  = НастройкаПодключения;
			
			Набор.Записать(Замещать);
			
		Иначе
			Результат = Набор[0].ИдентификаторОперации;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Выполняет обновление статуса пробития чека.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - документ отражающий операцию в информационной
//    базе.
//  ДанныеОперации - см. СервисОблачныеКассы.НовыйДанныеОперации
//  ДанныеДляОбработки - Структура - данные для обработки.
//
Процедура ЗаписатьДанныеПробитияЧека(ДокументОперации, ДанныеОперации, ДанныеДляОбработки) Экспорт
	
	Если ДанныеОперации.СтатусОперации = ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена()
		И Не ЗначениеЗаполнено(ДанныеДляОбработки) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Запрещено обновление статуса чека с незаполненными терминальными данными.
				|Документ операции: %1
				|Тип данных: %2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			Строка(ДокументОперации),
			Строка(ТипЗнч(ДанныеДляОбработки)));
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(
			СоздатьКлючЗаписи(Новый Структура("ДокументОперации", ДокументОперации)));
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеОперацийОблачныхКасс");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОперации.Установить(ДокументОперации);
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Не найдена информация о данных операции с Облачной кассы.
				|Невозможно обновить информацию о пробитии чека.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		Запись = Набор[0];
		Если Запись.СтатусОперации <> ДанныеОперации.СтатусОперации Тогда
			Запись.СтатусОперации = ДанныеОперации.СтатусОперации;
		КонецЕсли;
		Если Запись.ОписаниеСтатусаОперации <> ДанныеОперации.ОписаниеСтатусаОперации Тогда
			Запись.ОписаниеСтатусаОперации = ДанныеОперации.ОписаниеСтатусаОперации;
		КонецЕсли;
		Если Запись.ИдентификаторЧека <> ДанныеОперации.ИдентификаторЧека Тогда
			Запись.ИдентификаторЧека = ДанныеОперации.ИдентификаторЧека;
		КонецЕсли;
		
		Если ОблачныеКассыСлужебный.ТерминальныйСтатус(ДанныеОперации.СтатусОперации)
			И ДанныеДляОбработкиОтличаются(Запись.ДанныеДляОбработки.Получить(), ДанныеДляОбработки) Тогда
			
			Запись.ДанныеДляОбработки = Новый ХранилищеЗначения(ДанныеДляОбработки);
			Запись.ДанныеОбработаны   = Ложь;
			
		КонецЕсли;
		
		Если Набор.Модифицированность() Тогда
			Набор.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка записи информации о пробитии чека.
				|%1'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
		
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
КонецПроцедуры

// Формирует список документов операций по которым необходимо выполнить загрузку статусов и/или обработать результат.
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//    * ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - документ отражающий операцию в информационной
//        базе.
//    * ИдентификаторОперации - Строка - уникальный идентификатор операции Облачной кассы.
//    * ИдентификаторЧека - Строка - идентификатор чека в сервисе Облачной кассы.
//    * НастройкаПодключения - СправочникСсылка.НастройкиПодключенияКОблачнымКассам
//    * ОблачнаяКасса - ОпределяемыйТип.ОблачнаяКасса
//    * СтатусОперации - Строка - статус операции в сервисе Облачной кассы.
//    * КоличествоПопыток - Число - количество неудачно выполненных операций загрузки статуса или обработки результата.
//    * ДанныеОбработаны - Булево - если Истина, то терминальный статус обработан прикладной логикой.
//    * ДанныеДляОбработки - ХранилищеЗначения - данные полученные из сервиса для обработки. Поле заполнено если
//        СтатусОперации равен см. ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена или
//        см. ОблачныеКассыКлиентСервер.СтатусОперацииОтменена.
//    * ОписаниеСтатусаОперации - Строка - описание статуса выполнения операции, полученное из Облачной кассы.
//
Функция ОтложенныеОперации() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеОперацийОблачныхКасс.ДокументОперации КАК ДокументОперации,
	|	ДанныеОперацийОблачныхКасс.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ДанныеОперацийОблачныхКасс.ИдентификаторЧека КАК ИдентификаторЧека,
	|	ДанныеОперацийОблачныхКасс.НастройкаПодключения КАК НастройкаПодключения,
	|	ДанныеОперацийОблачныхКасс.НастройкаПодключения.ОблачнаяКасса КАК ОблачнаяКасса,
	|	ДанныеОперацийОблачныхКасс.СтатусОперации КАК СтатусОперации,
	|	ДанныеОперацийОблачныхКасс.КоличествоПопыток КАК КоличествоПопыток,
	|	ДанныеОперацийОблачныхКасс.ДанныеДляОбработки КАК ДанныеДляОбработки,
	|	ДанныеОперацийОблачныхКасс.ДанныеОбработаны КАК ДанныеОбработаны,
	|	ДанныеОперацийОблачныхКасс.ОписаниеСтатусаОперации КАК ОписаниеСтатусаОперации
	|ИЗ
	|	РегистрСведений.ДанныеОперацийОблачныхКасс КАК ДанныеОперацийОблачныхКасс
	|ГДЕ
	|	ДанныеОперацийОблачныхКасс.СтатусОперации = &СтатусВыполняется
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеОперацийОблачныхКасс.ДокументОперации КАК ДокументОперации,
	|	ДанныеОперацийОблачныхКасс.ИдентификаторОперации КАК ИдентификаторОперации,
	|	ДанныеОперацийОблачныхКасс.ИдентификаторЧека КАК ИдентификаторЧека,
	|	ДанныеОперацийОблачныхКасс.НастройкаПодключения КАК НастройкаПодключения,
	|	ДанныеОперацийОблачныхКасс.НастройкаПодключения.ОблачнаяКасса КАК ОблачнаяКасса,
	|	ДанныеОперацийОблачныхКасс.СтатусОперации КАК СтатусОперации,
	|	ДанныеОперацийОблачныхКасс.КоличествоПопыток КАК КоличествоПопыток,
	|	ДанныеОперацийОблачныхКасс.ДанныеДляОбработки КАК ДанныеДляОбработки,
	|	ДанныеОперацийОблачныхКасс.ДанныеОбработаны КАК ДанныеОбработаны,
	|	ДанныеОперацийОблачныхКасс.ОписаниеСтатусаОперации КАК ОписаниеСтатусаОперации
	|ИЗ
	|	РегистрСведений.ДанныеОперацийОблачныхКасс КАК ДанныеОперацийОблачныхКасс
	|ГДЕ
	|	ДанныеОперацийОблачныхКасс.СтатусОперации В (&СтатусВыполнена, &СтатусОтменена)
	|	И НЕ ДанныеОперацийОблачныхКасс.ДанныеОбработаны";
	
	Запрос.УстановитьПараметр("СтатусВыполняется", ОблачныеКассыКлиентСервер.СтатусОперацииВыполняется());
	Запрос.УстановитьПараметр("СтатусВыполнена"  , ОблачныеКассыКлиентСервер.СтатусОперацииВыполнена());
	Запрос.УстановитьПараметр("СтатусОтменена"   , ОблачныеКассыКлиентСервер.СтатусОперацииОтменена());
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Увеличивает значение количества попыток загрузки статуса или обработки результата.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - документ отражающий операцию в информационной
//    базе.
//
Процедура УвеличитьКоличествоПопыток(ДокументОперации) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		КлючБлокировки = СоздатьКлючЗаписи(
			Новый Структура("ДокументОперации", ДокументОперации));
		ЗаблокироватьДанныеДляРедактирования(КлючБлокировки);
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеОперацийОблачныхКасс");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОперации.Установить(ДокументОперации);
		Набор.Прочитать();
		
		Если Набор.Количество() = 0 Тогда
			ВызватьИсключение НСтр("ru = 'Не найдена информация о данных операции с Облачной кассы.
				|Невозможно увеличить количество попыток выполнения отложенной операции.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		Запись = Набор[0];
		Запись.КоличествоПопыток = Запись.КоличествоПопыток + 1;
		
		Набор.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка увеличения количества попыток выполнить отложенную операцию Облачной кассы.
				|%1'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
		
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет сравнение отличия двух значений.
//
// Параметры:
//  Значение1 - Неопределено, Структура - первое сравниваемое значение.
//  Значение2 - Неопределено, Структура - второе сравниваемое значение.
//
// Возвращаемое значение:
//  Булево - Истина, если значения двух входных переменных отличаются.
//
Функция ДанныеДляОбработкиОтличаются(Значение1, Значение2)
	
	Возврат ТипЗнч(Значение1) <> Тип("Структура")
		Или ТипЗнч(Значение1) <> ТипЗнч(Значение2)
		Или ОбщегоНазначения.ЗначениеВJSON(Значение1) <> ОбщегоНазначения.ЗначениеВJSON(Значение2);
	
КонецФункции

// Выполняет установку признака загрузки статуса регламентным заданием, если ранее по документу был сгенерирован
// идентификатор операции.
//
// Параметры:
//  ДокументОперации - ОпределяемыйТип.ДокументОперацииОблачнойКассы - ссылка на документ инициирующий пробитие чека.
//  Значение - Булево - если Истина, данные статуса будут загружены регламентным заданием.
//
// Возвращаемое значение:
//  Булево - Истина, если признак отложенной загрузки статуса установлен, Ложь если операция не найдена.
//
Функция УстановитьОтложенноеПолучениеСтатуса(ДокументОперации, Значение) Экспорт
	
	Результат        = Истина;
	ДанныеОбработаны = Не Значение;
	
	НачатьТранзакцию();
	Попытка
		
		КлючБлокировки = СоздатьКлючЗаписи(
			Новый Структура("ДокументОперации", ДокументОперации));
		ЗаблокироватьДанныеДляРедактирования(КлючБлокировки);
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ДанныеОперацийОблачныхКасс");
		ЭлементБлокировки.УстановитьЗначение("ДокументОперации", ДокументОперации);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		Набор = СоздатьНаборЗаписей();
		Набор.Отбор.ДокументОперации.Установить(ДокументОперации);
		Набор.Прочитать();
		
		// Обновление данных не имеет смысла если:
		//  - не найдена запись по документу
		//  - статус операции не терминальный
		Если Набор.Количество() = 0
			Или Значение
				И Не ОблачныеКассыСлужебный.ТерминальныйСтатус(Набор[0].СтатусОперации) Тогда
			
			Результат = Ложь;
			
		ИначеЕсли Набор[0].ДанныеОбработаны <> ДанныеОбработаны Тогда
			
			Набор[0].ДанныеОбработаны = ДанныеОбработаны;
			
			Набор.Записать();
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка изменения признака обработки данных операции Облачной кассой.
				|%1'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОблачныеКассыСлужебный.ЗаписатьИнформациюВЖурналРегистрации(ИнформацияОбОшибке, Истина);
		
		ВызватьИсключение ИнформацияОбОшибке;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Определяет необходимость создания идентификатора операции или его обновления.
//
// Параметры:
//  ДанныеОперации - РегистрСведенийЗапись.ДанныеОперацийОблачныхКасс
//
// Возвращаемое значение:
//  Булево  - если Истина, необходимо создать новый идентификатор.
//
Функция ТребуетсяГенерацияНовогоИдентификатора(ДанныеОперации)
	
	// Идентификатор операции необходимо обновить если выполняется одно из условий:
	//  - идентификатор операции не заполнен;
	//  - операция находится в терминальном статусе и результат по этой операции отрицательный.
	Возврат ПустаяСтрока(ДанныеОперации.ИдентификаторОперации)
		Или ДанныеОперации.СтатусОперации = ОблачныеКассыКлиентСервер.СтатусОперацииОтменена();
	
КонецФункции

#КонецОбласти

#КонецЕсли