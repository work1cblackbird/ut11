#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ТипДокумента)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЧтениеДанныхРеестраДокументовEDI

Функция ПустаяЗаписьРеестра() Экспорт
	
	Результат = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(РегистрыСведений.СостоянияДокументовEDI.СоздатьМенеджерЗаписи(),
		Метаданные.РегистрыСведений.СостоянияДокументовEDI);
	
	Результат.Вставить("БизнесПроцессПоДокументуЗавершен", Ложь);
	Результат.Вставить("Команды", Новый Соответствие);
	Результат.Вставить("ДоступныеРеквизиты", Новый Массив);
		
	Возврат Результат;
		
КонецФункции

Функция ЗаписиРеестраПоДокументам(Знач ПрикладныеОбъекты) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПрикладныеОбъекты", ПрикладныеОбъекты);
	Запрос.УстановитьПараметр("МассивСтатусовАрхив", ДокументыEDIКлиентСервер.МассивСтатусовАрхив());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	|	СостоянияДокументовEDI.ТипДокумента КАК ТипДокумента,
	|	СостоянияДокументовEDI.Организация КАК Организация,
	|	СостоянияДокументовEDI.Контрагент КАК Контрагент,
	|	СостоянияДокументовEDI.ТекущийСтатус КАК ТекущийСтатус,
	|	СостоянияДокументовEDI.ПредыдущийСтатус КАК ПредыдущийСтатус,
	|	СостоянияДокументовEDI.ПоследнееДействие КАК ПоследнееДействие,
	|	СостоянияДокументовEDI.СторонаВыполнившаяДействие КАК СторонаВыполнившаяДействие,
	|	СостоянияДокументовEDI.УточнениеСостоянияПоДаннымСтороныУчастника КАК УточнениеСостоянияПоДаннымСтороныУчастника,
	|	СостоянияДокументовEDI.ДатаУточнениеСостоянияПоДаннымСтороныУчастника КАК
	|		ДатаУточнениеСостоянияПоДаннымСтороныУчастника,
	|	СостоянияДокументовEDI.ДатаТекущегоСтатуса КАК ДатаТекущегоСтатуса,
	|	СостоянияДокументовEDI.НомерТекущейВерсии КАК НомерТекущейВерсии,
	|	СостоянияДокументовEDI.НомерАктуальнойВерсии КАК НомерАктуальнойВерсии,
	|	СостоянияДокументовEDI.НомерДокумента КАК НомерДокумента,
	|	СостоянияДокументовEDI.ДатаСоздания КАК ДатаСоздания,
	|	СостоянияДокументовEDI.НомерПрикладногоДокумента КАК НомерПрикладногоДокумента,
	|	СостоянияДокументовEDI.Менеджер КАК Менеджер,
	|	СостоянияДокументовEDI.ПлановаяДатаВыполнения КАК ПлановаяДатаВыполнения,
	|	СостоянияДокументовEDI.ПрикладнойОбъект КАК ПрикладнойОбъект,
	|	СостоянияДокументовEDI.СостояниеПрикладногоОбъекта КАК СостояниеПрикладногоОбъекта,
	|	СостоянияДокументовEDI.Валюта КАК Валюта,
	|	СостоянияДокументовEDI.Сумма КАК Сумма,
	|	СостоянияДокументовEDI.ТребуетсяОтправкаДокумента КАК ТребуетсяОтправкаДокумента,
	|	СостоянияДокументовEDI.ХэшОтправленногоДокумента КАК ХэшОтправленногоДокумента,
	|	СостоянияДокументовEDI.ВариантУказанияНоменклатуры КАК ВариантУказанияНоменклатуры,
	|	СостоянияДокументовEDI.СогласованнаяВерсияПокупателя КАК СогласованнаяВерсияПокупателя,
	|	СостоянияДокументовEDI.СогласованнаяВерсияПоставщика КАК СогласованнаяВерсияПоставщика,
	|	СостоянияДокументовEDI.ТребуетсяСопоставлениеНоменклатурыПередОтправкой КАК
	|		ТребуетсяСопоставлениеНоменклатурыПередОтправкой,
	|	СостоянияДокументовEDI.ТекущийСтатус В (&МассивСтатусовАрхив) КАК БизнесПроцессПоДокументуЗавершен
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ПрикладнойОбъект В (&ПрикладныеОбъекты)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ЗаписьРеестра Из РезультатЗапроса.Выгрузить() Цикл
		Результат.Вставить(ЗаписьРеестра.ПрикладнойОбъект, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПрикладныеОбъекты(Знач ТипДокументаEDI, Знач ИдентификаторыВСервисе) Экспорт
	
	Если ТипЗнч(ИдентификаторыВСервисе) <> Тип("Массив") Тогда
		ИдентификаторыВСервисе = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыВСервисе);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокументаEDI);
	Запрос.УстановитьПараметр("ИдентификаторыВСервисе", ИдентификаторыВСервисе);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	|	СостоянияДокументовEDI.ПрикладнойОбъект КАК ПрикладнойОбъект
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе В(&ИдентификаторыВСервисе)
	|	И СостоянияДокументовEDI.ТипДокумента = &ТипДокумента";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выгрузить();
	Выборка.Индексы.Добавить("ИдентификаторВСервисе");

	Возврат Выборка;
	
КонецФункции

Функция ДанныеПрикладногоОбъектаПоДаннымСервиса(ИдентификаторВСервисе, ТипДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияДокументовEDI.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	|	СостоянияДокументовEDI.ТипДокумента КАК ТипДокумента,
	|	СостоянияДокументовEDI.Организация КАК Организация,
	|	СостоянияДокументовEDI.Контрагент КАК Контрагент,
	|	СостоянияДокументовEDI.ТекущийСтатус КАК ТекущийСтатус,
	|	СостоянияДокументовEDI.ПредыдущийСтатус КАК ПредыдущийСтатус,
	|	СостоянияДокументовEDI.ПоследнееДействие КАК ПоследнееДействие,
	|	СостоянияДокументовEDI.СторонаВыполнившаяДействие КАК СторонаВыполнившаяДействие,
	|	СостоянияДокументовEDI.УточнениеСостоянияПоДаннымСтороныУчастника КАК УточнениеСостоянияПоДаннымСтороныУчастника,
	|	СостоянияДокументовEDI.ДатаУточнениеСостоянияПоДаннымСтороныУчастника КАК
	|		ДатаУточнениеСостоянияПоДаннымСтороныУчастника,
	|	СостоянияДокументовEDI.ДатаТекущегоСтатуса КАК ДатаТекущегоСтатуса,
	|	СостоянияДокументовEDI.НомерТекущейВерсии КАК НомерТекущейВерсии,
	|	СостоянияДокументовEDI.НомерАктуальнойВерсии КАК НомерАктуальнойВерсии,
	|	СостоянияДокументовEDI.НомерДокумента КАК НомерДокумента,
	|	СостоянияДокументовEDI.ДатаСоздания КАК ДатаСоздания,
	|	СостоянияДокументовEDI.НомерПрикладногоДокумента КАК НомерПрикладногоДокумента,
	|	СостоянияДокументовEDI.Менеджер КАК Менеджер,
	|	СостоянияДокументовEDI.ПлановаяДатаВыполнения КАК ПлановаяДатаВыполнения,
	|	СостоянияДокументовEDI.ПрикладнойОбъект КАК ПрикладнойОбъект,
	|	СостоянияДокументовEDI.СостояниеПрикладногоОбъекта КАК СостояниеПрикладногоОбъекта,
	|	СостоянияДокументовEDI.Валюта КАК Валюта,
	|	СостоянияДокументовEDI.Сумма КАК Сумма,
	|	СостоянияДокументовEDI.ТребуетсяОтправкаДокумента КАК ТребуетсяОтправкаДокумента,
	|	СостоянияДокументовEDI.ХэшОтправленногоДокумента КАК ХэшОтправленногоДокумента,
	|	СостоянияДокументовEDI.ВариантУказанияНоменклатуры КАК ВариантУказанияНоменклатуры,
	|	СостоянияДокументовEDI.СогласованнаяВерсияПокупателя КАК СогласованнаяВерсияПокупателя,
	|	СостоянияДокументовEDI.СогласованнаяВерсияПоставщика КАК СогласованнаяВерсияПоставщика,
	|	СостоянияДокументовEDI.ТребуетсяСопоставлениеНоменклатурыПередОтправкой КАК
	|		ТребуетсяСопоставлениеНоменклатурыПередОтправкой,
	|	СостоянияДокументовEDI.ТекущийСтатус В (&МассивСтатусовАрхив) КАК БизнесПроцессПоДокументуЗавершен
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе = &ИдентификаторВСервисе
	|	И СостоянияДокументовEDI.ТипДокумента = &ТипДокумента";
	
	Запрос.УстановитьПараметр("ИдентификаторВСервисе" , ИдентификаторВСервисе);
	Запрос.УстановитьПараметр("ТипДокумента"          , ТипДокумента);
	Запрос.УстановитьПараметр("МассивСтатусовАрхив", ДокументыEDIКлиентСервер.МассивСтатусовАрхив());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	
КонецФункции

Функция ПрикладнойОбъектВEDIНаходитсяВФинальномСтатусе(ПрикладнойОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СостоянияДокументовEDI.ИдентификаторВСервисе КАК ИдентификаторВСервисе
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ПрикладнойОбъект = &ПрикладнойОбъект
	|	И СостоянияДокументовEDI.ТекущийСтатус В (&МассивСтатусовАрхив)";
	
	Запрос.УстановитьПараметр("ПрикладнойОбъект",    ПрикладнойОбъект);
	Запрос.УстановитьПараметр("МассивСтатусовАрхив", ДокументыEDIКлиентСервер.МассивСтатусовАрхив());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает настройку в каком варианте указывали номенклатуру в последнем отправленном документе подходящему по отбору. 
//
// Параметры:
//  Контрагент      - ОпределяемыйТип.КонтрагентБЭД        - контрагент, указанный в документе.
//  Организация     - ОпределяемыйТип.Организация          - организация, указанная в документе.
//  ТипДокументаEDI - ПеречислениеСсылка.ТипыДокументовEDI - тип документа.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыУказанияНоменклатурыБЭД, Неопределено - неопределено возвращается, если по условиям фильтрации
//                                                                     отправленных документов не найдено.
//
Функция ПоследняяНастройкаВариантаУказанияНоменклатуры(Знач Контрагент, Знач Организация, Знач ТипДокументаEDI) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияДокументовEDI.ВариантУказанияНоменклатуры КАК ВариантУказанияНоменклатуры
	|ИЗ
	|	РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|ГДЕ
	|	СостоянияДокументовEDI.ТипДокумента = &ТипДокумента
	|	И СостоянияДокументовEDI.Организация = &Организация
	|	И СостоянияДокументовEDI.Контрагент = &Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияДокументовEDI.ДатаСоздания УБЫВ";
	
	Запрос.УстановитьПараметр("Контрагент"  , Контрагент);
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("ТипДокумента", ТипДокументаEDI);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ВариантУказанияНоменклатуры;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЗаписьДанныхВРеестрДокументовEDI

Функция ПараметрыЗаписиВРегистр() Экспорт
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИдентификаторВСервисе"                         , "");
	ПараметрыЗаписи.Вставить("Организация"                                   , Неопределено);
	ПараметрыЗаписи.Вставить("Контрагент"                                    , Неопределено);
	ПараметрыЗаписи.Вставить("ТекущийСтатус"                                 , Перечисления.СтатусыЗаказаEDI.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("ПредыдущийСтатус"                              , Перечисления.СтатусыЗаказаEDI.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("ПоследнееДействие"                             , Перечисления.ДействияПроцессаЗаказаEDI.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("СторонаВыполнившаяДействие"                    , Перечисления.СтороныУчастникиСервисаEDI);
	ПараметрыЗаписи.Вставить("УточнениеСостоянияПоДаннымСтороныУчастника"    , "");
	ПараметрыЗаписи.Вставить("ДатаУточнениеСостоянияПоДаннымСтороныУчастника", Дата(1,1,1));
	ПараметрыЗаписи.Вставить("ДатаТекущегоСтатуса"                           , Дата(1,1,1));
	ПараметрыЗаписи.Вставить("НомерТекущейВерсии"                            , 0);
	ПараметрыЗаписи.Вставить("НомерАктуальнойВерсии"                         , 0);
	ПараметрыЗаписи.Вставить("НомерДокумента"                                , "");
	ПараметрыЗаписи.Вставить("ДатаСоздания"                                  , Дата(1,1,1));
	ПараметрыЗаписи.Вставить("ТипДокумента"                                  , Перечисления.ТипыДокументовEDI.ПустаяСсылка());
	ПараметрыЗаписи.Вставить("НомерПрикладногоДокумента"                     , "");
	ПараметрыЗаписи.Вставить("ХэшТипаДокументаИСтатуса"                      , 0);
	ПараметрыЗаписи.Вставить("Менеджер"                                      , Неопределено);
	ПараметрыЗаписи.Вставить("ПлановаяДатаВыполнения"                        , Дата(1,1,1));
	ПараметрыЗаписи.Вставить("ПрикладнойОбъект"                              , Неопределено);
	ПараметрыЗаписи.Вставить("СостояниеПрикладногоОбъекта"                   , Неопределено);
	ПараметрыЗаписи.Вставить("Валюта"                                        , Неопределено);
	ПараметрыЗаписи.Вставить("Сумма"                                         , Неопределено);
	ПараметрыЗаписи.Вставить("НеВыполнятьРасчетПоСтатусам"                   , Ложь);
	ПараметрыЗаписи.Вставить("ХэшОтправленногоДокумента"                     , "");
	ПараметрыЗаписи.Вставить("СогласованнаяВерсияПокупателя"                 , "");
	ПараметрыЗаписи.Вставить("СогласованнаяВерсияПоставщика"                 , "");
	ПараметрыЗаписи.Вставить("ВариантУказанияНоменклатуры"                   , Перечисления.ВариантыУказанияНоменклатурыБЭД.ПустаяСсылка());
	
	
	Возврат ПараметрыЗаписи;
	
КонецФункции

Процедура ВыполнитьЗаписьВРегистр(ПараметрыЗаписи) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторВСервисе", ПараметрыЗаписи.ИдентификаторВСервисе);
		ЭлементБлокировки.УстановитьЗначение("ТипДокумента", ПараметрыЗаписи.ТипДокумента);

		Блокировка.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.СостоянияДокументовEDI.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИдентификаторВСервисе.Установить(ПараметрыЗаписи.ИдентификаторВСервисе);
		НаборЗаписей.Отбор.ТипДокумента.Установить(ПараметрыЗаписи.ТипДокумента);
		
		Запись = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(Запись, ПараметрыЗаписи);
		
		Если Не ЗначениеЗаполнено(Запись.ПрикладнойОбъект) Тогда
			Запись.СостояниеПрикладногоОбъекта = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеСоздавался;
		КонецЕсли;
		
		Если ПараметрыЗаписи.Свойство("ВариантУказанияНоменклатуры") Тогда
			Запись.ВариантУказанияНоменклатуры = ПараметрыЗаписи.ВариантУказанияНоменклатуры;
		КонецЕсли;
	
		Если ПараметрыЗаписи.НеВыполнятьРасчетПоСтатусам Тогда
			НаборЗаписей.ДополнительныеСвойства.Вставить("НеВыполнятьРасчетПоСтатусам", Истина);
		КонецЕсли;
		
		
		НаборЗаписей.Записать();
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(ОбновлениеДанныхEDI.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение НСтр("ru = 'Не удалось записать информацию о состоянии документа EDI.'");
		
	КонецПопытки;
	
КонецПроцедуры

Функция ОбновленныеДанныеЗаписиРеестра(Знач ДанныеСервиса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияДокументовEDI");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ДанныеСервиса;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторВСервисе", "ИдентификаторВСервисе");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипДокумента", "ТипДокумента");
		Блокировка.Заблокировать();
		
		ЗаписьРеестра = РегистрыСведений.СостоянияДокументовEDI.СоздатьМенеджерЗаписи();
		ЗаписьРеестра.ИдентификаторВСервисе = ДанныеСервиса.ИдентификаторВСервисе;
		ЗаписьРеестра.ТипДокумента = ДанныеСервиса.ТипДокумента;
		ЗаписьРеестра.Прочитать();
		
		ЗаполнитьЗначенияСвойств(ЗаписьРеестра, ДанныеСервиса);

		Если Не ЗначениеЗаполнено(ЗаписьРеестра.ПрикладнойОбъект) Тогда
			ЗаписьРеестра.СостояниеПрикладногоОбъекта = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеСоздавался;
		КонецЕсли;

		ЗаписьРеестра.Записать(Истина);
		
		Результат = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(ЗаписьРеестра,
			Метаданные.РегистрыСведений.СостоянияДокументовEDI);
		
		Результат.Вставить("БизнесПроцессПоДокументуЗавершен",
			ДокументыEDIКлиентСервер.МассивСтатусовАрхив().Найти(Результат.ТекущийСтатус) <> Неопределено);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'Не удалось обновить запись реестра с идентификатором %1 типом документа %2 по причине: %3'");
		ТекстОшибки = СтрШаблон(ТекстОшибки,
			ДанныеСервиса.ИдентификаторВСервисе,
			ДанныеСервиса.ТипДокумента,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ХэшТипаДокументаИСтатуса(ТипДокументаСсылка, СтатусДокумента) Экспорт 
	
	Возврат ДокументыEDIПовтИсп.ХэшТипаДокументаИСтатуса(ТипДокументаСсылка, СтатусДокумента);
	
КонецФункции

Процедура ОбновитьДанныеИзСервиса(ПараметрыПодготовки, АдресХранилища) Экспорт
	
	Результат = РезультатОбновленияДанныхИзСервисаПоОрганизациям(ПараметрыПодготовки.Организации);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция РезультатОбновленияДанныхИзСервисаПоОрганизациям(Организации) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ошибки",             Новый Массив);
	Результат.Вставить("КоличествоЗаписей",  0);
	
	Если Организации <> Неопределено Тогда
		
		Для Каждого Организация Из Организации Цикл
			
			РезультатОбновления = РезультатОбновленияДанныхРеестраДокументовПоОрганизации(Организация);
			
			Результат.КоличествоЗаписей = Результат.КоличествоЗаписей + РезультатОбновления.КоличествоЗаписей;
			
			Если Не РезультатОбновления.Успешно Тогда
				Результат.Ошибки.Добавить();
				РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатСнятияБлокировкиОбновляемыхДанных(Организация, Перечисления.ВидыОбновляемыхДанныхEDI.РеестрДокументов);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыОбновленияРеестрДокументов()
	
	Параметры = Новый Структура;
	Параметры.Вставить("Организация",                 Неопределено);
	Параметры.Вставить("ВидОбновляемыхДанных",        Перечисления.ВидыОбновляемыхДанныхEDI.РеестрДокументов);
	Параметры.Вставить("ДатаНачалаОбновления",        Дата(1, 1, 1));
	Параметры.Вставить("ДатаБлокировкиДляОбновления", Дата(1, 1, 1));
	Параметры.Вставить("ЭтоПоследняяСтраница",        Ложь);
	Параметры.Вставить("ТаблицаСДанными",             Неопределено);
	
	Возврат Параметры;
	
КонецФункции

Функция РезультатОбновленияДанныхРеестраДокументовПоОрганизации(Организация)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = НовыйРезультатОбновления();
	
	НачалоОбновления = ТекущаяДатаСеанса();
	
	ВидОбновляемыхДанных = Перечисления.ВидыОбновляемыхДанныхEDI.РеестрДокументов; 
	
	РезультатПодготовкиОбновленияДанных = РегистрыСведений.СостоянияОбновленияДанныхEDI.РезультатПодготовкиОбновленияДанных(Организация, ВидОбновляемыхДанных);
	
	Если Не РезультатПодготовкиОбновленияДанных.ОбновлениеВозможно Тогда
		Результат.Успешно = Истина;
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОбновления = ПараметрыОбновленияРеестрДокументов();
	ПараметрыОбновления.Организация                 = Организация;
	ПараметрыОбновления.ДатаНачалаОбновления        = НачалоОбновления;
	ПараметрыОбновления.ДатаБлокировкиДляОбновления = НачалоОбновления;
	
	ПараметрыЗапросаСервис = ИнтеграцияССервисомEDIСлужебный.НовыйПараметрыПолученияРеестраДокументов();
	ПараметрыЗапросаСервис.Организация              = Организация;
	ПараметрыЗапросаСервис.ТипыДокументов           = НастройкиEDI.ИспользуемыеТипыДокументов();
	ПараметрыЗапросаСервис.МоментИзмененияСтатусаОт = РезультатПодготовкиОбновленияДанных.ДатаОбновления;
	ПараметрыЗапросаСервис.ВариантСортировки        = ИнтеграцияССервисомEDIСлужебный.ВариантыСортировкиСпискаЗаказов().МоментИзмененияСтатусаВозр;
	
	ТребуетсяВыполнениеЗапроса = Истина;
	
	Пока ТребуетсяВыполнениеЗапроса Цикл
		
		РезультатЗапроса = ИнтеграцияССервисомEDIСлужебный.РеестрДокументов(ПараметрыЗапросаСервис);
		
		Если РезультатЗапроса.Ошибка Тогда
			
			ТребуетсяВыполнениеЗапроса = Ложь;
			Результат.Успешно          = Ложь;
			Результат.ТекстОшибки      = РезультатЗапроса.ТекстОшибки;
			Возврат Результат;
			
		Иначе
			
			ПараметрыОбновления.ТаблицаСДанными = РезультатЗапроса.Данные.Список;
			ДанныеПагинации                     = РезультатЗапроса.Данные.Страницы;
			
			Если ПараметрыОбновления.ТаблицаСДанными.Количество() > 0 Тогда
				
				РезультатОбновления = РезультатОбновленияДанныхРеестрДокументов(ПараметрыОбновления);
				
				Если РезультатОбновления.Успешно Тогда
					
					Результат.Успешно           = Истина;
					ПараметрыЗапросаСервис.ПоложениеКурсора  = ДанныеПагинации.СледующаяСтраница;
					ПараметрыОбновления.ЭтоПоследняяСтраница = Не ЗначениеЗаполнено(ПараметрыЗапросаСервис.ПоложениеКурсора);
					ТребуетсяВыполнениеЗапроса               = Не ПараметрыОбновления.ЭтоПоследняяСтраница;
					Результат.КоличествоЗаписей              = Результат.КоличествоЗаписей + РезультатОбновления.КоличествоЗаписей;
					
				Иначе
					
					Результат.Успешно      = Ложь;
					Результат.ТекстОшибки  = РезультатОбновления.ТекстОшибки;
					Возврат Результат;
					
				КонецЕсли;
				
			Иначе
				
				Результат.Успешно          = Истина;
				ТребуетсяВыполнениеЗапроса = Ложь;
				
				ПараметрыЗаписи = РегистрыСведений.СостоянияОбновленияДанныхEDI.ПараметрыЗаписиВРегистр();
				ПараметрыЗаписи.Организация                 = ПараметрыОбновления.Организация;
				ПараметрыЗаписи.ВидОбновляемыхДанных        = ПараметрыОбновления.ВидОбновляемыхДанных;
				ПараметрыЗаписи.ДатаБлокировкиДляОбновления = Дата(1, 1, 1);
				ПараметрыЗаписи.ДатаОбновления               = ПараметрыОбновления.ДатаНачалаОбновления;
				
				РегистрыСведений.СостоянияОбновленияДанныхEDI.ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РезультатОбновленияДанныхРеестрДокументов(ПараметрыОбновления)
	
	Результат = НовыйРезультатОбновления();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеСервиса.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	|	ДанныеСервиса.ТипДокумента КАК ТипДокумента,
	|	ДанныеСервиса.НомерДокумента КАК НомерДокумента,
	|	ДанныеСервиса.ДатаДокумента КАК ДатаСоздания,
	|	ДанныеСервиса.Организация КАК Организация,
	|	ДанныеСервиса.Контрагент КАК Контрагент,
	|	ДанныеСервиса.Валюта КАК Валюта,
	|	ДанныеСервиса.Сумма КАК Сумма,
	|	ДанныеСервиса.Менеджер КАК Менеджер,
	|	ДанныеСервиса.НомерАктуальнойВерсии КАК НомерАктуальнойВерсии,
	|	ДанныеСервиса.ТекущийСтатус КАК ТекущийСтатус,
	|	ДанныеСервиса.ДатаТекущегоСтатуса КАК ДатаТекущегоСтатуса,
	|	ДанныеСервиса.ПредыдущийСтатус КАК ПредыдущийСтатус,
	|	ДанныеСервиса.ПоследнееДействие КАК ПоследнееДействие,
	|	ДанныеСервиса.СторонаВыполнившаяДействие КАК СторонаВыполнившаяДействие,
	|	ДанныеСервиса.СогласованнаяВерсияПоставщика КАК СогласованнаяВерсияПоставщика,
	|	ДанныеСервиса.СогласованнаяВерсияПокупателя КАК СогласованнаяВерсияПокупателя,
	|	ДанныеСервиса.УточнениеСостоянияПоДаннымСтороныУчастника КАК УточнениеСостоянияПоДаннымСтороныУчастника,
	|	ДанныеСервиса.ДатаУточнениеСостоянияПоДаннымСтороныУчастника КАК ДатаУточнениеСостоянияПоДаннымСтороныУчастника,
	|	ДанныеСервиса.ПлановаяДатаВыполнения КАК ПлановаяДатаВыполнения,
	|	ДанныеСервиса.ВариантУказанияНоменклатуры КАК ВариантУказанияНоменклатуры
	|ПОМЕСТИТЬ ДанныеСервиса
	|ИЗ
	|	&ДанныеСервиса КАК ДанныеСервиса
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеСервиса.ИдентификаторВСервисе КАК ИдентификаторВСервисе,
	|	ДанныеСервиса.ТипДокумента КАК ТипДокумента,
	|	ДанныеСервиса.НомерДокумента КАК НомерДокумента,
	|	ДанныеСервиса.ДатаСоздания КАК ДатаСоздания,
	|	ДанныеСервиса.Организация КАК Организация,
	|	ДанныеСервиса.Контрагент КАК Контрагент,
	|	ДанныеСервиса.Валюта КАК Валюта,
	|	ДанныеСервиса.Сумма КАК Сумма,
	|	ВЫБОР
	|		КОГДА ДанныеСервиса.Менеджер <> &ПустаяСсылкаНаМенеджера
	|			ТОГДА ДанныеСервиса.Менеджер
	|		ИНАЧЕ ЕСТЬNULL(СостоянияДокументовEDI.Менеджер, &ПустаяСсылкаНаМенеджера)
	|	КОНЕЦ КАК Менеджер,
	|	ДанныеСервиса.НомерАктуальнойВерсии КАК НомерАктуальнойВерсии,
	|	ДанныеСервиса.ТекущийСтатус КАК ТекущийСтатус,
	|	ДанныеСервиса.ДатаТекущегоСтатуса КАК ДатаТекущегоСтатуса,
	|	ДанныеСервиса.ПредыдущийСтатус КАК ПредыдущийСтатус,
	|	ДанныеСервиса.ПоследнееДействие КАК ПоследнееДействие,
	|	ДанныеСервиса.СторонаВыполнившаяДействие КАК СторонаВыполнившаяДействие,
	|	ДанныеСервиса.СогласованнаяВерсияПоставщика КАК СогласованнаяВерсияПоставщика,
	|	ДанныеСервиса.СогласованнаяВерсияПокупателя КАК СогласованнаяВерсияПокупателя,
	|	ДанныеСервиса.УточнениеСостоянияПоДаннымСтороныУчастника КАК УточнениеСостоянияПоДаннымСтороныУчастника,
	|	ДанныеСервиса.ДатаУточнениеСостоянияПоДаннымСтороныУчастника КАК ДатаУточнениеСостоянияПоДаннымСтороныУчастника,
	|	ДанныеСервиса.ПлановаяДатаВыполнения КАК ПлановаяДатаВыполнения,
	|	ЕСТЬNULL(СостоянияДокументовEDI.НомерТекущейВерсии, 0) КАК НомерТекущейВерсии,
	|	ЕСТЬNULL(СостоянияДокументовEDI.НомерПрикладногоДокумента, """") КАК НомерПрикладногоДокумента,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ПрикладнойОбъект, НЕОПРЕДЕЛЕНО) КАК ПрикладнойОбъект,
	|	ЕСТЬNULL(СостоянияДокументовEDI.СостояниеПрикладногоОбъекта,
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.НеСоздавался)) КАК
	|		СостояниеПрикладногоОбъекта,
	|	ВЫБОР
	|		КОГДА
	|			СостоянияДокументовEDI.ДатаТекущегоСтатуса > СостоянияДокументовEDI.ДатаУточнениеСостоянияПоДаннымСтороныУчастника
	|			ТОГДА СостоянияДокументовEDI.ДатаТекущегоСтатуса
	|		ИНАЧЕ СостоянияДокументовEDI.ДатаУточнениеСостоянияПоДаннымСтороныУчастника
	|	КОНЕЦ КАК ДатаИзмененияСтатуса,
	|	ЕСТЬNULL(СостоянияДокументовEDI.Менеджер, НЕОПРЕДЕЛЕНО) КАК МенеджерДоОбновления,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ТипДокумента, НЕОПРЕДЕЛЕНО) КАК ТипДокументаДоОбновления,
	|	ЕСТЬNULL(СостоянияДокументовEDI.Организация, НЕОПРЕДЕЛЕНО) КАК ОрганизацияДоОбновления,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ТекущийСтатус, НЕОПРЕДЕЛЕНО) КАК ТекущийСтатусДоОбновления,
	|	ДанныеСервиса.ВариантУказанияНоменклатуры КАК ВариантУказанияНоменклатуры,
	|	ЕСТЬNULL(СостоянияДокументовEDI.ВариантУказанияНоменклатуры, НЕОПРЕДЕЛЕНО) КАК
	|		ВариантУказанияНоменклатурыДоОбновления,
	|	СостоянияДокументовEDI.ХэшОтправленногоДокумента КАК ХэшОтправленногоДокумента,
	|	ДанныеСервиса.ТекущийСтатус В (&МассивСтатусовАрхив) КАК БизнесПроцессПоДокументуЗавершен
	|ИЗ
	|	ДанныеСервиса КАК ДанныеСервиса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияДокументовEDI КАК СостоянияДокументовEDI
	|		ПО ДанныеСервиса.ИдентификаторВСервисе = СостоянияДокументовEDI.ИдентификаторВСервисе
	|		И ДанныеСервиса.ТипДокумента = СостоянияДокументовEDI.ТипДокумента
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИзмененияСтатуса";
	
	Запрос.УстановитьПараметр("МассивСтатусовАрхив", ДокументыEDIКлиентСервер.МассивСтатусовАрхив());
	Запрос.УстановитьПараметр("ПустаяСсылкаНаМенеджера", ДокументыEDIИнтеграция.ПустаяСсылкаОпределяемогоТипа(Метаданные.ОпределяемыеТипы.ПользовательEDI));
	Запрос.УстановитьПараметр("ДанныеСервиса", ПараметрыОбновления.ТаблицаСДанными);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Результат.Успешно = Истина;
		
		ПараметрыЗаписи = РегистрыСведений.СостоянияОбновленияДанныхEDI.ПараметрыЗаписиВРегистр();
		ПараметрыЗаписи.Организация                 = ПараметрыОбновления.Организация;
		ПараметрыЗаписи.ВидОбновляемыхДанных        = ПараметрыОбновления.ВидОбновляемыхДанных;
		ПараметрыЗаписи.ДатаБлокировкиДляОбновления = Дата(1, 1, 1);
		ПараметрыЗаписи.ДатаОбновления               = ПараметрыОбновления.ДатаНачалаОбновления;
		
		РегистрыСведений.СостоянияОбновленияДанныхEDI.ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
		
		Возврат Результат;
		
	КонецЕсли;
	
	МассивыДляРасчетаИтогов = РегистрыСведений.ТекущиеИтогиПоСтатусамEDI.МассивыДляРасчетаИтогов();
	
	НастройкиАвтообновления = РегистрыСведений.НастройкиИнтеграцииEDI.НастройкиАвтообновленияПрикладныхОбъектов();
	
	ДокументыКОбновлению = Новый Массив;
	НачатьТранзакцию();
	
	Попытка
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтатусИзменился = Выборка.ТекущийСтатусДоОбновления <> Выборка.ТекущийСтатус;
			ПараметрыЗаписи = РегистрыСведений.СостоянияДокументовEDI.ПараметрыЗаписиВРегистр();
			
			ЗаполнитьЗначенияСвойств(ПараметрыЗаписи, Выборка);
			Результат.КоличествоЗаписей = Результат.КоличествоЗаписей + 1;
			
			МассивыДляРасчетаИтогов.ТипыДокументов.Добавить(Выборка.ТипДокумента); 
			Если ЗначениеЗаполнено(Выборка.ТипДокументаДоОбновления) Тогда
				МассивыДляРасчетаИтогов.ТипыДокументов.Добавить(Выборка.ТипДокументаДоОбновления);
			КонецЕсли;
			МассивыДляРасчетаИтогов.Статусы.Добавить(Выборка.ТекущийСтатус);
			Если ЗначениеЗаполнено(Выборка.ТекущийСтатусДоОбновления) Тогда
				МассивыДляРасчетаИтогов.Статусы.Добавить(Выборка.ТекущийСтатусДоОбновления);
			КонецЕсли;
			МассивыДляРасчетаИтогов.Менеджеры.Добавить(Выборка.Менеджер);
			Если ЗначениеЗаполнено(Выборка.МенеджерДоОбновления) Тогда
				МассивыДляРасчетаИтогов.Менеджеры.Добавить(Выборка.МенеджерДоОбновления);
			КонецЕсли;
			МассивыДляРасчетаИтогов.Организации.Добавить(Выборка.Организация);
			Если ЗначениеЗаполнено(Выборка.ОрганизацияДоОбновления) Тогда
				МассивыДляРасчетаИтогов.Организации.Добавить(Выборка.ОрганизацияДоОбновления);
			КонецЕсли;
			
			МассивыДляРасчетаИтогов.СостоянияСоответствия.Добавить(Выборка.СостояниеПрикладногоОбъекта);
			
			Если Выборка.СостояниеПрикладногоОбъекта = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ТекущаяВерсияАктуальна Тогда
				
				Если Выборка.НомерАктуальнойВерсии <> Выборка.НомерТекущейВерсии Тогда
					ПараметрыЗаписи.СостояниеПрикладногоОбъекта = Перечисления.СостоянияСоответствияПрикладногоОбъектаДокументуEDI.ВСервисеБолееАктуальнаяВерсия;
					МассивыДляРасчетаИтогов.СостоянияСоответствия.Добавить(ПараметрыЗаписи.СостояниеПрикладногоОбъекта);
						
					Если Не Выборка.БизнесПроцессПоДокументуЗавершен
						И ЗначениеЗаполнено(Выборка.ПрикладнойОбъект)
						И (АвтообновлениеВключено(НастройкиАвтообновления, Выборка.Организация, Выборка.ТипДокумента)
						Или СтатусИзменился) Тогда
						
						ПараметрыВыполнения = РаботаСДаннымиEDIСлужебныйКлиентСервер.НовыйДанныеДокумента();
						ЗаполнитьЗначенияСвойств(ПараметрыВыполнения, Выборка);
						ПараметрыВыполнения.Вставить("Документ", Выборка.ПрикладнойОбъект);
						ПараметрыВыполнения.Вставить("ИдентификаторВСервисе", Выборка.ИдентификаторВСервисе);
						
						ДокументыКОбновлению.Добавить(ПараметрыВыполнения);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыЗаписи.НеВыполнятьРасчетПоСтатусам = Истина;
			СервисEDIПереопределяемый.ПриОбновленииЗаписиСостоянияДокументовПоДаннымСервиса(ПараметрыЗаписи);
			ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
			
			Результат.ДатаПоследнегоИзменения = Выборка.ДатаИзмененияСтатуса;
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из МассивыДляРасчетаИтогов Цикл
			МассивыДляРасчетаИтогов[КлючИЗначение.Ключ] = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КлючИЗначение.Значение);
		КонецЦикла;
		
		РегистрыСведений.ТекущиеИтогиПоСтатусамEDI.РассчитатьИтоги(МассивыДляРасчетаИтогов.ТипыДокументов,
		                                                           МассивыДляРасчетаИтогов.Статусы,
		                                                           МассивыДляРасчетаИтогов.Менеджеры,
		                                                           МассивыДляРасчетаИтогов.Организации,
		                                                           МассивыДляРасчетаИтогов.СостоянияСоответствия);
		
		ПараметрыЗаписи = РегистрыСведений.СостоянияОбновленияДанныхEDI.ПараметрыЗаписиВРегистр();
		ПараметрыЗаписи.Организация          = ПараметрыОбновления.Организация;
		ПараметрыЗаписи.ВидОбновляемыхДанных = ПараметрыОбновления.ВидОбновляемыхДанных;
		
		Если ПараметрыОбновления.ЭтоПоследняяСтраница Тогда
			ПараметрыЗаписи.ДатаБлокировкиДляОбновления = Дата(1, 1, 1);
			ПараметрыЗаписи.ДатаОбновления              = ПараметрыОбновления.ДатаНачалаОбновления;
		Иначе
			ПараметрыЗаписи.ДатаБлокировкиДляОбновления = ПараметрыОбновления.ДатаБлокировкиДляОбновления;
			ПараметрыЗаписи.ДатаОбновления              = Результат.ДатаПоследнегоИзменения;
		КонецЕсли;
		
		РегистрыСведений.СостоянияОбновленияДанныхEDI.ВыполнитьЗаписьВРегистр(ПараметрыЗаписи);
		
		Результат.Успешно = Истина;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		Результат.Успешно     = Ложь;
		Результат.ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(ДокументыКОбновлению) Тогда
		РаботаСДаннымиEDIСлужебный.ЗапланироватьПолучениеИзСервиса(ДокументыКОбновлению);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатОбновления()
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно",                 Ложь);
	Результат.Вставить("ТекстОшибки",             "");
	Результат.Вставить("КоличествоЗаписей",       0);
	Результат.Вставить("ДатаПоследнегоИзменения", Дата(1, 1, 1));
	
	Возврат Результат;
	
КонецФункции

Функция АвтообновлениеВключено(Знач НастройкиАвтообновления, Знач Организация, Знач ТипДокумента)

	Результат = Ложь;
	
	Настройка = НастройкиАвтообновления.Найти(Новый Структура("Организация, ТипДокумента",
		Организация, ТипДокумента));
	
	Если ЗначениеЗаполнено(Настройка) Тогда
		Результат = Настройка.АвтообновлениеВключено;
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

#КонецОбласти

#КонецЕсли
