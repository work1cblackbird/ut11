// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Сведения о настройках блокировки периодов
// 1. По всем организациям установлена блокировка и нет заданий - период заблокирован.
// 2. По части организаций установлена блокировка и нет заданий - период нельзя рассчитать.
// 3. Ни по одной организации не установлена блокировка - период разблокирован, можно рассчитать.
// 4. По каким-то организациям установлена блокировка, но есть задания в заблокированном периоде - ошибка, период нельзя рассчитать.
// 
// Параметры:
//  Организации - Массив из СправочникСсылка.Организации - Организации
//  Период - Дата, Неопределено - Период
//  ОбновлениеИБ - Булево - вызывается из обработчика обновления ИБ
// 
// Возвращаемое значение:
//  Структура - Сведения о блокировке от изменений:
// * ТаблицаБлокировок - ТаблицаЗначений:
// 	** Организация - СправочникСсылка.Организации -
// 	** ПериодБлокировки - Дата -
// 	** ПериодЗаданий - Дата -
// 	** ПериодВозможнойБлокировки - Дата -
// 	** ДатаИзменения - Дата -
// 	** Ответственный - СправочникСсылка.Пользователи -
// 	** Комментарий - Строка -
// * ИспользоватьМеханизмБлокировкиОтИзменений - Булево -
// * ЕстьЗаданияВЗаблокированномПериоде - Булево -
// * ПериодЗаблокированПоВсемОрганизациям - Булево -
// * ПериодЗаблокированПоЧастиОрганизаций - Булево -
// * ПериодНеЗаблокирован - Булево -
// * ПериодМожноЗаблокировать - Булево -
// * ЕстьБлокировки - Булево -
// * ДатаНачалаРасчета - Дата -
// * ЗаблокированныеОрганизации - Массив из СправочникСсылка.Организации -
// * НеЗаблокированныеОрганизации - Массив из СправочникСсылка.Организации -
// * ТаблицаЗаданийКЗакрытию - ТаблицаЗначений:
// 	** Организация - СправочникСсылка.Организации -
// 	** ПервыйПериод - Дата -
// 	** ИмяРегистра - Строка -
// 	** Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца -
Функция СведенияОБлокировкеОтИзменений(Организации, Период = Неопределено, ОбновлениеИБ = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ТаблицаБлокировок = Новый ТаблицаЗначений;
	ТаблицаБлокировок.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаБлокировок.Колонки.Добавить("ПериодБлокировки", Новый ОписаниеТипов("Дата"));
	ТаблицаБлокировок.Колонки.Добавить("ПериодЗаданий", Новый ОписаниеТипов("Дата"));
	ТаблицаБлокировок.Колонки.Добавить("ПериодВозможнойБлокировки", Новый ОписаниеТипов("Дата"));
	ТаблицаБлокировок.Колонки.Добавить("ДатаИзменения", Новый ОписаниеТипов("Дата"));
	ТаблицаБлокировок.Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаБлокировок.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаБлокировок", ТаблицаБлокировок);
	Результат.Вставить("ТаблицаЗаданийКЗакрытию", Новый ТаблицаЗначений);
	Результат.Вставить("ИспользоватьМеханизмБлокировкиОтИзменений", ОбновлениеИБ ИЛИ ИспользоватьМеханизмБлокировкиОтИзменений());
	Результат.Вставить("ЕстьЗаданияВЗаблокированномПериоде", Ложь); // сценарий 4
	Результат.Вставить("ПериодЗаблокированПоВсемОрганизациям", Истина); // сценарий 1, 3
	Результат.Вставить("ПериодЗаблокированПоЧастиОрганизаций", Ложь); // сценарий 2
	Результат.Вставить("ПериодНеЗаблокирован", Ложь);
	Результат.Вставить("ПериодМожноЗаблокировать", Истина);
	Результат.Вставить("ЕстьБлокировки", Ложь);
	Результат.Вставить("ДатаНачалаРасчета", Дата(1,1,1));
	Результат.Вставить("ЗаблокированныеОрганизации", Новый Массив);
	Результат.Вставить("НеЗаблокированныеОрганизации", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("НеиспользуемыеОперацииЗакрытияМесяца", Перечисления.ОперацииЗакрытияМесяца.НеиспользуемыеОперации());
	Запрос.УстановитьПараметр("ИспользоватьМеханизмБлокировкиОтИзменений", Результат.ИспользоватьМеханизмБлокировкиОтИзменений);
	
	#Область ФормированиеВременныхТаблиц
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 0
	|	"""" КАК ИмяРегистра,
	|	НЕОПРЕДЕЛЕНО КАК Операция,
	|	НЕОПРЕДЕЛЕНО КАК Организация,
	|	ДАТАВРЕМЯ(1,1,1,0,0,0) КАК Месяц
	|ПОМЕСТИТЬ ВТЗадания
	|";
	
	Если Результат.ИспользоватьМеханизмБлокировкиОтИзменений Тогда
		
		//++ Локализация
		
		
		//-- Локализация
		
		ШаблонЗапроса =
		"ВЫБРАТЬ
		|	&КраткоеИмяРегистра КАК ИмяРегистра,
		|	&ИмяПоляОперация КАК Операция,
		|	Т.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(МИНИМУМ(Т.ИмяПоляПериод), МЕСЯЦ) КАК Месяц
		|ИЗ
		|	ПолноеИмяРегистра КАК Т
		|	ЛЕВОЕ СОЕДИНЕНИЕ Константы ПО ИСТИНА
		|ГДЕ
		|	Т.Организация В (&Организации)
		|	И &ДополнительныеУсловия
		|СГРУППИРОВАТЬ ПО
		|	Т.Организация,
		|	&ИмяПоляОперация
		|";
		
		РегистрыЗаданий = ЗакрытиеМесяцаСервер.РегистрыЗаданийДляЗакрытияМесяца();
		
		Для Каждого КлючИЗначение Из РегистрыЗаданий Цикл
			
			Если КлючИЗначение.Значение = Ложь Тогда
				Продолжить; // регистр не используется
			КонецЕсли;
			
			МетаРегистр = КлючИЗначение.Ключ;
			
			ТекстСоединение = "";
			ИмяПоляОперация = "НЕОПРЕДЕЛЕНО";
			ДополнительныеУсловия = "ИСТИНА";
			ИмяПоляПериод = "Месяц";
			
			Если МетаРегистр = Метаданные.РегистрыСведений.ЗаданияКЗакрытиюМесяца Тогда
				
				ДополнительныеУсловия = "НЕ Т.Операция В (&НеиспользуемыеОперацииЗакрытияМесяца)
					|";
				
				//++ Локализация
				
		
				//-- Локализация
				
				ИмяПоляОперация = "Т.Операция";
				
			
			КонецЕсли;
			
			ТекстТекущегоЗапроса = СтрЗаменить(ШаблонЗапроса, "&КраткоеИмяРегистра", """" + МетаРегистр.Имя + """");
			ТекстТекущегоЗапроса = СтрЗаменить(ТекстТекущегоЗапроса, "ПолноеИмяРегистра", МетаРегистр.ПолноеИмя());
			ТекстТекущегоЗапроса = СтрЗаменить(ТекстТекущегоЗапроса, "&ИмяПоляОперация", ИмяПоляОперация);
			ТекстТекущегоЗапроса = СтрЗаменить(ТекстТекущегоЗапроса, "ИмяПоляПериод", ИмяПоляПериод);
			ТекстТекущегоЗапроса = СтрЗаменить(ТекстТекущегоЗапроса, "&ДополнительныеУсловия", ДополнительныеУсловия);
			ТекстТекущегоЗапроса = СтрЗаменить(ТекстТекущегоЗапроса, "ЛЕВОЕ СОЕДИНЕНИЕ Константы ПО ИСТИНА", ТекстСоединение);
			
			ТекстЗапроса = ТекстЗапроса
				+ "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|"
				+ ТекстТекущегоЗапроса;
				
		КонецЦикла;

		ТекстЗапроса = ТекстЗапроса
			 + "
				|ИНДЕКСИРОВАТЬ ПО
				|	Организация";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Запрос.Текст  =
	"ВЫБРАТЬ
	|	Т.Организация КАК Организация,
	|	Т.Месяц КАК ПервыйПериод,
	|	Т.ИмяРегистра КАК ИмяРегистра,
	|	Т.Операция КАК Операция
	|ИЗ
	|	ВТЗадания КАК Т
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПервыйПериод,
	|	ИмяРегистра,
	|	Операция
	|";
	
	#КонецОбласти
	
	Результат.Вставить("ТаблицаЗаданийКЗакрытию", Запрос.Выполнить().Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	НАЧАЛОПЕРИОДА(МИНИМУМ(ЕСТЬNULL(Задания.Месяц, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))), МЕСЯЦ) КАК ПериодЗаданий,
	|	НАЧАЛОПЕРИОДА(МИНИМУМ(ЕСТЬNULL(Блокировки.ЗаблокироватьПо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))), МЕСЯЦ) КАК ПериодБлокировки,
	|	Блокировки.ДатаИзменения,
	|	Блокировки.Ответственный,
	|	Блокировки.Комментарий
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗадания КАК Задания
	|		ПО Организации.Ссылка = Задания.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаБлокировкиОтИзменений КАК Блокировки
	|		ПО Организации.Ссылка = Блокировки.Организация
	|		И &ИспользоватьМеханизмБлокировкиОтИзменений
	|ГДЕ
	|	Организации.Ссылка В (&Организации)
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	Блокировки.ДатаИзменения,
	|	Блокировки.Ответственный,
	|	Блокировки.Комментарий";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовСтр = ТаблицаБлокировок.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		
		Если НЕ ЗначениеЗаполнено(НовСтр.ПериодЗаданий) Тогда
			НовСтр.ПериодВозможнойБлокировки = ДобавитьМесяц(НачалоМесяца(ТекущаяДатаСеанса()), ?(ОбновлениеИБ, -2, -1));
		Иначе
			НовСтр.ПериодВозможнойБлокировки = ДобавитьМесяц(НачалоМесяца(НовСтр.ПериодЗаданий), ?(ОбновлениеИБ, -2, -1));
		КонецЕсли;
		
		ЕстьОшибкаВБлокировке = ЗначениеЗаполнено(НовСтр.ПериодЗаданий) И ЗначениеЗаполнено(НовСтр.ПериодБлокировки) И НовСтр.ПериодЗаданий <= НовСтр.ПериодБлокировки;
		Если ЕстьОшибкаВБлокировке Тогда
			Результат.ЕстьЗаданияВЗаблокированномПериоде = Истина; // это ошибка в установленной блокировке
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовСтр.ПериодБлокировки) Тогда
			Результат.ДатаНачалаРасчета = Макс(Результат.ДатаНачалаРасчета, КонецМесяца(НовСтр.ПериодБлокировки) + 1);
		КонецЕсли;
		
		Результат.ЕстьБлокировки = Результат.ЕстьБлокировки ИЛИ ЗначениеЗаполнено(НовСтр.ПериодБлокировки);
		
		Если ЗначениеЗаполнено(Период) Тогда
			
			Если НачалоМесяца(Период) > НовСтр.ПериодБлокировки Тогда
				Результат.ПериодЗаблокированПоВсемОрганизациям = Ложь; // период не заблокирован
			ИначеЕсли ЗначениеЗаполнено(НовСтр.ПериодБлокировки) Тогда
				Результат.ПериодЗаблокированПоЧастиОрганизаций = Истина;
			КонецЕсли;

			Если Результат.ПериодМожноЗаблокировать Тогда
				Результат.ПериодМожноЗаблокировать =
					НЕ Результат.ЕстьЗаданияВЗаблокированномПериоде
					И (НЕ ЗначениеЗаполнено(НовСтр.ПериодЗаданий)
						ИЛИ НачалоМесяца(Период) < НовСтр.ПериодЗаданий);
			КонецЕсли;
			
			Если НачалоМесяца(Период) <= НовСтр.ПериодБлокировки Тогда
				Результат.ЗаблокированныеОрганизации.Добавить(НовСтр.Организация);
			Иначе
				Результат.НеЗаблокированныеОрганизации.Добавить(НовСтр.Организация);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.ПериодЗаблокированПоВсемОрганизациям Тогда
		Результат.ПериодЗаблокированПоЧастиОрганизаций = Ложь; // заблокировано по всем
	КонецЕсли;
	
	Результат.ПериодНеЗаблокирован =
		НЕ Результат.ПериодЗаблокированПоВсемОрганизациям
		И НЕ Результат.ПериодЗаблокированПоЧастиОрганизаций
		И НЕ Результат.ЕстьЗаданияВЗаблокированномПериоде;
		
	Если Результат.ПериодМожноЗаблокировать Тогда
		Результат.ПериодМожноЗаблокировать =
			НЕ Результат.ПериодЗаблокированПоВсемОрганизациям;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Даты блокировки по организациям.
// 
// Параметры:
//  Организации - Массив из СправочникСсылка.Организации - Организации
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//		*Ключ - СправочникСсылка.Организации - организация
//		*Значение - Дата - дата блокировки
Функция ДатыБлокировкиПоОрганизациям(Организации) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ДатыПоОрганизациям = Новый Соответствие;
	
	Если НЕ ИспользоватьМеханизмБлокировкиОтИзменений() Тогда

		Для Каждого Организация Из Организации Цикл
			ДатыПоОрганизациям.Вставить(Организация, Дата(1,1,1));
		КонецЦикла;
		
		Возврат ДатыПоОрганизациям;
		
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(Блокировки.ЗаблокироватьПо, ДАТАВРЕМЯ(1,1,1,0,0,0)) КАК ЗаблокироватьПо
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаБлокировкиОтИзменений КАК Блокировки
	|		ПО Организации.Ссылка = Блокировки.Организация
	|ГДЕ
	|	Организации.Ссылка В (&Организации)";
	
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатыПоОрганизациям.Вставить(Выборка.Организация, Выборка.ЗаблокироватьПо);
	КонецЦикла;
	
	Возврат ДатыПоОрганизациям;
	
КонецФункции

// Первый незаблокированный период.
// 
// Параметры:
//  Организации - Массив из СправочникСсылка.Организации - Организации
// 
// Возвращаемое значение:
//  Дата - Первый незаблокированный период
Функция ПервыйНезаблокированныйПериод(Организации) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);

	Если НЕ ИспользоватьМеханизмБлокировкиОтИзменений() Тогда
		Возврат Дата(1,1,1,0,0,0);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(Блокировки.ЗаблокироватьПо) КАК ЗаблокироватьПо
	|ИЗ
	|	РегистрСведений.НастройкаБлокировкиОтИзменений КАК Блокировки
	|ГДЕ
	|	Блокировки.Организация В (&Организации)";
	
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И НЕ ЗначениеЗаполнено(Выборка.ЗаблокироватьПо) Тогда
		Возврат Дата(1,1,1,0,0,0);
	КонецЕсли;
	
	Возврат НачалоМесяца(ДобавитьМесяц(Выборка.ЗаблокироватьПо, 1));
	
КонецФункции

// Использовать механизм блокировки от изменений.
// 
// Возвращаемое значение:
//  Булево - 
Функция ИспользоватьМеханизмБлокировкиОтИзменений() Экспорт
	
	ЗначенияПараметров = РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров(
		Перечисления.ОперацииЗакрытияМесяца.ПустаяСсылка());
	
	Возврат ЗначенияПараметров.ИспользоватьМеханизмБлокировкиОтИзменений;
	
КонецФункции

// Проверить блокировки перед запуском расчета.
// 
// Параметры:
//  МассивОрганизаций - Массив из СправочникСсылка.Организации - Массив организаций
//  Период - Дата - Период
Процедура ПроверитьБлокировкиПередЗапускомРасчета(МассивОрганизаций, Период) Экспорт
	
	НастройкиБлокировок = СведенияОБлокировкеОтИзменений(МассивОрганизаций, Период);
	
	ПериодЗаблокирован = НЕ НастройкиБлокировок.ЕстьЗаданияВЗаблокированномПериоде И НастройкиБлокировок.ПериодЗаблокированПоВсемОрганизациям;
	
	Если ПериодЗаблокирован Тогда
		
		 ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		 	НСтр("ru='Невозможен расчет заблокированного период %1 по организациям %2'"),
			ЗакрытиеМесяцаКлиентСервер.ПредставлениеПериодаМесяцГод(Период),
			РасчетСебестоимостиПрикладныеАлгоритмы.ПредставлениеОрганизаций(НастройкиБлокировок.ЗаблокированныеОрганизации, ", "));
		 
		 ВызватьИсключение ТекстОшибки; // запуск расчета невозможен
		 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
