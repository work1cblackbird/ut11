//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Проверяет наличие сохраненных данных области.
// 
// Параметры:
//  ОбластьДанных - Число - Номер области для которой проверяется наличие сохраненных данных
// 
// Возвращаемое значение:
//  Булево - Истина если данные области сохранены
Функция ДанныеОбластиСохранены(ОбластьДанных) Экспорт
	
	ЗаписьРегистра = СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ОбластьДанных = ОбластьДанных;
	ЗаписьРегистра.Прочитать();
	
	Возврат ЗаписьРегистра.Выбран();
	
КонецФункции

// Сохраняет данные области перед очисткой области, для последующего восстановления.
// 
// Параметры:
//  ОбластьДанных - Число - Номер области для которой нужно сохранить данные
Процедура СохранитьДанныеОбласти(ОбластьДанных) Экспорт
	
	СохраняемыеДанные = НовыеСохраняемыеДанные();
	СохраняемыеДанные.ОбластиДанных = ПолучитьСтруктуруДанныхРегистраСведений("ОбластиДанных");
	СохраняемыеДанные.РасширенияДляВосстановления = КаталогРасширений.ПрочитатьДанныеВосстанавливаемыхРасширений();
	СохраняемыеДанные.СообщенияОбластейДанныхИзменения = ПолучитьИзмененияСообщенийОбластейДанных();
	СохраняемыеДанные.УстановленаМонопольнаяБлокировка = ПолучитьФункциональнуюОпцию("УстановленаМонопольнаяБлокировка");
	
	ЗаписьОбластиДанных = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
	ЗаписьОбластиДанных.Прочитать();
	
	Если ЗаписьОбластиДанных.Выбран() Тогда
		ЗаполнитьЗначенияСвойств(СохраняемыеДанные.ОбластиДанных, ЗаписьОбластиДанных);
	КонецЕсли;
		
	ЗаписьРегистра = СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ОбластьДанных = ОбластьДанных;
	ЗаписьРегистра.Данные = Новый ХранилищеЗначения(СохраняемыеДанные);
	ЗаписьРегистра.ДатаСохранения = ТекущаяУниверсальнаяДата();
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

// Восстанавливает данные очищенной области.
// 
// Параметры:
//  ОбластьДанных - Число - Номер области для которой нужно восстановить данные
Процедура ВосстановитьДанныеОбласти(ОбластьДанных) Экспорт
	
	ЗаписьРегистра = СоздатьМенеджерЗаписи();
	ЗаписьРегистра.ОбластьДанных = ОбластьДанных;
	ЗаписьРегистра.Прочитать();
	
	Если Не ЗаписьРегистра.Выбран() Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Отсутствуют сохраненные данные области %1'"), ОбластьДанных);
	КонецЕсли;
	
	СохраненныеДанные = НовыеСохраняемыеДанные();
	ЗаполнитьЗначенияСвойств(СохраненныеДанные, ЗаписьРегистра.Данные.Получить());
	
	НачатьТранзакцию();
	
	Попытка
		
		ЗаписьОбластиДанных = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьОбластиДанных, СохраненныеДанные.ОбластиДанных);
		ЗаписьОбластиДанных.Записать();
			
		Если СохраненныеДанные.РасширенияДляВосстановления <> Неопределено Тогда
			КаталогРасширений.ЗаписатьДанныеВосстанавливаемыхРасширенийОбласти(
				СохраненныеДанные.РасширенияДляВосстановления);
		КонецЕсли;
		
		Если СохраненныеДанные.УстановленаМонопольнаяБлокировка <> Неопределено Тогда
			Константы.УстановленаМонопольнаяБлокировка.Установить(СохраненныеДанные.УстановленаМонопольнаяБлокировка);
		КонецЕсли;
		
		ВосстановитьИзмененияСообщенийОбластейДанных(СохраненныеДанные.СообщенияОбластейДанныхИзменения);

		ЗаписьРегистра.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВосстановитьИнформациюОбУдаленныхОбластях() Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеОчищаемойОбласти.ОбластьДанных КАК ОбластьДанных,
	|	ДанныеОчищаемойОбласти.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ДанныеОчищаемойОбласти КАК ДанныеОчищаемойОбласти
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|		ПО ДанныеОчищаемойОбласти.ОбластьДанных = ОбластиДанных.ОбластьДанныхВспомогательныеДанные
	|ГДЕ
	|	ОбластиДанных.ОбластьДанныхВспомогательныеДанные ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеОчищаемойОбласти.ДатаСохранения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Данные = Выборка.Данные; // ХранилищеЗначения
		ОбластьДанных = Выборка.ОбластьДанных; // Число
		СохраненныеДанные = Данные.Получить(); // см. НовыеСохраняемыеДанные
		
		ЗаписьОбластиДанных = РегистрыСведений.ОбластиДанных.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(ЗаписьОбластиДанных, СохраненныеДанные.ОбластиДанных);
		ЗаписьОбластиДанных.ОбластьДанныхВспомогательныеДанные = ОбластьДанных;
		ЗаписьОбластиДанных.Записать();
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруДанныхРегистраСведений(ИмяРегистра)
	
	СтруктураДанных = Новый Структура();
	ОбъектМетаданных = Метаданные.РегистрыСведений[ИмяРегистра];
	
	Если ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		СтруктураДанных.Вставить("Период");
	КонецЕсли;
	
	Если ОбъектМетаданных.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
		СтруктураДанных.Вставить("Регистратор");
		СтруктураДанных.Вставить("НомерСтроки");
	КонецЕсли;
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		СтруктураДанных.Вставить(Измерение.Имя);
	КонецЦикла;
	
	Для Каждого Ресурс Из ОбъектМетаданных.Ресурсы Цикл
		СтруктураДанных.Вставить(Ресурс.Имя);
	КонецЦикла;
	
	Для Каждого Реквизит Из ОбъектМетаданных.Реквизиты Цикл
		СтруктураДанных.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получить изменения сообщений областей данных.
// 
// Возвращаемое значение:
//  Массив из Структура:
//   * Узел - ПланОбменаСсылка.ОбменСообщениями
//   * Ссылка - СправочникСсылка.СообщенияОбластейДанных
Функция ПолучитьИзмененияСообщенийОбластейДанных()
	
	ИзмененияСообщений = Новый Массив; // Массив из Структура
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзменений.Узел КАК Узел,
	|	ТаблицаИзменений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СообщенияОбластейДанных.Изменения КАК ТаблицаИзменений";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Узел = Выборка.Узел; // ПланОбменаСсылка
		Ссылка = Выборка.Ссылка; // СправочникСсылка.СообщенияОбластейДанных  
		ДанныеСообщения = Новый Структура("Узел, Ссылка", Узел, Ссылка);
		ИзмененияСообщений.Добавить(ДанныеСообщения);
	КонецЦикла;
	
	Возврат ИзмененияСообщений;
	
КонецФункции

// Восстановить изменения сообщений областей данных.
// 
// Параметры:
//  ИзмененияСообщений - см. ПолучитьИзмененияСообщенийОбластейДанных
Процедура ВосстановитьИзмененияСообщенийОбластейДанных(ИзмененияСообщений)
	
	Для Каждого ДанныеСообщения Из ИзмененияСообщений Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(ДанныеСообщения.Узел, ДанныеСообщения.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Функция НовыеСохраняемыеДанные()
	
	СохраняемыеДанные = Новый Структура();
	СохраняемыеДанные.Вставить("ОбластиДанных");
	СохраняемыеДанные.Вставить("РасширенияДляВосстановления");
	СохраняемыеДанные.Вставить("СообщенияОбластейДанныхИзменения");
	СохраняемыеДанные.Вставить("УстановленаМонопольнаяБлокировка");
	
	Возврат СохраняемыеДанные;
	
КонецФункции

#КонецОбласти

#КонецЕсли
