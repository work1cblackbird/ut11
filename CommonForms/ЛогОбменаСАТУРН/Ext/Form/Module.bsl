#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.Источник) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	ЗаполнитьПоИсточнику(Параметры.Источник);
	
	ФорматироватьЛог = Истина;
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	Элементы.Документ.Видимость = ЗначениеЗаполнено(Документ);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыОбмена

&НаКлиенте
Процедура ЭтапыОбменаПриАктивизацииСтроки(Элемент)
	
	ВывестиДанныеТекущейСтроки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьПротоколВФайл(Команда)
	
	ВыборТипаСохраняемогоЛогаЗапросовЗавершение = Новый ОписаниеОповещения(
		"ВыборТипаСохраняемогоЛогаЗапросовЗавершение", ЭтотОбъект);
	
	СписокФорматовСохранения = Новый СписокЗначений();
	СписокФорматовСохранения.Добавить("ИсходныйТекст",        НСтр("ru = 'Исходный текст'"));
	СписокФорматовСохранения.Добавить("ФорматированныйТекст", НСтр("ru = 'Форматированный текст'"));
	СписокФорматовСохранения.Добавить("Отмена",               НСтр("ru = 'Отмена'"));
	
	ПоказатьВопрос(
		ВыборТипаСохраняемогоЛогаЗапросовЗавершение,
		НСтр("ru = 'В каком формате сохранить лог запросов?'"),
		СписокФорматовСохранения,,
		СписокФорматовСохранения.Получить(0).Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура Форматировать(Команда)
	
	ФорматироватьЛог = Не ФорматироватьЛог;
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	ВывестиДанныеТекущейСтроки();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписанияОповещений

&НаКлиенте
Процедура ВыборТипаСохраняемогоЛогаЗапросовЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено
		Или ВыбранноеЗначение = "Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = "ФорматированныйТекст" Тогда
		ПостфиксФормтированныйТекст = " " + НСтр("ru = '(форматированный)'");
	КонецЕсли;
	
	ИмяФайла = СтрШаблон(
		НСтр("ru = 'Лог запросов из протокола по объекту %1%2.txt'"),
		Документ,
		ПостфиксФормтированныйТекст);
	
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "-");
	ИмяФайла = СтрЗаменить(ИмяФайла, """", "");
	
	ДиалогВыбораФайла                = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр         = "*.txt|*.txt";
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ФорматЛогаЗапросов", ВыбранноеЗначение);
	
	ОповещениеВыбораФайла = Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ДиалогВыбораФайла.Показать(ОповещениеВыбораФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ПутиКФайлам, ДополнительныеПараметры) Экспорт
	
	Если ПутиКФайлам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФорматЛогаЗапросов  = ДополнительныеПараметры.ФорматЛогаЗапросов;
	СохраняемыйДокумент = Новый ТекстовыйДокумент();
	СохраняемыйДокумент.ДобавитьСтроку(
		СтрШаблон(
			НСтр("ru = 'Лог запросов из протокола по документу: %1'"),
			Документ));
	
	Если ФорматЛогаЗапросов = "ФорматированныйТекст" Тогда
		СохраняемыйДокумент.ДобавитьСтроку(ФорматированныйЛогЗапросовПоДокументу());
	Иначе
		
		Для Каждого СтрокаДанных Из ЭтапыОбмена Цикл
		
			СохраняемыйДокумент.ДобавитьСтроку(СтрокаДанных.Запрос);
			СохраняемыйДокумент.ДобавитьСтроку(СтрокаДанных.ЗапросЗаголовки);
			Если Не ПустаяСтрока(СтрокаДанных.ЗапросТело) Тогда
				СохраняемыйДокумент.ДобавитьСтроку(СтрокаДанных.ЗапросТело);
			КонецЕсли;
			
			СохраняемыйДокумент.ДобавитьСтроку("");
			Если Не ПустаяСтрока(СтрокаДанных.ОтветЗаголовки) Тогда
				СохраняемыйДокумент.ДобавитьСтроку(СтрокаДанных.ОтветЗаголовки);
			КонецЕсли;
			Если Не ПустаяСтрока(СтрокаДанных.ОтветТело) Тогда
				СохраняемыйДокумент.ДобавитьСтроку(СтрокаДанных.ОтветТело);
			КонецЕсли;
			
		КонецЦикла;
		
		СохраняемыйДокумент.ДобавитьСтроку("");
		СохраняемыйДокумент.ДобавитьСтроку(ИнформацияОбОкружении());
		
	КонецЕсли;
	
	Попытка
		СохраняемыйДокумент.Записать(ПутиКФайлам[0],, Символы.ПС);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ПоказатьПредупреждение(,
			СтрШаблон(
				НСтр("ru = 'Ошибка сохранения файла:
					       |%1'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке)));
		Возврат;
		
	КонецПопытки;
	
	ПоказатьОповещениеПользователя(
		СтрШаблон(
			НСтр("ru = 'Файл сохранен по пути: %1'"),
			ПутиКФайлам[0]));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПоИсточнику(Источник)
	
	ПротоколОбмена = Неопределено;
	
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ОчередьСообщенийСАТУРН.ДатаСоздания                 КАК ДатаСоздания,
		|	ОчередьСообщенийСАТУРН.Документ                     КАК Документ,
		|	ОчередьСообщенийСАТУРН.Операция                     КАК Операция,
		|	ОчередьСообщенийСАТУРН.ПротоколОбмена               КАК ПротоколОбмена,
		|	ОчередьСообщенийСАТУРН.РеквизитыИсходящегоСообщения КАК РеквизитыИсходящегоСообщения
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийСАТУРН              КАК ОчередьСообщенийСАТУРН
		|ГДЕ
		|	ОчередьСообщенийСАТУРН.Сообщение = &Сообщение");
		Запрос.УстановитьПараметр("Сообщение", Источник);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "ДатаСоздания, Документ, Операция");
			ПротоколОбмена         = Выборка.ПротоколОбмена.Получить();
			РеквизитыСообщения     = Выборка.РеквизитыИсходящегоСообщения.Получить();
			Версия                 = РеквизитыСообщения.Версия;
			Заголовок              = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(Операция);
			АвтоЗаголовок = Ложь;
			
			Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовРасчетСтатуса Тогда
				Возврат;
			КонецЕсли;
			
			Если ПротоколОбмена = Неопределено Тогда
				
				ПротоколОбмена = Новый Массив;
				
				Если Перечисления.ВидыОперацийСАТУРН.ЭтоАбстрактнаяОперация(Операция) Тогда
					
					ПараметрыОбработкиДокумента = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
					ПараметрыОбработкиДокумента.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
					ПараметрыОбработкиДокумента.Ссылка             = Документ;
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ПараметрыОбмена", ИнтеграцияСАТУРН.ПараметрыОбмена());
					ДополнительныеПараметры.Вставить("ПараметрыОбработкиДокумента", ПараметрыОбработкиДокумента);
					Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Документ);
					СообщенияJSON = Менеджер.СообщениеКПередачеJSON(
						Документ,
						ПараметрыОбработкиДокумента.ДальнейшееДействие,
						ДополнительныеПараметры);
					
					Для Каждого СообщениеJSON Из СообщенияJSON Цикл
						
						Если Перечисления.ВидыОперацийСАТУРН.ЭтоАбстрактнаяОперация(СообщениеJSON.Операция) Тогда
							Продолжить;
						КонецЕсли;
						
						ТелоЗапроса = ИнтеграцияСАТУРНСлужебный.ТелоЗапросаВКонверте(СообщениеJSON.Операция, СообщениеJSON);
						СтрокаПротокола = Новый Структура;
						СтрокаПротокола.Вставить("ЗапросТело",            ОбщегоНазначенияИС.ОбъектВТекстJSON(ТелоЗапроса));
						СтрокаПротокола.Вставить("ОтветТело",             "");
						СтрокаПротокола.Вставить("Операция",              СообщениеJSON.Операция);
						СтрокаПротокола.Вставить("ДатаУниверсальная",     Выборка.ДатаСоздания);
						СтрокаПротокола.Вставить("НомерСтраницы",         СообщениеJSON.НомерСтраницы);
						СтрокаПротокола.Вставить(
							"ПредставлениеОперации",
							ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(
								СообщениеJSON.Операция,,,
								ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПредставлениеНомераСтраницы(СообщениеJSON.НомерСтраницы)));
						
						ПротоколОбмена.Добавить(СтрокаПротокола);
						
					КонецЦикла;
				Иначе
					
					ТелоЗапроса = ИнтеграцияСАТУРНСлужебный.ТелоЗапросаВКонверте(Выборка.Операция, РеквизитыСообщения);
					СтрокаПротокола = Новый Структура;
					СтрокаПротокола.Вставить("ЗапросТело",            ОбщегоНазначенияИС.ОбъектВТекстJSON(ТелоЗапроса));
					СтрокаПротокола.Вставить("ОтветТело",             "");
					СтрокаПротокола.Вставить("Операция",              Выборка.Операция);
					СтрокаПротокола.Вставить("ДатаУниверсальная",     Выборка.ДатаСоздания);
					СтрокаПротокола.Вставить("НомерСтраницы",         РеквизитыСообщения.НомерСтраницы);
					СтрокаПротокола.Вставить(
						"ПредставлениеОперации",
						ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(
							Операция,,,
							ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПредставлениеНомераСтраницы(РеквизитыСообщения.НомерСтраницы)));
					
					ПротоколОбмена.Добавить(СтрокаПротокола);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		
		ПротоколОбмена = ОбщегоНазначения.ЗначениеИзСтрокиXML(Источник.ПротоколОбменаXML);
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	САТУРНПрисоединенныеФайлы.ДатаСоздания           КАК ДатаСоздания,
		|	САТУРНПрисоединенныеФайлы.Документ               КАК Документ,
		|	САТУРНПрисоединенныеФайлы.Операция               КАК Операция,
		|	САТУРНПрисоединенныеФайлы.Версия                 КАК Версия,
		|	САТУРНПрисоединенныеФайлы.Описание               КАК Ошибка
		|ИЗ
		|	Справочник.САТУРНПрисоединенныеФайлы КАК САТУРНПрисоединенныеФайлы
		|ГДЕ
		|	САТУРНПрисоединенныеФайлы.Ссылка = &Сообщение");
		
		Запрос.УстановитьПараметр("Сообщение", Источник);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка, "ДатаСоздания, Документ, Операция, Версия");
			ПротоколОбмена = ОбщегоНазначения.ЗначениеИзСтрокиXML(
				ПротоколОбменаИС.ТекстСообщенияXMLИзПротокола(Источник));
			Заголовок = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(Операция);
			АвтоЗаголовок = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПротоколОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Для Каждого ЭлементДанных Из ПротоколОбмена Цикл
			
			СтрокаТЧ = ЭтапыОбмена.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ЭлементДанных);
			СтрокаТЧ.Дата       = ЭлементДанных.ДатаУниверсальная + (ТекущаяДатаСеанса() - ТекущаяУниверсальнаяДата());
			СтрокаТЧ.ЗапросТело = ЭлементДанных.ЗапросТело;
			СтрокаТЧ.ОтветТело  = ЭлементДанных.ОтветТело;
			Постфикс            = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПредставлениеНомераСтраницы(ЭлементДанных.НомерСтраницы);
			СтрокаТЧ.ПредставлениеОперации = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(ЭлементДанных.Операция,,, Постфикс);
			
		КонецЦикла;
		
	Исключение
		ЭтапыОбмена.Очистить();
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияОбОкружении()
	Возврат ЛогированиеЗапросовСАТУРН.ИнформацияОбОкружении();
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	Форма.Элементы.ФормаФорматировать.Пометка = Форма.ФорматироватьЛог;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиДанныеТекущейСтроки()
	
	ТекущиеДанные = Элементы.ЭтапыОбмена.ТекущиеДанные;
	
	Если (ТекущиеДанные = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент.Очистить();
	
	Если ФорматироватьЛог Тогда
		ТекстовыйДокумент.ДобавитьСтроку(
			ФорматированноеПредставлениеЛогаЗапросов(Элементы.ЭтапыОбмена.ТекущаяСтрока));
	Иначе
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеДанные.Запрос);
		ТекстовыйДокумент.ДобавитьСтроку(ТекущиеДанные.ЗапросЗаголовки);
		Если Не ПустаяСтрока(ТекущиеДанные.ЗапросТело) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеДанные.ЗапросТело);
		КонецЕсли;
		
		ТекстовыйДокумент.ДобавитьСтроку("");
		Если Не ПустаяСтрока(ТекущиеДанные.КодСостояния) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(СтрШаблон("Код состояния: %1", ТекущиеДанные.КодСостояния));
		КонецЕсли;
		Если Не ПустаяСтрока(ТекущиеДанные.ОтветЗаголовки) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеДанные.ОтветЗаголовки);
		КонецЕсли;
		Если Не ПустаяСтрока(ТекущиеДанные.ОтветТело) Тогда
			ТекстовыйДокумент.ДобавитьСтроку(ТекущиеДанные.ОтветТело);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФорматированныйЛогЗапросовПоДокументу()
	
	СохраняемыйДокумент = Новый ТекстовыйДокумент();
	Для Каждого СтрокаДанных Из ЭтапыОбмена Цикл
		СохраняемыйДокумент.ДобавитьСтроку(
			ФорматированноеПредставлениеЛогаЗапросов(СтрокаДанных.ПолучитьИдентификатор()));
	КонецЦикла;
	
	СохраняемыйДокумент.ДобавитьСтроку("");
	СохраняемыйДокумент.ДобавитьСтроку(ИнформацияОбОкружении());
	
	Возврат СохраняемыйДокумент.ПолучитьТекст();
	
КонецФункции

&НаСервере
Функция ФорматированноеПредставлениеЛогаЗапросов(ИдентификаторСтроки)
	
	СтрокаДанных    = ЭтапыОбмена.НайтиПоИдентификатору(ИдентификаторСтроки);
	Запрос          = СтрокаДанных.Запрос;
	ЗапросЗаголовки = СтрокаДанных.ЗапросЗаголовки;
	ЗапросТело      = СтрокаДанных.ЗапросТело;
	ОтветЗаголовки  = СтрокаДанных.ОтветЗаголовки;
	ОтветТело       = СтрокаДанных.ОтветТело;
	Дата            = СтрокаДанных.Дата;
	КодСостояния    = СтрокаДанных.КодСостояния;
	
	ТекстовыйДокументВременный = Новый ТекстовыйДокумент();
	
	ТекстовыйДокументВременный.ДобавитьСтроку(Запрос);
	ТекстовыйДокументВременный.ДобавитьСтроку(ЗапросЗаголовки);
	Если Не ПустаяСтрока(ЗапросТело) Тогда
		ТекстовыйДокументВременный.ДобавитьСтроку(
			ИнтеграцияСАТУРН.ФорматироватьЛогЗапросов(ЗапросТело));
	КонецЕсли;
	
	ТекстовыйДокументВременный.ДобавитьСтроку("");
	Если Не ПустаяСтрока(КодСостояния) Тогда
		ТекстовыйДокументВременный.ДобавитьСтроку(СтрШаблон("Код состояния: %1", КодСостояния));
	КонецЕсли;
	Если Не ПустаяСтрока(ОтветЗаголовки) Тогда
		ТекстовыйДокументВременный.ДобавитьСтроку(ОтветЗаголовки);
	КонецЕсли;
	Если Не ПустаяСтрока(ОтветТело) Тогда
		ТекстовыйДокументВременный.ДобавитьСтроку(
			ИнтеграцияСАТУРН.ФорматироватьЛогЗапросов(ОтветТело));
	КонецЕсли;
	
	Возврат ТекстовыйДокументВременный.ПолучитьТекст();
	
КонецФункции

#КонецОбласти