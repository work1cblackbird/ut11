
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Дата = Параметры.Дата;
	Организация = Параметры.Организация;
	Партнер = Параметры.Партнер;
	Соглашение = Параметры.Соглашение;
	Контрагент = Параметры.Контрагент;
	Договор = Параметры.Договор;
	Валюта = Параметры.Валюта;
	НачалоПериода = Параметры.НачалоПериода;
	КонецПериода = Параметры.КонецПериода;
	НалогообложениеНДС = Параметры.НалогообложениеНДС;
	ЭтоОтчетОПродажах = Параметры.ЭтоОтчетОПродажах;
	АдресТоварыВХранилище = Параметры.АдресТоварыВХранилище;
	
	Если Параметры.Свойство("ДокументПродажи") Тогда
		ДокументПродажи = Параметры.ДокументПродажи;
		Если ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг) Тогда
			Элементы.ДокументПродажи.Видимость = Истина;
			Элементы.ПредставлениеДокументаПродажи.Видимость = Ложь;
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			Элементы.ПредставлениеДокументаПродажи.Заголовок = Строка(ДокументПродажи);
			УстановитьПривилегированныйРежим(Ложь);
			Элементы.ПредставлениеДокументаПродажи.Видимость = Истина;
			Элементы.ДокументПродажи.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ГруппаПредставленияДокументаПродажи.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоОтчетОПродажах Тогда
		ЗаполнитьТаблицуТоваровДляОтчетаОПродажах();
	Иначе
		ЗаполнитьТаблицуТоваровДляОтчетаОСписании();
	КонецЕсли;
	
	Элементы.ТаблицаТоваровЦенаПродажи.Видимость = ЭтоОтчетОПродажах;
	Элементы.ТаблицаТоваровСуммаПродажи.Видимость = ЭтоОтчетОПродажах;
	Элементы.ТаблицаТоваровДатаСчетаФактуры.Видимость = ЭтоОтчетОПродажах;
	Элементы.ТаблицаТоваровПокупатель.Видимость = ЭтоОтчетОПродажах;
	Элементы.ТаблицаТоваровСчетФактураВыставленный.Видимость = ЭтоОтчетОПродажах;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаТоваровКоличествоУпаковокПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	СтрокаТаблицы.Выбран = (СтрокаТаблицы.КоличествоУпаковок <> 0);
	СтрокаТаблицы.СуммаПродажи = СтрокаТаблицы.ЦенаПродажи * СтрокаТаблицы.КоличествоУпаковок;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокументВыполнить()

	ПоместитьТоварыВХранилище();
	Закрыть(КодВозвратаДиалога.OK);
	
	ОповеститьОВыборе(АдресТоварыВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтрокиВыполнить()

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтрокиВыполнить()

	Для Каждого СтрокаТаблицы Из ТаблицаТоваров Цикл
		СтрокаТаблицы.Выбран = Ложь
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.ТаблицаТоваров.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаТоваров.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.ТаблицаТоваров.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = ТаблицаТоваров.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТоваров.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.RosyBrown);

КонецПроцедуры

#Область Прочее

&НаСервере
Процедура ПоместитьТоварыВХранилище() 
	
	Отбор = Новый Структура("Выбран", Истина);
	Товары = ТаблицаТоваров.Выгрузить(Отбор, "Выбран, Номенклатура, Характеристика, СтавкаНДС, Количество, КоличествоУпаковок, КоличествоУпаковокВыбран, ЦенаПродажи, СуммаПродажи, ДатаСчетаФактуры, СчетФактураВыставленный, Покупатель");
	
	Для Каждого СтрокаТаблицы Из Товары Цикл
		
		СтрокаТаблицы.Количество         = СтрокаТаблицы.КоличествоУпаковокВыбран;
		СтрокаТаблицы.КоличествоУпаковок = СтрокаТаблицы.КоличествоУпаковокВыбран;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТоварыВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровДляОтчетаОПродажах()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Дата",				Дата);
	СтруктураПараметров.Вставить("НачалоПериода",		НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",		КонецДня(?(ЗначениеЗаполнено(КонецПериода),
																	КонецПериода,
																	ТекущаяДатаСеанса())));
	СтруктураПараметров.Вставить("Организация",			Организация);
	СтруктураПараметров.Вставить("Партнер",				Партнер);
	СтруктураПараметров.Вставить("Соглашение",			Соглашение);
	СтруктураПараметров.Вставить("Контрагент",			Контрагент);
	СтруктураПараметров.Вставить("Договор",				Договор);
	СтруктураПараметров.Вставить("Валюта",				Валюта);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	НалогообложениеНДС);
	СтруктураПараметров.Вставить("ЕстьНомерГТД",		Ложь);
	СтруктураПараметров.Вставить("ЕстьСуммаПродажиНДС",	Ложь);
	СтруктураПараметров.Вставить("ДокументПродажи",		ДокументПродажи);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	КомиссионнаяТорговляСервер.СформироватьДанныеДляОтчетаКомитенту(СтруктураПараметров, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	ТаблицаТовары.Количество				КАК Количество,
	|	ТаблицаТовары.ДатаСчетаФактуры			КАК ДатаСчетаФактуры,
	|	ТаблицаТовары.СчетФактураВыставленный	КАК СчетФактураВыставленный,
	|	ТаблицаТовары.Покупатель				КАК Покупатель
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ДатаСчетаФактуры,
	|	СчетФактураВыставленный,
	|	Покупатель
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТоварыУслугиКОформлению.Количество, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ									КАК Выбран,
	|	ТоварыУслугиКОформлению.Номенклатура			КАК Номенклатура,
	|	ТоварыУслугиКОформлению.Характеристика		КАК Характеристика,
	|	ТоварыУслугиКОформлению.Количество			КАК Количество,
	|	ТоварыУслугиКОформлению.КоличествоОстаток			КАК КоличествоОстаток,
	|	ЕСТЬNULL(ТаблицаТовары.Количество,
	|		ТоварыУслугиКОформлению.Количество)		КАК КоличествоУпаковокВыбран,
	|	ТоварыУслугиКОформлению.СуммаПродажи			КАК СуммаПродажи,
	|	ТоварыУслугиКОформлению.ДатаСчетаФактуры		КАК ДатаСчетаФактуры,
	|	ТоварыУслугиКОформлению.НомерСчетаФактуры		КАК НомерСчетаФактуры,
	|	ТоварыУслугиКОформлению.Покупатель			КАК Покупатель,
	|	ТоварыУслугиКОформлению.СчетФактураВыставленный			КАК СчетФактураВыставленный,
	|	ТоварыУслугиКОформлению.ЕстьСуммаПродажиНДС		КАК ЕстьСуммаПродажиНДС
	|ИЗ
	|	ТоварыУслугиКОформлению КАК ТоварыУслугиКОформлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|		ПО ТоварыУслугиКОформлению.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ТоварыУслугиКОформлению.Характеристика = ТаблицаТовары.Характеристика
	|			И ТоварыУслугиКОформлению.ДатаСчетаФактуры = ТаблицаТовары.ДатаСчетаФактуры
	|			И ТоварыУслугиКОформлению.Покупатель = ТаблицаТовары.Покупатель
	|			И (ТаблицаТовары.СчетФактураВыставленный В (&НезаполненныеЗначенияСчетФактураВыставленный)
	|				ИЛИ ТоварыУслугиКОформлению.СчетФактураВыставленный = ТаблицаТовары.СчетФактураВыставленный)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСчетаФактуры УБЫВ
	|
	|ИТОГИ
	|	СУММА(Количество),
	|	МАКСИМУМ(КоличествоОстаток)
	|ПО
	|	Номенклатура,
	|	Характеристика";
	
	Товары = ПолучитьИзВременногоХранилища(АдресТоварыВХранилище); // ТаблицаЗначений
	Товары.Свернуть("Номенклатура, Характеристика, ДатаСчетаФактуры, СчетФактураВыставленный, Покупатель", "Количество");
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Товары);
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСчетФактураВыставленный",
								МассивНезаполненныхЗначенийСчетФактурыВыставленный());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	КомиссионнаяТорговляСервер.ЗаполнитьТЧПоТоварамКОформлениюОтчетовКомитентуЗаПериод(ТаблицаТоваров,
																						РезультатЗапроса,
																						СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровДляОтчетаОСписании()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	ТаблицаТовары.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|;
	|///////////////////////////////////////////////////////////////////////////////	
	|ВЫБРАТЬ
	|	ВидыЗапасов.Ссылка КАК ВидЗапасов
	|
	|ПОМЕСТИТЬ ВидыЗапасов
	|ИЗ
	|	Справочник.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|	И ВидыЗапасов.Организация = &Организация
	|	И ВидыЗапасов.ВладелецТовара = &Комитент
	|	И (ВидыЗапасов.Соглашение = &Соглашение
	|		ИЛИ &Соглашение = Неопределено)
	|	И ВидыЗапасов.Валюта = &Валюта
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Остатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	Остатки.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	Остатки.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|
	|	ВЫБОР КОГДА &ЭтоОтчетОПродажах ТОГДА
	|		Остатки.КоличествоОстаток
	|	ИНАЧЕ
	|		Остатки.КоличествоСписаноОстаток
	|	КОНЕЦ КАК КоличествоОстаток,
	|	Остатки.СуммаВыручкиОстаток
	|
	|ПОМЕСТИТЬ ТоварыКОформлению
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(&Граница,
	|		ВидЗапасов В (
	|			ВЫБРАТЬ
	|				ВидЗапасов
	|			ИЗ
	|				ВидыЗапасов КАК ВидыЗапасов
	|			)
	|	) КАК Остатки
	|ГДЕ
	|	(Остатки.КоличествоОстаток <> 0 И &ЭтоОтчетОПродажах)
	|	ИЛИ 
	|	(Остатки.КоличествоСписаноОстаток <> 0 И НЕ &ЭтоОтчетОПродажах)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|
	|	ВЫБОР КОГДА &ЭтоОтчетОПродажах ТОГДА
	|		Остатки.КоличествоОстаток
	|	ИНАЧЕ
	|		Остатки.КоличествоСписаноОстаток
	|	КОНЕЦ КАК КоличествоОстаток,
	|	ВЫБОР КОГДА &ЭтоОтчетОПродажах И Остатки.КоличествоОстаток < 0 ТОГДА
	|		-1
	|	ИНАЧЕ
	|		1
	|	КОНЕЦ КАК Знак,
	|	Остатки.СуммаВыручкиОстаток
	|
	|ПОМЕСТИТЬ ТоварыКОформлениюОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.Остатки(,
	|		ВидЗапасов В (
	|			ВЫБРАТЬ
	|				ВидЗапасов
	|			ИЗ
	|				ВидыЗапасов КАК ВидыЗапасов
	|			)
	|	) КАК Остатки
	|ГДЕ
	|	(Остатки.КоличествоОстаток <> 0 И &ЭтоОтчетОПродажах)
	|	ИЛИ 
	|	(Остатки.КоличествоСписаноОстаток <> 0 И НЕ &ЭтоОтчетОПродажах)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ЕСТЬNULL(ТаблицаТовары.Количество, 0) > 0 ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Выбран,
	|
	|	ТоварыКОформлению.Номенклатура КАК Номенклатура,
	|	ТоварыКОформлению.Характеристика КАК Характеристика,
	|	ТоварыКОформлению.Серия КАК Серия,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток * ТоварыКОформлениюОстатки.Знак, 0)
	|		< (ТоварыКОформлению.КоличествоОстаток * ЕСТЬNULL(ТоварыКОформлениюОстатки.Знак, 1))
	|	ТОГДА
	|		ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток, 0)
	|	ИНАЧЕ
	|		ТоварыКОформлению.КоличествоОстаток
	|	КОНЕЦ КАК КоличествоУпаковок,
	|
	|	ЕСТЬNULL(ТаблицаТовары.Количество, 0) КАК КоличествоУпаковокВыбран,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток * ТоварыКОформлениюОстатки.Знак, 0)
	|		< (ТоварыКОформлению.КоличествоОстаток * ЕСТЬNULL(ТоварыКОформлениюОстатки.Знак, 1))
	|	ТОГДА
	|		ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток, 0)
	|	ИНАЧЕ
	|		ТоварыКОформлению.КоличествоОстаток
	|	КОНЕЦ КАК КоличествоУпаковокУчет,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток * ТоварыКОформлениюОстатки.Знак, 0)
	|		< (ТоварыКОформлению.КоличествоОстаток * ЕСТЬNULL(ТоварыКОформлениюОстатки.Знак, 1))
	|	ТОГДА
	|		ЕСТЬNULL(ТоварыКОформлениюОстатки.СуммаВыручкиОстаток, 0)
	|	ИНАЧЕ
	|		ТоварыКОформлению.СуммаВыручкиОстаток
	|	КОНЕЦ КАК СуммаПродажи,
	|
	|	ВЫБОР КОГДА (
	|		ВЫБОР КОГДА ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток * ТоварыКОформлениюОстатки.Знак, 0)
	|			< (ТоварыКОформлению.КоличествоОстаток * ЕСТЬNULL(ТоварыКОформлениюОстатки.Знак, 1))
	|		ТОГДА
	|			ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток, 0)
	|		ИНАЧЕ
	|			ТоварыКОформлению.КоличествоОстаток
	|		КОНЕЦ
	|		) = 0
	|	ТОГДА
	|		0
	|	ИНАЧЕ
	|		ТоварыКОформлению.СуммаВыручкиОстаток / 
	|		(
	|		ВЫБОР КОГДА ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток * ТоварыКОформлениюОстатки.Знак, 0)
	|			< (ТоварыКОформлению.КоличествоОстаток * ЕСТЬNULL(ТоварыКОформлениюОстатки.Знак, 1))
	|		ТОГДА
	|			ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток, 0)
	|		ИНАЧЕ
	|			ТоварыКОформлению.КоличествоОстаток
	|		КОНЕЦ
	|		)
	|	КОНЕЦ КАК ЦенаПродажи
	|ИЗ
	|	ТоварыКОформлению КАК ТоварыКОформлению
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТоварыКОформлениюОстатки КАК ТоварыКОформлениюОстатки
	|	ПО ТоварыКОформлению.АналитикаУчетаНоменклатуры = ТоварыКОформлениюОстатки.АналитикаУчетаНоменклатуры
 	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|	ПО ТоварыКОформлению.Номенклатура = ТаблицаТовары.Номенклатура
	|	И ТоварыКОформлению.Характеристика = ТаблицаТовары.Характеристика
	|
	|ГДЕ
	|	ТоварыКОформлению.КоличествоОстаток <> 0
	|	И ЕСТЬNULL(ТоварыКОформлениюОстатки.КоличествоОстаток, 0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыКОформлению.Номенклатура,
	|	ТоварыКОформлению.Характеристика
	|");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Комитент", Партнер);
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ЭтоОтчетОПродажах", ЭтоОтчетОПродажах);
	
	ДатаЗаполнения = ?(ЗначениеЗаполнено(КонецПериода), КонецДня(КонецПериода), ТекущаяДатаСеанса());
	Граница = Новый Граница(ДатаЗаполнения, ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Граница", Граница);
	
	Товары = ПолучитьИзВременногоХранилища(АдресТоварыВХранилище); // ТаблицаЗначений
	Товары.Свернуть("Номенклатура, Характеристика", "Количество");
	Запрос.УстановитьПараметр("Товары", Товары);
	
	ТаблицаТоваров.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция МассивНезаполненныхЗначенийСчетФактурыВыставленный()
	МассивНезаполненныхЗначений = Новый Массив;
	МассивНезаполненныхЗначений.Добавить(Неопределено);
	//++ Локализация
	МассивНезаполненныхЗначений.Добавить(Документы.СчетФактураВыданный.ПустаяСсылка());
	МассивНезаполненныхЗначений.Добавить(Документы.СчетФактураКомиссионеру.ПустаяСсылка());
	//-- Локализация
	Возврат МассивНезаполненныхЗначений;
КонецФункции	

#КонецОбласти

#КонецОбласти
