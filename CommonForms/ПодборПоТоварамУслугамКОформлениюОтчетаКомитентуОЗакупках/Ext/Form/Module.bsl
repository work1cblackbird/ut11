
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Дата = Параметры.Дата;
	Организация = Параметры.Организация;
	Контрагент = Параметры.Контрагент;
	Договор = Параметры.Договор;
	Валюта = Параметры.Валюта;
	Если Параметры.Свойство("ДокументПриобретения") Тогда
		ДокументПриобретения = Параметры.ДокументПриобретения;
	КонецЕсли;
	ЭтоОтчетОПродажах = Истина;
	АдресТоварыВХранилище = Параметры.АдресТоварыВХранилище;
	
	ЗаполнитьТаблицуТоваровДляОтчетаОЗакупках();
	Элементы.ТаблицаТоваровСуммаЗакупки.Видимость = ЭтоОтчетОПродажах;
	Элементы.ТаблицаТоваровПоставщик.Видимость = ЭтоОтчетОПродажах;
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьЗаголовокНомерГТД(Элементы, "ТаблицаТоваровНомерГТД");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаТоваровКоличествоУпаковокПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	СтрокаТаблицы.Выбран = (СтрокаТаблицы.КоличествоУпаковок <> 0 И СтрокаТаблицы.КоличествоУпаковокВыбран <> 0);
	
	// отдельный метод должен быть для пересчета суммы, исходя из суммы остатков...
	КоэффициентДляПересчетаСуммы = 1;
	
	Если СтрокаТаблицы.Выбран Тогда
		КоэффициентДляПересчетаСуммы = СтрокаТаблицы.КоличествоУпаковокВыбран / СтрокаТаблицы.КоличествоУпаковок;
	КонецЕсли;
	
	СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.СуммаСНДСОстаток * КоэффициентДляПересчетаСуммы;
	СтрокаТаблицы.СуммаНДС = СтрокаТаблицы.СуммаНДСОстаток * КоэффициентДляПересчетаСуммы;
	СтрокаТаблицы.Сумма = ?(СтрокаТаблицы.ЦенаВключаетНДС, СтрокаТаблицы.СуммаСНДС,
							СтрокаТаблицы.СуммаСНДС - СтрокаТаблицы.СуммаНДС);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокументВыполнить()

	ПоместитьТоварыВХранилище();
	Закрыть(КодВозвратаДиалога.OK);
	
	ОповеститьОВыборе(АдресТоварыВХранилище);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтрокиВыполнить()

	Для Каждого СтрокаТаблицы Из Товары Цикл
		СтрокаТаблицы.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтрокиВыполнить()

	Для Каждого СтрокаТаблицы Из Товары Цикл
		СтрокаТаблицы.Выбран = Ложь
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.ТаблицаТоваров.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = Товары.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.ТаблицаТоваров.ВыделенныеСтроки;
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТаблицы = Товары.НайтиПоИдентификатору(НомерСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтрокаТаблицы.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваров.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаТоваров.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.RosyBrown);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаТоваровВыбран.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.КоличествоУпаковокВыбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.СуммаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#Область Прочее

&НаСервере
Процедура ПоместитьТоварыВХранилище() 
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	Товары.Номенклатура             КАК Номенклатура,
	|	Товары.Характеристика           КАК Характеристика,
	|	Товары.Назначение               КАК Назначение,
	|	Товары.СтавкаНДС                КАК СтавкаНДС,
	|	Товары.Количество               КАК Количество,
	|	Товары.КоличествоУпаковок       КАК КоличествоУпаковок,
	|	Товары.КоличествоУпаковокВыбран КАК КоличествоУпаковокВыбран,
	|	Товары.СуммаСНДС                КАК СуммаСНДС,
	|	Товары.СуммаНДС                 КАК СуммаНДС,
	|	Товары.Сумма                    КАК Сумма,
	//++ Локализация 
	|	Товары.СчетФактураПолученный    КАК СчетФактураПолученный,
	//-- Локализация
	|	Товары.НомерГТД                 КАК НомерГТД,
	|	Товары.ДокументПриобретения     КАК ДокументПриобретения,
	|	Товары.Поставщик                КАК Поставщик,
	|	Товары.ЗаказКлиента             КАК ЗаказКлиента
	|ПОМЕСТИТЬ ТоварыДокумента
	|ИЗ
	|	&Товары КАК Товары
	|ГДЕ
	|	Товары.Выбран
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура             КАК Номенклатура,
	|	Товары.Характеристика           КАК Характеристика,
	|	Товары.Назначение               КАК Назначение,
	|	Товары.СтавкаНДС                КАК СтавкаНДС,
	|	Товары.КоличествоУпаковокВыбран КАК Количество,
	|	Товары.КоличествоУпаковокВыбран КАК КоличествоУпаковок,
	|	Товары.СуммаСНДС                КАК СуммаСНДС,
	|	Товары.СуммаНДС                 КАК СуммаНДС,
	|	Товары.Сумма                    КАК Сумма,
	//++ Локализация 
	|	Товары.СчетФактураПолученный    КАК СчетФактураПолученный,
	//-- Локализация
	|	Товары.НомерГТД                 КАК НомерГТД,
	|	Товары.ДокументПриобретения     КАК ДокументПриобретения,
	|	Товары.Поставщик                КАК Поставщик,
	|	НазначенияТоваров.Заказ         КАК ЗаказКлиента
	|ИЗ ТоварыДокумента КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК НазначенияТоваров
	|	ПО Товары.Назначение = НазначенияТоваров.Ссылка
	|";
	
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить());
	
	ТаблицаТовары = Запрос.Выполнить().Выгрузить();
	ПоместитьВоВременноеХранилище(ТаблицаТовары, АдресТоварыВХранилище);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуТоваровДляОтчетаОЗакупках()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапросаВТОстатковКОформлению = Документы.ОтчетКомитентуОЗакупках.ТекстЗапросаТоварыУслугиКОформлениюОтчетовКомитентуОЗакупкахОстаткиПоНазначениям("ВТОстатковКОформлению");
	
	ТекстЗапросаПодобратьСчетаФактурыПолученные = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.ДокументПриобретения КАК ДокументОснование
	|ПОМЕСТИТЬ ДокументыОснования
	|ИЗ
	|	ВТОстатковКОформлению КАК ДокументыОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.ДокументПриобретения КАК ДокументПриобретения,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Поставщик КАК Поставщик,
	|	ТаблицаТовары.НомерГТД КАК НомерГТД,
	|	ТаблицаТовары.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОснования.ДокументОснование КАК Ссылка
	//++ Локализация
	|	,МИНИМУМ(ВЫБОР
	|			КОГДА ДанныеОснованийСчетовФактур.Валюта ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК НеТребуетсяСчетФактура
	//-- Локализация
	|ПОМЕСТИТЬ ТаблицаОснований
	|ИЗ
	|	ДокументыОснования КАК ДокументыОснования
	//++ Локализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеОснованийСчетовФактур КАК ДанныеОснованийСчетовФактур
	|		ПО ДокументыОснования.ДокументОснование = ДанныеОснованийСчетовФактур.Регистратор
	|			И (ДанныеОснованийСчетовФактур.ТипСчетаФактуры = &ИдентификаторМетаданных)
	|			И (ДанныеОснованийСчетовФактур.Контрагент ССЫЛКА Справочник.Контрагенты)
	//-- Локализация
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыОснования.ДокументОснование
	|;
	//++ Локализация
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОснований.Ссылка КАК ДокументОснование,
	|	МАКСИМУМ(СчетаФактуры.НомерИсправления) КАК НомерИсправления
	|ПОМЕСТИТЬ НомераИсправлений
	|ИЗ
	|	ТаблицаОснований КАК ТаблицаОснований
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетаФактурыОснования
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетаФактуры
	|			ПО СчетаФактурыОснования.Ссылка = СчетаФактуры.Ссылка
	|				И (НЕ СчетаФактуры.ПометкаУдаления)
	|		ПО ТаблицаОснований.Ссылка = СчетаФактурыОснования.ДокументОснование
	|			И (НЕ ТаблицаОснований.НеТребуетсяСчетФактура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОснований.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераИсправлений.ДокументОснование КАК Ссылка,
	|	СчетФактураПолученный.Ссылка КАК СчетФактура
	|ПОМЕСТИТЬ ОснованияСоСчетФактурой
	|ИЗ
	|	НомераИсправлений КАК НомераИсправлений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетаФактурыОснования
	|		ПО (СчетаФактурыОснования.ДокументОснование = НомераИсправлений.ДокументОснование)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ПО (СчетаФактурыОснования.Ссылка = СчетФактураПолученный.Ссылка)
	|			И (НЕ СчетФактураПолученный.ПометкаУдаления)
	|			И НомераИсправлений.НомерИсправления = СчетФактураПолученный.НомерИсправления
	|;
	//-- Локализация
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.КоличествоУпаковок, 0) <> 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выбран,
	|	ОстаткиКОформлению.Организация КАК Организация,
	|	ОстаткиКОформлению.Номенклатура КАК Номенклатура,
	|	ОстаткиКОформлению.Характеристика КАК Характеристика,
	|	ОстаткиКОформлению.Назначение КАК Назначение,
	|	ОстаткиКОформлению.Упаковка КАК Упаковка,
	|	ОстаткиКОформлению.ДокументПриобретения КАК ДокументПриобретения,
	|	ОстаткиКОформлению.ДокументПриобретения.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ОстаткиКОформлению.ДокументПриобретения.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ОстаткиКОформлению.ДокументПриобретения.Дата КАК ДатаПриобретения,
	|	ОстаткиКОформлению.Поставщик КАК Поставщик,
	|	ОстаткиКОформлению.НомерГТД КАК НомерГТД,
	|	ОстаткиКОформлению.Валюта КАК Валюта,
	|	ОстаткиКОформлению.Количество КАК Количество,
	|	ОстаткиКОформлению.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ОстаткиКОформлению.СтавкаНДС КАК СтавкаНДС,
	|	ОстаткиКОформлению.СуммаСНДС КАК СуммаСНДСОстаток,
	|	ОстаткиКОформлению.СуммаНДС КАК СуммаНДСОстаток,
	|	ЕСТЬNULL(ТаблицаТовары.КоличествоУпаковок, ОстаткиКОформлению.КоличествоУпаковок) КАК КоличествоУпаковокВыбран
	//++ Локализация
	|	,ТаблицаОснований.НеТребуетсяСчетФактура КАК НеТребуетсяСчетФактура,
	|	ВЫБОР
	|		КОГДА ОснованияСоСчетФактурой.Ссылка ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеВыставленСчетФактура,
	|	ЕСТЬNULL(ОснованияСоСчетФактурой.СчетФактура, ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)) КАК СчетФактураПолученный
	//-- Локализация
	|ИЗ
	|	ВТОстатковКОформлению КАК ОстаткиКОформлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОснований КАК ТаблицаОснований
	|		ПО ОстаткиКОформлению.ДокументПриобретения = ТаблицаОснований.Ссылка
	//++ Локализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияСоСчетФактурой КАК ОснованияСоСчетФактурой
	|		ПО (ТаблицаОснований.Ссылка = ОснованияСоСчетФактурой.Ссылка)
	//-- Локализация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|		ПО ОстаткиКОформлению.Номенклатура = ТаблицаТовары.Номенклатура
	|			И ОстаткиКОформлению.Характеристика = ТаблицаТовары.Характеристика
	|			И ОстаткиКОформлению.Назначение = ТаблицаТовары.Назначение
	|			И ОстаткиКОформлению.ДокументПриобретения = ТаблицаТовары.ДокументПриобретения
	|			И ОстаткиКОформлению.Поставщик = ТаблицаТовары.Поставщик
	|			И ОстаткиКОформлению.НомерГТД = ТаблицаТовары.НомерГТД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупкахОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупкахОбороты.Характеристика КАК Характеристика,
	|	ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупкахОбороты.Назначение КАК Назначение,
	|	ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупкахОбороты.НомерГТД КАК НомерГТД,
	|	ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупкахОбороты.КоличествоРасход КАК КоличествоРасход
	|ИЗ
	|	РегистрНакопления.ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках.Обороты(
	|			,
	|			,
	|			,
	|			(Номенклатура, Назначение, Характеристика, НомерГТД) В
	|				(ВЫБРАТЬ
	|					ТаблицаТовары.Номенклатура,
	|					ТаблицаТовары.Назначение,
	|					ТаблицаТовары.Характеристика,
	|					ТаблицаТовары.НомерГТД
	|				ИЗ
	|					ТаблицаТовары)) КАК ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупкахОбороты
	|";

	
	
	Запрос = Новый Запрос(ТекстЗапросаВТОстатковКОформлению + ";" + ТекстЗапросаПодобратьСчетаФактурыПолученные);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Валюта", Валюта);

	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	Запрос.УстановитьПараметр("ИспользоватьОтборПоПоставщику", ЗначениеЗаполнено(Поставщик));
	
	Запрос.УстановитьПараметр("ИспользоватьОтборПоНазначениям", Ложь);
	Запрос.УстановитьПараметр("МассивНазначений", Новый Массив);
	
	МассивДокументовПриобретения = Новый Массив();
	Если ЗначениеЗаполнено(ДокументПриобретения) Тогда
		Запрос.УстановитьПараметр("ИспользоватьОтборПоДокументам", Истина);
		МассивДокументовПриобретения.Добавить(ДокументПриобретения);
		Запрос.УстановитьПараметр("МассивДокументовПриобретения", МассивДокументовПриобретения);
	Иначе
		Запрос.УстановитьПараметр("ИспользоватьОтборПоДокументам", Ложь);
		Запрос.УстановитьПараметр("МассивДокументовПриобретения", МассивДокументовПриобретения);
	КонецЕсли;

	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(Организация));
	
	ТаблицаТовары = ПолучитьИзВременногоХранилища(АдресТоварыВХранилище); // ТаблицаЗначений
	ТаблицаТовары.Свернуть("Номенклатура, Характеристика, Назначение, ДокументПриобретения, Поставщик, НомерГТД", "КоличествоУпаковок");
	Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаТовары);
	//++ Локализация
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СчетФактураПолученный"));
	//-- Локализация
	Товары.Очистить();

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();

	НомерРезльутатаВыборки = 4;
	НомерРезультатаДанныеПоОтгрузке = 5;
	
	//++ Локализация
	НомерРезльутатаВыборки = 6;
	НомерРезультатаДанныеПоОтгрузке = 7;
	//-- Локализация
	
	ВыборкаРезультата = РезультатЗапроса[НомерРезльутатаВыборки].Выбрать();
	ДанныеПоОтгрузке = РезультатЗапроса[НомерРезультатаДанныеПоОтгрузке].Выгрузить();

	Пока ВыборкаРезультата.Следующий() Цикл
		НоваяСтрока = Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРезультата);
		
		// отдельный метод должен быть для пересчета суммы, исходя из суммы остатков...
		КоэффициентДляПересчетаСуммы = 1;
		Если НоваяСтрока.КоличествоУпаковокВыбран<>0 И НоваяСтрока.КоличествоУпаковок<>0 Тогда
			КоэффициентДляПересчетаСуммы = НоваяСтрока.КоличествоУпаковокВыбран / НоваяСтрока.КоличествоУпаковок;
		КонецЕсли;
		НоваяСтрока.СуммаСНДС = НоваяСтрока.СуммаСНДСОстаток * КоэффициентДляПересчетаСуммы;
		НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДСОстаток * КоэффициентДляПересчетаСуммы;
		НоваяСтрока.ЦенаВключаетНДС = ВыборкаРезультата.ЦенаВключаетНДС;
		НоваяСтрока.Сумма = ?(НоваяСтрока.ЦенаВключаетНДС, НоваяСтрока.СуммаСНДС,
								НоваяСтрока.СуммаСНДС - НоваяСтрока.СуммаНДС);
		КоэффициентУпаковки = ВыборкаРезультата.КоличествоУпаковок / ?(ВыборкаРезультата.Количество=0, 1, ВыборкаРезультата.Количество);
		
		ОтборПоТовару = Новый Структура();
		ОтборПоТовару.Вставить("Номенклатура", ВыборкаРезультата.Номенклатура);
		ОтборПоТовару.Вставить("Характеристика", ВыборкаРезультата.Характеристика);
		ОтборПоТовару.Вставить("Назначение", ВыборкаРезультата.Назначение);
		ОтборПоТовару.Вставить("НомерГТД", ВыборкаРезультата.НомерГТД);
		СтрокиПоОтгрузке = ДанныеПоОтгрузке.НайтиСтроки(ОтборПоТовару);
		Для каждого СтрокаОтгрузки Из СтрокиПоОтгрузке Цикл
			Если СтрокаОтгрузки.КоличествоРасход > 0 
				И НоваяСтрока.КоличествоУпаковокОтгружено < НоваяСтрока.КоличествоУпаковок Тогда
				КоличествоУпаковокОтгружено = Мин(СтрокаОтгрузки.КоличествоРасход / КоэффициентУпаковки, НоваяСтрока.КоличествоУпаковок);
				НоваяСтрока.КоличествоУпаковокОтгружено = НоваяСтрока.КоличествоУпаковокОтгружено + КоличествоУпаковокОтгружено;
				СтрокаОтгрузки.КоличествоРасход = СтрокаОтгрузки.КоличествоРасход - СтрокаОтгрузки.КоличествоРасход*КоэффициентУпаковки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//++ Локализация
	ОтчетКомитентуОЗакупкахЛокализация.ЗаполнитьСчетаФактурыПолученные(ЭтотОбъект);
	//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ПоставщикПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииСервер()
	
	ЗаполнитьТаблицуТоваровДляОтчетаОЗакупках();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
