#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ДействияСтрока = НСтр("ru = 'Все'");
	ДействияСписок.Добавить(Перечисления.ВариантыОбеспечения.КОбеспечению,
		Перечисления.ВариантыОбеспечения.КОбеспечению, Истина);
	ДействияСписок.Добавить(Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления,
		Перечисления.ВариантыОбеспечения.РезервироватьПоМереПоступления, Истина);
	ДействияСписок.Добавить(Перечисления.ВариантыОбеспечения.Отгрузить,
		Перечисления.ВариантыОбеспечения.Отгрузить, Истина);
	ДействияСписок.Добавить(Перечисления.ВариантыОбеспечения.СоСклада,
		Перечисления.ВариантыОбеспечения.СоСклада, Истина);
	ДействияСписок.Добавить(Перечисления.ВариантыОбеспечения.НеТребуется,
		Перечисления.ВариантыОбеспечения.НеТребуется, Истина);
	ДействияСписок.Добавить(Перечисления.ВариантыОбеспечения.ПереданРанее,
		Перечисления.ВариантыОбеспечения.ПереданРанее, Истина);
	ВосстановитьНастройки();
	
	ЗаполнитьТоварыПоЗначениюПереключателяВсеИзДокументаНеОбеспечено();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПометкаЗначенийВСписке" Тогда
		
		ДействияСписок.Очистить();
		Для Каждого Элемент Из ВыбранноеЗначение Цикл
			ДействияСписок.Добавить(Элемент.Значение, Элемент.Представление, Элемент.Пометка, Элемент.Картинка);
		КонецЦикла;
		ПометкаЗначенийВСпискеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаполнитьПоДокументуДефицитуПриИзменении(Элемент)
	
	СохранитьНастройки();
	ЗаполнитьТоварыПоЗначениюПереключателяВсеИзДокументаНеОбеспечено();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ЗаполнитьТоварыПоЗначениюПереключателяВсеИзДокументаНеОбеспечено();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	СтрокаТовары = Элементы.Товары.ТекущиеДанные;
	СтрокаТовары.Отметка = СтрокаТовары.КЗаказу > 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Отметить(Команда)
	ИзменитьОтметку(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	ИзменитьОтметку(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Результат = Новый Структура("АдресТовары,Основание,Склад");
	СтруктураВозврата = АдресТовары();
	Результат.АдресТовары = СтруктураВозврата.АдресТовары;
	Результат.Основание = Параметры.Ссылка;
	Результат.Склад = СтруктураВозврата.ОдинСклад;
	Закрыть(Результат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "ТоварыНоменклатураЕдиницаИзмерения";
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "Товары.Упаковка";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, ПараметрыУсловногоОформления);
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(
		ЭтотОбъект,
		"ТоварыНазначение",
		"Товары.ТипНоменклатуры",
		Ложь);
	СкладГруппа = Истина;
	СкладыСервер.УстановитьУсловноеОформлениеПодразделенияВТЧ(ЭтотОбъект, "Товары", Истина, "");
	
	// Пустой вариант обеспечения.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВариантОбеспечения.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.ВариантОбеспечения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<по всем действиям>'"));
	
КонецПроцедуры

&НаСервере
Процедура УправлениеВидимостью(ТекущийЭлементИмя = Неопределено)
	
	Если ТекущийЭлементИмя = Элементы.ВсеИзДокументаНеОбеспечено.Имя Или ТекущийЭлементИмя = Неопределено Тогда
		
		Элементы.ТоварыОбеспечено.Видимость = ВсеИзДокументаНеОбеспечено = 1; // заполнение не обеспечено
		Элементы.ТоварыТребуется.Видимость = ВсеИзДокументаНеОбеспечено = 1; // заполнение не обеспечено
		Элементы.ТоварыКоличествоПоДокументу.Видимость = ВсеИзДокументаНеОбеспечено = 0; // заполнение по документу
		Элементы.ТоварыВариантОбеспечения.Видимость = ВсеИзДокументаНеОбеспечено = 0; // заполнение по документу
		Элементы.ТоварыДатаОтгрузки.Видимость = ВсеИзДокументаНеОбеспечено = 0; // заполнение по документу
		Элементы.ДействияСтрока.Видимость = ВсеИзДокументаНеОбеспечено = 0; // заполнение по документу
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоЗначениюПереключателяВсеИзДокументаНеОбеспечено()
	
	Если Параметры.ПараметрыОписаныВОбщемМодуле Тогда
		ПараметрыСоздания = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Параметры.ИмяМенеджераДокумента
			+ ".ПараметрыСозданияНаОснованииОбеспечивающегоЗаказа()");
	Иначе
		ПараметрыСоздания = Документы[Параметры.ИмяМенеджераДокумента].ПараметрыСозданияНаОснованииОбеспечивающегоЗаказа();
	КонецЕсли;
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Параметры.Ссылка);
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	МенеджерДокумента.ТоварыДокументаДляСозданияОбеспечивающегоЗаказа(
		Параметры.Ссылка,
		ПараметрыСоздания,
		МенеджерВременныхТаблиц);
		
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Склады", Склад);
	Запрос.УстановитьПараметр("ВсеСклады", Не ЗначениеЗаполнено(Склад));
	ВариантыОбеспечения = ВариантыОбеспечения();
	Запрос.УстановитьПараметр("ВариантыОбеспечения", ВариантыОбеспечения);
	Запрос.УстановитьПараметр("ВсеДействия", ВариантыОбеспечения.Количество() = 0);

	Тексты = Новый Массив();
	Если ВсеИзДокументаНеОбеспечено = 0 Тогда // заполнение все из документа
		
		Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтрокиВДокументе,
			|	Товары.Номенклатура КАК Номенклатура,
			|	МИНИМУМ(Товары.Номенклатура.ТипНоменклатуры) КАК ТипНоменклатуры,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Упаковка КАК Упаковка,
			|	Товары.Склад КАК Склад,
			|	Товары.Подразделение КАК Подразделение,
			|	Товары.Назначение КАК Назначение,
			|	Товары.ВариантОбеспечения КАК ВариантОбеспечения,
			|	Товары.Обособленно КАК Обособленно,
			|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
			|	СУММА(Товары.КоличествоПоДокументу) КАК КоличествоПоДокументу,
			|	ИСТИНА КАК Отметка,
			|	СУММА(Товары.КоличествоПоДокументу) КАК КЗаказу
			|ИЗ
			|	ТоварыДокумента КАК Товары
			|ГДЕ
			|	(&ВсеСклады ИЛИ Товары.Склад В(&Склады))
			|		И (&ВсеДействия ИЛИ Товары.ВариантОбеспечения В(&ВариантыОбеспечения))
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Упаковка,
			|	Товары.Склад,
			|	Товары.Подразделение,
			|	Товары.Назначение,
			|	Товары.ВариантОбеспечения,
			|	Товары.Обособленно,
			|	Товары.ДатаОтгрузки
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтрокиВДокументе";
		Тексты.Добавить(Текст);
			
	Иначе // заполнение не обеспечено
		
		Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(Товары.НомерСтроки) КАК НомерСтроки,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Склад КАК Склад,
			|	Товары.Подразделение КАК Подразделение,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|			ТОГДА Товары.Подразделение
			|		ИНАЧЕ Товары.Склад
			|	КОНЕЦ КАК Отправитель,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Упаковка) = 1
			|			ТОГДА МАКСИМУМ(Товары.Упаковка)
			|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
			|	КОНЕЦ КАК Упаковка,
			|	Товары.Назначение КАК Назначение,
			|	Товары.Обособленно КАК Обособленно
			|ПОМЕСТИТЬ ТоварыСгруппированные
			|ИЗ
			|	ТоварыДокумента КАК Товары
			|ГДЕ
			|	(&ВсеСклады ИЛИ Товары.Склад В(&Склады))
			|		И Товары.ВариантОбеспечения В(
			|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.РезервироватьПоМереПоступления),
			|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.КОбеспечению))
			|СГРУППИРОВАТЬ ПО
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Склад,
			|	Товары.Подразделение,
			|	ВЫБОР
			|		КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
			|			ТОГДА Товары.Склад
			|		ИНАЧЕ Товары.Подразделение
			|	КОНЕЦ,
			|	Товары.Назначение,
			|	Товары.Обособленно
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Отправитель, Назначение";
			
		Тексты.Добавить(Текст);
		
		Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Потребности.Номенклатура КАК Номенклатура,
			|	Потребности.Характеристика КАК Характеристика,
			|	Потребности.Склад КАК Склад,
			|	Потребности.Назначение КАК Назначение,
			|	Потребности.РезервироватьПоМереПоступленияОстаток
			|		+ Потребности.КОбеспечениюОстаток
			|		+ Потребности.ОтложитьРезервированиеОстаток КАК Требуется,
			|	ВЫБОР
			|		КОГДА Потребности.ВНаличииОстаток + Потребности.ЗаказаноОстаток - Потребности.РезервироватьНаСкладеОстаток
			|				> Потребности.РезервироватьПоМереПоступленияОстаток + Потребности.КОбеспечениюОстаток + Потребности.ОтложитьРезервированиеОстаток
			|			ТОГДА
			|				Потребности.РезервироватьПоМереПоступленияОстаток + Потребности.КОбеспечениюОстаток + Потребности.ОтложитьРезервированиеОстаток
			|		КОГДА Потребности.ВНаличииОстаток + Потребности.ЗаказаноОстаток - Потребности.РезервироватьНаСкладеОстаток < 0
			|			ТОГДА 0
			|		ИНАЧЕ
			|			Потребности.ВНаличииОстаток + Потребности.ЗаказаноОстаток - Потребности.РезервироватьНаСкладеОстаток
			|	КОНЕЦ КАК Обеспечено
			|ПОМЕСТИТЬ Потребности
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности.Остатки(,
			|		(Номенклатура, Характеристика, Склад, Назначение) В(
			|			ВЫБРАТЬ
			|				Товары.Номенклатура КАК Номенклатура,
			|				Товары.Характеристика КАК Характеристика,
			|				Товары.Отправитель КАК Склад,
			|				Товары.Назначение КАК Назначение
			|			ИЗ
			|				ТоварыСгруппированные КАК Товары)) КАК Потребности
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение";
		
		Тексты.Добавить(Текст);
		
		Текст =
			"ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтрокиВДокументе,
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Упаковка КАК Упаковка,
			|	Товары.Склад КАК Склад,
			|	Товары.Подразделение КАК Подразделение,
			|	Товары.Назначение КАК Назначение,
			|	Товары.Обособленно КАК Обособленно,
			|	ЕСТЬNULL(Потребности.Требуется, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Требуется,
			|	ЕСТЬNULL(Потребности.Обеспечено, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Обеспечено,
			|	ЕСТЬNULL(Потребности.Требуется - Потребности.Обеспечено, 0) > 0 КАК Отметка,
			|	ЕСТЬNULL(Потребности.Требуется - Потребности.Обеспечено, 0) / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КЗаказу
			|ИЗ
			|	ТоварыСгруппированные КАК Товары
			|		
			|		ЛЕВОЕ СОЕДИНЕНИЕ Потребности КАК Потребности
			|		ПО Потребности.Номенклатура = Товары.Номенклатура
			|		 И Потребности.Характеристика = Товары.Характеристика
			|		 И Потребности.Склад = Товары.Отправитель
			|		 И Потребности.Назначение = Товары.Назначение
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтрокиВДокументе";
			
		Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"Товары.Упаковка", "Товары.Номенклатура");
		Текст = СтрЗаменить(Текст, "&ТекстЗапросаКоэффициентУпаковки", Подстановка);
		
		Тексты.Добавить(Текст);
	КонецЕсли;
	
	Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Склад КАК Ссылка
		|ИЗ
		|	ТоварыДокумента КАК Товары
		|ГДЕ
		|	Товары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	Тексты.Добавить(Текст);
	
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	УстановитьПривилегированныйРежим(Истина);
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	ТаблицаТовары = ПакетРезультатов[ПакетРезультатов.ВГраница() - 1].Выгрузить();
	МассивСкладов = ПакетРезультатов[ПакетРезультатов.ВГраница()].Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.Склад.СписокВыбора.ЗагрузитьЗначения(МассивСкладов);
	Товары.Загрузить(ТаблицаТовары);
	УправлениеВидимостью();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияСтрокаНажатие(Элемент, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Список,Заголовок", ДействияСписок, НСтр("ru = 'Выбор действий документа'"));
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПометкаЗначенийВСписке",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,
		,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ПометкаЗначенийВСпискеНаСервере()
	
	Все = Истина;
	Представления = Новый Массив();
	Для Каждого Элемент Из ДействияСписок Цикл
		Все = Все И Элемент.Пометка;
		Если Элемент.Пометка Тогда
			Представления.Добавить(Элемент.Представление);
		КонецЕсли;
	КонецЦикла;
	ДействияСтрока = ?(Все, НСтр("ru = 'Все'"), СтрСоединить(Представления, ", "));
	СохранитьНастройки();
	ЗаполнитьТоварыПоЗначениюПереключателяВсеИзДокументаНеОбеспечено();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтметку(Установить)
	
	Для каждого Идентификатор Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		Строка = Товары.НайтиПоИдентификатору(Идентификатор);
		Строка.Отметка = Установить;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция АдресТовары()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.НомерСтрокиВДокументе КАК НомерСтрокиВДокументе,
		|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.КЗаказу КАК КЗаказу,
		|	Товары.Склад КАК Склад,
		|	Товары.Подразделение КАК Подразделение,
		|	Товары.ДатаОтгрузки КАК ДатаОтгрузки
		|ПОМЕСТИТЬ Товары
		|ИЗ
		|	&Товары КАК Товары
		|ГДЕ
		|	Товары.КЗаказу > 0
		|ИНДЕКСИРОВАТЬ ПО
		|   Номенклатура
		|;
		|
		|///////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.НомерСтрокиВДокументе КАК НомерСтрокиВДокументе,
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
		|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Упаковка КАК Упаковка,
		|	Товары.КЗаказу * ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Количество,
		|	Товары.КЗаказу КАК КоличествоУпаковок,
		|	Товары.Склад КАК Склад,
		|	Товары.Подразделение КАК Подразделение,
		|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВЫБОР КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
		|				Товары.Подразделение
		|			ИНАЧЕ
		|				Товары.Склад
		|		КОНЕЦ КАК Получатель,
		|	ВЫБОР КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|		КОНЕЦ КАК СписатьНаРасходы
		|ИЗ
		|	Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК ВсеУпаковки
		|		ПО ВсеУпаковки.Ссылка = Товары.Упаковка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
		|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
		|		ПО СтавкиНДСНоменклатуры.Номенклатура = Товары.Номенклатура 
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
		|		ПО ИСТИНА
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиВДокументе
		|;
		|
		|////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА МИНИМУМ(Товары.Склад) = МАКСИМУМ(Товары.Склад)
		|			ТОГДА МИНИМУМ(Товары.Склад)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК ОдинСклад
		|ИЗ
		|	Товары КАК Товары
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(Товары.Склад) = ТИП(Справочник.Склады) И Товары.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ВсеУпаковки.Ссылка",
		"Товары.Номенклатура"));
		
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Ссылка, "Дата, Организация");
	Запрос.УстановитьПараметр("Товары", Товары.Выгрузить(Новый Структура("Отметка", Истина)));
	Запрос.УстановитьПараметр("ДокументСсылка", Параметры.Ссылка);
	Запрос.УстановитьПараметр("Период", ЗначенияРеквизитов.Дата);
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(ЗначенияРеквизитов.Организация));
	
	Результаты = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = Результаты[Результаты.ВГраница() - 1].Выгрузить();
	АдресТовары = ПоместитьВоВременноеХранилище(ТаблицаТоваров);
	Выборка = Результаты[Результаты.ВГраница()].Выбрать();
	ОдинСклад = Справочники.Склады.ПустаяСсылка();
	Если Выборка.Следующий() Тогда
		ОдинСклад = Выборка.ОдинСклад;
	КонецЕсли;
	
	Возврат Новый Структура("АдресТовары,ОдинСклад", АдресТовары, ОдинСклад);
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура();
	
	ВариантыОбеспечения = ВариантыОбеспечения();
	
	Настройки.Вставить("ВариантыОбеспечения", ВариантыОбеспечения);
	Настройки.Вставить("ВсеИзДокументаНеОбеспечено", ВсеИзДокументаНеОбеспечено);
	
	КлючНастройки = Параметры.ИмяМенеджераДокумента + ТипЗнч(Параметры.Ссылка);
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбщаяФорма.СозданиеНаОснованииУточнениеЗаказываемогоКоличества", КлючНастройки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ОбщаяФорма.СозданиеНаОснованииУточнениеЗаказываемогоКоличества",
		КлючНастройки,
		Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	КлючНастройки = Параметры.ИмяМенеджераДокумента + ТипЗнч(Параметры.Ссылка);
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбщаяФорма.СозданиеНаОснованииУточнениеЗаказываемогоКоличества",
		КлючНастройки);
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ВсеИзДокументаНеОбеспечено = ЗначениеНастроек.ВсеИзДокументаНеОбеспечено;
		Для Каждого Элемент Из ДействияСписок Цикл
			Элемент.Пометка = Ложь;
		КонецЦикла;
		Для Каждого Элемент Из ЗначениеНастроек.ВариантыОбеспечения Цикл
			ДействияСписок.НайтиПоЗначению(Элемент).Пометка = Истина;
		КонецЦикла;
		Все = Истина;
		Представления = Новый Массив();
		Для Каждого Элемент Из ДействияСписок Цикл
			Все = Все И Элемент.Пометка;
			Если Элемент.Пометка Тогда
				Представления.Добавить(Элемент.Представление);
			КонецЕсли;
		КонецЦикла;
		ДействияСтрока = ?(Все, НСтр("ru = 'Все'"), СтрСоединить(Представления, ", "));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВариантыОбеспечения()
	
	ВариантыОбеспечения = Новый Массив();
	Для Каждого Элемент Из ДействияСписок Цикл
		Если Элемент.Пометка Тогда
			ВариантыОбеспечения.Добавить(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат ВариантыОбеспечения;
	
КонецФункции

#КонецОбласти
