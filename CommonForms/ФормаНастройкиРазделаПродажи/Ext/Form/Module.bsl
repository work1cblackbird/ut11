
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Значения реквизитов формы
	СоставНабораКонстантФормы        = ОбщегоНазначенияУТ.ПолучитьСтруктуруНабораКонстант(НаборКонстант);
	ВнешниеРодительскиеКонстанты     = НастройкиСистемыПовтИсп.ПолучитьСтруктуруРодительскихКонстант(СоставНабораКонстантФормы);
	
	РежимРаботы = Новый Структура;

	ИспользоватьСоглашенияСКлиентами = НаборКонстант.ИспользоватьСоглашенияСКлиентами;
	РежимИсполненияЗаказов = Число(НаборКонстант.ИспользоватьРасширенныеВозможностиЗаказаКлиента)
	                       + Число(НаборКонстант.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента);
	
	ВнешниеРодительскиеКонстанты.Вставить("ИспользоватьВерсионированиеОбъектов");
	
	РежимРаботы.Вставить("СоставНабораКонстантФормы",    Новый ФиксированнаяСтруктура(СоставНабораКонстантФормы));
	РежимРаботы.Вставить("ВнешниеРодительскиеКонстанты", Новый ФиксированнаяСтруктура(ВнешниеРодительскиеКонстанты));
	РежимРаботы.Вставить("БазоваяВерсия", 				 ПолучитьФункциональнуюОпцию("БазоваяВерсия"));
	
	РежимРаботы = Новый ФиксированнаяСтруктура(РежимРаботы);
	
	// Обновление состояния элементов
	УстановитьДоступность();
	
	ЗначенияПоУмолчанию = Новый Структура;
	ЗначенияПоУмолчанию.Вставить(Метаданные.Константы.ОперацияПриЗакрытииКассовойСмены.Имя
								, ПредопределенноеЗначение("Перечисление.ОперацииПриЗакрытииКассовойСмены.Нет"));
	
	НастройкиСистемыЛокализация.ПриСозданииНаСервере_ПродажиБазовая(ЭтотОбъект);
	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтотОбъект);
	
	ГруппаДоступаПартнераПриАвтоматическомСозданииУстановитьВидимость();
	
	КомментарийИспользованияДоговоровПриКомиссионнойПродаже = СтрШаблон(НСтр("ru='— включена опция ""Комиссионные продажи %1""'"), 
			КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии25());
	
	Элементы.ПредупреждениеИспользоватьДоговорыСКлиентамиКомиссионныеПродажи.Заголовок = КомментарийИспользованияДоговоровПриКомиссионнойПродаже;
	
	КомментарийКомиссии = СтрШаблон(
			НСтр("ru='Возможность осуществления комиссионных продаж %1 доступна при использовании соглашений с клиентами.'"), 
			КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии20());
	Элементы.КомментарийИспользоватьКомиссиюПриПродажах.Заголовок = КомментарийКомиссии;
	
	КомментарийКомиссии = СтрШаблон(
			НСтр("ru='Возможность осуществления комиссионных продаж %1 доступна при использовании договоров с клиентами.'"), 
			КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии25());
	Элементы.КомментарийИспользоватьКомиссиюПриПродажаБезДоговора.Заголовок = КомментарийКомиссии;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//	ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//	Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//	Источник   - Строка - имя измененной константы, "вызвавшей" оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат; // такие событие не обрабатываются
	КонецЕсли;
	
	// Если это изменена константа, расположенная в другой форме и влияющая на значения констант этой формы,
	// то прочитаем значения констант и обновим элементы этой формы.
	Если РежимРаботы.ВнешниеРодительскиеКонстанты.Свойство(Источник)
	 ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
	 		И ОбщегоНазначенияУТКлиентСервер.ПолучитьОбщиеКлючиСтруктур(
	 			Параметр, РежимРаботы.ВнешниеРодительскиеКонстанты).Количество() > 0) Тогда
		
		ЭтаФорма.Прочитать();
		УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьПодключаемоеОборудование(Команда)
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ОткрытьФорму("Справочник.ПодключаемоеОборудование.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОфлайнОборудование(Команда)
	
	МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();
	
	ОткрытьФорму("Справочник.ОфлайнОборудование.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПравилаОбменаСПодключаемымОборудованием(Команда)
	ОткрытьФорму("Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура АвтоПостановкаКлиентовНаМониторингСПАРКПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьШаблоныМагнитныхКарт(Команда)
	ОткрытьФорму("Справочник.ШаблоныМагнитныхКарт.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиРМК(Команда)
	ОткрытьФорму("Справочник.НастройкиРМК.ФормаСписка",,ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущиеНастройкиРМК(Команда)
	
	ТекущиеНастройкиРМК = ТекущиеНастройкиРМК();
	Если ЗначениеЗаполнено(ТекущиеНастройкиРМК) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеНастройкиРМК);
	Иначе
		ОткрытьФорму("Справочник.НастройкиРМК.ФормаОбъекта",,ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиСоглашений(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеИспользованияСоглашений", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ПараметрыФормы = Новый Структура("ИспользованиеСоглашений", НаборКонстант.ИспользованиеСоглашенийСКлиентами);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиИспользованияСоглашений", ПараметрыФормы, ЭтаФорма, , , ,ОписаниеОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗаказовКлиентов(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеИспользованияЗаказов", ЭтотОбъект);
	Режим = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ПараметрыФормы = Новый Структура("РежимИсполненияЗаказов", РежимИсполненияЗаказов);
	
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиИспользованияЗаказов", ПараметрыФормы, ЭтаФорма, , , ,ОписаниеОповещения, Режим);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПараметрыПодключенияЕГАИС(Команда)
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕГАИС.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтправкуЭлектронныхЧековПоРасписанию(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРасписаниеОтправкиЭлектронныхЧеков", ЭтотОбъект);
	
	ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеОтправкиЭлектронныхЧеков);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьПодключаемоеОборудованиеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменСПодключаемымОборудованиемOfflineПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	Оповестить("ИзмененыДоступныеТипыПодключаемогоОборудования", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаказыКлиентовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКомиссиюПриПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаВозвратТоваровОтКлиентовПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРучныеСкидкиВПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическиеСкидкиВПродажахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКартыЛояльностиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДоговорыСКлиентамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРозничныеПродажиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	СоздатьЭлементыСправочниковДляИспользованияРозничныхПродаж();
	ОбновитьДоступКПодключаемомуОборудованию();
	
	Оповестить("Запись_НаборКонстант", Новый Структура, "ИспользоватьРозничныеПродажи");
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриЗакрытииКассовойСменыПриИзменении(Элемент)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОперацияПриЗакрытииКассовойСменыПриИзмененииЗавершение", ЭтотОбъект);
	Если Не РозничныеПродажиКлиент.ЗапроситьПодтверждениеИзмененияОперацииПриЗакрытииКассовойСмены(ЭтотОбъект, ОповещениеОЗавершении) Тогда
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриЗакрытииКассовойСменыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриЗакрытииКассовойСменыНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	ОбщегоНазначенияУТКлиентСервер.СохранитьЗначенияДоИзменения(ЭтотОбъект, Элементы.ОперацияПриЗакрытииКассовойСмены.Имя);
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииПриЗакрытииКассовойСмены.АрхивацияЧековККМ"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ОперацииПриЗакрытииКассовойСмены.УдалениеЧековККМ"));
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейХраненияОтложенныхЧековПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВидовЦенПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЦен(Команда)
	
	ОткрытьФорму("Справочник.ВидыЦен.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВидыЦенПрайсЛист(Команда)
	
	ПоказатьЗначение(,ВидЦеныПрайсЛист());
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСоглашенияСКлиентамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПримененияПриказа164ПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРегистрацииРозничныхПродажВЕГАИСПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРегистрацииРозничныхПродажВЕГАИСВСельскойМестностиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВестиСведенияДляДекларацийПоАлкогольнойПродукцииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИСПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРегистрацииЗакупокПоЕГАИСПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиСоздаватьПартнеровПриОтправкеЭлектронногоЧекаПокупателюПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	ГруппаДоступаПартнераПриАвтоматическомСозданииУстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДоступаПартнераПриАвтоматическомСозданииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьКонтактнуюИнформациюПартнеровПриОтправкеЭлектронныхЧековПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НеПечататьФискальныйЧекПриОтправкеЭлектронногоЧекаПокупателюПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаЭлектронныхЧековПослеПробитияЧекаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЭлектронныеЧекиПоSMSЧерезОФДПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьЭлектронныеЧекиПоEmailЧерезОФДПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РежимВыбораКомиссионныхПродажПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБонусныеПрограммыПриИзменении(Элемент)
		Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПечататьБумажныйЧекПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПечататьОтдельныйСлипЧекЭквайринговойОперацииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПечататьОтдельныйСлипЧекЕГАИСПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	НастройкиСистемыКлиентЛокализация.ПриИзмененииРеквизита_Продажи(Элемент, ЭтотОбъект);
	
	ЭлементИмя = Элемент.Имя;
	КонстантаИмя = ПриИзмененииРеквизитаСервер(ЭлементИмя);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеИспользованияЗаказов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РежимИсполненияЗаказов = Результат;
	
	СохранитьЗначениеРеквизита("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	#Если НЕ ВебКлиент Тогда
	ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
	ОбновитьИнтерфейс = Истина;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеИспользованияСоглашений(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборКонстант.ИспользованиеСоглашенийСКлиентами = Результат;
	СохранитьЗначениеРеквизита("ИспользованиеСоглашенийСКлиентами");
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	#Если НЕ ВебКлиент Тогда
	ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
	ОбновитьИнтерфейс = Истина;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриЗакрытииКассовойСменыПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Подключаемый_ПриИзмененииРеквизита(Элементы.ОперацияПриЗакрытииКассовойСмены);
	Иначе
		НаборКонстант.ОперацияПриЗакрытииКассовойСмены = ОбщегоНазначенияУТКлиентСервер.ПолучитьЗначениеДоИзменения(ЭтотОбъект, Элементы.ОперацияПриЗакрытииКассовойСмены.Имя);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВызовСервера

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

#КонецОбласти

#Область Сервер

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьПодключаемоеОборудование" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьПодключаемоеОборудование;
		
		Элементы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Доступность = ЗначениеКонстанты И Константы.ИспользоватьРозничныеПродажи.Получить();
		Элементы.ОткрытьПодключаемоеОборудование.Доступность 					= ЗначениеКонстанты;
		Элементы.ОткрытьШаблоныМагнитныхКарт.Доступность 						= ЗначениеКонстанты;
		Элементы.ОткрытьОфлайнОборудование.Доступность 							= НаборКонстант.ИспользоватьОбменСПодключаемымОборудованиемOffline;
		Элементы.ОткрытьПравилаОбменаСПодключаемымОборудованием.Доступность 	= НаборКонстант.ИспользоватьОбменСПодключаемымОборудованиемOffline;
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьОбменСПодключаемымОборудованиемOffline" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьПравилаОбменаСПодключаемымОборудованием.Доступность = НаборКонстант.ИспользоватьОбменСПодключаемымОборудованиемOffline;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДоговорыСКлиентами" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьДоговорыСКлиентами;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьДоговорыСКлиентами, ЗначениеКонстанты);
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ИспользоватьСоглашенияСКлиентами" Или РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьСоглашенияСКлиентами;
		ИспользоватьКомиссию20 = Константы.ИспользуетсяКомиссионнаяПродажа20.Получить();
		
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить("ОткрытьНастройкиСоглашений");
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", ЗначениеКонстанты);
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(Элементы.ИспользоватьСоглашенияСКлиентами, ЗначениеКонстанты);
		
		ИспользоватьКомиссиюПриПродажах = НаборКонстант.ИспользоватьКомиссиюПриПродажах;
		
		Элементы.ГруппаКомментарийИспользоватьКомиссиюПриПродажах.Видимость = Не ЗначениеКонстанты
			И НЕ НаборКонстант.ТолькоКомиссионныеПродажи25;
		Элементы.ИспользоватьКомиссиюПриПродажах.Доступность = НаборКонстант.ИспользоватьДоговорыСКлиентами;
		Элементы.ГруппаВариантаКомиссионныхПродаж.Видимость = ИспользоватьКомиссиюПриПродажах
			И ЗначениеКонстанты И НЕ НаборКонстант.ТолькоКомиссионныеПродажи25 И ЗначениеКонстанты И ИспользоватьКомиссию20;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьЗаказыКлиентов" Или РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьЗаказыКлиентов;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ОткрытьНастройкиЗаказовКлиентов", "Доступность", ЗначениеКонстанты);
		
		МожноИспользоватьКомиссионныеПродажи = ?(НаборКонстант.ТолькоКомиссионныеПродажи25,
			НаборКонстант.ИспользоватьДоговорыСКлиентами,
			Истина);
			
		Элементы.ГруппаКомментарийИспользоватьКомиссиюПриПродажаБезДоговора.Видимость = НЕ МожноИспользоватьКомиссионныеПродажи;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах" Или РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьАвтоматическиеСкидкиВПродажах;
		
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, "ИспользоватьКартыЛояльности", "Доступность", ЗначениеКонстанты);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьНесколькоВидовЦен" Или РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьНесколькоВидовЦен;
		
		Элементы.ОткрытьВидыЦен.Видимость   	  = ЗначениеКонстанты;
		Элементы.ОткрытьВидЦенПрайсЛист.Видимость = Не ЗначениеКонстанты;
	КонецЕсли;
		
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьБонусныеПрограммыЛояльности;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ИспользоватьБонусныеПрограммы, ЗначениеКонстанты);
			
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьРозничныеПродажи" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьОплатуПлатежнымиКартами"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ВестиСведенияДляДекларацийПоАлкогольнойПродукции"
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ОперацияПриЗакрытииКассовойСмены"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ИспользоватьРозничныеПродажи;
		
		Элементы.ОперацияПриЗакрытииКассовойСмены.Доступность      = ЗначениеКонстанты;
		Элементы.КоличествоДнейХраненияОтложенныхЧеков.Доступность = ЗначениеКонстанты;
		Элементы.КоличествоДнейХраненияЗаархивированныхЧеков.Доступность = ЗначениеКонстанты 
			И НаборКонстант.ОперацияПриЗакрытииКассовойСмены = Перечисления.ОперацииПриЗакрытииКассовойСмены.АрхивацияЧековККМ;			
		Элементы.ПечататьБумажныйЧек.Доступность				   = ЗначениеКонстанты;
		Элементы.ПечататьОтдельныйСлипЧекЭквайринговойОперации.Доступность = (ЗначениеКонстанты И НаборКонстант.ИспользоватьОплатуПлатежнымиКартами);
		Элементы.ПечататьОтдельныйСлипЧекЕГАИС.Доступность = ЗначениеКонстанты И НаборКонстант.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ОперацияПриЗакрытииКассовойСмены" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = НаборКонстант.ОперацияПриЗакрытииКассовойСмены;
		ИспользоватьРозничныеПродажи = НаборКонстант.ИспользоватьРозничныеПродажи;
		Элементы.КоличествоДнейХраненияЗаархивированныхЧеков.Доступность = ЗначениеКонстанты = Перечисления.ОперацииПриЗакрытииКассовойСмены.АрхивацияЧековККМ И ИспользоватьРозничныеПродажи;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ВестиСведенияДляДекларацийПоАлкогольнойПродукции" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ЗначениеКонстанты = НаборКонстант.ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
		
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции, ЗначениеКонстанты);
		
		Элементы.ДатаНачалаПримененияПриказа164.Доступность                            = ЗначениеКонстанты;
		Элементы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИС.Доступность                = ЗначениеКонстанты;
		Элементы.РазрешатьПродажуАлкогольнойПродукцииБезСопоставленияЕГАИС.Доступность = ЗначениеКонстанты;
		Элементы.ДатаНачалаРегистрацииЗакупокПоЕГАИС.Доступность                       = ЗначениеКонстанты;
		Элементы.ОткрытьПараметрыПодключенияЕГАИС.Доступность                          = ЗначениеКонстанты И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.НастройкиОбменаЕГАИС);
		Элементы.ПечататьОтдельныйСлипЧекЕГАИС.Доступность = ЗначениеКонстанты И НаборКонстант.ИспользоватьРозничныеПродажи;
				
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДоговорыСКлиентами" ИЛИ РеквизитПутьКДанным = "" Тогда
		ЗначениеКонстанты = Константы.ИспользоватьДоговорыСКлиентами.Получить();
		Элементы.ГруппаАвтоПостановкаКлиентовНаМониторингСПАРК.Доступность = ЗначениеКонстанты;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "НаборКонстант.ИспользоватьКомиссиюПриПродажах" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьДоговорыСКлиентами" 
		ИЛИ РеквизитПутьКДанным = "НаборКонстант.ИспользоватьСоглашенияСКлиентами" 
		ИЛИ РеквизитПутьКДанным = "" Тогда
		
		ИспользоватьДоговорыСКлиентами = НаборКонстант.ИспользоватьДоговорыСКлиентами;
		ИспользоватьСоглашения = НаборКонстант.ИспользоватьСоглашенияСКлиентами;
		ИспользоватьКомиссиюПриПродажах = НаборКонстант.ИспользоватьКомиссиюПриПродажах;
		ИспользоватьКомиссию20 = Константы.ИспользуетсяКомиссионнаяПродажа20.Получить();
		
		Элементы.ИспользоватьКомиссиюПриПродажах.Доступность = ИспользоватьДоговорыСКлиентами;
			
		МожноВыбиратьВариантКомиссионныхПродаж = ИспользоватьКомиссиюПриПродажах
			И НЕ НаборКонстант.ТолькоКомиссионныеПродажи25
			И ИспользоватьСоглашения
			И ИспользоватьДоговорыСКлиентами
			И ИспользоватьКомиссию20;
			
		Элементы.ГруппаВариантаКомиссионныхПродаж.Видимость = МожноВыбиратьВариантКомиссионныхПродаж;
			
		Элементы.ГруппаКомментарийИспользоватьКомиссиюПриПродажаБезДоговора.Видимость = НЕ НаборКонстант.ИспользоватьДоговорыСКлиентами;
		
		Элементы.РежимВыбораКомиссионныхПродаж.СписокВыбора.Очистить();
		Элементы.РежимВыбораКомиссионныхПродаж.СписокВыбора.Добавить(Ложь, КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии25());
		Элементы.РежимВыбораКомиссионныхПродаж.СписокВыбора.Добавить(Истина, 
					КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии20() + "/" + КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии25());
		
		ИспользуетсяКомиссионнаяПродажаПоДоговорам = ИспользоватьКомиссиюПриПродажах И ИспользоватьДоговорыСКлиентами;
		ДоступноРедактированиеДоговорыСКлиентами = Не ИспользуетсяКомиссионнаяПродажаПоДоговорам;
		Элементы.ИспользоватьДоговорыСКлиентами.Доступность = ДоступноРедактированиеДоговорыСКлиентами;
		Элементы.ГруппаИспользоватьДоговорыСКлиентамиПредупреждение.Видимость = ИспользоватьДоговорыСКлиентами
																				И НЕ ДоступноРедактированиеДоговорыСКлиентами;
		Элементы.ПредупреждениеИспользоватьДоговорыСКлиентамиКомиссионныеПродажи.Видимость = ИспользуетсяКомиссионнаяПродажаПоДоговорам;
		
	КонецЕсли;
	
	ОбменДаннымиУТУП.УстановитьДоступностьНастроекУзлаИнформационнойБазы(ЭтаФорма);
	
	ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным);
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.РассылкаЭлектронныхЧеков.Видимость = Ложь;
	Иначе
		УстановитьНастройкиЗаданий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтображениеПредупрежденияПриРедактировании(РеквизитПутьКДанным)
	
	СтруктураКонстант = Новый Структура(
		"ИспользоватьДоговорыСКлиентами,
		|ИспользоватьЗаказыКлиентов,
		|ИспользоватьКомиссиюПриПродажах");
	
	Для Каждого КлючИЗначение Из СтруктураКонстант Цикл
		ОбщегоНазначенияУТКлиентСервер.ОтображениеПредупрежденияПриРедактировании(
			Элементы[КлючИЗначение.Ключ],
			НаборКонстант[КлючИЗначение.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	КонстантаИмя = "";
	Если СтрНачинаетсяС(НРег(РеквизитПутьКДанным), НРег("НаборКонстант.")) Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		ЧастиИмени = СтрРазделить(РеквизитПутьКДанным, ".");
		КонстантаИмя = ЧастиИмени[1];
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если РеквизитПутьКДанным = "ВключитьВерсионированиеУстановкиЦенНоменклатуры" Тогда
			НаборКонстант.ИспользоватьВерсионированиеОбъектов = Истина;
			КонстантаИмя = "ИспользоватьВерсионированиеОбъектов";
		ИначеЕсли РеквизитПутьКДанным = "ИспользоватьСоглашенияСКлиентами" Тогда
			НаборКонстант.ИспользованиеСоглашенийСКлиентами = ?(ИспользоватьСоглашенияСКлиентами,
				Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения,
				Перечисления.ИспользованиеСоглашенийСКлиентами.НеИспользовать);
			КонстантаИмя = "ИспользованиеСоглашенийСКлиентами";
		ИначеЕсли РеквизитПутьКДанным = "ИспользованиеСоглашенийСКлиентами" Тогда
			КонстантаИмя = "ИспользованиеСоглашенийСКлиентами";
		ИначеЕсли РеквизитПутьКДанным = "ИспользоватьРасширенныеВозможностиЗаказаКлиента" Тогда
			
			Если РежимИсполненияЗаказов = 1 Тогда
				Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Установить(Истина);
				Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.Установить(Ложь);
				НаборКонстант.ИспользоватьРасширенныеВозможностиЗаказаКлиента = Истина;
				НаборКонстант.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = Ложь;
			ИначеЕсли РежимИсполненияЗаказов = 2 Тогда
				Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Установить(Истина);
				Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.Установить(Истина);
				НаборКонстант.ИспользоватьРасширенныеВозможностиЗаказаКлиента = Истина;
				НаборКонстант.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = Истина;
			Иначе
				Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Установить(Ложь);
				Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.Установить(Ложь);
				НаборКонстант.ИспользоватьРасширенныеВозможностиЗаказаКлиента = Ложь;
				НаборКонстант.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента = Ложь;
			КонецЕсли;
			
			КонстантаИмя = "ИспользоватьРасширенныеВозможностиЗаказаКлиента";
		КонецЕсли;
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если НастройкиСистемыПовтИсп.ЕстьПодчиненныеКонстанты(КонстантаИмя, КонстантаЗначение) Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонстантаИмя = "ИспользоватьРозничныеПродажи"
		И Не КонстантаЗначение Тогда
		ИзменитьИспользованиеЗадания("РассылкаЭлектронныхЧеков", Ложь);
	КонецЕсли;
	
	Если КонстантаИмя = "ОтправкаЭлектронныхЧековПослеПробитияЧека"
		И НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ИзменитьИспользованиеЗадания("РассылкаЭлектронныхЧеков", Не НаборКонстант.ОтправкаЭлектронныхЧековПослеПробитияЧека);
	КонецЕсли;
	
	НастройкиСистемыЛокализация.СохранитьЗначениеРеквизита_Продажи(КонстантаИмя, КонстантаЗначение, ЭтотОбъект);
	
	Возврат КонстантаИмя
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущиеНастройкиРМК()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиРМК.Ссылка
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто";

	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
		
	Иначе
		
		Возврат Справочники.НастройкиРМК.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ГруппаДоступаПартнераПриАвтоматическомСозданииУстановитьВидимость()
	Элементы.ГруппаДоступаПартнераПриАвтоматическомСоздании.Видимость = Константы.АвтоматическиСоздаватьПартнеровПриОтправкеЭлектронногоЧекаПокупателю.Получить();
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ВидЦеныПрайсЛист()
	
	Возврат Ценообразование.ВидЦеныПрайсЛист();
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыСправочниковДляИспользованияРозничныхПродаж()
	
	Если НЕ НаборКонстант.ИспользоватьРозничныеПродажи Тогда
		Возврат;
	КонецЕсли;
		
	ТекОрганизация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
	Если Не ЗначениеЗаполнено(ТекОрганизация) Тогда
		Возврат;
	КонецЕсли;
		
	ТекАвтономнаяКассаККМ = Справочники.КассыККМ.АвтономнаяКассаККМПоУмолчанию();
	ТекФискальныйРегистратор = Справочники.КассыККМ.КассаККМФискальныйРегистраторПоУмолчанию();
		
	Если ЗначениеЗаполнено(ТекАвтономнаяКассаККМ) И ЗначениеЗаполнено(ТекФискальныйРегистратор) Тогда
		Возврат;
	КонецЕсли;
		
	ВидЦены = Ценообразование.ВидЦеныПрайсЛист();
	
	ТекОптовоРозничныйСклад = Справочники.Склады.РозничныйСкладПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(ТекОптовоРозничныйСклад) Тогда
		ОптовоРозничныйСклад = Справочники.Склады.СоздатьЭлемент();
		ОптовоРозничныйСклад.Наименование = НСтр("ru='Розничный склад'");
		ОптовоРозничныйСклад.ТипСклада = Перечисления.ТипыСкладов.РозничныйМагазин;
		ОптовоРозничныйСклад.РозничныйВидЦены = ВидЦены;
		ОптовоРозничныйСклад.КонтролироватьСвободныеОстатки = Истина;
		ОптовоРозничныйСклад.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
		ОптовоРозничныйСклад.Записать();
	Иначе
		ОптовоРозничныйСклад = ТекОптовоРозничныйСклад;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекАвтономнаяКассаККМ) Тогда
		КассаККМ = Справочники.КассыККМ.СоздатьЭлемент();
		КассаККМ.Владелец = ТекОрганизация;
		КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.АвтономнаяККМ;
		КассаККМ.Склад = ОптовоРозничныйСклад.Ссылка;
		КассаККМ.Наименование = Строка(КассаККМ.ТипКассы) + "(" + КассаККМ.Склад + ")";
		КассаККМ.ВалютаДенежныхСредств = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
		КассаККМ.Записать();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекФискальныйРегистратор) Тогда
		КассаККМ = Справочники.КассыККМ.СоздатьЭлемент();
		КассаККМ.Владелец = ТекОрганизация;
		КассаККМ.ТипКассы = Перечисления.ТипыКассККМ.ФискальныйРегистратор;
		КассаККМ.Склад = ОптовоРозничныйСклад.Ссылка;
		КассаККМ.Наименование = Строка(КассаККМ.ТипКассы) + "(" + КассаККМ.Склад + ")";
		КассаККМ.ВалютаДенежныхСредств = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
		КассаККМ.Записать();
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступКПодключаемомуОборудованию()
	
	Если НаборКонстант.ИспользоватьРозничныеПродажи Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьОбменСПодключаемымОборудованиемOffline.Установить(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКорректировкиРеализацийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПродажаТоваровОблагаемыхНДСУПокупателяПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

#Область СлужебныеФункцииНастройкиРасписанияРассылкиЭлектронныхЧеков

&НаКлиенте
Процедура ИзменитьРасписаниеОтправкиЭлектронныхЧеков(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеОтправкиЭлектронныхЧеков = РасписаниеЗадания;
	
	ИзменитьРасписаниеЗадания("РассылкаЭлектронныхЧеков", РасписаниеЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно)
	
	РасписаниеАктивно = Ложь;
	
	Если Задание = Неопределено Тогда
		
		ТекстРасписания = НСтр("ru = '<Расписание не задано>'");
		
	Иначе
		
		Если Задание.Использование Тогда
			РасписаниеАктивно = Истина;
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание отправки электронных чеков: %1'"), Строка(Задание.Расписание));
		Иначе
			ТекстРасписания = СтрШаблон(НСтр("ru = 'Расписание отправки электронных чеков (НЕ АКТИВНО): %1'"), Строка(Задание.Расписание));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", "РассылкаЭлектронныхЧеков");
	ЗаданиеРассылкаЭлектронныхЧеков = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	РасписаниеОтправкиЭлектронныхЧеков = ЗаданиеРассылкаЭлектронныхЧеков.Расписание;
	
	Элементы.РассылкаЭлектронныхЧеков.Доступность = ЗаданиеРассылкаЭлектронныхЧеков.Использование;
	УстановитьТекстНадписиРегламентнойНастройки(ЗаданиеРассылкаЭлектронныхЧеков, Элементы.РассылкаЭлектронныхЧеков);
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", РасписаниеРегламентногоЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Метаданные", ИмяЗадания);
	РегЗадание = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыОтбора)[0];
	
	Элемент = Элементы[ИмяЗадания];
	УстановитьТекстНадписиРегламентнойНастройки(РегЗадание, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ОписаниеОповещения, РасписаниеРегламентногоЗадания)
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстНадписиРегламентнойНастройки(Задание, Элемент)
	
	Перем ТекстРасписания, РасписаниеАктивно;
	
	ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстРасписания, РасписаниеАктивно);
	Элемент.Заголовок = ТекстРасписания;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
