///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если РаботаВМоделиСервиса.РазделениеВключено() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыЭлементыФормы();
	ОбработатьПрерваннуюПроцедуруЗагрузки();
	УстановитьМонопольнуюБлокировкуИПродолжитьЗагрузку();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если УстановленаМонопольнаяБлокировка И ЗначениеЗаполнено(ХешСуммаФайла) Тогда
		
		ЗаголовокДиалога = НСтр("ru = 'Для продолжения необходимо повторно загрузить файл'");
		
		Если ЭтоВебКлиент Тогда
			ВыбратьФайлДанныхВВебКлиенте(ЗаголовокДиалога);
		Иначе
			ВыбратьФайлДанных(ЗаголовокДиалога);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Или Не (УстановленаМонопольнаяБлокировка Или ЗначениеЗаполнено(ИдентификаторЗадания)) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект),
			НСтр("ru = 'Прервать загрузку данных?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
			
	Иначе
		
		ОтменитьЗагрузкуИЗакрытьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если ПерезапуститьПрограммуПриЗакрытии Тогда
		ПерезапуститьПрограмму();
	Иначе
		ВыгрузкаЗагрузкаДанныхКлиент.ПоказатьДиалогПрерваннойЗагрузкиПриНеобходимости();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФайлДанныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтоВебКлиент Тогда
		ВыбратьФайлДанныхВВебКлиенте();
	Иначе
		ВыбратьФайлДанных();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПродолжитьЗагрузку(Команда)
	
	УстановитьМонопольнуюБлокировкуИПродолжитьЗагрузку();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокСеансов(Команда)
	
	ЗаполнитьСписокПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьСеанс(Команда)
	
	КоличествоВыделенныхСтрок = Элементы.СписокПользователей.ВыделенныеСтроки.Количество();
	
	Если КоличествоВыделенныхСтрок = 0 Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Не выбраны пользователи для завершения сеансов.'"));
		
		Возврат;
		
	ИначеЕсли КоличествоВыделенныхСтрок = 1
		И Элементы.СписокПользователей.ТекущиеДанные.Сеанс = НомерСеансаИнформационнойБазы Тогда
		
		ПоказатьПредупреждение(
			,
			НСтр("ru = 'Невозможно завершить текущий сеанс. Для выхода из программы можно закрыть главное окно программы.'"));
		
		Возврат;
		
	КонецЕсли;
	
	НомераСеансов = Новый Массив();
	
	Для Каждого ИдентификаторСтроки Из Элементы.СписокПользователей.ВыделенныеСтроки Цикл
		
		НомерСеанса = СписокПользователей.НайтиПоИдентификатору(ИдентификаторСтроки).Сеанс;
		
		Если НомерСеанса <> НомерСеансаИнформационнойБазы Тогда
			НомераСеансов.Добавить(НомерСеанса);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбщегоНазначенияКлиент.РазделениеВключено()
	   И ОбщегоНазначенияКлиент.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		СтандартнаяОбработка = Истина;
		ДополнительныеПараметры = Новый Структура("НомераСеансов", НомераСеансов);
		Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияСеанса", ЭтотОбъект, ДополнительныеПараметры);
		
		ИнтеграцияПодсистемБСПКлиент.ПриЗавершенииСеансов(
			ЭтотОбъект,
			НомераСеансов,
			СтандартнаяОбработка,
			Оповещение);
		
	ИначеЕсли ЗапрашиватьПараметрыАдминистрированияИБ Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьСеансПродолжение", ЭтотОбъект, НомераСеансов);
		ЗаголовокФормы = НСтр("ru = 'Завершение сеанса'");
		ПоясняющаяНадпись = НСтр("ru = 'Для завершения сеанса введите параметры
			|администрирования кластера серверов'");
		
		СоединенияИБКлиент.ПоказатьПараметрыАдминистрирования(
			ОписаниеОповещения,
			Ложь,
			Истина,
			ПараметрыАдминистрирования,
			ЗаголовокФормы,
			ПоясняющаяНадпись);
		
	Иначе
		
		ЗавершитьСеансПродолжение(ПараметрыАдминистрирования, НомераСеансов);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗавершениеСеансов

&НаКлиенте
Процедура ЗавершитьСеансПродолжение(Результат, МассивСеансов) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАдминистрирования = Результат;
	
	СтруктураСеанса = Новый Структура();
	СтруктураСеанса.Вставить("Свойство", "Номер");
	СтруктураСеанса.Вставить("ВидСравнения", ВидСравнения.ВСписке);
	СтруктураСеанса.Вставить("Значение", МассивСеансов);
	
	Фильтр = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураСеанса);
	
	Попытка
		УдалитьСеансыИнформационнойБазыНаСервере(ПараметрыАдминистрирования, Фильтр)
	Исключение
		ЗапрашиватьПараметрыАдминистрированияИБ = Истина;
		ВызватьИсключение;
	КонецПопытки;
	
	ЗапрашиватьПараметрыАдминистрированияИБ = Ложь;
	
	ПослеЗавершенияСеанса(КодВозвратаДиалога.ОК, Новый Структура("НомераСеансов", МассивСеансов));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияСеанса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.НомераСеансов.Количество() > 1 Тогда
		
		ТекстОповещения = СтрШаблон(
			НСтр("ru = 'Сеансы %1 завершены.'"),
			СтрСоединить(ДополнительныеПараметры.НомераСеансов, ","));
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Завершение сеансов'"), , ТекстОповещения);
		
	Иначе
		
		ТекстОповещения = СтрШаблон(
			НСтр("ru = 'Сеанс %1 завершен.'"),
			ДополнительныеПараметры.НомераСеансов[0]);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Завершение сеанса'"), , ТекстОповещения);
		
	КонецЕсли;
	
	УстановитьМонопольнуюБлокировкуИПродолжитьЗагрузку();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПользователей()
	
	СписокПользователей.Очистить();
	
	Для Каждого СеансИБ Из ПолучитьСеансыИнформационнойБазы() Цикл
		
		СтрокаТаблицы = СписокПользователей.Добавить();
		СтрокаТаблицы.Компьютер = СеансИБ.ИмяКомпьютера;
		СтрокаТаблицы.НачалоРаботы = СеансИБ.НачалоСеанса;
		СтрокаТаблицы.Приложение = ПредставлениеПриложения(СеансИБ.ИмяПриложения);
		СтрокаТаблицы.Сеанс = СеансИБ.НомерСеанса;
		
		Если ТипЗнч(СеансИБ.Пользователь) = Тип("ПользовательИнформационнойБазы")
		   И ЗначениеЗаполнено(СеансИБ.Пользователь.Имя) Тогда
			СтрокаТаблицы.Пользователь = СеансИБ.Пользователь.Имя;
		Иначе
			СтрокаТаблицы.Пользователь = Пользователи.ПолноеИмяНеуказанногоПользователя();
		КонецЕсли;

		Если СеансИБ.НомерСеанса = НомерСеансаИнформационнойБазы Тогда
			СтрокаТаблицы.НомерРисункаПользователя = 0;
		Иначе
			СтрокаТаблицы.НомерРисункаПользователя = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСеансыИнформационнойБазыНаСервере(Знач ПараметрыАдминистрирования, Знач Фильтр)
	
	АдминистрированиеКластера.УдалитьСеансыИнформационнойБазы(ПараметрыАдминистрирования, , Фильтр);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайломДанных

&НаКлиенте
Асинх Процедура ВыбратьФайлДанных(ЗаголовокДиалога = Неопределено)
	
	Если Не ЗначениеЗаполнено(ЗаголовокДиалога) Тогда
		ЗаголовокДиалога = ЗаголовокДиалогаВыбораФайлаДанных();
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = ЗаголовокДиалога;
	Диалог.Фильтр = ФильтрДиалогаВыбораФайлаДанных();
	Диалог.ПолноеИмяФайла = ВыгрузкаЗагрузкаДанныхКлиентСервер.ИмяФайлаВыгрузкиДанных();
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Результат = Ждать Диалог.ВыбратьАсинх();
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлДанных = Результат[0];
	
	ПослеВыбораФайлаДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлДанныхВВебКлиенте(ЗаголовокДиалога = Неопределено)
	
	Если ЗначениеЗаполнено(ИмяФайлаВременногоХранилища) Тогда
		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
		ИмяФайлаВременногоХранилища = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаголовокДиалога) Тогда
		ЗаголовокДиалога = ЗаголовокДиалогаВыбораФайлаДанных();
	КонецЕсли;
	
	ДанныеФайлаВременногоХранилища = ПолучитьФайлВременногоХранилища(УникальныйИдентификатор);
	ИмяФайлаВременногоХранилища = ДанныеФайлаВременногоХранилища.ИмяФайла;

	ПараметрыПередачи = ФайлыБТСКлиент.ПараметрыПомещенияФайла();
	ПараметрыПередачи.ИмяФайлаИлиАдрес = ИмяФайлаВременногоХранилища;
	ПараметрыПередачи.ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ОбработатьПомещениеФайла", ЭтотОбъект);
	ПараметрыПередачи.БлокируемаяФорма = ЭтотОбъект;
	ПараметрыПередачи.ЗаголовокДиалогаВыбора = ЗаголовокДиалога;
	ПараметрыПередачи.ФильтрДиалогаВыбора = ФильтрДиалогаВыбораФайлаДанных();
	ПараметрыПередачи.ИмяФайлаДиалогаВыбора = ВыгрузкаЗагрузкаДанныхКлиентСервер.ИмяФайлаВыгрузкиДанных();
	
	ФайлыБТСКлиент.ПоместитьФайлИнтерактивно(ПараметрыПередачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПомещениеФайла(Результат, ДополнительныеПараметры) Экспорт
	
	РезультатПроверкиПолучен = Ложь;
	
	Если Результат <> Неопределено Тогда
		ФайлДанных = Результат.ИмяФайлаНаКлиенте;
		РезультатПроверки = ПроверитьВозможностьЗагрузкиФайлаДанныхВВебКлиенте(ИмяФайлаВременногоХранилища);
		РезультатПроверкиПолучен = Истина;
	КонецЕсли;
	
	Если Не РезультатПроверкиПолучен Или ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
		УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
		ИмяФайлаВременногоХранилища = "";
	КонецЕсли;
	
	Если РезультатПроверкиПолучен Тогда
		ПослеПроверкиФайлаДанных(РезультатПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеВыбораФайлаДанных()
	
	ДанныеПроверяемыхФайлов = ПолучитьДанныеФайловДляПроверкиЗагрузкиДанных(ФайлДанных);
	
	Если Не ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ТекстОшибки) Тогда
		
		ФайлыДоступныНаСервере = Ждать ПолучитьДоступностьФайловНаСервере(ДанныеПроверяемыхФайлов.СписокФайлов);
		
		Если Не ФайлыДоступныНаСервере Тогда
			ДанныеПроверяемыхФайлов = Ждать ПоместитьПроверяемыеФайлыНаСервер(ДанныеПроверяемыхФайлов);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ТекстОшибки) Тогда
		РезультатПроверки = НовыйРезультатПроверкиФайлаДанных();
		РезультатПроверки.ТекстОшибки = ДанныеПроверяемыхФайлов.ТекстОшибки;
	Иначе
		РезультатПроверки = ПроверитьВозможностьЗагрузкиФайлаДанных(ДанныеПроверяемыхФайлов);
	КонецЕсли;
	
	УдалитьДанныеПроверяемыхФайлов(ДанныеПроверяемыхФайлов);
	ПослеПроверкиФайлаДанных(РезультатПроверки);
	
КонецПроцедуры

// Поместить проверяемые файлы на сервер.
// 
// Параметры:
//  ДанныеПроверяемыхФайлов - см. НовыеДанныеПроверяемыхФайлов
// 
// Возвращаемое значение:
//  см. НовыеДанныеПроверяемыхФайлов
&НаКлиенте
Асинх Функция ПоместитьПроверяемыеФайлыНаСервер(ДанныеПроверяемыхФайлов)
	
	ШаблонОшибки = НСтр("ru = 'Не удалось проверить файл данных: %1'");
	ПередаваемыеФайлы = Новый Массив();
	
	Для Каждого ИмяФайла Из ДанныеПроверяемыхФайлов.СписокФайлов Цикл
		ПередаваемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ИмяФайла));
	КонецЦикла;
	
	РезультатПередачи = Ждать ПоместитьФайлыНаСерверАсинх(, , ПередаваемыеФайлы, УникальныйИдентификатор);
	
	Если РезультатПередачи = Неопределено Тогда
		
		ДанныеПроверяемыхФайлов.ТекстОшибки = СтрШаблон(
			ШаблонОшибки,
			НСтр("ru = 'отменено помещение файлов на сервер.'"));
		
	Иначе
		
		Для Каждого ОписаниеФайла Из РезультатПередачи Цикл
			
			Если ОписаниеФайла.ПомещениеФайлаОтменено Тогда
				
				ДанныеПроверяемыхФайлов.ТекстОшибки = СтрШаблон(
					ШаблонОшибки,
					НСтр("ru = 'отменено помещение файла на сервер.'"));
				
			ИначеЕсли ОписаниеФайла.СсылкаНаФайл.Файл = Неопределено Тогда 
				
				ДанныеПроверяемыхФайлов.ТекстОшибки = СтрШаблон(
					ШаблонОшибки,
					НСтр("ru = 'помещаемый на сервер файл не доступен.'"));
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ТекстОшибки) Тогда
				Прервать;
			КонецЕсли;
			
			НайденоСоответствиеФайла = Ложь;
			
			Для Каждого ЭлементПроверяемыйФайл Из ДанныеПроверяемыхФайлов.ПроверяемыеФайлы Цикл
				
				Если ЭлементПроверяемыйФайл.Значение = ОписаниеФайла.СсылкаНаФайл.Файл.ПолноеИмя Тогда
					
					ДанныеПроверяемыхФайлов.ПроверяемыеФайлы[ЭлементПроверяемыйФайл.Ключ] = ОписаниеФайла.Адрес;
					НайденоСоответствиеФайла = Истина;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НайденоСоответствиеФайла Тогда
				
				ДанныеПроверяемыхФайлов.ТекстОшибки = СтрШаблон(
					ШаблонОшибки,
					НСтр("ru = 'не найдено соответствие файла с клиента на сервере.'"));
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ТекстОшибки) Тогда
			УдалитьДанныеПроверяемыхФайлов(ДанныеПроверяемыхФайлов);
			ДанныеПроверяемыхФайлов.СписокФайлов.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПроверяемыхФайлов;
	
КонецФункции

// После проверки файла данных.
// 
// Параметры:
//  РезультатПроверки - см. НовыйРезультатПроверкиФайлаДанных
&НаКлиенте
Асинх Процедура ПослеПроверкиФайлаДанных(РезультатПроверки)
	
	Элементы.ГруппаИнформацияОбОшибкахФайлаДанных.Видимость = Ложь;
	Элементы.ГруппаОшибкиФайлаДанных.Видимость = Ложь;
	
	Если ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
		
		Элементы.ДекорацияОшибкаФайлаДанных.Заголовок = РезультатПроверки.ТекстОшибки;
		
		Если ЗначениеЗаполнено(РезультатПроверки.ИнформацияОбОшибке) Тогда
			ИнформацияОбОшибкахФайлаДанных = РезультатПроверки.ИнформацияОбОшибке;
			Элементы.ГруппаИнформацияОбОшибкахФайлаДанных.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ГруппаОшибкиФайлаДанных.Видимость = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РезультатПроверки.Предупреждения) Тогда
		ВывестиПредупрежденияФайлаДанных(РезультатПроверки.Предупреждения);
	КонецЕсли;
	
	ПредставлениеСостояния =
		ВыгрузкаЗагрузкаДанныхКлиентСервер.ПредставлениеСостоянияПодготовкиВыгрузкиЗагрузкиОбластиДанных(Истина) 
		+ Символы.ПС 
		+ ВыгрузкаЗагрузкаДанныхКлиентСервер.ПодсказкаДлительнойОперации();
	
	Элементы.СтраницыМастераЗагрузки.ТекущаяСтраница = Элементы.СтраницаОжидание;
	Заголовок = ЗаголовокФормыПоИмениСтраницы(Элементы.СтраницыМастераЗагрузки.ТекущаяСтраница.Имя);
	
	ФайлДанныхДоступенНаСервере = Ждать ПолучитьДоступностьФайловНаСервере(ФайлДанных);
	
	Если Не (ЭтоВебКлиент Или ФайлДанныхДоступенНаСервере) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоместитьФайлДанныхНаСервер", 0.1, Истина);
	Иначе
		ЗапуститьЗагрузкуДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура Подключаемый_ПоместитьФайлДанныхНаСервер()
	
	ФайлДанныхПомещен = Ждать ПоместитьФайлДанныхНаСервер();
	
	Если Не ФайлДанныхПомещен Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьЗагрузкуДанных();
	
КонецПроцедуры

&НаКлиенте
Асинх Функция ПоместитьФайлДанныхНаСервер()
	
	ИнформацияОбОшибке = Неопределено;
	ФайлДанныхПомещен = Ложь;
	
	Попытка
		
		ДанныеФайлаВременногоХранилища = ПолучитьФайлВременногоХранилища(УникальныйИдентификатор, Истина);
		ИмяФайлаВременногоХранилища = ДанныеФайлаВременногоХранилища.ИмяФайла;
		
		ФайлДанныхПомещен = Ждать ФайлыБТСКлиент.ПоместитьФайлНаСервер(
			ФайлДанных, ДанныеФайлаВременногоХранилища.ПолноеИмяФайла);
		
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ФайлДанныхПомещен = Ложь;
		
	КонецПопытки;
	
	Если ФайлДанныхПомещен Тогда
		Возврат Истина;
	КонецЕсли;
	
	УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
	ИмяФайлаВременногоХранилища = "";
	
	ПараметрыУведомления = НовыеПараметрыУведомленияОбОшибкеПредупреждении();
	ПараметрыУведомления.Подсказка = НСтр("ru = 'При запуске загрузки данных произошла ошибка:'");
	ПараметрыУведомления.Рекомендация = НСтр("ru = 'Рекомендуется повторить попытку загрузки'");
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		ПараметрыУведомления.Текст = НСтр("ru = 'Не удалось поместить файл данных на сервер.'");
	Иначе
		
		ПараметрыУведомления.Текст = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПараметрыУведомления.ПолныйТекст = СтрШаблон(
			НСтр("ru = 'При помещении файла данных на сервер произошла ошибка:
				 |%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
	КонецЕсли;
	
	ПоказатьОшибкиПредупреждения(ПараметрыУведомления);
	
	Возврат Ложь;
	
КонецФункции

// Вывести предупреждения файла данных.
// 
// Параметры:
//  Предупреждения - Массив из Строка - Предупреждения
&НаСервере
Процедура ВывестиПредупрежденияФайлаДанных(Предупреждения)
	
	КоличествоПредупреждений = Предупреждения.Количество();
	ТекстыПредупреждений = Новый Массив();
	
	Для НомерПредупреждения = 1 По КоличествоПредупреждений Цикл
		
		ВсегоПредупреждений = ВсегоПредупреждений + 1;
		ТекстПредупреждения = "● " + Предупреждения[НомерПредупреждения - 1];
		ИмяЭлемента = "ДекорацияПредупреждение_" + Формат(ВсегоПредупреждений, "ЧГ=0;");
		
		ЭлементДекорация = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.ГруппаПредупреждения);
		ЭлементДекорация.Вид = ВидДекорацииФормы.Надпись;
		ЭлементДекорация.АвтоМаксимальнаяШирина = Ложь;
		ЭлементДекорация.Заголовок = ТекстПредупреждения;
		
		ТекстыПредупреждений.Добавить(ТекстПредупреждения);
		
	КонецЦикла;
	
	ПараметрыПредметаИсчисления = "предупреждение, предупреждения, предупреждений,, , , , , 0";
	ПрописьЧисла = ЧислоПрописью(ВсегоПредупреждений, , ",,,,,,,,0");
	ПрописьЧислаИПредмета = ЧислоПрописью(ВсегоПредупреждений, , ПараметрыПредметаИсчисления);
	ЗаголовокГруппы = СтрШаблон(
		"%1 %2",
		Формат(ВсегоПредупреждений, "ЧГ=0;"),
		СтрЗаменить(ПрописьЧислаИПредмета, ПрописьЧисла, ""));
	
	Элементы.ГруппаПредупреждения.Заголовок = ЗаголовокГруппы;
	Элементы.ГруппаОжиданиеПредупреждения.Видимость = Истина;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Предупреждение,
		,
		,
		СтрСоединить(ТекстыПредупреждений, Символы.ПС));

КонецПроцедуры

// Проверить возможность загрузки файла данных в веб клиенте.
// 
// Параметры:
//  ИмяВременногоФайла - Строка
// 
// Возвращаемое значение:
//  см. НовыйРезультатПроверкиФайлаДанных
&НаСервереБезКонтекста
Функция ПроверитьВозможностьЗагрузкиФайлаДанныхВВебКлиенте(Знач ИмяВременногоФайла)
	
	ПолноеИмяВременногоФайла = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяВременногоФайла);
	ДанныеПроверяемыхФайлов = ПолучитьДанныеФайловДляПроверкиЗагрузкиДанных(ПолноеИмяВременногоФайла);
	
	Если ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ТекстОшибки) Тогда
		РезультатПроверки = НовыйРезультатПроверкиФайлаДанных();
		РезультатПроверки.ТекстОшибки = ДанныеПроверяемыхФайлов.ТекстОшибки;
	Иначе
		РезультатПроверки = ПроверитьВозможностьЗагрузкиФайлаДанных(ДанныеПроверяемыхФайлов);
	КонецЕсли;
	
	УдалитьДанныеПроверяемыхФайлов(ДанныеПроверяемыхФайлов);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Проверить возможность загрузки файла данных.
// 
// Параметры:
//  ДанныеПроверяемыхФайлов - см. НовыеДанныеПроверяемыхФайлов
// 
// Возвращаемое значение:
//  см. НовыйРезультатПроверкиФайлаДанных
&НаСервереБезКонтекста
Функция ПроверитьВозможностьЗагрузкиФайлаДанных(Знач ДанныеПроверяемыхФайлов)
	
	РезультатПроверки = НовыйРезультатПроверкиФайлаДанных();
	ДанныеПроверяемыхФайлов.СписокФайлов.Очистить();
	
	Для Каждого ЭлементПроверяемыеФайлы Из ДанныеПроверяемыхФайлов.ПроверяемыеФайлы Цикл
		
		ПолноеИмяФайла = ЭлементПроверяемыеФайлы.Значение;
		ВидФайла = ЭлементПроверяемыеФайлы.Ключ;
		
		Если ЗначениеЗаполнено(ПолноеИмяФайла) И ЭтоАдресВременногоХранилища(ПолноеИмяФайла) Тогда
			
			//@skip-check missing-temporary-file-deletion
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
			
			ДанныеФайла = ПолучитьИзВременногоХранилища(ПолноеИмяФайла);
			ДанныеФайла.Записать(ИмяВременногоФайла);
			
			УдалитьИзВременногоХранилища(ПолноеИмяФайла);
			
			ДанныеПроверяемыхФайлов.ПроверяемыеФайлы[ВидФайла] = ИмяВременногоФайла;
			ДанныеПроверяемыхФайлов.СписокФайлов.Добавить(ИмяВременногоФайла);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнформацияОВыгрузке = ВыгрузкаЗагрузкаДанныхСлужебный.ПрочитатьОбъектXDTOИзФайла(
		ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.ИнформацияОВыгрузке,
		ФабрикаXDTO.Тип("http://www.1c.ru/1cFresh/Data/Dump/1.0.2.1", "DumpInfo"));
	
	Если Не ВыгрузкаЗагрузкаДанныхСлужебный.ВыгрузкаВАрхивеСовместимаСТекущейКонфигурацией(ИнформацияОВыгрузке) Тогда
		
		РезультатПроверки.ТекстОшибки
			= ВыгрузкаЗагрузкаДанныхСлужебный.ТекстОшибкиВыгрузкаНеСовместимаСТекущейКонфигурацией(ИнформацияОВыгрузке);
		
	ИначеЕсли Не ВыгрузкаЗагрузкаДанныхСлужебный.ВыгрузкаВАрхивеСовместимаСТекущейВерсиейКонфигурации(ИнформацияОВыгрузке) Тогда
		
		РезультатПроверки.ТекстОшибки
			= ВыгрузкаЗагрузкаДанныхСлужебный.ТекстОшибкиВыгрузкаНеСовместимаСТекущейВерсиейКонфигурации(ИнформацияОВыгрузке);
		
	ИначеЕсли Не ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.СхемаКонфигурации) Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Конфигурация поддерживает проверку схемы данных, но файл схемы не найден в файле выгрузки.
			|Структура файла выгрузки не соответствует ожидаемой.'");
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение,
			,
			,
			ТекстПредупреждения);
		
	Иначе
		
		СравнитьСхемыКонфигураций(ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.СхемаКонфигурации, РезультатПроверки);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатПроверки.ТекстОшибки) Тогда
		ДополнительныеПроверкиЗагрузкиФайлаДанных(ДанныеПроверяемыхФайлов, РезультатПроверки);
	КонецЕсли;
	
	УдалитьДанныеПроверяемыхФайлов(ДанныеПроверяемыхФайлов);
	
	Возврат РезультатПроверки;
	
КонецФункции

// Сравнить схемы конфигураций.
// 
// Параметры:
//  ПутьКФайлуСхемыКонфигурацииВыгрузки - Строка - Путь к файлу схемы конфигурации выгрузки
//  РезультатПроверки - см. НовыйРезультатПроверкиФайлаДанных
&НаСервереБезКонтекста
Процедура СравнитьСхемыКонфигураций(ПутьКФайлуСхемыКонфигурацииВыгрузки, РезультатПроверки)
	
	ДвоичныеДанныеСхемыКонфигурации = СхемаКонфигурации.ДвоичныеДанныеСхемы(Ложь, Ложь);	

	ХешированиеДанныхСхемыКонфигурации = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанныхСхемыКонфигурации.Добавить(ДвоичныеДанныеСхемыКонфигурации);
	
	Если ХешированиеДанныхСхемыКонфигурации.ХешСумма = ХешСуммаФайла(ПутьКФайлуСхемыКонфигурацииВыгрузки) Тогда
		Возврат;
	КонецЕсли;
	 	
	ОписанияРазличий = АнализСхемКонфигурации.ОписанияРазличийСхемКонфигураций(
		Новый ДвоичныеДанные(ПутьКФайлуСхемыКонфигурацииВыгрузки),
		ДвоичныеДанныеСхемыКонфигурации); 
	
	Если ЗначениеЗаполнено(ОписанияРазличий) Тогда
		
		РезультатПроверки.ТекстОшибки = НСтр(
			"ru = 'Файл не может быть загружен в информационную базу: его конфигурация отличается от конфигурации информационной базы. 
			|Для устранения различий необходимо обратиться к своей обслуживающей организации или администратору информационной базы.'");
		
		ЧастиТекстаОшибки = Новый Массив();	
		
		Для Каждого ОписанияРазличия Из ОписанияРазличий Цикл
			ЧастиТекстаОшибки.Добавить("● ");
			ЧастиТекстаОшибки.Добавить(ОписанияРазличия);
			ЧастиТекстаОшибки.Добавить(Символы.ПС);
		КонецЦикла;
		
		РезультатПроверки.ИнформацияОбОшибке = СтрСоединить(ЧастиТекстаОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

// Дополнительные проверки загрузки файла данных.
// 
// Параметры:
//  ДанныеПроверяемыхФайлов - см. НовыеДанныеПроверяемыхФайлов
//  РезультатПроверки - см. НовыйРезультатПроверкиФайлаДанных
&НаСервереБезКонтекста
Процедура ДополнительныеПроверкиЗагрузкиФайлаДанных(ДанныеПроверяемыхФайлов, РезультатПроверки)
	
	ПроверкаРежимаВыгрузкиДляТехническойПоддержки(ДанныеПроверяемыхФайлов, РезультатПроверки);
	ПроверкаНаличияПоставляемыхРасширений(ДанныеПроверяемыхФайлов, РезультатПроверки);
	
КонецПроцедуры

// Проверка режима выгрузки для технической поддержки.
// 
// Параметры:
//  ДанныеПроверяемыхФайлов - см. НовыеДанныеПроверяемыхФайлов
//  РезультатПроверки - см. НовыйРезультатПроверкиФайлаДанных
&НаСервереБезКонтекста
Процедура ПроверкаРежимаВыгрузкиДляТехническойПоддержки(ДанныеПроверяемыхФайлов, РезультатПроверки)
	
	ВыгрузкаДляТехническойПоддержки = ВыгрузкаЗагрузкаДанныхСлужебный.ВыгрузкаВРежимеДляТехническойПоддержки(
		ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.Дайджест);
	
	Если ВыгрузкаДляТехническойПоддержки Тогда
		
		ТекстПредупреждения = НСтр(
			"ru = 'Файл создан в режиме выгрузки для технической поддержки.
			|Приложение, полученное из такой выгрузки предназначено только для целей тестирования и разбора проблем.'");
		
		РезультатПроверки.Предупреждения.Добавить(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверить наличие поставляемых расширений.
// 
// Параметры:
// Параметры:
//  ДанныеПроверяемыхФайлов - см. НовыеДанныеПроверяемыхФайлов
//  РезультатПроверки - см. НовыйРезультатПроверкиФайлаДанных
&НаСервереБезКонтекста
Процедура ПроверкаНаличияПоставляемыхРасширений(ДанныеПроверяемыхФайлов, РезультатПроверки)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.Расширения);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ЧтениеXML.Закрыть();
		Возврат;
	КонецЕсли;
	
	РасширенияСКаркасами = Новый Массив();
	РасширенияБезКаркасов = Новый Массив();
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Extension" Тогда		
			Продолжить;	
		КонецЕсли;
		
		ИзменяетСтруктуруДанных = XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("ModifiesDataStructure"));
		
		Если Не ИзменяетСтруктуруДанных Тогда
			Продолжить;
		КонецЕсли;

		Наименование = "- " + XMLЗначение(Тип("Строка"), ЧтениеXML.ЗначениеАтрибута("Name"));
		
		Если ЧтениеXML.ЗначениеАтрибута("IsFrame") <> Неопределено Тогда
			
			Если XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("IsFrame")) = Истина Тогда
				РасширенияСКаркасами.Добавить(Наименование);
			Иначе
				РасширенияБезКаркасов.Добавить(Наименование);
			КонецЕсли;
			
		Иначе
			РасширенияБезКаркасов.Добавить(Наименование);
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Если ЗначениеЗаполнено(РасширенияБезКаркасов) Тогда
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Файл содержит данные, добавленные расширениями.
				 |Должны быть установлены следующие расширения или их каркасные версии:
				 |%1'"),
			СтрСоединить(РасширенияБезКаркасов, Символы.ПС));
		
		РезультатПроверки.Предупреждения.Добавить(ТекстПредупреждения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РасширенияСКаркасами) Тогда
		
		ТекстПредупреждения = СтрШаблон(
			НСтр("ru = 'Функциональность следующих расширений недоступна, были подключены каркасные версии:
				 |%1'"),
			СтрСоединить(РасширенияСКаркасами, Символы.ПС));
		
		РезультатПроверки.Предупреждения.Добавить(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

// Получить файлы для проверки загрузки данных.
// 
// Параметры:
//  ПолноеИмяФайлаДанных - Строка - Полное имя файла данных
// 
// Возвращаемое значение:
//  см. НовыеДанныеПроверяемыхФайлов
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеФайловДляПроверкиЗагрузкиДанных(ПолноеИмяФайлаДанных)
	
	ДанныеПроверяемыхФайлов = Неопределено;
	
	#Если НЕ ВебКлиент Тогда
	
	ДанныеПроверяемыхФайлов = НовыеДанныеПроверяемыхФайлов();
	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ПолноеИмяФайлаДанных);
	
	Попытка
		
		ИзвлечьПроверяемыеФайлыИзАрхива(ЧтениеДанныхАрхива, ДанныеПроверяемыхФайлов);
		
	Исключение
		
		ЧтениеДанныхАрхива.Закрыть();
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
	
	#КонецЕсли
	
	Возврат ДанныеПроверяемыхФайлов;
	
КонецФункции

// Извлечь проверяемые файлы из архива.
// 
// Параметры:
//  ЧтениеДанныхАрхива - ЧтениеZipФайла
//  ДанныеПроверяемыхФайлов - см. НовыеДанныеПроверяемыхФайлов
&НаКлиентеНаСервереБезКонтекста
Процедура ИзвлечьПроверяемыеФайлыИзАрхива(ЧтениеДанныхАрхива, ДанныеПроверяемыхФайлов)
	
	ИменаСлужебныхФайлов = ПолучитьИменаСлужебныхФайлов();
	ПутьКФайлуСодержимого = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИменаСлужебныхФайлов.Содержимое);
	
	Если Не ЗначениеЗаполнено(ПутьКФайлуСодержимого) Тогда
		
		ДанныеПроверяемыхФайлов.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В архиве отсутствует файл содержимого (%1)'"),
			ИменаСлужебныхФайлов.Содержимое);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.ИнформацияОВыгрузке = ИзвлечьФайлИзZipАрхива(
		ЧтениеДанныхАрхива,
		ИменаСлужебныхФайлов.ИнформацияОВыгрузке);
	
	Если Не ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.ИнформацияОВыгрузке) Тогда
		
		ДанныеПроверяемыхФайлов.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В архиве отсутствует файл информации о выгрузке (%1)'"),
			ИменаСлужебныхФайлов.ИнформацияОВыгрузке);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.Дайджест = ИзвлечьФайлИзZipАрхива(
		ЧтениеДанныхАрхива,
		ИменаСлужебныхФайлов.Дайджест);
	
	Если Не ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.Дайджест) Тогда
		
		ДанныеПроверяемыхФайлов.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В архиве отсутствует файл дайджест (%1)'"),
			ИменаСлужебныхФайлов.Дайджест);
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.Расширения = ИзвлечьФайлИзZipАрхива(
		ЧтениеДанныхАрхива,
		ИменаСлужебныхФайлов.Расширения);
	
	Если Не ЗначениеЗаполнено(ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.Расширения) Тогда
		
		ДанныеПроверяемыхФайлов.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'В архиве отсутствует файл описания расширений (%1)'"),
			ИменаСлужебныхФайлов.Расширения);
		
		Возврат;
		
	КонецЕсли;
	
	ИмяФайлаСхемыКонфигурации = ПолучитьИмяФайлаПоДаннымСодержимого(
		ПутьКФайлуСодержимого, 
		"CustomData", 
		"ConfigScheme");
	УдалитьФайлыВПопытке(ПутьКФайлуСодержимого);
	
	ДанныеПроверяемыхФайлов.ПроверяемыеФайлы.СхемаКонфигурации = ИзвлечьФайлИзZipАрхива(
		ЧтениеДанныхАрхива,
		ИмяФайлаСхемыКонфигурации);
	
	Для Каждого ЭлементПроверяемыйФайл Из ДанныеПроверяемыхФайлов.ПроверяемыеФайлы Цикл
		
		Если ЗначениеЗаполнено(ЭлементПроверяемыйФайл.Значение) Тогда
			ДанныеПроверяемыхФайлов.СписокФайлов.Добавить(ЭлементПроверяемыйФайл.Значение);
		КонецЕсли;
		
	КонецЦикла;
	 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяФайлаПоДаннымСодержимого(ПутьКФайлуСодержимого, ТипФайла, ТипДаных)
	
	ИмяФайла = Неопределено;
	
	#Если НЕ ВебКлиент Тогда

	ЧтениеСодержимого = Новый ЧтениеXML();
	ЧтениеСодержимого.ОткрытьФайл(ПутьКФайлуСодержимого);
	ЧтениеСодержимого.ПерейтиКСодержимому();

	Если ЧтениеСодержимого.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеСодержимого.Имя <> "Data" Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента ""Data"".'");
	КонецЕсли;

	ЧтениеСодержимого.Прочитать();
	
	Пока ЧтениеСодержимого.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		
		ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеСодержимого);

		Если ОбъектXDTO.Type = ТипФайла
			И (ТипДаных = Неопределено
			Или ОбъектXDTO.Свойства().Получить("DataType") <> Неопределено И ОбъектXDTO.DataType = ТипДаных) Тогда

			ИмяФайла = ОбъектXDTO.Name;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеСодержимого.Закрыть();
	
	#КонецЕсли

	Возврат ИмяФайла;

КонецФункции

// Извлечь файл из zip архива.
// 
// Параметры:
//  ЧтениеДанныхАрхива - ЧтениеZipФайла
//  ИмяФайла - Строка
// 
// Возвращаемое значение:
//  Строка, Неопределено - Полное имя извлеченного файла
&НаКлиентеНаСервереБезКонтекста
Функция ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИмяФайла)
	
	ИмяВременногоФайла = Неопределено;
	
	#Если НЕ ВебКлиент Тогда
		
	ЭлементZip = ЧтениеДанныхАрхива.Элементы.Найти(ИмяФайла);
	
	Если ЭлементZip <> Неопределено Тогда
		
		//@skip-check missing-temporary-file-deletion
		ИмяВременногоКаталога = ПолучитьИмяВременногоФайла();
		
		ЧтениеДанныхАрхива.Извлечь(
			ЭлементZip,
			ИмяВременногоКаталога,
			РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ПереместитьФайл(ИмяВременногоКаталога + ПолучитьРазделительПути() + ИмяФайла, ИмяВременногоФайла);
		
		УдалитьФайлыВПопытке(ИмяВременногоКаталога);
		
	КонецЕсли;

	#КонецЕсли	
				
	Возврат ИмяВременногоФайла;
	
КонецФункции

// Удалить данные проверяемых файлов.
// 
// Параметры:
//  ДанныеПроверяемыхФайлов - см. НовыеДанныеПроверяемыхФайлов
&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьДанныеПроверяемыхФайлов(ДанныеПроверяемыхФайлов)
	
	Для Каждого ИмяФайла Из ДанныеПроверяемыхФайлов.СписокФайлов Цикл
		УдалитьФайлыВПопытке(ИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

// Новые данные проверяемых файлов.
// 
// Возвращаемое значение:
//  Структура - Новые данные проверяемых файлов:
// * ПроверяемыеФайлы - Структура -:
// ** ИнформацияОВыгрузке - Строка, Неопределено -
// ** Дайджест - Строка, Неопределено -
// ** СхемаКонфигурации - Строка, Неопределено -
// ** Расширения - Строка, Неопределено -
// * СписокФайлов - Массив из Строка -
// * ТекстОшибки - Строка, Неопределено -
&НаКлиентеНаСервереБезКонтекста
Функция НовыеДанныеПроверяемыхФайлов()
	
	ПроверяемыеФайлы = Новый Структура();
	ПроверяемыеФайлы.Вставить("ИнформацияОВыгрузке", Неопределено);
	ПроверяемыеФайлы.Вставить("Дайджест", Неопределено);
	ПроверяемыеФайлы.Вставить("СхемаКонфигурации", Неопределено);
	ПроверяемыеФайлы.Вставить("Расширения", Неопределено);
	
	ДанныеПроверяемыхФайлов = Новый Структура();
	ДанныеПроверяемыхФайлов.Вставить("ПроверяемыеФайлы", ПроверяемыеФайлы);
	ДанныеПроверяемыхФайлов.Вставить("СписокФайлов", Новый Массив());
	ДанныеПроверяемыхФайлов.Вставить("ТекстОшибки", Неопределено);
	
	Возврат ДанныеПроверяемыхФайлов;
	
КонецФункции

// Новый результат проверки файла данных.
// 
// Возвращаемое значение:
//  Структура - Новый результат проверки файла данных:
// * ТекстОшибки - Строка, Неопределено -
// * ИнформацияОбОшибке - Строка, Неопределено -
// * Предупреждения - Массив из Строка -
&НаКлиентеНаСервереБезКонтекста
Функция НовыйРезультатПроверкиФайлаДанных()
	
	РезультатПроверки = Новый Структура();
	РезультатПроверки.Вставить("ТекстОшибки", Неопределено);
	РезультатПроверки.Вставить("ИнформацияОбОшибке", Неопределено);
	РезультатПроверки.Вставить("Предупреждения", Новый Массив());
	
	Возврат РезультатПроверки;
	
КонецФункции

// Получить имена служебных файлов.
// 
// Возвращаемое значение:
//  Структура - Получить имена служебных файлов:
// * ИнформацияОВыгрузке - Строка -
// * Дайджест - Строка -
// * Содержимое - Строка -
// * Расширения - Строка -
&НаСервереБезКонтекста
Функция ПолучитьИменаСлужебныхФайлов()
	
	ИменаСлужебныхФайлов = Новый Структура();
	ИменаСлужебныхФайлов.Вставить(
		"ИнформацияОВыгрузке",
		ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьИмяФайла(ВыгрузкаЗагрузкаДанныхСлужебный.DumpInfo()));
	ИменаСлужебныхФайлов.Вставить(
		"Дайджест",
		ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьИмяФайла(ВыгрузкаЗагрузкаДанныхСлужебный.Digest()));
	ИменаСлужебныхФайлов.Вставить(
		"Содержимое",
		ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьИмяФайла(ВыгрузкаЗагрузкаДанныхСлужебный.PackageContents()));
	ИменаСлужебныхФайлов.Вставить(
		"Расширения",
		ВыгрузкаЗагрузкаДанныхСлужебный.ПолучитьИмяФайла(ВыгрузкаЗагрузкаДанныхСлужебный.Extensions()));
	
	Возврат ИменаСлужебныхФайлов;
	
КонецФункции

// Получить доступность файлов на сервере.
// 
// Параметры:
//  СписокФайлов - Строка, Массив из Строка -
// 
// Возвращаемое значение:
//  Булево
&НаКлиенте
Асинх Функция ПолучитьДоступностьФайловНаСервере(СписокФайлов)
	
	Если ЭтоВебКлиент Или ЭтоФайловаяИнформационнаяБаза Тогда
		Возврат Не ЭтоВебКлиент;
	КонецЕсли;
	
	Если ТипЗнч(СписокФайлов) = Тип("Строка") Тогда
		ПроверяемыеФайлы = Новый Массив();
		ПроверяемыеФайлы.Добавить(СписокФайлов);
	Иначе
		ПроверяемыеФайлы = СписокФайлов;
	КонецЕсли;
	
	Попытка
		
		ФайлыДоступны = Ждать ФайлыДоступныНаСервере(ПроверяемыеФайлы);
		
	Исключение
		
		ФайлыДоступны = Ложь;
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось проверить доступность файлов на сервере:
				 |%1
				 |
				 |При проверке произошла ошибка:
				 |%2'"),
			СтрСоединить(ПроверяемыеФайлы, Символы.ПС),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецПопытки;
	
	Возврат ФайлыДоступны;
	
КонецФункции

// Проверяет доступность файлов в одном каталоге с клиента на сервере.
// 
// Параметры:
//  ПроверяемыеФайлы - Массив из Строка
// 
// Возвращаемое значение:
//  Булево
&НаКлиенте
Асинх Функция ФайлыДоступныНаСервере(ПроверяемыеФайлы)
	
	ПараметрыДоступностиНаКлиенте = НовыеПараметрыПроверкиДоступностиФайлаНаСервере();
	
	Для Каждого ИмяФайла Из ПроверяемыеФайлы Цикл
		
		ОбъектФС = Новый Файл(ИмяФайла);
		ФайлСуществует = Ждать ОбъектФС.СуществуетАсинх();
		
		Если Не ФайлСуществует Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПараметрыФайла = НовыеПараметрыФайла();
		ПараметрыФайла.ПолноеИмя = ОбъектФС.ПолноеИмя;
		ПараметрыФайла.Размер = Ждать ОбъектФС.РазмерАсинх();
		
		ПараметрыДоступностиНаКлиенте.ПроверяемыеФайлы.Добавить(ПараметрыФайла);
		
		Если Не ЗначениеЗаполнено(ПараметрыДоступностиНаКлиенте.Путь) Тогда
			ПараметрыДоступностиНаКлиенте.Путь = ОбъектФС.Путь;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаписатьВременныеДанныеПроверкиДоступностиФайла(ПараметрыДоступностиНаКлиенте);
	ПараметрыДоступностиНаСервере = ПолучитьПараметрыДоступностиФайлаНаСервере(ПараметрыДоступностиНаКлиенте);
	
	КоличествоФайлов = ПараметрыДоступностиНаКлиенте.ПроверяемыеФайлы.Количество();
	ФайлыДоступны = Ложь;
	
	Если КоличествоФайлов = ПараметрыДоступностиНаСервере.ПроверяемыеФайлы.Количество() Тогда
		
		РазмерФайловСовпадает = Истина;
		
		Для ИндексПараметров = 0 По КоличествоФайлов - 1 Цикл
			
			ПараметрыФайлаКлиент = ПараметрыДоступностиНаКлиенте.ПроверяемыеФайлы[ИндексПараметров];
			ПараметрыФайлаСервер = ПараметрыДоступностиНаСервере.ПроверяемыеФайлы[ИндексПараметров];
			
			Если ПараметрыФайлаКлиент.Размер <> ПараметрыФайлаСервер.Размер Тогда
				РазмерФайловСовпадает = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РазмерФайловСовпадает Тогда
		
			ДанныеВременногоФайла = ПрочитатьВременныеДанныеПроверкиДоступностиФайла(ПараметрыДоступностиНаСервере);
			
			Если ПараметрыДоступностиНаСервере.ДанныеВременногоФайла = ДанныеВременногоФайла Тогда
				ФайлыДоступны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьФайлыВПопытке(ПараметрыДоступностиНаКлиенте.ПолноеИмяВременногоФайла);
	
	Возврат ФайлыДоступны;
	
КонецФункции

// Получить параметры доступности файла на сервере.
// 
// Параметры:
//  ПараметрыДоступностиНаКлиенте - см. НовыеПараметрыПроверкиДоступностиФайлаНаСервере
// 
// Возвращаемое значение:
//  см. НовыеПараметрыПроверкиДоступностиФайлаНаСервере
&НаСервереБезКонтекста
Функция ПолучитьПараметрыДоступностиФайлаНаСервере(Знач ПараметрыДоступностиНаКлиенте)
	
	ПараметрыДоступностиНаСервере = НовыеПараметрыПроверкиДоступностиФайлаНаСервере();
	
	ЗаполнитьЗначенияСвойств(
		ПараметрыДоступностиНаСервере,
		ПараметрыДоступностиНаКлиенте,
		"Путь, ПолноеИмяВременногоФайла");
	
	Для Каждого ПараметрыФайлаКлиент Из ПараметрыДоступностиНаКлиенте.ПроверяемыеФайлы Цикл
		
		ОбъектФС = Новый Файл(ПараметрыФайлаКлиент.ПолноеИмя);
		
		Если Не ОбъектФС.Существует() Тогда
			Возврат ПараметрыДоступностиНаСервере;
		КонецЕсли;
		
		ПараметрыФайла = НовыеПараметрыФайла();
		ПараметрыФайла.ПолноеИмя = ОбъектФС.ПолноеИмя;
		ПараметрыФайла.Размер = ОбъектФС.Размер();
		
		Если ПараметрыФайла.Размер <> ПараметрыФайлаКлиент.Размер Тогда
			Возврат ПараметрыДоступностиНаСервере;
		КонецЕсли;
		
		ПараметрыДоступностиНаСервере.ПроверяемыеФайлы.Добавить(ПараметрыФайла);
		
	КонецЦикла;
	
	ДанныеВременногоФайла = ПрочитатьВременныеДанныеПроверкиДоступностиФайла(ПараметрыДоступностиНаКлиенте);
	
	Если ПараметрыДоступностиНаКлиенте.ДанныеВременногоФайла <> ДанныеВременногоФайла Тогда
		Возврат ПараметрыДоступностиНаСервере;
	КонецЕсли;
	
	ЗаписатьВременныеДанныеПроверкиДоступностиФайла(ПараметрыДоступностиНаСервере);
	
	Возврат ПараметрыДоступностиНаСервере;
	
КонецФункции

// Записать временные данные проверки доступности файла.
// 
// Параметры:
//  ПараметрыДоступности - см. НовыеПараметрыПроверкиДоступностиФайлаНаСервере
&НаКлиентеНаСервереБезКонтекста
Процедура ЗаписатьВременныеДанныеПроверкиДоступностиФайла(ПараметрыДоступности)
	
	Если Не ЗначениеЗаполнено(ПараметрыДоступности.ПолноеИмяВременногоФайла) Тогда
		
		ПараметрыДоступности.ПолноеИмяВременногоФайла = ПараметрыДоступности.Путь
			+ ".data_loading_tmp_"
			+ Строка(Новый УникальныйИдентификатор());
		
	КонецЕсли;
	
	ПараметрыДоступности.ДанныеВременногоФайла = Строка(Новый УникальныйИдентификатор());
	
	#Если НЕ ВебКлиент Тогда
	
	Запись = Новый ЗаписьТекста(ПараметрыДоступности.ПолноеИмяВременногоФайла);
	Запись.ЗаписатьСтроку(ПараметрыДоступности.ДанныеВременногоФайла);
	Запись.Закрыть();
	
	#КонецЕсли
	
КонецПроцедуры

// Записать временные данные проверки доступности файла.
// 
// Параметры:
//  ПараметрыДоступности - см. НовыеПараметрыПроверкиДоступностиФайлаНаСервере
// 
// Возвращаемое значение:
//  Строка - содержимое временного файла
&НаКлиентеНаСервереБезКонтекста
Функция ПрочитатьВременныеДанныеПроверкиДоступностиФайла(ПараметрыДоступности)
	
	ДанныеВременногоФайла = "";
	
	#Если НЕ ВебКлиент Тогда
	
	Чтение = Новый ЧтениеТекста(ПараметрыДоступности.ПолноеИмяВременногоФайла);
	ДанныеСтроки = Чтение.ПрочитатьСтроку();
	Чтение.Закрыть();
	
	Если ЗначениеЗаполнено(ДанныеСтроки) Тогда
		ДанныеВременногоФайла = ДанныеСтроки;
	КонецЕсли;
	
	#КонецЕсли
	
	Возврат ДанныеВременногоФайла;
	
КонецФункции

// Новые параметры проверки доступности файла на сервере.
// 
// Возвращаемое значение:
//  Структура - Новые параметры проверки доступности файла на сервере:
// * ПроверяемыеФайлы - Массив из см. НовыеПараметрыФайла -
// * Путь - Строка -
// * ПолноеИмяВременногоФайла - Строка -
// * ДанныеВременногоФайла - Строка -
&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыПроверкиДоступностиФайлаНаСервере()
	
	ПараметрыДоступности = Новый Структура();
	ПараметрыДоступности.Вставить("ПроверяемыеФайлы", Новый Массив());
	ПараметрыДоступности.Вставить("Путь", "");
	ПараметрыДоступности.Вставить("ПолноеИмяВременногоФайла", "");
	ПараметрыДоступности.Вставить("ДанныеВременногоФайла", "");
	
	Возврат ПараметрыДоступности;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыФайла()
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("ПолноеИмя", "");
	ПараметрыФайла.Вставить("Размер", 0);
	
	Возврат ПараметрыФайла;
	
КонецФункции

&НаКлиенте
Функция ЗаголовокДиалогаВыбораФайлаДанных()
	
	Возврат НСтр("ru = 'Загрузка файла'");
	
КонецФункции

&НаКлиенте
Функция ФильтрДиалогаВыбораФайлаДанных()
	
	Возврат СтрШаблон(НСтр("ru = 'Архивы %1'"), "(*.zip)|*.zip");
	
КонецФункции

// Получить файл временного хранилища.
// 
// Параметры:
//  ИдентификаторФормы - УникальныйИдентификатор - Идентификатор формы
//  ПолучатьПолноеИмя - Булево - признак получения полного имени временного файла
// 
// Возвращаемое значение:
//  Структура - данные файла временного хранилища:
// * ИмяФайла - Строка -
// * ПолноеИмяФайла - Строка -
&НаСервереБезКонтекста
Функция ПолучитьФайлВременногоХранилища(Знач ИдентификаторФормы, Знач ПолучатьПолноеИмя = Ложь)
	
	ИмяФайла = ФайлыБТС.НовыйФайлВременногоХранилища("xml2data", "zip", 120);
	ФайлыБТС.ЗаблокироватьФайлВременногоХранилища(ИмяФайла, ИдентификаторФормы);
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяФайла", ИмяФайла);
	Результат.Вставить("ПолноеИмяФайла", "");
	
	Если ПолучатьПолноеИмя Тогда
		Результат.ПолноеИмяФайла = ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанных

&НаКлиенте
Процедура ЗапуститьЗагрузкуДанных()
	
	Попытка
		ЗапуститьЗагрузкуДанныхНаСервере();
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОтменитьЗагрузкуНаСервере();
		
		ПараметрыУведомления = НовыеПараметрыУведомленияОбОшибкеПредупреждении();
		ПараметрыУведомления.Подсказка = НСтр("ru = 'При запуске загрузки данных произошла ошибка:'");
		ПараметрыУведомления.Рекомендация = НСтр("ru = 'Рекомендуется повторить попытку загрузки'");
		ПараметрыУведомления.Текст = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПараметрыУведомления.ПолныйТекст = СтрШаблон(
			НСтр("ru = 'При загрузке данных произошла ошибка:
				 |%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ПоказатьОшибкиПредупреждения(ПараметрыУведомления);
		
		Возврат;
		
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ПроверитьГотовностьЗагрузки", 5);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьГотовностьЗагрузки()
	
	Попытка
		СостояниеЗагрузки = СостояниеЗагрузки(ИдентификаторЗадания, ИдентификаторСостояния, АдресХранилища);
	Исключение
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		ОтключитьОбработчикОжидания("ПроверитьГотовностьЗагрузки");
		ОтменитьЗагрузкуНаСервере();
			
		ПараметрыУведомления = НовыеПараметрыУведомленияОбОшибкеПредупреждении();
		ПараметрыУведомления.Подсказка = НСтр("ru = 'При загрузке данных произошла ошибка:'");
		ПараметрыУведомления.Рекомендация = НСтр("ru = 'При продолжении будет предложено повторить попытку загрузки'");
		ПараметрыУведомления.Текст = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПараметрыУведомления.ПолныйТекст = СтрШаблон(
			НСтр("ru = 'При загрузке данных произошла ошибка:
				 |%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ПоказатьОшибкиПредупреждения(ПараметрыУведомления);
		
		Возврат;
		
	КонецПопытки;
	
	Если СостояниеЗагрузки.ПредставлениеСостояния <> Неопределено Тогда	
		ПредставлениеСостояния  = СостояниеЗагрузки.ПредставлениеСостояния
			+ Символы.ПС 
			+ ВыгрузкаЗагрузкаДанныхКлиентСервер.ПодсказкаДлительнойОперации();
	КонецЕсли;
						
	ПроцентЗавершения = СостояниеЗагрузки.ПроцентЗавершения;
	Элементы.ГруппаПроцентЗавершения.Видимость = СостояниеЗагрузки.ПроцентЗавершения <> Неопределено;
		
	Если Не СостояниеЗагрузки.Завершена Тогда 
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ПроверитьГотовностьЗагрузки");	
		 
	РезультатОбработки = ОбработатьРезультатЗагрузкиНаСервере();
	
	Если ЗначениеЗаполнено(РезультатОбработки.Предупреждения) Тогда
		
		ПерезапуститьПрограммуПриЗакрытии = Истина;
		Разделитель = "
		|-----------------------------------------------
		|";

		ПараметрыУведомления = НовыеПараметрыУведомленияОбОшибкеПредупреждении();
		ПараметрыУведомления.ЭтоОшибка = Ложь;
		ПараметрыУведомления.Подсказка
			= НСтр("ru = 'Загрузка данных завершена. В процессе загрузки получены предупреждения:'");
		ПараметрыУведомления.Рекомендация
			= НСтр("ru = 'Подробная информация записана в журнал регистрации. При продолжении программа будет перезапущена'");
		ПараметрыУведомления.Текст = СтрСоединить(РезультатОбработки.Предупреждения, Разделитель);
		
		ПоказатьОшибкиПредупреждения(ПараметрыУведомления);
		
	Иначе
		ПерезапуститьПрограмму();	
	КонецЕсли;
	
КонецПроцедуры

// Состояние загрузки.
// 
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор задания
//  ИдентификаторСостояния - УникальныйИдентификатор - Идентификатор состояния
//  АдресХранилища - Строка - Адрес хранилища
// 
// Возвращаемое значение:
//  Структура - Состояние загрузки:
// * Завершена - Булево -
// * ПредставлениеСостояния - Неопределено, Строка -
// * ПроцентЗавершения - Неопределено, Число -
&НаСервереБезКонтекста																	
Функция СостояниеЗагрузки(ИдентификаторЗадания, ИдентификаторСостояния, АдресХранилища)
	
	СостояниеЗагрузки = Новый Структура();
	СостояниеЗагрузки.Вставить("Завершена", Ложь);
	СостояниеЗагрузки.Вставить("ПредставлениеСостояния", Неопределено);
	СостояниеЗагрузки.Вставить("ПроцентЗавершения", Неопределено);
			
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	ЗаданиеАктивно = Ложь;
			
	Если Задание = Неопределено Тогда
		
		РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
		
		Если РезультатЗагрузки = Неопределено Тогда
			ВызватьИсключение
				НСтр("ru = 'При загрузке данных произошла ошибка - не найдено задание выполняющее загрузку.'");
		КонецЕсли;
		
	Иначе
		
		Если Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					
			ЗаданиеАктивно = Истина;
							
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			
			Если ОшибкаЗадания <> Неопределено Тогда
				ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ОшибкаЗадания);
			Иначе
				ВызватьИсключение
					НСтр("ru = 'При загрузке данных произошла ошибка - задание выполняющее загрузку завершилось с неизвестной ошибкой.'");
			КонецЕсли;
			
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			
			ВызватьИсключение
				НСтр("ru = 'При загрузке данных произошла ошибка - задание выполняющее загрузку было отменено администратором.'");
			
		КонецЕсли;
				
	КонецЕсли;
	
 	СостояниеЗагрузки.Завершена = Не ЗаданиеАктивно;
 				
	СостояниеВыгрузкиЗагрузкиОбластиДанных = ВыгрузкаЗагрузкаДанных.СостояниеВыгрузкиЗагрузкиОбластиДанных(
		ИдентификаторСостояния);	
				
	Если ЗначениеЗаполнено(СостояниеВыгрузкиЗагрузкиОбластиДанных) Тогда
		
		СостояниеЗагрузки.ПредставлениеСостояния = ВыгрузкаЗагрузкаДанных.ПредставлениеСостоянияВыгрузкиЗагрузкиОбластиДанных(
			СостояниеВыгрузкиЗагрузкиОбластиДанных);
		СостояниеЗагрузки.ПроцентЗавершения = ВыгрузкаЗагрузкаДанных.ПроцентЗавершенияВыгрузкиЗагрузкиОбластиДанных(
			СостояниеВыгрузкиЗагрузкиОбластиДанных);
		
	КонецЕсли;
 	
	Возврат СостояниеЗагрузки;

КонецФункции

&НаСервере
Функция ОбработатьРезультатЗагрузкиНаСервере() 
	
	ИдентификаторЗадания = Неопределено;
	ОтменитьЗагрузкуНаСервере();
	
	Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Установить(Неопределено);	
	РезультатЗагрузки = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если РезультатЗагрузки = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'При загрузке данных произошла ошибка - не найден результат загрузки'");
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресХранилища);
	
	РезультатОбработки = Новый Структура();
	РезультатОбработки.Вставить("Предупреждения", РезультатЗагрузки.Предупреждения);
	
	Возврат РезультатОбработки;
	
КонецФункции

&НаСервере
Процедура ЗапуститьЗагрузкуДанныхНаСервере()
	
	Если ИспользоватьМногопоточность() Тогда
		РаботаВМоделиСервиса.УстановитьМонопольнуюБлокировку(Истина);
		РаботаВМоделиСервиса.СнятьМонопольнуюБлокировку();
	КонецЕсли;
	
	ИмяФайлаНаСервере = ?(ЭтоВебКлиент Или Не ФайлДанныхДоступенНаСервере,
		ФайлыБТС.ПолноеИмяФайлаВременногоХранилища(ИмяФайлаВременногоХранилища),
		ФайлДанных);
	ХешСуммаФайлаДанных = ХешСуммаФайла(ИмяФайлаНаСервере);
	
	Если ЗначениеЗаполнено(ХешСуммаФайла) И ХешСуммаФайла <> ХешСуммаФайлаДанных Тогда
		
		Предупреждения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
			НСтр("ru = 'Файл не совпадает с тем из которого загрузка запускалась ранее.
				 |Продолжение загрузки было невозможно, и она была запущена с начала.'"));
		
		ВывестиПредупрежденияФайлаДанных(Предупреждения);
		
	КонецЕсли;
	
	Если Не НеЗагружатьРасширенияКонфигурации Тогда
		ВосстановитьРасширенияИнформационнойБазы(ИмяФайлаНаСервере);
	КонецЕсли;
	
	ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки = Новый Структура();
	ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Вставить(
		"ХешСуммаФайла",
		ХешСуммаФайлаДанных);
	ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Вставить(
		"НеЗагружатьРасширенияКонфигурации",
		НеЗагружатьРасширенияКонфигурации);
	ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Вставить(
		"КоличествоЗаданийЗагрузкиДанных",
		КоличествоЗаданийЗагрузкиДанных);
	
	Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Установить(
		Новый ХранилищеЗначения(ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки));	
	
	ИдентификаторСостояния = Новый УникальныйИдентификатор();
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ПараметрыЗагрузки = Новый Структура();
	ПараметрыЗагрузки.Вставить("ИдентификаторСостояния", ИдентификаторСостояния);
	ПараметрыЗагрузки.Вставить("ПропуститьВосстановлениеРасширений", Истина);
	ПараметрыЗагрузки.Вставить("АдресХранилищаРезультата", АдресХранилища);
	ПараметрыЗагрузки.Вставить("КоличествоПотоков", КоличествоЗаданийЗагрузкиДанных);
		
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить(ИмяФайлаНаСервере);
	ПараметрыЗадания.Добавить(Истина);
	ПараметрыЗадания.Добавить(Истина);
	ПараметрыЗадания.Добавить(Неопределено);
	ПараметрыЗадания.Добавить(Неопределено);
	ПараметрыЗадания.Добавить(ПараметрыЗагрузки);
		
	ФоновоеЗадание = РасширенияКонфигурации.ВыполнитьФоновоеЗаданиеСРасширениямиБазыДанных(
		"ВыгрузкаЗагрузкаОбластейДанных.ЗагрузитьТекущуюОбластьИзАрхива",
		ПараметрыЗадания);
	ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьРасширенияИнформационнойБазы(ИмяФайлаНаСервере)
	
	РасширенияДляВосстановления = РасширенияДляВосстановления(ИмяФайлаНаСервере);
	КаркасыРасширенийДляВосстановления = КаркасыРасширенийДляВосстановления(ИмяФайлаНаСервере);
	
	ДанныеРасширений = Новый Структура();
		
	Если ЗначениеЗаполнено(РасширенияДляВосстановления) Тогда
		ДанныеРасширений.Вставить("РасширенияДляВосстановления", РасширенияДляВосстановления);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(КаркасыРасширенийДляВосстановления) Тогда	
		ДанныеРасширений.Вставить("КаркасыРасширенийДляВосстановления", КаркасыРасширенийДляВосстановления);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеРасширений) Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузкаЗагрузкаДанныхСлужебный.ВосстановитьРасширенияИнформационнойБазы(ДанныеРасширений);	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РасширенияДляВосстановления(ИмяФайлаНаСервере)

	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ИмяФайлаНаСервере);

	Попытка
		РасширенияДляВосстановления = РасширенияДляВосстановленияВнутр(ЧтениеДанныхАрхива);
	Исключение
		ЧтениеДанныхАрхива.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
		
	Возврат РасширенияДляВосстановления;
	
КонецФункции

&НаСервереБезКонтекста
Функция РасширенияДляВосстановленияВнутр(ЧтениеДанныхАрхива)

	РасширенияДляВосстановления = Новый Массив();
	ТипУникальныйИдентификатор = Тип("УникальныйИдентификатор");
	ПутьКФайлуПользовательскихРасширений = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, "CustomExtensions.json");
	
	Если ПутьКФайлуПользовательскихРасширений = Неопределено Тогда
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	ЧтениеФайлаПользовательскихРасширений = Новый ЧтениеJSON;
	ЧтениеФайлаПользовательскихРасширений.ОткрытьФайл(ПутьКФайлуПользовательскихРасширений);

	ИнформацияОПользовательскихРасширениях = ПрочитатьJSON(ЧтениеФайлаПользовательскихРасширений);
	ЧтениеФайлаПользовательскихРасширений.Закрыть();

	Для Каждого ИнформацияОПользовательскомРасширении Из ИнформацияОПользовательскихРасширениях Цикл

		ИмяФайлаПользовательскогоРасширения = Неопределено;
		
		Если Не ИнформацияОПользовательскомРасширении.Свойство("FileName", ИмяФайлаПользовательскогоРасширения)
			Или Не ЗначениеЗаполнено(ИмяФайлаПользовательскогоРасширения) Тогда
			Продолжить;
		КонецЕсли;

		ПутьКФайлуПользовательскогоРасширения = ИзвлечьФайлИзZipАрхива(
			ЧтениеДанныхАрхива,
			ИмяФайлаПользовательскогоРасширения);
			
		Если ПутьКФайлуПользовательскогоРасширения = Неопределено Тогда
			ВызватьИсключение СтрШаблон(Нстр("ru = 'Не найден файл данных расширения %1'"),
				ИмяФайлаПользовательскогоРасширения);
		КонецЕсли;

		РасширениеДляВосстановления = Новый Структура;
		РасширениеДляВосстановления.Вставить("Активно", ИнформацияОПользовательскомРасширении.Active);
		РасширениеДляВосстановления.Вставить("БезопасныйРежим", ИнформацияОПользовательскомРасширении.SafeMode);

		ЗащитаОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий;
		ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = ИнформацияОПользовательскомРасширении.UnsafeOperationWarnings;
		РасширениеДляВосстановления.Вставить("ЗащитаОтОпасныхДействий", ЗащитаОтОпасныхДействий);

		РасширениеДляВосстановления.Вставить("Имя", ИнформацияОПользовательскомРасширении.Name);
		РасширениеДляВосстановления.Вставить("ИспользоватьОсновныеРолиДляВсехПользователей",
			ИнформацияОПользовательскомРасширении.UseDefaultRolesForAllUsers);
		РасширениеДляВосстановления.Вставить("ИспользуетсяВРаспределеннойИнформационнойБазе",
			ИнформацияОПользовательскомРасширении.UsedInDistributedInfoBase);
		РасширениеДляВосстановления.Вставить("Синоним", ИнформацияОПользовательскомРасширении.Synonym);
		РасширениеДляВосстановления.Вставить("ИзменяетСтруктуруДанных",
			ИнформацияОПользовательскомРасширении.ModifiesDataStructure);
		РасширениеДляВосстановления.Вставить("УникальныйИдентификатор", XMLЗначение(ТипУникальныйИдентификатор,
			ИнформацияОПользовательскомРасширении.UUID));
		ДанныеФайлаПользовательскогоРасширения =  Новый ДвоичныеДанные(ПутьКФайлуПользовательскогоРасширения);
		РасширениеДляВосстановления.Вставить("Данные", ДанныеФайлаПользовательскогоРасширения);

		РасширенияДляВосстановления.Добавить(РасширениеДляВосстановления);

		УдалитьФайлыВПопытке(ПутьКФайлуПользовательскогоРасширения);

	КонецЦикла;
	
	УдалитьФайлыВПопытке(ПутьКФайлуПользовательскихРасширений);
		
	Возврат РасширенияДляВосстановления;
	
КонецФункции

&НаСервереБезКонтекста
Функция КаркасыРасширенийДляВосстановления(ИмяФайлаНаСервере)
	
	ЧтениеДанныхАрхива = Новый ЧтениеZipФайла(ИмяФайлаНаСервере);
	
	Попытка
		РасширенияДляВосстановления = КаркасыРасширенийДляВосстановленияВнутр(ЧтениеДанныхАрхива);
	Исключение
		ЧтениеДанныхАрхива.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	ЧтениеДанныхАрхива.Закрыть();
	
	Возврат РасширенияДляВосстановления; 
	
КонецФункции

&НаСервереБезКонтекста
Функция КаркасыРасширенийДляВосстановленияВнутр(ЧтениеДанныхАрхива)
	
	РасширенияДляВосстановления = Новый Массив();
	ПутьКФайлуРасширений = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, "Extensions.xml");
	
	Если ПутьКФайлуРасширений = Неопределено Тогда
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлуРасширений);
	ЧтениеXML.ПерейтиКСодержимому();

	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Data" Тогда
		ЧтениеXML.Закрыть();
		УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
		Возврат РасширенияДляВосстановления;
	КонецЕсли;

	Пока ЧтениеXML.Прочитать() Цикл

		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Или ЧтениеXML.Имя <> "Extension" Тогда
			Продолжить;
		КонецЕсли;

		ИзменяетСтруктуруДанных = XMLЗначение(Тип("Булево"), ЧтениеXML.ЗначениеАтрибута("ModifiesDataStructure"));
		Наименование = XMLЗначение(Тип("Строка"), ЧтениеXML.ЗначениеАтрибута("Name"));
		АтрибутКаркас = ЧтениеXML.ЗначениеАтрибута("IsFrame");
		АтрибутИмяФайла = ЧтениеXML.ЗначениеАтрибута("FileName");
		
		Если Не ИзменяетСтруктуруДанных Или АтрибутКаркас = Неопределено Или АтрибутИмяФайла = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ЭтоКаркас = XMLЗначение(Тип("Булево"), АтрибутКаркас);
		ИмяФайлаРасширения = XMLЗначение(Тип("Строка"), АтрибутИмяФайла);

		Если Не ЗначениеЗаполнено(ИмяФайлаРасширения) Или Не ЭтоКаркас Тогда
			Продолжить;
		КонецЕсли;

		ПутьКФайлуРасширения = ИзвлечьФайлИзZipАрхива(ЧтениеДанныхАрхива, ИмяФайлаРасширения);
		Если ПутьКФайлуРасширения = Неопределено Тогда
			ВызватьИсключение СтрШаблон(Нстр("ru = 'Не найден файл данных расширения %1'"), ИмяФайлаРасширения);
		КонецЕсли;

		РасширениеДляВосстановления = Новый Структура;
		РасширениеДляВосстановления.Вставить("Имя", Наименование);
		
		ДанныеФайлаПользовательскогоРасширения = Новый ДвоичныеДанные(ПутьКФайлуРасширения);
		РасширениеДляВосстановления.Вставить("Данные", ДанныеФайлаПользовательскогоРасширения);

		РасширенияДляВосстановления.Добавить(РасширениеДляВосстановления);

		УдалитьФайлыВПопытке(ПутьКФайлуРасширения);
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	УдалитьФайлыВПопытке(ПутьКФайлуРасширений);
	
	Возврат РасширенияДляВосстановления;
	
КонецФункции

&НаСервере
Процедура ОтменитьЗагрузкуНаСервере()
	
	ДоступноСнятиеМонопольнойБлокировки = Истина;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		ЗаданиеЗагрузки = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		
		Если ЗаданиеЗагрузки <> Неопределено И ЗаданиеЗагрузки.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ЗаданиеЗагрузки.Отменить();
		КонецЕсли;
		
		ИдентификаторЗадания = Неопределено;
		ДоступноСнятиеМонопольнойБлокировки = Ложь;
		
	КонецЕсли;

	УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаВременногоХранилища);
	ИмяФайлаВременногоХранилища = "";
				
	Если ДоступноСнятиеМонопольнойБлокировки Тогда
		РаботаВМоделиСервиса.СнятьМонопольнуюБлокировку();
	КонецЕсли;
	
	РаботаВМоделиСервиса.СнятьМонопольнуюБлокировку(Истина);
	УстановленаМонопольнаяБлокировка = Ложь;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВременныеДанныеПослеЗагрузки(ИмяФайлаХранилища)

	Если Не ЗначениеЗаполнено(ИмяФайлаХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыБТС.УдалитьФайлВременногоХранилища(ИмяФайлаХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОшибок

// Показать ошибки предупреждения.
// 
// Параметры:
//  ПараметрыУведомления - см. НовыеПараметрыУведомленияОбОшибкеПредупреждении
&НаКлиенте
Процедура ПоказатьОшибкиПредупреждения(ПараметрыУведомления)
	
	ТекстОшибкиПредупреждения = ПараметрыУведомления.Текст;
	Картинка = ?(ПараметрыУведомления.ЭтоОшибка, БиблиотекаКартинок.Ошибка32, БиблиотекаКартинок.Предупреждение32);
		
	Элементы.ОшибкиПредупрежденияПодсказка.Заголовок = ПараметрыУведомления.Подсказка;
	Элементы.ОшибкиПредупрежденияРекомендация.Заголовок = ПараметрыУведомления.Рекомендация;
	Элементы.ОшибкиПредупрежденияКартинка.Картинка = Картинка;
	Элементы.СтраницыМастераЗагрузки.ТекущаяСтраница = Элементы.СтраницаОшибкиПредупреждения;
	
	Заголовок = ЗаголовокФормыПоИмениСтраницы(
		Элементы.СтраницыМастераЗагрузки.ТекущаяСтраница.Имя,
		ПараметрыУведомления.ЭтоОшибка);
	
	Если ЗначениеЗаполнено(ПараметрыУведомления.ПолныйТекст) Тогда
		ЗаписатьОшибкуВЖурналРегистрации(ПараметрыУведомления.ПолныйТекст);
	КонецЕсли;
	 
КонецПроцедуры

// Новые параметры уведомления об ошибке предупреждении.
// 
// Возвращаемое значение:
//  Структура - Новые параметры уведомления об ошибке предупреждении:
// * ЭтоОшибка - Булево -
// * Текст - Строка -
// * ПолныйТекст - Строка -
// * Подсказка - Строка -
// * Рекомендация - Строка -
&НаКлиенте
Функция НовыеПараметрыУведомленияОбОшибкеПредупреждении()
	
	ПараметрыУведомления = Новый Структура();
	ПараметрыУведомления.Вставить("ЭтоОшибка", Истина);
	ПараметрыУведомления.Вставить("Текст", "");
	ПараметрыУведомления.Вставить("ПолныйТекст", "");
	ПараметрыУведомления.Вставить("Подсказка", "");
	ПараметрыУведомления.Вставить("Рекомендация", "");
	
	Возврат ПараметрыУведомления;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытия = Неопределено)
	
	Если ИмяСобытия = Неопределено Тогда
		ИмяСобытия = ИмяСобытияЖурналаРегистрации();
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьЗагрузкуИЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗагрузкуИЗакрытьФорму()
	
	ОтменитьЗагрузкуНаСервере();
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПрерваннуюПроцедуруЗагрузки()
		
	Если Не Параметры.ПрерванаПроцедураЗагрузки Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗагрузки = Константы.ПараметрыЗапускаИнтерактивнойПроцедурыЗагрузки.Получить().Получить(); // Структура
		
	Если ПараметрыЗагрузки = Неопределено Тогда
		Возврат;	
	КонецЕсли;	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗагрузки);
	
	Если Не ПараметрыЗагрузки.Свойство("НеЗагружатьРасширенияКонфигурации") Тогда
	
		УстаревшиеПараметры = Новый Структура("ЗагружатьРасширенияКонфигурации", Истина);
		ЗаполнитьЗначенияСвойств(УстаревшиеПараметры, ПараметрыЗагрузки);
		
		НеЗагружатьРасширенияКонфигурации = Не УстаревшиеПараметры.ЗагружатьРасширенияКонфигурации;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМонопольнуюБлокировкуИПродолжитьЗагрузку()
	
	УстановитьМонопольнуюБлокировку();
	
	Если УстановленаМонопольнаяБлокировка Тогда
		
		Элементы.СтраницыМастераЗагрузки.ТекущаяСтраница = Элементы.СтраницаОсновная;
		Элементы.Продолжить.Видимость = Ложь;
		
	Иначе
		
		ЭтоПродолжениеЗагрузки = ЗначениеЗаполнено(СписокПользователей);
		
		ЗаполнитьСписокПользователей();
		
		Если ЭтоПродолжениеЗагрузки Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Не все сеансы пользователей завершены'"),
				,
				"СписокПользователей");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Заголовок = ЗаголовокФормыПоИмениСтраницы(Элементы.СтраницыМастераЗагрузки.ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыЭлементыФормы()
	
	ЗапрашиватьПараметрыАдминистрированияИБ = Истина;
	НомерСеансаИнформационнойБазы = НомерСеансаИнформационнойБазы();
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоФайловаяИнформационнаяБаза = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ПараметрыПараллельнойЗагрузки = ВыгрузкаЗагрузкаДанныхСлужебный.ПараметрыПараллельнойВыгрузкиЗагрузкиДанных();
	
	Если ПараметрыПараллельнойЗагрузки.ДостпноИспользование Тогда
		КоличествоЗаданийЗагрузкиДанных = ПараметрыПараллельнойЗагрузки.КоличествоПотоков;
	Иначе
		КоличествоЗаданийЗагрузкиДанных = 1;
		Элементы.КоличествоЗаданийЗагрузкиДанных.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоФайловаяИнформационнаяБаза Или Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		Элементы.СписокПользователейЗавершитьСеанс.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаголовокФормыПоИмениСтраницы(Знач ИмяСтраницы, Знач ОшибкаЗагрузкиДанных = Ложь)
	
	ЗаголовокПоУмолчанию = НСтр("ru = 'Загрузка данных из сервиса'");
	
	Если Не ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Возврат ЗаголовокПоУмолчанию;
	ИначеЕсли ИмяСтраницы = "СтраницаОшибкаБлокировки" Тогда
		Возврат НСтр("ru = 'Ошибка блокировки информационной базы'");
	ИначеЕсли ИмяСтраницы = "СтраницаОсновная" Тогда
		Возврат НСтр("ru = 'Подготовка к загрузке данных'");
	ИначеЕсли ИмяСтраницы = "СтраницаОшибкиПредупреждения" И ОшибкаЗагрузкиДанных Тогда
		Возврат НСтр("ru = 'Ошибка загрузки данных'");
	ИначеЕсли ИмяСтраницы = "СтраницаОшибкиПредупреждения" Тогда
		Возврат НСтр("ru = 'Завершение загрузки данных'");
	Иначе
		Возврат ЗаголовокПоУмолчанию;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПерезапуститьПрограмму()
	
	ПрекратитьРаботуСистемы(Истина);
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьМногопоточность()
	
	Возврат КоличествоЗаданийЗагрузкиДанных > 1;
	
КонецФункции

// Хеш сумма файла.
// 
// Параметры: 
//  ИмяФайла - Строка - Имя файла
// 
// Возвращаемое значение: 
//  Число - Хеш сумма файла
&НаСервереБезКонтекста
Функция ХешСуммаФайла(ИмяФайла)
			
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
	ХешированиеДанных.ДобавитьФайл(ИмяФайла);
	
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

&НаСервере
Процедура УстановитьМонопольнуюБлокировку(ИспользоватьМногопоточность = Ложь)
	
	УстановленаМонопольнаяБлокировка = Ложь;
	
	Попытка
		
		РаботаВМоделиСервиса.УстановитьМонопольнуюБлокировку(ИспользоватьМногопоточность);
		УстановленаМонопольнаяБлокировка = Истина;
		
	Исключение
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось установить монопольную блокировку информационной базы.
				 |Загрузка не сможет начаться, пока другие пользователи работают с информационной базой.
				 |
				 |%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьФайлыВПопытке(ИмяФайла)
	
	Попытка
		
		УдалитьФайлы(ИмяФайла);
		
	Исключение
		
		#Если Сервер Тогда
			
		ИмяСобытия = НСтр("ru = 'Удаление файла.Загрузка данных из сервиса'", ОбщегоНазначения.КодОсновногоЯзыка());
		ТекстОшибки = ТехнологияСервиса.ПодробныйТекстОшибки(ИнформацияОбОшибке());
		ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки, ИмяСобытия);
		
		#КонецЕсли
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСобытияЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Загрузка данных из сервиса'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции

#КонецОбласти

#КонецОбласти
