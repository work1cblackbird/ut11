#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СодержимоеКонстанты = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СодержимоеКонстанты);
	
	СписокУчитываемойПродукцииТребующейОбязательнойПроверкиПриПродажеВРозницу =
		РегистрыСведений.НастройкиУчетаМаркируемойПродукцииИСМП.СписокУчитываемойПродукцииТребующейОбязательнойПроверкиПриПродажеВРозницу();
	
	НастроитьЭлементыФормы();
	// Обновление состояния элементов
	НастроитьФормуПриИзменииЭлементовУправления(СодержимоеКонстанты);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗапрашиватьДанныеСервисаИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапрашиватьКоличествоМерногоТовараПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСДПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСтандартнуюВложенностьПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебныйШтрихкодПечатиУпаковкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьАлфавитКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьСтруктуруКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСтатусыКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьВладельцевКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьРезультатыПроверкиСредствамиККТПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура РежимКонтроляСредствамиККТПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПропускатьПроверкуСредствамиККТЕслиВыполненКонтрольСтатусовПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьМРЦПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастотаОбновленияCDNПлощадокПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяБлокировкиCDNПлощадокПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОтветаCDNПлощадокПриПробитииЧекаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияИдентификатораРазрешительногоРежимаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоКодовВПакетеДляЗапросаСтатусовПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийОЗапретеИзмененияНастройкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВПанельАдминистрированияИСМП" Тогда
		
		ИмяФормыНастройкиИСМП = "Обработка.ПанельАдминистрированияИСМП.Форма.НастройкиИСМП";
		
		ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПриПереходеПоКомментарийОЗапретеИзмененияНастройки(ИмяФормыНастройкиИСМП);
		
		ОткрытьФорму(ИмяФормыНастройкиИСМП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодбиратьКодыМаркировкиВскрытыхПотребительскихУпаковокПоFIFOПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОписанияОповещений

&НаКлиенте
Процедура НастройкаИсключенийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаИсключенийЗавершениеНаСервере(Результат);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция СоответствиеЭлементовВлюченияОтключенияПараметровКонтроля(ВключатьСтатусыИВладельцы = Истина, ВключитьПроверкуККТ = Истина)
	
	ПараметрыКонтроля = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	
	ВозвращаемоеЗначение = Новый Соответствие();
	
	Если ВключатьСтатусыИВладельцы Тогда
		ВозвращаемоеЗначение.Вставить(
			ПараметрыКонтроля.ПараметрыКонтроляСтатусов,
			Элементы.КонтролироватьСтатусыКодовМаркировки.Имя);
		ВозвращаемоеЗначение.Вставить(
			ПараметрыКонтроля.ПараметрыКонтроляВладельцев,
			Элементы.КонтролироватьВладельцевКодовМаркировки.Имя);
	КонецЕсли;
	
	Если ВключитьПроверкуККТ Тогда
		ВозвращаемоеЗначение.Вставить(
			ПараметрыКонтроля.ПараметрыИгнорированияПроверкиККТ,
			Элементы.ИгнорироватьРезультатыПроверкиСредствамиККТ.Имя);
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, НастройкиСканирования);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	НастроитьФормуПриИзменииЭлементовУправления();
	
	Возврат НастройкиСканирования;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, НастройкиСканирования)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоРасширеннаяВерсияГосИС() Тогда
			МодульСобытияФормИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСПереопределяемый");
			МодульСобытияФормИСПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(
				ЭтотОбъект, КонстантаИмя, КонстантаЗначение);
		КонецЕсли;
		
		Если КонтролироватьСтандартнуюВложенность
			И Не НаборКонстант.ЗапрашиватьДанныеСервисаИСМП Тогда
			КонтролироватьСтандартнуюВложенность = Ложь;
			КонстантаИмя = "";
		КонецЕсли;
		
		Если ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП
			И Не НаборКонстант.ЗапрашиватьДанныеСервисаИСМП Тогда
			ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП = Ложь;
			КонстантаИмя = "";
		КонецЕсли;
		
		Если ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП
			И Не НаборКонстант.ЗапрашиватьДанныеСервисаИСМП Тогда
			ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП = Ложь;
			КонстантаИмя = "";
		КонецЕсли;
		
		Если Не НаборКонстант.ЗапрашиватьДанныеСервисаИСМП Тогда
			ЭлементыНастроек = СоответствиеЭлементовВлюченияОтключенияПараметровКонтроля(, Ложь);
			Для Каждого КлючИЗначение Из ЭлементыНастроек Цикл
				ЭтотОбъект[КлючИЗначение.Значение] = Ложь;
			КонецЦикла;
			КонстантаИмя = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонстантаИмя = "" Тогда
		
		Если Не КонтролироватьСтатусыКодовМаркировки
			И КонтролироватьВладельцевКодовМаркировки Тогда
			КонтролироватьВладельцевКодовМаркировки = Ложь;
		КонецЕсли;
		
		Если ИгнорироватьРезультатыПроверкиСредствамиККТ
			И ПропускатьПроверкуСредствамиККТ Тогда
			ПропускатьПроверкуСредствамиККТ = Ложь;
		КонецЕсли;
		
		Если Не (КонтролироватьСтатусыКодовМаркировки Или КонтролироватьВладельцевКодовМаркировки)
			И ПропускатьПроверкуСредствамиККТ Тогда
			ПропускатьПроверкуСредствамиККТ = Ложь;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НастройкиСканирования, ЭтотОбъект);
		
		ЭлементыНастроек = СоответствиеЭлементовВлюченияОтключенияПараметровКонтроля();
		
		Для Каждого КлючИЗначение Из ЭлементыНастроек Цикл
			ГруппаПараметров = НастройкаПараметровСканированияСлужебныйКлиентСервер.ЗначениеГруппыНастроек(
				НастройкиСканирования,
				КлючИЗначение.Ключ);
			ГруппаПараметров.Включено = ЭтотОбъект[КлючИЗначение.Значение];
		КонецЦикла;
		
		КонстантаЗначение = Новый ХранилищеЗначения(НастройкиСканирования);
		Константы.НастройкиСканированияКодовМаркировкиИСМП.Установить(КонстантаЗначение);
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоРасширеннаяВерсияГосИС() Тогда
			МодульСобытияФормИСПереопределяемый = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСПереопределяемый");
			МодульСобытияФормИСПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(
				ЭтотОбъект, "НастройкиСканированияКодовМаркировкиИСМП", Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПриИзменииЭлементовУправления(НастройкиСканирования = Неопределено)
	
	Если НастройкиСканирования = Неопределено Тогда
		НастройкиСканирования = ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки();
	КонецЕсли;
	
	ЭлементыНастроек  = СоответствиеЭлементовВлюченияОтключенияПараметровКонтроля();
	ПараметрыКонтроля = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	
	КонтрольСтатусовТабачнойПродукцииВедется = Ложь;
	
	Для Каждого КлючИЗначение Из ПараметрыКонтроля Цикл
		
		ИмяПараметраНастройки  = КлючИЗначение.Ключ;
		ЭлементФормыИсключения = Элементы[СтрШаблон("Группа%1",    ИмяПараметраНастройки)];
		ЭлементФормыНастройка  = Элементы[СтрШаблон("%1Настройка", ИмяПараметраНастройки)];
		
		ГруппаНастроек = НастройкаПараметровСканированияСлужебныйКлиентСервер.ЗначениеГруппыНастроек(
			НастройкиСканирования,
			ИмяПараметраНастройки);
		
		ПредставленияИсключения = НастройкаПараметровСканированияСлужебныйКлиентСервер.ПредставленияИсключения(
			ГруппаНастроек, 1);
		
		Если ГруппаНастроек.Включено Тогда
			
			Если ЗначениеЗаполнено(ПредставленияИсключения.Полное) Тогда
				Если СтрДлина(ПредставленияИсключения.Краткое) > 40 Тогда
					Если ГруппаНастроек.РежимИсключения Тогда
						ТекстРядомСФлагом = НСтр("ru = 'Настроить исключения'");
					Иначе
						ТекстРядомСФлагом = НСтр("ru = 'Настроить'");
					КонецЕсли;
					ЭлементФормыИсключения.РасширеннаяПодсказка.Заголовок = ПредставленияИсключения.Полное;
					ЭлементФормыИсключения.ОтображениеПодсказки           = ОтображениеПодсказки.ОтображатьСнизу;
				Иначе
					ТекстРядомСФлагом                           = ПредставленияИсключения.Краткое;
					ЭлементФормыИсключения.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
				КонецЕсли;
			Иначе
				ТекстРядомСФлагом = НСтр("ru = '<Все товарные группы и операции>'");
				ЭлементФормыИсключения.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			КонецЕсли;
			
			ЭлементФормыНастройка.Заголовок = Новый ФорматированнаяСтрока(ТекстРядомСФлагом,,,, "Перейти");
			
			// Табачная продукция
			Если ИмяПараметраНастройки = ПараметрыКонтроля.ПараметрыКонтроляСтатусов Тогда
				
				Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции(Ложь, Истина) Цикл
					
					ВедетсяКонтрольСтатусов = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировки(
						ВидПродукции,
						Неопределено);
					ВедетсяКонтрольСтатусов = истина;
					Если ВедетсяКонтрольСтатусов Тогда
						КонтрольСтатусовТабачнойПродукцииВедется = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ЭлементФормыНастройка.Заголовок = "";
			ЭлементФормыИсключения.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
			
		КонецЕсли;
		
		ИмяРеквизитаФормы             = ЭлементыНастроек[ИмяПараметраНастройки];
		ЭтотОбъект[ИмяРеквизитаФормы] = ГруппаНастроек.Включено;
		
	КонецЦикла;
	
	Элементы.КонтролироватьСтатусыКодовМаркировки.Доступность = НаборКонстант.ЗапрашиватьДанныеСервисаИСМП;
	Элементы.ПараметрыКонтроляСтатусовНастройка.Доступность   = НаборКонстант.ЗапрашиватьДанныеСервисаИСМП;
	
	Элементы.КонтролироватьВладельцевКодовМаркировки.Доступность = (НаборКонстант.ЗапрашиватьДанныеСервисаИСМП И КонтролироватьСтатусыКодовМаркировки);
	Элементы.ПараметрыКонтроляВладельцевНастройка.Доступность    = НаборКонстант.ЗапрашиватьДанныеСервисаИСМП;
	
	Элементы.ПропускатьПроверкуСредствамиККТ.Доступность = (Не ИгнорироватьРезультатыПроверкиСредствамиККТ
		И (КонтролироватьСтатусыКодовМаркировки Или КонтролироватьВладельцевКодовМаркировки));
	
	Элементы.ГруппаРаботаСУпаковками.Доступность    = НаборКонстант.ЗапрашиватьДанныеСервисаИСМП;
	Элементы.ГруппаСераяЗона.Доступность            = НаборКонстант.ЗапрашиватьДанныеСервисаИСМП;
	
	Элементы.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП.Доступность = НаборКонстант.ЗапрашиватьДанныеСервисаИСМП
		И КонтрольСтатусовТабачнойПродукцииВедется;
		
	УстановитьВидимостьДоступностьОтПроверкиРозничнымМетодом();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСтатусыКодовМаркировкиУправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыКонтроля = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	
	ОткрытьФормуНастройкиИсключений(ПараметрыКонтроля.ПараметрыКонтроляСтатусов);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьВладельцевКодовМаркировкиУправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыКонтроля = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	
	ОткрытьФормуНастройкиИсключений(ПараметрыКонтроля.ПараметрыКонтроляВладельцев);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыИгнорированияПроверкиККТНастройкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыКонтроля = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	
	ОткрытьФормуНастройкиИсключений(ПараметрыКонтроля.ПараметрыИгнорированияПроверкиККТ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиИсключений(ИмяПараметраНастройки)
	
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ИмяПараметраНастройки", ИмяПараметраНастройки);
	
	ПараметрыКонтроля = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	
	Если ИмяПараметраНастройки = ПараметрыКонтроля.ПараметрыКонтроляВладельцев Тогда
		
		ОграниченияНастроек = НастройкаПараметровСканированияСлужебныйКлиентСервер.ЗначениеГруппыНастроек(
			ОбщегоНазначенияИСМПКлиентСерверПовтИсп.НастройкиСканированияКодовМаркировки(),
			ПараметрыКонтроля.ПараметрыКонтроляСтатусов);
		
		ПараметрыОткрытияФормы.Вставить("ОграниченияНастроек", ОграниченияНастроек);
		
	ИначеЕсли ИмяПараметраНастройки = ПараметрыКонтроля.ПараметрыИгнорированияПроверкиККТ Тогда
		
		ОграниченияНастроек    = НастройкаПараметровСканированияСлужебныйКлиентСервер.НоваяГруппаПараметровНастройки(Ложь);
		ДопустимыеВидыОпераций = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ДопустимыеВидыОпераций();
		ВидыОперацийККТ        = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ДопустимыеВидыОпераций(
			ПараметрыКонтроля.ПараметрыИгнорированияПроверкиККТ);
		
		Для Каждого ЭлементВидаОперации Из ДопустимыеВидыОпераций Цикл
			Если ВидыОперацийККТ.НайтиПоЗначению(ЭлементВидаОперации.Значение) = Неопределено Тогда
				ОграниченияНастроек.Исключения.Вставить(ЭлементВидаОперации.Значение, Новый Соответствие());
			КонецЕсли;
		КонецЦикла;
		
		ОграниченияНастроек.Исключения = НастройкаПараметровСканированияСлужебныйКлиентСервер.ТранспонироватьЗначенияИсключения(
			ОграниченияНастроек.Исключения,
			ДопустимыеВидыОпераций.ВыгрузитьЗначения(),
			ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции());
		
		ПараметрыОткрытияФормы.Вставить("ОграниченияНастроек", ОграниченияНастроек);
		
	КонецЕсли;
	
	НастройкаИсключенийЗавершение = Новый ОписаниеОповещения(
		"НастройкаИсключенийЗавершение",
		ЭтотОбъект);
	
	ОткрытьФорму(
		"ОбщаяФорма.НастройкиКонтроляКодовМаркировки",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		НастройкаИсключенийЗавершение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаИсключенийЗавершениеНаСервере(ДанныеЗавершенияНастройки) Экспорт
	
	ПрименитьЗависимостьНастроек(ДанныеЗавершенияНастройки.ИмяПараметраНастройки, ДанныеЗавершенияНастройки.Настройки);
	
	СохранитьЗначениеРеквизита(ДанныеЗавершенияНастройки.ИмяПараметраНастройки, ДанныеЗавершенияНастройки.Настройки);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	НастроитьФормуПриИзменииЭлементовУправления();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	// МРЦ
	ВозможноВключение              = Истина;
	ВозможноОтключение             = Истина;
	ПричинаНевозможностиВключения  = "";
	ПричинаНевозможностиОтключения = "";
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоРасширеннаяВерсияГосИС() Тогда
		МодульИнтеграцияИСМППереопределяемый = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМППереопределяемый");
		МодульИнтеграцияИСМППереопределяемый.ПриОпределенииВозможностиВключенияОтключенияВеденияУчетаМРЦ(
			ВозможноВключение,
			ПричинаНевозможностиВключения,
			ВозможноОтключение,
			ПричинаНевозможностиОтключения);
	КонецЕсли;
	
	ОписаниеВеденияУчета = Новый Массив;
	ОписаниеВеденияУчета.Добавить(
		НСтр("ru = 'При проверке поступления табачной продукции или при сканировании табачных кодов маркировки'"));
	ОписаниеВеденияУчета.Добавить(" ");
	ОписаниеВеденияУчета.Добавить(
		НСтр("ru = 'МРЦ будет распознаваться из состава кода маркировки или запрашиваться из сервиса ГИС МТ.'"));
	ОписаниеВеденияУчета.Добавить(" ");
	ОписаниеВеденияУчета.Добавить(
		НСтр("ru = 'МРЦ может использоваться при ведении классификаторов номенклатуры или для контроля цены при оформлении розничных продаж.'"));
	
	ВключенаТабачнаяПродукция = ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(
		Перечисления.ВидыПродукцииИС.Табак);
	ВключенаАльтернативнаяТабачнаяПродукция = ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(
		Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
	ВключенаНикотиносодержащаяПродукция = ОбщегоНазначенияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(
		Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция);
	
	Если УчитыватьМРЦ Тогда
		
		Если ВозможноОтключение Тогда
			Элементы.УчитыватьМРЦ.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.УчитыватьМРЦ.ТолькоПросмотр = Истина;
			ОписаниеВеденияУчета.Добавить(Символы.ПС);
			ОписаниеВеденияУчета.Добавить(ПричинаНевозможностиОтключения);
		КонецЕсли;
		
	Иначе
		
		Если ВозможноВключение Тогда
			Элементы.УчитыватьМРЦ.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.УчитыватьМРЦ.ТолькоПросмотр = Истина;
			ОписаниеВеденияУчета.Добавить(Символы.ПС);
			ОписаниеВеденияУчета.Добавить(ПричинаНевозможностиВключения);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.РежимКонтроляСредствамиККТ.СписокВыбора.Очистить();
	РежимыКонтроля          = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.РежимыКонтроляСредствамиККТ();
	ПредставленияПараметров = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПредставленияПараметровСканирования();
	
	Элементы.РежимКонтроляСредствамиККТ.СписокВыбора.Добавить(
		РежимыКонтроля.ПриСканировании,
		ПредставленияПараметров.Получить(РежимыКонтроля.ПриСканировании));
	
	Элементы.РежимКонтроляСредствамиККТ.СписокВыбора.Добавить(
		РежимыКонтроля.ПередПробитиемЧека,
		ПредставленияПараметров.Получить(РежимыКонтроля.ПередПробитиемЧека));
	
	Если Не ЗначениеЗаполнено(РежимКонтроляСредствамиККТ) Тогда
		РежимКонтроляСредствамиККТ = РежимыКонтроля.ПриСканировании;
	КонецЕсли;
	
	Элементы.ГруппаСераяЗона.Видимость = ВключенаТабачнаяПродукция;
	
	ОписаниеВеденияУчета.Добавить(Символы.ПС);
	ОписаниеВеденияУчета.Добавить(НСтр("ru = 'Не поддерживается для альтернативной табачной продукции.'"));
	
	Элементы.УчитыватьМРЦ.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ОписаниеВеденияУчета);
	Элементы.УчитыватьМРЦ.Видимость = ВключенаТабачнаяПродукция;
	
	Элементы.ГруппаТабачнаяПродукция.Видимость =
		ВключенаТабачнаяПродукция Или ВключенаАльтернативнаяТабачнаяПродукция Или ВключенаНикотиносодержащаяПродукция;
	
	Элементы.ГруппаНастройкиРаботыСМернымТоваром.Видимость = ОбщегоНазначенияИС.ЕстьПродукцияТребующаяВзвешивания();
	
	ВедетсяУчетВидовПродукцииСЧастичнымВыбытием = Ложь;
	
	Для Каждого ВидПродукции Из ОбщегоНазначенияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
		Если ОбщегоНазначенияИСКлиентСерверПовтИсп.ПоддерживаетсяЧастичноеВыбытие(ВидПродукции) Тогда
			ВедетсяУчетВидовПродукцииСЧастичнымВыбытием = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ПодбиратьКодыМаркировкиВскрытыхПотребительскихУпаковокПоFIFO.Видимость = ВедетсяУчетВидовПродукцииСЧастичнымВыбытием;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьЗависимостьНастроек(ИмяПараметраНастройки, НастройкиСканирования)
	
	ПараметрыКонтроля = НастройкаПараметровСканированияСлужебныйКлиентСерверПовтИсп.ПараметрыКонтроля();
	
	ЗависимыеНастройки = Новый Массив();
	
	Если ИмяПараметраНастройки = ПараметрыКонтроля.ПараметрыКонтроляСтатусов Тогда
		ЗависимыеНастройки.Добавить(ПараметрыКонтроля.ПараметрыКонтроляВладельцев);
	КонецЕсли;
	
	Если ЗависимыеНастройки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИмяПараметраНастройкиЗависимый Из ЗависимыеНастройки Цикл
		
		ОграниченияНастроек = НастройкаПараметровСканированияСлужебныйКлиентСервер.ЗначениеГруппыНастроек(
			НастройкиСканирования,
			ИмяПараметраНастройки);
		
		ТекущаяГруппаНастроек = НастройкаПараметровСканированияСлужебныйКлиентСервер.ЗначениеГруппыНастроек(
			НастройкиСканирования,
			ИмяПараметраНастройкиЗависимый);
		
		НастройкаПараметровСканированияСлужебныйКлиентСервер.ПрименитьОграничение(
			ТекущаяГруппаНастроек,
			ОграниченияНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьОтПроверкиРозничнымМетодом()
	
	КоличествоВключенныхТоварныхГрупп           = СписокУчитываемойПродукцииТребующейОбязательнойПроверкиПриПродажеВРозницу.Количество();
	ВедетсяУчетТГТребующихОбязательногоКонтроля = КоличествоВключенныхТоварныхГрупп > 0;
	
	Элементы.ЗапрашиватьДанныеСервисаИСМП.ТолькоПросмотр            = ВедетсяУчетТГТребующихОбязательногоКонтроля И НаборКонстант.ЗапрашиватьДанныеСервисаИСМП;
	Элементы.КонтролироватьВладельцевКодовМаркировки.ТолькоПросмотр = ВедетсяУчетТГТребующихОбязательногоКонтроля И КонтролироватьВладельцевКодовМаркировки;
	Элементы.КонтролироватьСтатусыКодовМаркировки.ТолькоПросмотр    = ВедетсяУчетТГТребующихОбязательногоКонтроля И КонтролироватьСтатусыКодовМаркировки;
	Элементы.ГруппаЗапретИзмененияНастройки.Видимость               = ВедетсяУчетТГТребующихОбязательногоКонтроля;
	Элементы.ГруппаОписаниеСеройЗоны.Видимость                      = ВедетсяУчетТГТребующихОбязательногоКонтроля
		И Не ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП
		И Не ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП;
	
	Если ВедетсяУчетТГТребующихОбязательногоКонтроля Тогда
	
		РазделительТекстов         = ?(КоличествоВключенныхТоварныхГрупп = 1, Символы.НПП, ", ");
		СписокТоварныхГруппСтрокой = "";
		
		ШаблонТекстаКомментария =
			НСтр("ru = 'Согласно ФЗ № 381-ФЗ ""Об основах торговой деятельности в Российской Федерации"" по товарным группам %1 вводится обязательная проверка кодов маркировки через сервис.
			|Коды маркировки, которые не прошли проверку, не могут быть проданы в розницу.'");
			
		ТекстСеройЗоны = НСтр("ru = 'Проверка на вхождение в серую зону будет проводиться при розничных продажах.'");
		
		Для Каждого ОбязательнаяГруппа Из СписокУчитываемойПродукцииТребующейОбязательнойПроверкиПриПродажеВРозницу Цикл
			
			СписокТоварныхГруппСтрокой = СписокТоварныхГруппСтрокой
				+ ?(ЗначениеЗаполнено(СписокТоварныхГруппСтрокой), РазделительТекстов, "")
				+ ОбязательнаяГруппа.Представление;
		
		КонецЦикла;
		
		ТекстКомментария = СтрШаблон(ШаблонТекстаКомментария, СписокТоварныхГруппСтрокой);
		
		СтрокаЗавершенияПодсказки = НСтр("ru = 'Ознакомиться со сроками наступления разрешительного режима по товарным группам можно перейдя в панель'");
		СтрокаГиперссылка         = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Интеграция с ИС МП (обувь, одежда, табак…)'"),,
			ЦветаСтиля.ЦветГиперссылкиГосИС,,
			"ПерейтиВПанельАдминистрированияИСМП");
		
		МассивСтрокФорматированногоТекста = Новый Массив;
		
		МассивСтрокФорматированногоТекста.Добавить(ТекстКомментария);
		МассивСтрокФорматированногоТекста.Добавить(Символы.ПС);
		МассивСтрокФорматированногоТекста.Добавить(СтрокаЗавершенияПодсказки);
		МассивСтрокФорматированногоТекста.Добавить(Символы.НПП);
		МассивСтрокФорматированногоТекста.Добавить(СтрокаГиперссылка);
		
		Элементы.КомментарийОЗапретеИзмененияНастройки.Заголовок = Новый ФорматированнаяСтрока(МассивСтрокФорматированногоТекста);
		Элементы.КомментарийОСеройЗоне.Заголовок                 = ТекстСеройЗоны;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти