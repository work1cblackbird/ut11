
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Элементы.ЛокализацияСтраницаККМOffline.Видимость = Ложь;
	НастроитьЭлементыФормыЛокализация();
	
	РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
	
	Весы.Параметры.УстановитьЗначениеПараметра("ТекущееРабочееМесто", РабочееМесто);
	КассыККМ.Параметры.УстановитьЗначениеПараметра("ТекущееРабочееМесто", РабочееМесто);
	
	Элементы.КассыККМКассыТоварыЗагрузитьОтчетОРозничныхПродажах.Доступность = ПравоДоступа("Добавление", Метаданные.Документы.ОтчетОРозничныхПродажах);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СкладККМOffline = Настройки.Получить("СкладККМOffline");
	СкладВесы = Настройки.Получить("СкладВесы");
	
	ПравилоОбменаВесы = Настройки.Получить("ПравилоОбменаВесы");
	ПравилоОбменаККМOffline = Настройки.Получить("ПравилоОбменаККМOffline");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ, "Склад", СкладККМOffline, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладККМOffline));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ, "ПравилоОбмена", ПравилоОбменаККМOffline, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПравилоОбменаККМOffline));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Весы, "Склад", СкладВесы, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладВесы));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Весы, "ПравилоОбмена", ПравилоОбменаВесы, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПравилоОбменаВесы));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Весы, "ПодключеноКТекущемуРабочемуМесту", Истина, ВидСравненияКомпоновкиДанных.Равно,, ВсеОборудованиеВесы = Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ, "ПодключеноКТекущемуРабочемуМесту", Истина, ВидСравненияКомпоновкиДанных.Равно,, ВсеОборудованиеККМOffline = Ложь);
	
КонецПроцедуры // ПриЗагрузкеДанныхИзНастроекНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененоРабочееМестоТекущегоСеанса" Тогда
		
		РабочееМесто = МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента();
		
		Весы.Параметры.УстановитьЗначениеПараметра("ТекущееРабочееМесто", РабочееМесто);
		КассыККМ.Параметры.УстановитьЗначениеПараметра("ТекущееРабочееМесто", РабочееМесто);
		
	ИначеЕсли ИмяСобытия = "Запись_ПравилаОбменаСПодключаемымОборудованиемOffline"
		ИЛИ ИмяСобытия = "Запись_КодыТоваровПодключаемогоОборудования" Тогда
		
		Элементы.Весы.Обновить();
		Элементы.КассыККМ.Обновить();
		
	ИначеЕсли ИмяСобытия = "ВыполненОбменСПодключаемымОборудованиемOffline" Тогда
		
		Элементы.Весы.Обновить();
		Элементы.КассыККМ.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВесыПосмотретьСписокТоваров(Команда)
	
	ТекущиеДанные = Элементы.Весы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		ПараметрыФормы = Новый Структура("Устройство, ПравилоОбмена", ТекущиеДанные.ПодключаемоеОборудование, ТекущиеДанные.ПравилоОбмена);
		ОткрытьФорму("РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Форма.СписокТоваров", ПараметрыФормы, УникальныйИдентификатор);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыНазначитьПравилоДляВыделенных(Команда)
	
	Устройства = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.Весы.ВыделенныеСтроки Цикл
		Устройства.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Если Устройства.Количество() > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТипПодключаемогоОборудования", ПредопределенноеЗначение("Перечисление.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток"));
		ПравилоОбмена = Неопределено;

		ОткрытьФорму("Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline.ФормаВыбора", ПараметрыОткрытия, УникальныйИдентификатор,,,, Новый ОписаниеОповещения("ВесыНазначитьПравилоДляВыделенныхЗавершение", ЭтотОбъект, Новый Структура("Устройства", Устройства)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыНазначитьПравилоДляВыделенныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Устройства = ДополнительныеПараметры.Устройства;
    
    
    ПравилоОбмена = Результат;
    
    Если ЗначениеЗаполнено(ПравилоОбмена) Тогда
        НазначитьПравилоДляВыделенныхУстройствНаСервере(Устройства, ПравилоОбмена);
    КонецЕсли;
    
    Элементы.Весы.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ВесыТоварыВыгрузить(Команда)
	
	ТекущиеДанные = Элементы.Весы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		Устройства = Новый Массив;
		Устройства.Добавить(ТекущиеДанные.ПодключаемоеОборудование);
		ПодключаемоеОборудованиеOfflineКлиент.ВыгрузитьТоварыВВесы(Неопределено, Устройства);

	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыТоварыОчистить(Команда)
	
	ТекущиеДанные = Элементы.Весы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		Устройства = Новый Массив;
		Устройства.Добавить(ТекущиеДанные.ПодключаемоеОборудование);
		ПодключаемоеОборудованиеOfflineКлиент.ОчиститьТоварыВВесах(Неопределено, Устройства);
	
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыТоварыПерезагрузить(Команда)
	
	ТекущиеДанные = Элементы.Весы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		Устройства = Новый Массив;
		Устройства.Добавить(ТекущиеДанные.ПодключаемоеОборудование);
		ПодключаемоеОборудованиеOfflineКлиент.ВыгрузитьПолныйСписокТоваровВВесы(Неопределено, Устройства);
	
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВесыОткрытьПравилоОбмена(Команда)
	
	ТекущиеДанные = Элементы.Весы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ПравилоОбмена);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНастройки(Команда)
	
//++ Локализация
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные = Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияОбмена", ЭтотОбъект);
		МенеджерОфлайнОборудованияКлиент.НачатьВыгрузкуНастроекНаККМ(ТекущиеДанные.ПодключаемоеОборудование, УникальныйИдентификатор, ОписаниеОповещения);
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура КассыПосмотретьСписокТоваров(Команда)
	
//++ Локализация
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		ПараметрыФормы = Новый Структура("Устройство, ПравилоОбмена", ТекущиеДанные.ПодключаемоеОборудование, ТекущиеДанные.ПравилоОбмена);
		ОткрытьФорму("РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Форма.СписокТоваров", ПараметрыФормы, УникальныйИдентификатор);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура КассыНазначитьПравилоДляВыделенных(Команда)
	
//++ Локализация
	Устройства = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.КассыККМ.ВыделенныеСтроки Цикл
		Устройства.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	
	Если Устройства.Количество() > 0 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ТипПодключаемогоОборудования", ПредопределенноеЗначение("Перечисление.ТипыОфлайнОборудования.ККМ"));
		ПравилоОбмена = Неопределено;

		ОткрытьФорму("Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline.ФормаВыбора", ПараметрыОткрытия, УникальныйИдентификатор,,,, Новый ОписаниеОповещения("КассыНазначитьПравилоДляВыделенныхЗавершение", ЭтотОбъект, Новый Структура("Устройства", Устройства)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура КассыТоварыВыгрузить(Команда)
	
//++ Локализация
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияОбмена", ЭтотОбъект);
		МенеджерОфлайнОборудованияКлиент.НачатьВыгрузкуДанныхНаККМ(ТекущиеДанные.ПодключаемоеОборудование, УникальныйИдентификатор, ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура КассыТоварыОчистить(Команда)
	
//++ Локализация
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияОбмена", ЭтотОбъект);
		МенеджерОфлайнОборудованияКлиент.НачатьОчисткуПрайсЛистаНаККМ(ТекущиеДанные.ПодключаемоеОборудование, УникальныйИдентификатор, ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура КассыТоварыПерезагрузить(Команда)
	
//++ Локализация
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияОбмена", ЭтотОбъект);
		МенеджерОфлайнОборудованияКлиент.НачатьПолнуюВыгрузкуПрайсЛистаНаККМ(ТекущиеДанные.ПодключаемоеОборудование, УникальныйИдентификатор, ОписаниеОповещения);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура КассыТоварыЗагрузитьОтчетОРозничныхПродажах(Команда)
	
//++ Локализация
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ЭтоЗагрузка");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияОбмена", ЭтотОбъект, ДополнительныеПараметры);
		МенеджерОфлайнОборудованияКлиент.НачатьЗагрузкуДанныхИзККМ(ТекущиеДанные.ПодключаемоеОборудование, УникальныйИдентификатор, ОписаниеОповещения);
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура КассыОткрытьПравилоОбмена(Команда)
	
//++ Локализация
	ТекущиеДанные = Элементы.КассыККМ.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПравилоОбмена) Тогда
		
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ПравилоОбмена);
		
	Иначе
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Команда не может быть выполнена для указанного объекта'"));
		
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийОбмен(Команда)
	
	ПараметрыФормы = Новый Структура("РабочееМесто", РабочееМесто);
	ОткрытьФорму("ОбщаяФорма.АвтоматическийОбменСПодключаемымОборудованиемOffline", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладВесыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Весы, "Склад", СкладВесы, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладВесы));
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбменаВесыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Весы, "ПравилоОбмена", ПравилоОбменаВесы, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПравилоОбменаВесы));
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеВесыПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Весы, "ПодключеноКТекущемуРабочемуМесту", Истина, ВидСравненияКомпоновкиДанных.Равно,, ВсеОборудованиеВесы = Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкладККМOfflineПриИзменении(Элемент)
	
//++ Локализация
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ, "Склад", СкладККМOffline, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(СкладККМOffline));
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ПравилоОбменаККМOfflineПриИзменении(Элемент)
	
//++ Локализация
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ, "ПравилоОбмена", ПравилоОбменаККМOffline, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПравилоОбменаККМOffline));
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ОборудованиеККМOfflineПриИзменении(Элемент)
	
//++ Локализация
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(КассыККМ, "ПодключеноКТекущемуРабочемуМесту", Истина, ВидСравненияКомпоновкиДанных.Равно,, ВсеОборудованиеККМOffline = Ложь);
//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура КассыККМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
//++ Локализация
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Поле = Элементы.КассыККМДатаЗагрузки И ЗначениеЗаполнено(ТекущиеДанные.ДатаЗагрузки) Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("КассаККМ", ТекущиеДанные.КассаККМ);
		ОткрытьФорму("Документ.ОтчетОРозничныхПродажах.ФормаСписка", ПараметрыФормы,, ЭтотОБъект.УникальныйИдентификатор);
		
	КонецЕсли;
//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НазначитьПравилоДляВыделенныхУстройствНаСервере(Устройства, ПравилоОбмена)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого Устройство Из Устройства Цикл
			
			УстройствоОбъект = Устройство.ПолучитьОбъект(); // СправочникОбъект.ПодключаемоеОборудование, СправочникОбъект.ОфлайнОборудование
			УстройствоОбъект.ПравилоОбмена = ПравилоОбмена;
			УстройствоОбъект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыЛокализация()
	
	//++ Локализация
	Элементы.ЛокализацияСтраницаККМOffline.Видимость = Истина;
	
	ПараметрыСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	ПараметрыСписка.ТекстЗапроса = "ВЫБРАТЬ
	|	СправочникОфлайнОборудование.Ссылка КАК ПодключаемоеОборудование,
	|	СправочникОфлайнОборудование.УзелИнформационнойБазы.ДатаВыгрузки КАК ДатаВыгрузки,
	|	СправочникОфлайнОборудование.УзелИнформационнойБазы.ДатаЗагрузки КАК ДатаЗагрузки,
	|	СправочникОфлайнОборудование.УзелИнформационнойБазы.ВыгрузкаВыполнена КАК ВыгрузкаВыполнена,
	|	СправочникОфлайнОборудование.УзелИнформационнойБазы.ЗагрузкаВыполнена КАК ЗагрузкаВыполнена,
	|	ВЫБОР
	|		КОГДА СправочникОфлайнОборудование.УзелИнформационнойБазы.ВыгрузкаВыполнена
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|			КОГДА СправочникОфлайнОборудование.УзелИнформационнойБазы.ДатаВыгрузки > ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинкиВыгрузки,
	|	СправочникОфлайнОборудование.ПравилоОбмена КАК ПравилоОбмена,
	|	КассыККМ.КассаККМ КАК КассаККМ,
	|	ВЫБОР
	|		КОГДА 1 В
	|			(ВЫБРАТЬ
	|				1 КАК Поле1
	|			ИЗ
	|				РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline.Изменения КАК КодыТоваров
	|			ГДЕ
	|				КодыТоваров.ПравилоОбмена = СправочникОфлайнОборудование.ПравилоОбмена
	|				И КодыТоваров.Узел = СправочникОфлайнОборудование.УзелИнформационнойБазы)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Изменения,
	|	СправочникОфлайнОборудование.ПравилоОбмена.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА СправочникОфлайнОборудование.РабочееМесто = &ТекущееРабочееМесто
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПодключеноКТекущемуРабочемуМесту
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК СправочникОфлайнОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиРМК.КассыККМ КАК КассыККМ
	|		ПО (КассыККМ.ПодключаемоеОборудование = СправочникОфлайнОборудование.Ссылка)
	|		И КассыККМ.Ссылка.РабочееМесто = &ТекущееРабочееМесто
	|ГДЕ
	|	СправочникОфлайнОборудование.ТипОфлайнОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыОфлайнОборудования.ККМ)";
	
	ПараметрыСписка.ОсновнаяТаблица = "Справочник.ОфлайнОборудование";
	ПараметрыСписка.ДинамическоеСчитываниеДанных = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.КассыККМ, ПараметрыСписка);

	//-- Локализация
	
КонецПроцедуры

//++ Локализация
&НаКлиенте
Процедура КассыНазначитьПравилоДляВыделенныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Устройства = ДополнительныеПараметры.Устройства;
    
    ПравилоОбмена = Результат;
    
    Если ЗначениеЗаполнено(ПравилоОбмена) Тогда
        НазначитьПравилоДляВыделенныхУстройствНаСервере(Устройства, ПравилоОбмена);
    КонецЕсли;
    
    Элементы.КассыККМ.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияОбмена(Результат, ДополнительныеПараметры) Экспорт
	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Результат") Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ЭтоЗагрузка") Тогда
			
			ТекстСообщения = ?(Результат.Результат, НСтр("ru='Данные успешно загружены'"), НСтр("ru='При загрузке данных произошла ошибка'"));
		Иначе
			ТекстСообщения = ?(Результат.Результат, НСтр("ru='Данные успешно выгружены'"), НСтр("ru='При выгрузке данных произошла ошибка'"));
		КонецЕсли;
			
		Если Результат.Свойство("ОписаниеОшибки") И Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
		Иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	Иначе
		Возврат;
	КонецЕсли;
	
	Элементы.КассыККМ.Обновить();
	
КонецПроцедуры

//-- Локализация

#КонецОбласти
