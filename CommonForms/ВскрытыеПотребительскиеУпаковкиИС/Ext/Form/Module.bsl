#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПодсистемы = Параметры.ИмяПодсистемы;
	
	УстановитьУсловноеОформление();
	
	ЗаполнитьПараметрыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	УстановитьБыстрыйОтборСервер();
	
	Если ИмяПодсистемы = "ИСМП" Тогда
		МодульИнтеграцияИСМП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
		МодульИнтеграцияИСМП.ЗаполнитьСписокВыбораДальнейшееДействие(
			Элементы.СтраницаОформленоОтборДальнейшееДействие.СписокВыбора,
			ВсеТребующиеДействия(),
			ВсеТребующиеОжидания());
	КонецЕсли;
	
	ИнтеграцияИС.УстановитьПризнакПравоИзмененияФормыСписка(ЭтотОбъект);
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеСпискаДокументовИС(
		ЭтотОбъект,
		"ИСМП",
		ИмяСобытия,
		Параметр,
		Источник);
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если ВводДоступен() И ИмяПодсистемы = "ИСМП" Тогда
		ОчиститьСообщения();
		Если Организации.Количество() <> 1 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Для сканирования в форме списка необходимо выбрать одну организацию.'"),,
				"ОрганизацииПредставление");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыСканирования = ПараметрыСканированияШтрихкода();
	СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Источник, Событие, Данные, ПараметрыСканирования);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницаОформленоОтборСтатусПриИзменении(Элемент)
	
	ИспользоватьОтборПоСтатусуИСМП = (ЗначениеЗаполнено(Статус)
		И Статус <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ПодключеноКОборудованию"));
	ИспользоватьОтборПоСтатусуПодключения = (Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПодключениеКОборудованиюРозливаИСМП.ПодключеноКОборудованию"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "СтатусИСМП", Статус, ВидСравненияКомпоновкиДанных.Равно,, ИспользоватьОтборПоСтатусуИСМП);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Статус",
		ПредопределенноеЗначение("Перечисление.СтатусыВскрытыхПотребительскихУпаковокИС.Подключено"),
		ВидСравненияКомпоновкиДанных.Равно,,
		ИспользоватьОтборПоСтатусуПодключения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОформленоОтборДальнейшееДействиеПриИзменении(Элемент)
	
	УстановитьОтборПоДальнейшемуДействиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОформленоОтборОтветственныйПриИзменении(Элемент)
	
	ОтветственныйОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборОрганизацииЗавершение = Новый ОписаниеОповещения("Подключаемый_ВыборОрганизацииЗавершение", ЭтотОбъект);
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Оформлено",, ВыборОрганизацииЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборОрганизацииЗавершение = Новый ОписаниеОповещения("Подключаемый_ВыборОрганизацииЗавершение", ЭтотОбъект);
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Оформлено",, ВыборОрганизацииЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииПриИзменении(Элемент)
	
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организации, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияПриИзменении(Элемент)
	
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организация, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "Оформлено");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Список.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВскрытияПотребительскойУпаковки(Элементы.Список.ТекущиеДанные.КодМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДействиеКомандыОтключить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ЦветТребуетВнимания   = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	ЦветНеТребуетВнимания = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	ЦветПроблема          = ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеГосИС;
	ТекущаяДата           = НачалоДня(ТекущаяДатаСеанса());
	
	Для Каждого СтрокаСписка Из Строки Цикл
		
		ОформлениеСрокРеализацииСтрокой = СтрокаСписка.Значение.Оформление.Получить("СрокРеализацииСтрокой");
		
		Если СтрокаСписка.Значение.Данные.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или СтрокаСписка.Значение.Данные.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках
			Или СтрокаСписка.Значение.Данные.ВидПродукции = Перечисления.ВидыПродукцииИС.ПустаяСсылка() Тогда
			
			Если ОформлениеСрокРеализацииСтрокой <> Неопределено Тогда
				
				СрокРеализации = СтрокаСписка.Значение.Данные.СрокРеализации;
				
				Если ЗначениеЗаполнено(СрокРеализации) Тогда
					
					ДанныеПредставленияСрока = ИнтеграцияИСКлиентСервер.ДанныеПредставленияСрокаГодности(
						СрокРеализации,
						ТекущаяДата);
					ОформлениеСрокРеализацииСтрокой.УстановитьЗначениеПараметра("Текст", ДанныеПредставленияСрока.Представление);
					
					Если ДанныеПредставленияСрока.ОсталосьДней < 0 Тогда
						ОформлениеСрокРеализацииСтрокой.УстановитьЗначениеПараметра("ЦветТекста", ЦветТребуетВнимания);
					ИначеЕсли ДанныеПредставленияСрока.ОсталосьДней = 0 Тогда
						ОформлениеСрокРеализацииСтрокой.УстановитьЗначениеПараметра("ЦветТекста", ЦветПроблема);
					КонецЕсли;
				
				Иначе
					
					ОформлениеСрокРеализацииСтрокой.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<не требуется>'"));
					ОформлениеСрокРеализацииСтрокой.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеТребуетВнимания);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ОформлениеСрокРеализацииСтрокой <> Неопределено Тогда
				ОформлениеСрокРеализацииСтрокой.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<не требуется>'"));
				ОформлениеСрокРеализацииСтрокой.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеТребуетВнимания);
			КонецЕсли;
			
			ОформлениеАдресПодключенияСтрокой = СтрокаСписка.Значение.Оформление.Получить("АдресПодключенияСтрокой");
			Если ОформлениеАдресПодключенияСтрокой <> Неопределено Тогда
				ОформлениеАдресПодключенияСтрокой.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<не требуется>'"));
				ОформлениеАдресПодключенияСтрокой.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеТребуетВнимания);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВвестиКодМаркировки(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить(Команда)
	
	ОткрытьФормуВскрытияПотребительскойУпаковки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКодовМаркировки(Команда)
	
	Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Организация", ПерваяВыбраннаяОрганизация(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("Штрихкоды",   КодыМаркировкиВыделенныхСтрок());
	
	ОткрытьФорму(
		"Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,
		Новый УникальныйИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	
	ДействиеКомандыОтключить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанные(Команда)
	
	ИнтеграцияИСМПКлиент.ПодготовитьСообщенияКПередаче(
		Элементы.Список,
		ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ВыполнитьОбмен(ЭтотОбъект, Организации.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокументы(Команда)
	
	ДокументыКАрхивированию = ДокументыКАрхивированию();
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, ДокументыКАрхивированию, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьПараметрыПриСоздании()
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС);
	Заголовок      = ИнтеграцияИСПовтИсп.ПредставленияВскрытыхПотребительскихУпаковок(ИмяПодсистемы).ЗаголовокСписка;
	ЭтоИСМП        = (ИмяПодсистемы = "ИСМП");
	ВидыПродукции  = ИнтеграцияИСВызовСервера.ВидыПродукцииИспользующиеВскрытыеПотребительскихУпаковок(ЭтоИСМП, Не ЭтоИСМП);
	УстановитьТекстЗапросаДинамическогоСписка();
	
	СписокВидовПродукции = Новый СписокЗначений();
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
			ИспользуетсяПередачаДанных = Истина;
		КонецЕсли;
		СписокВидовПродукции.Добавить(ВидПродукции);
	КонецЦикла;
		
	Если ЭтоИСМП И ИспользуетсяПередачаДанных Тогда
		СписокВидовПродукции.Добавить(Перечисления.ВидыПродукцииИС.ПустаяСсылка());
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "ВидПродукции", СписокВидовПродукции, ВидСравненияКомпоновкиДанных.ВСписке);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаДинамическогоСписка()
	
	Если ИмяПодсистемы = "ИСМП" Тогда
		Список.ТекстЗапроса = "
		|	ВЫБРАТЬ
		|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки           КАК КодМаркировки,
		|	ВскрытыеПотребительскиеУпаковкиИС.Организация             КАК Организация,
		|	ВскрытыеПотребительскиеУпаковкиИС.Подразделение           КАК Подразделение,
		|	ВскрытыеПотребительскиеУпаковкиИС.Комментарий             КАК Комментарий,
		|	ВскрытыеПотребительскиеУпаковкиИС.Статус                  КАК Статус,
		|	ВскрытыеПотребительскиеУпаковкиИС.Документ                КАК Документ,
		|	ВскрытыеПотребительскиеУпаковкиИС.СрокРеализации          КАК СрокРеализации,
		|	ВскрытыеПотребительскиеУпаковкиИС.ДатаПодключения         КАК ДатаПодключения,
		|	ВскрытыеПотребительскиеУпаковкиИС.Ответственный           КАК Ответственный,
		|	ВскрытыеПотребительскиеУпаковкиИС.АдресПодключенияСтрокой КАК АдресПодключенияСтрокой,
		|	ВскрытыеПотребительскиеУпаковкиИС.ОбъемСлива              КАК ОбъемСлива,
		|	ВскрытыеПотребительскиеУпаковкиИС.Склад                   КАК Склад,
		|	ВскрытыеПотребительскиеУпаковкиИС.Остаток                 КАК Остаток,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20))                             КАК СрокРеализацииСтрокой,
		|	ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции            КАК ВидПродукции,
		|	ШтрихкодыУпаковок.Номенклатура                            КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика                          КАК Характеристика,
		|	ШтрихкодыУпаковок.Серия                                   КАК Серия,
		|	ЕСТЬNULL(СтатусыДокументовИСМП.Статус, НЕОПРЕДЕЛЕНО)      КАК СтатусИСМП,
		|	ЕСТЬNULL(ВскрытыеПотребительскиеУпаковкиИС.Документ.Проведен, ЛОЖЬ)                КАК Проведен,
		|	ЕСТЬNULL(СтатусыДокументовИСМП.ДальнейшееДействие1,
		|			ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)) КАК ДальнейшееДействиеИСМП1,
		|	ЕСТЬNULL(СтатусыДокументовИСМП.ДальнейшееДействие2,
		|			ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)) КАК ДальнейшееДействиеИСМП2,
		|	ЕСТЬNULL(СтатусыДокументовИСМП.ДальнейшееДействие3,
		|			ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)) КАК ДальнейшееДействиеИСМП3,
		|	ВскрытыеПотребительскиеУпаковкиИС.КодФИАС                                          КАК КодФИАС
		|ИЗ
		|	РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС КАК ВскрытыеПотребительскиеУпаковкиИС
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
		|	ПО ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки = ШтрихкодыУпаковок.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
		|	ПО ВскрытыеПотребительскиеУпаковкиИС.Документ = СтатусыДокументовИСМП.Документ";
	Иначе
		Список.ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки           КАК КодМаркировки,
		|	ВскрытыеПотребительскиеУпаковкиИС.Организация             КАК Организация,
		|	ВскрытыеПотребительскиеУпаковкиИС.Подразделение           КАК Подразделение,
		|	ВскрытыеПотребительскиеУпаковкиИС.Комментарий             КАК Комментарий,
		|	ВскрытыеПотребительскиеУпаковкиИС.Статус                  КАК Статус,
		|	ВскрытыеПотребительскиеУпаковкиИС.Документ                КАК Документ,
		|	ВскрытыеПотребительскиеУпаковкиИС.СрокРеализации          КАК СрокРеализации,
		|	ВскрытыеПотребительскиеУпаковкиИС.ДатаПодключения         КАК ДатаПодключения,
		|	ВскрытыеПотребительскиеУпаковкиИС.Ответственный           КАК Ответственный,
		|	ВскрытыеПотребительскиеУпаковкиИС.АдресПодключенияСтрокой КАК АдресПодключенияСтрокой,
		|	ВскрытыеПотребительскиеУпаковкиИС.ОбъемСлива              КАК ОбъемСлива,
		|	ВскрытыеПотребительскиеУпаковкиИС.Склад                   КАК Склад,
		|	ЕСТЬNULL(ОписаниеНоменклатурыИС.ЕмкостьПотребительскойУпаковки, 0) - ЕСТЬNULL(АкцизныеМаркиЕГАИС.КоличествоЧастичногоВыбытия, 0) КАК Остаток,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20))                             КАК СрокРеализацииСтрокой,
		|	ВскрытыеПотребительскиеУпаковкиИС.ВидПродукции            КАК ВидПродукции,
		|	ШтрихкодыУпаковок.Номенклатура                            КАК Номенклатура,
		|	ШтрихкодыУпаковок.Характеристика                          КАК Характеристика,
		|	ШтрихкодыУпаковок.Серия                                   КАК Серия,
		|	НЕОПРЕДЕЛЕНО                                              КАК СтатусИСМП,
		|	НЕОПРЕДЕЛЕНО                                              КАК ДальнейшееДействиеИСМП1,
		|	НЕОПРЕДЕЛЕНО                                              КАК ДальнейшееДействиеИСМП2,
		|	НЕОПРЕДЕЛЕНО                                              КАК ДальнейшееДействиеИСМП3,
		|	ЛОЖЬ                                                      КАК Проведен,
		|	ВскрытыеПотребительскиеУпаковкиИС.КодФИАС                 КАК КодФИАС
		|ИЗ
		|	РегистрСведений.ВскрытыеПотребительскиеУпаковкиИС КАК ВскрытыеПотребительскиеУпаковкиИС
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
		|	ПО ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки = ШтрихкодыУпаковок.Ссылка
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатурыИС
		|	ПО ОписаниеНоменклатурыИС.Номенклатура = ШтрихкодыУпаковок.Номенклатура
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМаркиЕГАИС
		|	ПО АкцизныеМаркиЕГАИС.Статус В (
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии),
		|			ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВскрытаяБутылка))
		|		И АкцизныеМаркиЕГАИС.АкцизнаяМарка = ВскрытыеПотребительскиеУпаковкиИС.КодМаркировки
		|		И АкцизныеМаркиЕГАИС.КоличествоЧастичногоВыбытия > 0";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДокументыКАрхивированию()
	
	ДокументыКАрхивированию = Новый Массив;
	
	КодыМаркировки = Новый Массив;
	Для Каждого ЭлементСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		Если ТипЗнч(ЭлементСписка) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		КодыМаркировки.Добавить(ЭлементСписка.КодМаркировки);
	КонецЦикла;
	
	Подключения = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(КодыМаркировки);
	
	Для Каждого КлючИЗначение Из Подключения Цикл
		Если ЗначениеЗаполнено(КлючИЗначение.Значение.Документ) Тогда
			ДокументыКАрхивированию.Добавить(КлючИЗначение.Значение.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыКАрхивированию;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Если Не ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс()
		Или Не ИспользуетсяПередачаДанных Тогда
		Элементы.Подразделение.Видимость = Ложь;
	КонецЕсли;
	
	ЭтоИСМП  = (ИмяПодсистемы = "ИСМП");
	ЭтоЕГАИС = (ИмяПодсистемы = "ЕГАИС");
	
	Элементы.Характеристика.Видимость = ИнтеграцияИС.ХарактеристикиИспользуются();
	Элементы.Серия.Видимость          = ИнтеграцияИС.СерииИспользуются();
	
	Элементы.ПередатьДанные.Видимость                           = ИспользуетсяПередачаДанных;
	Элементы.СписокКонтекстноеМенюПередатьДанные.Видимость      = ИспользуетсяПередачаДанных;
	Элементы.СписокВыполнитьОбмен.Видимость                     = ИспользуетсяПередачаДанных;
	Элементы.Статус.Видимость                                   = ИспользуетсяПередачаДанных;
	Элементы.ДальнейшееДействиеИСМП1.Видимость                  = ИспользуетсяПередачаДанных;
	Элементы.ОбъемСлива.Видимость                               = ИспользуетсяПередачаДанных;
	Элементы.СтраницаОформленоОтборДальнейшееДействие.Видимость = ИспользуетсяПередачаДанных;
	Элементы.СтраницаОформленоОтборСтатус.Видимость             = ИспользуетсяПередачаДанных;
	Элементы.СрокРеализации.Видимость                           = ИспользуетсяПередачаДанных;
	Элементы.СрокРеализацииСтрокой.Видимость                    = ИспользуетсяПередачаДанных;
	Элементы.Комментарий.Видимость                              = ИспользуетсяПередачаДанных;
	Элементы.АдресПодключенияСтрокой.Видимость                  = ИспользуетсяПередачаДанных;
	
	Элементы.ОформленоОрганизации.Видимость                         = ЭтоИСМП;
	Элементы.ОформленоОрганизация.Видимость                         = ЭтоИСМП;
	Элементы.СписокПроверкаКодовМаркировки.Видимость                = ЭтоИСМП;
	Элементы.СписокКонтекстноеМенюПроверкаКодовМаркировки.Видимость = ЭтоИСМП;
	
	Элементы.СписокПодключить.Доступность                = ПравоИзменения;
	Элементы.СписокОтключить.Доступность                 = ПравоИзменения;
	Элементы.СписокКонтекстноеМенюПодключить.Доступность = ПравоИзменения;
	Элементы.СписокКонтекстноеМенюОтключить.Доступность  = ПравоИзменения;
	
	Если Не ИспользуетсяПередачаДанных Тогда
		Элементы.СписокПодключить.Заголовок                = НСтр("ru = 'Вскрыть'");
		Элементы.СписокКонтекстноеМенюПодключить.Заголовок = НСтр("ru = 'Вскрыть'");
		Элементы.ДатаПодключения.Заголовок                 = НСтр("ru = 'Дата вскрытия'");
		Если ЭтоЕГАИС Тогда
			Элементы.КодМаркировки.Заголовок = НСтр("ru = 'Акцизная марка'");
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоЕГАИС Тогда
		Элементы.Остаток.Заголовок = НСтр("ru = 'Остаток, мл.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭтоИСМП = (ИмяПодсистемы = "ИСМП");
	
	Если ЭтоИСМП Тогда
		
		// Ошибки
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СтатусИСМП");
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
		
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.ЗагрузитьЗначения(Документы["ПодключениеКегаКОборудованиюРозливаИСМП"].СтатусыОшибок());
		ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиОшибкаПередачиГосИС);
		
		// Требуется ожидание
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.ПутьКДанным);
		ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
		
		СписокДействий = Новый СписокЗначений;
		СписокДействий.ЗагрузитьЗначения(Документы["ПодключениеКегаКОборудованиюРозливаИСМП"].ВсеТребующиеОжидания()); 
		ОтборЭлемента.ПравоеЗначение = СписокДействий;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиПередаетсяГосИС);
	
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.Статус.ПутьКДанным);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыВскрытыхПотребительскихУпаковокИС.Отключено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
		//
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействиеИСМП1.ПутьКДанным);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Перечисления["ДальнейшиеДействияПоВзаимодействиюИСМП"].ПередайтеДанные;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Передайте отчет о подключении'"));
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыСканированияШтрихкода()
	
	Если ПараметрыСканирования = Неопределено Тогда
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыСканирования.Организация = ПерваяВыбраннаяОрганизация(ЭтотОбъект);
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВскрытьПотребительскуюУпаковкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВопросОтключитьПотребительскуюУпаковкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> "Отключить" Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьВскрытуюПотребительскуюУпаковкуНаСервере();
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтключитьПотребительскуюУпаковкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
	КонецЕсли;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияИСМПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияИСМПКлиент");
	МодульИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организации, Истина, "Оформлено");
	
КонецПроцедуры

&НаСервере
Функция КодыМаркировкиВыделенныхСтрок()
	
	ВозвращаемоеЗначение = Новый Массив;
	
	Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ВозвращаемоеЗначение.Добавить(СтрокаСписка.КодМаркировки);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПерваяВыбраннаяОрганизация(Форма)
	Если Форма.Организации.Количество() Тогда
		Возврат Форма.Организации[0].Значение;
	ИначеЕсли ЗначениеЗаполнено(Форма.Организации) Тогда
		Возврат Форма.Организации;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ДействиеКомандыОтключить()
	
	Если Не ПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	КоличествоВыделенныхСтрок = Элементы.Список.ВыделенныеСтроки.Количество();
	Если КоличествоВыделенныхСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВопросОтключениеВскрытойПотребительскойУпаковкиЗавершение = Новый ОписаниеОповещения("Подключаемый_ВопросОтключитьПотребительскуюУпаковкуЗавершение", ЭтотОбъект);
	
	КнопкиДиалога = Новый СписокЗначений();
	КнопкиДиалога.Добавить("Отключить", НСтр("ru = 'Отключить'"));
	КнопкиДиалога.Добавить("Отмена",    НСтр("ru = 'Отмена'"));
	ПоказатьВопрос(
		ВопросОтключениеВскрытойПотребительскойУпаковкиЗавершение,
		СтрШаблон(НСтр("ru = 'Отключить коды маркировки по выделенными строкам (%1)?'"), КоличествоВыделенныхСтрок),
		КнопкиДиалога,,
		"Отключить");
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВскрытуюПотребительскуюУпаковкуНаСервере()
	
	ТаблицаКодовМаркировки = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.НоваяТаблицаОтключенияВскрытыхПотребительскихУпаковок();
	Для Каждого ВыделеннаяСтрока Из Элементы.Список.ВыделенныеСтроки Цикл
		НоваяСтрока = ТаблицаКодовМаркировки.Добавить();
		НоваяСтрока.КодМаркировки = ВыделеннаяСтрока.КодМаркировки;
	КонецЦикла;
	
	Результат = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ОтключитьВскрытыеПотребительскиеУпаковки(ТаблицаКодовМаркировки);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#Область ОтборДальнейшиеДействия

&НаСервере
Функция ВсеТребующиеДействия()
	
	Если ИмяПодсистемы = "ИСМП" Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ПодключениеКегаКОборудованиюРозливаИСМП");
		Возврат МенеджерДокумента.ВсеТребующиеДействия();
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВсеТребующиеОжидания()
	
	Если ИмяПодсистемы = "ИСМП" Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ПодключениеКегаКОборудованиюРозливаИСМП");
		Возврат МенеджерДокумента.ВсеТребующиеОжидания();
	Иначе
		Возврат Новый Массив();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоДальнейшемуДействиюСервер()
	
	МодульИнтеграцияИСМП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
	МодульИнтеграцияИСМП.УстановитьОтборПоДальнейшемуДействию(
		Список, ДальнейшееДействие, ВсеТребующиеДействия(), ВсеТребующиеОжидания());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБыстрыйОтборСервер()
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("Организации", Организации);
		
		Если ЗначениеЗаполнено(Организации) Тогда
			ИнтеграцияИСМПКлиентСервер.УстновитьОтборПоОрганизацииИПустомуЗначению(ЭтотОбъект);
			ОрганизацииПредставление = Строка(Организации);
		КонецЕсли;
		
		ИнтеграцияИС.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Ответственный", Ответственный, СтруктураБыстрогоОтбора);
		
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам();
	
	МодульИнтеграцияИСМП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
	Если МодульИнтеграцияИСМП.НеобходимОтборПоДальнейшемуДействиюПриСозданииНаСервере(ДальнейшееДействие, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоДальнейшемуДействиюСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам()
	
	МодульСобытияФормИСМП = ОбщегоНазначения.ОбщийМодуль("СобытияФормИСМП");
	МодульСобытияФормИСМП.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам(ЭтотОбъект, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОтборПриИзменении()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
КонецПроцедуры

#КонецОбласти

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкоды

//@skip-warning
&НаСервере
Функция Подключаемый_ОбработатьВводШтрихкода(ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ДанныеШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект,
		ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(РезультатВыбораДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбораДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВыбораДанныеШтрихкода.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская") Тогда
		
		ОбработатьШтрихкодКодаМаркировки(РезультатВыбораДанныеШтрихкода, ДополнительныеПараметры);
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Недопустимый формат штрихкода'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкодКодаМаркировки(РезультатВыбораДанныеШтрихкода, ДополнительныеПараметры)
	
	ДанныеДляОбработки = ДанныеДляОбработкиКодаМаркировки(РезультатВыбораДанныеШтрихкода.ШтрихкодУпаковки);
	
	Если ДанныеДляОбработки.КлючЗаписи <> Неопределено Тогда
		Элементы.Список.ТекущаяСтрока = ДанныеДляОбработки.КлючЗаписи;
	КонецЕсли;
	
	Если ПравоИзменения Или ДанныеДляОбработки.КлючЗаписи <> Неопределено Тогда
		ОткрытьФормуВскрытияПотребительскойУпаковки(ДанныеДляОбработки.КодМаркировки);
	ИначеЕсли Не ПравоИзменения И ДанныеДляОбработки.КлючЗаписи = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Отсутсвуют права доступа для вскрытия потребительской упаковки. Обратитесь к администратору.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляОбработкиКодаМаркировки(КодМаркировки)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("КлючЗаписи",    Неопределено);
	ВозвращаемоеЗначение.Вставить("КодМаркировки", КодМаркировки);
	
	ДанныеПодключения = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.ВскрытыеПотребительскиеУпаковкиПоКодуМаркировки(КодМаркировки)[КодМаркировки];
	
	Если ДанныеПодключения <> Неопределено Тогда
		ДанныеКлюча = Новый Структура("КодМаркировки", КодМаркировки);
		ВозвращаемоеЗначение.КлючЗаписи = РегистрыСведений.ВскрытыеПотребительскиеУпаковкиИС.СоздатьКлючЗаписи(ДанныеКлюча);
	КонецЕсли;
	
	ШтрихкодированиеИСВызовСервера.ОчиститьКэшМаркируемойПродукции(КэшМаркируемойПродукции);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВскрытияПотребительскойУпаковки(КодМаркировки = Неопределено)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("Подключаемый_ВскрытьПотребительскуюУпаковкуЗавершение", ЭтотОбъект);
	
	ПараметрыОткрытия = ИнтеграцияИСКлиент.ПараметрыОткрытияФормыВскрытияПотребительскойУпаковки();
	ПараметрыОткрытия.ПараметрыСканирования = ПараметрыСканированияШтрихкода();
	ПараметрыОткрытия.ИмяПодсистемы         = ИмяПодсистемы;
	ПараметрыОткрытия.КодМаркировки         = КодМаркировки;
	ПараметрыОткрытия.ОповещениеОЗакрытии   = ОповещениеОЗакрытии;
	
	ИнтеграцияИСКлиент.ОткрытьФормуВскрытияПотребительскойУпаковки(ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(РезультатВыбораДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	Если Организации.Количество() <> 1 И ИмяПодсистемы = "ИСМП" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для сканирования в форме списка необходимо выбрать одну организацию.'"),,
			"ОрганизацииПредставление");
		Возврат;
	КонецЕсли;
	
	ПараметрыСканированияЛокальные = ПараметрыСканированияШтрихкода();
	
	Штрихкод = "";
	Если РезультатВыбораДанныеШтрихкода.Свойство("ФорматBase64")
		И РезультатВыбораДанныеШтрихкода.ФорматBase64 Тогда
		Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(РезультатВыбораДанныеШтрихкода.Штрихкод);
	Иначе
		Штрихкод = РезультатВыбораДанныеШтрихкода.Штрихкод;
	КонецЕсли;
	
	ДанныеРазбора = РазборКодаМаркировкиИССлужебныйКлиент.РазобратьКодМаркировки(
		Штрихкод,
		ПараметрыСканированияЛокальные.ДопустимыеВидыПродукции);
	
	Если ДанныеРазбора <> Неопределено Тогда
		ЯвляетсяПотребительскойУпаковкой = Ложь;
		Для Каждого ВидПродукции Из ПараметрыСканированияЛокальные.ДопустимыеВидыПродукции Цикл
			Если ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукции] <> Неопределено
				И ДанныеРазбора.ВидыУпаковокПоВидамПродукции[ВидПродукции].Найти(
				ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Потребительская")) <> Неопределено Тогда
				ЯвляетсяПотребительскойУпаковкой = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЯвляетсяПотребительскойУпаковкой Тогда
			ТекстОшибки = НСтр("ru = 'Штрихкод не является штрихкодом потребительской упаковки'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ОбработатьДанныеШтрихкода(
		"ПоискПоШтрихкодуЗавершение", ЭтотОбъект, РезультатВыбораДанныеШтрихкода, ПараметрыСканированияЛокальные);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#КонецОбласти
