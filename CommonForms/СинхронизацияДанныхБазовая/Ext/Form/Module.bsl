
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УзелПланаОбмена     = Параметры.УзелПланаОбмена;
	НавигационнаяСсылка = "e1cib/app/ОбщаяФорма.СинхронизацияДанныхБазовая";
	
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		Элементы.СоставОтправляемыхДанных.Видимость      = Ложь;
		Элементы.УдалитьНастройкуСинхронизации.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьСостояниеУзла();
	
	Если Не РольДоступнаДобавлениеИзменениеОбменовДанными 
		Или ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.ПрефиксИБ.Видимость = Ложь;
	Иначе
		ПрефиксИБ = ОбменДаннымиСервер.ПрефиксИнформационнойБазы();
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеМонитора", 60);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыполненОбменДанными"
		Или ИмяСобытия = "Запись_СценарииОбменовДанными"
		Или ИмяСобытия = "Запись_УзелПланаОбмена"
		Или ИмяСобытия = "ЗакрытаФормаПомощникаСопоставленияОбъектов"
		Или ИмяСобытия = "ЗакрытаФормаПомощникаСозданияОбменаДанными"
		Или ИмяСобытия = "ЗакрытаФормаРезультатовОбменаДанными" Тогда
		
		// Обновляем данные монитора
		ОбновитьДанныеМонитора();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбменДанными(Команда)
	
	ОбновитьДанныеМонитора();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УзелОбмена", УзелПланаОбмена);
	ДополнительныеПараметры.Вставить("АвтоматическаяСинхронизация", Истина);
	ДополнительныеПараметры.Вставить("ИнтерактивнаяОтправка", Ложь);
	
	ОписаниеПродолжения = Новый ОписаниеОповещения("ПродолжитьВыполнениеСинхронизации", ЭтотОбъект, ДополнительныеПараметры);
	ПроверитьСовместимостьПравилКонвертации(УзелПланаОбмена, ОписаниеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбменДаннымиИнтерактивно(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УзелОбмена", УзелПланаОбмена);
	ДополнительныеПараметры.Вставить("ИнтерактивнаяОтправка", Истина);
	
	ОписаниеПродолжения = Новый ОписаниеОповещения("ПродолжитьВыполнениеСинхронизации", ЭтотОбъект, ДополнительныеПараметры);
	
	ПроверитьСовместимостьПравилКонвертации(УзелПланаОбмена, ОписаниеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьСценарииОбменаДанными(Команда)
	ОбменДаннымиКлиент.ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(УзелПланаОбмена, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРезультатыОднаСинхронизация(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УзелПланаОбмена", УзелПланаОбмена);
	ОткрытьФорму("РегистрСведений.РезультатыОбменаДанными.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	ОбновитьДанныеМонитора();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУзелИнформационнойБазы(Команда)
	
	Если НастройкаУзлаЗавершена Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ", УзелПланаОбмена);
		
		ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаУзла", ПараметрыФормы, ЭтаФорма);
		
	Иначе
		
		ПараметрыФормыПомощника = Новый Структура();
		ПараметрыФормыПомощника.Вставить("ИмяПланаОбмена",         "СинхронизацияДанныхЧерезУниверсальныйФормат");
		ПараметрыФормыПомощника.Вставить("ИдентификаторНастройки", ИдентификаторНастройкиОбменаБП30());
		ПараметрыФормыПомощника.Вставить("УзелОбмена",             УзелПланаОбмена);
			
		ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.НастройкаСинхронизации", ПараметрыФормыПомощника, ЭтаФорма, ,
			, , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкуСинхронизации(Команда)
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("УзелОбмена", УзелПланаОбмена);
	ПослеЗакрытияФормыУдаленияУзла = Новый ОписаниеОповещения("ПослеЗакрытияФормыУдаленияУзла", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.УдалениеНастройкиСинхронизации", 
		ПараметрыПомощника, ЭтаФорма,,,, ПослеЗакрытияФормыУдаленияУзла, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелПланаОбмена, ЭтотОбъект, "ЗагрузкаДанных");
КонецПроцедуры	

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелПланаОбмена, ЭтотОбъект, "ВыгрузкаДанных");
КонецПроцедуры	

&НаКлиенте
Процедура СоставОтправляемыхДанных(Команда)
	ОбменДаннымиКлиент.ОткрытьСоставОтправляемыхДанных(УзелПланаОбмена);
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыУдаленияУзла(Результат, ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеСинхронизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ИнтерактивнаяОтправка Тогда
		
		ОбменДаннымиКлиент.ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(ДополнительныеПараметры.УзелОбмена, ЭтотОбъект);
		
	Иначе
		
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(ДополнительныеПараметры.УзелОбмена,
			ЭтотОбъект,, ДополнительныеПараметры.АвтоматическаяСинхронизация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСовместимостьПравилКонвертации(Знач ИмяПланаОбмена, ОбработкаПродолжения)
	
	ОписаниеОшибки = Неопределено;
	
	Если ПравилаКонвертацииСовместимыСТекущейВерсией(ИмяПланаОбмена, ОписаниеОшибки) Тогда
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
	Иначе
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ПерейтиКЗагрузкеПравил", НСтр("ru = 'Загрузить правила'"));
		Если ОписаниеОшибки.ВидОшибки <> "НекорректнаяКонфигурация" Тогда
			Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		КонецЕсли;
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
		ДополнительныеПараметры.Вставить("ИмяПланаОбмена",       ИмяПланаОбмена);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиПравилКонвертацииНаСовместимость", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыФормы.Картинка                             = ОписаниеОшибки.Картинка;
		ПараметрыФормы.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		
		Если ОписаниеОшибки.ВидОшибки = "НекорректнаяКонфигурация" Тогда
			ПараметрыФормы.Заголовок = НСтр("ru = 'Синхронизация данных не может быть выполнена'");
		Иначе
			ПараметрыФормы.Заголовок = НСтр("ru = 'Синхронизация данных может быть выполнена некорректно'");
		КонецЕсли;
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ОписаниеОшибки.ТекстОшибки, Кнопки, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПравилКонвертацииНаСовместимость(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Значение = "Продолжить" Тогда
			
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаПродолжения);
			
		ИначеЕсли Результат.Значение = "ПерейтиКЗагрузкеПравил" Тогда
			
			ОбменДаннымиКлиент.ЗагрузитьПравилаСинхронизацииДанных(ДополнительныеПараметры.ИмяПланаОбмена);
			
		КонецЕсли; // При "Отмена" ничего не делаем.
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезконтекста
Функция ИдентификаторНастройкиОбменаБП30()
	
	Возврат ОбменДаннымиЛокализация.ИдентификаторНастройкиОбменаБазовойУТБП30();
	
КонецФункции

&НаСервере
Функция ПравилаКонвертацииСовместимыСТекущейВерсией(ИмяПланаОбмена, ОписаниеОшибки)
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(ИмяПланаОбмена);
	ИнформацияОПравилах = Неопределено;
	
	Если ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(ИмяПланаОбмена, "ПредупреждатьОНесоответствииВерсийПравилОбмена")
		И ПравилаКонвертацииЗагруженыИзФайла(ИмяПланаОбмена, ИнформацияОПравилах) Тогда
		
	ИмяКонфигурацииИзПравил = ВРег(ИнформацияОПравилах.ИмяКонфигурации);
	ИмяКонфигурацииИнформационнойБазы = СтрЗаменить(ВРег(Метаданные.Имя), "БАЗОВАЯ", "");
	
	Если ИмяКонфигурацииИзПравил <> ИмяКонфигурацииИнформационнойБазы Тогда
			
			ОписаниеОшибки = Новый Структура;
			ОписаниеОшибки.Вставить("ТекстОшибки", НСтр("ru = 'Синхронизация данных не может быть выполнена, так как используются правила, предназначенные для программы ""%1"". Следует использовать правила из конфигурации или загрузить корректный комплект правил из файла.'"));
			ОписаниеОшибки.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки.ТекстОшибки, ИнформацияОПравилах.СинонимКонфигурацииВПравилах);
			ОписаниеОшибки.Вставить("ВидОшибки", "НекорректнаяКонфигурация");
			ОписаниеОшибки.Вставить("Картинка", БиблиотекаКартинок.Ошибка32);
			Возврат Ложь;
			
		КонецЕсли;
		
		ВерсияВПравилахБезСборки    = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ИнформацияОПравилах.ВерсияКонфигурации);
		ВерсияКонфигурацииБезСборки = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(Метаданные.Версия);
		РезультатСравнения          = ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияВПравилахБезСборки, ВерсияКонфигурацииБезСборки);
		
		Если РезультатСравнения <> 0 Тогда
			
			Если РезультатСравнения < 0 Тогда
				
				ТекстОшибки = НСтр("ru = 'Синхронизация данных может быть выполнена некорректно, так как используются правила, предназначенные для предыдущей версии программы ""%1"" (%2). Рекомендуется использовать правила из конфигурации или загрузить комплект правил, предназначенный для текущей версии программы (%3).'");
				ВидОшибки = "УстаревшаяВерсияКонфигурации";
				
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Синхронизация данных может быть выполнена некорректно, так как используются правила, предназначенные для более новой версии программы ""%1"" (%2). Рекомендуется обновить версию программы или использовать комплект правил, предназначенный для текущей версии программы (%3).'");
				ВидОшибки = "УстаревшиеПравила";
				
			КонецЕсли;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Метаданные.Синоним, ВерсияВПравилахБезСборки, ВерсияКонфигурацииБезСборки);
			
			ОписаниеОшибки = Новый Структура;
			ОписаниеОшибки.Вставить("ТекстОшибки", ТекстОшибки);
			ОписаниеОшибки.Вставить("ВидОшибки", ВидОшибки);
			ОписаниеОшибки.Вставить("Картинка", БиблиотекаКартинок.Предупреждение32);
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПравилаКонвертацииЗагруженыИзФайла(ИмяПланаОбмена, ИнформацияОПравилах)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПравилаДляОбменаДанными.ПравилаЗачитанные,
		|	ПравилаДляОбменаДанными.ВидПравил
		|ИЗ
		|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
		|ГДЕ
		|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
		|	И ПравилаДляОбменаДанными.ИсточникПравил = ЗНАЧЕНИЕ(Перечисление.ИсточникиПравилДляОбменаДанными.Файл)
		|	И ПравилаДляОбменаДанными.ПравилаЗагружены = ИСТИНА
		|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)");
	
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		СтруктураПравил = Выборка.ПравилаЗачитанные.Получить().Конвертация;
		
		ИнформацияОПравилах = Новый Структура;
		ИнформацияОПравилах.Вставить("ИмяКонфигурации",              СтруктураПравил.Источник);
		ИнформацияОПравилах.Вставить("ВерсияКонфигурации",           СтруктураПравил.ВерсияКонфигурацииИсточника);
		ИнформацияОПравилах.Вставить("СинонимКонфигурацииВПравилах", СтруктураПравил.СинонимКонфигурацииИсточника);
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция СостояниеСинхронизацииДанных(СтрокаПриложение)
	
	Состояние = Новый Структура;
	Состояние.Вставить("Представление", "");
	Состояние.Вставить("Картинка",      0);
	
	Если Не СтрокаПриложение.НастройкаЗавершена Тогда
		Состояние.Представление = НСтр("ru = 'Настройка синхронизации данных не завершена'");
		Состояние.Картинка = 3;
		
		Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
			Состояние.Представление = НСтр("ru = 'Настройка синхронизации данных еще завершена, получены данные для сопоставления'");
		КонецЕсли;
	Иначе
		Если СтрокаПриложение.ДатаНачалаПоследнейЗагрузки > СтрокаПриложение.ДатаОкончанияПоследнейЗагрузки Тогда
			Состояние.Представление = НСтр("ru = 'Загрузка данных...'");
			Состояние.Картинка = 4;
		ИначеЕсли СтрокаПриложение.ДатаНачалаПоследнейВыгрузки > СтрокаПриложение.ДатаОкончанияПоследнейВыгрузки Тогда
			Состояние.Представление = НСтр("ru = 'Выгрузка данных...'");
			Состояние.Картинка = 4;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаПриложение.ДатаПоследнегоЗапуска) Тогда
			
			Состояние.Представление = НСтр("ru = 'Не запускалась'");
			
			Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
				Состояние.Представление = НСтр("ru = 'Получены данные для сопоставления'");
			КонецЕсли;
			
		Иначе
			Состояние.Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Прошлый запуск: %1'"),
				СтрокаПриложение.ПредставлениеДатыПоследнегоЗапуска);
				
			Если СтрокаПриложение.ПолученоСообщениеДляСопоставленияДанных Тогда
				Состояние.Представление = НСтр("ru = 'Получены данные для сопоставления'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Состояние;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеМонитора()
	
	ОбновитьСостояниеУзла();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеУзла(ТолькоОбновлениеСписка = Ложь)
	
	НастройкаУзлаЗавершена = ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(УзелПланаОбмена);
	
	// Выполняем обновление состояния узлов
	ПланыОбменаБСП        = ОбменДаннымиПовтИсп.ПланыОбменаБСП();
	ТаблицаМонитораОбмена = ОбменДаннымиСервер.ТаблицаМонитораОбменаДанными(ПланыОбменаБСП, "Код");
	
	Если ТаблицаМонитораОбмена.Количество() = 0 Тогда
		УзелПланаОбмена = Неопределено;
		Возврат;
	КонецЕсли;
	
	СостояниеНастроеннойСинхронизацииДанных = ТаблицаМонитораОбмена[0];
	
	ПредставлениеСостоянияУзлаПланаОбмена            = СостояниеСинхронизацииДанных(СостояниеНастроеннойСинхронизацииДанных);
	Элементы.НадписьСостояниеСинхронизации.Заголовок = ПредставлениеСостоянияУзлаПланаОбмена.Представление;
	Элементы.ДатаУспешнойЗагрузки.Заголовок          = СостояниеНастроеннойСинхронизацииДанных.ПредставлениеДатыПоследнейУспешнойЗагрузки;
	Элементы.ДатаУспешнойВыгрузки.Заголовок          = СостояниеНастроеннойСинхронизацииДанных.ПредставлениеДатыПоследнейУспешнойВыгрузки;
	
	Если ЗначениеЗаполнено(СостояниеНастроеннойСинхронизацииДанных.ДатаПоследнегоЗапуска) Тогда
		
		КартинкаСтатусВыгрузки = КартинкаРезультатаВыполнения(СостояниеНастроеннойСинхронизацииДанных.РезультатПоследнейВыгрузкиДанных);
			
		Если Не СостояниеНастроеннойСинхронизацииДанных.ПолученоСообщениеДляСопоставленияДанных Тогда
			КартинкаСтатусЗагрузки = КартинкаРезультатаВыполнения(СостояниеНастроеннойСинхронизацииДанных.РезультатПоследнейЗагрузкиДанных);
		КонецЕсли;
		
	КонецЕсли;
		
	Если СостояниеНастроеннойСинхронизацииДанных.ПолученоСообщениеДляСопоставленияДанных Тогда
		// Если получены данные для выполнения сопоставление, отображаем соответствующую дату получения сообщения.
		//СтрокаПриложение.ПредставлениеДатыПоследнейУспешнойЗагрузки = СтрокаПриложение.ПредставлениеДатыСообщенияДляСопоставленияДанных;
		//СтрокаПриложение.СостояниеЗагрузкиКартинка = 5;
	КонецЕсли;
		
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция КартинкаРезультатаВыполнения(РезультатВыполнения)
	
	//Если РезультатВыполнения = 2 Тогда
	//	Возврат 3; // выполнено с предупреждениями
	//ИначеЕсли РезультатВыполнения = 1 Тогда
	//	Возврат 2; // ошибка
	//ИначеЕсли РезультатВыполнения = 0 Тогда
	//	Возврат 0; // успешно
	//КонецЕсли;
	
	// без статуса
	Возврат 0;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	Элементы.НастройкиСинхронизацииИРасписание.Доступность = НастройкаУзлаЗавершена;
	Элементы.ГруппаСтатусВыгрузкиЗагрузки.Доступность      = НастройкаУзлаЗавершена;
	Элементы.ВыполнитьОбменДанными.Доступность             = НастройкаУзлаЗавершена;
	Элементы.ВыполнитьОбменДаннымиИнтерактивно.Доступность = НастройкаУзлаЗавершена;
	Элементы.СоставОтправляемыхДанных.Доступность          = НастройкаУзлаЗавершена;
	Элементы.НастройкиСинхронизацииИРасписание.Доступность = НастройкаУзлаЗавершена;
	
КонецПроцедуры	

#КонецОбласти