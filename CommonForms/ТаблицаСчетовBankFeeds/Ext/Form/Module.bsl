   
#Область ОбработчикиСобытийФормы
   
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация = Параметры.Организация;
	РезультатОтветаОтСервисаНаСписокСчетов = Параметры.РезультатОтветаОтСервиса;
	Результат = ПолучитьИзВременногоХранилища(РезультатОтветаОтСервисаНаСписокСчетов.АдресРезультата);
	Банк = Результат.ПараметрыЗаполнения.Банк;;
	Организация = Результат.ПараметрыЗаполнения.Организация;
	Сервис = Результат.ПараметрыЗаполнения.Сервис;
	
	Для Каждого ТекущаяСтрокаТаблицаСчетовИзСервиса Из Результат.ТаблицаСчетов Цикл
		
		НоваяСтрока = ТаблицаСчетов.Добавить();
		НоваяСтрока.Счет = ТекущаяСтрокаТаблицаСчетовИзСервиса.Счет;
		НоваяСтрока.ИдентификаторСчета = ТекущаяСтрокаТаблицаСчетовИзСервиса.ИдентификаторСчета;
		НоваяСтрока.ДатаСоздания = ТекущаяСтрокаТаблицаСчетовИзСервиса.ДатаСоздания;
		НоваяСтрока.Валюта = ТекущаяСтрокаТаблицаСчетовИзСервиса.Валюта;
		НоваяСтрока.ИмяСчета = ТекущаяСтрокаТаблицаСчетовИзСервиса.ИмяСчета;
		НоваяСтрока.Баланс = Число(ТекущаяСтрокаТаблицаСчетовИзСервиса.Баланс);
		
	КонецЦикла;

	НайтиСчетаВПрограмме();
	
    ЭлементУсловие= УсловноеОформление.Элементы.Добавить();
    ЭлементУсловие.Использование = Истина;
    ЭлементУсловие.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",  Истина);

	ГруппаОтбора =  ЭлементУсловие.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
    ЭлементОтбор                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСчетов.УжеДобавленВ1С");
    ЭлементОтбор.ПравоеЗначение = Истина; 
    ЭлементОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбор.Использование  = Истина;
    
    ЭлементОтбор                = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТаблицаСчетов.ПодключенКСервису");
    ЭлементОтбор.ПравоеЗначение = Истина; 
    ЭлементОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбор.Использование  = Истина;

	ОформляемоеПоле      = ЭлементУсловие.Поля.Элементы.Добавить();
    ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТаблицаСчетов");	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ДобавитьБанковскийСчет(Банк, Счет, КодВалютыБуквенный, ИдентификаторСчета)
	
	Валюта = НайтиВалюту(КодВалютыБуквенный);
	
	НайденныйОбъект = НайтиБанковскийСчет(Счет, Валюта, Организация);
	
	Если НайденныйОбъект.Пустая() Тогда  
		РасчетныйСчет = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
	Иначе
		РасчетныйСчет = НайденныйОбъект.ПолучитьОбъект();
		Попытка
			РасчетныйСчет.Заблокировать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось изменить расчетный счет: %1'"), РасчетныйСчет);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;	
		
	КонецЕсли;	
		
	РасчетныйСчет.Владелец = Организация;
	РасчетныйСчет.Банк = Банк; 
	РасчетныйСчет.НомерСчета = Счет;
	РасчетныйСчет.ЭтоIBAN = Истина;
	РасчетныйСчет.ВалютаДенежныхСредств = Валюта;  
	РасчетныйСчет.ТипСчета = Перечисления.ТипыБанковскихСчетов.Расчетный;
	РасчетныйСчет.ОбменСБанкомВключен = Истина;
	РасчетныйСчет.ИспользоватьОбменСБанкомBankFeeds = Истина; 
	РасчетныйСчет.ИдентификаторСчетаBankFeeds = ИдентификаторСчета;
		
	Если ДенежныеСредстваКлиентСервер.ПравильнаяДлинаIBAN(РасчетныйСчет.НомерСчета) Тогда
		РасчетныйСчет.ЭтоIBAN = Истина; 
	КонецЕсли;
		
	Если РасчетныйСчет.ПометкаУдаления Тогда
		
		РасчетныйСчет.ПометкаУдаления = Ложь;
		
	КонецЕсли;	
		
	РасчетныйСчет.Наименование = СформироватьАвтоНаименованиеРасчетногоСчета(РасчетныйСчет);
	РасчетныйСчет.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
	РасчетныйСчет.Записать();
	
КонецПроцедуры	

&НаКлиенте
Процедура OK(Команда)
	
	СписокДобавленныхСчетов = Новый СписокЗначений;
	ОтмеченыДобавленныеНоНеПодключенныеСчета = Ложь;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСчетов Цикл  
		
		Если СтрокаТаблицы.Пометка Тогда
			Если СтрокаТаблицы.УжеДобавленВ1С И НЕ СтрокаТаблицы.ПодключенКСервису
				И НЕ СтрокаТаблицы.ПропуститьДобавление Тогда
					
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Банковский счет ""%1"" существует в справочнике, но не подключен к сервису.
					|Подключить?'"),
					СтрокаТаблицы.Счет);
					
					ДополнительныеПараметры = Новый Структура("Счет,Валюта,ИдентификаторСчета", 
											СтрокаТаблицы.Счет, СтрокаТаблицы.Валюта, СтрокаТаблицы.ИдентификаторСчета);
					ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеКСервисуСуществующегоСчетаЗавершение", 
																					ЭтотОбъект, ДополнительныеПараметры);
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

					ОтмеченыДобавленныеНоНеПодключенныеСчета = Истина;
					
					Прервать;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;	                   
	
	Если НЕ ОтмеченыДобавленныеНоНеПодключенныеСчета Тогда
		Для Каждого СтрокаТаблицы Из ТаблицаСчетов Цикл  
		
			Если СтрокаТаблицы.Пометка 
				И Не СтрокаТаблицы.ПодключенКСервису Тогда
			
				ДобавитьБанковскийСчет(Банк, СтрокаТаблицы.Счет, СтрокаТаблицы.Валюта, СтрокаТаблицы.ИдентификаторСчета);
				СписокДобавленныхСчетов.Добавить(СтрокаТаблицы.Счет);
			
			КонецЕсли;	
		
		КонецЦикла;	

		Оповестить("ОбновитьСписокБанковскихСчетов");
	
		Закрыть(Новый Структура("СписокДобавленныхСчетов", СписокДобавленныхСчетов));

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеКСервисуСуществующегоСчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Счет = ДополнительныеПараметры.Счет;
		Валюта = ДополнительныеПараметры.Валюта;  
		ИдентификаторСчета = ДополнительныеПараметры.ИдентификаторСчета;
		
		ПодключитьСчет(Банк, Счет, Валюта, ИдентификаторСчета);
		
	КонецЕсли;

	НайденныеСтроки  = ТаблицаСчетов.НайтиСтроки(
		Новый Структура("ИдентификаторСчета", ДополнительныеПараметры.ИдентификаторСчета));
		
	НайденныеСтроки[0].ПропуститьДобавление = Истина;
	
	OK("");
	
КонецПроцедуры

&НаСервере
Процедура ПодключитьСчет(Банк, Счет, КодВалютыБуквенный, ИдентификаторСчета)
	
	Валюта = НайтиВалюту(КодВалютыБуквенный);
	
	НайденныйОбъект = НайтиБанковскийСчет(Счет, Валюта, Организация);
	
	РасчетныйСчет = НайденныйОбъект.ПолучитьОбъект();
	
	Попытка
			РасчетныйСчет.Заблокировать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось изменить расчетный счет: %1'"), РасчетныйСчет);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
	КонецПопытки;	
		
	РасчетныйСчет.ИдентификаторСчетаBankFeeds = ИдентификаторСчета;
		
	РасчетныйСчет.Записать();
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтметитьСчета(Команда)
	
	Для Каждого Счет Из ТаблицаСчетов Цикл
		Если НЕ Счет.ПодключенКСервису Тогда
			Счет.Пометка = Истина;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиСчетов(Команда)
	
	Для Каждого Счет Из ТаблицаСчетов Цикл 
		Если НЕ Счет.ПодключенКСервису Тогда
			Счет.Пометка = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция НайтиБанковскийСчет(НомерСчета, Валюта, Организация)
	
	Запрос = Новый Запрос();                               
	Запрос.УстановитьПараметр("НомерСчета", НомерСчета);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("Организация", Организация); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета
	|	И БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = &Валюта
	|	И БанковскиеСчетаОрганизаций.Владелец = &Организация";
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	КонецЕсли;	
	
	Возврат Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиВалюту(КодВалютыБуквенный)
	
 	НайденнаяВалюта = Справочники.Валюты.НайтиПоНаименованию(КодВалютыБуквенный);	

 	Если НайденнаяВалюта <> Неопределено
		И ЗначениеЗаполнено(НайденнаяВалюта) Тогда
		
			Возврат НайденнаяВалюта;
 	КонецЕсли;	 
	
	НоваяВалюта = ДобавитьНовуюВалюту(КодВалютыБуквенный);
	
 	Если НоваяВалюта <> Неопределено
		И ЗначениеЗаполнено(НоваяВалюта) Тогда
		
			Возврат НоваяВалюта;
 	КонецЕсли;	 
	
 	Возврат Справочники.Валюты.ПустаяСсылка();
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьНовуюВалюту(КодВалютыБуквенныйДляПоиска)
	
	ТабличныйДокумент = Обработки.МеждународныйКлассификаторВалют.ПолучитьМакет("МеждународныйКлассификаторВалют");
	СсылкаНаНовуюВалюту = Справочники.Валюты.ПустаяСсылка();
	
	Для СчСтр = 2 По ТабличныйДокумент.ВысотаТаблицы Цикл

		КодВалютыЦифровой = ТабличныйДокумент.Область(СчСтр, 1).Текст;
		КодВалютыБуквенный = ТабличныйДокумент.Область(СчСтр, 2).Текст;
		Наименование = ТабличныйДокумент.Область(СчСтр, 3).Текст;
		ПараметрыПрописи = ТабличныйДокумент.Область(СчСтр, 5).Текст;
		Загружается = ТекстВБулево(ТабличныйДокумент.Область(СчСтр, 6).Текст);
		
		Если КодВалютыБуквенныйДляПоиска = КодВалютыБуквенный Тогда
			
			НачатьТранзакцию();
			Попытка
			
				НовыйЭлемент = Справочники.Валюты.СоздатьЭлемент();
				НовыйЭлемент.Код                       = КодВалютыЦифровой;
				НовыйЭлемент.Наименование              = КодВалютыБуквенный;
				НовыйЭлемент.НаименованиеПолное        = Наименование;
				Если Загружается Тогда
					НовыйЭлемент.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
				Иначе
					НовыйЭлемент.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
				КонецЕсли;
				НовыйЭлемент.ПараметрыПрописи = ПараметрыПрописи;
				НовыйЭлемент.Записать();
			
				РаботаСКурсамиВалютУТ.ПроверитьКорректностьОтносительногоКурсаНа01_01_1980(НовыйЭлемент.Ссылка);

				СсылкаНаНовуюВалюту = НовыйЭлемент.Ссылка;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;	 
		
		Если ЗначениеЗаполнено(СсылкаНаНовуюВалюту) Тогда
			Прервать;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат СсылкаНаНовуюВалюту;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстВБулево(СтроковоеЗначение)
	
	Если ПустаяСтрока(СтроковоеЗначение) ИЛИ СтроковоеЗначение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СокрЛП(СтроковоеЗначение) = "истина";
	
КонецФункции

&НаСервере
Процедура  НайтиСчетаВПрограмме()
	
	МассивНомеровСчетов = Новый Массив;
	
	Для Каждого ТекСтрокаТаблицаСчетов Из ТаблицаСчетов Цикл
		
		МассивНомеровСчетов.Добавить(ТекСтрокаТаблицаСчетов.Счет);
	
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Банк", Банк);
	Запрос.УстановитьПараметр("СписокНомеровСчета", МассивНомеровСчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет,
	|	БанковскиеСчетаОрганизаций.Владелец КАК Организация,
	|	БанковскиеСчетаОрганизаций.Банк КАК Банк,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК Счет,
	|	Валюты.Наименование КАК Валюта,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса КАК НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds КАК ИдентификаторСчетаBankFeeds
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ПО БанковскиеСчетаОрганизаций.Банк = ПодключенияКБанкамBankFeeds.Банк
	|			И БанковскиеСчетаОрганизаций.Владелец = ПодключенияКБанкамBankFeeds.Организация
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Банк = &Банк
	|	И БанковскиеСчетаОрганизаций.Владелец = &Организация
	|	И БанковскиеСчетаОрганизаций.НомерСчета В(&СписокНомеровСчета)
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.Владелец,
	|	БанковскиеСчетаОрганизаций.Банк,
	|	БанковскиеСчетаОрганизаций.НомерСчета,
	|	Валюты.Наименование,
	|	ПодключенияКБанкамBankFeeds.НастройкиСервиса,
	|	БанковскиеСчетаОрганизаций.ИдентификаторСчетаBankFeeds
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПодключенияКБанкамBankFeeds КАК ПодключенияКБанкамBankFeeds
	|		ПО БанковскиеСчетаОрганизаций.Ссылка = ПодключенияКБанкамBankFeeds.Банк
	|			И БанковскиеСчетаОрганизаций.Владелец = ПодключенияКБанкамBankFeeds.Организация
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Организация
	|	И БанковскиеСчетаОрганизаций.НомерСчета В(&СписокНомеровСчета)
	|	И БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|	И НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления";	
	
	ТаблицаСчетовВПрограмме = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаСчетовВПрограмме.Количество() > 0 Тогда
		
		ФильтрСчетов = Новый Структура("Организация,Счет,Валюта");
		ФильтрСчетов.Организация = Организация;
		
		Для Каждого ТекСтрокаТаблицаСчетов Из ТаблицаСчетов Цикл
			
			ЗаполнитьЗначенияСвойств(ФильтрСчетов, ТекСтрокаТаблицаСчетов);
			
			НайденныеСтроки = ТаблицаСчетовВПрограмме.НайтиСтроки(ФильтрСчетов);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ТекСтрокаТаблицаСчетов.УжеДобавленВ1С = Истина;
				
				ТекСтрокаТаблицаСчетов.ПодключенКСервису = ЗначениеЗаполнено(НайденныеСтроки[0].НастройкиСервиса) 
																И ЗначениеЗаполнено(НайденныеСтроки[0].ИдентификаторСчетаBankFeeds);
																
				ТекСтрокаТаблицаСчетов.Пометка = ТекСтрокаТаблицаСчетов.ПодключенКСервису;
				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;	
		
КонецПроцедуры	

&НаСервере 
Функция СформироватьАвтоНаименованиеРасчетногоСчета(РасчетныйСчет)
	
	Если РасчетныйСчет.РучноеИзменениеРеквизитовБанка Тогда
		СтрокаНаименования = Прав(СокрЛП(РасчетныйСчет.НомерСчета), 4) 
		+ ?(ЗначениеЗаполнено(РасчетныйСчет.НаименованиеБанка), " в " + Строка(РасчетныйСчет.НаименованиеБанка), "")
		+ ", " + СокрЛП(РасчетныйСчет.Владелец);
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		
	Иначе	
		
		СтрокаНаименования = Прав(СокрЛП(РасчетныйСчет.НомерСчета), 4) 
		+ ?(ЗначениеЗаполнено(РасчетныйСчет.Банк), " в " + Строка(РасчетныйСчет.Банк), "")
		+ ", " + СокрЛП(РасчетныйСчет.Владелец);
		СтрокаНаименования = Лев(СтрокаНаименования, 150);
		
	КонецЕсли;
	
	Возврат СтрокаНаименования;

КонецФункции

#КонецОбласти