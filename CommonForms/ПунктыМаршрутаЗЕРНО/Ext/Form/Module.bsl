#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеФормы();
	НастроитьЭлементыФормы();
	
	ИнициализироватьПоляКонтактнойИнформации();
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямимСоставногоТипа
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// РаботаСПолямимСоставногоТипа
	Если ВРег(Лев(ИмяСобытия, 6)) = "ЗАПИСЬ" Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработатьИзменениеДанных(ЭтотОбъект, Источник);
	КонецЕсли;
	// Конец РаботаСПолямимСоставногоТипа
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПеревозчикИБСтрокойПриИзменении(Элемент)
	
	ПолеСоставногоТипаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикИБСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикИБСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикИБСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикИБСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПараметрыОтбора = ЗаполнитьПараметрыОтбораПеревозчикиИБ(ПеревозчикИБ, ВыбранноеЗначение, ПодразделенияИспользуются);
	
	Если КэшПеревозчикиИБ.НайтиСтроки(ПараметрыОтбора).Количество() Тогда
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			ПредупреждениеПриВыбореНедоступногоПодразделенияИБ(ВыбранноеЗначение);
			СтандартнаяОбработка = Ложь;
			Возврат;
		Иначе
			Элементы.Подразделение.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьПодсказкиВводаПодразделение(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТранспортныеСредства

&НаКлиенте
Процедура ТранспортныеСредстваТипТранспортаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТранспортныеСредства.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТранспорта <> ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ВидТранспортногоСредстваАвтомобиль") Тогда
		ТекущиеДанные.ТранспортноеСредство = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеСредстваТранспортноеСредствоПриИзменении(Элемент)
	
	ДанныеСтроки = ТранспортныеСредства.НайтиПоИдентификатору(Элементы.ТранспортныеСредства.ТекущаяСтрока);
	
	РеквизитыТранспортногоСредства = ЗначенияРеквизитовТранспортногоСредства(ДанныеСтроки.ТранспортноеСредство);
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, РеквизитыТранспортногоСредства);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМестаПерегрузки

&НаКлиенте
Процедура МестаПерегрузкиАдресПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МестаПерегрузки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ТекущиеДанные.АдресСтрокой = "";
		ТекущиеДанные.КомментарийАдрес = "";
		ТекущиеДанные.Адрес        = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// структуры ВидКонтактнойИнформацииАдреса.
	ТекущиеДанные.АдресСтрокой = Текст;
	ТекущиеДанные.Адрес = ЗначенияПолейКонтактнойИнформацииСервер(
		Текст, ВидКонтактнойИнформации, ТекущиеДанные.КомментарийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура МестаПерегрузкиАдресОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МестаПерегрузки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сбрасываем как представления, так и внутренние значения полей.
	ТекущиеДанные.АдресСтрокой = "";
	ТекущиеДанные.КомментарийАдрес = "";
	ТекущиеДанные.Адрес        = "";
	
КонецПроцедуры

&НаКлиенте
Процедура МестаПерегрузкиАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МестаПерегрузки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> ТекущиеДанные.АдресСтрокой Тогда
		ТекущиеДанные.АдресСтрокой = Элемент.ТекстРедактирования;
		ТекущиеДанные.Адрес = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформации,
		ТекущиеДанные.Адрес,
		ТекущиеДанные.АдресСтрокой,
		ТекущиеДанные.КомментарийАдрес);
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Адрес объекта'");
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МестаПерегрузкиАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.МестаПерегрузки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АдресСтрокой     = ВыбранноеЗначение.Представление;
	ТекущиеДанные.КомментарийАдрес = ВыбранноеЗначение.Комментарий;
	ТекущиеДанные.Адрес            = ВыбранноеЗначение.КонтактнаяИнформация;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ЗакрытьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	УстановитьСнятьОтметку();
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметку(Команда)
	УстановитьСнятьОтметку(Ложь);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеСредства.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеСредстваОтметка.ПутьКДанным);
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("РежимОтметки");
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеСредстваТранспортноеСредство.Имя);
	
	Автомобиль = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ВидТранспортногоСредстваАвтомобиль");
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТранспортныеСредства.ТипТранспорта");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Автомобиль;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтметку(Отметка = Истина)
	
	Если Элементы.ТранспортныеСредства.ВыделенныеСтроки.Количество() > 1 Тогда
		СтрокиДанных = Новый Массив();
		Для Каждого ВыделеннаяСтрока Из Элементы.ТранспортныеСредства.ВыделенныеСтроки Цикл
			СтрокиДанных.Добавить(ТранспортныеСредства.НайтиПоИдентификатору(ВыделеннаяСтрока));
		КонецЦикла;
	Иначе
		СтрокиДанных = ТранспортныеСредства;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
		СтрокаТаблицы.Отметка = Отметка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму()
	
	Если Не ПроверитьЗаполнениеТаблицы() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия = Новый Структура;
	
	Если РежимОткрытия = "ТранспортныеСредства" Тогда
		ЗаполнитьРезультатТраспортныеСредства(РезультатЗакрытия);
	ИначеЕсли РежимОткрытия = "МестаПерегрузки" Тогда
		ЗаполнитьРезультатМестаПерегрузки(РезультатЗакрытия);
	Иначе
		ЗаполнитьРезультатТраспортныеСредства(РезультатЗакрытия);
		ЗаполнитьРезультатМестаПерегрузки(РезультатЗакрытия);
		Если ЗначениеЗаполнено(ПеревозчикИБ) Тогда
			РезультатЗакрытия.Вставить("Перевозчик",    ПеревозчикИБ);
			РезультатЗакрытия.Вставить("Подразделение", Подразделение);
		Иначе
			РезультатЗакрытия.Вставить("Перевозчик",    ПеревозчикПоУмолчанию);
			РезультатЗакрытия.Вставить("Подразделение", ПодразделениеПоУмолчанию);
		КонецЕсли;
		
	КонецЕсли;
	
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРезультатТраспортныеСредства(РезультатЗакрытия)
	
	РезультатЗакрытия.Вставить("ТранспортныеСредства", Новый Массив);
	Для Каждого СтрокаТаблицы Из ТранспортныеСредства Цикл
		
		ДанныеСтроки = СтруктураПараметровСтроки(ЭтотОбъект);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
		РезультатЗакрытия.ТранспортныеСредства.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРезультатМестаПерегрузки(РезультатЗакрытия)
	
	РезультатЗакрытия.Вставить("МестаПерегрузки", Новый Массив);
	Для Каждого СтрокаТаблицы Из МестаПерегрузки Цикл
		
		ДанныеСтроки = СтруктураПараметровСтрокиМестаПерегрузки(ЭтотОбъект);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
		РезультатЗакрытия.МестаПерегрузки.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеТаблицы()
	
	Отказ = Ложь;
	Если РежимОткрытия = "Маршрут" Тогда
		
		Если Не ЗначениеЗаполнено(ПеревозчикИБ) Тогда
			
			ПараметрыОтбора = ЗаполнитьПараметрыОтбораПеревозчикиИБ(
				ПеревозчикПоУмолчанию, ПодразделениеПоУмолчанию, ПодразделенияИспользуются);
			
			Если КэшПеревозчикиИБ.НайтиСтроки(ПараметрыОтбора).Количество() Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не заполнен перевозчик!'"),,
					"ПеревозчикИБСтрокой",,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПеревозчикИБ)
			И Не ЗначениеЗаполнено(Подразделение) Тогда
			
			ПараметрыОтбора = ЗаполнитьПараметрыОтбораПеревозчикиИБ(
				ПеревозчикИБ, Подразделение, ПодразделенияИспользуются);
			Если КэшПеревозчикиИБ.НайтиСтроки(ПараметрыОтбора).Количество() Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					НСтр("ru = 'Не заполнено подразделение!'"),,
					"Подразделение",,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТранспортныеСредства.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнены транспортные средства!'"),,
			"ТранспортныеСредства",,
			Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ТранспортныеСредства Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТипТранспорта) Тогда
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТранспортныеСредства", НомерСтроки, "ТипТранспорта");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнен тип транспорта!'"),,
				Поле,,
				Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерТранспортногоСредства) Тогда
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ТранспортныеСредства", НомерСтроки, "НомерТранспортногоСредства");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнен номер транспортного средства!'"),,
				Поле,,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из МестаПерегрузки Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Адрес) Тогда
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("МестаПерегрузки", НомерСтроки, "АдресСтрокой");
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнен адрес!'"),,
				Поле,,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровСтрокиМестаПерегрузки(Форма, ВключатьПолеОтметки = Истина, ВключатьПолеПеревозчик = Истина)
	
	ДанныеСтроки = Новый Структура();
	ДанныеСтроки.Вставить("Адрес");
	ДанныеСтроки.Вставить("АдресСтрокой");
	
	Возврат ДанныеСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровСтроки(Форма, ВключатьПолеОтметки = Истина, ВключатьПолеПеревозчик = Истина)
	
	ДанныеСтроки = Новый Структура();
	ДанныеСтроки.Вставить("ТипТранспорта");
	ДанныеСтроки.Вставить("НомерТранспортногоСредства");
	ДанныеСтроки.Вставить("НомерАвтомобильногоКонтейнера");
	
	Если ВключатьПолеПеревозчик Тогда
		ДанныеСтроки.Вставить("Перевозчик");
	КонецЕсли;
	Если ВключатьПолеОтметки Тогда
		ДанныеСтроки.Вставить("Отметка", Ложь);
	КонецЕсли;
	Если Форма.УказываетсяТранспортноеСредство Тогда
		ДанныеСтроки.Вставить("ТранспортноеСредство", Неопределено);
	КонецЕсли;
	Возврат ДанныеСтроки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеФормы()
	
	Перевозчик       = Параметры.Перевозчик;
	РежимОтметки     = Параметры.РежимОтметки;
	ПеревозчикВШапке = Параметры.ПеревозчикВШапке;
	СДИЗ             = Параметры.СДИЗ;
	РежимОткрытия    = Параметры.РежимОткрытия;
	ПеревозчикИБ     = Параметры.ПеревозчикИБ;
	Подразделение    = Параметры.Подразделение;
	
	ПодразделенияИспользуются = Параметры.ПодразделенияИспользуются;
	ПодразделениеПоУмолчанию  = Параметры.ПодразделениеПоУмолчанию;
	Если ПодразделенияИспользуются И ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		ПодразделениеПредставление = Строка(ПодразделениеПоУмолчанию);
	КонецЕсли;
	
	ПеревозчикПоУмолчанию = Параметры.ПеревозчикПоУмолчанию;
	Если ЗначениеЗаполнено(ПеревозчикПоУмолчанию) Тогда
		ПеревозчикПредставление = Строка(ПеревозчикПоУмолчанию);
	КонецЕсли;
	
	ТипПеревозчика  = ОпределитьТипОрганизацияКонтрагент(ПеревозчикИБ);
	
	Если РежимОткрытия = "ТранспортныеСредства" Тогда
		ЗаполнитьДанныеФормыТраспортныеСредства();
	ИначеЕсли РежимОткрытия = "МестаПерегрузки" Тогда
		ЗаполнитьДанныеФормыМестаПерегрузки();
	Иначе // Маршрут
		ЗаполнитьДанныеФормыТраспортныеСредства();
		ЗаполнитьДанныеФормыМестаПерегрузки();
		Для Каждого СтрокаКоллекции Из Параметры.КэшПеревозчикиИБ Цикл
			НоваяСтрока = КэшПеревозчикиИБ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыТраспортныеСредства()
	
	УказываетсяТранспортноеСредство = (ИнтеграцияЗЕРНО.УказываетсяТранспортноеСредство() И Параметры.ИспользоватьТранспортныеСредства);
	
	Если РежимОтметки
		И ЗначениеЗаполнено(СДИЗ) Тогда
		
		ТранспортныеСредстваПоСДИЗ = Справочники.СДИЗЗЕРНО.ТранспортныеСредстваПоСДИЗ(СДИЗ);
		
		Для Каждого СтрокаКоллекции Из ТранспортныеСредстваПоСДИЗ Цикл
			НоваяСтрока = ТранспортныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		КонецЦикла;
		
		Для Каждого СтрокаКоллекции Из Параметры.ТранспортныеСредства Цикл
			
			ДанныеСтроки = СтруктураПараметровСтроки(ЭтотОбъект, Ложь, Ложь);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаКоллекции);
			
			НайденныеСтроки = ТранспортныеСредства.НайтиСтроки(ДанныеСтроки);
			Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
				СтрокаТаблицы.Отметка = Истина;
			КонецЦикла;
			
		КонецЦикла;
			
	ИначеЕсли ЗначениеЗаполнено(Параметры.ТранспортныеСредства) Тогда
		
		Для Каждого СтрокаКоллекции Из Параметры.ТранспортныеСредства Цикл
			НоваяСтрока = ТранспортныеСредства.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыМестаПерегрузки()
	
	Если ЗначениеЗаполнено(Параметры.МестаПерегрузки) Тогда
		Для Каждого СтрокаКоллекции Из Параметры.МестаПерегрузки Цикл
			НоваяСтрока = МестаПерегрузки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКоллекции);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Если РежимОткрытия = "Маршрут" Тогда
		
		Элементы.ПеревозчикИБСтрокой.Видимость = Истина;
		Элементы.СДИЗ.Видимость       = Ложь;
		Элементы.Перевозчик.Видимость = Ложь;
		
		Элементы.ГруппаМестаПерегрузки.ОтображатьЗаголовок      = Истина;
		Элементы.ГруппаТранспортныеСредства.ОтображатьЗаголовок = Истина;
		
		Элементы.ТранспортныеСредстваПеревозчик.Видимость           = Не ПеревозчикВШапке;
		Элементы.ТранспортныеСредстваТранспортноеСредство.Видимость = УказываетсяТранспортноеСредство;
		
		Заголовок = НСтр("ru = 'Маршрут'");
		
		ОбновитьПодсказкиВводаПеревозчикИБ(ЭтотОбъект);
		ОбновитьПодсказкиВводаПодразделение(ЭтотОбъект);
		
		УстановитьДоступностьВидимостьПодразделения(ЭтотОбъект);
		
	Иначе
		
		Элементы.ПеревозчикИБСтрокой.Видимость = Ложь;
		Элементы.Подразделение.Видимость       = Ложь;
		Элементы.СДИЗ.Видимость       = ЗначениеЗаполнено(СДИЗ);
		Элементы.Перевозчик.Видимость = ЗначениеЗаполнено(Перевозчик);
		
		Если РежимОткрытия = "ТранспортныеСредства" Тогда
			
			Элементы.ГруппаМестаПерегрузки.Видимость = Ложь;
			
			Элементы.ТранспортныеСредстваПеревозчик.Видимость           = Не ПеревозчикВШапке;
			Элементы.ТранспортныеСредстваТранспортноеСредство.Видимость = УказываетсяТранспортноеСредство;
			
			Заголовок = НСтр("ru = 'Транспортные средства'");
			
		ИначеЕсли РежимОткрытия = "МестаПерегрузки" Тогда
			
			Элементы.ГруппаТранспортныеСредства.Видимость = Ложь;
			
			Заголовок = НСтр("ru = 'Места перегрузки'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		
		Элементы.МаршрутГотово.Доступность           = Ложь;
		Элементы.МаршрутГотово.Видимость             = Ложь;
		Элементы.МаршрутЗакрыть.КнопкаПоУмолчанию    = Истина;
		
		Если РежимОткрытия = "МестаПерегрузки" Тогда
			Элементы.МестаПерегрузки.ТолькоПросмотр              = Истина;
			Элементы.МестаПерегрузкиДобавить.Доступность         = Ложь;
			Элементы.МестаПерегрузкиПереместитьВверх.Доступность = Ложь;
			Элементы.МестаПерегрузкиПереместитьВниз.Доступность  = Ложь;
		ИначеЕсли РежимОткрытия = "ТранспортныеСредства" Тогда
			Элементы.ТранспортныеСредства.ТолькоПросмотр              = Истина;
			Элементы.ТранспортныеСредстваДобавить.Доступность         = Ложь;
			Элементы.ТранспортныеСредстваПереместитьВверх.Доступность = Ложь;
			Элементы.ТранспортныеСредстваПереместитьВниз.Доступность  = Ложь;
			Элементы.ТранспортныеСредстваОтметитьВсе.Доступность      = Ложь;
			Элементы.ТранспортныеСредстваСнятьОтметку.Доступность     = Ложь;
		ИначеЕсли РежимОткрытия = "Маршрут" Тогда
			Элементы.МестаПерегрузки.ТолькоПросмотр              = Истина;
			Элементы.МестаПерегрузкиДобавить.Доступность         = Ложь;
			Элементы.МестаПерегрузкиПереместитьВверх.Доступность = Ложь;
			Элементы.МестаПерегрузкиПереместитьВниз.Доступность  = Ложь;
			Элементы.ТранспортныеСредства.ТолькоПросмотр              = Истина;
			Элементы.ТранспортныеСредстваДобавить.Доступность         = Ложь;
			Элементы.ТранспортныеСредстваПереместитьВверх.Доступность = Ложь;
			Элементы.ТранспортныеСредстваПереместитьВниз.Доступность  = Ложь;
			Элементы.ТранспортныеСредстваОтметитьВсе.Доступность      = Ложь;
			Элементы.ТранспортныеСредстваСнятьОтметку.Доступность     = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.МаршрутЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
	Если РежимОтметки Тогда
		
		Элементы.ТранспортныеСредстваОтметка.Видимость    = Истина;
		Элементы.ТранспортныеСредстваДобавить.Видимость   = Ложь;
		Элементы.ТранспортныеСредства.ИзменятьСоставСтрок = Ложь;
		
		Элементы.ТранспортныеСредстваОтметитьВсе.Видимость  = Истина;
		Элементы.ТранспортныеСредстваСнятьОтметку.Видимость = Истина;
		
		Элементы.ТранспортныеСредстваТипТранспорта.ТолькоПросмотр                 = Истина;
		Элементы.ТранспортныеСредстваТранспортноеСредство.ТолькоПросмотр          = Истина;
		Элементы.ТранспортныеСредстваНомерТранспортногоСредства.ТолькоПросмотр    = Истина;
		Элементы.ТранспортныеСредстваНомерАвтомобильногоКонтейнера.ТолькоПросмотр = Истина;
		Элементы.ТранспортныеСредстваПеревозчик.ТолькоПросмотр                    = Истина;
		Элементы.ТранспортныеСредстваПереместитьВверх.Видимость                   = Ложь;
		Элементы.ТранспортныеСредстваПереместитьВниз.Видимость                    = Ложь;
		
	Иначе
		
		Элементы.ТранспортныеСредстваОтметка.Видимость  = Ложь;
		Элементы.ТранспортныеСредстваДобавить.Видимость = Истина;
		
		Элементы.ТранспортныеСредстваОтметитьВсе.Видимость  = Ложь;
		Элементы.ТранспортныеСредстваСнятьОтметку.Видимость = Ложь;
		
	КонецЕсли;
	
	Если УказываетсяТранспортноеСредство И ТолькоПросмотр Тогда
		ВидимостьКолонкиТранспортныеСредства = Ложь;
		Для Каждого СтрокаТаблицы Из ТранспортныеСредства Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТранспортноеСредство) Тогда
				ВидимостьКолонкиТранспортныеСредства = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элементы.ТранспортныеСредстваТранспортноеСредство.Видимость = ВидимостьКолонкиТранспортныеСредства;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Модифицированность = Ложь;
		ЗакрытьФорму();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовТранспортногоСредства(ТранспортноеСредство)
	
	РеквизитыТранспортногоСредства = Новый Структура;
	РеквизитыТранспортногоСредства.Вставить("НомерТранспортногоСредства");
	РеквизитыТранспортногоСредства.Вставить("НомерАвтомобильногоКонтейнера");
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииРеквизитовТранспортногоСредства(РеквизитыТранспортногоСредства, ТранспортноеСредство);
	Возврат РеквизитыТранспортногоСредства;
	
КонецФункции

&НаКлиенте
Процедура ПредупреждениеПриВыбореНедоступногоПеревозчикаИБ(Результат)
	
	Если ПодразделенияИспользуются Тогда
		Если ЗначениеЗаполнено(Подразделение) Тогда
			ПредставлениеПодразделения = Строка(Подразделение);
		Иначе
			ПредставлениеПодразделения = НСтр("ru = 'Пустое подразделение'");
		КонецЕсли;
		ТекстПредупрежедения = СтрШаблон(
			НСтр("ru = 'Значение не может быть выбрано:
				       |Перевозчик ""%1"" и подразделение ""%2"" уже содержатся в данных документа.'"),
			Строка(Результат),
			ПредставлениеПодразделения);
	Иначе
		ТекстПредупрежедения = СтрШаблон(НСтр("ru = 'Значение не может быть выбрано:
			|Перевозчик ""%1"" уже содержится в данных документа.'"), Строка(Результат));
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстПредупрежедения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеПриВыбореНедоступногоПодразделенияИБ(Результат)
	
	ТекстПредупрежедения = СтрШаблон(
		НСтр("ru = 'Значение не может быть выбрано:
			       |Перевозчик ""%1"" и подразделение ""%2"" уже содержатся в данных документа.'"),
		Строка(ПеревозчикИБ),
		Строка(Результат));
	ПоказатьПредупреждение(, ТекстПредупрежедения);
	
КонецПроцедуры

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Для Каждого СтрокаМестаПерегрузки Из МестаПерегрузки Цикл
		СтрокаМестаПерегрузки.КомментарийАдрес = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(СтрокаМестаПерегрузки.Адрес);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции


#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

&НаСервереБезКонтекста
Функция ИменаЭлементовПолейСоставногоТипа()
	
	Возврат "ПеревозчикИБСтрокой";
	
КонецФункции

&НаКлиенте
Процедура ОпределитьДоступностьВыбранногоПеревозчикИБСтрокой(ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТипВыбранногоЗначения = 0;
	
	Если ПодразделенияИспользуются Тогда
		
		ПодразделениеПредыдущееЗначение = Подразделение;
		ТипВыбранногоЗначения = ОпределитьТипОрганизацияКонтрагент(ВыбранноеЗначение);
		Если ТипВыбранногоЗначения = 1 Тогда
			Подразделение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОтбора = ЗаполнитьПараметрыОтбораПеревозчикиИБ(
		ВыбранноеЗначение, Подразделение, ПодразделенияИспользуются);
	
	Если КэшПеревозчикиИБ.НайтиСтроки(ПараметрыОтбора).Количество() Тогда
		Если Не ПодразделенияИспользуются Или ЗначениеЗаполнено(Подразделение) Или ТипВыбранногоЗначения = 1 Тогда
			СтандартнаяОбработка = Ложь;
			ПредупреждениеПриВыбореНедоступногоПеревозчикаИБ(ВыбранноеЗначение);
			Если ПодразделенияИспользуются Тогда
				Подразделение = ПодразделениеПредыдущееЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПеревозчикИБСтрокой()
	
	ТипПеревозчика = ОпределитьТипОрганизацияКонтрагент(ПеревозчикИБ);
	Если ТипПеревозчика = 1 Или Не ЗначениеЗаполнено(ПеревозчикИБ) Тогда
		Подразделение = Неопределено;
	КонецЕсли;
	
	УстановитьДоступностьВидимостьПодразделения(ЭтотОбъект);
	
	ОбновитьПодсказкиВводаПеревозчикИБ(ЭтотОбъект);
	ОбновитьПодсказкиВводаПодразделение(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаПриИзменении(Элемент)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаПриИзменении(ЭтотОбъект, Элемент);
	ПриИзмененииПеревозчикИБСтрокой();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И Не ВыбранноеЗначение.Свойство("Действие")
		И Элемент.Имя = "ПеревозчикИБСтрокой" Тогда
		
		ОпределитьДоступностьВыбранногоПеревозчикИБСтрокой(ВыбранноеЗначение.Ссылка, СтандартнаяОбработка);
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		ПриИзмененииПеревозчикИБСтрокой();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаАвтоПодбор(ЭтотОбъект,
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	Если ДополнительныеПараметры.Элемент.Имя = "ПеревозчикИБСтрокой" Тогда
		ОпределитьДоступностьВыбранногоПеревозчикИБСтрокой(Результат, СтандартнаяОбработка);
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
		ПриИзмененииПеревозчикИБСтрокой();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ОпределитьТипОрганизацияКонтрагент(ОрганизацияКонтрагент)
	
	Возврат ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(ОрганизацияКонтрагент);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкиВводаПеревозчикИБ(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.ПеревозчикИБ) Тогда
		
		Форма.Элементы.ПеревозчикИБСтрокой.ОтметкаНезаполненного = Истина;
		Форма.Элементы.ПеревозчикИБСтрокой.ПодсказкаВвода = "";
		
		ПараметрыОтбора = ЗаполнитьПараметрыОтбораПеревозчикиИБ(
			Форма.ПеревозчикПоУмолчанию, Форма.ПодразделениеПоУмолчанию, Форма.ПодразделенияИспользуются);
		
		Если Форма.КэшПеревозчикиИБ.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			Форма.Элементы.ПеревозчикИБСтрокой.ОтметкаНезаполненного = Ложь;
			Форма.Элементы.ПеревозчикИБСтрокой.ПодсказкаВвода = Форма.ПеревозчикПредставление;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкиВводаПодразделение(Форма)
	
	Если Не Форма.ПодразделенияИспользуются Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.Подразделение.ПодсказкаВвода = "";
	Форма.Элементы.Подразделение.ОтметкаНезаполненного = Истина;
	
	Если Не ЗначениеЗаполнено(Форма.ПеревозчикИБ) Тогда
		
		ПараметрыОтбора = ЗаполнитьПараметрыОтбораПеревозчикиИБ(
			Форма.ПеревозчикПоУмолчанию, Форма.ПодразделениеПоУмолчанию, Форма.ПодразделенияИспользуются);
		
		Если Форма.КэшПеревозчикиИБ.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			Форма.Элементы.Подразделение.ОтметкаНезаполненного = Ложь;
			Форма.Элементы.Подразделение.ПодсказкаВвода = Форма.ПодразделениеПредставление;
		КонецЕсли;
		
	Иначе
		
		ПараметрыОтбора = ЗаполнитьПараметрыОтбораПеревозчикиИБ(
			Форма.ПеревозчикИБ, Форма.Подразделение, Форма.ПодразделенияИспользуются);
		
		Если Форма.КэшПеревозчикиИБ.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда
			
			Форма.Элементы.Подразделение.ОтметкаНезаполненного = Ложь;
			Если Форма.ПеревозчикИБ = Форма.ПеревозчикПоУмолчанию Тогда
				Форма.Элементы.Подразделение.ПодсказкаВвода = Форма.ПодразделениеПредставление;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьПараметрыОтбораПеревозчикиИБ(ПеревозчикИБ, Подразделение, ПодразделенияИспользуютя)
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("Перевозчик",    ПеревозчикИБ);
	ПараметрыОтбора.Вставить("ТекущаяСтрока", Ложь);
	Если ПодразделенияИспользуютя Тогда
		ПараметрыОтбора.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	Возврат ПараметрыОтбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьДоступностьВидимостьПодразделения(Форма)
	
	Форма.Элементы.Подразделение.Доступность = Форма.ПодразделенияИспользуются
		И ЗначениеЗаполнено(Форма.ПеревозчикИБ) И Форма.ТипПеревозчика = 0;
	
	Форма.Элементы.Подразделение.Видимость = Форма.ПодразделенияИспользуются
		И Форма.ТипПеревозчика = 0;
	
КонецФункции

#КонецОбласти
