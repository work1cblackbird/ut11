#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НастройкиОбмена = Неопределено;
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ПрефиксДляДанныхМобильногоУстройства = 
			МобильноеПриложениеЗаказыКлиентовПереопределяемый.НовыйПрефиксДляДанныхМобильногоУстройства();
		Если Параметры.Свойство("ВидНастройкиОбмена") Тогда
			Объект.ВидНастройкиОбмена = Параметры.ВидНастройкиОбмена;
			ИспользованиеОбщихНастроек = 1;
		КонецЕсли;
		Если Параметры.Свойство("Пользователь") Тогда
			Объект.Пользователь = Параметры.Пользователь;
		КонецЕсли;
		Если Параметры.Свойство("НастройкиОбмена") Тогда
			НастройкиОбмена = Параметры.НастройкиОбмена;
		КонецЕсли;
		ПриЧтенииСозданииНаСервере(НастройкиОбмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланОбменаСсылка.МобильноеПриложениеЗаказыКлиентов") Тогда
		Объект.ВидНастройкиОбмена = ВыбранноеЗначение;
		ВидНастройкиОбменаПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ТекстСообщения = "";
	
	ПроверитьПользователяМобильногоПриложения(Отказ, ТекстСообщения);
	
	Если Булево(РегистрироватьОплатыПоПлатежнымКартам)
		И НЕ ЗначениеЗаполнено(ЭквайринговыйТерминал) И НЕ ИспользованиеОбщихНастроек = 1 Тогда
		ТекстСообщения =
			НСтр("ru = 'Укажите эквайринговый терминал для создания документов ""Эквайринговая операция"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, Объект.Ссылка, "ЭквайринговыйТерминал", "ЭквайринговыйТерминал", Отказ);
	КонецЕсли;
	
	Если ИспользоватьЗаданияДляУправленияТорговымиПредставителями
		И НЕ ЗначениеЗаполнено(Куратор) И НЕ ИспользованиеОбщихНастроек = 1 Тогда
		ТекстСообщения =
			НСтр("ru = 'Укажите куратора для торгового представителя.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, Объект.Ссылка, "Куратор", "Куратор", Отказ);
	КонецЕсли;
	
	Если Булево(ИспользоватьПКОДляРегистрацииОплаты) И ИспользоватьНесколькоКасс
		И НЕ ЗначениеЗаполнено(Касса) И НЕ ИспользованиеОбщихНастроек = 1 Тогда
		ТекстСообщения =
			НСтр("ru = 'Укажите кассу для создания документов ""Приходный кассовый ордер"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, Объект.Ссылка, "Касса", "Касса", Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	НастройкаКомпоновки = ТекущиеНастройкиКомпоновкиСервер();
	ТекущийОбъект.НастройкиОбмена = Новый ХранилищеЗначения(НастройкаКомпоновки, Новый СжатиеДанных(9));
	
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) И ЗарегистрироватьИзмененияДляВсехПартнеров Тогда
		СообщениеОбмена = "";
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ЗарегистрироватьИзмененияКлиентовДляПланаОбмена(
			ТекущийОбъект.Ссылка, Истина, "", Отказ, СообщениеОбмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Прочитать();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийШапкиФормы

&НаКлиенте
Процедура ВидНастройкиОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Ссылка", Объект.Ссылка);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("ПланОбмена.МобильноеПриложениеЗаказыКлиентов.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВидНастройкиОбменаПриИзменении(Элемент)
	
	ВидНастройкиОбменаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОстатокКоличествоПриИзменении(Элемент)
	
	Модифицированность = Истина;
	НеОтображатьОстатокПриПодборе = НЕ ОстатокКоличество;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВесовыеХарактеристикиПриИзменении(Элемент)
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеОбщихНастроекПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если ИспользованиеОбщихНастроек = 0 И ЗначениеЗаполнено(Объект.ВидНастройкиОбмена) Тогда
		Объект.ВидНастройкиОбмена = "";
	КонецЕсли;
	ИнициализироватьКомпоновщикСервер();
КонецПроцедуры

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КураторПриИзменении(Элемент)
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьИзображенияТоваровПриИзменении(Элемент)
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьНаличныеПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если НЕ Булево(РегистрироватьОплатыНаличными) Тогда
		РегистрироватьОплатыПоДоверенностям = 0;
		ИспользоватьДоверенностиДляРегистрацииОплаты = Ложь;
		
		РегистрироватьОплатыПКО = 0;
		Касса = "";
		СтатьяДДСНаличные = "";
		ИспользоватьПКОДляРегистрацииОплаты = Ложь;
	КонецЕсли;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьОплатыПКОПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если Булево(РегистрироватьОплатыПКО) Тогда
		РегистрироватьОплатыПоДоверенностям = 0;
	КонецЕсли;
	ПриИзмененииРегистрироватьОплаты();
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьОплатыПоДоверенностямПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если Булево(РегистрироватьОплатыПоДоверенностям) Тогда
		Касса = "";
		СтатьяДДСНаличные = "";
		РегистрироватьОплатыПКО = 0;
	КонецЕсли;
	ПриИзмененииРегистрироватьОплаты();
КонецПроцедуры

&НаКлиенте
Процедура РегистрироватьОплатыПоПлатежнымКартамПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Если НЕ Булево(РегистрироватьОплатыПоПлатежнымКартам) Тогда
		ЭквайринговыйТерминал = "";
		СтатьяДДСЭквайринг = "";
	КонецЕсли;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбменаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЖурналРегистрацииПоНастройкам();
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбменаНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЖурналРегистрацииПоНастройкам();
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСНаличныеПриИзменении(Элемент)
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СтатьяДДСЭквайрингПриИзменении(Элемент)
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекКомпоновкиПриИзменении(Элемент)
	
	ТекущаяНастройка = Элементы.ТаблицаНастроекКомпоновки.ТекущиеДанные;
	Если ТекущаяНастройка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Модифицированность = Истина;
	ТекущаяНастройкаНастройка = ТекущаяНастройка.Настройка;
	Если ТекущаяНастройкаНастройка = НСтр("ru = 'Сегмент партнеров'")
		ИЛИ ТекущаяНастройкаНастройка = НСтр("ru = 'Организация'")
		ИЛИ ТекущаяНастройкаНастройка = НСтр("ru = 'Соглашение'") Тогда
		ЗарегистрироватьИзмененияДляВсехПартнеров = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтвязатьУстройство(Команда)
	
	ОтвязатьУстройствоНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СтандартныеНастройки(Команда)
	
	Модифицированность = Истина;
	ЗагрузитьСтандартныеНастройки();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВидНастройкиОбменаПриИзмененииСервер()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидНастройкиОбмена) Тогда
		ИспользованиеОбщихНастроек = 0;
	Иначе
		ИспользованиеОбщихНастроек = 1;
	КонецЕсли;
	ИнициализироватьКомпоновщикСервер();
КонецПроцедуры

&НаСервере
Процедура ДоступностьЗаполненияОбщихНастроек()
	
	НастройкиИспользуются = НастройкиИспользуются(Объект.Ссылка);
	Элементы.ГруппаКомментарийИспользованиеУстройства.Видимость = НастройкиИспользуются;
	Элементы.ИспользованиеОбщихНастроек.Доступность = НЕ НастройкиИспользуются;
	
	Если ИспользованиеОбщихНастроек = 1 Тогда
		Элементы.СтраницыИспользованияНастроек.ТекущаяСтраница = Элементы.СтраницаНастроекБезВозможностиИзменения;
		Элементы.ВидНастройкиОбмена.Доступность = НЕ НастройкиИспользуются;
	Иначе
		Элементы.СтраницыИспользованияНастроек.ТекущаяСтраница = Элементы.СтраницаНастроекСВозможностьюИзменения;
		Элементы.ВидНастройкиОбмена.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтандартныеНастройки()
	
	ИнициализироватьКомпоновщикСервер(, Истина);
КонецПроцедуры

// Параметры:
//  НастройкиОбмена - ХранилищеЗначения
//  НачальныеНастройки - Булево
//
&НаСервере
Процедура ИнициализироватьКомпоновщикСервер(НастройкиОбмена = Неопределено, НачальныеНастройки = Ложь)
	
	Если НастройкиОбмена = Неопределено Тогда
		Если НачальныеНастройки Тогда
			НастройкаКомпоновки = Неопределено;
		Иначе
			НастройкаКомпоновки = Неопределено;
			Если НЕ ЗначениеЗаполнено(Объект.ВидНастройкиОбмена) Тогда
				ХранилищеНастройкиКомпоновки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "НастройкиОбмена");
				Если ХранилищеНастройкиКомпоновки <> Неопределено Тогда
					НастройкаКомпоновки = ХранилищеНастройкиКомпоновки.Получить();
				КонецЕсли;
			Иначе
				ХранилищеНастройкиКомпоновки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНастройкиОбмена, "НастройкиОбмена");
				Если ХранилищеНастройкиКомпоновки <> Неопределено Тогда
					НастройкаКомпоновки = ХранилищеНастройкиКомпоновки.Получить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		НастройкаКомпоновки = НастройкиОбмена.Получить();
	КонецЕсли;
	МобильноеПриложениеЗаказыКлиентов.ЗаполнитьНастройкиКомпоновщика(КомпоновщикНастроекКомпоновкиДанных,
		ПланыОбмена.МобильноеПриложениеЗаказыКлиентов,, НастройкаКомпоновки);
	СоответствияЭлементовОтбора =
		ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.СоответствияЭлементовОтбораФункциональнымОпциям();
	МобильноеПриложениеЗаказыКлиентов.УстановитьОтборыКомпоновщикаВРеквизитыКоллекции(
		ЭтаФорма, КомпоновщикНастроекКомпоновкиДанных, СоответствияЭлементовОтбора,
			ПланыОбмена.МобильноеПриложениеЗаказыКлиентов.РеквизитыШапкиФормы());
	Если ЗначениеЗаполнено(Объект.Пользователь) Тогда
		ПроверитьПользователяМобильногоПриложения();
	КонецЕсли;
	ОтрисоватьФорму();
КонецПроцедуры

&НаСервере
Функция НастройкиИспользуются(ВидНастройкиОбмена)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МобильноеПриложениеЗаказыКлиентов.Ссылка
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеЗаказыКлиентов КАК МобильноеПриложениеЗаказыКлиентов
	|ГДЕ
	|	НЕ МобильноеПриложениеЗаказыКлиентов.ЭтотУзел
	|	И МобильноеПриложениеЗаказыКлиентов.ВидНастройкиОбмена = &ВидНастройкиОбмена");
	Запрос.УстановитьПараметр("ВидНастройкиОбмена", ВидНастройкиОбмена);
	Результат = Запрос.Выполнить();
	Возврат Не Результат.Пустой();
КонецФункции

&НаСервере
Процедура ОтвязатьУстройствоНаСервере()
	
	Объект.Код = СокрЛП(Объект.Пользователь.УникальныйИдентификатор());
	МобильноеПриложениеЗаказыКлиентов.ОчиститьИсториюОбмена(Объект.Ссылка);
	СостояниеОбменаДанными();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналРегистрацииПоНастройкам()
	
	ПараметрыФормы = Новый Структура("Пользователь", Объект.Пользователь);
	ИмяПриложения = Новый Массив;
	ИмяПриложения.Добавить("WSConnection");
	ПараметрыФормы.Вставить("ИмяПриложения", ИмяПриложения);
	ПараметрыФормы.Вставить("ДатаНачала", ДатаОбмена);
	ПараметрыФормы.Вставить("ДатаОкончания", ДатаОбмена);
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьФорму()
	
	РегистрироватьОплатыПоПлатежнымКартам = Число(ЗначениеЗаполнено(ЭквайринговыйТерминал));
	РегистрироватьОплатыПоДоверенностям = Число(ИспользоватьДоверенностиДляРегистрацииОплаты);
	РегистрироватьОплатыПКО = Число(ИспользоватьПКОДляРегистрацииОплаты);
	РегистрироватьОплатыНаличными = НЕ (РегистрироватьОплатыПоДоверенностям + РегистрироватьОплатыПКО = 0);
	ОстатокКоличество = НЕ НеОтображатьОстатокПриПодборе;
	
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРегистрироватьОплаты()
	
	ИспользоватьДоверенностиДляРегистрацииОплаты = Булево(РегистрироватьОплатыПоДоверенностям);
	ИспользоватьПКОДляРегистрацииОплаты = Булево(РегистрироватьОплатыПКО);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(НастройкиОбмена = Неопределено)
	
	Заголовок = Нстр("ru = 'Настройка синхронизации с устройством'");
	Если НЕ ЗначениеЗаполнено(Объект.ВидНастройкиОбмена) Тогда
		ИспользованиеОбщихНастроек = 0;
	Иначе
		ИспользованиеОбщихНастроек = 1;
	КонецЕсли;
	СостояниеОбменаДанными();
	ИнициализироватьКомпоновщикСервер(НастройкиОбмена);
КонецПроцедуры

&НаСервере
Процедура ПроверитьПользователяМобильногоПриложения(Отказ = Ложь, ТекстСообщения = "")
	
	ПроверкаПользователя =
		МобильноеПриложениеЗаказыКлиентовПереопределяемый.ПроверкаПользователяМобильногоПриложения(Объект.Пользователь);
	
	Если НЕ ПроверкаПользователя.ПользовательМобильногоПриложения Тогда
		ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'Пользователь не входит в группу пользователей мобильного приложения.'") + Символы.ПС;
		Отказ = Истина;
	КонецЕсли;
	Если ИспользоватьПКОДляРегистрацииОплаты И Не ПроверкаПользователя.Касса Тогда
		ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'У пользователя недостаточно прав для создания документов ""Приходный кассовый ордер"".'") + Символы.ПС;
		Отказ = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭквайринговыйТерминал) И Не ПроверкаПользователя.ПлатежнаяКарта Тогда
		ТекстСообщения = ТекстСообщения
		+ НСтр("ru = 'У пользователя недостаточно прав для создания документов ""Эквайринговая операция"".'");
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, Объект.Ссылка, "Пользователь", "Пользователь", Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СостояниеОбменаДанными()
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СтатусОбмена = 0;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияОбменовДанными.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиМаксДата
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.РезультатВыполненияОбмена КАК РезультатВыполненияОбмена,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ РезультатыВыполненияОбмена
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиМаксДата КАК СостоянияОбменовДаннымиМаксДата
	|		ПО (СостоянияОбменовДаннымиМаксДата.ДатаОкончания = СостоянияОбменовДанными.ДатаОкончания)
	|ГДЕ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусОбмена,
	|	ЕСТЬNULL(СостоянияОбменовДанными.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОбмена
	|ИЗ
	|	ПланОбмена.МобильноеПриложениеЗаказыКлиентов КАК МобильноеПриложениеЗаказыКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РезультатыВыполненияОбмена КАК СостоянияОбменовДанными
	|		ПО МобильноеПриложениеЗаказыКлиентов.Ссылка = СостоянияОбменовДанными.УзелИнформационнойБазы
	|ГДЕ
	|	МобильноеПриложениеЗаказыКлиентов.Ссылка = &Ссылка";
	
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрСведений.СостоянияОбменовДанными",
			"РегистрСведений.СостоянияОбменовДаннымиОбластейДанных");
	КонецЕсли;
		
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		СтатусОбмена = 0;
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	СтатусОбмена = Выборка.СтатусОбмена;
	ДатаОбмена = Выборка.ДатаОбмена;
КонецПроцедуры

&НаСервере
Функция ТекущиеНастройкиКомпоновкиСервер()
	
	МобильноеПриложениеЗаказыКлиентов.УстановитьРеквизитыФормыВОтборыКомпоновщика(ЭтаФорма,
		КомпоновщикНастроекКомпоновкиДанных, ПланыОбмена.МобильноеПриложениеЗаказыКлиентов);
	Возврат КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки();
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.Куратор.АвтоОтметкаНезаполненного = ИспользоватьЗаданияДляУправленияТорговымиПредставителями И НЕ ИспользованиеОбщихНастроек = 1;
	Элементы.Куратор.Видимость = НЕ ИспользованиеОбщихНастроек = 1;
	
	Элементы.ГруппаПлатежныеКарты.Видимость = ИспользоватьОплатуПлатежнымиКартами;
	Элементы.ЭквайринговыйТерминал.Доступность = Булево(РегистрироватьОплатыПоПлатежнымКартам);
	Элементы.ЭквайринговыйТерминал.АвтоОтметкаНезаполненного = ИспользоватьОплатуПлатежнымиКартами 
		И Булево(РегистрироватьОплатыПоПлатежнымКартам) И НЕ ИспользованиеОбщихНастроек = 1;
	Элементы.ЭквайринговыйТерминал.ОтметкаНезаполненного = ЗначениеЗаполнено(ЭквайринговыйТерминал);
	Элементы.СтатьяДДСЭквайринг.Доступность = Булево(РегистрироватьОплатыПоПлатежнымКартам);
	
	Элементы.РегистрироватьОплатыПоДоверенностям.Доступность = Булево(РегистрироватьОплатыНаличными)
		И ИспользоватьДоверенностиНаПолучениеТМЦ;
	Элементы.ГруппаКомментарийОплатаПоДоверенностям.Видимость = НЕ ИспользоватьДоверенностиНаПолучениеТМЦ;
	
	Элементы.РегистрироватьОплатыПКО.Доступность = Булево(РегистрироватьОплатыНаличными);
	Элементы.Касса.Видимость = ИспользоватьНесколькоКасс;
	Элементы.Касса.Доступность = Булево(РегистрироватьОплатыНаличными) И Булево(РегистрироватьОплатыПКО);
	Элементы.Касса.АвтоОтметкаНезаполненного = Булево(РегистрироватьОплатыНаличными) И Булево(РегистрироватьОплатыПКО) И НЕ ИспользованиеОбщихНастроек = 1;
	Элементы.Касса.ОтметкаНезаполненного = ЗначениеЗаполнено(Касса);
	Элементы.СтатьяДДСНаличные.Доступность = Булево(РегистрироватьОплатыНаличными) И Булево(РегистрироватьОплатыПКО);
	
	ВидимостьТаблицыОтбора = КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки.Элементы.Количество()>0;
	Элементы.ГруппаОтборы.Видимость = ВидимостьТаблицыОтбора;
	
	Элементы.ФормаОтвязатьУстройство.Видимость = НЕ ЭтоНовый;
	
	ДоступностьЗаполненияОбщихНастроек();
	
	Если СтатусОбмена = 0 Тогда
		СтатусОбменаНадпись = Нстр("ru = 'Ожидается первая синхронизация данных'");
	ИначеЕсли СтатусОбмена = 1 Тогда
		СтатусОбменаНадпись = Нстр("ru = 'Синхронизация успешно завершена в %ДатаОбмена%'");
	ИначеЕсли СтатусОбмена = 2 Тогда
		СтатусОбменаНадпись = Нстр("ru = 'Синхронизация завершена с ошибками в %ДатаОбмена%'");
	КонецЕсли;
	СтатусОбменаНадпись = СтрЗаменить(СтатусОбменаНадпись, "%ДатаОбмена%", Формат(ДатаОбмена, "ДЛФ=DT"));
	Элементы.СтатусОбмена.Видимость = НЕ ЭтоНовый;
	Элементы.СтатусОбменаНадпись.Видимость = НЕ ЭтоНовый;
	Элементы.Декорация2.Видимость = НЕ ЭтоНовый;
	Элементы.СтатусОбмена.Гиперссылка = НЕ СтатусОбмена = 0;
	Элементы.СтатусОбменаНадпись.Гиперссылка = НЕ СтатусОбмена = 0;
КонецПроцедуры

#КонецОбласти