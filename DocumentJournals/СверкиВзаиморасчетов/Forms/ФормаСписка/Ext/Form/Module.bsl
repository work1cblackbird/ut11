
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДоступноСозданиеСверокВзаиморасчетов2_5_11 = ПравоДоступа("Добавление", Метаданные.Документы.СверкаВзаиморасчетов2_5_11);
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
	
	ПараметрКомпоновки = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЗапрещенныеТипыРасчетов"));
	Если ПараметрКомпоновки <> Неопределено Тогда
		ПараметрКомпоновки.Использование = Истина;
		ПараметрКомпоновки.Значение.ЗагрузитьЗначения(Документы.СверкаВзаиморасчетов2_5_11.ЗапрещенныеТипыРасчетов());
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект, Элементы.ГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыПриСозданииНаСервере.КолонкаСостоянияЭДО = Элементы.ПредставлениеСостояния;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	УстановитьВидимостьЭлементовНаСервере();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО = Истина;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	Если ИмяСобытия = "СозданыСверкиПомощником2_5_11" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Менеджер			= Настройки.Получить("Менеджер");
	Статус				= Настройки.Получить("Статус");
	СостояниеЭДООтбор	= Настройки.Получить("СостояниеЭДООтбор");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Менеджер",
		Менеджер,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Менеджер));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Статус",
		Статус,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Статус));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СостояниеЭДО",
		СостояниеЭДООтбор,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеЭДООтбор));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусОтборПриИзменении(Элемент)
	
	ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
	ПравоеЗначение = Неопределено;
	
	Если Статус = "Создана" Тогда
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		ПравоеЗначение = Новый Массив;
		ПравоеЗначение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов.Создана"));
		ПравоеЗначение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов2_5_11.Создана"));
	ИначеЕсли Статус = "НаСверке" Тогда 
		ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		ПравоеЗначение = Новый Массив;
		ПравоеЗначение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов.НаСверке"));
		ПравоеЗначение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов2_5_11.НаСверке"));
	ИначеЕсли Статус = "Сверена" Тогда
		ПравоеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов.Сверена");
	ИначеЕсли Статус = "СверенаБезРазногласий" Тогда
		ПравоеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов2_5_11.СверенаБезРазногласий");
	ИначеЕсли Статус = "СверенаСРазногласиями" Тогда
		ПравоеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов2_5_11.СверенаСРазногласиями");
	ИначеЕсли Статус = "Отклонена" Тогда
		ПравоеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов2_5_11.Отклонена");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Статус", ПравоеЗначение, ВидСравненияОтбора,, ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерОтборПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Менеджер", Менеджер, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Менеджер));
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеЭДОПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"СостояниеЭДО",
		СостояниеЭДООтбор,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(СостояниеЭДООтбор));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Если Поле = Элементы.ПредставлениеСостояния Тогда
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(Элемент.ТекущиеДанные.Ссылка, СтандартнаяОбработка);
	КонецЕсли;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если НЕ ДоступноСозданиеСверокВзаиморасчетов2_5_11 Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование
		И ТипЗнч(Элементы.Список.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.СверкаВзаиморасчетов2_5_11") Тогда
		ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элемент);
	Иначе
		СтруктураОтбор = Новый Структура("Организация,Контрагент,КонтактноеЛицо");
		ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
		Если ТекущаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураОтбор,ТекущаяСтрока);
			СтруктураОтбор.Вставить("НачалоПериода", ТекущаяСтрока.НачалоПериода);
			СтруктураОтбор.Вставить("КонецПериода", ТекущаяСтрока.КонецПериода);
		КонецЕсли;
		СтруктураПараметры = Новый Структура("Отбор", СтруктураОтбор);
		ОткрытьФорму("Документ.СверкаВзаиморасчетов2_5_11.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПомощникСоздания(Команда)

	ОчиститьСообщения();
	
	Если ОбновлениеНеЗавершено() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Форма помощника создания сверок не доступна, т.к. не завершено обновление системы.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Документ.СверкаВзаиморасчетов2_5_11.Форма.ФормаПомощникаСоздания");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСоздан(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ДополнительныеПараметры.Вставить("СтатусНаименование", "Создана");
	ДополнительныеПараметры.Вставить("СтатусСиноним", НСтр("ru='Создана'"));
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='У выделенных в списке документов будет установлен статус ""Создана"". Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусНаСверке(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ДополнительныеПараметры.Вставить("СтатусНаименование", "НаСверке");
	ДополнительныеПараметры.Вставить("СтатусСиноним", НСтр("ru='На сверке'"));	
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='У выделенных в списке документов будет установлен статус ""На сверке"". Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСверен(Команда)
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.СверкаВзаиморасчетов2_5_11"));
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ДополнительныеПараметры.Вставить("ИсключаемыеТипы", ИсключаемыеТипы);
	ДополнительныеПараметры.Вставить("СтатусНаименование", "Сверена");
	ДополнительныеПараметры.Вставить("СтатусСиноним", НСтр("ru='Сверена'"));
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='У выделенных в списке документов будет установлен статус ""Сверена"". Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСверенаБезРасхождений(Команда)

	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.СверкаВзаиморасчетов2_4"));
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ДополнительныеПараметры.Вставить("ИсключаемыеТипы", ИсключаемыеТипы);
	ДополнительныеПараметры.Вставить("СтатусНаименование", "СверенаБезРазногласий");
	ДополнительныеПараметры.Вставить("СтатусСиноним", НСтр("ru='Сверена без разногласий'"));
	
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='У выделенных в списке документов будет установлен статус ""Сверена без разногласий"". Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСверенаСРасхождениями(Команда)

	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.СверкаВзаиморасчетов2_4"));
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ДополнительныеПараметры.Вставить("ИсключаемыеТипы", ИсключаемыеТипы);
	ДополнительныеПараметры.Вставить("СтатусНаименование", "СверенаСРазногласиями");
	ДополнительныеПараметры.Вставить("СтатусСиноним", НСтр("ru='Сверена с разногласиями'"));

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='У выделенных в списке документов будет установлен статус ""Сверена с разногласиями"". Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтклонена(Команда)

	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИсключаемыеТипы = Новый Массив;
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.СверкаВзаиморасчетов2_4"));
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ДополнительныеПараметры.Вставить("ИсключаемыеТипы", ИсключаемыеТипы);
	ДополнительныеПараметры.Вставить("СтатусНаименование", "Отклонена");
	ДополнительныеПараметры.Вставить("СтатусСиноним", НСтр("ru='Отклонена'"));

	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьСтатусЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		НСтр("ru='У выделенных в списке документов будет установлен статус ""Отклонена"". Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	Если ТипЗнч(Элементы.Список.ТекущаяСтрока) = Тип("ДокументСсылка.СверкаВзаиморасчетов2_4") Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для документов ""Сверка взаиморасчетов (2.4)"" не поддерживается электронный документооброт'"));
		Возврат;
	КонецЕсли;
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидимостьСостоянияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО(ЭтотОбъект, Элементы.ПредставлениеСостояния);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СверкаВзаиморасчетов2_4.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СверкаВзаиморасчетов2_5_11.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(Неопределено, МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт

	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);

КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);

КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Функция ОбновлениеНеЗавершено()
	
	Возврат НЕ ВзаиморасчетыСервер.ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено(Истина);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовНаСервере()
	
	Элементы.Партнер.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов");
	Элементы.ГруппаСоздать.Видимость = Ложь;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Элементы.СостояниеЭДООтбор.Видимость = Элементы.ПредставлениеСостояния.Видимость;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ЭтоБазовая = ПолучитьФункциональнуюОпцию("БазоваяВерсия");
	Элементы.ПодменюЭДО.Видимость = НЕ ЭтоБазовая;
	Элементы.ПредставлениеСостояния.Видимость = НЕ ЭтоБазовая;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	СтатусНаименование = ДополнительныеПараметры.СтатусНаименование;
	СтатусСиноним = ДополнительныеПараметры.СтатусСиноним;

	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	ПроверкаПередСменойСтатуса(ДополнительныеПараметры);
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, СтатусНаименование, ДополнительныеПараметры);
	ОбщегоНазначенияУТКлиент.ОповеститьПользователяОбУстановкеСтатуса(Элементы.Список, КоличествоОбработанных, ВыделенныеСтроки.Количество(), СтатусСиноним);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередСменойСтатуса(ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Свойство("ИсключаемыеТипы") = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	СтатусСиноним = ДополнительныеПараметры.СтатусСиноним;          
	ИсключаемыеТипы = ДополнительныеПараметры.ИсключаемыеТипы;
	
	Для Каждого Ссылка Из ВыделенныеСтроки Цикл
		Если ИсключаемыеТипы.Найти(ТипЗнч(Ссылка)) <> Неопределено Тогда     
			ТекстОшибки = НСтр("ru = 'Установка статуса ""%Статус%"" не предусмотрена для документа %Документ%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", СтатусСиноним);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки, Ссылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
