
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор")
	 И Параметры.Отбор.Свойство("Организация") Тогда
		Если ТипЗнч(Параметры.Отбор.Организация) = Тип("Массив")
		 И Параметры.Отбор.Организация.Количество() = 1 Тогда 
			Организация = Параметры.Отбор.Организация[0];
		ИначеЕсли ТипЗнч(Параметры.Отбор.Организация) = Тип("СправочникСсылка.Организации") Тогда
			Организация = Параметры.Отбор.Организация;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Список,
		"Организация",
		Организация);
		
	Элементы.ГруппаСоздать.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
	
	Элементы.СписокСоздатьКорректировкуНДС.Видимость = Элементы.СписокСоздатьКорректировкуНДС.Видимость
		И ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНалогообложенияНДСПартийТоваров);
	Элементы.СписокСоздатьРасчетКурсовыхРазниц.Видимость = Элементы.СписокСоздатьРасчетКурсовыхРазниц.Видимость
		И ПравоДоступа("Добавление", Метаданные.Документы.РасчетКурсовыхРазниц);
	Элементы.СписокСоздатьРаспределениеДоходовРасходов.Видимость = Элементы.СписокСоздатьРаспределениеДоходовРасходов.Видимость
		И ПравоДоступа("Добавление", Метаданные.Документы.РаспределениеДоходовПоНаправлениямДеятельности);
	Элементы.СписокСоздатьРасчетПроцентныхРасходовДисконтирования.Видимость = Элементы.СписокСоздатьРасчетПроцентныхРасходовДисконтирования.Видимость
		И ПравоДоступа("Добавление", Метаданные.Документы.РасчетПроцентныхРасходовДисконтирования);
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = Настройки.Получить("Организация");
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		"Организация",
		Организация);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияОтборПриИзменении(Элемент)

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
		"Организация",
		Организация);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Не Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьРаспределениеДоходов(Команда)
	
	СтруктураОснование = Новый Структура("Организация", Организация);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);;
	ОткрытьФорму("Документ.РаспределениеДоходовПоНаправлениямДеятельности.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасчетКурсовыхРазниц(Команда)
	
	СтруктураОснование = Новый Структура("Организация", Организация);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);;
	ОткрытьФорму("Документ.РасчетКурсовыхРазниц.ФормаОбъекта", СтруктураПараметры, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНДС(Команда)
	
	СтруктураОснование = Новый Структура("Организация", Организация);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);;
	ОткрытьФорму("Документ.КорректировкаНалогообложенияНДСПартийТоваров.ФормаОбъекта",
		СтруктураПараметры,
		Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАмортизациюОС(Команда)
	
	Возврат; // В УТ11 обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАмортизацияНМА(Команда)
	
	Возврат; // В УТ11 обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАмортизацияОС2_4(Команда)
	
	Возврат; // В УТ11 обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАмортизацияНМА2_4(Команда)
	
	Возврат; // В УТ11 обработчик пустой
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНачислениеПроцентовПоАренде(Команда)
	
	Возврат; // В УТ обработчик пустой

КонецПроцедуры

&НаКлиенте
Процедура СоздатьРасчетПроцентныхРасходовДисконтирования(Команда)
	
	СтруктураОснование = Новый Структура("Организация", Организация);
	СтруктураПараметры = Новый Структура("Основание", СтруктураОснование);;
	ОткрытьФорму("Документ.РасчетПроцентныхРасходовДисконтирования.ФормаОбъекта", СтруктураПараметры, Элементы.Список);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список", "Дата");

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Тип.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Тип");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Тип("ДокументСсылка.РаспределениеДоходовПоНаправлениямДеятельности");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЕстьРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", 
		Документы.РаспределениеДоходовПоНаправлениямДеятельности.ПредставлениеРаннихДокументов());
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
