#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц);
		
	КонецЕсли;
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц);
	КонецЕсли;
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения; 

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ДенежныеСредстваУПодотчетныхЛиц");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийДенежныеСредстваУПодотчетныхЛиц", 
		РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийДенежныеСредстваУПодотчетныхЛиц"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ПодотчетноеЛицо)
	|	И ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом


#КонецОбласти

//Выполняет очистку цели выдачи денежных средств подотчетнику
//
// Параметры:
//	Параметры - Структура - параметры обработчика ожидания
//	УникальныйИдентификатор - УникальныйИдентификатор - идентификатор обработчика ожидания.
//
Процедура ОчиститьЦелиВыдачиДенежныхСредствПодотчетнику(Параметры, УникальныйИдентификатор) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаУстановлена = Ложь;	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();
		БлокировкаУстановлена = Истина;
			
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДенежныеСредстваУПодотчетныхЛиц.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваУПодотчетныхЛиц КАК ДенежныеСредстваУПодотчетныхЛиц
		|ГДЕ
		|	НЕ ДенежныеСредстваУПодотчетныхЛиц.ЦельВыдачи = ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ДенежныеСредстваУПодотчетныхЛиц.СоздатьНаборЗаписей();
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		Выборка = Результат.Выбрать();
			
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
			НаборЗаписей.Прочитать();
			
			Для Каждого ЗаписьНабора Из НаборЗаписей Цикл
				ЗаписьНабора.ЦельВыдачи = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
			КонецЦикла;
			
			НаборЗаписей.Записать();
				
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
			
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение очистки цели выдачи денежных средств подотчетнику'"),
		        УровеньЖурналаРегистрации.Ошибка,
		        ,
		        ,
		        ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Если Не БлокировкаУстановлена Тогда
			ТекстИсключения = НСтр("ru = 'Не удалось выполнить операцию.
			|Необходимо запустить в монопольном режиме.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
