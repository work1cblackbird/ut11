#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка
		Или РасчетСебестоимостиПрикладныеАлгоритмы.ДвиженияЗаписываютсяРасчетомПартийИСебестоимости(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если РасчетСебестоимостиПрикладныеАлгоритмы.ФормироватьДвиженияРегистровУчетаСебестоимости(ЭтотОбъект) Тогда
		
		// Сохраним неизмененные первичные движения.
		СохранитьНеИзмененныеПервичныеДвижения();
		
		// Сохраним расчетные движения за периоды, в которых есть первичные движения.
		РасчетСебестоимостиПрикладныеАлгоритмы.СохранитьДвиженияСформированныеРасчетомПартийИСебестоимости(ЭтотОбъект, Замещение);
		
	КонецЕсли;
	
	Если Не ПроведениеДокументов.КонтролироватьИзменения(ДополнительныеСвойства)
		Или ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Текущее состояние набора помещается во временную таблицу,
	// чтобы при записи получить изменение нового набора относительно текущего.
	
	ТекстыЗапросовДляПолученияТаблицыИзменений = 
		ЗакрытиеМесяцаСервер.ТекстыЗапросовДляПолученияТаблицыИзмененийРегистра(Метаданные(), Отбор);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстыЗапросовДляПолученияТаблицыИзменений.ТекстВыборкиНачальныхДанных;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	
	Запрос.Выполнить();
	
	ДополнительныеСвойства.Вставить("ТекстВыборкиТаблицыИзменений", ТекстыЗапросовДляПолученияТаблицыИзменений.ТекстВыборкиТаблицыИзменений);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Или Не ПроведениеДокументов.КонтролироватьИзменения(ДополнительныеСвойства)
		Или ПланыОбмена.ГлавныйУзел() <> Неопределено
		Или РасчетСебестоимостиПрикладныеАлгоритмы.ДвиженияЗаписываютсяРасчетомПартийИСебестоимости(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	// Рассчитывается изменение нового набора относительно текущего с учетом накопленных изменений
	// и помещается во временную таблицу для последующей записи в регистрах заданий.
	Запрос = Новый Запрос;
	Запрос.Текст = ДополнительныеСвойства.ТекстВыборкиТаблицыИзменений;
	Запрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор.Значение);
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СохранитьНеИзмененныеПервичныеДвижения()
	
	Если РасчетСебестоимостиПовтИсп.ЗначенияТехнологическихПараметров().НеСохранятьРасчетныеДвижения
	 ИЛИ ДополнительныеСвойства.Свойство("НеСохранятьРасчетныеДвижения") Тогда
		Возврат;
	КонецЕсли;
	
	ТипыВводаОстатков = ВводОстатковСервер.ДоступныеТипыВводаОстатков();
	Если ТипыВводаОстатков.Найти(ТипЗнч(Отбор.Регистратор.Значение)) <> Неопределено Тогда
		Возврат; // его движения не корректируются партионным учетом
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ДатаРегистратора") Тогда
		ДатаРегистратора = ДополнительныеСвойства.ДатаРегистратора;
	Иначе
		ДатаРегистратора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Отбор.Регистратор.Значение, "Дата");
	КонецЕсли;
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ДатаРегистратора)) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаписей = ЭтотОбъект.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", 				Отбор.Регистратор.Значение);
	Запрос.УстановитьПараметр("НаборЗаписей", 				ТаблицаЗаписей);
	
	#Область ШаблоныТекстаЗапроса
	
	// Подготовим шаблоны для формирования текстов запросов.
	ПоляИсключения = Новый Структура("НомерСтроки, Активность, Регистратор, МоментВремени");
	ПоляПартий     = Новый Структура("Партия, АналитикаУчетаПартий, АналитикаФинансовогоУчета, ВидДеятельностиНДС, РасчетНеЗавершен");
	
	ТекстПоляРегистра = "";
	ТекстПоляРегистраСМинусом = "";
	ТекстПоляРегистраБезПартий = "";
	ТекстПоляГруппировкиБезПартий = "";
	ТекстПоляСуммирования = "";
	ТекстПоляУсловия = "";
	
	Для Каждого ТекущаяКолонка Из ТаблицаЗаписей.Колонки Цикл
		
		Если ПоляИсключения.Свойство(ТекущаяКолонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоСуммируемоеПоле = Метаданные().Ресурсы.Найти(ТекущаяКолонка.Имя) <> Неопределено
			ИЛИ (Метаданные().Реквизиты.Найти(ТекущаяКолонка.Имя) <> Неопределено
				И ТекущаяКолонка.ТипЗначения.СодержитТип(Тип("Число")));
		 
		ТекстПоляРегистра = ТекстПоляРегистра + ?(ТекстПоляРегистра = "", "", ",
			|	") + "Т." + ТекущаяКолонка.Имя;
		ТекстПоляРегистраСМинусом = ТекстПоляРегистраСМинусом + ?(ТекстПоляРегистраСМинусом = "", "", ",
			|	") + ?(ЭтоСуммируемоеПоле, "-", "") + "Т." + ТекущаяКолонка.Имя;
			
		Если ЭтоСуммируемоеПоле Тогда
			
			ТекстПоляСуммирования = ТекстПоляСуммирования + ?(ТекстПоляСуммирования = "", "", ",
				|	") + "СУММА(Т." + ТекущаяКолонка.Имя + ") КАК " + ТекущаяКолонка.Имя;
			ТекстПоляУсловия = ТекстПоляУсловия + ?(ТекстПоляУсловия = "", "", "
				|	ИЛИ ") + "СУММА(Т." + ТекущаяКолонка.Имя + ") <> 0";
			
		Иначе
			
			Если НЕ ПоляПартий.Свойство(ТекущаяКолонка.Имя) Тогда
				
				ТекстПоляРегистраБезПартий = ТекстПоляРегистраБезПартий + ?(ТекстПоляРегистраБезПартий = "", "", ",
					|	") + "Т." + ТекущаяКолонка.Имя;
				ТекстПоляГруппировкиБезПартий = ТекстПоляГруппировкиБезПартий + ?(ТекстПоляГруппировкиБезПартий = "", "", ",
					|	") + "Т." + ТекущаяКолонка.Имя;
					
			Иначе
				
				ТекстПоляРегистраБезПартий = ТекстПоляРегистраБезПартий + ?(ТекстПоляРегистраБезПартий = "", "", ",
					|	") + "ВЫБОР КОГДА Т.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
					|		ТОГДА Т." + ТекущаяКолонка.Имя
					+ " ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК " + ТекущаяКолонка.Имя;
				ТекстПоляГруппировкиБезПартий = ТекстПоляГруппировкиБезПартий + ?(ТекстПоляГруппировкиБезПартий = "", "", ",
					|	") + "ВЫБОР КОГДА Т.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
					|		ТОГДА Т." + ТекущаяКолонка.Имя
					+ " ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	#Область СозданиеВременныхТаблиц
	
	// Проанализируем наличие измененных первичных движений в разрезе периодов (месяцев).
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	&ТекстВыборПоляРегистра
	|ПОМЕСТИТЬ ВТНаборЗаписей
	|ИЗ
	|	&НаборЗаписей КАК Т
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	&ТекстПоляРегистраБезПартий,
	|	&ТекстПоляСуммирования
	|ПОМЕСТИТЬ ВТИзмененныеДвижения
	|ИЗ
	|
	|(ВЫБРАТЬ
	|	СпрНоменклатура.ТипНоменклатуры,
	|	ИСТИНА КАК ДвиженияИБ,
	|	&ТекстВыборПоляРегистра
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикиНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикиНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО АналитикиНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	Т.Регистратор = &Регистратор
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпрНоменклатура.ТипНоменклатуры,
	|	ЛОЖЬ КАК ДвиженияИБ,
	|	&ТекстПоляРегистраСМинусом
	|ИЗ
	|	ВТНаборЗаписей КАК Т
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикиНоменклатуры
	|		ПО Т.АналитикаУчетаНоменклатуры = АналитикиНоменклатуры.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО АналитикиНоменклатуры.Номенклатура = СпрНоменклатура.Ссылка
	|ГДЕ
	|	НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	&ТекстПоляГруппировкиБезПартий
	|ИМЕЮЩИЕ
	|	&ТекстПоляУсловия
	|	ИЛИ МАКСИМУМ(Т.ДвиженияИБ) = ЛОЖЬ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	Т.Период КАК Период,
	|	МАКСИМУМ(Т.ЕстьИзмененныеДвижения) КАК ЕстьИзмененныеДвижения
	|ПОМЕСТИТЬ ВТПериодыДвижений
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|		ЛОЖЬ КАК ЕстьИзмененныеДвижения
	|	ИЗ
	|		ВТНаборЗаписей КАК Т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) КАК Период,
	|		ИСТИНА КАК ЕстьИзмененныеДвижения
	|	ИЗ
	|		ВТИзмененныеДвижения КАК Т
	|	) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Период
	|;
	|";
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаЗапроса,
		ТекстПоляРегистра,
		ТекстПоляРегистраСМинусом,
		ТекстПоляРегистраБезПартий,
		ТекстПоляСуммирования,
		ТекстПоляГруппировкиБезПартий,
		ТекстПоляУсловия);
		
	Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "&ТекстВыборПоляРегистра", ТекстПоляРегистра);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляРегистраСМинусом", ТекстПоляРегистраСМинусом);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляРегистраБезПартий", ТекстПоляРегистраБезПартий);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляСуммирования", ТекстПоляСуммирования);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляГруппировкиБезПартий", ТекстПоляГруппировкиБезПартий);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПоляУсловия", ТекстПоляУсловия);
		
	Запрос.Выполнить(); // сформируем временные таблицы с описанием движений
	
	#КонецОбласти
	
	#Область ЗаполнениеНабораЗаписей
	
	// Движения не измененных периодов возьмем из ИБ,
	// а движения измененных периодов и расчетные движения - из набора записей.
	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	&Регистратор КАК Регистратор,
	|	&ТекстПоляРегистра
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Т
	|ГДЕ
	|	Т.Регистратор = &Регистратор
	|	И НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|	И НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) В
	|		(ВЫБРАТЬ Т.Период
	|		 ИЗ ВТПериодыДвижений КАК Т
	|		 ГДЕ НЕ Т.ЕстьИзмененныеДвижения)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Регистратор КАК Регистратор,
	|	&ТекстПоляРегистра
	|ИЗ
	|	ВТНаборЗаписей КАК Т
	|ГДЕ
	|	НЕ Т.РасчетПартий
	|	И НЕ Т.РасчетСебестоимости
	|	И НАЧАЛОПЕРИОДА(Т.Период, МЕСЯЦ) В
	|		(ВЫБРАТЬ Т.Период
	|		 ИЗ ВТПериодыДвижений КАК Т
	|		 ГДЕ Т.ЕстьИзмененныеДвижения)
	|";
	
	Запрос.Текст = СтрЗаменить(ШаблонТекстаЗапроса, "&ТекстПоляРегистра", ТекстПоляРегистра);
	
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	
	ЭтотОбъект.Загрузить(ТаблицаЗаписей);
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
