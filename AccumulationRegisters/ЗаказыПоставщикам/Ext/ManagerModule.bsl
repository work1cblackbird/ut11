#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает оформленное накладными по заказам количество.
//
// Параметры:
//  ТаблицаОтбора		 - ТаблицаЗначений - Таблица с полями "Ссылка" и "КодСтроки", строки должны быть уникальными.
//  ОтборПоИзмерениям	 - Структура - ключ структуры определяет имя измерения, по которому будет накладываться отбор,
//  									а значение структуры - искомое значение.
//  ИсключитьЗаказ		 - Булево - Истина, исключить
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с полями "Ссылка", "КодСтроки", "Количество". Для каждой пары Заказ-КодСтроки содержит
//                    оформленное накладными количество.
//
Функция ТаблицаОформлено(ТаблицаОтбора, ОтборПоИзмерениям = Неопределено, ИсключитьЗаказ = Ложь) Экспорт

	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Ссылка    КАК Ссылка,
		|	Таблица.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ВтОтбор
		|ИЗ
		|	&ТаблицаОтбора КАК Таблица
		|ГДЕ
		|	Таблица.КодСтроки > 0
		|;
		|
		|//////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отбор.КодСтроки КАК КодСтроки,
		|	Отбор.Ссылка    КАК Ссылка,
		|	МАКСИМУМ(РегистрЗаказы.Номенклатура)   КАК Номенклатура,
		|	МАКСИМУМ(РегистрЗаказы.Характеристика) КАК Характеристика,
		|	МАКСИМУМ(РегистрЗаказы.Склад)          КАК Склад,
		|
		|	СУММА(ВЫБОР КОГДА РегистрЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|				РегистрЗаказы.КОформлению
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ)           КАК Количество,
		|	СУММА(ВЫБОР КОГДА РегистрЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|				РегистрЗаказы.КОформлению
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ)           КАК КоличествоПриход,
		|	СУММА(ВЫБОР КОГДА РегистрЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			И РегистрЗаказы.КОформлению < 0 И НЕ Расхождения.Ссылка ЕСТЬ NULL ТОГДА
		|				- РегистрЗаказы.КОформлению
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ)           КАК КоличествоКорректировка
		|ИЗ
		|	ВтОтбор КАК Отбор
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам КАК РегистрЗаказы
		|		ПО РегистрЗаказы.ЗаказПоставщику = Отбор.Ссылка
		|		 И РегистрЗаказы.КодСтроки = Отбор.КодСтроки
		|		 И РегистрЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|		 И РегистрЗаказы.КОформлению <> 0
		|		 И РегистрЗаказы.Активность
		|		 И &Отбор1
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения.Расхождения КАК Расхождения
		|		ПО Расхождения.Ссылка = РегистрЗаказы.Регистратор
		|		 И Расхождения.ЗаказПоставщику = РегистрЗаказы.ЗаказПоставщику
		|		 И Расхождения.КодСтроки = РегистрЗаказы.КодСтроки
		|		 И Расхождения.ВариантОтражения
		|			= ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияКорректировокПоступлений.УменьшитьЗакупкуУчестьПриИнвентаризации)
		|СГРУППИРОВАТЬ ПО
		|	Отбор.Ссылка, Отбор.КодСтроки";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	
	Отбор = Новый Массив;
	Если ИсключитьЗаказ Тогда
		Отбор.Добавить("РегистрЗаказы.ЗаказПоставщику <> РегистрЗаказы.Регистратор");
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПоИзмерениям) Тогда
		Для Каждого КлючЗначение Из ОтборПоИзмерениям Цикл
			Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
			Отбор.Добавить("РегистрЗаказы." + КлючЗначение.Ключ + " В(&" + КлючЗначение.Ключ + ")");
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Отбор1", "И " + СтрСоединить(Отбор, " И "));
	Иначе	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &Отбор1", "");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Таблица = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	Таблица.Индексы.Добавить("Ссылка, КодСтроки");

	Возврат Таблица;

КонецФункции

// Возвращает остаток к оформлению по переданному списку заказов
//
// Параметры:
//  МассивЗаказов		 - Массив - Массив заказов
//  ИсключаемаяНакладная - ДокументСсылка.ПеремещениеТоваров - Накладная, движения которой необходимо исключить из результата.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблиц с кодами строк.
//
Функция КОформлениюОстаток(МассивЗаказов, ИсключаемаяНакладная = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("ИсключаемаяНакладная", ИсключаемаяНакладная);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Распоряжение          КАК Распоряжение,
	|	Таблица.Номенклатура          КАК Номенклатура,
	|	Таблица.Характеристика        КАК Характеристика,
	|	Таблица.Склад                 КАК Склад,
	|	Таблица.КодСтроки             КАК КодСтроки,
	|	СУММА(Таблица.Количество)     КАК Количество,
	|	Таблица.ЗаказПоставщику       КАК ЗаказПоставщику,
	|	Таблица.Назначение            КАК Назначение
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ЗаказПоставщику КАК Распоряжение,
	|		Таблица.Номенклатура       КАК Номенклатура,
	|		Таблица.Характеристика     КАК Характеристика,
	|		Таблица.КодСтроки          КАК КодСтроки,
	|		Таблица.Склад              КАК Склад,
	|		Таблица.КОформлениюОстаток КАК Количество,
	|		Таблица.ЗаказПоставщику    КАК ЗаказПоставщику,
	|		ТаблицаЗаказа.Назначение   КАК Назначение
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&Заказы)) КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТаблицаЗаказа
	|			ПО Таблица.ЗаказПоставщику = ТаблицаЗаказа.Ссылка
	|				И Таблица.КодСтроки = ТаблицаЗаказа.КодСтроки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.ЗаказПоставщику,
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика,
	|		Таблица.КодСтроки,
	|		Таблица.Склад,
	|		Таблица.КОформлениюРасход,
	|		Таблица.ЗаказПоставщику,
	|		ТаблицаЗаказа.Назначение
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Обороты(, , Регистратор, ЗаказПоставщику В (&Заказы)) КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТаблицаЗаказа
	|			ПО Таблица.ЗаказПоставщику = ТаблицаЗаказа.Ссылка
	|				И Таблица.КодСтроки = ТаблицаЗаказа.КодСтроки
	|	ГДЕ
	|		Таблица.Регистратор = &ИсключаемаяНакладная) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Распоряжение,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.КодСтроки,
	|	Таблица.Склад,
	|	Таблица.ЗаказПоставщику,
	|	Таблица.Назначение";
	
	КодыСтрокЗаказов = Запрос.Выполнить().Выгрузить();
	
	Возврат КодыСтрокЗаказов;
	
КонецФункции

// Текст запроса получает остаток по ресурсам Заказано, КОформлению, Сумма
// Остаток дополняется движениями, сделанными накладной заданной в параметре Регистратор.
//
// Параметры:
//  ИмяВременнойТаблицы	 - Строка - Поместить результат во временную таблицу с заданным именем. 
//  ОтборПоИзмерениям	 - Структура - Ключ - имя измерения, Значение - имя параметра в запросе, например:
//  									Новый Структура("Номенклатура", "Товар") будет преобразовано в тексте запроса в:
//  									Номенклатура В(&Товар)
//  Выражение			 - Строка - Условие для секции ИМЕЮЩИЕ по ресурсам.
//  								Например, строка вида "КОформлению <> 0" будет преобразована в тексте запроса в:
//  								СУММА(Набор.КОформлению) <> 0
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаОстатки(ИмяВременнойТаблицы = "", ОтборПоИзмерениям = Неопределено, Выражение = "") Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Набор.ЗаказПоставщику     КАК ЗаказПоставщику,
	|	Набор.Номенклатура        КАК Номенклатура,
	|	Набор.Характеристика      КАК Характеристика,
	|	Набор.КодСтроки           КАК КодСтроки,
	|	Набор.Склад               КАК Склад,
	|	СУММА(Набор.Заказано)     КАК Заказано,
	|	СУММА(Набор.КОформлению)  КАК КОформлению,
	|	СУММА(Набор.КПоступлению) КАК КПоступлению,
	|	СУММА(Набор.Сумма)        КАК Сумма
	|ПОМЕСТИТЬ ИмяТаблицы
	|ИЗ(
	|	ВЫБРАТЬ
	|		Таблица.ЗаказПоставщику     КАК ЗаказПоставщику,
	|		Таблица.Номенклатура        КАК Номенклатура,
	|		Таблица.Характеристика      КАК Характеристика,
	|		Таблица.КодСтроки           КАК КодСтроки,
	|		Таблица.Склад               КАК Склад,
	|		Таблица.ЗаказаноОстаток     КАК Заказано,
	|		Таблица.КОформлениюОстаток  КАК КОформлению,
	|		Таблица.КПоступлениюОстаток КАК КПоступлению,
	|		Таблица.СуммаОстаток        КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(, 
	|			&ОтборПоИзмерениям
	|			) КАК Таблица
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		Таблица.ЗаказПоставщику     КАК ЗаказПоставщику,
	|		Таблица.Номенклатура        КАК Номенклатура,
	|		Таблица.Характеристика      КАК Характеристика,
	|		Таблица.КодСтроки           КАК КодСтроки,
	|		Таблица.Склад               КАК Склад,
	|		Таблица.Заказано            КАК Заказано,
	|		Таблица.КОформлению         КАК КОформлению,
	|		Таблица.КПоступлению        КАК КПоступлению,
	|		Таблица.Сумма               КАК Сумма
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК Таблица
	|	ГДЕ
	|		Активность
	|		И Регистратор В(&Регистратор)
	|		И ВидДвижения = ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
	|		И &ОтборПоИзмерениям
	|	) КАК Набор
	|
	|СГРУППИРОВАТЬ ПО
	|	Набор.ЗаказПоставщику,
	|	Набор.Номенклатура,
	|	Набор.Характеристика,
	|	Набор.КодСтроки,
	|	Набор.Склад
	|
	|,&ИМЕЮЩИЕ";
	
	Если Не ПустаяСтрока(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
		ТекстЗапроса = ТекстЗапроса + 
		"
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаказПоставщику,
		|	КодСтроки";
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ИмяТаблицы", "");
	КонецЕсли;
	
	ТекстОтбораПоИзмерениям = ОбщегоНазначенияУТ.ТекстОтбораПоКоллекцииОтборов(ОтборПоИзмерениям);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИзмерениям", ТекстОтбораПоИзмерениям);
	
	Если Не ПустаяСтрока(Выражение) Тогда
		
		Если СтрНайти(Выражение, "КОформлению") <> 0 Тогда
			Выражение = СтрЗаменить(Выражение, "КОформлению", "СУММА(Набор.КОформлению)");
		КонецЕсли;
		
		Если СтрНайти(Выражение, "КПоступлению") <> 0 Тогда
			Выражение = СтрЗаменить(Выражение, "КПоступлению", "СУММА(Набор.КПоступлению)");
		КонецЕсли;
		
		Если СтрНайти(Выражение, "Заказано") <> 0 Тогда
			Выражение = СтрЗаменить(Выражение, "Заказано", "СУММА(Набор.Заказано)");
		КонецЕсли;
		
		Если СтрНайти(Выражение, "Сумма") <> 0 Тогда
			Выражение = СтрЗаменить(Выражение, "Сумма", "СУММА(Набор.Сумма)");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ИМЕЮЩИЕ", "ИМЕЮЩИЕ " + Выражение);
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ИМЕЮЩИЕ", "");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса распоряжений к оформлению
// 
// Параметры:
// 	ИмяРесурса - Строка
// Возвращаемое значение:
// 	Строка - текст запрос - временные таблицы РаспоряженияКОформлению.
//
Функция ТекстЗапросаРаспоряженияКОформлению(ИмяРесурса) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Распоряжения.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ РаспоряженияКОформлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		Распоряжения.ЗаказПоставщику КАК Распоряжение,
	|		&ИмяРесурсаОстаток                  КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				ЗаказПоставщику В (
	|					ВЫБРАТЬ
	|						РаспоряженияНакладной.Распоряжение КАК Распоряжение
	|					ИЗ
	|						РаспоряженияНакладной КАК РаспоряженияНакладной)) КАК Распоряжения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Распоряжения.ЗаказПоставщику КАК Распоряжение,
	|		ВЫБОР
	|			КОГДА Распоряжения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -&ИмяРесурса
	|			ИНАЧЕ &ИмяРесурса
	|		КОНЕЦ КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам КАК Распоряжения
	|	ГДЕ
	|		Распоряжения.Регистратор = &Регистратор
	|		И Распоряжения.Активность
	|		И Распоряжения.ЗаказПоставщику В (
	|			ВЫБРАТЬ
	|				РаспоряженияНакладной.Распоряжение КАК Распоряжение
	|			ИЗ
	|				РаспоряженияНакладной КАК РаспоряженияНакладной)
	|	) КАК Распоряжения
	|
	|СГРУППИРОВАТЬ ПО
	|	Распоряжения.Распоряжение
	|
	|ИМЕЮЩИЕ
	|	СУММА(Распоряжения.КОформлению) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРесурсаОстаток", "Распоряжения." + ИмяРесурса + "Остаток");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРесурса",        "Распоряжения." + ИмяРесурса);
	
	Возврат ТекстЗапроса;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ЗаказПоставщику.Организация)
	|	И ЗначениеРазрешено(Склад)
	|	И ЗначениеРазрешено(ЗаказПоставщику.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли