#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Склад)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Запрос - Запрос -
//  ИмяТаблицы - Строка - 
//  Заказы - Массив Из ОпределяемыйТип.ОжидаемаяОтгрузкаИлиПоступление
//  ПодключаемыйНабор - РегистрНакопленияНаборЗаписей.ЗапасыИПотребности - набор, из которого нужно взять незаписанные
//                                                                          в базу движения
// Возвращаемое значение:
//  Соответствие Из Структура:
//   * ЕстьИзмененияПоЗаказу- Булево
//   * ЕстьИзмененияПоСлужебномуРегистратору - Булево
Функция РассчитатьГрафикПоЗаказамВоВременнуюТаблицу(Запрос, ИмяТаблицы, Заказы, ПодключаемыйНабор = Неопределено) Экспорт
	
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.УстановитьПараметр("ИсключаемыйРегистратор", Неопределено);
	
	ТекстДвижений =
		"ВЫБРАТЬ
		|	Движения.Период КАК Период,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	Движения.Поступит КАК Поступит,
		|	Движения.Заказано КАК Заказано,
		|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
		|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
		|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
		|	Движения.КОбеспечению КАК КОбеспечению,
		|	Движения.НеОбеспечивать КАК НеОбеспечивать,
		|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности КАК Движения
		|ГДЕ
		|	Движения.Заказ В(&Заказы)
		|		И НЕ Движения.Регистратор = &ИсключаемыйРегистратор
		|		И Движения.Активность
		|		И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)";
	
	Если ПодключаемыйНабор <> Неопределено Тогда
		
		Запрос.УстановитьПараметр("ПодключаемыйНабор", ПодключаемыйНабор.Выгрузить());
		Запрос.УстановитьПараметр("ИсключаемыйРегистратор", ПодключаемыйНабор.Отбор.Регистратор.Значение);
		
		Тексты = Новый Массив();
		Тексты.Добавить(ТекстДвижений);
		Текст =
			"ВЫБРАТЬ
			|	Набор.Период КАК Период,
			|	Набор.ВидДвижения КАК ВидДвижения,
			|	Набор.Номенклатура КАК Номенклатура,
			|	Набор.Характеристика КАК Характеристика,
			|	Набор.Склад КАК Склад,
			|	Набор.Назначение КАК Назначение,
			|	Набор.Заказ КАК Заказ,
			|	Набор.ДатаСобытия КАК ДатаСобытия,
			|	Набор.Поступит КАК Поступит,
			|	Набор.Заказано КАК Заказано,
			|	Набор.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	Набор.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	Набор.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	Набор.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	Набор.КОбеспечению КАК КОбеспечению,
			|	Набор.НеОбеспечивать КАК НеОбеспечивать,
			|	Набор.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
			|ИЗ
			|	ПодключаемыйНабор КАК Набор";
		
		Тексты.Добавить(Текст);
		ТекстДвижений = СтрСоединить(Тексты, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
		ТекстВременнойТаблицы =
			"ВЫБРАТЬ
			|	Набор.Период КАК Период,
			|	Набор.ВидДвижения КАК ВидДвижения,
			|	Набор.Номенклатура КАК Номенклатура,
			|	Набор.Характеристика КАК Характеристика,
			|	Набор.Склад КАК Склад,
			|	Набор.Назначение КАК Назначение,
			|	Набор.Заказ КАК Заказ,
			|	Набор.ДатаСобытия КАК ДатаСобытия,
			|	Набор.Поступит КАК Поступит,
			|	Набор.Заказано КАК Заказано,
			|	Набор.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	Набор.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	Набор.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	Набор.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	Набор.КОбеспечению КАК КОбеспечению,
			|	Набор.НеОбеспечивать КАК НеОбеспечивать,
			|	Набор.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
			|ПОМЕСТИТЬ ПодключаемыйНабор
			|ИЗ
			|	&ПодключаемыйНабор КАК Набор
			|ГДЕ
			|	Набор.Заказ В(&Заказы)
			|		И Набор.Активность
			|		И Набор.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)";
		
	КонецЕсли;
	
	ТекстДвижений = СтрШаблон("(%1)", ТекстДвижений);
	Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(Движения.Период) КАК Период,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.Поступит
		|				ИНАЧЕ - Движения.Поступит
		|			КОНЕЦ) КАК Поступит,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.Заказано
		|				ИНАЧЕ - Движения.Заказано
		|			КОНЕЦ) КАК Заказано,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.ЗакрытьГрафикПоступления
		|				ИНАЧЕ - Движения.ЗакрытьГрафикПоступления
		|			КОНЕЦ) КАК ЗакрытьГрафикПоступления,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.РезервироватьНаСкладе
		|				ИНАЧЕ - Движения.РезервироватьНаСкладе
		|			КОНЕЦ) КАК РезервироватьНаСкладе,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.РезервироватьПоМереПоступления
		|				ИНАЧЕ - Движения.РезервироватьПоМереПоступления
		|			КОНЕЦ) КАК РезервироватьПоМереПоступления,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.ОтложитьРезервирование
		|				ИНАЧЕ - Движения.ОтложитьРезервирование
		|			КОНЕЦ) КАК ОтложитьРезервирование,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.КОбеспечению
		|				ИНАЧЕ - Движения.КОбеспечению
		|			КОНЕЦ) КАК КОбеспечению,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.НеОбеспечивать
		|				ИНАЧЕ - Движения.НеОбеспечивать
		|			КОНЕЦ) КАК НеОбеспечивать,
		|	СУММА(ВЫБОР
		|				КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.ЗакрытьГрафикОтгрузки
		|				ИНАЧЕ - Движения.ЗакрытьГрафикОтгрузки
		|			КОНЕЦ) КАК ЗакрытьГрафикОтгрузки
		|ПОМЕСТИТЬ ОборотыГрафика
		|ИЗ
		|	НаборПереопределяемый КАК Движения
		|СГРУППИРОВАТЬ ПО
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Склад,
		|	Движения.Назначение,
		|	Движения.Заказ,
		|	Движения.ДатаСобытия
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, Заказ
		|;
		|ВЫБРАТЬ
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	СУММА(Движения.ЗакрытьГрафикПоступления) КАК ЗакрытьГрафикПоступления,
		|	СУММА(Движения.ЗакрытьГрафикОтгрузки) КАК ЗакрытьГрафикОтгрузки
		|ПОМЕСТИТЬ ОстаткиГрафика
		|ИЗ
		|	ОборотыГрафика КАК Движения
		|СГРУППИРОВАТЬ ПО
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Склад,
		|	Движения.Назначение,
		|	Движения.Заказ
		|ИМЕЮЩИЕ
		|	СУММА(Движения.ЗакрытьГрафикПоступления) > 0
		|		ИЛИ СУММА(Движения.ЗакрытьГрафикОтгрузки) > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, Заказ
		|;
		|ВЫБРАТЬ
		|	ОборотыГрафика.Период КАК Период,
		|	ОстаткиГрафика.Номенклатура КАК Номенклатура,
		|	ОстаткиГрафика.Характеристика КАК Характеристика,
		|	ОстаткиГрафика.Склад КАК Склад,
		|	ОстаткиГрафика.Назначение КАК Назначение,
		|	ОстаткиГрафика.Заказ КАК Заказ,
		|	ОборотыГрафика.ДатаСобытия КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.ДатаСобытия = ДАТАВРЕМЯ(1, 1, 1) И ОборотыГрафика.Заказано > 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПорядокДляОжидаемыхПоступлений,
		|	ОстаткиГрафика.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
		|	ОстаткиГрафика.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.Поступит < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.Поступит
		|	КОНЕЦ КАК Поступит,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.Заказано < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.Заказано
		|	КОНЕЦ КАК Заказано,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.РезервироватьНаСкладе < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.РезервироватьНаСкладе
		|	КОНЕЦ КАК РезервироватьНаСкладе,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.РезервироватьПоМереПоступления < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.РезервироватьПоМереПоступления
		|	КОНЕЦ КАК РезервироватьПоМереПоступления,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.ОтложитьРезервирование < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.ОтложитьРезервирование
		|	КОНЕЦ КАК ОтложитьРезервирование,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.КОбеспечению < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.КОбеспечению
		|	КОНЕЦ КАК КОбеспечению,
		|	ВЫБОР
		|		КОГДА ОборотыГрафика.НеОбеспечивать < 0
		|			ТОГДА 0
		|		ИНАЧЕ ОборотыГрафика.НеОбеспечивать
		|	КОНЕЦ КАК НеОбеспечивать
		|ИЗ
		|	ОстаткиГрафика КАК ОстаткиГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыГрафика КАК ОборотыГрафика
		|		ПО ОборотыГрафика.Номенклатура = ОстаткиГрафика.Номенклатура
		|		 И ОборотыГрафика.Характеристика = ОстаткиГрафика.Характеристика
		|		 И ОборотыГрафика.Склад = ОстаткиГрафика.Склад
		|		 И ОборотыГрафика.Назначение = ОстаткиГрафика.Назначение
		|		 И ОборотыГрафика.Заказ = ОстаткиГрафика.Заказ
		|		 И (ОборотыГрафика.Поступит > 0
		|			ИЛИ ОборотыГрафика.Заказано > 0
		|			ИЛИ ОборотыГрафика.РезервироватьНаСкладе > 0
		|			ИЛИ ОборотыГрафика.РезервироватьПоМереПоступления > 0
		|			ИЛИ ОборотыГрафика.ОтложитьРезервирование > 0
		|			ИЛИ ОборотыГрафика.КОбеспечению > 0
		|			ИЛИ ОборотыГрафика.НеОбеспечивать > 0)
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение,
		|	Заказ,
		|	ПорядокДляОжидаемыхПоступлений,
		|	ДатаСобытия,
		|	Период,
		|	Поступит УБЫВ,
		|	РезервироватьНаСкладе УБЫВ,
		|	РезервироватьПоМереПоступления УБЫВ,
		|	ОтложитьРезервирование УБЫВ,
		|	КОбеспечению УБЫВ";
	
	Текст = СтрЗаменить(Текст, "НаборПереопределяемый", ТекстДвижений);
	Если ПодключаемыйНабор <> Неопределено Тогда
		
		Тексты = Новый Массив();
		Тексты.Добавить(ТекстВременнойТаблицы);
		Тексты.Добавить(Текст);
		Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
		
	КонецЕсли;
	Запрос.Текст = Текст;
	
	График = Запрос.Выполнить().Выгрузить(); // ТаблицаЗначений -
	График.Колонки.Добавить("ЕстьГрафик", Новый ОписаниеТипов("Булево"));
	График.Колонки.Добавить("Регистратор", Метаданные.РегистрыНакопления.ЗапасыИПотребности.СтандартныеРеквизиты.Регистратор.Тип);
	
	Номенклатура = Неопределено;
	Характеристика = Неопределено;
	Склад = Неопределено;
	Назначение = Неопределено;
	Заказ = Неопределено;
	
	Расчеты = Новый Соответствие();
	Регистраторы = Документы.РегистраторЗапасыИПотребности.РегистраторыПоРаспоряжениям(Заказы);
	Для Индекс = 0 По График.Количество() - 1 Цикл
		
		ТекСтрока = График[Индекс];
		Если ТекСтрока.Номенклатура <> Номенклатура
				Или ТекСтрока.Характеристика <> Характеристика
				Или ТекСтрока.Склад <> Склад
				Или ТекСтрока.Назначение <> Назначение
				Или ТекСтрока.Заказ <> Заказ Тогда
				
				Номенклатура = ТекСтрока.Номенклатура;
				Характеристика = ТекСтрока.Характеристика;
				Склад = ТекСтрока.Склад;
				Назначение = ТекСтрока.Назначение;
				Заказ = ТекСтрока.Заказ;
				ЗакрытьГрафикПоступленияПоступит = ТекСтрока.ЗакрытьГрафикПоступления;
				ЗакрытьГрафикПоступленияЗаказано = ТекСтрока.ЗакрытьГрафикПоступления;
				ЗакрытьГрафикОтгрузки = ТекСтрока.ЗакрытьГрафикОтгрузки;
		КонецЕсли;
		
		Поступит = Мин(ТекСтрока.Поступит, ЗакрытьГрафикПоступленияПоступит);
		ЗакрытьГрафикПоступленияПоступит = ЗакрытьГрафикПоступленияПоступит - Поступит;
		ТекСтрока.Поступит = -Поступит;
		
		Заказано = Мин(ТекСтрока.Заказано, ЗакрытьГрафикПоступленияЗаказано);
		ЗакрытьГрафикПоступленияЗаказано = ЗакрытьГрафикПоступленияЗаказано - Заказано;
		ТекСтрока.Заказано = -Заказано;
		
		Потребность = Мин(ТекСтрока.РезервироватьНаСкладе, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.РезервироватьНаСкладе = -Потребность;
		
		Потребность = Мин(ТекСтрока.РезервироватьПоМереПоступления, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.РезервироватьПоМереПоступления = -Потребность;
		
		Потребность = Мин(ТекСтрока.ОтложитьРезервирование, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.ОтложитьРезервирование = -Потребность;
		
		Потребность = Мин(ТекСтрока.КОбеспечению, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.КОбеспечению = -Потребность;
		
		Потребность = Мин(ТекСтрока.НеОбеспечивать, ЗакрытьГрафикОтгрузки);
		ЗакрытьГрафикОтгрузки = ЗакрытьГрафикОтгрузки - Потребность;
		ТекСтрока.НеОбеспечивать = -Потребность;
		
		ТекСтрока.Регистратор = Регистраторы.Получить(ТекСтрока.Заказ);
		ЕстьИзмененияПоСлужебномуРегистратору = Ложь;
		ЕстьИзмененияПоЗаказу = ТекСтрока.РезервироватьНаСкладе < 0
			Или ТекСтрока.РезервироватьПоМереПоступления < 0 Или ТекСтрока.ОтложитьРезервирование < 0
			Или ТекСтрока.КОбеспечению < 0 Или ТекСтрока.НеОбеспечивать < 0;
			
		Если ТекСтрока.Поступит < 0 Или ТекСтрока.Заказано < 0 Тогда
			Если ТекСтрока.Регистратор = ТекСтрока.Заказ Тогда
				ЕстьИзмененияПоЗаказу = Истина;
			Иначе
				ЕстьИзмененияПоСлужебномуРегистратору = Истина;
			КонецЕсли;
		КонецЕсли;
		ТекСтрока.ЕстьГрафик = ЕстьИзмененияПоСлужебномуРегистратору Или ЕстьИзмененияПоЗаказу;
		
		Если ТекСтрока.ЕстьГрафик И Расчеты.Получить(ТекСтрока.Заказ) = Неопределено Тогда
			Расчет = Новый Структура();
			Расчет.Вставить("ЕстьИзмененияПоЗаказу", ЕстьИзмененияПоЗаказу);
			Расчет.Вставить("ЕстьИзмененияПоСлужебномуРегистратору", ЕстьИзмененияПоСлужебномуРегистратору);
			Расчет.Вставить("Регистратор", Регистраторы.Получить(Заказ));
			Расчеты.Вставить(ТекСтрока.Заказ, Расчет);
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого Заказ Из Заказы Цикл
		Если Расчеты.Получить(Заказ) = Неопределено Тогда
			Расчет = Новый Структура();
			Расчет.Вставить("ЕстьИзмененияПоЗаказу", Регистраторы.Получить(Заказ) = Заказ);
			Расчет.Вставить("ЕстьИзмененияПоСлужебномуРегистратору", Регистраторы.Получить(Заказ) <> Заказ);
			Расчет.Вставить("Регистратор", Регистраторы.Получить(Заказ));
			Расчеты.Вставить(Заказ, Расчет);
		КонецЕсли;
	КонецЦикла;
	Запрос.УстановитьПараметр("ТаблицаГрафикПоступления", График.Скопировать(Новый Структура("ЕстьГрафик", Истина)));
	
	Текст =
		"ВЫБРАТЬ
		|	График.Регистратор КАК Регистратор,
		|	График.Период КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ИСТИНА КАК Активность,
		|	График.Номенклатура КАК Номенклатура,
		|	График.Характеристика КАК Характеристика,
		|	График.Склад КАК Склад,
		|	График.Назначение КАК Назначение,
		|	График.Заказ КАК Заказ,
		|	График.ДатаСобытия КАК ДатаСобытия,
		|	0 КАК ВНаличии,
		|	График.Поступит КАК Поступит,
		|	График.Заказано КАК Заказано,
		|	График.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
		|	График.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	График.ОтложитьРезервирование КАК ОтложитьРезервирование,
		|	График.КОбеспечению КАК КОбеспечению,
		|	График.НеОбеспечивать КАК НеОбеспечивать,
		|	0 КАК ЗакрытьГрафикПоступления,
		|	0 КАК ЗакрытьГрафикОтгрузки,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.РасчетГрафика) КАК ТипЗаписи,
		|	ЛОЖЬ КАК Сторно
		|ПОМЕСТИТЬ ТаблицаПереопределяемый
		|ИЗ
		|	&ТаблицаГрафикПоступления КАК График";
	Запрос.Текст = СтрЗаменить(Текст, "ТаблицаПереопределяемый", ИмяТаблицы);
	Запрос.Выполнить();
	
	Возврат Расчеты;
	
КонецФункции

// Параметры:
//  Запрос - Запрос -
//  Расчеты - См. РегистрыНакопления.ЗапасыИПотребности.РассчитатьГрафикПоЗаказамВоВременнуюТаблицу
Процедура ЗаписатьРезультатРасчетаГрафика(Запрос, Расчеты) Экспорт

	НаборЗаписейГрафик = СоздатьНаборЗаписей();
	НаборЗаписейГрафик.ОбменДанными.Загрузка = Истина;
	Для Каждого Расчет Из Расчеты Цикл
		
		Заказ = Расчет.Ключ;
		ЕстьИзмененияПоЗаказу = Расчет.Значение.ЕстьИзмененияПоЗаказу;
		ЕстьИзмененияПоСлужебномуРегистратору = Расчет.Значение.ЕстьИзмененияПоСлужебномуРегистратору;
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("ЕстьИзмененияПоЗаказу", ЕстьИзмененияПоЗаказу);
		Запрос.УстановитьПараметр("ЕстьИзмененияПоСлужебномуРегистратору", ЕстьИзмененияПоСлужебномуРегистратору);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Движения.Регистратор КАК Регистратор,
			|	Движения.Период КАК Период,
			|	Движения.ВидДвижения КАК ВидДвижения,
			|	Движения.Активность КАК Активность,
			|	Движения.Номенклатура КАК Номенклатура,
			|	Движения.Характеристика КАК Характеристика,
			|	Движения.Склад КАК Склад,
			|	Движения.Назначение КАК Назначение,
			|	Движения.Заказ КАК Заказ,
			|	Движения.ДатаСобытия КАК ДатаСобытия,
			|	Движения.ВНаличии КАК ВНаличии,
			|	Движения.Поступит КАК Поступит,
			|	Движения.Заказано КАК Заказано,
			|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	Движения.КОбеспечению КАК КОбеспечению,
			|	Движения.НеОбеспечивать КАК НеОбеспечивать,
			|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	Движения.ОтгружаемыйЗаказ КАК ОтгружаемыйЗаказ,
			|	Движения.ТипЗаписи КАК ТипЗаписи,
			|	Движения.Сторно КАК Сторно
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Движения
			|ГДЕ
			|	&ЕстьИзмененияПоЗаказу
			|		И Движения.Регистратор = &Заказ
			|		И Движения.ТипЗаписи В(
			|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ОтложенноеРезервирование))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РезультатыРасчета.Заказ КАК Регистратор,
			|	РезультатыРасчета.Период КАК Период,
			|	РезультатыРасчета.ВидДвижения КАК ВидДвижения,
			|	РезультатыРасчета.Активность КАК Активность,
			|	РезультатыРасчета.Номенклатура КАК Номенклатура,
			|	РезультатыРасчета.Характеристика КАК Характеристика,
			|	РезультатыРасчета.Склад КАК Склад,
			|	РезультатыРасчета.Назначение КАК Назначение,
			|	РезультатыРасчета.Заказ КАК Заказ,
			|	РезультатыРасчета.ДатаСобытия КАК ДатаСобытия,
			|	РезультатыРасчета.ВНаличии КАК ВНаличии,
			|	РезультатыРасчета.Поступит КАК Поступит,
			|	РезультатыРасчета.Заказано КАК Заказано,
			|	РезультатыРасчета.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	РезультатыРасчета.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	РезультатыРасчета.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	РезультатыРасчета.КОбеспечению КАК КОбеспечению,
			|	РезультатыРасчета.НеОбеспечивать КАК НеОбеспечивать,
			|	РезультатыРасчета.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	РезультатыРасчета.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	НЕОПРЕДЕЛЕНО КАК ОтгружаемыйЗаказ,
			|	РезультатыРасчета.ТипЗаписи КАК ТипЗаписи,
			|	РезультатыРасчета.Сторно КАК Сторно
			|ИЗ
			|	РезультатыРасчетаГрафика КАК РезультатыРасчета
			|ГДЕ
			|	&ЕстьИзмененияПоЗаказу
			|		И РезультатыРасчета.Заказ = &Заказ
			|		И РезультатыРасчета.Регистратор = &Заказ
			|;
			|
			|///////////////////////////////////////////
			|ВЫБРАТЬ
			|	РезультатыРасчета.Регистратор КАК Регистратор,
			|	РезультатыРасчета.Период КАК Период,
			|	РезультатыРасчета.ВидДвижения КАК ВидДвижения,
			|	РезультатыРасчета.Активность КАК Активность,
			|	РезультатыРасчета.Номенклатура КАК Номенклатура,
			|	РезультатыРасчета.Характеристика КАК Характеристика,
			|	РезультатыРасчета.Склад КАК Склад,
			|	РезультатыРасчета.Назначение КАК Назначение,
			|	РезультатыРасчета.Заказ КАК Заказ,
			|	РезультатыРасчета.ДатаСобытия КАК ДатаСобытия,
			|	РезультатыРасчета.ВНаличии КАК ВНаличии,
			|	РезультатыРасчета.Поступит КАК Поступит,
			|	РезультатыРасчета.Заказано КАК Заказано,
			|	РезультатыРасчета.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	РезультатыРасчета.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	РезультатыРасчета.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	РезультатыРасчета.КОбеспечению КАК КОбеспечению,
			|	РезультатыРасчета.НеОбеспечивать КАК НеОбеспечивать,
			|	РезультатыРасчета.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	РезультатыРасчета.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	НЕОПРЕДЕЛЕНО КАК ОтгружаемыйЗаказ,
			|	РезультатыРасчета.ТипЗаписи КАК ТипЗаписи,
			|	РезультатыРасчета.Сторно КАК Сторно
			|ИЗ
			|	РезультатыРасчетаГрафика КАК РезультатыРасчета
			|ГДЕ
			|	&ЕстьИзмененияПоСлужебномуРегистратору
			|		И РезультатыРасчета.Заказ = &Заказ
			|		И РезультатыРасчета.Регистратор <> &Заказ";
			
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		Если ЕстьИзмененияПоЗаказу И ЗначениеЗаполнено(Расчет.Значение.Регистратор) Тогда
			Таблица = ПакетРезультатов[0].Выгрузить();
			НаборЗаписейГрафик.Отбор.Регистратор.Установить(Расчет.Значение.Регистратор);
			НаборЗаписейГрафик.Загрузить(Таблица);
			НаборЗаписейГрафик.Записать();
		КонецЕсли;
		Если ЕстьИзмененияПоСлужебномуРегистратору Тогда
			Таблица = ПакетРезультатов[1].Выгрузить();
			НаборЗаписейГрафик.Отбор.Регистратор.Установить(Расчет.Значение.Регистратор);
			НаборЗаписейГрафик.Загрузить(Таблица);
			НаборЗаписейГрафик.Записать();
		КонецЕсли;
		
	КонецЦикла

КонецПроцедуры

// Параметры:
//  Набор - РегистрНакопленияНаборЗаписей.ЗапасыИПотребности -
Процедура ДополнитьНаборЗаписямиОтложенногоОбеспечения(Набор) Экспорт
	
	Если Набор.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаТоваров", Набор.Выгрузить());
	Запрос.УстановитьПараметр("Регистратор", Набор[0].Регистратор);
	
	Тексты = Новый Массив();
	Текст =
		"ВЫБРАТЬ
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Период КАК Период,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	Движения.ВНаличии КАК ВНаличии,
		|	Движения.Поступит КАК Поступит,
		|	Движения.Заказано КАК Заказано,
		|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
		|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
		|	Движения.КОбеспечению КАК КОбеспечению,
		|	Движения.НеОбеспечивать КАК НеОбеспечивать,
		|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
		|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
		|ПОМЕСТИТЬ ДвиженияПриЗаписи
		|ИЗ
		|	&ТаблицаТоваров КАК Движения";
	Тексты.Добавить(Текст);
	
	Если Набор.ДополнительныеСвойства.Свойство("АктуализацияОтложенногоОбеспечения") Тогда
		Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьЗаписи
			|ПОМЕСТИТЬ ТребуетсяПересчет";
	Иначе
		Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЕстьЗаписи
			|ПОМЕСТИТЬ ТребуетсяПересчет
			|ИЗ(
			|	ВЫБРАТЬ
			|		Движения.Регистратор КАК Регистратор,
			|		Движения.Период КАК Период,
			|		Движения.ВидДвижения КАК ВидДвижения,
			|		Движения.Номенклатура КАК Номенклатура,
			|		Движения.Характеристика КАК Характеристика,
			|		Движения.Склад КАК Склад,
			|		Движения.Назначение КАК Назначение,
			|		Движения.Заказ КАК Заказ,
			|		Движения.ДатаСобытия КАК ДатаСобытия,
			|		Движения.ВНаличии КАК ВНаличии,
			|		Движения.Поступит КАК Поступит,
			|		Движения.Заказано КАК Заказано,
			|		Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|		Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|		Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|		Движения.КОбеспечению КАК КОбеспечению,
			|		Движения.НеОбеспечивать КАК НеОбеспечивать,
			|		Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|		Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
			|	ИЗ
			|		ДвиженияПриЗаписи КАК Движения
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Движения.Регистратор КАК Регистратор,
			|		Движения.Период КАК Период,
			|		Движения.ВидДвижения КАК ВидДвижения,
			|		Движения.Номенклатура КАК Номенклатура,
			|		Движения.Характеристика КАК Характеристика,
			|		Движения.Склад КАК Склад,
			|		Движения.Назначение КАК Назначение,
			|		Движения.Заказ КАК Заказ,
			|		Движения.ДатаСобытия КАК ДатаСобытия,
			|		-Движения.ВНаличии КАК ВНаличии,
			|		-Движения.Поступит КАК Поступит,
			|		-Движения.Заказано КАК Заказано,
			|		-Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|		-Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|		-Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|		-Движения.КОбеспечению КАК КОбеспечению,
			|		-Движения.НеОбеспечивать КАК НеОбеспечивать,
			|		-Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|		-Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки
			|	ИЗ
			|		РегистрНакопления.ЗапасыИПотребности КАК Движения
			|	ГДЕ
			|		Движения.Регистратор = &Регистратор
			|			И Движения.Активность
			|			И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)) КАК Изменения
			|СГРУППИРОВАТЬ ПО
			|	Изменения.Регистратор,
			|	Изменения.Период,
			|	Изменения.ВидДвижения,
			|	Изменения.Номенклатура,
			|	Изменения.Характеристика,
			|	Изменения.Склад,
			|	Изменения.Назначение,
			|	Изменения.Заказ,
			|	Изменения.ДатаСобытия
			|ИМЕЮЩИЕ
			|	СУММА(Изменения.ВНаличии) <> 0
			|		ИЛИ СУММА(Изменения.Поступит) <> 0
			|		ИЛИ СУММА(Изменения.Заказано) <> 0
			|		ИЛИ СУММА(Изменения.РезервироватьНаСкладе) <> 0
			|		ИЛИ СУММА(Изменения.РезервироватьПоМереПоступления) <> 0
			|		ИЛИ СУММА(Изменения.ОтложитьРезервирование) <> 0
			|		ИЛИ СУММА(Изменения.КОбеспечению) <> 0
			|		ИЛИ СУММА(Изменения.НеОбеспечивать) <> 0
			|		ИЛИ СУММА(Изменения.ЗакрытьГрафикПоступления) <> 0
			|		ИЛИ СУММА(Изменения.ЗакрытьГрафикОтгрузки) <> 0";
	КонецЕсли;
	Тексты.Добавить(Текст);
	
	Текст =
		"ВЫБРАТЬ
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Период КАК Период,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления
		|ПОМЕСТИТЬ Строки
		|ИЗ
		|	ДвиженияПриЗаписи КАК Движения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТребуетсяПересчет КАК ТребуетсяПересчет
		|		ПО ТребуетсяПересчет.ЕстьЗаписи
		|ГДЕ
		|	Движения.РезервироватьПоМереПоступления <> 0
		|		И Движения.ДатаСобытия > &НачалоТекущегоДня
		|		И НЕ ТребуетсяПересчет.ЕстьЗаписи ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Строки.Номенклатура КАК Номенклатура,
		|	Строки.Характеристика КАК Характеристика,
		|	Строки.Склад КАК Склад
		|ПОМЕСТИТЬ РазличныеТоварыБезНазначений
		|ИЗ
		|	Строки КАК Строки
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	РасчетПереопределяемый.ГраницаПериода КАК ГраницаПериода
		|ПОМЕСТИТЬ ГраницыПериодаОбеспечения
		|ИЗ
		|	РазличныеТоварыБезНазначений КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаТоваров.Регистратор КАК Регистратор,
		|	ТаблицаТоваров.Период КАК Период,
		|	ТаблицаТоваров.ВидДвижения КАК ВидДвижения,
		|	ИСТИНА КАК Активность,
		|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
		|	ТаблицаТоваров.Характеристика КАК Характеристика,
		|	ТаблицаТоваров.Склад КАК Склад,
		|	ТаблицаТоваров.Назначение КАК Назначение,
		|	ТаблицаТоваров.Заказ КАК Заказ,
		|	ТаблицаТоваров.ДатаСобытия КАК ДатаСобытия,
		|	0 КАК ВНаличии,
		|	0 КАК Поступит,
		|	0 КАК Заказано,
		|	0 КАК РезервироватьНаСкладе,
		|	-ТаблицаТоваров.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	ТаблицаТоваров.РезервироватьПоМереПоступления КАК ОтложитьРезервирование,
		|	0 КАК КОбеспечению,
		|	0 КАК НеОбеспечивать,
		|	0 КАК ЗакрытьГрафикПоступления,
		|	0 КАК ЗакрытьГрафикОтгрузки,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ОтложенноеРезервирование) КАК ТипЗаписи,
		|	ЛОЖЬ КАК Сторно
		|ИЗ
		|	Строки КАК ТаблицаТоваров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГраницыПериодаОбеспечения КАК Границы
		|		ПО Границы.Номенклатура = ТаблицаТоваров.Номенклатура
		|		 И Границы.Характеристика = ТаблицаТоваров.Характеристика
		|		 И Границы.Склад = ТаблицаТоваров.Склад
		|		 И Границы.ГраницаПериода < ТаблицаТоваров.ДатаСобытия
		|		 И Границы.ГраницаПериода > ДАТАВРЕМЯ(1, 1, 1)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Движения.Регистратор КАК Регистратор,
		|	Движения.Период КАК Период,
		|	Движения.ВидДвижения КАК ВидДвижения,
		|	ИСТИНА КАК Активность,
		|	Движения.Номенклатура КАК Номенклатура,
		|	Движения.Характеристика КАК Характеристика,
		|	Движения.Склад КАК Склад,
		|	Движения.Назначение КАК Назначение,
		|	Движения.Заказ КАК Заказ,
		|	Движения.ДатаСобытия КАК ДатаСобытия,
		|	Движения.ВНаличии КАК ВНаличии,
		|	Движения.Поступит КАК Поступит,
		|	Движения.Заказано КАК Заказано,
		|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
		|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
		|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
		|	Движения.КОбеспечению КАК КОбеспечению,
		|	Движения.НеОбеспечивать КАК НеОбеспечивать,
		|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
		|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
		|	Движения.ТипЗаписи КАК ТипЗаписи,
		|	Движения.Сторно КАК Сторно
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности КАК Движения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТребуетсяПересчет КАК ТребуетсяПересчет
		|		ПО ТребуетсяПересчет.ЕстьЗаписи
		|ГДЕ
		|	Движения.Регистратор = &Регистратор
		|		И Движения.Активность
		|		И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ОтложенноеРезервирование)
		|		И ТребуетсяПересчет.ЕстьЗаписи ЕСТЬ NULL";
		
	Подстановки = ОбеспечениеВДокументахСервер.ПодстановкиГраницыОбеспечиваемогоПериода(
		"Товары.Номенклатура", "Товары.Характеристика", "Товары.Склад", "&НачалоТекущегоДня", "ИСТИНА");
	
	Текст = СтрЗаменить(Текст, "РасчетПереопределяемый.ГраницаПериода", Подстановки.Поле);
	Текст = СтрЗаменить(Текст, "ЛЕВОЕ СОЕДИНЕНИЕ РасчетПереопределяемый ПО ИСТИНА", Подстановки.Соединения);
	Тексты.Добавить(Текст);
	Запрос.Текст = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ТаблицаОтложенногоОбеспечения = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(ТаблицаОтложенногоОбеспечения, Набор);
	
КонецПроцедуры

// Параметры:
//  НаборЗаписей - РегистрНакопленияНаборЗаписей.ЗапасыИПотребности - записываемый набор
//  Ссылка - ЛюбаяСсылка - записываемый документ
//  ЭтоОбновлениеИБ - Булево - признак, что блокировки нужно установить из обработчика обновления регистра ЗапасыИПотребности
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ОжидаемаяОтгрузкаИлиПоступление
Функция УстановитьБлокировкиЗаказовИТоваров(НаборЗаписей, Ссылка, ЭтоОбновлениеИБ) Экспорт
	
	Запрос = Новый Запрос();
	Заказы = НаборЗаписей.Выгрузить(, "Заказ");
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Заказы.Заказ КАК Заказ
		|ПОМЕСТИТЬ ЗаказыПриЗаписи
		|ИЗ
		|	&Заказы КАК Заказы
		|ГДЕ
		|	Заказы.Заказ <> НЕОПРЕДЕЛЕНО
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////
		// Разделяемая блокировка на документ уже установлена, значит можно читать движения документа из базы
		// так как, документ не могут записать/изменить, а значит не могут изменить его движения.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Движения.Заказ КАК Заказ
		|ПОМЕСТИТЬ РазличныеЗаказы
		|ИЗ
		|	РегистрНакопления.ЗапасыИПотребности КАК Движения
		|ГДЕ
		|	Движения.Регистратор = &Регистратор
		|		И Движения.Активность
		|		И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
		|		И Движения.Заказ <> НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Движения.Заказ КАК Заказ
		|ИЗ
		|	ЗаказыПриЗаписи КАК Движения
		|ИНДЕКСИРОВАТЬ ПО
		|Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазличныеЗаказы.Заказ КАК Заказ,
		|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура
		|ИЗ
		|	РазличныеЗаказы КАК РазличныеЗаказы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(Таблица.Ссылка) КАК Регистратор
		|ИЗ
		|	РазличныеЗаказы КАК Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторЗапасыИПотребности КАК Таблица
		|		ПО Таблица.Распоряжение = Заказы.Заказ
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Распоряжение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Заказы.Заказ КАК Регистратор
		|ИЗ
		|	РазличныеЗаказы КАК Заказы
		|ГДЕ
		|	НЕ ТИПЗНАЧЕНИЯ(Заказы.Заказ) В(
		|		ТИП(Справочник.СоглашенияСПоставщиками),
		|		ТИП(Справочник.ДоговорыКонтрагентов))
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	&Регистратор КАК Регистратор";
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Регистраторы = ПакетРезультатов[ПакетРезультатов.ВГраница()];
	Заказы = ПакетРезультатов[ПакетРезультатов.ВГраница() - 1];
	Результат = Заказы.Выгрузить();
	БлокировкаДанных = Новый БлокировкаДанных();
	
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ЗапасыИПотребности");
	
	// Ждут регистраторы с такими же заказами как у текущего регистратора.
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Заказы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	// Нужно ответственно прочитать номенклатуру указанную в заказах нашего документа, а затем подложить под заказы расчетные записи.
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ЗапасыИПотребности.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Регистраторы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
	
	//@skip-check lock-out-of-try
	БлокировкаДанных.Заблокировать();
	
	Регистраторы = Регистраторы.Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	Запрос.УстановитьПараметр("ТаблицаТовары", НаборЗаписей.Выгрузить());
	
	ТекстыЗапроса = Новый Массив();
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Заказ КАК Заказ,
		|	Товары.ДатаСобытия КАК ДатаСобытия
		|ПОМЕСТИТЬ ДвиженияПриЗаписи
		|ИЗ
		|	&ТаблицаТовары КАК Товары
		|ГДЕ
		|	Товары.Активность");
	
	ТекстыИзмерений = Новый Массив();
	
	ТекстыИзмерений.Добавить(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.Назначение КАК Назначение,
		|	Товары.Заказ КАК Заказ,
		|	Товары.ДатаСобытия КАК ДатаСобытия
		|ИЗ
		|	ДвиженияПриЗаписи КАК Товары");
	
	РегистраторыПоТипам = РегистраторыПоТипам(Регистраторы);
	Для Каждого Элемент Из РегистраторыПоТипам Цикл
		
		ТекстПоТипуРегистратора =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Движения.Номенклатура КАК Номенклатура,
			|	Движения.Характеристика КАК Характеристика,
			|	Движения.Склад КАК Склад,
			|	Движения.Назначение КАК Назначение,
			|	Движения.Заказ КАК Заказ,
			|	Движения.ДатаСобытия КАК ДатаСобытия
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Движения
			|ГДЕ
			|	Движения.Регистратор В(&РегистраторыПереопределяемый)
			|		И Движения.Активность";
		ТекстПоТипуРегистратора = СтрЗаменить(ТекстПоТипуРегистратора, "РегистраторыПереопределяемый", Элемент.ИмяПараметра);
		ТекстыИзмерений.Добавить(ТекстПоТипуРегистратора);
		Запрос.УстановитьПараметр(Элемент.ИмяПараметра, Элемент.Регистраторы);
		
	КонецЦикла;
	
	ТекстРазличныеИзмерения = СтрСоединить(ТекстыИзмерений, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	ТекстыЗапроса.Добавить(ТекстРазличныеИзмерения);
	Запрос.Текст = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Товары = Запрос.Выполнить();
	
	// Блокируем фактические измерения, которые могут быть затронуты при записи наборов по текущему регистратору и по заказам.
	БлокировкаДанных = Новый БлокировкаДанных();
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрНакопления.ЗапасыИПотребности");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Назначение", "Назначение");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ", "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДатаСобытия", "ДатаСобытия");
	//@skip-check lock-out-of-try
	БлокировкаДанных.Заблокировать();
	
	Если Не ЭтоОбновлениеИБ Тогда
		ДосчитыватьРегистрРегламентнымЗаданием = РаспределениеЗапасов.ДосчитыватьРегистрРегламентнымЗаданием();
		Если Не ДосчитыватьРегистрРегламентнымЗаданием Тогда
			
		Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Склад КАК Склад
			|ПОМЕСТИТЬ ДвиженияПриЗаписи
			|ИЗ
			|	&ТаблицаТовары КАК Товары
			|ГДЕ
			|	Товары.Активность
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Товары.Номенклатура КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Склад КАК Склад
			|ИЗ
			|	ДвиженияПриЗаписи КАК Товары
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Движения.Номенклатура КАК Номенклатура,
			|	Движения.Характеристика КАК Характеристика,
			|	Движения.Склад КАК Склад
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Движения
			|ГДЕ
			|	Движения.Регистратор = &Регистратор
			|		И Движения.Активность";
			
			Товары = Запрос.Выполнить();
			БлокировкаДанных = Новый БлокировкаДанных();
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.РаспределениеЗапасов");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = Товары;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Характеристика", "Характеристика");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
			//@skip-check lock-out-of-try
			БлокировкаДанных.Заблокировать();
		КонецЕсли;
		
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаписатьЗаказыСогласноРасчетам(Запрос, Расчеты)
	
	НаборЗаписейГрафик = СоздатьНаборЗаписей();
	Для Каждого Расчет Из Расчеты Цикл
		
		Заказ = Расчет.Ключ;
		ЕстьИзмененияПоЗаказу = Расчет.Значение.ЕстьИзмененияПоЗаказу;
		ЕстьИзмененияПоСлужебномуРегистратору = Расчет.Значение.ЕстьИзмененияПоСлужебномуРегистратору;
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Запрос.УстановитьПараметр("ЕстьИзмененияПоЗаказу", ЕстьИзмененияПоЗаказу);
		Запрос.УстановитьПараметр("ЕстьИзмененияПоСлужебномуРегистратору", ЕстьИзмененияПоСлужебномуРегистратору);
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Движения.Регистратор КАК Регистратор,
			|	Движения.Период КАК Период,
			|	Движения.ВидДвижения КАК ВидДвижения,
			|	Движения.Активность КАК Активность,
			|	Движения.Номенклатура КАК Номенклатура,
			|	Движения.Характеристика КАК Характеристика,
			|	Движения.Склад КАК Склад,
			|	Движения.Назначение КАК Назначение,
			|	Движения.Заказ КАК Заказ,
			|	Движения.ДатаСобытия КАК ДатаСобытия,
			|	Движения.ВНаличии КАК ВНаличии,
			|	Движения.Поступит КАК Поступит,
			|	Движения.Заказано КАК Заказано,
			|	Движения.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	Движения.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	Движения.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	Движения.КОбеспечению КАК КОбеспечению,
			|	Движения.НеОбеспечивать КАК НеОбеспечивать,
			|	Движения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	Движения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	Движения.ТипЗаписи КАК ТипЗаписи,
			|	Движения.Сторно КАК Сторно,
			|	Движения.ОтгружаемыйЗаказ КАК ОтгружаемыйЗаказ
			|ИЗ
			|	РегистрНакопления.ЗапасыИПотребности КАК Движения
			|ГДЕ
			|	&ЕстьИзмененияПоЗаказу
			|		И Движения.Регистратор = &Заказ
			|		И Движения.ТипЗаписи В(
			|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись),
			|			ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ОтложенноеРезервирование))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РезультатыРасчета.Заказ КАК Регистратор,
			|	РезультатыРасчета.Период КАК Период,
			|	РезультатыРасчета.ВидДвижения КАК ВидДвижения,
			|	РезультатыРасчета.Активность КАК Активность,
			|	РезультатыРасчета.Номенклатура КАК Номенклатура,
			|	РезультатыРасчета.Характеристика КАК Характеристика,
			|	РезультатыРасчета.Склад КАК Склад,
			|	РезультатыРасчета.Назначение КАК Назначение,
			|	РезультатыРасчета.Заказ КАК Заказ,
			|	РезультатыРасчета.ДатаСобытия КАК ДатаСобытия,
			|	РезультатыРасчета.ВНаличии КАК ВНаличии,
			|	РезультатыРасчета.Поступит КАК Поступит,
			|	РезультатыРасчета.Заказано КАК Заказано,
			|	РезультатыРасчета.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	РезультатыРасчета.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	РезультатыРасчета.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	РезультатыРасчета.КОбеспечению КАК КОбеспечению,
			|	РезультатыРасчета.НеОбеспечивать КАК НеОбеспечивать,
			|	РезультатыРасчета.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	РезультатыРасчета.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	РезультатыРасчета.ТипЗаписи КАК ТипЗаписи,
			|	РезультатыРасчета.Сторно КАК Сторно,
			|	НЕОПРЕДЕЛЕНО КАК ОтгружаемыйЗаказ
			|ИЗ
			|	РезультатыРасчетаГрафика КАК РезультатыРасчета
			|ГДЕ
			|	&ЕстьИзмененияПоЗаказу
			|		И РезультатыРасчета.Заказ = &Заказ
			|		И РезультатыРасчета.Регистратор = &Заказ
			|;
			|
			|///////////////////////////////////////////
			|ВЫБРАТЬ
			|	РезультатыРасчета.Регистратор КАК Регистратор,
			|	РезультатыРасчета.Период КАК Период,
			|	РезультатыРасчета.ВидДвижения КАК ВидДвижения,
			|	РезультатыРасчета.Активность КАК Активность,
			|	РезультатыРасчета.Номенклатура КАК Номенклатура,
			|	РезультатыРасчета.Характеристика КАК Характеристика,
			|	РезультатыРасчета.Склад КАК Склад,
			|	РезультатыРасчета.Назначение КАК Назначение,
			|	РезультатыРасчета.Заказ КАК Заказ,
			|	РезультатыРасчета.ДатаСобытия КАК ДатаСобытия,
			|	РезультатыРасчета.ВНаличии КАК ВНаличии,
			|	РезультатыРасчета.Поступит КАК Поступит,
			|	РезультатыРасчета.Заказано КАК Заказано,
			|	РезультатыРасчета.РезервироватьНаСкладе КАК РезервироватьНаСкладе,
			|	РезультатыРасчета.РезервироватьПоМереПоступления КАК РезервироватьПоМереПоступления,
			|	РезультатыРасчета.ОтложитьРезервирование КАК ОтложитьРезервирование,
			|	РезультатыРасчета.КОбеспечению КАК КОбеспечению,
			|	РезультатыРасчета.НеОбеспечивать КАК НеОбеспечивать,
			|	РезультатыРасчета.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
			|	РезультатыРасчета.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
			|	РезультатыРасчета.ТипЗаписи КАК ТипЗаписи,
			|	РезультатыРасчета.Сторно КАК Сторно,
			|	НЕОПРЕДЕЛЕНО КАК ОтгружаемыйЗаказ
			|ИЗ
			|	РезультатыРасчетаГрафика КАК РезультатыРасчета
			|ГДЕ
			|	&ЕстьИзмененияПоСлужебномуРегистратору
			|		И РезультатыРасчета.Заказ = &Заказ
			|		И РезультатыРасчета.Регистратор <> &Заказ";
			
		ПакетРезультатов = Запрос.ВыполнитьПакет();
		
		Для Каждого Элемент Из ПакетРезультатов Цикл
			
			Таблица = Элемент.Выгрузить();
			
			Если Таблица.Количество() > 0 Тогда
				НаборЗаписейГрафик.Отбор.Регистратор.Установить(Таблица[0].Регистратор);
				НаборЗаписейГрафик.Загрузить(Таблица);
				НаборЗаписейГрафик.ОбменДанными.Загрузка = Истина;
				НаборЗаписейГрафик.ДополнительныеСвойства.Вставить("РегистрироватьНаУзлахПлановОбменаПриОбновленииИБ");
				НаборЗаписейГрафик.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
				НаборЗаписейГрафик.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РегистраторыПоТипам(Регистраторы)
	
	ТипыРегистраторов = Новый Соответствие();
	РегистраторыПоТипам = Новый Массив();
	
	Для Каждого Ссылка Из Регистраторы Цикл
		
		ТипРегистратора = ТипЗнч(Ссылка);
		ЭлементыМассива = ТипыРегистраторов[ТипРегистратора]; 
		Если ЭлементыМассива = Неопределено Тогда
			МетаданныеДокумента = Ссылка.Метаданные(); // ОбъектМетаданных
			ИмяПараметра = "Регистраторы" + МетаданныеДокумента.Имя;
			ЭлементыМассива = Новый Массив();
			ТипыРегистраторов.Вставить(ТипРегистратора, ЭлементыМассива);
			РегистраторыПоТипам.Добавить(Новый Структура("Регистраторы,ИмяПараметра", ЭлементыМассива, ИмяПараметра));
		КонецЕсли;
		
		ЭлементыМассива.Добавить(Ссылка);
		
	КонецЦикла;
	
	Возврат РегистраторыПоТипам;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - См. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ЗапасыИПотребности.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.47";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("33f66ffc-24cb-4c62-952f-d0b839908d27");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ЗапасыИПотребности.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Комментарий = НСтр("ru = 'Удаляет движения документов ""Корректировка отчета переработчика"".
		|Удаляет движения в документе ""Отчет переработчика"" версии 2.5 по номенклатуре с типом ""работа"", если отчет по заказу.
		|Заполняет реквизит ""Отгружаемый заказ"" в движениях заказов с действием ""Отгрузить""'");
	
	Читаемые = Новый Массив;
	
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ЗапасыИПотребности.ПолноеИмя());
	
	
	
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ЗапасыИПотребности.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыНакопления.ЗапасыИПотребности.ПолноеИмя();
	
	МассивТиповРегистраторов = Новый Массив();
	
	// Регистрация документов для заполнения реквизита ОтгружаемыйЗаказ.
	
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ЗаказНаВнутреннееПотребление.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя());
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ЗаказНаСборку.ПолноеИмя());
	
	
	
	МассивТиповРегистраторов.Добавить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя());
	
	// Регистрация документов для перепроведения.
	
	
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(МассивТиповРегистраторов, ",");
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	// Заполнение поля ОтгружаемыйЗаказ для заказов 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Движения.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЗапасыИПотребности КАК Движения
	|ГДЕ
	|	Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И Движения.ВНаличии > 0
	|		И Движения.ОтгружаемыйЗаказ = НЕОПРЕДЕЛЕНО
	|		И Движения.ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись)
	|		И ТИПЗНАЧЕНИЯ(Движения.Регистратор) В(
	|			ТИП(Документ.ЗаказКлиента),
	|			ТИП(Документ.ЗаказНаВнутреннееПотребление),
	|			ТИП(Документ.ЗаказНаПеремещение),
	|			ТИП(Документ.ЗаказНаСборку),
	
	
	
	|			ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	
	// Регистрация документов для перепроведения.
	
	
	
	|";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыНакопления.ЗапасыИПотребности.ПолноеИмя();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ИсключенияПриОбновлении = Новый Массив();
	
	СписокОписаний = Новый Массив();
	Описание = НСтр("ru = 'Не удалось заполнить реквизит ""Отгружаемый заказ"" в регистре накопления ""Запасы и потребности"".'");
	СписокОписаний.Добавить(Описание);
	
	Для Каждого СтрокаТаблицы Из ОбновляемыеДанные Цикл
		
		ЗаполнитьОтгружаемыйЗаказРегистратором =
			ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.ЗаказКлиента")
				Или ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление")
				Или ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.ЗаказНаПеремещение")
				Или ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.ЗаказНаСборку")
				
				
				
				Или ТипЗнч(СтрокаТаблицы.Регистратор) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента");
			
		ЗаполнитьОтгружаемыйЗаказЗапросом = ЛОЖЬ
				
				
				Или ЛОЖЬ;
			
		Если ЗаполнитьОтгружаемыйЗаказРегистратором Или ЗаполнитьОтгружаемыйЗаказЗапросом Тогда
			
			ПричинаИсключения = "";
			Рекомендация = "";
			
			НачатьТранзакцию();
			
			Попытка
				
				ПричинаИсключения = "БЛОКИРОВКА";
				
				Блокировка = Новый БлокировкаДанных;
				
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗапасыИПотребности.НаборЗаписей");
				ЭлементБлокировки.УстановитьЗначение("Регистратор", СтрокаТаблицы.Регистратор);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				
				Блокировка.Заблокировать();
				
				ПричинаИсключения = "ПЛОХИЕ_ДАННЫЕ";
				Рекомендация = НСтр("ru = 'Перепроведите документ вручную.'");
				
				НаборЗаписейИзменен = Ложь;
	
				НаборЗаписей = РегистрыНакопления.ЗапасыИПотребности.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(СтрокаТаблицы.Регистратор);
				НаборЗаписей.Прочитать();
				
				ОтгружаемыйЗаказ = Неопределено;
				Если ЗаполнитьОтгружаемыйЗаказРегистратором Тогда
					
					ОтгружаемыйЗаказ = СтрокаТаблицы.Регистратор;
					
				ИначеЕсли ЗаполнитьОтгружаемыйЗаказЗапросом Тогда
					
					
				КонецЕсли;
				
				ТипПервичнаяЗапись = Перечисления.ТипыЗаписейЗапасыИПотребности.ПервичнаяЗапись;
				Для Каждого Запись Из НаборЗаписей Цикл
					
					Если Запись.ОтгружаемыйЗаказ = Неопределено
							И Запись.ВНаличии > 0
							И Запись.ВидДвижения = ВидДвиженияНакопления.Расход
							И Запись.ТипЗаписи = ТипПервичнаяЗапись Тогда
						
						Запись.ОтгружаемыйЗаказ = ОтгружаемыйЗаказ;
						НаборЗаписейИзменен = Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ПричинаИсключения = "ЗАПИСЬ";
				
				Если НаборЗаписейИзменен Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей, ДополнительныеПараметры);
				КонецЕсли;
				
				ОбъектовОбработано = ОбъектовОбработано + 1;
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(),
					СтрокаТаблицы.Регистратор);
				
				Если ПричинаИсключения = "ПЛОХИЕ_ДАННЫЕ" Тогда
					
					ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(СтрокаТаблицы.Регистратор,
						Рекомендация, ИнформацияОбОшибке());
					ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
					
				ИначеЕсли ПричинаИсключения = "ЗАПИСЬ" Тогда
					
					ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении,
						ОбъектовОбработано, Параметры, ДополнительныеПараметры);
					ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении,
		ОбъектовОбработано, Параметры, ДополнительныеПараметры);
	
	ТипыРегистраторов = Новый Массив();
	
	
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;

	ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		ТипыРегистраторов, "РегистрНакопления.ЗапасыИПотребности", Параметры.Очередь, ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура СформироватьИЗаписатьДвижения(НаборЗаписей, Ссылка, ЗаписатьДвижения) Экспорт
	
	Если ЗаписатьДвижения Тогда
		
		// Получение первичных движений.
		ТаблицыДляДвижений = ПроведениеДокументов.ДанныеДокументаДляПроведения(Ссылка, "ЗапасыИПотребности");
		ТаблицаДанных = ТаблицыДляДвижений["Таблица" + "ЗапасыИПотребности"];
		НаборЗаписей.Загрузить(ТаблицаДанных);
		
		УстановитьБлокировкиЗаказовИТоваров(НаборЗаписей, Ссылка, Истина);
		
		МассивСтрокПоЗаказам = Новый Массив();
		ВозможноОтложенноеОбеспечение = Ложь;
		Для Каждого Строка Из ТаблицаДанных Цикл
			Если ЗначениеЗаполнено(Строка.Заказ) Тогда
				МассивСтрокПоЗаказам.Добавить(Строка);
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.ДатаСобытия) И Строка.РезервироватьПоМереПоступления <> 0 Тогда
				ВозможноОтложенноеОбеспечение = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Расчет отложенного резервирования.
		Если ВозможноОтложенноеОбеспечение Тогда
			
			ДополнитьНаборЗаписямиОтложенногоОбеспечения(НаборЗаписей);
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		// Расчет графика поступления и графика отгрузки.
		Если МассивСтрокПоЗаказам.Количество() > 0 Тогда
			
			ТаблицаЗаказов = ТаблицаДанных.Скопировать(МассивСтрокПоЗаказам, "Заказ"); // ТаблицаЗначений -
			ТаблицаЗаказов.Свернуть("Заказ");
			
			Запрос = Новый Запрос();
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
			ВсеЗаказы = ТаблицаЗаказов.ВыгрузитьКолонку("Заказ");
			Расчеты = РассчитатьГрафикПоЗаказамВоВременнуюТаблицу(Запрос, "РезультатыРасчетаГрафика", ВсеЗаказы);
			
			ЗаписатьЗаказыСогласноРасчетам(Запрос, Расчеты);
		КонецЕсли;
		
	Иначе
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
